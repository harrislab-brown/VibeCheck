
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001def8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001488  0801e1c8  0801e1c8  0001f1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f650  0801f650  00020650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f658  0801f658  00020658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801f65c  0801f65c  0002065c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002fc  24000000  0801f660  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001d744  240002fc  0801f95c  000212fc  2**2
                  ALLOC
  8 ._user_heap_stack 00006400  2401da40  0801f95c  00021a40  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000212fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003be30  00000000  00000000  0002132a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000078cd  00000000  00000000  0005d15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000029a0  00000000  00000000  00064a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002053  00000000  00000000  000673c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003eed7  00000000  00000000  0006941b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003dbbc  00000000  00000000  000a82f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00173525  00000000  00000000  000e5eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002593d3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c6a0  00000000  00000000  00259418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000000d1  00000000  00000000  00265ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000067  00000000  00000000  00265b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002fc 	.word	0x240002fc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e1b0 	.word	0x0801e1b0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000300 	.word	0x24000300
 800030c:	0801e1b0 	.word	0x0801e1b0

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <LSM6DS3_Init>:

void LSM6DS3_Init(LSM6DS3* sensor, LSM6DS3_Config* config, SPI_HandleTypeDef* spi,  /* set the configuration parameters that need to be set once */
		GPIO_TypeDef* cs_port, uint16_t cs_pin,
		GPIO_TypeDef* int1_port, uint16_t int1_pin,
		GPIO_TypeDef* int2_port, uint16_t int2_pin)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
	sensor->config = config;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	61da      	str	r2, [r3, #28]
	sensor->spi = spi;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	sensor->cs_port = cs_port;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
	sensor->cs_pin = cs_pin;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	8b3a      	ldrh	r2, [r7, #24]
 8000adc:	811a      	strh	r2, [r3, #8]
	sensor->int1_port = int1_port;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	69fa      	ldr	r2, [r7, #28]
 8000ae2:	60da      	str	r2, [r3, #12]
	sensor->int1_pin = int1_pin;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	8c3a      	ldrh	r2, [r7, #32]
 8000ae8:	821a      	strh	r2, [r3, #16]
	sensor->int2_port = int2_port;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aee:	615a      	str	r2, [r3, #20]
	sensor->int2_pin = int2_pin;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000af4:	831a      	strh	r2, [r3, #24]

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000af6:	8b3b      	ldrh	r3, [r7, #24]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	6838      	ldr	r0, [r7, #0]
 8000afe:	f00b fc01 	bl	800c304 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop

08000b0c <LSM6DS3_TestCommunication>:


uint32_t LSM6DS3_TestCommunication(LSM6DS3* sensor)  /* check that the sensor is connected by querying its device ID */
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t reg_data;
	HAL_StatusTypeDef status = LSM6DS3_ReadRegister(sensor, LSM6DS3_REG_WHO_AM_I, &reg_data);
 8000b14:	f107 030e 	add.w	r3, r7, #14
 8000b18:	461a      	mov	r2, r3
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fb25 	bl	800116c <LSM6DS3_ReadRegister>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK && reg_data == LSM6DS3_DEVICE_ID)
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	2b6a      	cmp	r3, #106	@ 0x6a
 8000b30:	d101      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
		return 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LSM6DS3_TestCommunication+0x2c>
	return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LSM6DS3_Configure>:

/* configure the sensor */
/* this should be called each time we change a sensor setting so the chip can be updated */
void LSM6DS3_Configure(LSM6DS3* sensor)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	LSM6DS3_StopAccel(sensor);  /* disable the sensor before messing with the parameters */
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f9d7 	bl	8000efc <LSM6DS3_StopAccel>
	LSM6DS3_StopGyro(sensor);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f9e2 	bl	8000f18 <LSM6DS3_StopGyro>

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_DRDY_PULSE_CFG_G, 0b10000000);  /* pulse the data ready pins instead of latching them */
 8000b54:	2280      	movs	r2, #128	@ 0x80
 8000b56:	210b      	movs	r1, #11
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 fb3b 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT1_CTRL, 0x01);  /* INT1 set when accel data ready (p. 59) */
 8000b5e:	2201      	movs	r2, #1
 8000b60:	210d      	movs	r1, #13
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 fb36 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT2_CTRL, 0x02);  /* INT2 set when gyro data ready (p. 60) */
 8000b68:	2202      	movs	r2, #2
 8000b6a:	210e      	movs	r1, #14
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 fb31 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL4_C, 0b00000100);  /* disable the I2C interface, also disables the gyro LPF1 (p. 64) */
 8000b72:	2204      	movs	r2, #4
 8000b74:	2113      	movs	r1, #19
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fb2c 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL6_C, 0b00000000);  /* sets the user offset weights to 2^(-10) g/LSB and the gyro LPF bandwidth (p. 66) */
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2115      	movs	r1, #21
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fb27 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL7_G, 0b00000000);  /* disables the gyro HPF (p. 67) */
 8000b86:	2200      	movs	r2, #0
 8000b88:	2116      	movs	r1, #22
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fb22 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL8_XL, 0b00000000);  /* acceleration filters, configured to keep us on the LPF1 path (p. 67) */
 8000b90:	2200      	movs	r2, #0
 8000b92:	2117      	movs	r1, #23
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 fb1d 	bl	80011d4 <LSM6DS3_WriteRegister>

	float x, y, z;
	LSM6DS3_ReadAccel(sensor, &x, &y, &z);  /* just to make sure no status flags get stuck high, read out the data registers (this will reset the data status flags) */
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	f107 0210 	add.w	r2, r7, #16
 8000ba2:	f107 0114 	add.w	r1, r7, #20
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f9c4 	bl	8000f34 <LSM6DS3_ReadAccel>
	LSM6DS3_ReadGyro(sensor, &x, &y, &z);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	f107 0210 	add.w	r2, r7, #16
 8000bb4:	f107 0114 	add.w	r1, r7, #20
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 fa49 	bl	8001050 <LSM6DS3_ReadGyro>
	sensor->accel_x = 0;  /* then reset the local data storage since the values read will likely be garbage */
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
	sensor->accel_y = 0;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
	sensor->accel_z = 0;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f04f 0200 	mov.w	r2, #0
 8000bd4:	629a      	str	r2, [r3, #40]	@ 0x28
	sensor->gyro_x = 0;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
	sensor->gyro_y = 0;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	631a      	str	r2, [r3, #48]	@ 0x30
	sensor->gyro_z = 0;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	@ 0x34

	LSM6DS3_WriteOffsets(sensor);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f804 	bl	8000bfc <LSM6DS3_WriteOffsets>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <LSM6DS3_WriteOffsets>:


void LSM6DS3_WriteOffsets(LSM6DS3* sensor)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	/* x, y, z are the DC offsets of the sensor in g */
	/* this function will write to the user offset registers of the accelerometer chip to correct the offset */
	/* we assume the weight of the user offsets is 2^(-10) g/LSB */

	int8_t x_b = (int8_t)(sensor->config->usr_offset_x / 0.0009765625f);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	ed93 7a00 	vldr	s14, [r3]
 8000c0c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c18:	edc7 7a00 	vstr	s15, [r7]
 8000c1c:	783b      	ldrb	r3, [r7, #0]
 8000c1e:	73fb      	strb	r3, [r7, #15]
	int8_t y_b = (int8_t)(sensor->config->usr_offset_y / 0.0009765625f);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c28:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c34:	edc7 7a00 	vstr	s15, [r7]
 8000c38:	783b      	ldrb	r3, [r7, #0]
 8000c3a:	73bb      	strb	r3, [r7, #14]
	int8_t z_b = (int8_t)(sensor->config->usr_offset_z / 0.0009765625f);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c44:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c50:	edc7 7a00 	vstr	s15, [r7]
 8000c54:	783b      	ldrb	r3, [r7, #0]
 8000c56:	737b      	strb	r3, [r7, #13]

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_X_OFS_USR, x_b);
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2173      	movs	r1, #115	@ 0x73
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 fab8 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Y_OFS_USR, y_b);
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	461a      	mov	r2, r3
 8000c68:	2174      	movs	r1, #116	@ 0x74
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 fab2 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Z_OFS_USR, z_b);
 8000c70:	7b7b      	ldrb	r3, [r7, #13]
 8000c72:	461a      	mov	r2, r3
 8000c74:	2175      	movs	r1, #117	@ 0x75
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 faac 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	3a800000 	.word	0x3a800000

08000c88 <LSM6DS3_StartAccel>:


void LSM6DS3_StartAccel(LSM6DS3* sensor)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->accel_odr_hz)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d04d      	beq.n	8000d3a <LSM6DS3_StartAccel+0xb2>
 8000c9e:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d84c      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000ca6:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d042      	beq.n	8000d34 <LSM6DS3_StartAccel+0xac>
 8000cae:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d844      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cb6:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d037      	beq.n	8000d2e <LSM6DS3_StartAccel+0xa6>
 8000cbe:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d83c      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cc6:	f240 3241 	movw	r2, #833	@ 0x341
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d02c      	beq.n	8000d28 <LSM6DS3_StartAccel+0xa0>
 8000cce:	f240 3241 	movw	r2, #833	@ 0x341
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d834      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cd6:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000cda:	d022      	beq.n	8000d22 <LSM6DS3_StartAccel+0x9a>
 8000cdc:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000ce0:	d82e      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000ce2:	2bd0      	cmp	r3, #208	@ 0xd0
 8000ce4:	d01a      	beq.n	8000d1c <LSM6DS3_StartAccel+0x94>
 8000ce6:	2bd0      	cmp	r3, #208	@ 0xd0
 8000ce8:	d82a      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cea:	2b68      	cmp	r3, #104	@ 0x68
 8000cec:	d013      	beq.n	8000d16 <LSM6DS3_StartAccel+0x8e>
 8000cee:	2b68      	cmp	r3, #104	@ 0x68
 8000cf0:	d826      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cf2:	2b34      	cmp	r3, #52	@ 0x34
 8000cf4:	d00c      	beq.n	8000d10 <LSM6DS3_StartAccel+0x88>
 8000cf6:	2b34      	cmp	r3, #52	@ 0x34
 8000cf8:	d822      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cfa:	2b0d      	cmp	r3, #13
 8000cfc:	d002      	beq.n	8000d04 <LSM6DS3_StartAccel+0x7c>
 8000cfe:	2b1a      	cmp	r3, #26
 8000d00:	d003      	beq.n	8000d0a <LSM6DS3_StartAccel+0x82>
 8000d02:	e01d      	b.n	8000d40 <LSM6DS3_StartAccel+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_ACCEL_ODR_13HZ;
 8000d04:	2310      	movs	r3, #16
 8000d06:	73fb      	strb	r3, [r7, #15]
		break;
 8000d08:	e01d      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 26:
		odr_data = LSM6DS3_ACCEL_ODR_26HZ;
 8000d0a:	2320      	movs	r3, #32
 8000d0c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d0e:	e01a      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 52:
		odr_data = LSM6DS3_ACCEL_ODR_52HZ;
 8000d10:	2330      	movs	r3, #48	@ 0x30
 8000d12:	73fb      	strb	r3, [r7, #15]
		break;
 8000d14:	e017      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 104:
		odr_data = LSM6DS3_ACCEL_ODR_104HZ;
 8000d16:	2340      	movs	r3, #64	@ 0x40
 8000d18:	73fb      	strb	r3, [r7, #15]
		break;
 8000d1a:	e014      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 208:
		odr_data = LSM6DS3_ACCEL_ODR_208HZ;
 8000d1c:	2350      	movs	r3, #80	@ 0x50
 8000d1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000d20:	e011      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 416:
		odr_data = LSM6DS3_ACCEL_ODR_416HZ;
 8000d22:	2360      	movs	r3, #96	@ 0x60
 8000d24:	73fb      	strb	r3, [r7, #15]
		break;
 8000d26:	e00e      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 833:
		odr_data = LSM6DS3_ACCEL_ODR_833HZ;
 8000d28:	2370      	movs	r3, #112	@ 0x70
 8000d2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000d2c:	e00b      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 1660:
		odr_data = LSM6DS3_ACCEL_ODR_1660HZ;
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	73fb      	strb	r3, [r7, #15]
		break;
 8000d32:	e008      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 3330:
		odr_data = LSM6DS3_ACCEL_ODR_3330HZ;
 8000d34:	2390      	movs	r3, #144	@ 0x90
 8000d36:	73fb      	strb	r3, [r7, #15]
		break;
 8000d38:	e005      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 6660:
		odr_data = LSM6DS3_ACCEL_ODR_6660HZ;
 8000d3a:	23a0      	movs	r3, #160	@ 0xa0
 8000d3c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d3e:	e002      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	default:
		odr_data = LSM6DS3_ACCEL_ODR_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
		break;
 8000d44:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->g_range)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	2b0e      	cmp	r3, #14
 8000d50:	d82c      	bhi.n	8000dac <LSM6DS3_StartAccel+0x124>
 8000d52:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <LSM6DS3_StartAccel+0xd0>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d95 	.word	0x08000d95
 8000d5c:	08000dad 	.word	0x08000dad
 8000d60:	08000d9b 	.word	0x08000d9b
 8000d64:	08000dad 	.word	0x08000dad
 8000d68:	08000dad 	.word	0x08000dad
 8000d6c:	08000dad 	.word	0x08000dad
 8000d70:	08000da1 	.word	0x08000da1
 8000d74:	08000dad 	.word	0x08000dad
 8000d78:	08000dad 	.word	0x08000dad
 8000d7c:	08000dad 	.word	0x08000dad
 8000d80:	08000dad 	.word	0x08000dad
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	08000dad 	.word	0x08000dad
 8000d8c:	08000dad 	.word	0x08000dad
 8000d90:	08000da7 	.word	0x08000da7
	{
	case 2:
		range_data = LSM6DS3_G_RANGE_2;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73bb      	strb	r3, [r7, #14]
		break;
 8000d98:	e00b      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 4:
		range_data = LSM6DS3_G_RANGE_4;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	73bb      	strb	r3, [r7, #14]
		break;
 8000d9e:	e008      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 8:
		range_data = LSM6DS3_G_RANGE_8;
 8000da0:	230c      	movs	r3, #12
 8000da2:	73bb      	strb	r3, [r7, #14]
		break;
 8000da4:	e005      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 16:
		range_data = LSM6DS3_G_RANGE_16;
 8000da6:	2304      	movs	r3, #4
 8000da8:	73bb      	strb	r3, [r7, #14]
		break;
 8000daa:	e002      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	default:
		range_data = LSM6DS3_G_RANGE_2;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73bb      	strb	r3, [r7, #14]
		break;
 8000db0:	bf00      	nop
	}

	/* this register also contains LPF1_BW_SEL, here we will set BW to ODR/2 */
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, (odr_data | range_data));
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 fa08 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DS3_StartGyro>:


void LSM6DS3_StartGyro(LSM6DS3* sensor)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->gyro_odr_hz)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d04d      	beq.n	8000e7e <LSM6DS3_StartGyro+0xb2>
 8000de2:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d84c      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000dea:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d042      	beq.n	8000e78 <LSM6DS3_StartGyro+0xac>
 8000df2:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d844      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000dfa:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d037      	beq.n	8000e72 <LSM6DS3_StartGyro+0xa6>
 8000e02:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d83c      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e0a:	f240 3241 	movw	r2, #833	@ 0x341
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d02c      	beq.n	8000e6c <LSM6DS3_StartGyro+0xa0>
 8000e12:	f240 3241 	movw	r2, #833	@ 0x341
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d834      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e1a:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000e1e:	d022      	beq.n	8000e66 <LSM6DS3_StartGyro+0x9a>
 8000e20:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000e24:	d82e      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e26:	2bd0      	cmp	r3, #208	@ 0xd0
 8000e28:	d01a      	beq.n	8000e60 <LSM6DS3_StartGyro+0x94>
 8000e2a:	2bd0      	cmp	r3, #208	@ 0xd0
 8000e2c:	d82a      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e2e:	2b68      	cmp	r3, #104	@ 0x68
 8000e30:	d013      	beq.n	8000e5a <LSM6DS3_StartGyro+0x8e>
 8000e32:	2b68      	cmp	r3, #104	@ 0x68
 8000e34:	d826      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e36:	2b34      	cmp	r3, #52	@ 0x34
 8000e38:	d00c      	beq.n	8000e54 <LSM6DS3_StartGyro+0x88>
 8000e3a:	2b34      	cmp	r3, #52	@ 0x34
 8000e3c:	d822      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e3e:	2b0d      	cmp	r3, #13
 8000e40:	d002      	beq.n	8000e48 <LSM6DS3_StartGyro+0x7c>
 8000e42:	2b1a      	cmp	r3, #26
 8000e44:	d003      	beq.n	8000e4e <LSM6DS3_StartGyro+0x82>
 8000e46:	e01d      	b.n	8000e84 <LSM6DS3_StartGyro+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_GYRO_ODR_13HZ;
 8000e48:	2310      	movs	r3, #16
 8000e4a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e4c:	e01d      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 26:
		odr_data = LSM6DS3_GYRO_ODR_26HZ;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	73fb      	strb	r3, [r7, #15]
		break;
 8000e52:	e01a      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 52:
		odr_data = LSM6DS3_GYRO_ODR_52HZ;
 8000e54:	2330      	movs	r3, #48	@ 0x30
 8000e56:	73fb      	strb	r3, [r7, #15]
		break;
 8000e58:	e017      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 104:
		odr_data = LSM6DS3_GYRO_ODR_104HZ;
 8000e5a:	2340      	movs	r3, #64	@ 0x40
 8000e5c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e5e:	e014      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 208:
		odr_data = LSM6DS3_GYRO_ODR_208HZ;
 8000e60:	2350      	movs	r3, #80	@ 0x50
 8000e62:	73fb      	strb	r3, [r7, #15]
		break;
 8000e64:	e011      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 416:
		odr_data = LSM6DS3_GYRO_ODR_416HZ;
 8000e66:	2360      	movs	r3, #96	@ 0x60
 8000e68:	73fb      	strb	r3, [r7, #15]
		break;
 8000e6a:	e00e      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 833:
		odr_data = LSM6DS3_GYRO_ODR_833HZ;
 8000e6c:	2370      	movs	r3, #112	@ 0x70
 8000e6e:	73fb      	strb	r3, [r7, #15]
		break;
 8000e70:	e00b      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 1660:
		odr_data = LSM6DS3_GYRO_ODR_1660HZ;
 8000e72:	2380      	movs	r3, #128	@ 0x80
 8000e74:	73fb      	strb	r3, [r7, #15]
		break;
 8000e76:	e008      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 3330:
		odr_data = LSM6DS3_GYRO_ODR_3330HZ;
 8000e78:	2390      	movs	r3, #144	@ 0x90
 8000e7a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e7c:	e005      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 6660:
		odr_data = LSM6DS3_GYRO_ODR_6660HZ;
 8000e7e:	23a0      	movs	r3, #160	@ 0xa0
 8000e80:	73fb      	strb	r3, [r7, #15]
		break;
 8000e82:	e002      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	default:
		odr_data = LSM6DS3_GYRO_ODR_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
		break;
 8000e88:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->dps_range)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e94:	d01f      	beq.n	8000ed6 <LSM6DS3_StartGyro+0x10a>
 8000e96:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e9a:	d81f      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000e9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea0:	d016      	beq.n	8000ed0 <LSM6DS3_StartGyro+0x104>
 8000ea2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea6:	d819      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000ea8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000eac:	d00d      	beq.n	8000eca <LSM6DS3_StartGyro+0xfe>
 8000eae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000eb2:	d813      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000eb4:	2b7d      	cmp	r3, #125	@ 0x7d
 8000eb6:	d002      	beq.n	8000ebe <LSM6DS3_StartGyro+0xf2>
 8000eb8:	2bf5      	cmp	r3, #245	@ 0xf5
 8000eba:	d003      	beq.n	8000ec4 <LSM6DS3_StartGyro+0xf8>
 8000ebc:	e00e      	b.n	8000edc <LSM6DS3_StartGyro+0x110>
	{
	case 125:
		range_data = LSM6DS3_DPS_RANGE_125;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	73bb      	strb	r3, [r7, #14]
		break;
 8000ec2:	e00e      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 245:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73bb      	strb	r3, [r7, #14]
		break;
 8000ec8:	e00b      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 500:
		range_data = LSM6DS3_DPS_RANGE_500;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	73bb      	strb	r3, [r7, #14]
		break;
 8000ece:	e008      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 1000:
		range_data = LSM6DS3_DPS_RANGE_1000;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	73bb      	strb	r3, [r7, #14]
		break;
 8000ed4:	e005      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 2000:
		range_data = LSM6DS3_DPS_RANGE_2000;
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	73bb      	strb	r3, [r7, #14]
		break;
 8000eda:	e002      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	default:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]
		break;
 8000ee0:	bf00      	nop
	}

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, (odr_data | range_data));
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	2111      	movs	r1, #17
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f970 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <LSM6DS3_StopAccel>:


void LSM6DS3_StopAccel(LSM6DS3* sensor)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, LSM6DS3_ACCEL_ODR_DISABLE);  /* power down accel. (p. 61) */
 8000f04:	2200      	movs	r2, #0
 8000f06:	2110      	movs	r1, #16
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f963 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop

08000f18 <LSM6DS3_StopGyro>:


void LSM6DS3_StopGyro(LSM6DS3* sensor)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, LSM6DS3_GYRO_ODR_DISABLE);  /* power down gyro. (p. 62) */
 8000f20:	2200      	movs	r2, #0
 8000f22:	2111      	movs	r1, #17
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f955 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop

08000f34 <LSM6DS3_ReadAccel>:


void LSM6DS3_ReadAccel(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b08d      	sub	sp, #52	@ 0x34
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]
	/* get the acceleration in g */

	/* read multiple bytes corresponding to the raw accelerometer data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_XL | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000f42:	4a41      	ldr	r2, [pc, #260]	@ (8001048 <LSM6DS3_ReadAccel+0x114>)
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f4c:	6018      	str	r0, [r3, #0]
 8000f4e:	3304      	adds	r3, #4
 8000f50:	8019      	strh	r1, [r3, #0]
 8000f52:	3302      	adds	r3, #2
 8000f54:	0c0a      	lsrs	r2, r1, #16
 8000f56:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681c      	ldr	r4, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	8912      	ldrh	r2, [r2, #8]
 8000f66:	f107 0110 	add.w	r1, r7, #16
 8000f6a:	f107 0018 	add.w	r0, r7, #24
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4623      	mov	r3, r4
 8000f74:	2207      	movs	r2, #7
 8000f76:	f000 f959 	bl	800122c <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8000f7a:	7c7b      	ldrb	r3, [r7, #17]
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7cbb      	ldrb	r3, [r7, #18]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8000f88:	7cfb      	ldrb	r3, [r7, #19]
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	7d3b      	ldrb	r3, [r7, #20]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 8000f96:	7d7b      	ldrb	r3, [r7, #21]
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7dbb      	ldrb	r3, [r7, #22]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	847b      	strh	r3, [r7, #34]	@ 0x22

	sensor->accel_x = sensor->config->g_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc2:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 8000fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	edc3 7a08 	vstr	s15, [r3, #32]
	sensor->accel_y = sensor->config->g_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fde:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fee:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 8000ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	sensor->accel_z = sensor->config->g_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800101a:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 800101e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	*x = sensor->accel_x;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6a1a      	ldr	r2, [r3, #32]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	601a      	str	r2, [r3, #0]
	*y = sensor->accel_y;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	601a      	str	r2, [r3, #0]
	*z = sensor->accel_z;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	601a      	str	r2, [r3, #0]

}
 8001040:	bf00      	nop
 8001042:	372c      	adds	r7, #44	@ 0x2c
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	0801e1c8 	.word	0x0801e1c8
 800104c:	47000000 	.word	0x47000000

08001050 <LSM6DS3_ReadGyro>:


void LSM6DS3_ReadGyro(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08d      	sub	sp, #52	@ 0x34
 8001054:	af02      	add	r7, sp, #8
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
	/* get the rotation rate in degrees per second */

	/* read multiple bytes corresponding to the raw gyroscope data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_G | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800105e:	4a41      	ldr	r2, [pc, #260]	@ (8001164 <LSM6DS3_ReadGyro+0x114>)
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001068:	6018      	str	r0, [r3, #0]
 800106a:	3304      	adds	r3, #4
 800106c:	8019      	strh	r1, [r3, #0]
 800106e:	3302      	adds	r3, #2
 8001070:	0c0a      	lsrs	r2, r1, #16
 8001072:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681c      	ldr	r4, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	8912      	ldrh	r2, [r2, #8]
 8001082:	f107 0110 	add.w	r1, r7, #16
 8001086:	f107 0018 	add.w	r0, r7, #24
 800108a:	9201      	str	r2, [sp, #4]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4623      	mov	r3, r4
 8001090:	2207      	movs	r2, #7
 8001092:	f000 f8cb 	bl	800122c <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8001096:	7c7b      	ldrb	r3, [r7, #17]
 8001098:	b21a      	sxth	r2, r3
 800109a:	7cbb      	ldrb	r3, [r7, #18]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 80010a4:	7cfb      	ldrb	r3, [r7, #19]
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	7d3b      	ldrb	r3, [r7, #20]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 80010b2:	7d7b      	ldrb	r3, [r7, #21]
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	847b      	strh	r3, [r7, #34]	@ 0x22

	sensor->gyro_x = sensor->config->dps_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 80010e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	sensor->gyro_y = sensor->config->dps_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110a:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 800110e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	sensor->gyro_z = sensor->config->dps_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001126:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001136:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 800113a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	*x = sensor->gyro_x;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	601a      	str	r2, [r3, #0]
	*y = sensor->gyro_y;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
	*z = sensor->gyro_z;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	601a      	str	r2, [r3, #0]
}
 800115c:	bf00      	nop
 800115e:	372c      	adds	r7, #44	@ 0x2c
 8001160:	46bd      	mov	sp, r7
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	0801e1d0 	.word	0x0801e1d0
 8001168:	47000000 	.word	0x47000000

0800116c <LSM6DS3_ReadRegister>:



HAL_StatusTypeDef LSM6DS3_ReadRegister(LSM6DS3* sensor, uint8_t reg, uint8_t* data)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af02      	add	r7, sp, #8
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	460b      	mov	r3, r1
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	72fb      	strb	r3, [r7, #11]
	uint8_t tx_buf[2] = {(reg | 0x80), 0x00};  // set the first bit to indicate a read communication
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001180:	b2db      	uxtb	r3, r3
 8001182:	753b      	strb	r3, [r7, #20]
 8001184:	2300      	movs	r3, #0
 8001186:	757b      	strb	r3, [r7, #21]
	uint8_t rx_buf[2];

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6858      	ldr	r0, [r3, #4]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	891b      	ldrh	r3, [r3, #8]
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	f00b f8b6 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(sensor->spi, tx_buf, rx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f107 0210 	add.w	r2, r7, #16
 80011a0:	f107 0114 	add.w	r1, r7, #20
 80011a4:	2301      	movs	r3, #1
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2302      	movs	r3, #2
 80011aa:	f010 fb59 	bl	8011860 <HAL_SPI_TransmitReceive>
 80011ae:	4603      	mov	r3, r0
 80011b0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6858      	ldr	r0, [r3, #4]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	891b      	ldrh	r3, [r3, #8]
 80011ba:	2201      	movs	r2, #1
 80011bc:	4619      	mov	r1, r3
 80011be:	f00b f8a1 	bl	800c304 <HAL_GPIO_WritePin>

	*data = rx_buf[1];
 80011c2:	7c7a      	ldrb	r2, [r7, #17]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	701a      	strb	r2, [r3, #0]

	return status;
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop

080011d4 <LSM6DS3_WriteRegister>:


HAL_StatusTypeDef LSM6DS3_WriteRegister(LSM6DS3* sensor, uint8_t reg, uint8_t data)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
 80011e0:	4613      	mov	r3, r2
 80011e2:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_buf[2] = {reg, data};
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	733b      	strb	r3, [r7, #12]
 80011e8:	78bb      	ldrb	r3, [r7, #2]
 80011ea:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6858      	ldr	r0, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	891b      	ldrh	r3, [r3, #8]
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	f00b f884 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_Transmit(sensor->spi, tx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	f107 010c 	add.w	r1, r7, #12
 8001204:	2301      	movs	r3, #1
 8001206:	2202      	movs	r2, #2
 8001208:	f010 f93c 	bl	8011484 <HAL_SPI_Transmit>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6858      	ldr	r0, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	891b      	ldrh	r3, [r3, #8]
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	f00b f872 	bl	800c304 <HAL_GPIO_WritePin>

	return status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop

0800122c <SPI_TxRx_Fast>:
/* this uses the SPI FIFO on the H7, so it only works for transactions 16 bytes or less */
/* (the FIFO size depends on the specific SPI channel too, so check the RM) */
/* On the H723, SPI1, 2, 3 have 16 byte FIFO and SPI4, 5, 6 have 8 bytes FIFO */
/* the peripheral is configured using Cube to have 8 bit data frames and 1 data frame FIFO threshold */
__attribute__((optimize("-Ofast"))) inline void SPI_TxRx_Fast(uint8_t* tx, uint8_t* rx, uint8_t len, SPI_TypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 800122c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001230:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 8001234:	4680      	mov	r8, r0
 8001236:	9e06      	ldr	r6, [sp, #24]
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 8001238:	043c      	lsls	r4, r7, #16


	/* If using both the HAL SPI functions and our own, we need the next 2 lines to put SPI in a known state */
	/* If only using our function, I think these could be omitted */
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 800123a:	4820      	ldr	r0, [pc, #128]	@ (80012bc <SPI_TxRx_Fast+0x90>)
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 800123c:	61b4      	str	r4, [r6, #24]
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 800123e:	685c      	ldr	r4, [r3, #4]
 8001240:	4020      	ands	r0, r4
 8001242:	6058      	str	r0, [r3, #4]
	spi->CFG2 &= ~SPI_CFG2_COMM;  /* this puts the SPI in full-duplex mode (for some reason the HAL takes it out of this mode sometimes, even when it is configured in Cube as full-duplex) */
 8001244:	68d8      	ldr	r0, [r3, #12]
 8001246:	f420 20c0 	bic.w	r0, r0, #393216	@ 0x60000
 800124a:	60d8      	str	r0, [r3, #12]


	spi->CR1 |= SPI_CR1_SPE;  /* enable SPI */
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	f040 0001 	orr.w	r0, r0, #1
 8001252:	6018      	str	r0, [r3, #0]
	spi->CR1 |= SPI_CR1_CSTART;  /* start transmission */
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 800125a:	6018      	str	r0, [r3, #0]

	uint32_t j = 0;
	for (uint8_t i = 0; i < len && j < FSPI_MAX_ITER; j++)  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 800125c:	b33a      	cbz	r2, 80012ae <SPI_TxRx_Fast+0x82>
 800125e:	f04f 0c00 	mov.w	ip, #0
 8001262:	4817      	ldr	r0, [pc, #92]	@ (80012c0 <SPI_TxRx_Fast+0x94>)
	uint32_t j = 0;
 8001264:	46e6      	mov	lr, ip
	{
		if(((spi->SR) & SPI_SR_TXP) == SPI_SR_TXP)  /* wait until TX FIFO has enough space for a data packet */
 8001266:	695c      	ldr	r4, [r3, #20]
		   *(__IO uint8_t*)&(spi->TXDR) = tx[i++];  /* put data in TXDR */
 8001268:	f10c 0501 	add.w	r5, ip, #1
	for (uint8_t i = 0; i < len && j < FSPI_MAX_ITER; j++)  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 800126c:	f10e 0e01 	add.w	lr, lr, #1
		if(((spi->SR) & SPI_SR_TXP) == SPI_SR_TXP)  /* wait until TX FIFO has enough space for a data packet */
 8001270:	07a4      	lsls	r4, r4, #30
 8001272:	d505      	bpl.n	8001280 <SPI_TxRx_Fast+0x54>
		   *(__IO uint8_t*)&(spi->TXDR) = tx[i++];  /* put data in TXDR */
 8001274:	f818 400c 	ldrb.w	r4, [r8, ip]
 8001278:	fa5f fc85 	uxtb.w	ip, r5
 800127c:	f883 4020 	strb.w	r4, [r3, #32]
	for (uint8_t i = 0; i < len && j < FSPI_MAX_ITER; j++)  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 8001280:	4594      	cmp	ip, r2
 8001282:	d201      	bcs.n	8001288 <SPI_TxRx_Fast+0x5c>
 8001284:	4586      	cmp	lr, r0
 8001286:	d9ee      	bls.n	8001266 <SPI_TxRx_Fast+0x3a>
	}


	j = 0;
	for (uint8_t i = 0; i < len && j < FSPI_MAX_ITER; j++)  /* read out everything from the RX buffer */
 8001288:	2000      	movs	r0, #0
 800128a:	4d0d      	ldr	r5, [pc, #52]	@ (80012c0 <SPI_TxRx_Fast+0x94>)
	j = 0;
 800128c:	4684      	mov	ip, r0
	{
		if(((spi->SR) & SPI_SR_RXP) == SPI_SR_RXP)  /* wait until RX FIFO contains a data packet */
 800128e:	695c      	ldr	r4, [r3, #20]
			rx[i++] = *(__IO uint8_t*)&(spi->RXDR);  /* read the data from RXDR */
 8001290:	f100 0e01 	add.w	lr, r0, #1
	for (uint8_t i = 0; i < len && j < FSPI_MAX_ITER; j++)  /* read out everything from the RX buffer */
 8001294:	f10c 0c01 	add.w	ip, ip, #1
		if(((spi->SR) & SPI_SR_RXP) == SPI_SR_RXP)  /* wait until RX FIFO contains a data packet */
 8001298:	07e4      	lsls	r4, r4, #31
 800129a:	d504      	bpl.n	80012a6 <SPI_TxRx_Fast+0x7a>
			rx[i++] = *(__IO uint8_t*)&(spi->RXDR);  /* read the data from RXDR */
 800129c:	f893 4030 	ldrb.w	r4, [r3, #48]	@ 0x30
 80012a0:	540c      	strb	r4, [r1, r0]
 80012a2:	fa5f f08e 	uxtb.w	r0, lr
	for (uint8_t i = 0; i < len && j < FSPI_MAX_ITER; j++)  /* read out everything from the RX buffer */
 80012a6:	4290      	cmp	r0, r2
 80012a8:	d201      	bcs.n	80012ae <SPI_TxRx_Fast+0x82>
 80012aa:	45ac      	cmp	ip, r5
 80012ac:	d9ef      	bls.n	800128e <SPI_TxRx_Fast+0x62>
	}

	spi->CR1 &= ~SPI_CR1_SPE;  /* disable SPI */
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	f022 0201 	bic.w	r2, r2, #1
 80012b4:	601a      	str	r2, [r3, #0]
	cs_port->BSRR = cs_pin;  /* CS high */
 80012b6:	61b7      	str	r7, [r6, #24]
}
 80012b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012bc:	ffff0000 	.word	0xffff0000
 80012c0:	00030d3f 	.word	0x00030d3f

080012c4 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 80012cc:	4803      	ldr	r0, [pc, #12]	@ (80012dc <HAL_TIM_PeriodElapsedCallback+0x18>)
 80012ce:	f005 fc94 	bl	8006bfa <VibeCheckStrobe_PeriodElapsedUpdate>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	24011de0 	.word	0x24011de0

080012e0 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 80012e8:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 80012ea:	f006 fa31 	bl	8007750 <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	24011e08 	.word	0x24011e08

080012fc <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 8001304:	4803      	ldr	r0, [pc, #12]	@ (8001314 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 8001306:	f006 fa3f 	bl	8007788 <VibeCheckWaveGen_DMACpltCallback>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	24011e08 	.word	0x24011e08

08001318 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
	VibeCheckSensor_EXTICallback(&vc.sensor, GPIO_Pin);
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	4619      	mov	r1, r3
 8001326:	4803      	ldr	r0, [pc, #12]	@ (8001334 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001328:	f004 f8b7 	bl	800549a <VibeCheckSensor_EXTICallback>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	240133ec 	.word	0x240133ec

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800133e:	f000 ff23 	bl	8002188 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001342:	f006 fce1 	bl	8007d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001346:	f000 f84d 	bl	80013e4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800134a:	f000 f8bb 	bl	80014c4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f000 fdbf 	bl	8001ed0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001352:	f000 fd8d 	bl	8001e70 <MX_DMA_Init>
  MX_DAC1_Init();
 8001356:	f000 f9cb 	bl	80016f0 <MX_DAC1_Init>
  MX_I2C2_Init();
 800135a:	f000 fa05 	bl	8001768 <MX_I2C2_Init>
  MX_SPI2_Init();
 800135e:	f000 fa43 	bl	80017e8 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001362:	f000 fa97 	bl	8001894 <MX_SPI3_Init>
  MX_SPI4_Init();
 8001366:	f000 faeb 	bl	8001940 <MX_SPI4_Init>
  MX_TIM4_Init();
 800136a:	f000 fc6f 	bl	8001c4c <MX_TIM4_Init>
  MX_TIM3_Init();
 800136e:	f000 fbdf 	bl	8001b30 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001372:	f000 fd31 	bl	8001dd8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001376:	f000 fb39 	bl	80019ec <MX_TIM1_Init>
  MX_TIM2_Init();
 800137a:	f000 fb8b 	bl	8001a94 <MX_TIM2_Init>
  MX_ADC1_Init();
 800137e:	f000 f8d1 	bl	8001524 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001382:	f000 f94b 	bl	800161c <MX_ADC2_Init>
  MX_UART7_Init();
 8001386:	f000 fcd9 	bl	8001d3c <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 800138a:	f017 fab5 	bl	80188f8 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim2);  /* start the timer for sensor data time stamps */
 800138e:	480b      	ldr	r0, [pc, #44]	@ (80013bc <main+0x84>)
 8001390:	f010 fee0 	bl	8012154 <HAL_TIM_Base_Start>
  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1, &htim4, &(TIM2->CNT), &hspi2, &hspi3, &hspi4);
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <main+0x88>)
 8001396:	9304      	str	r3, [sp, #16]
 8001398:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <main+0x8c>)
 800139a:	9303      	str	r3, [sp, #12]
 800139c:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <main+0x90>)
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <main+0x94>)
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <main+0x98>)
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <main+0x9c>)
 80013aa:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <main+0xa0>)
 80013ac:	490b      	ldr	r1, [pc, #44]	@ (80013dc <main+0xa4>)
 80013ae:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <main+0xa8>)
 80013b0:	f001 fe42 	bl	8003038 <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 80013b4:	480a      	ldr	r0, [pc, #40]	@ (80013e0 <main+0xa8>)
 80013b6:	f002 f8e7 	bl	8003588 <VibeCheck_Loop>
 80013ba:	e7fb      	b.n	80013b4 <main+0x7c>
 80013bc:	24000734 	.word	0x24000734
 80013c0:	24000660 	.word	0x24000660
 80013c4:	240005d8 	.word	0x240005d8
 80013c8:	24000550 	.word	0x24000550
 80013cc:	40000024 	.word	0x40000024
 80013d0:	240007cc 	.word	0x240007cc
 80013d4:	240003f8 	.word	0x240003f8
 80013d8:	240006e8 	.word	0x240006e8
 80013dc:	24000780 	.word	0x24000780
 80013e0:	240009b8 	.word	0x240009b8

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b09c      	sub	sp, #112	@ 0x70
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ee:	224c      	movs	r2, #76	@ 0x4c
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f019 fb41 	bl	801aa7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2220      	movs	r2, #32
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f019 fb3b 	bl	801aa7a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001404:	2002      	movs	r0, #2
 8001406:	f00c fb83 	bl	800db10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b2c      	ldr	r3, [pc, #176]	@ (80014c0 <SystemClock_Config+0xdc>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	4a2b      	ldr	r2, [pc, #172]	@ (80014c0 <SystemClock_Config+0xdc>)
 8001414:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001418:	6193      	str	r3, [r2, #24]
 800141a:	4b29      	ldr	r3, [pc, #164]	@ (80014c0 <SystemClock_Config+0xdc>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001426:	bf00      	nop
 8001428:	4b25      	ldr	r3, [pc, #148]	@ (80014c0 <SystemClock_Config+0xdc>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001434:	d1f8      	bne.n	8001428 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001436:	2321      	movs	r3, #33	@ 0x21
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800143a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001440:	2301      	movs	r3, #1
 8001442:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001444:	2302      	movs	r3, #2
 8001446:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001448:	2302      	movs	r3, #2
 800144a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800144c:	2302      	movs	r3, #2
 800144e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001450:	2328      	movs	r3, #40	@ 0x28
 8001452:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001454:	2301      	movs	r3, #1
 8001456:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001458:	2302      	movs	r3, #2
 800145a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800145c:	2302      	movs	r3, #2
 800145e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001460:	230c      	movs	r3, #12
 8001462:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001464:	2300      	movs	r3, #0
 8001466:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001470:	4618      	mov	r0, r3
 8001472:	f00c fb97 	bl	800dba4 <HAL_RCC_OscConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800147c:	f000 feb0 	bl	80021e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001480:	233f      	movs	r3, #63	@ 0x3f
 8001482:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001484:	2303      	movs	r3, #3
 8001486:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800148c:	2308      	movs	r3, #8
 800148e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001490:	2340      	movs	r3, #64	@ 0x40
 8001492:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001494:	2340      	movs	r3, #64	@ 0x40
 8001496:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001498:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800149c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800149e:	2340      	movs	r3, #64	@ 0x40
 80014a0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2103      	movs	r1, #3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f00c ff56 	bl	800e358 <HAL_RCC_ClockConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80014b2:	f000 fe95 	bl	80021e0 <Error_Handler>
  }
}
 80014b6:	bf00      	nop
 80014b8:	3770      	adds	r7, #112	@ 0x70
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	58024800 	.word	0x58024800

080014c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b0ae      	sub	sp, #184	@ 0xb8
 80014c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ca:	463b      	mov	r3, r7
 80014cc:	22b8      	movs	r2, #184	@ 0xb8
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f019 fad2 	bl	801aa7a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014d6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80014e2:	2302      	movs	r3, #2
 80014e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80014e6:	2310      	movs	r3, #16
 80014e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014f6:	23c0      	movs	r3, #192	@ 0xc0
 80014f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001508:	463b      	mov	r3, r7
 800150a:	4618      	mov	r0, r3
 800150c:	f00d fab0 	bl	800ea70 <HAL_RCCEx_PeriphCLKConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001516:	f000 fe63 	bl	80021e0 <Error_Handler>
  }
}
 800151a:	bf00      	nop
 800151c:	37b8      	adds	r7, #184	@ 0xb8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	@ 0x30
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800152a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001536:	463b      	mov	r3, r7
 8001538:	2224      	movs	r2, #36	@ 0x24
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f019 fa9c 	bl	801aa7a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001542:	4b32      	ldr	r3, [pc, #200]	@ (800160c <MX_ADC1_Init+0xe8>)
 8001544:	4a32      	ldr	r2, [pc, #200]	@ (8001610 <MX_ADC1_Init+0xec>)
 8001546:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001548:	4b30      	ldr	r3, [pc, #192]	@ (800160c <MX_ADC1_Init+0xe8>)
 800154a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800154e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001550:	4b2e      	ldr	r3, [pc, #184]	@ (800160c <MX_ADC1_Init+0xe8>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001556:	4b2d      	ldr	r3, [pc, #180]	@ (800160c <MX_ADC1_Init+0xe8>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800155c:	4b2b      	ldr	r3, [pc, #172]	@ (800160c <MX_ADC1_Init+0xe8>)
 800155e:	2204      	movs	r2, #4
 8001560:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001562:	4b2a      	ldr	r3, [pc, #168]	@ (800160c <MX_ADC1_Init+0xe8>)
 8001564:	2200      	movs	r2, #0
 8001566:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001568:	4b28      	ldr	r3, [pc, #160]	@ (800160c <MX_ADC1_Init+0xe8>)
 800156a:	2200      	movs	r2, #0
 800156c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800156e:	4b27      	ldr	r3, [pc, #156]	@ (800160c <MX_ADC1_Init+0xe8>)
 8001570:	2201      	movs	r2, #1
 8001572:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001574:	4b25      	ldr	r3, [pc, #148]	@ (800160c <MX_ADC1_Init+0xe8>)
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800157c:	4b23      	ldr	r3, [pc, #140]	@ (800160c <MX_ADC1_Init+0xe8>)
 800157e:	2200      	movs	r2, #0
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001582:	4b22      	ldr	r3, [pc, #136]	@ (800160c <MX_ADC1_Init+0xe8>)
 8001584:	2200      	movs	r2, #0
 8001586:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001588:	4b20      	ldr	r3, [pc, #128]	@ (800160c <MX_ADC1_Init+0xe8>)
 800158a:	2200      	movs	r2, #0
 800158c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800158e:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <MX_ADC1_Init+0xe8>)
 8001590:	2200      	movs	r2, #0
 8001592:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001594:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <MX_ADC1_Init+0xe8>)
 8001596:	2200      	movs	r2, #0
 8001598:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800159a:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <MX_ADC1_Init+0xe8>)
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <MX_ADC1_Init+0xe8>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a8:	4818      	ldr	r0, [pc, #96]	@ (800160c <MX_ADC1_Init+0xe8>)
 80015aa:	f006 fea9 	bl	8008300 <HAL_ADC_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80015b4:	f000 fe14 	bl	80021e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4812      	ldr	r0, [pc, #72]	@ (800160c <MX_ADC1_Init+0xe8>)
 80015c4:	f007 fee8 	bl	8009398 <HAL_ADCEx_MultiModeConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80015ce:	f000 fe07 	bl	80021e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <MX_ADC1_Init+0xf0>)
 80015d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015d6:	2306      	movs	r3, #6
 80015d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <MX_ADC1_Init+0xf4>)
 80015e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015e2:	2304      	movs	r3, #4
 80015e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_ADC1_Init+0xe8>)
 80015f6:	f007 f88b 	bl	8008710 <HAL_ADC_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001600:	f000 fdee 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3730      	adds	r7, #48	@ 0x30
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	24000318 	.word	0x24000318
 8001610:	40022000 	.word	0x40022000
 8001614:	10c00010 	.word	0x10c00010
 8001618:	47ff0000 	.word	0x47ff0000

0800161c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	@ 0x28
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2224      	movs	r2, #36	@ 0x24
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f019 fa26 	bl	801aa7a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800162e:	4b2c      	ldr	r3, [pc, #176]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 8001630:	4a2c      	ldr	r2, [pc, #176]	@ (80016e4 <MX_ADC2_Init+0xc8>)
 8001632:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001634:	4b2a      	ldr	r3, [pc, #168]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 8001636:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800163a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800163c:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001642:	4b27      	ldr	r3, [pc, #156]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001648:	4b25      	ldr	r3, [pc, #148]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 800164a:	2204      	movs	r2, #4
 800164c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800164e:	4b24      	ldr	r3, [pc, #144]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 8001650:	2200      	movs	r2, #0
 8001652:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001654:	4b22      	ldr	r3, [pc, #136]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 8001656:	2200      	movs	r2, #0
 8001658:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800165a:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 800165c:	2201      	movs	r2, #1
 800165e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001660:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001668:	4b1d      	ldr	r3, [pc, #116]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 800166a:	2200      	movs	r2, #0
 800166c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800166e:	4b1c      	ldr	r3, [pc, #112]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 8001670:	2200      	movs	r2, #0
 8001672:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001674:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 8001676:	2200      	movs	r2, #0
 8001678:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800167a:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 800167c:	2200      	movs	r2, #0
 800167e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001680:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 8001682:	2200      	movs	r2, #0
 8001684:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8001686:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 800168e:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 8001690:	2201      	movs	r2, #1
 8001692:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001694:	4812      	ldr	r0, [pc, #72]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 8001696:	f006 fe33 	bl	8008300 <HAL_ADC_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80016a0:	f000 fd9e 	bl	80021e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80016a4:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <MX_ADC2_Init+0xcc>)
 80016a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016a8:	2306      	movs	r3, #6
 80016aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_ADC2_Init+0xd0>)
 80016b2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016b4:	2304      	movs	r3, #4
 80016b6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4806      	ldr	r0, [pc, #24]	@ (80016e0 <MX_ADC2_Init+0xc4>)
 80016c8:	f007 f822 	bl	8008710 <HAL_ADC_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80016d2:	f000 fd85 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	@ 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	24000388 	.word	0x24000388
 80016e4:	40022100 	.word	0x40022100
 80016e8:	0c900008 	.word	0x0c900008
 80016ec:	47ff0000 	.word	0x47ff0000

080016f0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	@ 0x28
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2224      	movs	r2, #36	@ 0x24
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f019 f9bc 	bl	801aa7a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001702:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <MX_DAC1_Init+0x70>)
 8001704:	4a17      	ldr	r2, [pc, #92]	@ (8001764 <MX_DAC1_Init+0x74>)
 8001706:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001708:	4815      	ldr	r0, [pc, #84]	@ (8001760 <MX_DAC1_Init+0x70>)
 800170a:	f008 f8af 	bl	800986c <HAL_DAC_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001714:	f000 fd64 	bl	80021e0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 800171c:	2306      	movs	r3, #6
 800171e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001720:	2302      	movs	r3, #2
 8001722:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001724:	2301      	movs	r3, #1
 8001726:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	4619      	mov	r1, r3
 8001732:	480b      	ldr	r0, [pc, #44]	@ (8001760 <MX_DAC1_Init+0x70>)
 8001734:	f008 f986 	bl	8009a44 <HAL_DAC_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800173e:	f000 fd4f 	bl	80021e0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2210      	movs	r2, #16
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_DAC1_Init+0x70>)
 800174a:	f008 f97b 	bl	8009a44 <HAL_DAC_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001754:	f000 fd44 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	@ 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	240003f8 	.word	0x240003f8
 8001764:	40007400 	.word	0x40007400

08001768 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800176c:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <MX_I2C2_Init+0x74>)
 800176e:	4a1c      	ldr	r2, [pc, #112]	@ (80017e0 <MX_I2C2_Init+0x78>)
 8001770:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001772:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <MX_I2C2_Init+0x74>)
 8001774:	4a1b      	ldr	r2, [pc, #108]	@ (80017e4 <MX_I2C2_Init+0x7c>)
 8001776:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001778:	4b18      	ldr	r3, [pc, #96]	@ (80017dc <MX_I2C2_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177e:	4b17      	ldr	r3, [pc, #92]	@ (80017dc <MX_I2C2_Init+0x74>)
 8001780:	2201      	movs	r2, #1
 8001782:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <MX_I2C2_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800178a:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <MX_I2C2_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <MX_I2C2_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001796:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <MX_I2C2_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800179c:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <MX_I2C2_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017a2:	480e      	ldr	r0, [pc, #56]	@ (80017dc <MX_I2C2_Init+0x74>)
 80017a4:	f00a fde2 	bl	800c36c <HAL_I2C_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017ae:	f000 fd17 	bl	80021e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4809      	ldr	r0, [pc, #36]	@ (80017dc <MX_I2C2_Init+0x74>)
 80017b6:	f00a fe75 	bl	800c4a4 <HAL_I2CEx_ConfigAnalogFilter>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017c0:	f000 fd0e 	bl	80021e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017c4:	2100      	movs	r1, #0
 80017c6:	4805      	ldr	r0, [pc, #20]	@ (80017dc <MX_I2C2_Init+0x74>)
 80017c8:	f00a feb7 	bl	800c53a <HAL_I2CEx_ConfigDigitalFilter>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017d2:	f000 fd05 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	240004fc 	.word	0x240004fc
 80017e0:	40005800 	.word	0x40005800
 80017e4:	307075b1 	.word	0x307075b1

080017e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017ec:	4b27      	ldr	r3, [pc, #156]	@ (800188c <MX_SPI2_Init+0xa4>)
 80017ee:	4a28      	ldr	r2, [pc, #160]	@ (8001890 <MX_SPI2_Init+0xa8>)
 80017f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017f2:	4b26      	ldr	r3, [pc, #152]	@ (800188c <MX_SPI2_Init+0xa4>)
 80017f4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017fa:	4b24      	ldr	r3, [pc, #144]	@ (800188c <MX_SPI2_Init+0xa4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001800:	4b22      	ldr	r3, [pc, #136]	@ (800188c <MX_SPI2_Init+0xa4>)
 8001802:	2207      	movs	r2, #7
 8001804:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001806:	4b21      	ldr	r3, [pc, #132]	@ (800188c <MX_SPI2_Init+0xa4>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800180c:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <MX_SPI2_Init+0xa4>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001812:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <MX_SPI2_Init+0xa4>)
 8001814:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001818:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800181a:	4b1c      	ldr	r3, [pc, #112]	@ (800188c <MX_SPI2_Init+0xa4>)
 800181c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001820:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001822:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <MX_SPI2_Init+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001828:	4b18      	ldr	r3, [pc, #96]	@ (800188c <MX_SPI2_Init+0xa4>)
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800182e:	4b17      	ldr	r3, [pc, #92]	@ (800188c <MX_SPI2_Init+0xa4>)
 8001830:	2200      	movs	r2, #0
 8001832:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <MX_SPI2_Init+0xa4>)
 8001836:	2200      	movs	r2, #0
 8001838:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800183a:	4b14      	ldr	r3, [pc, #80]	@ (800188c <MX_SPI2_Init+0xa4>)
 800183c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001840:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001842:	4b12      	ldr	r3, [pc, #72]	@ (800188c <MX_SPI2_Init+0xa4>)
 8001844:	2200      	movs	r2, #0
 8001846:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001848:	4b10      	ldr	r3, [pc, #64]	@ (800188c <MX_SPI2_Init+0xa4>)
 800184a:	2200      	movs	r2, #0
 800184c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800184e:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <MX_SPI2_Init+0xa4>)
 8001850:	2200      	movs	r2, #0
 8001852:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001854:	4b0d      	ldr	r3, [pc, #52]	@ (800188c <MX_SPI2_Init+0xa4>)
 8001856:	2200      	movs	r2, #0
 8001858:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <MX_SPI2_Init+0xa4>)
 800185c:	2200      	movs	r2, #0
 800185e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <MX_SPI2_Init+0xa4>)
 8001862:	2200      	movs	r2, #0
 8001864:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <MX_SPI2_Init+0xa4>)
 8001868:	2200      	movs	r2, #0
 800186a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800186c:	4b07      	ldr	r3, [pc, #28]	@ (800188c <MX_SPI2_Init+0xa4>)
 800186e:	2200      	movs	r2, #0
 8001870:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <MX_SPI2_Init+0xa4>)
 8001874:	2200      	movs	r2, #0
 8001876:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	@ (800188c <MX_SPI2_Init+0xa4>)
 800187a:	f00f fcdf 	bl	801123c <HAL_SPI_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001884:	f000 fcac 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	24000550 	.word	0x24000550
 8001890:	40003800 	.word	0x40003800

08001894 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001898:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <MX_SPI3_Init+0xa4>)
 800189a:	4a28      	ldr	r2, [pc, #160]	@ (800193c <MX_SPI3_Init+0xa8>)
 800189c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800189e:	4b26      	ldr	r3, [pc, #152]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018a0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018a6:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018ac:	4b22      	ldr	r3, [pc, #136]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018ae:	2207      	movs	r2, #7
 80018b0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018b2:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018be:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80018c4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018c8:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80018cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018d4:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80018e0:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018ee:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018f4:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <MX_SPI3_Init+0xa4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001900:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <MX_SPI3_Init+0xa4>)
 8001902:	2200      	movs	r2, #0
 8001904:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <MX_SPI3_Init+0xa4>)
 8001908:	2200      	movs	r2, #0
 800190a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800190c:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <MX_SPI3_Init+0xa4>)
 800190e:	2200      	movs	r2, #0
 8001910:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <MX_SPI3_Init+0xa4>)
 8001914:	2200      	movs	r2, #0
 8001916:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001918:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <MX_SPI3_Init+0xa4>)
 800191a:	2200      	movs	r2, #0
 800191c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <MX_SPI3_Init+0xa4>)
 8001920:	2200      	movs	r2, #0
 8001922:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001924:	4804      	ldr	r0, [pc, #16]	@ (8001938 <MX_SPI3_Init+0xa4>)
 8001926:	f00f fc89 	bl	801123c <HAL_SPI_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001930:	f000 fc56 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	240005d8 	.word	0x240005d8
 800193c:	40003c00 	.word	0x40003c00

08001940 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001944:	4b27      	ldr	r3, [pc, #156]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 8001946:	4a28      	ldr	r2, [pc, #160]	@ (80019e8 <MX_SPI4_Init+0xa8>)
 8001948:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800194a:	4b26      	ldr	r3, [pc, #152]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 800194c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001950:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001952:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001958:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 800195a:	2207      	movs	r2, #7
 800195c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800195e:	4b21      	ldr	r3, [pc, #132]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001964:	4b1f      	ldr	r3, [pc, #124]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800196a:	4b1e      	ldr	r3, [pc, #120]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 800196c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001970:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001972:	4b1c      	ldr	r3, [pc, #112]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 8001974:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001978:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800197a:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001980:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001986:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800198c:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 800198e:	2200      	movs	r2, #0
 8001990:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001992:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 8001994:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001998:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800199a:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 800199c:	2200      	movs	r2, #0
 800199e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019a0:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019a6:	4b0f      	ldr	r3, [pc, #60]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019ac:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80019b2:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80019c4:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019ca:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80019d0:	4804      	ldr	r0, [pc, #16]	@ (80019e4 <MX_SPI4_Init+0xa4>)
 80019d2:	f00f fc33 	bl	801123c <HAL_SPI_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80019dc:	f000 fc00 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	24000660 	.word	0x24000660
 80019e8:	40013400 	.word	0x40013400

080019ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a0a:	4b20      	ldr	r3, [pc, #128]	@ (8001a8c <MX_TIM1_Init+0xa0>)
 8001a0c:	4a20      	ldr	r2, [pc, #128]	@ (8001a90 <MX_TIM1_Init+0xa4>)
 8001a0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a10:	4b1e      	ldr	r3, [pc, #120]	@ (8001a8c <MX_TIM1_Init+0xa0>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a16:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <MX_TIM1_Init+0xa0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <MX_TIM1_Init+0xa0>)
 8001a1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a24:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <MX_TIM1_Init+0xa0>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a2a:	4b18      	ldr	r3, [pc, #96]	@ (8001a8c <MX_TIM1_Init+0xa0>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a30:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <MX_TIM1_Init+0xa0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a36:	4815      	ldr	r0, [pc, #84]	@ (8001a8c <MX_TIM1_Init+0xa0>)
 8001a38:	f010 fb35 	bl	80120a6 <HAL_TIM_Base_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a42:	f000 fbcd 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	4619      	mov	r1, r3
 8001a52:	480e      	ldr	r0, [pc, #56]	@ (8001a8c <MX_TIM1_Init+0xa0>)
 8001a54:	f011 fb14 	bl	8013080 <HAL_TIM_ConfigClockSource>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001a5e:	f000 fbbf 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a62:	2320      	movs	r3, #32
 8001a64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	@ (8001a8c <MX_TIM1_Init+0xa0>)
 8001a74:	f012 f956 	bl	8013d24 <HAL_TIMEx_MasterConfigSynchronization>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a7e:	f000 fbaf 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	240006e8 	.word	0x240006e8
 8001a90:	40010000 	.word	0x40010000

08001a94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b2c <MX_TIM2_Init+0x98>)
 8001ab4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ab8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <MX_TIM2_Init+0x98>)
 8001abc:	22ef      	movs	r2, #239	@ 0xef
 8001abe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <MX_TIM2_Init+0x98>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <MX_TIM2_Init+0x98>)
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ace:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <MX_TIM2_Init+0x98>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad4:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <MX_TIM2_Init+0x98>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ada:	4814      	ldr	r0, [pc, #80]	@ (8001b2c <MX_TIM2_Init+0x98>)
 8001adc:	f010 fae3 	bl	80120a6 <HAL_TIM_Base_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ae6:	f000 fb7b 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	4619      	mov	r1, r3
 8001af6:	480d      	ldr	r0, [pc, #52]	@ (8001b2c <MX_TIM2_Init+0x98>)
 8001af8:	f011 fac2 	bl	8013080 <HAL_TIM_ConfigClockSource>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b02:	f000 fb6d 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b06:	2320      	movs	r3, #32
 8001b08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4806      	ldr	r0, [pc, #24]	@ (8001b2c <MX_TIM2_Init+0x98>)
 8001b14:	f012 f906 	bl	8013d24 <HAL_TIMEx_MasterConfigSynchronization>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b1e:	f000 fb5f 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	3720      	adds	r7, #32
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	24000734 	.word	0x24000734

08001b30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08e      	sub	sp, #56	@ 0x38
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b50:	463b      	mov	r3, r7
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]
 8001b5e:	615a      	str	r2, [r3, #20]
 8001b60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b62:	4b38      	ldr	r3, [pc, #224]	@ (8001c44 <MX_TIM3_Init+0x114>)
 8001b64:	4a38      	ldr	r2, [pc, #224]	@ (8001c48 <MX_TIM3_Init+0x118>)
 8001b66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b68:	4b36      	ldr	r3, [pc, #216]	@ (8001c44 <MX_TIM3_Init+0x114>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b35      	ldr	r3, [pc, #212]	@ (8001c44 <MX_TIM3_Init+0x114>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b74:	4b33      	ldr	r3, [pc, #204]	@ (8001c44 <MX_TIM3_Init+0x114>)
 8001b76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7c:	4b31      	ldr	r3, [pc, #196]	@ (8001c44 <MX_TIM3_Init+0x114>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b82:	4b30      	ldr	r3, [pc, #192]	@ (8001c44 <MX_TIM3_Init+0x114>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b88:	482e      	ldr	r0, [pc, #184]	@ (8001c44 <MX_TIM3_Init+0x114>)
 8001b8a:	f010 fa8c 	bl	80120a6 <HAL_TIM_Base_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b94:	f000 fb24 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4827      	ldr	r0, [pc, #156]	@ (8001c44 <MX_TIM3_Init+0x114>)
 8001ba6:	f011 fa6b 	bl	8013080 <HAL_TIM_ConfigClockSource>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001bb0:	f000 fb16 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bb4:	4823      	ldr	r0, [pc, #140]	@ (8001c44 <MX_TIM3_Init+0x114>)
 8001bb6:	f010 fc00 	bl	80123ba <HAL_TIM_PWM_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001bc0:	f000 fb0e 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	481c      	ldr	r0, [pc, #112]	@ (8001c44 <MX_TIM3_Init+0x114>)
 8001bd4:	f012 f8a6 	bl	8013d24 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001bde:	f000 faff 	bl	80021e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be2:	2360      	movs	r3, #96	@ 0x60
 8001be4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4812      	ldr	r0, [pc, #72]	@ (8001c44 <MX_TIM3_Init+0x114>)
 8001bfa:	f011 f92d 	bl	8012e58 <HAL_TIM_PWM_ConfigChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001c04:	f000 faec 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c08:	463b      	mov	r3, r7
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480d      	ldr	r0, [pc, #52]	@ (8001c44 <MX_TIM3_Init+0x114>)
 8001c10:	f011 f922 	bl	8012e58 <HAL_TIM_PWM_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001c1a:	f000 fae1 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c1e:	463b      	mov	r3, r7
 8001c20:	2208      	movs	r2, #8
 8001c22:	4619      	mov	r1, r3
 8001c24:	4807      	ldr	r0, [pc, #28]	@ (8001c44 <MX_TIM3_Init+0x114>)
 8001c26:	f011 f917 	bl	8012e58 <HAL_TIM_PWM_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001c30:	f000 fad6 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c34:	4803      	ldr	r0, [pc, #12]	@ (8001c44 <MX_TIM3_Init+0x114>)
 8001c36:	f000 fee3 	bl	8002a00 <HAL_TIM_MspPostInit>

}
 8001c3a:	bf00      	nop
 8001c3c:	3738      	adds	r7, #56	@ 0x38
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	24000780 	.word	0x24000780
 8001c48:	40000400 	.word	0x40000400

08001c4c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08e      	sub	sp, #56	@ 0x38
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	615a      	str	r2, [r3, #20]
 8001c7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <MX_TIM4_Init+0xe8>)
 8001c80:	4a2d      	ldr	r2, [pc, #180]	@ (8001d38 <MX_TIM4_Init+0xec>)
 8001c82:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c84:	4b2b      	ldr	r3, [pc, #172]	@ (8001d34 <MX_TIM4_Init+0xe8>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d34 <MX_TIM4_Init+0xe8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c90:	4b28      	ldr	r3, [pc, #160]	@ (8001d34 <MX_TIM4_Init+0xe8>)
 8001c92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c98:	4b26      	ldr	r3, [pc, #152]	@ (8001d34 <MX_TIM4_Init+0xe8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9e:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <MX_TIM4_Init+0xe8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ca4:	4823      	ldr	r0, [pc, #140]	@ (8001d34 <MX_TIM4_Init+0xe8>)
 8001ca6:	f010 f9fe 	bl	80120a6 <HAL_TIM_Base_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001cb0:	f000 fa96 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	481c      	ldr	r0, [pc, #112]	@ (8001d34 <MX_TIM4_Init+0xe8>)
 8001cc2:	f011 f9dd 	bl	8013080 <HAL_TIM_ConfigClockSource>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001ccc:	f000 fa88 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cd0:	4818      	ldr	r0, [pc, #96]	@ (8001d34 <MX_TIM4_Init+0xe8>)
 8001cd2:	f010 fb72 	bl	80123ba <HAL_TIM_PWM_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001cdc:	f000 fa80 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	4619      	mov	r1, r3
 8001cee:	4811      	ldr	r0, [pc, #68]	@ (8001d34 <MX_TIM4_Init+0xe8>)
 8001cf0:	f012 f818 	bl	8013d24 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001cfa:	f000 fa71 	bl	80021e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cfe:	2360      	movs	r3, #96	@ 0x60
 8001d00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d0e:	463b      	mov	r3, r7
 8001d10:	2200      	movs	r2, #0
 8001d12:	4619      	mov	r1, r3
 8001d14:	4807      	ldr	r0, [pc, #28]	@ (8001d34 <MX_TIM4_Init+0xe8>)
 8001d16:	f011 f89f 	bl	8012e58 <HAL_TIM_PWM_ConfigChannel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001d20:	f000 fa5e 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d24:	4803      	ldr	r0, [pc, #12]	@ (8001d34 <MX_TIM4_Init+0xe8>)
 8001d26:	f000 fe6b 	bl	8002a00 <HAL_TIM_MspPostInit>

}
 8001d2a:	bf00      	nop
 8001d2c:	3738      	adds	r7, #56	@ 0x38
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	240007cc 	.word	0x240007cc
 8001d38:	40000800 	.word	0x40000800

08001d3c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001d40:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001d42:	4a24      	ldr	r2, [pc, #144]	@ (8001dd4 <MX_UART7_Init+0x98>)
 8001d44:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001d46:	4b22      	ldr	r3, [pc, #136]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001d48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d4c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001d62:	220c      	movs	r2, #12
 8001d64:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001d68:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001d6c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d74:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d80:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001d86:	4812      	ldr	r0, [pc, #72]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001d88:	f012 f886 	bl	8013e98 <HAL_UART_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001d92:	f000 fa25 	bl	80021e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d96:	2100      	movs	r1, #0
 8001d98:	480d      	ldr	r0, [pc, #52]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001d9a:	f013 f992 	bl	80150c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001da4:	f000 fa1c 	bl	80021e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da8:	2100      	movs	r1, #0
 8001daa:	4809      	ldr	r0, [pc, #36]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001dac:	f013 f9c7 	bl	801513e <HAL_UARTEx_SetRxFifoThreshold>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001db6:	f000 fa13 	bl	80021e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <MX_UART7_Init+0x94>)
 8001dbc:	f013 f948 	bl	8015050 <HAL_UARTEx_DisableFifoMode>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001dc6:	f000 fa0b 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	24000890 	.word	0x24000890
 8001dd4:	40007800 	.word	0x40007800

08001dd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ddc:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001dde:	4a23      	ldr	r2, [pc, #140]	@ (8001e6c <MX_USART1_UART_Init+0x94>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001de2:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b17      	ldr	r3, [pc, #92]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0e:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e14:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e20:	4811      	ldr	r0, [pc, #68]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e22:	f012 f839 	bl	8013e98 <HAL_UART_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e2c:	f000 f9d8 	bl	80021e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e30:	2100      	movs	r1, #0
 8001e32:	480d      	ldr	r0, [pc, #52]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e34:	f013 f945 	bl	80150c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e3e:	f000 f9cf 	bl	80021e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e42:	2100      	movs	r1, #0
 8001e44:	4808      	ldr	r0, [pc, #32]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e46:	f013 f97a 	bl	801513e <HAL_UARTEx_SetRxFifoThreshold>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e50:	f000 f9c6 	bl	80021e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e56:	f013 f8fb 	bl	8015050 <HAL_UARTEx_DisableFifoMode>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e60:	f000 f9be 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	24000924 	.word	0x24000924
 8001e6c:	40011000 	.word	0x40011000

08001e70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <MX_DMA_Init+0x5c>)
 8001e78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e7c:	4a13      	ldr	r2, [pc, #76]	@ (8001ecc <MX_DMA_Init+0x5c>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e86:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <MX_DMA_Init+0x5c>)
 8001e88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 1);
 8001e94:	2201      	movs	r2, #1
 8001e96:	2101      	movs	r1, #1
 8001e98:	200b      	movs	r0, #11
 8001e9a:	f007 fc3a 	bl	8009712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e9e:	200b      	movs	r0, #11
 8001ea0:	f007 fc51 	bl	8009746 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 1);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	200c      	movs	r0, #12
 8001eaa:	f007 fc32 	bl	8009712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001eae:	200c      	movs	r0, #12
 8001eb0:	f007 fc49 	bl	8009746 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 1);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	200d      	movs	r0, #13
 8001eba:	f007 fc2a 	bl	8009712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ebe:	200d      	movs	r0, #13
 8001ec0:	f007 fc41 	bl	8009746 <HAL_NVIC_EnableIRQ>

}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	58024400 	.word	0x58024400

08001ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	@ 0x30
 8001ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ee6:	4ba2      	ldr	r3, [pc, #648]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eec:	4aa0      	ldr	r2, [pc, #640]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001eee:	f043 0310 	orr.w	r3, r3, #16
 8001ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ef6:	4b9e      	ldr	r3, [pc, #632]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f04:	4b9a      	ldr	r3, [pc, #616]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0a:	4a99      	ldr	r2, [pc, #612]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f14:	4b96      	ldr	r3, [pc, #600]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f22:	4b93      	ldr	r3, [pc, #588]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f28:	4a91      	ldr	r2, [pc, #580]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f32:	4b8f      	ldr	r3, [pc, #572]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f40:	4b8b      	ldr	r3, [pc, #556]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f46:	4a8a      	ldr	r2, [pc, #552]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f50:	4b87      	ldr	r3, [pc, #540]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	4b84      	ldr	r3, [pc, #528]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f64:	4a82      	ldr	r2, [pc, #520]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f6e:	4b80      	ldr	r3, [pc, #512]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7c:	4b7c      	ldr	r3, [pc, #496]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f82:	4a7b      	ldr	r2, [pc, #492]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f8c:	4b78      	ldr	r3, [pc, #480]	@ (8002170 <MX_GPIO_Init+0x2a0>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS3_GPIO_Port, ACCEL_NCS3_Pin, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2110      	movs	r1, #16
 8001f9e:	4875      	ldr	r0, [pc, #468]	@ (8002174 <MX_GPIO_Init+0x2a4>)
 8001fa0:	f00a f9b0 	bl	800c304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2104      	movs	r1, #4
 8001fa8:	4873      	ldr	r0, [pc, #460]	@ (8002178 <MX_GPIO_Init+0x2a8>)
 8001faa:	f00a f9ab 	bl	800c304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	4872      	ldr	r0, [pc, #456]	@ (800217c <MX_GPIO_Init+0x2ac>)
 8001fb4:	f00a f9a6 	bl	800c304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	210a      	movs	r1, #10
 8001fbc:	486f      	ldr	r0, [pc, #444]	@ (800217c <MX_GPIO_Init+0x2ac>)
 8001fbe:	f00a f9a1 	bl	800c304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS1_GPIO_Port, ACCEL_NCS1_Pin, GPIO_PIN_SET);
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fc8:	486d      	ldr	r0, [pc, #436]	@ (8002180 <MX_GPIO_Init+0x2b0>)
 8001fca:	f00a f99b 	bl	800c304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS2_GPIO_Port, ACCEL_NCS2_Pin, GPIO_PIN_SET);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	486c      	ldr	r0, [pc, #432]	@ (8002184 <MX_GPIO_Init+0x2b4>)
 8001fd4:	f00a f996 	bl	800c304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fde:	4868      	ldr	r0, [pc, #416]	@ (8002180 <MX_GPIO_Init+0x2b0>)
 8001fe0:	f00a f990 	bl	800c304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACCEL_INTA3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA3_Pin;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fe8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTA3_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	485e      	ldr	r0, [pc, #376]	@ (8002174 <MX_GPIO_Init+0x2a4>)
 8001ffa:	f009 ffc3 	bl	800bf84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS3_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS3_Pin;
 8001ffe:	2310      	movs	r3, #16
 8002000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002002:	2301      	movs	r3, #1
 8002004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS3_GPIO_Port, &GPIO_InitStruct);
 800200e:	f107 031c 	add.w	r3, r7, #28
 8002012:	4619      	mov	r1, r3
 8002014:	4857      	ldr	r0, [pc, #348]	@ (8002174 <MX_GPIO_Init+0x2a4>)
 8002016:	f009 ffb5 	bl	800bf84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INTB3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTB3_Pin;
 800201a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800201e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002020:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTB3_GPIO_Port, &GPIO_InitStruct);
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	4619      	mov	r1, r3
 8002030:	4851      	ldr	r0, [pc, #324]	@ (8002178 <MX_GPIO_Init+0x2a8>)
 8002032:	f009 ffa7 	bl	800bf84 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 8002036:	2304      	movs	r3, #4
 8002038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	484a      	ldr	r0, [pc, #296]	@ (8002178 <MX_GPIO_Init+0x2a8>)
 800204e:	f009 ff99 	bl	800bf84 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8002052:	230b      	movs	r3, #11
 8002054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	4619      	mov	r1, r3
 8002068:	4844      	ldr	r0, [pc, #272]	@ (800217c <MX_GPIO_Init+0x2ac>)
 800206a:	f009 ff8b 	bl	800bf84 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin RECORD_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|RECORD_BUTTON_Pin;
 800206e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 031c 	add.w	r3, r7, #28
 8002080:	4619      	mov	r1, r3
 8002082:	483e      	ldr	r0, [pc, #248]	@ (800217c <MX_GPIO_Init+0x2ac>)
 8002084:	f009 ff7e 	bl	800bf84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS1_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin;
 8002088:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800208c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208e:	2301      	movs	r3, #1
 8002090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS1_GPIO_Port, &GPIO_InitStruct);
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4619      	mov	r1, r3
 80020a0:	4837      	ldr	r0, [pc, #220]	@ (8002180 <MX_GPIO_Init+0x2b0>)
 80020a2:	f009 ff6f 	bl	800bf84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin ACCEL_INTA2_Pin ACCEL_INTB2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|ACCEL_INTA2_Pin|ACCEL_INTB2_Pin;
 80020a6:	f240 3306 	movw	r3, #774	@ 0x306
 80020aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	4619      	mov	r1, r3
 80020bc:	4831      	ldr	r0, [pc, #196]	@ (8002184 <MX_GPIO_Init+0x2b4>)
 80020be:	f009 ff61 	bl	800bf84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_EXT_Pin */
  GPIO_InitStruct.Pin = DAC_EXT_Pin;
 80020c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAC_EXT_GPIO_Port, &GPIO_InitStruct);
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	4619      	mov	r1, r3
 80020d6:	4828      	ldr	r0, [pc, #160]	@ (8002178 <MX_GPIO_Init+0x2a8>)
 80020d8:	f009 ff54 	bl	800bf84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS2_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS2_Pin;
 80020dc:	2301      	movs	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e0:	2301      	movs	r3, #1
 80020e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS2_GPIO_Port, &GPIO_InitStruct);
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	4619      	mov	r1, r3
 80020f2:	4824      	ldr	r0, [pc, #144]	@ (8002184 <MX_GPIO_Init+0x2b4>)
 80020f4:	f009 ff46 	bl	800bf84 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = RECORD_INDICATOR_Pin;
 80020f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fe:	2301      	movs	r3, #1
 8002100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RECORD_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	4619      	mov	r1, r3
 8002110:	481b      	ldr	r0, [pc, #108]	@ (8002180 <MX_GPIO_Init+0x2b0>)
 8002112:	f009 ff37 	bl	800bf84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	2007      	movs	r0, #7
 800211c:	f007 faf9 	bl	8009712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002120:	2007      	movs	r0, #7
 8002122:	f007 fb10 	bl	8009746 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2008      	movs	r0, #8
 800212c:	f007 faf1 	bl	8009712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002130:	2008      	movs	r0, #8
 8002132:	f007 fb08 	bl	8009746 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	2009      	movs	r0, #9
 800213c:	f007 fae9 	bl	8009712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002140:	2009      	movs	r0, #9
 8002142:	f007 fb00 	bl	8009746 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	2017      	movs	r0, #23
 800214c:	f007 fae1 	bl	8009712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002150:	2017      	movs	r0, #23
 8002152:	f007 faf8 	bl	8009746 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2100      	movs	r1, #0
 800215a:	2028      	movs	r0, #40	@ 0x28
 800215c:	f007 fad9 	bl	8009712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002160:	2028      	movs	r0, #40	@ 0x28
 8002162:	f007 faf0 	bl	8009746 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002166:	bf00      	nop
 8002168:	3730      	adds	r7, #48	@ 0x30
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	58024400 	.word	0x58024400
 8002174:	58021000 	.word	0x58021000
 8002178:	58020800 	.word	0x58020800
 800217c:	58020000 	.word	0x58020000
 8002180:	58020400 	.word	0x58020400
 8002184:	58020c00 	.word	0x58020c00

08002188 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800218e:	463b      	mov	r3, r7
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800219a:	f007 faef 	bl	800977c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800219e:	2301      	movs	r3, #1
 80021a0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80021aa:	231f      	movs	r3, #31
 80021ac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80021ae:	2387      	movs	r3, #135	@ 0x87
 80021b0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80021b6:	2300      	movs	r3, #0
 80021b8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80021ba:	2301      	movs	r3, #1
 80021bc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80021be:	2301      	movs	r3, #1
 80021c0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021ca:	463b      	mov	r3, r7
 80021cc:	4618      	mov	r0, r3
 80021ce:	f007 fb0d 	bl	80097ec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80021d2:	2004      	movs	r0, #4
 80021d4:	f007 faea 	bl	80097ac <HAL_MPU_Enable>

}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e4:	b672      	cpsid	i
}
 80021e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <Error_Handler+0x8>

080021ec <Sequencer_Init>:
 */

#include "sequencer.h"

void Sequencer_Init(Sequencer* sequencer)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	sequencer->sequence_time_array = NULL;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = 0;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	605a      	str	r2, [r3, #4]
	sequencer->sequence_index = 0;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
	sequencer->time = 0;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	60da      	str	r2, [r3, #12]

	sequencer->is_running = 0;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	741a      	strb	r2, [r3, #16]
	sequencer->is_looping = 0;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	745a      	strb	r2, [r3, #17]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <Sequencer_SetSequence>:

void Sequencer_SetSequence(Sequencer* sequencer, const uint32_t* sequence_time_array, const uint32_t sequence_len, uint8_t is_looping)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	70fb      	strb	r3, [r7, #3]
	sequencer->sequence_time_array = sequence_time_array;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = sequence_len;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	605a      	str	r2, [r3, #4]
	sequencer->is_looping = is_looping;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	745a      	strb	r2, [r3, #17]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <Sequencer_Update>:

uint32_t Sequencer_Update(Sequencer* sequencer, uint32_t time, uint32_t* index)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
	/*
	 * each element in the time array says how long to hold that step for
	 */

	if (sequencer->is_running && sequencer->sequence_time_array != NULL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	7c1b      	ldrb	r3, [r3, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d030      	beq.n	80022c6 <Sequencer_Update+0x76>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d02c      	beq.n	80022c6 <Sequencer_Update+0x76>
	{
		if (time > sequencer->time)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	429a      	cmp	r2, r3
 8002274:	d927      	bls.n	80022c6 <Sequencer_Update+0x76>
		{
			*index = sequencer->sequence_index;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	601a      	str	r2, [r3, #0]
			sequencer->time += sequencer->sequence_time_array[sequencer->sequence_index];
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6819      	ldr	r1, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	441a      	add	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	60da      	str	r2, [r3, #12]
			sequencer->sequence_index++;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	609a      	str	r2, [r3, #8]

			if (sequencer->sequence_index == sequencer->sequence_len)  /* reached the end of the sequence */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d10a      	bne.n	80022c2 <Sequencer_Update+0x72>
			{
				if (sequencer->is_looping)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	7c5b      	ldrb	r3, [r3, #17]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <Sequencer_Update+0x6c>
					sequencer->sequence_index = 0;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	e002      	b.n	80022c2 <Sequencer_Update+0x72>
				else
					sequencer->is_running = 0;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	741a      	strb	r2, [r3, #16]
			}

			return 1;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <Sequencer_Update+0x78>
		}
	}

	return 0;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <Sequencer_Start>:

void Sequencer_Start(Sequencer* sequencer, uint32_t time)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
	sequencer->time = time;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	60da      	str	r2, [r3, #12]
	sequencer->sequence_index = 0;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
	sequencer->is_running = 1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	741a      	strb	r2, [r3, #16]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <Sequencer_Stop>:

void Sequencer_Stop(Sequencer* sequencer)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	sequencer->is_running = 0;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	741a      	strb	r2, [r3, #16]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <Sequencer_IsRunning>:

uint32_t Sequencer_IsRunning(Sequencer* sequencer)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
	return sequencer->is_running;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7c1b      	ldrb	r3, [r3, #16]
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <HAL_MspInit+0x34>)
 8002338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800233c:	4a09      	ldr	r2, [pc, #36]	@ (8002364 <HAL_MspInit+0x34>)
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002346:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <HAL_MspInit+0x34>)
 8002348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002354:	2005      	movs	r0, #5
 8002356:	f007 f9d1 	bl	80096fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	58024400 	.word	0x58024400

08002368 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08c      	sub	sp, #48	@ 0x30
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a39      	ldr	r2, [pc, #228]	@ (800246c <HAL_ADC_MspInit+0x104>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d133      	bne.n	80023f2 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800238a:	4b39      	ldr	r3, [pc, #228]	@ (8002470 <HAL_ADC_MspInit+0x108>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3301      	adds	r3, #1
 8002390:	4a37      	ldr	r2, [pc, #220]	@ (8002470 <HAL_ADC_MspInit+0x108>)
 8002392:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002394:	4b36      	ldr	r3, [pc, #216]	@ (8002470 <HAL_ADC_MspInit+0x108>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d10e      	bne.n	80023ba <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800239c:	4b35      	ldr	r3, [pc, #212]	@ (8002474 <HAL_ADC_MspInit+0x10c>)
 800239e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023a2:	4a34      	ldr	r2, [pc, #208]	@ (8002474 <HAL_ADC_MspInit+0x10c>)
 80023a4:	f043 0320 	orr.w	r3, r3, #32
 80023a8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80023ac:	4b31      	ldr	r3, [pc, #196]	@ (8002474 <HAL_ADC_MspInit+0x10c>)
 80023ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002474 <HAL_ADC_MspInit+0x10c>)
 80023bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002474 <HAL_ADC_MspInit+0x10c>)
 80023c2:	f043 0304 	orr.w	r3, r3, #4
 80023c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002474 <HAL_ADC_MspInit+0x10c>)
 80023cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023d8:	2330      	movs	r3, #48	@ 0x30
 80023da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023dc:	2303      	movs	r3, #3
 80023de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e4:	f107 031c 	add.w	r3, r7, #28
 80023e8:	4619      	mov	r1, r3
 80023ea:	4823      	ldr	r0, [pc, #140]	@ (8002478 <HAL_ADC_MspInit+0x110>)
 80023ec:	f009 fdca 	bl	800bf84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80023f0:	e037      	b.n	8002462 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a21      	ldr	r2, [pc, #132]	@ (800247c <HAL_ADC_MspInit+0x114>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d132      	bne.n	8002462 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80023fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002470 <HAL_ADC_MspInit+0x108>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	3301      	adds	r3, #1
 8002402:	4a1b      	ldr	r2, [pc, #108]	@ (8002470 <HAL_ADC_MspInit+0x108>)
 8002404:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002406:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <HAL_ADC_MspInit+0x108>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d10e      	bne.n	800242c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800240e:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <HAL_ADC_MspInit+0x10c>)
 8002410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002414:	4a17      	ldr	r2, [pc, #92]	@ (8002474 <HAL_ADC_MspInit+0x10c>)
 8002416:	f043 0320 	orr.w	r3, r3, #32
 800241a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <HAL_ADC_MspInit+0x10c>)
 8002420:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <HAL_ADC_MspInit+0x10c>)
 800242e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002432:	4a10      	ldr	r2, [pc, #64]	@ (8002474 <HAL_ADC_MspInit+0x10c>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800243c:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <HAL_ADC_MspInit+0x10c>)
 800243e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800244a:	23c0      	movs	r3, #192	@ 0xc0
 800244c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800244e:	2303      	movs	r3, #3
 8002450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	f107 031c 	add.w	r3, r7, #28
 800245a:	4619      	mov	r1, r3
 800245c:	4808      	ldr	r0, [pc, #32]	@ (8002480 <HAL_ADC_MspInit+0x118>)
 800245e:	f009 fd91 	bl	800bf84 <HAL_GPIO_Init>
}
 8002462:	bf00      	nop
 8002464:	3730      	adds	r7, #48	@ 0x30
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40022000 	.word	0x40022000
 8002470:	240144ec 	.word	0x240144ec
 8002474:	58024400 	.word	0x58024400
 8002478:	58020800 	.word	0x58020800
 800247c:	40022100 	.word	0x40022100
 8002480:	58020000 	.word	0x58020000

08002484 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	@ 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a48      	ldr	r2, [pc, #288]	@ (80025c4 <HAL_DAC_MspInit+0x140>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	f040 808a 	bne.w	80025bc <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80024a8:	4b47      	ldr	r3, [pc, #284]	@ (80025c8 <HAL_DAC_MspInit+0x144>)
 80024aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024ae:	4a46      	ldr	r2, [pc, #280]	@ (80025c8 <HAL_DAC_MspInit+0x144>)
 80024b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80024b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024b8:	4b43      	ldr	r3, [pc, #268]	@ (80025c8 <HAL_DAC_MspInit+0x144>)
 80024ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	4b40      	ldr	r3, [pc, #256]	@ (80025c8 <HAL_DAC_MspInit+0x144>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024cc:	4a3e      	ldr	r2, [pc, #248]	@ (80025c8 <HAL_DAC_MspInit+0x144>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024d6:	4b3c      	ldr	r3, [pc, #240]	@ (80025c8 <HAL_DAC_MspInit+0x144>)
 80024d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024e4:	2330      	movs	r3, #48	@ 0x30
 80024e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e8:	2303      	movs	r3, #3
 80024ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4619      	mov	r1, r3
 80024f6:	4835      	ldr	r0, [pc, #212]	@ (80025cc <HAL_DAC_MspInit+0x148>)
 80024f8:	f009 fd44 	bl	800bf84 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 80024fc:	4b34      	ldr	r3, [pc, #208]	@ (80025d0 <HAL_DAC_MspInit+0x14c>)
 80024fe:	4a35      	ldr	r2, [pc, #212]	@ (80025d4 <HAL_DAC_MspInit+0x150>)
 8002500:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002502:	4b33      	ldr	r3, [pc, #204]	@ (80025d0 <HAL_DAC_MspInit+0x14c>)
 8002504:	2243      	movs	r2, #67	@ 0x43
 8002506:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002508:	4b31      	ldr	r3, [pc, #196]	@ (80025d0 <HAL_DAC_MspInit+0x14c>)
 800250a:	2240      	movs	r2, #64	@ 0x40
 800250c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800250e:	4b30      	ldr	r3, [pc, #192]	@ (80025d0 <HAL_DAC_MspInit+0x14c>)
 8002510:	2200      	movs	r2, #0
 8002512:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002514:	4b2e      	ldr	r3, [pc, #184]	@ (80025d0 <HAL_DAC_MspInit+0x14c>)
 8002516:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800251a:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800251c:	4b2c      	ldr	r3, [pc, #176]	@ (80025d0 <HAL_DAC_MspInit+0x14c>)
 800251e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002522:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002524:	4b2a      	ldr	r3, [pc, #168]	@ (80025d0 <HAL_DAC_MspInit+0x14c>)
 8002526:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800252a:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800252c:	4b28      	ldr	r3, [pc, #160]	@ (80025d0 <HAL_DAC_MspInit+0x14c>)
 800252e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002532:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002534:	4b26      	ldr	r3, [pc, #152]	@ (80025d0 <HAL_DAC_MspInit+0x14c>)
 8002536:	2200      	movs	r2, #0
 8002538:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800253a:	4b25      	ldr	r3, [pc, #148]	@ (80025d0 <HAL_DAC_MspInit+0x14c>)
 800253c:	2200      	movs	r2, #0
 800253e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002540:	4823      	ldr	r0, [pc, #140]	@ (80025d0 <HAL_DAC_MspInit+0x14c>)
 8002542:	f007 fc4b 	bl	8009ddc <HAL_DMA_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 800254c:	f7ff fe48 	bl	80021e0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a1f      	ldr	r2, [pc, #124]	@ (80025d0 <HAL_DAC_MspInit+0x14c>)
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	4a1e      	ldr	r2, [pc, #120]	@ (80025d0 <HAL_DAC_MspInit+0x14c>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 800255c:	4b1e      	ldr	r3, [pc, #120]	@ (80025d8 <HAL_DAC_MspInit+0x154>)
 800255e:	4a1f      	ldr	r2, [pc, #124]	@ (80025dc <HAL_DAC_MspInit+0x158>)
 8002560:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8002562:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <HAL_DAC_MspInit+0x154>)
 8002564:	2244      	movs	r2, #68	@ 0x44
 8002566:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002568:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <HAL_DAC_MspInit+0x154>)
 800256a:	2240      	movs	r2, #64	@ 0x40
 800256c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800256e:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <HAL_DAC_MspInit+0x154>)
 8002570:	2200      	movs	r2, #0
 8002572:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002574:	4b18      	ldr	r3, [pc, #96]	@ (80025d8 <HAL_DAC_MspInit+0x154>)
 8002576:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800257a:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800257c:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <HAL_DAC_MspInit+0x154>)
 800257e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002582:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002584:	4b14      	ldr	r3, [pc, #80]	@ (80025d8 <HAL_DAC_MspInit+0x154>)
 8002586:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800258a:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800258c:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_DAC_MspInit+0x154>)
 800258e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002592:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002594:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <HAL_DAC_MspInit+0x154>)
 8002596:	2200      	movs	r2, #0
 8002598:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800259a:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <HAL_DAC_MspInit+0x154>)
 800259c:	2200      	movs	r2, #0
 800259e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80025a0:	480d      	ldr	r0, [pc, #52]	@ (80025d8 <HAL_DAC_MspInit+0x154>)
 80025a2:	f007 fc1b 	bl	8009ddc <HAL_DMA_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80025ac:	f7ff fe18 	bl	80021e0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a09      	ldr	r2, [pc, #36]	@ (80025d8 <HAL_DAC_MspInit+0x154>)
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	4a08      	ldr	r2, [pc, #32]	@ (80025d8 <HAL_DAC_MspInit+0x154>)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80025bc:	bf00      	nop
 80025be:	3728      	adds	r7, #40	@ 0x28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40007400 	.word	0x40007400
 80025c8:	58024400 	.word	0x58024400
 80025cc:	58020000 	.word	0x58020000
 80025d0:	2400040c 	.word	0x2400040c
 80025d4:	40020010 	.word	0x40020010
 80025d8:	24000484 	.word	0x24000484
 80025dc:	40020028 	.word	0x40020028

080025e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b0b8      	sub	sp, #224	@ 0xe0
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	22b8      	movs	r2, #184	@ 0xb8
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f018 fa3a 	bl	801aa7a <memset>
  if(hi2c->Instance==I2C2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a27      	ldr	r2, [pc, #156]	@ (80026a8 <HAL_I2C_MspInit+0xc8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d146      	bne.n	800269e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002610:	f04f 0208 	mov.w	r2, #8
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002622:	f107 0310 	add.w	r3, r7, #16
 8002626:	4618      	mov	r0, r3
 8002628:	f00c fa22 	bl	800ea70 <HAL_RCCEx_PeriphCLKConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002632:	f7ff fdd5 	bl	80021e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002636:	4b1d      	ldr	r3, [pc, #116]	@ (80026ac <HAL_I2C_MspInit+0xcc>)
 8002638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800263c:	4a1b      	ldr	r2, [pc, #108]	@ (80026ac <HAL_I2C_MspInit+0xcc>)
 800263e:	f043 0302 	orr.w	r3, r3, #2
 8002642:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002646:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <HAL_I2C_MspInit+0xcc>)
 8002648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002654:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002658:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800265c:	2312      	movs	r3, #18
 800265e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800266e:	2304      	movs	r3, #4
 8002670:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002674:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002678:	4619      	mov	r1, r3
 800267a:	480d      	ldr	r0, [pc, #52]	@ (80026b0 <HAL_I2C_MspInit+0xd0>)
 800267c:	f009 fc82 	bl	800bf84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002680:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <HAL_I2C_MspInit+0xcc>)
 8002682:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002686:	4a09      	ldr	r2, [pc, #36]	@ (80026ac <HAL_I2C_MspInit+0xcc>)
 8002688:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800268c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <HAL_I2C_MspInit+0xcc>)
 8002692:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800269e:	bf00      	nop
 80026a0:	37e0      	adds	r7, #224	@ 0xe0
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40005800 	.word	0x40005800
 80026ac:	58024400 	.word	0x58024400
 80026b0:	58020400 	.word	0x58020400

080026b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b0bc      	sub	sp, #240	@ 0xf0
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026cc:	f107 0320 	add.w	r3, r7, #32
 80026d0:	22b8      	movs	r2, #184	@ 0xb8
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f018 f9d0 	bl	801aa7a <memset>
  if(hspi->Instance==SPI2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a72      	ldr	r2, [pc, #456]	@ (80028a8 <HAL_SPI_MspInit+0x1f4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d146      	bne.n	8002772 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80026e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f4:	f107 0320 	add.w	r3, r7, #32
 80026f8:	4618      	mov	r0, r3
 80026fa:	f00c f9b9 	bl	800ea70 <HAL_RCCEx_PeriphCLKConfig>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002704:	f7ff fd6c 	bl	80021e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002708:	4b68      	ldr	r3, [pc, #416]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 800270a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800270e:	4a67      	ldr	r2, [pc, #412]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 8002710:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002714:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002718:	4b64      	ldr	r3, [pc, #400]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 800271a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800271e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	4b61      	ldr	r3, [pc, #388]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 8002728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800272c:	4a5f      	ldr	r2, [pc, #380]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 800272e:	f043 0302 	orr.w	r3, r3, #2
 8002732:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002736:	4b5d      	ldr	r3, [pc, #372]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 8002738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8002744:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002748:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800275e:	2305      	movs	r3, #5
 8002760:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002764:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002768:	4619      	mov	r1, r3
 800276a:	4851      	ldr	r0, [pc, #324]	@ (80028b0 <HAL_SPI_MspInit+0x1fc>)
 800276c:	f009 fc0a 	bl	800bf84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002770:	e096      	b.n	80028a0 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a4f      	ldr	r2, [pc, #316]	@ (80028b4 <HAL_SPI_MspInit+0x200>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d146      	bne.n	800280a <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800277c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002788:	2300      	movs	r3, #0
 800278a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800278c:	f107 0320 	add.w	r3, r7, #32
 8002790:	4618      	mov	r0, r3
 8002792:	f00c f96d 	bl	800ea70 <HAL_RCCEx_PeriphCLKConfig>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 800279c:	f7ff fd20 	bl	80021e0 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027a0:	4b42      	ldr	r3, [pc, #264]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 80027a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027a6:	4a41      	ldr	r2, [pc, #260]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 80027a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027b0:	4b3e      	ldr	r3, [pc, #248]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 80027b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027be:	4b3b      	ldr	r3, [pc, #236]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 80027c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027c4:	4a39      	ldr	r2, [pc, #228]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 80027c6:	f043 0304 	orr.w	r3, r3, #4
 80027ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027ce:	4b37      	ldr	r3, [pc, #220]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 80027d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ACCEL_SCK2_Pin|ACCEL_MISO2_Pin|ACCEL_MOSI2_Pin;
 80027dc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80027e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027f6:	2306      	movs	r3, #6
 80027f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002800:	4619      	mov	r1, r3
 8002802:	482d      	ldr	r0, [pc, #180]	@ (80028b8 <HAL_SPI_MspInit+0x204>)
 8002804:	f009 fbbe 	bl	800bf84 <HAL_GPIO_Init>
}
 8002808:	e04a      	b.n	80028a0 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2b      	ldr	r2, [pc, #172]	@ (80028bc <HAL_SPI_MspInit+0x208>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d145      	bne.n	80028a0 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002814:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002826:	f107 0320 	add.w	r3, r7, #32
 800282a:	4618      	mov	r0, r3
 800282c:	f00c f920 	bl	800ea70 <HAL_RCCEx_PeriphCLKConfig>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_SPI_MspInit+0x186>
      Error_Handler();
 8002836:	f7ff fcd3 	bl	80021e0 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800283a:	4b1c      	ldr	r3, [pc, #112]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 800283c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002840:	4a1a      	ldr	r2, [pc, #104]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 8002842:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002846:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800284a:	4b18      	ldr	r3, [pc, #96]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 800284c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002858:	4b14      	ldr	r3, [pc, #80]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 800285a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800285e:	4a13      	ldr	r2, [pc, #76]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 8002860:	f043 0310 	orr.w	r3, r3, #16
 8002864:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002868:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <HAL_SPI_MspInit+0x1f8>)
 800286a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_SCK3_Pin|ACCEL_MISO3_Pin|ACCEL_MOSI3_Pin;
 8002876:	2364      	movs	r3, #100	@ 0x64
 8002878:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800288e:	2305      	movs	r3, #5
 8002890:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002894:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002898:	4619      	mov	r1, r3
 800289a:	4809      	ldr	r0, [pc, #36]	@ (80028c0 <HAL_SPI_MspInit+0x20c>)
 800289c:	f009 fb72 	bl	800bf84 <HAL_GPIO_Init>
}
 80028a0:	bf00      	nop
 80028a2:	37f0      	adds	r7, #240	@ 0xf0
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40003800 	.word	0x40003800
 80028ac:	58024400 	.word	0x58024400
 80028b0:	58020400 	.word	0x58020400
 80028b4:	40003c00 	.word	0x40003c00
 80028b8:	58020800 	.word	0x58020800
 80028bc:	40013400 	.word	0x40013400
 80028c0:	58021000 	.word	0x58021000

080028c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a45      	ldr	r2, [pc, #276]	@ (80029e8 <HAL_TIM_Base_MspInit+0x124>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d10f      	bne.n	80028f6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028d6:	4b45      	ldr	r3, [pc, #276]	@ (80029ec <HAL_TIM_Base_MspInit+0x128>)
 80028d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028dc:	4a43      	ldr	r2, [pc, #268]	@ (80029ec <HAL_TIM_Base_MspInit+0x128>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028e6:	4b41      	ldr	r3, [pc, #260]	@ (80029ec <HAL_TIM_Base_MspInit+0x128>)
 80028e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028f4:	e074      	b.n	80029e0 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028fe:	d10f      	bne.n	8002920 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002900:	4b3a      	ldr	r3, [pc, #232]	@ (80029ec <HAL_TIM_Base_MspInit+0x128>)
 8002902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002906:	4a39      	ldr	r2, [pc, #228]	@ (80029ec <HAL_TIM_Base_MspInit+0x128>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002910:	4b36      	ldr	r3, [pc, #216]	@ (80029ec <HAL_TIM_Base_MspInit+0x128>)
 8002912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]
}
 800291e:	e05f      	b.n	80029e0 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a32      	ldr	r2, [pc, #200]	@ (80029f0 <HAL_TIM_Base_MspInit+0x12c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d117      	bne.n	800295a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800292a:	4b30      	ldr	r3, [pc, #192]	@ (80029ec <HAL_TIM_Base_MspInit+0x128>)
 800292c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002930:	4a2e      	ldr	r2, [pc, #184]	@ (80029ec <HAL_TIM_Base_MspInit+0x128>)
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800293a:	4b2c      	ldr	r3, [pc, #176]	@ (80029ec <HAL_TIM_Base_MspInit+0x128>)
 800293c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
 8002948:	2201      	movs	r2, #1
 800294a:	2101      	movs	r1, #1
 800294c:	201d      	movs	r0, #29
 800294e:	f006 fee0 	bl	8009712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002952:	201d      	movs	r0, #29
 8002954:	f006 fef7 	bl	8009746 <HAL_NVIC_EnableIRQ>
}
 8002958:	e042      	b.n	80029e0 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a25      	ldr	r2, [pc, #148]	@ (80029f4 <HAL_TIM_Base_MspInit+0x130>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d13d      	bne.n	80029e0 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002964:	4b21      	ldr	r3, [pc, #132]	@ (80029ec <HAL_TIM_Base_MspInit+0x128>)
 8002966:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800296a:	4a20      	ldr	r2, [pc, #128]	@ (80029ec <HAL_TIM_Base_MspInit+0x128>)
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002974:	4b1d      	ldr	r3, [pc, #116]	@ (80029ec <HAL_TIM_Base_MspInit+0x128>)
 8002976:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream2;
 8002982:	4b1d      	ldr	r3, [pc, #116]	@ (80029f8 <HAL_TIM_Base_MspInit+0x134>)
 8002984:	4a1d      	ldr	r2, [pc, #116]	@ (80029fc <HAL_TIM_Base_MspInit+0x138>)
 8002986:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_TIM_Base_MspInit+0x134>)
 800298a:	221d      	movs	r2, #29
 800298c:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800298e:	4b1a      	ldr	r3, [pc, #104]	@ (80029f8 <HAL_TIM_Base_MspInit+0x134>)
 8002990:	2240      	movs	r2, #64	@ 0x40
 8002992:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002994:	4b18      	ldr	r3, [pc, #96]	@ (80029f8 <HAL_TIM_Base_MspInit+0x134>)
 8002996:	2200      	movs	r2, #0
 8002998:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800299a:	4b17      	ldr	r3, [pc, #92]	@ (80029f8 <HAL_TIM_Base_MspInit+0x134>)
 800299c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029a0:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029a2:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <HAL_TIM_Base_MspInit+0x134>)
 80029a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029a8:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029aa:	4b13      	ldr	r3, [pc, #76]	@ (80029f8 <HAL_TIM_Base_MspInit+0x134>)
 80029ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029b0:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80029b2:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <HAL_TIM_Base_MspInit+0x134>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80029b8:	4b0f      	ldr	r3, [pc, #60]	@ (80029f8 <HAL_TIM_Base_MspInit+0x134>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029be:	4b0e      	ldr	r3, [pc, #56]	@ (80029f8 <HAL_TIM_Base_MspInit+0x134>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80029c4:	480c      	ldr	r0, [pc, #48]	@ (80029f8 <HAL_TIM_Base_MspInit+0x134>)
 80029c6:	f007 fa09 	bl	8009ddc <HAL_DMA_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_TIM_Base_MspInit+0x110>
      Error_Handler();
 80029d0:	f7ff fc06 	bl	80021e0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a08      	ldr	r2, [pc, #32]	@ (80029f8 <HAL_TIM_Base_MspInit+0x134>)
 80029d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80029da:	4a07      	ldr	r2, [pc, #28]	@ (80029f8 <HAL_TIM_Base_MspInit+0x134>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80029e0:	bf00      	nop
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40010000 	.word	0x40010000
 80029ec:	58024400 	.word	0x58024400
 80029f0:	40000400 	.word	0x40000400
 80029f4:	40000800 	.word	0x40000800
 80029f8:	24000818 	.word	0x24000818
 80029fc:	40020040 	.word	0x40020040

08002a00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	@ 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a26      	ldr	r2, [pc, #152]	@ (8002ab8 <HAL_TIM_MspPostInit+0xb8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d120      	bne.n	8002a64 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a22:	4b26      	ldr	r3, [pc, #152]	@ (8002abc <HAL_TIM_MspPostInit+0xbc>)
 8002a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a28:	4a24      	ldr	r2, [pc, #144]	@ (8002abc <HAL_TIM_MspPostInit+0xbc>)
 8002a2a:	f043 0304 	orr.w	r3, r3, #4
 8002a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a32:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <HAL_TIM_MspPostInit+0xbc>)
 8002a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8002a40:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a52:	2302      	movs	r3, #2
 8002a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a56:	f107 0314 	add.w	r3, r7, #20
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4818      	ldr	r0, [pc, #96]	@ (8002ac0 <HAL_TIM_MspPostInit+0xc0>)
 8002a5e:	f009 fa91 	bl	800bf84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a62:	e024      	b.n	8002aae <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a16      	ldr	r2, [pc, #88]	@ (8002ac4 <HAL_TIM_MspPostInit+0xc4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d11f      	bne.n	8002aae <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a6e:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <HAL_TIM_MspPostInit+0xbc>)
 8002a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a74:	4a11      	ldr	r2, [pc, #68]	@ (8002abc <HAL_TIM_MspPostInit+0xbc>)
 8002a76:	f043 0308 	orr.w	r3, r3, #8
 8002a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002abc <HAL_TIM_MspPostInit+0xbc>)
 8002a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8002a8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4807      	ldr	r0, [pc, #28]	@ (8002ac8 <HAL_TIM_MspPostInit+0xc8>)
 8002aaa:	f009 fa6b 	bl	800bf84 <HAL_GPIO_Init>
}
 8002aae:	bf00      	nop
 8002ab0:	3728      	adds	r7, #40	@ 0x28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	58024400 	.word	0x58024400
 8002ac0:	58020800 	.word	0x58020800
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	58020c00 	.word	0x58020c00

08002acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b0ba      	sub	sp, #232	@ 0xe8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ae4:	f107 0318 	add.w	r3, r7, #24
 8002ae8:	22b8      	movs	r2, #184	@ 0xb8
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f017 ffc4 	bl	801aa7a <memset>
  if(huart->Instance==UART7)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a4d      	ldr	r2, [pc, #308]	@ (8002c2c <HAL_UART_MspInit+0x160>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d147      	bne.n	8002b8c <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002afc:	f04f 0202 	mov.w	r2, #2
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b0e:	f107 0318 	add.w	r3, r7, #24
 8002b12:	4618      	mov	r0, r3
 8002b14:	f00b ffac 	bl	800ea70 <HAL_RCCEx_PeriphCLKConfig>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002b1e:	f7ff fb5f 	bl	80021e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002b22:	4b43      	ldr	r3, [pc, #268]	@ (8002c30 <HAL_UART_MspInit+0x164>)
 8002b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b28:	4a41      	ldr	r2, [pc, #260]	@ (8002c30 <HAL_UART_MspInit+0x164>)
 8002b2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b32:	4b3f      	ldr	r3, [pc, #252]	@ (8002c30 <HAL_UART_MspInit+0x164>)
 8002b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b40:	4b3b      	ldr	r3, [pc, #236]	@ (8002c30 <HAL_UART_MspInit+0x164>)
 8002b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b46:	4a3a      	ldr	r2, [pc, #232]	@ (8002c30 <HAL_UART_MspInit+0x164>)
 8002b48:	f043 0310 	orr.w	r3, r3, #16
 8002b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b50:	4b37      	ldr	r3, [pc, #220]	@ (8002c30 <HAL_UART_MspInit+0x164>)
 8002b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002b5e:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002b62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002b78:	2307      	movs	r3, #7
 8002b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b7e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b82:	4619      	mov	r1, r3
 8002b84:	482b      	ldr	r0, [pc, #172]	@ (8002c34 <HAL_UART_MspInit+0x168>)
 8002b86:	f009 f9fd 	bl	800bf84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b8a:	e04a      	b.n	8002c22 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a29      	ldr	r2, [pc, #164]	@ (8002c38 <HAL_UART_MspInit+0x16c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d145      	bne.n	8002c22 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b96:	f04f 0201 	mov.w	r2, #1
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ba8:	f107 0318 	add.w	r3, r7, #24
 8002bac:	4618      	mov	r0, r3
 8002bae:	f00b ff5f 	bl	800ea70 <HAL_RCCEx_PeriphCLKConfig>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002bb8:	f7ff fb12 	bl	80021e0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002c30 <HAL_UART_MspInit+0x164>)
 8002bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c30 <HAL_UART_MspInit+0x164>)
 8002bc4:	f043 0310 	orr.w	r3, r3, #16
 8002bc8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002bcc:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <HAL_UART_MspInit+0x164>)
 8002bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bda:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <HAL_UART_MspInit+0x164>)
 8002bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002be0:	4a13      	ldr	r2, [pc, #76]	@ (8002c30 <HAL_UART_MspInit+0x164>)
 8002be2:	f043 0302 	orr.w	r3, r3, #2
 8002be6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bea:	4b11      	ldr	r3, [pc, #68]	@ (8002c30 <HAL_UART_MspInit+0x164>)
 8002bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002bf8:	23c0      	movs	r3, #192	@ 0xc0
 8002bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c10:	2307      	movs	r3, #7
 8002c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4807      	ldr	r0, [pc, #28]	@ (8002c3c <HAL_UART_MspInit+0x170>)
 8002c1e:	f009 f9b1 	bl	800bf84 <HAL_GPIO_Init>
}
 8002c22:	bf00      	nop
 8002c24:	37e8      	adds	r7, #232	@ 0xe8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40007800 	.word	0x40007800
 8002c30:	58024400 	.word	0x58024400
 8002c34:	58021000 	.word	0x58021000
 8002c38:	40011000 	.word	0x40011000
 8002c3c:	58020400 	.word	0x58020400

08002c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <NMI_Handler+0x4>

08002c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c4c:	bf00      	nop
 8002c4e:	e7fd      	b.n	8002c4c <HardFault_Handler+0x4>

08002c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c54:	bf00      	nop
 8002c56:	e7fd      	b.n	8002c54 <MemManage_Handler+0x4>

08002c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <BusFault_Handler+0x4>

08002c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <UsageFault_Handler+0x4>

08002c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c96:	f005 f8a9 	bl	8007dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA2_Pin);
 8002ca2:	2002      	movs	r0, #2
 8002ca4:	f009 fb47 	bl	800c336 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}

08002cac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB2_Pin);
 8002cb0:	2004      	movs	r0, #4
 8002cb2:	f009 fb40 	bl	800c336 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA3_Pin);
 8002cbe:	2008      	movs	r0, #8
 8002cc0:	f009 fb39 	bl	800c336 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002ccc:	4802      	ldr	r0, [pc, #8]	@ (8002cd8 <DMA1_Stream0_IRQHandler+0x10>)
 8002cce:	f007 fe47 	bl	800a960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	2400040c 	.word	0x2400040c

08002cdc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002ce0:	4802      	ldr	r0, [pc, #8]	@ (8002cec <DMA1_Stream1_IRQHandler+0x10>)
 8002ce2:	f007 fe3d 	bl	800a960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	24000484 	.word	0x24000484

08002cf0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002cf4:	4802      	ldr	r0, [pc, #8]	@ (8002d00 <DMA1_Stream2_IRQHandler+0x10>)
 8002cf6:	f007 fe33 	bl	800a960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	24000818 	.word	0x24000818

08002d04 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA1_Pin);
 8002d08:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002d0c:	f009 fb13 	bl	800c336 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB1_Pin);
 8002d10:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002d14:	f009 fb0f 	bl	800c336 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d20:	4802      	ldr	r0, [pc, #8]	@ (8002d2c <TIM3_IRQHandler+0x10>)
 8002d22:	f00f ff91 	bl	8012c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	24000780 	.word	0x24000780

08002d30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB3_Pin);
 8002d34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d38:	f009 fafd 	bl	800c336 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002d44:	4802      	ldr	r0, [pc, #8]	@ (8002d50 <OTG_HS_IRQHandler+0x10>)
 8002d46:	f009 fd85 	bl	800c854 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	2401d1f0 	.word	0x2401d1f0

08002d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return 1;
 8002d58:	2301      	movs	r3, #1
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <_kill>:

int _kill(int pid, int sig)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d6e:	f017 fef5 	bl	801ab5c <__errno>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2216      	movs	r2, #22
 8002d76:	601a      	str	r2, [r3, #0]
  return -1;
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_exit>:

void _exit (int status)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ffe7 	bl	8002d64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d96:	bf00      	nop
 8002d98:	e7fd      	b.n	8002d96 <_exit+0x12>

08002d9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e00a      	b.n	8002dc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dac:	f3af 8000 	nop.w
 8002db0:	4601      	mov	r1, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	60ba      	str	r2, [r7, #8]
 8002db8:	b2ca      	uxtb	r2, r1
 8002dba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	dbf0      	blt.n	8002dac <_read+0x12>
  }

  return len;
 8002dca:	687b      	ldr	r3, [r7, #4]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	e009      	b.n	8002dfa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	60ba      	str	r2, [r7, #8]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	3301      	adds	r3, #1
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	dbf1      	blt.n	8002de6 <_write+0x12>
  }
  return len;
 8002e02:	687b      	ldr	r3, [r7, #4]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <_close>:

int _close(int file)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e34:	605a      	str	r2, [r3, #4]
  return 0;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <_isatty>:

int _isatty(int file)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e4c:	2301      	movs	r3, #1
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e7c:	4a14      	ldr	r2, [pc, #80]	@ (8002ed0 <_sbrk+0x5c>)
 8002e7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <_sbrk+0x60>)
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e88:	4b13      	ldr	r3, [pc, #76]	@ (8002ed8 <_sbrk+0x64>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e90:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <_sbrk+0x64>)
 8002e92:	4a12      	ldr	r2, [pc, #72]	@ (8002edc <_sbrk+0x68>)
 8002e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e96:	4b10      	ldr	r3, [pc, #64]	@ (8002ed8 <_sbrk+0x64>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d207      	bcs.n	8002eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ea4:	f017 fe5a 	bl	801ab5c <__errno>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	220c      	movs	r2, #12
 8002eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eae:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb2:	e009      	b.n	8002ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002eb4:	4b08      	ldr	r3, [pc, #32]	@ (8002ed8 <_sbrk+0x64>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eba:	4b07      	ldr	r3, [pc, #28]	@ (8002ed8 <_sbrk+0x64>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	4a05      	ldr	r2, [pc, #20]	@ (8002ed8 <_sbrk+0x64>)
 8002ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	24050000 	.word	0x24050000
 8002ed4:	00003200 	.word	0x00003200
 8002ed8:	240144f0 	.word	0x240144f0
 8002edc:	2401da40 	.word	0x2401da40

08002ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ee4:	4b32      	ldr	r3, [pc, #200]	@ (8002fb0 <SystemInit+0xd0>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eea:	4a31      	ldr	r2, [pc, #196]	@ (8002fb0 <SystemInit+0xd0>)
 8002eec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ef0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb4 <SystemInit+0xd4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	2b06      	cmp	r3, #6
 8002efe:	d807      	bhi.n	8002f10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f00:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb4 <SystemInit+0xd4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 030f 	bic.w	r3, r3, #15
 8002f08:	4a2a      	ldr	r2, [pc, #168]	@ (8002fb4 <SystemInit+0xd4>)
 8002f0a:	f043 0307 	orr.w	r3, r3, #7
 8002f0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f10:	4b29      	ldr	r3, [pc, #164]	@ (8002fb8 <SystemInit+0xd8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a28      	ldr	r2, [pc, #160]	@ (8002fb8 <SystemInit+0xd8>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f1c:	4b26      	ldr	r3, [pc, #152]	@ (8002fb8 <SystemInit+0xd8>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f22:	4b25      	ldr	r3, [pc, #148]	@ (8002fb8 <SystemInit+0xd8>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4924      	ldr	r1, [pc, #144]	@ (8002fb8 <SystemInit+0xd8>)
 8002f28:	4b24      	ldr	r3, [pc, #144]	@ (8002fbc <SystemInit+0xdc>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f2e:	4b21      	ldr	r3, [pc, #132]	@ (8002fb4 <SystemInit+0xd4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb4 <SystemInit+0xd4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 030f 	bic.w	r3, r3, #15
 8002f42:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb4 <SystemInit+0xd4>)
 8002f44:	f043 0307 	orr.w	r3, r3, #7
 8002f48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb8 <SystemInit+0xd8>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002f50:	4b19      	ldr	r3, [pc, #100]	@ (8002fb8 <SystemInit+0xd8>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002f56:	4b18      	ldr	r3, [pc, #96]	@ (8002fb8 <SystemInit+0xd8>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f5c:	4b16      	ldr	r3, [pc, #88]	@ (8002fb8 <SystemInit+0xd8>)
 8002f5e:	4a18      	ldr	r2, [pc, #96]	@ (8002fc0 <SystemInit+0xe0>)
 8002f60:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f62:	4b15      	ldr	r3, [pc, #84]	@ (8002fb8 <SystemInit+0xd8>)
 8002f64:	4a17      	ldr	r2, [pc, #92]	@ (8002fc4 <SystemInit+0xe4>)
 8002f66:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f68:	4b13      	ldr	r3, [pc, #76]	@ (8002fb8 <SystemInit+0xd8>)
 8002f6a:	4a17      	ldr	r2, [pc, #92]	@ (8002fc8 <SystemInit+0xe8>)
 8002f6c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f6e:	4b12      	ldr	r3, [pc, #72]	@ (8002fb8 <SystemInit+0xd8>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f74:	4b10      	ldr	r3, [pc, #64]	@ (8002fb8 <SystemInit+0xd8>)
 8002f76:	4a14      	ldr	r2, [pc, #80]	@ (8002fc8 <SystemInit+0xe8>)
 8002f78:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb8 <SystemInit+0xd8>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f80:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb8 <SystemInit+0xd8>)
 8002f82:	4a11      	ldr	r2, [pc, #68]	@ (8002fc8 <SystemInit+0xe8>)
 8002f84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f86:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <SystemInit+0xd8>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <SystemInit+0xd8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a09      	ldr	r2, [pc, #36]	@ (8002fb8 <SystemInit+0xd8>)
 8002f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f98:	4b07      	ldr	r3, [pc, #28]	@ (8002fb8 <SystemInit+0xd8>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002fcc <SystemInit+0xec>)
 8002fa0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002fa4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002fa6:	bf00      	nop
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000ed00 	.word	0xe000ed00
 8002fb4:	52002000 	.word	0x52002000
 8002fb8:	58024400 	.word	0x58024400
 8002fbc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002fc0:	02020200 	.word	0x02020200
 8002fc4:	01ff0000 	.word	0x01ff0000
 8002fc8:	01010280 	.word	0x01010280
 8002fcc:	52004000 	.word	0x52004000

08002fd0 <FindClosest>:
 */

#include "util.h"

uint32_t FindClosest(const uint32_t* arr, uint32_t len, uint32_t target)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	@ 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
	uint32_t min_diff = 0xFFFFFFFF;
 8002fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe0:	61fb      	str	r3, [r7, #28]
	uint32_t closest_value = arr[0];
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	61bb      	str	r3, [r7, #24]

	for (uint32_t i = 0; i < len; i++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	e019      	b.n	8003022 <FindClosest+0x52>
	{
		uint32_t diff = abs(arr[i] - target);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bfb8      	it	lt
 8003000:	425b      	neglt	r3, r3
 8003002:	613b      	str	r3, [r7, #16]

		if (diff < min_diff)
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	429a      	cmp	r2, r3
 800300a:	d207      	bcs.n	800301c <FindClosest+0x4c>
		{
			min_diff = diff;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	61fb      	str	r3, [r7, #28]
			closest_value = arr[i];
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61bb      	str	r3, [r7, #24]
	for (uint32_t i = 0; i < len; i++)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	3301      	adds	r3, #1
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	429a      	cmp	r2, r3
 8003028:	d3e1      	bcc.n	8002fee <FindClosest+0x1e>
		}
	}

	return closest_value;
 800302a:	69bb      	ldr	r3, [r7, #24]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3724      	adds	r7, #36	@ 0x24
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <VibeCheck_Init>:
		TIM_HandleTypeDef* htim_rgb,
		volatile uint32_t* time_micros,
		SPI_HandleTypeDef* hspi_accel0,
		SPI_HandleTypeDef* hspi_accel1,
		SPI_HandleTypeDef* hspi_accel2)
{
 8003038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303a:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 800303e:	af10      	add	r7, sp, #64	@ 0x40
 8003040:	f507 740c 	add.w	r4, r7, #560	@ 0x230
 8003044:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 8003048:	6020      	str	r0, [r4, #0]
 800304a:	f507 700c 	add.w	r0, r7, #560	@ 0x230
 800304e:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 8003052:	6001      	str	r1, [r0, #0]
 8003054:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003058:	f5a1 7109 	sub.w	r1, r1, #548	@ 0x224
 800305c:	600a      	str	r2, [r1, #0]
 800305e:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8003062:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 8003066:	6013      	str	r3, [r2, #0]

	HAL_Delay(10);  /* wait for steady power so the RGB LEDs don't get into a weird state */
 8003068:	200a      	movs	r0, #10
 800306a:	f004 fedf 	bl	8007e2c <HAL_Delay>

	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 800306e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003072:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f002 ff47 	bl	8005f0c <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 800307e:	4aca      	ldr	r2, [pc, #808]	@ (80033a8 <VibeCheck_Init+0x370>)
 8003080:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8003084:	6810      	ldr	r0, [r2, #0]
 8003086:	6018      	str	r0, [r3, #0]
 8003088:	8891      	ldrh	r1, [r2, #4]
 800308a:	7992      	ldrb	r2, [r2, #6]
 800308c:	8099      	strh	r1, [r3, #4]
 800308e:	719a      	strb	r2, [r3, #6]
 8003090:	f207 13ef 	addw	r3, r7, #495	@ 0x1ef
 8003094:	2239      	movs	r2, #57	@ 0x39
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f017 fcee 	bl	801aa7a <memset>
 800309e:	4bc3      	ldr	r3, [pc, #780]	@ (80033ac <VibeCheck_Init+0x374>)
 80030a0:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 80030a4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80030a8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4bc0      	ldr	r3, [pc, #768]	@ (80033b0 <VibeCheck_Init+0x378>)
 80030b0:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 80030b2:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 80030b6:	4abf      	ldr	r2, [pc, #764]	@ (80033b4 <VibeCheck_Init+0x37c>)
 80030b8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80030bc:	6810      	ldr	r0, [r2, #0]
 80030be:	6851      	ldr	r1, [r2, #4]
 80030c0:	c303      	stmia	r3!, {r0, r1}
 80030c2:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80030c6:	2238      	movs	r2, #56	@ 0x38
 80030c8:	2100      	movs	r1, #0
 80030ca:	4618      	mov	r0, r3
 80030cc:	f017 fcd5 	bl	801aa7a <memset>
 80030d0:	4bb9      	ldr	r3, [pc, #740]	@ (80033b8 <VibeCheck_Init+0x380>)
 80030d2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 80030d6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80030da:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4bb6      	ldr	r3, [pc, #728]	@ (80033bc <VibeCheck_Init+0x384>)
 80030e2:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 80030e4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
	};

	VibeCheckShell_InputHandler rgb_cmd = {
 80030e8:	4bb5      	ldr	r3, [pc, #724]	@ (80033c0 <VibeCheck_Init+0x388>)
 80030ea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80030ee:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80030f2:	223c      	movs	r2, #60	@ 0x3c
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f017 fcbf 	bl	801aa7a <memset>
 80030fc:	4bb1      	ldr	r3, [pc, #708]	@ (80033c4 <VibeCheck_Init+0x38c>)
 80030fe:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
			.name = "rgb",
			.execute = VibeCheckRGBCMD_Execute,
			.obj = &vc->rgb
 8003102:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003106:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4bae      	ldr	r3, [pc, #696]	@ (80033c8 <VibeCheck_Init+0x390>)
 800310e:	4413      	add	r3, r2
	VibeCheckShell_InputHandler rgb_cmd = {
 8003110:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
	};

	VibeCheckShell_InputHandler sensor_cmd = {
 8003114:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003118:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800311c:	4aab      	ldr	r2, [pc, #684]	@ (80033cc <VibeCheck_Init+0x394>)
 800311e:	460b      	mov	r3, r1
 8003120:	6810      	ldr	r0, [r2, #0]
 8003122:	6018      	str	r0, [r3, #0]
 8003124:	8890      	ldrh	r0, [r2, #4]
 8003126:	7992      	ldrb	r2, [r2, #6]
 8003128:	8098      	strh	r0, [r3, #4]
 800312a:	719a      	strb	r2, [r3, #6]
 800312c:	1dcb      	adds	r3, r1, #7
 800312e:	2239      	movs	r2, #57	@ 0x39
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f017 fca1 	bl	801aa7a <memset>
 8003138:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800313c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003140:	4aa3      	ldr	r2, [pc, #652]	@ (80033d0 <VibeCheck_Init+0x398>)
 8003142:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "sensor",
			.execute = VibeCheckSensorCMD_Execute,
			.obj = &vc->sensor
 8003144:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003148:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4ba1      	ldr	r3, [pc, #644]	@ (80033d4 <VibeCheck_Init+0x39c>)
 8003150:	4413      	add	r3, r2
	VibeCheckShell_InputHandler sensor_cmd = {
 8003152:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8003156:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800315a:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_InputHandler record_cmd = {
 800315c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003160:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003164:	4a9c      	ldr	r2, [pc, #624]	@ (80033d8 <VibeCheck_Init+0x3a0>)
 8003166:	4618      	mov	r0, r3
 8003168:	4611      	mov	r1, r2
 800316a:	2348      	movs	r3, #72	@ 0x48
 800316c:	461a      	mov	r2, r3
 800316e:	f017 fd22 	bl	801abb6 <memcpy>
			.name = "record",
			.execute = VibeCheckRecordCMD_Execute,
			.obj = NULL
	};

	VibeCheckShell_InputHandler connect_cmd = {
 8003172:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003176:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 800317a:	4998      	ldr	r1, [pc, #608]	@ (80033dc <VibeCheck_Init+0x3a4>)
 800317c:	4613      	mov	r3, r2
 800317e:	6808      	ldr	r0, [r1, #0]
 8003180:	6849      	ldr	r1, [r1, #4]
 8003182:	c303      	stmia	r3!, {r0, r1}
 8003184:	f102 0308 	add.w	r3, r2, #8
 8003188:	2238      	movs	r2, #56	@ 0x38
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f017 fc74 	bl	801aa7a <memset>
 8003192:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003196:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800319a:	4a91      	ldr	r2, [pc, #580]	@ (80033e0 <VibeCheck_Init+0x3a8>)
 800319c:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "connect",
			.execute = VibeCheckConnectCMD_Execute,
			.obj = &vc->rgb
 800319e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80031a2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b87      	ldr	r3, [pc, #540]	@ (80033c8 <VibeCheck_Init+0x390>)
 80031aa:	4413      	add	r3, r2
	VibeCheckShell_InputHandler connect_cmd = {
 80031ac:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80031b0:	f5a2 72d8 	sub.w	r2, r2, #432	@ 0x1b0
 80031b4:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_InputHandler disconnect_cmd = {
 80031b6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80031ba:	f5a3 74fc 	sub.w	r4, r3, #504	@ 0x1f8
 80031be:	4a89      	ldr	r2, [pc, #548]	@ (80033e4 <VibeCheck_Init+0x3ac>)
 80031c0:	4623      	mov	r3, r4
 80031c2:	6810      	ldr	r0, [r2, #0]
 80031c4:	6851      	ldr	r1, [r2, #4]
 80031c6:	c303      	stmia	r3!, {r0, r1}
 80031c8:	8911      	ldrh	r1, [r2, #8]
 80031ca:	7a92      	ldrb	r2, [r2, #10]
 80031cc:	8019      	strh	r1, [r3, #0]
 80031ce:	709a      	strb	r2, [r3, #2]
 80031d0:	f104 030b 	add.w	r3, r4, #11
 80031d4:	2235      	movs	r2, #53	@ 0x35
 80031d6:	2100      	movs	r1, #0
 80031d8:	4618      	mov	r0, r3
 80031da:	f017 fc4e 	bl	801aa7a <memset>
 80031de:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80031e2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80031e6:	4a80      	ldr	r2, [pc, #512]	@ (80033e8 <VibeCheck_Init+0x3b0>)
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "disconnect",
			.execute = VibeCheckDisconnectCMD_Execute,
			.obj = &vc->rgb
 80031ea:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80031ee:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b74      	ldr	r3, [pc, #464]	@ (80033c8 <VibeCheck_Init+0x390>)
 80031f6:	4413      	add	r3, r2
	VibeCheckShell_InputHandler disconnect_cmd = {
 80031f8:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80031fc:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003200:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 8003202:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003206:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800320a:	681e      	ldr	r6, [r3, #0]
 800320c:	466d      	mov	r5, sp
 800320e:	f507 74fa 	add.w	r4, r7, #500	@ 0x1f4
 8003212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800321a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800321c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800321e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003222:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003226:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800322a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800322c:	4630      	mov	r0, r6
 800322e:	f002 ffd3 	bl	80061d8 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 8003232:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003236:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800323a:	681e      	ldr	r6, [r3, #0]
 800323c:	466d      	mov	r5, sp
 800323e:	f507 74d6 	add.w	r4, r7, #428	@ 0x1ac
 8003242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800324a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800324c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800324e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003252:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003256:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800325a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800325c:	4630      	mov	r0, r6
 800325e:	f002 ffbb 	bl	80061d8 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, rgb_cmd);
 8003262:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003266:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800326a:	681e      	ldr	r6, [r3, #0]
 800326c:	466d      	mov	r5, sp
 800326e:	f507 74b2 	add.w	r4, r7, #356	@ 0x164
 8003272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800327a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800327c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800327e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003282:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003286:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800328a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800328c:	4630      	mov	r0, r6
 800328e:	f002 ffa3 	bl	80061d8 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, sensor_cmd);
 8003292:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003296:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80032a2:	f5a3 7690 	sub.w	r6, r3, #288	@ 0x120
 80032a6:	466d      	mov	r5, sp
 80032a8:	f106 040c 	add.w	r4, r6, #12
 80032ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80032bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80032c0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f002 ff87 	bl	80061d8 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, record_cmd);
 80032ca:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80032ce:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80032da:	f5a3 76b4 	sub.w	r6, r3, #360	@ 0x168
 80032de:	466d      	mov	r5, sp
 80032e0:	f106 040c 	add.w	r4, r6, #12
 80032e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80032f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80032f8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f002 ff6b 	bl	80061d8 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, connect_cmd);
 8003302:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003306:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003312:	f5a3 76d8 	sub.w	r6, r3, #432	@ 0x1b0
 8003316:	466d      	mov	r5, sp
 8003318:	f106 040c 	add.w	r4, r6, #12
 800331c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800331e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003328:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800332c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003330:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f002 ff4f 	bl	80061d8 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, disconnect_cmd);
 800333a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800333e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800334a:	f5a3 76fc 	sub.w	r6, r3, #504	@ 0x1f8
 800334e:	466d      	mov	r5, sp
 8003350:	f106 040c 	add.w	r4, r6, #12
 8003354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800335a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800335c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800335e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003360:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003364:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003368:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f002 ff33 	bl	80061d8 <VibeCheckShell_RegisterInputHandler>


	VibeCheckShell_OutputHandler sensor_data_sender = {
 8003372:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003376:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800337a:	4a1c      	ldr	r2, [pc, #112]	@ (80033ec <VibeCheck_Init+0x3b4>)
 800337c:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Data_Execute,
			.obj = &vc->sensor
 800337e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003382:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b12      	ldr	r3, [pc, #72]	@ (80033d4 <VibeCheck_Init+0x39c>)
 800338a:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_data_sender = {
 800338c:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8003390:	f5a2 7200 	sub.w	r2, r2, #512	@ 0x200
 8003394:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_status_sender = {
 8003396:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800339a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800339e:	4a14      	ldr	r2, [pc, #80]	@ (80033f0 <VibeCheck_Init+0x3b8>)
 80033a0:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Status_Execute,
			.obj = &vc->sensor
 80033a2:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80033a6:	e025      	b.n	80033f4 <VibeCheck_Init+0x3bc>
 80033a8:	0801e1d8 	.word	0x0801e1d8
 80033ac:	08006e41 	.word	0x08006e41
 80033b0:	00011428 	.word	0x00011428
 80033b4:	0801e1e0 	.word	0x0801e1e0
 80033b8:	08007b59 	.word	0x08007b59
 80033bc:	00011450 	.word	0x00011450
 80033c0:	00626772 	.word	0x00626772
 80033c4:	08004429 	.word	0x08004429
 80033c8:	00012490 	.word	0x00012490
 80033cc:	0801e1e8 	.word	0x0801e1e8
 80033d0:	08005a79 	.word	0x08005a79
 80033d4:	00012a34 	.word	0x00012a34
 80033d8:	0801e1f0 	.word	0x0801e1f0
 80033dc:	0801e238 	.word	0x0801e238
 80033e0:	08003ef1 	.word	0x08003ef1
 80033e4:	0801e240 	.word	0x0801e240
 80033e8:	08003f35 	.word	0x08003f35
 80033ec:	08005d9d 	.word	0x08005d9d
 80033f0:	08005e81 	.word	0x08005e81
 80033f4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b58      	ldr	r3, [pc, #352]	@ (800355c <VibeCheck_Init+0x524>)
 80033fc:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_status_sender = {
 80033fe:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8003402:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 8003406:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler mute_button_sender = {
 8003408:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800340c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003410:	4a53      	ldr	r2, [pc, #332]	@ (8003560 <VibeCheck_Init+0x528>)
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003418:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800341c:	2200      	movs	r2, #0
 800341e:	605a      	str	r2, [r3, #4]
			.execute = VibeCheckMuteSender_Execute,
			.obj = NULL
	};

	VibeCheckShell_OutputHandler record_button_sender = {
 8003420:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003424:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003428:	4a4e      	ldr	r2, [pc, #312]	@ (8003564 <VibeCheck_Init+0x52c>)
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003430:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003434:	2200      	movs	r2, #0
 8003436:	605a      	str	r2, [r3, #4]
			.execute = VibeCheckRecordSender_Execute,
			.obj = NULL
	};


	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_data_sender);
 8003438:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800343c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003446:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800344a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800344e:	f002 fef7 	bl	8006240 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_status_sender);
 8003452:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003456:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003460:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003464:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003468:	f002 feea 	bl	8006240 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, mute_button_sender);
 800346c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003470:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800347a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800347e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003482:	f002 fedd 	bl	8006240 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, record_button_sender);
 8003486:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800348a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003494:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003498:	e893 0006 	ldmia.w	r3, {r1, r2}
 800349c:	f002 fed0 	bl	8006240 <VibeCheckShell_RegisterOutputHandler>


	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 80034a0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80034a4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003568 <VibeCheck_Init+0x530>)
 80034ac:	4413      	add	r3, r2
 80034ae:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80034b2:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80034b6:	6811      	ldr	r1, [r2, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f003 f987 	bl	80067cc <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 80034be:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80034c2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b28      	ldr	r3, [pc, #160]	@ (800356c <VibeCheck_Init+0x534>)
 80034ca:	4413      	add	r3, r2
 80034cc:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80034d0:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 80034d4:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80034d8:	f5a1 710a 	sub.w	r1, r1, #552	@ 0x228
 80034dc:	6812      	ldr	r2, [r2, #0]
 80034de:	6809      	ldr	r1, [r1, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f003 ff2f 	bl	8007344 <VibeCheckWaveGen_Init>
	VibeCheckRGB_Init(&vc->rgb, htim_rgb);
 80034e6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80034ea:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003570 <VibeCheck_Init+0x538>)
 80034f2:	4413      	add	r3, r2
 80034f4:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fd3d 	bl	8003f78 <VibeCheckRGB_Init>
	VibeCheckRGB_SetBaseSequence(&vc->rgb, connect_sequence_times, connect_sequence_colors, connect_sequence_len);
 80034fe:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003502:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4819      	ldr	r0, [pc, #100]	@ (8003570 <VibeCheck_Init+0x538>)
 800350a:	4418      	add	r0, r3
 800350c:	2312      	movs	r3, #18
 800350e:	4a19      	ldr	r2, [pc, #100]	@ (8003574 <VibeCheck_Init+0x53c>)
 8003510:	4919      	ldr	r1, [pc, #100]	@ (8003578 <VibeCheck_Init+0x540>)
 8003512:	f000 fe02 	bl	800411a <VibeCheckRGB_SetBaseSequence>
	VibeCheckRGB_SetTopSequence(&vc->rgb, top_sequence_times, top_sequence_colors, top_sequence_len);
 8003516:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800351a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4813      	ldr	r0, [pc, #76]	@ (8003570 <VibeCheck_Init+0x538>)
 8003522:	4418      	add	r0, r3
 8003524:	2304      	movs	r3, #4
 8003526:	4a15      	ldr	r2, [pc, #84]	@ (800357c <VibeCheck_Init+0x544>)
 8003528:	4915      	ldr	r1, [pc, #84]	@ (8003580 <VibeCheck_Init+0x548>)
 800352a:	f000 fe2d 	bl	8004188 <VibeCheckRGB_SetTopSequence>
	VibeCheckSensor_Init(&vc->sensor, time_micros, hspi_accel0, hspi_accel1, hspi_accel2);
 800352e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003532:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4808      	ldr	r0, [pc, #32]	@ (800355c <VibeCheck_Init+0x524>)
 800353a:	4418      	add	r0, r3
 800353c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003546:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 800354a:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 800354e:	f001 f84f 	bl	80045f0 <VibeCheckSensor_Init>
}
 8003552:	bf00      	nop
 8003554:	f507 770d 	add.w	r7, r7, #564	@ 0x234
 8003558:	46bd      	mov	sp, r7
 800355a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800355c:	00012a34 	.word	0x00012a34
 8003560:	08003e39 	.word	0x08003e39
 8003564:	08003ea1 	.word	0x08003ea1
 8003568:	00011428 	.word	0x00011428
 800356c:	00011450 	.word	0x00011450
 8003570:	00012490 	.word	0x00012490
 8003574:	0801e548 	.word	0x0801e548
 8003578:	0801e500 	.word	0x0801e500
 800357c:	0801e494 	.word	0x0801e494
 8003580:	0801e484 	.word	0x0801e484
 8003584:	00000000 	.word	0x00000000

08003588 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b08f      	sub	sp, #60	@ 0x3c
 800358c:	af02      	add	r7, sp, #8
 800358e:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003590:	f004 fc40 	bl	8007e14 <HAL_GetTick>
 8003594:	62b8      	str	r0, [r7, #40]	@ 0x28


	/* call object update functions */
	VibeCheckWaveGen_Update(&vc->wavegen);
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	4b83      	ldr	r3, [pc, #524]	@ (80037a8 <VibeCheck_Loop+0x220>)
 800359a:	4413      	add	r3, r2
 800359c:	4618      	mov	r0, r3
 800359e:	f003 ff5f 	bl	8007460 <VibeCheckWaveGen_Update>
	VibeCheckRGB_Update(&vc->rgb);
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4b81      	ldr	r3, [pc, #516]	@ (80037ac <VibeCheck_Loop+0x224>)
 80035a6:	4413      	add	r3, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fd2b 	bl	8004004 <VibeCheckRGB_Update>
	VibeCheckSensor_Update(&vc->sensor);
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4b7f      	ldr	r3, [pc, #508]	@ (80037b0 <VibeCheck_Loop+0x228>)
 80035b2:	4413      	add	r3, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 f943 	bl	8004840 <VibeCheckSensor_Update>


	/* update the shell */
	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4618      	mov	r0, r3
 80035be:	f002 fced 	bl	8005f9c <VibeCheckShell_Update>
 80035c2:	4603      	mov	r3, r0
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24


	/* send over USB */
	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f107 021c 	add.w	r2, r7, #28
 80035cc:	f107 0120 	add.w	r1, r7, #32
 80035d0:	4618      	mov	r0, r3
 80035d2:	f002 feb5 	bl	8006340 <VibeCheckShell_GetOutput>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00f      	beq.n	80035fc <VibeCheck_Loop+0x74>
//
//		if ((end != '\n') || (start != 'a' && start != 'd' && start != 'e'))
//			HAL_Delay(1000);
		/* XXX */

		if (CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len) == USBD_OK)
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	b292      	uxth	r2, r2
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f015 fa4f 	bl	8018a88 <CDC_Transmit_HS>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d105      	bne.n	80035fc <VibeCheck_Loop+0x74>
			VibeCheckShell_UpdateOutputBuffer(&vc->shell, usb_tx_len);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f002 fef7 	bl	80063ea <VibeCheckShell_UpdateOutputBuffer>
	}


	/* visualize the acceleration with the RGB LEDs */
	if (time - time_prev_led_update > 30)
 80035fc:	4b6d      	ldr	r3, [pc, #436]	@ (80037b4 <VibeCheck_Loop+0x22c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b1e      	cmp	r3, #30
 8003606:	f240 81a1 	bls.w	800394c <VibeCheck_Loop+0x3c4>
	{
		time_prev_led_update = time;
 800360a:	4a6a      	ldr	r2, [pc, #424]	@ (80037b4 <VibeCheck_Loop+0x22c>)
 800360c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360e:	6013      	str	r3, [r2, #0]

		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003610:	2300      	movs	r3, #0
 8003612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003614:	e196      	b.n	8003944 <VibeCheck_Loop+0x3bc>
		{
			if (vc->sensor.status[i].is_connected)
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800361a:	4613      	mov	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4413      	add	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	18ca      	adds	r2, r1, r3
 8003624:	4b64      	ldr	r3, [pc, #400]	@ (80037b8 <VibeCheck_Loop+0x230>)
 8003626:	4413      	add	r3, r2
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 8187 	beq.w	800393e <VibeCheck_Loop+0x3b6>
			{
				if (vc->sensor.status[i].accel_measuring)
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	18ca      	adds	r2, r1, r3
 800363e:	4b5f      	ldr	r3, [pc, #380]	@ (80037bc <VibeCheck_Loop+0x234>)
 8003640:	4413      	add	r3, r2
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80c3 	beq.w	80037d0 <VibeCheck_Loop+0x248>
				{
					/* write the LEDs */
					VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 0, 255 * fabs(vc->sensor.sensor_array[i].accel_x) / vc->sensor.sensor_config[i].g_range, 0, 0);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4857      	ldr	r0, [pc, #348]	@ (80037ac <VibeCheck_Loop+0x224>)
 800364e:	4418      	add	r0, r3
 8003650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	189c      	adds	r4, r3, r2
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	18ca      	adds	r2, r1, r3
 8003666:	4b56      	ldr	r3, [pc, #344]	@ (80037c0 <VibeCheck_Loop+0x238>)
 8003668:	4413      	add	r3, r2
 800366a:	edd3 7a00 	vldr	s15, [r3]
 800366e:	eef0 7ae7 	vabs.f32	s15, s15
 8003672:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003676:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 80037a0 <VibeCheck_Loop+0x218>
 800367a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	18ca      	adds	r2, r1, r3
 800368c:	4b4d      	ldr	r3, [pc, #308]	@ (80037c4 <VibeCheck_Loop+0x23c>)
 800368e:	4413      	add	r3, r2
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800369a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800369e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80036a2:	edc7 7a00 	vstr	s15, [r7]
 80036a6:	783b      	ldrb	r3, [r7, #0]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	2300      	movs	r3, #0
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	2300      	movs	r3, #0
 80036b0:	4621      	mov	r1, r4
 80036b2:	f000 fda0 	bl	80041f6 <VibeCheckRGB_SetColor>
					VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 1, 0, 255 * fabs(vc->sensor.sensor_array[i].accel_y) / vc->sensor.sensor_config[i].g_range, 0);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	483c      	ldr	r0, [pc, #240]	@ (80037ac <VibeCheck_Loop+0x224>)
 80036ba:	4418      	add	r0, r3
 80036bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	1c5c      	adds	r4, r3, #1
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	18ca      	adds	r2, r1, r3
 80036d4:	4b3c      	ldr	r3, [pc, #240]	@ (80037c8 <VibeCheck_Loop+0x240>)
 80036d6:	4413      	add	r3, r2
 80036d8:	edd3 7a00 	vldr	s15, [r3]
 80036dc:	eef0 7ae7 	vabs.f32	s15, s15
 80036e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036e4:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 80037a0 <VibeCheck_Loop+0x218>
 80036e8:	ee27 5b06 	vmul.f64	d5, d7, d6
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	18ca      	adds	r2, r1, r3
 80036fa:	4b32      	ldr	r3, [pc, #200]	@ (80037c4 <VibeCheck_Loop+0x23c>)
 80036fc:	4413      	add	r3, r2
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	ee07 3a90 	vmov	s15, r3
 8003704:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003708:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800370c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003710:	edc7 7a00 	vstr	s15, [r7]
 8003714:	783b      	ldrb	r3, [r7, #0]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2200      	movs	r2, #0
 800371a:	9200      	str	r2, [sp, #0]
 800371c:	2200      	movs	r2, #0
 800371e:	4621      	mov	r1, r4
 8003720:	f000 fd69 	bl	80041f6 <VibeCheckRGB_SetColor>
					VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 2, 0, 0, 255 * fabs(vc->sensor.sensor_array[i].accel_z) / vc->sensor.sensor_config[i].g_range);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4821      	ldr	r0, [pc, #132]	@ (80037ac <VibeCheck_Loop+0x224>)
 8003728:	4418      	add	r0, r3
 800372a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	1c9c      	adds	r4, r3, #2
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	18ca      	adds	r2, r1, r3
 8003742:	4b22      	ldr	r3, [pc, #136]	@ (80037cc <VibeCheck_Loop+0x244>)
 8003744:	4413      	add	r3, r2
 8003746:	edd3 7a00 	vldr	s15, [r3]
 800374a:	eef0 7ae7 	vabs.f32	s15, s15
 800374e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003752:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80037a0 <VibeCheck_Loop+0x218>
 8003756:	ee27 5b06 	vmul.f64	d5, d7, d6
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	18ca      	adds	r2, r1, r3
 8003768:	4b16      	ldr	r3, [pc, #88]	@ (80037c4 <VibeCheck_Loop+0x23c>)
 800376a:	4413      	add	r3, r2
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003776:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800377a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800377e:	edc7 7a00 	vstr	s15, [r7]
 8003782:	783b      	ldrb	r3, [r7, #0]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	2300      	movs	r3, #0
 800378a:	2200      	movs	r2, #0
 800378c:	4621      	mov	r1, r4
 800378e:	f000 fd32 	bl	80041f6 <VibeCheckRGB_SetColor>
					VibeCheckRGB_SendColors(&vc->rgb);
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	4b05      	ldr	r3, [pc, #20]	@ (80037ac <VibeCheck_Loop+0x224>)
 8003796:	4413      	add	r3, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fdb5 	bl	8004308 <VibeCheckRGB_SendColors>
 800379e:	e0ce      	b.n	800393e <VibeCheck_Loop+0x3b6>
 80037a0:	00000000 	.word	0x00000000
 80037a4:	406fe000 	.word	0x406fe000
 80037a8:	00011450 	.word	0x00011450
 80037ac:	00012490 	.word	0x00012490
 80037b0:	00012a34 	.word	0x00012a34
 80037b4:	240144f4 	.word	0x240144f4
 80037b8:	00012b30 	.word	0x00012b30
 80037bc:	00012b34 	.word	0x00012b34
 80037c0:	00012aa8 	.word	0x00012aa8
 80037c4:	00012a44 	.word	0x00012a44
 80037c8:	00012aac 	.word	0x00012aac
 80037cc:	00012ab0 	.word	0x00012ab0
				}
				else if (vc->sensor.status[i].gyro_measuring)
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	18ca      	adds	r2, r1, r3
 80037de:	4b90      	ldr	r3, [pc, #576]	@ (8003a20 <VibeCheck_Loop+0x498>)
 80037e0:	4413      	add	r3, r2
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80aa 	beq.w	800393e <VibeCheck_Loop+0x3b6>
				{
					/* write the LEDs */
					VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_x) / vc->sensor.sensor_config[i].dps_range, 0, 0);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	488d      	ldr	r0, [pc, #564]	@ (8003a24 <VibeCheck_Loop+0x49c>)
 80037ee:	4418      	add	r0, r3
 80037f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	189c      	adds	r4, r3, r2
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	18ca      	adds	r2, r1, r3
 8003806:	4b88      	ldr	r3, [pc, #544]	@ (8003a28 <VibeCheck_Loop+0x4a0>)
 8003808:	4413      	add	r3, r2
 800380a:	edd3 7a00 	vldr	s15, [r3]
 800380e:	eef0 7ae7 	vabs.f32	s15, s15
 8003812:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003816:	ed9f 6b80 	vldr	d6, [pc, #512]	@ 8003a18 <VibeCheck_Loop+0x490>
 800381a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	18ca      	adds	r2, r1, r3
 800382c:	4b7f      	ldr	r3, [pc, #508]	@ (8003a2c <VibeCheck_Loop+0x4a4>)
 800382e:	4413      	add	r3, r2
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800383a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800383e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003842:	edc7 7a00 	vstr	s15, [r7]
 8003846:	783b      	ldrb	r3, [r7, #0]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	2300      	movs	r3, #0
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	2300      	movs	r3, #0
 8003850:	4621      	mov	r1, r4
 8003852:	f000 fcd0 	bl	80041f6 <VibeCheckRGB_SetColor>
					VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 1, 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_y) / vc->sensor.sensor_config[i].dps_range, 0);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4872      	ldr	r0, [pc, #456]	@ (8003a24 <VibeCheck_Loop+0x49c>)
 800385a:	4418      	add	r0, r3
 800385c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	1c5c      	adds	r4, r3, #1
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800386a:	4613      	mov	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	18ca      	adds	r2, r1, r3
 8003874:	4b6e      	ldr	r3, [pc, #440]	@ (8003a30 <VibeCheck_Loop+0x4a8>)
 8003876:	4413      	add	r3, r2
 8003878:	edd3 7a00 	vldr	s15, [r3]
 800387c:	eef0 7ae7 	vabs.f32	s15, s15
 8003880:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003884:	ed9f 6b64 	vldr	d6, [pc, #400]	@ 8003a18 <VibeCheck_Loop+0x490>
 8003888:	ee27 5b06 	vmul.f64	d5, d7, d6
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	18ca      	adds	r2, r1, r3
 800389a:	4b64      	ldr	r3, [pc, #400]	@ (8003a2c <VibeCheck_Loop+0x4a4>)
 800389c:	4413      	add	r3, r2
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	ee07 3a90 	vmov	s15, r3
 80038a4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80038a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80038ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80038b0:	edc7 7a00 	vstr	s15, [r7]
 80038b4:	783b      	ldrb	r3, [r7, #0]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2200      	movs	r2, #0
 80038ba:	9200      	str	r2, [sp, #0]
 80038bc:	2200      	movs	r2, #0
 80038be:	4621      	mov	r1, r4
 80038c0:	f000 fc99 	bl	80041f6 <VibeCheckRGB_SetColor>
					VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 2, 0, 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_z) / vc->sensor.sensor_config[i].dps_range);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4857      	ldr	r0, [pc, #348]	@ (8003a24 <VibeCheck_Loop+0x49c>)
 80038c8:	4418      	add	r0, r3
 80038ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038cc:	4613      	mov	r3, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	4413      	add	r3, r2
 80038d2:	1c9c      	adds	r4, r3, #2
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	18ca      	adds	r2, r1, r3
 80038e2:	4b54      	ldr	r3, [pc, #336]	@ (8003a34 <VibeCheck_Loop+0x4ac>)
 80038e4:	4413      	add	r3, r2
 80038e6:	edd3 7a00 	vldr	s15, [r3]
 80038ea:	eef0 7ae7 	vabs.f32	s15, s15
 80038ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038f2:	ed9f 6b49 	vldr	d6, [pc, #292]	@ 8003a18 <VibeCheck_Loop+0x490>
 80038f6:	ee27 5b06 	vmul.f64	d5, d7, d6
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038fe:	4613      	mov	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	18ca      	adds	r2, r1, r3
 8003908:	4b48      	ldr	r3, [pc, #288]	@ (8003a2c <VibeCheck_Loop+0x4a4>)
 800390a:	4413      	add	r3, r2
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003916:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800391a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800391e:	edc7 7a00 	vstr	s15, [r7]
 8003922:	783b      	ldrb	r3, [r7, #0]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	2300      	movs	r3, #0
 800392a:	2200      	movs	r2, #0
 800392c:	4621      	mov	r1, r4
 800392e:	f000 fc62 	bl	80041f6 <VibeCheckRGB_SetColor>
					VibeCheckRGB_SendColors(&vc->rgb);
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4b3b      	ldr	r3, [pc, #236]	@ (8003a24 <VibeCheck_Loop+0x49c>)
 8003936:	4413      	add	r3, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fce5 	bl	8004308 <VibeCheckRGB_SendColors>
		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800393e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003940:	3301      	adds	r3, #1
 8003942:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003946:	2b02      	cmp	r3, #2
 8003948:	f67f ae65 	bls.w	8003616 <VibeCheck_Loop+0x8e>
	/* update the RGB LEDs based on status changes of the sensors */
	/* this logic is a bit convoluted but works for now */

	uint32_t channel;
	uint32_t is_connected;
	if (VibeCheckSensor_ConnectionChanged(&vc->sensor, &channel, &is_connected))
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a38 <VibeCheck_Loop+0x4b0>)
 8003950:	4413      	add	r3, r2
 8003952:	f107 0214 	add.w	r2, r7, #20
 8003956:	f107 0118 	add.w	r1, r7, #24
 800395a:	4618      	mov	r0, r3
 800395c:	f001 fbda 	bl	8005114 <VibeCheckSensor_ConnectionChanged>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80fc 	beq.w	8003b60 <VibeCheck_Loop+0x5d8>
	{
		if (is_connected)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d06e      	beq.n	8003a4c <VibeCheck_Loop+0x4c4>
		{
			if (vc->sensor.status[channel].accel_measuring || vc->sensor.status[channel].gyro_measuring)
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	18ca      	adds	r2, r1, r3
 800397c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a3c <VibeCheck_Loop+0x4b4>)
 800397e:	4413      	add	r3, r2
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10b      	bne.n	800399e <VibeCheck_Loop+0x416>
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4413      	add	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	18ca      	adds	r2, r1, r3
 8003994:	4b22      	ldr	r3, [pc, #136]	@ (8003a20 <VibeCheck_Loop+0x498>)
 8003996:	4413      	add	r3, r2
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d023      	beq.n	80039e6 <VibeCheck_Loop+0x45e>
			{
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 0, 0);
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4b20      	ldr	r3, [pc, #128]	@ (8003a24 <VibeCheck_Loop+0x49c>)
 80039a2:	4413      	add	r3, r2
 80039a4:	69b9      	ldr	r1, [r7, #24]
 80039a6:	460a      	mov	r2, r1
 80039a8:	0052      	lsls	r2, r2, #1
 80039aa:	4411      	add	r1, r2
 80039ac:	2200      	movs	r2, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fc93 	bl	80042da <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 1, 0);
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a24 <VibeCheck_Loop+0x49c>)
 80039b8:	4413      	add	r3, r2
 80039ba:	69b9      	ldr	r1, [r7, #24]
 80039bc:	460a      	mov	r2, r1
 80039be:	0052      	lsls	r2, r2, #1
 80039c0:	440a      	add	r2, r1
 80039c2:	1c51      	adds	r1, r2, #1
 80039c4:	2200      	movs	r2, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fc87 	bl	80042da <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 2, 0);
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <VibeCheck_Loop+0x49c>)
 80039d0:	4413      	add	r3, r2
 80039d2:	69b9      	ldr	r1, [r7, #24]
 80039d4:	460a      	mov	r2, r1
 80039d6:	0052      	lsls	r2, r2, #1
 80039d8:	440a      	add	r2, r1
 80039da:	1c91      	adds	r1, r2, #2
 80039dc:	2200      	movs	r2, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fc7b 	bl	80042da <VibeCheckRGB_SetUpdateWithSequence>
 80039e4:	e0b4      	b.n	8003b50 <VibeCheck_Loop+0x5c8>
			}
			else
			{
				VibeCheckRGB_SetTopSequence(&vc->rgb, led_sensor_connected_times[channel], led_sensor_connected_colors[channel], led_sensor_connected_len[channel]);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	480e      	ldr	r0, [pc, #56]	@ (8003a24 <VibeCheck_Loop+0x49c>)
 80039ea:	4418      	add	r0, r3
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	4a14      	ldr	r2, [pc, #80]	@ (8003a40 <VibeCheck_Loop+0x4b8>)
 80039f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	4a13      	ldr	r2, [pc, #76]	@ (8003a44 <VibeCheck_Loop+0x4bc>)
 80039f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4c12      	ldr	r4, [pc, #72]	@ (8003a48 <VibeCheck_Loop+0x4c0>)
 8003a00:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003a04:	f000 fbc0 	bl	8004188 <VibeCheckRGB_SetTopSequence>
				VibeCheckRGB_StartTopSequence(&vc->rgb);
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4b06      	ldr	r3, [pc, #24]	@ (8003a24 <VibeCheck_Loop+0x49c>)
 8003a0c:	4413      	add	r3, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fbd1 	bl	80041b6 <VibeCheckRGB_StartTopSequence>
 8003a14:	e09c      	b.n	8003b50 <VibeCheck_Loop+0x5c8>
 8003a16:	bf00      	nop
 8003a18:	00000000 	.word	0x00000000
 8003a1c:	406fe000 	.word	0x406fe000
 8003a20:	00012b38 	.word	0x00012b38
 8003a24:	00012490 	.word	0x00012490
 8003a28:	00012ab4 	.word	0x00012ab4
 8003a2c:	00012a4c 	.word	0x00012a4c
 8003a30:	00012ab8 	.word	0x00012ab8
 8003a34:	00012abc 	.word	0x00012abc
 8003a38:	00012a34 	.word	0x00012a34
 8003a3c:	00012b34 	.word	0x00012b34
 8003a40:	24000008 	.word	0x24000008
 8003a44:	24000014 	.word	0x24000014
 8003a48:	0801ea18 	.word	0x0801ea18
			}
		}
		else
		{
			if (vc->sensor.status[channel].accel_measuring || vc->sensor.status[channel].gyro_measuring)
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	4413      	add	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	18ca      	adds	r2, r1, r3
 8003a5a:	4ba9      	ldr	r3, [pc, #676]	@ (8003d00 <VibeCheck_Loop+0x778>)
 8003a5c:	4413      	add	r3, r2
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <VibeCheck_Loop+0x4f4>
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	18ca      	adds	r2, r1, r3
 8003a72:	4ba4      	ldr	r3, [pc, #656]	@ (8003d04 <VibeCheck_Loop+0x77c>)
 8003a74:	4413      	add	r3, r2
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d052      	beq.n	8003b22 <VibeCheck_Loop+0x59a>
			{
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 0, 1);
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4ba2      	ldr	r3, [pc, #648]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003a80:	4413      	add	r3, r2
 8003a82:	69b9      	ldr	r1, [r7, #24]
 8003a84:	460a      	mov	r2, r1
 8003a86:	0052      	lsls	r2, r2, #1
 8003a88:	4411      	add	r1, r2
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fc24 	bl	80042da <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 1, 1);
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4b9c      	ldr	r3, [pc, #624]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003a96:	4413      	add	r3, r2
 8003a98:	69b9      	ldr	r1, [r7, #24]
 8003a9a:	460a      	mov	r2, r1
 8003a9c:	0052      	lsls	r2, r2, #1
 8003a9e:	440a      	add	r2, r1
 8003aa0:	1c51      	adds	r1, r2, #1
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fc18 	bl	80042da <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 2, 1);
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4b96      	ldr	r3, [pc, #600]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003aae:	4413      	add	r3, r2
 8003ab0:	69b9      	ldr	r1, [r7, #24]
 8003ab2:	460a      	mov	r2, r1
 8003ab4:	0052      	lsls	r2, r2, #1
 8003ab6:	440a      	add	r2, r1
 8003ab8:	1c91      	adds	r1, r2, #2
 8003aba:	2201      	movs	r2, #1
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fc0c 	bl	80042da <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetColor(&vc->rgb, 3 * channel + 0, 0, 0, 0);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4890      	ldr	r0, [pc, #576]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003ac6:	4418      	add	r0, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	1899      	adds	r1, r3, r2
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f000 fb8d 	bl	80041f6 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SetColor(&vc->rgb, 3 * channel + 1, 0, 0, 0);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	488a      	ldr	r0, [pc, #552]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003ae0:	4418      	add	r0, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	4413      	add	r3, r2
 8003aea:	1c59      	adds	r1, r3, #1
 8003aec:	2300      	movs	r3, #0
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	2300      	movs	r3, #0
 8003af2:	2200      	movs	r2, #0
 8003af4:	f000 fb7f 	bl	80041f6 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SetColor(&vc->rgb, 3 * channel + 2, 0, 0, 0);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4883      	ldr	r0, [pc, #524]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003afc:	4418      	add	r0, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4613      	mov	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4413      	add	r3, r2
 8003b06:	1c99      	adds	r1, r3, #2
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f000 fb71 	bl	80041f6 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(&vc->rgb);
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4b7c      	ldr	r3, [pc, #496]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003b18:	4413      	add	r3, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fbf4 	bl	8004308 <VibeCheckRGB_SendColors>
 8003b20:	e016      	b.n	8003b50 <VibeCheck_Loop+0x5c8>
			}
			else
			{
				VibeCheckRGB_SetTopSequence(&vc->rgb, led_sensor_disconnected_times[channel], led_sensor_disconnected_colors[channel], led_sensor_disconnected_len[channel]);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4878      	ldr	r0, [pc, #480]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003b26:	4418      	add	r0, r3
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	4a78      	ldr	r2, [pc, #480]	@ (8003d0c <VibeCheck_Loop+0x784>)
 8003b2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	4a77      	ldr	r2, [pc, #476]	@ (8003d10 <VibeCheck_Loop+0x788>)
 8003b34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	4c76      	ldr	r4, [pc, #472]	@ (8003d14 <VibeCheck_Loop+0x78c>)
 8003b3c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003b40:	f000 fb22 	bl	8004188 <VibeCheckRGB_SetTopSequence>
				VibeCheckRGB_StartTopSequence(&vc->rgb);
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4b70      	ldr	r3, [pc, #448]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003b48:	4413      	add	r3, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fb33 	bl	80041b6 <VibeCheckRGB_StartTopSequence>
			}
		}

		VibeCheckSensor_ResetConnectionFlag(&vc->sensor, channel);
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	4b71      	ldr	r3, [pc, #452]	@ (8003d18 <VibeCheck_Loop+0x790>)
 8003b54:	4413      	add	r3, r2
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f001 fb57 	bl	800520e <VibeCheckSensor_ResetConnectionFlag>
	}

	uint32_t accel_measuring, gyro_measuring;
	if (VibeCheckSensor_MeasuringChanged(&vc->sensor, &channel, &accel_measuring, &gyro_measuring))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	486d      	ldr	r0, [pc, #436]	@ (8003d18 <VibeCheck_Loop+0x790>)
 8003b64:	4418      	add	r0, r3
 8003b66:	f107 030c 	add.w	r3, r7, #12
 8003b6a:	f107 0210 	add.w	r2, r7, #16
 8003b6e:	f107 0118 	add.w	r1, r7, #24
 8003b72:	f001 fb01 	bl	8005178 <VibeCheckSensor_MeasuringChanged>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8095 	beq.w	8003ca8 <VibeCheck_Loop+0x720>
	{
		if (accel_measuring || gyro_measuring)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <VibeCheck_Loop+0x602>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d030      	beq.n	8003bec <VibeCheck_Loop+0x664>
		{
			if (vc->sensor.status[channel].is_connected)
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4413      	add	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	18ca      	adds	r2, r1, r3
 8003b98:	4b60      	ldr	r3, [pc, #384]	@ (8003d1c <VibeCheck_Loop+0x794>)
 8003b9a:	4413      	add	r3, r2
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8082 	beq.w	8003ca8 <VibeCheck_Loop+0x720>
			{
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 0, 0);
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4b58      	ldr	r3, [pc, #352]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003ba8:	4413      	add	r3, r2
 8003baa:	69b9      	ldr	r1, [r7, #24]
 8003bac:	460a      	mov	r2, r1
 8003bae:	0052      	lsls	r2, r2, #1
 8003bb0:	4411      	add	r1, r2
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fb90 	bl	80042da <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 1, 0);
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4b52      	ldr	r3, [pc, #328]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003bbe:	4413      	add	r3, r2
 8003bc0:	69b9      	ldr	r1, [r7, #24]
 8003bc2:	460a      	mov	r2, r1
 8003bc4:	0052      	lsls	r2, r2, #1
 8003bc6:	440a      	add	r2, r1
 8003bc8:	1c51      	adds	r1, r2, #1
 8003bca:	2200      	movs	r2, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fb84 	bl	80042da <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 2, 0);
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003bd6:	4413      	add	r3, r2
 8003bd8:	69b9      	ldr	r1, [r7, #24]
 8003bda:	460a      	mov	r2, r1
 8003bdc:	0052      	lsls	r2, r2, #1
 8003bde:	440a      	add	r2, r1
 8003be0:	1c91      	adds	r1, r2, #2
 8003be2:	2200      	movs	r2, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fb78 	bl	80042da <VibeCheckRGB_SetUpdateWithSequence>
			if (vc->sensor.status[channel].is_connected)
 8003bea:	e05d      	b.n	8003ca8 <VibeCheck_Loop+0x720>
			}
		}
		else
		{
			if (vc->sensor.status[channel].is_connected)
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	18ca      	adds	r2, r1, r3
 8003bfa:	4b48      	ldr	r3, [pc, #288]	@ (8003d1c <VibeCheck_Loop+0x794>)
 8003bfc:	4413      	add	r3, r2
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d051      	beq.n	8003ca8 <VibeCheck_Loop+0x720>
			{
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 0, 1);
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4b40      	ldr	r3, [pc, #256]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003c08:	4413      	add	r3, r2
 8003c0a:	69b9      	ldr	r1, [r7, #24]
 8003c0c:	460a      	mov	r2, r1
 8003c0e:	0052      	lsls	r2, r2, #1
 8003c10:	4411      	add	r1, r2
 8003c12:	2201      	movs	r2, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fb60 	bl	80042da <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 1, 1);
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003c1e:	4413      	add	r3, r2
 8003c20:	69b9      	ldr	r1, [r7, #24]
 8003c22:	460a      	mov	r2, r1
 8003c24:	0052      	lsls	r2, r2, #1
 8003c26:	440a      	add	r2, r1
 8003c28:	1c51      	adds	r1, r2, #1
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fb54 	bl	80042da <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 2, 1);
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4b34      	ldr	r3, [pc, #208]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003c36:	4413      	add	r3, r2
 8003c38:	69b9      	ldr	r1, [r7, #24]
 8003c3a:	460a      	mov	r2, r1
 8003c3c:	0052      	lsls	r2, r2, #1
 8003c3e:	440a      	add	r2, r1
 8003c40:	1c91      	adds	r1, r2, #2
 8003c42:	2201      	movs	r2, #1
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fb48 	bl	80042da <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetColor(&vc->rgb, 3 * channel + 0, 0, 0, 0);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	482e      	ldr	r0, [pc, #184]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003c4e:	4418      	add	r0, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4613      	mov	r3, r2
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	1899      	adds	r1, r3, r2
 8003c58:	2300      	movs	r3, #0
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f000 fac9 	bl	80041f6 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SetColor(&vc->rgb, 3 * channel + 1, 0, 0, 0);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4828      	ldr	r0, [pc, #160]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003c68:	4418      	add	r0, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	4413      	add	r3, r2
 8003c72:	1c59      	adds	r1, r3, #1
 8003c74:	2300      	movs	r3, #0
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f000 fabb 	bl	80041f6 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SetColor(&vc->rgb, 3 * channel + 2, 0, 0, 0);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4821      	ldr	r0, [pc, #132]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003c84:	4418      	add	r0, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	4413      	add	r3, r2
 8003c8e:	1c99      	adds	r1, r3, #2
 8003c90:	2300      	movs	r3, #0
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2300      	movs	r3, #0
 8003c96:	2200      	movs	r2, #0
 8003c98:	f000 faad 	bl	80041f6 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(&vc->rgb);
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d08 <VibeCheck_Loop+0x780>)
 8003ca0:	4413      	add	r3, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fb30 	bl	8004308 <VibeCheckRGB_SendColors>
		}
	}


	/* check the buttons */
	if (time - time_prev_mute_press > 250 && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d20 <VibeCheck_Loop+0x798>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2bfa      	cmp	r3, #250	@ 0xfa
 8003cb2:	d952      	bls.n	8003d5a <VibeCheck_Loop+0x7d2>
 8003cb4:	2104      	movs	r1, #4
 8003cb6:	481b      	ldr	r0, [pc, #108]	@ (8003d24 <VibeCheck_Loop+0x79c>)
 8003cb8:	f008 fb0c 	bl	800c2d4 <HAL_GPIO_ReadPin>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d04b      	beq.n	8003d5a <VibeCheck_Loop+0x7d2>
	{
		time_prev_mute_press = time;
 8003cc2:	4a17      	ldr	r2, [pc, #92]	@ (8003d20 <VibeCheck_Loop+0x798>)
 8003cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc6:	6013      	str	r3, [r2, #0]
		mute_pressed = 1;
 8003cc8:	4b17      	ldr	r3, [pc, #92]	@ (8003d28 <VibeCheck_Loop+0x7a0>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]

		if (is_muted)
 8003cce:	4b17      	ldr	r3, [pc, #92]	@ (8003d2c <VibeCheck_Loop+0x7a4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d02e      	beq.n	8003d34 <VibeCheck_Loop+0x7ac>
		{
			is_muted = 0;
 8003cd6:	4b15      	ldr	r3, [pc, #84]	@ (8003d2c <VibeCheck_Loop+0x7a4>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2108      	movs	r1, #8
 8003ce0:	4810      	ldr	r0, [pc, #64]	@ (8003d24 <VibeCheck_Loop+0x79c>)
 8003ce2:	f008 fb0f 	bl	800c304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2102      	movs	r1, #2
 8003cea:	480e      	ldr	r0, [pc, #56]	@ (8003d24 <VibeCheck_Loop+0x79c>)
 8003cec:	f008 fb0a 	bl	800c304 <HAL_GPIO_WritePin>
			VibeCheckStrobe_Unmute(&vc->strobe);
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d30 <VibeCheck_Loop+0x7a8>)
 8003cf4:	4413      	add	r3, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f002 fe14 	bl	8006924 <VibeCheckStrobe_Unmute>
 8003cfc:	e02d      	b.n	8003d5a <VibeCheck_Loop+0x7d2>
 8003cfe:	bf00      	nop
 8003d00:	00012b34 	.word	0x00012b34
 8003d04:	00012b38 	.word	0x00012b38
 8003d08:	00012490 	.word	0x00012490
 8003d0c:	24000020 	.word	0x24000020
 8003d10:	2400002c 	.word	0x2400002c
 8003d14:	0801ea24 	.word	0x0801ea24
 8003d18:	00012a34 	.word	0x00012a34
 8003d1c:	00012b30 	.word	0x00012b30
 8003d20:	240144f8 	.word	0x240144f8
 8003d24:	58020000 	.word	0x58020000
 8003d28:	24014504 	.word	0x24014504
 8003d2c:	24014500 	.word	0x24014500
 8003d30:	00011428 	.word	0x00011428
		}
		else
		{
			is_muted = 1;
 8003d34:	4b15      	ldr	r3, [pc, #84]	@ (8003d8c <VibeCheck_Loop+0x804>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	2108      	movs	r1, #8
 8003d3e:	4814      	ldr	r0, [pc, #80]	@ (8003d90 <VibeCheck_Loop+0x808>)
 8003d40:	f008 fae0 	bl	800c304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 8003d44:	2201      	movs	r2, #1
 8003d46:	2102      	movs	r1, #2
 8003d48:	4811      	ldr	r0, [pc, #68]	@ (8003d90 <VibeCheck_Loop+0x808>)
 8003d4a:	f008 fadb 	bl	800c304 <HAL_GPIO_WritePin>
			VibeCheckStrobe_Mute(&vc->strobe);
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4b10      	ldr	r3, [pc, #64]	@ (8003d94 <VibeCheck_Loop+0x80c>)
 8003d52:	4413      	add	r3, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f002 fdbb 	bl	80068d0 <VibeCheckStrobe_Mute>
		}
	}

	if (time - time_prev_record_press > 250 && HAL_GPIO_ReadPin(RECORD_BUTTON_GPIO_Port, RECORD_BUTTON_Pin))
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d98 <VibeCheck_Loop+0x810>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2bfa      	cmp	r3, #250	@ 0xfa
 8003d64:	d90d      	bls.n	8003d82 <VibeCheck_Loop+0x7fa>
 8003d66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d6a:	4809      	ldr	r0, [pc, #36]	@ (8003d90 <VibeCheck_Loop+0x808>)
 8003d6c:	f008 fab2 	bl	800c2d4 <HAL_GPIO_ReadPin>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <VibeCheck_Loop+0x7fa>
	{
		time_prev_record_press = time;
 8003d76:	4a08      	ldr	r2, [pc, #32]	@ (8003d98 <VibeCheck_Loop+0x810>)
 8003d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7a:	6013      	str	r3, [r2, #0]
		record_pressed = 1;
 8003d7c:	4b07      	ldr	r3, [pc, #28]	@ (8003d9c <VibeCheck_Loop+0x814>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
	}
}
 8003d82:	bf00      	nop
 8003d84:	3734      	adds	r7, #52	@ 0x34
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd90      	pop	{r4, r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	24014500 	.word	0x24014500
 8003d90:	58020000 	.word	0x58020000
 8003d94:	00011428 	.word	0x00011428
 8003d98:	240144fc 	.word	0x240144fc
 8003d9c:	24014508 	.word	0x24014508

08003da0 <VibeCheckRecordCMD_Execute>:
#include "vibecheck_button_handler.h"

uint32_t is_muted, mute_pressed, record_pressed;

uint32_t VibeCheckRecordCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b092      	sub	sp, #72	@ 0x48
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
	/* for host to set recording LED */
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003daa:	f107 0308 	add.w	r3, r7, #8
 8003dae:	2240      	movs	r2, #64	@ 0x40
 8003db0:	4619      	mov	r1, r3
 8003db2:	6838      	ldr	r0, [r7, #0]
 8003db4:	f002 fb5c 	bl	8006470 <VibeCheckShell_GetNextString>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d02f      	beq.n	8003e1e <VibeCheckRecordCMD_Execute+0x7e>
	{
		if (!strcmp(str, "start"))
 8003dbe:	f107 0308 	add.w	r3, r7, #8
 8003dc2:	4919      	ldr	r1, [pc, #100]	@ (8003e28 <VibeCheckRecordCMD_Execute+0x88>)
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fc faa3 	bl	8000310 <strcmp>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10e      	bne.n	8003dee <VibeCheckRecordCMD_Execute+0x4e>
		{
			HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_SET); /* turn on the record LED */
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003dd6:	4815      	ldr	r0, [pc, #84]	@ (8003e2c <VibeCheckRecordCMD_Execute+0x8c>)
 8003dd8:	f008 fa94 	bl	800c304 <HAL_GPIO_WritePin>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003ddc:	4914      	ldr	r1, [pc, #80]	@ (8003e30 <VibeCheckRecordCMD_Execute+0x90>)
 8003dde:	6838      	ldr	r0, [r7, #0]
 8003de0:	f002 fc66 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003de4:	6838      	ldr	r0, [r7, #0]
 8003de6:	f002 fce3 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e018      	b.n	8003e20 <VibeCheckRecordCMD_Execute+0x80>
		}
		else if (!strcmp(str, "stop"))
 8003dee:	f107 0308 	add.w	r3, r7, #8
 8003df2:	4910      	ldr	r1, [pc, #64]	@ (8003e34 <VibeCheckRecordCMD_Execute+0x94>)
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fc fa8b 	bl	8000310 <strcmp>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10e      	bne.n	8003e1e <VibeCheckRecordCMD_Execute+0x7e>
		{
			HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_RESET); /* turn off the record LED */
 8003e00:	2200      	movs	r2, #0
 8003e02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e06:	4809      	ldr	r0, [pc, #36]	@ (8003e2c <VibeCheckRecordCMD_Execute+0x8c>)
 8003e08:	f008 fa7c 	bl	800c304 <HAL_GPIO_WritePin>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003e0c:	4908      	ldr	r1, [pc, #32]	@ (8003e30 <VibeCheckRecordCMD_Execute+0x90>)
 8003e0e:	6838      	ldr	r0, [r7, #0]
 8003e10:	f002 fc4e 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003e14:	6838      	ldr	r0, [r7, #0]
 8003e16:	f002 fccb 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <VibeCheckRecordCMD_Execute+0x80>
		}
	}

	return 0;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3748      	adds	r7, #72	@ 0x48
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	0801e24c 	.word	0x0801e24c
 8003e2c:	58020400 	.word	0x58020400
 8003e30:	0801e254 	.word	0x0801e254
 8003e34:	0801e258 	.word	0x0801e258

08003e38 <VibeCheckMuteSender_Execute>:

uint32_t VibeCheckMuteSender_Execute(void* obj, VibeCheckShell* shell)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
	/* mute button */
	if (mute_pressed)
 8003e42:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <VibeCheckMuteSender_Execute+0x54>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01b      	beq.n	8003e82 <VibeCheckMuteSender_Execute+0x4a>
	{
		mute_pressed = 0;
 8003e4a:	4b10      	ldr	r3, [pc, #64]	@ (8003e8c <VibeCheckMuteSender_Execute+0x54>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
		VibeCheckShell_PutOutputString(shell, "event");
 8003e50:	490f      	ldr	r1, [pc, #60]	@ (8003e90 <VibeCheckMuteSender_Execute+0x58>)
 8003e52:	6838      	ldr	r0, [r7, #0]
 8003e54:	f002 fc2c 	bl	80066b0 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8003e58:	6838      	ldr	r0, [r7, #0]
 8003e5a:	f002 fc9b 	bl	8006794 <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e94 <VibeCheckMuteSender_Execute+0x5c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d004      	beq.n	8003e70 <VibeCheckMuteSender_Execute+0x38>
			VibeCheckShell_PutOutputString(shell, "muted");
 8003e66:	490c      	ldr	r1, [pc, #48]	@ (8003e98 <VibeCheckMuteSender_Execute+0x60>)
 8003e68:	6838      	ldr	r0, [r7, #0]
 8003e6a:	f002 fc21 	bl	80066b0 <VibeCheckShell_PutOutputString>
 8003e6e:	e003      	b.n	8003e78 <VibeCheckMuteSender_Execute+0x40>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 8003e70:	490a      	ldr	r1, [pc, #40]	@ (8003e9c <VibeCheckMuteSender_Execute+0x64>)
 8003e72:	6838      	ldr	r0, [r7, #0]
 8003e74:	f002 fc1c 	bl	80066b0 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8003e78:	6838      	ldr	r0, [r7, #0]
 8003e7a:	f002 fc99 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <VibeCheckMuteSender_Execute+0x4c>
	}

	return 0;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	24014504 	.word	0x24014504
 8003e90:	0801e260 	.word	0x0801e260
 8003e94:	24014500 	.word	0x24014500
 8003e98:	0801e268 	.word	0x0801e268
 8003e9c:	0801e270 	.word	0x0801e270

08003ea0 <VibeCheckRecordSender_Execute>:


uint32_t VibeCheckRecordSender_Execute(void* obj, VibeCheckShell* shell)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
	/* record button */
	if (record_pressed)
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee4 <VibeCheckRecordSender_Execute+0x44>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d012      	beq.n	8003ed8 <VibeCheckRecordSender_Execute+0x38>
	{
		record_pressed = 0;
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee4 <VibeCheckRecordSender_Execute+0x44>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
		VibeCheckShell_PutOutputString(shell, "event");
 8003eb8:	490b      	ldr	r1, [pc, #44]	@ (8003ee8 <VibeCheckRecordSender_Execute+0x48>)
 8003eba:	6838      	ldr	r0, [r7, #0]
 8003ebc:	f002 fbf8 	bl	80066b0 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8003ec0:	6838      	ldr	r0, [r7, #0]
 8003ec2:	f002 fc67 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "record");
 8003ec6:	4909      	ldr	r1, [pc, #36]	@ (8003eec <VibeCheckRecordSender_Execute+0x4c>)
 8003ec8:	6838      	ldr	r0, [r7, #0]
 8003eca:	f002 fbf1 	bl	80066b0 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputDelimiter(shell);
 8003ece:	6838      	ldr	r0, [r7, #0]
 8003ed0:	f002 fc6e 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
		return 1;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <VibeCheckRecordSender_Execute+0x3a>
	}

	return 0;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	24014508 	.word	0x24014508
 8003ee8:	0801e260 	.word	0x0801e260
 8003eec:	0801e278 	.word	0x0801e278

08003ef0 <VibeCheckConnectCMD_Execute>:

#include "vibecheck_connect_handler.h"
#include "vibecheck_rgb_sequences.h"

uint32_t VibeCheckConnectCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60fb      	str	r3, [r7, #12]
	VibeCheckRGB_SetTopSequence(rgb, connect_sequence_times, connect_sequence_colors, connect_sequence_len);
 8003efe:	2312      	movs	r3, #18
 8003f00:	4a09      	ldr	r2, [pc, #36]	@ (8003f28 <VibeCheckConnectCMD_Execute+0x38>)
 8003f02:	490a      	ldr	r1, [pc, #40]	@ (8003f2c <VibeCheckConnectCMD_Execute+0x3c>)
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f93f 	bl	8004188 <VibeCheckRGB_SetTopSequence>
	VibeCheckRGB_StartTopSequence(rgb);
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f953 	bl	80041b6 <VibeCheckRGB_StartTopSequence>
	VibeCheckShell_PutOutputString(shell, "ack");
 8003f10:	4907      	ldr	r1, [pc, #28]	@ (8003f30 <VibeCheckConnectCMD_Execute+0x40>)
 8003f12:	6838      	ldr	r0, [r7, #0]
 8003f14:	f002 fbcc 	bl	80066b0 <VibeCheckShell_PutOutputString>
	VibeCheckShell_PutOutputDelimiter(shell);
 8003f18:	6838      	ldr	r0, [r7, #0]
 8003f1a:	f002 fc49 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
	return 1;
 8003f1e:	2301      	movs	r3, #1
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	0801ea78 	.word	0x0801ea78
 8003f2c:	0801ea30 	.word	0x0801ea30
 8003f30:	0801e280 	.word	0x0801e280

08003f34 <VibeCheckDisconnectCMD_Execute>:


uint32_t VibeCheckDisconnectCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	60fb      	str	r3, [r7, #12]
	VibeCheckRGB_SetTopSequence(rgb, connect_sequence_times, connect_sequence_colors, connect_sequence_len);
 8003f42:	2312      	movs	r3, #18
 8003f44:	4a09      	ldr	r2, [pc, #36]	@ (8003f6c <VibeCheckDisconnectCMD_Execute+0x38>)
 8003f46:	490a      	ldr	r1, [pc, #40]	@ (8003f70 <VibeCheckDisconnectCMD_Execute+0x3c>)
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f91d 	bl	8004188 <VibeCheckRGB_SetTopSequence>
	VibeCheckRGB_StartTopSequence(rgb);
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f931 	bl	80041b6 <VibeCheckRGB_StartTopSequence>
	VibeCheckShell_PutOutputString(shell, "ack");
 8003f54:	4907      	ldr	r1, [pc, #28]	@ (8003f74 <VibeCheckDisconnectCMD_Execute+0x40>)
 8003f56:	6838      	ldr	r0, [r7, #0]
 8003f58:	f002 fbaa 	bl	80066b0 <VibeCheckShell_PutOutputString>
	VibeCheckShell_PutOutputDelimiter(shell);
 8003f5c:	6838      	ldr	r0, [r7, #0]
 8003f5e:	f002 fc27 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
	return 1;
 8003f62:	2301      	movs	r3, #1
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	0801ea78 	.word	0x0801ea78
 8003f70:	0801ea30 	.word	0x0801ea30
 8003f74:	0801e280 	.word	0x0801e280

08003f78 <VibeCheckRGB_Init>:

#include "vibecheck_rgb.h"


void VibeCheckRGB_Init(VibeCheckRGB* rgb, TIM_HandleTypeDef* htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
	Sequencer_Init(&rgb->base_sequence);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f203 5374 	addw	r3, r3, #1396	@ 0x574
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fe f92f 	bl	80021ec <Sequencer_Init>
	Sequencer_Init(&rgb->top_sequence);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fe f929 	bl	80021ec <Sequencer_Init>

	htim->Instance->PSC = VC_RGB_TIM_PSC - 1;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = VC_RGB_TIM_ARR - 1;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2263      	movs	r2, #99	@ 0x63
 8003fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
	rgb->htim = htim;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	601a      	str	r2, [r3, #0]

	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e008      	b.n	8003fc8 <VibeCheckRGB_Init+0x50>
		rgb->update_with_sequence[i] = 1;  /* LEDs follow the sequence by default */
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	3208      	adds	r2, #8
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d9f3      	bls.n	8003fb6 <VibeCheckRGB_Init+0x3e>

	/* clear the DMA buffer, particularly setting all zeros during the reset time */
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	e009      	b.n	8003fe8 <VibeCheckRGB_Init+0x70>
		rgb->bit_stream[i] = 0;
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	3320      	adds	r3, #32
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4413      	add	r3, r2
 8003fde:	2200      	movs	r2, #0
 8003fe0:	809a      	strh	r2, [r3, #4]
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	60bb      	str	r3, [r7, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f5b3 7f26 	cmp.w	r3, #664	@ 0x298
 8003fee:	d3f1      	bcc.n	8003fd4 <VibeCheckRGB_Init+0x5c>

	/* turn off all LEDs */
	VibeCheckRGB_SetAllOff(rgb);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f958 	bl	80042a6 <VibeCheckRGB_SetAllOff>
	VibeCheckRGB_SendColors(rgb);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f986 	bl	8004308 <VibeCheckRGB_SendColors>
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <VibeCheckRGB_Update>:


void VibeCheckRGB_Update(VibeCheckRGB* rgb)  /* call repeatedly in the main loop */
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	@ 0x28
 8004008:	af02      	add	r7, sp, #8
 800400a:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 800400c:	f003 ff02 	bl	8007e14 <HAL_GetTick>
 8004010:	6178      	str	r0, [r7, #20]
	uint32_t step;
	if (Sequencer_Update(&rgb->top_sequence, time, &step))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8004018:	f107 0210 	add.w	r2, r7, #16
 800401c:	6979      	ldr	r1, [r7, #20]
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe f916 	bl	8002250 <Sequencer_Update>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d02f      	beq.n	800408a <VibeCheckRGB_Update+0x86>
	{
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	e025      	b.n	800407c <VibeCheckRGB_Update+0x78>
		{
			VibeCheckRGB_Color color = rgb->top_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 15a0 	ldr.w	r1, [r3, #1440]	@ 0x5a0
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	441a      	add	r2, r3
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	441a      	add	r2, r3
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	18ca      	adds	r2, r1, r3
 800404a:	f107 030c 	add.w	r3, r7, #12
 800404e:	8811      	ldrh	r1, [r2, #0]
 8004050:	7892      	ldrb	r2, [r2, #2]
 8004052:	8019      	strh	r1, [r3, #0]
 8004054:	709a      	strb	r2, [r3, #2]
			if (rgb->update_with_sequence[i])
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	3208      	adds	r2, #8
 800405c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <VibeCheckRGB_Update+0x72>
				VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 8004064:	7b3a      	ldrb	r2, [r7, #12]
 8004066:	7b79      	ldrb	r1, [r7, #13]
 8004068:	7bbb      	ldrb	r3, [r7, #14]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	460b      	mov	r3, r1
 800406e:	69f9      	ldr	r1, [r7, #28]
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f8c0 	bl	80041f6 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	3301      	adds	r3, #1
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b08      	cmp	r3, #8
 8004080:	d9d6      	bls.n	8004030 <VibeCheckRGB_Update+0x2c>
		}
		VibeCheckRGB_SendColors(rgb);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f940 	bl	8004308 <VibeCheckRGB_SendColors>
			if (rgb->update_with_sequence[i])
				VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
		}
		VibeCheckRGB_SendColors(rgb);
	}
}
 8004088:	e043      	b.n	8004112 <VibeCheckRGB_Update+0x10e>
	else if (!Sequencer_IsRunning(&rgb->top_sequence) && Sequencer_Update(&rgb->base_sequence, time, &step))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe f940 	bl	8002316 <Sequencer_IsRunning>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d13a      	bne.n	8004112 <VibeCheckRGB_Update+0x10e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f203 5374 	addw	r3, r3, #1396	@ 0x574
 80040a2:	f107 0210 	add.w	r2, r7, #16
 80040a6:	6979      	ldr	r1, [r7, #20]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe f8d1 	bl	8002250 <Sequencer_Update>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d02e      	beq.n	8004112 <VibeCheckRGB_Update+0x10e>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80040b4:	2300      	movs	r3, #0
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	e025      	b.n	8004106 <VibeCheckRGB_Update+0x102>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8d3 1588 	ldr.w	r1, [r3, #1416]	@ 0x588
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	441a      	add	r2, r3
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	441a      	add	r2, r3
 80040cc:	4613      	mov	r3, r2
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	4413      	add	r3, r2
 80040d2:	18ca      	adds	r2, r1, r3
 80040d4:	f107 0308 	add.w	r3, r7, #8
 80040d8:	8811      	ldrh	r1, [r2, #0]
 80040da:	7892      	ldrb	r2, [r2, #2]
 80040dc:	8019      	strh	r1, [r3, #0]
 80040de:	709a      	strb	r2, [r3, #2]
			if (rgb->update_with_sequence[i])
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	3208      	adds	r2, #8
 80040e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <VibeCheckRGB_Update+0xfc>
				VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 80040ee:	7a3a      	ldrb	r2, [r7, #8]
 80040f0:	7a79      	ldrb	r1, [r7, #9]
 80040f2:	7abb      	ldrb	r3, [r7, #10]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	460b      	mov	r3, r1
 80040f8:	69b9      	ldr	r1, [r7, #24]
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f87b 	bl	80041f6 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	3301      	adds	r3, #1
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d9d6      	bls.n	80040ba <VibeCheckRGB_Update+0xb6>
		VibeCheckRGB_SendColors(rgb);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f8fb 	bl	8004308 <VibeCheckRGB_SendColors>
}
 8004112:	bf00      	nop
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <VibeCheckRGB_SetBaseSequence>:


void VibeCheckRGB_SetBaseSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
 8004126:	603b      	str	r3, [r7, #0]
	rgb->base_sequence_colors = color;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	f8c3 2588 	str.w	r2, [r3, #1416]	@ 0x588
	Sequencer_SetSequence(&rgb->base_sequence, time, len, 1);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f203 5074 	addw	r0, r3, #1396	@ 0x574
 8004136:	2301      	movs	r3, #1
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	f7fe f872 	bl	8002224 <Sequencer_SetSequence>
}
 8004140:	bf00      	nop
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <VibeCheckRGB_StartBaseSequence>:

void VibeCheckRGB_StartBaseSequence(VibeCheckRGB* rgb)
{
 8004148:	b590      	push	{r4, r7, lr}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->base_sequence, HAL_GetTick());
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f203 5474 	addw	r4, r3, #1396	@ 0x574
 8004156:	f003 fe5d 	bl	8007e14 <HAL_GetTick>
 800415a:	4603      	mov	r3, r0
 800415c:	4619      	mov	r1, r3
 800415e:	4620      	mov	r0, r4
 8004160:	f7fe f8b8 	bl	80022d4 <Sequencer_Start>
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	bd90      	pop	{r4, r7, pc}

0800416c <VibeCheckRGB_StopBaseSequence>:

void VibeCheckRGB_StopBaseSequence(VibeCheckRGB* rgb)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->base_sequence);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f203 5374 	addw	r3, r3, #1396	@ 0x574
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe f8be 	bl	80022fc <Sequencer_Stop>
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <VibeCheckRGB_SetTopSequence>:

void VibeCheckRGB_SetTopSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
	rgb->top_sequence_colors = color;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	f8c3 25a0 	str.w	r2, [r3, #1440]	@ 0x5a0
	Sequencer_SetSequence(&rgb->top_sequence, time, len, 0);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f203 508c 	addw	r0, r3, #1420	@ 0x58c
 80041a4:	2300      	movs	r3, #0
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	f7fe f83b 	bl	8002224 <Sequencer_SetSequence>
}
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <VibeCheckRGB_StartTopSequence>:

void VibeCheckRGB_StartTopSequence(VibeCheckRGB* rgb)
{
 80041b6:	b590      	push	{r4, r7, lr}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->top_sequence, HAL_GetTick());
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f203 548c 	addw	r4, r3, #1420	@ 0x58c
 80041c4:	f003 fe26 	bl	8007e14 <HAL_GetTick>
 80041c8:	4603      	mov	r3, r0
 80041ca:	4619      	mov	r1, r3
 80041cc:	4620      	mov	r0, r4
 80041ce:	f7fe f881 	bl	80022d4 <Sequencer_Start>
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd90      	pop	{r4, r7, pc}

080041da <VibeCheckRGB_StopTopSequence>:

void VibeCheckRGB_StopTopSequence(VibeCheckRGB* rgb)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->top_sequence);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fe f887 	bl	80022fc <Sequencer_Stop>
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <VibeCheckRGB_SetColor>:


void VibeCheckRGB_SetColor(VibeCheckRGB* rgb, uint32_t index, uint8_t r, uint8_t g, uint8_t b)  /* set the color of an individual LED */
{
 80041f6:	b480      	push	{r7}
 80041f8:	b085      	sub	sp, #20
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	4611      	mov	r1, r2
 8004202:	461a      	mov	r2, r3
 8004204:	460b      	mov	r3, r1
 8004206:	71fb      	strb	r3, [r7, #7]
 8004208:	4613      	mov	r3, r2
 800420a:	71bb      	strb	r3, [r7, #6]
	if (index > VC_RGB_NUM_LEDS - 1)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b08      	cmp	r3, #8
 8004210:	d901      	bls.n	8004216 <VibeCheckRGB_SetColor+0x20>
		index = VC_RGB_NUM_LEDS - 1;
 8004212:	2308      	movs	r3, #8
 8004214:	60bb      	str	r3, [r7, #8]

	rgb->colors[index].r = r;
 8004216:	68f9      	ldr	r1, [r7, #12]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	4413      	add	r3, r2
 8004220:	440b      	add	r3, r1
 8004222:	3304      	adds	r3, #4
 8004224:	79fa      	ldrb	r2, [r7, #7]
 8004226:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].g = g;
 8004228:	68f9      	ldr	r1, [r7, #12]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	4613      	mov	r3, r2
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	4413      	add	r3, r2
 8004232:	440b      	add	r3, r1
 8004234:	3305      	adds	r3, #5
 8004236:	79ba      	ldrb	r2, [r7, #6]
 8004238:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].b = b;
 800423a:	68f9      	ldr	r1, [r7, #12]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	4413      	add	r3, r2
 8004244:	440b      	add	r3, r1
 8004246:	3306      	adds	r3, #6
 8004248:	7e3a      	ldrb	r2, [r7, #24]
 800424a:	701a      	strb	r2, [r3, #0]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <VibeCheckRGB_GetColor>:


VibeCheckRGB_Color VibeCheckRGB_GetColor(VibeCheckRGB* rgb, uint32_t index)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
	if (index > VC_RGB_NUM_LEDS - 1)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d901      	bls.n	800426c <VibeCheckRGB_GetColor+0x14>
			index = VC_RGB_NUM_LEDS - 1;
 8004268:	2308      	movs	r3, #8
 800426a:	603b      	str	r3, [r7, #0]

	return rgb->colors[index];
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	4413      	add	r3, r2
 8004276:	18ca      	adds	r2, r1, r3
 8004278:	f107 030c 	add.w	r3, r7, #12
 800427c:	3204      	adds	r2, #4
 800427e:	8811      	ldrh	r1, [r2, #0]
 8004280:	7892      	ldrb	r2, [r2, #2]
 8004282:	8019      	strh	r1, [r3, #0]
 8004284:	709a      	strb	r2, [r3, #2]
 8004286:	2300      	movs	r3, #0
 8004288:	7b3a      	ldrb	r2, [r7, #12]
 800428a:	f362 0307 	bfi	r3, r2, #0, #8
 800428e:	7b7a      	ldrb	r2, [r7, #13]
 8004290:	f362 230f 	bfi	r3, r2, #8, #8
 8004294:	7bba      	ldrb	r2, [r7, #14]
 8004296:	f362 4317 	bfi	r3, r2, #16, #8
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <VibeCheckRGB_SetAllOff>:


void VibeCheckRGB_SetAllOff(VibeCheckRGB* rgb)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b086      	sub	sp, #24
 80042aa:	af02      	add	r7, sp, #8
 80042ac:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e00a      	b.n	80042ca <VibeCheckRGB_SetAllOff+0x24>
		VibeCheckRGB_SetColor(rgb, i, 0, 0, 0);
 80042b4:	2300      	movs	r3, #0
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	2300      	movs	r3, #0
 80042ba:	2200      	movs	r2, #0
 80042bc:	68f9      	ldr	r1, [r7, #12]
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ff99 	bl	80041f6 <VibeCheckRGB_SetColor>
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3301      	adds	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d9f1      	bls.n	80042b4 <VibeCheckRGB_SetAllOff+0xe>
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <VibeCheckRGB_SetUpdateWithSequence>:


void VibeCheckRGB_SetUpdateWithSequence(VibeCheckRGB* rgb, uint32_t index, uint32_t update)
{
 80042da:	b480      	push	{r7}
 80042dc:	b085      	sub	sp, #20
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
	if (index > VC_RGB_NUM_LEDS - 1)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d901      	bls.n	80042f0 <VibeCheckRGB_SetUpdateWithSequence+0x16>
			index = VC_RGB_NUM_LEDS - 1;
 80042ec:	2308      	movs	r3, #8
 80042ee:	60bb      	str	r3, [r7, #8]

	rgb->update_with_sequence[index] = update;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	3208      	adds	r2, #8
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <VibeCheckRGB_SendColors>:


void VibeCheckRGB_SendColors(VibeCheckRGB* rgb)  /* send the colors to the LEDs */
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	/* compute the bit stream timings */
	uint32_t i = VC_RGB_RESET_PERIODS;  /* put the reset periods first so we are not affected by spurious pin events at startup and such */
 8004310:	23e0      	movs	r3, #224	@ 0xe0
 8004312:	61fb      	str	r3, [r7, #28]
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	e074      	b.n	8004404 <VibeCheckRGB_SendColors+0xfc>
	{
		for (uint32_t k = 8; k > 0; k--)  /* green */
 800431a:	2308      	movs	r3, #8
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	e01f      	b.n	8004360 <VibeCheckRGB_SendColors+0x58>
			rgb->bit_stream[i++] = ((rgb->colors[j].g >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4613      	mov	r3, r2
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4413      	add	r3, r2
 800432a:	440b      	add	r3, r1
 800432c:	3305      	adds	r3, #5
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	3b01      	subs	r3, #1
 8004336:	fa42 f303 	asr.w	r3, r2, r3
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <VibeCheckRGB_SendColors+0x3e>
 8004342:	2130      	movs	r1, #48	@ 0x30
 8004344:	e000      	b.n	8004348 <VibeCheckRGB_SendColors+0x40>
 8004346:	2118      	movs	r1, #24
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	61fa      	str	r2, [r7, #28]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	3320      	adds	r3, #32
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	4413      	add	r3, r2
 8004356:	460a      	mov	r2, r1
 8004358:	809a      	strh	r2, [r3, #4]
		for (uint32_t k = 8; k > 0; k--)  /* green */
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	3b01      	subs	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1dc      	bne.n	8004320 <VibeCheckRGB_SendColors+0x18>

		for (uint32_t k = 8; k > 0; k--)  /* red */
 8004366:	2308      	movs	r3, #8
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	e01f      	b.n	80043ac <VibeCheckRGB_SendColors+0xa4>
			rgb->bit_stream[i++] = ((rgb->colors[j].r >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4613      	mov	r3, r2
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	4413      	add	r3, r2
 8004376:	440b      	add	r3, r1
 8004378:	3304      	adds	r3, #4
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	3b01      	subs	r3, #1
 8004382:	fa42 f303 	asr.w	r3, r2, r3
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <VibeCheckRGB_SendColors+0x8a>
 800438e:	2130      	movs	r1, #48	@ 0x30
 8004390:	e000      	b.n	8004394 <VibeCheckRGB_SendColors+0x8c>
 8004392:	2118      	movs	r1, #24
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	61fa      	str	r2, [r7, #28]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	3320      	adds	r3, #32
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	4413      	add	r3, r2
 80043a2:	460a      	mov	r2, r1
 80043a4:	809a      	strh	r2, [r3, #4]
		for (uint32_t k = 8; k > 0; k--)  /* red */
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1dc      	bne.n	800436c <VibeCheckRGB_SendColors+0x64>

		for (uint32_t k = 8; k > 0; k--)  /* blue */
 80043b2:	2308      	movs	r3, #8
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	e01f      	b.n	80043f8 <VibeCheckRGB_SendColors+0xf0>
			rgb->bit_stream[i++] = ((rgb->colors[j].b >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4613      	mov	r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	4413      	add	r3, r2
 80043c2:	440b      	add	r3, r1
 80043c4:	3306      	adds	r3, #6
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	fa42 f303 	asr.w	r3, r2, r3
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <VibeCheckRGB_SendColors+0xd6>
 80043da:	2130      	movs	r1, #48	@ 0x30
 80043dc:	e000      	b.n	80043e0 <VibeCheckRGB_SendColors+0xd8>
 80043de:	2118      	movs	r1, #24
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	61fa      	str	r2, [r7, #28]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	3320      	adds	r3, #32
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4413      	add	r3, r2
 80043ee:	460a      	mov	r2, r1
 80043f0:	809a      	strh	r2, [r3, #4]
		for (uint32_t k = 8; k > 0; k--)  /* blue */
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1dc      	bne.n	80043b8 <VibeCheckRGB_SendColors+0xb0>
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	3301      	adds	r3, #1
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b08      	cmp	r3, #8
 8004408:	d987      	bls.n	800431a <VibeCheckRGB_SendColors+0x12>
	}

	/* start the DMA transfer */
	(void)HAL_TIM_PWM_Start_DMA(rgb->htim, VC_RGB_TIM_CHANNEL, (uint32_t*)rgb->bit_stream, VC_RGB_BUF_LEN);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8004414:	f44f 7326 	mov.w	r3, #664	@ 0x298
 8004418:	2100      	movs	r1, #0
 800441a:	f00e f9e1 	bl	80127e0 <HAL_TIM_PWM_Start_DMA>
}
 800441e:	bf00      	nop
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <VibeCheckRGBCMD_Execute>:

*/


uint32_t VibeCheckRGBCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b09c      	sub	sp, #112	@ 0x70
 800442c:	af02      	add	r7, sp, #8
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	667b      	str	r3, [r7, #100]	@ 0x64

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800443a:	2240      	movs	r2, #64	@ 0x40
 800443c:	4619      	mov	r1, r3
 800443e:	6838      	ldr	r0, [r7, #0]
 8004440:	f002 f816 	bl	8006470 <VibeCheckShell_GetNextString>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80c2 	beq.w	80045d0 <VibeCheckRGBCMD_Execute+0x1a8>
	{
		if (!strcmp(str, "set"))
 800444c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004450:	4962      	ldr	r1, [pc, #392]	@ (80045dc <VibeCheckRGBCMD_Execute+0x1b4>)
 8004452:	4618      	mov	r0, r3
 8004454:	f7fb ff5c 	bl	8000310 <strcmp>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d141      	bne.n	80044e2 <VibeCheckRGBCMD_Execute+0xba>
		{
			int32_t index, r, g, b;
			if (VibeCheckShell_GetNextInt(shell, &index)
 800445e:	f107 0320 	add.w	r3, r7, #32
 8004462:	4619      	mov	r1, r3
 8004464:	6838      	ldr	r0, [r7, #0]
 8004466:	f002 f87b 	bl	8006560 <VibeCheckShell_GetNextInt>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80af 	beq.w	80045d0 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &r)
 8004472:	f107 031c 	add.w	r3, r7, #28
 8004476:	4619      	mov	r1, r3
 8004478:	6838      	ldr	r0, [r7, #0]
 800447a:	f002 f871 	bl	8006560 <VibeCheckShell_GetNextInt>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 80a5 	beq.w	80045d0 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &g)
 8004486:	f107 0318 	add.w	r3, r7, #24
 800448a:	4619      	mov	r1, r3
 800448c:	6838      	ldr	r0, [r7, #0]
 800448e:	f002 f867 	bl	8006560 <VibeCheckShell_GetNextInt>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 809b 	beq.w	80045d0 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &b))
 800449a:	f107 0314 	add.w	r3, r7, #20
 800449e:	4619      	mov	r1, r3
 80044a0:	6838      	ldr	r0, [r7, #0]
 80044a2:	f002 f85d 	bl	8006560 <VibeCheckShell_GetNextInt>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8091 	beq.w	80045d0 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_SetColor(rgb, index, r, g, b);
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	4618      	mov	r0, r3
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	b2d9      	uxtb	r1, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	460b      	mov	r3, r1
 80044c2:	4601      	mov	r1, r0
 80044c4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80044c6:	f7ff fe96 	bl	80041f6 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(rgb);
 80044ca:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80044cc:	f7ff ff1c 	bl	8004308 <VibeCheckRGB_SendColors>
				VibeCheckShell_PutOutputString(shell, "ack");
 80044d0:	4943      	ldr	r1, [pc, #268]	@ (80045e0 <VibeCheckRGBCMD_Execute+0x1b8>)
 80044d2:	6838      	ldr	r0, [r7, #0]
 80044d4:	f002 f8ec 	bl	80066b0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80044d8:	6838      	ldr	r0, [r7, #0]
 80044da:	f002 f969 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80044de:	2301      	movs	r3, #1
 80044e0:	e077      	b.n	80045d2 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "get"))
 80044e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044e6:	493f      	ldr	r1, [pc, #252]	@ (80045e4 <VibeCheckRGBCMD_Execute+0x1bc>)
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fb ff11 	bl	8000310 <strcmp>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d137      	bne.n	8004564 <VibeCheckRGBCMD_Execute+0x13c>
		{
			int32_t index;
			if (VibeCheckShell_GetNextInt(shell, &index))
 80044f4:	f107 0310 	add.w	r3, r7, #16
 80044f8:	4619      	mov	r1, r3
 80044fa:	6838      	ldr	r0, [r7, #0]
 80044fc:	f002 f830 	bl	8006560 <VibeCheckShell_GetNextInt>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d064      	beq.n	80045d0 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_Color color = VibeCheckRGB_GetColor(rgb, index);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4619      	mov	r1, r3
 800450a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800450c:	f7ff fea4 	bl	8004258 <VibeCheckRGB_GetColor>
 8004510:	4603      	mov	r3, r0
 8004512:	461a      	mov	r2, r3
 8004514:	733a      	strb	r2, [r7, #12]
 8004516:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800451a:	737a      	strb	r2, [r7, #13]
 800451c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004520:	73bb      	strb	r3, [r7, #14]

				VibeCheckShell_PutOutputString(shell, "ack");
 8004522:	492f      	ldr	r1, [pc, #188]	@ (80045e0 <VibeCheckRGBCMD_Execute+0x1b8>)
 8004524:	6838      	ldr	r0, [r7, #0]
 8004526:	f002 f8c3 	bl	80066b0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputSeparator(shell);
 800452a:	6838      	ldr	r0, [r7, #0]
 800452c:	f002 f932 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.r);
 8004530:	7b3b      	ldrb	r3, [r7, #12]
 8004532:	4619      	mov	r1, r3
 8004534:	6838      	ldr	r0, [r7, #0]
 8004536:	f002 f8f7 	bl	8006728 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 800453a:	6838      	ldr	r0, [r7, #0]
 800453c:	f002 f92a 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.g);
 8004540:	7b7b      	ldrb	r3, [r7, #13]
 8004542:	4619      	mov	r1, r3
 8004544:	6838      	ldr	r0, [r7, #0]
 8004546:	f002 f8ef 	bl	8006728 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 800454a:	6838      	ldr	r0, [r7, #0]
 800454c:	f002 f922 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.b);
 8004550:	7bbb      	ldrb	r3, [r7, #14]
 8004552:	4619      	mov	r1, r3
 8004554:	6838      	ldr	r0, [r7, #0]
 8004556:	f002 f8e7 	bl	8006728 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputDelimiter(shell);
 800455a:	6838      	ldr	r0, [r7, #0]
 800455c:	f002 f928 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004560:	2301      	movs	r3, #1
 8004562:	e036      	b.n	80045d2 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "start"))
 8004564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004568:	491f      	ldr	r1, [pc, #124]	@ (80045e8 <VibeCheckRGBCMD_Execute+0x1c0>)
 800456a:	4618      	mov	r0, r3
 800456c:	f7fb fed0 	bl	8000310 <strcmp>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10e      	bne.n	8004594 <VibeCheckRGBCMD_Execute+0x16c>
		{
			VibeCheckRGB_StartBaseSequence(rgb);
 8004576:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004578:	f7ff fde6 	bl	8004148 <VibeCheckRGB_StartBaseSequence>
			VibeCheckRGB_StartTopSequence(rgb);
 800457c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800457e:	f7ff fe1a 	bl	80041b6 <VibeCheckRGB_StartTopSequence>
			VibeCheckShell_PutOutputString(shell, "ack");
 8004582:	4917      	ldr	r1, [pc, #92]	@ (80045e0 <VibeCheckRGBCMD_Execute+0x1b8>)
 8004584:	6838      	ldr	r0, [r7, #0]
 8004586:	f002 f893 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 800458a:	6838      	ldr	r0, [r7, #0]
 800458c:	f002 f910 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004590:	2301      	movs	r3, #1
 8004592:	e01e      	b.n	80045d2 <VibeCheckRGBCMD_Execute+0x1aa>
		}
		else if (!strcmp(str, "stop"))
 8004594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004598:	4914      	ldr	r1, [pc, #80]	@ (80045ec <VibeCheckRGBCMD_Execute+0x1c4>)
 800459a:	4618      	mov	r0, r3
 800459c:	f7fb feb8 	bl	8000310 <strcmp>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d114      	bne.n	80045d0 <VibeCheckRGBCMD_Execute+0x1a8>
		{
			VibeCheckRGB_StopBaseSequence(rgb);
 80045a6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80045a8:	f7ff fde0 	bl	800416c <VibeCheckRGB_StopBaseSequence>
			VibeCheckRGB_StopTopSequence(rgb);
 80045ac:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80045ae:	f7ff fe14 	bl	80041da <VibeCheckRGB_StopTopSequence>
			VibeCheckRGB_SetAllOff(rgb);
 80045b2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80045b4:	f7ff fe77 	bl	80042a6 <VibeCheckRGB_SetAllOff>
			VibeCheckRGB_SendColors(rgb);
 80045b8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80045ba:	f7ff fea5 	bl	8004308 <VibeCheckRGB_SendColors>
			VibeCheckShell_PutOutputString(shell, "ack");
 80045be:	4908      	ldr	r1, [pc, #32]	@ (80045e0 <VibeCheckRGBCMD_Execute+0x1b8>)
 80045c0:	6838      	ldr	r0, [r7, #0]
 80045c2:	f002 f875 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80045c6:	6838      	ldr	r0, [r7, #0]
 80045c8:	f002 f8f2 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <VibeCheckRGBCMD_Execute+0x1aa>
		}
	}

	return 0;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3768      	adds	r7, #104	@ 0x68
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	0801e284 	.word	0x0801e284
 80045e0:	0801e288 	.word	0x0801e288
 80045e4:	0801e28c 	.word	0x0801e28c
 80045e8:	0801e290 	.word	0x0801e290
 80045ec:	0801e298 	.word	0x0801e298

080045f0 <VibeCheckSensor_Init>:

#include "vibecheck_sensor.h"


void VibeCheckSensor_Init(VibeCheckSensor* sensor, volatile uint32_t* time_micros, SPI_HandleTypeDef* hspi0, SPI_HandleTypeDef* hspi1, SPI_HandleTypeDef* hspi2)
{
 80045f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045f2:	b0a1      	sub	sp, #132	@ 0x84
 80045f4:	af06      	add	r7, sp, #24
 80045f6:	6178      	str	r0, [r7, #20]
 80045f8:	6139      	str	r1, [r7, #16]
 80045fa:	60fa      	str	r2, [r7, #12]
 80045fc:	60bb      	str	r3, [r7, #8]
	sensor->data_ind = 0;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004604:	461a      	mov	r2, r3
 8004606:	2300      	movs	r3, #0
 8004608:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
	sensor->data_ready = 0;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004612:	461a      	mov	r2, r3
 8004614:	2300      	movs	r3, #0
 8004616:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
	sensor->data_packet_size = VC_SENSOR_DEFAULT_PACKET_SIZE;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004620:	461a      	mov	r2, r3
 8004622:	230a      	movs	r3, #10
 8004624:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
	sensor->time_prev_update = 0;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800462e:	461a      	mov	r2, r3
 8004630:	2300      	movs	r3, #0
 8004632:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
	sensor->generate_fake_data = 0;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800463c:	461a      	mov	r2, r3
 800463e:	2300      	movs	r3, #0
 8004640:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4

	sensor->time_micros = time_micros;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800464a:	461a      	mov	r2, r3
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

	/* set all the configurations to defaults */
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004652:	2300      	movs	r3, #0
 8004654:	667b      	str	r3, [r7, #100]	@ 0x64
 8004656:	e04a      	b.n	80046ee <VibeCheckSensor_Init+0xfe>
	{
		sensor->sensor_config[i].usr_offset_x = 0.0f;
 8004658:	6979      	ldr	r1, [r7, #20]
 800465a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800465c:	4613      	mov	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_y = 0.0f;
 800466c:	6979      	ldr	r1, [r7, #20]
 800466e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	3304      	adds	r3, #4
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_z = 0.0f;
 8004682:	6979      	ldr	r1, [r7, #20]
 8004684:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004686:	4613      	mov	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	3308      	adds	r3, #8
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].accel_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8004698:	6979      	ldr	r1, [r7, #20]
 800469a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	330c      	adds	r3, #12
 80046a8:	2234      	movs	r2, #52	@ 0x34
 80046aa:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].g_range = VC_SENSOR_DEFAULT_G_RANGE;
 80046ac:	6979      	ldr	r1, [r7, #20]
 80046ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	3310      	adds	r3, #16
 80046bc:	2204      	movs	r2, #4
 80046be:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].gyro_odr_hz = VC_SENSOR_DEFAULT_ODR;
 80046c0:	6979      	ldr	r1, [r7, #20]
 80046c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	3314      	adds	r3, #20
 80046d0:	2234      	movs	r2, #52	@ 0x34
 80046d2:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].dps_range = VC_SENSOR_DEFAULT_DPS_RANGE;
 80046d4:	6979      	ldr	r1, [r7, #20]
 80046d6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	3318      	adds	r3, #24
 80046e4:	227d      	movs	r2, #125	@ 0x7d
 80046e6:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80046e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046ea:	3301      	adds	r3, #1
 80046ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80046ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d9b1      	bls.n	8004658 <VibeCheckSensor_Init+0x68>
	}


	/* initialize the sensor chips */
	SPI_HandleTypeDef* hspi[VC_SENSOR_NUM_SENSORS] = {hspi0, hspi1, hspi2};
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004700:	65fb      	str	r3, [r7, #92]	@ 0x5c

	GPIO_TypeDef* cs_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_GPIO_Port, ACCEL_NCS2_GPIO_Port, ACCEL_NCS3_GPIO_Port};
 8004702:	4a49      	ldr	r2, [pc, #292]	@ (8004828 <VibeCheckSensor_Init+0x238>)
 8004704:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004708:	ca07      	ldmia	r2, {r0, r1, r2}
 800470a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t cs_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_Pin, ACCEL_NCS2_Pin, ACCEL_NCS3_Pin};
 800470e:	4a47      	ldr	r2, [pc, #284]	@ (800482c <VibeCheckSensor_Init+0x23c>)
 8004710:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004718:	6018      	str	r0, [r3, #0]
 800471a:	3304      	adds	r3, #4
 800471c:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int1_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_GPIO_Port, ACCEL_INTA2_GPIO_Port, ACCEL_INTA3_GPIO_Port};
 800471e:	4a44      	ldr	r2, [pc, #272]	@ (8004830 <VibeCheckSensor_Init+0x240>)
 8004720:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004724:	ca07      	ldmia	r2, {r0, r1, r2}
 8004726:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int1_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_Pin, ACCEL_INTA2_Pin, ACCEL_INTA3_Pin};
 800472a:	4a42      	ldr	r2, [pc, #264]	@ (8004834 <VibeCheckSensor_Init+0x244>)
 800472c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004730:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004734:	6018      	str	r0, [r3, #0]
 8004736:	3304      	adds	r3, #4
 8004738:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int2_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_GPIO_Port, ACCEL_INTB2_GPIO_Port, ACCEL_INTB3_GPIO_Port};
 800473a:	4a3f      	ldr	r2, [pc, #252]	@ (8004838 <VibeCheckSensor_Init+0x248>)
 800473c:	f107 0320 	add.w	r3, r7, #32
 8004740:	ca07      	ldmia	r2, {r0, r1, r2}
 8004742:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int2_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_Pin, ACCEL_INTB2_Pin, ACCEL_INTB3_Pin};
 8004746:	4a3d      	ldr	r2, [pc, #244]	@ (800483c <VibeCheckSensor_Init+0x24c>)
 8004748:	f107 0318 	add.w	r3, r7, #24
 800474c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004750:	6018      	str	r0, [r3, #0]
 8004752:	3304      	adds	r3, #4
 8004754:	8019      	strh	r1, [r3, #0]

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004756:	2300      	movs	r3, #0
 8004758:	663b      	str	r3, [r7, #96]	@ 0x60
 800475a:	e05c      	b.n	8004816 <VibeCheckSensor_Init+0x226>
	{
		LSM6DS3_Init(&sensor->sensor_array[i], &sensor->sensor_config[i],
 800475c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800475e:	4613      	mov	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	3350      	adds	r3, #80	@ 0x50
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4413      	add	r3, r2
 800476c:	1d1d      	adds	r5, r3, #4
 800476e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	18d6      	adds	r6, r2, r3
 800477c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	3360      	adds	r3, #96	@ 0x60
 8004782:	f107 0208 	add.w	r2, r7, #8
 8004786:	4413      	add	r3, r2
 8004788:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800478c:	607b      	str	r3, [r7, #4]
 800478e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8004796:	f107 0308 	add.w	r3, r7, #8
 800479a:	18cb      	adds	r3, r1, r3
 800479c:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80047a0:	6039      	str	r1, [r7, #0]
 80047a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80047aa:	f107 0308 	add.w	r3, r7, #8
 80047ae:	18c3      	adds	r3, r0, r3
 80047b0:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 80047b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80047bc:	f107 0308 	add.w	r3, r7, #8
 80047c0:	18c3      	adds	r3, r0, r3
 80047c2:	f853 1c34 	ldr.w	r1, [r3, #-52]
 80047c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80047ce:	f107 0308 	add.w	r3, r7, #8
 80047d2:	18c3      	adds	r3, r0, r3
 80047d4:	f833 0c3c 	ldrh.w	r0, [r3, #-60]
 80047d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 80047e0:	f107 0308 	add.w	r3, r7, #8
 80047e4:	18e3      	adds	r3, r4, r3
 80047e6:	f853 4c48 	ldr.w	r4, [r3, #-72]
 80047ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	3360      	adds	r3, #96	@ 0x60
 80047f0:	f107 0c08 	add.w	ip, r7, #8
 80047f4:	4463      	add	r3, ip
 80047f6:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 80047fa:	9304      	str	r3, [sp, #16]
 80047fc:	9403      	str	r4, [sp, #12]
 80047fe:	9002      	str	r0, [sp, #8]
 8004800:	9101      	str	r1, [sp, #4]
 8004802:	9200      	str	r2, [sp, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	4631      	mov	r1, r6
 800480a:	4628      	mov	r0, r5
 800480c:	f7fc f954 	bl	8000ab8 <LSM6DS3_Init>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004810:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004812:	3301      	adds	r3, #1
 8004814:	663b      	str	r3, [r7, #96]	@ 0x60
 8004816:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004818:	2b02      	cmp	r3, #2
 800481a:	d99f      	bls.n	800475c <VibeCheckSensor_Init+0x16c>
				hspi[i], cs_ports[i], cs_pins[i], int1_ports[i], int1_pins[i], int2_ports[i], int2_pins[i]);
	}

}
 800481c:	bf00      	nop
 800481e:	bf00      	nop
 8004820:	376c      	adds	r7, #108	@ 0x6c
 8004822:	46bd      	mov	sp, r7
 8004824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004826:	bf00      	nop
 8004828:	0801e2a0 	.word	0x0801e2a0
 800482c:	0801e2ac 	.word	0x0801e2ac
 8004830:	0801e2b4 	.word	0x0801e2b4
 8004834:	0801e2c0 	.word	0x0801e2c0
 8004838:	0801e2c8 	.word	0x0801e2c8
 800483c:	0801e2d4 	.word	0x0801e2d4

08004840 <VibeCheckSensor_Update>:


void VibeCheckSensor_Update(VibeCheckSensor* sensor)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8004848:	f003 fae4 	bl	8007e14 <HAL_GetTick>
 800484c:	61b8      	str	r0, [r7, #24]
	if (time - sensor->time_prev_update > VC_SENSOR_UPDATE_INTERVAL_MS)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004860:	f240 8118 	bls.w	8004a94 <VibeCheckSensor_Update+0x254>

		/* if not connected -> test for connection -> if success, set connected flag, configure the sensor, and send message to host */
		/* if connected but not running -> test for connection -> if failure, reset connected flag, send message to host */
		/* if running either accelerometer or gyro -> check data received status flag and reset it -> if no data received, reset connected flag, send message to host */

		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004864:	2300      	movs	r3, #0
 8004866:	61fb      	str	r3, [r7, #28]
 8004868:	e0ac      	b.n	80049c4 <VibeCheckSensor_Update+0x184>
		{
			if (!sensor->status[i].is_connected)
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	4613      	mov	r3, r2
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4413      	add	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	440b      	add	r3, r1
 8004878:	33fc      	adds	r3, #252	@ 0xfc
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d134      	bne.n	80048ea <VibeCheckSensor_Update+0xaa>
			{
				if (LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	4613      	mov	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	1a9b      	subs	r3, r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	3350      	adds	r3, #80	@ 0x50
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	4413      	add	r3, r2
 8004890:	3304      	adds	r3, #4
 8004892:	4618      	mov	r0, r3
 8004894:	f7fc f93a 	bl	8000b0c <LSM6DS3_TestCommunication>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 808f 	beq.w	80049be <VibeCheckSensor_Update+0x17e>
				{
					sensor->status[i].is_connected = 1;
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	4613      	mov	r3, r2
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	4413      	add	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	440b      	add	r3, r1
 80048ae:	33fc      	adds	r3, #252	@ 0xfc
 80048b0:	2201      	movs	r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
					sensor->status[i].connection_change_flag = 1;
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	4613      	mov	r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4413      	add	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	440b      	add	r3, r1
 80048c2:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
					sensor->status[i].received_data_flag = 1;  /* give ourselves a grace period to receive data by artificially setting the flag */
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	4613      	mov	r3, r2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4413      	add	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	440b      	add	r3, r1
 80048d8:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80048dc:	2201      	movs	r2, #1
 80048de:	601a      	str	r2, [r3, #0]
					VibeCheckSensor_UpdateSensor(sensor, i);
 80048e0:	69f9      	ldr	r1, [r7, #28]
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fcae 	bl	8005244 <VibeCheckSensor_UpdateSensor>
 80048e8:	e069      	b.n	80049be <VibeCheckSensor_Update+0x17e>
				}
			}
			else
			{
				if (!sensor->status[i].accel_measuring && !sensor->status[i].gyro_measuring)
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	4613      	mov	r3, r2
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	4413      	add	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	440b      	add	r3, r1
 80048f8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d130      	bne.n	8004964 <VibeCheckSensor_Update+0x124>
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	4613      	mov	r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	4413      	add	r3, r2
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	440b      	add	r3, r1
 8004910:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d124      	bne.n	8004964 <VibeCheckSensor_Update+0x124>
				{
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	3350      	adds	r3, #80	@ 0x50
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	4413      	add	r3, r2
 800492a:	3304      	adds	r3, #4
 800492c:	4618      	mov	r0, r3
 800492e:	f7fc f8ed 	bl	8000b0c <LSM6DS3_TestCommunication>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d142      	bne.n	80049be <VibeCheckSensor_Update+0x17e>
					{
						sensor->status[i].is_connected = 0;
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	4613      	mov	r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	4413      	add	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	440b      	add	r3, r1
 8004946:	33fc      	adds	r3, #252	@ 0xfc
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	4613      	mov	r3, r2
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	4413      	add	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	440b      	add	r3, r1
 800495a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8004962:	e02c      	b.n	80049be <VibeCheckSensor_Update+0x17e>
					}
				}
				else
				{
					if (sensor->status[i].received_data_flag)
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	4613      	mov	r3, r2
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	4413      	add	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	440b      	add	r3, r1
 8004972:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00b      	beq.n	8004994 <VibeCheckSensor_Update+0x154>
					{
						sensor->status[i].received_data_flag = 0;
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	4613      	mov	r3, r2
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	4413      	add	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	440b      	add	r3, r1
 800498a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e014      	b.n	80049be <VibeCheckSensor_Update+0x17e>
					}
					else
					{
						sensor->status[i].is_connected = 0;
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	4613      	mov	r3, r2
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	4413      	add	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	440b      	add	r3, r1
 80049a2:	33fc      	adds	r3, #252	@ 0xfc
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	4613      	mov	r3, r2
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	4413      	add	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	440b      	add	r3, r1
 80049b6:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80049ba:	2201      	movs	r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	3301      	adds	r3, #1
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	f67f af4f 	bls.w	800486a <VibeCheckSensor_Update+0x2a>
				}
			}
		}

		/* make some random data (3 sine wave phases) for testing the host plotting/data logging */
		if (sensor->generate_fake_data)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d055      	beq.n	8004a86 <VibeCheckSensor_Update+0x246>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e4:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004a9c <VibeCheckSensor_Update+0x25c>
 80049e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049ec:	eeb0 0a67 	vmov.f32	s0, s15
 80049f0:	f018 fda6 	bl	801d540 <sinf>
 80049f4:	ed87 0a05 	vstr	s0, [r7, #20]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004a9c <VibeCheckSensor_Update+0x25c>
 8004a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a0a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8004aa0 <VibeCheckSensor_Update+0x260>
 8004a0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a12:	eeb0 0a67 	vmov.f32	s0, s15
 8004a16:	f018 fd93 	bl	801d540 <sinf>
 8004a1a:	ed87 0a04 	vstr	s0, [r7, #16]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	ee07 3a90 	vmov	s15, r3
 8004a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a28:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004a9c <VibeCheckSensor_Update+0x25c>
 8004a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a30:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004aa4 <VibeCheckSensor_Update+0x264>
 8004a34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a38:	eeb0 0a67 	vmov.f32	s0, s15
 8004a3c:	f018 fd80 	bl	801d540 <sinf>
 8004a40:	ed87 0a03 	vstr	s0, [r7, #12]

			VibeCheckSensor_AddData(sensor, 1, time, val1, val2, val3);
 8004a44:	ed97 1a03 	vldr	s2, [r7, #12]
 8004a48:	edd7 0a04 	vldr	s1, [r7, #16]
 8004a4c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	2101      	movs	r1, #1
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fc4a 	bl	80052ee <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 2, time, val3, val1, val2);
 8004a5a:	ed97 1a04 	vldr	s2, [r7, #16]
 8004a5e:	edd7 0a05 	vldr	s1, [r7, #20]
 8004a62:	ed97 0a03 	vldr	s0, [r7, #12]
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	2102      	movs	r1, #2
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fc3f 	bl	80052ee <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 3, time, val2, val3, val1);
 8004a70:	ed97 1a05 	vldr	s2, [r7, #20]
 8004a74:	edd7 0a03 	vldr	s1, [r7, #12]
 8004a78:	ed97 0a04 	vldr	s0, [r7, #16]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	2103      	movs	r1, #3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fc34 	bl	80052ee <VibeCheckSensor_AddData>
		}

		sensor->time_prev_update = time;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
	}
}
 8004a94:	bf00      	nop
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40c90fd0 	.word	0x40c90fd0
 8004aa0:	3f860a8b 	.word	0x3f860a8b
 8004aa4:	40060a8b 	.word	0x40060a8b

08004aa8 <VibeCheckSensor_StartAccel>:

void VibeCheckSensor_StartAccel(VibeCheckSensor* sensor, uint32_t channel)  /* start acceleration measurement of specified channel */
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <VibeCheckSensor_StartAccel+0x14>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].accel_measuring)
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	4413      	add	r3, r2
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	440b      	add	r3, r1
 8004aca:	33fc      	adds	r3, #252	@ 0xfc
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d017      	beq.n	8004b02 <VibeCheckSensor_StartAccel+0x5a>
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4413      	add	r3, r2
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	440b      	add	r3, r1
 8004ae0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10b      	bne.n	8004b02 <VibeCheckSensor_StartAccel+0x5a>
		LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	4613      	mov	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	1a9b      	subs	r3, r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	3350      	adds	r3, #80	@ 0x50
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	4413      	add	r3, r2
 8004afa:	3304      	adds	r3, #4
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fc f8c3 	bl	8000c88 <LSM6DS3_StartAccel>
	/*
	 * I choose to set the flag here immediately, even if the accelerometer is not currently connected. This way, it can be set
	 * to start sampling immediately once the accelerometer is plugged in.
	 */

	sensor->status[channel].accel_measuring = 1;
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	4613      	mov	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	440b      	add	r3, r1
 8004b10:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004b14:	2201      	movs	r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
	sensor->status[channel].measuring_change_flag = 1;
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	440b      	add	r3, r1
 8004b26:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <VibeCheckSensor_StopAccel>:

void VibeCheckSensor_StopAccel(VibeCheckSensor* sensor, uint32_t channel)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <VibeCheckSensor_StopAccel+0x14>
 8004b46:	2302      	movs	r3, #2
 8004b48:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].accel_measuring)
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	4413      	add	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	440b      	add	r3, r1
 8004b58:	33fc      	adds	r3, #252	@ 0xfc
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d017      	beq.n	8004b90 <VibeCheckSensor_StopAccel+0x5a>
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4413      	add	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	440b      	add	r3, r1
 8004b6e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <VibeCheckSensor_StopAccel+0x5a>
		LSM6DS3_StopAccel(&sensor->sensor_array[channel]);
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	3350      	adds	r3, #80	@ 0x50
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	4413      	add	r3, r2
 8004b88:	3304      	adds	r3, #4
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fc f9b6 	bl	8000efc <LSM6DS3_StopAccel>

	sensor->status[channel].accel_measuring = 0;
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	4413      	add	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	440b      	add	r3, r1
 8004b9e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
	sensor->status[channel].measuring_change_flag = 1;
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	4413      	add	r3, r2
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	440b      	add	r3, r1
 8004bb4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004bb8:	2201      	movs	r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <VibeCheckSensor_StartGyro>:

void VibeCheckSensor_StartGyro(VibeCheckSensor* sensor, uint32_t channel)  /* start gyroscope measurement of specified channel */
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <VibeCheckSensor_StartGyro+0x14>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].gyro_measuring)
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	4413      	add	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	440b      	add	r3, r1
 8004be6:	33fc      	adds	r3, #252	@ 0xfc
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d017      	beq.n	8004c1e <VibeCheckSensor_StartGyro+0x5a>
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	4413      	add	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	440b      	add	r3, r1
 8004bfc:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <VibeCheckSensor_StartGyro+0x5a>
		LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	3350      	adds	r3, #80	@ 0x50
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	3304      	adds	r3, #4
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fc f8d7 	bl	8000dcc <LSM6DS3_StartGyro>

	sensor->status[channel].gyro_measuring = 1;
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	4613      	mov	r3, r2
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	4413      	add	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	440b      	add	r3, r1
 8004c2c:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004c30:	2201      	movs	r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
	sensor->status[channel].measuring_change_flag = 1;
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4413      	add	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	440b      	add	r3, r1
 8004c42:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <VibeCheckSensor_StopGyro>:

void VibeCheckSensor_StopGyro(VibeCheckSensor* sensor, uint32_t channel)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <VibeCheckSensor_StopGyro+0x14>
 8004c62:	2302      	movs	r3, #2
 8004c64:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].gyro_measuring)
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	4413      	add	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	440b      	add	r3, r1
 8004c74:	33fc      	adds	r3, #252	@ 0xfc
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d017      	beq.n	8004cac <VibeCheckSensor_StopGyro+0x5a>
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	4413      	add	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	440b      	add	r3, r1
 8004c8a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00b      	beq.n	8004cac <VibeCheckSensor_StopGyro+0x5a>
		LSM6DS3_StopGyro(&sensor->sensor_array[channel]);
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	4613      	mov	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	3350      	adds	r3, #80	@ 0x50
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fc f936 	bl	8000f18 <LSM6DS3_StopGyro>

	sensor->status[channel].gyro_measuring = 0;
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	4413      	add	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	440b      	add	r3, r1
 8004cba:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
	sensor->status[channel].measuring_change_flag = 1;
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	4413      	add	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	440b      	add	r3, r1
 8004cd0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <VibeCheckSensor_SetAccelODR>:

void VibeCheckSensor_SetAccelODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <VibeCheckSensor_SetAccelODR+0x16>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].accel_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	210a      	movs	r1, #10
 8004cfa:	480a      	ldr	r0, [pc, #40]	@ (8004d24 <VibeCheckSensor_SetAccelODR+0x44>)
 8004cfc:	f7fe f968 	bl	8002fd0 <FindClosest>
 8004d00:	68f9      	ldr	r1, [r7, #12]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	4613      	mov	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	330c      	adds	r3, #12
 8004d10:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fa95 	bl	8005244 <VibeCheckSensor_UpdateSensor>
}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	0801ec60 	.word	0x0801ec60

08004d28 <VibeCheckSensor_SetGyroODR>:

void VibeCheckSensor_SetGyroODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <VibeCheckSensor_SetGyroODR+0x16>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].gyro_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	210a      	movs	r1, #10
 8004d42:	480a      	ldr	r0, [pc, #40]	@ (8004d6c <VibeCheckSensor_SetGyroODR+0x44>)
 8004d44:	f7fe f944 	bl	8002fd0 <FindClosest>
 8004d48:	68f9      	ldr	r1, [r7, #12]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	3314      	adds	r3, #20
 8004d58:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 fa71 	bl	8005244 <VibeCheckSensor_UpdateSensor>
}
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	0801ec60 	.word	0x0801ec60

08004d70 <VibeCheckSensor_SetAccelRange>:

void VibeCheckSensor_SetAccelRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <VibeCheckSensor_SetAccelRange+0x16>
 8004d82:	2302      	movs	r3, #2
 8004d84:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].g_range = FindClosest(VC_SENSOR_ALLOWED_G_RANGE, sizeof(VC_SENSOR_ALLOWED_G_RANGE) / sizeof(VC_SENSOR_ALLOWED_G_RANGE[0]), range);
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	2104      	movs	r1, #4
 8004d8a:	480a      	ldr	r0, [pc, #40]	@ (8004db4 <VibeCheckSensor_SetAccelRange+0x44>)
 8004d8c:	f7fe f920 	bl	8002fd0 <FindClosest>
 8004d90:	68f9      	ldr	r1, [r7, #12]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	4613      	mov	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	3310      	adds	r3, #16
 8004da0:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 fa4d 	bl	8005244 <VibeCheckSensor_UpdateSensor>
}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	0801ec88 	.word	0x0801ec88

08004db8 <VibeCheckSensor_SetGyroRange>:

void VibeCheckSensor_SetGyroRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <VibeCheckSensor_SetGyroRange+0x16>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].dps_range = FindClosest(VC_SENSOR_ALLOWED_DPS_RANGE, sizeof(VC_SENSOR_ALLOWED_DPS_RANGE) / sizeof(VC_SENSOR_ALLOWED_DPS_RANGE[0]), range);
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	2105      	movs	r1, #5
 8004dd2:	480a      	ldr	r0, [pc, #40]	@ (8004dfc <VibeCheckSensor_SetGyroRange+0x44>)
 8004dd4:	f7fe f8fc 	bl	8002fd0 <FindClosest>
 8004dd8:	68f9      	ldr	r1, [r7, #12]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	3318      	adds	r3, #24
 8004de8:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fa29 	bl	8005244 <VibeCheckSensor_UpdateSensor>
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	0801ec98 	.word	0x0801ec98

08004e00 <VibeCheckSensor_SetOffsets>:

void VibeCheckSensor_SetOffsets(VibeCheckSensor* sensor, uint32_t channel, float x, float y, float z)  /* accelerometer DC offsets in g */
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6178      	str	r0, [r7, #20]
 8004e08:	6139      	str	r1, [r7, #16]
 8004e0a:	ed87 0a03 	vstr	s0, [r7, #12]
 8004e0e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004e12:	ed87 1a01 	vstr	s2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <VibeCheckSensor_SetOffsets+0x20>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	613b      	str	r3, [r7, #16]

	/* TODO: test that setting the sensor user offset registers works */

	if (x > VC_SENSOR_MAX_OFFSET) x = VC_SENSOR_MAX_OFFSET;  /* clamp the offsets to the max value that can fit in the register */
 8004e20:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e24:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004ef0 <VibeCheckSensor_SetOffsets+0xf0>
 8004e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e30:	dd01      	ble.n	8004e36 <VibeCheckSensor_SetOffsets+0x36>
 8004e32:	4b30      	ldr	r3, [pc, #192]	@ (8004ef4 <VibeCheckSensor_SetOffsets+0xf4>)
 8004e34:	60fb      	str	r3, [r7, #12]
	if (x < -VC_SENSOR_MAX_OFFSET) x = -VC_SENSOR_MAX_OFFSET;
 8004e36:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e3a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8004ef8 <VibeCheckSensor_SetOffsets+0xf8>
 8004e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e46:	d501      	bpl.n	8004e4c <VibeCheckSensor_SetOffsets+0x4c>
 8004e48:	4b2c      	ldr	r3, [pc, #176]	@ (8004efc <VibeCheckSensor_SetOffsets+0xfc>)
 8004e4a:	60fb      	str	r3, [r7, #12]
	if (y > VC_SENSOR_MAX_OFFSET) y = VC_SENSOR_MAX_OFFSET;
 8004e4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e50:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8004ef0 <VibeCheckSensor_SetOffsets+0xf0>
 8004e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5c:	dd01      	ble.n	8004e62 <VibeCheckSensor_SetOffsets+0x62>
 8004e5e:	4b25      	ldr	r3, [pc, #148]	@ (8004ef4 <VibeCheckSensor_SetOffsets+0xf4>)
 8004e60:	60bb      	str	r3, [r7, #8]
	if (y < -VC_SENSOR_MAX_OFFSET) y = -VC_SENSOR_MAX_OFFSET;
 8004e62:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e66:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004ef8 <VibeCheckSensor_SetOffsets+0xf8>
 8004e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e72:	d501      	bpl.n	8004e78 <VibeCheckSensor_SetOffsets+0x78>
 8004e74:	4b21      	ldr	r3, [pc, #132]	@ (8004efc <VibeCheckSensor_SetOffsets+0xfc>)
 8004e76:	60bb      	str	r3, [r7, #8]
	if (z > VC_SENSOR_MAX_OFFSET) z = VC_SENSOR_MAX_OFFSET;
 8004e78:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e7c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004ef0 <VibeCheckSensor_SetOffsets+0xf0>
 8004e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e88:	dd01      	ble.n	8004e8e <VibeCheckSensor_SetOffsets+0x8e>
 8004e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef4 <VibeCheckSensor_SetOffsets+0xf4>)
 8004e8c:	607b      	str	r3, [r7, #4]
	if (z < -VC_SENSOR_MAX_OFFSET) z = -VC_SENSOR_MAX_OFFSET;
 8004e8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e92:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004ef8 <VibeCheckSensor_SetOffsets+0xf8>
 8004e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9e:	d501      	bpl.n	8004ea4 <VibeCheckSensor_SetOffsets+0xa4>
 8004ea0:	4b16      	ldr	r3, [pc, #88]	@ (8004efc <VibeCheckSensor_SetOffsets+0xfc>)
 8004ea2:	607b      	str	r3, [r7, #4]

	sensor->sensor_config[channel].usr_offset_x = x;
 8004ea4:	6979      	ldr	r1, [r7, #20]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_y = y;
 8004eb6:	6979      	ldr	r1, [r7, #20]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	1a9b      	subs	r3, r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_z = z;
 8004eca:	6979      	ldr	r1, [r7, #20]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3308      	adds	r3, #8
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	601a      	str	r2, [r3, #0]

	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004ede:	6939      	ldr	r1, [r7, #16]
 8004ee0:	6978      	ldr	r0, [r7, #20]
 8004ee2:	f000 f9af 	bl	8005244 <VibeCheckSensor_UpdateSensor>
}
 8004ee6:	bf00      	nop
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	3dfe0000 	.word	0x3dfe0000
 8004ef4:	3dfe0000 	.word	0x3dfe0000
 8004ef8:	bdfe0000 	.word	0xbdfe0000
 8004efc:	bdfe0000 	.word	0xbdfe0000

08004f00 <VibeCheckSensor_GetAccelODR>:

uint32_t VibeCheckSensor_GetAccelODR(VibeCheckSensor* sensor, uint32_t channel)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <VibeCheckSensor_GetAccelODR+0x14>
 8004f10:	2302      	movs	r3, #2
 8004f12:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].accel_odr_hz;
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	330c      	adds	r3, #12
 8004f24:	681b      	ldr	r3, [r3, #0]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <VibeCheckSensor_GetGyroODR>:

uint32_t VibeCheckSensor_GetGyroODR(VibeCheckSensor* sensor, uint32_t channel)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <VibeCheckSensor_GetGyroODR+0x14>
 8004f42:	2302      	movs	r3, #2
 8004f44:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].gyro_odr_hz;
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	3314      	adds	r3, #20
 8004f56:	681b      	ldr	r3, [r3, #0]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <VibeCheckSensor_GetAccelRange>:

uint32_t VibeCheckSensor_GetAccelRange(VibeCheckSensor* sensor, uint32_t channel)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <VibeCheckSensor_GetAccelRange+0x14>
 8004f74:	2302      	movs	r3, #2
 8004f76:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].g_range;
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	3310      	adds	r3, #16
 8004f88:	681b      	ldr	r3, [r3, #0]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <VibeCheckSensor_GetGyroRange>:

uint32_t VibeCheckSensor_GetGyroRange(VibeCheckSensor* sensor, uint32_t channel)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <VibeCheckSensor_GetGyroRange+0x14>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].dps_range;
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	1a9b      	subs	r3, r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3318      	adds	r3, #24
 8004fba:	681b      	ldr	r3, [r3, #0]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <VibeCheckSensor_GetOffsets>:

void VibeCheckSensor_GetOffsets(VibeCheckSensor* sensor, uint32_t channel, float* x, float* y, float* z)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <VibeCheckSensor_GetOffsets+0x18>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	60bb      	str	r3, [r7, #8]
	*x = sensor->sensor_config[channel].usr_offset_x;
 8004fe0:	68f9      	ldr	r1, [r7, #12]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	601a      	str	r2, [r3, #0]
	*y = sensor->sensor_config[channel].usr_offset_y;
 8004ff4:	68f9      	ldr	r1, [r7, #12]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	3304      	adds	r3, #4
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	601a      	str	r2, [r3, #0]
	*z = sensor->sensor_config[channel].usr_offset_z;
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	3308      	adds	r3, #8
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	601a      	str	r2, [r3, #0]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <VibeCheckSensor_StartFakeData>:


void VibeCheckSensor_StartFakeData(VibeCheckSensor* sensor)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 1;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800503a:	461a      	mov	r2, r3
 800503c:	2301      	movs	r3, #1
 800503e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <VibeCheckSensor_StopFakeData>:


void VibeCheckSensor_StopFakeData(VibeCheckSensor* sensor)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 0;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800505c:	461a      	mov	r2, r3
 800505e:	2300      	movs	r3, #0
 8005060:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <VibeCheckSensor_SetPacketSize>:


void VibeCheckSensor_SetPacketSize(VibeCheckSensor* sensor, uint32_t size)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
	if (size < 1) size = 1;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <VibeCheckSensor_SetPacketSize+0x14>
 8005080:	2301      	movs	r3, #1
 8005082:	603b      	str	r3, [r7, #0]
	if (size > VC_SENSOR_MAX_PACKET_SIZE) size = VC_SENSOR_MAX_PACKET_SIZE;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b64      	cmp	r3, #100	@ 0x64
 8005088:	d901      	bls.n	800508e <VibeCheckSensor_SetPacketSize+0x1e>
 800508a:	2364      	movs	r3, #100	@ 0x64
 800508c:	603b      	str	r3, [r7, #0]

	/* reset the state of the data buffer */
	sensor->data_packet_size = size;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005094:	461a      	mov	r2, r3
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
	sensor->data_ready = 0;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050a2:	461a      	mov	r2, r3
 80050a4:	2300      	movs	r3, #0
 80050a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
	sensor->data_ind = 0;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050b0:	461a      	mov	r2, r3
 80050b2:	2300      	movs	r3, #0
 80050b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <VibeCheckSensor_GetPacketSize>:


uint32_t VibeCheckSensor_GetPacketSize(VibeCheckSensor* sensor)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
	return sensor->data_packet_size;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <VibeCheckSensor_IsConnected>:
	sensor->start_time = *sensor->time_micros;
}


uint32_t VibeCheckSensor_IsConnected(VibeCheckSensor* sensor, uint32_t channel)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <VibeCheckSensor_IsConnected+0x14>
 80050f2:	2302      	movs	r3, #2
 80050f4:	603b      	str	r3, [r7, #0]
	return sensor->status[channel].is_connected;
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	4613      	mov	r3, r2
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	4413      	add	r3, r2
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	440b      	add	r3, r1
 8005104:	33fc      	adds	r3, #252	@ 0xfc
 8005106:	681b      	ldr	r3, [r3, #0]
}
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <VibeCheckSensor_ConnectionChanged>:


uint32_t VibeCheckSensor_ConnectionChanged(VibeCheckSensor* sensor, uint32_t* channel, uint32_t* is_connected)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	e01e      	b.n	8005164 <VibeCheckSensor_ConnectionChanged+0x50>
	{
		if (sensor->status[i].connection_change_flag)
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	440b      	add	r3, r1
 8005134:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00f      	beq.n	800515e <VibeCheckSensor_ConnectionChanged+0x4a>
		{
			*channel = i;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	601a      	str	r2, [r3, #0]
			*is_connected = sensor->status[i].is_connected;
 8005144:	68f9      	ldr	r1, [r7, #12]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4613      	mov	r3, r2
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	4413      	add	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	440b      	add	r3, r1
 8005152:	33fc      	adds	r3, #252	@ 0xfc
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
			return 1;
 800515a:	2301      	movs	r3, #1
 800515c:	e006      	b.n	800516c <VibeCheckSensor_ConnectionChanged+0x58>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	3301      	adds	r3, #1
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d9dd      	bls.n	8005126 <VibeCheckSensor_ConnectionChanged+0x12>
		}
	}

	return 0;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <VibeCheckSensor_MeasuringChanged>:


uint32_t VibeCheckSensor_MeasuringChanged(VibeCheckSensor* sensor, uint32_t* channel, uint32_t* accel_measuring, uint32_t* gyro_measuring)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	e036      	b.n	80051fa <VibeCheckSensor_MeasuringChanged+0x82>
	{
		if (sensor->status[i].measuring_change_flag)
 800518c:	68f9      	ldr	r1, [r7, #12]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4613      	mov	r3, r2
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	4413      	add	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	440b      	add	r3, r1
 800519a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d027      	beq.n	80051f4 <VibeCheckSensor_MeasuringChanged+0x7c>
		{
			sensor->status[i].measuring_change_flag = 0;
 80051a4:	68f9      	ldr	r1, [r7, #12]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4613      	mov	r3, r2
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	4413      	add	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	440b      	add	r3, r1
 80051b2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]
			*channel = i;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	601a      	str	r2, [r3, #0]
			*accel_measuring = sensor->status[i].accel_measuring;
 80051c0:	68f9      	ldr	r1, [r7, #12]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4613      	mov	r3, r2
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	4413      	add	r3, r2
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	440b      	add	r3, r1
 80051ce:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	601a      	str	r2, [r3, #0]
			*gyro_measuring = sensor->status[i].gyro_measuring;
 80051d8:	68f9      	ldr	r1, [r7, #12]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4613      	mov	r3, r2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4413      	add	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	440b      	add	r3, r1
 80051e6:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	601a      	str	r2, [r3, #0]
			return 1;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e006      	b.n	8005202 <VibeCheckSensor_MeasuringChanged+0x8a>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3301      	adds	r3, #1
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d9c5      	bls.n	800518c <VibeCheckSensor_MeasuringChanged+0x14>
		}
	}

	return 0;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <VibeCheckSensor_ResetConnectionFlag>:


void VibeCheckSensor_ResetConnectionFlag(VibeCheckSensor* sensor, uint32_t channel)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <VibeCheckSensor_ResetConnectionFlag+0x14>
 800521e:	2302      	movs	r3, #2
 8005220:	603b      	str	r3, [r7, #0]
	sensor->status[channel].connection_change_flag = 0;
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	4613      	mov	r3, r2
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4413      	add	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	440b      	add	r3, r1
 8005230:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <VibeCheckSensor_UpdateSensor>:


void VibeCheckSensor_UpdateSensor(VibeCheckSensor* sensor, uint32_t channel)  /* send the new configuration parameters to a sensor chip */
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <VibeCheckSensor_UpdateSensor+0x14>
 8005254:	2302      	movs	r3, #2
 8005256:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected)
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	4613      	mov	r3, r2
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	4413      	add	r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	440b      	add	r3, r1
 8005266:	33fc      	adds	r3, #252	@ 0xfc
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d03b      	beq.n	80052e6 <VibeCheckSensor_UpdateSensor+0xa2>
	{
		LSM6DS3_Configure(&sensor->sensor_array[channel]);
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	4613      	mov	r3, r2
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	3350      	adds	r3, #80	@ 0x50
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	4413      	add	r3, r2
 800527e:	3304      	adds	r3, #4
 8005280:	4618      	mov	r0, r3
 8005282:	f7fb fc5d 	bl	8000b40 <LSM6DS3_Configure>
		if (sensor->status[channel].accel_measuring)
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	4613      	mov	r3, r2
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	4413      	add	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	440b      	add	r3, r1
 8005294:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00b      	beq.n	80052b6 <VibeCheckSensor_UpdateSensor+0x72>
			LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	3350      	adds	r3, #80	@ 0x50
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	4413      	add	r3, r2
 80052ae:	3304      	adds	r3, #4
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fb fce9 	bl	8000c88 <LSM6DS3_StartAccel>
		if (sensor->status[channel].gyro_measuring)
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	4613      	mov	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	4413      	add	r3, r2
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	440b      	add	r3, r1
 80052c4:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00b      	beq.n	80052e6 <VibeCheckSensor_UpdateSensor+0xa2>
			LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	4613      	mov	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	3350      	adds	r3, #80	@ 0x50
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	3304      	adds	r3, #4
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fb fd73 	bl	8000dcc <LSM6DS3_StartGyro>
	}
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <VibeCheckSensor_AddData>:


void VibeCheckSensor_AddData(VibeCheckSensor* sensor, uint8_t id, uint32_t time, float x, float y, float z)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b087      	sub	sp, #28
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6178      	str	r0, [r7, #20]
 80052f6:	460b      	mov	r3, r1
 80052f8:	60fa      	str	r2, [r7, #12]
 80052fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80052fe:	edc7 0a01 	vstr	s1, [r7, #4]
 8005302:	ed87 1a00 	vstr	s2, [r7]
 8005306:	74fb      	strb	r3, [r7, #19]
	sensor->data[sensor->data_ind].id = id;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800530e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8005312:	6979      	ldr	r1, [r7, #20]
 8005314:	4613      	mov	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8005322:	7cfa      	ldrb	r2, [r7, #19]
 8005324:	701a      	strb	r2, [r3, #0]
	sensor->data[sensor->data_ind].time = time;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800532c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8005330:	6979      	ldr	r1, [r7, #20]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].x = x;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800534a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800534e:	6979      	ldr	r1, [r7, #20]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].y = y;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005368:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800536c:	6979      	ldr	r1, [r7, #20]
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].z = z;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005386:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800538a:	6979      	ldr	r1, [r7, #20]
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	601a      	str	r2, [r3, #0]

	sensor->data_ind++;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053a8:	3301      	adds	r3, #1
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80053b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
	if (sensor->data_ind == sensor->data_packet_size)
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ba:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d107      	bne.n	80053dc <VibeCheckSensor_AddData+0xee>
	{
		sensor->data_ready = 1;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053d2:	461a      	mov	r2, r3
 80053d4:	2301      	movs	r3, #1
 80053d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
	else if (sensor->data_ind == 2 * sensor->data_packet_size)
	{
		sensor->data_ind = 0;
		sensor->data_ready = 1;
	}
}
 80053da:	e01a      	b.n	8005412 <VibeCheckSensor_AddData+0x124>
	else if (sensor->data_ind == 2 * sensor->data_packet_size)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053e2:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d10d      	bne.n	8005412 <VibeCheckSensor_AddData+0x124>
		sensor->data_ind = 0;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053fc:	461a      	mov	r2, r3
 80053fe:	2300      	movs	r3, #0
 8005400:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
		sensor->data_ready = 1;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800540a:	461a      	mov	r2, r3
 800540c:	2301      	movs	r3, #1
 800540e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <VibeCheckSensor_GetDataReady>:


uint32_t VibeCheckSensor_GetDataReady(VibeCheckSensor* sensor, volatile VibeCheckSensor_Data** data)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
	if (sensor->data_ready)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800542e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d02a      	beq.n	800548c <VibeCheckSensor_GetDataReady+0x6e>
	{
		sensor->data_ready = 0;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800543c:	461a      	mov	r2, r3
 800543e:	2300      	movs	r3, #0
 8005440:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
		if (sensor->data_ind < sensor->data_packet_size)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800544a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005454:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005458:	429a      	cmp	r2, r3
 800545a:	d210      	bcs.n	800547e <VibeCheckSensor_GetDataReady+0x60>
		{
			/* ready to send the second half */
			*data = &sensor->data[sensor->data_packet_size];
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005462:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	4413      	add	r3, r2
 8005476:	1d1a      	adds	r2, r3, #4
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	e004      	b.n	8005488 <VibeCheckSensor_GetDataReady+0x6a>
		}
		else
		{
			/* ready to send the first half */
			*data = &sensor->data[0];
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	601a      	str	r2, [r3, #0]
		}
		return 1;
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <VibeCheckSensor_GetDataReady+0x70>
	}
	return 0;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <VibeCheckSensor_EXTICallback>:


void VibeCheckSensor_EXTICallback(VibeCheckSensor* sensor, uint16_t GPIO_Pin)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b08a      	sub	sp, #40	@ 0x28
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	460b      	mov	r3, r1
 80054a4:	807b      	strh	r3, [r7, #2]
	/*
	 * Read the sensor data when a signal occurs on a data ready pin. We assume that the INT1 pin indicates acceleration
	 * data ready and that the INT2 pin indicates gyroscope data ready.
	 */

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80054a6:	2300      	movs	r3, #0
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054aa:	e0ae      	b.n	800560a <VibeCheckSensor_EXTICallback+0x170>
	{
		if (GPIO_Pin == sensor->sensor_array[i].int1_pin && sensor->status[i].accel_measuring)
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b0:	4613      	mov	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	440b      	add	r3, r1
 80054ba:	3364      	adds	r3, #100	@ 0x64
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	887a      	ldrh	r2, [r7, #2]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d148      	bne.n	8005556 <VibeCheckSensor_EXTICallback+0xbc>
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c8:	4613      	mov	r3, r2
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	4413      	add	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	440b      	add	r3, r1
 80054d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d03c      	beq.n	8005556 <VibeCheckSensor_EXTICallback+0xbc>
		{
			float x, y, z;
			LSM6DS3_ReadAccel(&sensor->sensor_array[i], &x, &y, &z);
 80054dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054de:	4613      	mov	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	1a9b      	subs	r3, r3, r2
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	3350      	adds	r3, #80	@ 0x50
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	4413      	add	r3, r2
 80054ec:	1d18      	adds	r0, r3, #4
 80054ee:	f107 0318 	add.w	r3, r7, #24
 80054f2:	f107 021c 	add.w	r2, r7, #28
 80054f6:	f107 0120 	add.w	r1, r7, #32
 80054fa:	f7fb fd1b 	bl	8000f34 <LSM6DS3_ReadAccel>
			VibeCheckSensor_AddData(sensor, 2 * i, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	b2db      	uxtb	r3, r3
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	b2d9      	uxtb	r1, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800550c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005518:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005522:	ed97 7a07 	vldr	s14, [r7, #28]
 8005526:	edd7 6a06 	vldr	s13, [r7, #24]
 800552a:	eeb0 1a66 	vmov.f32	s2, s13
 800552e:	eef0 0a47 	vmov.f32	s1, s14
 8005532:	eeb0 0a67 	vmov.f32	s0, s15
 8005536:	461a      	mov	r2, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff fed8 	bl	80052ee <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005542:	4613      	mov	r3, r2
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	4413      	add	r3, r2
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	440b      	add	r3, r1
 800554c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8005550:	2201      	movs	r2, #1
 8005552:	601a      	str	r2, [r3, #0]
			break;
 8005554:	e05e      	b.n	8005614 <VibeCheckSensor_EXTICallback+0x17a>
		}

		if (GPIO_Pin == sensor->sensor_array[i].int2_pin && sensor->status[i].gyro_measuring)
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555a:	4613      	mov	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	440b      	add	r3, r1
 8005564:	336c      	adds	r3, #108	@ 0x6c
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	887a      	ldrh	r2, [r7, #2]
 800556a:	429a      	cmp	r2, r3
 800556c:	d14a      	bne.n	8005604 <VibeCheckSensor_EXTICallback+0x16a>
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005572:	4613      	mov	r3, r2
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	4413      	add	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	440b      	add	r3, r1
 800557c:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d03e      	beq.n	8005604 <VibeCheckSensor_EXTICallback+0x16a>
		{
			float x, y, z;
			LSM6DS3_ReadGyro(&sensor->sensor_array[i], &x, &y, &z);
 8005586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	3350      	adds	r3, #80	@ 0x50
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	4413      	add	r3, r2
 8005596:	1d18      	adds	r0, r3, #4
 8005598:	f107 030c 	add.w	r3, r7, #12
 800559c:	f107 0210 	add.w	r2, r7, #16
 80055a0:	f107 0114 	add.w	r1, r7, #20
 80055a4:	f7fb fd54 	bl	8001050 <LSM6DS3_ReadGyro>
			VibeCheckSensor_AddData(sensor, 2 * i + 1, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 80055a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	3301      	adds	r3, #1
 80055b2:	b2d9      	uxtb	r1, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055ba:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055c6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80055d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80055d4:	edd7 6a03 	vldr	s13, [r7, #12]
 80055d8:	eeb0 1a66 	vmov.f32	s2, s13
 80055dc:	eef0 0a47 	vmov.f32	s1, s14
 80055e0:	eeb0 0a67 	vmov.f32	s0, s15
 80055e4:	461a      	mov	r2, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff fe81 	bl	80052ee <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f0:	4613      	mov	r3, r2
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	4413      	add	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	440b      	add	r3, r1
 80055fa:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]
			break;
 8005602:	e007      	b.n	8005614 <VibeCheckSensor_EXTICallback+0x17a>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	3301      	adds	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	2b02      	cmp	r3, #2
 800560e:	f67f af4d 	bls.w	80054ac <VibeCheckSensor_EXTICallback+0x12>
		}
	}
}
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	3728      	adds	r7, #40	@ 0x28
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <VibeCheckSensorCMD_Set>:

#include "vibecheck_sensor_handler.h"


static uint32_t VibeCheckSensorCMD_Set(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b09c      	sub	sp, #112	@ 0x70
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005628:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800562c:	2240      	movs	r2, #64	@ 0x40
 800562e:	4619      	mov	r1, r3
 8005630:	68b8      	ldr	r0, [r7, #8]
 8005632:	f000 ff1d 	bl	8006470 <VibeCheckShell_GetNextString>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80eb 	beq.w	8005814 <VibeCheckSensorCMD_Set+0x1f8>
	{
		if (!strcmp(str, "accel"))
 800563e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005642:	4977      	ldr	r1, [pc, #476]	@ (8005820 <VibeCheckSensorCMD_Set+0x204>)
 8005644:	4618      	mov	r0, r3
 8005646:	f7fa fe63 	bl	8000310 <strcmp>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d14f      	bne.n	80056f0 <VibeCheckSensorCMD_Set+0xd4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005650:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005654:	2240      	movs	r2, #64	@ 0x40
 8005656:	4619      	mov	r1, r3
 8005658:	68b8      	ldr	r0, [r7, #8]
 800565a:	f000 ff09 	bl	8006470 <VibeCheckShell_GetNextString>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80d7 	beq.w	8005814 <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 8005666:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800566a:	496e      	ldr	r1, [pc, #440]	@ (8005824 <VibeCheckSensorCMD_Set+0x208>)
 800566c:	4618      	mov	r0, r3
 800566e:	f7fa fe4f 	bl	8000310 <strcmp>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d118      	bne.n	80056aa <VibeCheckSensorCMD_Set+0x8e>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 8005678:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800567c:	4619      	mov	r1, r3
 800567e:	68b8      	ldr	r0, [r7, #8]
 8005680:	f000 ff6e 	bl	8006560 <VibeCheckShell_GetNextInt>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 80c4 	beq.w	8005814 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelODR(sensor, channel, odr);
 800568c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568e:	461a      	mov	r2, r3
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff fb24 	bl	8004ce0 <VibeCheckSensor_SetAccelODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 8005698:	4963      	ldr	r1, [pc, #396]	@ (8005828 <VibeCheckSensorCMD_Set+0x20c>)
 800569a:	68b8      	ldr	r0, [r7, #8]
 800569c:	f001 f808 	bl	80066b0 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 80056a0:	68b8      	ldr	r0, [r7, #8]
 80056a2:	f001 f885 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e0b5      	b.n	8005816 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 80056aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80056ae:	495f      	ldr	r1, [pc, #380]	@ (800582c <VibeCheckSensorCMD_Set+0x210>)
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fa fe2d 	bl	8000310 <strcmp>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f040 80ab 	bne.w	8005814 <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 80056be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80056c2:	4619      	mov	r1, r3
 80056c4:	68b8      	ldr	r0, [r7, #8]
 80056c6:	f000 ff4b 	bl	8006560 <VibeCheckShell_GetNextInt>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 80a1 	beq.w	8005814 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelRange(sensor, channel, range);
 80056d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d4:	461a      	mov	r2, r3
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f7ff fb49 	bl	8004d70 <VibeCheckSensor_SetAccelRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 80056de:	4952      	ldr	r1, [pc, #328]	@ (8005828 <VibeCheckSensorCMD_Set+0x20c>)
 80056e0:	68b8      	ldr	r0, [r7, #8]
 80056e2:	f000 ffe5 	bl	80066b0 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 80056e6:	68b8      	ldr	r0, [r7, #8]
 80056e8:	f001 f862 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e092      	b.n	8005816 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 80056f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80056f4:	494e      	ldr	r1, [pc, #312]	@ (8005830 <VibeCheckSensorCMD_Set+0x214>)
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fa fe0a 	bl	8000310 <strcmp>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d14b      	bne.n	800579a <VibeCheckSensorCMD_Set+0x17e>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005702:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005706:	2240      	movs	r2, #64	@ 0x40
 8005708:	4619      	mov	r1, r3
 800570a:	68b8      	ldr	r0, [r7, #8]
 800570c:	f000 feb0 	bl	8006470 <VibeCheckShell_GetNextString>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d07e      	beq.n	8005814 <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 8005716:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800571a:	4942      	ldr	r1, [pc, #264]	@ (8005824 <VibeCheckSensorCMD_Set+0x208>)
 800571c:	4618      	mov	r0, r3
 800571e:	f7fa fdf7 	bl	8000310 <strcmp>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d117      	bne.n	8005758 <VibeCheckSensorCMD_Set+0x13c>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 8005728:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800572c:	4619      	mov	r1, r3
 800572e:	68b8      	ldr	r0, [r7, #8]
 8005730:	f000 ff16 	bl	8006560 <VibeCheckShell_GetNextInt>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d06c      	beq.n	8005814 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroODR(sensor, channel, odr);
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	461a      	mov	r2, r3
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7ff faf1 	bl	8004d28 <VibeCheckSensor_SetGyroODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 8005746:	4938      	ldr	r1, [pc, #224]	@ (8005828 <VibeCheckSensorCMD_Set+0x20c>)
 8005748:	68b8      	ldr	r0, [r7, #8]
 800574a:	f000 ffb1 	bl	80066b0 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 800574e:	68b8      	ldr	r0, [r7, #8]
 8005750:	f001 f82e 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8005754:	2301      	movs	r3, #1
 8005756:	e05e      	b.n	8005816 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 8005758:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800575c:	4933      	ldr	r1, [pc, #204]	@ (800582c <VibeCheckSensorCMD_Set+0x210>)
 800575e:	4618      	mov	r0, r3
 8005760:	f7fa fdd6 	bl	8000310 <strcmp>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d154      	bne.n	8005814 <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 800576a:	f107 0320 	add.w	r3, r7, #32
 800576e:	4619      	mov	r1, r3
 8005770:	68b8      	ldr	r0, [r7, #8]
 8005772:	f000 fef5 	bl	8006560 <VibeCheckShell_GetNextInt>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d04b      	beq.n	8005814 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroRange(sensor, channel, range);
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	461a      	mov	r2, r3
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff fb18 	bl	8004db8 <VibeCheckSensor_SetGyroRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8005788:	4927      	ldr	r1, [pc, #156]	@ (8005828 <VibeCheckSensorCMD_Set+0x20c>)
 800578a:	68b8      	ldr	r0, [r7, #8]
 800578c:	f000 ff90 	bl	80066b0 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8005790:	68b8      	ldr	r0, [r7, #8]
 8005792:	f001 f80d 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8005796:	2301      	movs	r3, #1
 8005798:	e03d      	b.n	8005816 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 800579a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800579e:	4925      	ldr	r1, [pc, #148]	@ (8005834 <VibeCheckSensorCMD_Set+0x218>)
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fa fdb5 	bl	8000310 <strcmp>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d133      	bne.n	8005814 <VibeCheckSensorCMD_Set+0x1f8>
		{
			float x, y, z;
			if (VibeCheckShell_GetNextFloat(shell, &x)
 80057ac:	f107 031c 	add.w	r3, r7, #28
 80057b0:	4619      	mov	r1, r3
 80057b2:	68b8      	ldr	r0, [r7, #8]
 80057b4:	f000 fef0 	bl	8006598 <VibeCheckShell_GetNextFloat>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d02a      	beq.n	8005814 <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &y)
 80057be:	f107 0318 	add.w	r3, r7, #24
 80057c2:	4619      	mov	r1, r3
 80057c4:	68b8      	ldr	r0, [r7, #8]
 80057c6:	f000 fee7 	bl	8006598 <VibeCheckShell_GetNextFloat>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d021      	beq.n	8005814 <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &z))
 80057d0:	f107 0314 	add.w	r3, r7, #20
 80057d4:	4619      	mov	r1, r3
 80057d6:	68b8      	ldr	r0, [r7, #8]
 80057d8:	f000 fede 	bl	8006598 <VibeCheckShell_GetNextFloat>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d018      	beq.n	8005814 <VibeCheckSensorCMD_Set+0x1f8>
			{
				VibeCheckSensor_SetOffsets(sensor, channel, x, y, z);
 80057e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80057e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80057ea:	edd7 6a05 	vldr	s13, [r7, #20]
 80057ee:	eeb0 1a66 	vmov.f32	s2, s13
 80057f2:	eef0 0a47 	vmov.f32	s1, s14
 80057f6:	eeb0 0a67 	vmov.f32	s0, s15
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7ff faff 	bl	8004e00 <VibeCheckSensor_SetOffsets>
				VibeCheckShell_PutOutputString(shell, "ack");
 8005802:	4909      	ldr	r1, [pc, #36]	@ (8005828 <VibeCheckSensorCMD_Set+0x20c>)
 8005804:	68b8      	ldr	r0, [r7, #8]
 8005806:	f000 ff53 	bl	80066b0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 800580a:	68b8      	ldr	r0, [r7, #8]
 800580c:	f000 ffd0 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <VibeCheckSensorCMD_Set+0x1fa>
			}
		}
	}


	return 0;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3770      	adds	r7, #112	@ 0x70
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	0801e2dc 	.word	0x0801e2dc
 8005824:	0801e2e4 	.word	0x0801e2e4
 8005828:	0801e2e8 	.word	0x0801e2e8
 800582c:	0801e2ec 	.word	0x0801e2ec
 8005830:	0801e2f4 	.word	0x0801e2f4
 8005834:	0801e2fc 	.word	0x0801e2fc

08005838 <VibeCheckSensorCMD_Get>:


static uint32_t VibeCheckSensorCMD_Get(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b09a      	sub	sp, #104	@ 0x68
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005844:	f107 0320 	add.w	r3, r7, #32
 8005848:	2240      	movs	r2, #64	@ 0x40
 800584a:	4619      	mov	r1, r3
 800584c:	68b8      	ldr	r0, [r7, #8]
 800584e:	f000 fe0f 	bl	8006470 <VibeCheckShell_GetNextString>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80fb 	beq.w	8005a50 <VibeCheckSensorCMD_Get+0x218>
	{
		if (!strcmp(str, "accel"))
 800585a:	f107 0320 	add.w	r3, r7, #32
 800585e:	497f      	ldr	r1, [pc, #508]	@ (8005a5c <VibeCheckSensorCMD_Get+0x224>)
 8005860:	4618      	mov	r0, r3
 8005862:	f7fa fd55 	bl	8000310 <strcmp>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d147      	bne.n	80058fc <VibeCheckSensorCMD_Get+0xc4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800586c:	f107 0320 	add.w	r3, r7, #32
 8005870:	2240      	movs	r2, #64	@ 0x40
 8005872:	4619      	mov	r1, r3
 8005874:	68b8      	ldr	r0, [r7, #8]
 8005876:	f000 fdfb 	bl	8006470 <VibeCheckShell_GetNextString>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 80e7 	beq.w	8005a50 <VibeCheckSensorCMD_Get+0x218>
			{
				if (!strcmp(str, "odr"))
 8005882:	f107 0320 	add.w	r3, r7, #32
 8005886:	4976      	ldr	r1, [pc, #472]	@ (8005a60 <VibeCheckSensorCMD_Get+0x228>)
 8005888:	4618      	mov	r0, r3
 800588a:	f7fa fd41 	bl	8000310 <strcmp>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d114      	bne.n	80058be <VibeCheckSensorCMD_Get+0x86>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8005894:	4973      	ldr	r1, [pc, #460]	@ (8005a64 <VibeCheckSensorCMD_Get+0x22c>)
 8005896:	68b8      	ldr	r0, [r7, #8]
 8005898:	f000 ff0a 	bl	80066b0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 800589c:	68b8      	ldr	r0, [r7, #8]
 800589e:	f000 ff79 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelODR(sensor, channel));
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f7ff fb2b 	bl	8004f00 <VibeCheckSensor_GetAccelODR>
 80058aa:	4603      	mov	r3, r0
 80058ac:	4619      	mov	r1, r3
 80058ae:	68b8      	ldr	r0, [r7, #8]
 80058b0:	f000 ff3a 	bl	8006728 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 80058b4:	68b8      	ldr	r0, [r7, #8]
 80058b6:	f000 ff7b 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e0c9      	b.n	8005a52 <VibeCheckSensorCMD_Get+0x21a>
				}
				else if (!strcmp(str, "range"))
 80058be:	f107 0320 	add.w	r3, r7, #32
 80058c2:	4969      	ldr	r1, [pc, #420]	@ (8005a68 <VibeCheckSensorCMD_Get+0x230>)
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fa fd23 	bl	8000310 <strcmp>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f040 80bf 	bne.w	8005a50 <VibeCheckSensorCMD_Get+0x218>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 80058d2:	4964      	ldr	r1, [pc, #400]	@ (8005a64 <VibeCheckSensorCMD_Get+0x22c>)
 80058d4:	68b8      	ldr	r0, [r7, #8]
 80058d6:	f000 feeb 	bl	80066b0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 80058da:	68b8      	ldr	r0, [r7, #8]
 80058dc:	f000 ff5a 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelRange(sensor, channel));
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7ff fb3e 	bl	8004f64 <VibeCheckSensor_GetAccelRange>
 80058e8:	4603      	mov	r3, r0
 80058ea:	4619      	mov	r1, r3
 80058ec:	68b8      	ldr	r0, [r7, #8]
 80058ee:	f000 ff1b 	bl	8006728 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 80058f2:	68b8      	ldr	r0, [r7, #8]
 80058f4:	f000 ff5c 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e0aa      	b.n	8005a52 <VibeCheckSensorCMD_Get+0x21a>
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 80058fc:	f107 0320 	add.w	r3, r7, #32
 8005900:	495a      	ldr	r1, [pc, #360]	@ (8005a6c <VibeCheckSensorCMD_Get+0x234>)
 8005902:	4618      	mov	r0, r3
 8005904:	f7fa fd04 	bl	8000310 <strcmp>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d146      	bne.n	800599c <VibeCheckSensorCMD_Get+0x164>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800590e:	f107 0320 	add.w	r3, r7, #32
 8005912:	2240      	movs	r2, #64	@ 0x40
 8005914:	4619      	mov	r1, r3
 8005916:	68b8      	ldr	r0, [r7, #8]
 8005918:	f000 fdaa 	bl	8006470 <VibeCheckShell_GetNextString>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 8096 	beq.w	8005a50 <VibeCheckSensorCMD_Get+0x218>
			{
				if (!strcmp(str, "odr"))
 8005924:	f107 0320 	add.w	r3, r7, #32
 8005928:	494d      	ldr	r1, [pc, #308]	@ (8005a60 <VibeCheckSensorCMD_Get+0x228>)
 800592a:	4618      	mov	r0, r3
 800592c:	f7fa fcf0 	bl	8000310 <strcmp>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d114      	bne.n	8005960 <VibeCheckSensorCMD_Get+0x128>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8005936:	494b      	ldr	r1, [pc, #300]	@ (8005a64 <VibeCheckSensorCMD_Get+0x22c>)
 8005938:	68b8      	ldr	r0, [r7, #8]
 800593a:	f000 feb9 	bl	80066b0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 800593e:	68b8      	ldr	r0, [r7, #8]
 8005940:	f000 ff28 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroODR(sensor, channel));
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7ff faf3 	bl	8004f32 <VibeCheckSensor_GetGyroODR>
 800594c:	4603      	mov	r3, r0
 800594e:	4619      	mov	r1, r3
 8005950:	68b8      	ldr	r0, [r7, #8]
 8005952:	f000 fee9 	bl	8006728 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005956:	68b8      	ldr	r0, [r7, #8]
 8005958:	f000 ff2a 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800595c:	2301      	movs	r3, #1
 800595e:	e078      	b.n	8005a52 <VibeCheckSensorCMD_Get+0x21a>
				}
				else if (!strcmp(str, "range"))
 8005960:	f107 0320 	add.w	r3, r7, #32
 8005964:	4940      	ldr	r1, [pc, #256]	@ (8005a68 <VibeCheckSensorCMD_Get+0x230>)
 8005966:	4618      	mov	r0, r3
 8005968:	f7fa fcd2 	bl	8000310 <strcmp>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d16e      	bne.n	8005a50 <VibeCheckSensorCMD_Get+0x218>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8005972:	493c      	ldr	r1, [pc, #240]	@ (8005a64 <VibeCheckSensorCMD_Get+0x22c>)
 8005974:	68b8      	ldr	r0, [r7, #8]
 8005976:	f000 fe9b 	bl	80066b0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 800597a:	68b8      	ldr	r0, [r7, #8]
 800597c:	f000 ff0a 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroRange(sensor, channel));
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f7ff fb07 	bl	8004f96 <VibeCheckSensor_GetGyroRange>
 8005988:	4603      	mov	r3, r0
 800598a:	4619      	mov	r1, r3
 800598c:	68b8      	ldr	r0, [r7, #8]
 800598e:	f000 fecb 	bl	8006728 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005992:	68b8      	ldr	r0, [r7, #8]
 8005994:	f000 ff0c 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005998:	2301      	movs	r3, #1
 800599a:	e05a      	b.n	8005a52 <VibeCheckSensorCMD_Get+0x21a>
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 800599c:	f107 0320 	add.w	r3, r7, #32
 80059a0:	4933      	ldr	r1, [pc, #204]	@ (8005a70 <VibeCheckSensorCMD_Get+0x238>)
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fa fcb4 	bl	8000310 <strcmp>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d132      	bne.n	8005a14 <VibeCheckSensorCMD_Get+0x1dc>
		{
			float x, y, z;
			VibeCheckSensor_GetOffsets(sensor, channel, &x, &y, &z);
 80059ae:	f107 0118 	add.w	r1, r7, #24
 80059b2:	f107 021c 	add.w	r2, r7, #28
 80059b6:	f107 0314 	add.w	r3, r7, #20
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	460b      	mov	r3, r1
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff fb01 	bl	8004fc8 <VibeCheckSensor_GetOffsets>

			VibeCheckShell_PutOutputString(shell, "ack");
 80059c6:	4927      	ldr	r1, [pc, #156]	@ (8005a64 <VibeCheckSensorCMD_Get+0x22c>)
 80059c8:	68b8      	ldr	r0, [r7, #8]
 80059ca:	f000 fe71 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80059ce:	68b8      	ldr	r0, [r7, #8]
 80059d0:	f000 fee0 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, x);
 80059d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80059d8:	eeb0 0a67 	vmov.f32	s0, s15
 80059dc:	68b8      	ldr	r0, [r7, #8]
 80059de:	f000 febb 	bl	8006758 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 80059e2:	68b8      	ldr	r0, [r7, #8]
 80059e4:	f000 fed6 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, y);
 80059e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80059ec:	eeb0 0a67 	vmov.f32	s0, s15
 80059f0:	68b8      	ldr	r0, [r7, #8]
 80059f2:	f000 feb1 	bl	8006758 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 80059f6:	68b8      	ldr	r0, [r7, #8]
 80059f8:	f000 fecc 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, z);
 80059fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a00:	eeb0 0a67 	vmov.f32	s0, s15
 8005a04:	68b8      	ldr	r0, [r7, #8]
 8005a06:	f000 fea7 	bl	8006758 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005a0a:	68b8      	ldr	r0, [r7, #8]
 8005a0c:	f000 fed0 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e01e      	b.n	8005a52 <VibeCheckSensorCMD_Get+0x21a>
		}
		else if (!strcmp(str, "connected"))
 8005a14:	f107 0320 	add.w	r3, r7, #32
 8005a18:	4916      	ldr	r1, [pc, #88]	@ (8005a74 <VibeCheckSensorCMD_Get+0x23c>)
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fa fc78 	bl	8000310 <strcmp>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d114      	bne.n	8005a50 <VibeCheckSensorCMD_Get+0x218>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005a26:	490f      	ldr	r1, [pc, #60]	@ (8005a64 <VibeCheckSensorCMD_Get+0x22c>)
 8005a28:	68b8      	ldr	r0, [r7, #8]
 8005a2a:	f000 fe41 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005a2e:	68b8      	ldr	r0, [r7, #8]
 8005a30:	f000 feb0 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_IsConnected(sensor, channel));
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7ff fb53 	bl	80050e2 <VibeCheckSensor_IsConnected>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4619      	mov	r1, r3
 8005a40:	68b8      	ldr	r0, [r7, #8]
 8005a42:	f000 fe71 	bl	8006728 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005a46:	68b8      	ldr	r0, [r7, #8]
 8005a48:	f000 feb2 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <VibeCheckSensorCMD_Get+0x21a>
		}
	}

	return 0;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3760      	adds	r7, #96	@ 0x60
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	0801e2dc 	.word	0x0801e2dc
 8005a60:	0801e2e4 	.word	0x0801e2e4
 8005a64:	0801e2e8 	.word	0x0801e2e8
 8005a68:	0801e2ec 	.word	0x0801e2ec
 8005a6c:	0801e2f4 	.word	0x0801e2f4
 8005a70:	0801e2fc 	.word	0x0801e2fc
 8005a74:	0801e304 	.word	0x0801e304

08005a78 <VibeCheckSensorCMD_Execute>:


uint32_t VibeCheckSensorCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b096      	sub	sp, #88	@ 0x58
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	657b      	str	r3, [r7, #84]	@ 0x54

	char str[VC_SHELL_MAX_TOKEN_LEN];
	int32_t channel;
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005a86:	f107 0314 	add.w	r3, r7, #20
 8005a8a:	2240      	movs	r2, #64	@ 0x40
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6838      	ldr	r0, [r7, #0]
 8005a90:	f000 fcee 	bl	8006470 <VibeCheckShell_GetNextString>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8169 	beq.w	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
	{
		if (!strcmp(str, "fakedata"))
 8005a9c:	f107 0314 	add.w	r3, r7, #20
 8005aa0:	49b5      	ldr	r1, [pc, #724]	@ (8005d78 <VibeCheckSensorCMD_Execute+0x300>)
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fa fc34 	bl	8000310 <strcmp>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d135      	bne.n	8005b1a <VibeCheckSensorCMD_Execute+0xa2>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005aae:	f107 0314 	add.w	r3, r7, #20
 8005ab2:	2240      	movs	r2, #64	@ 0x40
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6838      	ldr	r0, [r7, #0]
 8005ab8:	f000 fcda 	bl	8006470 <VibeCheckShell_GetNextString>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 8155 	beq.w	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
			{
				if (!strcmp(str, "start"))
 8005ac4:	f107 0314 	add.w	r3, r7, #20
 8005ac8:	49ac      	ldr	r1, [pc, #688]	@ (8005d7c <VibeCheckSensorCMD_Execute+0x304>)
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fa fc20 	bl	8000310 <strcmp>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10b      	bne.n	8005aee <VibeCheckSensorCMD_Execute+0x76>
				{
					VibeCheckSensor_StartFakeData(sensor);
 8005ad6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005ad8:	f7ff faa8 	bl	800502c <VibeCheckSensor_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005adc:	49a8      	ldr	r1, [pc, #672]	@ (8005d80 <VibeCheckSensorCMD_Execute+0x308>)
 8005ade:	6838      	ldr	r0, [r7, #0]
 8005ae0:	f000 fde6 	bl	80066b0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005ae4:	6838      	ldr	r0, [r7, #0]
 8005ae6:	f000 fe63 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e140      	b.n	8005d70 <VibeCheckSensorCMD_Execute+0x2f8>
				}
				else if (!strcmp(str, "stop"))
 8005aee:	f107 0314 	add.w	r3, r7, #20
 8005af2:	49a4      	ldr	r1, [pc, #656]	@ (8005d84 <VibeCheckSensorCMD_Execute+0x30c>)
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fa fc0b 	bl	8000310 <strcmp>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f040 8136 	bne.w	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
				{
					VibeCheckSensor_StopFakeData(sensor);
 8005b02:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005b04:	f7ff faa3 	bl	800504e <VibeCheckSensor_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005b08:	499d      	ldr	r1, [pc, #628]	@ (8005d80 <VibeCheckSensorCMD_Execute+0x308>)
 8005b0a:	6838      	ldr	r0, [r7, #0]
 8005b0c:	f000 fdd0 	bl	80066b0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005b10:	6838      	ldr	r0, [r7, #0]
 8005b12:	f000 fe4d 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e12a      	b.n	8005d70 <VibeCheckSensorCMD_Execute+0x2f8>
				}
			}
		}
		else if (!strcmp(str, "set"))
 8005b1a:	f107 0314 	add.w	r3, r7, #20
 8005b1e:	499a      	ldr	r1, [pc, #616]	@ (8005d88 <VibeCheckSensorCMD_Execute+0x310>)
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fa fbf5 	bl	8000310 <strcmp>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d12c      	bne.n	8005b86 <VibeCheckSensorCMD_Execute+0x10e>
		{
			/* setters for overall sensor subsystem (not channel specific) */
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005b2c:	f107 0314 	add.w	r3, r7, #20
 8005b30:	2240      	movs	r2, #64	@ 0x40
 8005b32:	4619      	mov	r1, r3
 8005b34:	6838      	ldr	r0, [r7, #0]
 8005b36:	f000 fc9b 	bl	8006470 <VibeCheckShell_GetNextString>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 8116 	beq.w	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
			{
				if (!strcmp(str, "packetsize"))
 8005b42:	f107 0314 	add.w	r3, r7, #20
 8005b46:	4991      	ldr	r1, [pc, #580]	@ (8005d8c <VibeCheckSensorCMD_Execute+0x314>)
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fa fbe1 	bl	8000310 <strcmp>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f040 810c 	bne.w	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
				{
					int32_t size;
					if (VibeCheckShell_GetNextInt(shell, &size))
 8005b56:	f107 030c 	add.w	r3, r7, #12
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6838      	ldr	r0, [r7, #0]
 8005b5e:	f000 fcff 	bl	8006560 <VibeCheckShell_GetNextInt>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8102 	beq.w	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
					{
						VibeCheckSensor_SetPacketSize(sensor, size);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005b70:	f7ff fa7e 	bl	8005070 <VibeCheckSensor_SetPacketSize>
						VibeCheckShell_PutOutputString(shell, "ack");
 8005b74:	4982      	ldr	r1, [pc, #520]	@ (8005d80 <VibeCheckSensorCMD_Execute+0x308>)
 8005b76:	6838      	ldr	r0, [r7, #0]
 8005b78:	f000 fd9a 	bl	80066b0 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8005b7c:	6838      	ldr	r0, [r7, #0]
 8005b7e:	f000 fe17 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e0f4      	b.n	8005d70 <VibeCheckSensorCMD_Execute+0x2f8>
					}
				}
			}
		}
		else if (!strcmp(str, "get"))
 8005b86:	f107 0314 	add.w	r3, r7, #20
 8005b8a:	4981      	ldr	r1, [pc, #516]	@ (8005d90 <VibeCheckSensorCMD_Execute+0x318>)
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fa fbbf 	bl	8000310 <strcmp>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d128      	bne.n	8005bea <VibeCheckSensorCMD_Execute+0x172>
		{
			/* getters for overall sensor subsystem (not channel specific) */
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005b98:	f107 0314 	add.w	r3, r7, #20
 8005b9c:	2240      	movs	r2, #64	@ 0x40
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6838      	ldr	r0, [r7, #0]
 8005ba2:	f000 fc65 	bl	8006470 <VibeCheckShell_GetNextString>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 80e0 	beq.w	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
			{
				if (!strcmp(str, "packetsize"))
 8005bae:	f107 0314 	add.w	r3, r7, #20
 8005bb2:	4976      	ldr	r1, [pc, #472]	@ (8005d8c <VibeCheckSensorCMD_Execute+0x314>)
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fa fbab 	bl	8000310 <strcmp>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f040 80d6 	bne.w	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8005bc2:	496f      	ldr	r1, [pc, #444]	@ (8005d80 <VibeCheckSensorCMD_Execute+0x308>)
 8005bc4:	6838      	ldr	r0, [r7, #0]
 8005bc6:	f000 fd73 	bl	80066b0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8005bca:	6838      	ldr	r0, [r7, #0]
 8005bcc:	f000 fde2 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetPacketSize(sensor));
 8005bd0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005bd2:	f7ff fa77 	bl	80050c4 <VibeCheckSensor_GetPacketSize>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6838      	ldr	r0, [r7, #0]
 8005bdc:	f000 fda4 	bl	8006728 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005be0:	6838      	ldr	r0, [r7, #0]
 8005be2:	f000 fde5 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e0c2      	b.n	8005d70 <VibeCheckSensorCMD_Execute+0x2f8>
				}
			}
		}
		else if (VibeCheckShell_TurnToInt(str, &channel))
 8005bea:	f107 0210 	add.w	r2, r7, #16
 8005bee:	f107 0314 	add.w	r3, r7, #20
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fceb 	bl	80065d0 <VibeCheckShell_TurnToInt>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 80b6 	beq.w	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005c02:	f107 0314 	add.w	r3, r7, #20
 8005c06:	2240      	movs	r2, #64	@ 0x40
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6838      	ldr	r0, [r7, #0]
 8005c0c:	f000 fc30 	bl	8006470 <VibeCheckShell_GetNextString>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 80ab 	beq.w	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
			{
				if (!strcmp(str, "start"))
 8005c18:	f107 0314 	add.w	r3, r7, #20
 8005c1c:	4957      	ldr	r1, [pc, #348]	@ (8005d7c <VibeCheckSensorCMD_Execute+0x304>)
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fa fb76 	bl	8000310 <strcmp>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d138      	bne.n	8005c9c <VibeCheckSensorCMD_Execute+0x224>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005c2a:	f107 0314 	add.w	r3, r7, #20
 8005c2e:	2240      	movs	r2, #64	@ 0x40
 8005c30:	4619      	mov	r1, r3
 8005c32:	6838      	ldr	r0, [r7, #0]
 8005c34:	f000 fc1c 	bl	8006470 <VibeCheckShell_GetNextString>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8097 	beq.w	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
					{
						if (!strcmp(str, "accel"))
 8005c40:	f107 0314 	add.w	r3, r7, #20
 8005c44:	4953      	ldr	r1, [pc, #332]	@ (8005d94 <VibeCheckSensorCMD_Execute+0x31c>)
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fa fb62 	bl	8000310 <strcmp>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10d      	bne.n	8005c6e <VibeCheckSensorCMD_Execute+0x1f6>
						{
							VibeCheckSensor_StartAccel(sensor, channel);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4619      	mov	r1, r3
 8005c56:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005c58:	f7fe ff26 	bl	8004aa8 <VibeCheckSensor_StartAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005c5c:	4948      	ldr	r1, [pc, #288]	@ (8005d80 <VibeCheckSensorCMD_Execute+0x308>)
 8005c5e:	6838      	ldr	r0, [r7, #0]
 8005c60:	f000 fd26 	bl	80066b0 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005c64:	6838      	ldr	r0, [r7, #0]
 8005c66:	f000 fda3 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e080      	b.n	8005d70 <VibeCheckSensorCMD_Execute+0x2f8>
						}
						else if (!strcmp(str, "gyro"))
 8005c6e:	f107 0314 	add.w	r3, r7, #20
 8005c72:	4949      	ldr	r1, [pc, #292]	@ (8005d98 <VibeCheckSensorCMD_Execute+0x320>)
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fa fb4b 	bl	8000310 <strcmp>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d176      	bne.n	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
						{
							VibeCheckSensor_StartGyro(sensor, channel);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4619      	mov	r1, r3
 8005c84:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005c86:	f7fe ff9d 	bl	8004bc4 <VibeCheckSensor_StartGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005c8a:	493d      	ldr	r1, [pc, #244]	@ (8005d80 <VibeCheckSensorCMD_Execute+0x308>)
 8005c8c:	6838      	ldr	r0, [r7, #0]
 8005c8e:	f000 fd0f 	bl	80066b0 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005c92:	6838      	ldr	r0, [r7, #0]
 8005c94:	f000 fd8c 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e069      	b.n	8005d70 <VibeCheckSensorCMD_Execute+0x2f8>
						}
					}
				}
				else if (!strcmp(str, "stop"))
 8005c9c:	f107 0314 	add.w	r3, r7, #20
 8005ca0:	4938      	ldr	r1, [pc, #224]	@ (8005d84 <VibeCheckSensorCMD_Execute+0x30c>)
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fa fb34 	bl	8000310 <strcmp>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d137      	bne.n	8005d1e <VibeCheckSensorCMD_Execute+0x2a6>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005cae:	f107 0314 	add.w	r3, r7, #20
 8005cb2:	2240      	movs	r2, #64	@ 0x40
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6838      	ldr	r0, [r7, #0]
 8005cb8:	f000 fbda 	bl	8006470 <VibeCheckShell_GetNextString>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d055      	beq.n	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
					{
						if (!strcmp(str, "accel"))
 8005cc2:	f107 0314 	add.w	r3, r7, #20
 8005cc6:	4933      	ldr	r1, [pc, #204]	@ (8005d94 <VibeCheckSensorCMD_Execute+0x31c>)
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fa fb21 	bl	8000310 <strcmp>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10d      	bne.n	8005cf0 <VibeCheckSensorCMD_Execute+0x278>
						{
							VibeCheckSensor_StopAccel(sensor, channel);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005cda:	f7fe ff2c 	bl	8004b36 <VibeCheckSensor_StopAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005cde:	4928      	ldr	r1, [pc, #160]	@ (8005d80 <VibeCheckSensorCMD_Execute+0x308>)
 8005ce0:	6838      	ldr	r0, [r7, #0]
 8005ce2:	f000 fce5 	bl	80066b0 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005ce6:	6838      	ldr	r0, [r7, #0]
 8005ce8:	f000 fd62 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e03f      	b.n	8005d70 <VibeCheckSensorCMD_Execute+0x2f8>
						}
						else if (!strcmp(str, "gyro"))
 8005cf0:	f107 0314 	add.w	r3, r7, #20
 8005cf4:	4928      	ldr	r1, [pc, #160]	@ (8005d98 <VibeCheckSensorCMD_Execute+0x320>)
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fa fb0a 	bl	8000310 <strcmp>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d135      	bne.n	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
						{
							VibeCheckSensor_StopGyro(sensor, channel);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4619      	mov	r1, r3
 8005d06:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005d08:	f7fe ffa3 	bl	8004c52 <VibeCheckSensor_StopGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005d0c:	491c      	ldr	r1, [pc, #112]	@ (8005d80 <VibeCheckSensorCMD_Execute+0x308>)
 8005d0e:	6838      	ldr	r0, [r7, #0]
 8005d10:	f000 fcce 	bl	80066b0 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005d14:	6838      	ldr	r0, [r7, #0]
 8005d16:	f000 fd4b 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e028      	b.n	8005d70 <VibeCheckSensorCMD_Execute+0x2f8>
						}
					}
				}
				else if (!strcmp(str, "set"))
 8005d1e:	f107 0314 	add.w	r3, r7, #20
 8005d22:	4919      	ldr	r1, [pc, #100]	@ (8005d88 <VibeCheckSensorCMD_Execute+0x310>)
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fa faf3 	bl	8000310 <strcmp>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10a      	bne.n	8005d46 <VibeCheckSensorCMD_Execute+0x2ce>
				{
					if (VibeCheckSensorCMD_Set(sensor, shell, channel))
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	461a      	mov	r2, r3
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005d38:	f7ff fc70 	bl	800561c <VibeCheckSensorCMD_Set>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d015      	beq.n	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
					{
						return 1;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e014      	b.n	8005d70 <VibeCheckSensorCMD_Execute+0x2f8>
					}
				}
				else if (!strcmp(str, "get"))
 8005d46:	f107 0314 	add.w	r3, r7, #20
 8005d4a:	4911      	ldr	r1, [pc, #68]	@ (8005d90 <VibeCheckSensorCMD_Execute+0x318>)
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fa fadf 	bl	8000310 <strcmp>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
				{
					if (VibeCheckSensorCMD_Get(sensor, shell, channel))
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005d60:	f7ff fd6a 	bl	8005838 <VibeCheckSensorCMD_Get>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <VibeCheckSensorCMD_Execute+0x2f6>
					{
						return 1;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <VibeCheckSensorCMD_Execute+0x2f8>
				}
			}
		}
	}

	return 0;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3758      	adds	r7, #88	@ 0x58
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	0801e310 	.word	0x0801e310
 8005d7c:	0801e31c 	.word	0x0801e31c
 8005d80:	0801e2e8 	.word	0x0801e2e8
 8005d84:	0801e324 	.word	0x0801e324
 8005d88:	0801e32c 	.word	0x0801e32c
 8005d8c:	0801e330 	.word	0x0801e330
 8005d90:	0801e33c 	.word	0x0801e33c
 8005d94:	0801e2dc 	.word	0x0801e2dc
 8005d98:	0801e2f4 	.word	0x0801e2f4

08005d9c <VibeCheckSensorSender_Data_Execute>:


uint32_t VibeCheckSensorSender_Data_Execute(void* obj, VibeCheckShell* shell)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	613b      	str	r3, [r7, #16]

	volatile VibeCheckSensor_Data* data;
	if (VibeCheckSensor_GetDataReady(sensor, &data))
 8005daa:	f107 030c 	add.w	r3, r7, #12
 8005dae:	4619      	mov	r1, r3
 8005db0:	6938      	ldr	r0, [r7, #16]
 8005db2:	f7ff fb34 	bl	800541e <VibeCheckSensor_GetDataReady>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d059      	beq.n	8005e70 <VibeCheckSensorSender_Data_Execute+0xd4>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 8005dbc:	492f      	ldr	r1, [pc, #188]	@ (8005e7c <VibeCheckSensorSender_Data_Execute+0xe0>)
 8005dbe:	6838      	ldr	r0, [r7, #0]
 8005dc0:	f000 fc76 	bl	80066b0 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8005dc4:	6838      	ldr	r0, [r7, #0]
 8005dc6:	f000 fce5 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, sensor->data_packet_size);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dd0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6838      	ldr	r0, [r7, #0]
 8005dd8:	f000 fca6 	bl	8006728 <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]

		while (data_written < sensor->data_packet_size)
 8005de0:	e039      	b.n	8005e56 <VibeCheckSensorSender_Data_Execute+0xba>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 8005de2:	6838      	ldr	r0, [r7, #0]
 8005de4:	f000 fcd6 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	4619      	mov	r1, r3
 8005df0:	6838      	ldr	r0, [r7, #0]
 8005df2:	f000 fc99 	bl	8006728 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8005df6:	6838      	ldr	r0, [r7, #0]
 8005df8:	f000 fccc 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	4619      	mov	r1, r3
 8005e02:	6838      	ldr	r0, [r7, #0]
 8005e04:	f000 fc90 	bl	8006728 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8005e08:	6838      	ldr	r0, [r7, #0]
 8005e0a:	f000 fcc3 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e14:	eeb0 0a67 	vmov.f32	s0, s15
 8005e18:	6838      	ldr	r0, [r7, #0]
 8005e1a:	f000 fc9d 	bl	8006758 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8005e1e:	6838      	ldr	r0, [r7, #0]
 8005e20:	f000 fcb8 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e2e:	6838      	ldr	r0, [r7, #0]
 8005e30:	f000 fc92 	bl	8006758 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8005e34:	6838      	ldr	r0, [r7, #0]
 8005e36:	f000 fcad 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005e40:	eeb0 0a67 	vmov.f32	s0, s15
 8005e44:	6838      	ldr	r0, [r7, #0]
 8005e46:	f000 fc87 	bl	8006758 <VibeCheckShell_PutOutputFloat>


			data++;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3314      	adds	r3, #20
 8005e4e:	60fb      	str	r3, [r7, #12]
			data_written++;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	3301      	adds	r3, #1
 8005e54:	617b      	str	r3, [r7, #20]
		while (data_written < sensor->data_packet_size)
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e5c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d3bd      	bcc.n	8005de2 <VibeCheckSensorSender_Data_Execute+0x46>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8005e66:	6838      	ldr	r0, [r7, #0]
 8005e68:	f000 fca2 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <VibeCheckSensorSender_Data_Execute+0xd6>
	}

	return 0;
 8005e70:	2300      	movs	r3, #0

}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	0801e340 	.word	0x0801e340

08005e80 <VibeCheckSensorSender_Status_Execute>:


uint32_t VibeCheckSensorSender_Status_Execute(void* obj, VibeCheckShell* shell)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	617b      	str	r3, [r7, #20]

	uint32_t channel, is_connected;
	if (VibeCheckSensor_ConnectionChanged(sensor, &channel, &is_connected))
 8005e8e:	f107 020c 	add.w	r2, r7, #12
 8005e92:	f107 0310 	add.w	r3, r7, #16
 8005e96:	4619      	mov	r1, r3
 8005e98:	6978      	ldr	r0, [r7, #20]
 8005e9a:	f7ff f93b 	bl	8005114 <VibeCheckSensor_ConnectionChanged>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d026      	beq.n	8005ef2 <VibeCheckSensorSender_Status_Execute+0x72>
	{
		VibeCheckShell_PutOutputString(shell, "event");
 8005ea4:	4915      	ldr	r1, [pc, #84]	@ (8005efc <VibeCheckSensorSender_Status_Execute+0x7c>)
 8005ea6:	6838      	ldr	r0, [r7, #0]
 8005ea8:	f000 fc02 	bl	80066b0 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8005eac:	6838      	ldr	r0, [r7, #0]
 8005eae:	f000 fc71 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "sensor");
 8005eb2:	4913      	ldr	r1, [pc, #76]	@ (8005f00 <VibeCheckSensorSender_Status_Execute+0x80>)
 8005eb4:	6838      	ldr	r0, [r7, #0]
 8005eb6:	f000 fbfb 	bl	80066b0 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8005eba:	6838      	ldr	r0, [r7, #0]
 8005ebc:	f000 fc6a 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, channel);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6838      	ldr	r0, [r7, #0]
 8005ec6:	f000 fc2f 	bl	8006728 <VibeCheckShell_PutOutputInt>
		VibeCheckShell_PutOutputSeparator(shell);
 8005eca:	6838      	ldr	r0, [r7, #0]
 8005ecc:	f000 fc62 	bl	8006794 <VibeCheckShell_PutOutputSeparator>

		if (is_connected)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d004      	beq.n	8005ee0 <VibeCheckSensorSender_Status_Execute+0x60>
			VibeCheckShell_PutOutputString(shell, "connected");
 8005ed6:	490b      	ldr	r1, [pc, #44]	@ (8005f04 <VibeCheckSensorSender_Status_Execute+0x84>)
 8005ed8:	6838      	ldr	r0, [r7, #0]
 8005eda:	f000 fbe9 	bl	80066b0 <VibeCheckShell_PutOutputString>
 8005ede:	e003      	b.n	8005ee8 <VibeCheckSensorSender_Status_Execute+0x68>
		else
			VibeCheckShell_PutOutputString(shell, "disconnected");
 8005ee0:	4909      	ldr	r1, [pc, #36]	@ (8005f08 <VibeCheckSensorSender_Status_Execute+0x88>)
 8005ee2:	6838      	ldr	r0, [r7, #0]
 8005ee4:	f000 fbe4 	bl	80066b0 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8005ee8:	6838      	ldr	r0, [r7, #0]
 8005eea:	f000 fc61 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
		return 1;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <VibeCheckSensorSender_Status_Execute+0x74>
	}

	return 0;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	0801e348 	.word	0x0801e348
 8005f00:	0801e350 	.word	0x0801e350
 8005f04:	0801e304 	.word	0x0801e304
 8005f08:	0801e358 	.word	0x0801e358

08005f0c <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	6013      	str	r3, [r2, #0]
	shell->input_tail = 0;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005f26:	461a      	mov	r2, r3
 8005f28:	2300      	movs	r3, #0
 8005f2a:	6053      	str	r3, [r2, #4]
	shell->input_count = 0;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005f32:	461a      	mov	r2, r3
 8005f34:	2300      	movs	r3, #0
 8005f36:	6093      	str	r3, [r2, #8]
	shell->input_delimiter_count = 0;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2300      	movs	r3, #0
 8005f42:	60d3      	str	r3, [r2, #12]

	shell->output_head = 0;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005f56:	461a      	mov	r2, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	6153      	str	r3, [r2, #20]
	shell->output_end = 0;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005f62:	461a      	mov	r2, r3
 8005f64:	2300      	movs	r3, #0
 8005f66:	6193      	str	r3, [r2, #24]
	shell->output_count = 0;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005f6e:	461a      	mov	r2, r3
 8005f70:	2300      	movs	r3, #0
 8005f72:	61d3      	str	r3, [r2, #28]

	shell->ih_count = 0;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
	shell->oh_count = 0;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f8c2 3424 	str.w	r3, [r2, #1060]	@ 0x424
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 8005f9c:	b590      	push	{r4, r7, lr}
 8005f9e:	b099      	sub	sp, #100	@ 0x64
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fb4:	d302      	bcc.n	8005fbc <VibeCheckShell_Update+0x20>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8099 	beq.w	80060fc <VibeCheckShell_Update+0x160>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 8005fd0:	e094      	b.n	80060fc <VibeCheckShell_Update+0x160>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 8005fd2:	f107 030c 	add.w	r3, r7, #12
 8005fd6:	2240      	movs	r2, #64	@ 0x40
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fa48 	bl	8006470 <VibeCheckShell_GetNextString>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d04a      	beq.n	800607c <VibeCheckShell_Update+0xe0>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fea:	e03e      	b.n	800606a <VibeCheckShell_Update+0xce>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8005fec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005fee:	4613      	mov	r3, r2
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	4a74      	ldr	r2, [pc, #464]	@ (80061c8 <VibeCheckShell_Update+0x22c>)
 8005ff8:	441a      	add	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f107 020c 	add.w	r2, r7, #12
 8006002:	4611      	mov	r1, r2
 8006004:	4618      	mov	r0, r3
 8006006:	f7fa f983 	bl	8000310 <strcmp>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d11d      	bne.n	800604c <VibeCheckShell_Update+0xb0>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8006010:	6879      	ldr	r1, [r7, #4]
 8006012:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006014:	4613      	mov	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	4413      	add	r3, r2
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	18ca      	adds	r2, r1, r3
 800601e:	4b6b      	ldr	r3, [pc, #428]	@ (80061cc <VibeCheckShell_Update+0x230>)
 8006020:	4413      	add	r3, r2
 8006022:	681c      	ldr	r4, [r3, #0]
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006028:	4613      	mov	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4413      	add	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	18ca      	adds	r2, r1, r3
 8006032:	4b67      	ldr	r3, [pc, #412]	@ (80061d0 <VibeCheckShell_Update+0x234>)
 8006034:	4413      	add	r3, r2
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	4618      	mov	r0, r3
 800603c:	47a0      	blx	r4
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d11f      	bne.n	8006084 <VibeCheckShell_Update+0xe8>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8006044:	2303      	movs	r3, #3
 8006046:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 800604a:	e01b      	b.n	8006084 <VibeCheckShell_Update+0xe8>
				}

				if (i == shell->ih_count - 1)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8006052:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8006056:	3b01      	subs	r3, #1
 8006058:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800605a:	429a      	cmp	r2, r3
 800605c:	d102      	bne.n	8006064 <VibeCheckShell_Update+0xc8>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 800605e:	2302      	movs	r3, #2
 8006060:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8006064:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006066:	3301      	adds	r3, #1
 8006068:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8006070:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8006074:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006076:	429a      	cmp	r2, r3
 8006078:	d3b8      	bcc.n	8005fec <VibeCheckShell_Update+0x50>
 800607a:	e004      	b.n	8006086 <VibeCheckShell_Update+0xea>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 800607c:	2302      	movs	r3, #2
 800607e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8006082:	e000      	b.n	8006086 <VibeCheckShell_Update+0xea>
					break;
 8006084:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	5cd3      	ldrb	r3, [r2, r3]
 8006092:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	3b01      	subs	r3, #1
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80060a6:	6093      	str	r3, [r2, #8]
			shell->input_tail++;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	3301      	adds	r3, #1
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80060b8:	6053      	str	r3, [r2, #4]
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060c6:	d105      	bne.n	80060d4 <VibeCheckShell_Update+0x138>
				shell->input_tail = 0;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80060ce:	461a      	mov	r2, r3
 80060d0:	2300      	movs	r3, #0
 80060d2:	6053      	str	r3, [r2, #4]

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 80060d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060d8:	4619      	mov	r1, r3
 80060da:	483e      	ldr	r0, [pc, #248]	@ (80061d4 <VibeCheckShell_Update+0x238>)
 80060dc:	f014 fcd5 	bl	801aa8a <strchr>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d100      	bne.n	80060e8 <VibeCheckShell_Update+0x14c>
		{
 80060e6:	e7ce      	b.n	8006086 <VibeCheckShell_Update+0xea>
				break;  /* found the delimiter */
 80060e8:	bf00      	nop
		}


		shell->input_delimiter_count--;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80060fa:	60d3      	str	r3, [r2, #12]
	while (shell->input_delimiter_count)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f47f af64 	bne.w	8005fd2 <VibeCheckShell_Update+0x36>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 800610a:	2300      	movs	r3, #0
 800610c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800610e:	e032      	b.n	8006176 <VibeCheckShell_Update+0x1da>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006114:	f242 2344 	movw	r3, #8772	@ 0x2244
 8006118:	440b      	add	r3, r1
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	4413      	add	r3, r2
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006124:	f242 2344 	movw	r3, #8772	@ 0x2244
 8006128:	4403      	add	r3, r0
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	440b      	add	r3, r1
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4618      	mov	r0, r3
 8006134:	4790      	blx	r2
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d019      	beq.n	8006170 <VibeCheckShell_Update+0x1d4>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 800613c:	2301      	movs	r3, #1
 800613e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

			/* wrap the output buffer if necessary so that an output packet doesn't get split up */
			if (VC_SHELL_IO_BUF_LEN - shell->output_head < VC_SHELL_MAX_OUTPUT_PACKET_LEN)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 800614e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006152:	d20d      	bcs.n	8006170 <VibeCheckShell_Update+0x1d4>
			{
				shell->output_end = shell->output_head;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8006162:	6193      	str	r3, [r2, #24]
				shell->output_head = 0;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800616a:	461a      	mov	r2, r3
 800616c:	2300      	movs	r3, #0
 800616e:	6113      	str	r3, [r2, #16]
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8006170:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006172:	3301      	adds	r3, #1
 8006174:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800617c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	@ 0x424
 8006180:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006182:	429a      	cmp	r2, r3
 8006184:	d3c4      	bcc.n	8006110 <VibeCheckShell_Update+0x174>
			}
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006192:	d302      	bcc.n	800619a <VibeCheckShell_Update+0x1fe>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 8006194:	2301      	movs	r3, #1
 8006196:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 800619a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800619c:	653b      	str	r3, [r7, #80]	@ 0x50
 800619e:	2300      	movs	r3, #0
 80061a0:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80061a4:	f362 0307 	bfi	r3, r2, #0, #8
 80061a8:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 80061ac:	f362 230f 	bfi	r3, r2, #8, #8
 80061b0:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 80061b4:	f362 4317 	bfi	r3, r2, #16, #8
 80061b8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80061bc:	f362 631f 	bfi	r3, r2, #24, #8
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3764      	adds	r7, #100	@ 0x64
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd90      	pop	{r4, r7, pc}
 80061c8:	00010020 	.word	0x00010020
 80061cc:	00010060 	.word	0x00010060
 80061d0:	00010064 	.word	0x00010064
 80061d4:	0801e368 	.word	0x0801e368

080061d8 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 80061d8:	b084      	sub	sp, #16
 80061da:	b580      	push	{r7, lr}
 80061dc:	b082      	sub	sp, #8
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	f107 0014 	add.w	r0, r7, #20
 80061e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80061f0:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80061f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80061f6:	d819      	bhi.n	800622c <VibeCheckShell_RegisterInputHandler+0x54>
		shell->input_handlers[shell->ih_count++] = handler;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80061fe:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006202:	1c53      	adds	r3, r2, #1
 8006204:	6879      	ldr	r1, [r7, #4]
 8006206:	f501 3188 	add.w	r1, r1, #69632	@ 0x11000
 800620a:	f8c1 3220 	str.w	r3, [r1, #544]	@ 0x220
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	4613      	mov	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	4413      	add	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	18ca      	adds	r2, r1, r3
 800621a:	4b08      	ldr	r3, [pc, #32]	@ (800623c <VibeCheckShell_RegisterInputHandler+0x64>)
 800621c:	4413      	add	r3, r2
 800621e:	4618      	mov	r0, r3
 8006220:	f107 0314 	add.w	r3, r7, #20
 8006224:	2248      	movs	r2, #72	@ 0x48
 8006226:	4619      	mov	r1, r3
 8006228:	f014 fcc5 	bl	801abb6 <memcpy>
}
 800622c:	bf00      	nop
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006236:	b004      	add	sp, #16
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	00010020 	.word	0x00010020

08006240 <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	1d3b      	adds	r3, r7, #4
 800624a:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8006254:	f8d3 3424 	ldr.w	r3, [r3, #1060]	@ 0x424
 8006258:	2b3f      	cmp	r3, #63	@ 0x3f
 800625a:	d816      	bhi.n	800628a <VibeCheckShell_RegisterOutputHandler+0x4a>
		shell->output_handlers[shell->oh_count++] = handler;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8006262:	f8d3 2424 	ldr.w	r2, [r3, #1060]	@ 0x424
 8006266:	1c53      	adds	r3, r2, #1
 8006268:	68f9      	ldr	r1, [r7, #12]
 800626a:	f501 3188 	add.w	r1, r1, #69632	@ 0x11000
 800626e:	f8c1 3424 	str.w	r3, [r1, #1060]	@ 0x424
 8006272:	68f9      	ldr	r1, [r7, #12]
 8006274:	f242 2344 	movw	r3, #8772	@ 0x2244
 8006278:	4413      	add	r3, r2
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	440b      	add	r3, r1
 800627e:	3304      	adds	r3, #4
 8006280:	1d3a      	adds	r2, r7, #4
 8006282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006286:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800628a:	bf00      	nop
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
	...

08006298 <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	e03e      	b.n	8006328 <VibeCheckShell_PutInput+0x90>
	{
		if (*input)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d03f      	beq.n	8006332 <VibeCheckShell_PutInput+0x9a>
		{
			shell->input[shell->input_head++] = *input;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	68f9      	ldr	r1, [r7, #12]
 80062be:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 80062c2:	600a      	str	r2, [r1, #0]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	7811      	ldrb	r1, [r2, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062d8:	d105      	bne.n	80062e6 <VibeCheckShell_PutInput+0x4e>
					shell->input_head = 0;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80062e0:	461a      	mov	r2, r3
 80062e2:	2300      	movs	r3, #0
 80062e4:	6013      	str	r3, [r2, #0]
			shell->input_count++;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	3301      	adds	r3, #1
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80062f6:	6093      	str	r3, [r2, #8]

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	4619      	mov	r1, r3
 80062fe:	480f      	ldr	r0, [pc, #60]	@ (800633c <VibeCheckShell_PutInput+0xa4>)
 8006300:	f014 fbc3 	bl	801aa8a <strchr>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d008      	beq.n	800631c <VibeCheckShell_PutInput+0x84>
				shell->input_delimiter_count++;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	3301      	adds	r3, #1
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800631a:	60d3      	str	r3, [r2, #12]

			input++;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	3301      	adds	r3, #1
 8006320:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	3301      	adds	r3, #1
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	429a      	cmp	r2, r3
 800632e:	d3bc      	bcc.n	80062aa <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 8006330:	e000      	b.n	8006334 <VibeCheckShell_PutInput+0x9c>
			break;
 8006332:	bf00      	nop
}
 8006334:	bf00      	nop
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	0801e368 	.word	0x0801e368

08006340 <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	uint32_t head = shell->output_head;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	617b      	str	r3, [r7, #20]
	uint32_t tail = shell->output_tail;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	613b      	str	r3, [r7, #16]

	if (head == tail)
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	429a      	cmp	r2, r3
 8006366:	d101      	bne.n	800636c <VibeCheckShell_GetOutput+0x2c>
		return 0;
 8006368:	2300      	movs	r3, #0
 800636a:	e038      	b.n	80063de <VibeCheckShell_GetOutput+0x9e>

	if (head > tail)
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	429a      	cmp	r2, r3
 8006372:	d90e      	bls.n	8006392 <VibeCheckShell_GetOutput+0x52>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[tail];
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	f248 0310 	movw	r3, #32784	@ 0x8010
 800637a:	4413      	add	r3, r2
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	441a      	add	r2, r3
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	601a      	str	r2, [r3, #0]
		*len = head - tail;
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad2      	subs	r2, r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	601a      	str	r2, [r3, #0]
		return 1;
 800638e:	2301      	movs	r3, #1
 8006390:	e025      	b.n	80063de <VibeCheckShell_GetOutput+0x9e>
	}
	else
	{
		if (shell->output_end)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d011      	beq.n	80063c2 <VibeCheckShell_GetOutput+0x82>
		{
			/* the output would have wrapped but we caught it - only send up to the delimited end of the output */
			*output = &shell->output[tail];
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	f248 0310 	movw	r3, #32784	@ 0x8010
 80063a4:	4413      	add	r3, r2
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	441a      	add	r2, r3
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	601a      	str	r2, [r3, #0]
			*len = shell->output_end - tail;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad2      	subs	r2, r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	601a      	str	r2, [r3, #0]
			return 1;
 80063be:	2301      	movs	r3, #1
 80063c0:	e00d      	b.n	80063de <VibeCheckShell_GetOutput+0x9e>
		}
		else
		{
			/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
			*output = &shell->output[tail];
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	f248 0310 	movw	r3, #32784	@ 0x8010
 80063c8:	4413      	add	r3, r2
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	441a      	add	r2, r3
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	601a      	str	r2, [r3, #0]
			*len = VC_SHELL_IO_BUF_LEN - tail;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f5c3 4200 	rsb	r2, r3, #32768	@ 0x8000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	601a      	str	r2, [r3, #0]
			return 1;
 80063dc:	2301      	movs	r3, #1
		}
	}
}
 80063de:	4618      	mov	r0, r3
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <VibeCheckShell_UpdateOutputBuffer>:


void VibeCheckShell_UpdateOutputBuffer(VibeCheckShell* shell, uint32_t len)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
	/* length argument tells how many characters we successfully transmitted */

	/* update the tail of the output buffer now that we have confirmed transmission */
	shell->output_count -= len;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80063fa:	69da      	ldr	r2, [r3, #28]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8006406:	61d3      	str	r3, [r2, #28]
	shell->output_tail += len;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800640e:	695a      	ldr	r2, [r3, #20]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	4413      	add	r3, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 800641a:	6153      	str	r3, [r2, #20]

	if (shell->output_end)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00c      	beq.n	8006442 <VibeCheckShell_UpdateOutputBuffer+0x58>
	{
		/* sent a packet which ends in the wrapping boundary region */
		shell->output_end = 0;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800642e:	461a      	mov	r2, r3
 8006430:	2300      	movs	r3, #0
 8006432:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800643a:	461a      	mov	r2, r3
 800643c:	2300      	movs	r3, #0
 800643e:	6153      	str	r3, [r2, #20]
		if (shell->output_tail >= VC_SHELL_IO_BUF_LEN)
				shell->output_tail -= VC_SHELL_IO_BUF_LEN;  /* we tried to send a message that wrapped because it was bigger than the assumed maximum packet length */
	}


}
 8006440:	e010      	b.n	8006464 <VibeCheckShell_UpdateOutputBuffer+0x7a>
		if (shell->output_tail >= VC_SHELL_IO_BUF_LEN)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800644e:	d309      	bcc.n	8006464 <VibeCheckShell_UpdateOutputBuffer+0x7a>
				shell->output_tail -= VC_SHELL_IO_BUF_LEN;  /* we tried to send a message that wrapped because it was bigger than the assumed maximum packet length */
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8006462:	6153      	str	r3, [r2, #20]
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 800647c:	2300      	movs	r3, #0
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	e05f      	b.n	8006542 <VibeCheckShell_GetNextString+0xd2>
	{

		char x = shell->input[shell->input_tail];
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	5cd3      	ldrb	r3, [r2, r3]
 800648e:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 8006490:	7cfb      	ldrb	r3, [r7, #19]
 8006492:	4619      	mov	r1, r3
 8006494:	482f      	ldr	r0, [pc, #188]	@ (8006554 <VibeCheckShell_GetNextString+0xe4>)
 8006496:	f014 faf8 	bl	801aa8a <strchr>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d009      	beq.n	80064b4 <VibeCheckShell_GetNextString+0x44>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d004      	beq.n	80064b0 <VibeCheckShell_GetNextString+0x40>
			{
				*next = '\0';
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2200      	movs	r2, #0
 80064aa:	701a      	strb	r2, [r3, #0]
				return 1;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e04d      	b.n	800654c <VibeCheckShell_GetNextString+0xdc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 80064b0:	2300      	movs	r3, #0
 80064b2:	e04b      	b.n	800654c <VibeCheckShell_GetNextString+0xdc>
		}
		else
		{
			shell->input_count--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	3b01      	subs	r3, #1
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80064c4:	6093      	str	r3, [r2, #8]
			shell->input_tail++;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	3301      	adds	r3, #1
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80064d6:	6053      	str	r3, [r2, #4]
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064e4:	d105      	bne.n	80064f2 <VibeCheckShell_GetNextString+0x82>
				shell->input_tail = 0;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80064ec:	461a      	mov	r2, r3
 80064ee:	2300      	movs	r3, #0
 80064f0:	6053      	str	r3, [r2, #4]

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 80064f2:	7cfb      	ldrb	r3, [r7, #19]
 80064f4:	4619      	mov	r1, r3
 80064f6:	4818      	ldr	r0, [pc, #96]	@ (8006558 <VibeCheckShell_GetNextString+0xe8>)
 80064f8:	f014 fac7 	bl	801aa8a <strchr>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d007      	beq.n	8006512 <VibeCheckShell_GetNextString+0xa2>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d01c      	beq.n	8006542 <VibeCheckShell_GetNextString+0xd2>
				{
					*next = '\0';
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2200      	movs	r2, #0
 800650c:	701a      	strb	r2, [r3, #0]
					return 1;
 800650e:	2301      	movs	r3, #1
 8006510:	e01c      	b.n	800654c <VibeCheckShell_GetNextString+0xdc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 8006512:	7cfb      	ldrb	r3, [r7, #19]
 8006514:	74bb      	strb	r3, [r7, #18]
 8006516:	7cbb      	ldrb	r3, [r7, #18]
 8006518:	3301      	adds	r3, #1
 800651a:	4a10      	ldr	r2, [pc, #64]	@ (800655c <VibeCheckShell_GetNextString+0xec>)
 800651c:	4413      	add	r3, r2
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	2b01      	cmp	r3, #1
 8006526:	d103      	bne.n	8006530 <VibeCheckShell_GetNextString+0xc0>
 8006528:	7cbb      	ldrb	r3, [r7, #18]
 800652a:	f103 0220 	add.w	r2, r3, #32
 800652e:	e000      	b.n	8006532 <VibeCheckShell_GetNextString+0xc2>
 8006530:	7cba      	ldrb	r2, [r7, #18]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	1c59      	adds	r1, r3, #1
 8006536:	60b9      	str	r1, [r7, #8]
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
				i++;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	3301      	adds	r3, #1
 8006540:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	429a      	cmp	r2, r3
 8006548:	d39b      	bcc.n	8006482 <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	0801e368 	.word	0x0801e368
 8006558:	0801e36c 	.word	0x0801e36c
 800655c:	0801ef68 	.word	0x0801ef68

08006560 <VibeCheckShell_GetNextInt>:


uint32_t VibeCheckShell_GetNextInt(VibeCheckShell* shell, int32_t* next)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b092      	sub	sp, #72	@ 0x48
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800656a:	f107 0308 	add.w	r3, r7, #8
 800656e:	2240      	movs	r2, #64	@ 0x40
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff ff7c 	bl	8006470 <VibeCheckShell_GetNextString>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <VibeCheckShell_GetNextInt+0x2e>
	{
		return VibeCheckShell_TurnToInt(str, next);
 800657e:	f107 0308 	add.w	r3, r7, #8
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f000 f823 	bl	80065d0 <VibeCheckShell_TurnToInt>
 800658a:	4603      	mov	r3, r0
 800658c:	e000      	b.n	8006590 <VibeCheckShell_GetNextInt+0x30>
	}

	return 0;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3748      	adds	r7, #72	@ 0x48
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <VibeCheckShell_GetNextFloat>:


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b092      	sub	sp, #72	@ 0x48
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80065a2:	f107 0308 	add.w	r3, r7, #8
 80065a6:	2240      	movs	r2, #64	@ 0x40
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff ff60 	bl	8006470 <VibeCheckShell_GetNextString>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d007      	beq.n	80065c6 <VibeCheckShell_GetNextFloat+0x2e>
	{
		return VibeCheckShell_TurnToFloat(str, next);
 80065b6:	f107 0308 	add.w	r3, r7, #8
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 f83d 	bl	800663c <VibeCheckShell_TurnToFloat>
 80065c2:	4603      	mov	r3, r0
 80065c4:	e000      	b.n	80065c8 <VibeCheckShell_GetNextFloat+0x30>
	}

	return 0;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3748      	adds	r7, #72	@ 0x48
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <VibeCheckShell_TurnToInt>:

/* if the type of the next token is not known, get it as a string and then try to convert it to numeric using these functions */
uint32_t VibeCheckShell_TurnToInt(char* str, int32_t* next)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
	char valid[] = "-0123456789";
 80065da:	4a17      	ldr	r2, [pc, #92]	@ (8006638 <VibeCheckShell_TurnToInt+0x68>)
 80065dc:	f107 0308 	add.w	r3, r7, #8
 80065e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80065e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint32_t i = 0; i < strlen(str); i++)
 80065e6:	2300      	movs	r3, #0
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	e012      	b.n	8006612 <VibeCheckShell_TurnToInt+0x42>
		if (strchr(valid, str[i]) == NULL)
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	4413      	add	r3, r2
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	f107 0308 	add.w	r3, r7, #8
 80065fa:	4611      	mov	r1, r2
 80065fc:	4618      	mov	r0, r3
 80065fe:	f014 fa44 	bl	801aa8a <strchr>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <VibeCheckShell_TurnToInt+0x3c>
			return 0;  /* next token contains non-numeric characters */
 8006608:	2300      	movs	r3, #0
 800660a:	e010      	b.n	800662e <VibeCheckShell_TurnToInt+0x5e>
	for (uint32_t i = 0; i < strlen(str); i++)
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	3301      	adds	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7f9 fedc 	bl	80003d0 <strlen>
 8006618:	4602      	mov	r2, r0
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	4293      	cmp	r3, r2
 800661e:	d3e5      	bcc.n	80065ec <VibeCheckShell_TurnToInt+0x1c>
	*next = atoi(str);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f012 fe88 	bl	8019336 <atoi>
 8006626:	4602      	mov	r2, r0
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	601a      	str	r2, [r3, #0]
	return 1;
 800662c:	2301      	movs	r3, #1
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	0801e370 	.word	0x0801e370

0800663c <VibeCheckShell_TurnToFloat>:

uint32_t VibeCheckShell_TurnToFloat(char* str, float* next)
{
 800663c:	b590      	push	{r4, r7, lr}
 800663e:	b089      	sub	sp, #36	@ 0x24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
	char valid[] = ".-0123456789";
 8006646:	4b19      	ldr	r3, [pc, #100]	@ (80066ac <VibeCheckShell_TurnToFloat+0x70>)
 8006648:	f107 040c 	add.w	r4, r7, #12
 800664c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800664e:	c407      	stmia	r4!, {r0, r1, r2}
 8006650:	7023      	strb	r3, [r4, #0]
	for (uint32_t i = 0; i < strlen(str); i++)
 8006652:	2300      	movs	r3, #0
 8006654:	61fb      	str	r3, [r7, #28]
 8006656:	e012      	b.n	800667e <VibeCheckShell_TurnToFloat+0x42>
		if (strchr(valid, str[i]) == NULL)
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	4413      	add	r3, r2
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	f107 030c 	add.w	r3, r7, #12
 8006666:	4611      	mov	r1, r2
 8006668:	4618      	mov	r0, r3
 800666a:	f014 fa0e 	bl	801aa8a <strchr>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <VibeCheckShell_TurnToFloat+0x3c>
			return 0;  /* next token contains non-numeric characters */
 8006674:	2300      	movs	r3, #0
 8006676:	e014      	b.n	80066a2 <VibeCheckShell_TurnToFloat+0x66>
	for (uint32_t i = 0; i < strlen(str); i++)
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	3301      	adds	r3, #1
 800667c:	61fb      	str	r3, [r7, #28]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7f9 fea6 	bl	80003d0 <strlen>
 8006684:	4602      	mov	r2, r0
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4293      	cmp	r3, r2
 800668a:	d3e5      	bcc.n	8006658 <VibeCheckShell_TurnToFloat+0x1c>
	*next = atof(str);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f012 fe4f 	bl	8019330 <atof>
 8006692:	eeb0 7b40 	vmov.f64	d7, d0
 8006696:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	edc3 7a00 	vstr	s15, [r3]
	return 1;
 80066a0:	2301      	movs	r3, #1
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3724      	adds	r7, #36	@ 0x24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd90      	pop	{r4, r7, pc}
 80066aa:	bf00      	nop
 80066ac:	0801e37c 	.word	0x0801e37c

080066b0 <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
	while (*str)
 80066ba:	e029      	b.n	8006710 <VibeCheckShell_PutOutputString+0x60>
	{
		shell->output[shell->output_head++] = *(str++);
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	1c53      	adds	r3, r2, #1
 80066c0:	603b      	str	r3, [r7, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	1c59      	adds	r1, r3, #1
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 80066d2:	6101      	str	r1, [r0, #16]
 80066d4:	7811      	ldrb	r1, [r2, #0]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	441a      	add	r2, r3
 80066da:	f248 0310 	movw	r3, #32784	@ 0x8010
 80066de:	4413      	add	r3, r2
 80066e0:	460a      	mov	r2, r1
 80066e2:	701a      	strb	r2, [r3, #0]
		shell->output_count++;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	3301      	adds	r3, #1
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 80066f4:	61d3      	str	r3, [r2, #28]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006702:	d105      	bne.n	8006710 <VibeCheckShell_PutOutputString+0x60>
			shell->output_head = 0;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800670a:	461a      	mov	r2, r3
 800670c:	2300      	movs	r3, #0
 800670e:	6113      	str	r3, [r2, #16]
	while (*str)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1d1      	bne.n	80066bc <VibeCheckShell_PutOutputString+0xc>
	}
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
	...

08006728 <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b092      	sub	sp, #72	@ 0x48
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 8006732:	f107 0308 	add.w	r3, r7, #8
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	4906      	ldr	r1, [pc, #24]	@ (8006754 <VibeCheckShell_PutOutputInt+0x2c>)
 800673a:	4618      	mov	r0, r3
 800673c:	f014 f93a 	bl	801a9b4 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8006740:	f107 0308 	add.w	r3, r7, #8
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff ffb2 	bl	80066b0 <VibeCheckShell_PutOutputString>
}
 800674c:	bf00      	nop
 800674e:	3748      	adds	r7, #72	@ 0x48
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	0801e38c 	.word	0x0801e38c

08006758 <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b092      	sub	sp, #72	@ 0x48
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%.3f", val);
 8006764:	edd7 7a00 	vldr	s15, [r7]
 8006768:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800676c:	f107 0008 	add.w	r0, r7, #8
 8006770:	ec53 2b17 	vmov	r2, r3, d7
 8006774:	4906      	ldr	r1, [pc, #24]	@ (8006790 <VibeCheckShell_PutOutputFloat+0x38>)
 8006776:	f014 f91d 	bl	801a9b4 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 800677a:	f107 0308 	add.w	r3, r7, #8
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff ff95 	bl	80066b0 <VibeCheckShell_PutOutputString>
}
 8006786:	bf00      	nop
 8006788:	3748      	adds	r7, #72	@ 0x48
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	0801e390 	.word	0x0801e390

08006794 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 800679c:	4903      	ldr	r1, [pc, #12]	@ (80067ac <VibeCheckShell_PutOutputSeparator+0x18>)
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff ff86 	bl	80066b0 <VibeCheckShell_PutOutputString>
}
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	0801e398 	.word	0x0801e398

080067b0 <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 80067b8:	4903      	ldr	r1, [pc, #12]	@ (80067c8 <VibeCheckShell_PutOutputDelimiter+0x18>)
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7ff ff78 	bl	80066b0 <VibeCheckShell_PutOutputString>
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	0801e368 	.word	0x0801e368

080067cc <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_DEFAULT_FREQ_HZ;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a15      	ldr	r2, [pc, #84]	@ (8006834 <VibeCheckStrobe_Init+0x68>)
 80067e0:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = VC_STROBE_DEFAULT_EXPOSURE_MS;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80067e8:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	60da      	str	r2, [r3, #12]
	strobe->is_running = 0;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	611a      	str	r2, [r3, #16]
	strobe->is_muted = 0;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	615a      	str	r2, [r3, #20]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f640 125f 	movw	r2, #2399	@ 0x95f
 8006808:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006810:	eeb0 0a67 	vmov.f32	s0, s15
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f8af 	bl	8006978 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006820:	eeb0 0a67 	vmov.f32	s0, s15
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f98d 	bl	8006b44 <VibeCheckStrobe_SetExposure>

}
 800682a:	bf00      	nop
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	42700000 	.word	0x42700000

08006838 <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	strobe->is_running = 1;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	611a      	str	r2, [r3, #16]
	if (!strobe->is_muted)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d116      	bne.n	800687c <VibeCheckStrobe_Start+0x44>
	{
		HAL_TIM_Base_Start_IT(strobe->htim);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f00b fcfc 	bl	8012250 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2100      	movs	r1, #0
 800685e:	4618      	mov	r0, r3
 8006860:	f00b fe0c 	bl	801247c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2104      	movs	r1, #4
 800686a:	4618      	mov	r0, r3
 800686c:	f00b fe06 	bl	801247c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2108      	movs	r1, #8
 8006876:	4618      	mov	r0, r3
 8006878:	f00b fe00 	bl	801247c <HAL_TIM_PWM_Start>
	}
}
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
	strobe->is_running = 0;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	611a      	str	r2, [r3, #16]
	if (!strobe->is_muted)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d116      	bne.n	80068c8 <VibeCheckStrobe_Stop+0x44>
	{
		HAL_TIM_Base_Stop_IT(strobe->htim);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f00b fd5c 	bl	801235c <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2100      	movs	r1, #0
 80068aa:	4618      	mov	r0, r3
 80068ac:	f00b ff02 	bl	80126b4 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2104      	movs	r1, #4
 80068b6:	4618      	mov	r0, r3
 80068b8:	f00b fefc 	bl	80126b4 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2108      	movs	r1, #8
 80068c2:	4618      	mov	r0, r3
 80068c4:	f00b fef6 	bl	80126b4 <HAL_TIM_PWM_Stop>
	}
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <VibeCheckStrobe_Mute>:

void VibeCheckStrobe_Mute(VibeCheckStrobe* strobe)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
	/* stop the lights without affecting the state */
	if (!strobe->is_muted)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d11d      	bne.n	800691c <VibeCheckStrobe_Mute+0x4c>
	{
		strobe->is_muted = 1;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	615a      	str	r2, [r3, #20]
		if (strobe->is_running)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d016      	beq.n	800691c <VibeCheckStrobe_Mute+0x4c>
		{
			HAL_TIM_Base_Stop_IT(strobe->htim);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f00b fd32 	bl	801235c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2100      	movs	r1, #0
 80068fe:	4618      	mov	r0, r3
 8006900:	f00b fed8 	bl	80126b4 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2104      	movs	r1, #4
 800690a:	4618      	mov	r0, r3
 800690c:	f00b fed2 	bl	80126b4 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2108      	movs	r1, #8
 8006916:	4618      	mov	r0, r3
 8006918:	f00b fecc 	bl	80126b4 <HAL_TIM_PWM_Stop>
		}
	}
}
 800691c:	bf00      	nop
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <VibeCheckStrobe_Unmute>:

void VibeCheckStrobe_Unmute(VibeCheckStrobe* strobe)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	if (strobe->is_muted)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01d      	beq.n	8006970 <VibeCheckStrobe_Unmute+0x4c>
	{
		strobe->is_muted = 0;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	615a      	str	r2, [r3, #20]
		if (strobe->is_running)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d016      	beq.n	8006970 <VibeCheckStrobe_Unmute+0x4c>
		{
			HAL_TIM_Base_Start_IT(strobe->htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	f00b fc82 	bl	8012250 <HAL_TIM_Base_Start_IT>
			HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2100      	movs	r1, #0
 8006952:	4618      	mov	r0, r3
 8006954:	f00b fd92 	bl	801247c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2104      	movs	r1, #4
 800695e:	4618      	mov	r0, r3
 8006960:	f00b fd8c 	bl	801247c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2108      	movs	r1, #8
 800696a:	4618      	mov	r0, r3
 800696c:	f00b fd86 	bl	801247c <HAL_TIM_PWM_Start>
		}
	}
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <VibeCheckStrobe_SetFrequency>:
{
	return strobe->is_running;
}

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 8006984:	edd7 7a00 	vldr	s15, [r7]
 8006988:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800698c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006994:	d502      	bpl.n	800699c <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8006996:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800699a:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 800699c:	edd7 7a00 	vldr	s15, [r7]
 80069a0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8006a0c <VibeCheckStrobe_SetFrequency+0x94>
 80069a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ac:	dd01      	ble.n	80069b2 <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 80069ae:	4b18      	ldr	r3, [pc, #96]	@ (8006a10 <VibeCheckStrobe_SetFrequency+0x98>)
 80069b0:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 80069b2:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8006a14 <VibeCheckStrobe_SetFrequency+0x9c>
 80069b6:	ed97 7a00 	vldr	s14, [r7]
 80069ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ca:	ee17 2a90 	vmov	r2, s15
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	619a      	str	r2, [r3, #24]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	ee07 3a90 	vmov	s15, r3
 80069da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069e6:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8006a14 <VibeCheckStrobe_SetFrequency+0x9c>
 80069ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6992      	ldr	r2, [r2, #24]
 80069fe:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	447a0000 	.word	0x447a0000
 8006a10:	447a0000 	.word	0x447a0000
 8006a14:	47c35000 	.word	0x47c35000

08006a18 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	ee07 3a90 	vmov	s15, r3
}
 8006a28:	eeb0 0a67 	vmov.f32	s0, s15
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
	...

08006a38 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 8006a44:	edd7 7a00 	vldr	s15, [r7]
 8006a48:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006b10 <VibeCheckStrobe_SetPhase+0xd8>
 8006a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a54:	d501      	bpl.n	8006a5a <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 8006a56:	4b2f      	ldr	r3, [pc, #188]	@ (8006b14 <VibeCheckStrobe_SetPhase+0xdc>)
 8006a58:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 8006a5a:	edd7 7a00 	vldr	s15, [r7]
 8006a5e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8006b18 <VibeCheckStrobe_SetPhase+0xe0>
 8006a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6a:	dd01      	ble.n	8006a70 <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 8006a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8006b1c <VibeCheckStrobe_SetPhase+0xe4>)
 8006a6e:	603b      	str	r3, [r7, #0]


	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	edd3 7a03 	vldr	s15, [r3, #12]
 8006a76:	ed97 7a00 	vldr	s14, [r7]
 8006a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a7e:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 8006a82:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a86:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006b20 <VibeCheckStrobe_SetPhase+0xe8>
 8006a8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aa2:	ee17 3a90 	vmov	r3, s15
 8006aa6:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d029      	beq.n	8006b02 <VibeCheckStrobe_SetPhase+0xca>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d125      	bne.n	8006b02 <VibeCheckStrobe_SetPhase+0xca>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d121      	bne.n	8006b02 <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	ed93 7a03 	vldr	s14, [r3, #12]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	ee07 3a90 	vmov	s15, r3
 8006ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ada:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006ade:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8006b20 <VibeCheckStrobe_SetPhase+0xe8>
 8006ae2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	699a      	ldr	r2, [r3, #24]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	441a      	add	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	621a      	str	r2, [r3, #32]
	}
}
 8006b02:	bf00      	nop
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	c3340000 	.word	0xc3340000
 8006b14:	c3340000 	.word	0xc3340000
 8006b18:	43340000 	.word	0x43340000
 8006b1c:	43340000 	.word	0x43340000
 8006b20:	43b40000 	.word	0x43b40000

08006b24 <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	ee07 3a90 	vmov	s15, r3
}
 8006b34:	eeb0 0a67 	vmov.f32	s0, s15
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
	...

08006b44 <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 8006b50:	edd7 7a00 	vldr	s15, [r7]
 8006b54:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006bd0 <VibeCheckStrobe_SetExposure+0x8c>
 8006b58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b5c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006bd4 <VibeCheckStrobe_SetExposure+0x90>
 8006b60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b68:	ee17 3a90 	vmov	r3, s15
 8006b6c:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d904      	bls.n	8006b86 <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b84:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	ee07 3a90 	vmov	s15, r3
 8006b8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b90:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8006bd4 <VibeCheckStrobe_SetExposure+0x90>
 8006b94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b98:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8006bd8 <VibeCheckStrobe_SetExposure+0x94>
 8006b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006bc4:	bf00      	nop
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	3a83126f 	.word	0x3a83126f
 8006bd4:	47c35000 	.word	0x47c35000
 8006bd8:	447a0000 	.word	0x447a0000

08006bdc <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	ee07 3a90 	vmov	s15, r3
}
 8006bec:	eeb0 0a67 	vmov.f32	s0, s15
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d008      	beq.n	8006c1c <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	6992      	ldr	r2, [r2, #24]
 8006c14:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	if (strobe->phase_change_pending)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	69d2      	ldr	r2, [r2, #28]
 8006c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	625a      	str	r2, [r3, #36]	@ 0x24
		strobe->phase_change_pending = 0;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	621a      	str	r2, [r3, #32]
	}
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b096      	sub	sp, #88	@ 0x58
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006c52:	f107 0318 	add.w	r3, r7, #24
 8006c56:	2240      	movs	r2, #64	@ 0x40
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6838      	ldr	r0, [r7, #0]
 8006c5c:	f7ff fc08 	bl	8006470 <VibeCheckShell_GetNextString>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d065      	beq.n	8006d32 <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 8006c66:	f107 0318 	add.w	r3, r7, #24
 8006c6a:	4934      	ldr	r1, [pc, #208]	@ (8006d3c <VibeCheckStrobeCMD_Set+0xf4>)
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7f9 fb4f 	bl	8000310 <strcmp>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d118      	bne.n	8006caa <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006c78:	f107 0314 	add.w	r3, r7, #20
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6838      	ldr	r0, [r7, #0]
 8006c80:	f7ff fc8a 	bl	8006598 <VibeCheckShell_GetNextFloat>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d053      	beq.n	8006d32 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 8006c8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8006c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff fe70 	bl	8006978 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006c98:	4929      	ldr	r1, [pc, #164]	@ (8006d40 <VibeCheckStrobeCMD_Set+0xf8>)
 8006c9a:	6838      	ldr	r0, [r7, #0]
 8006c9c:	f7ff fd08 	bl	80066b0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006ca0:	6838      	ldr	r0, [r7, #0]
 8006ca2:	f7ff fd85 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e044      	b.n	8006d34 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 8006caa:	f107 0318 	add.w	r3, r7, #24
 8006cae:	4925      	ldr	r1, [pc, #148]	@ (8006d44 <VibeCheckStrobeCMD_Set+0xfc>)
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7f9 fb2d 	bl	8000310 <strcmp>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d118      	bne.n	8006cee <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006cbc:	f107 0310 	add.w	r3, r7, #16
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6838      	ldr	r0, [r7, #0]
 8006cc4:	f7ff fc68 	bl	8006598 <VibeCheckShell_GetNextFloat>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d031      	beq.n	8006d32 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 8006cce:	edd7 7a04 	vldr	s15, [r7, #16]
 8006cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff feae 	bl	8006a38 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006cdc:	4918      	ldr	r1, [pc, #96]	@ (8006d40 <VibeCheckStrobeCMD_Set+0xf8>)
 8006cde:	6838      	ldr	r0, [r7, #0]
 8006ce0:	f7ff fce6 	bl	80066b0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006ce4:	6838      	ldr	r0, [r7, #0]
 8006ce6:	f7ff fd63 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e022      	b.n	8006d34 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 8006cee:	f107 0318 	add.w	r3, r7, #24
 8006cf2:	4915      	ldr	r1, [pc, #84]	@ (8006d48 <VibeCheckStrobeCMD_Set+0x100>)
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7f9 fb0b 	bl	8000310 <strcmp>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d118      	bne.n	8006d32 <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006d00:	f107 030c 	add.w	r3, r7, #12
 8006d04:	4619      	mov	r1, r3
 8006d06:	6838      	ldr	r0, [r7, #0]
 8006d08:	f7ff fc46 	bl	8006598 <VibeCheckShell_GetNextFloat>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00f      	beq.n	8006d32 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 8006d12:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d16:	eeb0 0a67 	vmov.f32	s0, s15
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff ff12 	bl	8006b44 <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006d20:	4907      	ldr	r1, [pc, #28]	@ (8006d40 <VibeCheckStrobeCMD_Set+0xf8>)
 8006d22:	6838      	ldr	r0, [r7, #0]
 8006d24:	f7ff fcc4 	bl	80066b0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006d28:	6838      	ldr	r0, [r7, #0]
 8006d2a:	f7ff fd41 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3758      	adds	r7, #88	@ 0x58
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	0801e39c 	.word	0x0801e39c
 8006d40:	0801e3a8 	.word	0x0801e3a8
 8006d44:	0801e3ac 	.word	0x0801e3ac
 8006d48:	0801e3b4 	.word	0x0801e3b4

08006d4c <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b092      	sub	sp, #72	@ 0x48
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006d56:	f107 0308 	add.w	r3, r7, #8
 8006d5a:	2240      	movs	r2, #64	@ 0x40
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6838      	ldr	r0, [r7, #0]
 8006d60:	f7ff fb86 	bl	8006470 <VibeCheckShell_GetNextString>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d05c      	beq.n	8006e24 <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 8006d6a:	f107 0308 	add.w	r3, r7, #8
 8006d6e:	4930      	ldr	r1, [pc, #192]	@ (8006e30 <VibeCheckStrobeCMD_Get+0xe4>)
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7f9 facd 	bl	8000310 <strcmp>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d115      	bne.n	8006da8 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006d7c:	492d      	ldr	r1, [pc, #180]	@ (8006e34 <VibeCheckStrobeCMD_Get+0xe8>)
 8006d7e:	6838      	ldr	r0, [r7, #0]
 8006d80:	f7ff fc96 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006d84:	6838      	ldr	r0, [r7, #0]
 8006d86:	f7ff fd05 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7ff fe44 	bl	8006a18 <VibeCheckStrobe_GetFrequency>
 8006d90:	eef0 7a40 	vmov.f32	s15, s0
 8006d94:	eeb0 0a67 	vmov.f32	s0, s15
 8006d98:	6838      	ldr	r0, [r7, #0]
 8006d9a:	f7ff fcdd 	bl	8006758 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006d9e:	6838      	ldr	r0, [r7, #0]
 8006da0:	f7ff fd06 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e03e      	b.n	8006e26 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 8006da8:	f107 0308 	add.w	r3, r7, #8
 8006dac:	4922      	ldr	r1, [pc, #136]	@ (8006e38 <VibeCheckStrobeCMD_Get+0xec>)
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7f9 faae 	bl	8000310 <strcmp>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d115      	bne.n	8006de6 <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006dba:	491e      	ldr	r1, [pc, #120]	@ (8006e34 <VibeCheckStrobeCMD_Get+0xe8>)
 8006dbc:	6838      	ldr	r0, [r7, #0]
 8006dbe:	f7ff fc77 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006dc2:	6838      	ldr	r0, [r7, #0]
 8006dc4:	f7ff fce6 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7ff feab 	bl	8006b24 <VibeCheckStrobe_GetPhase>
 8006dce:	eef0 7a40 	vmov.f32	s15, s0
 8006dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8006dd6:	6838      	ldr	r0, [r7, #0]
 8006dd8:	f7ff fcbe 	bl	8006758 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006ddc:	6838      	ldr	r0, [r7, #0]
 8006dde:	f7ff fce7 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e01f      	b.n	8006e26 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 8006de6:	f107 0308 	add.w	r3, r7, #8
 8006dea:	4914      	ldr	r1, [pc, #80]	@ (8006e3c <VibeCheckStrobeCMD_Get+0xf0>)
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7f9 fa8f 	bl	8000310 <strcmp>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d115      	bne.n	8006e24 <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006df8:	490e      	ldr	r1, [pc, #56]	@ (8006e34 <VibeCheckStrobeCMD_Get+0xe8>)
 8006dfa:	6838      	ldr	r0, [r7, #0]
 8006dfc:	f7ff fc58 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006e00:	6838      	ldr	r0, [r7, #0]
 8006e02:	f7ff fcc7 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7ff fee8 	bl	8006bdc <VibeCheckStrobe_GetExposure>
 8006e0c:	eef0 7a40 	vmov.f32	s15, s0
 8006e10:	eeb0 0a67 	vmov.f32	s0, s15
 8006e14:	6838      	ldr	r0, [r7, #0]
 8006e16:	f7ff fc9f 	bl	8006758 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006e1a:	6838      	ldr	r0, [r7, #0]
 8006e1c:	f7ff fcc8 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e000      	b.n	8006e26 <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3748      	adds	r7, #72	@ 0x48
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	0801e39c 	.word	0x0801e39c
 8006e34:	0801e3a8 	.word	0x0801e3a8
 8006e38:	0801e3ac 	.word	0x0801e3ac
 8006e3c:	0801e3b4 	.word	0x0801e3b4

08006e40 <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b094      	sub	sp, #80	@ 0x50
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006e4e:	f107 030c 	add.w	r3, r7, #12
 8006e52:	2240      	movs	r2, #64	@ 0x40
 8006e54:	4619      	mov	r1, r3
 8006e56:	6838      	ldr	r0, [r7, #0]
 8006e58:	f7ff fb0a 	bl	8006470 <VibeCheckShell_GetNextString>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d04d      	beq.n	8006efe <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 8006e62:	f107 030c 	add.w	r3, r7, #12
 8006e66:	4928      	ldr	r1, [pc, #160]	@ (8006f08 <VibeCheckStrobeCMD_Execute+0xc8>)
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7f9 fa51 	bl	8000310 <strcmp>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10b      	bne.n	8006e8c <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 8006e74:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006e76:	f7ff fcdf 	bl	8006838 <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8006e7a:	4924      	ldr	r1, [pc, #144]	@ (8006f0c <VibeCheckStrobeCMD_Execute+0xcc>)
 8006e7c:	6838      	ldr	r0, [r7, #0]
 8006e7e:	f7ff fc17 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006e82:	6838      	ldr	r0, [r7, #0]
 8006e84:	f7ff fc94 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e039      	b.n	8006f00 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 8006e8c:	f107 030c 	add.w	r3, r7, #12
 8006e90:	491f      	ldr	r1, [pc, #124]	@ (8006f10 <VibeCheckStrobeCMD_Execute+0xd0>)
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7f9 fa3c 	bl	8000310 <strcmp>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10b      	bne.n	8006eb6 <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 8006e9e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006ea0:	f7ff fcf0 	bl	8006884 <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8006ea4:	4919      	ldr	r1, [pc, #100]	@ (8006f0c <VibeCheckStrobeCMD_Execute+0xcc>)
 8006ea6:	6838      	ldr	r0, [r7, #0]
 8006ea8:	f7ff fc02 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006eac:	6838      	ldr	r0, [r7, #0]
 8006eae:	f7ff fc7f 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e024      	b.n	8006f00 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 8006eb6:	f107 030c 	add.w	r3, r7, #12
 8006eba:	4916      	ldr	r1, [pc, #88]	@ (8006f14 <VibeCheckStrobeCMD_Execute+0xd4>)
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7f9 fa27 	bl	8000310 <strcmp>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d108      	bne.n	8006eda <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006ecc:	f7ff febc 	bl	8006c48 <VibeCheckStrobeCMD_Set>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d013      	beq.n	8006efe <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e012      	b.n	8006f00 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 8006eda:	f107 030c 	add.w	r3, r7, #12
 8006ede:	490e      	ldr	r1, [pc, #56]	@ (8006f18 <VibeCheckStrobeCMD_Execute+0xd8>)
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7f9 fa15 	bl	8000310 <strcmp>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d108      	bne.n	8006efe <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006ef0:	f7ff ff2c 	bl	8006d4c <VibeCheckStrobeCMD_Get>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3750      	adds	r7, #80	@ 0x50
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	0801e3c0 	.word	0x0801e3c0
 8006f0c:	0801e3a8 	.word	0x0801e3a8
 8006f10:	0801e3c8 	.word	0x0801e3c8
 8006f14:	0801e3d0 	.word	0x0801e3d0
 8006f18:	0801e3d4 	.word	0x0801e3d4
 8006f1c:	00000000 	.word	0x00000000

08006f20 <ComputeSineWave>:

static const uint32_t demo_times1[] = {150,    150, 150,    150, 300,    150,    150,    300,    300,    300,    300,           300,   150,    150, 300,    150,       150, 300,    300,    150,   150,    300,        150,   150,    300,    300,    300,    300,        300,    150,   300,    150,   150,    150,    300,    150,    300,    150,    75,     75,   75,   75,  150,    150,    600};
static const float demo_freqs1[] =    {58.27,  185, 233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 277.18, 233.08,        0,     233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 51.91, 277.18, 233.08,     77.78, 311.13, 277.18, 233.08, 207.65, 0,          369.99, 415.3, 369.99, 415.3, 369.99,   0,    369.99, 466.16, 369.99, 466.16, 369.99, 0,  369.99, 0,   369.99,   0,   46.25};

static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	ed2d 8b02 	vpush	{d8}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	e032      	b.n	8006f9e <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 8006f38:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f3c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006f4e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8006fc0 <ComputeSineWave+0xa0>
 8006f52:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	ee07 3a90 	vmov	s15, r3
 8006f5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006f68:	eeb0 0b47 	vmov.f64	d0, d7
 8006f6c:	f016 fa70 	bl	801d450 <sin>
 8006f70:	eeb0 7b40 	vmov.f64	d7, d0
 8006f74:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006f78:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8006f7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f80:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8006fb8 <ComputeSineWave+0x98>
 8006f84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	1d1a      	adds	r2, r3, #4
 8006f8c:	60fa      	str	r2, [r7, #12]
 8006f8e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f92:	ee17 2a90 	vmov	r2, s15
 8006f96:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d3c8      	bcc.n	8006f38 <ComputeSineWave+0x18>
}
 8006fa6:	bf00      	nop
 8006fa8:	bf00      	nop
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	ecbd 8b02 	vpop	{d8}
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	f3af 8000 	nop.w
 8006fb8:	00000000 	.word	0x00000000
 8006fbc:	409ffe00 	.word	0x409ffe00
 8006fc0:	40490fd0 	.word	0x40490fd0

08006fc4 <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	e02c      	b.n	8007032 <ComputeSquareWave+0x6e>
		if (i < len / 2)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	085b      	lsrs	r3, r3, #1
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d212      	bcs.n	8007008 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 8006fe2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006fe6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fee:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8007048 <ComputeSquareWave+0x84>
 8006ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	1d1a      	adds	r2, r3, #4
 8006ffa:	60fa      	str	r2, [r7, #12]
 8006ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007000:	ee17 2a90 	vmov	r2, s15
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	e011      	b.n	800702c <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 8007008:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800700c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007014:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007048 <ComputeSquareWave+0x84>
 8007018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	1d1a      	adds	r2, r3, #4
 8007020:	60fa      	str	r2, [r7, #12]
 8007022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007026:	ee17 2a90 	vmov	r2, s15
 800702a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	3301      	adds	r3, #1
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	429a      	cmp	r2, r3
 8007038:	d3ce      	bcc.n	8006fd8 <ComputeSquareWave+0x14>
}
 800703a:	bf00      	nop
 800703c:	bf00      	nop
 800703e:	371c      	adds	r7, #28
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	44fff000 	.word	0x44fff000

0800704c <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 800705a:	2300      	movs	r3, #0
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	e052      	b.n	8007106 <ComputeSawWave+0xba>
		if (i < len / 2)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	085b      	lsrs	r3, r3, #1
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	429a      	cmp	r2, r3
 8007068:	d222      	bcs.n	80070b0 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	ee07 3a90 	vmov	s15, r3
 8007070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007074:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007078:	edd7 7a01 	vldr	s15, [r7, #4]
 800707c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800708a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800708e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007092:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007096:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800711c <ComputeSawWave+0xd0>
 800709a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	1d1a      	adds	r2, r3, #4
 80070a2:	60fa      	str	r2, [r7, #12]
 80070a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070a8:	ee17 2a90 	vmov	r2, s15
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	e027      	b.n	8007100 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 80070b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80070b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80070b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ca:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80070ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80070d2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	ee07 3a90 	vmov	s15, r3
 80070dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80070e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070e8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800711c <ComputeSawWave+0xd0>
 80070ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	1d1a      	adds	r2, r3, #4
 80070f4:	60fa      	str	r2, [r7, #12]
 80070f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070fa:	ee17 2a90 	vmov	r2, s15
 80070fe:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	3301      	adds	r3, #1
 8007104:	617b      	str	r3, [r7, #20]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	429a      	cmp	r2, r3
 800710c:	d3a8      	bcc.n	8007060 <ComputeSawWave+0x14>
}
 800710e:	bf00      	nop
 8007110:	bf00      	nop
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	44fff000 	.word	0x44fff000

08007120 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]
 8007132:	e082      	b.n	800723a <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	089b      	lsrs	r3, r3, #2
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	429a      	cmp	r2, r3
 800713c:	d221      	bcs.n	8007182 <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800714a:	edd7 7a01 	vldr	s15, [r7, #4]
 800714e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	ee07 3a90 	vmov	s15, r3
 8007158:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800715c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007160:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007164:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007168:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8007254 <ComputeTriangleWave+0x134>
 800716c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	1d1a      	adds	r2, r3, #4
 8007174:	60fa      	str	r2, [r7, #12]
 8007176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800717a:	ee17 2a90 	vmov	r2, s15
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	e058      	b.n	8007234 <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	4613      	mov	r3, r2
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	4413      	add	r3, r2
 800718a:	089b      	lsrs	r3, r3, #2
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	429a      	cmp	r2, r3
 8007190:	d227      	bcs.n	80071e2 <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 8007192:	edd7 7a01 	vldr	s15, [r7, #4]
 8007196:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800719a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800719e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80071b2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80071c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071c8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007254 <ComputeTriangleWave+0x134>
 80071cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	1d1a      	adds	r2, r3, #4
 80071d4:	60fa      	str	r2, [r7, #12]
 80071d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071da:	ee17 2a90 	vmov	r2, s15
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	e028      	b.n	8007234 <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 80071e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80071e6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80071ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007202:	edd7 7a01 	vldr	s15, [r7, #4]
 8007206:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	ee07 3a90 	vmov	s15, r3
 8007210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007214:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8007218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800721c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007254 <ComputeTriangleWave+0x134>
 8007220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	1d1a      	adds	r2, r3, #4
 8007228:	60fa      	str	r2, [r7, #12]
 800722a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800722e:	ee17 2a90 	vmov	r2, s15
 8007232:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	3301      	adds	r3, #1
 8007238:	617b      	str	r3, [r7, #20]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	429a      	cmp	r2, r3
 8007240:	f4ff af78 	bcc.w	8007134 <ComputeTriangleWave+0x14>
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	44fff000 	.word	0x44fff000

08007258 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	e008      	b.n	800727a <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	1d1a      	adds	r2, r3, #4
 800726c:	607a      	str	r2, [r7, #4]
 800726e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007272:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d3f2      	bcc.n	8007268 <ComputeNullWave+0x10>
}
 8007282:	bf00      	nop
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d044      	beq.n	8007330 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072ac:	7e1b      	ldrb	r3, [r3, #24]
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d844      	bhi.n	800733c <VibeCheckWaveGen_RecomputeWave+0xac>
 80072b2:	a201      	add	r2, pc, #4	@ (adr r2, 80072b8 <VibeCheckWaveGen_RecomputeWave+0x28>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	080072c9 	.word	0x080072c9
 80072bc:	080072e3 	.word	0x080072e3
 80072c0:	080072fd 	.word	0x080072fd
 80072c4:	08007317 	.word	0x08007317
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80072d2:	eeb0 0a67 	vmov.f32	s0, s15
 80072d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80072da:	6838      	ldr	r0, [r7, #0]
 80072dc:	f7ff fe20 	bl	8006f20 <ComputeSineWave>
			break;
 80072e0:	e02c      	b.n	800733c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80072ec:	eeb0 0a67 	vmov.f32	s0, s15
 80072f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80072f4:	6838      	ldr	r0, [r7, #0]
 80072f6:	f7ff fe65 	bl	8006fc4 <ComputeSquareWave>
			break;
 80072fa:	e01f      	b.n	800733c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007302:	edd3 7a08 	vldr	s15, [r3, #32]
 8007306:	eeb0 0a67 	vmov.f32	s0, s15
 800730a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800730e:	6838      	ldr	r0, [r7, #0]
 8007310:	f7ff fe9c 	bl	800704c <ComputeSawWave>
			break;
 8007314:	e012      	b.n	800733c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800731c:	edd3 7a08 	vldr	s15, [r3, #32]
 8007320:	eeb0 0a67 	vmov.f32	s0, s15
 8007324:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007328:	6838      	ldr	r0, [r7, #0]
 800732a:	f7ff fef9 	bl	8007120 <ComputeTriangleWave>
			break;
 800732e:	e005      	b.n	800733c <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 8007330:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007334:	6838      	ldr	r0, [r7, #0]
 8007336:	f7ff ff8f 	bl	8007258 <ComputeNullWave>
	}
}
 800733a:	e7ff      	b.n	800733c <VibeCheckWaveGen_RecomputeWave+0xac>
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af02      	add	r7, sp, #8
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = VC_WAVE_DEFAULT_FREQ_HZ;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007362:	461a      	mov	r2, r3
 8007364:	4b3c      	ldr	r3, [pc, #240]	@ (8007458 <VibeCheckWaveGen_Init+0x114>)
 8007366:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = VC_WAVE_DEFAULT_AMPLITUDE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800736e:	461a      	mov	r2, r3
 8007370:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8007374:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800737c:	2200      	movs	r2, #0
 800737e:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007386:	461a      	mov	r2, r3
 8007388:	2300      	movs	r3, #0
 800738a:	6253      	str	r3, [r2, #36]	@ 0x24

	wavegen->wave_ping_compute_pending = 0;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007392:	461a      	mov	r2, r3
 8007394:	2300      	movs	r3, #0
 8007396:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800739e:	461a      	mov	r2, r3
 80073a0:	2300      	movs	r3, #0
 80073a2:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073aa:	461a      	mov	r2, r3
 80073ac:	2300      	movs	r3, #0
 80073ae:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073b6:	461a      	mov	r2, r3
 80073b8:	2300      	movs	r3, #0
 80073ba:	6153      	str	r3, [r2, #20]

	wavegen->demo_num = 0;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073c2:	461a      	mov	r2, r3
 80073c4:	2300      	movs	r3, #0
 80073c6:	6293      	str	r3, [r2, #40]	@ 0x28

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	220b      	movs	r2, #11
 80073d0:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073d8:	edd3 7a07 	vldr	s15, [r3, #28]
 80073dc:	eeb0 0a67 	vmov.f32	s0, s15
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 f8db 	bl	800759c <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3308      	adds	r3, #8
 80073ea:	4619      	mov	r1, r3
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7ff ff4f 	bl	8007290 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80073f8:	4619      	mov	r1, r3
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f7ff ff48 	bl	8007290 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6858      	ldr	r0, [r3, #4]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f103 0208 	add.w	r2, r3, #8
 800740a:	2300      	movs	r3, #0
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007412:	2100      	movs	r1, #0
 8007414:	f002 fa4c 	bl	80098b0 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6858      	ldr	r0, [r3, #4]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f103 0208 	add.w	r2, r3, #8
 8007422:	2300      	movs	r3, #0
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800742a:	2110      	movs	r1, #16
 800742c:	f002 fa40 	bl	80098b0 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4618      	mov	r0, r3
 8007436:	f00a fe8d 	bl	8012154 <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 800743a:	2200      	movs	r2, #0
 800743c:	2108      	movs	r1, #8
 800743e:	4807      	ldr	r0, [pc, #28]	@ (800745c <VibeCheckWaveGen_Init+0x118>)
 8007440:	f004 ff60 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 8007444:	2200      	movs	r2, #0
 8007446:	2102      	movs	r1, #2
 8007448:	4804      	ldr	r0, [pc, #16]	@ (800745c <VibeCheckWaveGen_Init+0x118>)
 800744a:	f004 ff5b 	bl	800c304 <HAL_GPIO_WritePin>
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	42700000 	.word	0x42700000
 800745c:	58020000 	.word	0x58020000

08007460 <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	uint32_t time = HAL_GetTick();
 8007468:	f000 fcd4 	bl	8007e14 <HAL_GetTick>
 800746c:	60f8      	str	r0, [r7, #12]


	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00b      	beq.n	8007492 <VibeCheckWaveGen_Update+0x32>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3308      	adds	r3, #8
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7ff ff05 	bl	8007290 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800748c:	461a      	mov	r2, r3
 800748e:	2300      	movs	r3, #0
 8007490:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00c      	beq.n	80074b8 <VibeCheckWaveGen_Update+0x58>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7ff fef2 	bl	8007290 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074b2:	461a      	mov	r2, r3
 80074b4:	2300      	movs	r3, #0
 80074b6:	6153      	str	r3, [r2, #20]

	/*
	 * update the sequencer
	 */
	uint32_t seq_index;
	if (Sequencer_Update(&wavegen->sequencer, time, &seq_index))
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	f241 032c 	movw	r3, #4140	@ 0x102c
 80074be:	4413      	add	r3, r2
 80074c0:	f107 0208 	add.w	r2, r7, #8
 80074c4:	68f9      	ldr	r1, [r7, #12]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fa fec2 	bl	8002250 <Sequencer_Update>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d017      	beq.n	8007502 <VibeCheckWaveGen_Update+0xa2>
	{
		VibeCheckWaveGen_SetFrequency(wavegen, wavegen->demo_num ? demo_freqs1[seq_index] : demo_freqs0[seq_index]);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d006      	beq.n	80074ec <VibeCheckWaveGen_Update+0x8c>
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	4a0a      	ldr	r2, [pc, #40]	@ (800750c <VibeCheckWaveGen_Update+0xac>)
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	edd3 7a00 	vldr	s15, [r3]
 80074ea:	e005      	b.n	80074f8 <VibeCheckWaveGen_Update+0x98>
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	4a08      	ldr	r2, [pc, #32]	@ (8007510 <VibeCheckWaveGen_Update+0xb0>)
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	edd3 7a00 	vldr	s15, [r3]
 80074f8:	eeb0 0a67 	vmov.f32	s0, s15
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f84d 	bl	800759c <VibeCheckWaveGen_SetFrequency>
	}

}
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	0801ee30 	.word	0x0801ee30
 8007510:	0801ed14 	.word	0x0801ed14

08007514 <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007524:	2b00      	cmp	r3, #0
 8007526:	d111      	bne.n	800754c <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800752e:	461a      	mov	r2, r3
 8007530:	2301      	movs	r3, #1
 8007532:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800753a:	461a      	mov	r2, r3
 800753c:	2301      	movs	r3, #1
 800753e:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007546:	461a      	mov	r2, r3
 8007548:	2301      	movs	r3, #1
 800754a:	60d3      	str	r3, [r2, #12]
	}

}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007568:	2b00      	cmp	r3, #0
 800756a:	d011      	beq.n	8007590 <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007572:	461a      	mov	r2, r3
 8007574:	2300      	movs	r3, #0
 8007576:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800757e:	461a      	mov	r2, r3
 8007580:	2301      	movs	r3, #1
 8007582:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800758a:	461a      	mov	r2, r3
 800758c:	2301      	movs	r3, #1
 800758e:	60d3      	str	r3, [r2, #12]
	}
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 80075a8:	edd7 7a00 	vldr	s15, [r7]
 80075ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b4:	d502      	bpl.n	80075bc <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 80075b6:	f04f 0300 	mov.w	r3, #0
 80075ba:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 80075bc:	edd7 7a00 	vldr	s15, [r7]
 80075c0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800763c <VibeCheckWaveGen_SetFrequency+0xa0>
 80075c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075cc:	dd01      	ble.n	80075d2 <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 80075ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007640 <VibeCheckWaveGen_SetFrequency+0xa4>)
 80075d0:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 80075d2:	edd7 7a00 	vldr	s15, [r7]
 80075d6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8007644 <VibeCheckWaveGen_SetFrequency+0xa8>
 80075da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80075de:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8007648 <VibeCheckWaveGen_SetFrequency+0xac>
 80075e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f2:	ee17 3a90 	vmov	r3, s15
 80075f6:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007602:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007606:	ee77 7a87 	vadd.f32	s15, s15, s14
 800760a:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8007648 <VibeCheckWaveGen_SetFrequency+0xac>
 800760e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007612:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8007644 <VibeCheckWaveGen_SetFrequency+0xa8>
 8007616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007620:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800762e:	bf00      	nop
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	46989600 	.word	0x46989600
 8007640:	46989600 	.word	0x46989600
 8007644:	44000000 	.word	0x44000000
 8007648:	4b989680 	.word	0x4b989680

0800764c <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	ee07 3a90 	vmov	s15, r3
}
 8007660:	eeb0 0a67 	vmov.f32	s0, s15
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 800767a:	edd7 7a00 	vldr	s15, [r7]
 800767e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007686:	d502      	bpl.n	800768e <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 800768e:	edd7 7a00 	vldr	s15, [r7]
 8007692:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800769a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769e:	dd02      	ble.n	80076a6 <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 80076a0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80076a4:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ac:	461a      	mov	r2, r3
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076b8:	461a      	mov	r2, r3
 80076ba:	2301      	movs	r3, #1
 80076bc:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076c4:	461a      	mov	r2, r3
 80076c6:	2301      	movs	r3, #1
 80076c8:	60d3      	str	r3, [r2, #12]
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	ee07 3a90 	vmov	s15, r3
}
 80076ea:	eeb0 0a67 	vmov.f32	s0, s15
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800770a:	461a      	mov	r2, r3
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007716:	461a      	mov	r2, r3
 8007718:	2301      	movs	r3, #1
 800771a:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007722:	461a      	mov	r2, r3
 8007724:	2301      	movs	r3, #1
 8007726:	60d3      	str	r3, [r2, #12]
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007742:	7e1b      	ldrb	r3, [r3, #24]
}
 8007744:	4618      	mov	r0, r3
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800776a:	461a      	mov	r2, r3
 800776c:	2300      	movs	r3, #0
 800776e:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007776:	461a      	mov	r2, r3
 8007778:	2301      	movs	r3, #1
 800777a:	6113      	str	r3, [r2, #16]
	}
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00b      	beq.n	80077b4 <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077a2:	461a      	mov	r2, r3
 80077a4:	2300      	movs	r3, #0
 80077a6:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077ae:	461a      	mov	r2, r3
 80077b0:	2301      	movs	r3, #1
 80077b2:	6153      	str	r3, [r2, #20]
	}
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <VibeCheckWaveGen_StartDemo>:



void VibeCheckWaveGen_StartDemo(VibeCheckWaveGen* wavegen)
{
 80077c0:	b590      	push	{r4, r7, lr}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	Sequencer_Init(&wavegen->sequencer);
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	f241 032c 	movw	r3, #4140	@ 0x102c
 80077ce:	4413      	add	r3, r2
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fa fd0b 	bl	80021ec <Sequencer_Init>
	if (wavegen->demo_num)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <VibeCheckWaveGen_StartDemo+0x36>
		Sequencer_SetSequence(&wavegen->sequencer, demo_times0, sizeof(demo_times0) / sizeof(demo_times0[0]), 1);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f241 002c 	movw	r0, #4140	@ 0x102c
 80077e8:	4418      	add	r0, r3
 80077ea:	2301      	movs	r3, #1
 80077ec:	221a      	movs	r2, #26
 80077ee:	4916      	ldr	r1, [pc, #88]	@ (8007848 <VibeCheckWaveGen_StartDemo+0x88>)
 80077f0:	f7fa fd18 	bl	8002224 <Sequencer_SetSequence>
 80077f4:	e008      	b.n	8007808 <VibeCheckWaveGen_StartDemo+0x48>
	else
		Sequencer_SetSequence(&wavegen->sequencer, demo_times1, sizeof(demo_times1) / sizeof(demo_times1[0]), 1);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f241 002c 	movw	r0, #4140	@ 0x102c
 80077fc:	4418      	add	r0, r3
 80077fe:	2301      	movs	r3, #1
 8007800:	222d      	movs	r2, #45	@ 0x2d
 8007802:	4912      	ldr	r1, [pc, #72]	@ (800784c <VibeCheckWaveGen_StartDemo+0x8c>)
 8007804:	f7fa fd0e 	bl	8002224 <Sequencer_SetSequence>
	wavegen->demo_num = !wavegen->demo_num;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800780e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007810:	2b00      	cmp	r3, #0
 8007812:	bf0c      	ite	eq
 8007814:	2301      	moveq	r3, #1
 8007816:	2300      	movne	r3, #0
 8007818:	b2db      	uxtb	r3, r3
 800781a:	461a      	mov	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007822:	629a      	str	r2, [r3, #40]	@ 0x28
	Sequencer_Start(&wavegen->sequencer, HAL_GetTick());
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f241 042c 	movw	r4, #4140	@ 0x102c
 800782a:	441c      	add	r4, r3
 800782c:	f000 faf2 	bl	8007e14 <HAL_GetTick>
 8007830:	4603      	mov	r3, r0
 8007832:	4619      	mov	r1, r3
 8007834:	4620      	mov	r0, r4
 8007836:	f7fa fd4d 	bl	80022d4 <Sequencer_Start>
	VibeCheckWaveGen_Start(wavegen);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff fe6a 	bl	8007514 <VibeCheckWaveGen_Start>
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	bd90      	pop	{r4, r7, pc}
 8007848:	0801ecac 	.word	0x0801ecac
 800784c:	0801ed7c 	.word	0x0801ed7c

08007850 <VibeCheckWaveGen_StopDemo>:

void VibeCheckWaveGen_StopDemo(VibeCheckWaveGen* wavegen)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Stop(wavegen);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff fe7d 	bl	8007558 <VibeCheckWaveGen_Stop>
	Sequencer_Stop(&wavegen->sequencer);
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	f241 032c 	movw	r3, #4140	@ 0x102c
 8007864:	4413      	add	r3, r2
 8007866:	4618      	mov	r0, r3
 8007868:	f7fa fd48 	bl	80022fc <Sequencer_Stop>
}
 800786c:	bf00      	nop
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b094      	sub	sp, #80	@ 0x50
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800787e:	f107 0310 	add.w	r3, r7, #16
 8007882:	2240      	movs	r2, #64	@ 0x40
 8007884:	4619      	mov	r1, r3
 8007886:	6838      	ldr	r0, [r7, #0]
 8007888:	f7fe fdf2 	bl	8006470 <VibeCheckShell_GetNextString>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 80b0 	beq.w	80079f4 <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 8007894:	f107 0310 	add.w	r3, r7, #16
 8007898:	4959      	ldr	r1, [pc, #356]	@ (8007a00 <VibeCheckWaveGenCMD_Set+0x18c>)
 800789a:	4618      	mov	r0, r3
 800789c:	f7f8 fd38 	bl	8000310 <strcmp>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d119      	bne.n	80078da <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80078a6:	f107 030c 	add.w	r3, r7, #12
 80078aa:	4619      	mov	r1, r3
 80078ac:	6838      	ldr	r0, [r7, #0]
 80078ae:	f7fe fe73 	bl	8006598 <VibeCheckShell_GetNextFloat>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 809d 	beq.w	80079f4 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 80078ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80078be:	eeb0 0a67 	vmov.f32	s0, s15
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff fe6a 	bl	800759c <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 80078c8:	494e      	ldr	r1, [pc, #312]	@ (8007a04 <VibeCheckWaveGenCMD_Set+0x190>)
 80078ca:	6838      	ldr	r0, [r7, #0]
 80078cc:	f7fe fef0 	bl	80066b0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80078d0:	6838      	ldr	r0, [r7, #0]
 80078d2:	f7fe ff6d 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e08d      	b.n	80079f6 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 80078da:	f107 0310 	add.w	r3, r7, #16
 80078de:	494a      	ldr	r1, [pc, #296]	@ (8007a08 <VibeCheckWaveGenCMD_Set+0x194>)
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7f8 fd15 	bl	8000310 <strcmp>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d118      	bne.n	800791e <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80078ec:	f107 0308 	add.w	r3, r7, #8
 80078f0:	4619      	mov	r1, r3
 80078f2:	6838      	ldr	r0, [r7, #0]
 80078f4:	f7fe fe50 	bl	8006598 <VibeCheckShell_GetNextFloat>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d07a      	beq.n	80079f4 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 80078fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8007902:	eeb0 0a67 	vmov.f32	s0, s15
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff feb1 	bl	800766e <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 800790c:	493d      	ldr	r1, [pc, #244]	@ (8007a04 <VibeCheckWaveGenCMD_Set+0x190>)
 800790e:	6838      	ldr	r0, [r7, #0]
 8007910:	f7fe fece 	bl	80066b0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8007914:	6838      	ldr	r0, [r7, #0]
 8007916:	f7fe ff4b 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800791a:	2301      	movs	r3, #1
 800791c:	e06b      	b.n	80079f6 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 800791e:	f107 0310 	add.w	r3, r7, #16
 8007922:	493a      	ldr	r1, [pc, #232]	@ (8007a0c <VibeCheckWaveGenCMD_Set+0x198>)
 8007924:	4618      	mov	r0, r3
 8007926:	f7f8 fcf3 	bl	8000310 <strcmp>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d161      	bne.n	80079f4 <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8007930:	f107 0310 	add.w	r3, r7, #16
 8007934:	2240      	movs	r2, #64	@ 0x40
 8007936:	4619      	mov	r1, r3
 8007938:	6838      	ldr	r0, [r7, #0]
 800793a:	f7fe fd99 	bl	8006470 <VibeCheckShell_GetNextString>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d057      	beq.n	80079f4 <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 8007944:	f107 0310 	add.w	r3, r7, #16
 8007948:	4931      	ldr	r1, [pc, #196]	@ (8007a10 <VibeCheckWaveGenCMD_Set+0x19c>)
 800794a:	4618      	mov	r0, r3
 800794c:	f7f8 fce0 	bl	8000310 <strcmp>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10c      	bne.n	8007970 <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 8007956:	2100      	movs	r1, #0
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff fecd 	bl	80076f8 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 800795e:	4929      	ldr	r1, [pc, #164]	@ (8007a04 <VibeCheckWaveGenCMD_Set+0x190>)
 8007960:	6838      	ldr	r0, [r7, #0]
 8007962:	f7fe fea5 	bl	80066b0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8007966:	6838      	ldr	r0, [r7, #0]
 8007968:	f7fe ff22 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800796c:	2301      	movs	r3, #1
 800796e:	e042      	b.n	80079f6 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 8007970:	f107 0310 	add.w	r3, r7, #16
 8007974:	4927      	ldr	r1, [pc, #156]	@ (8007a14 <VibeCheckWaveGenCMD_Set+0x1a0>)
 8007976:	4618      	mov	r0, r3
 8007978:	f7f8 fcca 	bl	8000310 <strcmp>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10c      	bne.n	800799c <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 8007982:	2101      	movs	r1, #1
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff feb7 	bl	80076f8 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 800798a:	491e      	ldr	r1, [pc, #120]	@ (8007a04 <VibeCheckWaveGenCMD_Set+0x190>)
 800798c:	6838      	ldr	r0, [r7, #0]
 800798e:	f7fe fe8f 	bl	80066b0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8007992:	6838      	ldr	r0, [r7, #0]
 8007994:	f7fe ff0c 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8007998:	2301      	movs	r3, #1
 800799a:	e02c      	b.n	80079f6 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 800799c:	f107 0310 	add.w	r3, r7, #16
 80079a0:	491d      	ldr	r1, [pc, #116]	@ (8007a18 <VibeCheckWaveGenCMD_Set+0x1a4>)
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7f8 fcb4 	bl	8000310 <strcmp>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10c      	bne.n	80079c8 <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 80079ae:	2102      	movs	r1, #2
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff fea1 	bl	80076f8 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 80079b6:	4913      	ldr	r1, [pc, #76]	@ (8007a04 <VibeCheckWaveGenCMD_Set+0x190>)
 80079b8:	6838      	ldr	r0, [r7, #0]
 80079ba:	f7fe fe79 	bl	80066b0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80079be:	6838      	ldr	r0, [r7, #0]
 80079c0:	f7fe fef6 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e016      	b.n	80079f6 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 80079c8:	f107 0310 	add.w	r3, r7, #16
 80079cc:	4913      	ldr	r1, [pc, #76]	@ (8007a1c <VibeCheckWaveGenCMD_Set+0x1a8>)
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7f8 fc9e 	bl	8000310 <strcmp>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10c      	bne.n	80079f4 <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 80079da:	2103      	movs	r1, #3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff fe8b 	bl	80076f8 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 80079e2:	4908      	ldr	r1, [pc, #32]	@ (8007a04 <VibeCheckWaveGenCMD_Set+0x190>)
 80079e4:	6838      	ldr	r0, [r7, #0]
 80079e6:	f7fe fe63 	bl	80066b0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80079ea:	6838      	ldr	r0, [r7, #0]
 80079ec:	f7fe fee0 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e000      	b.n	80079f6 <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3750      	adds	r7, #80	@ 0x50
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	0801e3d8 	.word	0x0801e3d8
 8007a04:	0801e3e4 	.word	0x0801e3e4
 8007a08:	0801e3e8 	.word	0x0801e3e8
 8007a0c:	0801e3f4 	.word	0x0801e3f4
 8007a10:	0801e400 	.word	0x0801e400
 8007a14:	0801e408 	.word	0x0801e408
 8007a18:	0801e410 	.word	0x0801e410
 8007a1c:	0801e414 	.word	0x0801e414

08007a20 <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b092      	sub	sp, #72	@ 0x48
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8007a2a:	f107 0308 	add.w	r3, r7, #8
 8007a2e:	2240      	movs	r2, #64	@ 0x40
 8007a30:	4619      	mov	r1, r3
 8007a32:	6838      	ldr	r0, [r7, #0]
 8007a34:	f7fe fd1c 	bl	8006470 <VibeCheckShell_GetNextString>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d077      	beq.n	8007b2e <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 8007a3e:	f107 0308 	add.w	r3, r7, #8
 8007a42:	493d      	ldr	r1, [pc, #244]	@ (8007b38 <VibeCheckWaveGenCMD_Get+0x118>)
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7f8 fc63 	bl	8000310 <strcmp>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d115      	bne.n	8007a7c <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8007a50:	493a      	ldr	r1, [pc, #232]	@ (8007b3c <VibeCheckWaveGenCMD_Get+0x11c>)
 8007a52:	6838      	ldr	r0, [r7, #0]
 8007a54:	f7fe fe2c 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8007a58:	6838      	ldr	r0, [r7, #0]
 8007a5a:	f7fe fe9b 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff fdf4 	bl	800764c <VibeCheckWaveGen_GetFrequency>
 8007a64:	eef0 7a40 	vmov.f32	s15, s0
 8007a68:	eeb0 0a67 	vmov.f32	s0, s15
 8007a6c:	6838      	ldr	r0, [r7, #0]
 8007a6e:	f7fe fe73 	bl	8006758 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8007a72:	6838      	ldr	r0, [r7, #0]
 8007a74:	f7fe fe9c 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e059      	b.n	8007b30 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 8007a7c:	f107 0308 	add.w	r3, r7, #8
 8007a80:	492f      	ldr	r1, [pc, #188]	@ (8007b40 <VibeCheckWaveGenCMD_Get+0x120>)
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7f8 fc44 	bl	8000310 <strcmp>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d115      	bne.n	8007aba <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8007a8e:	492b      	ldr	r1, [pc, #172]	@ (8007b3c <VibeCheckWaveGenCMD_Get+0x11c>)
 8007a90:	6838      	ldr	r0, [r7, #0]
 8007a92:	f7fe fe0d 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8007a96:	6838      	ldr	r0, [r7, #0]
 8007a98:	f7fe fe7c 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff fe1a 	bl	80076d6 <VibeCheckWaveGen_GetAmplitude>
 8007aa2:	eef0 7a40 	vmov.f32	s15, s0
 8007aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8007aaa:	6838      	ldr	r0, [r7, #0]
 8007aac:	f7fe fe54 	bl	8006758 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8007ab0:	6838      	ldr	r0, [r7, #0]
 8007ab2:	f7fe fe7d 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e03a      	b.n	8007b30 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 8007aba:	f107 0308 	add.w	r3, r7, #8
 8007abe:	4921      	ldr	r1, [pc, #132]	@ (8007b44 <VibeCheckWaveGenCMD_Get+0x124>)
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7f8 fc25 	bl	8000310 <strcmp>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d130      	bne.n	8007b2e <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8007acc:	491b      	ldr	r1, [pc, #108]	@ (8007b3c <VibeCheckWaveGenCMD_Get+0x11c>)
 8007ace:	6838      	ldr	r0, [r7, #0]
 8007ad0:	f7fe fdee 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8007ad4:	6838      	ldr	r0, [r7, #0]
 8007ad6:	f7fe fe5d 	bl	8006794 <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff fe2a 	bl	8007734 <VibeCheckWaveGen_GetWaveform>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d81e      	bhi.n	8007b24 <VibeCheckWaveGenCMD_Get+0x104>
 8007ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8007aec <VibeCheckWaveGenCMD_Get+0xcc>)
 8007ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aec:	08007afd 	.word	0x08007afd
 8007af0:	08007b07 	.word	0x08007b07
 8007af4:	08007b11 	.word	0x08007b11
 8007af8:	08007b1b 	.word	0x08007b1b
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 8007afc:	4912      	ldr	r1, [pc, #72]	@ (8007b48 <VibeCheckWaveGenCMD_Get+0x128>)
 8007afe:	6838      	ldr	r0, [r7, #0]
 8007b00:	f7fe fdd6 	bl	80066b0 <VibeCheckShell_PutOutputString>
				break;
 8007b04:	e00e      	b.n	8007b24 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 8007b06:	4911      	ldr	r1, [pc, #68]	@ (8007b4c <VibeCheckWaveGenCMD_Get+0x12c>)
 8007b08:	6838      	ldr	r0, [r7, #0]
 8007b0a:	f7fe fdd1 	bl	80066b0 <VibeCheckShell_PutOutputString>
				break;
 8007b0e:	e009      	b.n	8007b24 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 8007b10:	490f      	ldr	r1, [pc, #60]	@ (8007b50 <VibeCheckWaveGenCMD_Get+0x130>)
 8007b12:	6838      	ldr	r0, [r7, #0]
 8007b14:	f7fe fdcc 	bl	80066b0 <VibeCheckShell_PutOutputString>
				break;
 8007b18:	e004      	b.n	8007b24 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 8007b1a:	490e      	ldr	r1, [pc, #56]	@ (8007b54 <VibeCheckWaveGenCMD_Get+0x134>)
 8007b1c:	6838      	ldr	r0, [r7, #0]
 8007b1e:	f7fe fdc7 	bl	80066b0 <VibeCheckShell_PutOutputString>
				break;
 8007b22:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 8007b24:	6838      	ldr	r0, [r7, #0]
 8007b26:	f7fe fe43 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3748      	adds	r7, #72	@ 0x48
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	0801e3d8 	.word	0x0801e3d8
 8007b3c:	0801e3e4 	.word	0x0801e3e4
 8007b40:	0801e3e8 	.word	0x0801e3e8
 8007b44:	0801e3f4 	.word	0x0801e3f4
 8007b48:	0801e400 	.word	0x0801e400
 8007b4c:	0801e408 	.word	0x0801e408
 8007b50:	0801e410 	.word	0x0801e410
 8007b54:	0801e414 	.word	0x0801e414

08007b58 <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b094      	sub	sp, #80	@ 0x50
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8007b66:	f107 030c 	add.w	r3, r7, #12
 8007b6a:	2240      	movs	r2, #64	@ 0x40
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6838      	ldr	r0, [r7, #0]
 8007b70:	f7fe fc7e 	bl	8006470 <VibeCheckShell_GetNextString>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f000 808b 	beq.w	8007c92 <VibeCheckWaveGenCMD_Execute+0x13a>
	{
		if (!strcmp(str, "start"))
 8007b7c:	f107 030c 	add.w	r3, r7, #12
 8007b80:	4946      	ldr	r1, [pc, #280]	@ (8007c9c <VibeCheckWaveGenCMD_Execute+0x144>)
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7f8 fbc4 	bl	8000310 <strcmp>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10b      	bne.n	8007ba6 <VibeCheckWaveGenCMD_Execute+0x4e>
		{
			VibeCheckWaveGen_Start(wavegen);
 8007b8e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007b90:	f7ff fcc0 	bl	8007514 <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8007b94:	4942      	ldr	r1, [pc, #264]	@ (8007ca0 <VibeCheckWaveGenCMD_Execute+0x148>)
 8007b96:	6838      	ldr	r0, [r7, #0]
 8007b98:	f7fe fd8a 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8007b9c:	6838      	ldr	r0, [r7, #0]
 8007b9e:	f7fe fe07 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e076      	b.n	8007c94 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "stop"))
 8007ba6:	f107 030c 	add.w	r3, r7, #12
 8007baa:	493e      	ldr	r1, [pc, #248]	@ (8007ca4 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7f8 fbaf 	bl	8000310 <strcmp>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10b      	bne.n	8007bd0 <VibeCheckWaveGenCMD_Execute+0x78>
		{
			VibeCheckWaveGen_Stop(wavegen);
 8007bb8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007bba:	f7ff fccd 	bl	8007558 <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8007bbe:	4938      	ldr	r1, [pc, #224]	@ (8007ca0 <VibeCheckWaveGenCMD_Execute+0x148>)
 8007bc0:	6838      	ldr	r0, [r7, #0]
 8007bc2:	f7fe fd75 	bl	80066b0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8007bc6:	6838      	ldr	r0, [r7, #0]
 8007bc8:	f7fe fdf2 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e061      	b.n	8007c94 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "set"))
 8007bd0:	f107 030c 	add.w	r3, r7, #12
 8007bd4:	4934      	ldr	r1, [pc, #208]	@ (8007ca8 <VibeCheckWaveGenCMD_Execute+0x150>)
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7f8 fb9a 	bl	8000310 <strcmp>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d108      	bne.n	8007bf4 <VibeCheckWaveGenCMD_Execute+0x9c>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007be6:	f7ff fe45 	bl	8007874 <VibeCheckWaveGenCMD_Set>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d050      	beq.n	8007c92 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e04f      	b.n	8007c94 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "get"))
 8007bf4:	f107 030c 	add.w	r3, r7, #12
 8007bf8:	492c      	ldr	r1, [pc, #176]	@ (8007cac <VibeCheckWaveGenCMD_Execute+0x154>)
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7f8 fb88 	bl	8000310 <strcmp>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d108      	bne.n	8007c18 <VibeCheckWaveGenCMD_Execute+0xc0>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007c0a:	f7ff ff09 	bl	8007a20 <VibeCheckWaveGenCMD_Get>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d03e      	beq.n	8007c92 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e03d      	b.n	8007c94 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "demo"))
 8007c18:	f107 030c 	add.w	r3, r7, #12
 8007c1c:	4924      	ldr	r1, [pc, #144]	@ (8007cb0 <VibeCheckWaveGenCMD_Execute+0x158>)
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7f8 fb76 	bl	8000310 <strcmp>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d133      	bne.n	8007c92 <VibeCheckWaveGenCMD_Execute+0x13a>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8007c2a:	f107 030c 	add.w	r3, r7, #12
 8007c2e:	2240      	movs	r2, #64	@ 0x40
 8007c30:	4619      	mov	r1, r3
 8007c32:	6838      	ldr	r0, [r7, #0]
 8007c34:	f7fe fc1c 	bl	8006470 <VibeCheckShell_GetNextString>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d029      	beq.n	8007c92 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				if (!strcmp(str, "start"))
 8007c3e:	f107 030c 	add.w	r3, r7, #12
 8007c42:	4916      	ldr	r1, [pc, #88]	@ (8007c9c <VibeCheckWaveGenCMD_Execute+0x144>)
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7f8 fb63 	bl	8000310 <strcmp>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10b      	bne.n	8007c68 <VibeCheckWaveGenCMD_Execute+0x110>
				{
					VibeCheckWaveGen_StartDemo(wavegen);
 8007c50:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007c52:	f7ff fdb5 	bl	80077c0 <VibeCheckWaveGen_StartDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8007c56:	4912      	ldr	r1, [pc, #72]	@ (8007ca0 <VibeCheckWaveGenCMD_Execute+0x148>)
 8007c58:	6838      	ldr	r0, [r7, #0]
 8007c5a:	f7fe fd29 	bl	80066b0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8007c5e:	6838      	ldr	r0, [r7, #0]
 8007c60:	f7fe fda6 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e015      	b.n	8007c94 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
				else if (!strcmp(str, "stop"))
 8007c68:	f107 030c 	add.w	r3, r7, #12
 8007c6c:	490d      	ldr	r1, [pc, #52]	@ (8007ca4 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7f8 fb4e 	bl	8000310 <strcmp>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10b      	bne.n	8007c92 <VibeCheckWaveGenCMD_Execute+0x13a>
				{
					VibeCheckWaveGen_StopDemo(wavegen);
 8007c7a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007c7c:	f7ff fde8 	bl	8007850 <VibeCheckWaveGen_StopDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8007c80:	4907      	ldr	r1, [pc, #28]	@ (8007ca0 <VibeCheckWaveGenCMD_Execute+0x148>)
 8007c82:	6838      	ldr	r0, [r7, #0]
 8007c84:	f7fe fd14 	bl	80066b0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8007c88:	6838      	ldr	r0, [r7, #0]
 8007c8a:	f7fe fd91 	bl	80067b0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e000      	b.n	8007c94 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
			}
		}
	}

	return 0;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3750      	adds	r7, #80	@ 0x50
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	0801e420 	.word	0x0801e420
 8007ca0:	0801e3e4 	.word	0x0801e3e4
 8007ca4:	0801e428 	.word	0x0801e428
 8007ca8:	0801e430 	.word	0x0801e430
 8007cac:	0801e434 	.word	0x0801e434
 8007cb0:	0801e438 	.word	0x0801e438

08007cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007cb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007cec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007cb8:	f7fb f912 	bl	8002ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007cbc:	480c      	ldr	r0, [pc, #48]	@ (8007cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007cbe:	490d      	ldr	r1, [pc, #52]	@ (8007cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8007cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007cc4:	e002      	b.n	8007ccc <LoopCopyDataInit>

08007cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007cca:	3304      	adds	r3, #4

08007ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007cd0:	d3f9      	bcc.n	8007cc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8007cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8007d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007cd8:	e001      	b.n	8007cde <LoopFillZerobss>

08007cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007cdc:	3204      	adds	r2, #4

08007cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ce0:	d3fb      	bcc.n	8007cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007ce2:	f012 ff41 	bl	801ab68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007ce6:	f7f9 fb27 	bl	8001338 <main>
  bx  lr
 8007cea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007cec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8007cf0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007cf4:	240002fc 	.word	0x240002fc
  ldr r2, =_sidata
 8007cf8:	0801f660 	.word	0x0801f660
  ldr r2, =_sbss
 8007cfc:	240002fc 	.word	0x240002fc
  ldr r4, =_ebss
 8007d00:	2401da40 	.word	0x2401da40

08007d04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007d04:	e7fe      	b.n	8007d04 <ADC3_IRQHandler>
	...

08007d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d0e:	2003      	movs	r0, #3
 8007d10:	f001 fcf4 	bl	80096fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d14:	f006 fcd6 	bl	800e6c4 <HAL_RCC_GetSysClockFreq>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	4b15      	ldr	r3, [pc, #84]	@ (8007d70 <HAL_Init+0x68>)
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	0a1b      	lsrs	r3, r3, #8
 8007d20:	f003 030f 	and.w	r3, r3, #15
 8007d24:	4913      	ldr	r1, [pc, #76]	@ (8007d74 <HAL_Init+0x6c>)
 8007d26:	5ccb      	ldrb	r3, [r1, r3]
 8007d28:	f003 031f 	and.w	r3, r3, #31
 8007d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d32:	4b0f      	ldr	r3, [pc, #60]	@ (8007d70 <HAL_Init+0x68>)
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8007d74 <HAL_Init+0x6c>)
 8007d3c:	5cd3      	ldrb	r3, [r2, r3]
 8007d3e:	f003 031f 	and.w	r3, r3, #31
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	fa22 f303 	lsr.w	r3, r2, r3
 8007d48:	4a0b      	ldr	r2, [pc, #44]	@ (8007d78 <HAL_Init+0x70>)
 8007d4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8007d7c <HAL_Init+0x74>)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007d52:	2002      	movs	r0, #2
 8007d54:	f000 f814 	bl	8007d80 <HAL_InitTick>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e002      	b.n	8007d68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007d62:	f7fa fae5 	bl	8002330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	58024400 	.word	0x58024400
 8007d74:	0801e474 	.word	0x0801e474
 8007d78:	24000004 	.word	0x24000004
 8007d7c:	24000000 	.word	0x24000000

08007d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007d88:	4b15      	ldr	r3, [pc, #84]	@ (8007de0 <HAL_InitTick+0x60>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e021      	b.n	8007dd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007d94:	4b13      	ldr	r3, [pc, #76]	@ (8007de4 <HAL_InitTick+0x64>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	4b11      	ldr	r3, [pc, #68]	@ (8007de0 <HAL_InitTick+0x60>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007daa:	4618      	mov	r0, r3
 8007dac:	f001 fcd9 	bl	8009762 <HAL_SYSTICK_Config>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e00e      	b.n	8007dd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b0f      	cmp	r3, #15
 8007dbe:	d80a      	bhi.n	8007dd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc8:	f001 fca3 	bl	8009712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007dcc:	4a06      	ldr	r2, [pc, #24]	@ (8007de8 <HAL_InitTick+0x68>)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	e000      	b.n	8007dd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	2400003c 	.word	0x2400003c
 8007de4:	24000000 	.word	0x24000000
 8007de8:	24000038 	.word	0x24000038

08007dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007df0:	4b06      	ldr	r3, [pc, #24]	@ (8007e0c <HAL_IncTick+0x20>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	461a      	mov	r2, r3
 8007df6:	4b06      	ldr	r3, [pc, #24]	@ (8007e10 <HAL_IncTick+0x24>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	4a04      	ldr	r2, [pc, #16]	@ (8007e10 <HAL_IncTick+0x24>)
 8007dfe:	6013      	str	r3, [r2, #0]
}
 8007e00:	bf00      	nop
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	2400003c 	.word	0x2400003c
 8007e10:	2401450c 	.word	0x2401450c

08007e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
  return uwTick;
 8007e18:	4b03      	ldr	r3, [pc, #12]	@ (8007e28 <HAL_GetTick+0x14>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	2401450c 	.word	0x2401450c

08007e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007e34:	f7ff ffee 	bl	8007e14 <HAL_GetTick>
 8007e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d005      	beq.n	8007e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e46:	4b0a      	ldr	r3, [pc, #40]	@ (8007e70 <HAL_Delay+0x44>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4413      	add	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007e52:	bf00      	nop
 8007e54:	f7ff ffde 	bl	8007e14 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d8f7      	bhi.n	8007e54 <HAL_Delay+0x28>
  {
  }
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	2400003c 	.word	0x2400003c

08007e74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	609a      	str	r2, [r3, #8]
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	609a      	str	r2, [r3, #8]
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b087      	sub	sp, #28
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
 8007ee8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3360      	adds	r3, #96	@ 0x60
 8007eee:	461a      	mov	r2, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	4a10      	ldr	r2, [pc, #64]	@ (8007f3c <LL_ADC_SetOffset+0x60>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d10b      	bne.n	8007f18 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8007f16:	e00b      	b.n	8007f30 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	430b      	orrs	r3, r1
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	601a      	str	r2, [r3, #0]
}
 8007f30:	bf00      	nop
 8007f32:	371c      	adds	r7, #28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	58026000 	.word	0x58026000

08007f40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	3360      	adds	r3, #96	@ 0x60
 8007f4e:	461a      	mov	r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f003 031f 	and.w	r3, r3, #31
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	fa01 f303 	lsl.w	r3, r1, r3
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	611a      	str	r2, [r3, #16]
}
 8007f92:	bf00      	nop
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
	...

08007fa0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4a0c      	ldr	r2, [pc, #48]	@ (8007fe0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00e      	beq.n	8007fd2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	3360      	adds	r3, #96	@ 0x60
 8007fb8:	461a      	mov	r2, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	601a      	str	r2, [r3, #0]
  }
}
 8007fd2:	bf00      	nop
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	58026000 	.word	0x58026000

08007fe4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8008024 <LL_ADC_SetOffsetSaturation+0x40>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d10e      	bne.n	8008016 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3360      	adds	r3, #96	@ 0x60
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	431a      	orrs	r2, r3
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8008016:	bf00      	nop
 8008018:	371c      	adds	r7, #28
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	58026000 	.word	0x58026000

08008028 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	4a0c      	ldr	r2, [pc, #48]	@ (8008068 <LL_ADC_SetOffsetSign+0x40>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d10e      	bne.n	800805a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3360      	adds	r3, #96	@ 0x60
 8008040:	461a      	mov	r2, r3
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	431a      	orrs	r2, r3
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800805a:	bf00      	nop
 800805c:	371c      	adds	r7, #28
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	58026000 	.word	0x58026000

0800806c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3360      	adds	r3, #96	@ 0x60
 800807c:	461a      	mov	r2, r3
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4a0c      	ldr	r2, [pc, #48]	@ (80080bc <LL_ADC_SetOffsetState+0x50>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d108      	bne.n	80080a0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	431a      	orrs	r2, r3
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800809e:	e007      	b.n	80080b0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	431a      	orrs	r2, r3
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	601a      	str	r2, [r3, #0]
}
 80080b0:	bf00      	nop
 80080b2:	371c      	adds	r7, #28
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	58026000 	.word	0x58026000

080080c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3330      	adds	r3, #48	@ 0x30
 80080d0:	461a      	mov	r2, r3
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	0a1b      	lsrs	r3, r3, #8
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	f003 030c 	and.w	r3, r3, #12
 80080dc:	4413      	add	r3, r2
 80080de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f003 031f 	and.w	r3, r3, #31
 80080ea:	211f      	movs	r1, #31
 80080ec:	fa01 f303 	lsl.w	r3, r1, r3
 80080f0:	43db      	mvns	r3, r3
 80080f2:	401a      	ands	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	0e9b      	lsrs	r3, r3, #26
 80080f8:	f003 011f 	and.w	r1, r3, #31
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f003 031f 	and.w	r3, r3, #31
 8008102:	fa01 f303 	lsl.w	r3, r1, r3
 8008106:	431a      	orrs	r2, r3
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800810c:	bf00      	nop
 800810e:	371c      	adds	r7, #28
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3314      	adds	r3, #20
 8008128:	461a      	mov	r2, r3
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	0e5b      	lsrs	r3, r3, #25
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	4413      	add	r3, r2
 8008136:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	0d1b      	lsrs	r3, r3, #20
 8008140:	f003 031f 	and.w	r3, r3, #31
 8008144:	2107      	movs	r1, #7
 8008146:	fa01 f303 	lsl.w	r3, r1, r3
 800814a:	43db      	mvns	r3, r3
 800814c:	401a      	ands	r2, r3
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	0d1b      	lsrs	r3, r3, #20
 8008152:	f003 031f 	and.w	r3, r3, #31
 8008156:	6879      	ldr	r1, [r7, #4]
 8008158:	fa01 f303 	lsl.w	r3, r1, r3
 800815c:	431a      	orrs	r2, r3
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008162:	bf00      	nop
 8008164:	371c      	adds	r7, #28
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
	...

08008170 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4a1a      	ldr	r2, [pc, #104]	@ (80081e8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d115      	bne.n	80081b0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008190:	43db      	mvns	r3, r3
 8008192:	401a      	ands	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f003 0318 	and.w	r3, r3, #24
 800819a:	4914      	ldr	r1, [pc, #80]	@ (80081ec <LL_ADC_SetChannelSingleDiff+0x7c>)
 800819c:	40d9      	lsrs	r1, r3
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	400b      	ands	r3, r1
 80081a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081a6:	431a      	orrs	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80081ae:	e014      	b.n	80081da <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081bc:	43db      	mvns	r3, r3
 80081be:	401a      	ands	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f003 0318 	and.w	r3, r3, #24
 80081c6:	4909      	ldr	r1, [pc, #36]	@ (80081ec <LL_ADC_SetChannelSingleDiff+0x7c>)
 80081c8:	40d9      	lsrs	r1, r3
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	400b      	ands	r3, r1
 80081ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081d2:	431a      	orrs	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80081da:	bf00      	nop
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	58026000 	.word	0x58026000
 80081ec:	000fffff 	.word	0x000fffff

080081f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689a      	ldr	r2, [r3, #8]
 80081fc:	4b04      	ldr	r3, [pc, #16]	@ (8008210 <LL_ADC_DisableDeepPowerDown+0x20>)
 80081fe:	4013      	ands	r3, r2
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6093      	str	r3, [r2, #8]
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	5fffffc0 	.word	0x5fffffc0

08008214 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008228:	d101      	bne.n	800822e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	4b05      	ldr	r3, [pc, #20]	@ (8008260 <LL_ADC_EnableInternalRegulator+0x24>)
 800824a:	4013      	ands	r3, r2
 800824c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	6fffffc0 	.word	0x6fffffc0

08008264 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008278:	d101      	bne.n	800827e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800827a:	2301      	movs	r3, #1
 800827c:	e000      	b.n	8008280 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b01      	cmp	r3, #1
 800829e:	d101      	bne.n	80082a4 <LL_ADC_IsEnabled+0x18>
 80082a0:	2301      	movs	r3, #1
 80082a2:	e000      	b.n	80082a6 <LL_ADC_IsEnabled+0x1a>
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f003 0304 	and.w	r3, r3, #4
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d101      	bne.n	80082ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80082c6:	2301      	movs	r3, #1
 80082c8:	e000      	b.n	80082cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f003 0308 	and.w	r3, r3, #8
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d101      	bne.n	80082f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80082ec:	2301      	movs	r3, #1
 80082ee:	e000      	b.n	80082f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
	...

08008300 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008300:	b590      	push	{r4, r7, lr}
 8008302:	b089      	sub	sp, #36	@ 0x24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800830c:	2300      	movs	r3, #0
 800830e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e1ee      	b.n	80086f8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008324:	2b00      	cmp	r3, #0
 8008326:	d109      	bne.n	800833c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7fa f81d 	bl	8002368 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff ff67 	bl	8008214 <LL_ADC_IsDeepPowerDownEnabled>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d004      	beq.n	8008356 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff ff4d 	bl	80081f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff ff82 	bl	8008264 <LL_ADC_IsInternalRegulatorEnabled>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d114      	bne.n	8008390 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4618      	mov	r0, r3
 800836c:	f7ff ff66 	bl	800823c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008370:	4b8e      	ldr	r3, [pc, #568]	@ (80085ac <HAL_ADC_Init+0x2ac>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	099b      	lsrs	r3, r3, #6
 8008376:	4a8e      	ldr	r2, [pc, #568]	@ (80085b0 <HAL_ADC_Init+0x2b0>)
 8008378:	fba2 2303 	umull	r2, r3, r2, r3
 800837c:	099b      	lsrs	r3, r3, #6
 800837e:	3301      	adds	r3, #1
 8008380:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008382:	e002      	b.n	800838a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	3b01      	subs	r3, #1
 8008388:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1f9      	bne.n	8008384 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4618      	mov	r0, r3
 8008396:	f7ff ff65 	bl	8008264 <LL_ADC_IsInternalRegulatorEnabled>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10d      	bne.n	80083bc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083a4:	f043 0210 	orr.w	r2, r3, #16
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083b0:	f043 0201 	orr.w	r2, r3, #1
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff ff76 	bl	80082b2 <LL_ADC_REG_IsConversionOngoing>
 80083c6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083cc:	f003 0310 	and.w	r3, r3, #16
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f040 8188 	bne.w	80086e6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f040 8184 	bne.w	80086e6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083e2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80083e6:	f043 0202 	orr.w	r2, r3, #2
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff ff4a 	bl	800828c <LL_ADC_IsEnabled>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d136      	bne.n	800846c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a6c      	ldr	r2, [pc, #432]	@ (80085b4 <HAL_ADC_Init+0x2b4>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d004      	beq.n	8008412 <HAL_ADC_Init+0x112>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a6a      	ldr	r2, [pc, #424]	@ (80085b8 <HAL_ADC_Init+0x2b8>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d10e      	bne.n	8008430 <HAL_ADC_Init+0x130>
 8008412:	4868      	ldr	r0, [pc, #416]	@ (80085b4 <HAL_ADC_Init+0x2b4>)
 8008414:	f7ff ff3a 	bl	800828c <LL_ADC_IsEnabled>
 8008418:	4604      	mov	r4, r0
 800841a:	4867      	ldr	r0, [pc, #412]	@ (80085b8 <HAL_ADC_Init+0x2b8>)
 800841c:	f7ff ff36 	bl	800828c <LL_ADC_IsEnabled>
 8008420:	4603      	mov	r3, r0
 8008422:	4323      	orrs	r3, r4
 8008424:	2b00      	cmp	r3, #0
 8008426:	bf0c      	ite	eq
 8008428:	2301      	moveq	r3, #1
 800842a:	2300      	movne	r3, #0
 800842c:	b2db      	uxtb	r3, r3
 800842e:	e008      	b.n	8008442 <HAL_ADC_Init+0x142>
 8008430:	4862      	ldr	r0, [pc, #392]	@ (80085bc <HAL_ADC_Init+0x2bc>)
 8008432:	f7ff ff2b 	bl	800828c <LL_ADC_IsEnabled>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	bf0c      	ite	eq
 800843c:	2301      	moveq	r3, #1
 800843e:	2300      	movne	r3, #0
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d012      	beq.n	800846c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a5a      	ldr	r2, [pc, #360]	@ (80085b4 <HAL_ADC_Init+0x2b4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d004      	beq.n	800845a <HAL_ADC_Init+0x15a>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a58      	ldr	r2, [pc, #352]	@ (80085b8 <HAL_ADC_Init+0x2b8>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d101      	bne.n	800845e <HAL_ADC_Init+0x15e>
 800845a:	4a59      	ldr	r2, [pc, #356]	@ (80085c0 <HAL_ADC_Init+0x2c0>)
 800845c:	e000      	b.n	8008460 <HAL_ADC_Init+0x160>
 800845e:	4a59      	ldr	r2, [pc, #356]	@ (80085c4 <HAL_ADC_Init+0x2c4>)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	4619      	mov	r1, r3
 8008466:	4610      	mov	r0, r2
 8008468:	f7ff fd04 	bl	8007e74 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a52      	ldr	r2, [pc, #328]	@ (80085bc <HAL_ADC_Init+0x2bc>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d129      	bne.n	80084ca <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	7e5b      	ldrb	r3, [r3, #25]
 800847a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8008480:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8008486:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	2b08      	cmp	r3, #8
 800848e:	d013      	beq.n	80084b8 <HAL_ADC_Init+0x1b8>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	2b0c      	cmp	r3, #12
 8008496:	d00d      	beq.n	80084b4 <HAL_ADC_Init+0x1b4>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	2b1c      	cmp	r3, #28
 800849e:	d007      	beq.n	80084b0 <HAL_ADC_Init+0x1b0>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	2b18      	cmp	r3, #24
 80084a6:	d101      	bne.n	80084ac <HAL_ADC_Init+0x1ac>
 80084a8:	2318      	movs	r3, #24
 80084aa:	e006      	b.n	80084ba <HAL_ADC_Init+0x1ba>
 80084ac:	2300      	movs	r3, #0
 80084ae:	e004      	b.n	80084ba <HAL_ADC_Init+0x1ba>
 80084b0:	2310      	movs	r3, #16
 80084b2:	e002      	b.n	80084ba <HAL_ADC_Init+0x1ba>
 80084b4:	2308      	movs	r3, #8
 80084b6:	e000      	b.n	80084ba <HAL_ADC_Init+0x1ba>
 80084b8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80084ba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084c2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80084c4:	4313      	orrs	r3, r2
 80084c6:	61bb      	str	r3, [r7, #24]
 80084c8:	e00e      	b.n	80084e8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7e5b      	ldrb	r3, [r3, #25]
 80084ce:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80084d4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80084da:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084e2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80084e4:	4313      	orrs	r3, r2
 80084e6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d106      	bne.n	8008500 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f6:	3b01      	subs	r3, #1
 80084f8:	045b      	lsls	r3, r3, #17
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008504:	2b00      	cmp	r3, #0
 8008506:	d009      	beq.n	800851c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008514:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	4313      	orrs	r3, r2
 800851a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a26      	ldr	r2, [pc, #152]	@ (80085bc <HAL_ADC_Init+0x2bc>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d115      	bne.n	8008552 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68da      	ldr	r2, [r3, #12]
 800852c:	4b26      	ldr	r3, [pc, #152]	@ (80085c8 <HAL_ADC_Init+0x2c8>)
 800852e:	4013      	ands	r3, r2
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	6812      	ldr	r2, [r2, #0]
 8008534:	69b9      	ldr	r1, [r7, #24]
 8008536:	430b      	orrs	r3, r1
 8008538:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	611a      	str	r2, [r3, #16]
 8008550:	e009      	b.n	8008566 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	4b1c      	ldr	r3, [pc, #112]	@ (80085cc <HAL_ADC_Init+0x2cc>)
 800855a:	4013      	ands	r3, r2
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	6812      	ldr	r2, [r2, #0]
 8008560:	69b9      	ldr	r1, [r7, #24]
 8008562:	430b      	orrs	r3, r1
 8008564:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f7ff fea1 	bl	80082b2 <LL_ADC_REG_IsConversionOngoing>
 8008570:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff feae 	bl	80082d8 <LL_ADC_INJ_IsConversionOngoing>
 800857c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	f040 808e 	bne.w	80086a2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f040 808a 	bne.w	80086a2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a0a      	ldr	r2, [pc, #40]	@ (80085bc <HAL_ADC_Init+0x2bc>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d11b      	bne.n	80085d0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	7e1b      	ldrb	r3, [r3, #24]
 800859c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80085a4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80085a6:	4313      	orrs	r3, r2
 80085a8:	61bb      	str	r3, [r7, #24]
 80085aa:	e018      	b.n	80085de <HAL_ADC_Init+0x2de>
 80085ac:	24000000 	.word	0x24000000
 80085b0:	053e2d63 	.word	0x053e2d63
 80085b4:	40022000 	.word	0x40022000
 80085b8:	40022100 	.word	0x40022100
 80085bc:	58026000 	.word	0x58026000
 80085c0:	40022300 	.word	0x40022300
 80085c4:	58026300 	.word	0x58026300
 80085c8:	fff04007 	.word	0xfff04007
 80085cc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	7e1b      	ldrb	r3, [r3, #24]
 80085d4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80085da:	4313      	orrs	r3, r2
 80085dc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68da      	ldr	r2, [r3, #12]
 80085e4:	4b46      	ldr	r3, [pc, #280]	@ (8008700 <HAL_ADC_Init+0x400>)
 80085e6:	4013      	ands	r3, r2
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	6812      	ldr	r2, [r2, #0]
 80085ec:	69b9      	ldr	r1, [r7, #24]
 80085ee:	430b      	orrs	r3, r1
 80085f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d137      	bne.n	800866c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008600:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a3f      	ldr	r2, [pc, #252]	@ (8008704 <HAL_ADC_Init+0x404>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d116      	bne.n	800863a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	691a      	ldr	r2, [r3, #16]
 8008612:	4b3d      	ldr	r3, [pc, #244]	@ (8008708 <HAL_ADC_Init+0x408>)
 8008614:	4013      	ands	r3, r2
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800861e:	4311      	orrs	r1, r2
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008624:	4311      	orrs	r1, r2
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800862a:	430a      	orrs	r2, r1
 800862c:	431a      	orrs	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f042 0201 	orr.w	r2, r2, #1
 8008636:	611a      	str	r2, [r3, #16]
 8008638:	e020      	b.n	800867c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	691a      	ldr	r2, [r3, #16]
 8008640:	4b32      	ldr	r3, [pc, #200]	@ (800870c <HAL_ADC_Init+0x40c>)
 8008642:	4013      	ands	r3, r2
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008648:	3a01      	subs	r2, #1
 800864a:	0411      	lsls	r1, r2, #16
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008650:	4311      	orrs	r1, r2
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008656:	4311      	orrs	r1, r2
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800865c:	430a      	orrs	r2, r1
 800865e:	431a      	orrs	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f042 0201 	orr.w	r2, r2, #1
 8008668:	611a      	str	r2, [r3, #16]
 800866a:	e007      	b.n	800867c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	691a      	ldr	r2, [r3, #16]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f022 0201 	bic.w	r2, r2, #1
 800867a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	430a      	orrs	r2, r1
 8008690:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a1b      	ldr	r2, [pc, #108]	@ (8008704 <HAL_ADC_Init+0x404>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d002      	beq.n	80086a2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fd67 	bl	8009170 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d10c      	bne.n	80086c4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b0:	f023 010f 	bic.w	r1, r3, #15
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	1e5a      	subs	r2, r3, #1
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80086c2:	e007      	b.n	80086d4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 020f 	bic.w	r2, r2, #15
 80086d2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086d8:	f023 0303 	bic.w	r3, r3, #3
 80086dc:	f043 0201 	orr.w	r2, r3, #1
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	661a      	str	r2, [r3, #96]	@ 0x60
 80086e4:	e007      	b.n	80086f6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086ea:	f043 0210 	orr.w	r2, r3, #16
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80086f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3724      	adds	r7, #36	@ 0x24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd90      	pop	{r4, r7, pc}
 8008700:	ffffbffc 	.word	0xffffbffc
 8008704:	58026000 	.word	0x58026000
 8008708:	fc00f81f 	.word	0xfc00f81f
 800870c:	fc00f81e 	.word	0xfc00f81e

08008710 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008710:	b590      	push	{r4, r7, lr}
 8008712:	b0b9      	sub	sp, #228	@ 0xe4
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800872a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	4aab      	ldr	r2, [pc, #684]	@ (80089e0 <HAL_ADC_ConfigChannel+0x2d0>)
 8008732:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800873a:	2b01      	cmp	r3, #1
 800873c:	d102      	bne.n	8008744 <HAL_ADC_ConfigChannel+0x34>
 800873e:	2302      	movs	r3, #2
 8008740:	f000 bcfe 	b.w	8009140 <HAL_ADC_ConfigChannel+0xa30>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4618      	mov	r0, r3
 8008752:	f7ff fdae 	bl	80082b2 <LL_ADC_REG_IsConversionOngoing>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	f040 84e2 	bne.w	8009122 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	db38      	blt.n	80087d8 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a9e      	ldr	r2, [pc, #632]	@ (80089e4 <HAL_ADC_ConfigChannel+0x2d4>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d033      	beq.n	80087d8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008778:	2b00      	cmp	r3, #0
 800877a:	d108      	bne.n	800878e <HAL_ADC_ConfigChannel+0x7e>
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	0e9b      	lsrs	r3, r3, #26
 8008782:	f003 031f 	and.w	r3, r3, #31
 8008786:	2201      	movs	r2, #1
 8008788:	fa02 f303 	lsl.w	r3, r2, r3
 800878c:	e01d      	b.n	80087ca <HAL_ADC_ConfigChannel+0xba>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800879a:	fa93 f3a3 	rbit	r3, r3
 800879e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80087a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80087a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80087aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80087b2:	2320      	movs	r3, #32
 80087b4:	e004      	b.n	80087c0 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80087b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80087ba:	fab3 f383 	clz	r3, r3
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	f003 031f 	and.w	r3, r3, #31
 80087c4:	2201      	movs	r2, #1
 80087c6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	6812      	ldr	r2, [r2, #0]
 80087ce:	69d1      	ldr	r1, [r2, #28]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	6812      	ldr	r2, [r2, #0]
 80087d4:	430b      	orrs	r3, r1
 80087d6:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6818      	ldr	r0, [r3, #0]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	6859      	ldr	r1, [r3, #4]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	f7ff fc6b 	bl	80080c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff fd5f 	bl	80082b2 <LL_ADC_REG_IsConversionOngoing>
 80087f4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fd6b 	bl	80082d8 <LL_ADC_INJ_IsConversionOngoing>
 8008802:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800880a:	2b00      	cmp	r3, #0
 800880c:	f040 8270 	bne.w	8008cf0 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008810:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008814:	2b00      	cmp	r3, #0
 8008816:	f040 826b 	bne.w	8008cf0 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6818      	ldr	r0, [r3, #0]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	6819      	ldr	r1, [r3, #0]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	461a      	mov	r2, r3
 8008828:	f7ff fc76 	bl	8008118 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a6c      	ldr	r2, [pc, #432]	@ (80089e4 <HAL_ADC_ConfigChannel+0x2d4>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d10d      	bne.n	8008852 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	695a      	ldr	r2, [r3, #20]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	08db      	lsrs	r3, r3, #3
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	fa02 f303 	lsl.w	r3, r2, r3
 800884c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008850:	e032      	b.n	80088b8 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008852:	4b65      	ldr	r3, [pc, #404]	@ (80089e8 <HAL_ADC_ConfigChannel+0x2d8>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800885a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800885e:	d10b      	bne.n	8008878 <HAL_ADC_ConfigChannel+0x168>
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	695a      	ldr	r2, [r3, #20]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	089b      	lsrs	r3, r3, #2
 800886c:	f003 0307 	and.w	r3, r3, #7
 8008870:	005b      	lsls	r3, r3, #1
 8008872:	fa02 f303 	lsl.w	r3, r2, r3
 8008876:	e01d      	b.n	80088b4 <HAL_ADC_ConfigChannel+0x1a4>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	f003 0310 	and.w	r3, r3, #16
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10b      	bne.n	800889e <HAL_ADC_ConfigChannel+0x18e>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	695a      	ldr	r2, [r3, #20]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	089b      	lsrs	r3, r3, #2
 8008892:	f003 0307 	and.w	r3, r3, #7
 8008896:	005b      	lsls	r3, r3, #1
 8008898:	fa02 f303 	lsl.w	r3, r2, r3
 800889c:	e00a      	b.n	80088b4 <HAL_ADC_ConfigChannel+0x1a4>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	695a      	ldr	r2, [r3, #20]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	089b      	lsrs	r3, r3, #2
 80088aa:	f003 0304 	and.w	r3, r3, #4
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	fa02 f303 	lsl.w	r3, r2, r3
 80088b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	2b04      	cmp	r3, #4
 80088be:	d048      	beq.n	8008952 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	6919      	ldr	r1, [r3, #16]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088d0:	f7ff fb04 	bl	8007edc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a42      	ldr	r2, [pc, #264]	@ (80089e4 <HAL_ADC_ConfigChannel+0x2d4>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d119      	bne.n	8008912 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6818      	ldr	r0, [r3, #0]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	6919      	ldr	r1, [r3, #16]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	461a      	mov	r2, r3
 80088ec:	f7ff fb9c 	bl	8008028 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6818      	ldr	r0, [r3, #0]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	6919      	ldr	r1, [r3, #16]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d102      	bne.n	8008908 <HAL_ADC_ConfigChannel+0x1f8>
 8008902:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008906:	e000      	b.n	800890a <HAL_ADC_ConfigChannel+0x1fa>
 8008908:	2300      	movs	r3, #0
 800890a:	461a      	mov	r2, r3
 800890c:	f7ff fb6a 	bl	8007fe4 <LL_ADC_SetOffsetSaturation>
 8008910:	e1ee      	b.n	8008cf0 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6818      	ldr	r0, [r3, #0]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	6919      	ldr	r1, [r3, #16]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008920:	2b01      	cmp	r3, #1
 8008922:	d102      	bne.n	800892a <HAL_ADC_ConfigChannel+0x21a>
 8008924:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008928:	e000      	b.n	800892c <HAL_ADC_ConfigChannel+0x21c>
 800892a:	2300      	movs	r3, #0
 800892c:	461a      	mov	r2, r3
 800892e:	f7ff fb37 	bl	8007fa0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6818      	ldr	r0, [r3, #0]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	6919      	ldr	r1, [r3, #16]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	7e1b      	ldrb	r3, [r3, #24]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d102      	bne.n	8008948 <HAL_ADC_ConfigChannel+0x238>
 8008942:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008946:	e000      	b.n	800894a <HAL_ADC_ConfigChannel+0x23a>
 8008948:	2300      	movs	r3, #0
 800894a:	461a      	mov	r2, r3
 800894c:	f7ff fb0e 	bl	8007f6c <LL_ADC_SetDataRightShift>
 8008950:	e1ce      	b.n	8008cf0 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a23      	ldr	r2, [pc, #140]	@ (80089e4 <HAL_ADC_ConfigChannel+0x2d4>)
 8008958:	4293      	cmp	r3, r2
 800895a:	f040 8181 	bne.w	8008c60 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2100      	movs	r1, #0
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff faeb 	bl	8007f40 <LL_ADC_GetOffsetChannel>
 800896a:	4603      	mov	r3, r0
 800896c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10a      	bne.n	800898a <HAL_ADC_ConfigChannel+0x27a>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2100      	movs	r1, #0
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff fae0 	bl	8007f40 <LL_ADC_GetOffsetChannel>
 8008980:	4603      	mov	r3, r0
 8008982:	0e9b      	lsrs	r3, r3, #26
 8008984:	f003 021f 	and.w	r2, r3, #31
 8008988:	e01e      	b.n	80089c8 <HAL_ADC_ConfigChannel+0x2b8>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2100      	movs	r1, #0
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff fad5 	bl	8007f40 <LL_ADC_GetOffsetChannel>
 8008996:	4603      	mov	r3, r0
 8008998:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800899c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80089a0:	fa93 f3a3 	rbit	r3, r3
 80089a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80089a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80089b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80089b8:	2320      	movs	r3, #32
 80089ba:	e004      	b.n	80089c6 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80089bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80089c0:	fab3 f383 	clz	r3, r3
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	461a      	mov	r2, r3
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10b      	bne.n	80089ec <HAL_ADC_ConfigChannel+0x2dc>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	0e9b      	lsrs	r3, r3, #26
 80089da:	f003 031f 	and.w	r3, r3, #31
 80089de:	e01e      	b.n	8008a1e <HAL_ADC_ConfigChannel+0x30e>
 80089e0:	47ff0000 	.word	0x47ff0000
 80089e4:	58026000 	.word	0x58026000
 80089e8:	5c001000 	.word	0x5c001000
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089f8:	fa93 f3a3 	rbit	r3, r3
 80089fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8008a00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8008a08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8008a10:	2320      	movs	r3, #32
 8008a12:	e004      	b.n	8008a1e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8008a14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008a18:	fab3 f383 	clz	r3, r3
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d106      	bne.n	8008a30 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2200      	movs	r2, #0
 8008a28:	2100      	movs	r1, #0
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7ff fb1e 	bl	800806c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2101      	movs	r1, #1
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff fa82 	bl	8007f40 <LL_ADC_GetOffsetChannel>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10a      	bne.n	8008a5c <HAL_ADC_ConfigChannel+0x34c>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff fa77 	bl	8007f40 <LL_ADC_GetOffsetChannel>
 8008a52:	4603      	mov	r3, r0
 8008a54:	0e9b      	lsrs	r3, r3, #26
 8008a56:	f003 021f 	and.w	r2, r3, #31
 8008a5a:	e01e      	b.n	8008a9a <HAL_ADC_ConfigChannel+0x38a>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2101      	movs	r1, #1
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff fa6c 	bl	8007f40 <LL_ADC_GetOffsetChannel>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a72:	fa93 f3a3 	rbit	r3, r3
 8008a76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8008a7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8008a82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8008a8a:	2320      	movs	r3, #32
 8008a8c:	e004      	b.n	8008a98 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8008a8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008a92:	fab3 f383 	clz	r3, r3
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	461a      	mov	r2, r3
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d105      	bne.n	8008ab2 <HAL_ADC_ConfigChannel+0x3a2>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	0e9b      	lsrs	r3, r3, #26
 8008aac:	f003 031f 	and.w	r3, r3, #31
 8008ab0:	e018      	b.n	8008ae4 <HAL_ADC_ConfigChannel+0x3d4>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008abe:	fa93 f3a3 	rbit	r3, r3
 8008ac2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8008ac6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008aca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8008ace:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8008ad6:	2320      	movs	r3, #32
 8008ad8:	e004      	b.n	8008ae4 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8008ada:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ade:	fab3 f383 	clz	r3, r3
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d106      	bne.n	8008af6 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2200      	movs	r2, #0
 8008aee:	2101      	movs	r1, #1
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7ff fabb 	bl	800806c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2102      	movs	r1, #2
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff fa1f 	bl	8007f40 <LL_ADC_GetOffsetChannel>
 8008b02:	4603      	mov	r3, r0
 8008b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10a      	bne.n	8008b22 <HAL_ADC_ConfigChannel+0x412>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2102      	movs	r1, #2
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7ff fa14 	bl	8007f40 <LL_ADC_GetOffsetChannel>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	0e9b      	lsrs	r3, r3, #26
 8008b1c:	f003 021f 	and.w	r2, r3, #31
 8008b20:	e01e      	b.n	8008b60 <HAL_ADC_ConfigChannel+0x450>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2102      	movs	r1, #2
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7ff fa09 	bl	8007f40 <LL_ADC_GetOffsetChannel>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b38:	fa93 f3a3 	rbit	r3, r3
 8008b3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8008b40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8008b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d101      	bne.n	8008b54 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8008b50:	2320      	movs	r3, #32
 8008b52:	e004      	b.n	8008b5e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8008b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b58:	fab3 f383 	clz	r3, r3
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d105      	bne.n	8008b78 <HAL_ADC_ConfigChannel+0x468>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	0e9b      	lsrs	r3, r3, #26
 8008b72:	f003 031f 	and.w	r3, r3, #31
 8008b76:	e014      	b.n	8008ba2 <HAL_ADC_ConfigChannel+0x492>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b80:	fa93 f3a3 	rbit	r3, r3
 8008b84:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8008b86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8008b8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008b94:	2320      	movs	r3, #32
 8008b96:	e004      	b.n	8008ba2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8008b98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b9c:	fab3 f383 	clz	r3, r3
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d106      	bne.n	8008bb4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2200      	movs	r2, #0
 8008bac:	2102      	movs	r1, #2
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff fa5c 	bl	800806c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2103      	movs	r1, #3
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff f9c0 	bl	8007f40 <LL_ADC_GetOffsetChannel>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10a      	bne.n	8008be0 <HAL_ADC_ConfigChannel+0x4d0>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2103      	movs	r1, #3
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7ff f9b5 	bl	8007f40 <LL_ADC_GetOffsetChannel>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	0e9b      	lsrs	r3, r3, #26
 8008bda:	f003 021f 	and.w	r2, r3, #31
 8008bde:	e017      	b.n	8008c10 <HAL_ADC_ConfigChannel+0x500>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2103      	movs	r1, #3
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff f9aa 	bl	8007f40 <LL_ADC_GetOffsetChannel>
 8008bec:	4603      	mov	r3, r0
 8008bee:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008bf2:	fa93 f3a3 	rbit	r3, r3
 8008bf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8008bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bfa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8008bfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8008c02:	2320      	movs	r3, #32
 8008c04:	e003      	b.n	8008c0e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8008c06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c08:	fab3 f383 	clz	r3, r3
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	461a      	mov	r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d105      	bne.n	8008c28 <HAL_ADC_ConfigChannel+0x518>
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	0e9b      	lsrs	r3, r3, #26
 8008c22:	f003 031f 	and.w	r3, r3, #31
 8008c26:	e011      	b.n	8008c4c <HAL_ADC_ConfigChannel+0x53c>
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c30:	fa93 f3a3 	rbit	r3, r3
 8008c34:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8008c36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c38:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8008c3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8008c40:	2320      	movs	r3, #32
 8008c42:	e003      	b.n	8008c4c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8008c44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c46:	fab3 f383 	clz	r3, r3
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d14f      	bne.n	8008cf0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2200      	movs	r2, #0
 8008c56:	2103      	movs	r1, #3
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7ff fa07 	bl	800806c <LL_ADC_SetOffsetState>
 8008c5e:	e047      	b.n	8008cf0 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	069b      	lsls	r3, r3, #26
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d107      	bne.n	8008c84 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008c82:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	069b      	lsls	r3, r3, #26
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d107      	bne.n	8008ca8 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008ca6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	069b      	lsls	r3, r3, #26
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d107      	bne.n	8008ccc <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008cca:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cd2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	069b      	lsls	r3, r3, #26
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d107      	bne.n	8008cf0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008cee:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7ff fac9 	bl	800828c <LL_ADC_IsEnabled>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f040 8219 	bne.w	8009134 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6818      	ldr	r0, [r3, #0]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	6819      	ldr	r1, [r3, #0]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	f7ff fa2e 	bl	8008170 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	4aa1      	ldr	r2, [pc, #644]	@ (8008fa0 <HAL_ADC_ConfigChannel+0x890>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	f040 812e 	bne.w	8008f7c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10b      	bne.n	8008d48 <HAL_ADC_ConfigChannel+0x638>
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	0e9b      	lsrs	r3, r3, #26
 8008d36:	3301      	adds	r3, #1
 8008d38:	f003 031f 	and.w	r3, r3, #31
 8008d3c:	2b09      	cmp	r3, #9
 8008d3e:	bf94      	ite	ls
 8008d40:	2301      	movls	r3, #1
 8008d42:	2300      	movhi	r3, #0
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	e019      	b.n	8008d7c <HAL_ADC_ConfigChannel+0x66c>
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d50:	fa93 f3a3 	rbit	r3, r3
 8008d54:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8008d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8008d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d101      	bne.n	8008d64 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8008d60:	2320      	movs	r3, #32
 8008d62:	e003      	b.n	8008d6c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8008d64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d66:	fab3 f383 	clz	r3, r3
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	f003 031f 	and.w	r3, r3, #31
 8008d72:	2b09      	cmp	r3, #9
 8008d74:	bf94      	ite	ls
 8008d76:	2301      	movls	r3, #1
 8008d78:	2300      	movhi	r3, #0
 8008d7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d079      	beq.n	8008e74 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d107      	bne.n	8008d9c <HAL_ADC_ConfigChannel+0x68c>
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	0e9b      	lsrs	r3, r3, #26
 8008d92:	3301      	adds	r3, #1
 8008d94:	069b      	lsls	r3, r3, #26
 8008d96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008d9a:	e015      	b.n	8008dc8 <HAL_ADC_ConfigChannel+0x6b8>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008da4:	fa93 f3a3 	rbit	r3, r3
 8008da8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8008daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dac:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8008dae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8008db4:	2320      	movs	r3, #32
 8008db6:	e003      	b.n	8008dc0 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8008db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dba:	fab3 f383 	clz	r3, r3
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	069b      	lsls	r3, r3, #26
 8008dc4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d109      	bne.n	8008de8 <HAL_ADC_ConfigChannel+0x6d8>
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	0e9b      	lsrs	r3, r3, #26
 8008dda:	3301      	adds	r3, #1
 8008ddc:	f003 031f 	and.w	r3, r3, #31
 8008de0:	2101      	movs	r1, #1
 8008de2:	fa01 f303 	lsl.w	r3, r1, r3
 8008de6:	e017      	b.n	8008e18 <HAL_ADC_ConfigChannel+0x708>
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008df0:	fa93 f3a3 	rbit	r3, r3
 8008df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8008df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008df8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8008dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8008e00:	2320      	movs	r3, #32
 8008e02:	e003      	b.n	8008e0c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8008e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e06:	fab3 f383 	clz	r3, r3
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	f003 031f 	and.w	r3, r3, #31
 8008e12:	2101      	movs	r1, #1
 8008e14:	fa01 f303 	lsl.w	r3, r1, r3
 8008e18:	ea42 0103 	orr.w	r1, r2, r3
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10a      	bne.n	8008e3e <HAL_ADC_ConfigChannel+0x72e>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	0e9b      	lsrs	r3, r3, #26
 8008e2e:	3301      	adds	r3, #1
 8008e30:	f003 021f 	and.w	r2, r3, #31
 8008e34:	4613      	mov	r3, r2
 8008e36:	005b      	lsls	r3, r3, #1
 8008e38:	4413      	add	r3, r2
 8008e3a:	051b      	lsls	r3, r3, #20
 8008e3c:	e018      	b.n	8008e70 <HAL_ADC_ConfigChannel+0x760>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e46:	fa93 f3a3 	rbit	r3, r3
 8008e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8008e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8008e56:	2320      	movs	r3, #32
 8008e58:	e003      	b.n	8008e62 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5c:	fab3 f383 	clz	r3, r3
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	3301      	adds	r3, #1
 8008e64:	f003 021f 	and.w	r2, r3, #31
 8008e68:	4613      	mov	r3, r2
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	4413      	add	r3, r2
 8008e6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e70:	430b      	orrs	r3, r1
 8008e72:	e07e      	b.n	8008f72 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d107      	bne.n	8008e90 <HAL_ADC_ConfigChannel+0x780>
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	0e9b      	lsrs	r3, r3, #26
 8008e86:	3301      	adds	r3, #1
 8008e88:	069b      	lsls	r3, r3, #26
 8008e8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008e8e:	e015      	b.n	8008ebc <HAL_ADC_ConfigChannel+0x7ac>
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e98:	fa93 f3a3 	rbit	r3, r3
 8008e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8008ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8008ea8:	2320      	movs	r3, #32
 8008eaa:	e003      	b.n	8008eb4 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8008eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eae:	fab3 f383 	clz	r3, r3
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	069b      	lsls	r3, r3, #26
 8008eb8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d109      	bne.n	8008edc <HAL_ADC_ConfigChannel+0x7cc>
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	0e9b      	lsrs	r3, r3, #26
 8008ece:	3301      	adds	r3, #1
 8008ed0:	f003 031f 	and.w	r3, r3, #31
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eda:	e017      	b.n	8008f0c <HAL_ADC_ConfigChannel+0x7fc>
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	fa93 f3a3 	rbit	r3, r3
 8008ee8:	61bb      	str	r3, [r7, #24]
  return result;
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8008ef4:	2320      	movs	r3, #32
 8008ef6:	e003      	b.n	8008f00 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	fab3 f383 	clz	r3, r3
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	3301      	adds	r3, #1
 8008f02:	f003 031f 	and.w	r3, r3, #31
 8008f06:	2101      	movs	r1, #1
 8008f08:	fa01 f303 	lsl.w	r3, r1, r3
 8008f0c:	ea42 0103 	orr.w	r1, r2, r3
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10d      	bne.n	8008f38 <HAL_ADC_ConfigChannel+0x828>
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	0e9b      	lsrs	r3, r3, #26
 8008f22:	3301      	adds	r3, #1
 8008f24:	f003 021f 	and.w	r2, r3, #31
 8008f28:	4613      	mov	r3, r2
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	4413      	add	r3, r2
 8008f2e:	3b1e      	subs	r3, #30
 8008f30:	051b      	lsls	r3, r3, #20
 8008f32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008f36:	e01b      	b.n	8008f70 <HAL_ADC_ConfigChannel+0x860>
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	fa93 f3a3 	rbit	r3, r3
 8008f44:	60fb      	str	r3, [r7, #12]
  return result;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8008f50:	2320      	movs	r3, #32
 8008f52:	e003      	b.n	8008f5c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	fab3 f383 	clz	r3, r3
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	f003 021f 	and.w	r2, r3, #31
 8008f62:	4613      	mov	r3, r2
 8008f64:	005b      	lsls	r3, r3, #1
 8008f66:	4413      	add	r3, r2
 8008f68:	3b1e      	subs	r3, #30
 8008f6a:	051b      	lsls	r3, r3, #20
 8008f6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008f70:	430b      	orrs	r3, r1
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	6892      	ldr	r2, [r2, #8]
 8008f76:	4619      	mov	r1, r3
 8008f78:	f7ff f8ce 	bl	8008118 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f280 80d7 	bge.w	8009134 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a06      	ldr	r2, [pc, #24]	@ (8008fa4 <HAL_ADC_ConfigChannel+0x894>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d004      	beq.n	8008f9a <HAL_ADC_ConfigChannel+0x88a>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a04      	ldr	r2, [pc, #16]	@ (8008fa8 <HAL_ADC_ConfigChannel+0x898>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d10a      	bne.n	8008fb0 <HAL_ADC_ConfigChannel+0x8a0>
 8008f9a:	4b04      	ldr	r3, [pc, #16]	@ (8008fac <HAL_ADC_ConfigChannel+0x89c>)
 8008f9c:	e009      	b.n	8008fb2 <HAL_ADC_ConfigChannel+0x8a2>
 8008f9e:	bf00      	nop
 8008fa0:	47ff0000 	.word	0x47ff0000
 8008fa4:	40022000 	.word	0x40022000
 8008fa8:	40022100 	.word	0x40022100
 8008fac:	40022300 	.word	0x40022300
 8008fb0:	4b65      	ldr	r3, [pc, #404]	@ (8009148 <HAL_ADC_ConfigChannel+0xa38>)
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fe ff84 	bl	8007ec0 <LL_ADC_GetCommonPathInternalCh>
 8008fb8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a62      	ldr	r2, [pc, #392]	@ (800914c <HAL_ADC_ConfigChannel+0xa3c>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d004      	beq.n	8008fd0 <HAL_ADC_ConfigChannel+0x8c0>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a61      	ldr	r2, [pc, #388]	@ (8009150 <HAL_ADC_ConfigChannel+0xa40>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d10e      	bne.n	8008fee <HAL_ADC_ConfigChannel+0x8de>
 8008fd0:	485e      	ldr	r0, [pc, #376]	@ (800914c <HAL_ADC_ConfigChannel+0xa3c>)
 8008fd2:	f7ff f95b 	bl	800828c <LL_ADC_IsEnabled>
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	485d      	ldr	r0, [pc, #372]	@ (8009150 <HAL_ADC_ConfigChannel+0xa40>)
 8008fda:	f7ff f957 	bl	800828c <LL_ADC_IsEnabled>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	4323      	orrs	r3, r4
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	bf0c      	ite	eq
 8008fe6:	2301      	moveq	r3, #1
 8008fe8:	2300      	movne	r3, #0
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	e008      	b.n	8009000 <HAL_ADC_ConfigChannel+0x8f0>
 8008fee:	4859      	ldr	r0, [pc, #356]	@ (8009154 <HAL_ADC_ConfigChannel+0xa44>)
 8008ff0:	f7ff f94c 	bl	800828c <LL_ADC_IsEnabled>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	bf0c      	ite	eq
 8008ffa:	2301      	moveq	r3, #1
 8008ffc:	2300      	movne	r3, #0
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 8084 	beq.w	800910e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a53      	ldr	r2, [pc, #332]	@ (8009158 <HAL_ADC_ConfigChannel+0xa48>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d132      	bne.n	8009076 <HAL_ADC_ConfigChannel+0x966>
 8009010:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009014:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d12c      	bne.n	8009076 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a4c      	ldr	r2, [pc, #304]	@ (8009154 <HAL_ADC_ConfigChannel+0xa44>)
 8009022:	4293      	cmp	r3, r2
 8009024:	f040 8086 	bne.w	8009134 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a47      	ldr	r2, [pc, #284]	@ (800914c <HAL_ADC_ConfigChannel+0xa3c>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d004      	beq.n	800903c <HAL_ADC_ConfigChannel+0x92c>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a46      	ldr	r2, [pc, #280]	@ (8009150 <HAL_ADC_ConfigChannel+0xa40>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d101      	bne.n	8009040 <HAL_ADC_ConfigChannel+0x930>
 800903c:	4a47      	ldr	r2, [pc, #284]	@ (800915c <HAL_ADC_ConfigChannel+0xa4c>)
 800903e:	e000      	b.n	8009042 <HAL_ADC_ConfigChannel+0x932>
 8009040:	4a41      	ldr	r2, [pc, #260]	@ (8009148 <HAL_ADC_ConfigChannel+0xa38>)
 8009042:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009046:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800904a:	4619      	mov	r1, r3
 800904c:	4610      	mov	r0, r2
 800904e:	f7fe ff24 	bl	8007e9a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009052:	4b43      	ldr	r3, [pc, #268]	@ (8009160 <HAL_ADC_ConfigChannel+0xa50>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	099b      	lsrs	r3, r3, #6
 8009058:	4a42      	ldr	r2, [pc, #264]	@ (8009164 <HAL_ADC_ConfigChannel+0xa54>)
 800905a:	fba2 2303 	umull	r2, r3, r2, r3
 800905e:	099b      	lsrs	r3, r3, #6
 8009060:	3301      	adds	r3, #1
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8009066:	e002      	b.n	800906e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	3b01      	subs	r3, #1
 800906c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1f9      	bne.n	8009068 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009074:	e05e      	b.n	8009134 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a3b      	ldr	r2, [pc, #236]	@ (8009168 <HAL_ADC_ConfigChannel+0xa58>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d120      	bne.n	80090c2 <HAL_ADC_ConfigChannel+0x9b2>
 8009080:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009084:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d11a      	bne.n	80090c2 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a30      	ldr	r2, [pc, #192]	@ (8009154 <HAL_ADC_ConfigChannel+0xa44>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d14e      	bne.n	8009134 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a2c      	ldr	r2, [pc, #176]	@ (800914c <HAL_ADC_ConfigChannel+0xa3c>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d004      	beq.n	80090aa <HAL_ADC_ConfigChannel+0x99a>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a2a      	ldr	r2, [pc, #168]	@ (8009150 <HAL_ADC_ConfigChannel+0xa40>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d101      	bne.n	80090ae <HAL_ADC_ConfigChannel+0x99e>
 80090aa:	4a2c      	ldr	r2, [pc, #176]	@ (800915c <HAL_ADC_ConfigChannel+0xa4c>)
 80090ac:	e000      	b.n	80090b0 <HAL_ADC_ConfigChannel+0x9a0>
 80090ae:	4a26      	ldr	r2, [pc, #152]	@ (8009148 <HAL_ADC_ConfigChannel+0xa38>)
 80090b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090b8:	4619      	mov	r1, r3
 80090ba:	4610      	mov	r0, r2
 80090bc:	f7fe feed 	bl	8007e9a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80090c0:	e038      	b.n	8009134 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a29      	ldr	r2, [pc, #164]	@ (800916c <HAL_ADC_ConfigChannel+0xa5c>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d133      	bne.n	8009134 <HAL_ADC_ConfigChannel+0xa24>
 80090cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d12d      	bne.n	8009134 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a1d      	ldr	r2, [pc, #116]	@ (8009154 <HAL_ADC_ConfigChannel+0xa44>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d128      	bne.n	8009134 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a19      	ldr	r2, [pc, #100]	@ (800914c <HAL_ADC_ConfigChannel+0xa3c>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d004      	beq.n	80090f6 <HAL_ADC_ConfigChannel+0x9e6>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a17      	ldr	r2, [pc, #92]	@ (8009150 <HAL_ADC_ConfigChannel+0xa40>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d101      	bne.n	80090fa <HAL_ADC_ConfigChannel+0x9ea>
 80090f6:	4a19      	ldr	r2, [pc, #100]	@ (800915c <HAL_ADC_ConfigChannel+0xa4c>)
 80090f8:	e000      	b.n	80090fc <HAL_ADC_ConfigChannel+0x9ec>
 80090fa:	4a13      	ldr	r2, [pc, #76]	@ (8009148 <HAL_ADC_ConfigChannel+0xa38>)
 80090fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009100:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009104:	4619      	mov	r1, r3
 8009106:	4610      	mov	r0, r2
 8009108:	f7fe fec7 	bl	8007e9a <LL_ADC_SetCommonPathInternalCh>
 800910c:	e012      	b.n	8009134 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009112:	f043 0220 	orr.w	r2, r3, #32
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8009120:	e008      	b.n	8009134 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009126:	f043 0220 	orr.w	r2, r3, #32
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800913c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8009140:	4618      	mov	r0, r3
 8009142:	37e4      	adds	r7, #228	@ 0xe4
 8009144:	46bd      	mov	sp, r7
 8009146:	bd90      	pop	{r4, r7, pc}
 8009148:	58026300 	.word	0x58026300
 800914c:	40022000 	.word	0x40022000
 8009150:	40022100 	.word	0x40022100
 8009154:	58026000 	.word	0x58026000
 8009158:	c7520000 	.word	0xc7520000
 800915c:	40022300 	.word	0x40022300
 8009160:	24000000 	.word	0x24000000
 8009164:	053e2d63 	.word	0x053e2d63
 8009168:	c3210000 	.word	0xc3210000
 800916c:	cb840000 	.word	0xcb840000

08009170 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a6c      	ldr	r2, [pc, #432]	@ (8009330 <ADC_ConfigureBoostMode+0x1c0>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d004      	beq.n	800918c <ADC_ConfigureBoostMode+0x1c>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a6b      	ldr	r2, [pc, #428]	@ (8009334 <ADC_ConfigureBoostMode+0x1c4>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d109      	bne.n	80091a0 <ADC_ConfigureBoostMode+0x30>
 800918c:	4b6a      	ldr	r3, [pc, #424]	@ (8009338 <ADC_ConfigureBoostMode+0x1c8>)
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009194:	2b00      	cmp	r3, #0
 8009196:	bf14      	ite	ne
 8009198:	2301      	movne	r3, #1
 800919a:	2300      	moveq	r3, #0
 800919c:	b2db      	uxtb	r3, r3
 800919e:	e008      	b.n	80091b2 <ADC_ConfigureBoostMode+0x42>
 80091a0:	4b66      	ldr	r3, [pc, #408]	@ (800933c <ADC_ConfigureBoostMode+0x1cc>)
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	bf14      	ite	ne
 80091ac:	2301      	movne	r3, #1
 80091ae:	2300      	moveq	r3, #0
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d01c      	beq.n	80091f0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80091b6:	f005 fbff 	bl	800e9b8 <HAL_RCC_GetHCLKFreq>
 80091ba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80091c4:	d010      	beq.n	80091e8 <ADC_ConfigureBoostMode+0x78>
 80091c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80091ca:	d873      	bhi.n	80092b4 <ADC_ConfigureBoostMode+0x144>
 80091cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091d0:	d002      	beq.n	80091d8 <ADC_ConfigureBoostMode+0x68>
 80091d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091d6:	d16d      	bne.n	80092b4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	0c1b      	lsrs	r3, r3, #16
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e4:	60fb      	str	r3, [r7, #12]
        break;
 80091e6:	e068      	b.n	80092ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	089b      	lsrs	r3, r3, #2
 80091ec:	60fb      	str	r3, [r7, #12]
        break;
 80091ee:	e064      	b.n	80092ba <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80091f0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80091f4:	f04f 0100 	mov.w	r1, #0
 80091f8:	f006 fdda 	bl	800fdb0 <HAL_RCCEx_GetPeriphCLKFreq>
 80091fc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8009206:	d051      	beq.n	80092ac <ADC_ConfigureBoostMode+0x13c>
 8009208:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800920c:	d854      	bhi.n	80092b8 <ADC_ConfigureBoostMode+0x148>
 800920e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8009212:	d047      	beq.n	80092a4 <ADC_ConfigureBoostMode+0x134>
 8009214:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8009218:	d84e      	bhi.n	80092b8 <ADC_ConfigureBoostMode+0x148>
 800921a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800921e:	d03d      	beq.n	800929c <ADC_ConfigureBoostMode+0x12c>
 8009220:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8009224:	d848      	bhi.n	80092b8 <ADC_ConfigureBoostMode+0x148>
 8009226:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800922a:	d033      	beq.n	8009294 <ADC_ConfigureBoostMode+0x124>
 800922c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009230:	d842      	bhi.n	80092b8 <ADC_ConfigureBoostMode+0x148>
 8009232:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8009236:	d029      	beq.n	800928c <ADC_ConfigureBoostMode+0x11c>
 8009238:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800923c:	d83c      	bhi.n	80092b8 <ADC_ConfigureBoostMode+0x148>
 800923e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009242:	d01a      	beq.n	800927a <ADC_ConfigureBoostMode+0x10a>
 8009244:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009248:	d836      	bhi.n	80092b8 <ADC_ConfigureBoostMode+0x148>
 800924a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800924e:	d014      	beq.n	800927a <ADC_ConfigureBoostMode+0x10a>
 8009250:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8009254:	d830      	bhi.n	80092b8 <ADC_ConfigureBoostMode+0x148>
 8009256:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800925a:	d00e      	beq.n	800927a <ADC_ConfigureBoostMode+0x10a>
 800925c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009260:	d82a      	bhi.n	80092b8 <ADC_ConfigureBoostMode+0x148>
 8009262:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009266:	d008      	beq.n	800927a <ADC_ConfigureBoostMode+0x10a>
 8009268:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800926c:	d824      	bhi.n	80092b8 <ADC_ConfigureBoostMode+0x148>
 800926e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009272:	d002      	beq.n	800927a <ADC_ConfigureBoostMode+0x10a>
 8009274:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009278:	d11e      	bne.n	80092b8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	0c9b      	lsrs	r3, r3, #18
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	fbb2 f3f3 	udiv	r3, r2, r3
 8009288:	60fb      	str	r3, [r7, #12]
        break;
 800928a:	e016      	b.n	80092ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	091b      	lsrs	r3, r3, #4
 8009290:	60fb      	str	r3, [r7, #12]
        break;
 8009292:	e012      	b.n	80092ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	095b      	lsrs	r3, r3, #5
 8009298:	60fb      	str	r3, [r7, #12]
        break;
 800929a:	e00e      	b.n	80092ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	099b      	lsrs	r3, r3, #6
 80092a0:	60fb      	str	r3, [r7, #12]
        break;
 80092a2:	e00a      	b.n	80092ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	09db      	lsrs	r3, r3, #7
 80092a8:	60fb      	str	r3, [r7, #12]
        break;
 80092aa:	e006      	b.n	80092ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	0a1b      	lsrs	r3, r3, #8
 80092b0:	60fb      	str	r3, [r7, #12]
        break;
 80092b2:	e002      	b.n	80092ba <ADC_ConfigureBoostMode+0x14a>
        break;
 80092b4:	bf00      	nop
 80092b6:	e000      	b.n	80092ba <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80092b8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	085b      	lsrs	r3, r3, #1
 80092be:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4a1f      	ldr	r2, [pc, #124]	@ (8009340 <ADC_ConfigureBoostMode+0x1d0>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d808      	bhi.n	80092da <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	689a      	ldr	r2, [r3, #8]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80092d6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80092d8:	e025      	b.n	8009326 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	4a19      	ldr	r2, [pc, #100]	@ (8009344 <ADC_ConfigureBoostMode+0x1d4>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d80a      	bhi.n	80092f8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80092f4:	609a      	str	r2, [r3, #8]
}
 80092f6:	e016      	b.n	8009326 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4a13      	ldr	r2, [pc, #76]	@ (8009348 <ADC_ConfigureBoostMode+0x1d8>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d80a      	bhi.n	8009316 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009312:	609a      	str	r2, [r3, #8]
}
 8009314:	e007      	b.n	8009326 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8009324:	609a      	str	r2, [r3, #8]
}
 8009326:	bf00      	nop
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	40022000 	.word	0x40022000
 8009334:	40022100 	.word	0x40022100
 8009338:	40022300 	.word	0x40022300
 800933c:	58026300 	.word	0x58026300
 8009340:	005f5e10 	.word	0x005f5e10
 8009344:	00bebc20 	.word	0x00bebc20
 8009348:	017d7840 	.word	0x017d7840

0800934c <LL_ADC_IsEnabled>:
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	2b01      	cmp	r3, #1
 800935e:	d101      	bne.n	8009364 <LL_ADC_IsEnabled+0x18>
 8009360:	2301      	movs	r3, #1
 8009362:	e000      	b.n	8009366 <LL_ADC_IsEnabled+0x1a>
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	370c      	adds	r7, #12
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <LL_ADC_REG_IsConversionOngoing>:
{
 8009372:	b480      	push	{r7}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f003 0304 	and.w	r3, r3, #4
 8009382:	2b04      	cmp	r3, #4
 8009384:	d101      	bne.n	800938a <LL_ADC_REG_IsConversionOngoing+0x18>
 8009386:	2301      	movs	r3, #1
 8009388:	e000      	b.n	800938c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009398:	b590      	push	{r4, r7, lr}
 800939a:	b0a3      	sub	sp, #140	@ 0x8c
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d101      	bne.n	80093b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80093b2:	2302      	movs	r3, #2
 80093b4:	e0c1      	b.n	800953a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80093be:	2300      	movs	r3, #0
 80093c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80093c2:	2300      	movs	r3, #0
 80093c4:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a5e      	ldr	r2, [pc, #376]	@ (8009544 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d102      	bne.n	80093d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80093d0:	4b5d      	ldr	r3, [pc, #372]	@ (8009548 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80093d2:	60fb      	str	r3, [r7, #12]
 80093d4:	e001      	b.n	80093da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80093d6:	2300      	movs	r3, #0
 80093d8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10b      	bne.n	80093f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093e4:	f043 0220 	orr.w	r2, r3, #32
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e0a0      	b.n	800953a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7ff ffb9 	bl	8009372 <LL_ADC_REG_IsConversionOngoing>
 8009400:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4618      	mov	r0, r3
 800940a:	f7ff ffb2 	bl	8009372 <LL_ADC_REG_IsConversionOngoing>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	f040 8081 	bne.w	8009518 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009416:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800941a:	2b00      	cmp	r3, #0
 800941c:	d17c      	bne.n	8009518 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a48      	ldr	r2, [pc, #288]	@ (8009544 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d004      	beq.n	8009432 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a46      	ldr	r2, [pc, #280]	@ (8009548 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d101      	bne.n	8009436 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8009432:	4b46      	ldr	r3, [pc, #280]	@ (800954c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8009434:	e000      	b.n	8009438 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009436:	4b46      	ldr	r3, [pc, #280]	@ (8009550 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8009438:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d039      	beq.n	80094b6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8009442:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	431a      	orrs	r2, r3
 8009450:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009452:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a3a      	ldr	r2, [pc, #232]	@ (8009544 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d004      	beq.n	8009468 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a39      	ldr	r2, [pc, #228]	@ (8009548 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d10e      	bne.n	8009486 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8009468:	4836      	ldr	r0, [pc, #216]	@ (8009544 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800946a:	f7ff ff6f 	bl	800934c <LL_ADC_IsEnabled>
 800946e:	4604      	mov	r4, r0
 8009470:	4835      	ldr	r0, [pc, #212]	@ (8009548 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009472:	f7ff ff6b 	bl	800934c <LL_ADC_IsEnabled>
 8009476:	4603      	mov	r3, r0
 8009478:	4323      	orrs	r3, r4
 800947a:	2b00      	cmp	r3, #0
 800947c:	bf0c      	ite	eq
 800947e:	2301      	moveq	r3, #1
 8009480:	2300      	movne	r3, #0
 8009482:	b2db      	uxtb	r3, r3
 8009484:	e008      	b.n	8009498 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009486:	4833      	ldr	r0, [pc, #204]	@ (8009554 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8009488:	f7ff ff60 	bl	800934c <LL_ADC_IsEnabled>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	bf0c      	ite	eq
 8009492:	2301      	moveq	r3, #1
 8009494:	2300      	movne	r3, #0
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b00      	cmp	r3, #0
 800949a:	d047      	beq.n	800952c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800949c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800949e:	689a      	ldr	r2, [r3, #8]
 80094a0:	4b2d      	ldr	r3, [pc, #180]	@ (8009558 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80094a2:	4013      	ands	r3, r2
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	6811      	ldr	r1, [r2, #0]
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	6892      	ldr	r2, [r2, #8]
 80094ac:	430a      	orrs	r2, r1
 80094ae:	431a      	orrs	r2, r3
 80094b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80094b2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80094b4:	e03a      	b.n	800952c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80094b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80094be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80094c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a1f      	ldr	r2, [pc, #124]	@ (8009544 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d004      	beq.n	80094d6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009548 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d10e      	bne.n	80094f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80094d6:	481b      	ldr	r0, [pc, #108]	@ (8009544 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80094d8:	f7ff ff38 	bl	800934c <LL_ADC_IsEnabled>
 80094dc:	4604      	mov	r4, r0
 80094de:	481a      	ldr	r0, [pc, #104]	@ (8009548 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80094e0:	f7ff ff34 	bl	800934c <LL_ADC_IsEnabled>
 80094e4:	4603      	mov	r3, r0
 80094e6:	4323      	orrs	r3, r4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	bf0c      	ite	eq
 80094ec:	2301      	moveq	r3, #1
 80094ee:	2300      	movne	r3, #0
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	e008      	b.n	8009506 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80094f4:	4817      	ldr	r0, [pc, #92]	@ (8009554 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80094f6:	f7ff ff29 	bl	800934c <LL_ADC_IsEnabled>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	bf0c      	ite	eq
 8009500:	2301      	moveq	r3, #1
 8009502:	2300      	movne	r3, #0
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d010      	beq.n	800952c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800950a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800950c:	689a      	ldr	r2, [r3, #8]
 800950e:	4b12      	ldr	r3, [pc, #72]	@ (8009558 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009510:	4013      	ands	r3, r2
 8009512:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009514:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009516:	e009      	b.n	800952c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800951c:	f043 0220 	orr.w	r2, r3, #32
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800952a:	e000      	b.n	800952e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800952c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8009536:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800953a:	4618      	mov	r0, r3
 800953c:	378c      	adds	r7, #140	@ 0x8c
 800953e:	46bd      	mov	sp, r7
 8009540:	bd90      	pop	{r4, r7, pc}
 8009542:	bf00      	nop
 8009544:	40022000 	.word	0x40022000
 8009548:	40022100 	.word	0x40022100
 800954c:	40022300 	.word	0x40022300
 8009550:	58026300 	.word	0x58026300
 8009554:	58026000 	.word	0x58026000
 8009558:	fffff0e0 	.word	0xfffff0e0

0800955c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f003 0307 	and.w	r3, r3, #7
 800956a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800956c:	4b0b      	ldr	r3, [pc, #44]	@ (800959c <__NVIC_SetPriorityGrouping+0x40>)
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009578:	4013      	ands	r3, r2
 800957a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009584:	4b06      	ldr	r3, [pc, #24]	@ (80095a0 <__NVIC_SetPriorityGrouping+0x44>)
 8009586:	4313      	orrs	r3, r2
 8009588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800958a:	4a04      	ldr	r2, [pc, #16]	@ (800959c <__NVIC_SetPriorityGrouping+0x40>)
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	60d3      	str	r3, [r2, #12]
}
 8009590:	bf00      	nop
 8009592:	3714      	adds	r7, #20
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr
 800959c:	e000ed00 	.word	0xe000ed00
 80095a0:	05fa0000 	.word	0x05fa0000

080095a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80095a4:	b480      	push	{r7}
 80095a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80095a8:	4b04      	ldr	r3, [pc, #16]	@ (80095bc <__NVIC_GetPriorityGrouping+0x18>)
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	0a1b      	lsrs	r3, r3, #8
 80095ae:	f003 0307 	and.w	r3, r3, #7
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	e000ed00 	.word	0xe000ed00

080095c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4603      	mov	r3, r0
 80095c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80095ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	db0b      	blt.n	80095ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	f003 021f 	and.w	r2, r3, #31
 80095d8:	4907      	ldr	r1, [pc, #28]	@ (80095f8 <__NVIC_EnableIRQ+0x38>)
 80095da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80095de:	095b      	lsrs	r3, r3, #5
 80095e0:	2001      	movs	r0, #1
 80095e2:	fa00 f202 	lsl.w	r2, r0, r2
 80095e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80095ea:	bf00      	nop
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	e000e100 	.word	0xe000e100

080095fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	4603      	mov	r3, r0
 8009604:	6039      	str	r1, [r7, #0]
 8009606:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009608:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800960c:	2b00      	cmp	r3, #0
 800960e:	db0a      	blt.n	8009626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	b2da      	uxtb	r2, r3
 8009614:	490c      	ldr	r1, [pc, #48]	@ (8009648 <__NVIC_SetPriority+0x4c>)
 8009616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800961a:	0112      	lsls	r2, r2, #4
 800961c:	b2d2      	uxtb	r2, r2
 800961e:	440b      	add	r3, r1
 8009620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009624:	e00a      	b.n	800963c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	b2da      	uxtb	r2, r3
 800962a:	4908      	ldr	r1, [pc, #32]	@ (800964c <__NVIC_SetPriority+0x50>)
 800962c:	88fb      	ldrh	r3, [r7, #6]
 800962e:	f003 030f 	and.w	r3, r3, #15
 8009632:	3b04      	subs	r3, #4
 8009634:	0112      	lsls	r2, r2, #4
 8009636:	b2d2      	uxtb	r2, r2
 8009638:	440b      	add	r3, r1
 800963a:	761a      	strb	r2, [r3, #24]
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	e000e100 	.word	0xe000e100
 800964c:	e000ed00 	.word	0xe000ed00

08009650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009650:	b480      	push	{r7}
 8009652:	b089      	sub	sp, #36	@ 0x24
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f003 0307 	and.w	r3, r3, #7
 8009662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	f1c3 0307 	rsb	r3, r3, #7
 800966a:	2b04      	cmp	r3, #4
 800966c:	bf28      	it	cs
 800966e:	2304      	movcs	r3, #4
 8009670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	3304      	adds	r3, #4
 8009676:	2b06      	cmp	r3, #6
 8009678:	d902      	bls.n	8009680 <NVIC_EncodePriority+0x30>
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	3b03      	subs	r3, #3
 800967e:	e000      	b.n	8009682 <NVIC_EncodePriority+0x32>
 8009680:	2300      	movs	r3, #0
 8009682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009684:	f04f 32ff 	mov.w	r2, #4294967295
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	fa02 f303 	lsl.w	r3, r2, r3
 800968e:	43da      	mvns	r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	401a      	ands	r2, r3
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009698:	f04f 31ff 	mov.w	r1, #4294967295
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	fa01 f303 	lsl.w	r3, r1, r3
 80096a2:	43d9      	mvns	r1, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80096a8:	4313      	orrs	r3, r2
         );
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3724      	adds	r7, #36	@ 0x24
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
	...

080096b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3b01      	subs	r3, #1
 80096c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80096c8:	d301      	bcc.n	80096ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80096ca:	2301      	movs	r3, #1
 80096cc:	e00f      	b.n	80096ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80096ce:	4a0a      	ldr	r2, [pc, #40]	@ (80096f8 <SysTick_Config+0x40>)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80096d6:	210f      	movs	r1, #15
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295
 80096dc:	f7ff ff8e 	bl	80095fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80096e0:	4b05      	ldr	r3, [pc, #20]	@ (80096f8 <SysTick_Config+0x40>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80096e6:	4b04      	ldr	r3, [pc, #16]	@ (80096f8 <SysTick_Config+0x40>)
 80096e8:	2207      	movs	r2, #7
 80096ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	e000e010 	.word	0xe000e010

080096fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7ff ff29 	bl	800955c <__NVIC_SetPriorityGrouping>
}
 800970a:	bf00      	nop
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b086      	sub	sp, #24
 8009716:	af00      	add	r7, sp, #0
 8009718:	4603      	mov	r3, r0
 800971a:	60b9      	str	r1, [r7, #8]
 800971c:	607a      	str	r2, [r7, #4]
 800971e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009720:	f7ff ff40 	bl	80095a4 <__NVIC_GetPriorityGrouping>
 8009724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	68b9      	ldr	r1, [r7, #8]
 800972a:	6978      	ldr	r0, [r7, #20]
 800972c:	f7ff ff90 	bl	8009650 <NVIC_EncodePriority>
 8009730:	4602      	mov	r2, r0
 8009732:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009736:	4611      	mov	r1, r2
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff ff5f 	bl	80095fc <__NVIC_SetPriority>
}
 800973e:	bf00      	nop
 8009740:	3718      	adds	r7, #24
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b082      	sub	sp, #8
 800974a:	af00      	add	r7, sp, #0
 800974c:	4603      	mov	r3, r0
 800974e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009754:	4618      	mov	r0, r3
 8009756:	f7ff ff33 	bl	80095c0 <__NVIC_EnableIRQ>
}
 800975a:	bf00      	nop
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff ffa4 	bl	80096b8 <SysTick_Config>
 8009770:	4603      	mov	r3, r0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
	...

0800977c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800977c:	b480      	push	{r7}
 800977e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8009780:	f3bf 8f5f 	dmb	sy
}
 8009784:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8009786:	4b07      	ldr	r3, [pc, #28]	@ (80097a4 <HAL_MPU_Disable+0x28>)
 8009788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978a:	4a06      	ldr	r2, [pc, #24]	@ (80097a4 <HAL_MPU_Disable+0x28>)
 800978c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009790:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8009792:	4b05      	ldr	r3, [pc, #20]	@ (80097a8 <HAL_MPU_Disable+0x2c>)
 8009794:	2200      	movs	r2, #0
 8009796:	605a      	str	r2, [r3, #4]
}
 8009798:	bf00      	nop
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	e000ed00 	.word	0xe000ed00
 80097a8:	e000ed90 	.word	0xe000ed90

080097ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80097b4:	4a0b      	ldr	r2, [pc, #44]	@ (80097e4 <HAL_MPU_Enable+0x38>)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f043 0301 	orr.w	r3, r3, #1
 80097bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80097be:	4b0a      	ldr	r3, [pc, #40]	@ (80097e8 <HAL_MPU_Enable+0x3c>)
 80097c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c2:	4a09      	ldr	r2, [pc, #36]	@ (80097e8 <HAL_MPU_Enable+0x3c>)
 80097c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097c8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80097ca:	f3bf 8f4f 	dsb	sy
}
 80097ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80097d0:	f3bf 8f6f 	isb	sy
}
 80097d4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80097d6:	bf00      	nop
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	e000ed90 	.word	0xe000ed90
 80097e8:	e000ed00 	.word	0xe000ed00

080097ec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	785a      	ldrb	r2, [r3, #1]
 80097f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009868 <HAL_MPU_ConfigRegion+0x7c>)
 80097fa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80097fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009868 <HAL_MPU_ConfigRegion+0x7c>)
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	4a19      	ldr	r2, [pc, #100]	@ (8009868 <HAL_MPU_ConfigRegion+0x7c>)
 8009802:	f023 0301 	bic.w	r3, r3, #1
 8009806:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8009808:	4a17      	ldr	r2, [pc, #92]	@ (8009868 <HAL_MPU_ConfigRegion+0x7c>)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7b1b      	ldrb	r3, [r3, #12]
 8009814:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	7adb      	ldrb	r3, [r3, #11]
 800981a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800981c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	7a9b      	ldrb	r3, [r3, #10]
 8009822:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009824:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	7b5b      	ldrb	r3, [r3, #13]
 800982a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800982c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	7b9b      	ldrb	r3, [r3, #14]
 8009832:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009834:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	7bdb      	ldrb	r3, [r3, #15]
 800983a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800983c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	7a5b      	ldrb	r3, [r3, #9]
 8009842:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009844:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	7a1b      	ldrb	r3, [r3, #8]
 800984a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800984c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	7812      	ldrb	r2, [r2, #0]
 8009852:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009854:	4a04      	ldr	r2, [pc, #16]	@ (8009868 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009856:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009858:	6113      	str	r3, [r2, #16]
}
 800985a:	bf00      	nop
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	e000ed90 	.word	0xe000ed90

0800986c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e014      	b.n	80098a8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	791b      	ldrb	r3, [r3, #4]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b00      	cmp	r3, #0
 8009886:	d105      	bne.n	8009894 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7f8 fdf8 	bl	8002484 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2202      	movs	r2, #2
 8009898:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e0a2      	b.n	8009a0e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	795b      	ldrb	r3, [r3, #5]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d101      	bne.n	80098d4 <HAL_DAC_Start_DMA+0x24>
 80098d0:	2302      	movs	r3, #2
 80098d2:	e09c      	b.n	8009a0e <HAL_DAC_Start_DMA+0x15e>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2201      	movs	r2, #1
 80098d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2202      	movs	r2, #2
 80098de:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d129      	bne.n	800993a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	4a4b      	ldr	r2, [pc, #300]	@ (8009a18 <HAL_DAC_Start_DMA+0x168>)
 80098ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	4a4a      	ldr	r2, [pc, #296]	@ (8009a1c <HAL_DAC_Start_DMA+0x16c>)
 80098f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	4a49      	ldr	r2, [pc, #292]	@ (8009a20 <HAL_DAC_Start_DMA+0x170>)
 80098fc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800990c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d003      	beq.n	800991c <HAL_DAC_Start_DMA+0x6c>
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	2b04      	cmp	r3, #4
 8009918:	d005      	beq.n	8009926 <HAL_DAC_Start_DMA+0x76>
 800991a:	e009      	b.n	8009930 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3308      	adds	r3, #8
 8009922:	613b      	str	r3, [r7, #16]
        break;
 8009924:	e033      	b.n	800998e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	330c      	adds	r3, #12
 800992c:	613b      	str	r3, [r7, #16]
        break;
 800992e:	e02e      	b.n	800998e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	3310      	adds	r3, #16
 8009936:	613b      	str	r3, [r7, #16]
        break;
 8009938:	e029      	b.n	800998e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	4a39      	ldr	r2, [pc, #228]	@ (8009a24 <HAL_DAC_Start_DMA+0x174>)
 8009940:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	4a38      	ldr	r2, [pc, #224]	@ (8009a28 <HAL_DAC_Start_DMA+0x178>)
 8009948:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	4a37      	ldr	r2, [pc, #220]	@ (8009a2c <HAL_DAC_Start_DMA+0x17c>)
 8009950:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009960:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d003      	beq.n	8009970 <HAL_DAC_Start_DMA+0xc0>
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	2b04      	cmp	r3, #4
 800996c:	d005      	beq.n	800997a <HAL_DAC_Start_DMA+0xca>
 800996e:	e009      	b.n	8009984 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3314      	adds	r3, #20
 8009976:	613b      	str	r3, [r7, #16]
        break;
 8009978:	e009      	b.n	800998e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3318      	adds	r3, #24
 8009980:	613b      	str	r3, [r7, #16]
        break;
 8009982:	e004      	b.n	800998e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	331c      	adds	r3, #28
 800998a:	613b      	str	r3, [r7, #16]
        break;
 800998c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d111      	bne.n	80099b8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6898      	ldr	r0, [r3, #8]
 80099a8:	6879      	ldr	r1, [r7, #4]
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	f000 fd6d 	bl	800a48c <HAL_DMA_Start_IT>
 80099b2:	4603      	mov	r3, r0
 80099b4:	75fb      	strb	r3, [r7, #23]
 80099b6:	e010      	b.n	80099da <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80099c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	68d8      	ldr	r0, [r3, #12]
 80099cc:	6879      	ldr	r1, [r7, #4]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	f000 fd5b 	bl	800a48c <HAL_DMA_Start_IT>
 80099d6:	4603      	mov	r3, r0
 80099d8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10c      	bne.n	8009a00 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	6819      	ldr	r1, [r3, #0]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	f003 0310 	and.w	r3, r3, #16
 80099f2:	2201      	movs	r2, #1
 80099f4:	409a      	lsls	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	601a      	str	r2, [r3, #0]
 80099fe:	e005      	b.n	8009a0c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	f043 0204 	orr.w	r2, r3, #4
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	08009cc9 	.word	0x08009cc9
 8009a1c:	08009ceb 	.word	0x08009ceb
 8009a20:	08009d07 	.word	0x08009d07
 8009a24:	08009d71 	.word	0x08009d71
 8009a28:	08009d93 	.word	0x08009d93
 8009a2c:	08009daf 	.word	0x08009daf

08009a30 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08a      	sub	sp, #40	@ 0x28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <HAL_DAC_ConfigChannel+0x1e>
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e12a      	b.n	8009cbc <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	795b      	ldrb	r3, [r3, #5]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d101      	bne.n	8009a72 <HAL_DAC_ConfigChannel+0x2e>
 8009a6e:	2302      	movs	r3, #2
 8009a70:	e124      	b.n	8009cbc <HAL_DAC_ConfigChannel+0x278>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2201      	movs	r2, #1
 8009a76:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b04      	cmp	r3, #4
 8009a84:	d17a      	bne.n	8009b7c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8009a86:	f7fe f9c5 	bl	8007e14 <HAL_GetTick>
 8009a8a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d13d      	bne.n	8009b0e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009a92:	e018      	b.n	8009ac6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009a94:	f7fe f9be 	bl	8007e14 <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d911      	bls.n	8009ac6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009aa8:	4b86      	ldr	r3, [pc, #536]	@ (8009cc4 <HAL_DAC_ConfigChannel+0x280>)
 8009aaa:	4013      	ands	r3, r2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00a      	beq.n	8009ac6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	f043 0208 	orr.w	r2, r3, #8
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2203      	movs	r2, #3
 8009ac0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e0fa      	b.n	8009cbc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009acc:	4b7d      	ldr	r3, [pc, #500]	@ (8009cc4 <HAL_DAC_ConfigChannel+0x280>)
 8009ace:	4013      	ands	r3, r2
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1df      	bne.n	8009a94 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	6992      	ldr	r2, [r2, #24]
 8009adc:	641a      	str	r2, [r3, #64]	@ 0x40
 8009ade:	e020      	b.n	8009b22 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009ae0:	f7fe f998 	bl	8007e14 <HAL_GetTick>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d90f      	bls.n	8009b0e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	da0a      	bge.n	8009b0e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	f043 0208 	orr.w	r2, r3, #8
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2203      	movs	r2, #3
 8009b08:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e0d6      	b.n	8009cbc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	dbe3      	blt.n	8009ae0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	6992      	ldr	r2, [r2, #24]
 8009b20:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f003 0310 	and.w	r3, r3, #16
 8009b2e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8009b32:	fa01 f303 	lsl.w	r3, r1, r3
 8009b36:	43db      	mvns	r3, r3
 8009b38:	ea02 0103 	and.w	r1, r2, r3
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	69da      	ldr	r2, [r3, #28]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f003 0310 	and.w	r3, r3, #16
 8009b46:	409a      	lsls	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f003 0310 	and.w	r3, r3, #16
 8009b5c:	21ff      	movs	r1, #255	@ 0xff
 8009b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b62:	43db      	mvns	r3, r3
 8009b64:	ea02 0103 	and.w	r1, r2, r3
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	6a1a      	ldr	r2, [r3, #32]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f003 0310 	and.w	r3, r3, #16
 8009b72:	409a      	lsls	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d11d      	bne.n	8009bc0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b8a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f003 0310 	and.w	r3, r3, #16
 8009b92:	221f      	movs	r2, #31
 8009b94:	fa02 f303 	lsl.w	r3, r2, r3
 8009b98:	43db      	mvns	r3, r3
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f003 0310 	and.w	r3, r3, #16
 8009bac:	697a      	ldr	r2, [r7, #20]
 8009bae:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb2:	69ba      	ldr	r2, [r7, #24]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	69ba      	ldr	r2, [r7, #24]
 8009bbe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bc6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f003 0310 	and.w	r3, r3, #16
 8009bce:	2207      	movs	r2, #7
 8009bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd4:	43db      	mvns	r3, r3
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	4013      	ands	r3, r2
 8009bda:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d102      	bne.n	8009bea <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8009be4:	2300      	movs	r3, #0
 8009be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009be8:	e00f      	b.n	8009c0a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d102      	bne.n	8009bf8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bf6:	e008      	b.n	8009c0a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d102      	bne.n	8009c06 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8009c00:	2301      	movs	r3, #1
 8009c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c04:	e001      	b.n	8009c0a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c16:	4313      	orrs	r3, r2
 8009c18:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f003 0310 	and.w	r3, r3, #16
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	fa02 f303 	lsl.w	r3, r2, r3
 8009c26:	69ba      	ldr	r2, [r7, #24]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	69ba      	ldr	r2, [r7, #24]
 8009c32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6819      	ldr	r1, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f003 0310 	and.w	r3, r3, #16
 8009c40:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009c44:	fa02 f303 	lsl.w	r3, r2, r3
 8009c48:	43da      	mvns	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	400a      	ands	r2, r1
 8009c50:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f003 0310 	and.w	r3, r3, #16
 8009c60:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8009c64:	fa02 f303 	lsl.w	r3, r2, r3
 8009c68:	43db      	mvns	r3, r3
 8009c6a:	69ba      	ldr	r2, [r7, #24]
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f003 0310 	and.w	r3, r3, #16
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c82:	69ba      	ldr	r2, [r7, #24]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	69ba      	ldr	r2, [r7, #24]
 8009c8e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6819      	ldr	r1, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f003 0310 	and.w	r3, r3, #16
 8009c9c:	22c0      	movs	r2, #192	@ 0xc0
 8009c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca2:	43da      	mvns	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	400a      	ands	r2, r1
 8009caa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8009cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3728      	adds	r7, #40	@ 0x28
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	20008000 	.word	0x20008000

08009cc8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f7f7 fb10 	bl	80012fc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	711a      	strb	r2, [r3, #4]
}
 8009ce2:	bf00      	nop
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f7f7 faf1 	bl	80012e0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009cfe:	bf00      	nop
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	f043 0204 	orr.w	r2, r3, #4
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f7ff fe85 	bl	8009a30 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	711a      	strb	r2, [r3, #4]
}
 8009d2c:	bf00      	nop
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d7c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f7ff ffd8 	bl	8009d34 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2201      	movs	r2, #1
 8009d88:	711a      	strb	r2, [r3, #4]
}
 8009d8a:	bf00      	nop
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b084      	sub	sp, #16
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d9e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f7ff ffd1 	bl	8009d48 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009da6:	bf00      	nop
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	f043 0204 	orr.w	r2, r3, #4
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f7ff ffc7 	bl	8009d5c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	711a      	strb	r2, [r3, #4]
}
 8009dd4:	bf00      	nop
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8009de4:	f7fe f816 	bl	8007e14 <HAL_GetTick>
 8009de8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e312      	b.n	800a41a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a66      	ldr	r2, [pc, #408]	@ (8009f94 <HAL_DMA_Init+0x1b8>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d04a      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a65      	ldr	r2, [pc, #404]	@ (8009f98 <HAL_DMA_Init+0x1bc>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d045      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a63      	ldr	r2, [pc, #396]	@ (8009f9c <HAL_DMA_Init+0x1c0>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d040      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a62      	ldr	r2, [pc, #392]	@ (8009fa0 <HAL_DMA_Init+0x1c4>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d03b      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a60      	ldr	r2, [pc, #384]	@ (8009fa4 <HAL_DMA_Init+0x1c8>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d036      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a5f      	ldr	r2, [pc, #380]	@ (8009fa8 <HAL_DMA_Init+0x1cc>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d031      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a5d      	ldr	r2, [pc, #372]	@ (8009fac <HAL_DMA_Init+0x1d0>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d02c      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a5c      	ldr	r2, [pc, #368]	@ (8009fb0 <HAL_DMA_Init+0x1d4>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d027      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a5a      	ldr	r2, [pc, #360]	@ (8009fb4 <HAL_DMA_Init+0x1d8>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d022      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a59      	ldr	r2, [pc, #356]	@ (8009fb8 <HAL_DMA_Init+0x1dc>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d01d      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a57      	ldr	r2, [pc, #348]	@ (8009fbc <HAL_DMA_Init+0x1e0>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d018      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a56      	ldr	r2, [pc, #344]	@ (8009fc0 <HAL_DMA_Init+0x1e4>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d013      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a54      	ldr	r2, [pc, #336]	@ (8009fc4 <HAL_DMA_Init+0x1e8>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d00e      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a53      	ldr	r2, [pc, #332]	@ (8009fc8 <HAL_DMA_Init+0x1ec>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d009      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a51      	ldr	r2, [pc, #324]	@ (8009fcc <HAL_DMA_Init+0x1f0>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d004      	beq.n	8009e94 <HAL_DMA_Init+0xb8>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a50      	ldr	r2, [pc, #320]	@ (8009fd0 <HAL_DMA_Init+0x1f4>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d101      	bne.n	8009e98 <HAL_DMA_Init+0xbc>
 8009e94:	2301      	movs	r3, #1
 8009e96:	e000      	b.n	8009e9a <HAL_DMA_Init+0xbe>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f000 813c 	beq.w	800a118 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2202      	movs	r2, #2
 8009ea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a37      	ldr	r2, [pc, #220]	@ (8009f94 <HAL_DMA_Init+0x1b8>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d04a      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a36      	ldr	r2, [pc, #216]	@ (8009f98 <HAL_DMA_Init+0x1bc>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d045      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a34      	ldr	r2, [pc, #208]	@ (8009f9c <HAL_DMA_Init+0x1c0>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d040      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a33      	ldr	r2, [pc, #204]	@ (8009fa0 <HAL_DMA_Init+0x1c4>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d03b      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a31      	ldr	r2, [pc, #196]	@ (8009fa4 <HAL_DMA_Init+0x1c8>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d036      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a30      	ldr	r2, [pc, #192]	@ (8009fa8 <HAL_DMA_Init+0x1cc>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d031      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8009fac <HAL_DMA_Init+0x1d0>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d02c      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a2d      	ldr	r2, [pc, #180]	@ (8009fb0 <HAL_DMA_Init+0x1d4>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d027      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a2b      	ldr	r2, [pc, #172]	@ (8009fb4 <HAL_DMA_Init+0x1d8>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d022      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8009fb8 <HAL_DMA_Init+0x1dc>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d01d      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a28      	ldr	r2, [pc, #160]	@ (8009fbc <HAL_DMA_Init+0x1e0>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d018      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a27      	ldr	r2, [pc, #156]	@ (8009fc0 <HAL_DMA_Init+0x1e4>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d013      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a25      	ldr	r2, [pc, #148]	@ (8009fc4 <HAL_DMA_Init+0x1e8>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d00e      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a24      	ldr	r2, [pc, #144]	@ (8009fc8 <HAL_DMA_Init+0x1ec>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d009      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a22      	ldr	r2, [pc, #136]	@ (8009fcc <HAL_DMA_Init+0x1f0>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d004      	beq.n	8009f50 <HAL_DMA_Init+0x174>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a21      	ldr	r2, [pc, #132]	@ (8009fd0 <HAL_DMA_Init+0x1f4>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d108      	bne.n	8009f62 <HAL_DMA_Init+0x186>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f022 0201 	bic.w	r2, r2, #1
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	e007      	b.n	8009f72 <HAL_DMA_Init+0x196>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f022 0201 	bic.w	r2, r2, #1
 8009f70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009f72:	e02f      	b.n	8009fd4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009f74:	f7fd ff4e 	bl	8007e14 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	2b05      	cmp	r3, #5
 8009f80:	d928      	bls.n	8009fd4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2220      	movs	r2, #32
 8009f86:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2203      	movs	r2, #3
 8009f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e242      	b.n	800a41a <HAL_DMA_Init+0x63e>
 8009f94:	40020010 	.word	0x40020010
 8009f98:	40020028 	.word	0x40020028
 8009f9c:	40020040 	.word	0x40020040
 8009fa0:	40020058 	.word	0x40020058
 8009fa4:	40020070 	.word	0x40020070
 8009fa8:	40020088 	.word	0x40020088
 8009fac:	400200a0 	.word	0x400200a0
 8009fb0:	400200b8 	.word	0x400200b8
 8009fb4:	40020410 	.word	0x40020410
 8009fb8:	40020428 	.word	0x40020428
 8009fbc:	40020440 	.word	0x40020440
 8009fc0:	40020458 	.word	0x40020458
 8009fc4:	40020470 	.word	0x40020470
 8009fc8:	40020488 	.word	0x40020488
 8009fcc:	400204a0 	.word	0x400204a0
 8009fd0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1c8      	bne.n	8009f74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009fea:	697a      	ldr	r2, [r7, #20]
 8009fec:	4b83      	ldr	r3, [pc, #524]	@ (800a1fc <HAL_DMA_Init+0x420>)
 8009fee:	4013      	ands	r3, r2
 8009ff0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8009ffa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a006:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	699b      	ldr	r3, [r3, #24]
 800a00c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a012:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a1b      	ldr	r3, [r3, #32]
 800a018:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800a01a:	697a      	ldr	r2, [r7, #20]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a024:	2b04      	cmp	r3, #4
 800a026:	d107      	bne.n	800a038 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a030:	4313      	orrs	r3, r2
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	4313      	orrs	r3, r2
 800a036:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	2b28      	cmp	r3, #40	@ 0x28
 800a03e:	d903      	bls.n	800a048 <HAL_DMA_Init+0x26c>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	2b2e      	cmp	r3, #46	@ 0x2e
 800a046:	d91f      	bls.n	800a088 <HAL_DMA_Init+0x2ac>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a04e:	d903      	bls.n	800a058 <HAL_DMA_Init+0x27c>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	2b42      	cmp	r3, #66	@ 0x42
 800a056:	d917      	bls.n	800a088 <HAL_DMA_Init+0x2ac>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	2b46      	cmp	r3, #70	@ 0x46
 800a05e:	d903      	bls.n	800a068 <HAL_DMA_Init+0x28c>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	2b48      	cmp	r3, #72	@ 0x48
 800a066:	d90f      	bls.n	800a088 <HAL_DMA_Init+0x2ac>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	2b4e      	cmp	r3, #78	@ 0x4e
 800a06e:	d903      	bls.n	800a078 <HAL_DMA_Init+0x29c>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	2b52      	cmp	r3, #82	@ 0x52
 800a076:	d907      	bls.n	800a088 <HAL_DMA_Init+0x2ac>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	2b73      	cmp	r3, #115	@ 0x73
 800a07e:	d905      	bls.n	800a08c <HAL_DMA_Init+0x2b0>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	2b77      	cmp	r3, #119	@ 0x77
 800a086:	d801      	bhi.n	800a08c <HAL_DMA_Init+0x2b0>
 800a088:	2301      	movs	r3, #1
 800a08a:	e000      	b.n	800a08e <HAL_DMA_Init+0x2b2>
 800a08c:	2300      	movs	r3, #0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a098:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	695b      	ldr	r3, [r3, #20]
 800a0a8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f023 0307 	bic.w	r3, r3, #7
 800a0b0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0c0:	2b04      	cmp	r3, #4
 800a0c2:	d117      	bne.n	800a0f4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00e      	beq.n	800a0f4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f001 fdca 	bl	800bc70 <DMA_CheckFifoParam>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d008      	beq.n	800a0f4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2240      	movs	r2, #64	@ 0x40
 800a0e6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e192      	b.n	800a41a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f001 fd05 	bl	800bb0c <DMA_CalcBaseAndBitshift>
 800a102:	4603      	mov	r3, r0
 800a104:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a10a:	f003 031f 	and.w	r3, r3, #31
 800a10e:	223f      	movs	r2, #63	@ 0x3f
 800a110:	409a      	lsls	r2, r3
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	609a      	str	r2, [r3, #8]
 800a116:	e0c8      	b.n	800a2aa <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a38      	ldr	r2, [pc, #224]	@ (800a200 <HAL_DMA_Init+0x424>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d022      	beq.n	800a168 <HAL_DMA_Init+0x38c>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a37      	ldr	r2, [pc, #220]	@ (800a204 <HAL_DMA_Init+0x428>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d01d      	beq.n	800a168 <HAL_DMA_Init+0x38c>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a35      	ldr	r2, [pc, #212]	@ (800a208 <HAL_DMA_Init+0x42c>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d018      	beq.n	800a168 <HAL_DMA_Init+0x38c>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a34      	ldr	r2, [pc, #208]	@ (800a20c <HAL_DMA_Init+0x430>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d013      	beq.n	800a168 <HAL_DMA_Init+0x38c>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a32      	ldr	r2, [pc, #200]	@ (800a210 <HAL_DMA_Init+0x434>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d00e      	beq.n	800a168 <HAL_DMA_Init+0x38c>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a31      	ldr	r2, [pc, #196]	@ (800a214 <HAL_DMA_Init+0x438>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d009      	beq.n	800a168 <HAL_DMA_Init+0x38c>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a2f      	ldr	r2, [pc, #188]	@ (800a218 <HAL_DMA_Init+0x43c>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d004      	beq.n	800a168 <HAL_DMA_Init+0x38c>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a2e      	ldr	r2, [pc, #184]	@ (800a21c <HAL_DMA_Init+0x440>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d101      	bne.n	800a16c <HAL_DMA_Init+0x390>
 800a168:	2301      	movs	r3, #1
 800a16a:	e000      	b.n	800a16e <HAL_DMA_Init+0x392>
 800a16c:	2300      	movs	r3, #0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f000 8092 	beq.w	800a298 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a21      	ldr	r2, [pc, #132]	@ (800a200 <HAL_DMA_Init+0x424>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d021      	beq.n	800a1c2 <HAL_DMA_Init+0x3e6>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a20      	ldr	r2, [pc, #128]	@ (800a204 <HAL_DMA_Init+0x428>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d01c      	beq.n	800a1c2 <HAL_DMA_Init+0x3e6>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a1e      	ldr	r2, [pc, #120]	@ (800a208 <HAL_DMA_Init+0x42c>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d017      	beq.n	800a1c2 <HAL_DMA_Init+0x3e6>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a1d      	ldr	r2, [pc, #116]	@ (800a20c <HAL_DMA_Init+0x430>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d012      	beq.n	800a1c2 <HAL_DMA_Init+0x3e6>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a1b      	ldr	r2, [pc, #108]	@ (800a210 <HAL_DMA_Init+0x434>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d00d      	beq.n	800a1c2 <HAL_DMA_Init+0x3e6>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a1a      	ldr	r2, [pc, #104]	@ (800a214 <HAL_DMA_Init+0x438>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d008      	beq.n	800a1c2 <HAL_DMA_Init+0x3e6>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a18      	ldr	r2, [pc, #96]	@ (800a218 <HAL_DMA_Init+0x43c>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d003      	beq.n	800a1c2 <HAL_DMA_Init+0x3e6>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a17      	ldr	r2, [pc, #92]	@ (800a21c <HAL_DMA_Init+0x440>)
 800a1c0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2202      	movs	r2, #2
 800a1c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4b10      	ldr	r3, [pc, #64]	@ (800a220 <HAL_DMA_Init+0x444>)
 800a1de:	4013      	ands	r3, r2
 800a1e0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	2b40      	cmp	r3, #64	@ 0x40
 800a1e8:	d01c      	beq.n	800a224 <HAL_DMA_Init+0x448>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	2b80      	cmp	r3, #128	@ 0x80
 800a1f0:	d102      	bne.n	800a1f8 <HAL_DMA_Init+0x41c>
 800a1f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a1f6:	e016      	b.n	800a226 <HAL_DMA_Init+0x44a>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	e014      	b.n	800a226 <HAL_DMA_Init+0x44a>
 800a1fc:	fe10803f 	.word	0xfe10803f
 800a200:	58025408 	.word	0x58025408
 800a204:	5802541c 	.word	0x5802541c
 800a208:	58025430 	.word	0x58025430
 800a20c:	58025444 	.word	0x58025444
 800a210:	58025458 	.word	0x58025458
 800a214:	5802546c 	.word	0x5802546c
 800a218:	58025480 	.word	0x58025480
 800a21c:	58025494 	.word	0x58025494
 800a220:	fffe000f 	.word	0xfffe000f
 800a224:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	68d2      	ldr	r2, [r2, #12]
 800a22a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a22c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800a234:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800a23c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	699b      	ldr	r3, [r3, #24]
 800a242:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800a244:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800a24c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800a254:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	4313      	orrs	r3, r2
 800a25a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	697a      	ldr	r2, [r7, #20]
 800a262:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	461a      	mov	r2, r3
 800a26a:	4b6e      	ldr	r3, [pc, #440]	@ (800a424 <HAL_DMA_Init+0x648>)
 800a26c:	4413      	add	r3, r2
 800a26e:	4a6e      	ldr	r2, [pc, #440]	@ (800a428 <HAL_DMA_Init+0x64c>)
 800a270:	fba2 2303 	umull	r2, r3, r2, r3
 800a274:	091b      	lsrs	r3, r3, #4
 800a276:	009a      	lsls	r2, r3, #2
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f001 fc45 	bl	800bb0c <DMA_CalcBaseAndBitshift>
 800a282:	4603      	mov	r3, r0
 800a284:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a28a:	f003 031f 	and.w	r3, r3, #31
 800a28e:	2201      	movs	r2, #1
 800a290:	409a      	lsls	r2, r3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	605a      	str	r2, [r3, #4]
 800a296:	e008      	b.n	800a2aa <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2240      	movs	r2, #64	@ 0x40
 800a29c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2203      	movs	r2, #3
 800a2a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e0b7      	b.n	800a41a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a5f      	ldr	r2, [pc, #380]	@ (800a42c <HAL_DMA_Init+0x650>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d072      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a5d      	ldr	r2, [pc, #372]	@ (800a430 <HAL_DMA_Init+0x654>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d06d      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a5c      	ldr	r2, [pc, #368]	@ (800a434 <HAL_DMA_Init+0x658>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d068      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a5a      	ldr	r2, [pc, #360]	@ (800a438 <HAL_DMA_Init+0x65c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d063      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a59      	ldr	r2, [pc, #356]	@ (800a43c <HAL_DMA_Init+0x660>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d05e      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a57      	ldr	r2, [pc, #348]	@ (800a440 <HAL_DMA_Init+0x664>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d059      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a56      	ldr	r2, [pc, #344]	@ (800a444 <HAL_DMA_Init+0x668>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d054      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a54      	ldr	r2, [pc, #336]	@ (800a448 <HAL_DMA_Init+0x66c>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d04f      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a53      	ldr	r2, [pc, #332]	@ (800a44c <HAL_DMA_Init+0x670>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d04a      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a51      	ldr	r2, [pc, #324]	@ (800a450 <HAL_DMA_Init+0x674>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d045      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a50      	ldr	r2, [pc, #320]	@ (800a454 <HAL_DMA_Init+0x678>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d040      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a4e      	ldr	r2, [pc, #312]	@ (800a458 <HAL_DMA_Init+0x67c>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d03b      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a4d      	ldr	r2, [pc, #308]	@ (800a45c <HAL_DMA_Init+0x680>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d036      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a4b      	ldr	r2, [pc, #300]	@ (800a460 <HAL_DMA_Init+0x684>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d031      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a4a      	ldr	r2, [pc, #296]	@ (800a464 <HAL_DMA_Init+0x688>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d02c      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a48      	ldr	r2, [pc, #288]	@ (800a468 <HAL_DMA_Init+0x68c>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d027      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a47      	ldr	r2, [pc, #284]	@ (800a46c <HAL_DMA_Init+0x690>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d022      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a45      	ldr	r2, [pc, #276]	@ (800a470 <HAL_DMA_Init+0x694>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d01d      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a44      	ldr	r2, [pc, #272]	@ (800a474 <HAL_DMA_Init+0x698>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d018      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a42      	ldr	r2, [pc, #264]	@ (800a478 <HAL_DMA_Init+0x69c>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d013      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a41      	ldr	r2, [pc, #260]	@ (800a47c <HAL_DMA_Init+0x6a0>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d00e      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a3f      	ldr	r2, [pc, #252]	@ (800a480 <HAL_DMA_Init+0x6a4>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d009      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a3e      	ldr	r2, [pc, #248]	@ (800a484 <HAL_DMA_Init+0x6a8>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d004      	beq.n	800a39a <HAL_DMA_Init+0x5be>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a3c      	ldr	r2, [pc, #240]	@ (800a488 <HAL_DMA_Init+0x6ac>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d101      	bne.n	800a39e <HAL_DMA_Init+0x5c2>
 800a39a:	2301      	movs	r3, #1
 800a39c:	e000      	b.n	800a3a0 <HAL_DMA_Init+0x5c4>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d032      	beq.n	800a40a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f001 fcdf 	bl	800bd68 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	2b80      	cmp	r3, #128	@ 0x80
 800a3b0:	d102      	bne.n	800a3b8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3c0:	b2d2      	uxtb	r2, r2
 800a3c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a3cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d010      	beq.n	800a3f8 <HAL_DMA_Init+0x61c>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	2b08      	cmp	r3, #8
 800a3dc:	d80c      	bhi.n	800a3f8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f001 fd5c 	bl	800be9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a3f4:	605a      	str	r2, [r3, #4]
 800a3f6:	e008      	b.n	800a40a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	a7fdabf8 	.word	0xa7fdabf8
 800a428:	cccccccd 	.word	0xcccccccd
 800a42c:	40020010 	.word	0x40020010
 800a430:	40020028 	.word	0x40020028
 800a434:	40020040 	.word	0x40020040
 800a438:	40020058 	.word	0x40020058
 800a43c:	40020070 	.word	0x40020070
 800a440:	40020088 	.word	0x40020088
 800a444:	400200a0 	.word	0x400200a0
 800a448:	400200b8 	.word	0x400200b8
 800a44c:	40020410 	.word	0x40020410
 800a450:	40020428 	.word	0x40020428
 800a454:	40020440 	.word	0x40020440
 800a458:	40020458 	.word	0x40020458
 800a45c:	40020470 	.word	0x40020470
 800a460:	40020488 	.word	0x40020488
 800a464:	400204a0 	.word	0x400204a0
 800a468:	400204b8 	.word	0x400204b8
 800a46c:	58025408 	.word	0x58025408
 800a470:	5802541c 	.word	0x5802541c
 800a474:	58025430 	.word	0x58025430
 800a478:	58025444 	.word	0x58025444
 800a47c:	58025458 	.word	0x58025458
 800a480:	5802546c 	.word	0x5802546c
 800a484:	58025480 	.word	0x58025480
 800a488:	58025494 	.word	0x58025494

0800a48c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
 800a498:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a49a:	2300      	movs	r3, #0
 800a49c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d101      	bne.n	800a4a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e226      	b.n	800a8f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d101      	bne.n	800a4b6 <HAL_DMA_Start_IT+0x2a>
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	e21f      	b.n	800a8f6 <HAL_DMA_Start_IT+0x46a>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	f040 820a 	bne.w	800a8e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a68      	ldr	r2, [pc, #416]	@ (800a680 <HAL_DMA_Start_IT+0x1f4>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d04a      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a66      	ldr	r2, [pc, #408]	@ (800a684 <HAL_DMA_Start_IT+0x1f8>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d045      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a65      	ldr	r2, [pc, #404]	@ (800a688 <HAL_DMA_Start_IT+0x1fc>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d040      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a63      	ldr	r2, [pc, #396]	@ (800a68c <HAL_DMA_Start_IT+0x200>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d03b      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a62      	ldr	r2, [pc, #392]	@ (800a690 <HAL_DMA_Start_IT+0x204>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d036      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a60      	ldr	r2, [pc, #384]	@ (800a694 <HAL_DMA_Start_IT+0x208>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d031      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a5f      	ldr	r2, [pc, #380]	@ (800a698 <HAL_DMA_Start_IT+0x20c>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d02c      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a5d      	ldr	r2, [pc, #372]	@ (800a69c <HAL_DMA_Start_IT+0x210>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d027      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a5c      	ldr	r2, [pc, #368]	@ (800a6a0 <HAL_DMA_Start_IT+0x214>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d022      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a5a      	ldr	r2, [pc, #360]	@ (800a6a4 <HAL_DMA_Start_IT+0x218>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d01d      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a59      	ldr	r2, [pc, #356]	@ (800a6a8 <HAL_DMA_Start_IT+0x21c>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d018      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a57      	ldr	r2, [pc, #348]	@ (800a6ac <HAL_DMA_Start_IT+0x220>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d013      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a56      	ldr	r2, [pc, #344]	@ (800a6b0 <HAL_DMA_Start_IT+0x224>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d00e      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a54      	ldr	r2, [pc, #336]	@ (800a6b4 <HAL_DMA_Start_IT+0x228>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d009      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a53      	ldr	r2, [pc, #332]	@ (800a6b8 <HAL_DMA_Start_IT+0x22c>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d004      	beq.n	800a57a <HAL_DMA_Start_IT+0xee>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a51      	ldr	r2, [pc, #324]	@ (800a6bc <HAL_DMA_Start_IT+0x230>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d108      	bne.n	800a58c <HAL_DMA_Start_IT+0x100>
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f022 0201 	bic.w	r2, r2, #1
 800a588:	601a      	str	r2, [r3, #0]
 800a58a:	e007      	b.n	800a59c <HAL_DMA_Start_IT+0x110>
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f022 0201 	bic.w	r2, r2, #1
 800a59a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	68b9      	ldr	r1, [r7, #8]
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	f001 f906 	bl	800b7b4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a34      	ldr	r2, [pc, #208]	@ (800a680 <HAL_DMA_Start_IT+0x1f4>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d04a      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a33      	ldr	r2, [pc, #204]	@ (800a684 <HAL_DMA_Start_IT+0x1f8>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d045      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a31      	ldr	r2, [pc, #196]	@ (800a688 <HAL_DMA_Start_IT+0x1fc>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d040      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a30      	ldr	r2, [pc, #192]	@ (800a68c <HAL_DMA_Start_IT+0x200>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d03b      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a2e      	ldr	r2, [pc, #184]	@ (800a690 <HAL_DMA_Start_IT+0x204>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d036      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a2d      	ldr	r2, [pc, #180]	@ (800a694 <HAL_DMA_Start_IT+0x208>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d031      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a2b      	ldr	r2, [pc, #172]	@ (800a698 <HAL_DMA_Start_IT+0x20c>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d02c      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a2a      	ldr	r2, [pc, #168]	@ (800a69c <HAL_DMA_Start_IT+0x210>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d027      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a28      	ldr	r2, [pc, #160]	@ (800a6a0 <HAL_DMA_Start_IT+0x214>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d022      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a27      	ldr	r2, [pc, #156]	@ (800a6a4 <HAL_DMA_Start_IT+0x218>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d01d      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a25      	ldr	r2, [pc, #148]	@ (800a6a8 <HAL_DMA_Start_IT+0x21c>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d018      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a24      	ldr	r2, [pc, #144]	@ (800a6ac <HAL_DMA_Start_IT+0x220>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d013      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a22      	ldr	r2, [pc, #136]	@ (800a6b0 <HAL_DMA_Start_IT+0x224>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d00e      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a21      	ldr	r2, [pc, #132]	@ (800a6b4 <HAL_DMA_Start_IT+0x228>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d009      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a1f      	ldr	r2, [pc, #124]	@ (800a6b8 <HAL_DMA_Start_IT+0x22c>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d004      	beq.n	800a648 <HAL_DMA_Start_IT+0x1bc>
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a1e      	ldr	r2, [pc, #120]	@ (800a6bc <HAL_DMA_Start_IT+0x230>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d101      	bne.n	800a64c <HAL_DMA_Start_IT+0x1c0>
 800a648:	2301      	movs	r3, #1
 800a64a:	e000      	b.n	800a64e <HAL_DMA_Start_IT+0x1c2>
 800a64c:	2300      	movs	r3, #0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d036      	beq.n	800a6c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f023 021e 	bic.w	r2, r3, #30
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f042 0216 	orr.w	r2, r2, #22
 800a664:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d03e      	beq.n	800a6ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f042 0208 	orr.w	r2, r2, #8
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	e035      	b.n	800a6ec <HAL_DMA_Start_IT+0x260>
 800a680:	40020010 	.word	0x40020010
 800a684:	40020028 	.word	0x40020028
 800a688:	40020040 	.word	0x40020040
 800a68c:	40020058 	.word	0x40020058
 800a690:	40020070 	.word	0x40020070
 800a694:	40020088 	.word	0x40020088
 800a698:	400200a0 	.word	0x400200a0
 800a69c:	400200b8 	.word	0x400200b8
 800a6a0:	40020410 	.word	0x40020410
 800a6a4:	40020428 	.word	0x40020428
 800a6a8:	40020440 	.word	0x40020440
 800a6ac:	40020458 	.word	0x40020458
 800a6b0:	40020470 	.word	0x40020470
 800a6b4:	40020488 	.word	0x40020488
 800a6b8:	400204a0 	.word	0x400204a0
 800a6bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f023 020e 	bic.w	r2, r3, #14
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f042 020a 	orr.w	r2, r2, #10
 800a6d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d007      	beq.n	800a6ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f042 0204 	orr.w	r2, r2, #4
 800a6ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a83      	ldr	r2, [pc, #524]	@ (800a900 <HAL_DMA_Start_IT+0x474>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d072      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a82      	ldr	r2, [pc, #520]	@ (800a904 <HAL_DMA_Start_IT+0x478>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d06d      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a80      	ldr	r2, [pc, #512]	@ (800a908 <HAL_DMA_Start_IT+0x47c>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d068      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a7f      	ldr	r2, [pc, #508]	@ (800a90c <HAL_DMA_Start_IT+0x480>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d063      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a7d      	ldr	r2, [pc, #500]	@ (800a910 <HAL_DMA_Start_IT+0x484>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d05e      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a7c      	ldr	r2, [pc, #496]	@ (800a914 <HAL_DMA_Start_IT+0x488>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d059      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a7a      	ldr	r2, [pc, #488]	@ (800a918 <HAL_DMA_Start_IT+0x48c>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d054      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a79      	ldr	r2, [pc, #484]	@ (800a91c <HAL_DMA_Start_IT+0x490>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d04f      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a77      	ldr	r2, [pc, #476]	@ (800a920 <HAL_DMA_Start_IT+0x494>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d04a      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a76      	ldr	r2, [pc, #472]	@ (800a924 <HAL_DMA_Start_IT+0x498>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d045      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a74      	ldr	r2, [pc, #464]	@ (800a928 <HAL_DMA_Start_IT+0x49c>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d040      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a73      	ldr	r2, [pc, #460]	@ (800a92c <HAL_DMA_Start_IT+0x4a0>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d03b      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a71      	ldr	r2, [pc, #452]	@ (800a930 <HAL_DMA_Start_IT+0x4a4>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d036      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a70      	ldr	r2, [pc, #448]	@ (800a934 <HAL_DMA_Start_IT+0x4a8>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d031      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a6e      	ldr	r2, [pc, #440]	@ (800a938 <HAL_DMA_Start_IT+0x4ac>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d02c      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a6d      	ldr	r2, [pc, #436]	@ (800a93c <HAL_DMA_Start_IT+0x4b0>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d027      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a6b      	ldr	r2, [pc, #428]	@ (800a940 <HAL_DMA_Start_IT+0x4b4>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d022      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a6a      	ldr	r2, [pc, #424]	@ (800a944 <HAL_DMA_Start_IT+0x4b8>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d01d      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a68      	ldr	r2, [pc, #416]	@ (800a948 <HAL_DMA_Start_IT+0x4bc>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d018      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a67      	ldr	r2, [pc, #412]	@ (800a94c <HAL_DMA_Start_IT+0x4c0>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d013      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a65      	ldr	r2, [pc, #404]	@ (800a950 <HAL_DMA_Start_IT+0x4c4>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d00e      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a64      	ldr	r2, [pc, #400]	@ (800a954 <HAL_DMA_Start_IT+0x4c8>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d009      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a62      	ldr	r2, [pc, #392]	@ (800a958 <HAL_DMA_Start_IT+0x4cc>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d004      	beq.n	800a7dc <HAL_DMA_Start_IT+0x350>
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a61      	ldr	r2, [pc, #388]	@ (800a95c <HAL_DMA_Start_IT+0x4d0>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d101      	bne.n	800a7e0 <HAL_DMA_Start_IT+0x354>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e000      	b.n	800a7e2 <HAL_DMA_Start_IT+0x356>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d01a      	beq.n	800a81c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d007      	beq.n	800a804 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a802:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d007      	beq.n	800a81c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a816:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a81a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a37      	ldr	r2, [pc, #220]	@ (800a900 <HAL_DMA_Start_IT+0x474>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d04a      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a36      	ldr	r2, [pc, #216]	@ (800a904 <HAL_DMA_Start_IT+0x478>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d045      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a34      	ldr	r2, [pc, #208]	@ (800a908 <HAL_DMA_Start_IT+0x47c>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d040      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a33      	ldr	r2, [pc, #204]	@ (800a90c <HAL_DMA_Start_IT+0x480>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d03b      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a31      	ldr	r2, [pc, #196]	@ (800a910 <HAL_DMA_Start_IT+0x484>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d036      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a30      	ldr	r2, [pc, #192]	@ (800a914 <HAL_DMA_Start_IT+0x488>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d031      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a2e      	ldr	r2, [pc, #184]	@ (800a918 <HAL_DMA_Start_IT+0x48c>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d02c      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a2d      	ldr	r2, [pc, #180]	@ (800a91c <HAL_DMA_Start_IT+0x490>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d027      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a2b      	ldr	r2, [pc, #172]	@ (800a920 <HAL_DMA_Start_IT+0x494>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d022      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a2a      	ldr	r2, [pc, #168]	@ (800a924 <HAL_DMA_Start_IT+0x498>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d01d      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a28      	ldr	r2, [pc, #160]	@ (800a928 <HAL_DMA_Start_IT+0x49c>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d018      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a27      	ldr	r2, [pc, #156]	@ (800a92c <HAL_DMA_Start_IT+0x4a0>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d013      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a25      	ldr	r2, [pc, #148]	@ (800a930 <HAL_DMA_Start_IT+0x4a4>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d00e      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a24      	ldr	r2, [pc, #144]	@ (800a934 <HAL_DMA_Start_IT+0x4a8>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d009      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a22      	ldr	r2, [pc, #136]	@ (800a938 <HAL_DMA_Start_IT+0x4ac>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d004      	beq.n	800a8bc <HAL_DMA_Start_IT+0x430>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a21      	ldr	r2, [pc, #132]	@ (800a93c <HAL_DMA_Start_IT+0x4b0>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d108      	bne.n	800a8ce <HAL_DMA_Start_IT+0x442>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f042 0201 	orr.w	r2, r2, #1
 800a8ca:	601a      	str	r2, [r3, #0]
 800a8cc:	e012      	b.n	800a8f4 <HAL_DMA_Start_IT+0x468>
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f042 0201 	orr.w	r2, r2, #1
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	e009      	b.n	800a8f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a8f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3718      	adds	r7, #24
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	40020010 	.word	0x40020010
 800a904:	40020028 	.word	0x40020028
 800a908:	40020040 	.word	0x40020040
 800a90c:	40020058 	.word	0x40020058
 800a910:	40020070 	.word	0x40020070
 800a914:	40020088 	.word	0x40020088
 800a918:	400200a0 	.word	0x400200a0
 800a91c:	400200b8 	.word	0x400200b8
 800a920:	40020410 	.word	0x40020410
 800a924:	40020428 	.word	0x40020428
 800a928:	40020440 	.word	0x40020440
 800a92c:	40020458 	.word	0x40020458
 800a930:	40020470 	.word	0x40020470
 800a934:	40020488 	.word	0x40020488
 800a938:	400204a0 	.word	0x400204a0
 800a93c:	400204b8 	.word	0x400204b8
 800a940:	58025408 	.word	0x58025408
 800a944:	5802541c 	.word	0x5802541c
 800a948:	58025430 	.word	0x58025430
 800a94c:	58025444 	.word	0x58025444
 800a950:	58025458 	.word	0x58025458
 800a954:	5802546c 	.word	0x5802546c
 800a958:	58025480 	.word	0x58025480
 800a95c:	58025494 	.word	0x58025494

0800a960 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b08a      	sub	sp, #40	@ 0x28
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a968:	2300      	movs	r3, #0
 800a96a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a96c:	4b67      	ldr	r3, [pc, #412]	@ (800ab0c <HAL_DMA_IRQHandler+0x1ac>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a67      	ldr	r2, [pc, #412]	@ (800ab10 <HAL_DMA_IRQHandler+0x1b0>)
 800a972:	fba2 2303 	umull	r2, r3, r2, r3
 800a976:	0a9b      	lsrs	r3, r3, #10
 800a978:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a97e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a984:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a5f      	ldr	r2, [pc, #380]	@ (800ab14 <HAL_DMA_IRQHandler+0x1b4>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d04a      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a5d      	ldr	r2, [pc, #372]	@ (800ab18 <HAL_DMA_IRQHandler+0x1b8>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d045      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a5c      	ldr	r2, [pc, #368]	@ (800ab1c <HAL_DMA_IRQHandler+0x1bc>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d040      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a5a      	ldr	r2, [pc, #360]	@ (800ab20 <HAL_DMA_IRQHandler+0x1c0>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d03b      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a59      	ldr	r2, [pc, #356]	@ (800ab24 <HAL_DMA_IRQHandler+0x1c4>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d036      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a57      	ldr	r2, [pc, #348]	@ (800ab28 <HAL_DMA_IRQHandler+0x1c8>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d031      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a56      	ldr	r2, [pc, #344]	@ (800ab2c <HAL_DMA_IRQHandler+0x1cc>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d02c      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a54      	ldr	r2, [pc, #336]	@ (800ab30 <HAL_DMA_IRQHandler+0x1d0>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d027      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a53      	ldr	r2, [pc, #332]	@ (800ab34 <HAL_DMA_IRQHandler+0x1d4>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d022      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a51      	ldr	r2, [pc, #324]	@ (800ab38 <HAL_DMA_IRQHandler+0x1d8>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d01d      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a50      	ldr	r2, [pc, #320]	@ (800ab3c <HAL_DMA_IRQHandler+0x1dc>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d018      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a4e      	ldr	r2, [pc, #312]	@ (800ab40 <HAL_DMA_IRQHandler+0x1e0>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d013      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a4d      	ldr	r2, [pc, #308]	@ (800ab44 <HAL_DMA_IRQHandler+0x1e4>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d00e      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a4b      	ldr	r2, [pc, #300]	@ (800ab48 <HAL_DMA_IRQHandler+0x1e8>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d009      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a4a      	ldr	r2, [pc, #296]	@ (800ab4c <HAL_DMA_IRQHandler+0x1ec>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d004      	beq.n	800aa32 <HAL_DMA_IRQHandler+0xd2>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a48      	ldr	r2, [pc, #288]	@ (800ab50 <HAL_DMA_IRQHandler+0x1f0>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d101      	bne.n	800aa36 <HAL_DMA_IRQHandler+0xd6>
 800aa32:	2301      	movs	r3, #1
 800aa34:	e000      	b.n	800aa38 <HAL_DMA_IRQHandler+0xd8>
 800aa36:	2300      	movs	r3, #0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f000 842b 	beq.w	800b294 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa42:	f003 031f 	and.w	r3, r3, #31
 800aa46:	2208      	movs	r2, #8
 800aa48:	409a      	lsls	r2, r3
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	4013      	ands	r3, r2
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f000 80a2 	beq.w	800ab98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a2e      	ldr	r2, [pc, #184]	@ (800ab14 <HAL_DMA_IRQHandler+0x1b4>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d04a      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a2d      	ldr	r2, [pc, #180]	@ (800ab18 <HAL_DMA_IRQHandler+0x1b8>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d045      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a2b      	ldr	r2, [pc, #172]	@ (800ab1c <HAL_DMA_IRQHandler+0x1bc>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d040      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a2a      	ldr	r2, [pc, #168]	@ (800ab20 <HAL_DMA_IRQHandler+0x1c0>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d03b      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a28      	ldr	r2, [pc, #160]	@ (800ab24 <HAL_DMA_IRQHandler+0x1c4>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d036      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a27      	ldr	r2, [pc, #156]	@ (800ab28 <HAL_DMA_IRQHandler+0x1c8>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d031      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a25      	ldr	r2, [pc, #148]	@ (800ab2c <HAL_DMA_IRQHandler+0x1cc>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d02c      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a24      	ldr	r2, [pc, #144]	@ (800ab30 <HAL_DMA_IRQHandler+0x1d0>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d027      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a22      	ldr	r2, [pc, #136]	@ (800ab34 <HAL_DMA_IRQHandler+0x1d4>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d022      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a21      	ldr	r2, [pc, #132]	@ (800ab38 <HAL_DMA_IRQHandler+0x1d8>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d01d      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a1f      	ldr	r2, [pc, #124]	@ (800ab3c <HAL_DMA_IRQHandler+0x1dc>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d018      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a1e      	ldr	r2, [pc, #120]	@ (800ab40 <HAL_DMA_IRQHandler+0x1e0>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d013      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a1c      	ldr	r2, [pc, #112]	@ (800ab44 <HAL_DMA_IRQHandler+0x1e4>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d00e      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a1b      	ldr	r2, [pc, #108]	@ (800ab48 <HAL_DMA_IRQHandler+0x1e8>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d009      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a19      	ldr	r2, [pc, #100]	@ (800ab4c <HAL_DMA_IRQHandler+0x1ec>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d004      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x194>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a18      	ldr	r2, [pc, #96]	@ (800ab50 <HAL_DMA_IRQHandler+0x1f0>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d12f      	bne.n	800ab54 <HAL_DMA_IRQHandler+0x1f4>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f003 0304 	and.w	r3, r3, #4
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	bf14      	ite	ne
 800ab02:	2301      	movne	r3, #1
 800ab04:	2300      	moveq	r3, #0
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	e02e      	b.n	800ab68 <HAL_DMA_IRQHandler+0x208>
 800ab0a:	bf00      	nop
 800ab0c:	24000000 	.word	0x24000000
 800ab10:	1b4e81b5 	.word	0x1b4e81b5
 800ab14:	40020010 	.word	0x40020010
 800ab18:	40020028 	.word	0x40020028
 800ab1c:	40020040 	.word	0x40020040
 800ab20:	40020058 	.word	0x40020058
 800ab24:	40020070 	.word	0x40020070
 800ab28:	40020088 	.word	0x40020088
 800ab2c:	400200a0 	.word	0x400200a0
 800ab30:	400200b8 	.word	0x400200b8
 800ab34:	40020410 	.word	0x40020410
 800ab38:	40020428 	.word	0x40020428
 800ab3c:	40020440 	.word	0x40020440
 800ab40:	40020458 	.word	0x40020458
 800ab44:	40020470 	.word	0x40020470
 800ab48:	40020488 	.word	0x40020488
 800ab4c:	400204a0 	.word	0x400204a0
 800ab50:	400204b8 	.word	0x400204b8
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f003 0308 	and.w	r3, r3, #8
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bf14      	ite	ne
 800ab62:	2301      	movne	r3, #1
 800ab64:	2300      	moveq	r3, #0
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d015      	beq.n	800ab98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f022 0204 	bic.w	r2, r2, #4
 800ab7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab80:	f003 031f 	and.w	r3, r3, #31
 800ab84:	2208      	movs	r2, #8
 800ab86:	409a      	lsls	r2, r3
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab90:	f043 0201 	orr.w	r2, r3, #1
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab9c:	f003 031f 	and.w	r3, r3, #31
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	fa22 f303 	lsr.w	r3, r2, r3
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d06e      	beq.n	800ac8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a69      	ldr	r2, [pc, #420]	@ (800ad58 <HAL_DMA_IRQHandler+0x3f8>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d04a      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a67      	ldr	r2, [pc, #412]	@ (800ad5c <HAL_DMA_IRQHandler+0x3fc>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d045      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a66      	ldr	r2, [pc, #408]	@ (800ad60 <HAL_DMA_IRQHandler+0x400>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d040      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a64      	ldr	r2, [pc, #400]	@ (800ad64 <HAL_DMA_IRQHandler+0x404>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d03b      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a63      	ldr	r2, [pc, #396]	@ (800ad68 <HAL_DMA_IRQHandler+0x408>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d036      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a61      	ldr	r2, [pc, #388]	@ (800ad6c <HAL_DMA_IRQHandler+0x40c>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d031      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a60      	ldr	r2, [pc, #384]	@ (800ad70 <HAL_DMA_IRQHandler+0x410>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d02c      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a5e      	ldr	r2, [pc, #376]	@ (800ad74 <HAL_DMA_IRQHandler+0x414>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d027      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a5d      	ldr	r2, [pc, #372]	@ (800ad78 <HAL_DMA_IRQHandler+0x418>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d022      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a5b      	ldr	r2, [pc, #364]	@ (800ad7c <HAL_DMA_IRQHandler+0x41c>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d01d      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a5a      	ldr	r2, [pc, #360]	@ (800ad80 <HAL_DMA_IRQHandler+0x420>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d018      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a58      	ldr	r2, [pc, #352]	@ (800ad84 <HAL_DMA_IRQHandler+0x424>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d013      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a57      	ldr	r2, [pc, #348]	@ (800ad88 <HAL_DMA_IRQHandler+0x428>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d00e      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a55      	ldr	r2, [pc, #340]	@ (800ad8c <HAL_DMA_IRQHandler+0x42c>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d009      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a54      	ldr	r2, [pc, #336]	@ (800ad90 <HAL_DMA_IRQHandler+0x430>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d004      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x2ee>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a52      	ldr	r2, [pc, #328]	@ (800ad94 <HAL_DMA_IRQHandler+0x434>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d10a      	bne.n	800ac64 <HAL_DMA_IRQHandler+0x304>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	bf14      	ite	ne
 800ac5c:	2301      	movne	r3, #1
 800ac5e:	2300      	moveq	r3, #0
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	e003      	b.n	800ac6c <HAL_DMA_IRQHandler+0x30c>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d00d      	beq.n	800ac8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac74:	f003 031f 	and.w	r3, r3, #31
 800ac78:	2201      	movs	r2, #1
 800ac7a:	409a      	lsls	r2, r3
 800ac7c:	6a3b      	ldr	r3, [r7, #32]
 800ac7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac84:	f043 0202 	orr.w	r2, r3, #2
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac90:	f003 031f 	and.w	r3, r3, #31
 800ac94:	2204      	movs	r2, #4
 800ac96:	409a      	lsls	r2, r3
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 808f 	beq.w	800adc0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a2c      	ldr	r2, [pc, #176]	@ (800ad58 <HAL_DMA_IRQHandler+0x3f8>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d04a      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a2a      	ldr	r2, [pc, #168]	@ (800ad5c <HAL_DMA_IRQHandler+0x3fc>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d045      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a29      	ldr	r2, [pc, #164]	@ (800ad60 <HAL_DMA_IRQHandler+0x400>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d040      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a27      	ldr	r2, [pc, #156]	@ (800ad64 <HAL_DMA_IRQHandler+0x404>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d03b      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a26      	ldr	r2, [pc, #152]	@ (800ad68 <HAL_DMA_IRQHandler+0x408>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d036      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a24      	ldr	r2, [pc, #144]	@ (800ad6c <HAL_DMA_IRQHandler+0x40c>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d031      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a23      	ldr	r2, [pc, #140]	@ (800ad70 <HAL_DMA_IRQHandler+0x410>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d02c      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a21      	ldr	r2, [pc, #132]	@ (800ad74 <HAL_DMA_IRQHandler+0x414>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d027      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a20      	ldr	r2, [pc, #128]	@ (800ad78 <HAL_DMA_IRQHandler+0x418>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d022      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a1e      	ldr	r2, [pc, #120]	@ (800ad7c <HAL_DMA_IRQHandler+0x41c>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d01d      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a1d      	ldr	r2, [pc, #116]	@ (800ad80 <HAL_DMA_IRQHandler+0x420>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d018      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a1b      	ldr	r2, [pc, #108]	@ (800ad84 <HAL_DMA_IRQHandler+0x424>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d013      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a1a      	ldr	r2, [pc, #104]	@ (800ad88 <HAL_DMA_IRQHandler+0x428>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d00e      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a18      	ldr	r2, [pc, #96]	@ (800ad8c <HAL_DMA_IRQHandler+0x42c>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d009      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a17      	ldr	r2, [pc, #92]	@ (800ad90 <HAL_DMA_IRQHandler+0x430>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d004      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x3e2>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a15      	ldr	r2, [pc, #84]	@ (800ad94 <HAL_DMA_IRQHandler+0x434>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d12a      	bne.n	800ad98 <HAL_DMA_IRQHandler+0x438>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 0302 	and.w	r3, r3, #2
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	bf14      	ite	ne
 800ad50:	2301      	movne	r3, #1
 800ad52:	2300      	moveq	r3, #0
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	e023      	b.n	800ada0 <HAL_DMA_IRQHandler+0x440>
 800ad58:	40020010 	.word	0x40020010
 800ad5c:	40020028 	.word	0x40020028
 800ad60:	40020040 	.word	0x40020040
 800ad64:	40020058 	.word	0x40020058
 800ad68:	40020070 	.word	0x40020070
 800ad6c:	40020088 	.word	0x40020088
 800ad70:	400200a0 	.word	0x400200a0
 800ad74:	400200b8 	.word	0x400200b8
 800ad78:	40020410 	.word	0x40020410
 800ad7c:	40020428 	.word	0x40020428
 800ad80:	40020440 	.word	0x40020440
 800ad84:	40020458 	.word	0x40020458
 800ad88:	40020470 	.word	0x40020470
 800ad8c:	40020488 	.word	0x40020488
 800ad90:	400204a0 	.word	0x400204a0
 800ad94:	400204b8 	.word	0x400204b8
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2300      	movs	r3, #0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00d      	beq.n	800adc0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ada8:	f003 031f 	and.w	r3, r3, #31
 800adac:	2204      	movs	r2, #4
 800adae:	409a      	lsls	r2, r3
 800adb0:	6a3b      	ldr	r3, [r7, #32]
 800adb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adb8:	f043 0204 	orr.w	r2, r3, #4
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adc4:	f003 031f 	and.w	r3, r3, #31
 800adc8:	2210      	movs	r2, #16
 800adca:	409a      	lsls	r2, r3
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	4013      	ands	r3, r2
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 80a6 	beq.w	800af22 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a85      	ldr	r2, [pc, #532]	@ (800aff0 <HAL_DMA_IRQHandler+0x690>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d04a      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a83      	ldr	r2, [pc, #524]	@ (800aff4 <HAL_DMA_IRQHandler+0x694>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d045      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a82      	ldr	r2, [pc, #520]	@ (800aff8 <HAL_DMA_IRQHandler+0x698>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d040      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a80      	ldr	r2, [pc, #512]	@ (800affc <HAL_DMA_IRQHandler+0x69c>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d03b      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a7f      	ldr	r2, [pc, #508]	@ (800b000 <HAL_DMA_IRQHandler+0x6a0>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d036      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a7d      	ldr	r2, [pc, #500]	@ (800b004 <HAL_DMA_IRQHandler+0x6a4>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d031      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a7c      	ldr	r2, [pc, #496]	@ (800b008 <HAL_DMA_IRQHandler+0x6a8>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d02c      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a7a      	ldr	r2, [pc, #488]	@ (800b00c <HAL_DMA_IRQHandler+0x6ac>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d027      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a79      	ldr	r2, [pc, #484]	@ (800b010 <HAL_DMA_IRQHandler+0x6b0>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d022      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a77      	ldr	r2, [pc, #476]	@ (800b014 <HAL_DMA_IRQHandler+0x6b4>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d01d      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a76      	ldr	r2, [pc, #472]	@ (800b018 <HAL_DMA_IRQHandler+0x6b8>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d018      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a74      	ldr	r2, [pc, #464]	@ (800b01c <HAL_DMA_IRQHandler+0x6bc>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d013      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a73      	ldr	r2, [pc, #460]	@ (800b020 <HAL_DMA_IRQHandler+0x6c0>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d00e      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a71      	ldr	r2, [pc, #452]	@ (800b024 <HAL_DMA_IRQHandler+0x6c4>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d009      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a70      	ldr	r2, [pc, #448]	@ (800b028 <HAL_DMA_IRQHandler+0x6c8>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d004      	beq.n	800ae76 <HAL_DMA_IRQHandler+0x516>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a6e      	ldr	r2, [pc, #440]	@ (800b02c <HAL_DMA_IRQHandler+0x6cc>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d10a      	bne.n	800ae8c <HAL_DMA_IRQHandler+0x52c>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 0308 	and.w	r3, r3, #8
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	bf14      	ite	ne
 800ae84:	2301      	movne	r3, #1
 800ae86:	2300      	moveq	r3, #0
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	e009      	b.n	800aea0 <HAL_DMA_IRQHandler+0x540>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0304 	and.w	r3, r3, #4
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	bf14      	ite	ne
 800ae9a:	2301      	movne	r3, #1
 800ae9c:	2300      	moveq	r3, #0
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d03e      	beq.n	800af22 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aea8:	f003 031f 	and.w	r3, r3, #31
 800aeac:	2210      	movs	r2, #16
 800aeae:	409a      	lsls	r2, r3
 800aeb0:	6a3b      	ldr	r3, [r7, #32]
 800aeb2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d018      	beq.n	800aef4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d108      	bne.n	800aee2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d024      	beq.n	800af22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	4798      	blx	r3
 800aee0:	e01f      	b.n	800af22 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d01b      	beq.n	800af22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	4798      	blx	r3
 800aef2:	e016      	b.n	800af22 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d107      	bne.n	800af12 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f022 0208 	bic.w	r2, r2, #8
 800af10:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af16:	2b00      	cmp	r3, #0
 800af18:	d003      	beq.n	800af22 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af26:	f003 031f 	and.w	r3, r3, #31
 800af2a:	2220      	movs	r2, #32
 800af2c:	409a      	lsls	r2, r3
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	4013      	ands	r3, r2
 800af32:	2b00      	cmp	r3, #0
 800af34:	f000 8110 	beq.w	800b158 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a2c      	ldr	r2, [pc, #176]	@ (800aff0 <HAL_DMA_IRQHandler+0x690>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d04a      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a2b      	ldr	r2, [pc, #172]	@ (800aff4 <HAL_DMA_IRQHandler+0x694>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d045      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a29      	ldr	r2, [pc, #164]	@ (800aff8 <HAL_DMA_IRQHandler+0x698>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d040      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a28      	ldr	r2, [pc, #160]	@ (800affc <HAL_DMA_IRQHandler+0x69c>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d03b      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a26      	ldr	r2, [pc, #152]	@ (800b000 <HAL_DMA_IRQHandler+0x6a0>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d036      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a25      	ldr	r2, [pc, #148]	@ (800b004 <HAL_DMA_IRQHandler+0x6a4>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d031      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a23      	ldr	r2, [pc, #140]	@ (800b008 <HAL_DMA_IRQHandler+0x6a8>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d02c      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a22      	ldr	r2, [pc, #136]	@ (800b00c <HAL_DMA_IRQHandler+0x6ac>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d027      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a20      	ldr	r2, [pc, #128]	@ (800b010 <HAL_DMA_IRQHandler+0x6b0>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d022      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a1f      	ldr	r2, [pc, #124]	@ (800b014 <HAL_DMA_IRQHandler+0x6b4>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d01d      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a1d      	ldr	r2, [pc, #116]	@ (800b018 <HAL_DMA_IRQHandler+0x6b8>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d018      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a1c      	ldr	r2, [pc, #112]	@ (800b01c <HAL_DMA_IRQHandler+0x6bc>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d013      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a1a      	ldr	r2, [pc, #104]	@ (800b020 <HAL_DMA_IRQHandler+0x6c0>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d00e      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a19      	ldr	r2, [pc, #100]	@ (800b024 <HAL_DMA_IRQHandler+0x6c4>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d009      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a17      	ldr	r2, [pc, #92]	@ (800b028 <HAL_DMA_IRQHandler+0x6c8>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d004      	beq.n	800afd8 <HAL_DMA_IRQHandler+0x678>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a16      	ldr	r2, [pc, #88]	@ (800b02c <HAL_DMA_IRQHandler+0x6cc>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d12b      	bne.n	800b030 <HAL_DMA_IRQHandler+0x6d0>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 0310 	and.w	r3, r3, #16
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	bf14      	ite	ne
 800afe6:	2301      	movne	r3, #1
 800afe8:	2300      	moveq	r3, #0
 800afea:	b2db      	uxtb	r3, r3
 800afec:	e02a      	b.n	800b044 <HAL_DMA_IRQHandler+0x6e4>
 800afee:	bf00      	nop
 800aff0:	40020010 	.word	0x40020010
 800aff4:	40020028 	.word	0x40020028
 800aff8:	40020040 	.word	0x40020040
 800affc:	40020058 	.word	0x40020058
 800b000:	40020070 	.word	0x40020070
 800b004:	40020088 	.word	0x40020088
 800b008:	400200a0 	.word	0x400200a0
 800b00c:	400200b8 	.word	0x400200b8
 800b010:	40020410 	.word	0x40020410
 800b014:	40020428 	.word	0x40020428
 800b018:	40020440 	.word	0x40020440
 800b01c:	40020458 	.word	0x40020458
 800b020:	40020470 	.word	0x40020470
 800b024:	40020488 	.word	0x40020488
 800b028:	400204a0 	.word	0x400204a0
 800b02c:	400204b8 	.word	0x400204b8
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0302 	and.w	r3, r3, #2
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bf14      	ite	ne
 800b03e:	2301      	movne	r3, #1
 800b040:	2300      	moveq	r3, #0
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b00      	cmp	r3, #0
 800b046:	f000 8087 	beq.w	800b158 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b04e:	f003 031f 	and.w	r3, r3, #31
 800b052:	2220      	movs	r2, #32
 800b054:	409a      	lsls	r2, r3
 800b056:	6a3b      	ldr	r3, [r7, #32]
 800b058:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b04      	cmp	r3, #4
 800b064:	d139      	bne.n	800b0da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f022 0216 	bic.w	r2, r2, #22
 800b074:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	695a      	ldr	r2, [r3, #20]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b084:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d103      	bne.n	800b096 <HAL_DMA_IRQHandler+0x736>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b092:	2b00      	cmp	r3, #0
 800b094:	d007      	beq.n	800b0a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f022 0208 	bic.w	r2, r2, #8
 800b0a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0aa:	f003 031f 	and.w	r3, r3, #31
 800b0ae:	223f      	movs	r2, #63	@ 0x3f
 800b0b0:	409a      	lsls	r2, r3
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f000 834a 	beq.w	800b764 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	4798      	blx	r3
          }
          return;
 800b0d8:	e344      	b.n	800b764 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d018      	beq.n	800b11a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d108      	bne.n	800b108 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d02c      	beq.n	800b158 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	4798      	blx	r3
 800b106:	e027      	b.n	800b158 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d023      	beq.n	800b158 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	4798      	blx	r3
 800b118:	e01e      	b.n	800b158 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b124:	2b00      	cmp	r3, #0
 800b126:	d10f      	bne.n	800b148 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f022 0210 	bic.w	r2, r2, #16
 800b136:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d003      	beq.n	800b158 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f000 8306 	beq.w	800b76e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b166:	f003 0301 	and.w	r3, r3, #1
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	f000 8088 	beq.w	800b280 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2204      	movs	r2, #4
 800b174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a7a      	ldr	r2, [pc, #488]	@ (800b368 <HAL_DMA_IRQHandler+0xa08>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d04a      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a79      	ldr	r2, [pc, #484]	@ (800b36c <HAL_DMA_IRQHandler+0xa0c>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d045      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a77      	ldr	r2, [pc, #476]	@ (800b370 <HAL_DMA_IRQHandler+0xa10>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d040      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a76      	ldr	r2, [pc, #472]	@ (800b374 <HAL_DMA_IRQHandler+0xa14>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d03b      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a74      	ldr	r2, [pc, #464]	@ (800b378 <HAL_DMA_IRQHandler+0xa18>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d036      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a73      	ldr	r2, [pc, #460]	@ (800b37c <HAL_DMA_IRQHandler+0xa1c>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d031      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a71      	ldr	r2, [pc, #452]	@ (800b380 <HAL_DMA_IRQHandler+0xa20>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d02c      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a70      	ldr	r2, [pc, #448]	@ (800b384 <HAL_DMA_IRQHandler+0xa24>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d027      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a6e      	ldr	r2, [pc, #440]	@ (800b388 <HAL_DMA_IRQHandler+0xa28>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d022      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a6d      	ldr	r2, [pc, #436]	@ (800b38c <HAL_DMA_IRQHandler+0xa2c>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d01d      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a6b      	ldr	r2, [pc, #428]	@ (800b390 <HAL_DMA_IRQHandler+0xa30>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d018      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a6a      	ldr	r2, [pc, #424]	@ (800b394 <HAL_DMA_IRQHandler+0xa34>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d013      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a68      	ldr	r2, [pc, #416]	@ (800b398 <HAL_DMA_IRQHandler+0xa38>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d00e      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a67      	ldr	r2, [pc, #412]	@ (800b39c <HAL_DMA_IRQHandler+0xa3c>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d009      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a65      	ldr	r2, [pc, #404]	@ (800b3a0 <HAL_DMA_IRQHandler+0xa40>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d004      	beq.n	800b218 <HAL_DMA_IRQHandler+0x8b8>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a64      	ldr	r2, [pc, #400]	@ (800b3a4 <HAL_DMA_IRQHandler+0xa44>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d108      	bne.n	800b22a <HAL_DMA_IRQHandler+0x8ca>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f022 0201 	bic.w	r2, r2, #1
 800b226:	601a      	str	r2, [r3, #0]
 800b228:	e007      	b.n	800b23a <HAL_DMA_IRQHandler+0x8da>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f022 0201 	bic.w	r2, r2, #1
 800b238:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	3301      	adds	r3, #1
 800b23e:	60fb      	str	r3, [r7, #12]
 800b240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b242:	429a      	cmp	r2, r3
 800b244:	d307      	bcc.n	800b256 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f003 0301 	and.w	r3, r3, #1
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1f2      	bne.n	800b23a <HAL_DMA_IRQHandler+0x8da>
 800b254:	e000      	b.n	800b258 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800b256:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 0301 	and.w	r3, r3, #1
 800b262:	2b00      	cmp	r3, #0
 800b264:	d004      	beq.n	800b270 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2203      	movs	r2, #3
 800b26a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800b26e:	e003      	b.n	800b278 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 8272 	beq.w	800b76e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	4798      	blx	r3
 800b292:	e26c      	b.n	800b76e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a43      	ldr	r2, [pc, #268]	@ (800b3a8 <HAL_DMA_IRQHandler+0xa48>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d022      	beq.n	800b2e4 <HAL_DMA_IRQHandler+0x984>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4a42      	ldr	r2, [pc, #264]	@ (800b3ac <HAL_DMA_IRQHandler+0xa4c>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d01d      	beq.n	800b2e4 <HAL_DMA_IRQHandler+0x984>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a40      	ldr	r2, [pc, #256]	@ (800b3b0 <HAL_DMA_IRQHandler+0xa50>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d018      	beq.n	800b2e4 <HAL_DMA_IRQHandler+0x984>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a3f      	ldr	r2, [pc, #252]	@ (800b3b4 <HAL_DMA_IRQHandler+0xa54>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d013      	beq.n	800b2e4 <HAL_DMA_IRQHandler+0x984>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a3d      	ldr	r2, [pc, #244]	@ (800b3b8 <HAL_DMA_IRQHandler+0xa58>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d00e      	beq.n	800b2e4 <HAL_DMA_IRQHandler+0x984>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a3c      	ldr	r2, [pc, #240]	@ (800b3bc <HAL_DMA_IRQHandler+0xa5c>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d009      	beq.n	800b2e4 <HAL_DMA_IRQHandler+0x984>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a3a      	ldr	r2, [pc, #232]	@ (800b3c0 <HAL_DMA_IRQHandler+0xa60>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d004      	beq.n	800b2e4 <HAL_DMA_IRQHandler+0x984>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a39      	ldr	r2, [pc, #228]	@ (800b3c4 <HAL_DMA_IRQHandler+0xa64>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d101      	bne.n	800b2e8 <HAL_DMA_IRQHandler+0x988>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e000      	b.n	800b2ea <HAL_DMA_IRQHandler+0x98a>
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f000 823f 	beq.w	800b76e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2fc:	f003 031f 	and.w	r3, r3, #31
 800b300:	2204      	movs	r2, #4
 800b302:	409a      	lsls	r2, r3
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	4013      	ands	r3, r2
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f000 80cd 	beq.w	800b4a8 <HAL_DMA_IRQHandler+0xb48>
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	f003 0304 	and.w	r3, r3, #4
 800b314:	2b00      	cmp	r3, #0
 800b316:	f000 80c7 	beq.w	800b4a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b31e:	f003 031f 	and.w	r3, r3, #31
 800b322:	2204      	movs	r2, #4
 800b324:	409a      	lsls	r2, r3
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d049      	beq.n	800b3c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d109      	bne.n	800b352 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b342:	2b00      	cmp	r3, #0
 800b344:	f000 8210 	beq.w	800b768 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b350:	e20a      	b.n	800b768 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b356:	2b00      	cmp	r3, #0
 800b358:	f000 8206 	beq.w	800b768 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b364:	e200      	b.n	800b768 <HAL_DMA_IRQHandler+0xe08>
 800b366:	bf00      	nop
 800b368:	40020010 	.word	0x40020010
 800b36c:	40020028 	.word	0x40020028
 800b370:	40020040 	.word	0x40020040
 800b374:	40020058 	.word	0x40020058
 800b378:	40020070 	.word	0x40020070
 800b37c:	40020088 	.word	0x40020088
 800b380:	400200a0 	.word	0x400200a0
 800b384:	400200b8 	.word	0x400200b8
 800b388:	40020410 	.word	0x40020410
 800b38c:	40020428 	.word	0x40020428
 800b390:	40020440 	.word	0x40020440
 800b394:	40020458 	.word	0x40020458
 800b398:	40020470 	.word	0x40020470
 800b39c:	40020488 	.word	0x40020488
 800b3a0:	400204a0 	.word	0x400204a0
 800b3a4:	400204b8 	.word	0x400204b8
 800b3a8:	58025408 	.word	0x58025408
 800b3ac:	5802541c 	.word	0x5802541c
 800b3b0:	58025430 	.word	0x58025430
 800b3b4:	58025444 	.word	0x58025444
 800b3b8:	58025458 	.word	0x58025458
 800b3bc:	5802546c 	.word	0x5802546c
 800b3c0:	58025480 	.word	0x58025480
 800b3c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	f003 0320 	and.w	r3, r3, #32
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d160      	bne.n	800b494 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a7f      	ldr	r2, [pc, #508]	@ (800b5d4 <HAL_DMA_IRQHandler+0xc74>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d04a      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a7d      	ldr	r2, [pc, #500]	@ (800b5d8 <HAL_DMA_IRQHandler+0xc78>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d045      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a7c      	ldr	r2, [pc, #496]	@ (800b5dc <HAL_DMA_IRQHandler+0xc7c>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d040      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a7a      	ldr	r2, [pc, #488]	@ (800b5e0 <HAL_DMA_IRQHandler+0xc80>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d03b      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a79      	ldr	r2, [pc, #484]	@ (800b5e4 <HAL_DMA_IRQHandler+0xc84>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d036      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a77      	ldr	r2, [pc, #476]	@ (800b5e8 <HAL_DMA_IRQHandler+0xc88>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d031      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a76      	ldr	r2, [pc, #472]	@ (800b5ec <HAL_DMA_IRQHandler+0xc8c>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d02c      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a74      	ldr	r2, [pc, #464]	@ (800b5f0 <HAL_DMA_IRQHandler+0xc90>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d027      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a73      	ldr	r2, [pc, #460]	@ (800b5f4 <HAL_DMA_IRQHandler+0xc94>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d022      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a71      	ldr	r2, [pc, #452]	@ (800b5f8 <HAL_DMA_IRQHandler+0xc98>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d01d      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a70      	ldr	r2, [pc, #448]	@ (800b5fc <HAL_DMA_IRQHandler+0xc9c>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d018      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a6e      	ldr	r2, [pc, #440]	@ (800b600 <HAL_DMA_IRQHandler+0xca0>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d013      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a6d      	ldr	r2, [pc, #436]	@ (800b604 <HAL_DMA_IRQHandler+0xca4>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d00e      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a6b      	ldr	r2, [pc, #428]	@ (800b608 <HAL_DMA_IRQHandler+0xca8>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d009      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a6a      	ldr	r2, [pc, #424]	@ (800b60c <HAL_DMA_IRQHandler+0xcac>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d004      	beq.n	800b472 <HAL_DMA_IRQHandler+0xb12>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a68      	ldr	r2, [pc, #416]	@ (800b610 <HAL_DMA_IRQHandler+0xcb0>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d108      	bne.n	800b484 <HAL_DMA_IRQHandler+0xb24>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f022 0208 	bic.w	r2, r2, #8
 800b480:	601a      	str	r2, [r3, #0]
 800b482:	e007      	b.n	800b494 <HAL_DMA_IRQHandler+0xb34>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f022 0204 	bic.w	r2, r2, #4
 800b492:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f000 8165 	beq.w	800b768 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b4a6:	e15f      	b.n	800b768 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4ac:	f003 031f 	and.w	r3, r3, #31
 800b4b0:	2202      	movs	r2, #2
 800b4b2:	409a      	lsls	r2, r3
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f000 80c5 	beq.w	800b648 <HAL_DMA_IRQHandler+0xce8>
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	f003 0302 	and.w	r3, r3, #2
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f000 80bf 	beq.w	800b648 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4ce:	f003 031f 	and.w	r3, r3, #31
 800b4d2:	2202      	movs	r2, #2
 800b4d4:	409a      	lsls	r2, r3
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d018      	beq.n	800b516 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d109      	bne.n	800b502 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f000 813a 	beq.w	800b76c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b500:	e134      	b.n	800b76c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b506:	2b00      	cmp	r3, #0
 800b508:	f000 8130 	beq.w	800b76c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b514:	e12a      	b.n	800b76c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	f003 0320 	and.w	r3, r3, #32
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f040 8089 	bne.w	800b634 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a2b      	ldr	r2, [pc, #172]	@ (800b5d4 <HAL_DMA_IRQHandler+0xc74>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d04a      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a29      	ldr	r2, [pc, #164]	@ (800b5d8 <HAL_DMA_IRQHandler+0xc78>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d045      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a28      	ldr	r2, [pc, #160]	@ (800b5dc <HAL_DMA_IRQHandler+0xc7c>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d040      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a26      	ldr	r2, [pc, #152]	@ (800b5e0 <HAL_DMA_IRQHandler+0xc80>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d03b      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a25      	ldr	r2, [pc, #148]	@ (800b5e4 <HAL_DMA_IRQHandler+0xc84>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d036      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a23      	ldr	r2, [pc, #140]	@ (800b5e8 <HAL_DMA_IRQHandler+0xc88>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d031      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a22      	ldr	r2, [pc, #136]	@ (800b5ec <HAL_DMA_IRQHandler+0xc8c>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d02c      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a20      	ldr	r2, [pc, #128]	@ (800b5f0 <HAL_DMA_IRQHandler+0xc90>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d027      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a1f      	ldr	r2, [pc, #124]	@ (800b5f4 <HAL_DMA_IRQHandler+0xc94>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d022      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a1d      	ldr	r2, [pc, #116]	@ (800b5f8 <HAL_DMA_IRQHandler+0xc98>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d01d      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a1c      	ldr	r2, [pc, #112]	@ (800b5fc <HAL_DMA_IRQHandler+0xc9c>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d018      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a1a      	ldr	r2, [pc, #104]	@ (800b600 <HAL_DMA_IRQHandler+0xca0>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d013      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a19      	ldr	r2, [pc, #100]	@ (800b604 <HAL_DMA_IRQHandler+0xca4>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d00e      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a17      	ldr	r2, [pc, #92]	@ (800b608 <HAL_DMA_IRQHandler+0xca8>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d009      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a16      	ldr	r2, [pc, #88]	@ (800b60c <HAL_DMA_IRQHandler+0xcac>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d004      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0xc62>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a14      	ldr	r2, [pc, #80]	@ (800b610 <HAL_DMA_IRQHandler+0xcb0>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d128      	bne.n	800b614 <HAL_DMA_IRQHandler+0xcb4>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f022 0214 	bic.w	r2, r2, #20
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	e027      	b.n	800b624 <HAL_DMA_IRQHandler+0xcc4>
 800b5d4:	40020010 	.word	0x40020010
 800b5d8:	40020028 	.word	0x40020028
 800b5dc:	40020040 	.word	0x40020040
 800b5e0:	40020058 	.word	0x40020058
 800b5e4:	40020070 	.word	0x40020070
 800b5e8:	40020088 	.word	0x40020088
 800b5ec:	400200a0 	.word	0x400200a0
 800b5f0:	400200b8 	.word	0x400200b8
 800b5f4:	40020410 	.word	0x40020410
 800b5f8:	40020428 	.word	0x40020428
 800b5fc:	40020440 	.word	0x40020440
 800b600:	40020458 	.word	0x40020458
 800b604:	40020470 	.word	0x40020470
 800b608:	40020488 	.word	0x40020488
 800b60c:	400204a0 	.word	0x400204a0
 800b610:	400204b8 	.word	0x400204b8
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f022 020a 	bic.w	r2, r2, #10
 800b622:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f000 8097 	beq.w	800b76c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b646:	e091      	b.n	800b76c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b64c:	f003 031f 	and.w	r3, r3, #31
 800b650:	2208      	movs	r2, #8
 800b652:	409a      	lsls	r2, r3
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	4013      	ands	r3, r2
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f000 8088 	beq.w	800b76e <HAL_DMA_IRQHandler+0xe0e>
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	f003 0308 	and.w	r3, r3, #8
 800b664:	2b00      	cmp	r3, #0
 800b666:	f000 8082 	beq.w	800b76e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a41      	ldr	r2, [pc, #260]	@ (800b774 <HAL_DMA_IRQHandler+0xe14>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d04a      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a3f      	ldr	r2, [pc, #252]	@ (800b778 <HAL_DMA_IRQHandler+0xe18>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d045      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a3e      	ldr	r2, [pc, #248]	@ (800b77c <HAL_DMA_IRQHandler+0xe1c>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d040      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a3c      	ldr	r2, [pc, #240]	@ (800b780 <HAL_DMA_IRQHandler+0xe20>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d03b      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a3b      	ldr	r2, [pc, #236]	@ (800b784 <HAL_DMA_IRQHandler+0xe24>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d036      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a39      	ldr	r2, [pc, #228]	@ (800b788 <HAL_DMA_IRQHandler+0xe28>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d031      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a38      	ldr	r2, [pc, #224]	@ (800b78c <HAL_DMA_IRQHandler+0xe2c>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d02c      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a36      	ldr	r2, [pc, #216]	@ (800b790 <HAL_DMA_IRQHandler+0xe30>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d027      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a35      	ldr	r2, [pc, #212]	@ (800b794 <HAL_DMA_IRQHandler+0xe34>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d022      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a33      	ldr	r2, [pc, #204]	@ (800b798 <HAL_DMA_IRQHandler+0xe38>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d01d      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a32      	ldr	r2, [pc, #200]	@ (800b79c <HAL_DMA_IRQHandler+0xe3c>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d018      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a30      	ldr	r2, [pc, #192]	@ (800b7a0 <HAL_DMA_IRQHandler+0xe40>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d013      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a2f      	ldr	r2, [pc, #188]	@ (800b7a4 <HAL_DMA_IRQHandler+0xe44>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d00e      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a2d      	ldr	r2, [pc, #180]	@ (800b7a8 <HAL_DMA_IRQHandler+0xe48>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d009      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a2c      	ldr	r2, [pc, #176]	@ (800b7ac <HAL_DMA_IRQHandler+0xe4c>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d004      	beq.n	800b70a <HAL_DMA_IRQHandler+0xdaa>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a2a      	ldr	r2, [pc, #168]	@ (800b7b0 <HAL_DMA_IRQHandler+0xe50>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d108      	bne.n	800b71c <HAL_DMA_IRQHandler+0xdbc>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f022 021c 	bic.w	r2, r2, #28
 800b718:	601a      	str	r2, [r3, #0]
 800b71a:	e007      	b.n	800b72c <HAL_DMA_IRQHandler+0xdcc>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f022 020e 	bic.w	r2, r2, #14
 800b72a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b730:	f003 031f 	and.w	r3, r3, #31
 800b734:	2201      	movs	r2, #1
 800b736:	409a      	lsls	r2, r3
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b756:	2b00      	cmp	r3, #0
 800b758:	d009      	beq.n	800b76e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	4798      	blx	r3
 800b762:	e004      	b.n	800b76e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b764:	bf00      	nop
 800b766:	e002      	b.n	800b76e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b768:	bf00      	nop
 800b76a:	e000      	b.n	800b76e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b76c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b76e:	3728      	adds	r7, #40	@ 0x28
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	40020010 	.word	0x40020010
 800b778:	40020028 	.word	0x40020028
 800b77c:	40020040 	.word	0x40020040
 800b780:	40020058 	.word	0x40020058
 800b784:	40020070 	.word	0x40020070
 800b788:	40020088 	.word	0x40020088
 800b78c:	400200a0 	.word	0x400200a0
 800b790:	400200b8 	.word	0x400200b8
 800b794:	40020410 	.word	0x40020410
 800b798:	40020428 	.word	0x40020428
 800b79c:	40020440 	.word	0x40020440
 800b7a0:	40020458 	.word	0x40020458
 800b7a4:	40020470 	.word	0x40020470
 800b7a8:	40020488 	.word	0x40020488
 800b7ac:	400204a0 	.word	0x400204a0
 800b7b0:	400204b8 	.word	0x400204b8

0800b7b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
 800b7c0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7c6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7cc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a7f      	ldr	r2, [pc, #508]	@ (800b9d0 <DMA_SetConfig+0x21c>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d072      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a7d      	ldr	r2, [pc, #500]	@ (800b9d4 <DMA_SetConfig+0x220>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d06d      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a7c      	ldr	r2, [pc, #496]	@ (800b9d8 <DMA_SetConfig+0x224>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d068      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a7a      	ldr	r2, [pc, #488]	@ (800b9dc <DMA_SetConfig+0x228>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d063      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a79      	ldr	r2, [pc, #484]	@ (800b9e0 <DMA_SetConfig+0x22c>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d05e      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a77      	ldr	r2, [pc, #476]	@ (800b9e4 <DMA_SetConfig+0x230>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d059      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a76      	ldr	r2, [pc, #472]	@ (800b9e8 <DMA_SetConfig+0x234>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d054      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a74      	ldr	r2, [pc, #464]	@ (800b9ec <DMA_SetConfig+0x238>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d04f      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a73      	ldr	r2, [pc, #460]	@ (800b9f0 <DMA_SetConfig+0x23c>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d04a      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a71      	ldr	r2, [pc, #452]	@ (800b9f4 <DMA_SetConfig+0x240>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d045      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a70      	ldr	r2, [pc, #448]	@ (800b9f8 <DMA_SetConfig+0x244>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d040      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a6e      	ldr	r2, [pc, #440]	@ (800b9fc <DMA_SetConfig+0x248>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d03b      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a6d      	ldr	r2, [pc, #436]	@ (800ba00 <DMA_SetConfig+0x24c>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d036      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a6b      	ldr	r2, [pc, #428]	@ (800ba04 <DMA_SetConfig+0x250>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d031      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a6a      	ldr	r2, [pc, #424]	@ (800ba08 <DMA_SetConfig+0x254>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d02c      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a68      	ldr	r2, [pc, #416]	@ (800ba0c <DMA_SetConfig+0x258>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d027      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a67      	ldr	r2, [pc, #412]	@ (800ba10 <DMA_SetConfig+0x25c>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d022      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a65      	ldr	r2, [pc, #404]	@ (800ba14 <DMA_SetConfig+0x260>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d01d      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a64      	ldr	r2, [pc, #400]	@ (800ba18 <DMA_SetConfig+0x264>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d018      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a62      	ldr	r2, [pc, #392]	@ (800ba1c <DMA_SetConfig+0x268>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d013      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a61      	ldr	r2, [pc, #388]	@ (800ba20 <DMA_SetConfig+0x26c>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d00e      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a5f      	ldr	r2, [pc, #380]	@ (800ba24 <DMA_SetConfig+0x270>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d009      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a5e      	ldr	r2, [pc, #376]	@ (800ba28 <DMA_SetConfig+0x274>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d004      	beq.n	800b8be <DMA_SetConfig+0x10a>
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a5c      	ldr	r2, [pc, #368]	@ (800ba2c <DMA_SetConfig+0x278>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d101      	bne.n	800b8c2 <DMA_SetConfig+0x10e>
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e000      	b.n	800b8c4 <DMA_SetConfig+0x110>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00d      	beq.n	800b8e4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b8d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d004      	beq.n	800b8e4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b8e2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a39      	ldr	r2, [pc, #228]	@ (800b9d0 <DMA_SetConfig+0x21c>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d04a      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a38      	ldr	r2, [pc, #224]	@ (800b9d4 <DMA_SetConfig+0x220>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d045      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a36      	ldr	r2, [pc, #216]	@ (800b9d8 <DMA_SetConfig+0x224>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d040      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a35      	ldr	r2, [pc, #212]	@ (800b9dc <DMA_SetConfig+0x228>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d03b      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a33      	ldr	r2, [pc, #204]	@ (800b9e0 <DMA_SetConfig+0x22c>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d036      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a32      	ldr	r2, [pc, #200]	@ (800b9e4 <DMA_SetConfig+0x230>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d031      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a30      	ldr	r2, [pc, #192]	@ (800b9e8 <DMA_SetConfig+0x234>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d02c      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a2f      	ldr	r2, [pc, #188]	@ (800b9ec <DMA_SetConfig+0x238>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d027      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a2d      	ldr	r2, [pc, #180]	@ (800b9f0 <DMA_SetConfig+0x23c>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d022      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a2c      	ldr	r2, [pc, #176]	@ (800b9f4 <DMA_SetConfig+0x240>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d01d      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a2a      	ldr	r2, [pc, #168]	@ (800b9f8 <DMA_SetConfig+0x244>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d018      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a29      	ldr	r2, [pc, #164]	@ (800b9fc <DMA_SetConfig+0x248>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d013      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a27      	ldr	r2, [pc, #156]	@ (800ba00 <DMA_SetConfig+0x24c>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d00e      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a26      	ldr	r2, [pc, #152]	@ (800ba04 <DMA_SetConfig+0x250>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d009      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a24      	ldr	r2, [pc, #144]	@ (800ba08 <DMA_SetConfig+0x254>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d004      	beq.n	800b984 <DMA_SetConfig+0x1d0>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a23      	ldr	r2, [pc, #140]	@ (800ba0c <DMA_SetConfig+0x258>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d101      	bne.n	800b988 <DMA_SetConfig+0x1d4>
 800b984:	2301      	movs	r3, #1
 800b986:	e000      	b.n	800b98a <DMA_SetConfig+0x1d6>
 800b988:	2300      	movs	r3, #0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d059      	beq.n	800ba42 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b992:	f003 031f 	and.w	r3, r3, #31
 800b996:	223f      	movs	r2, #63	@ 0x3f
 800b998:	409a      	lsls	r2, r3
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b9ac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	683a      	ldr	r2, [r7, #0]
 800b9b4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	689b      	ldr	r3, [r3, #8]
 800b9ba:	2b40      	cmp	r3, #64	@ 0x40
 800b9bc:	d138      	bne.n	800ba30 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b9ce:	e086      	b.n	800bade <DMA_SetConfig+0x32a>
 800b9d0:	40020010 	.word	0x40020010
 800b9d4:	40020028 	.word	0x40020028
 800b9d8:	40020040 	.word	0x40020040
 800b9dc:	40020058 	.word	0x40020058
 800b9e0:	40020070 	.word	0x40020070
 800b9e4:	40020088 	.word	0x40020088
 800b9e8:	400200a0 	.word	0x400200a0
 800b9ec:	400200b8 	.word	0x400200b8
 800b9f0:	40020410 	.word	0x40020410
 800b9f4:	40020428 	.word	0x40020428
 800b9f8:	40020440 	.word	0x40020440
 800b9fc:	40020458 	.word	0x40020458
 800ba00:	40020470 	.word	0x40020470
 800ba04:	40020488 	.word	0x40020488
 800ba08:	400204a0 	.word	0x400204a0
 800ba0c:	400204b8 	.word	0x400204b8
 800ba10:	58025408 	.word	0x58025408
 800ba14:	5802541c 	.word	0x5802541c
 800ba18:	58025430 	.word	0x58025430
 800ba1c:	58025444 	.word	0x58025444
 800ba20:	58025458 	.word	0x58025458
 800ba24:	5802546c 	.word	0x5802546c
 800ba28:	58025480 	.word	0x58025480
 800ba2c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	68ba      	ldr	r2, [r7, #8]
 800ba36:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	60da      	str	r2, [r3, #12]
}
 800ba40:	e04d      	b.n	800bade <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a29      	ldr	r2, [pc, #164]	@ (800baec <DMA_SetConfig+0x338>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d022      	beq.n	800ba92 <DMA_SetConfig+0x2de>
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a27      	ldr	r2, [pc, #156]	@ (800baf0 <DMA_SetConfig+0x33c>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d01d      	beq.n	800ba92 <DMA_SetConfig+0x2de>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a26      	ldr	r2, [pc, #152]	@ (800baf4 <DMA_SetConfig+0x340>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d018      	beq.n	800ba92 <DMA_SetConfig+0x2de>
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a24      	ldr	r2, [pc, #144]	@ (800baf8 <DMA_SetConfig+0x344>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d013      	beq.n	800ba92 <DMA_SetConfig+0x2de>
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a23      	ldr	r2, [pc, #140]	@ (800bafc <DMA_SetConfig+0x348>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d00e      	beq.n	800ba92 <DMA_SetConfig+0x2de>
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a21      	ldr	r2, [pc, #132]	@ (800bb00 <DMA_SetConfig+0x34c>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d009      	beq.n	800ba92 <DMA_SetConfig+0x2de>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a20      	ldr	r2, [pc, #128]	@ (800bb04 <DMA_SetConfig+0x350>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d004      	beq.n	800ba92 <DMA_SetConfig+0x2de>
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a1e      	ldr	r2, [pc, #120]	@ (800bb08 <DMA_SetConfig+0x354>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d101      	bne.n	800ba96 <DMA_SetConfig+0x2e2>
 800ba92:	2301      	movs	r3, #1
 800ba94:	e000      	b.n	800ba98 <DMA_SetConfig+0x2e4>
 800ba96:	2300      	movs	r3, #0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d020      	beq.n	800bade <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800baa0:	f003 031f 	and.w	r3, r3, #31
 800baa4:	2201      	movs	r2, #1
 800baa6:	409a      	lsls	r2, r3
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	683a      	ldr	r2, [r7, #0]
 800bab2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	2b40      	cmp	r3, #64	@ 0x40
 800baba:	d108      	bne.n	800bace <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	60da      	str	r2, [r3, #12]
}
 800bacc:	e007      	b.n	800bade <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	60da      	str	r2, [r3, #12]
}
 800bade:	bf00      	nop
 800bae0:	371c      	adds	r7, #28
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	58025408 	.word	0x58025408
 800baf0:	5802541c 	.word	0x5802541c
 800baf4:	58025430 	.word	0x58025430
 800baf8:	58025444 	.word	0x58025444
 800bafc:	58025458 	.word	0x58025458
 800bb00:	5802546c 	.word	0x5802546c
 800bb04:	58025480 	.word	0x58025480
 800bb08:	58025494 	.word	0x58025494

0800bb0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a42      	ldr	r2, [pc, #264]	@ (800bc24 <DMA_CalcBaseAndBitshift+0x118>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d04a      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a41      	ldr	r2, [pc, #260]	@ (800bc28 <DMA_CalcBaseAndBitshift+0x11c>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d045      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a3f      	ldr	r2, [pc, #252]	@ (800bc2c <DMA_CalcBaseAndBitshift+0x120>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d040      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a3e      	ldr	r2, [pc, #248]	@ (800bc30 <DMA_CalcBaseAndBitshift+0x124>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d03b      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a3c      	ldr	r2, [pc, #240]	@ (800bc34 <DMA_CalcBaseAndBitshift+0x128>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d036      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a3b      	ldr	r2, [pc, #236]	@ (800bc38 <DMA_CalcBaseAndBitshift+0x12c>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d031      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a39      	ldr	r2, [pc, #228]	@ (800bc3c <DMA_CalcBaseAndBitshift+0x130>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d02c      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4a38      	ldr	r2, [pc, #224]	@ (800bc40 <DMA_CalcBaseAndBitshift+0x134>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d027      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a36      	ldr	r2, [pc, #216]	@ (800bc44 <DMA_CalcBaseAndBitshift+0x138>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d022      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a35      	ldr	r2, [pc, #212]	@ (800bc48 <DMA_CalcBaseAndBitshift+0x13c>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d01d      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a33      	ldr	r2, [pc, #204]	@ (800bc4c <DMA_CalcBaseAndBitshift+0x140>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d018      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a32      	ldr	r2, [pc, #200]	@ (800bc50 <DMA_CalcBaseAndBitshift+0x144>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d013      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a30      	ldr	r2, [pc, #192]	@ (800bc54 <DMA_CalcBaseAndBitshift+0x148>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d00e      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a2f      	ldr	r2, [pc, #188]	@ (800bc58 <DMA_CalcBaseAndBitshift+0x14c>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d009      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a2d      	ldr	r2, [pc, #180]	@ (800bc5c <DMA_CalcBaseAndBitshift+0x150>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d004      	beq.n	800bbb4 <DMA_CalcBaseAndBitshift+0xa8>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a2c      	ldr	r2, [pc, #176]	@ (800bc60 <DMA_CalcBaseAndBitshift+0x154>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d101      	bne.n	800bbb8 <DMA_CalcBaseAndBitshift+0xac>
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	e000      	b.n	800bbba <DMA_CalcBaseAndBitshift+0xae>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d024      	beq.n	800bc08 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	3b10      	subs	r3, #16
 800bbc6:	4a27      	ldr	r2, [pc, #156]	@ (800bc64 <DMA_CalcBaseAndBitshift+0x158>)
 800bbc8:	fba2 2303 	umull	r2, r3, r2, r3
 800bbcc:	091b      	lsrs	r3, r3, #4
 800bbce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f003 0307 	and.w	r3, r3, #7
 800bbd6:	4a24      	ldr	r2, [pc, #144]	@ (800bc68 <DMA_CalcBaseAndBitshift+0x15c>)
 800bbd8:	5cd3      	ldrb	r3, [r2, r3]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2b03      	cmp	r3, #3
 800bbe4:	d908      	bls.n	800bbf8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	461a      	mov	r2, r3
 800bbec:	4b1f      	ldr	r3, [pc, #124]	@ (800bc6c <DMA_CalcBaseAndBitshift+0x160>)
 800bbee:	4013      	ands	r3, r2
 800bbf0:	1d1a      	adds	r2, r3, #4
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	659a      	str	r2, [r3, #88]	@ 0x58
 800bbf6:	e00d      	b.n	800bc14 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	4b1b      	ldr	r3, [pc, #108]	@ (800bc6c <DMA_CalcBaseAndBitshift+0x160>)
 800bc00:	4013      	ands	r3, r2
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc06:	e005      	b.n	800bc14 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3714      	adds	r7, #20
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr
 800bc24:	40020010 	.word	0x40020010
 800bc28:	40020028 	.word	0x40020028
 800bc2c:	40020040 	.word	0x40020040
 800bc30:	40020058 	.word	0x40020058
 800bc34:	40020070 	.word	0x40020070
 800bc38:	40020088 	.word	0x40020088
 800bc3c:	400200a0 	.word	0x400200a0
 800bc40:	400200b8 	.word	0x400200b8
 800bc44:	40020410 	.word	0x40020410
 800bc48:	40020428 	.word	0x40020428
 800bc4c:	40020440 	.word	0x40020440
 800bc50:	40020458 	.word	0x40020458
 800bc54:	40020470 	.word	0x40020470
 800bc58:	40020488 	.word	0x40020488
 800bc5c:	400204a0 	.word	0x400204a0
 800bc60:	400204b8 	.word	0x400204b8
 800bc64:	aaaaaaab 	.word	0xaaaaaaab
 800bc68:	0801eee4 	.word	0x0801eee4
 800bc6c:	fffffc00 	.word	0xfffffc00

0800bc70 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d120      	bne.n	800bcc6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d858      	bhi.n	800bd3e <DMA_CheckFifoParam+0xce>
 800bc8c:	a201      	add	r2, pc, #4	@ (adr r2, 800bc94 <DMA_CheckFifoParam+0x24>)
 800bc8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc92:	bf00      	nop
 800bc94:	0800bca5 	.word	0x0800bca5
 800bc98:	0800bcb7 	.word	0x0800bcb7
 800bc9c:	0800bca5 	.word	0x0800bca5
 800bca0:	0800bd3f 	.word	0x0800bd3f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d048      	beq.n	800bd42 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bcb4:	e045      	b.n	800bd42 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bcbe:	d142      	bne.n	800bd46 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bcc4:	e03f      	b.n	800bd46 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	699b      	ldr	r3, [r3, #24]
 800bcca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcce:	d123      	bne.n	800bd18 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd4:	2b03      	cmp	r3, #3
 800bcd6:	d838      	bhi.n	800bd4a <DMA_CheckFifoParam+0xda>
 800bcd8:	a201      	add	r2, pc, #4	@ (adr r2, 800bce0 <DMA_CheckFifoParam+0x70>)
 800bcda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcde:	bf00      	nop
 800bce0:	0800bcf1 	.word	0x0800bcf1
 800bce4:	0800bcf7 	.word	0x0800bcf7
 800bce8:	0800bcf1 	.word	0x0800bcf1
 800bcec:	0800bd09 	.word	0x0800bd09
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	73fb      	strb	r3, [r7, #15]
        break;
 800bcf4:	e030      	b.n	800bd58 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d025      	beq.n	800bd4e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800bd02:	2301      	movs	r3, #1
 800bd04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bd06:	e022      	b.n	800bd4e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bd10:	d11f      	bne.n	800bd52 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bd16:	e01c      	b.n	800bd52 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d902      	bls.n	800bd26 <DMA_CheckFifoParam+0xb6>
 800bd20:	2b03      	cmp	r3, #3
 800bd22:	d003      	beq.n	800bd2c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800bd24:	e018      	b.n	800bd58 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800bd26:	2301      	movs	r3, #1
 800bd28:	73fb      	strb	r3, [r7, #15]
        break;
 800bd2a:	e015      	b.n	800bd58 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00e      	beq.n	800bd56 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd3c:	e00b      	b.n	800bd56 <DMA_CheckFifoParam+0xe6>
        break;
 800bd3e:	bf00      	nop
 800bd40:	e00a      	b.n	800bd58 <DMA_CheckFifoParam+0xe8>
        break;
 800bd42:	bf00      	nop
 800bd44:	e008      	b.n	800bd58 <DMA_CheckFifoParam+0xe8>
        break;
 800bd46:	bf00      	nop
 800bd48:	e006      	b.n	800bd58 <DMA_CheckFifoParam+0xe8>
        break;
 800bd4a:	bf00      	nop
 800bd4c:	e004      	b.n	800bd58 <DMA_CheckFifoParam+0xe8>
        break;
 800bd4e:	bf00      	nop
 800bd50:	e002      	b.n	800bd58 <DMA_CheckFifoParam+0xe8>
        break;
 800bd52:	bf00      	nop
 800bd54:	e000      	b.n	800bd58 <DMA_CheckFifoParam+0xe8>
    break;
 800bd56:	bf00      	nop
    }
  }

  return status;
 800bd58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop

0800bd68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a38      	ldr	r2, [pc, #224]	@ (800be5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d022      	beq.n	800bdc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a36      	ldr	r2, [pc, #216]	@ (800be60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d01d      	beq.n	800bdc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a35      	ldr	r2, [pc, #212]	@ (800be64 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d018      	beq.n	800bdc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a33      	ldr	r2, [pc, #204]	@ (800be68 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d013      	beq.n	800bdc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4a32      	ldr	r2, [pc, #200]	@ (800be6c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d00e      	beq.n	800bdc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a30      	ldr	r2, [pc, #192]	@ (800be70 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d009      	beq.n	800bdc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a2f      	ldr	r2, [pc, #188]	@ (800be74 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d004      	beq.n	800bdc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a2d      	ldr	r2, [pc, #180]	@ (800be78 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d101      	bne.n	800bdca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e000      	b.n	800bdcc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d01a      	beq.n	800be06 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	3b08      	subs	r3, #8
 800bdd8:	4a28      	ldr	r2, [pc, #160]	@ (800be7c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800bdda:	fba2 2303 	umull	r2, r3, r2, r3
 800bdde:	091b      	lsrs	r3, r3, #4
 800bde0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	4b26      	ldr	r3, [pc, #152]	@ (800be80 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800bde6:	4413      	add	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	461a      	mov	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a24      	ldr	r2, [pc, #144]	@ (800be84 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800bdf4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f003 031f 	and.w	r3, r3, #31
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	409a      	lsls	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800be04:	e024      	b.n	800be50 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	3b10      	subs	r3, #16
 800be0e:	4a1e      	ldr	r2, [pc, #120]	@ (800be88 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800be10:	fba2 2303 	umull	r2, r3, r2, r3
 800be14:	091b      	lsrs	r3, r3, #4
 800be16:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	4a1c      	ldr	r2, [pc, #112]	@ (800be8c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d806      	bhi.n	800be2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	4a1b      	ldr	r2, [pc, #108]	@ (800be90 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d902      	bls.n	800be2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	3308      	adds	r3, #8
 800be2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	4b18      	ldr	r3, [pc, #96]	@ (800be94 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800be32:	4413      	add	r3, r2
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	461a      	mov	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a16      	ldr	r2, [pc, #88]	@ (800be98 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800be40:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f003 031f 	and.w	r3, r3, #31
 800be48:	2201      	movs	r2, #1
 800be4a:	409a      	lsls	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800be50:	bf00      	nop
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	58025408 	.word	0x58025408
 800be60:	5802541c 	.word	0x5802541c
 800be64:	58025430 	.word	0x58025430
 800be68:	58025444 	.word	0x58025444
 800be6c:	58025458 	.word	0x58025458
 800be70:	5802546c 	.word	0x5802546c
 800be74:	58025480 	.word	0x58025480
 800be78:	58025494 	.word	0x58025494
 800be7c:	cccccccd 	.word	0xcccccccd
 800be80:	16009600 	.word	0x16009600
 800be84:	58025880 	.word	0x58025880
 800be88:	aaaaaaab 	.word	0xaaaaaaab
 800be8c:	400204b8 	.word	0x400204b8
 800be90:	4002040f 	.word	0x4002040f
 800be94:	10008200 	.word	0x10008200
 800be98:	40020880 	.word	0x40020880

0800be9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d04a      	beq.n	800bf48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2b08      	cmp	r3, #8
 800beb6:	d847      	bhi.n	800bf48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a25      	ldr	r2, [pc, #148]	@ (800bf54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d022      	beq.n	800bf08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a24      	ldr	r2, [pc, #144]	@ (800bf58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d01d      	beq.n	800bf08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a22      	ldr	r2, [pc, #136]	@ (800bf5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d018      	beq.n	800bf08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a21      	ldr	r2, [pc, #132]	@ (800bf60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d013      	beq.n	800bf08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a1f      	ldr	r2, [pc, #124]	@ (800bf64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d00e      	beq.n	800bf08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a1e      	ldr	r2, [pc, #120]	@ (800bf68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d009      	beq.n	800bf08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a1c      	ldr	r2, [pc, #112]	@ (800bf6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d004      	beq.n	800bf08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a1b      	ldr	r2, [pc, #108]	@ (800bf70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d101      	bne.n	800bf0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800bf08:	2301      	movs	r3, #1
 800bf0a:	e000      	b.n	800bf0e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00a      	beq.n	800bf28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800bf12:	68fa      	ldr	r2, [r7, #12]
 800bf14:	4b17      	ldr	r3, [pc, #92]	@ (800bf74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800bf16:	4413      	add	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	4a15      	ldr	r2, [pc, #84]	@ (800bf78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800bf24:	671a      	str	r2, [r3, #112]	@ 0x70
 800bf26:	e009      	b.n	800bf3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	4b14      	ldr	r3, [pc, #80]	@ (800bf7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800bf2c:	4413      	add	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	461a      	mov	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a11      	ldr	r2, [pc, #68]	@ (800bf80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800bf3a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	2201      	movs	r2, #1
 800bf42:	409a      	lsls	r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800bf48:	bf00      	nop
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	58025408 	.word	0x58025408
 800bf58:	5802541c 	.word	0x5802541c
 800bf5c:	58025430 	.word	0x58025430
 800bf60:	58025444 	.word	0x58025444
 800bf64:	58025458 	.word	0x58025458
 800bf68:	5802546c 	.word	0x5802546c
 800bf6c:	58025480 	.word	0x58025480
 800bf70:	58025494 	.word	0x58025494
 800bf74:	1600963f 	.word	0x1600963f
 800bf78:	58025940 	.word	0x58025940
 800bf7c:	1000823f 	.word	0x1000823f
 800bf80:	40020940 	.word	0x40020940

0800bf84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b089      	sub	sp, #36	@ 0x24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800bf92:	4b86      	ldr	r3, [pc, #536]	@ (800c1ac <HAL_GPIO_Init+0x228>)
 800bf94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bf96:	e18c      	b.n	800c2b2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	fa01 f303 	lsl.w	r3, r1, r3
 800bfa4:	4013      	ands	r3, r2
 800bfa6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	f000 817e 	beq.w	800c2ac <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	f003 0303 	and.w	r3, r3, #3
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d005      	beq.n	800bfc8 <HAL_GPIO_Init+0x44>
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	f003 0303 	and.w	r3, r3, #3
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	d130      	bne.n	800c02a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	005b      	lsls	r3, r3, #1
 800bfd2:	2203      	movs	r2, #3
 800bfd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd8:	43db      	mvns	r3, r3
 800bfda:	69ba      	ldr	r2, [r7, #24]
 800bfdc:	4013      	ands	r3, r2
 800bfde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	005b      	lsls	r3, r3, #1
 800bfe8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfec:	69ba      	ldr	r2, [r7, #24]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bffe:	2201      	movs	r2, #1
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	fa02 f303 	lsl.w	r3, r2, r3
 800c006:	43db      	mvns	r3, r3
 800c008:	69ba      	ldr	r2, [r7, #24]
 800c00a:	4013      	ands	r3, r2
 800c00c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	091b      	lsrs	r3, r3, #4
 800c014:	f003 0201 	and.w	r2, r3, #1
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	fa02 f303 	lsl.w	r3, r2, r3
 800c01e:	69ba      	ldr	r2, [r7, #24]
 800c020:	4313      	orrs	r3, r2
 800c022:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	69ba      	ldr	r2, [r7, #24]
 800c028:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	f003 0303 	and.w	r3, r3, #3
 800c032:	2b03      	cmp	r3, #3
 800c034:	d017      	beq.n	800c066 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	005b      	lsls	r3, r3, #1
 800c040:	2203      	movs	r2, #3
 800c042:	fa02 f303 	lsl.w	r3, r2, r3
 800c046:	43db      	mvns	r3, r3
 800c048:	69ba      	ldr	r2, [r7, #24]
 800c04a:	4013      	ands	r3, r2
 800c04c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	689a      	ldr	r2, [r3, #8]
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	fa02 f303 	lsl.w	r3, r2, r3
 800c05a:	69ba      	ldr	r2, [r7, #24]
 800c05c:	4313      	orrs	r3, r2
 800c05e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	69ba      	ldr	r2, [r7, #24]
 800c064:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	f003 0303 	and.w	r3, r3, #3
 800c06e:	2b02      	cmp	r3, #2
 800c070:	d123      	bne.n	800c0ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	08da      	lsrs	r2, r3, #3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	3208      	adds	r2, #8
 800c07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c07e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	f003 0307 	and.w	r3, r3, #7
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	220f      	movs	r2, #15
 800c08a:	fa02 f303 	lsl.w	r3, r2, r3
 800c08e:	43db      	mvns	r3, r3
 800c090:	69ba      	ldr	r2, [r7, #24]
 800c092:	4013      	ands	r3, r2
 800c094:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	691a      	ldr	r2, [r3, #16]
 800c09a:	69fb      	ldr	r3, [r7, #28]
 800c09c:	f003 0307 	and.w	r3, r3, #7
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a6:	69ba      	ldr	r2, [r7, #24]
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	08da      	lsrs	r2, r3, #3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	3208      	adds	r2, #8
 800c0b4:	69b9      	ldr	r1, [r7, #24]
 800c0b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	005b      	lsls	r3, r3, #1
 800c0c4:	2203      	movs	r2, #3
 800c0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ca:	43db      	mvns	r3, r3
 800c0cc:	69ba      	ldr	r2, [r7, #24]
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	f003 0203 	and.w	r2, r3, #3
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	005b      	lsls	r3, r3, #1
 800c0de:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e2:	69ba      	ldr	r2, [r7, #24]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	69ba      	ldr	r2, [r7, #24]
 800c0ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f000 80d8 	beq.w	800c2ac <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c0fc:	4b2c      	ldr	r3, [pc, #176]	@ (800c1b0 <HAL_GPIO_Init+0x22c>)
 800c0fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c102:	4a2b      	ldr	r2, [pc, #172]	@ (800c1b0 <HAL_GPIO_Init+0x22c>)
 800c104:	f043 0302 	orr.w	r3, r3, #2
 800c108:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800c10c:	4b28      	ldr	r3, [pc, #160]	@ (800c1b0 <HAL_GPIO_Init+0x22c>)
 800c10e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c112:	f003 0302 	and.w	r3, r3, #2
 800c116:	60fb      	str	r3, [r7, #12]
 800c118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c11a:	4a26      	ldr	r2, [pc, #152]	@ (800c1b4 <HAL_GPIO_Init+0x230>)
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	089b      	lsrs	r3, r3, #2
 800c120:	3302      	adds	r3, #2
 800c122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	f003 0303 	and.w	r3, r3, #3
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	220f      	movs	r2, #15
 800c132:	fa02 f303 	lsl.w	r3, r2, r3
 800c136:	43db      	mvns	r3, r3
 800c138:	69ba      	ldr	r2, [r7, #24]
 800c13a:	4013      	ands	r3, r2
 800c13c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a1d      	ldr	r2, [pc, #116]	@ (800c1b8 <HAL_GPIO_Init+0x234>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d04a      	beq.n	800c1dc <HAL_GPIO_Init+0x258>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4a1c      	ldr	r2, [pc, #112]	@ (800c1bc <HAL_GPIO_Init+0x238>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d02b      	beq.n	800c1a6 <HAL_GPIO_Init+0x222>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4a1b      	ldr	r2, [pc, #108]	@ (800c1c0 <HAL_GPIO_Init+0x23c>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d025      	beq.n	800c1a2 <HAL_GPIO_Init+0x21e>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a1a      	ldr	r2, [pc, #104]	@ (800c1c4 <HAL_GPIO_Init+0x240>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d01f      	beq.n	800c19e <HAL_GPIO_Init+0x21a>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a19      	ldr	r2, [pc, #100]	@ (800c1c8 <HAL_GPIO_Init+0x244>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d019      	beq.n	800c19a <HAL_GPIO_Init+0x216>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a18      	ldr	r2, [pc, #96]	@ (800c1cc <HAL_GPIO_Init+0x248>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d013      	beq.n	800c196 <HAL_GPIO_Init+0x212>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4a17      	ldr	r2, [pc, #92]	@ (800c1d0 <HAL_GPIO_Init+0x24c>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d00d      	beq.n	800c192 <HAL_GPIO_Init+0x20e>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	4a16      	ldr	r2, [pc, #88]	@ (800c1d4 <HAL_GPIO_Init+0x250>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d007      	beq.n	800c18e <HAL_GPIO_Init+0x20a>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	4a15      	ldr	r2, [pc, #84]	@ (800c1d8 <HAL_GPIO_Init+0x254>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d101      	bne.n	800c18a <HAL_GPIO_Init+0x206>
 800c186:	2309      	movs	r3, #9
 800c188:	e029      	b.n	800c1de <HAL_GPIO_Init+0x25a>
 800c18a:	230a      	movs	r3, #10
 800c18c:	e027      	b.n	800c1de <HAL_GPIO_Init+0x25a>
 800c18e:	2307      	movs	r3, #7
 800c190:	e025      	b.n	800c1de <HAL_GPIO_Init+0x25a>
 800c192:	2306      	movs	r3, #6
 800c194:	e023      	b.n	800c1de <HAL_GPIO_Init+0x25a>
 800c196:	2305      	movs	r3, #5
 800c198:	e021      	b.n	800c1de <HAL_GPIO_Init+0x25a>
 800c19a:	2304      	movs	r3, #4
 800c19c:	e01f      	b.n	800c1de <HAL_GPIO_Init+0x25a>
 800c19e:	2303      	movs	r3, #3
 800c1a0:	e01d      	b.n	800c1de <HAL_GPIO_Init+0x25a>
 800c1a2:	2302      	movs	r3, #2
 800c1a4:	e01b      	b.n	800c1de <HAL_GPIO_Init+0x25a>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e019      	b.n	800c1de <HAL_GPIO_Init+0x25a>
 800c1aa:	bf00      	nop
 800c1ac:	58000080 	.word	0x58000080
 800c1b0:	58024400 	.word	0x58024400
 800c1b4:	58000400 	.word	0x58000400
 800c1b8:	58020000 	.word	0x58020000
 800c1bc:	58020400 	.word	0x58020400
 800c1c0:	58020800 	.word	0x58020800
 800c1c4:	58020c00 	.word	0x58020c00
 800c1c8:	58021000 	.word	0x58021000
 800c1cc:	58021400 	.word	0x58021400
 800c1d0:	58021800 	.word	0x58021800
 800c1d4:	58021c00 	.word	0x58021c00
 800c1d8:	58022400 	.word	0x58022400
 800c1dc:	2300      	movs	r3, #0
 800c1de:	69fa      	ldr	r2, [r7, #28]
 800c1e0:	f002 0203 	and.w	r2, r2, #3
 800c1e4:	0092      	lsls	r2, r2, #2
 800c1e6:	4093      	lsls	r3, r2
 800c1e8:	69ba      	ldr	r2, [r7, #24]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c1ee:	4938      	ldr	r1, [pc, #224]	@ (800c2d0 <HAL_GPIO_Init+0x34c>)
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	089b      	lsrs	r3, r3, #2
 800c1f4:	3302      	adds	r3, #2
 800c1f6:	69ba      	ldr	r2, [r7, #24]
 800c1f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c1fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	43db      	mvns	r3, r3
 800c208:	69ba      	ldr	r2, [r7, #24]
 800c20a:	4013      	ands	r3, r2
 800c20c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c216:	2b00      	cmp	r3, #0
 800c218:	d003      	beq.n	800c222 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800c21a:	69ba      	ldr	r2, [r7, #24]
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	4313      	orrs	r3, r2
 800c220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800c222:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c22a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	43db      	mvns	r3, r3
 800c236:	69ba      	ldr	r2, [r7, #24]
 800c238:	4013      	ands	r3, r2
 800c23a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c244:	2b00      	cmp	r3, #0
 800c246:	d003      	beq.n	800c250 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800c248:	69ba      	ldr	r2, [r7, #24]
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800c250:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	43db      	mvns	r3, r3
 800c262:	69ba      	ldr	r2, [r7, #24]
 800c264:	4013      	ands	r3, r2
 800c266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c270:	2b00      	cmp	r3, #0
 800c272:	d003      	beq.n	800c27c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800c274:	69ba      	ldr	r2, [r7, #24]
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	4313      	orrs	r3, r2
 800c27a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	69ba      	ldr	r2, [r7, #24]
 800c280:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	43db      	mvns	r3, r3
 800c28c:	69ba      	ldr	r2, [r7, #24]
 800c28e:	4013      	ands	r3, r2
 800c290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d003      	beq.n	800c2a6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800c29e:	69ba      	ldr	r2, [r7, #24]
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	69ba      	ldr	r2, [r7, #24]
 800c2aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f47f ae6b 	bne.w	800bf98 <HAL_GPIO_Init+0x14>
  }
}
 800c2c2:	bf00      	nop
 800c2c4:	bf00      	nop
 800c2c6:	3724      	adds	r7, #36	@ 0x24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr
 800c2d0:	58000400 	.word	0x58000400

0800c2d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	691a      	ldr	r2, [r3, #16]
 800c2e4:	887b      	ldrh	r3, [r7, #2]
 800c2e6:	4013      	ands	r3, r2
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	73fb      	strb	r3, [r7, #15]
 800c2f0:	e001      	b.n	800c2f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3714      	adds	r7, #20
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	460b      	mov	r3, r1
 800c30e:	807b      	strh	r3, [r7, #2]
 800c310:	4613      	mov	r3, r2
 800c312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c314:	787b      	ldrb	r3, [r7, #1]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d003      	beq.n	800c322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c31a:	887a      	ldrh	r2, [r7, #2]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800c320:	e003      	b.n	800c32a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800c322:	887b      	ldrh	r3, [r7, #2]
 800c324:	041a      	lsls	r2, r3, #16
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	619a      	str	r2, [r3, #24]
}
 800c32a:	bf00      	nop
 800c32c:	370c      	adds	r7, #12
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr

0800c336 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b082      	sub	sp, #8
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	4603      	mov	r3, r0
 800c33e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800c340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c344:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c348:	88fb      	ldrh	r3, [r7, #6]
 800c34a:	4013      	ands	r3, r2
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d008      	beq.n	800c362 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c350:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c354:	88fb      	ldrh	r3, [r7, #6]
 800c356:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c35a:	88fb      	ldrh	r3, [r7, #6]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7f4 ffdb 	bl	8001318 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800c362:	bf00      	nop
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
	...

0800c36c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d101      	bne.n	800c37e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c37a:	2301      	movs	r3, #1
 800c37c:	e08b      	b.n	800c496 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c384:	b2db      	uxtb	r3, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	d106      	bne.n	800c398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7f6 f924 	bl	80025e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2224      	movs	r2, #36	@ 0x24
 800c39c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f022 0201 	bic.w	r2, r2, #1
 800c3ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	685a      	ldr	r2, [r3, #4]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800c3bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	689a      	ldr	r2, [r3, #8]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c3cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d107      	bne.n	800c3e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	689a      	ldr	r2, [r3, #8]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c3e2:	609a      	str	r2, [r3, #8]
 800c3e4:	e006      	b.n	800c3f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	689a      	ldr	r2, [r3, #8]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800c3f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	d108      	bne.n	800c40e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	685a      	ldr	r2, [r3, #4]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c40a:	605a      	str	r2, [r3, #4]
 800c40c:	e007      	b.n	800c41e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	685a      	ldr	r2, [r3, #4]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c41c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	6859      	ldr	r1, [r3, #4]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	4b1d      	ldr	r3, [pc, #116]	@ (800c4a0 <HAL_I2C_Init+0x134>)
 800c42a:	430b      	orrs	r3, r1
 800c42c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	68da      	ldr	r2, [r3, #12]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c43c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	691a      	ldr	r2, [r3, #16]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	699b      	ldr	r3, [r3, #24]
 800c44e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	430a      	orrs	r2, r1
 800c456:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	69d9      	ldr	r1, [r3, #28]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a1a      	ldr	r2, [r3, #32]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	430a      	orrs	r2, r1
 800c466:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f042 0201 	orr.w	r2, r2, #1
 800c476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2220      	movs	r2, #32
 800c482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3708      	adds	r7, #8
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	02008000 	.word	0x02008000

0800c4a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	2b20      	cmp	r3, #32
 800c4b8:	d138      	bne.n	800c52c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d101      	bne.n	800c4c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	e032      	b.n	800c52e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2224      	movs	r2, #36	@ 0x24
 800c4d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f022 0201 	bic.w	r2, r2, #1
 800c4e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c4f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6819      	ldr	r1, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	683a      	ldr	r2, [r7, #0]
 800c504:	430a      	orrs	r2, r1
 800c506:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f042 0201 	orr.w	r2, r2, #1
 800c516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2220      	movs	r2, #32
 800c51c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c528:	2300      	movs	r3, #0
 800c52a:	e000      	b.n	800c52e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c52c:	2302      	movs	r3, #2
  }
}
 800c52e:	4618      	mov	r0, r3
 800c530:	370c      	adds	r7, #12
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c53a:	b480      	push	{r7}
 800c53c:	b085      	sub	sp, #20
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
 800c542:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	2b20      	cmp	r3, #32
 800c54e:	d139      	bne.n	800c5c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c556:	2b01      	cmp	r3, #1
 800c558:	d101      	bne.n	800c55e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c55a:	2302      	movs	r3, #2
 800c55c:	e033      	b.n	800c5c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2224      	movs	r2, #36	@ 0x24
 800c56a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f022 0201 	bic.w	r2, r2, #1
 800c57c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c58c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	021b      	lsls	r3, r3, #8
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	4313      	orrs	r3, r2
 800c596:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f042 0201 	orr.w	r2, r2, #1
 800c5ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2220      	movs	r2, #32
 800c5b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	e000      	b.n	800c5c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c5c4:	2302      	movs	r3, #2
  }
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3714      	adds	r7, #20
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b086      	sub	sp, #24
 800c5d6:	af02      	add	r7, sp, #8
 800c5d8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d101      	bne.n	800c5e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e0fe      	b.n	800c7e2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d106      	bne.n	800c5fe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f00c fb8d 	bl	8018d18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2203      	movs	r2, #3
 800c602:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4618      	mov	r0, r3
 800c60c:	f008 ff49 	bl	80154a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6818      	ldr	r0, [r3, #0]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	7c1a      	ldrb	r2, [r3, #16]
 800c618:	f88d 2000 	strb.w	r2, [sp]
 800c61c:	3304      	adds	r3, #4
 800c61e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c620:	f008 fe1a 	bl	8015258 <USB_CoreInit>
 800c624:	4603      	mov	r3, r0
 800c626:	2b00      	cmp	r3, #0
 800c628:	d005      	beq.n	800c636 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2202      	movs	r2, #2
 800c62e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c632:	2301      	movs	r3, #1
 800c634:	e0d5      	b.n	800c7e2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	2100      	movs	r1, #0
 800c63c:	4618      	mov	r0, r3
 800c63e:	f008 ff41 	bl	80154c4 <USB_SetCurrentMode>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d005      	beq.n	800c654 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2202      	movs	r2, #2
 800c64c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c650:	2301      	movs	r3, #1
 800c652:	e0c6      	b.n	800c7e2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c654:	2300      	movs	r3, #0
 800c656:	73fb      	strb	r3, [r7, #15]
 800c658:	e04a      	b.n	800c6f0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c65a:	7bfa      	ldrb	r2, [r7, #15]
 800c65c:	6879      	ldr	r1, [r7, #4]
 800c65e:	4613      	mov	r3, r2
 800c660:	00db      	lsls	r3, r3, #3
 800c662:	4413      	add	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	440b      	add	r3, r1
 800c668:	3315      	adds	r3, #21
 800c66a:	2201      	movs	r2, #1
 800c66c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c66e:	7bfa      	ldrb	r2, [r7, #15]
 800c670:	6879      	ldr	r1, [r7, #4]
 800c672:	4613      	mov	r3, r2
 800c674:	00db      	lsls	r3, r3, #3
 800c676:	4413      	add	r3, r2
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	440b      	add	r3, r1
 800c67c:	3314      	adds	r3, #20
 800c67e:	7bfa      	ldrb	r2, [r7, #15]
 800c680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c682:	7bfa      	ldrb	r2, [r7, #15]
 800c684:	7bfb      	ldrb	r3, [r7, #15]
 800c686:	b298      	uxth	r0, r3
 800c688:	6879      	ldr	r1, [r7, #4]
 800c68a:	4613      	mov	r3, r2
 800c68c:	00db      	lsls	r3, r3, #3
 800c68e:	4413      	add	r3, r2
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	440b      	add	r3, r1
 800c694:	332e      	adds	r3, #46	@ 0x2e
 800c696:	4602      	mov	r2, r0
 800c698:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c69a:	7bfa      	ldrb	r2, [r7, #15]
 800c69c:	6879      	ldr	r1, [r7, #4]
 800c69e:	4613      	mov	r3, r2
 800c6a0:	00db      	lsls	r3, r3, #3
 800c6a2:	4413      	add	r3, r2
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	440b      	add	r3, r1
 800c6a8:	3318      	adds	r3, #24
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c6ae:	7bfa      	ldrb	r2, [r7, #15]
 800c6b0:	6879      	ldr	r1, [r7, #4]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	00db      	lsls	r3, r3, #3
 800c6b6:	4413      	add	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	440b      	add	r3, r1
 800c6bc:	331c      	adds	r3, #28
 800c6be:	2200      	movs	r2, #0
 800c6c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c6c2:	7bfa      	ldrb	r2, [r7, #15]
 800c6c4:	6879      	ldr	r1, [r7, #4]
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	00db      	lsls	r3, r3, #3
 800c6ca:	4413      	add	r3, r2
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	440b      	add	r3, r1
 800c6d0:	3320      	adds	r3, #32
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c6d6:	7bfa      	ldrb	r2, [r7, #15]
 800c6d8:	6879      	ldr	r1, [r7, #4]
 800c6da:	4613      	mov	r3, r2
 800c6dc:	00db      	lsls	r3, r3, #3
 800c6de:	4413      	add	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	440b      	add	r3, r1
 800c6e4:	3324      	adds	r3, #36	@ 0x24
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c6ea:	7bfb      	ldrb	r3, [r7, #15]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	73fb      	strb	r3, [r7, #15]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	791b      	ldrb	r3, [r3, #4]
 800c6f4:	7bfa      	ldrb	r2, [r7, #15]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d3af      	bcc.n	800c65a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	73fb      	strb	r3, [r7, #15]
 800c6fe:	e044      	b.n	800c78a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c700:	7bfa      	ldrb	r2, [r7, #15]
 800c702:	6879      	ldr	r1, [r7, #4]
 800c704:	4613      	mov	r3, r2
 800c706:	00db      	lsls	r3, r3, #3
 800c708:	4413      	add	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	440b      	add	r3, r1
 800c70e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800c712:	2200      	movs	r2, #0
 800c714:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c716:	7bfa      	ldrb	r2, [r7, #15]
 800c718:	6879      	ldr	r1, [r7, #4]
 800c71a:	4613      	mov	r3, r2
 800c71c:	00db      	lsls	r3, r3, #3
 800c71e:	4413      	add	r3, r2
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	440b      	add	r3, r1
 800c724:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800c728:	7bfa      	ldrb	r2, [r7, #15]
 800c72a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c72c:	7bfa      	ldrb	r2, [r7, #15]
 800c72e:	6879      	ldr	r1, [r7, #4]
 800c730:	4613      	mov	r3, r2
 800c732:	00db      	lsls	r3, r3, #3
 800c734:	4413      	add	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	440b      	add	r3, r1
 800c73a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c73e:	2200      	movs	r2, #0
 800c740:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c742:	7bfa      	ldrb	r2, [r7, #15]
 800c744:	6879      	ldr	r1, [r7, #4]
 800c746:	4613      	mov	r3, r2
 800c748:	00db      	lsls	r3, r3, #3
 800c74a:	4413      	add	r3, r2
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	440b      	add	r3, r1
 800c750:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c754:	2200      	movs	r2, #0
 800c756:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c758:	7bfa      	ldrb	r2, [r7, #15]
 800c75a:	6879      	ldr	r1, [r7, #4]
 800c75c:	4613      	mov	r3, r2
 800c75e:	00db      	lsls	r3, r3, #3
 800c760:	4413      	add	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	440b      	add	r3, r1
 800c766:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c76a:	2200      	movs	r2, #0
 800c76c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c76e:	7bfa      	ldrb	r2, [r7, #15]
 800c770:	6879      	ldr	r1, [r7, #4]
 800c772:	4613      	mov	r3, r2
 800c774:	00db      	lsls	r3, r3, #3
 800c776:	4413      	add	r3, r2
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	440b      	add	r3, r1
 800c77c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c780:	2200      	movs	r2, #0
 800c782:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	3301      	adds	r3, #1
 800c788:	73fb      	strb	r3, [r7, #15]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	791b      	ldrb	r3, [r3, #4]
 800c78e:	7bfa      	ldrb	r2, [r7, #15]
 800c790:	429a      	cmp	r2, r3
 800c792:	d3b5      	bcc.n	800c700 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6818      	ldr	r0, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	7c1a      	ldrb	r2, [r3, #16]
 800c79c:	f88d 2000 	strb.w	r2, [sp]
 800c7a0:	3304      	adds	r3, #4
 800c7a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7a4:	f008 feda 	bl	801555c <USB_DevInit>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d005      	beq.n	800c7ba <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e013      	b.n	800c7e2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	7b1b      	ldrb	r3, [r3, #12]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d102      	bne.n	800c7d6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f001 f96d 	bl	800dab0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f009 ff19 	bl	8016612 <USB_DevDisconnect>

  return HAL_OK;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b084      	sub	sp, #16
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d101      	bne.n	800c806 <HAL_PCD_Start+0x1c>
 800c802:	2302      	movs	r3, #2
 800c804:	e022      	b.n	800c84c <HAL_PCD_Start+0x62>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2201      	movs	r2, #1
 800c80a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c816:	2b00      	cmp	r3, #0
 800c818:	d009      	beq.n	800c82e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d105      	bne.n	800c82e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c826:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4618      	mov	r0, r3
 800c834:	f008 fe24 	bl	8015480 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4618      	mov	r0, r3
 800c83e:	f009 fec7 	bl	80165d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c84a:	2300      	movs	r3, #0
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3710      	adds	r7, #16
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c854:	b590      	push	{r4, r7, lr}
 800c856:	b08d      	sub	sp, #52	@ 0x34
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c862:	6a3b      	ldr	r3, [r7, #32]
 800c864:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f009 ff85 	bl	801677a <USB_GetMode>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	f040 84b9 	bne.w	800d1ea <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f009 fee9 	bl	8016654 <USB_ReadInterrupts>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	f000 84af 	beq.w	800d1e8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	0a1b      	lsrs	r3, r3, #8
 800c894:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f009 fed6 	bl	8016654 <USB_ReadInterrupts>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	f003 0302 	and.w	r3, r3, #2
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d107      	bne.n	800c8c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	695a      	ldr	r2, [r3, #20]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f002 0202 	and.w	r2, r2, #2
 800c8c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f009 fec4 	bl	8016654 <USB_ReadInterrupts>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	f003 0310 	and.w	r3, r3, #16
 800c8d2:	2b10      	cmp	r3, #16
 800c8d4:	d161      	bne.n	800c99a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	699a      	ldr	r2, [r3, #24]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f022 0210 	bic.w	r2, r2, #16
 800c8e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800c8e6:	6a3b      	ldr	r3, [r7, #32]
 800c8e8:	6a1b      	ldr	r3, [r3, #32]
 800c8ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	f003 020f 	and.w	r2, r3, #15
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	00db      	lsls	r3, r3, #3
 800c8f6:	4413      	add	r3, r2
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	4413      	add	r3, r2
 800c902:	3304      	adds	r3, #4
 800c904:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	0c5b      	lsrs	r3, r3, #17
 800c90a:	f003 030f 	and.w	r3, r3, #15
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d124      	bne.n	800c95c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c912:	69ba      	ldr	r2, [r7, #24]
 800c914:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800c918:	4013      	ands	r3, r2
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d035      	beq.n	800c98a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	091b      	lsrs	r3, r3, #4
 800c926:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c928:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	461a      	mov	r2, r3
 800c930:	6a38      	ldr	r0, [r7, #32]
 800c932:	f009 fcfb 	bl	801632c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	68da      	ldr	r2, [r3, #12]
 800c93a:	69bb      	ldr	r3, [r7, #24]
 800c93c:	091b      	lsrs	r3, r3, #4
 800c93e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c942:	441a      	add	r2, r3
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	695a      	ldr	r2, [r3, #20]
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	091b      	lsrs	r3, r3, #4
 800c950:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c954:	441a      	add	r2, r3
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	615a      	str	r2, [r3, #20]
 800c95a:	e016      	b.n	800c98a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	0c5b      	lsrs	r3, r3, #17
 800c960:	f003 030f 	and.w	r3, r3, #15
 800c964:	2b06      	cmp	r3, #6
 800c966:	d110      	bne.n	800c98a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c96e:	2208      	movs	r2, #8
 800c970:	4619      	mov	r1, r3
 800c972:	6a38      	ldr	r0, [r7, #32]
 800c974:	f009 fcda 	bl	801632c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	695a      	ldr	r2, [r3, #20]
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	091b      	lsrs	r3, r3, #4
 800c980:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c984:	441a      	add	r2, r3
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	699a      	ldr	r2, [r3, #24]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f042 0210 	orr.w	r2, r2, #16
 800c998:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f009 fe58 	bl	8016654 <USB_ReadInterrupts>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c9aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c9ae:	f040 80a7 	bne.w	800cb00 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f009 fe5d 	bl	801667a <USB_ReadDevAllOutEpInterrupt>
 800c9c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800c9c2:	e099      	b.n	800caf8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c6:	f003 0301 	and.w	r3, r3, #1
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f000 808e 	beq.w	800caec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9d6:	b2d2      	uxtb	r2, r2
 800c9d8:	4611      	mov	r1, r2
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f009 fe81 	bl	80166e2 <USB_ReadDevOutEPInterrupt>
 800c9e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	f003 0301 	and.w	r3, r3, #1
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00c      	beq.n	800ca06 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ee:	015a      	lsls	r2, r3, #5
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c9fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 fecf 	bl	800d7a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	f003 0308 	and.w	r3, r3, #8
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d00c      	beq.n	800ca2a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800ca10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca12:	015a      	lsls	r2, r3, #5
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	4413      	add	r3, r2
 800ca18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	2308      	movs	r3, #8
 800ca20:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800ca22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 ffa5 	bl	800d974 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	f003 0310 	and.w	r3, r3, #16
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d008      	beq.n	800ca46 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800ca34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca36:	015a      	lsls	r2, r3, #5
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca40:	461a      	mov	r2, r3
 800ca42:	2310      	movs	r3, #16
 800ca44:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	f003 0302 	and.w	r3, r3, #2
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d030      	beq.n	800cab2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800ca50:	6a3b      	ldr	r3, [r7, #32]
 800ca52:	695b      	ldr	r3, [r3, #20]
 800ca54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca58:	2b80      	cmp	r3, #128	@ 0x80
 800ca5a:	d109      	bne.n	800ca70 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	69fa      	ldr	r2, [r7, #28]
 800ca66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ca6e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800ca70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca72:	4613      	mov	r3, r2
 800ca74:	00db      	lsls	r3, r3, #3
 800ca76:	4413      	add	r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	4413      	add	r3, r2
 800ca82:	3304      	adds	r3, #4
 800ca84:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	78db      	ldrb	r3, [r3, #3]
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d108      	bne.n	800caa0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	2200      	movs	r2, #0
 800ca92:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800ca94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f00c fa34 	bl	8018f08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800caa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa2:	015a      	lsls	r2, r3, #5
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	4413      	add	r3, r2
 800caa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800caac:	461a      	mov	r2, r3
 800caae:	2302      	movs	r3, #2
 800cab0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	f003 0320 	and.w	r3, r3, #32
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d008      	beq.n	800cace <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	015a      	lsls	r2, r3, #5
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	4413      	add	r3, r2
 800cac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cac8:	461a      	mov	r2, r3
 800caca:	2320      	movs	r3, #32
 800cacc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d009      	beq.n	800caec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800cad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cada:	015a      	lsls	r2, r3, #5
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	4413      	add	r3, r2
 800cae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cae4:	461a      	mov	r2, r3
 800cae6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800caea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800caec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caee:	3301      	adds	r3, #1
 800caf0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800caf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caf4:	085b      	lsrs	r3, r3, #1
 800caf6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800caf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f47f af62 	bne.w	800c9c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f009 fda5 	bl	8016654 <USB_ReadInterrupts>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cb10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cb14:	f040 80db 	bne.w	800ccce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f009 fdc6 	bl	80166ae <USB_ReadDevAllInEpInterrupt>
 800cb22:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800cb24:	2300      	movs	r3, #0
 800cb26:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800cb28:	e0cd      	b.n	800ccc6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800cb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb2c:	f003 0301 	and.w	r3, r3, #1
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f000 80c2 	beq.w	800ccba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb3c:	b2d2      	uxtb	r2, r2
 800cb3e:	4611      	mov	r1, r2
 800cb40:	4618      	mov	r0, r3
 800cb42:	f009 fdec 	bl	801671e <USB_ReadDevInEPInterrupt>
 800cb46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	f003 0301 	and.w	r3, r3, #1
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d057      	beq.n	800cc02 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb54:	f003 030f 	and.w	r3, r3, #15
 800cb58:	2201      	movs	r2, #1
 800cb5a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb5e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	43db      	mvns	r3, r3
 800cb6c:	69f9      	ldr	r1, [r7, #28]
 800cb6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cb72:	4013      	ands	r3, r2
 800cb74:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800cb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb78:	015a      	lsls	r2, r3, #5
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb82:	461a      	mov	r2, r3
 800cb84:	2301      	movs	r3, #1
 800cb86:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	799b      	ldrb	r3, [r3, #6]
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d132      	bne.n	800cbf6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800cb90:	6879      	ldr	r1, [r7, #4]
 800cb92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb94:	4613      	mov	r3, r2
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	4413      	add	r3, r2
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	440b      	add	r3, r1
 800cb9e:	3320      	adds	r3, #32
 800cba0:	6819      	ldr	r1, [r3, #0]
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cba6:	4613      	mov	r3, r2
 800cba8:	00db      	lsls	r3, r3, #3
 800cbaa:	4413      	add	r3, r2
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	4403      	add	r3, r0
 800cbb0:	331c      	adds	r3, #28
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4419      	add	r1, r3
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbba:	4613      	mov	r3, r2
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	4413      	add	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4403      	add	r3, r0
 800cbc4:	3320      	adds	r3, #32
 800cbc6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d113      	bne.n	800cbf6 <HAL_PCD_IRQHandler+0x3a2>
 800cbce:	6879      	ldr	r1, [r7, #4]
 800cbd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	00db      	lsls	r3, r3, #3
 800cbd6:	4413      	add	r3, r2
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	440b      	add	r3, r1
 800cbdc:	3324      	adds	r3, #36	@ 0x24
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d108      	bne.n	800cbf6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6818      	ldr	r0, [r3, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cbee:	461a      	mov	r2, r3
 800cbf0:	2101      	movs	r1, #1
 800cbf2:	f009 fdf5 	bl	80167e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f00c f8fe 	bl	8018dfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	f003 0308 	and.w	r3, r3, #8
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d008      	beq.n	800cc1e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800cc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0e:	015a      	lsls	r2, r3, #5
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	4413      	add	r3, r2
 800cc14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc18:	461a      	mov	r2, r3
 800cc1a:	2308      	movs	r3, #8
 800cc1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	f003 0310 	and.w	r3, r3, #16
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d008      	beq.n	800cc3a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800cc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2a:	015a      	lsls	r2, r3, #5
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	4413      	add	r3, r2
 800cc30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc34:	461a      	mov	r2, r3
 800cc36:	2310      	movs	r3, #16
 800cc38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d008      	beq.n	800cc56 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc46:	015a      	lsls	r2, r3, #5
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc50:	461a      	mov	r2, r3
 800cc52:	2340      	movs	r3, #64	@ 0x40
 800cc54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	f003 0302 	and.w	r3, r3, #2
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d023      	beq.n	800cca8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800cc60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc62:	6a38      	ldr	r0, [r7, #32]
 800cc64:	f008 fdd8 	bl	8015818 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800cc68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	00db      	lsls	r3, r3, #3
 800cc6e:	4413      	add	r3, r2
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	3310      	adds	r3, #16
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	4413      	add	r3, r2
 800cc78:	3304      	adds	r3, #4
 800cc7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	78db      	ldrb	r3, [r3, #3]
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d108      	bne.n	800cc96 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	2200      	movs	r2, #0
 800cc88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	4619      	mov	r1, r3
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f00c f94b 	bl	8018f2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800cc96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc98:	015a      	lsls	r2, r3, #5
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cca2:	461a      	mov	r2, r3
 800cca4:	2302      	movs	r3, #2
 800cca6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d003      	beq.n	800ccba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800ccb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 fce8 	bl	800d68a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800ccba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800ccc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc2:	085b      	lsrs	r3, r3, #1
 800ccc4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800ccc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f47f af2e 	bne.w	800cb2a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f009 fcbe 	bl	8016654 <USB_ReadInterrupts>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ccde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cce2:	d122      	bne.n	800cd2a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	69fa      	ldr	r2, [r7, #28]
 800ccee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ccf2:	f023 0301 	bic.w	r3, r3, #1
 800ccf6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d108      	bne.n	800cd14 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 fef3 	bl	800daf8 <HAL_PCDEx_LPM_Callback>
 800cd12:	e002      	b.n	800cd1a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f00c f8e9 	bl	8018eec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	695a      	ldr	r2, [r3, #20]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800cd28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f009 fc90 	bl	8016654 <USB_ReadInterrupts>
 800cd34:	4603      	mov	r3, r0
 800cd36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cd3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd3e:	d112      	bne.n	800cd66 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	f003 0301 	and.w	r3, r3, #1
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d102      	bne.n	800cd56 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f00c f8a5 	bl	8018ea0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	695a      	ldr	r2, [r3, #20]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800cd64:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f009 fc72 	bl	8016654 <USB_ReadInterrupts>
 800cd70:	4603      	mov	r3, r0
 800cd72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd7a:	d121      	bne.n	800cdc0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	695a      	ldr	r2, [r3, #20]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800cd8a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d111      	bne.n	800cdba <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cda4:	089b      	lsrs	r3, r3, #2
 800cda6:	f003 020f 	and.w	r2, r3, #15
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800cdb0:	2101      	movs	r1, #1
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 fea0 	bl	800daf8 <HAL_PCDEx_LPM_Callback>
 800cdb8:	e002      	b.n	800cdc0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f00c f870 	bl	8018ea0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f009 fc45 	bl	8016654 <USB_ReadInterrupts>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cdd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdd4:	f040 80b7 	bne.w	800cf46 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	69fa      	ldr	r2, [r7, #28]
 800cde2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cde6:	f023 0301 	bic.w	r3, r3, #1
 800cdea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2110      	movs	r1, #16
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f008 fd10 	bl	8015818 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdfc:	e046      	b.n	800ce8c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cdfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce00:	015a      	lsls	r2, r3, #5
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	4413      	add	r3, r2
 800ce06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ce10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce14:	015a      	lsls	r2, r3, #5
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	4413      	add	r3, r2
 800ce1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce22:	0151      	lsls	r1, r2, #5
 800ce24:	69fa      	ldr	r2, [r7, #28]
 800ce26:	440a      	add	r2, r1
 800ce28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ce2c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ce30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ce32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce34:	015a      	lsls	r2, r3, #5
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	4413      	add	r3, r2
 800ce3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce3e:	461a      	mov	r2, r3
 800ce40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ce44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ce46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce48:	015a      	lsls	r2, r3, #5
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce56:	0151      	lsls	r1, r2, #5
 800ce58:	69fa      	ldr	r2, [r7, #28]
 800ce5a:	440a      	add	r2, r1
 800ce5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ce60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ce64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ce66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce68:	015a      	lsls	r2, r3, #5
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce76:	0151      	lsls	r1, r2, #5
 800ce78:	69fa      	ldr	r2, [r7, #28]
 800ce7a:	440a      	add	r2, r1
 800ce7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ce80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ce84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce88:	3301      	adds	r3, #1
 800ce8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	791b      	ldrb	r3, [r3, #4]
 800ce90:	461a      	mov	r2, r3
 800ce92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d3b2      	bcc.n	800cdfe <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce9e:	69db      	ldr	r3, [r3, #28]
 800cea0:	69fa      	ldr	r2, [r7, #28]
 800cea2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cea6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800ceaa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	7bdb      	ldrb	r3, [r3, #15]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d016      	beq.n	800cee2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ceba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cebe:	69fa      	ldr	r2, [r7, #28]
 800cec0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cec4:	f043 030b 	orr.w	r3, r3, #11
 800cec8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ced2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ced4:	69fa      	ldr	r2, [r7, #28]
 800ced6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ceda:	f043 030b 	orr.w	r3, r3, #11
 800cede:	6453      	str	r3, [r2, #68]	@ 0x44
 800cee0:	e015      	b.n	800cf0e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cee8:	695a      	ldr	r2, [r3, #20]
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cef0:	4619      	mov	r1, r3
 800cef2:	f242 032b 	movw	r3, #8235	@ 0x202b
 800cef6:	4313      	orrs	r3, r2
 800cef8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cefa:	69fb      	ldr	r3, [r7, #28]
 800cefc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf00:	691b      	ldr	r3, [r3, #16]
 800cf02:	69fa      	ldr	r2, [r7, #28]
 800cf04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cf08:	f043 030b 	orr.w	r3, r3, #11
 800cf0c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	69fa      	ldr	r2, [r7, #28]
 800cf18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cf1c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800cf20:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6818      	ldr	r0, [r3, #0]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cf30:	461a      	mov	r2, r3
 800cf32:	f009 fc55 	bl	80167e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	695a      	ldr	r2, [r3, #20]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800cf44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f009 fb82 	bl	8016654 <USB_ReadInterrupts>
 800cf50:	4603      	mov	r3, r0
 800cf52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cf56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf5a:	d123      	bne.n	800cfa4 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4618      	mov	r0, r3
 800cf62:	f009 fc19 	bl	8016798 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f008 fccd 	bl	801590a <USB_GetDevSpeed>
 800cf70:	4603      	mov	r3, r0
 800cf72:	461a      	mov	r2, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681c      	ldr	r4, [r3, #0]
 800cf7c:	f001 fd1c 	bl	800e9b8 <HAL_RCC_GetHCLKFreq>
 800cf80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cf86:	461a      	mov	r2, r3
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f008 f9d7 	bl	801533c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f00b ff5d 	bl	8018e4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	695a      	ldr	r2, [r3, #20]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800cfa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f009 fb53 	bl	8016654 <USB_ReadInterrupts>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	f003 0308 	and.w	r3, r3, #8
 800cfb4:	2b08      	cmp	r3, #8
 800cfb6:	d10a      	bne.n	800cfce <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f00b ff3a 	bl	8018e32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	695a      	ldr	r2, [r3, #20]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f002 0208 	and.w	r2, r2, #8
 800cfcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f009 fb3e 	bl	8016654 <USB_ReadInterrupts>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfde:	2b80      	cmp	r3, #128	@ 0x80
 800cfe0:	d123      	bne.n	800d02a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800cfe2:	6a3b      	ldr	r3, [r7, #32]
 800cfe4:	699b      	ldr	r3, [r3, #24]
 800cfe6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cfea:	6a3b      	ldr	r3, [r7, #32]
 800cfec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cfee:	2301      	movs	r3, #1
 800cff0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cff2:	e014      	b.n	800d01e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800cff4:	6879      	ldr	r1, [r7, #4]
 800cff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cff8:	4613      	mov	r3, r2
 800cffa:	00db      	lsls	r3, r3, #3
 800cffc:	4413      	add	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	440b      	add	r3, r1
 800d002:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d105      	bne.n	800d018 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800d00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	4619      	mov	r1, r3
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 fb08 	bl	800d628 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01a:	3301      	adds	r3, #1
 800d01c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	791b      	ldrb	r3, [r3, #4]
 800d022:	461a      	mov	r2, r3
 800d024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d026:	4293      	cmp	r3, r2
 800d028:	d3e4      	bcc.n	800cff4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4618      	mov	r0, r3
 800d030:	f009 fb10 	bl	8016654 <USB_ReadInterrupts>
 800d034:	4603      	mov	r3, r0
 800d036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d03a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d03e:	d13c      	bne.n	800d0ba <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d040:	2301      	movs	r3, #1
 800d042:	627b      	str	r3, [r7, #36]	@ 0x24
 800d044:	e02b      	b.n	800d09e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800d046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d048:	015a      	lsls	r2, r3, #5
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	4413      	add	r3, r2
 800d04e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800d056:	6879      	ldr	r1, [r7, #4]
 800d058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d05a:	4613      	mov	r3, r2
 800d05c:	00db      	lsls	r3, r3, #3
 800d05e:	4413      	add	r3, r2
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	440b      	add	r3, r1
 800d064:	3318      	adds	r3, #24
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d115      	bne.n	800d098 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800d06c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800d06e:	2b00      	cmp	r3, #0
 800d070:	da12      	bge.n	800d098 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800d072:	6879      	ldr	r1, [r7, #4]
 800d074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d076:	4613      	mov	r3, r2
 800d078:	00db      	lsls	r3, r3, #3
 800d07a:	4413      	add	r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	440b      	add	r3, r1
 800d080:	3317      	adds	r3, #23
 800d082:	2201      	movs	r2, #1
 800d084:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800d086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	4619      	mov	r1, r3
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 fac8 	bl	800d628 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d09a:	3301      	adds	r3, #1
 800d09c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	791b      	ldrb	r3, [r3, #4]
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d3cd      	bcc.n	800d046 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	695a      	ldr	r2, [r3, #20]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800d0b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f009 fac8 	bl	8016654 <USB_ReadInterrupts>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d0ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d0ce:	d156      	bne.n	800d17e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0d4:	e045      	b.n	800d162 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800d0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d8:	015a      	lsls	r2, r3, #5
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	4413      	add	r3, r2
 800d0de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800d0e6:	6879      	ldr	r1, [r7, #4]
 800d0e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	00db      	lsls	r3, r3, #3
 800d0ee:	4413      	add	r3, r2
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	440b      	add	r3, r1
 800d0f4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d12e      	bne.n	800d15c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800d0fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800d100:	2b00      	cmp	r3, #0
 800d102:	da2b      	bge.n	800d15c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800d104:	69bb      	ldr	r3, [r7, #24]
 800d106:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800d110:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800d114:	429a      	cmp	r2, r3
 800d116:	d121      	bne.n	800d15c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800d118:	6879      	ldr	r1, [r7, #4]
 800d11a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d11c:	4613      	mov	r3, r2
 800d11e:	00db      	lsls	r3, r3, #3
 800d120:	4413      	add	r3, r2
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	440b      	add	r3, r1
 800d126:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800d12a:	2201      	movs	r2, #1
 800d12c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800d12e:	6a3b      	ldr	r3, [r7, #32]
 800d130:	699b      	ldr	r3, [r3, #24]
 800d132:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d136:	6a3b      	ldr	r3, [r7, #32]
 800d138:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	695b      	ldr	r3, [r3, #20]
 800d13e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d142:	2b00      	cmp	r3, #0
 800d144:	d10a      	bne.n	800d15c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	69fa      	ldr	r2, [r7, #28]
 800d150:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d154:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d158:	6053      	str	r3, [r2, #4]
            break;
 800d15a:	e008      	b.n	800d16e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15e:	3301      	adds	r3, #1
 800d160:	627b      	str	r3, [r7, #36]	@ 0x24
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	791b      	ldrb	r3, [r3, #4]
 800d166:	461a      	mov	r2, r3
 800d168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d3b3      	bcc.n	800d0d6 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	695a      	ldr	r2, [r3, #20]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800d17c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4618      	mov	r0, r3
 800d184:	f009 fa66 	bl	8016654 <USB_ReadInterrupts>
 800d188:	4603      	mov	r3, r0
 800d18a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d18e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d192:	d10a      	bne.n	800d1aa <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f00b fedb 	bl	8018f50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	695a      	ldr	r2, [r3, #20]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800d1a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f009 fa50 	bl	8016654 <USB_ReadInterrupts>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	f003 0304 	and.w	r3, r3, #4
 800d1ba:	2b04      	cmp	r3, #4
 800d1bc:	d115      	bne.n	800d1ea <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	f003 0304 	and.w	r3, r3, #4
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f00b fecb 	bl	8018f6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	6859      	ldr	r1, [r3, #4]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	69ba      	ldr	r2, [r7, #24]
 800d1e2:	430a      	orrs	r2, r1
 800d1e4:	605a      	str	r2, [r3, #4]
 800d1e6:	e000      	b.n	800d1ea <HAL_PCD_IRQHandler+0x996>
      return;
 800d1e8:	bf00      	nop
    }
  }
}
 800d1ea:	3734      	adds	r7, #52	@ 0x34
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd90      	pop	{r4, r7, pc}

0800d1f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d202:	2b01      	cmp	r3, #1
 800d204:	d101      	bne.n	800d20a <HAL_PCD_SetAddress+0x1a>
 800d206:	2302      	movs	r3, #2
 800d208:	e012      	b.n	800d230 <HAL_PCD_SetAddress+0x40>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	78fa      	ldrb	r2, [r7, #3]
 800d216:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	78fa      	ldrb	r2, [r7, #3]
 800d21e:	4611      	mov	r1, r2
 800d220:	4618      	mov	r0, r3
 800d222:	f009 f9af 	bl	8016584 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	4608      	mov	r0, r1
 800d242:	4611      	mov	r1, r2
 800d244:	461a      	mov	r2, r3
 800d246:	4603      	mov	r3, r0
 800d248:	70fb      	strb	r3, [r7, #3]
 800d24a:	460b      	mov	r3, r1
 800d24c:	803b      	strh	r3, [r7, #0]
 800d24e:	4613      	mov	r3, r2
 800d250:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d252:	2300      	movs	r3, #0
 800d254:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	da0f      	bge.n	800d27e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d25e:	78fb      	ldrb	r3, [r7, #3]
 800d260:	f003 020f 	and.w	r2, r3, #15
 800d264:	4613      	mov	r3, r2
 800d266:	00db      	lsls	r3, r3, #3
 800d268:	4413      	add	r3, r2
 800d26a:	009b      	lsls	r3, r3, #2
 800d26c:	3310      	adds	r3, #16
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	4413      	add	r3, r2
 800d272:	3304      	adds	r3, #4
 800d274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2201      	movs	r2, #1
 800d27a:	705a      	strb	r2, [r3, #1]
 800d27c:	e00f      	b.n	800d29e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d27e:	78fb      	ldrb	r3, [r7, #3]
 800d280:	f003 020f 	and.w	r2, r3, #15
 800d284:	4613      	mov	r3, r2
 800d286:	00db      	lsls	r3, r3, #3
 800d288:	4413      	add	r3, r2
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	4413      	add	r3, r2
 800d294:	3304      	adds	r3, #4
 800d296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2200      	movs	r2, #0
 800d29c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d29e:	78fb      	ldrb	r3, [r7, #3]
 800d2a0:	f003 030f 	and.w	r3, r3, #15
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d2aa:	883a      	ldrh	r2, [r7, #0]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	78ba      	ldrb	r2, [r7, #2]
 800d2b4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	785b      	ldrb	r3, [r3, #1]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d004      	beq.n	800d2c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d2c8:	78bb      	ldrb	r3, [r7, #2]
 800d2ca:	2b02      	cmp	r3, #2
 800d2cc:	d102      	bne.n	800d2d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d101      	bne.n	800d2e2 <HAL_PCD_EP_Open+0xaa>
 800d2de:	2302      	movs	r3, #2
 800d2e0:	e00e      	b.n	800d300 <HAL_PCD_EP_Open+0xc8>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68f9      	ldr	r1, [r7, #12]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f008 fb2f 	bl	8015954 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800d2fe:	7afb      	ldrb	r3, [r7, #11]
}
 800d300:	4618      	mov	r0, r3
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	460b      	mov	r3, r1
 800d312:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	da0f      	bge.n	800d33c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d31c:	78fb      	ldrb	r3, [r7, #3]
 800d31e:	f003 020f 	and.w	r2, r3, #15
 800d322:	4613      	mov	r3, r2
 800d324:	00db      	lsls	r3, r3, #3
 800d326:	4413      	add	r3, r2
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	3310      	adds	r3, #16
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	4413      	add	r3, r2
 800d330:	3304      	adds	r3, #4
 800d332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2201      	movs	r2, #1
 800d338:	705a      	strb	r2, [r3, #1]
 800d33a:	e00f      	b.n	800d35c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d33c:	78fb      	ldrb	r3, [r7, #3]
 800d33e:	f003 020f 	and.w	r2, r3, #15
 800d342:	4613      	mov	r3, r2
 800d344:	00db      	lsls	r3, r3, #3
 800d346:	4413      	add	r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	4413      	add	r3, r2
 800d352:	3304      	adds	r3, #4
 800d354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2200      	movs	r2, #0
 800d35a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800d35c:	78fb      	ldrb	r3, [r7, #3]
 800d35e:	f003 030f 	and.w	r3, r3, #15
 800d362:	b2da      	uxtb	r2, r3
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d36e:	2b01      	cmp	r3, #1
 800d370:	d101      	bne.n	800d376 <HAL_PCD_EP_Close+0x6e>
 800d372:	2302      	movs	r3, #2
 800d374:	e00e      	b.n	800d394 <HAL_PCD_EP_Close+0x8c>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2201      	movs	r2, #1
 800d37a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	68f9      	ldr	r1, [r7, #12]
 800d384:	4618      	mov	r0, r3
 800d386:	f008 fb6d 	bl	8015a64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800d392:	2300      	movs	r3, #0
}
 800d394:	4618      	mov	r0, r3
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	607a      	str	r2, [r7, #4]
 800d3a6:	603b      	str	r3, [r7, #0]
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d3ac:	7afb      	ldrb	r3, [r7, #11]
 800d3ae:	f003 020f 	and.w	r2, r3, #15
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	00db      	lsls	r3, r3, #3
 800d3b6:	4413      	add	r3, r2
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d3be:	68fa      	ldr	r2, [r7, #12]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	3304      	adds	r3, #4
 800d3c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	683a      	ldr	r2, [r7, #0]
 800d3d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d3de:	7afb      	ldrb	r3, [r7, #11]
 800d3e0:	f003 030f 	and.w	r3, r3, #15
 800d3e4:	b2da      	uxtb	r2, r3
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	799b      	ldrb	r3, [r3, #6]
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d102      	bne.n	800d3f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	6818      	ldr	r0, [r3, #0]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	799b      	ldrb	r3, [r3, #6]
 800d400:	461a      	mov	r2, r3
 800d402:	6979      	ldr	r1, [r7, #20]
 800d404:	f008 fc0a 	bl	8015c1c <USB_EPStartXfer>

  return HAL_OK;
 800d408:	2300      	movs	r3, #0
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3718      	adds	r7, #24
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}

0800d412 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800d412:	b480      	push	{r7}
 800d414:	b083      	sub	sp, #12
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
 800d41a:	460b      	mov	r3, r1
 800d41c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d41e:	78fb      	ldrb	r3, [r7, #3]
 800d420:	f003 020f 	and.w	r2, r3, #15
 800d424:	6879      	ldr	r1, [r7, #4]
 800d426:	4613      	mov	r3, r2
 800d428:	00db      	lsls	r3, r3, #3
 800d42a:	4413      	add	r3, r2
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	440b      	add	r3, r1
 800d430:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800d434:	681b      	ldr	r3, [r3, #0]
}
 800d436:	4618      	mov	r0, r3
 800d438:	370c      	adds	r7, #12
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b086      	sub	sp, #24
 800d446:	af00      	add	r7, sp, #0
 800d448:	60f8      	str	r0, [r7, #12]
 800d44a:	607a      	str	r2, [r7, #4]
 800d44c:	603b      	str	r3, [r7, #0]
 800d44e:	460b      	mov	r3, r1
 800d450:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d452:	7afb      	ldrb	r3, [r7, #11]
 800d454:	f003 020f 	and.w	r2, r3, #15
 800d458:	4613      	mov	r3, r2
 800d45a:	00db      	lsls	r3, r3, #3
 800d45c:	4413      	add	r3, r2
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	3310      	adds	r3, #16
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	4413      	add	r3, r2
 800d466:	3304      	adds	r3, #4
 800d468:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	2200      	movs	r2, #0
 800d47a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	2201      	movs	r2, #1
 800d480:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d482:	7afb      	ldrb	r3, [r7, #11]
 800d484:	f003 030f 	and.w	r3, r3, #15
 800d488:	b2da      	uxtb	r2, r3
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	799b      	ldrb	r3, [r3, #6]
 800d492:	2b01      	cmp	r3, #1
 800d494:	d102      	bne.n	800d49c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	6818      	ldr	r0, [r3, #0]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	799b      	ldrb	r3, [r3, #6]
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	6979      	ldr	r1, [r7, #20]
 800d4a8:	f008 fbb8 	bl	8015c1c <USB_EPStartXfer>

  return HAL_OK;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3718      	adds	r7, #24
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b084      	sub	sp, #16
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
 800d4be:	460b      	mov	r3, r1
 800d4c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d4c2:	78fb      	ldrb	r3, [r7, #3]
 800d4c4:	f003 030f 	and.w	r3, r3, #15
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	7912      	ldrb	r2, [r2, #4]
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d901      	bls.n	800d4d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e04f      	b.n	800d574 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d4d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	da0f      	bge.n	800d4fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d4dc:	78fb      	ldrb	r3, [r7, #3]
 800d4de:	f003 020f 	and.w	r2, r3, #15
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	00db      	lsls	r3, r3, #3
 800d4e6:	4413      	add	r3, r2
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	3310      	adds	r3, #16
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	3304      	adds	r3, #4
 800d4f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	705a      	strb	r2, [r3, #1]
 800d4fa:	e00d      	b.n	800d518 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d4fc:	78fa      	ldrb	r2, [r7, #3]
 800d4fe:	4613      	mov	r3, r2
 800d500:	00db      	lsls	r3, r3, #3
 800d502:	4413      	add	r3, r2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	4413      	add	r3, r2
 800d50e:	3304      	adds	r3, #4
 800d510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2200      	movs	r2, #0
 800d516:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2201      	movs	r2, #1
 800d51c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d51e:	78fb      	ldrb	r3, [r7, #3]
 800d520:	f003 030f 	and.w	r3, r3, #15
 800d524:	b2da      	uxtb	r2, r3
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d530:	2b01      	cmp	r3, #1
 800d532:	d101      	bne.n	800d538 <HAL_PCD_EP_SetStall+0x82>
 800d534:	2302      	movs	r3, #2
 800d536:	e01d      	b.n	800d574 <HAL_PCD_EP_SetStall+0xbe>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	68f9      	ldr	r1, [r7, #12]
 800d546:	4618      	mov	r0, r3
 800d548:	f008 ff48 	bl	80163dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d54c:	78fb      	ldrb	r3, [r7, #3]
 800d54e:	f003 030f 	and.w	r3, r3, #15
 800d552:	2b00      	cmp	r3, #0
 800d554:	d109      	bne.n	800d56a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6818      	ldr	r0, [r3, #0]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	7999      	ldrb	r1, [r3, #6]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d564:	461a      	mov	r2, r3
 800d566:	f009 f93b 	bl	80167e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d572:	2300      	movs	r3, #0
}
 800d574:	4618      	mov	r0, r3
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d588:	78fb      	ldrb	r3, [r7, #3]
 800d58a:	f003 030f 	and.w	r3, r3, #15
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	7912      	ldrb	r2, [r2, #4]
 800d592:	4293      	cmp	r3, r2
 800d594:	d901      	bls.n	800d59a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	e042      	b.n	800d620 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d59a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	da0f      	bge.n	800d5c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d5a2:	78fb      	ldrb	r3, [r7, #3]
 800d5a4:	f003 020f 	and.w	r2, r3, #15
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	00db      	lsls	r3, r3, #3
 800d5ac:	4413      	add	r3, r2
 800d5ae:	009b      	lsls	r3, r3, #2
 800d5b0:	3310      	adds	r3, #16
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	3304      	adds	r3, #4
 800d5b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2201      	movs	r2, #1
 800d5be:	705a      	strb	r2, [r3, #1]
 800d5c0:	e00f      	b.n	800d5e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d5c2:	78fb      	ldrb	r3, [r7, #3]
 800d5c4:	f003 020f 	and.w	r2, r3, #15
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	00db      	lsls	r3, r3, #3
 800d5cc:	4413      	add	r3, r2
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	3304      	adds	r3, #4
 800d5da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d5e8:	78fb      	ldrb	r3, [r7, #3]
 800d5ea:	f003 030f 	and.w	r3, r3, #15
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d101      	bne.n	800d602 <HAL_PCD_EP_ClrStall+0x86>
 800d5fe:	2302      	movs	r3, #2
 800d600:	e00e      	b.n	800d620 <HAL_PCD_EP_ClrStall+0xa4>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2201      	movs	r2, #1
 800d606:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	68f9      	ldr	r1, [r7, #12]
 800d610:	4618      	mov	r0, r3
 800d612:	f008 ff51 	bl	80164b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d61e:	2300      	movs	r3, #0
}
 800d620:	4618      	mov	r0, r3
 800d622:	3710      	adds	r7, #16
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	460b      	mov	r3, r1
 800d632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800d634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	da0c      	bge.n	800d656 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d63c:	78fb      	ldrb	r3, [r7, #3]
 800d63e:	f003 020f 	and.w	r2, r3, #15
 800d642:	4613      	mov	r3, r2
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	4413      	add	r3, r2
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	3310      	adds	r3, #16
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	4413      	add	r3, r2
 800d650:	3304      	adds	r3, #4
 800d652:	60fb      	str	r3, [r7, #12]
 800d654:	e00c      	b.n	800d670 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d656:	78fb      	ldrb	r3, [r7, #3]
 800d658:	f003 020f 	and.w	r2, r3, #15
 800d65c:	4613      	mov	r3, r2
 800d65e:	00db      	lsls	r3, r3, #3
 800d660:	4413      	add	r3, r2
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	4413      	add	r3, r2
 800d66c:	3304      	adds	r3, #4
 800d66e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	68f9      	ldr	r1, [r7, #12]
 800d676:	4618      	mov	r0, r3
 800d678:	f008 fd70 	bl	801615c <USB_EPStopXfer>
 800d67c:	4603      	mov	r3, r0
 800d67e:	72fb      	strb	r3, [r7, #11]

  return ret;
 800d680:	7afb      	ldrb	r3, [r7, #11]
}
 800d682:	4618      	mov	r0, r3
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b08a      	sub	sp, #40	@ 0x28
 800d68e:	af02      	add	r7, sp, #8
 800d690:	6078      	str	r0, [r7, #4]
 800d692:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d69e:	683a      	ldr	r2, [r7, #0]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	00db      	lsls	r3, r3, #3
 800d6a4:	4413      	add	r3, r2
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	3310      	adds	r3, #16
 800d6aa:	687a      	ldr	r2, [r7, #4]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	3304      	adds	r3, #4
 800d6b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	695a      	ldr	r2, [r3, #20]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	691b      	ldr	r3, [r3, #16]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d901      	bls.n	800d6c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	e06b      	b.n	800d79a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	691a      	ldr	r2, [r3, #16]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	695b      	ldr	r3, [r3, #20]
 800d6ca:	1ad3      	subs	r3, r2, r3
 800d6cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	69fa      	ldr	r2, [r7, #28]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d902      	bls.n	800d6de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	3303      	adds	r3, #3
 800d6e2:	089b      	lsrs	r3, r3, #2
 800d6e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d6e6:	e02a      	b.n	800d73e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	691a      	ldr	r2, [r3, #16]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	695b      	ldr	r3, [r3, #20]
 800d6f0:	1ad3      	subs	r3, r2, r3
 800d6f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	69fa      	ldr	r2, [r7, #28]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d902      	bls.n	800d704 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	3303      	adds	r3, #3
 800d708:	089b      	lsrs	r3, r3, #2
 800d70a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	68d9      	ldr	r1, [r3, #12]
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	b2da      	uxtb	r2, r3
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d71c:	9300      	str	r3, [sp, #0]
 800d71e:	4603      	mov	r3, r0
 800d720:	6978      	ldr	r0, [r7, #20]
 800d722:	f008 fdc5 	bl	80162b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	68da      	ldr	r2, [r3, #12]
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	441a      	add	r2, r3
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	695a      	ldr	r2, [r3, #20]
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	441a      	add	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	015a      	lsls	r2, r3, #5
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	4413      	add	r3, r2
 800d746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d74a:	699b      	ldr	r3, [r3, #24]
 800d74c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d74e:	69ba      	ldr	r2, [r7, #24]
 800d750:	429a      	cmp	r2, r3
 800d752:	d809      	bhi.n	800d768 <PCD_WriteEmptyTxFifo+0xde>
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	695a      	ldr	r2, [r3, #20]
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d203      	bcs.n	800d768 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	691b      	ldr	r3, [r3, #16]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d1bf      	bne.n	800d6e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	691a      	ldr	r2, [r3, #16]
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	695b      	ldr	r3, [r3, #20]
 800d770:	429a      	cmp	r2, r3
 800d772:	d811      	bhi.n	800d798 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	f003 030f 	and.w	r3, r3, #15
 800d77a:	2201      	movs	r2, #1
 800d77c:	fa02 f303 	lsl.w	r3, r2, r3
 800d780:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	43db      	mvns	r3, r3
 800d78e:	6939      	ldr	r1, [r7, #16]
 800d790:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d794:	4013      	ands	r3, r2
 800d796:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800d798:	2300      	movs	r3, #0
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3720      	adds	r7, #32
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
	...

0800d7a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b088      	sub	sp, #32
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7b4:	69fb      	ldr	r3, [r7, #28]
 800d7b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	333c      	adds	r3, #60	@ 0x3c
 800d7bc:	3304      	adds	r3, #4
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	015a      	lsls	r2, r3, #5
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	799b      	ldrb	r3, [r3, #6]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d17b      	bne.n	800d8d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	f003 0308 	and.w	r3, r3, #8
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d015      	beq.n	800d810 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	4a61      	ldr	r2, [pc, #388]	@ (800d96c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	f240 80b9 	bls.w	800d960 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f000 80b3 	beq.w	800d960 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	015a      	lsls	r2, r3, #5
 800d7fe:	69bb      	ldr	r3, [r7, #24]
 800d800:	4413      	add	r3, r2
 800d802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d806:	461a      	mov	r2, r3
 800d808:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d80c:	6093      	str	r3, [r2, #8]
 800d80e:	e0a7      	b.n	800d960 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	f003 0320 	and.w	r3, r3, #32
 800d816:	2b00      	cmp	r3, #0
 800d818:	d009      	beq.n	800d82e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	015a      	lsls	r2, r3, #5
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	4413      	add	r3, r2
 800d822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d826:	461a      	mov	r2, r3
 800d828:	2320      	movs	r3, #32
 800d82a:	6093      	str	r3, [r2, #8]
 800d82c:	e098      	b.n	800d960 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d834:	2b00      	cmp	r3, #0
 800d836:	f040 8093 	bne.w	800d960 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	4a4b      	ldr	r2, [pc, #300]	@ (800d96c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d90f      	bls.n	800d862 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00a      	beq.n	800d862 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	015a      	lsls	r2, r3, #5
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	4413      	add	r3, r2
 800d854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d858:	461a      	mov	r2, r3
 800d85a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d85e:	6093      	str	r3, [r2, #8]
 800d860:	e07e      	b.n	800d960 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800d862:	683a      	ldr	r2, [r7, #0]
 800d864:	4613      	mov	r3, r2
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	4413      	add	r3, r2
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	4413      	add	r3, r2
 800d874:	3304      	adds	r3, #4
 800d876:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6a1a      	ldr	r2, [r3, #32]
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	0159      	lsls	r1, r3, #5
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	440b      	add	r3, r1
 800d884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d888:	691b      	ldr	r3, [r3, #16]
 800d88a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d88e:	1ad2      	subs	r2, r2, r3
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d114      	bne.n	800d8c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	691b      	ldr	r3, [r3, #16]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d109      	bne.n	800d8b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6818      	ldr	r0, [r3, #0]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	2101      	movs	r1, #1
 800d8b0:	f008 ff96 	bl	80167e0 <USB_EP0_OutStart>
 800d8b4:	e006      	b.n	800d8c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	68da      	ldr	r2, [r3, #12]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	695b      	ldr	r3, [r3, #20]
 800d8be:	441a      	add	r2, r3
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f00b fa7c 	bl	8018dc8 <HAL_PCD_DataOutStageCallback>
 800d8d0:	e046      	b.n	800d960 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	4a26      	ldr	r2, [pc, #152]	@ (800d970 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d124      	bne.n	800d924 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00a      	beq.n	800d8fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	015a      	lsls	r2, r3, #5
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d8f6:	6093      	str	r3, [r2, #8]
 800d8f8:	e032      	b.n	800d960 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	f003 0320 	and.w	r3, r3, #32
 800d900:	2b00      	cmp	r3, #0
 800d902:	d008      	beq.n	800d916 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	015a      	lsls	r2, r3, #5
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	4413      	add	r3, r2
 800d90c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d910:	461a      	mov	r2, r3
 800d912:	2320      	movs	r3, #32
 800d914:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	4619      	mov	r1, r3
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f00b fa53 	bl	8018dc8 <HAL_PCD_DataOutStageCallback>
 800d922:	e01d      	b.n	800d960 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d114      	bne.n	800d954 <PCD_EP_OutXfrComplete_int+0x1b0>
 800d92a:	6879      	ldr	r1, [r7, #4]
 800d92c:	683a      	ldr	r2, [r7, #0]
 800d92e:	4613      	mov	r3, r2
 800d930:	00db      	lsls	r3, r3, #3
 800d932:	4413      	add	r3, r2
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	440b      	add	r3, r1
 800d938:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d108      	bne.n	800d954 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6818      	ldr	r0, [r3, #0]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d94c:	461a      	mov	r2, r3
 800d94e:	2100      	movs	r1, #0
 800d950:	f008 ff46 	bl	80167e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	b2db      	uxtb	r3, r3
 800d958:	4619      	mov	r1, r3
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f00b fa34 	bl	8018dc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d960:	2300      	movs	r3, #0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3720      	adds	r7, #32
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	4f54300a 	.word	0x4f54300a
 800d970:	4f54310a 	.word	0x4f54310a

0800d974 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b086      	sub	sp, #24
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	333c      	adds	r3, #60	@ 0x3c
 800d98c:	3304      	adds	r3, #4
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	015a      	lsls	r2, r3, #5
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	4413      	add	r3, r2
 800d99a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	4a15      	ldr	r2, [pc, #84]	@ (800d9fc <PCD_EP_OutSetupPacket_int+0x88>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d90e      	bls.n	800d9c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d009      	beq.n	800d9c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	015a      	lsls	r2, r3, #5
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	4413      	add	r3, r2
 800d9bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f00b f9eb 	bl	8018da4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	4a0a      	ldr	r2, [pc, #40]	@ (800d9fc <PCD_EP_OutSetupPacket_int+0x88>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d90c      	bls.n	800d9f0 <PCD_EP_OutSetupPacket_int+0x7c>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	799b      	ldrb	r3, [r3, #6]
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d108      	bne.n	800d9f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6818      	ldr	r0, [r3, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	2101      	movs	r1, #1
 800d9ec:	f008 fef8 	bl	80167e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d9f0:	2300      	movs	r3, #0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3718      	adds	r7, #24
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	4f54300a 	.word	0x4f54300a

0800da00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800da00:	b480      	push	{r7}
 800da02:	b085      	sub	sp, #20
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	460b      	mov	r3, r1
 800da0a:	70fb      	strb	r3, [r7, #3]
 800da0c:	4613      	mov	r3, r2
 800da0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800da18:	78fb      	ldrb	r3, [r7, #3]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d107      	bne.n	800da2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800da1e:	883b      	ldrh	r3, [r7, #0]
 800da20:	0419      	lsls	r1, r3, #16
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	68ba      	ldr	r2, [r7, #8]
 800da28:	430a      	orrs	r2, r1
 800da2a:	629a      	str	r2, [r3, #40]	@ 0x28
 800da2c:	e028      	b.n	800da80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da34:	0c1b      	lsrs	r3, r3, #16
 800da36:	68ba      	ldr	r2, [r7, #8]
 800da38:	4413      	add	r3, r2
 800da3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800da3c:	2300      	movs	r3, #0
 800da3e:	73fb      	strb	r3, [r7, #15]
 800da40:	e00d      	b.n	800da5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	7bfb      	ldrb	r3, [r7, #15]
 800da48:	3340      	adds	r3, #64	@ 0x40
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	4413      	add	r3, r2
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	0c1b      	lsrs	r3, r3, #16
 800da52:	68ba      	ldr	r2, [r7, #8]
 800da54:	4413      	add	r3, r2
 800da56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800da58:	7bfb      	ldrb	r3, [r7, #15]
 800da5a:	3301      	adds	r3, #1
 800da5c:	73fb      	strb	r3, [r7, #15]
 800da5e:	7bfa      	ldrb	r2, [r7, #15]
 800da60:	78fb      	ldrb	r3, [r7, #3]
 800da62:	3b01      	subs	r3, #1
 800da64:	429a      	cmp	r2, r3
 800da66:	d3ec      	bcc.n	800da42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800da68:	883b      	ldrh	r3, [r7, #0]
 800da6a:	0418      	lsls	r0, r3, #16
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6819      	ldr	r1, [r3, #0]
 800da70:	78fb      	ldrb	r3, [r7, #3]
 800da72:	3b01      	subs	r3, #1
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	4302      	orrs	r2, r0
 800da78:	3340      	adds	r3, #64	@ 0x40
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	440b      	add	r3, r1
 800da7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800da80:	2300      	movs	r3, #0
}
 800da82:	4618      	mov	r0, r3
 800da84:	3714      	adds	r7, #20
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800da8e:	b480      	push	{r7}
 800da90:	b083      	sub	sp, #12
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
 800da96:	460b      	mov	r3, r1
 800da98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	887a      	ldrh	r2, [r7, #2]
 800daa0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800daa2:	2300      	movs	r3, #0
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b085      	sub	sp, #20
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2201      	movs	r2, #1
 800dac2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	699b      	ldr	r3, [r3, #24]
 800dad2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dade:	4b05      	ldr	r3, [pc, #20]	@ (800daf4 <HAL_PCDEx_ActivateLPM+0x44>)
 800dae0:	4313      	orrs	r3, r2
 800dae2:	68fa      	ldr	r2, [r7, #12]
 800dae4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3714      	adds	r7, #20
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr
 800daf4:	10000003 	.word	0x10000003

0800daf8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b083      	sub	sp, #12
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	460b      	mov	r3, r1
 800db02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800db04:	bf00      	nop
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800db18:	4b19      	ldr	r3, [pc, #100]	@ (800db80 <HAL_PWREx_ConfigSupply+0x70>)
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	f003 0304 	and.w	r3, r3, #4
 800db20:	2b04      	cmp	r3, #4
 800db22:	d00a      	beq.n	800db3a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800db24:	4b16      	ldr	r3, [pc, #88]	@ (800db80 <HAL_PWREx_ConfigSupply+0x70>)
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	f003 0307 	and.w	r3, r3, #7
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d001      	beq.n	800db36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800db32:	2301      	movs	r3, #1
 800db34:	e01f      	b.n	800db76 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800db36:	2300      	movs	r3, #0
 800db38:	e01d      	b.n	800db76 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800db3a:	4b11      	ldr	r3, [pc, #68]	@ (800db80 <HAL_PWREx_ConfigSupply+0x70>)
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	f023 0207 	bic.w	r2, r3, #7
 800db42:	490f      	ldr	r1, [pc, #60]	@ (800db80 <HAL_PWREx_ConfigSupply+0x70>)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4313      	orrs	r3, r2
 800db48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800db4a:	f7fa f963 	bl	8007e14 <HAL_GetTick>
 800db4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800db50:	e009      	b.n	800db66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800db52:	f7fa f95f 	bl	8007e14 <HAL_GetTick>
 800db56:	4602      	mov	r2, r0
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	1ad3      	subs	r3, r2, r3
 800db5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800db60:	d901      	bls.n	800db66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800db62:	2301      	movs	r3, #1
 800db64:	e007      	b.n	800db76 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800db66:	4b06      	ldr	r3, [pc, #24]	@ (800db80 <HAL_PWREx_ConfigSupply+0x70>)
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800db6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db72:	d1ee      	bne.n	800db52 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3710      	adds	r7, #16
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	58024800 	.word	0x58024800

0800db84 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800db84:	b480      	push	{r7}
 800db86:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800db88:	4b05      	ldr	r3, [pc, #20]	@ (800dba0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	4a04      	ldr	r2, [pc, #16]	@ (800dba0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800db8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800db92:	60d3      	str	r3, [r2, #12]
}
 800db94:	bf00      	nop
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	58024800 	.word	0x58024800

0800dba4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b08c      	sub	sp, #48	@ 0x30
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d101      	bne.n	800dbb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	e3c8      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f003 0301 	and.w	r3, r3, #1
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f000 8087 	beq.w	800dcd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dbc4:	4b88      	ldr	r3, [pc, #544]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dbc6:	691b      	ldr	r3, [r3, #16]
 800dbc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dbcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dbce:	4b86      	ldr	r3, [pc, #536]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dbd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800dbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbd6:	2b10      	cmp	r3, #16
 800dbd8:	d007      	beq.n	800dbea <HAL_RCC_OscConfig+0x46>
 800dbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbdc:	2b18      	cmp	r3, #24
 800dbde:	d110      	bne.n	800dc02 <HAL_RCC_OscConfig+0x5e>
 800dbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe2:	f003 0303 	and.w	r3, r3, #3
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	d10b      	bne.n	800dc02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dbea:	4b7f      	ldr	r3, [pc, #508]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d06c      	beq.n	800dcd0 <HAL_RCC_OscConfig+0x12c>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d168      	bne.n	800dcd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e3a2      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc0a:	d106      	bne.n	800dc1a <HAL_RCC_OscConfig+0x76>
 800dc0c:	4b76      	ldr	r3, [pc, #472]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a75      	ldr	r2, [pc, #468]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc16:	6013      	str	r3, [r2, #0]
 800dc18:	e02e      	b.n	800dc78 <HAL_RCC_OscConfig+0xd4>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10c      	bne.n	800dc3c <HAL_RCC_OscConfig+0x98>
 800dc22:	4b71      	ldr	r3, [pc, #452]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a70      	ldr	r2, [pc, #448]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dc2c:	6013      	str	r3, [r2, #0]
 800dc2e:	4b6e      	ldr	r3, [pc, #440]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a6d      	ldr	r2, [pc, #436]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dc38:	6013      	str	r3, [r2, #0]
 800dc3a:	e01d      	b.n	800dc78 <HAL_RCC_OscConfig+0xd4>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dc44:	d10c      	bne.n	800dc60 <HAL_RCC_OscConfig+0xbc>
 800dc46:	4b68      	ldr	r3, [pc, #416]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a67      	ldr	r2, [pc, #412]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800dc50:	6013      	str	r3, [r2, #0]
 800dc52:	4b65      	ldr	r3, [pc, #404]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4a64      	ldr	r2, [pc, #400]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc5c:	6013      	str	r3, [r2, #0]
 800dc5e:	e00b      	b.n	800dc78 <HAL_RCC_OscConfig+0xd4>
 800dc60:	4b61      	ldr	r3, [pc, #388]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4a60      	ldr	r2, [pc, #384]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dc6a:	6013      	str	r3, [r2, #0]
 800dc6c:	4b5e      	ldr	r3, [pc, #376]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a5d      	ldr	r2, [pc, #372]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dc76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d013      	beq.n	800dca8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc80:	f7fa f8c8 	bl	8007e14 <HAL_GetTick>
 800dc84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dc86:	e008      	b.n	800dc9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dc88:	f7fa f8c4 	bl	8007e14 <HAL_GetTick>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc90:	1ad3      	subs	r3, r2, r3
 800dc92:	2b64      	cmp	r3, #100	@ 0x64
 800dc94:	d901      	bls.n	800dc9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800dc96:	2303      	movs	r3, #3
 800dc98:	e356      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dc9a:	4b53      	ldr	r3, [pc, #332]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d0f0      	beq.n	800dc88 <HAL_RCC_OscConfig+0xe4>
 800dca6:	e014      	b.n	800dcd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dca8:	f7fa f8b4 	bl	8007e14 <HAL_GetTick>
 800dcac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dcae:	e008      	b.n	800dcc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dcb0:	f7fa f8b0 	bl	8007e14 <HAL_GetTick>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	2b64      	cmp	r3, #100	@ 0x64
 800dcbc:	d901      	bls.n	800dcc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800dcbe:	2303      	movs	r3, #3
 800dcc0:	e342      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dcc2:	4b49      	ldr	r3, [pc, #292]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d1f0      	bne.n	800dcb0 <HAL_RCC_OscConfig+0x10c>
 800dcce:	e000      	b.n	800dcd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dcd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f003 0302 	and.w	r3, r3, #2
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f000 808c 	beq.w	800ddf8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dce0:	4b41      	ldr	r3, [pc, #260]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dce2:	691b      	ldr	r3, [r3, #16]
 800dce4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dce8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dcea:	4b3f      	ldr	r3, [pc, #252]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dcec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800dcf0:	6a3b      	ldr	r3, [r7, #32]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d007      	beq.n	800dd06 <HAL_RCC_OscConfig+0x162>
 800dcf6:	6a3b      	ldr	r3, [r7, #32]
 800dcf8:	2b18      	cmp	r3, #24
 800dcfa:	d137      	bne.n	800dd6c <HAL_RCC_OscConfig+0x1c8>
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	f003 0303 	and.w	r3, r3, #3
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d132      	bne.n	800dd6c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dd06:	4b38      	ldr	r3, [pc, #224]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f003 0304 	and.w	r3, r3, #4
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d005      	beq.n	800dd1e <HAL_RCC_OscConfig+0x17a>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d101      	bne.n	800dd1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	e314      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dd1e:	4b32      	ldr	r3, [pc, #200]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f023 0219 	bic.w	r2, r3, #25
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	68db      	ldr	r3, [r3, #12]
 800dd2a:	492f      	ldr	r1, [pc, #188]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd30:	f7fa f870 	bl	8007e14 <HAL_GetTick>
 800dd34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dd36:	e008      	b.n	800dd4a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd38:	f7fa f86c 	bl	8007e14 <HAL_GetTick>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd40:	1ad3      	subs	r3, r2, r3
 800dd42:	2b02      	cmp	r3, #2
 800dd44:	d901      	bls.n	800dd4a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800dd46:	2303      	movs	r3, #3
 800dd48:	e2fe      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dd4a:	4b27      	ldr	r3, [pc, #156]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f003 0304 	and.w	r3, r3, #4
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d0f0      	beq.n	800dd38 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd56:	4b24      	ldr	r3, [pc, #144]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	061b      	lsls	r3, r3, #24
 800dd64:	4920      	ldr	r1, [pc, #128]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dd66:	4313      	orrs	r3, r2
 800dd68:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dd6a:	e045      	b.n	800ddf8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	68db      	ldr	r3, [r3, #12]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d026      	beq.n	800ddc2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dd74:	4b1c      	ldr	r3, [pc, #112]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f023 0219 	bic.w	r2, r3, #25
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	4919      	ldr	r1, [pc, #100]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dd82:	4313      	orrs	r3, r2
 800dd84:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd86:	f7fa f845 	bl	8007e14 <HAL_GetTick>
 800dd8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dd8c:	e008      	b.n	800dda0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd8e:	f7fa f841 	bl	8007e14 <HAL_GetTick>
 800dd92:	4602      	mov	r2, r0
 800dd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd96:	1ad3      	subs	r3, r2, r3
 800dd98:	2b02      	cmp	r3, #2
 800dd9a:	d901      	bls.n	800dda0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800dd9c:	2303      	movs	r3, #3
 800dd9e:	e2d3      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dda0:	4b11      	ldr	r3, [pc, #68]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f003 0304 	and.w	r3, r3, #4
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d0f0      	beq.n	800dd8e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ddac:	4b0e      	ldr	r3, [pc, #56]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	691b      	ldr	r3, [r3, #16]
 800ddb8:	061b      	lsls	r3, r3, #24
 800ddba:	490b      	ldr	r1, [pc, #44]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	604b      	str	r3, [r1, #4]
 800ddc0:	e01a      	b.n	800ddf8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ddc2:	4b09      	ldr	r3, [pc, #36]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a08      	ldr	r2, [pc, #32]	@ (800dde8 <HAL_RCC_OscConfig+0x244>)
 800ddc8:	f023 0301 	bic.w	r3, r3, #1
 800ddcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddce:	f7fa f821 	bl	8007e14 <HAL_GetTick>
 800ddd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ddd4:	e00a      	b.n	800ddec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ddd6:	f7fa f81d 	bl	8007e14 <HAL_GetTick>
 800ddda:	4602      	mov	r2, r0
 800dddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddde:	1ad3      	subs	r3, r2, r3
 800dde0:	2b02      	cmp	r3, #2
 800dde2:	d903      	bls.n	800ddec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800dde4:	2303      	movs	r3, #3
 800dde6:	e2af      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
 800dde8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ddec:	4b96      	ldr	r3, [pc, #600]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f003 0304 	and.w	r3, r3, #4
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d1ee      	bne.n	800ddd6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f003 0310 	and.w	r3, r3, #16
 800de00:	2b00      	cmp	r3, #0
 800de02:	d06a      	beq.n	800deda <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de04:	4b90      	ldr	r3, [pc, #576]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800de06:	691b      	ldr	r3, [r3, #16]
 800de08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800de0c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800de0e:	4b8e      	ldr	r3, [pc, #568]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800de10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de12:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	2b08      	cmp	r3, #8
 800de18:	d007      	beq.n	800de2a <HAL_RCC_OscConfig+0x286>
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	2b18      	cmp	r3, #24
 800de1e:	d11b      	bne.n	800de58 <HAL_RCC_OscConfig+0x2b4>
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	f003 0303 	and.w	r3, r3, #3
 800de26:	2b01      	cmp	r3, #1
 800de28:	d116      	bne.n	800de58 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800de2a:	4b87      	ldr	r3, [pc, #540]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de32:	2b00      	cmp	r3, #0
 800de34:	d005      	beq.n	800de42 <HAL_RCC_OscConfig+0x29e>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	69db      	ldr	r3, [r3, #28]
 800de3a:	2b80      	cmp	r3, #128	@ 0x80
 800de3c:	d001      	beq.n	800de42 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800de3e:	2301      	movs	r3, #1
 800de40:	e282      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800de42:	4b81      	ldr	r3, [pc, #516]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6a1b      	ldr	r3, [r3, #32]
 800de4e:	061b      	lsls	r3, r3, #24
 800de50:	497d      	ldr	r1, [pc, #500]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800de52:	4313      	orrs	r3, r2
 800de54:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800de56:	e040      	b.n	800deda <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	69db      	ldr	r3, [r3, #28]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d023      	beq.n	800dea8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800de60:	4b79      	ldr	r3, [pc, #484]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a78      	ldr	r2, [pc, #480]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800de66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de6c:	f7f9 ffd2 	bl	8007e14 <HAL_GetTick>
 800de70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800de72:	e008      	b.n	800de86 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800de74:	f7f9 ffce 	bl	8007e14 <HAL_GetTick>
 800de78:	4602      	mov	r2, r0
 800de7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de7c:	1ad3      	subs	r3, r2, r3
 800de7e:	2b02      	cmp	r3, #2
 800de80:	d901      	bls.n	800de86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800de82:	2303      	movs	r3, #3
 800de84:	e260      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800de86:	4b70      	ldr	r3, [pc, #448]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d0f0      	beq.n	800de74 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800de92:	4b6d      	ldr	r3, [pc, #436]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6a1b      	ldr	r3, [r3, #32]
 800de9e:	061b      	lsls	r3, r3, #24
 800dea0:	4969      	ldr	r1, [pc, #420]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800dea2:	4313      	orrs	r3, r2
 800dea4:	60cb      	str	r3, [r1, #12]
 800dea6:	e018      	b.n	800deda <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800dea8:	4b67      	ldr	r3, [pc, #412]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a66      	ldr	r2, [pc, #408]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800deae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800deb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800deb4:	f7f9 ffae 	bl	8007e14 <HAL_GetTick>
 800deb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800deba:	e008      	b.n	800dece <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800debc:	f7f9 ffaa 	bl	8007e14 <HAL_GetTick>
 800dec0:	4602      	mov	r2, r0
 800dec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec4:	1ad3      	subs	r3, r2, r3
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	d901      	bls.n	800dece <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800deca:	2303      	movs	r3, #3
 800decc:	e23c      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dece:	4b5e      	ldr	r3, [pc, #376]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d1f0      	bne.n	800debc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f003 0308 	and.w	r3, r3, #8
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d036      	beq.n	800df54 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	695b      	ldr	r3, [r3, #20]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d019      	beq.n	800df22 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800deee:	4b56      	ldr	r3, [pc, #344]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800def0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800def2:	4a55      	ldr	r2, [pc, #340]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800def4:	f043 0301 	orr.w	r3, r3, #1
 800def8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800defa:	f7f9 ff8b 	bl	8007e14 <HAL_GetTick>
 800defe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800df00:	e008      	b.n	800df14 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800df02:	f7f9 ff87 	bl	8007e14 <HAL_GetTick>
 800df06:	4602      	mov	r2, r0
 800df08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0a:	1ad3      	subs	r3, r2, r3
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d901      	bls.n	800df14 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800df10:	2303      	movs	r3, #3
 800df12:	e219      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800df14:	4b4c      	ldr	r3, [pc, #304]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800df16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df18:	f003 0302 	and.w	r3, r3, #2
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d0f0      	beq.n	800df02 <HAL_RCC_OscConfig+0x35e>
 800df20:	e018      	b.n	800df54 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800df22:	4b49      	ldr	r3, [pc, #292]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800df24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df26:	4a48      	ldr	r2, [pc, #288]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800df28:	f023 0301 	bic.w	r3, r3, #1
 800df2c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df2e:	f7f9 ff71 	bl	8007e14 <HAL_GetTick>
 800df32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800df34:	e008      	b.n	800df48 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800df36:	f7f9 ff6d 	bl	8007e14 <HAL_GetTick>
 800df3a:	4602      	mov	r2, r0
 800df3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df3e:	1ad3      	subs	r3, r2, r3
 800df40:	2b02      	cmp	r3, #2
 800df42:	d901      	bls.n	800df48 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800df44:	2303      	movs	r3, #3
 800df46:	e1ff      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800df48:	4b3f      	ldr	r3, [pc, #252]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800df4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df4c:	f003 0302 	and.w	r3, r3, #2
 800df50:	2b00      	cmp	r3, #0
 800df52:	d1f0      	bne.n	800df36 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f003 0320 	and.w	r3, r3, #32
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d036      	beq.n	800dfce <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	699b      	ldr	r3, [r3, #24]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d019      	beq.n	800df9c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800df68:	4b37      	ldr	r3, [pc, #220]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a36      	ldr	r2, [pc, #216]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800df6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800df72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800df74:	f7f9 ff4e 	bl	8007e14 <HAL_GetTick>
 800df78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800df7a:	e008      	b.n	800df8e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800df7c:	f7f9 ff4a 	bl	8007e14 <HAL_GetTick>
 800df80:	4602      	mov	r2, r0
 800df82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df84:	1ad3      	subs	r3, r2, r3
 800df86:	2b02      	cmp	r3, #2
 800df88:	d901      	bls.n	800df8e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800df8a:	2303      	movs	r3, #3
 800df8c:	e1dc      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800df8e:	4b2e      	ldr	r3, [pc, #184]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800df96:	2b00      	cmp	r3, #0
 800df98:	d0f0      	beq.n	800df7c <HAL_RCC_OscConfig+0x3d8>
 800df9a:	e018      	b.n	800dfce <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800df9c:	4b2a      	ldr	r3, [pc, #168]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4a29      	ldr	r2, [pc, #164]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800dfa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dfa6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800dfa8:	f7f9 ff34 	bl	8007e14 <HAL_GetTick>
 800dfac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800dfae:	e008      	b.n	800dfc2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dfb0:	f7f9 ff30 	bl	8007e14 <HAL_GetTick>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	2b02      	cmp	r3, #2
 800dfbc:	d901      	bls.n	800dfc2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800dfbe:	2303      	movs	r3, #3
 800dfc0:	e1c2      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800dfc2:	4b21      	ldr	r3, [pc, #132]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d1f0      	bne.n	800dfb0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f003 0304 	and.w	r3, r3, #4
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	f000 8086 	beq.w	800e0e8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800dfdc:	4b1b      	ldr	r3, [pc, #108]	@ (800e04c <HAL_RCC_OscConfig+0x4a8>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4a1a      	ldr	r2, [pc, #104]	@ (800e04c <HAL_RCC_OscConfig+0x4a8>)
 800dfe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dfe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dfe8:	f7f9 ff14 	bl	8007e14 <HAL_GetTick>
 800dfec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dfee:	e008      	b.n	800e002 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dff0:	f7f9 ff10 	bl	8007e14 <HAL_GetTick>
 800dff4:	4602      	mov	r2, r0
 800dff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	2b64      	cmp	r3, #100	@ 0x64
 800dffc:	d901      	bls.n	800e002 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800dffe:	2303      	movs	r3, #3
 800e000:	e1a2      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e002:	4b12      	ldr	r3, [pc, #72]	@ (800e04c <HAL_RCC_OscConfig+0x4a8>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d0f0      	beq.n	800dff0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	2b01      	cmp	r3, #1
 800e014:	d106      	bne.n	800e024 <HAL_RCC_OscConfig+0x480>
 800e016:	4b0c      	ldr	r3, [pc, #48]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800e018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e01a:	4a0b      	ldr	r2, [pc, #44]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800e01c:	f043 0301 	orr.w	r3, r3, #1
 800e020:	6713      	str	r3, [r2, #112]	@ 0x70
 800e022:	e032      	b.n	800e08a <HAL_RCC_OscConfig+0x4e6>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d111      	bne.n	800e050 <HAL_RCC_OscConfig+0x4ac>
 800e02c:	4b06      	ldr	r3, [pc, #24]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800e02e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e030:	4a05      	ldr	r2, [pc, #20]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800e032:	f023 0301 	bic.w	r3, r3, #1
 800e036:	6713      	str	r3, [r2, #112]	@ 0x70
 800e038:	4b03      	ldr	r3, [pc, #12]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800e03a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e03c:	4a02      	ldr	r2, [pc, #8]	@ (800e048 <HAL_RCC_OscConfig+0x4a4>)
 800e03e:	f023 0304 	bic.w	r3, r3, #4
 800e042:	6713      	str	r3, [r2, #112]	@ 0x70
 800e044:	e021      	b.n	800e08a <HAL_RCC_OscConfig+0x4e6>
 800e046:	bf00      	nop
 800e048:	58024400 	.word	0x58024400
 800e04c:	58024800 	.word	0x58024800
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	2b05      	cmp	r3, #5
 800e056:	d10c      	bne.n	800e072 <HAL_RCC_OscConfig+0x4ce>
 800e058:	4b83      	ldr	r3, [pc, #524]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e05a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e05c:	4a82      	ldr	r2, [pc, #520]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e05e:	f043 0304 	orr.w	r3, r3, #4
 800e062:	6713      	str	r3, [r2, #112]	@ 0x70
 800e064:	4b80      	ldr	r3, [pc, #512]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e068:	4a7f      	ldr	r2, [pc, #508]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e06a:	f043 0301 	orr.w	r3, r3, #1
 800e06e:	6713      	str	r3, [r2, #112]	@ 0x70
 800e070:	e00b      	b.n	800e08a <HAL_RCC_OscConfig+0x4e6>
 800e072:	4b7d      	ldr	r3, [pc, #500]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e076:	4a7c      	ldr	r2, [pc, #496]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e078:	f023 0301 	bic.w	r3, r3, #1
 800e07c:	6713      	str	r3, [r2, #112]	@ 0x70
 800e07e:	4b7a      	ldr	r3, [pc, #488]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e082:	4a79      	ldr	r2, [pc, #484]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e084:	f023 0304 	bic.w	r3, r3, #4
 800e088:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	689b      	ldr	r3, [r3, #8]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d015      	beq.n	800e0be <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e092:	f7f9 febf 	bl	8007e14 <HAL_GetTick>
 800e096:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e098:	e00a      	b.n	800e0b0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e09a:	f7f9 febb 	bl	8007e14 <HAL_GetTick>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a2:	1ad3      	subs	r3, r2, r3
 800e0a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d901      	bls.n	800e0b0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800e0ac:	2303      	movs	r3, #3
 800e0ae:	e14b      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e0b0:	4b6d      	ldr	r3, [pc, #436]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e0b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0b4:	f003 0302 	and.w	r3, r3, #2
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d0ee      	beq.n	800e09a <HAL_RCC_OscConfig+0x4f6>
 800e0bc:	e014      	b.n	800e0e8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e0be:	f7f9 fea9 	bl	8007e14 <HAL_GetTick>
 800e0c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e0c4:	e00a      	b.n	800e0dc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e0c6:	f7f9 fea5 	bl	8007e14 <HAL_GetTick>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ce:	1ad3      	subs	r3, r2, r3
 800e0d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d901      	bls.n	800e0dc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800e0d8:	2303      	movs	r3, #3
 800e0da:	e135      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e0dc:	4b62      	ldr	r3, [pc, #392]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e0de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0e0:	f003 0302 	and.w	r3, r3, #2
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d1ee      	bne.n	800e0c6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	f000 812a 	beq.w	800e346 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e0f2:	4b5d      	ldr	r3, [pc, #372]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e0f4:	691b      	ldr	r3, [r3, #16]
 800e0f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e0fa:	2b18      	cmp	r3, #24
 800e0fc:	f000 80ba 	beq.w	800e274 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e104:	2b02      	cmp	r3, #2
 800e106:	f040 8095 	bne.w	800e234 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e10a:	4b57      	ldr	r3, [pc, #348]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4a56      	ldr	r2, [pc, #344]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e110:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e116:	f7f9 fe7d 	bl	8007e14 <HAL_GetTick>
 800e11a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e11c:	e008      	b.n	800e130 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e11e:	f7f9 fe79 	bl	8007e14 <HAL_GetTick>
 800e122:	4602      	mov	r2, r0
 800e124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e126:	1ad3      	subs	r3, r2, r3
 800e128:	2b02      	cmp	r3, #2
 800e12a:	d901      	bls.n	800e130 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800e12c:	2303      	movs	r3, #3
 800e12e:	e10b      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e130:	4b4d      	ldr	r3, [pc, #308]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d1f0      	bne.n	800e11e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e13c:	4b4a      	ldr	r3, [pc, #296]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e13e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e140:	4b4a      	ldr	r3, [pc, #296]	@ (800e26c <HAL_RCC_OscConfig+0x6c8>)
 800e142:	4013      	ands	r3, r2
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e14c:	0112      	lsls	r2, r2, #4
 800e14e:	430a      	orrs	r2, r1
 800e150:	4945      	ldr	r1, [pc, #276]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e152:	4313      	orrs	r3, r2
 800e154:	628b      	str	r3, [r1, #40]	@ 0x28
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e15a:	3b01      	subs	r3, #1
 800e15c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e164:	3b01      	subs	r3, #1
 800e166:	025b      	lsls	r3, r3, #9
 800e168:	b29b      	uxth	r3, r3
 800e16a:	431a      	orrs	r2, r3
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e170:	3b01      	subs	r3, #1
 800e172:	041b      	lsls	r3, r3, #16
 800e174:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e178:	431a      	orrs	r2, r3
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e17e:	3b01      	subs	r3, #1
 800e180:	061b      	lsls	r3, r3, #24
 800e182:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e186:	4938      	ldr	r1, [pc, #224]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e188:	4313      	orrs	r3, r2
 800e18a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e18c:	4b36      	ldr	r3, [pc, #216]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e18e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e190:	4a35      	ldr	r2, [pc, #212]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e192:	f023 0301 	bic.w	r3, r3, #1
 800e196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e198:	4b33      	ldr	r3, [pc, #204]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e19a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e19c:	4b34      	ldr	r3, [pc, #208]	@ (800e270 <HAL_RCC_OscConfig+0x6cc>)
 800e19e:	4013      	ands	r3, r2
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e1a4:	00d2      	lsls	r2, r2, #3
 800e1a6:	4930      	ldr	r1, [pc, #192]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e1ac:	4b2e      	ldr	r3, [pc, #184]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b0:	f023 020c 	bic.w	r2, r3, #12
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1b8:	492b      	ldr	r1, [pc, #172]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e1be:	4b2a      	ldr	r3, [pc, #168]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c2:	f023 0202 	bic.w	r2, r3, #2
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1ca:	4927      	ldr	r1, [pc, #156]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e1d0:	4b25      	ldr	r3, [pc, #148]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1d4:	4a24      	ldr	r2, [pc, #144]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e1d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e1da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1dc:	4b22      	ldr	r3, [pc, #136]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e0:	4a21      	ldr	r2, [pc, #132]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e1e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e1e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e1e8:	4b1f      	ldr	r3, [pc, #124]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ec:	4a1e      	ldr	r2, [pc, #120]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e1ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e1f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e1f4:	4b1c      	ldr	r3, [pc, #112]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1f8:	4a1b      	ldr	r2, [pc, #108]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e1fa:	f043 0301 	orr.w	r3, r3, #1
 800e1fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e200:	4b19      	ldr	r3, [pc, #100]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4a18      	ldr	r2, [pc, #96]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e20a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e20c:	f7f9 fe02 	bl	8007e14 <HAL_GetTick>
 800e210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e212:	e008      	b.n	800e226 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e214:	f7f9 fdfe 	bl	8007e14 <HAL_GetTick>
 800e218:	4602      	mov	r2, r0
 800e21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21c:	1ad3      	subs	r3, r2, r3
 800e21e:	2b02      	cmp	r3, #2
 800e220:	d901      	bls.n	800e226 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800e222:	2303      	movs	r3, #3
 800e224:	e090      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e226:	4b10      	ldr	r3, [pc, #64]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d0f0      	beq.n	800e214 <HAL_RCC_OscConfig+0x670>
 800e232:	e088      	b.n	800e346 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e234:	4b0c      	ldr	r3, [pc, #48]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4a0b      	ldr	r2, [pc, #44]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e23a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e23e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e240:	f7f9 fde8 	bl	8007e14 <HAL_GetTick>
 800e244:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e246:	e008      	b.n	800e25a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e248:	f7f9 fde4 	bl	8007e14 <HAL_GetTick>
 800e24c:	4602      	mov	r2, r0
 800e24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e250:	1ad3      	subs	r3, r2, r3
 800e252:	2b02      	cmp	r3, #2
 800e254:	d901      	bls.n	800e25a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800e256:	2303      	movs	r3, #3
 800e258:	e076      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e25a:	4b03      	ldr	r3, [pc, #12]	@ (800e268 <HAL_RCC_OscConfig+0x6c4>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1f0      	bne.n	800e248 <HAL_RCC_OscConfig+0x6a4>
 800e266:	e06e      	b.n	800e346 <HAL_RCC_OscConfig+0x7a2>
 800e268:	58024400 	.word	0x58024400
 800e26c:	fffffc0c 	.word	0xfffffc0c
 800e270:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e274:	4b36      	ldr	r3, [pc, #216]	@ (800e350 <HAL_RCC_OscConfig+0x7ac>)
 800e276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e278:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e27a:	4b35      	ldr	r3, [pc, #212]	@ (800e350 <HAL_RCC_OscConfig+0x7ac>)
 800e27c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e27e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e284:	2b01      	cmp	r3, #1
 800e286:	d031      	beq.n	800e2ec <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	f003 0203 	and.w	r2, r3, #3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e292:	429a      	cmp	r2, r3
 800e294:	d12a      	bne.n	800e2ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	091b      	lsrs	r3, r3, #4
 800e29a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d122      	bne.n	800e2ec <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d11a      	bne.n	800e2ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	0a5b      	lsrs	r3, r3, #9
 800e2ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d111      	bne.n	800e2ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	0c1b      	lsrs	r3, r3, #16
 800e2cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d108      	bne.n	800e2ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	0e1b      	lsrs	r3, r3, #24
 800e2de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d001      	beq.n	800e2f0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e02b      	b.n	800e348 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e2f0:	4b17      	ldr	r3, [pc, #92]	@ (800e350 <HAL_RCC_OscConfig+0x7ac>)
 800e2f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2f4:	08db      	lsrs	r3, r3, #3
 800e2f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e2fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e300:	693a      	ldr	r2, [r7, #16]
 800e302:	429a      	cmp	r2, r3
 800e304:	d01f      	beq.n	800e346 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e306:	4b12      	ldr	r3, [pc, #72]	@ (800e350 <HAL_RCC_OscConfig+0x7ac>)
 800e308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e30a:	4a11      	ldr	r2, [pc, #68]	@ (800e350 <HAL_RCC_OscConfig+0x7ac>)
 800e30c:	f023 0301 	bic.w	r3, r3, #1
 800e310:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e312:	f7f9 fd7f 	bl	8007e14 <HAL_GetTick>
 800e316:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e318:	bf00      	nop
 800e31a:	f7f9 fd7b 	bl	8007e14 <HAL_GetTick>
 800e31e:	4602      	mov	r2, r0
 800e320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e322:	4293      	cmp	r3, r2
 800e324:	d0f9      	beq.n	800e31a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e326:	4b0a      	ldr	r3, [pc, #40]	@ (800e350 <HAL_RCC_OscConfig+0x7ac>)
 800e328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e32a:	4b0a      	ldr	r3, [pc, #40]	@ (800e354 <HAL_RCC_OscConfig+0x7b0>)
 800e32c:	4013      	ands	r3, r2
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e332:	00d2      	lsls	r2, r2, #3
 800e334:	4906      	ldr	r1, [pc, #24]	@ (800e350 <HAL_RCC_OscConfig+0x7ac>)
 800e336:	4313      	orrs	r3, r2
 800e338:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e33a:	4b05      	ldr	r3, [pc, #20]	@ (800e350 <HAL_RCC_OscConfig+0x7ac>)
 800e33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e33e:	4a04      	ldr	r2, [pc, #16]	@ (800e350 <HAL_RCC_OscConfig+0x7ac>)
 800e340:	f043 0301 	orr.w	r3, r3, #1
 800e344:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e346:	2300      	movs	r3, #0
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3730      	adds	r7, #48	@ 0x30
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	58024400 	.word	0x58024400
 800e354:	ffff0007 	.word	0xffff0007

0800e358 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b086      	sub	sp, #24
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d101      	bne.n	800e36c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e368:	2301      	movs	r3, #1
 800e36a:	e19c      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e36c:	4b8a      	ldr	r3, [pc, #552]	@ (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f003 030f 	and.w	r3, r3, #15
 800e374:	683a      	ldr	r2, [r7, #0]
 800e376:	429a      	cmp	r2, r3
 800e378:	d910      	bls.n	800e39c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e37a:	4b87      	ldr	r3, [pc, #540]	@ (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f023 020f 	bic.w	r2, r3, #15
 800e382:	4985      	ldr	r1, [pc, #532]	@ (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	4313      	orrs	r3, r2
 800e388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e38a:	4b83      	ldr	r3, [pc, #524]	@ (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f003 030f 	and.w	r3, r3, #15
 800e392:	683a      	ldr	r2, [r7, #0]
 800e394:	429a      	cmp	r2, r3
 800e396:	d001      	beq.n	800e39c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e398:	2301      	movs	r3, #1
 800e39a:	e184      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f003 0304 	and.w	r3, r3, #4
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d010      	beq.n	800e3ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	691a      	ldr	r2, [r3, #16]
 800e3ac:	4b7b      	ldr	r3, [pc, #492]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e3ae:	699b      	ldr	r3, [r3, #24]
 800e3b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d908      	bls.n	800e3ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e3b8:	4b78      	ldr	r3, [pc, #480]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e3ba:	699b      	ldr	r3, [r3, #24]
 800e3bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	691b      	ldr	r3, [r3, #16]
 800e3c4:	4975      	ldr	r1, [pc, #468]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f003 0308 	and.w	r3, r3, #8
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d010      	beq.n	800e3f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	695a      	ldr	r2, [r3, #20]
 800e3da:	4b70      	ldr	r3, [pc, #448]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e3dc:	69db      	ldr	r3, [r3, #28]
 800e3de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d908      	bls.n	800e3f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e3e6:	4b6d      	ldr	r3, [pc, #436]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e3e8:	69db      	ldr	r3, [r3, #28]
 800e3ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	695b      	ldr	r3, [r3, #20]
 800e3f2:	496a      	ldr	r1, [pc, #424]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e3f4:	4313      	orrs	r3, r2
 800e3f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f003 0310 	and.w	r3, r3, #16
 800e400:	2b00      	cmp	r3, #0
 800e402:	d010      	beq.n	800e426 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	699a      	ldr	r2, [r3, #24]
 800e408:	4b64      	ldr	r3, [pc, #400]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e40a:	69db      	ldr	r3, [r3, #28]
 800e40c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e410:	429a      	cmp	r2, r3
 800e412:	d908      	bls.n	800e426 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e414:	4b61      	ldr	r3, [pc, #388]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e416:	69db      	ldr	r3, [r3, #28]
 800e418:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	699b      	ldr	r3, [r3, #24]
 800e420:	495e      	ldr	r1, [pc, #376]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e422:	4313      	orrs	r3, r2
 800e424:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f003 0320 	and.w	r3, r3, #32
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d010      	beq.n	800e454 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	69da      	ldr	r2, [r3, #28]
 800e436:	4b59      	ldr	r3, [pc, #356]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e438:	6a1b      	ldr	r3, [r3, #32]
 800e43a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e43e:	429a      	cmp	r2, r3
 800e440:	d908      	bls.n	800e454 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e442:	4b56      	ldr	r3, [pc, #344]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e444:	6a1b      	ldr	r3, [r3, #32]
 800e446:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	69db      	ldr	r3, [r3, #28]
 800e44e:	4953      	ldr	r1, [pc, #332]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e450:	4313      	orrs	r3, r2
 800e452:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f003 0302 	and.w	r3, r3, #2
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d010      	beq.n	800e482 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	68da      	ldr	r2, [r3, #12]
 800e464:	4b4d      	ldr	r3, [pc, #308]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e466:	699b      	ldr	r3, [r3, #24]
 800e468:	f003 030f 	and.w	r3, r3, #15
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d908      	bls.n	800e482 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e470:	4b4a      	ldr	r3, [pc, #296]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e472:	699b      	ldr	r3, [r3, #24]
 800e474:	f023 020f 	bic.w	r2, r3, #15
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	4947      	ldr	r1, [pc, #284]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e47e:	4313      	orrs	r3, r2
 800e480:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f003 0301 	and.w	r3, r3, #1
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d055      	beq.n	800e53a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e48e:	4b43      	ldr	r3, [pc, #268]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e490:	699b      	ldr	r3, [r3, #24]
 800e492:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	4940      	ldr	r1, [pc, #256]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e49c:	4313      	orrs	r3, r2
 800e49e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	2b02      	cmp	r3, #2
 800e4a6:	d107      	bne.n	800e4b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e4a8:	4b3c      	ldr	r3, [pc, #240]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d121      	bne.n	800e4f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	e0f6      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	2b03      	cmp	r3, #3
 800e4be:	d107      	bne.n	800e4d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e4c0:	4b36      	ldr	r3, [pc, #216]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d115      	bne.n	800e4f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	e0ea      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d107      	bne.n	800e4e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e4d8:	4b30      	ldr	r3, [pc, #192]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d109      	bne.n	800e4f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e0de      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e4e8:	4b2c      	ldr	r3, [pc, #176]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f003 0304 	and.w	r3, r3, #4
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d101      	bne.n	800e4f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	e0d6      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e4f8:	4b28      	ldr	r3, [pc, #160]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e4fa:	691b      	ldr	r3, [r3, #16]
 800e4fc:	f023 0207 	bic.w	r2, r3, #7
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	4925      	ldr	r1, [pc, #148]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e506:	4313      	orrs	r3, r2
 800e508:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e50a:	f7f9 fc83 	bl	8007e14 <HAL_GetTick>
 800e50e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e510:	e00a      	b.n	800e528 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e512:	f7f9 fc7f 	bl	8007e14 <HAL_GetTick>
 800e516:	4602      	mov	r2, r0
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	1ad3      	subs	r3, r2, r3
 800e51c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e520:	4293      	cmp	r3, r2
 800e522:	d901      	bls.n	800e528 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e524:	2303      	movs	r3, #3
 800e526:	e0be      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e528:	4b1c      	ldr	r3, [pc, #112]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e52a:	691b      	ldr	r3, [r3, #16]
 800e52c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	00db      	lsls	r3, r3, #3
 800e536:	429a      	cmp	r2, r3
 800e538:	d1eb      	bne.n	800e512 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f003 0302 	and.w	r3, r3, #2
 800e542:	2b00      	cmp	r3, #0
 800e544:	d010      	beq.n	800e568 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	68da      	ldr	r2, [r3, #12]
 800e54a:	4b14      	ldr	r3, [pc, #80]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e54c:	699b      	ldr	r3, [r3, #24]
 800e54e:	f003 030f 	and.w	r3, r3, #15
 800e552:	429a      	cmp	r2, r3
 800e554:	d208      	bcs.n	800e568 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e556:	4b11      	ldr	r3, [pc, #68]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e558:	699b      	ldr	r3, [r3, #24]
 800e55a:	f023 020f 	bic.w	r2, r3, #15
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	490e      	ldr	r1, [pc, #56]	@ (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e564:	4313      	orrs	r3, r2
 800e566:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e568:	4b0b      	ldr	r3, [pc, #44]	@ (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f003 030f 	and.w	r3, r3, #15
 800e570:	683a      	ldr	r2, [r7, #0]
 800e572:	429a      	cmp	r2, r3
 800e574:	d214      	bcs.n	800e5a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e576:	4b08      	ldr	r3, [pc, #32]	@ (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f023 020f 	bic.w	r2, r3, #15
 800e57e:	4906      	ldr	r1, [pc, #24]	@ (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	4313      	orrs	r3, r2
 800e584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e586:	4b04      	ldr	r3, [pc, #16]	@ (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f003 030f 	and.w	r3, r3, #15
 800e58e:	683a      	ldr	r2, [r7, #0]
 800e590:	429a      	cmp	r2, r3
 800e592:	d005      	beq.n	800e5a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e594:	2301      	movs	r3, #1
 800e596:	e086      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>
 800e598:	52002000 	.word	0x52002000
 800e59c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f003 0304 	and.w	r3, r3, #4
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d010      	beq.n	800e5ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	691a      	ldr	r2, [r3, #16]
 800e5b0:	4b3f      	ldr	r3, [pc, #252]	@ (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e5b2:	699b      	ldr	r3, [r3, #24]
 800e5b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d208      	bcs.n	800e5ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e5bc:	4b3c      	ldr	r3, [pc, #240]	@ (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e5be:	699b      	ldr	r3, [r3, #24]
 800e5c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	691b      	ldr	r3, [r3, #16]
 800e5c8:	4939      	ldr	r1, [pc, #228]	@ (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f003 0308 	and.w	r3, r3, #8
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d010      	beq.n	800e5fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	695a      	ldr	r2, [r3, #20]
 800e5de:	4b34      	ldr	r3, [pc, #208]	@ (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e5e0:	69db      	ldr	r3, [r3, #28]
 800e5e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	d208      	bcs.n	800e5fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e5ea:	4b31      	ldr	r3, [pc, #196]	@ (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e5ec:	69db      	ldr	r3, [r3, #28]
 800e5ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	695b      	ldr	r3, [r3, #20]
 800e5f6:	492e      	ldr	r1, [pc, #184]	@ (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f003 0310 	and.w	r3, r3, #16
 800e604:	2b00      	cmp	r3, #0
 800e606:	d010      	beq.n	800e62a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	699a      	ldr	r2, [r3, #24]
 800e60c:	4b28      	ldr	r3, [pc, #160]	@ (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e60e:	69db      	ldr	r3, [r3, #28]
 800e610:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e614:	429a      	cmp	r2, r3
 800e616:	d208      	bcs.n	800e62a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e618:	4b25      	ldr	r3, [pc, #148]	@ (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e61a:	69db      	ldr	r3, [r3, #28]
 800e61c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	699b      	ldr	r3, [r3, #24]
 800e624:	4922      	ldr	r1, [pc, #136]	@ (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e626:	4313      	orrs	r3, r2
 800e628:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f003 0320 	and.w	r3, r3, #32
 800e632:	2b00      	cmp	r3, #0
 800e634:	d010      	beq.n	800e658 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	69da      	ldr	r2, [r3, #28]
 800e63a:	4b1d      	ldr	r3, [pc, #116]	@ (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e63c:	6a1b      	ldr	r3, [r3, #32]
 800e63e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e642:	429a      	cmp	r2, r3
 800e644:	d208      	bcs.n	800e658 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e646:	4b1a      	ldr	r3, [pc, #104]	@ (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e648:	6a1b      	ldr	r3, [r3, #32]
 800e64a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	69db      	ldr	r3, [r3, #28]
 800e652:	4917      	ldr	r1, [pc, #92]	@ (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e654:	4313      	orrs	r3, r2
 800e656:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e658:	f000 f834 	bl	800e6c4 <HAL_RCC_GetSysClockFreq>
 800e65c:	4602      	mov	r2, r0
 800e65e:	4b14      	ldr	r3, [pc, #80]	@ (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e660:	699b      	ldr	r3, [r3, #24]
 800e662:	0a1b      	lsrs	r3, r3, #8
 800e664:	f003 030f 	and.w	r3, r3, #15
 800e668:	4912      	ldr	r1, [pc, #72]	@ (800e6b4 <HAL_RCC_ClockConfig+0x35c>)
 800e66a:	5ccb      	ldrb	r3, [r1, r3]
 800e66c:	f003 031f 	and.w	r3, r3, #31
 800e670:	fa22 f303 	lsr.w	r3, r2, r3
 800e674:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e676:	4b0e      	ldr	r3, [pc, #56]	@ (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e678:	699b      	ldr	r3, [r3, #24]
 800e67a:	f003 030f 	and.w	r3, r3, #15
 800e67e:	4a0d      	ldr	r2, [pc, #52]	@ (800e6b4 <HAL_RCC_ClockConfig+0x35c>)
 800e680:	5cd3      	ldrb	r3, [r2, r3]
 800e682:	f003 031f 	and.w	r3, r3, #31
 800e686:	693a      	ldr	r2, [r7, #16]
 800e688:	fa22 f303 	lsr.w	r3, r2, r3
 800e68c:	4a0a      	ldr	r2, [pc, #40]	@ (800e6b8 <HAL_RCC_ClockConfig+0x360>)
 800e68e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e690:	4a0a      	ldr	r2, [pc, #40]	@ (800e6bc <HAL_RCC_ClockConfig+0x364>)
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e696:	4b0a      	ldr	r3, [pc, #40]	@ (800e6c0 <HAL_RCC_ClockConfig+0x368>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7f9 fb70 	bl	8007d80 <HAL_InitTick>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3718      	adds	r7, #24
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	58024400 	.word	0x58024400
 800e6b4:	0801e474 	.word	0x0801e474
 800e6b8:	24000004 	.word	0x24000004
 800e6bc:	24000000 	.word	0x24000000
 800e6c0:	24000038 	.word	0x24000038

0800e6c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b089      	sub	sp, #36	@ 0x24
 800e6c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e6ca:	4bb3      	ldr	r3, [pc, #716]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6cc:	691b      	ldr	r3, [r3, #16]
 800e6ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e6d2:	2b18      	cmp	r3, #24
 800e6d4:	f200 8155 	bhi.w	800e982 <HAL_RCC_GetSysClockFreq+0x2be>
 800e6d8:	a201      	add	r2, pc, #4	@ (adr r2, 800e6e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6de:	bf00      	nop
 800e6e0:	0800e745 	.word	0x0800e745
 800e6e4:	0800e983 	.word	0x0800e983
 800e6e8:	0800e983 	.word	0x0800e983
 800e6ec:	0800e983 	.word	0x0800e983
 800e6f0:	0800e983 	.word	0x0800e983
 800e6f4:	0800e983 	.word	0x0800e983
 800e6f8:	0800e983 	.word	0x0800e983
 800e6fc:	0800e983 	.word	0x0800e983
 800e700:	0800e76b 	.word	0x0800e76b
 800e704:	0800e983 	.word	0x0800e983
 800e708:	0800e983 	.word	0x0800e983
 800e70c:	0800e983 	.word	0x0800e983
 800e710:	0800e983 	.word	0x0800e983
 800e714:	0800e983 	.word	0x0800e983
 800e718:	0800e983 	.word	0x0800e983
 800e71c:	0800e983 	.word	0x0800e983
 800e720:	0800e771 	.word	0x0800e771
 800e724:	0800e983 	.word	0x0800e983
 800e728:	0800e983 	.word	0x0800e983
 800e72c:	0800e983 	.word	0x0800e983
 800e730:	0800e983 	.word	0x0800e983
 800e734:	0800e983 	.word	0x0800e983
 800e738:	0800e983 	.word	0x0800e983
 800e73c:	0800e983 	.word	0x0800e983
 800e740:	0800e777 	.word	0x0800e777
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e744:	4b94      	ldr	r3, [pc, #592]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f003 0320 	and.w	r3, r3, #32
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d009      	beq.n	800e764 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e750:	4b91      	ldr	r3, [pc, #580]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	08db      	lsrs	r3, r3, #3
 800e756:	f003 0303 	and.w	r3, r3, #3
 800e75a:	4a90      	ldr	r2, [pc, #576]	@ (800e99c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e75c:	fa22 f303 	lsr.w	r3, r2, r3
 800e760:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e762:	e111      	b.n	800e988 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e764:	4b8d      	ldr	r3, [pc, #564]	@ (800e99c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e766:	61bb      	str	r3, [r7, #24]
      break;
 800e768:	e10e      	b.n	800e988 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e76a:	4b8d      	ldr	r3, [pc, #564]	@ (800e9a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e76c:	61bb      	str	r3, [r7, #24]
      break;
 800e76e:	e10b      	b.n	800e988 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e770:	4b8c      	ldr	r3, [pc, #560]	@ (800e9a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e772:	61bb      	str	r3, [r7, #24]
      break;
 800e774:	e108      	b.n	800e988 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e776:	4b88      	ldr	r3, [pc, #544]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e77a:	f003 0303 	and.w	r3, r3, #3
 800e77e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e780:	4b85      	ldr	r3, [pc, #532]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e784:	091b      	lsrs	r3, r3, #4
 800e786:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e78a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e78c:	4b82      	ldr	r3, [pc, #520]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e790:	f003 0301 	and.w	r3, r3, #1
 800e794:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e796:	4b80      	ldr	r3, [pc, #512]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e79a:	08db      	lsrs	r3, r3, #3
 800e79c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	fb02 f303 	mul.w	r3, r2, r3
 800e7a6:	ee07 3a90 	vmov	s15, r3
 800e7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f000 80e1 	beq.w	800e97c <HAL_RCC_GetSysClockFreq+0x2b8>
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	2b02      	cmp	r3, #2
 800e7be:	f000 8083 	beq.w	800e8c8 <HAL_RCC_GetSysClockFreq+0x204>
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	2b02      	cmp	r3, #2
 800e7c6:	f200 80a1 	bhi.w	800e90c <HAL_RCC_GetSysClockFreq+0x248>
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d003      	beq.n	800e7d8 <HAL_RCC_GetSysClockFreq+0x114>
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d056      	beq.n	800e884 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e7d6:	e099      	b.n	800e90c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e7d8:	4b6f      	ldr	r3, [pc, #444]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f003 0320 	and.w	r3, r3, #32
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d02d      	beq.n	800e840 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e7e4:	4b6c      	ldr	r3, [pc, #432]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	08db      	lsrs	r3, r3, #3
 800e7ea:	f003 0303 	and.w	r3, r3, #3
 800e7ee:	4a6b      	ldr	r2, [pc, #428]	@ (800e99c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e7f0:	fa22 f303 	lsr.w	r3, r2, r3
 800e7f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	ee07 3a90 	vmov	s15, r3
 800e7fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	ee07 3a90 	vmov	s15, r3
 800e806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e80a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e80e:	4b62      	ldr	r3, [pc, #392]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e816:	ee07 3a90 	vmov	s15, r3
 800e81a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e81e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e822:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e9a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e82a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e82e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e83a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e83e:	e087      	b.n	800e950 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	ee07 3a90 	vmov	s15, r3
 800e846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e84a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e9ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800e84e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e852:	4b51      	ldr	r3, [pc, #324]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e85a:	ee07 3a90 	vmov	s15, r3
 800e85e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e862:	ed97 6a02 	vldr	s12, [r7, #8]
 800e866:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e9a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e86a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e86e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e87a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e87e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e882:	e065      	b.n	800e950 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	ee07 3a90 	vmov	s15, r3
 800e88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e88e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e9b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e896:	4b40      	ldr	r3, [pc, #256]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e89e:	ee07 3a90 	vmov	s15, r3
 800e8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e9a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e8ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e8c6:	e043      	b.n	800e950 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	ee07 3a90 	vmov	s15, r3
 800e8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e9b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800e8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8da:	4b2f      	ldr	r3, [pc, #188]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e8dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8e2:	ee07 3a90 	vmov	s15, r3
 800e8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e9a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e90a:	e021      	b.n	800e950 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	ee07 3a90 	vmov	s15, r3
 800e912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e916:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e9b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e91e:	4b1e      	ldr	r3, [pc, #120]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e926:	ee07 3a90 	vmov	s15, r3
 800e92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e92e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e932:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e9a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e93a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e93e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e94a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e94e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e950:	4b11      	ldr	r3, [pc, #68]	@ (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e954:	0a5b      	lsrs	r3, r3, #9
 800e956:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e95a:	3301      	adds	r3, #1
 800e95c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	ee07 3a90 	vmov	s15, r3
 800e964:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e968:	edd7 6a07 	vldr	s13, [r7, #28]
 800e96c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e974:	ee17 3a90 	vmov	r3, s15
 800e978:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e97a:	e005      	b.n	800e988 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e97c:	2300      	movs	r3, #0
 800e97e:	61bb      	str	r3, [r7, #24]
      break;
 800e980:	e002      	b.n	800e988 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e982:	4b07      	ldr	r3, [pc, #28]	@ (800e9a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e984:	61bb      	str	r3, [r7, #24]
      break;
 800e986:	bf00      	nop
  }

  return sysclockfreq;
 800e988:	69bb      	ldr	r3, [r7, #24]
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3724      	adds	r7, #36	@ 0x24
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr
 800e996:	bf00      	nop
 800e998:	58024400 	.word	0x58024400
 800e99c:	03d09000 	.word	0x03d09000
 800e9a0:	003d0900 	.word	0x003d0900
 800e9a4:	016e3600 	.word	0x016e3600
 800e9a8:	46000000 	.word	0x46000000
 800e9ac:	4c742400 	.word	0x4c742400
 800e9b0:	4a742400 	.word	0x4a742400
 800e9b4:	4bb71b00 	.word	0x4bb71b00

0800e9b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e9be:	f7ff fe81 	bl	800e6c4 <HAL_RCC_GetSysClockFreq>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	4b10      	ldr	r3, [pc, #64]	@ (800ea08 <HAL_RCC_GetHCLKFreq+0x50>)
 800e9c6:	699b      	ldr	r3, [r3, #24]
 800e9c8:	0a1b      	lsrs	r3, r3, #8
 800e9ca:	f003 030f 	and.w	r3, r3, #15
 800e9ce:	490f      	ldr	r1, [pc, #60]	@ (800ea0c <HAL_RCC_GetHCLKFreq+0x54>)
 800e9d0:	5ccb      	ldrb	r3, [r1, r3]
 800e9d2:	f003 031f 	and.w	r3, r3, #31
 800e9d6:	fa22 f303 	lsr.w	r3, r2, r3
 800e9da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800ea08 <HAL_RCC_GetHCLKFreq+0x50>)
 800e9de:	699b      	ldr	r3, [r3, #24]
 800e9e0:	f003 030f 	and.w	r3, r3, #15
 800e9e4:	4a09      	ldr	r2, [pc, #36]	@ (800ea0c <HAL_RCC_GetHCLKFreq+0x54>)
 800e9e6:	5cd3      	ldrb	r3, [r2, r3]
 800e9e8:	f003 031f 	and.w	r3, r3, #31
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800e9f2:	4a07      	ldr	r2, [pc, #28]	@ (800ea10 <HAL_RCC_GetHCLKFreq+0x58>)
 800e9f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e9f6:	4a07      	ldr	r2, [pc, #28]	@ (800ea14 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e9fc:	4b04      	ldr	r3, [pc, #16]	@ (800ea10 <HAL_RCC_GetHCLKFreq+0x58>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3708      	adds	r7, #8
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}
 800ea08:	58024400 	.word	0x58024400
 800ea0c:	0801e474 	.word	0x0801e474
 800ea10:	24000004 	.word	0x24000004
 800ea14:	24000000 	.word	0x24000000

0800ea18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ea1c:	f7ff ffcc 	bl	800e9b8 <HAL_RCC_GetHCLKFreq>
 800ea20:	4602      	mov	r2, r0
 800ea22:	4b06      	ldr	r3, [pc, #24]	@ (800ea3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ea24:	69db      	ldr	r3, [r3, #28]
 800ea26:	091b      	lsrs	r3, r3, #4
 800ea28:	f003 0307 	and.w	r3, r3, #7
 800ea2c:	4904      	ldr	r1, [pc, #16]	@ (800ea40 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ea2e:	5ccb      	ldrb	r3, [r1, r3]
 800ea30:	f003 031f 	and.w	r3, r3, #31
 800ea34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	58024400 	.word	0x58024400
 800ea40:	0801e474 	.word	0x0801e474

0800ea44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ea48:	f7ff ffb6 	bl	800e9b8 <HAL_RCC_GetHCLKFreq>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	4b06      	ldr	r3, [pc, #24]	@ (800ea68 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ea50:	69db      	ldr	r3, [r3, #28]
 800ea52:	0a1b      	lsrs	r3, r3, #8
 800ea54:	f003 0307 	and.w	r3, r3, #7
 800ea58:	4904      	ldr	r1, [pc, #16]	@ (800ea6c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ea5a:	5ccb      	ldrb	r3, [r1, r3]
 800ea5c:	f003 031f 	and.w	r3, r3, #31
 800ea60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	58024400 	.word	0x58024400
 800ea6c:	0801e474 	.word	0x0801e474

0800ea70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ea70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ea74:	b0c6      	sub	sp, #280	@ 0x118
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ea82:	2300      	movs	r3, #0
 800ea84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ea88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea90:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800ea94:	2500      	movs	r5, #0
 800ea96:	ea54 0305 	orrs.w	r3, r4, r5
 800ea9a:	d049      	beq.n	800eb30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ea9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eaa2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800eaa6:	d02f      	beq.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800eaa8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800eaac:	d828      	bhi.n	800eb00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800eaae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eab2:	d01a      	beq.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800eab4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eab8:	d822      	bhi.n	800eb00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d003      	beq.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800eabe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eac2:	d007      	beq.n	800ead4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800eac4:	e01c      	b.n	800eb00 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eac6:	4bab      	ldr	r3, [pc, #684]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800eac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaca:	4aaa      	ldr	r2, [pc, #680]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800eacc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ead0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ead2:	e01a      	b.n	800eb0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ead4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ead8:	3308      	adds	r3, #8
 800eada:	2102      	movs	r1, #2
 800eadc:	4618      	mov	r0, r3
 800eade:	f002 fa49 	bl	8010f74 <RCCEx_PLL2_Config>
 800eae2:	4603      	mov	r3, r0
 800eae4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800eae8:	e00f      	b.n	800eb0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eaea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaee:	3328      	adds	r3, #40	@ 0x28
 800eaf0:	2102      	movs	r1, #2
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f002 faf0 	bl	80110d8 <RCCEx_PLL3_Config>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800eafe:	e004      	b.n	800eb0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb00:	2301      	movs	r3, #1
 800eb02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eb06:	e000      	b.n	800eb0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800eb08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d10a      	bne.n	800eb28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800eb12:	4b98      	ldr	r3, [pc, #608]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800eb14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800eb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eb20:	4a94      	ldr	r2, [pc, #592]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800eb22:	430b      	orrs	r3, r1
 800eb24:	6513      	str	r3, [r2, #80]	@ 0x50
 800eb26:	e003      	b.n	800eb30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800eb30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb38:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800eb3c:	f04f 0900 	mov.w	r9, #0
 800eb40:	ea58 0309 	orrs.w	r3, r8, r9
 800eb44:	d047      	beq.n	800ebd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800eb46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb4c:	2b04      	cmp	r3, #4
 800eb4e:	d82a      	bhi.n	800eba6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800eb50:	a201      	add	r2, pc, #4	@ (adr r2, 800eb58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800eb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb56:	bf00      	nop
 800eb58:	0800eb6d 	.word	0x0800eb6d
 800eb5c:	0800eb7b 	.word	0x0800eb7b
 800eb60:	0800eb91 	.word	0x0800eb91
 800eb64:	0800ebaf 	.word	0x0800ebaf
 800eb68:	0800ebaf 	.word	0x0800ebaf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb6c:	4b81      	ldr	r3, [pc, #516]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800eb6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb70:	4a80      	ldr	r2, [pc, #512]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800eb72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eb78:	e01a      	b.n	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb7e:	3308      	adds	r3, #8
 800eb80:	2100      	movs	r1, #0
 800eb82:	4618      	mov	r0, r3
 800eb84:	f002 f9f6 	bl	8010f74 <RCCEx_PLL2_Config>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eb8e:	e00f      	b.n	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eb90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb94:	3328      	adds	r3, #40	@ 0x28
 800eb96:	2100      	movs	r1, #0
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f002 fa9d 	bl	80110d8 <RCCEx_PLL3_Config>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eba4:	e004      	b.n	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eba6:	2301      	movs	r3, #1
 800eba8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ebac:	e000      	b.n	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ebae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d10a      	bne.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ebb8:	4b6e      	ldr	r3, [pc, #440]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ebba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebbc:	f023 0107 	bic.w	r1, r3, #7
 800ebc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebc6:	4a6b      	ldr	r2, [pc, #428]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ebc8:	430b      	orrs	r3, r1
 800ebca:	6513      	str	r3, [r2, #80]	@ 0x50
 800ebcc:	e003      	b.n	800ebd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ebd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebde:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800ebe2:	f04f 0b00 	mov.w	fp, #0
 800ebe6:	ea5a 030b 	orrs.w	r3, sl, fp
 800ebea:	d05b      	beq.n	800eca4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ebec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ebf4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800ebf8:	d03b      	beq.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ebfa:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800ebfe:	d834      	bhi.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ec00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ec04:	d037      	beq.n	800ec76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ec06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ec0a:	d82e      	bhi.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ec0c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ec10:	d033      	beq.n	800ec7a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ec12:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ec16:	d828      	bhi.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ec18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ec1c:	d01a      	beq.n	800ec54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800ec1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ec22:	d822      	bhi.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d003      	beq.n	800ec30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800ec28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ec2c:	d007      	beq.n	800ec3e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ec2e:	e01c      	b.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec30:	4b50      	ldr	r3, [pc, #320]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ec32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec34:	4a4f      	ldr	r2, [pc, #316]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ec36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ec3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec3c:	e01e      	b.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec42:	3308      	adds	r3, #8
 800ec44:	2100      	movs	r1, #0
 800ec46:	4618      	mov	r0, r3
 800ec48:	f002 f994 	bl	8010f74 <RCCEx_PLL2_Config>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ec52:	e013      	b.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec58:	3328      	adds	r3, #40	@ 0x28
 800ec5a:	2100      	movs	r1, #0
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f002 fa3b 	bl	80110d8 <RCCEx_PLL3_Config>
 800ec62:	4603      	mov	r3, r0
 800ec64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec68:	e008      	b.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ec70:	e004      	b.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ec72:	bf00      	nop
 800ec74:	e002      	b.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ec76:	bf00      	nop
 800ec78:	e000      	b.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ec7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d10b      	bne.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ec84:	4b3b      	ldr	r3, [pc, #236]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ec86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec88:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800ec8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ec94:	4a37      	ldr	r2, [pc, #220]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ec96:	430b      	orrs	r3, r1
 800ec98:	6593      	str	r3, [r2, #88]	@ 0x58
 800ec9a:	e003      	b.n	800eca4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eca0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800eca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ecb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ecba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ecbe:	460b      	mov	r3, r1
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	d05d      	beq.n	800ed80 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ecc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800eccc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ecd0:	d03b      	beq.n	800ed4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ecd2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ecd6:	d834      	bhi.n	800ed42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ecd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ecdc:	d037      	beq.n	800ed4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ecde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ece2:	d82e      	bhi.n	800ed42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ece4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ece8:	d033      	beq.n	800ed52 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800ecea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ecee:	d828      	bhi.n	800ed42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ecf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ecf4:	d01a      	beq.n	800ed2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ecf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ecfa:	d822      	bhi.n	800ed42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d003      	beq.n	800ed08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ed00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ed04:	d007      	beq.n	800ed16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ed06:	e01c      	b.n	800ed42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed08:	4b1a      	ldr	r3, [pc, #104]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ed0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed0c:	4a19      	ldr	r2, [pc, #100]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ed0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ed12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ed14:	e01e      	b.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed1a:	3308      	adds	r3, #8
 800ed1c:	2100      	movs	r1, #0
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f002 f928 	bl	8010f74 <RCCEx_PLL2_Config>
 800ed24:	4603      	mov	r3, r0
 800ed26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ed2a:	e013      	b.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ed2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed30:	3328      	adds	r3, #40	@ 0x28
 800ed32:	2100      	movs	r1, #0
 800ed34:	4618      	mov	r0, r3
 800ed36:	f002 f9cf 	bl	80110d8 <RCCEx_PLL3_Config>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ed40:	e008      	b.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ed42:	2301      	movs	r3, #1
 800ed44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ed48:	e004      	b.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ed4a:	bf00      	nop
 800ed4c:	e002      	b.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ed4e:	bf00      	nop
 800ed50:	e000      	b.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ed52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d10d      	bne.n	800ed78 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ed5c:	4b05      	ldr	r3, [pc, #20]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ed5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed60:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ed64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ed6c:	4a01      	ldr	r2, [pc, #4]	@ (800ed74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ed6e:	430b      	orrs	r3, r1
 800ed70:	6593      	str	r3, [r2, #88]	@ 0x58
 800ed72:	e005      	b.n	800ed80 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ed74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ed7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ed80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed88:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800ed8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ed90:	2300      	movs	r3, #0
 800ed92:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ed96:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	d03a      	beq.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800eda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eda4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eda6:	2b30      	cmp	r3, #48	@ 0x30
 800eda8:	d01f      	beq.n	800edea <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800edaa:	2b30      	cmp	r3, #48	@ 0x30
 800edac:	d819      	bhi.n	800ede2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800edae:	2b20      	cmp	r3, #32
 800edb0:	d00c      	beq.n	800edcc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800edb2:	2b20      	cmp	r3, #32
 800edb4:	d815      	bhi.n	800ede2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d019      	beq.n	800edee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800edba:	2b10      	cmp	r3, #16
 800edbc:	d111      	bne.n	800ede2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edbe:	4baa      	ldr	r3, [pc, #680]	@ (800f068 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800edc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc2:	4aa9      	ldr	r2, [pc, #676]	@ (800f068 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800edc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800edc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800edca:	e011      	b.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800edcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edd0:	3308      	adds	r3, #8
 800edd2:	2102      	movs	r1, #2
 800edd4:	4618      	mov	r0, r3
 800edd6:	f002 f8cd 	bl	8010f74 <RCCEx_PLL2_Config>
 800edda:	4603      	mov	r3, r0
 800eddc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ede0:	e006      	b.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ede2:	2301      	movs	r3, #1
 800ede4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ede8:	e002      	b.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800edea:	bf00      	nop
 800edec:	e000      	b.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800edee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d10a      	bne.n	800ee0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800edf8:	4b9b      	ldr	r3, [pc, #620]	@ (800f068 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800edfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edfc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ee00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee06:	4a98      	ldr	r2, [pc, #608]	@ (800f068 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ee08:	430b      	orrs	r3, r1
 800ee0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ee0c:	e003      	b.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ee16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ee22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ee26:	2300      	movs	r3, #0
 800ee28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ee2c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ee30:	460b      	mov	r3, r1
 800ee32:	4313      	orrs	r3, r2
 800ee34:	d051      	beq.n	800eeda <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ee36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ee3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ee40:	d035      	beq.n	800eeae <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ee42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ee46:	d82e      	bhi.n	800eea6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ee48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ee4c:	d031      	beq.n	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ee4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ee52:	d828      	bhi.n	800eea6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ee54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ee58:	d01a      	beq.n	800ee90 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ee5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ee5e:	d822      	bhi.n	800eea6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d003      	beq.n	800ee6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ee64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee68:	d007      	beq.n	800ee7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ee6a:	e01c      	b.n	800eea6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee6c:	4b7e      	ldr	r3, [pc, #504]	@ (800f068 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ee6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee70:	4a7d      	ldr	r2, [pc, #500]	@ (800f068 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ee72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ee76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ee78:	e01c      	b.n	800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ee7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee7e:	3308      	adds	r3, #8
 800ee80:	2100      	movs	r1, #0
 800ee82:	4618      	mov	r0, r3
 800ee84:	f002 f876 	bl	8010f74 <RCCEx_PLL2_Config>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ee8e:	e011      	b.n	800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ee90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee94:	3328      	adds	r3, #40	@ 0x28
 800ee96:	2100      	movs	r1, #0
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f002 f91d 	bl	80110d8 <RCCEx_PLL3_Config>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800eea4:	e006      	b.n	800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eea6:	2301      	movs	r3, #1
 800eea8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eeac:	e002      	b.n	800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800eeae:	bf00      	nop
 800eeb0:	e000      	b.n	800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800eeb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eeb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d10a      	bne.n	800eed2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800eebc:	4b6a      	ldr	r3, [pc, #424]	@ (800f068 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800eebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eec0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800eec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eeca:	4a67      	ldr	r2, [pc, #412]	@ (800f068 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800eecc:	430b      	orrs	r3, r1
 800eece:	6513      	str	r3, [r2, #80]	@ 0x50
 800eed0:	e003      	b.n	800eeda <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eed2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eed6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800eeda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800eee6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800eeea:	2300      	movs	r3, #0
 800eeec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800eef0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800eef4:	460b      	mov	r3, r1
 800eef6:	4313      	orrs	r3, r2
 800eef8:	d053      	beq.n	800efa2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800eefa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eefe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ef04:	d033      	beq.n	800ef6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ef06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ef0a:	d82c      	bhi.n	800ef66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ef0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ef10:	d02f      	beq.n	800ef72 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ef12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ef16:	d826      	bhi.n	800ef66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ef18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ef1c:	d02b      	beq.n	800ef76 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ef1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ef22:	d820      	bhi.n	800ef66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ef24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef28:	d012      	beq.n	800ef50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ef2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef2e:	d81a      	bhi.n	800ef66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d022      	beq.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ef34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef38:	d115      	bne.n	800ef66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ef3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef3e:	3308      	adds	r3, #8
 800ef40:	2101      	movs	r1, #1
 800ef42:	4618      	mov	r0, r3
 800ef44:	f002 f816 	bl	8010f74 <RCCEx_PLL2_Config>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ef4e:	e015      	b.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ef50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef54:	3328      	adds	r3, #40	@ 0x28
 800ef56:	2101      	movs	r1, #1
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f002 f8bd 	bl	80110d8 <RCCEx_PLL3_Config>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ef64:	e00a      	b.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef66:	2301      	movs	r3, #1
 800ef68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ef6c:	e006      	b.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ef6e:	bf00      	nop
 800ef70:	e004      	b.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ef72:	bf00      	nop
 800ef74:	e002      	b.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ef76:	bf00      	nop
 800ef78:	e000      	b.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ef7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d10a      	bne.n	800ef9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ef84:	4b38      	ldr	r3, [pc, #224]	@ (800f068 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ef86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ef8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef92:	4a35      	ldr	r2, [pc, #212]	@ (800f068 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ef94:	430b      	orrs	r3, r1
 800ef96:	6513      	str	r3, [r2, #80]	@ 0x50
 800ef98:	e003      	b.n	800efa2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800efa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efaa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800efae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800efb2:	2300      	movs	r3, #0
 800efb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800efb8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800efbc:	460b      	mov	r3, r1
 800efbe:	4313      	orrs	r3, r2
 800efc0:	d058      	beq.n	800f074 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800efc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800efca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800efce:	d033      	beq.n	800f038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800efd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800efd4:	d82c      	bhi.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800efd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efda:	d02f      	beq.n	800f03c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800efdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efe0:	d826      	bhi.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800efe2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800efe6:	d02b      	beq.n	800f040 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800efe8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800efec:	d820      	bhi.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800efee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eff2:	d012      	beq.n	800f01a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800eff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eff8:	d81a      	bhi.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800effa:	2b00      	cmp	r3, #0
 800effc:	d022      	beq.n	800f044 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800effe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f002:	d115      	bne.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f008:	3308      	adds	r3, #8
 800f00a:	2101      	movs	r1, #1
 800f00c:	4618      	mov	r0, r3
 800f00e:	f001 ffb1 	bl	8010f74 <RCCEx_PLL2_Config>
 800f012:	4603      	mov	r3, r0
 800f014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f018:	e015      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f01e:	3328      	adds	r3, #40	@ 0x28
 800f020:	2101      	movs	r1, #1
 800f022:	4618      	mov	r0, r3
 800f024:	f002 f858 	bl	80110d8 <RCCEx_PLL3_Config>
 800f028:	4603      	mov	r3, r0
 800f02a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f02e:	e00a      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f030:	2301      	movs	r3, #1
 800f032:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f036:	e006      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800f038:	bf00      	nop
 800f03a:	e004      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800f03c:	bf00      	nop
 800f03e:	e002      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800f040:	bf00      	nop
 800f042:	e000      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800f044:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f046:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d10e      	bne.n	800f06c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f04e:	4b06      	ldr	r3, [pc, #24]	@ (800f068 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f052:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800f056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f05a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f05e:	4a02      	ldr	r2, [pc, #8]	@ (800f068 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f060:	430b      	orrs	r3, r1
 800f062:	6593      	str	r3, [r2, #88]	@ 0x58
 800f064:	e006      	b.n	800f074 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800f066:	bf00      	nop
 800f068:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f06c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f070:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800f080:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f084:	2300      	movs	r3, #0
 800f086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f08a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800f08e:	460b      	mov	r3, r1
 800f090:	4313      	orrs	r3, r2
 800f092:	d037      	beq.n	800f104 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f09a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f09e:	d00e      	beq.n	800f0be <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800f0a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f0a4:	d816      	bhi.n	800f0d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d018      	beq.n	800f0dc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800f0aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f0ae:	d111      	bne.n	800f0d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f0b0:	4bc4      	ldr	r3, [pc, #784]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0b4:	4ac3      	ldr	r2, [pc, #780]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f0b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f0ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f0bc:	e00f      	b.n	800f0de <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0c2:	3308      	adds	r3, #8
 800f0c4:	2101      	movs	r1, #1
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f001 ff54 	bl	8010f74 <RCCEx_PLL2_Config>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f0d2:	e004      	b.n	800f0de <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f0da:	e000      	b.n	800f0de <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800f0dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d10a      	bne.n	800f0fc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f0e6:	4bb7      	ldr	r3, [pc, #732]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f0e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0f4:	4ab3      	ldr	r2, [pc, #716]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f0f6:	430b      	orrs	r3, r1
 800f0f8:	6513      	str	r3, [r2, #80]	@ 0x50
 800f0fa:	e003      	b.n	800f104 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f100:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800f110:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f114:	2300      	movs	r3, #0
 800f116:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f11a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800f11e:	460b      	mov	r3, r1
 800f120:	4313      	orrs	r3, r2
 800f122:	d039      	beq.n	800f198 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f12a:	2b03      	cmp	r3, #3
 800f12c:	d81c      	bhi.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800f12e:	a201      	add	r2, pc, #4	@ (adr r2, 800f134 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800f130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f134:	0800f171 	.word	0x0800f171
 800f138:	0800f145 	.word	0x0800f145
 800f13c:	0800f153 	.word	0x0800f153
 800f140:	0800f171 	.word	0x0800f171
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f144:	4b9f      	ldr	r3, [pc, #636]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f148:	4a9e      	ldr	r2, [pc, #632]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f14a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f14e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f150:	e00f      	b.n	800f172 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f156:	3308      	adds	r3, #8
 800f158:	2102      	movs	r1, #2
 800f15a:	4618      	mov	r0, r3
 800f15c:	f001 ff0a 	bl	8010f74 <RCCEx_PLL2_Config>
 800f160:	4603      	mov	r3, r0
 800f162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f166:	e004      	b.n	800f172 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f168:	2301      	movs	r3, #1
 800f16a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f16e:	e000      	b.n	800f172 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800f170:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f172:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f176:	2b00      	cmp	r3, #0
 800f178:	d10a      	bne.n	800f190 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f17a:	4b92      	ldr	r3, [pc, #584]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f17c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f17e:	f023 0103 	bic.w	r1, r3, #3
 800f182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f188:	4a8e      	ldr	r2, [pc, #568]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f18a:	430b      	orrs	r3, r1
 800f18c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f18e:	e003      	b.n	800f198 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f190:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f194:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800f1a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f1ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	f000 8099 	beq.w	800f2ec <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f1ba:	4b83      	ldr	r3, [pc, #524]	@ (800f3c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4a82      	ldr	r2, [pc, #520]	@ (800f3c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f1c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f1c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f1c6:	f7f8 fe25 	bl	8007e14 <HAL_GetTick>
 800f1ca:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f1ce:	e00b      	b.n	800f1e8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f1d0:	f7f8 fe20 	bl	8007e14 <HAL_GetTick>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800f1da:	1ad3      	subs	r3, r2, r3
 800f1dc:	2b64      	cmp	r3, #100	@ 0x64
 800f1de:	d903      	bls.n	800f1e8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800f1e0:	2303      	movs	r3, #3
 800f1e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f1e6:	e005      	b.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f1e8:	4b77      	ldr	r3, [pc, #476]	@ (800f3c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d0ed      	beq.n	800f1d0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800f1f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d173      	bne.n	800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f1fc:	4b71      	ldr	r3, [pc, #452]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f1fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f204:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f208:	4053      	eors	r3, r2
 800f20a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d015      	beq.n	800f23e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f212:	4b6c      	ldr	r3, [pc, #432]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f21a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f21e:	4b69      	ldr	r3, [pc, #420]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f222:	4a68      	ldr	r2, [pc, #416]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f228:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f22a:	4b66      	ldr	r3, [pc, #408]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f22c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f22e:	4a65      	ldr	r2, [pc, #404]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f234:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f236:	4a63      	ldr	r2, [pc, #396]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800f23c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f242:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f24a:	d118      	bne.n	800f27e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f24c:	f7f8 fde2 	bl	8007e14 <HAL_GetTick>
 800f250:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f254:	e00d      	b.n	800f272 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f256:	f7f8 fddd 	bl	8007e14 <HAL_GetTick>
 800f25a:	4602      	mov	r2, r0
 800f25c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800f260:	1ad2      	subs	r2, r2, r3
 800f262:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f266:	429a      	cmp	r2, r3
 800f268:	d903      	bls.n	800f272 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800f26a:	2303      	movs	r3, #3
 800f26c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800f270:	e005      	b.n	800f27e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f272:	4b54      	ldr	r3, [pc, #336]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f276:	f003 0302 	and.w	r3, r3, #2
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d0eb      	beq.n	800f256 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800f27e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f282:	2b00      	cmp	r3, #0
 800f284:	d129      	bne.n	800f2da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f28a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f28e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f292:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f296:	d10e      	bne.n	800f2b6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800f298:	4b4a      	ldr	r3, [pc, #296]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f29a:	691b      	ldr	r3, [r3, #16]
 800f29c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800f2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f2a8:	091a      	lsrs	r2, r3, #4
 800f2aa:	4b48      	ldr	r3, [pc, #288]	@ (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800f2ac:	4013      	ands	r3, r2
 800f2ae:	4a45      	ldr	r2, [pc, #276]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f2b0:	430b      	orrs	r3, r1
 800f2b2:	6113      	str	r3, [r2, #16]
 800f2b4:	e005      	b.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800f2b6:	4b43      	ldr	r3, [pc, #268]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f2b8:	691b      	ldr	r3, [r3, #16]
 800f2ba:	4a42      	ldr	r2, [pc, #264]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f2bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f2c0:	6113      	str	r3, [r2, #16]
 800f2c2:	4b40      	ldr	r3, [pc, #256]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f2c4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f2ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f2d2:	4a3c      	ldr	r2, [pc, #240]	@ (800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f2d4:	430b      	orrs	r3, r1
 800f2d6:	6713      	str	r3, [r2, #112]	@ 0x70
 800f2d8:	e008      	b.n	800f2ec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f2da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f2de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800f2e2:	e003      	b.n	800f2ec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f2e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f4:	f002 0301 	and.w	r3, r2, #1
 800f2f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f302:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800f306:	460b      	mov	r3, r1
 800f308:	4313      	orrs	r3, r2
 800f30a:	f000 808f 	beq.w	800f42c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f312:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f314:	2b28      	cmp	r3, #40	@ 0x28
 800f316:	d871      	bhi.n	800f3fc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800f318:	a201      	add	r2, pc, #4	@ (adr r2, 800f320 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800f31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f31e:	bf00      	nop
 800f320:	0800f405 	.word	0x0800f405
 800f324:	0800f3fd 	.word	0x0800f3fd
 800f328:	0800f3fd 	.word	0x0800f3fd
 800f32c:	0800f3fd 	.word	0x0800f3fd
 800f330:	0800f3fd 	.word	0x0800f3fd
 800f334:	0800f3fd 	.word	0x0800f3fd
 800f338:	0800f3fd 	.word	0x0800f3fd
 800f33c:	0800f3fd 	.word	0x0800f3fd
 800f340:	0800f3d1 	.word	0x0800f3d1
 800f344:	0800f3fd 	.word	0x0800f3fd
 800f348:	0800f3fd 	.word	0x0800f3fd
 800f34c:	0800f3fd 	.word	0x0800f3fd
 800f350:	0800f3fd 	.word	0x0800f3fd
 800f354:	0800f3fd 	.word	0x0800f3fd
 800f358:	0800f3fd 	.word	0x0800f3fd
 800f35c:	0800f3fd 	.word	0x0800f3fd
 800f360:	0800f3e7 	.word	0x0800f3e7
 800f364:	0800f3fd 	.word	0x0800f3fd
 800f368:	0800f3fd 	.word	0x0800f3fd
 800f36c:	0800f3fd 	.word	0x0800f3fd
 800f370:	0800f3fd 	.word	0x0800f3fd
 800f374:	0800f3fd 	.word	0x0800f3fd
 800f378:	0800f3fd 	.word	0x0800f3fd
 800f37c:	0800f3fd 	.word	0x0800f3fd
 800f380:	0800f405 	.word	0x0800f405
 800f384:	0800f3fd 	.word	0x0800f3fd
 800f388:	0800f3fd 	.word	0x0800f3fd
 800f38c:	0800f3fd 	.word	0x0800f3fd
 800f390:	0800f3fd 	.word	0x0800f3fd
 800f394:	0800f3fd 	.word	0x0800f3fd
 800f398:	0800f3fd 	.word	0x0800f3fd
 800f39c:	0800f3fd 	.word	0x0800f3fd
 800f3a0:	0800f405 	.word	0x0800f405
 800f3a4:	0800f3fd 	.word	0x0800f3fd
 800f3a8:	0800f3fd 	.word	0x0800f3fd
 800f3ac:	0800f3fd 	.word	0x0800f3fd
 800f3b0:	0800f3fd 	.word	0x0800f3fd
 800f3b4:	0800f3fd 	.word	0x0800f3fd
 800f3b8:	0800f3fd 	.word	0x0800f3fd
 800f3bc:	0800f3fd 	.word	0x0800f3fd
 800f3c0:	0800f405 	.word	0x0800f405
 800f3c4:	58024400 	.word	0x58024400
 800f3c8:	58024800 	.word	0x58024800
 800f3cc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3d4:	3308      	adds	r3, #8
 800f3d6:	2101      	movs	r1, #1
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f001 fdcb 	bl	8010f74 <RCCEx_PLL2_Config>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f3e4:	e00f      	b.n	800f406 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3ea:	3328      	adds	r3, #40	@ 0x28
 800f3ec:	2101      	movs	r1, #1
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f001 fe72 	bl	80110d8 <RCCEx_PLL3_Config>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f3fa:	e004      	b.n	800f406 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f402:	e000      	b.n	800f406 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800f404:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f406:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d10a      	bne.n	800f424 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f40e:	4bbf      	ldr	r3, [pc, #764]	@ (800f70c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f412:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800f416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f41a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f41c:	4abb      	ldr	r2, [pc, #748]	@ (800f70c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f41e:	430b      	orrs	r3, r1
 800f420:	6553      	str	r3, [r2, #84]	@ 0x54
 800f422:	e003      	b.n	800f42c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f424:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f428:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f434:	f002 0302 	and.w	r3, r2, #2
 800f438:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f43c:	2300      	movs	r3, #0
 800f43e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f442:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800f446:	460b      	mov	r3, r1
 800f448:	4313      	orrs	r3, r2
 800f44a:	d041      	beq.n	800f4d0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f452:	2b05      	cmp	r3, #5
 800f454:	d824      	bhi.n	800f4a0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800f456:	a201      	add	r2, pc, #4	@ (adr r2, 800f45c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800f458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f45c:	0800f4a9 	.word	0x0800f4a9
 800f460:	0800f475 	.word	0x0800f475
 800f464:	0800f48b 	.word	0x0800f48b
 800f468:	0800f4a9 	.word	0x0800f4a9
 800f46c:	0800f4a9 	.word	0x0800f4a9
 800f470:	0800f4a9 	.word	0x0800f4a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f478:	3308      	adds	r3, #8
 800f47a:	2101      	movs	r1, #1
 800f47c:	4618      	mov	r0, r3
 800f47e:	f001 fd79 	bl	8010f74 <RCCEx_PLL2_Config>
 800f482:	4603      	mov	r3, r0
 800f484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f488:	e00f      	b.n	800f4aa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f48e:	3328      	adds	r3, #40	@ 0x28
 800f490:	2101      	movs	r1, #1
 800f492:	4618      	mov	r0, r3
 800f494:	f001 fe20 	bl	80110d8 <RCCEx_PLL3_Config>
 800f498:	4603      	mov	r3, r0
 800f49a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f49e:	e004      	b.n	800f4aa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f4a6:	e000      	b.n	800f4aa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800f4a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f4aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d10a      	bne.n	800f4c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f4b2:	4b96      	ldr	r3, [pc, #600]	@ (800f70c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f4b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4b6:	f023 0107 	bic.w	r1, r3, #7
 800f4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f4be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4c0:	4a92      	ldr	r2, [pc, #584]	@ (800f70c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f4c2:	430b      	orrs	r3, r1
 800f4c4:	6553      	str	r3, [r2, #84]	@ 0x54
 800f4c6:	e003      	b.n	800f4d0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f4cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d8:	f002 0304 	and.w	r3, r2, #4
 800f4dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f4e6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	d044      	beq.n	800f57a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f4f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4f8:	2b05      	cmp	r3, #5
 800f4fa:	d825      	bhi.n	800f548 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800f4fc:	a201      	add	r2, pc, #4	@ (adr r2, 800f504 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800f4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f502:	bf00      	nop
 800f504:	0800f551 	.word	0x0800f551
 800f508:	0800f51d 	.word	0x0800f51d
 800f50c:	0800f533 	.word	0x0800f533
 800f510:	0800f551 	.word	0x0800f551
 800f514:	0800f551 	.word	0x0800f551
 800f518:	0800f551 	.word	0x0800f551
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f520:	3308      	adds	r3, #8
 800f522:	2101      	movs	r1, #1
 800f524:	4618      	mov	r0, r3
 800f526:	f001 fd25 	bl	8010f74 <RCCEx_PLL2_Config>
 800f52a:	4603      	mov	r3, r0
 800f52c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f530:	e00f      	b.n	800f552 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f536:	3328      	adds	r3, #40	@ 0x28
 800f538:	2101      	movs	r1, #1
 800f53a:	4618      	mov	r0, r3
 800f53c:	f001 fdcc 	bl	80110d8 <RCCEx_PLL3_Config>
 800f540:	4603      	mov	r3, r0
 800f542:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f546:	e004      	b.n	800f552 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f548:	2301      	movs	r3, #1
 800f54a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f54e:	e000      	b.n	800f552 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800f550:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f552:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f556:	2b00      	cmp	r3, #0
 800f558:	d10b      	bne.n	800f572 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f55a:	4b6c      	ldr	r3, [pc, #432]	@ (800f70c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f55c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f55e:	f023 0107 	bic.w	r1, r3, #7
 800f562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f56a:	4a68      	ldr	r2, [pc, #416]	@ (800f70c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f56c:	430b      	orrs	r3, r1
 800f56e:	6593      	str	r3, [r2, #88]	@ 0x58
 800f570:	e003      	b.n	800f57a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f572:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f576:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f582:	f002 0320 	and.w	r3, r2, #32
 800f586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f58a:	2300      	movs	r3, #0
 800f58c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f590:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800f594:	460b      	mov	r3, r1
 800f596:	4313      	orrs	r3, r2
 800f598:	d055      	beq.n	800f646 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f59e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f5a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f5a6:	d033      	beq.n	800f610 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800f5a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f5ac:	d82c      	bhi.n	800f608 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800f5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5b2:	d02f      	beq.n	800f614 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800f5b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5b8:	d826      	bhi.n	800f608 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800f5ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f5be:	d02b      	beq.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800f5c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f5c4:	d820      	bhi.n	800f608 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800f5c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5ca:	d012      	beq.n	800f5f2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800f5cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5d0:	d81a      	bhi.n	800f608 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d022      	beq.n	800f61c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800f5d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f5da:	d115      	bne.n	800f608 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f5e0:	3308      	adds	r3, #8
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f001 fcc5 	bl	8010f74 <RCCEx_PLL2_Config>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f5f0:	e015      	b.n	800f61e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f5f6:	3328      	adds	r3, #40	@ 0x28
 800f5f8:	2102      	movs	r1, #2
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f001 fd6c 	bl	80110d8 <RCCEx_PLL3_Config>
 800f600:	4603      	mov	r3, r0
 800f602:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f606:	e00a      	b.n	800f61e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f608:	2301      	movs	r3, #1
 800f60a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f60e:	e006      	b.n	800f61e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800f610:	bf00      	nop
 800f612:	e004      	b.n	800f61e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800f614:	bf00      	nop
 800f616:	e002      	b.n	800f61e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800f618:	bf00      	nop
 800f61a:	e000      	b.n	800f61e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800f61c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f61e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f622:	2b00      	cmp	r3, #0
 800f624:	d10b      	bne.n	800f63e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f626:	4b39      	ldr	r3, [pc, #228]	@ (800f70c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f62a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800f62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f636:	4a35      	ldr	r2, [pc, #212]	@ (800f70c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f638:	430b      	orrs	r3, r1
 800f63a:	6553      	str	r3, [r2, #84]	@ 0x54
 800f63c:	e003      	b.n	800f646 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f63e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f642:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f64e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800f652:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f656:	2300      	movs	r3, #0
 800f658:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f65c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800f660:	460b      	mov	r3, r1
 800f662:	4313      	orrs	r3, r2
 800f664:	d058      	beq.n	800f718 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f66a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f66e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f672:	d033      	beq.n	800f6dc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800f674:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f678:	d82c      	bhi.n	800f6d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800f67a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f67e:	d02f      	beq.n	800f6e0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800f680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f684:	d826      	bhi.n	800f6d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800f686:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f68a:	d02b      	beq.n	800f6e4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800f68c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f690:	d820      	bhi.n	800f6d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800f692:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f696:	d012      	beq.n	800f6be <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800f698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f69c:	d81a      	bhi.n	800f6d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d022      	beq.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800f6a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f6a6:	d115      	bne.n	800f6d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f6ac:	3308      	adds	r3, #8
 800f6ae:	2100      	movs	r1, #0
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f001 fc5f 	bl	8010f74 <RCCEx_PLL2_Config>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f6bc:	e015      	b.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f6c2:	3328      	adds	r3, #40	@ 0x28
 800f6c4:	2102      	movs	r1, #2
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f001 fd06 	bl	80110d8 <RCCEx_PLL3_Config>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f6d2:	e00a      	b.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f6da:	e006      	b.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800f6dc:	bf00      	nop
 800f6de:	e004      	b.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800f6e0:	bf00      	nop
 800f6e2:	e002      	b.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800f6e4:	bf00      	nop
 800f6e6:	e000      	b.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800f6e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f6ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d10e      	bne.n	800f710 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f6f2:	4b06      	ldr	r3, [pc, #24]	@ (800f70c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f6f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6f6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800f6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f6fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f702:	4a02      	ldr	r2, [pc, #8]	@ (800f70c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f704:	430b      	orrs	r3, r1
 800f706:	6593      	str	r3, [r2, #88]	@ 0x58
 800f708:	e006      	b.n	800f718 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800f70a:	bf00      	nop
 800f70c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f710:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f714:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f720:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800f724:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f728:	2300      	movs	r3, #0
 800f72a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f72e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800f732:	460b      	mov	r3, r1
 800f734:	4313      	orrs	r3, r2
 800f736:	d055      	beq.n	800f7e4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f73c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f740:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f744:	d033      	beq.n	800f7ae <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800f746:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f74a:	d82c      	bhi.n	800f7a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800f74c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f750:	d02f      	beq.n	800f7b2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800f752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f756:	d826      	bhi.n	800f7a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800f758:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f75c:	d02b      	beq.n	800f7b6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800f75e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f762:	d820      	bhi.n	800f7a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800f764:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f768:	d012      	beq.n	800f790 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800f76a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f76e:	d81a      	bhi.n	800f7a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800f770:	2b00      	cmp	r3, #0
 800f772:	d022      	beq.n	800f7ba <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800f774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f778:	d115      	bne.n	800f7a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f77e:	3308      	adds	r3, #8
 800f780:	2100      	movs	r1, #0
 800f782:	4618      	mov	r0, r3
 800f784:	f001 fbf6 	bl	8010f74 <RCCEx_PLL2_Config>
 800f788:	4603      	mov	r3, r0
 800f78a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f78e:	e015      	b.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f794:	3328      	adds	r3, #40	@ 0x28
 800f796:	2102      	movs	r1, #2
 800f798:	4618      	mov	r0, r3
 800f79a:	f001 fc9d 	bl	80110d8 <RCCEx_PLL3_Config>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f7a4:	e00a      	b.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f7ac:	e006      	b.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800f7ae:	bf00      	nop
 800f7b0:	e004      	b.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800f7b2:	bf00      	nop
 800f7b4:	e002      	b.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800f7b6:	bf00      	nop
 800f7b8:	e000      	b.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800f7ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d10b      	bne.n	800f7dc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f7c4:	4ba0      	ldr	r3, [pc, #640]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f7c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f7c8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800f7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f7d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f7d4:	4a9c      	ldr	r2, [pc, #624]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f7d6:	430b      	orrs	r3, r1
 800f7d8:	6593      	str	r3, [r2, #88]	@ 0x58
 800f7da:	e003      	b.n	800f7e4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f7e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800f7e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ec:	f002 0308 	and.w	r3, r2, #8
 800f7f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f7fa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800f7fe:	460b      	mov	r3, r1
 800f800:	4313      	orrs	r3, r2
 800f802:	d01e      	beq.n	800f842 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800f804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f80c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f810:	d10c      	bne.n	800f82c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f816:	3328      	adds	r3, #40	@ 0x28
 800f818:	2102      	movs	r1, #2
 800f81a:	4618      	mov	r0, r3
 800f81c:	f001 fc5c 	bl	80110d8 <RCCEx_PLL3_Config>
 800f820:	4603      	mov	r3, r0
 800f822:	2b00      	cmp	r3, #0
 800f824:	d002      	beq.n	800f82c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800f826:	2301      	movs	r3, #1
 800f828:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800f82c:	4b86      	ldr	r3, [pc, #536]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f82e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f830:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f83c:	4a82      	ldr	r2, [pc, #520]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f83e:	430b      	orrs	r3, r1
 800f840:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84a:	f002 0310 	and.w	r3, r2, #16
 800f84e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f852:	2300      	movs	r3, #0
 800f854:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f858:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800f85c:	460b      	mov	r3, r1
 800f85e:	4313      	orrs	r3, r2
 800f860:	d01e      	beq.n	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f86a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f86e:	d10c      	bne.n	800f88a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f874:	3328      	adds	r3, #40	@ 0x28
 800f876:	2102      	movs	r1, #2
 800f878:	4618      	mov	r0, r3
 800f87a:	f001 fc2d 	bl	80110d8 <RCCEx_PLL3_Config>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	d002      	beq.n	800f88a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800f884:	2301      	movs	r3, #1
 800f886:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f88a:	4b6f      	ldr	r3, [pc, #444]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f88c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f88e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f896:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f89a:	4a6b      	ldr	r2, [pc, #428]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f89c:	430b      	orrs	r3, r1
 800f89e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800f8ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f8b2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800f8b6:	460b      	mov	r3, r1
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	d03e      	beq.n	800f93a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f8c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f8c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f8c8:	d022      	beq.n	800f910 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800f8ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f8ce:	d81b      	bhi.n	800f908 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d003      	beq.n	800f8dc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800f8d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8d8:	d00b      	beq.n	800f8f2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800f8da:	e015      	b.n	800f908 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f8dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f8e0:	3308      	adds	r3, #8
 800f8e2:	2100      	movs	r1, #0
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f001 fb45 	bl	8010f74 <RCCEx_PLL2_Config>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f8f0:	e00f      	b.n	800f912 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f8f6:	3328      	adds	r3, #40	@ 0x28
 800f8f8:	2102      	movs	r1, #2
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f001 fbec 	bl	80110d8 <RCCEx_PLL3_Config>
 800f900:	4603      	mov	r3, r0
 800f902:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f906:	e004      	b.n	800f912 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f908:	2301      	movs	r3, #1
 800f90a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f90e:	e000      	b.n	800f912 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800f910:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f912:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f916:	2b00      	cmp	r3, #0
 800f918:	d10b      	bne.n	800f932 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f91a:	4b4b      	ldr	r3, [pc, #300]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f91c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f91e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800f922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f926:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f92a:	4a47      	ldr	r2, [pc, #284]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f92c:	430b      	orrs	r3, r1
 800f92e:	6593      	str	r3, [r2, #88]	@ 0x58
 800f930:	e003      	b.n	800f93a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f932:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f936:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f942:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800f946:	673b      	str	r3, [r7, #112]	@ 0x70
 800f948:	2300      	movs	r3, #0
 800f94a:	677b      	str	r3, [r7, #116]	@ 0x74
 800f94c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800f950:	460b      	mov	r3, r1
 800f952:	4313      	orrs	r3, r2
 800f954:	d03b      	beq.n	800f9ce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f95a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f95e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f962:	d01f      	beq.n	800f9a4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800f964:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f968:	d818      	bhi.n	800f99c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800f96a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f96e:	d003      	beq.n	800f978 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800f970:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f974:	d007      	beq.n	800f986 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800f976:	e011      	b.n	800f99c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f978:	4b33      	ldr	r3, [pc, #204]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f97c:	4a32      	ldr	r2, [pc, #200]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f97e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f984:	e00f      	b.n	800f9a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f98a:	3328      	adds	r3, #40	@ 0x28
 800f98c:	2101      	movs	r1, #1
 800f98e:	4618      	mov	r0, r3
 800f990:	f001 fba2 	bl	80110d8 <RCCEx_PLL3_Config>
 800f994:	4603      	mov	r3, r0
 800f996:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800f99a:	e004      	b.n	800f9a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f99c:	2301      	movs	r3, #1
 800f99e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f9a2:	e000      	b.n	800f9a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800f9a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f9a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d10b      	bne.n	800f9c6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f9ae:	4b26      	ldr	r3, [pc, #152]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f9b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f9be:	4a22      	ldr	r2, [pc, #136]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f9c0:	430b      	orrs	r3, r1
 800f9c2:	6553      	str	r3, [r2, #84]	@ 0x54
 800f9c4:	e003      	b.n	800f9ce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f9ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f9da:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f9dc:	2300      	movs	r3, #0
 800f9de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f9e0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f9e4:	460b      	mov	r3, r1
 800f9e6:	4313      	orrs	r3, r2
 800f9e8:	d034      	beq.n	800fa54 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d003      	beq.n	800f9fc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800f9f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f9f8:	d007      	beq.n	800fa0a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800f9fa:	e011      	b.n	800fa20 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f9fc:	4b12      	ldr	r3, [pc, #72]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa00:	4a11      	ldr	r2, [pc, #68]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800fa02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fa06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fa08:	e00e      	b.n	800fa28 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fa0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa0e:	3308      	adds	r3, #8
 800fa10:	2102      	movs	r1, #2
 800fa12:	4618      	mov	r0, r3
 800fa14:	f001 faae 	bl	8010f74 <RCCEx_PLL2_Config>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fa1e:	e003      	b.n	800fa28 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800fa20:	2301      	movs	r3, #1
 800fa22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800fa26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d10d      	bne.n	800fa4c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800fa30:	4b05      	ldr	r3, [pc, #20]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800fa32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa34:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fa38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa3e:	4a02      	ldr	r2, [pc, #8]	@ (800fa48 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800fa40:	430b      	orrs	r3, r1
 800fa42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800fa44:	e006      	b.n	800fa54 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800fa46:	bf00      	nop
 800fa48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fa50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fa54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800fa60:	663b      	str	r3, [r7, #96]	@ 0x60
 800fa62:	2300      	movs	r3, #0
 800fa64:	667b      	str	r3, [r7, #100]	@ 0x64
 800fa66:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800fa6a:	460b      	mov	r3, r1
 800fa6c:	4313      	orrs	r3, r2
 800fa6e:	d00c      	beq.n	800fa8a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fa70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa74:	3328      	adds	r3, #40	@ 0x28
 800fa76:	2102      	movs	r1, #2
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f001 fb2d 	bl	80110d8 <RCCEx_PLL3_Config>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d002      	beq.n	800fa8a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800fa84:	2301      	movs	r3, #1
 800fa86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fa8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa92:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800fa96:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fa98:	2300      	movs	r3, #0
 800fa9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fa9c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800faa0:	460b      	mov	r3, r1
 800faa2:	4313      	orrs	r3, r2
 800faa4:	d036      	beq.n	800fb14 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800faa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800faaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800faac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fab0:	d018      	beq.n	800fae4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800fab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fab6:	d811      	bhi.n	800fadc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800fab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fabc:	d014      	beq.n	800fae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800fabe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fac2:	d80b      	bhi.n	800fadc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d011      	beq.n	800faec <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800fac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800facc:	d106      	bne.n	800fadc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800face:	4bb7      	ldr	r3, [pc, #732]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fad2:	4ab6      	ldr	r2, [pc, #728]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800fada:	e008      	b.n	800faee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fadc:	2301      	movs	r3, #1
 800fade:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800fae2:	e004      	b.n	800faee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800fae4:	bf00      	nop
 800fae6:	e002      	b.n	800faee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800fae8:	bf00      	nop
 800faea:	e000      	b.n	800faee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800faec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800faee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d10a      	bne.n	800fb0c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800faf6:	4bad      	ldr	r3, [pc, #692]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800faf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fafa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800fafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb04:	4aa9      	ldr	r2, [pc, #676]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fb06:	430b      	orrs	r3, r1
 800fb08:	6553      	str	r3, [r2, #84]	@ 0x54
 800fb0a:	e003      	b.n	800fb14 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fb10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800fb20:	653b      	str	r3, [r7, #80]	@ 0x50
 800fb22:	2300      	movs	r3, #0
 800fb24:	657b      	str	r3, [r7, #84]	@ 0x54
 800fb26:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	d009      	beq.n	800fb44 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fb30:	4b9e      	ldr	r3, [pc, #632]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fb32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb3e:	4a9b      	ldr	r2, [pc, #620]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fb40:	430b      	orrs	r3, r1
 800fb42:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800fb50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fb52:	2300      	movs	r3, #0
 800fb54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fb56:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800fb5a:	460b      	mov	r3, r1
 800fb5c:	4313      	orrs	r3, r2
 800fb5e:	d009      	beq.n	800fb74 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fb60:	4b92      	ldr	r3, [pc, #584]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fb62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb64:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800fb68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fb6e:	4a8f      	ldr	r2, [pc, #572]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fb70:	430b      	orrs	r3, r1
 800fb72:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fb74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800fb80:	643b      	str	r3, [r7, #64]	@ 0x40
 800fb82:	2300      	movs	r3, #0
 800fb84:	647b      	str	r3, [r7, #68]	@ 0x44
 800fb86:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800fb8a:	460b      	mov	r3, r1
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	d00e      	beq.n	800fbae <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fb90:	4b86      	ldr	r3, [pc, #536]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fb92:	691b      	ldr	r3, [r3, #16]
 800fb94:	4a85      	ldr	r2, [pc, #532]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fb96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fb9a:	6113      	str	r3, [r2, #16]
 800fb9c:	4b83      	ldr	r3, [pc, #524]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fb9e:	6919      	ldr	r1, [r3, #16]
 800fba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fba4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fba8:	4a80      	ldr	r2, [pc, #512]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fbaa:	430b      	orrs	r3, r1
 800fbac:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fbae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800fbba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fbc0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800fbc4:	460b      	mov	r3, r1
 800fbc6:	4313      	orrs	r3, r2
 800fbc8:	d009      	beq.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fbca:	4b78      	ldr	r3, [pc, #480]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fbcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fbce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800fbd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fbd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbd8:	4a74      	ldr	r2, [pc, #464]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fbda:	430b      	orrs	r3, r1
 800fbdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fbde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800fbea:	633b      	str	r3, [r7, #48]	@ 0x30
 800fbec:	2300      	movs	r3, #0
 800fbee:	637b      	str	r3, [r7, #52]	@ 0x34
 800fbf0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800fbf4:	460b      	mov	r3, r1
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	d00a      	beq.n	800fc10 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fbfa:	4b6c      	ldr	r3, [pc, #432]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fbfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbfe:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800fc02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fc0a:	4a68      	ldr	r2, [pc, #416]	@ (800fdac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fc0c:	430b      	orrs	r3, r1
 800fc0e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fc10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc18:	2100      	movs	r1, #0
 800fc1a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800fc1c:	f003 0301 	and.w	r3, r3, #1
 800fc20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fc22:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800fc26:	460b      	mov	r3, r1
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	d011      	beq.n	800fc50 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fc2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc30:	3308      	adds	r3, #8
 800fc32:	2100      	movs	r1, #0
 800fc34:	4618      	mov	r0, r3
 800fc36:	f001 f99d 	bl	8010f74 <RCCEx_PLL2_Config>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800fc40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d003      	beq.n	800fc50 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fc4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fc50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc58:	2100      	movs	r1, #0
 800fc5a:	6239      	str	r1, [r7, #32]
 800fc5c:	f003 0302 	and.w	r3, r3, #2
 800fc60:	627b      	str	r3, [r7, #36]	@ 0x24
 800fc62:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fc66:	460b      	mov	r3, r1
 800fc68:	4313      	orrs	r3, r2
 800fc6a:	d011      	beq.n	800fc90 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fc6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc70:	3308      	adds	r3, #8
 800fc72:	2101      	movs	r1, #1
 800fc74:	4618      	mov	r0, r3
 800fc76:	f001 f97d 	bl	8010f74 <RCCEx_PLL2_Config>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800fc80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d003      	beq.n	800fc90 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fc8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800fc90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc98:	2100      	movs	r1, #0
 800fc9a:	61b9      	str	r1, [r7, #24]
 800fc9c:	f003 0304 	and.w	r3, r3, #4
 800fca0:	61fb      	str	r3, [r7, #28]
 800fca2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fca6:	460b      	mov	r3, r1
 800fca8:	4313      	orrs	r3, r2
 800fcaa:	d011      	beq.n	800fcd0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fcac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fcb0:	3308      	adds	r3, #8
 800fcb2:	2102      	movs	r1, #2
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f001 f95d 	bl	8010f74 <RCCEx_PLL2_Config>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800fcc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d003      	beq.n	800fcd0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fccc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800fcd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd8:	2100      	movs	r1, #0
 800fcda:	6139      	str	r1, [r7, #16]
 800fcdc:	f003 0308 	and.w	r3, r3, #8
 800fce0:	617b      	str	r3, [r7, #20]
 800fce2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fce6:	460b      	mov	r3, r1
 800fce8:	4313      	orrs	r3, r2
 800fcea:	d011      	beq.n	800fd10 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fcec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fcf0:	3328      	adds	r3, #40	@ 0x28
 800fcf2:	2100      	movs	r1, #0
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f001 f9ef 	bl	80110d8 <RCCEx_PLL3_Config>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800fd00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d003      	beq.n	800fd10 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fd0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fd10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd18:	2100      	movs	r1, #0
 800fd1a:	60b9      	str	r1, [r7, #8]
 800fd1c:	f003 0310 	and.w	r3, r3, #16
 800fd20:	60fb      	str	r3, [r7, #12]
 800fd22:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fd26:	460b      	mov	r3, r1
 800fd28:	4313      	orrs	r3, r2
 800fd2a:	d011      	beq.n	800fd50 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fd2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fd30:	3328      	adds	r3, #40	@ 0x28
 800fd32:	2101      	movs	r1, #1
 800fd34:	4618      	mov	r0, r3
 800fd36:	f001 f9cf 	bl	80110d8 <RCCEx_PLL3_Config>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800fd40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d003      	beq.n	800fd50 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fd4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800fd50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd58:	2100      	movs	r1, #0
 800fd5a:	6039      	str	r1, [r7, #0]
 800fd5c:	f003 0320 	and.w	r3, r3, #32
 800fd60:	607b      	str	r3, [r7, #4]
 800fd62:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fd66:	460b      	mov	r3, r1
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	d011      	beq.n	800fd90 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fd6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fd70:	3328      	adds	r3, #40	@ 0x28
 800fd72:	2102      	movs	r1, #2
 800fd74:	4618      	mov	r0, r3
 800fd76:	f001 f9af 	bl	80110d8 <RCCEx_PLL3_Config>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800fd80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d003      	beq.n	800fd90 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fd8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800fd90:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d101      	bne.n	800fd9c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	e000      	b.n	800fd9e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800fd9c:	2301      	movs	r3, #1
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800fda4:	46bd      	mov	sp, r7
 800fda6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fdaa:	bf00      	nop
 800fdac:	58024400 	.word	0x58024400

0800fdb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b090      	sub	sp, #64	@ 0x40
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800fdba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdbe:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800fdc2:	430b      	orrs	r3, r1
 800fdc4:	f040 8094 	bne.w	800fef0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800fdc8:	4b9b      	ldr	r3, [pc, #620]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fdca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdcc:	f003 0307 	and.w	r3, r3, #7
 800fdd0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fdd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdd4:	2b04      	cmp	r3, #4
 800fdd6:	f200 8087 	bhi.w	800fee8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800fdda:	a201      	add	r2, pc, #4	@ (adr r2, 800fde0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800fddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fde0:	0800fdf5 	.word	0x0800fdf5
 800fde4:	0800fe1d 	.word	0x0800fe1d
 800fde8:	0800fe45 	.word	0x0800fe45
 800fdec:	0800fee1 	.word	0x0800fee1
 800fdf0:	0800fe6d 	.word	0x0800fe6d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fdf4:	4b90      	ldr	r3, [pc, #576]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fdfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fe00:	d108      	bne.n	800fe14 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fe02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe06:	4618      	mov	r0, r3
 800fe08:	f000 ff62 	bl	8010cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fe0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe10:	f000 bc93 	b.w	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fe14:	2300      	movs	r3, #0
 800fe16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe18:	f000 bc8f 	b.w	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fe1c:	4b86      	ldr	r3, [pc, #536]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fe24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fe28:	d108      	bne.n	800fe3c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe2a:	f107 0318 	add.w	r3, r7, #24
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f000 fca6 	bl	8010780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fe34:	69bb      	ldr	r3, [r7, #24]
 800fe36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe38:	f000 bc7f 	b.w	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe40:	f000 bc7b 	b.w	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fe44:	4b7c      	ldr	r3, [pc, #496]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fe4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fe50:	d108      	bne.n	800fe64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe52:	f107 030c 	add.w	r3, r7, #12
 800fe56:	4618      	mov	r0, r3
 800fe58:	f000 fde6 	bl	8010a28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe60:	f000 bc6b 	b.w	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fe64:	2300      	movs	r3, #0
 800fe66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe68:	f000 bc67 	b.w	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fe6c:	4b72      	ldr	r3, [pc, #456]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fe6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fe74:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fe76:	4b70      	ldr	r3, [pc, #448]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f003 0304 	and.w	r3, r3, #4
 800fe7e:	2b04      	cmp	r3, #4
 800fe80:	d10c      	bne.n	800fe9c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800fe82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d109      	bne.n	800fe9c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe88:	4b6b      	ldr	r3, [pc, #428]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	08db      	lsrs	r3, r3, #3
 800fe8e:	f003 0303 	and.w	r3, r3, #3
 800fe92:	4a6a      	ldr	r2, [pc, #424]	@ (801003c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800fe94:	fa22 f303 	lsr.w	r3, r2, r3
 800fe98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe9a:	e01f      	b.n	800fedc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fe9c:	4b66      	ldr	r3, [pc, #408]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fea8:	d106      	bne.n	800feb8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800feaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800feac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800feb0:	d102      	bne.n	800feb8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800feb2:	4b63      	ldr	r3, [pc, #396]	@ (8010040 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800feb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800feb6:	e011      	b.n	800fedc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800feb8:	4b5f      	ldr	r3, [pc, #380]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fec4:	d106      	bne.n	800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800fec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fecc:	d102      	bne.n	800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fece:	4b5d      	ldr	r3, [pc, #372]	@ (8010044 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fed2:	e003      	b.n	800fedc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fed4:	2300      	movs	r3, #0
 800fed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fed8:	f000 bc2f 	b.w	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fedc:	f000 bc2d 	b.w	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fee0:	4b59      	ldr	r3, [pc, #356]	@ (8010048 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fee4:	f000 bc29 	b.w	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800fee8:	2300      	movs	r3, #0
 800feea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800feec:	f000 bc25 	b.w	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800fef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fef4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800fef8:	430b      	orrs	r3, r1
 800fefa:	f040 80a7 	bne.w	801004c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800fefe:	4b4e      	ldr	r3, [pc, #312]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ff00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ff02:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ff06:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ff08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ff0e:	d054      	beq.n	800ffba <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ff10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ff16:	f200 808b 	bhi.w	8010030 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ff1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ff20:	f000 8083 	beq.w	801002a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ff24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff26:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ff2a:	f200 8081 	bhi.w	8010030 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ff2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ff34:	d02f      	beq.n	800ff96 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ff36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ff3c:	d878      	bhi.n	8010030 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ff3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d004      	beq.n	800ff4e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ff44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ff4a:	d012      	beq.n	800ff72 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ff4c:	e070      	b.n	8010030 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ff4e:	4b3a      	ldr	r3, [pc, #232]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ff56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ff5a:	d107      	bne.n	800ff6c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ff5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ff60:	4618      	mov	r0, r3
 800ff62:	f000 feb5 	bl	8010cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ff66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff6a:	e3e6      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff70:	e3e3      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ff72:	4b31      	ldr	r3, [pc, #196]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ff7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ff7e:	d107      	bne.n	800ff90 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff80:	f107 0318 	add.w	r3, r7, #24
 800ff84:	4618      	mov	r0, r3
 800ff86:	f000 fbfb 	bl	8010780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ff8a:	69bb      	ldr	r3, [r7, #24]
 800ff8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff8e:	e3d4      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ff90:	2300      	movs	r3, #0
 800ff92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff94:	e3d1      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ff96:	4b28      	ldr	r3, [pc, #160]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ff9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ffa2:	d107      	bne.n	800ffb4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ffa4:	f107 030c 	add.w	r3, r7, #12
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f000 fd3d 	bl	8010a28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffb2:	e3c2      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffb8:	e3bf      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ffba:	4b1f      	ldr	r3, [pc, #124]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ffbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ffbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ffc2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ffc4:	4b1c      	ldr	r3, [pc, #112]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f003 0304 	and.w	r3, r3, #4
 800ffcc:	2b04      	cmp	r3, #4
 800ffce:	d10c      	bne.n	800ffea <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ffd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d109      	bne.n	800ffea <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ffd6:	4b18      	ldr	r3, [pc, #96]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	08db      	lsrs	r3, r3, #3
 800ffdc:	f003 0303 	and.w	r3, r3, #3
 800ffe0:	4a16      	ldr	r2, [pc, #88]	@ (801003c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ffe2:	fa22 f303 	lsr.w	r3, r2, r3
 800ffe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ffe8:	e01e      	b.n	8010028 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ffea:	4b13      	ldr	r3, [pc, #76]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fff6:	d106      	bne.n	8010006 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800fff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fffa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fffe:	d102      	bne.n	8010006 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010000:	4b0f      	ldr	r3, [pc, #60]	@ (8010040 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8010002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010004:	e010      	b.n	8010028 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010006:	4b0c      	ldr	r3, [pc, #48]	@ (8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801000e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010012:	d106      	bne.n	8010022 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8010014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801001a:	d102      	bne.n	8010022 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801001c:	4b09      	ldr	r3, [pc, #36]	@ (8010044 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801001e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010020:	e002      	b.n	8010028 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010022:	2300      	movs	r3, #0
 8010024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010026:	e388      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8010028:	e387      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801002a:	4b07      	ldr	r3, [pc, #28]	@ (8010048 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801002c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801002e:	e384      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8010030:	2300      	movs	r3, #0
 8010032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010034:	e381      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8010036:	bf00      	nop
 8010038:	58024400 	.word	0x58024400
 801003c:	03d09000 	.word	0x03d09000
 8010040:	003d0900 	.word	0x003d0900
 8010044:	016e3600 	.word	0x016e3600
 8010048:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801004c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010050:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8010054:	430b      	orrs	r3, r1
 8010056:	f040 809c 	bne.w	8010192 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801005a:	4b9e      	ldr	r3, [pc, #632]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801005c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801005e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8010062:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010066:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801006a:	d054      	beq.n	8010116 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 801006c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801006e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010072:	f200 808b 	bhi.w	801018c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8010076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010078:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801007c:	f000 8083 	beq.w	8010186 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8010080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010082:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010086:	f200 8081 	bhi.w	801018c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801008a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801008c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010090:	d02f      	beq.n	80100f2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8010092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010094:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010098:	d878      	bhi.n	801018c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801009a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801009c:	2b00      	cmp	r3, #0
 801009e:	d004      	beq.n	80100aa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80100a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80100a6:	d012      	beq.n	80100ce <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80100a8:	e070      	b.n	801018c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80100aa:	4b8a      	ldr	r3, [pc, #552]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80100b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80100b6:	d107      	bne.n	80100c8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80100b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80100bc:	4618      	mov	r0, r3
 80100be:	f000 fe07 	bl	8010cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80100c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100c6:	e338      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80100c8:	2300      	movs	r3, #0
 80100ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100cc:	e335      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80100ce:	4b81      	ldr	r3, [pc, #516]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80100d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80100da:	d107      	bne.n	80100ec <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100dc:	f107 0318 	add.w	r3, r7, #24
 80100e0:	4618      	mov	r0, r3
 80100e2:	f000 fb4d 	bl	8010780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100ea:	e326      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80100ec:	2300      	movs	r3, #0
 80100ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100f0:	e323      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80100f2:	4b78      	ldr	r3, [pc, #480]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80100fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80100fe:	d107      	bne.n	8010110 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010100:	f107 030c 	add.w	r3, r7, #12
 8010104:	4618      	mov	r0, r3
 8010106:	f000 fc8f 	bl	8010a28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801010e:	e314      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010110:	2300      	movs	r3, #0
 8010112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010114:	e311      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010116:	4b6f      	ldr	r3, [pc, #444]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801011a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801011e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010120:	4b6c      	ldr	r3, [pc, #432]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f003 0304 	and.w	r3, r3, #4
 8010128:	2b04      	cmp	r3, #4
 801012a:	d10c      	bne.n	8010146 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 801012c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801012e:	2b00      	cmp	r3, #0
 8010130:	d109      	bne.n	8010146 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010132:	4b68      	ldr	r3, [pc, #416]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	08db      	lsrs	r3, r3, #3
 8010138:	f003 0303 	and.w	r3, r3, #3
 801013c:	4a66      	ldr	r2, [pc, #408]	@ (80102d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801013e:	fa22 f303 	lsr.w	r3, r2, r3
 8010142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010144:	e01e      	b.n	8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010146:	4b63      	ldr	r3, [pc, #396]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801014e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010152:	d106      	bne.n	8010162 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8010154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010156:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801015a:	d102      	bne.n	8010162 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801015c:	4b5f      	ldr	r3, [pc, #380]	@ (80102dc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801015e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010160:	e010      	b.n	8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010162:	4b5c      	ldr	r3, [pc, #368]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801016a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801016e:	d106      	bne.n	801017e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8010170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010176:	d102      	bne.n	801017e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010178:	4b59      	ldr	r3, [pc, #356]	@ (80102e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801017a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801017c:	e002      	b.n	8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801017e:	2300      	movs	r3, #0
 8010180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010182:	e2da      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8010184:	e2d9      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010186:	4b57      	ldr	r3, [pc, #348]	@ (80102e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801018a:	e2d6      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801018c:	2300      	movs	r3, #0
 801018e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010190:	e2d3      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010196:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 801019a:	430b      	orrs	r3, r1
 801019c:	f040 80a7 	bne.w	80102ee <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80101a0:	4b4c      	ldr	r3, [pc, #304]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80101a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101a4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80101a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80101aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80101b0:	d055      	beq.n	801025e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80101b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80101b8:	f200 8096 	bhi.w	80102e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80101bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80101c2:	f000 8084 	beq.w	80102ce <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80101c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80101cc:	f200 808c 	bhi.w	80102e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80101d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80101d6:	d030      	beq.n	801023a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80101d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80101de:	f200 8083 	bhi.w	80102e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80101e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d004      	beq.n	80101f2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80101e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80101ee:	d012      	beq.n	8010216 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80101f0:	e07a      	b.n	80102e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80101f2:	4b38      	ldr	r3, [pc, #224]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80101fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80101fe:	d107      	bne.n	8010210 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010200:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010204:	4618      	mov	r0, r3
 8010206:	f000 fd63 	bl	8010cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801020a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801020c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801020e:	e294      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010210:	2300      	movs	r3, #0
 8010212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010214:	e291      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010216:	4b2f      	ldr	r3, [pc, #188]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801021e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010222:	d107      	bne.n	8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010224:	f107 0318 	add.w	r3, r7, #24
 8010228:	4618      	mov	r0, r3
 801022a:	f000 faa9 	bl	8010780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801022e:	69bb      	ldr	r3, [r7, #24]
 8010230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010232:	e282      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010234:	2300      	movs	r3, #0
 8010236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010238:	e27f      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801023a:	4b26      	ldr	r3, [pc, #152]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010242:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010246:	d107      	bne.n	8010258 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010248:	f107 030c 	add.w	r3, r7, #12
 801024c:	4618      	mov	r0, r3
 801024e:	f000 fbeb 	bl	8010a28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010256:	e270      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010258:	2300      	movs	r3, #0
 801025a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801025c:	e26d      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801025e:	4b1d      	ldr	r3, [pc, #116]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010262:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010266:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010268:	4b1a      	ldr	r3, [pc, #104]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f003 0304 	and.w	r3, r3, #4
 8010270:	2b04      	cmp	r3, #4
 8010272:	d10c      	bne.n	801028e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8010274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010276:	2b00      	cmp	r3, #0
 8010278:	d109      	bne.n	801028e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801027a:	4b16      	ldr	r3, [pc, #88]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	08db      	lsrs	r3, r3, #3
 8010280:	f003 0303 	and.w	r3, r3, #3
 8010284:	4a14      	ldr	r2, [pc, #80]	@ (80102d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8010286:	fa22 f303 	lsr.w	r3, r2, r3
 801028a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801028c:	e01e      	b.n	80102cc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801028e:	4b11      	ldr	r3, [pc, #68]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801029a:	d106      	bne.n	80102aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 801029c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801029e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80102a2:	d102      	bne.n	80102aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80102a4:	4b0d      	ldr	r3, [pc, #52]	@ (80102dc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80102a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80102a8:	e010      	b.n	80102cc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80102aa:	4b0a      	ldr	r3, [pc, #40]	@ (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80102b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80102b6:	d106      	bne.n	80102c6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80102b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80102be:	d102      	bne.n	80102c6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80102c0:	4b07      	ldr	r3, [pc, #28]	@ (80102e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80102c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80102c4:	e002      	b.n	80102cc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80102c6:	2300      	movs	r3, #0
 80102c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80102ca:	e236      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80102cc:	e235      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80102ce:	4b05      	ldr	r3, [pc, #20]	@ (80102e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80102d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102d2:	e232      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80102d4:	58024400 	.word	0x58024400
 80102d8:	03d09000 	.word	0x03d09000
 80102dc:	003d0900 	.word	0x003d0900
 80102e0:	016e3600 	.word	0x016e3600
 80102e4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80102e8:	2300      	movs	r3, #0
 80102ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102ec:	e225      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80102ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102f2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80102f6:	430b      	orrs	r3, r1
 80102f8:	f040 8085 	bne.w	8010406 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80102fc:	4b9c      	ldr	r3, [pc, #624]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80102fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010300:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8010304:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8010306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801030c:	d06b      	beq.n	80103e6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 801030e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010314:	d874      	bhi.n	8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8010316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010318:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801031c:	d056      	beq.n	80103cc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 801031e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010320:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010324:	d86c      	bhi.n	8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8010326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010328:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801032c:	d03b      	beq.n	80103a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 801032e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010330:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010334:	d864      	bhi.n	8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8010336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010338:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801033c:	d021      	beq.n	8010382 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 801033e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010344:	d85c      	bhi.n	8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8010346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010348:	2b00      	cmp	r3, #0
 801034a:	d004      	beq.n	8010356 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 801034c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801034e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010352:	d004      	beq.n	801035e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8010354:	e054      	b.n	8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010356:	f7fe fb5f 	bl	800ea18 <HAL_RCC_GetPCLK1Freq>
 801035a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801035c:	e1ed      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801035e:	4b84      	ldr	r3, [pc, #528]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801036a:	d107      	bne.n	801037c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801036c:	f107 0318 	add.w	r3, r7, #24
 8010370:	4618      	mov	r0, r3
 8010372:	f000 fa05 	bl	8010780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010376:	69fb      	ldr	r3, [r7, #28]
 8010378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801037a:	e1de      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801037c:	2300      	movs	r3, #0
 801037e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010380:	e1db      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010382:	4b7b      	ldr	r3, [pc, #492]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801038a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801038e:	d107      	bne.n	80103a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010390:	f107 030c 	add.w	r3, r7, #12
 8010394:	4618      	mov	r0, r3
 8010396:	f000 fb47 	bl	8010a28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801039e:	e1cc      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80103a0:	2300      	movs	r3, #0
 80103a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103a4:	e1c9      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80103a6:	4b72      	ldr	r3, [pc, #456]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f003 0304 	and.w	r3, r3, #4
 80103ae:	2b04      	cmp	r3, #4
 80103b0:	d109      	bne.n	80103c6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103b2:	4b6f      	ldr	r3, [pc, #444]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	08db      	lsrs	r3, r3, #3
 80103b8:	f003 0303 	and.w	r3, r3, #3
 80103bc:	4a6d      	ldr	r2, [pc, #436]	@ (8010574 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80103be:	fa22 f303 	lsr.w	r3, r2, r3
 80103c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103c4:	e1b9      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80103c6:	2300      	movs	r3, #0
 80103c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103ca:	e1b6      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80103cc:	4b68      	ldr	r3, [pc, #416]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80103d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80103d8:	d102      	bne.n	80103e0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80103da:	4b67      	ldr	r3, [pc, #412]	@ (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80103dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103de:	e1ac      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80103e0:	2300      	movs	r3, #0
 80103e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103e4:	e1a9      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80103e6:	4b62      	ldr	r3, [pc, #392]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80103ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80103f2:	d102      	bne.n	80103fa <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80103f4:	4b61      	ldr	r3, [pc, #388]	@ (801057c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80103f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103f8:	e19f      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80103fa:	2300      	movs	r3, #0
 80103fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103fe:	e19c      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8010400:	2300      	movs	r3, #0
 8010402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010404:	e199      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010406:	e9d7 2300 	ldrd	r2, r3, [r7]
 801040a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 801040e:	430b      	orrs	r3, r1
 8010410:	d173      	bne.n	80104fa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010412:	4b57      	ldr	r3, [pc, #348]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010416:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801041a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801041c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801041e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010422:	d02f      	beq.n	8010484 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8010424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010426:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801042a:	d863      	bhi.n	80104f4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 801042c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801042e:	2b00      	cmp	r3, #0
 8010430:	d004      	beq.n	801043c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8010432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010438:	d012      	beq.n	8010460 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 801043a:	e05b      	b.n	80104f4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801043c:	4b4c      	ldr	r3, [pc, #304]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010444:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010448:	d107      	bne.n	801045a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801044a:	f107 0318 	add.w	r3, r7, #24
 801044e:	4618      	mov	r0, r3
 8010450:	f000 f996 	bl	8010780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010454:	69bb      	ldr	r3, [r7, #24]
 8010456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010458:	e16f      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801045a:	2300      	movs	r3, #0
 801045c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801045e:	e16c      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010460:	4b43      	ldr	r3, [pc, #268]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801046c:	d107      	bne.n	801047e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801046e:	f107 030c 	add.w	r3, r7, #12
 8010472:	4618      	mov	r0, r3
 8010474:	f000 fad8 	bl	8010a28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801047c:	e15d      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801047e:	2300      	movs	r3, #0
 8010480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010482:	e15a      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010484:	4b3a      	ldr	r3, [pc, #232]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010488:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801048c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801048e:	4b38      	ldr	r3, [pc, #224]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	f003 0304 	and.w	r3, r3, #4
 8010496:	2b04      	cmp	r3, #4
 8010498:	d10c      	bne.n	80104b4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 801049a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801049c:	2b00      	cmp	r3, #0
 801049e:	d109      	bne.n	80104b4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80104a0:	4b33      	ldr	r3, [pc, #204]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	08db      	lsrs	r3, r3, #3
 80104a6:	f003 0303 	and.w	r3, r3, #3
 80104aa:	4a32      	ldr	r2, [pc, #200]	@ (8010574 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80104ac:	fa22 f303 	lsr.w	r3, r2, r3
 80104b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80104b2:	e01e      	b.n	80104f2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80104b4:	4b2e      	ldr	r3, [pc, #184]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80104bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80104c0:	d106      	bne.n	80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80104c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80104c8:	d102      	bne.n	80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80104ca:	4b2b      	ldr	r3, [pc, #172]	@ (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80104cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80104ce:	e010      	b.n	80104f2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80104d0:	4b27      	ldr	r3, [pc, #156]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80104d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80104dc:	d106      	bne.n	80104ec <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80104de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80104e4:	d102      	bne.n	80104ec <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80104e6:	4b25      	ldr	r3, [pc, #148]	@ (801057c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80104e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80104ea:	e002      	b.n	80104f2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80104ec:	2300      	movs	r3, #0
 80104ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80104f0:	e123      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80104f2:	e122      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80104f4:	2300      	movs	r3, #0
 80104f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104f8:	e11f      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80104fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104fe:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8010502:	430b      	orrs	r3, r1
 8010504:	d13c      	bne.n	8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8010506:	4b1a      	ldr	r3, [pc, #104]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801050a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801050e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010512:	2b00      	cmp	r3, #0
 8010514:	d004      	beq.n	8010520 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8010516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801051c:	d012      	beq.n	8010544 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 801051e:	e023      	b.n	8010568 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010520:	4b13      	ldr	r3, [pc, #76]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010528:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801052c:	d107      	bne.n	801053e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801052e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010532:	4618      	mov	r0, r3
 8010534:	f000 fbcc 	bl	8010cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801053a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801053c:	e0fd      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801053e:	2300      	movs	r3, #0
 8010540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010542:	e0fa      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010544:	4b0a      	ldr	r3, [pc, #40]	@ (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801054c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010550:	d107      	bne.n	8010562 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010552:	f107 0318 	add.w	r3, r7, #24
 8010556:	4618      	mov	r0, r3
 8010558:	f000 f912 	bl	8010780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801055c:	6a3b      	ldr	r3, [r7, #32]
 801055e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010560:	e0eb      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010562:	2300      	movs	r3, #0
 8010564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010566:	e0e8      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8010568:	2300      	movs	r3, #0
 801056a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801056c:	e0e5      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801056e:	bf00      	nop
 8010570:	58024400 	.word	0x58024400
 8010574:	03d09000 	.word	0x03d09000
 8010578:	003d0900 	.word	0x003d0900
 801057c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010584:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8010588:	430b      	orrs	r3, r1
 801058a:	f040 8085 	bne.w	8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801058e:	4b6d      	ldr	r3, [pc, #436]	@ (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8010590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010592:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8010596:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801059a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801059e:	d06b      	beq.n	8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80105a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80105a6:	d874      	bhi.n	8010692 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80105a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80105ae:	d056      	beq.n	801065e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80105b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80105b6:	d86c      	bhi.n	8010692 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80105b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80105be:	d03b      	beq.n	8010638 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80105c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80105c6:	d864      	bhi.n	8010692 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80105c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80105ce:	d021      	beq.n	8010614 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80105d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80105d6:	d85c      	bhi.n	8010692 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80105d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d004      	beq.n	80105e8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80105de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80105e4:	d004      	beq.n	80105f0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80105e6:	e054      	b.n	8010692 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80105e8:	f000 f8b4 	bl	8010754 <HAL_RCCEx_GetD3PCLK1Freq>
 80105ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80105ee:	e0a4      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80105f0:	4b54      	ldr	r3, [pc, #336]	@ (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80105f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80105fc:	d107      	bne.n	801060e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80105fe:	f107 0318 	add.w	r3, r7, #24
 8010602:	4618      	mov	r0, r3
 8010604:	f000 f8bc 	bl	8010780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010608:	69fb      	ldr	r3, [r7, #28]
 801060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801060c:	e095      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801060e:	2300      	movs	r3, #0
 8010610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010612:	e092      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010614:	4b4b      	ldr	r3, [pc, #300]	@ (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801061c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010620:	d107      	bne.n	8010632 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010622:	f107 030c 	add.w	r3, r7, #12
 8010626:	4618      	mov	r0, r3
 8010628:	f000 f9fe 	bl	8010a28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010630:	e083      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010632:	2300      	movs	r3, #0
 8010634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010636:	e080      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010638:	4b42      	ldr	r3, [pc, #264]	@ (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f003 0304 	and.w	r3, r3, #4
 8010640:	2b04      	cmp	r3, #4
 8010642:	d109      	bne.n	8010658 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010644:	4b3f      	ldr	r3, [pc, #252]	@ (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	08db      	lsrs	r3, r3, #3
 801064a:	f003 0303 	and.w	r3, r3, #3
 801064e:	4a3e      	ldr	r2, [pc, #248]	@ (8010748 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8010650:	fa22 f303 	lsr.w	r3, r2, r3
 8010654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010656:	e070      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010658:	2300      	movs	r3, #0
 801065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801065c:	e06d      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801065e:	4b39      	ldr	r3, [pc, #228]	@ (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801066a:	d102      	bne.n	8010672 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 801066c:	4b37      	ldr	r3, [pc, #220]	@ (801074c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 801066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010670:	e063      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010672:	2300      	movs	r3, #0
 8010674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010676:	e060      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010678:	4b32      	ldr	r3, [pc, #200]	@ (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010684:	d102      	bne.n	801068c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8010686:	4b32      	ldr	r3, [pc, #200]	@ (8010750 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8010688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801068a:	e056      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801068c:	2300      	movs	r3, #0
 801068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010690:	e053      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010692:	2300      	movs	r3, #0
 8010694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010696:	e050      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010698:	e9d7 2300 	ldrd	r2, r3, [r7]
 801069c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80106a0:	430b      	orrs	r3, r1
 80106a2:	d148      	bne.n	8010736 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80106a4:	4b27      	ldr	r3, [pc, #156]	@ (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80106a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80106a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80106ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80106ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80106b4:	d02a      	beq.n	801070c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80106b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80106bc:	d838      	bhi.n	8010730 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80106be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d004      	beq.n	80106ce <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80106c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80106ca:	d00d      	beq.n	80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80106cc:	e030      	b.n	8010730 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80106ce:	4b1d      	ldr	r3, [pc, #116]	@ (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80106d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80106da:	d102      	bne.n	80106e2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80106dc:	4b1c      	ldr	r3, [pc, #112]	@ (8010750 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80106de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106e0:	e02b      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80106e2:	2300      	movs	r3, #0
 80106e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80106e6:	e028      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80106e8:	4b16      	ldr	r3, [pc, #88]	@ (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80106f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80106f4:	d107      	bne.n	8010706 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80106f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80106fa:	4618      	mov	r0, r3
 80106fc:	f000 fae8 	bl	8010cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010704:	e019      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010706:	2300      	movs	r3, #0
 8010708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801070a:	e016      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801070c:	4b0d      	ldr	r3, [pc, #52]	@ (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010714:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010718:	d107      	bne.n	801072a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801071a:	f107 0318 	add.w	r3, r7, #24
 801071e:	4618      	mov	r0, r3
 8010720:	f000 f82e 	bl	8010780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010724:	69fb      	ldr	r3, [r7, #28]
 8010726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010728:	e007      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801072a:	2300      	movs	r3, #0
 801072c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801072e:	e004      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8010730:	2300      	movs	r3, #0
 8010732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010734:	e001      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8010736:	2300      	movs	r3, #0
 8010738:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801073a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801073c:	4618      	mov	r0, r3
 801073e:	3740      	adds	r7, #64	@ 0x40
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}
 8010744:	58024400 	.word	0x58024400
 8010748:	03d09000 	.word	0x03d09000
 801074c:	003d0900 	.word	0x003d0900
 8010750:	016e3600 	.word	0x016e3600

08010754 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010758:	f7fe f92e 	bl	800e9b8 <HAL_RCC_GetHCLKFreq>
 801075c:	4602      	mov	r2, r0
 801075e:	4b06      	ldr	r3, [pc, #24]	@ (8010778 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010760:	6a1b      	ldr	r3, [r3, #32]
 8010762:	091b      	lsrs	r3, r3, #4
 8010764:	f003 0307 	and.w	r3, r3, #7
 8010768:	4904      	ldr	r1, [pc, #16]	@ (801077c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801076a:	5ccb      	ldrb	r3, [r1, r3]
 801076c:	f003 031f 	and.w	r3, r3, #31
 8010770:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010774:	4618      	mov	r0, r3
 8010776:	bd80      	pop	{r7, pc}
 8010778:	58024400 	.word	0x58024400
 801077c:	0801e474 	.word	0x0801e474

08010780 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010780:	b480      	push	{r7}
 8010782:	b089      	sub	sp, #36	@ 0x24
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010788:	4ba1      	ldr	r3, [pc, #644]	@ (8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801078a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801078c:	f003 0303 	and.w	r3, r3, #3
 8010790:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010792:	4b9f      	ldr	r3, [pc, #636]	@ (8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010796:	0b1b      	lsrs	r3, r3, #12
 8010798:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801079c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801079e:	4b9c      	ldr	r3, [pc, #624]	@ (8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80107a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107a2:	091b      	lsrs	r3, r3, #4
 80107a4:	f003 0301 	and.w	r3, r3, #1
 80107a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80107aa:	4b99      	ldr	r3, [pc, #612]	@ (8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80107ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107ae:	08db      	lsrs	r3, r3, #3
 80107b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80107b4:	693a      	ldr	r2, [r7, #16]
 80107b6:	fb02 f303 	mul.w	r3, r2, r3
 80107ba:	ee07 3a90 	vmov	s15, r3
 80107be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	f000 8111 	beq.w	80109f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80107ce:	69bb      	ldr	r3, [r7, #24]
 80107d0:	2b02      	cmp	r3, #2
 80107d2:	f000 8083 	beq.w	80108dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	2b02      	cmp	r3, #2
 80107da:	f200 80a1 	bhi.w	8010920 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d003      	beq.n	80107ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80107e4:	69bb      	ldr	r3, [r7, #24]
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	d056      	beq.n	8010898 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80107ea:	e099      	b.n	8010920 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80107ec:	4b88      	ldr	r3, [pc, #544]	@ (8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f003 0320 	and.w	r3, r3, #32
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d02d      	beq.n	8010854 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80107f8:	4b85      	ldr	r3, [pc, #532]	@ (8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	08db      	lsrs	r3, r3, #3
 80107fe:	f003 0303 	and.w	r3, r3, #3
 8010802:	4a84      	ldr	r2, [pc, #528]	@ (8010a14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010804:	fa22 f303 	lsr.w	r3, r2, r3
 8010808:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	ee07 3a90 	vmov	s15, r3
 8010810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	ee07 3a90 	vmov	s15, r3
 801081a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801081e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010822:	4b7b      	ldr	r3, [pc, #492]	@ (8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801082a:	ee07 3a90 	vmov	s15, r3
 801082e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010832:	ed97 6a03 	vldr	s12, [r7, #12]
 8010836:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801083a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801083e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801084a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801084e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010852:	e087      	b.n	8010964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	ee07 3a90 	vmov	s15, r3
 801085a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801085e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010a1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010866:	4b6a      	ldr	r3, [pc, #424]	@ (8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801086a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801086e:	ee07 3a90 	vmov	s15, r3
 8010872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010876:	ed97 6a03 	vldr	s12, [r7, #12]
 801087a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8010a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801087e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801088a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801088e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010896:	e065      	b.n	8010964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	ee07 3a90 	vmov	s15, r3
 801089e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010a20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80108a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80108aa:	4b59      	ldr	r3, [pc, #356]	@ (8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108b2:	ee07 3a90 	vmov	s15, r3
 80108b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80108be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8010a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80108c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80108c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80108ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80108ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80108d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80108da:	e043      	b.n	8010964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	ee07 3a90 	vmov	s15, r3
 80108e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80108ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80108ee:	4b48      	ldr	r3, [pc, #288]	@ (8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108f6:	ee07 3a90 	vmov	s15, r3
 80108fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8010902:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801090a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801090e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010916:	ee67 7a27 	vmul.f32	s15, s14, s15
 801091a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801091e:	e021      	b.n	8010964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	ee07 3a90 	vmov	s15, r3
 8010926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801092a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010a20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801092e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010932:	4b37      	ldr	r3, [pc, #220]	@ (8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801093a:	ee07 3a90 	vmov	s15, r3
 801093e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010942:	ed97 6a03 	vldr	s12, [r7, #12]
 8010946:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801094a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801094e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801095a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801095e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010962:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010964:	4b2a      	ldr	r3, [pc, #168]	@ (8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010968:	0a5b      	lsrs	r3, r3, #9
 801096a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801096e:	ee07 3a90 	vmov	s15, r3
 8010972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010976:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801097a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801097e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801098a:	ee17 2a90 	vmov	r2, s15
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010992:	4b1f      	ldr	r3, [pc, #124]	@ (8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010996:	0c1b      	lsrs	r3, r3, #16
 8010998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801099c:	ee07 3a90 	vmov	s15, r3
 80109a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80109a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80109ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80109b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80109b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80109b8:	ee17 2a90 	vmov	r2, s15
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80109c0:	4b13      	ldr	r3, [pc, #76]	@ (8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80109c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109c4:	0e1b      	lsrs	r3, r3, #24
 80109c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80109ca:	ee07 3a90 	vmov	s15, r3
 80109ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80109d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80109da:	edd7 6a07 	vldr	s13, [r7, #28]
 80109de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80109e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80109e6:	ee17 2a90 	vmov	r2, s15
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80109ee:	e008      	b.n	8010a02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2200      	movs	r2, #0
 80109f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2200      	movs	r2, #0
 80109fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2200      	movs	r2, #0
 8010a00:	609a      	str	r2, [r3, #8]
}
 8010a02:	bf00      	nop
 8010a04:	3724      	adds	r7, #36	@ 0x24
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr
 8010a0e:	bf00      	nop
 8010a10:	58024400 	.word	0x58024400
 8010a14:	03d09000 	.word	0x03d09000
 8010a18:	46000000 	.word	0x46000000
 8010a1c:	4c742400 	.word	0x4c742400
 8010a20:	4a742400 	.word	0x4a742400
 8010a24:	4bb71b00 	.word	0x4bb71b00

08010a28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b089      	sub	sp, #36	@ 0x24
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010a30:	4ba1      	ldr	r3, [pc, #644]	@ (8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a34:	f003 0303 	and.w	r3, r3, #3
 8010a38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010a3a:	4b9f      	ldr	r3, [pc, #636]	@ (8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a3e:	0d1b      	lsrs	r3, r3, #20
 8010a40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010a44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010a46:	4b9c      	ldr	r3, [pc, #624]	@ (8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a4a:	0a1b      	lsrs	r3, r3, #8
 8010a4c:	f003 0301 	and.w	r3, r3, #1
 8010a50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010a52:	4b99      	ldr	r3, [pc, #612]	@ (8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a56:	08db      	lsrs	r3, r3, #3
 8010a58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a5c:	693a      	ldr	r2, [r7, #16]
 8010a5e:	fb02 f303 	mul.w	r3, r2, r3
 8010a62:	ee07 3a90 	vmov	s15, r3
 8010a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010a6e:	697b      	ldr	r3, [r7, #20]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	f000 8111 	beq.w	8010c98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010a76:	69bb      	ldr	r3, [r7, #24]
 8010a78:	2b02      	cmp	r3, #2
 8010a7a:	f000 8083 	beq.w	8010b84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010a7e:	69bb      	ldr	r3, [r7, #24]
 8010a80:	2b02      	cmp	r3, #2
 8010a82:	f200 80a1 	bhi.w	8010bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010a86:	69bb      	ldr	r3, [r7, #24]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d003      	beq.n	8010a94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010a8c:	69bb      	ldr	r3, [r7, #24]
 8010a8e:	2b01      	cmp	r3, #1
 8010a90:	d056      	beq.n	8010b40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010a92:	e099      	b.n	8010bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010a94:	4b88      	ldr	r3, [pc, #544]	@ (8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f003 0320 	and.w	r3, r3, #32
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d02d      	beq.n	8010afc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010aa0:	4b85      	ldr	r3, [pc, #532]	@ (8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	08db      	lsrs	r3, r3, #3
 8010aa6:	f003 0303 	and.w	r3, r3, #3
 8010aaa:	4a84      	ldr	r2, [pc, #528]	@ (8010cbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010aac:	fa22 f303 	lsr.w	r3, r2, r3
 8010ab0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	ee07 3a90 	vmov	s15, r3
 8010ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	ee07 3a90 	vmov	s15, r3
 8010ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010aca:	4b7b      	ldr	r3, [pc, #492]	@ (8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ad2:	ee07 3a90 	vmov	s15, r3
 8010ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ade:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010af6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010afa:	e087      	b.n	8010c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	ee07 3a90 	vmov	s15, r3
 8010b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b16:	ee07 3a90 	vmov	s15, r3
 8010b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8010cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010b3e:	e065      	b.n	8010c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	ee07 3a90 	vmov	s15, r3
 8010b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b52:	4b59      	ldr	r3, [pc, #356]	@ (8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b5a:	ee07 3a90 	vmov	s15, r3
 8010b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8010cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010b82:	e043      	b.n	8010c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	ee07 3a90 	vmov	s15, r3
 8010b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010ccc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b96:	4b48      	ldr	r3, [pc, #288]	@ (8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b9e:	ee07 3a90 	vmov	s15, r3
 8010ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8010baa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010bc6:	e021      	b.n	8010c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	ee07 3a90 	vmov	s15, r3
 8010bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bda:	4b37      	ldr	r3, [pc, #220]	@ (8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010be2:	ee07 3a90 	vmov	s15, r3
 8010be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c10:	0a5b      	lsrs	r3, r3, #9
 8010c12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c16:	ee07 3a90 	vmov	s15, r3
 8010c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010c22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c26:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c32:	ee17 2a90 	vmov	r2, s15
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c3e:	0c1b      	lsrs	r3, r3, #16
 8010c40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c44:	ee07 3a90 	vmov	s15, r3
 8010c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010c50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c54:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c60:	ee17 2a90 	vmov	r2, s15
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010c68:	4b13      	ldr	r3, [pc, #76]	@ (8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c6c:	0e1b      	lsrs	r3, r3, #24
 8010c6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c72:	ee07 3a90 	vmov	s15, r3
 8010c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010c7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c82:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c8e:	ee17 2a90 	vmov	r2, s15
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010c96:	e008      	b.n	8010caa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	609a      	str	r2, [r3, #8]
}
 8010caa:	bf00      	nop
 8010cac:	3724      	adds	r7, #36	@ 0x24
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop
 8010cb8:	58024400 	.word	0x58024400
 8010cbc:	03d09000 	.word	0x03d09000
 8010cc0:	46000000 	.word	0x46000000
 8010cc4:	4c742400 	.word	0x4c742400
 8010cc8:	4a742400 	.word	0x4a742400
 8010ccc:	4bb71b00 	.word	0x4bb71b00

08010cd0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b089      	sub	sp, #36	@ 0x24
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010cd8:	4ba0      	ldr	r3, [pc, #640]	@ (8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cdc:	f003 0303 	and.w	r3, r3, #3
 8010ce0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8010ce2:	4b9e      	ldr	r3, [pc, #632]	@ (8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ce6:	091b      	lsrs	r3, r3, #4
 8010ce8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010cec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010cee:	4b9b      	ldr	r3, [pc, #620]	@ (8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cf2:	f003 0301 	and.w	r3, r3, #1
 8010cf6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010cf8:	4b98      	ldr	r3, [pc, #608]	@ (8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010cfc:	08db      	lsrs	r3, r3, #3
 8010cfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d02:	693a      	ldr	r2, [r7, #16]
 8010d04:	fb02 f303 	mul.w	r3, r2, r3
 8010d08:	ee07 3a90 	vmov	s15, r3
 8010d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d10:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	f000 8111 	beq.w	8010f3e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010d1c:	69bb      	ldr	r3, [r7, #24]
 8010d1e:	2b02      	cmp	r3, #2
 8010d20:	f000 8083 	beq.w	8010e2a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010d24:	69bb      	ldr	r3, [r7, #24]
 8010d26:	2b02      	cmp	r3, #2
 8010d28:	f200 80a1 	bhi.w	8010e6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010d2c:	69bb      	ldr	r3, [r7, #24]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d003      	beq.n	8010d3a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010d32:	69bb      	ldr	r3, [r7, #24]
 8010d34:	2b01      	cmp	r3, #1
 8010d36:	d056      	beq.n	8010de6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010d38:	e099      	b.n	8010e6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d3a:	4b88      	ldr	r3, [pc, #544]	@ (8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	f003 0320 	and.w	r3, r3, #32
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d02d      	beq.n	8010da2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010d46:	4b85      	ldr	r3, [pc, #532]	@ (8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	08db      	lsrs	r3, r3, #3
 8010d4c:	f003 0303 	and.w	r3, r3, #3
 8010d50:	4a83      	ldr	r2, [pc, #524]	@ (8010f60 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010d52:	fa22 f303 	lsr.w	r3, r2, r3
 8010d56:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	ee07 3a90 	vmov	s15, r3
 8010d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	ee07 3a90 	vmov	s15, r3
 8010d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d70:	4b7a      	ldr	r3, [pc, #488]	@ (8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d78:	ee07 3a90 	vmov	s15, r3
 8010d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d80:	ed97 6a03 	vldr	s12, [r7, #12]
 8010d84:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8010f64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010d88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010d8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010d94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d9c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010da0:	e087      	b.n	8010eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	ee07 3a90 	vmov	s15, r3
 8010da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dac:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8010f68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010db4:	4b69      	ldr	r3, [pc, #420]	@ (8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dbc:	ee07 3a90 	vmov	s15, r3
 8010dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010dc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8010dc8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8010f64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010dd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010de0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010de4:	e065      	b.n	8010eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	ee07 3a90 	vmov	s15, r3
 8010dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010df0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8010f6c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010df8:	4b58      	ldr	r3, [pc, #352]	@ (8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e00:	ee07 3a90 	vmov	s15, r3
 8010e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e08:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e0c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8010f64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e28:	e043      	b.n	8010eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	ee07 3a90 	vmov	s15, r3
 8010e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e34:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8010f70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e3c:	4b47      	ldr	r3, [pc, #284]	@ (8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e44:	ee07 3a90 	vmov	s15, r3
 8010e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e50:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8010f64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e6c:	e021      	b.n	8010eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	ee07 3a90 	vmov	s15, r3
 8010e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e78:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010f68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e80:	4b36      	ldr	r3, [pc, #216]	@ (8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e88:	ee07 3a90 	vmov	s15, r3
 8010e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e90:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e94:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010f64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ea0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010eb0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010eb6:	0a5b      	lsrs	r3, r3, #9
 8010eb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010ebc:	ee07 3a90 	vmov	s15, r3
 8010ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ec4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010ec8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ecc:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ed8:	ee17 2a90 	vmov	r2, s15
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ee4:	0c1b      	lsrs	r3, r3, #16
 8010ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010eea:	ee07 3a90 	vmov	s15, r3
 8010eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ef2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8010efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f06:	ee17 2a90 	vmov	r2, s15
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8010f0e:	4b13      	ldr	r3, [pc, #76]	@ (8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f12:	0e1b      	lsrs	r3, r3, #24
 8010f14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f18:	ee07 3a90 	vmov	s15, r3
 8010f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010f24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f34:	ee17 2a90 	vmov	r2, s15
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010f3c:	e008      	b.n	8010f50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2200      	movs	r2, #0
 8010f42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2200      	movs	r2, #0
 8010f48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	609a      	str	r2, [r3, #8]
}
 8010f50:	bf00      	nop
 8010f52:	3724      	adds	r7, #36	@ 0x24
 8010f54:	46bd      	mov	sp, r7
 8010f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5a:	4770      	bx	lr
 8010f5c:	58024400 	.word	0x58024400
 8010f60:	03d09000 	.word	0x03d09000
 8010f64:	46000000 	.word	0x46000000
 8010f68:	4c742400 	.word	0x4c742400
 8010f6c:	4a742400 	.word	0x4a742400
 8010f70:	4bb71b00 	.word	0x4bb71b00

08010f74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b084      	sub	sp, #16
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
 8010f7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010f82:	4b53      	ldr	r3, [pc, #332]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8010f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f86:	f003 0303 	and.w	r3, r3, #3
 8010f8a:	2b03      	cmp	r3, #3
 8010f8c:	d101      	bne.n	8010f92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8010f8e:	2301      	movs	r3, #1
 8010f90:	e099      	b.n	80110c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010f92:	4b4f      	ldr	r3, [pc, #316]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	4a4e      	ldr	r2, [pc, #312]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8010f98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010f9e:	f7f6 ff39 	bl	8007e14 <HAL_GetTick>
 8010fa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010fa4:	e008      	b.n	8010fb8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010fa6:	f7f6 ff35 	bl	8007e14 <HAL_GetTick>
 8010faa:	4602      	mov	r2, r0
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	1ad3      	subs	r3, r2, r3
 8010fb0:	2b02      	cmp	r3, #2
 8010fb2:	d901      	bls.n	8010fb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010fb4:	2303      	movs	r3, #3
 8010fb6:	e086      	b.n	80110c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010fb8:	4b45      	ldr	r3, [pc, #276]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d1f0      	bne.n	8010fa6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010fc4:	4b42      	ldr	r3, [pc, #264]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8010fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fc8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	031b      	lsls	r3, r3, #12
 8010fd2:	493f      	ldr	r1, [pc, #252]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8010fd4:	4313      	orrs	r3, r2
 8010fd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	685b      	ldr	r3, [r3, #4]
 8010fdc:	3b01      	subs	r3, #1
 8010fde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	689b      	ldr	r3, [r3, #8]
 8010fe6:	3b01      	subs	r3, #1
 8010fe8:	025b      	lsls	r3, r3, #9
 8010fea:	b29b      	uxth	r3, r3
 8010fec:	431a      	orrs	r2, r3
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	3b01      	subs	r3, #1
 8010ff4:	041b      	lsls	r3, r3, #16
 8010ff6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010ffa:	431a      	orrs	r2, r3
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	691b      	ldr	r3, [r3, #16]
 8011000:	3b01      	subs	r3, #1
 8011002:	061b      	lsls	r3, r3, #24
 8011004:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011008:	4931      	ldr	r1, [pc, #196]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 801100a:	4313      	orrs	r3, r2
 801100c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801100e:	4b30      	ldr	r3, [pc, #192]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8011010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011012:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	695b      	ldr	r3, [r3, #20]
 801101a:	492d      	ldr	r1, [pc, #180]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 801101c:	4313      	orrs	r3, r2
 801101e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011020:	4b2b      	ldr	r3, [pc, #172]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8011022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011024:	f023 0220 	bic.w	r2, r3, #32
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	699b      	ldr	r3, [r3, #24]
 801102c:	4928      	ldr	r1, [pc, #160]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 801102e:	4313      	orrs	r3, r2
 8011030:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011032:	4b27      	ldr	r3, [pc, #156]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8011034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011036:	4a26      	ldr	r2, [pc, #152]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8011038:	f023 0310 	bic.w	r3, r3, #16
 801103c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801103e:	4b24      	ldr	r3, [pc, #144]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8011040:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011042:	4b24      	ldr	r3, [pc, #144]	@ (80110d4 <RCCEx_PLL2_Config+0x160>)
 8011044:	4013      	ands	r3, r2
 8011046:	687a      	ldr	r2, [r7, #4]
 8011048:	69d2      	ldr	r2, [r2, #28]
 801104a:	00d2      	lsls	r2, r2, #3
 801104c:	4920      	ldr	r1, [pc, #128]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 801104e:	4313      	orrs	r3, r2
 8011050:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011052:	4b1f      	ldr	r3, [pc, #124]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8011054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011056:	4a1e      	ldr	r2, [pc, #120]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8011058:	f043 0310 	orr.w	r3, r3, #16
 801105c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d106      	bne.n	8011072 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011064:	4b1a      	ldr	r3, [pc, #104]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8011066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011068:	4a19      	ldr	r2, [pc, #100]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 801106a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801106e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011070:	e00f      	b.n	8011092 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	2b01      	cmp	r3, #1
 8011076:	d106      	bne.n	8011086 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011078:	4b15      	ldr	r3, [pc, #84]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 801107a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801107c:	4a14      	ldr	r2, [pc, #80]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 801107e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011082:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011084:	e005      	b.n	8011092 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011086:	4b12      	ldr	r3, [pc, #72]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8011088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801108a:	4a11      	ldr	r2, [pc, #68]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 801108c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011090:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011092:	4b0f      	ldr	r3, [pc, #60]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	4a0e      	ldr	r2, [pc, #56]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 8011098:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801109c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801109e:	f7f6 feb9 	bl	8007e14 <HAL_GetTick>
 80110a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80110a4:	e008      	b.n	80110b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80110a6:	f7f6 feb5 	bl	8007e14 <HAL_GetTick>
 80110aa:	4602      	mov	r2, r0
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	1ad3      	subs	r3, r2, r3
 80110b0:	2b02      	cmp	r3, #2
 80110b2:	d901      	bls.n	80110b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80110b4:	2303      	movs	r3, #3
 80110b6:	e006      	b.n	80110c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80110b8:	4b05      	ldr	r3, [pc, #20]	@ (80110d0 <RCCEx_PLL2_Config+0x15c>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d0f0      	beq.n	80110a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80110c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3710      	adds	r7, #16
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	58024400 	.word	0x58024400
 80110d4:	ffff0007 	.word	0xffff0007

080110d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b084      	sub	sp, #16
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80110e2:	2300      	movs	r3, #0
 80110e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80110e6:	4b53      	ldr	r3, [pc, #332]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80110e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110ea:	f003 0303 	and.w	r3, r3, #3
 80110ee:	2b03      	cmp	r3, #3
 80110f0:	d101      	bne.n	80110f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80110f2:	2301      	movs	r3, #1
 80110f4:	e099      	b.n	801122a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80110f6:	4b4f      	ldr	r3, [pc, #316]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	4a4e      	ldr	r2, [pc, #312]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80110fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011102:	f7f6 fe87 	bl	8007e14 <HAL_GetTick>
 8011106:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011108:	e008      	b.n	801111c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801110a:	f7f6 fe83 	bl	8007e14 <HAL_GetTick>
 801110e:	4602      	mov	r2, r0
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	1ad3      	subs	r3, r2, r3
 8011114:	2b02      	cmp	r3, #2
 8011116:	d901      	bls.n	801111c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011118:	2303      	movs	r3, #3
 801111a:	e086      	b.n	801122a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801111c:	4b45      	ldr	r3, [pc, #276]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011124:	2b00      	cmp	r3, #0
 8011126:	d1f0      	bne.n	801110a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011128:	4b42      	ldr	r3, [pc, #264]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 801112a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801112c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	051b      	lsls	r3, r3, #20
 8011136:	493f      	ldr	r1, [pc, #252]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 8011138:	4313      	orrs	r3, r2
 801113a:	628b      	str	r3, [r1, #40]	@ 0x28
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	685b      	ldr	r3, [r3, #4]
 8011140:	3b01      	subs	r3, #1
 8011142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	689b      	ldr	r3, [r3, #8]
 801114a:	3b01      	subs	r3, #1
 801114c:	025b      	lsls	r3, r3, #9
 801114e:	b29b      	uxth	r3, r3
 8011150:	431a      	orrs	r2, r3
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	68db      	ldr	r3, [r3, #12]
 8011156:	3b01      	subs	r3, #1
 8011158:	041b      	lsls	r3, r3, #16
 801115a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801115e:	431a      	orrs	r2, r3
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	691b      	ldr	r3, [r3, #16]
 8011164:	3b01      	subs	r3, #1
 8011166:	061b      	lsls	r3, r3, #24
 8011168:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801116c:	4931      	ldr	r1, [pc, #196]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 801116e:	4313      	orrs	r3, r2
 8011170:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011172:	4b30      	ldr	r3, [pc, #192]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 8011174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011176:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	695b      	ldr	r3, [r3, #20]
 801117e:	492d      	ldr	r1, [pc, #180]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 8011180:	4313      	orrs	r3, r2
 8011182:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011184:	4b2b      	ldr	r3, [pc, #172]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 8011186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011188:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	699b      	ldr	r3, [r3, #24]
 8011190:	4928      	ldr	r1, [pc, #160]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 8011192:	4313      	orrs	r3, r2
 8011194:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011196:	4b27      	ldr	r3, [pc, #156]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 8011198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801119a:	4a26      	ldr	r2, [pc, #152]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 801119c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80111a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80111a2:	4b24      	ldr	r3, [pc, #144]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80111a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80111a6:	4b24      	ldr	r3, [pc, #144]	@ (8011238 <RCCEx_PLL3_Config+0x160>)
 80111a8:	4013      	ands	r3, r2
 80111aa:	687a      	ldr	r2, [r7, #4]
 80111ac:	69d2      	ldr	r2, [r2, #28]
 80111ae:	00d2      	lsls	r2, r2, #3
 80111b0:	4920      	ldr	r1, [pc, #128]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80111b2:	4313      	orrs	r3, r2
 80111b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80111b6:	4b1f      	ldr	r3, [pc, #124]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80111b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111ba:	4a1e      	ldr	r2, [pc, #120]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80111bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80111c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d106      	bne.n	80111d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80111c8:	4b1a      	ldr	r3, [pc, #104]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80111ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111cc:	4a19      	ldr	r2, [pc, #100]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80111ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80111d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80111d4:	e00f      	b.n	80111f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	2b01      	cmp	r3, #1
 80111da:	d106      	bne.n	80111ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80111dc:	4b15      	ldr	r3, [pc, #84]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80111de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111e0:	4a14      	ldr	r2, [pc, #80]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80111e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80111e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80111e8:	e005      	b.n	80111f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80111ea:	4b12      	ldr	r3, [pc, #72]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80111ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111ee:	4a11      	ldr	r2, [pc, #68]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80111f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80111f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80111f6:	4b0f      	ldr	r3, [pc, #60]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	4a0e      	ldr	r2, [pc, #56]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 80111fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011202:	f7f6 fe07 	bl	8007e14 <HAL_GetTick>
 8011206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011208:	e008      	b.n	801121c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801120a:	f7f6 fe03 	bl	8007e14 <HAL_GetTick>
 801120e:	4602      	mov	r2, r0
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	1ad3      	subs	r3, r2, r3
 8011214:	2b02      	cmp	r3, #2
 8011216:	d901      	bls.n	801121c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011218:	2303      	movs	r3, #3
 801121a:	e006      	b.n	801122a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801121c:	4b05      	ldr	r3, [pc, #20]	@ (8011234 <RCCEx_PLL3_Config+0x15c>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011224:	2b00      	cmp	r3, #0
 8011226:	d0f0      	beq.n	801120a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011228:	7bfb      	ldrb	r3, [r7, #15]
}
 801122a:	4618      	mov	r0, r3
 801122c:	3710      	adds	r7, #16
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}
 8011232:	bf00      	nop
 8011234:	58024400 	.word	0x58024400
 8011238:	ffff0007 	.word	0xffff0007

0801123c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b084      	sub	sp, #16
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d101      	bne.n	801124e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801124a:	2301      	movs	r3, #1
 801124c:	e10f      	b.n	801146e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2200      	movs	r2, #0
 8011252:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	4a87      	ldr	r2, [pc, #540]	@ (8011478 <HAL_SPI_Init+0x23c>)
 801125a:	4293      	cmp	r3, r2
 801125c:	d00f      	beq.n	801127e <HAL_SPI_Init+0x42>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	4a86      	ldr	r2, [pc, #536]	@ (801147c <HAL_SPI_Init+0x240>)
 8011264:	4293      	cmp	r3, r2
 8011266:	d00a      	beq.n	801127e <HAL_SPI_Init+0x42>
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	4a84      	ldr	r2, [pc, #528]	@ (8011480 <HAL_SPI_Init+0x244>)
 801126e:	4293      	cmp	r3, r2
 8011270:	d005      	beq.n	801127e <HAL_SPI_Init+0x42>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	68db      	ldr	r3, [r3, #12]
 8011276:	2b0f      	cmp	r3, #15
 8011278:	d901      	bls.n	801127e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801127a:	2301      	movs	r3, #1
 801127c:	e0f7      	b.n	801146e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f000 fef6 	bl	8012070 <SPI_GetPacketSize>
 8011284:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	4a7b      	ldr	r2, [pc, #492]	@ (8011478 <HAL_SPI_Init+0x23c>)
 801128c:	4293      	cmp	r3, r2
 801128e:	d00c      	beq.n	80112aa <HAL_SPI_Init+0x6e>
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	4a79      	ldr	r2, [pc, #484]	@ (801147c <HAL_SPI_Init+0x240>)
 8011296:	4293      	cmp	r3, r2
 8011298:	d007      	beq.n	80112aa <HAL_SPI_Init+0x6e>
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	4a78      	ldr	r2, [pc, #480]	@ (8011480 <HAL_SPI_Init+0x244>)
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d002      	beq.n	80112aa <HAL_SPI_Init+0x6e>
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	2b08      	cmp	r3, #8
 80112a8:	d811      	bhi.n	80112ce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80112ae:	4a72      	ldr	r2, [pc, #456]	@ (8011478 <HAL_SPI_Init+0x23c>)
 80112b0:	4293      	cmp	r3, r2
 80112b2:	d009      	beq.n	80112c8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	4a70      	ldr	r2, [pc, #448]	@ (801147c <HAL_SPI_Init+0x240>)
 80112ba:	4293      	cmp	r3, r2
 80112bc:	d004      	beq.n	80112c8 <HAL_SPI_Init+0x8c>
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	4a6f      	ldr	r2, [pc, #444]	@ (8011480 <HAL_SPI_Init+0x244>)
 80112c4:	4293      	cmp	r3, r2
 80112c6:	d104      	bne.n	80112d2 <HAL_SPI_Init+0x96>
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2b10      	cmp	r3, #16
 80112cc:	d901      	bls.n	80112d2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80112ce:	2301      	movs	r3, #1
 80112d0:	e0cd      	b.n	801146e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80112d8:	b2db      	uxtb	r3, r3
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d106      	bne.n	80112ec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2200      	movs	r2, #0
 80112e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f7f1 f9e4 	bl	80026b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2202      	movs	r2, #2
 80112f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	f022 0201 	bic.w	r2, r2, #1
 8011302:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	689b      	ldr	r3, [r3, #8]
 801130a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801130e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	699b      	ldr	r3, [r3, #24]
 8011314:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011318:	d119      	bne.n	801134e <HAL_SPI_Init+0x112>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011322:	d103      	bne.n	801132c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011328:	2b00      	cmp	r3, #0
 801132a:	d008      	beq.n	801133e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011330:	2b00      	cmp	r3, #0
 8011332:	d10c      	bne.n	801134e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011338:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801133c:	d107      	bne.n	801134e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801134c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011356:	2b00      	cmp	r3, #0
 8011358:	d00f      	beq.n	801137a <HAL_SPI_Init+0x13e>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	68db      	ldr	r3, [r3, #12]
 801135e:	2b06      	cmp	r3, #6
 8011360:	d90b      	bls.n	801137a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	430a      	orrs	r2, r1
 8011376:	601a      	str	r2, [r3, #0]
 8011378:	e007      	b.n	801138a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	681a      	ldr	r2, [r3, #0]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011388:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	69da      	ldr	r2, [r3, #28]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011392:	431a      	orrs	r2, r3
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	431a      	orrs	r2, r3
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801139c:	ea42 0103 	orr.w	r1, r2, r3
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	68da      	ldr	r2, [r3, #12]
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	430a      	orrs	r2, r1
 80113aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113b4:	431a      	orrs	r2, r3
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113ba:	431a      	orrs	r2, r3
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	699b      	ldr	r3, [r3, #24]
 80113c0:	431a      	orrs	r2, r3
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	691b      	ldr	r3, [r3, #16]
 80113c6:	431a      	orrs	r2, r3
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	695b      	ldr	r3, [r3, #20]
 80113cc:	431a      	orrs	r2, r3
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	6a1b      	ldr	r3, [r3, #32]
 80113d2:	431a      	orrs	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	431a      	orrs	r2, r3
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80113de:	431a      	orrs	r2, r3
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	431a      	orrs	r2, r3
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80113ea:	ea42 0103 	orr.w	r1, r2, r3
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	430a      	orrs	r2, r1
 80113f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	685b      	ldr	r3, [r3, #4]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d113      	bne.n	801142a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	689b      	ldr	r3, [r3, #8]
 8011408:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011414:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	689b      	ldr	r3, [r3, #8]
 801141c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011428:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f022 0201 	bic.w	r2, r2, #1
 8011438:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011442:	2b00      	cmp	r3, #0
 8011444:	d00a      	beq.n	801145c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	68db      	ldr	r3, [r3, #12]
 801144c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	430a      	orrs	r2, r1
 801145a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2200      	movs	r2, #0
 8011460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2201      	movs	r2, #1
 8011468:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801146c:	2300      	movs	r3, #0
}
 801146e:	4618      	mov	r0, r3
 8011470:	3710      	adds	r7, #16
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}
 8011476:	bf00      	nop
 8011478:	40013000 	.word	0x40013000
 801147c:	40003800 	.word	0x40003800
 8011480:	40003c00 	.word	0x40003c00

08011484 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b088      	sub	sp, #32
 8011488:	af02      	add	r7, sp, #8
 801148a:	60f8      	str	r0, [r7, #12]
 801148c:	60b9      	str	r1, [r7, #8]
 801148e:	603b      	str	r3, [r7, #0]
 8011490:	4613      	mov	r3, r2
 8011492:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	3320      	adds	r3, #32
 801149a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801149c:	f7f6 fcba 	bl	8007e14 <HAL_GetTick>
 80114a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	2b01      	cmp	r3, #1
 80114ac:	d001      	beq.n	80114b2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80114ae:	2302      	movs	r3, #2
 80114b0:	e1d1      	b.n	8011856 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d002      	beq.n	80114be <HAL_SPI_Transmit+0x3a>
 80114b8:	88fb      	ldrh	r3, [r7, #6]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d101      	bne.n	80114c2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80114be:	2301      	movs	r3, #1
 80114c0:	e1c9      	b.n	8011856 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80114c8:	2b01      	cmp	r3, #1
 80114ca:	d101      	bne.n	80114d0 <HAL_SPI_Transmit+0x4c>
 80114cc:	2302      	movs	r3, #2
 80114ce:	e1c2      	b.n	8011856 <HAL_SPI_Transmit+0x3d2>
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	2201      	movs	r2, #1
 80114d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	2203      	movs	r2, #3
 80114dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	2200      	movs	r2, #0
 80114e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	68ba      	ldr	r2, [r7, #8]
 80114ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	88fa      	ldrh	r2, [r7, #6]
 80114f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	88fa      	ldrh	r2, [r7, #6]
 80114fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	2200      	movs	r2, #0
 8011502:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2200      	movs	r2, #0
 8011508:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	2200      	movs	r2, #0
 8011510:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	2200      	movs	r2, #0
 8011518:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	2200      	movs	r2, #0
 801151e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	689b      	ldr	r3, [r3, #8]
 8011524:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8011528:	d108      	bne.n	801153c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	681a      	ldr	r2, [r3, #0]
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011538:	601a      	str	r2, [r3, #0]
 801153a:	e009      	b.n	8011550 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	68db      	ldr	r3, [r3, #12]
 8011542:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801154e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	685a      	ldr	r2, [r3, #4]
 8011556:	4b96      	ldr	r3, [pc, #600]	@ (80117b0 <HAL_SPI_Transmit+0x32c>)
 8011558:	4013      	ands	r3, r2
 801155a:	88f9      	ldrh	r1, [r7, #6]
 801155c:	68fa      	ldr	r2, [r7, #12]
 801155e:	6812      	ldr	r2, [r2, #0]
 8011560:	430b      	orrs	r3, r1
 8011562:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f042 0201 	orr.w	r2, r2, #1
 8011572:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	685b      	ldr	r3, [r3, #4]
 8011578:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801157c:	d107      	bne.n	801158e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801158c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	68db      	ldr	r3, [r3, #12]
 8011592:	2b0f      	cmp	r3, #15
 8011594:	d947      	bls.n	8011626 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011596:	e03f      	b.n	8011618 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	695b      	ldr	r3, [r3, #20]
 801159e:	f003 0302 	and.w	r3, r3, #2
 80115a2:	2b02      	cmp	r3, #2
 80115a4:	d114      	bne.n	80115d0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	6812      	ldr	r2, [r2, #0]
 80115b0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80115b6:	1d1a      	adds	r2, r3, #4
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	3b01      	subs	r3, #1
 80115c6:	b29a      	uxth	r2, r3
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80115ce:	e023      	b.n	8011618 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80115d0:	f7f6 fc20 	bl	8007e14 <HAL_GetTick>
 80115d4:	4602      	mov	r2, r0
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	1ad3      	subs	r3, r2, r3
 80115da:	683a      	ldr	r2, [r7, #0]
 80115dc:	429a      	cmp	r2, r3
 80115de:	d803      	bhi.n	80115e8 <HAL_SPI_Transmit+0x164>
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115e6:	d102      	bne.n	80115ee <HAL_SPI_Transmit+0x16a>
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d114      	bne.n	8011618 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80115ee:	68f8      	ldr	r0, [r7, #12]
 80115f0:	f000 fc70 	bl	8011ed4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80115fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	2201      	movs	r2, #1
 8011608:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	2200      	movs	r2, #0
 8011610:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8011614:	2303      	movs	r3, #3
 8011616:	e11e      	b.n	8011856 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801161e:	b29b      	uxth	r3, r3
 8011620:	2b00      	cmp	r3, #0
 8011622:	d1b9      	bne.n	8011598 <HAL_SPI_Transmit+0x114>
 8011624:	e0f1      	b.n	801180a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	2b07      	cmp	r3, #7
 801162c:	f240 80e6 	bls.w	80117fc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011630:	e05d      	b.n	80116ee <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	695b      	ldr	r3, [r3, #20]
 8011638:	f003 0302 	and.w	r3, r3, #2
 801163c:	2b02      	cmp	r3, #2
 801163e:	d132      	bne.n	80116a6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011646:	b29b      	uxth	r3, r3
 8011648:	2b01      	cmp	r3, #1
 801164a:	d918      	bls.n	801167e <HAL_SPI_Transmit+0x1fa>
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011650:	2b00      	cmp	r3, #0
 8011652:	d014      	beq.n	801167e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	6812      	ldr	r2, [r2, #0]
 801165e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011664:	1d1a      	adds	r2, r3, #4
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011670:	b29b      	uxth	r3, r3
 8011672:	3b02      	subs	r3, #2
 8011674:	b29a      	uxth	r2, r3
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801167c:	e037      	b.n	80116ee <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011682:	881a      	ldrh	r2, [r3, #0]
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801168c:	1c9a      	adds	r2, r3, #2
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011698:	b29b      	uxth	r3, r3
 801169a:	3b01      	subs	r3, #1
 801169c:	b29a      	uxth	r2, r3
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80116a4:	e023      	b.n	80116ee <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80116a6:	f7f6 fbb5 	bl	8007e14 <HAL_GetTick>
 80116aa:	4602      	mov	r2, r0
 80116ac:	693b      	ldr	r3, [r7, #16]
 80116ae:	1ad3      	subs	r3, r2, r3
 80116b0:	683a      	ldr	r2, [r7, #0]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d803      	bhi.n	80116be <HAL_SPI_Transmit+0x23a>
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116bc:	d102      	bne.n	80116c4 <HAL_SPI_Transmit+0x240>
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d114      	bne.n	80116ee <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80116c4:	68f8      	ldr	r0, [r7, #12]
 80116c6:	f000 fc05 	bl	8011ed4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80116d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	2201      	movs	r2, #1
 80116de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	2200      	movs	r2, #0
 80116e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80116ea:	2303      	movs	r3, #3
 80116ec:	e0b3      	b.n	8011856 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d19b      	bne.n	8011632 <HAL_SPI_Transmit+0x1ae>
 80116fa:	e086      	b.n	801180a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	695b      	ldr	r3, [r3, #20]
 8011702:	f003 0302 	and.w	r3, r3, #2
 8011706:	2b02      	cmp	r3, #2
 8011708:	d154      	bne.n	80117b4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011710:	b29b      	uxth	r3, r3
 8011712:	2b03      	cmp	r3, #3
 8011714:	d918      	bls.n	8011748 <HAL_SPI_Transmit+0x2c4>
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801171a:	2b40      	cmp	r3, #64	@ 0x40
 801171c:	d914      	bls.n	8011748 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	6812      	ldr	r2, [r2, #0]
 8011728:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801172e:	1d1a      	adds	r2, r3, #4
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801173a:	b29b      	uxth	r3, r3
 801173c:	3b04      	subs	r3, #4
 801173e:	b29a      	uxth	r2, r3
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011746:	e059      	b.n	80117fc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801174e:	b29b      	uxth	r3, r3
 8011750:	2b01      	cmp	r3, #1
 8011752:	d917      	bls.n	8011784 <HAL_SPI_Transmit+0x300>
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011758:	2b00      	cmp	r3, #0
 801175a:	d013      	beq.n	8011784 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011760:	881a      	ldrh	r2, [r3, #0]
 8011762:	697b      	ldr	r3, [r7, #20]
 8011764:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801176a:	1c9a      	adds	r2, r3, #2
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011776:	b29b      	uxth	r3, r3
 8011778:	3b02      	subs	r3, #2
 801177a:	b29a      	uxth	r2, r3
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011782:	e03b      	b.n	80117fc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	3320      	adds	r3, #32
 801178e:	7812      	ldrb	r2, [r2, #0]
 8011790:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011796:	1c5a      	adds	r2, r3, #1
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80117a2:	b29b      	uxth	r3, r3
 80117a4:	3b01      	subs	r3, #1
 80117a6:	b29a      	uxth	r2, r3
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80117ae:	e025      	b.n	80117fc <HAL_SPI_Transmit+0x378>
 80117b0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80117b4:	f7f6 fb2e 	bl	8007e14 <HAL_GetTick>
 80117b8:	4602      	mov	r2, r0
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	1ad3      	subs	r3, r2, r3
 80117be:	683a      	ldr	r2, [r7, #0]
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d803      	bhi.n	80117cc <HAL_SPI_Transmit+0x348>
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ca:	d102      	bne.n	80117d2 <HAL_SPI_Transmit+0x34e>
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d114      	bne.n	80117fc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80117d2:	68f8      	ldr	r0, [r7, #12]
 80117d4:	f000 fb7e 	bl	8011ed4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80117de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	2201      	movs	r2, #1
 80117ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	2200      	movs	r2, #0
 80117f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80117f8:	2303      	movs	r3, #3
 80117fa:	e02c      	b.n	8011856 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011802:	b29b      	uxth	r3, r3
 8011804:	2b00      	cmp	r3, #0
 8011806:	f47f af79 	bne.w	80116fc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	9300      	str	r3, [sp, #0]
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	2200      	movs	r2, #0
 8011812:	2108      	movs	r1, #8
 8011814:	68f8      	ldr	r0, [r7, #12]
 8011816:	f000 fbfd 	bl	8012014 <SPI_WaitOnFlagUntilTimeout>
 801181a:	4603      	mov	r3, r0
 801181c:	2b00      	cmp	r3, #0
 801181e:	d007      	beq.n	8011830 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011826:	f043 0220 	orr.w	r2, r3, #32
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011830:	68f8      	ldr	r0, [r7, #12]
 8011832:	f000 fb4f 	bl	8011ed4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	2201      	movs	r2, #1
 801183a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	2200      	movs	r2, #0
 8011842:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801184c:	2b00      	cmp	r3, #0
 801184e:	d001      	beq.n	8011854 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8011850:	2301      	movs	r3, #1
 8011852:	e000      	b.n	8011856 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8011854:	2300      	movs	r3, #0
  }
}
 8011856:	4618      	mov	r0, r3
 8011858:	3718      	adds	r7, #24
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop

08011860 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b08e      	sub	sp, #56	@ 0x38
 8011864:	af02      	add	r7, sp, #8
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	607a      	str	r2, [r7, #4]
 801186c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	3320      	adds	r3, #32
 8011874:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	3330      	adds	r3, #48	@ 0x30
 801187c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011882:	095b      	lsrs	r3, r3, #5
 8011884:	b29b      	uxth	r3, r3
 8011886:	3301      	adds	r3, #1
 8011888:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801188a:	f7f6 fac3 	bl	8007e14 <HAL_GetTick>
 801188e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8011890:	887b      	ldrh	r3, [r7, #2]
 8011892:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8011894:	887b      	ldrh	r3, [r7, #2]
 8011896:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801189e:	b2db      	uxtb	r3, r3
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	d001      	beq.n	80118a8 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80118a4:	2302      	movs	r3, #2
 80118a6:	e310      	b.n	8011eca <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d005      	beq.n	80118ba <HAL_SPI_TransmitReceive+0x5a>
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d002      	beq.n	80118ba <HAL_SPI_TransmitReceive+0x5a>
 80118b4:	887b      	ldrh	r3, [r7, #2]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d101      	bne.n	80118be <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80118ba:	2301      	movs	r3, #1
 80118bc:	e305      	b.n	8011eca <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d101      	bne.n	80118cc <HAL_SPI_TransmitReceive+0x6c>
 80118c8:	2302      	movs	r3, #2
 80118ca:	e2fe      	b.n	8011eca <HAL_SPI_TransmitReceive+0x66a>
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	2201      	movs	r2, #1
 80118d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	2205      	movs	r2, #5
 80118d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	2200      	movs	r2, #0
 80118e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	687a      	ldr	r2, [r7, #4]
 80118e8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	887a      	ldrh	r2, [r7, #2]
 80118ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	887a      	ldrh	r2, [r7, #2]
 80118f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	68ba      	ldr	r2, [r7, #8]
 80118fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	887a      	ldrh	r2, [r7, #2]
 8011904:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	887a      	ldrh	r2, [r7, #2]
 801190c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	2200      	movs	r2, #0
 8011914:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	2200      	movs	r2, #0
 801191a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	68da      	ldr	r2, [r3, #12]
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 801192a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	4a70      	ldr	r2, [pc, #448]	@ (8011af4 <HAL_SPI_TransmitReceive+0x294>)
 8011932:	4293      	cmp	r3, r2
 8011934:	d009      	beq.n	801194a <HAL_SPI_TransmitReceive+0xea>
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	4a6f      	ldr	r2, [pc, #444]	@ (8011af8 <HAL_SPI_TransmitReceive+0x298>)
 801193c:	4293      	cmp	r3, r2
 801193e:	d004      	beq.n	801194a <HAL_SPI_TransmitReceive+0xea>
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	4a6d      	ldr	r2, [pc, #436]	@ (8011afc <HAL_SPI_TransmitReceive+0x29c>)
 8011946:	4293      	cmp	r3, r2
 8011948:	d102      	bne.n	8011950 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 801194a:	2310      	movs	r3, #16
 801194c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801194e:	e001      	b.n	8011954 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8011950:	2308      	movs	r3, #8
 8011952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	685a      	ldr	r2, [r3, #4]
 801195a:	4b69      	ldr	r3, [pc, #420]	@ (8011b00 <HAL_SPI_TransmitReceive+0x2a0>)
 801195c:	4013      	ands	r3, r2
 801195e:	8879      	ldrh	r1, [r7, #2]
 8011960:	68fa      	ldr	r2, [r7, #12]
 8011962:	6812      	ldr	r2, [r2, #0]
 8011964:	430b      	orrs	r3, r1
 8011966:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	681a      	ldr	r2, [r3, #0]
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	f042 0201 	orr.w	r2, r2, #1
 8011976:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	685b      	ldr	r3, [r3, #4]
 801197c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011980:	d107      	bne.n	8011992 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	681a      	ldr	r2, [r3, #0]
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011990:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	68db      	ldr	r3, [r3, #12]
 8011996:	2b0f      	cmp	r3, #15
 8011998:	f240 80a2 	bls.w	8011ae0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 801199c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801199e:	089b      	lsrs	r3, r3, #2
 80119a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80119a2:	e094      	b.n	8011ace <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	695b      	ldr	r3, [r3, #20]
 80119aa:	f003 0302 	and.w	r3, r3, #2
 80119ae:	2b02      	cmp	r3, #2
 80119b0:	d120      	bne.n	80119f4 <HAL_SPI_TransmitReceive+0x194>
 80119b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d01d      	beq.n	80119f4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80119b8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80119ba:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80119bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119be:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d217      	bcs.n	80119f4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	6812      	ldr	r2, [r2, #0]
 80119ce:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80119d4:	1d1a      	adds	r2, r3, #4
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	3b01      	subs	r3, #1
 80119e4:	b29a      	uxth	r2, r3
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80119f2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	695b      	ldr	r3, [r3, #20]
 80119fa:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80119fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d065      	beq.n	8011ace <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	695b      	ldr	r3, [r3, #20]
 8011a08:	f003 0301 	and.w	r3, r3, #1
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d118      	bne.n	8011a42 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a18:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011a1a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a20:	1d1a      	adds	r2, r3, #4
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011a2c:	b29b      	uxth	r3, r3
 8011a2e:	3b01      	subs	r3, #1
 8011a30:	b29a      	uxth	r2, r3
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011a3e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011a40:	e045      	b.n	8011ace <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8011a42:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011a44:	8bfb      	ldrh	r3, [r7, #30]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d21d      	bcs.n	8011a86 <HAL_SPI_TransmitReceive+0x226>
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d018      	beq.n	8011a86 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	681a      	ldr	r2, [r3, #0]
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011a5e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a64:	1d1a      	adds	r2, r3, #4
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	3b01      	subs	r3, #1
 8011a74:	b29a      	uxth	r2, r3
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011a82:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011a84:	e023      	b.n	8011ace <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011a86:	f7f6 f9c5 	bl	8007e14 <HAL_GetTick>
 8011a8a:	4602      	mov	r2, r0
 8011a8c:	69bb      	ldr	r3, [r7, #24]
 8011a8e:	1ad3      	subs	r3, r2, r3
 8011a90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d803      	bhi.n	8011a9e <HAL_SPI_TransmitReceive+0x23e>
 8011a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a9c:	d102      	bne.n	8011aa4 <HAL_SPI_TransmitReceive+0x244>
 8011a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d114      	bne.n	8011ace <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011aa4:	68f8      	ldr	r0, [r7, #12]
 8011aa6:	f000 fa15 	bl	8011ed4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011ab0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2201      	movs	r2, #1
 8011abe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8011aca:	2303      	movs	r3, #3
 8011acc:	e1fd      	b.n	8011eca <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011ace:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	f47f af67 	bne.w	80119a4 <HAL_SPI_TransmitReceive+0x144>
 8011ad6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	f47f af63 	bne.w	80119a4 <HAL_SPI_TransmitReceive+0x144>
 8011ade:	e1ce      	b.n	8011e7e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	68db      	ldr	r3, [r3, #12]
 8011ae4:	2b07      	cmp	r3, #7
 8011ae6:	f240 81c2 	bls.w	8011e6e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8011aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aec:	085b      	lsrs	r3, r3, #1
 8011aee:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011af0:	e0c9      	b.n	8011c86 <HAL_SPI_TransmitReceive+0x426>
 8011af2:	bf00      	nop
 8011af4:	40013000 	.word	0x40013000
 8011af8:	40003800 	.word	0x40003800
 8011afc:	40003c00 	.word	0x40003c00
 8011b00:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	695b      	ldr	r3, [r3, #20]
 8011b0a:	f003 0302 	and.w	r3, r3, #2
 8011b0e:	2b02      	cmp	r3, #2
 8011b10:	d11f      	bne.n	8011b52 <HAL_SPI_TransmitReceive+0x2f2>
 8011b12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d01c      	beq.n	8011b52 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8011b18:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011b1a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8011b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b1e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011b20:	429a      	cmp	r2, r3
 8011b22:	d216      	bcs.n	8011b52 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011b28:	881a      	ldrh	r2, [r3, #0]
 8011b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b2c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011b32:	1c9a      	adds	r2, r3, #2
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	3b01      	subs	r3, #1
 8011b42:	b29a      	uxth	r2, r3
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011b50:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	695b      	ldr	r3, [r3, #20]
 8011b58:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8011b5a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	f000 8092 	beq.w	8011c86 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	695b      	ldr	r3, [r3, #20]
 8011b68:	f003 0301 	and.w	r3, r3, #1
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	d118      	bne.n	8011ba2 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011b74:	6a3a      	ldr	r2, [r7, #32]
 8011b76:	8812      	ldrh	r2, [r2, #0]
 8011b78:	b292      	uxth	r2, r2
 8011b7a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011b80:	1c9a      	adds	r2, r3, #2
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011b8c:	b29b      	uxth	r3, r3
 8011b8e:	3b01      	subs	r3, #1
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011b9e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011ba0:	e071      	b.n	8011c86 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8011ba2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011ba4:	8bfb      	ldrh	r3, [r7, #30]
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d228      	bcs.n	8011bfc <HAL_SPI_TransmitReceive+0x39c>
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d023      	beq.n	8011bfc <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011bb8:	6a3a      	ldr	r2, [r7, #32]
 8011bba:	8812      	ldrh	r2, [r2, #0]
 8011bbc:	b292      	uxth	r2, r2
 8011bbe:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011bc4:	1c9a      	adds	r2, r3, #2
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011bce:	6a3a      	ldr	r2, [r7, #32]
 8011bd0:	8812      	ldrh	r2, [r2, #0]
 8011bd2:	b292      	uxth	r2, r2
 8011bd4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011bda:	1c9a      	adds	r2, r3, #2
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011be6:	b29b      	uxth	r3, r3
 8011be8:	3b02      	subs	r3, #2
 8011bea:	b29a      	uxth	r2, r3
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011bf8:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011bfa:	e044      	b.n	8011c86 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8011bfc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d11d      	bne.n	8011c3e <HAL_SPI_TransmitReceive+0x3de>
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d018      	beq.n	8011c3e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011c10:	6a3a      	ldr	r2, [r7, #32]
 8011c12:	8812      	ldrh	r2, [r2, #0]
 8011c14:	b292      	uxth	r2, r2
 8011c16:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011c1c:	1c9a      	adds	r2, r3, #2
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	3b01      	subs	r3, #1
 8011c2c:	b29a      	uxth	r2, r3
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011c3a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011c3c:	e023      	b.n	8011c86 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011c3e:	f7f6 f8e9 	bl	8007e14 <HAL_GetTick>
 8011c42:	4602      	mov	r2, r0
 8011c44:	69bb      	ldr	r3, [r7, #24]
 8011c46:	1ad3      	subs	r3, r2, r3
 8011c48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d803      	bhi.n	8011c56 <HAL_SPI_TransmitReceive+0x3f6>
 8011c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c54:	d102      	bne.n	8011c5c <HAL_SPI_TransmitReceive+0x3fc>
 8011c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d114      	bne.n	8011c86 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011c5c:	68f8      	ldr	r0, [r7, #12]
 8011c5e:	f000 f939 	bl	8011ed4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	2201      	movs	r2, #1
 8011c76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8011c82:	2303      	movs	r3, #3
 8011c84:	e121      	b.n	8011eca <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011c86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f47f af3b 	bne.w	8011b04 <HAL_SPI_TransmitReceive+0x2a4>
 8011c8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	f47f af37 	bne.w	8011b04 <HAL_SPI_TransmitReceive+0x2a4>
 8011c96:	e0f2      	b.n	8011e7e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	695b      	ldr	r3, [r3, #20]
 8011c9e:	f003 0302 	and.w	r3, r3, #2
 8011ca2:	2b02      	cmp	r3, #2
 8011ca4:	d121      	bne.n	8011cea <HAL_SPI_TransmitReceive+0x48a>
 8011ca6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d01e      	beq.n	8011cea <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8011cac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011cae:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8011cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cb2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d218      	bcs.n	8011cea <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	3320      	adds	r3, #32
 8011cc2:	7812      	ldrb	r2, [r2, #0]
 8011cc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011cca:	1c5a      	adds	r2, r3, #1
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	3b01      	subs	r3, #1
 8011cda:	b29a      	uxth	r2, r3
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011ce8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	695b      	ldr	r3, [r3, #20]
 8011cf0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8011cf2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	f000 80ba 	beq.w	8011e6e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	695b      	ldr	r3, [r3, #20]
 8011d00:	f003 0301 	and.w	r3, r3, #1
 8011d04:	2b01      	cmp	r3, #1
 8011d06:	d11b      	bne.n	8011d40 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d14:	7812      	ldrb	r2, [r2, #0]
 8011d16:	b2d2      	uxtb	r2, r2
 8011d18:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d1e:	1c5a      	adds	r2, r3, #1
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	3b01      	subs	r3, #1
 8011d2e:	b29a      	uxth	r2, r3
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011d3c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011d3e:	e096      	b.n	8011e6e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8011d40:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011d42:	8bfb      	ldrh	r3, [r7, #30]
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d24a      	bcs.n	8011dde <HAL_SPI_TransmitReceive+0x57e>
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d045      	beq.n	8011dde <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d5e:	7812      	ldrb	r2, [r2, #0]
 8011d60:	b2d2      	uxtb	r2, r2
 8011d62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d68:	1c5a      	adds	r2, r3, #1
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d7a:	7812      	ldrb	r2, [r2, #0]
 8011d7c:	b2d2      	uxtb	r2, r2
 8011d7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d84:	1c5a      	adds	r2, r3, #1
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d96:	7812      	ldrb	r2, [r2, #0]
 8011d98:	b2d2      	uxtb	r2, r2
 8011d9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011da0:	1c5a      	adds	r2, r3, #1
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011db2:	7812      	ldrb	r2, [r2, #0]
 8011db4:	b2d2      	uxtb	r2, r2
 8011db6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011dbc:	1c5a      	adds	r2, r3, #1
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011dc8:	b29b      	uxth	r3, r3
 8011dca:	3b04      	subs	r3, #4
 8011dcc:	b29a      	uxth	r2, r3
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011dda:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011ddc:	e047      	b.n	8011e6e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8011dde:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011de0:	2b03      	cmp	r3, #3
 8011de2:	d820      	bhi.n	8011e26 <HAL_SPI_TransmitReceive+0x5c6>
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d01b      	beq.n	8011e26 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011dfa:	7812      	ldrb	r2, [r2, #0]
 8011dfc:	b2d2      	uxtb	r2, r2
 8011dfe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e04:	1c5a      	adds	r2, r3, #1
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	3b01      	subs	r3, #1
 8011e14:	b29a      	uxth	r2, r3
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011e22:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011e24:	e023      	b.n	8011e6e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011e26:	f7f5 fff5 	bl	8007e14 <HAL_GetTick>
 8011e2a:	4602      	mov	r2, r0
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	1ad3      	subs	r3, r2, r3
 8011e30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d803      	bhi.n	8011e3e <HAL_SPI_TransmitReceive+0x5de>
 8011e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e3c:	d102      	bne.n	8011e44 <HAL_SPI_TransmitReceive+0x5e4>
 8011e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d114      	bne.n	8011e6e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011e44:	68f8      	ldr	r0, [r7, #12]
 8011e46:	f000 f845 	bl	8011ed4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2201      	movs	r2, #1
 8011e5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	2200      	movs	r2, #0
 8011e66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8011e6a:	2303      	movs	r3, #3
 8011e6c:	e02d      	b.n	8011eca <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011e6e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	f47f af11 	bne.w	8011c98 <HAL_SPI_TransmitReceive+0x438>
 8011e76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	f47f af0d 	bne.w	8011c98 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8011e7e:	69bb      	ldr	r3, [r7, #24]
 8011e80:	9300      	str	r3, [sp, #0]
 8011e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e84:	2200      	movs	r2, #0
 8011e86:	2108      	movs	r1, #8
 8011e88:	68f8      	ldr	r0, [r7, #12]
 8011e8a:	f000 f8c3 	bl	8012014 <SPI_WaitOnFlagUntilTimeout>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d007      	beq.n	8011ea4 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e9a:	f043 0220 	orr.w	r2, r3, #32
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011ea4:	68f8      	ldr	r0, [r7, #12]
 8011ea6:	f000 f815 	bl	8011ed4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	2201      	movs	r2, #1
 8011eae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d001      	beq.n	8011ec8 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	e000      	b.n	8011eca <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8011ec8:	2300      	movs	r3, #0
  }
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	3730      	adds	r7, #48	@ 0x30
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop

08011ed4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b085      	sub	sp, #20
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	695b      	ldr	r3, [r3, #20]
 8011ee2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	699a      	ldr	r2, [r3, #24]
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	f042 0208 	orr.w	r2, r2, #8
 8011ef2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	699a      	ldr	r2, [r3, #24]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	f042 0210 	orr.w	r2, r2, #16
 8011f02:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	681a      	ldr	r2, [r3, #0]
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	f022 0201 	bic.w	r2, r2, #1
 8011f12:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	6919      	ldr	r1, [r3, #16]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681a      	ldr	r2, [r3, #0]
 8011f1e:	4b3c      	ldr	r3, [pc, #240]	@ (8012010 <SPI_CloseTransfer+0x13c>)
 8011f20:	400b      	ands	r3, r1
 8011f22:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	689a      	ldr	r2, [r3, #8]
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8011f32:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011f3a:	b2db      	uxtb	r3, r3
 8011f3c:	2b04      	cmp	r3, #4
 8011f3e:	d014      	beq.n	8011f6a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	f003 0320 	and.w	r3, r3, #32
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d00f      	beq.n	8011f6a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011f50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	699a      	ldr	r2, [r3, #24]
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	f042 0220 	orr.w	r2, r2, #32
 8011f68:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	2b03      	cmp	r3, #3
 8011f74:	d014      	beq.n	8011fa0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d00f      	beq.n	8011fa0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011f86:	f043 0204 	orr.w	r2, r3, #4
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	699a      	ldr	r2, [r3, #24]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011f9e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d00f      	beq.n	8011fca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011fb0:	f043 0201 	orr.w	r2, r3, #1
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	699a      	ldr	r2, [r3, #24]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011fc8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d00f      	beq.n	8011ff4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011fda:	f043 0208 	orr.w	r2, r3, #8
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	699a      	ldr	r2, [r3, #24]
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011ff2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2200      	movs	r2, #0
 8012000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8012004:	bf00      	nop
 8012006:	3714      	adds	r7, #20
 8012008:	46bd      	mov	sp, r7
 801200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200e:	4770      	bx	lr
 8012010:	fffffc90 	.word	0xfffffc90

08012014 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b084      	sub	sp, #16
 8012018:	af00      	add	r7, sp, #0
 801201a:	60f8      	str	r0, [r7, #12]
 801201c:	60b9      	str	r1, [r7, #8]
 801201e:	603b      	str	r3, [r7, #0]
 8012020:	4613      	mov	r3, r2
 8012022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012024:	e010      	b.n	8012048 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012026:	f7f5 fef5 	bl	8007e14 <HAL_GetTick>
 801202a:	4602      	mov	r2, r0
 801202c:	69bb      	ldr	r3, [r7, #24]
 801202e:	1ad3      	subs	r3, r2, r3
 8012030:	683a      	ldr	r2, [r7, #0]
 8012032:	429a      	cmp	r2, r3
 8012034:	d803      	bhi.n	801203e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	f1b3 3fff 	cmp.w	r3, #4294967295
 801203c:	d102      	bne.n	8012044 <SPI_WaitOnFlagUntilTimeout+0x30>
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d101      	bne.n	8012048 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8012044:	2303      	movs	r3, #3
 8012046:	e00f      	b.n	8012068 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	695a      	ldr	r2, [r3, #20]
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	4013      	ands	r3, r2
 8012052:	68ba      	ldr	r2, [r7, #8]
 8012054:	429a      	cmp	r2, r3
 8012056:	bf0c      	ite	eq
 8012058:	2301      	moveq	r3, #1
 801205a:	2300      	movne	r3, #0
 801205c:	b2db      	uxtb	r3, r3
 801205e:	461a      	mov	r2, r3
 8012060:	79fb      	ldrb	r3, [r7, #7]
 8012062:	429a      	cmp	r2, r3
 8012064:	d0df      	beq.n	8012026 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8012066:	2300      	movs	r3, #0
}
 8012068:	4618      	mov	r0, r3
 801206a:	3710      	adds	r7, #16
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012070:	b480      	push	{r7}
 8012072:	b085      	sub	sp, #20
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801207c:	095b      	lsrs	r3, r3, #5
 801207e:	3301      	adds	r3, #1
 8012080:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	68db      	ldr	r3, [r3, #12]
 8012086:	3301      	adds	r3, #1
 8012088:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	3307      	adds	r3, #7
 801208e:	08db      	lsrs	r3, r3, #3
 8012090:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	68fa      	ldr	r2, [r7, #12]
 8012096:	fb02 f303 	mul.w	r3, r2, r3
}
 801209a:	4618      	mov	r0, r3
 801209c:	3714      	adds	r7, #20
 801209e:	46bd      	mov	sp, r7
 80120a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a4:	4770      	bx	lr

080120a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80120a6:	b580      	push	{r7, lr}
 80120a8:	b082      	sub	sp, #8
 80120aa:	af00      	add	r7, sp, #0
 80120ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d101      	bne.n	80120b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80120b4:	2301      	movs	r3, #1
 80120b6:	e049      	b.n	801214c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80120be:	b2db      	uxtb	r3, r3
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d106      	bne.n	80120d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2200      	movs	r2, #0
 80120c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f7f0 fbf9 	bl	80028c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2202      	movs	r2, #2
 80120d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681a      	ldr	r2, [r3, #0]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	3304      	adds	r3, #4
 80120e2:	4619      	mov	r1, r3
 80120e4:	4610      	mov	r0, r2
 80120e6:	f001 f9d1 	bl	801348c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2201      	movs	r2, #1
 80120ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2201      	movs	r2, #1
 80120f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	2201      	movs	r2, #1
 80120fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2201      	movs	r2, #1
 8012106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2201      	movs	r2, #1
 801210e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2201      	movs	r2, #1
 8012116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2201      	movs	r2, #1
 801211e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2201      	movs	r2, #1
 8012126:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2201      	movs	r2, #1
 801212e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2201      	movs	r2, #1
 8012136:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2201      	movs	r2, #1
 801213e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2201      	movs	r2, #1
 8012146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801214a:	2300      	movs	r3, #0
}
 801214c:	4618      	mov	r0, r3
 801214e:	3708      	adds	r7, #8
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}

08012154 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012154:	b480      	push	{r7}
 8012156:	b085      	sub	sp, #20
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012162:	b2db      	uxtb	r3, r3
 8012164:	2b01      	cmp	r3, #1
 8012166:	d001      	beq.n	801216c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8012168:	2301      	movs	r3, #1
 801216a:	e056      	b.n	801221a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2202      	movs	r2, #2
 8012170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	4a2b      	ldr	r2, [pc, #172]	@ (8012228 <HAL_TIM_Base_Start+0xd4>)
 801217a:	4293      	cmp	r3, r2
 801217c:	d02c      	beq.n	80121d8 <HAL_TIM_Base_Start+0x84>
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012186:	d027      	beq.n	80121d8 <HAL_TIM_Base_Start+0x84>
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	4a27      	ldr	r2, [pc, #156]	@ (801222c <HAL_TIM_Base_Start+0xd8>)
 801218e:	4293      	cmp	r3, r2
 8012190:	d022      	beq.n	80121d8 <HAL_TIM_Base_Start+0x84>
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	4a26      	ldr	r2, [pc, #152]	@ (8012230 <HAL_TIM_Base_Start+0xdc>)
 8012198:	4293      	cmp	r3, r2
 801219a:	d01d      	beq.n	80121d8 <HAL_TIM_Base_Start+0x84>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4a24      	ldr	r2, [pc, #144]	@ (8012234 <HAL_TIM_Base_Start+0xe0>)
 80121a2:	4293      	cmp	r3, r2
 80121a4:	d018      	beq.n	80121d8 <HAL_TIM_Base_Start+0x84>
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	4a23      	ldr	r2, [pc, #140]	@ (8012238 <HAL_TIM_Base_Start+0xe4>)
 80121ac:	4293      	cmp	r3, r2
 80121ae:	d013      	beq.n	80121d8 <HAL_TIM_Base_Start+0x84>
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	4a21      	ldr	r2, [pc, #132]	@ (801223c <HAL_TIM_Base_Start+0xe8>)
 80121b6:	4293      	cmp	r3, r2
 80121b8:	d00e      	beq.n	80121d8 <HAL_TIM_Base_Start+0x84>
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	4a20      	ldr	r2, [pc, #128]	@ (8012240 <HAL_TIM_Base_Start+0xec>)
 80121c0:	4293      	cmp	r3, r2
 80121c2:	d009      	beq.n	80121d8 <HAL_TIM_Base_Start+0x84>
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	4a1e      	ldr	r2, [pc, #120]	@ (8012244 <HAL_TIM_Base_Start+0xf0>)
 80121ca:	4293      	cmp	r3, r2
 80121cc:	d004      	beq.n	80121d8 <HAL_TIM_Base_Start+0x84>
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	4a1d      	ldr	r2, [pc, #116]	@ (8012248 <HAL_TIM_Base_Start+0xf4>)
 80121d4:	4293      	cmp	r3, r2
 80121d6:	d115      	bne.n	8012204 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	689a      	ldr	r2, [r3, #8]
 80121de:	4b1b      	ldr	r3, [pc, #108]	@ (801224c <HAL_TIM_Base_Start+0xf8>)
 80121e0:	4013      	ands	r3, r2
 80121e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	2b06      	cmp	r3, #6
 80121e8:	d015      	beq.n	8012216 <HAL_TIM_Base_Start+0xc2>
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80121f0:	d011      	beq.n	8012216 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	681a      	ldr	r2, [r3, #0]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	f042 0201 	orr.w	r2, r2, #1
 8012200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012202:	e008      	b.n	8012216 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f042 0201 	orr.w	r2, r2, #1
 8012212:	601a      	str	r2, [r3, #0]
 8012214:	e000      	b.n	8012218 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012216:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012218:	2300      	movs	r3, #0
}
 801221a:	4618      	mov	r0, r3
 801221c:	3714      	adds	r7, #20
 801221e:	46bd      	mov	sp, r7
 8012220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012224:	4770      	bx	lr
 8012226:	bf00      	nop
 8012228:	40010000 	.word	0x40010000
 801222c:	40000400 	.word	0x40000400
 8012230:	40000800 	.word	0x40000800
 8012234:	40000c00 	.word	0x40000c00
 8012238:	40010400 	.word	0x40010400
 801223c:	40001800 	.word	0x40001800
 8012240:	40014000 	.word	0x40014000
 8012244:	4000e000 	.word	0x4000e000
 8012248:	4000e400 	.word	0x4000e400
 801224c:	00010007 	.word	0x00010007

08012250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012250:	b480      	push	{r7}
 8012252:	b085      	sub	sp, #20
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801225e:	b2db      	uxtb	r3, r3
 8012260:	2b01      	cmp	r3, #1
 8012262:	d001      	beq.n	8012268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012264:	2301      	movs	r3, #1
 8012266:	e05e      	b.n	8012326 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2202      	movs	r2, #2
 801226c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	68da      	ldr	r2, [r3, #12]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f042 0201 	orr.w	r2, r2, #1
 801227e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	4a2b      	ldr	r2, [pc, #172]	@ (8012334 <HAL_TIM_Base_Start_IT+0xe4>)
 8012286:	4293      	cmp	r3, r2
 8012288:	d02c      	beq.n	80122e4 <HAL_TIM_Base_Start_IT+0x94>
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012292:	d027      	beq.n	80122e4 <HAL_TIM_Base_Start_IT+0x94>
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	4a27      	ldr	r2, [pc, #156]	@ (8012338 <HAL_TIM_Base_Start_IT+0xe8>)
 801229a:	4293      	cmp	r3, r2
 801229c:	d022      	beq.n	80122e4 <HAL_TIM_Base_Start_IT+0x94>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	4a26      	ldr	r2, [pc, #152]	@ (801233c <HAL_TIM_Base_Start_IT+0xec>)
 80122a4:	4293      	cmp	r3, r2
 80122a6:	d01d      	beq.n	80122e4 <HAL_TIM_Base_Start_IT+0x94>
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	4a24      	ldr	r2, [pc, #144]	@ (8012340 <HAL_TIM_Base_Start_IT+0xf0>)
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d018      	beq.n	80122e4 <HAL_TIM_Base_Start_IT+0x94>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	4a23      	ldr	r2, [pc, #140]	@ (8012344 <HAL_TIM_Base_Start_IT+0xf4>)
 80122b8:	4293      	cmp	r3, r2
 80122ba:	d013      	beq.n	80122e4 <HAL_TIM_Base_Start_IT+0x94>
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	4a21      	ldr	r2, [pc, #132]	@ (8012348 <HAL_TIM_Base_Start_IT+0xf8>)
 80122c2:	4293      	cmp	r3, r2
 80122c4:	d00e      	beq.n	80122e4 <HAL_TIM_Base_Start_IT+0x94>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	4a20      	ldr	r2, [pc, #128]	@ (801234c <HAL_TIM_Base_Start_IT+0xfc>)
 80122cc:	4293      	cmp	r3, r2
 80122ce:	d009      	beq.n	80122e4 <HAL_TIM_Base_Start_IT+0x94>
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	4a1e      	ldr	r2, [pc, #120]	@ (8012350 <HAL_TIM_Base_Start_IT+0x100>)
 80122d6:	4293      	cmp	r3, r2
 80122d8:	d004      	beq.n	80122e4 <HAL_TIM_Base_Start_IT+0x94>
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	4a1d      	ldr	r2, [pc, #116]	@ (8012354 <HAL_TIM_Base_Start_IT+0x104>)
 80122e0:	4293      	cmp	r3, r2
 80122e2:	d115      	bne.n	8012310 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	689a      	ldr	r2, [r3, #8]
 80122ea:	4b1b      	ldr	r3, [pc, #108]	@ (8012358 <HAL_TIM_Base_Start_IT+0x108>)
 80122ec:	4013      	ands	r3, r2
 80122ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	2b06      	cmp	r3, #6
 80122f4:	d015      	beq.n	8012322 <HAL_TIM_Base_Start_IT+0xd2>
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80122fc:	d011      	beq.n	8012322 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	681a      	ldr	r2, [r3, #0]
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	f042 0201 	orr.w	r2, r2, #1
 801230c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801230e:	e008      	b.n	8012322 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	681a      	ldr	r2, [r3, #0]
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	f042 0201 	orr.w	r2, r2, #1
 801231e:	601a      	str	r2, [r3, #0]
 8012320:	e000      	b.n	8012324 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012322:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012324:	2300      	movs	r3, #0
}
 8012326:	4618      	mov	r0, r3
 8012328:	3714      	adds	r7, #20
 801232a:	46bd      	mov	sp, r7
 801232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012330:	4770      	bx	lr
 8012332:	bf00      	nop
 8012334:	40010000 	.word	0x40010000
 8012338:	40000400 	.word	0x40000400
 801233c:	40000800 	.word	0x40000800
 8012340:	40000c00 	.word	0x40000c00
 8012344:	40010400 	.word	0x40010400
 8012348:	40001800 	.word	0x40001800
 801234c:	40014000 	.word	0x40014000
 8012350:	4000e000 	.word	0x4000e000
 8012354:	4000e400 	.word	0x4000e400
 8012358:	00010007 	.word	0x00010007

0801235c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801235c:	b480      	push	{r7}
 801235e:	b083      	sub	sp, #12
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	68da      	ldr	r2, [r3, #12]
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	f022 0201 	bic.w	r2, r2, #1
 8012372:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	6a1a      	ldr	r2, [r3, #32]
 801237a:	f241 1311 	movw	r3, #4369	@ 0x1111
 801237e:	4013      	ands	r3, r2
 8012380:	2b00      	cmp	r3, #0
 8012382:	d10f      	bne.n	80123a4 <HAL_TIM_Base_Stop_IT+0x48>
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	6a1a      	ldr	r2, [r3, #32]
 801238a:	f240 4344 	movw	r3, #1092	@ 0x444
 801238e:	4013      	ands	r3, r2
 8012390:	2b00      	cmp	r3, #0
 8012392:	d107      	bne.n	80123a4 <HAL_TIM_Base_Stop_IT+0x48>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	f022 0201 	bic.w	r2, r2, #1
 80123a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2201      	movs	r2, #1
 80123a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80123ac:	2300      	movs	r3, #0
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	370c      	adds	r7, #12
 80123b2:	46bd      	mov	sp, r7
 80123b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b8:	4770      	bx	lr

080123ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80123ba:	b580      	push	{r7, lr}
 80123bc:	b082      	sub	sp, #8
 80123be:	af00      	add	r7, sp, #0
 80123c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d101      	bne.n	80123cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80123c8:	2301      	movs	r3, #1
 80123ca:	e049      	b.n	8012460 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80123d2:	b2db      	uxtb	r3, r3
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d106      	bne.n	80123e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2200      	movs	r2, #0
 80123dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f000 f841 	bl	8012468 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2202      	movs	r2, #2
 80123ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	3304      	adds	r3, #4
 80123f6:	4619      	mov	r1, r3
 80123f8:	4610      	mov	r0, r2
 80123fa:	f001 f847 	bl	801348c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2201      	movs	r2, #1
 8012402:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2201      	movs	r2, #1
 801240a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2201      	movs	r2, #1
 8012412:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	2201      	movs	r2, #1
 801241a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2201      	movs	r2, #1
 8012422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2201      	movs	r2, #1
 801242a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2201      	movs	r2, #1
 8012432:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2201      	movs	r2, #1
 801243a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2201      	movs	r2, #1
 8012442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2201      	movs	r2, #1
 801244a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2201      	movs	r2, #1
 8012452:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	2201      	movs	r2, #1
 801245a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801245e:	2300      	movs	r3, #0
}
 8012460:	4618      	mov	r0, r3
 8012462:	3708      	adds	r7, #8
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}

08012468 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012468:	b480      	push	{r7}
 801246a:	b083      	sub	sp, #12
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012470:	bf00      	nop
 8012472:	370c      	adds	r7, #12
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr

0801247c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b084      	sub	sp, #16
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d109      	bne.n	80124a0 <HAL_TIM_PWM_Start+0x24>
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012492:	b2db      	uxtb	r3, r3
 8012494:	2b01      	cmp	r3, #1
 8012496:	bf14      	ite	ne
 8012498:	2301      	movne	r3, #1
 801249a:	2300      	moveq	r3, #0
 801249c:	b2db      	uxtb	r3, r3
 801249e:	e03c      	b.n	801251a <HAL_TIM_PWM_Start+0x9e>
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	2b04      	cmp	r3, #4
 80124a4:	d109      	bne.n	80124ba <HAL_TIM_PWM_Start+0x3e>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80124ac:	b2db      	uxtb	r3, r3
 80124ae:	2b01      	cmp	r3, #1
 80124b0:	bf14      	ite	ne
 80124b2:	2301      	movne	r3, #1
 80124b4:	2300      	moveq	r3, #0
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	e02f      	b.n	801251a <HAL_TIM_PWM_Start+0x9e>
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	2b08      	cmp	r3, #8
 80124be:	d109      	bne.n	80124d4 <HAL_TIM_PWM_Start+0x58>
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80124c6:	b2db      	uxtb	r3, r3
 80124c8:	2b01      	cmp	r3, #1
 80124ca:	bf14      	ite	ne
 80124cc:	2301      	movne	r3, #1
 80124ce:	2300      	moveq	r3, #0
 80124d0:	b2db      	uxtb	r3, r3
 80124d2:	e022      	b.n	801251a <HAL_TIM_PWM_Start+0x9e>
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	2b0c      	cmp	r3, #12
 80124d8:	d109      	bne.n	80124ee <HAL_TIM_PWM_Start+0x72>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80124e0:	b2db      	uxtb	r3, r3
 80124e2:	2b01      	cmp	r3, #1
 80124e4:	bf14      	ite	ne
 80124e6:	2301      	movne	r3, #1
 80124e8:	2300      	moveq	r3, #0
 80124ea:	b2db      	uxtb	r3, r3
 80124ec:	e015      	b.n	801251a <HAL_TIM_PWM_Start+0x9e>
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	2b10      	cmp	r3, #16
 80124f2:	d109      	bne.n	8012508 <HAL_TIM_PWM_Start+0x8c>
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80124fa:	b2db      	uxtb	r3, r3
 80124fc:	2b01      	cmp	r3, #1
 80124fe:	bf14      	ite	ne
 8012500:	2301      	movne	r3, #1
 8012502:	2300      	moveq	r3, #0
 8012504:	b2db      	uxtb	r3, r3
 8012506:	e008      	b.n	801251a <HAL_TIM_PWM_Start+0x9e>
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801250e:	b2db      	uxtb	r3, r3
 8012510:	2b01      	cmp	r3, #1
 8012512:	bf14      	ite	ne
 8012514:	2301      	movne	r3, #1
 8012516:	2300      	moveq	r3, #0
 8012518:	b2db      	uxtb	r3, r3
 801251a:	2b00      	cmp	r3, #0
 801251c:	d001      	beq.n	8012522 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801251e:	2301      	movs	r3, #1
 8012520:	e0ab      	b.n	801267a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d104      	bne.n	8012532 <HAL_TIM_PWM_Start+0xb6>
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2202      	movs	r2, #2
 801252c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012530:	e023      	b.n	801257a <HAL_TIM_PWM_Start+0xfe>
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	2b04      	cmp	r3, #4
 8012536:	d104      	bne.n	8012542 <HAL_TIM_PWM_Start+0xc6>
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2202      	movs	r2, #2
 801253c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012540:	e01b      	b.n	801257a <HAL_TIM_PWM_Start+0xfe>
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	2b08      	cmp	r3, #8
 8012546:	d104      	bne.n	8012552 <HAL_TIM_PWM_Start+0xd6>
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	2202      	movs	r2, #2
 801254c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012550:	e013      	b.n	801257a <HAL_TIM_PWM_Start+0xfe>
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	2b0c      	cmp	r3, #12
 8012556:	d104      	bne.n	8012562 <HAL_TIM_PWM_Start+0xe6>
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	2202      	movs	r2, #2
 801255c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012560:	e00b      	b.n	801257a <HAL_TIM_PWM_Start+0xfe>
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	2b10      	cmp	r3, #16
 8012566:	d104      	bne.n	8012572 <HAL_TIM_PWM_Start+0xf6>
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	2202      	movs	r2, #2
 801256c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012570:	e003      	b.n	801257a <HAL_TIM_PWM_Start+0xfe>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2202      	movs	r2, #2
 8012576:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	2201      	movs	r2, #1
 8012580:	6839      	ldr	r1, [r7, #0]
 8012582:	4618      	mov	r0, r3
 8012584:	f001 fba8 	bl	8013cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	4a3d      	ldr	r2, [pc, #244]	@ (8012684 <HAL_TIM_PWM_Start+0x208>)
 801258e:	4293      	cmp	r3, r2
 8012590:	d013      	beq.n	80125ba <HAL_TIM_PWM_Start+0x13e>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	4a3c      	ldr	r2, [pc, #240]	@ (8012688 <HAL_TIM_PWM_Start+0x20c>)
 8012598:	4293      	cmp	r3, r2
 801259a:	d00e      	beq.n	80125ba <HAL_TIM_PWM_Start+0x13e>
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	4a3a      	ldr	r2, [pc, #232]	@ (801268c <HAL_TIM_PWM_Start+0x210>)
 80125a2:	4293      	cmp	r3, r2
 80125a4:	d009      	beq.n	80125ba <HAL_TIM_PWM_Start+0x13e>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	4a39      	ldr	r2, [pc, #228]	@ (8012690 <HAL_TIM_PWM_Start+0x214>)
 80125ac:	4293      	cmp	r3, r2
 80125ae:	d004      	beq.n	80125ba <HAL_TIM_PWM_Start+0x13e>
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	4a37      	ldr	r2, [pc, #220]	@ (8012694 <HAL_TIM_PWM_Start+0x218>)
 80125b6:	4293      	cmp	r3, r2
 80125b8:	d101      	bne.n	80125be <HAL_TIM_PWM_Start+0x142>
 80125ba:	2301      	movs	r3, #1
 80125bc:	e000      	b.n	80125c0 <HAL_TIM_PWM_Start+0x144>
 80125be:	2300      	movs	r3, #0
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d007      	beq.n	80125d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80125d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	4a2a      	ldr	r2, [pc, #168]	@ (8012684 <HAL_TIM_PWM_Start+0x208>)
 80125da:	4293      	cmp	r3, r2
 80125dc:	d02c      	beq.n	8012638 <HAL_TIM_PWM_Start+0x1bc>
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80125e6:	d027      	beq.n	8012638 <HAL_TIM_PWM_Start+0x1bc>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	4a2a      	ldr	r2, [pc, #168]	@ (8012698 <HAL_TIM_PWM_Start+0x21c>)
 80125ee:	4293      	cmp	r3, r2
 80125f0:	d022      	beq.n	8012638 <HAL_TIM_PWM_Start+0x1bc>
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	4a29      	ldr	r2, [pc, #164]	@ (801269c <HAL_TIM_PWM_Start+0x220>)
 80125f8:	4293      	cmp	r3, r2
 80125fa:	d01d      	beq.n	8012638 <HAL_TIM_PWM_Start+0x1bc>
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	4a27      	ldr	r2, [pc, #156]	@ (80126a0 <HAL_TIM_PWM_Start+0x224>)
 8012602:	4293      	cmp	r3, r2
 8012604:	d018      	beq.n	8012638 <HAL_TIM_PWM_Start+0x1bc>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	4a1f      	ldr	r2, [pc, #124]	@ (8012688 <HAL_TIM_PWM_Start+0x20c>)
 801260c:	4293      	cmp	r3, r2
 801260e:	d013      	beq.n	8012638 <HAL_TIM_PWM_Start+0x1bc>
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	4a23      	ldr	r2, [pc, #140]	@ (80126a4 <HAL_TIM_PWM_Start+0x228>)
 8012616:	4293      	cmp	r3, r2
 8012618:	d00e      	beq.n	8012638 <HAL_TIM_PWM_Start+0x1bc>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	4a1b      	ldr	r2, [pc, #108]	@ (801268c <HAL_TIM_PWM_Start+0x210>)
 8012620:	4293      	cmp	r3, r2
 8012622:	d009      	beq.n	8012638 <HAL_TIM_PWM_Start+0x1bc>
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	4a1f      	ldr	r2, [pc, #124]	@ (80126a8 <HAL_TIM_PWM_Start+0x22c>)
 801262a:	4293      	cmp	r3, r2
 801262c:	d004      	beq.n	8012638 <HAL_TIM_PWM_Start+0x1bc>
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	4a1e      	ldr	r2, [pc, #120]	@ (80126ac <HAL_TIM_PWM_Start+0x230>)
 8012634:	4293      	cmp	r3, r2
 8012636:	d115      	bne.n	8012664 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	689a      	ldr	r2, [r3, #8]
 801263e:	4b1c      	ldr	r3, [pc, #112]	@ (80126b0 <HAL_TIM_PWM_Start+0x234>)
 8012640:	4013      	ands	r3, r2
 8012642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	2b06      	cmp	r3, #6
 8012648:	d015      	beq.n	8012676 <HAL_TIM_PWM_Start+0x1fa>
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012650:	d011      	beq.n	8012676 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	681a      	ldr	r2, [r3, #0]
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	f042 0201 	orr.w	r2, r2, #1
 8012660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012662:	e008      	b.n	8012676 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	681a      	ldr	r2, [r3, #0]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	f042 0201 	orr.w	r2, r2, #1
 8012672:	601a      	str	r2, [r3, #0]
 8012674:	e000      	b.n	8012678 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012676:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012678:	2300      	movs	r3, #0
}
 801267a:	4618      	mov	r0, r3
 801267c:	3710      	adds	r7, #16
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}
 8012682:	bf00      	nop
 8012684:	40010000 	.word	0x40010000
 8012688:	40010400 	.word	0x40010400
 801268c:	40014000 	.word	0x40014000
 8012690:	40014400 	.word	0x40014400
 8012694:	40014800 	.word	0x40014800
 8012698:	40000400 	.word	0x40000400
 801269c:	40000800 	.word	0x40000800
 80126a0:	40000c00 	.word	0x40000c00
 80126a4:	40001800 	.word	0x40001800
 80126a8:	4000e000 	.word	0x4000e000
 80126ac:	4000e400 	.word	0x4000e400
 80126b0:	00010007 	.word	0x00010007

080126b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b082      	sub	sp, #8
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
 80126bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	2200      	movs	r2, #0
 80126c4:	6839      	ldr	r1, [r7, #0]
 80126c6:	4618      	mov	r0, r3
 80126c8:	f001 fb06 	bl	8013cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	4a3e      	ldr	r2, [pc, #248]	@ (80127cc <HAL_TIM_PWM_Stop+0x118>)
 80126d2:	4293      	cmp	r3, r2
 80126d4:	d013      	beq.n	80126fe <HAL_TIM_PWM_Stop+0x4a>
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	4a3d      	ldr	r2, [pc, #244]	@ (80127d0 <HAL_TIM_PWM_Stop+0x11c>)
 80126dc:	4293      	cmp	r3, r2
 80126de:	d00e      	beq.n	80126fe <HAL_TIM_PWM_Stop+0x4a>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	4a3b      	ldr	r2, [pc, #236]	@ (80127d4 <HAL_TIM_PWM_Stop+0x120>)
 80126e6:	4293      	cmp	r3, r2
 80126e8:	d009      	beq.n	80126fe <HAL_TIM_PWM_Stop+0x4a>
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	4a3a      	ldr	r2, [pc, #232]	@ (80127d8 <HAL_TIM_PWM_Stop+0x124>)
 80126f0:	4293      	cmp	r3, r2
 80126f2:	d004      	beq.n	80126fe <HAL_TIM_PWM_Stop+0x4a>
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	4a38      	ldr	r2, [pc, #224]	@ (80127dc <HAL_TIM_PWM_Stop+0x128>)
 80126fa:	4293      	cmp	r3, r2
 80126fc:	d101      	bne.n	8012702 <HAL_TIM_PWM_Stop+0x4e>
 80126fe:	2301      	movs	r3, #1
 8012700:	e000      	b.n	8012704 <HAL_TIM_PWM_Stop+0x50>
 8012702:	2300      	movs	r3, #0
 8012704:	2b00      	cmp	r3, #0
 8012706:	d017      	beq.n	8012738 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	6a1a      	ldr	r2, [r3, #32]
 801270e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012712:	4013      	ands	r3, r2
 8012714:	2b00      	cmp	r3, #0
 8012716:	d10f      	bne.n	8012738 <HAL_TIM_PWM_Stop+0x84>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	6a1a      	ldr	r2, [r3, #32]
 801271e:	f240 4344 	movw	r3, #1092	@ 0x444
 8012722:	4013      	ands	r3, r2
 8012724:	2b00      	cmp	r3, #0
 8012726:	d107      	bne.n	8012738 <HAL_TIM_PWM_Stop+0x84>
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012736:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	6a1a      	ldr	r2, [r3, #32]
 801273e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012742:	4013      	ands	r3, r2
 8012744:	2b00      	cmp	r3, #0
 8012746:	d10f      	bne.n	8012768 <HAL_TIM_PWM_Stop+0xb4>
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	6a1a      	ldr	r2, [r3, #32]
 801274e:	f240 4344 	movw	r3, #1092	@ 0x444
 8012752:	4013      	ands	r3, r2
 8012754:	2b00      	cmp	r3, #0
 8012756:	d107      	bne.n	8012768 <HAL_TIM_PWM_Stop+0xb4>
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	f022 0201 	bic.w	r2, r2, #1
 8012766:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d104      	bne.n	8012778 <HAL_TIM_PWM_Stop+0xc4>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2201      	movs	r2, #1
 8012772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012776:	e023      	b.n	80127c0 <HAL_TIM_PWM_Stop+0x10c>
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	2b04      	cmp	r3, #4
 801277c:	d104      	bne.n	8012788 <HAL_TIM_PWM_Stop+0xd4>
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2201      	movs	r2, #1
 8012782:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012786:	e01b      	b.n	80127c0 <HAL_TIM_PWM_Stop+0x10c>
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	2b08      	cmp	r3, #8
 801278c:	d104      	bne.n	8012798 <HAL_TIM_PWM_Stop+0xe4>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2201      	movs	r2, #1
 8012792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012796:	e013      	b.n	80127c0 <HAL_TIM_PWM_Stop+0x10c>
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	2b0c      	cmp	r3, #12
 801279c:	d104      	bne.n	80127a8 <HAL_TIM_PWM_Stop+0xf4>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	2201      	movs	r2, #1
 80127a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80127a6:	e00b      	b.n	80127c0 <HAL_TIM_PWM_Stop+0x10c>
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	2b10      	cmp	r3, #16
 80127ac:	d104      	bne.n	80127b8 <HAL_TIM_PWM_Stop+0x104>
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2201      	movs	r2, #1
 80127b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80127b6:	e003      	b.n	80127c0 <HAL_TIM_PWM_Stop+0x10c>
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2201      	movs	r2, #1
 80127bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80127c0:	2300      	movs	r3, #0
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3708      	adds	r7, #8
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	40010000 	.word	0x40010000
 80127d0:	40010400 	.word	0x40010400
 80127d4:	40014000 	.word	0x40014000
 80127d8:	40014400 	.word	0x40014400
 80127dc:	40014800 	.word	0x40014800

080127e0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b086      	sub	sp, #24
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	60f8      	str	r0, [r7, #12]
 80127e8:	60b9      	str	r1, [r7, #8]
 80127ea:	607a      	str	r2, [r7, #4]
 80127ec:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80127ee:	2300      	movs	r3, #0
 80127f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d109      	bne.n	801280c <HAL_TIM_PWM_Start_DMA+0x2c>
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80127fe:	b2db      	uxtb	r3, r3
 8012800:	2b02      	cmp	r3, #2
 8012802:	bf0c      	ite	eq
 8012804:	2301      	moveq	r3, #1
 8012806:	2300      	movne	r3, #0
 8012808:	b2db      	uxtb	r3, r3
 801280a:	e03c      	b.n	8012886 <HAL_TIM_PWM_Start_DMA+0xa6>
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	2b04      	cmp	r3, #4
 8012810:	d109      	bne.n	8012826 <HAL_TIM_PWM_Start_DMA+0x46>
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012818:	b2db      	uxtb	r3, r3
 801281a:	2b02      	cmp	r3, #2
 801281c:	bf0c      	ite	eq
 801281e:	2301      	moveq	r3, #1
 8012820:	2300      	movne	r3, #0
 8012822:	b2db      	uxtb	r3, r3
 8012824:	e02f      	b.n	8012886 <HAL_TIM_PWM_Start_DMA+0xa6>
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	2b08      	cmp	r3, #8
 801282a:	d109      	bne.n	8012840 <HAL_TIM_PWM_Start_DMA+0x60>
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012832:	b2db      	uxtb	r3, r3
 8012834:	2b02      	cmp	r3, #2
 8012836:	bf0c      	ite	eq
 8012838:	2301      	moveq	r3, #1
 801283a:	2300      	movne	r3, #0
 801283c:	b2db      	uxtb	r3, r3
 801283e:	e022      	b.n	8012886 <HAL_TIM_PWM_Start_DMA+0xa6>
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	2b0c      	cmp	r3, #12
 8012844:	d109      	bne.n	801285a <HAL_TIM_PWM_Start_DMA+0x7a>
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801284c:	b2db      	uxtb	r3, r3
 801284e:	2b02      	cmp	r3, #2
 8012850:	bf0c      	ite	eq
 8012852:	2301      	moveq	r3, #1
 8012854:	2300      	movne	r3, #0
 8012856:	b2db      	uxtb	r3, r3
 8012858:	e015      	b.n	8012886 <HAL_TIM_PWM_Start_DMA+0xa6>
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	2b10      	cmp	r3, #16
 801285e:	d109      	bne.n	8012874 <HAL_TIM_PWM_Start_DMA+0x94>
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012866:	b2db      	uxtb	r3, r3
 8012868:	2b02      	cmp	r3, #2
 801286a:	bf0c      	ite	eq
 801286c:	2301      	moveq	r3, #1
 801286e:	2300      	movne	r3, #0
 8012870:	b2db      	uxtb	r3, r3
 8012872:	e008      	b.n	8012886 <HAL_TIM_PWM_Start_DMA+0xa6>
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801287a:	b2db      	uxtb	r3, r3
 801287c:	2b02      	cmp	r3, #2
 801287e:	bf0c      	ite	eq
 8012880:	2301      	moveq	r3, #1
 8012882:	2300      	movne	r3, #0
 8012884:	b2db      	uxtb	r3, r3
 8012886:	2b00      	cmp	r3, #0
 8012888:	d001      	beq.n	801288e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 801288a:	2302      	movs	r3, #2
 801288c:	e1ba      	b.n	8012c04 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d109      	bne.n	80128a8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801289a:	b2db      	uxtb	r3, r3
 801289c:	2b01      	cmp	r3, #1
 801289e:	bf0c      	ite	eq
 80128a0:	2301      	moveq	r3, #1
 80128a2:	2300      	movne	r3, #0
 80128a4:	b2db      	uxtb	r3, r3
 80128a6:	e03c      	b.n	8012922 <HAL_TIM_PWM_Start_DMA+0x142>
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	2b04      	cmp	r3, #4
 80128ac:	d109      	bne.n	80128c2 <HAL_TIM_PWM_Start_DMA+0xe2>
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80128b4:	b2db      	uxtb	r3, r3
 80128b6:	2b01      	cmp	r3, #1
 80128b8:	bf0c      	ite	eq
 80128ba:	2301      	moveq	r3, #1
 80128bc:	2300      	movne	r3, #0
 80128be:	b2db      	uxtb	r3, r3
 80128c0:	e02f      	b.n	8012922 <HAL_TIM_PWM_Start_DMA+0x142>
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	2b08      	cmp	r3, #8
 80128c6:	d109      	bne.n	80128dc <HAL_TIM_PWM_Start_DMA+0xfc>
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80128ce:	b2db      	uxtb	r3, r3
 80128d0:	2b01      	cmp	r3, #1
 80128d2:	bf0c      	ite	eq
 80128d4:	2301      	moveq	r3, #1
 80128d6:	2300      	movne	r3, #0
 80128d8:	b2db      	uxtb	r3, r3
 80128da:	e022      	b.n	8012922 <HAL_TIM_PWM_Start_DMA+0x142>
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	2b0c      	cmp	r3, #12
 80128e0:	d109      	bne.n	80128f6 <HAL_TIM_PWM_Start_DMA+0x116>
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80128e8:	b2db      	uxtb	r3, r3
 80128ea:	2b01      	cmp	r3, #1
 80128ec:	bf0c      	ite	eq
 80128ee:	2301      	moveq	r3, #1
 80128f0:	2300      	movne	r3, #0
 80128f2:	b2db      	uxtb	r3, r3
 80128f4:	e015      	b.n	8012922 <HAL_TIM_PWM_Start_DMA+0x142>
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	2b10      	cmp	r3, #16
 80128fa:	d109      	bne.n	8012910 <HAL_TIM_PWM_Start_DMA+0x130>
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012902:	b2db      	uxtb	r3, r3
 8012904:	2b01      	cmp	r3, #1
 8012906:	bf0c      	ite	eq
 8012908:	2301      	moveq	r3, #1
 801290a:	2300      	movne	r3, #0
 801290c:	b2db      	uxtb	r3, r3
 801290e:	e008      	b.n	8012922 <HAL_TIM_PWM_Start_DMA+0x142>
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012916:	b2db      	uxtb	r3, r3
 8012918:	2b01      	cmp	r3, #1
 801291a:	bf0c      	ite	eq
 801291c:	2301      	moveq	r3, #1
 801291e:	2300      	movne	r3, #0
 8012920:	b2db      	uxtb	r3, r3
 8012922:	2b00      	cmp	r3, #0
 8012924:	d034      	beq.n	8012990 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d002      	beq.n	8012932 <HAL_TIM_PWM_Start_DMA+0x152>
 801292c:	887b      	ldrh	r3, [r7, #2]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d101      	bne.n	8012936 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8012932:	2301      	movs	r3, #1
 8012934:	e166      	b.n	8012c04 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d104      	bne.n	8012946 <HAL_TIM_PWM_Start_DMA+0x166>
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	2202      	movs	r2, #2
 8012940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012944:	e026      	b.n	8012994 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	2b04      	cmp	r3, #4
 801294a:	d104      	bne.n	8012956 <HAL_TIM_PWM_Start_DMA+0x176>
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	2202      	movs	r2, #2
 8012950:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012954:	e01e      	b.n	8012994 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	2b08      	cmp	r3, #8
 801295a:	d104      	bne.n	8012966 <HAL_TIM_PWM_Start_DMA+0x186>
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	2202      	movs	r2, #2
 8012960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012964:	e016      	b.n	8012994 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012966:	68bb      	ldr	r3, [r7, #8]
 8012968:	2b0c      	cmp	r3, #12
 801296a:	d104      	bne.n	8012976 <HAL_TIM_PWM_Start_DMA+0x196>
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	2202      	movs	r2, #2
 8012970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012974:	e00e      	b.n	8012994 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012976:	68bb      	ldr	r3, [r7, #8]
 8012978:	2b10      	cmp	r3, #16
 801297a:	d104      	bne.n	8012986 <HAL_TIM_PWM_Start_DMA+0x1a6>
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	2202      	movs	r2, #2
 8012980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012984:	e006      	b.n	8012994 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	2202      	movs	r2, #2
 801298a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801298e:	e001      	b.n	8012994 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8012990:	2301      	movs	r3, #1
 8012992:	e137      	b.n	8012c04 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	2b0c      	cmp	r3, #12
 8012998:	f200 80ae 	bhi.w	8012af8 <HAL_TIM_PWM_Start_DMA+0x318>
 801299c:	a201      	add	r2, pc, #4	@ (adr r2, 80129a4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 801299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129a2:	bf00      	nop
 80129a4:	080129d9 	.word	0x080129d9
 80129a8:	08012af9 	.word	0x08012af9
 80129ac:	08012af9 	.word	0x08012af9
 80129b0:	08012af9 	.word	0x08012af9
 80129b4:	08012a21 	.word	0x08012a21
 80129b8:	08012af9 	.word	0x08012af9
 80129bc:	08012af9 	.word	0x08012af9
 80129c0:	08012af9 	.word	0x08012af9
 80129c4:	08012a69 	.word	0x08012a69
 80129c8:	08012af9 	.word	0x08012af9
 80129cc:	08012af9 	.word	0x08012af9
 80129d0:	08012af9 	.word	0x08012af9
 80129d4:	08012ab1 	.word	0x08012ab1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129dc:	4a8b      	ldr	r2, [pc, #556]	@ (8012c0c <HAL_TIM_PWM_Start_DMA+0x42c>)
 80129de:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129e4:	4a8a      	ldr	r2, [pc, #552]	@ (8012c10 <HAL_TIM_PWM_Start_DMA+0x430>)
 80129e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129ec:	4a89      	ldr	r2, [pc, #548]	@ (8012c14 <HAL_TIM_PWM_Start_DMA+0x434>)
 80129ee:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80129f4:	6879      	ldr	r1, [r7, #4]
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	3334      	adds	r3, #52	@ 0x34
 80129fc:	461a      	mov	r2, r3
 80129fe:	887b      	ldrh	r3, [r7, #2]
 8012a00:	f7f7 fd44 	bl	800a48c <HAL_DMA_Start_IT>
 8012a04:	4603      	mov	r3, r0
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d001      	beq.n	8012a0e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	e0fa      	b.n	8012c04 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	68da      	ldr	r2, [r3, #12]
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012a1c:	60da      	str	r2, [r3, #12]
      break;
 8012a1e:	e06e      	b.n	8012afe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a24:	4a79      	ldr	r2, [pc, #484]	@ (8012c0c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012a26:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a2c:	4a78      	ldr	r2, [pc, #480]	@ (8012c10 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012a2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a34:	4a77      	ldr	r2, [pc, #476]	@ (8012c14 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012a36:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8012a3c:	6879      	ldr	r1, [r7, #4]
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	3338      	adds	r3, #56	@ 0x38
 8012a44:	461a      	mov	r2, r3
 8012a46:	887b      	ldrh	r3, [r7, #2]
 8012a48:	f7f7 fd20 	bl	800a48c <HAL_DMA_Start_IT>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d001      	beq.n	8012a56 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012a52:	2301      	movs	r3, #1
 8012a54:	e0d6      	b.n	8012c04 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	68da      	ldr	r2, [r3, #12]
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012a64:	60da      	str	r2, [r3, #12]
      break;
 8012a66:	e04a      	b.n	8012afe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a6c:	4a67      	ldr	r2, [pc, #412]	@ (8012c0c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012a6e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a74:	4a66      	ldr	r2, [pc, #408]	@ (8012c10 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012a76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a7c:	4a65      	ldr	r2, [pc, #404]	@ (8012c14 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012a7e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8012a84:	6879      	ldr	r1, [r7, #4]
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	333c      	adds	r3, #60	@ 0x3c
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	887b      	ldrh	r3, [r7, #2]
 8012a90:	f7f7 fcfc 	bl	800a48c <HAL_DMA_Start_IT>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d001      	beq.n	8012a9e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	e0b2      	b.n	8012c04 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	68da      	ldr	r2, [r3, #12]
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012aac:	60da      	str	r2, [r3, #12]
      break;
 8012aae:	e026      	b.n	8012afe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ab4:	4a55      	ldr	r2, [pc, #340]	@ (8012c0c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012abc:	4a54      	ldr	r2, [pc, #336]	@ (8012c10 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012abe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ac4:	4a53      	ldr	r2, [pc, #332]	@ (8012c14 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012ac6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012acc:	6879      	ldr	r1, [r7, #4]
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	3340      	adds	r3, #64	@ 0x40
 8012ad4:	461a      	mov	r2, r3
 8012ad6:	887b      	ldrh	r3, [r7, #2]
 8012ad8:	f7f7 fcd8 	bl	800a48c <HAL_DMA_Start_IT>
 8012adc:	4603      	mov	r3, r0
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d001      	beq.n	8012ae6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	e08e      	b.n	8012c04 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	68da      	ldr	r2, [r3, #12]
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012af4:	60da      	str	r2, [r3, #12]
      break;
 8012af6:	e002      	b.n	8012afe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8012af8:	2301      	movs	r3, #1
 8012afa:	75fb      	strb	r3, [r7, #23]
      break;
 8012afc:	bf00      	nop
  }

  if (status == HAL_OK)
 8012afe:	7dfb      	ldrb	r3, [r7, #23]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d17e      	bne.n	8012c02 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	2201      	movs	r2, #1
 8012b0a:	68b9      	ldr	r1, [r7, #8]
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f001 f8e3 	bl	8013cd8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	4a40      	ldr	r2, [pc, #256]	@ (8012c18 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012b18:	4293      	cmp	r3, r2
 8012b1a:	d013      	beq.n	8012b44 <HAL_TIM_PWM_Start_DMA+0x364>
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	4a3e      	ldr	r2, [pc, #248]	@ (8012c1c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8012b22:	4293      	cmp	r3, r2
 8012b24:	d00e      	beq.n	8012b44 <HAL_TIM_PWM_Start_DMA+0x364>
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	4a3d      	ldr	r2, [pc, #244]	@ (8012c20 <HAL_TIM_PWM_Start_DMA+0x440>)
 8012b2c:	4293      	cmp	r3, r2
 8012b2e:	d009      	beq.n	8012b44 <HAL_TIM_PWM_Start_DMA+0x364>
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	4a3b      	ldr	r2, [pc, #236]	@ (8012c24 <HAL_TIM_PWM_Start_DMA+0x444>)
 8012b36:	4293      	cmp	r3, r2
 8012b38:	d004      	beq.n	8012b44 <HAL_TIM_PWM_Start_DMA+0x364>
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	4a3a      	ldr	r2, [pc, #232]	@ (8012c28 <HAL_TIM_PWM_Start_DMA+0x448>)
 8012b40:	4293      	cmp	r3, r2
 8012b42:	d101      	bne.n	8012b48 <HAL_TIM_PWM_Start_DMA+0x368>
 8012b44:	2301      	movs	r3, #1
 8012b46:	e000      	b.n	8012b4a <HAL_TIM_PWM_Start_DMA+0x36a>
 8012b48:	2300      	movs	r3, #0
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d007      	beq.n	8012b5e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	4a2d      	ldr	r2, [pc, #180]	@ (8012c18 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012b64:	4293      	cmp	r3, r2
 8012b66:	d02c      	beq.n	8012bc2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012b70:	d027      	beq.n	8012bc2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	4a2d      	ldr	r2, [pc, #180]	@ (8012c2c <HAL_TIM_PWM_Start_DMA+0x44c>)
 8012b78:	4293      	cmp	r3, r2
 8012b7a:	d022      	beq.n	8012bc2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	4a2b      	ldr	r2, [pc, #172]	@ (8012c30 <HAL_TIM_PWM_Start_DMA+0x450>)
 8012b82:	4293      	cmp	r3, r2
 8012b84:	d01d      	beq.n	8012bc2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8012c34 <HAL_TIM_PWM_Start_DMA+0x454>)
 8012b8c:	4293      	cmp	r3, r2
 8012b8e:	d018      	beq.n	8012bc2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	4a21      	ldr	r2, [pc, #132]	@ (8012c1c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8012b96:	4293      	cmp	r3, r2
 8012b98:	d013      	beq.n	8012bc2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	4a26      	ldr	r2, [pc, #152]	@ (8012c38 <HAL_TIM_PWM_Start_DMA+0x458>)
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	d00e      	beq.n	8012bc2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8012c20 <HAL_TIM_PWM_Start_DMA+0x440>)
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d009      	beq.n	8012bc2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	4a22      	ldr	r2, [pc, #136]	@ (8012c3c <HAL_TIM_PWM_Start_DMA+0x45c>)
 8012bb4:	4293      	cmp	r3, r2
 8012bb6:	d004      	beq.n	8012bc2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	4a20      	ldr	r2, [pc, #128]	@ (8012c40 <HAL_TIM_PWM_Start_DMA+0x460>)
 8012bbe:	4293      	cmp	r3, r2
 8012bc0:	d115      	bne.n	8012bee <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	689a      	ldr	r2, [r3, #8]
 8012bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8012c44 <HAL_TIM_PWM_Start_DMA+0x464>)
 8012bca:	4013      	ands	r3, r2
 8012bcc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	2b06      	cmp	r3, #6
 8012bd2:	d015      	beq.n	8012c00 <HAL_TIM_PWM_Start_DMA+0x420>
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012bda:	d011      	beq.n	8012c00 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	681a      	ldr	r2, [r3, #0]
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	f042 0201 	orr.w	r2, r2, #1
 8012bea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012bec:	e008      	b.n	8012c00 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	681a      	ldr	r2, [r3, #0]
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	f042 0201 	orr.w	r2, r2, #1
 8012bfc:	601a      	str	r2, [r3, #0]
 8012bfe:	e000      	b.n	8012c02 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012c00:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c04:	4618      	mov	r0, r3
 8012c06:	3718      	adds	r7, #24
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}
 8012c0c:	0801337b 	.word	0x0801337b
 8012c10:	08013423 	.word	0x08013423
 8012c14:	080132e9 	.word	0x080132e9
 8012c18:	40010000 	.word	0x40010000
 8012c1c:	40010400 	.word	0x40010400
 8012c20:	40014000 	.word	0x40014000
 8012c24:	40014400 	.word	0x40014400
 8012c28:	40014800 	.word	0x40014800
 8012c2c:	40000400 	.word	0x40000400
 8012c30:	40000800 	.word	0x40000800
 8012c34:	40000c00 	.word	0x40000c00
 8012c38:	40001800 	.word	0x40001800
 8012c3c:	4000e000 	.word	0x4000e000
 8012c40:	4000e400 	.word	0x4000e400
 8012c44:	00010007 	.word	0x00010007

08012c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b084      	sub	sp, #16
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	68db      	ldr	r3, [r3, #12]
 8012c56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	691b      	ldr	r3, [r3, #16]
 8012c5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	f003 0302 	and.w	r3, r3, #2
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d020      	beq.n	8012cac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	f003 0302 	and.w	r3, r3, #2
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d01b      	beq.n	8012cac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f06f 0202 	mvn.w	r2, #2
 8012c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2201      	movs	r2, #1
 8012c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	699b      	ldr	r3, [r3, #24]
 8012c8a:	f003 0303 	and.w	r3, r3, #3
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d003      	beq.n	8012c9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f000 faf6 	bl	8013284 <HAL_TIM_IC_CaptureCallback>
 8012c98:	e005      	b.n	8012ca6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012c9a:	6878      	ldr	r0, [r7, #4]
 8012c9c:	f000 fae8 	bl	8013270 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f000 faf9 	bl	8013298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	2200      	movs	r2, #0
 8012caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	f003 0304 	and.w	r3, r3, #4
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d020      	beq.n	8012cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	f003 0304 	and.w	r3, r3, #4
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d01b      	beq.n	8012cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	f06f 0204 	mvn.w	r2, #4
 8012cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	2202      	movs	r2, #2
 8012cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	699b      	ldr	r3, [r3, #24]
 8012cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d003      	beq.n	8012ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f000 fad0 	bl	8013284 <HAL_TIM_IC_CaptureCallback>
 8012ce4:	e005      	b.n	8012cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	f000 fac2 	bl	8013270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f000 fad3 	bl	8013298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	f003 0308 	and.w	r3, r3, #8
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d020      	beq.n	8012d44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	f003 0308 	and.w	r3, r3, #8
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d01b      	beq.n	8012d44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	f06f 0208 	mvn.w	r2, #8
 8012d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2204      	movs	r2, #4
 8012d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	69db      	ldr	r3, [r3, #28]
 8012d22:	f003 0303 	and.w	r3, r3, #3
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d003      	beq.n	8012d32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f000 faaa 	bl	8013284 <HAL_TIM_IC_CaptureCallback>
 8012d30:	e005      	b.n	8012d3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f000 fa9c 	bl	8013270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f000 faad 	bl	8013298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	2200      	movs	r2, #0
 8012d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	f003 0310 	and.w	r3, r3, #16
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d020      	beq.n	8012d90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	f003 0310 	and.w	r3, r3, #16
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d01b      	beq.n	8012d90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	f06f 0210 	mvn.w	r2, #16
 8012d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2208      	movs	r2, #8
 8012d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	69db      	ldr	r3, [r3, #28]
 8012d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d003      	beq.n	8012d7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f000 fa84 	bl	8013284 <HAL_TIM_IC_CaptureCallback>
 8012d7c:	e005      	b.n	8012d8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f000 fa76 	bl	8013270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f000 fa87 	bl	8013298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	f003 0301 	and.w	r3, r3, #1
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d00c      	beq.n	8012db4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	f003 0301 	and.w	r3, r3, #1
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d007      	beq.n	8012db4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	f06f 0201 	mvn.w	r2, #1
 8012dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f7ee fa88 	bl	80012c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d104      	bne.n	8012dc8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d00c      	beq.n	8012de2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d007      	beq.n	8012de2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8012dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012ddc:	6878      	ldr	r0, [r7, #4]
 8012dde:	f001 f847 	bl	8013e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d00c      	beq.n	8012e06 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d007      	beq.n	8012e06 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8012dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f001 f83f 	bl	8013e84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d00c      	beq.n	8012e2a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d007      	beq.n	8012e2a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8012e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f000 fa4b 	bl	80132c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	f003 0320 	and.w	r3, r3, #32
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d00c      	beq.n	8012e4e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	f003 0320 	and.w	r3, r3, #32
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d007      	beq.n	8012e4e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	f06f 0220 	mvn.w	r2, #32
 8012e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f001 f807 	bl	8013e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012e4e:	bf00      	nop
 8012e50:	3710      	adds	r7, #16
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
	...

08012e58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b086      	sub	sp, #24
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	60f8      	str	r0, [r7, #12]
 8012e60:	60b9      	str	r1, [r7, #8]
 8012e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012e64:	2300      	movs	r3, #0
 8012e66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012e6e:	2b01      	cmp	r3, #1
 8012e70:	d101      	bne.n	8012e76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012e72:	2302      	movs	r3, #2
 8012e74:	e0ff      	b.n	8013076 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	2201      	movs	r2, #1
 8012e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	2b14      	cmp	r3, #20
 8012e82:	f200 80f0 	bhi.w	8013066 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012e86:	a201      	add	r2, pc, #4	@ (adr r2, 8012e8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e8c:	08012ee1 	.word	0x08012ee1
 8012e90:	08013067 	.word	0x08013067
 8012e94:	08013067 	.word	0x08013067
 8012e98:	08013067 	.word	0x08013067
 8012e9c:	08012f21 	.word	0x08012f21
 8012ea0:	08013067 	.word	0x08013067
 8012ea4:	08013067 	.word	0x08013067
 8012ea8:	08013067 	.word	0x08013067
 8012eac:	08012f63 	.word	0x08012f63
 8012eb0:	08013067 	.word	0x08013067
 8012eb4:	08013067 	.word	0x08013067
 8012eb8:	08013067 	.word	0x08013067
 8012ebc:	08012fa3 	.word	0x08012fa3
 8012ec0:	08013067 	.word	0x08013067
 8012ec4:	08013067 	.word	0x08013067
 8012ec8:	08013067 	.word	0x08013067
 8012ecc:	08012fe5 	.word	0x08012fe5
 8012ed0:	08013067 	.word	0x08013067
 8012ed4:	08013067 	.word	0x08013067
 8012ed8:	08013067 	.word	0x08013067
 8012edc:	08013025 	.word	0x08013025
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	68b9      	ldr	r1, [r7, #8]
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f000 fb82 	bl	80135f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	699a      	ldr	r2, [r3, #24]
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	f042 0208 	orr.w	r2, r2, #8
 8012efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	699a      	ldr	r2, [r3, #24]
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	f022 0204 	bic.w	r2, r2, #4
 8012f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	6999      	ldr	r1, [r3, #24]
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	691a      	ldr	r2, [r3, #16]
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	430a      	orrs	r2, r1
 8012f1c:	619a      	str	r2, [r3, #24]
      break;
 8012f1e:	e0a5      	b.n	801306c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	68b9      	ldr	r1, [r7, #8]
 8012f26:	4618      	mov	r0, r3
 8012f28:	f000 fbf2 	bl	8013710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	699a      	ldr	r2, [r3, #24]
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	699a      	ldr	r2, [r3, #24]
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	6999      	ldr	r1, [r3, #24]
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	691b      	ldr	r3, [r3, #16]
 8012f56:	021a      	lsls	r2, r3, #8
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	430a      	orrs	r2, r1
 8012f5e:	619a      	str	r2, [r3, #24]
      break;
 8012f60:	e084      	b.n	801306c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	68b9      	ldr	r1, [r7, #8]
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f000 fc5b 	bl	8013824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	69da      	ldr	r2, [r3, #28]
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	f042 0208 	orr.w	r2, r2, #8
 8012f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	69da      	ldr	r2, [r3, #28]
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	f022 0204 	bic.w	r2, r2, #4
 8012f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	69d9      	ldr	r1, [r3, #28]
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	691a      	ldr	r2, [r3, #16]
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	430a      	orrs	r2, r1
 8012f9e:	61da      	str	r2, [r3, #28]
      break;
 8012fa0:	e064      	b.n	801306c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	68b9      	ldr	r1, [r7, #8]
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f000 fcc3 	bl	8013934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	69da      	ldr	r2, [r3, #28]
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	69da      	ldr	r2, [r3, #28]
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	69d9      	ldr	r1, [r3, #28]
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	691b      	ldr	r3, [r3, #16]
 8012fd8:	021a      	lsls	r2, r3, #8
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	430a      	orrs	r2, r1
 8012fe0:	61da      	str	r2, [r3, #28]
      break;
 8012fe2:	e043      	b.n	801306c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	68b9      	ldr	r1, [r7, #8]
 8012fea:	4618      	mov	r0, r3
 8012fec:	f000 fd0c 	bl	8013a08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	f042 0208 	orr.w	r2, r2, #8
 8012ffe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	f022 0204 	bic.w	r2, r2, #4
 801300e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	691a      	ldr	r2, [r3, #16]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	430a      	orrs	r2, r1
 8013020:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8013022:	e023      	b.n	801306c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	68b9      	ldr	r1, [r7, #8]
 801302a:	4618      	mov	r0, r3
 801302c:	f000 fd50 	bl	8013ad0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801303e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801304e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	691b      	ldr	r3, [r3, #16]
 801305a:	021a      	lsls	r2, r3, #8
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	430a      	orrs	r2, r1
 8013062:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8013064:	e002      	b.n	801306c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8013066:	2301      	movs	r3, #1
 8013068:	75fb      	strb	r3, [r7, #23]
      break;
 801306a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	2200      	movs	r2, #0
 8013070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013074:	7dfb      	ldrb	r3, [r7, #23]
}
 8013076:	4618      	mov	r0, r3
 8013078:	3718      	adds	r7, #24
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop

08013080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b084      	sub	sp, #16
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801308a:	2300      	movs	r3, #0
 801308c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013094:	2b01      	cmp	r3, #1
 8013096:	d101      	bne.n	801309c <HAL_TIM_ConfigClockSource+0x1c>
 8013098:	2302      	movs	r3, #2
 801309a:	e0dc      	b.n	8013256 <HAL_TIM_ConfigClockSource+0x1d6>
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2201      	movs	r2, #1
 80130a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2202      	movs	r2, #2
 80130a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	689b      	ldr	r3, [r3, #8]
 80130b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80130b4:	68ba      	ldr	r2, [r7, #8]
 80130b6:	4b6a      	ldr	r3, [pc, #424]	@ (8013260 <HAL_TIM_ConfigClockSource+0x1e0>)
 80130b8:	4013      	ands	r3, r2
 80130ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80130bc:	68bb      	ldr	r3, [r7, #8]
 80130be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80130c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	68ba      	ldr	r2, [r7, #8]
 80130ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	4a64      	ldr	r2, [pc, #400]	@ (8013264 <HAL_TIM_ConfigClockSource+0x1e4>)
 80130d2:	4293      	cmp	r3, r2
 80130d4:	f000 80a9 	beq.w	801322a <HAL_TIM_ConfigClockSource+0x1aa>
 80130d8:	4a62      	ldr	r2, [pc, #392]	@ (8013264 <HAL_TIM_ConfigClockSource+0x1e4>)
 80130da:	4293      	cmp	r3, r2
 80130dc:	f200 80ae 	bhi.w	801323c <HAL_TIM_ConfigClockSource+0x1bc>
 80130e0:	4a61      	ldr	r2, [pc, #388]	@ (8013268 <HAL_TIM_ConfigClockSource+0x1e8>)
 80130e2:	4293      	cmp	r3, r2
 80130e4:	f000 80a1 	beq.w	801322a <HAL_TIM_ConfigClockSource+0x1aa>
 80130e8:	4a5f      	ldr	r2, [pc, #380]	@ (8013268 <HAL_TIM_ConfigClockSource+0x1e8>)
 80130ea:	4293      	cmp	r3, r2
 80130ec:	f200 80a6 	bhi.w	801323c <HAL_TIM_ConfigClockSource+0x1bc>
 80130f0:	4a5e      	ldr	r2, [pc, #376]	@ (801326c <HAL_TIM_ConfigClockSource+0x1ec>)
 80130f2:	4293      	cmp	r3, r2
 80130f4:	f000 8099 	beq.w	801322a <HAL_TIM_ConfigClockSource+0x1aa>
 80130f8:	4a5c      	ldr	r2, [pc, #368]	@ (801326c <HAL_TIM_ConfigClockSource+0x1ec>)
 80130fa:	4293      	cmp	r3, r2
 80130fc:	f200 809e 	bhi.w	801323c <HAL_TIM_ConfigClockSource+0x1bc>
 8013100:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8013104:	f000 8091 	beq.w	801322a <HAL_TIM_ConfigClockSource+0x1aa>
 8013108:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801310c:	f200 8096 	bhi.w	801323c <HAL_TIM_ConfigClockSource+0x1bc>
 8013110:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013114:	f000 8089 	beq.w	801322a <HAL_TIM_ConfigClockSource+0x1aa>
 8013118:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801311c:	f200 808e 	bhi.w	801323c <HAL_TIM_ConfigClockSource+0x1bc>
 8013120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013124:	d03e      	beq.n	80131a4 <HAL_TIM_ConfigClockSource+0x124>
 8013126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801312a:	f200 8087 	bhi.w	801323c <HAL_TIM_ConfigClockSource+0x1bc>
 801312e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013132:	f000 8086 	beq.w	8013242 <HAL_TIM_ConfigClockSource+0x1c2>
 8013136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801313a:	d87f      	bhi.n	801323c <HAL_TIM_ConfigClockSource+0x1bc>
 801313c:	2b70      	cmp	r3, #112	@ 0x70
 801313e:	d01a      	beq.n	8013176 <HAL_TIM_ConfigClockSource+0xf6>
 8013140:	2b70      	cmp	r3, #112	@ 0x70
 8013142:	d87b      	bhi.n	801323c <HAL_TIM_ConfigClockSource+0x1bc>
 8013144:	2b60      	cmp	r3, #96	@ 0x60
 8013146:	d050      	beq.n	80131ea <HAL_TIM_ConfigClockSource+0x16a>
 8013148:	2b60      	cmp	r3, #96	@ 0x60
 801314a:	d877      	bhi.n	801323c <HAL_TIM_ConfigClockSource+0x1bc>
 801314c:	2b50      	cmp	r3, #80	@ 0x50
 801314e:	d03c      	beq.n	80131ca <HAL_TIM_ConfigClockSource+0x14a>
 8013150:	2b50      	cmp	r3, #80	@ 0x50
 8013152:	d873      	bhi.n	801323c <HAL_TIM_ConfigClockSource+0x1bc>
 8013154:	2b40      	cmp	r3, #64	@ 0x40
 8013156:	d058      	beq.n	801320a <HAL_TIM_ConfigClockSource+0x18a>
 8013158:	2b40      	cmp	r3, #64	@ 0x40
 801315a:	d86f      	bhi.n	801323c <HAL_TIM_ConfigClockSource+0x1bc>
 801315c:	2b30      	cmp	r3, #48	@ 0x30
 801315e:	d064      	beq.n	801322a <HAL_TIM_ConfigClockSource+0x1aa>
 8013160:	2b30      	cmp	r3, #48	@ 0x30
 8013162:	d86b      	bhi.n	801323c <HAL_TIM_ConfigClockSource+0x1bc>
 8013164:	2b20      	cmp	r3, #32
 8013166:	d060      	beq.n	801322a <HAL_TIM_ConfigClockSource+0x1aa>
 8013168:	2b20      	cmp	r3, #32
 801316a:	d867      	bhi.n	801323c <HAL_TIM_ConfigClockSource+0x1bc>
 801316c:	2b00      	cmp	r3, #0
 801316e:	d05c      	beq.n	801322a <HAL_TIM_ConfigClockSource+0x1aa>
 8013170:	2b10      	cmp	r3, #16
 8013172:	d05a      	beq.n	801322a <HAL_TIM_ConfigClockSource+0x1aa>
 8013174:	e062      	b.n	801323c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8013186:	f000 fd87 	bl	8013c98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	689b      	ldr	r3, [r3, #8]
 8013190:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8013198:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	68ba      	ldr	r2, [r7, #8]
 80131a0:	609a      	str	r2, [r3, #8]
      break;
 80131a2:	e04f      	b.n	8013244 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80131b4:	f000 fd70 	bl	8013c98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	689a      	ldr	r2, [r3, #8]
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80131c6:	609a      	str	r2, [r3, #8]
      break;
 80131c8:	e03c      	b.n	8013244 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80131d6:	461a      	mov	r2, r3
 80131d8:	f000 fce0 	bl	8013b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	2150      	movs	r1, #80	@ 0x50
 80131e2:	4618      	mov	r0, r3
 80131e4:	f000 fd3a 	bl	8013c5c <TIM_ITRx_SetConfig>
      break;
 80131e8:	e02c      	b.n	8013244 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80131f6:	461a      	mov	r2, r3
 80131f8:	f000 fcff 	bl	8013bfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	2160      	movs	r1, #96	@ 0x60
 8013202:	4618      	mov	r0, r3
 8013204:	f000 fd2a 	bl	8013c5c <TIM_ITRx_SetConfig>
      break;
 8013208:	e01c      	b.n	8013244 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013216:	461a      	mov	r2, r3
 8013218:	f000 fcc0 	bl	8013b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	2140      	movs	r1, #64	@ 0x40
 8013222:	4618      	mov	r0, r3
 8013224:	f000 fd1a 	bl	8013c5c <TIM_ITRx_SetConfig>
      break;
 8013228:	e00c      	b.n	8013244 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	681a      	ldr	r2, [r3, #0]
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	4619      	mov	r1, r3
 8013234:	4610      	mov	r0, r2
 8013236:	f000 fd11 	bl	8013c5c <TIM_ITRx_SetConfig>
      break;
 801323a:	e003      	b.n	8013244 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801323c:	2301      	movs	r3, #1
 801323e:	73fb      	strb	r3, [r7, #15]
      break;
 8013240:	e000      	b.n	8013244 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2201      	movs	r2, #1
 8013248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2200      	movs	r2, #0
 8013250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013254:	7bfb      	ldrb	r3, [r7, #15]
}
 8013256:	4618      	mov	r0, r3
 8013258:	3710      	adds	r7, #16
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	ffceff88 	.word	0xffceff88
 8013264:	00100040 	.word	0x00100040
 8013268:	00100030 	.word	0x00100030
 801326c:	00100020 	.word	0x00100020

08013270 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013270:	b480      	push	{r7}
 8013272:	b083      	sub	sp, #12
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013278:	bf00      	nop
 801327a:	370c      	adds	r7, #12
 801327c:	46bd      	mov	sp, r7
 801327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013282:	4770      	bx	lr

08013284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013284:	b480      	push	{r7}
 8013286:	b083      	sub	sp, #12
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801328c:	bf00      	nop
 801328e:	370c      	adds	r7, #12
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr

08013298 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80132a0:	bf00      	nop
 80132a2:	370c      	adds	r7, #12
 80132a4:	46bd      	mov	sp, r7
 80132a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132aa:	4770      	bx	lr

080132ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80132ac:	b480      	push	{r7}
 80132ae:	b083      	sub	sp, #12
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80132b4:	bf00      	nop
 80132b6:	370c      	adds	r7, #12
 80132b8:	46bd      	mov	sp, r7
 80132ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132be:	4770      	bx	lr

080132c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80132c0:	b480      	push	{r7}
 80132c2:	b083      	sub	sp, #12
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80132c8:	bf00      	nop
 80132ca:	370c      	adds	r7, #12
 80132cc:	46bd      	mov	sp, r7
 80132ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d2:	4770      	bx	lr

080132d4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80132d4:	b480      	push	{r7}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80132dc:	bf00      	nop
 80132de:	370c      	adds	r7, #12
 80132e0:	46bd      	mov	sp, r7
 80132e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e6:	4770      	bx	lr

080132e8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b084      	sub	sp, #16
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132f4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132fa:	687a      	ldr	r2, [r7, #4]
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d107      	bne.n	8013310 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	2201      	movs	r2, #1
 8013304:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	2201      	movs	r2, #1
 801330a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801330e:	e02a      	b.n	8013366 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013314:	687a      	ldr	r2, [r7, #4]
 8013316:	429a      	cmp	r2, r3
 8013318:	d107      	bne.n	801332a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	2202      	movs	r2, #2
 801331e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	2201      	movs	r2, #1
 8013324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013328:	e01d      	b.n	8013366 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801332e:	687a      	ldr	r2, [r7, #4]
 8013330:	429a      	cmp	r2, r3
 8013332:	d107      	bne.n	8013344 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	2204      	movs	r2, #4
 8013338:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	2201      	movs	r2, #1
 801333e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013342:	e010      	b.n	8013366 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013348:	687a      	ldr	r2, [r7, #4]
 801334a:	429a      	cmp	r2, r3
 801334c:	d107      	bne.n	801335e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	2208      	movs	r2, #8
 8013352:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	2201      	movs	r2, #1
 8013358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801335c:	e003      	b.n	8013366 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2201      	movs	r2, #1
 8013362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8013366:	68f8      	ldr	r0, [r7, #12]
 8013368:	f7ff ffb4 	bl	80132d4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2200      	movs	r2, #0
 8013370:	771a      	strb	r2, [r3, #28]
}
 8013372:	bf00      	nop
 8013374:	3710      	adds	r7, #16
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}

0801337a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801337a:	b580      	push	{r7, lr}
 801337c:	b084      	sub	sp, #16
 801337e:	af00      	add	r7, sp, #0
 8013380:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013386:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801338c:	687a      	ldr	r2, [r7, #4]
 801338e:	429a      	cmp	r2, r3
 8013390:	d10b      	bne.n	80133aa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	2201      	movs	r2, #1
 8013396:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	69db      	ldr	r3, [r3, #28]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d136      	bne.n	801340e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	2201      	movs	r2, #1
 80133a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80133a8:	e031      	b.n	801340e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d10b      	bne.n	80133cc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	2202      	movs	r2, #2
 80133b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	69db      	ldr	r3, [r3, #28]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d125      	bne.n	801340e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	2201      	movs	r2, #1
 80133c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80133ca:	e020      	b.n	801340e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	429a      	cmp	r2, r3
 80133d4:	d10b      	bne.n	80133ee <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	2204      	movs	r2, #4
 80133da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	69db      	ldr	r3, [r3, #28]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d114      	bne.n	801340e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	2201      	movs	r2, #1
 80133e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80133ec:	e00f      	b.n	801340e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80133f2:	687a      	ldr	r2, [r7, #4]
 80133f4:	429a      	cmp	r2, r3
 80133f6:	d10a      	bne.n	801340e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2208      	movs	r2, #8
 80133fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	69db      	ldr	r3, [r3, #28]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d103      	bne.n	801340e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	2201      	movs	r2, #1
 801340a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801340e:	68f8      	ldr	r0, [r7, #12]
 8013410:	f7ff ff42 	bl	8013298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	2200      	movs	r2, #0
 8013418:	771a      	strb	r2, [r3, #28]
}
 801341a:	bf00      	nop
 801341c:	3710      	adds	r7, #16
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}

08013422 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013422:	b580      	push	{r7, lr}
 8013424:	b084      	sub	sp, #16
 8013426:	af00      	add	r7, sp, #0
 8013428:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801342e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013434:	687a      	ldr	r2, [r7, #4]
 8013436:	429a      	cmp	r2, r3
 8013438:	d103      	bne.n	8013442 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	2201      	movs	r2, #1
 801343e:	771a      	strb	r2, [r3, #28]
 8013440:	e019      	b.n	8013476 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013446:	687a      	ldr	r2, [r7, #4]
 8013448:	429a      	cmp	r2, r3
 801344a:	d103      	bne.n	8013454 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	2202      	movs	r2, #2
 8013450:	771a      	strb	r2, [r3, #28]
 8013452:	e010      	b.n	8013476 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013458:	687a      	ldr	r2, [r7, #4]
 801345a:	429a      	cmp	r2, r3
 801345c:	d103      	bne.n	8013466 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	2204      	movs	r2, #4
 8013462:	771a      	strb	r2, [r3, #28]
 8013464:	e007      	b.n	8013476 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801346a:	687a      	ldr	r2, [r7, #4]
 801346c:	429a      	cmp	r2, r3
 801346e:	d102      	bne.n	8013476 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	2208      	movs	r2, #8
 8013474:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8013476:	68f8      	ldr	r0, [r7, #12]
 8013478:	f7ff ff18 	bl	80132ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	2200      	movs	r2, #0
 8013480:	771a      	strb	r2, [r3, #28]
}
 8013482:	bf00      	nop
 8013484:	3710      	adds	r7, #16
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}
	...

0801348c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801348c:	b480      	push	{r7}
 801348e:	b085      	sub	sp, #20
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
 8013494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	4a4a      	ldr	r2, [pc, #296]	@ (80135c8 <TIM_Base_SetConfig+0x13c>)
 80134a0:	4293      	cmp	r3, r2
 80134a2:	d013      	beq.n	80134cc <TIM_Base_SetConfig+0x40>
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80134aa:	d00f      	beq.n	80134cc <TIM_Base_SetConfig+0x40>
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	4a47      	ldr	r2, [pc, #284]	@ (80135cc <TIM_Base_SetConfig+0x140>)
 80134b0:	4293      	cmp	r3, r2
 80134b2:	d00b      	beq.n	80134cc <TIM_Base_SetConfig+0x40>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	4a46      	ldr	r2, [pc, #280]	@ (80135d0 <TIM_Base_SetConfig+0x144>)
 80134b8:	4293      	cmp	r3, r2
 80134ba:	d007      	beq.n	80134cc <TIM_Base_SetConfig+0x40>
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	4a45      	ldr	r2, [pc, #276]	@ (80135d4 <TIM_Base_SetConfig+0x148>)
 80134c0:	4293      	cmp	r3, r2
 80134c2:	d003      	beq.n	80134cc <TIM_Base_SetConfig+0x40>
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	4a44      	ldr	r2, [pc, #272]	@ (80135d8 <TIM_Base_SetConfig+0x14c>)
 80134c8:	4293      	cmp	r3, r2
 80134ca:	d108      	bne.n	80134de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80134d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	685b      	ldr	r3, [r3, #4]
 80134d8:	68fa      	ldr	r2, [r7, #12]
 80134da:	4313      	orrs	r3, r2
 80134dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	4a39      	ldr	r2, [pc, #228]	@ (80135c8 <TIM_Base_SetConfig+0x13c>)
 80134e2:	4293      	cmp	r3, r2
 80134e4:	d027      	beq.n	8013536 <TIM_Base_SetConfig+0xaa>
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80134ec:	d023      	beq.n	8013536 <TIM_Base_SetConfig+0xaa>
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	4a36      	ldr	r2, [pc, #216]	@ (80135cc <TIM_Base_SetConfig+0x140>)
 80134f2:	4293      	cmp	r3, r2
 80134f4:	d01f      	beq.n	8013536 <TIM_Base_SetConfig+0xaa>
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	4a35      	ldr	r2, [pc, #212]	@ (80135d0 <TIM_Base_SetConfig+0x144>)
 80134fa:	4293      	cmp	r3, r2
 80134fc:	d01b      	beq.n	8013536 <TIM_Base_SetConfig+0xaa>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	4a34      	ldr	r2, [pc, #208]	@ (80135d4 <TIM_Base_SetConfig+0x148>)
 8013502:	4293      	cmp	r3, r2
 8013504:	d017      	beq.n	8013536 <TIM_Base_SetConfig+0xaa>
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	4a33      	ldr	r2, [pc, #204]	@ (80135d8 <TIM_Base_SetConfig+0x14c>)
 801350a:	4293      	cmp	r3, r2
 801350c:	d013      	beq.n	8013536 <TIM_Base_SetConfig+0xaa>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	4a32      	ldr	r2, [pc, #200]	@ (80135dc <TIM_Base_SetConfig+0x150>)
 8013512:	4293      	cmp	r3, r2
 8013514:	d00f      	beq.n	8013536 <TIM_Base_SetConfig+0xaa>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	4a31      	ldr	r2, [pc, #196]	@ (80135e0 <TIM_Base_SetConfig+0x154>)
 801351a:	4293      	cmp	r3, r2
 801351c:	d00b      	beq.n	8013536 <TIM_Base_SetConfig+0xaa>
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	4a30      	ldr	r2, [pc, #192]	@ (80135e4 <TIM_Base_SetConfig+0x158>)
 8013522:	4293      	cmp	r3, r2
 8013524:	d007      	beq.n	8013536 <TIM_Base_SetConfig+0xaa>
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	4a2f      	ldr	r2, [pc, #188]	@ (80135e8 <TIM_Base_SetConfig+0x15c>)
 801352a:	4293      	cmp	r3, r2
 801352c:	d003      	beq.n	8013536 <TIM_Base_SetConfig+0xaa>
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	4a2e      	ldr	r2, [pc, #184]	@ (80135ec <TIM_Base_SetConfig+0x160>)
 8013532:	4293      	cmp	r3, r2
 8013534:	d108      	bne.n	8013548 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801353c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	68db      	ldr	r3, [r3, #12]
 8013542:	68fa      	ldr	r2, [r7, #12]
 8013544:	4313      	orrs	r3, r2
 8013546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	695b      	ldr	r3, [r3, #20]
 8013552:	4313      	orrs	r3, r2
 8013554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	68fa      	ldr	r2, [r7, #12]
 801355a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	689a      	ldr	r2, [r3, #8]
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	681a      	ldr	r2, [r3, #0]
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	4a16      	ldr	r2, [pc, #88]	@ (80135c8 <TIM_Base_SetConfig+0x13c>)
 8013570:	4293      	cmp	r3, r2
 8013572:	d00f      	beq.n	8013594 <TIM_Base_SetConfig+0x108>
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	4a18      	ldr	r2, [pc, #96]	@ (80135d8 <TIM_Base_SetConfig+0x14c>)
 8013578:	4293      	cmp	r3, r2
 801357a:	d00b      	beq.n	8013594 <TIM_Base_SetConfig+0x108>
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	4a17      	ldr	r2, [pc, #92]	@ (80135dc <TIM_Base_SetConfig+0x150>)
 8013580:	4293      	cmp	r3, r2
 8013582:	d007      	beq.n	8013594 <TIM_Base_SetConfig+0x108>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	4a16      	ldr	r2, [pc, #88]	@ (80135e0 <TIM_Base_SetConfig+0x154>)
 8013588:	4293      	cmp	r3, r2
 801358a:	d003      	beq.n	8013594 <TIM_Base_SetConfig+0x108>
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	4a15      	ldr	r2, [pc, #84]	@ (80135e4 <TIM_Base_SetConfig+0x158>)
 8013590:	4293      	cmp	r3, r2
 8013592:	d103      	bne.n	801359c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	691a      	ldr	r2, [r3, #16]
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2201      	movs	r2, #1
 80135a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	691b      	ldr	r3, [r3, #16]
 80135a6:	f003 0301 	and.w	r3, r3, #1
 80135aa:	2b01      	cmp	r3, #1
 80135ac:	d105      	bne.n	80135ba <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	691b      	ldr	r3, [r3, #16]
 80135b2:	f023 0201 	bic.w	r2, r3, #1
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	611a      	str	r2, [r3, #16]
  }
}
 80135ba:	bf00      	nop
 80135bc:	3714      	adds	r7, #20
 80135be:	46bd      	mov	sp, r7
 80135c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c4:	4770      	bx	lr
 80135c6:	bf00      	nop
 80135c8:	40010000 	.word	0x40010000
 80135cc:	40000400 	.word	0x40000400
 80135d0:	40000800 	.word	0x40000800
 80135d4:	40000c00 	.word	0x40000c00
 80135d8:	40010400 	.word	0x40010400
 80135dc:	40014000 	.word	0x40014000
 80135e0:	40014400 	.word	0x40014400
 80135e4:	40014800 	.word	0x40014800
 80135e8:	4000e000 	.word	0x4000e000
 80135ec:	4000e400 	.word	0x4000e400

080135f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80135f0:	b480      	push	{r7}
 80135f2:	b087      	sub	sp, #28
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6a1b      	ldr	r3, [r3, #32]
 80135fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	6a1b      	ldr	r3, [r3, #32]
 8013604:	f023 0201 	bic.w	r2, r3, #1
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	685b      	ldr	r3, [r3, #4]
 8013610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	699b      	ldr	r3, [r3, #24]
 8013616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013618:	68fa      	ldr	r2, [r7, #12]
 801361a:	4b37      	ldr	r3, [pc, #220]	@ (80136f8 <TIM_OC1_SetConfig+0x108>)
 801361c:	4013      	ands	r3, r2
 801361e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	f023 0303 	bic.w	r3, r3, #3
 8013626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	68fa      	ldr	r2, [r7, #12]
 801362e:	4313      	orrs	r3, r2
 8013630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013632:	697b      	ldr	r3, [r7, #20]
 8013634:	f023 0302 	bic.w	r3, r3, #2
 8013638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	689b      	ldr	r3, [r3, #8]
 801363e:	697a      	ldr	r2, [r7, #20]
 8013640:	4313      	orrs	r3, r2
 8013642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	4a2d      	ldr	r2, [pc, #180]	@ (80136fc <TIM_OC1_SetConfig+0x10c>)
 8013648:	4293      	cmp	r3, r2
 801364a:	d00f      	beq.n	801366c <TIM_OC1_SetConfig+0x7c>
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	4a2c      	ldr	r2, [pc, #176]	@ (8013700 <TIM_OC1_SetConfig+0x110>)
 8013650:	4293      	cmp	r3, r2
 8013652:	d00b      	beq.n	801366c <TIM_OC1_SetConfig+0x7c>
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	4a2b      	ldr	r2, [pc, #172]	@ (8013704 <TIM_OC1_SetConfig+0x114>)
 8013658:	4293      	cmp	r3, r2
 801365a:	d007      	beq.n	801366c <TIM_OC1_SetConfig+0x7c>
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	4a2a      	ldr	r2, [pc, #168]	@ (8013708 <TIM_OC1_SetConfig+0x118>)
 8013660:	4293      	cmp	r3, r2
 8013662:	d003      	beq.n	801366c <TIM_OC1_SetConfig+0x7c>
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	4a29      	ldr	r2, [pc, #164]	@ (801370c <TIM_OC1_SetConfig+0x11c>)
 8013668:	4293      	cmp	r3, r2
 801366a:	d10c      	bne.n	8013686 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801366c:	697b      	ldr	r3, [r7, #20]
 801366e:	f023 0308 	bic.w	r3, r3, #8
 8013672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013674:	683b      	ldr	r3, [r7, #0]
 8013676:	68db      	ldr	r3, [r3, #12]
 8013678:	697a      	ldr	r2, [r7, #20]
 801367a:	4313      	orrs	r3, r2
 801367c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	f023 0304 	bic.w	r3, r3, #4
 8013684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	4a1c      	ldr	r2, [pc, #112]	@ (80136fc <TIM_OC1_SetConfig+0x10c>)
 801368a:	4293      	cmp	r3, r2
 801368c:	d00f      	beq.n	80136ae <TIM_OC1_SetConfig+0xbe>
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	4a1b      	ldr	r2, [pc, #108]	@ (8013700 <TIM_OC1_SetConfig+0x110>)
 8013692:	4293      	cmp	r3, r2
 8013694:	d00b      	beq.n	80136ae <TIM_OC1_SetConfig+0xbe>
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	4a1a      	ldr	r2, [pc, #104]	@ (8013704 <TIM_OC1_SetConfig+0x114>)
 801369a:	4293      	cmp	r3, r2
 801369c:	d007      	beq.n	80136ae <TIM_OC1_SetConfig+0xbe>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	4a19      	ldr	r2, [pc, #100]	@ (8013708 <TIM_OC1_SetConfig+0x118>)
 80136a2:	4293      	cmp	r3, r2
 80136a4:	d003      	beq.n	80136ae <TIM_OC1_SetConfig+0xbe>
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	4a18      	ldr	r2, [pc, #96]	@ (801370c <TIM_OC1_SetConfig+0x11c>)
 80136aa:	4293      	cmp	r3, r2
 80136ac:	d111      	bne.n	80136d2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80136b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80136b6:	693b      	ldr	r3, [r7, #16]
 80136b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80136bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	695b      	ldr	r3, [r3, #20]
 80136c2:	693a      	ldr	r2, [r7, #16]
 80136c4:	4313      	orrs	r3, r2
 80136c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	699b      	ldr	r3, [r3, #24]
 80136cc:	693a      	ldr	r2, [r7, #16]
 80136ce:	4313      	orrs	r3, r2
 80136d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	693a      	ldr	r2, [r7, #16]
 80136d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	68fa      	ldr	r2, [r7, #12]
 80136dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	685a      	ldr	r2, [r3, #4]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	697a      	ldr	r2, [r7, #20]
 80136ea:	621a      	str	r2, [r3, #32]
}
 80136ec:	bf00      	nop
 80136ee:	371c      	adds	r7, #28
 80136f0:	46bd      	mov	sp, r7
 80136f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f6:	4770      	bx	lr
 80136f8:	fffeff8f 	.word	0xfffeff8f
 80136fc:	40010000 	.word	0x40010000
 8013700:	40010400 	.word	0x40010400
 8013704:	40014000 	.word	0x40014000
 8013708:	40014400 	.word	0x40014400
 801370c:	40014800 	.word	0x40014800

08013710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013710:	b480      	push	{r7}
 8013712:	b087      	sub	sp, #28
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
 8013718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	6a1b      	ldr	r3, [r3, #32]
 801371e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6a1b      	ldr	r3, [r3, #32]
 8013724:	f023 0210 	bic.w	r2, r3, #16
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	685b      	ldr	r3, [r3, #4]
 8013730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	699b      	ldr	r3, [r3, #24]
 8013736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013738:	68fa      	ldr	r2, [r7, #12]
 801373a:	4b34      	ldr	r3, [pc, #208]	@ (801380c <TIM_OC2_SetConfig+0xfc>)
 801373c:	4013      	ands	r3, r2
 801373e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	021b      	lsls	r3, r3, #8
 801374e:	68fa      	ldr	r2, [r7, #12]
 8013750:	4313      	orrs	r3, r2
 8013752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	f023 0320 	bic.w	r3, r3, #32
 801375a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	689b      	ldr	r3, [r3, #8]
 8013760:	011b      	lsls	r3, r3, #4
 8013762:	697a      	ldr	r2, [r7, #20]
 8013764:	4313      	orrs	r3, r2
 8013766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	4a29      	ldr	r2, [pc, #164]	@ (8013810 <TIM_OC2_SetConfig+0x100>)
 801376c:	4293      	cmp	r3, r2
 801376e:	d003      	beq.n	8013778 <TIM_OC2_SetConfig+0x68>
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	4a28      	ldr	r2, [pc, #160]	@ (8013814 <TIM_OC2_SetConfig+0x104>)
 8013774:	4293      	cmp	r3, r2
 8013776:	d10d      	bne.n	8013794 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801377e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	68db      	ldr	r3, [r3, #12]
 8013784:	011b      	lsls	r3, r3, #4
 8013786:	697a      	ldr	r2, [r7, #20]
 8013788:	4313      	orrs	r3, r2
 801378a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013792:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	4a1e      	ldr	r2, [pc, #120]	@ (8013810 <TIM_OC2_SetConfig+0x100>)
 8013798:	4293      	cmp	r3, r2
 801379a:	d00f      	beq.n	80137bc <TIM_OC2_SetConfig+0xac>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	4a1d      	ldr	r2, [pc, #116]	@ (8013814 <TIM_OC2_SetConfig+0x104>)
 80137a0:	4293      	cmp	r3, r2
 80137a2:	d00b      	beq.n	80137bc <TIM_OC2_SetConfig+0xac>
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	4a1c      	ldr	r2, [pc, #112]	@ (8013818 <TIM_OC2_SetConfig+0x108>)
 80137a8:	4293      	cmp	r3, r2
 80137aa:	d007      	beq.n	80137bc <TIM_OC2_SetConfig+0xac>
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	4a1b      	ldr	r2, [pc, #108]	@ (801381c <TIM_OC2_SetConfig+0x10c>)
 80137b0:	4293      	cmp	r3, r2
 80137b2:	d003      	beq.n	80137bc <TIM_OC2_SetConfig+0xac>
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	4a1a      	ldr	r2, [pc, #104]	@ (8013820 <TIM_OC2_SetConfig+0x110>)
 80137b8:	4293      	cmp	r3, r2
 80137ba:	d113      	bne.n	80137e4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80137bc:	693b      	ldr	r3, [r7, #16]
 80137be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80137c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80137c4:	693b      	ldr	r3, [r7, #16]
 80137c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80137ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	695b      	ldr	r3, [r3, #20]
 80137d0:	009b      	lsls	r3, r3, #2
 80137d2:	693a      	ldr	r2, [r7, #16]
 80137d4:	4313      	orrs	r3, r2
 80137d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	699b      	ldr	r3, [r3, #24]
 80137dc:	009b      	lsls	r3, r3, #2
 80137de:	693a      	ldr	r2, [r7, #16]
 80137e0:	4313      	orrs	r3, r2
 80137e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	693a      	ldr	r2, [r7, #16]
 80137e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	68fa      	ldr	r2, [r7, #12]
 80137ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	685a      	ldr	r2, [r3, #4]
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	697a      	ldr	r2, [r7, #20]
 80137fc:	621a      	str	r2, [r3, #32]
}
 80137fe:	bf00      	nop
 8013800:	371c      	adds	r7, #28
 8013802:	46bd      	mov	sp, r7
 8013804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013808:	4770      	bx	lr
 801380a:	bf00      	nop
 801380c:	feff8fff 	.word	0xfeff8fff
 8013810:	40010000 	.word	0x40010000
 8013814:	40010400 	.word	0x40010400
 8013818:	40014000 	.word	0x40014000
 801381c:	40014400 	.word	0x40014400
 8013820:	40014800 	.word	0x40014800

08013824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013824:	b480      	push	{r7}
 8013826:	b087      	sub	sp, #28
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	6a1b      	ldr	r3, [r3, #32]
 8013832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	6a1b      	ldr	r3, [r3, #32]
 8013838:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	69db      	ldr	r3, [r3, #28]
 801384a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801384c:	68fa      	ldr	r2, [r7, #12]
 801384e:	4b33      	ldr	r3, [pc, #204]	@ (801391c <TIM_OC3_SetConfig+0xf8>)
 8013850:	4013      	ands	r3, r2
 8013852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	f023 0303 	bic.w	r3, r3, #3
 801385a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	68fa      	ldr	r2, [r7, #12]
 8013862:	4313      	orrs	r3, r2
 8013864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013866:	697b      	ldr	r3, [r7, #20]
 8013868:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801386c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	689b      	ldr	r3, [r3, #8]
 8013872:	021b      	lsls	r3, r3, #8
 8013874:	697a      	ldr	r2, [r7, #20]
 8013876:	4313      	orrs	r3, r2
 8013878:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	4a28      	ldr	r2, [pc, #160]	@ (8013920 <TIM_OC3_SetConfig+0xfc>)
 801387e:	4293      	cmp	r3, r2
 8013880:	d003      	beq.n	801388a <TIM_OC3_SetConfig+0x66>
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	4a27      	ldr	r2, [pc, #156]	@ (8013924 <TIM_OC3_SetConfig+0x100>)
 8013886:	4293      	cmp	r3, r2
 8013888:	d10d      	bne.n	80138a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013892:	683b      	ldr	r3, [r7, #0]
 8013894:	68db      	ldr	r3, [r3, #12]
 8013896:	021b      	lsls	r3, r3, #8
 8013898:	697a      	ldr	r2, [r7, #20]
 801389a:	4313      	orrs	r3, r2
 801389c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80138a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	4a1d      	ldr	r2, [pc, #116]	@ (8013920 <TIM_OC3_SetConfig+0xfc>)
 80138aa:	4293      	cmp	r3, r2
 80138ac:	d00f      	beq.n	80138ce <TIM_OC3_SetConfig+0xaa>
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	4a1c      	ldr	r2, [pc, #112]	@ (8013924 <TIM_OC3_SetConfig+0x100>)
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d00b      	beq.n	80138ce <TIM_OC3_SetConfig+0xaa>
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	4a1b      	ldr	r2, [pc, #108]	@ (8013928 <TIM_OC3_SetConfig+0x104>)
 80138ba:	4293      	cmp	r3, r2
 80138bc:	d007      	beq.n	80138ce <TIM_OC3_SetConfig+0xaa>
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	4a1a      	ldr	r2, [pc, #104]	@ (801392c <TIM_OC3_SetConfig+0x108>)
 80138c2:	4293      	cmp	r3, r2
 80138c4:	d003      	beq.n	80138ce <TIM_OC3_SetConfig+0xaa>
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	4a19      	ldr	r2, [pc, #100]	@ (8013930 <TIM_OC3_SetConfig+0x10c>)
 80138ca:	4293      	cmp	r3, r2
 80138cc:	d113      	bne.n	80138f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80138d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80138d6:	693b      	ldr	r3, [r7, #16]
 80138d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80138dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	695b      	ldr	r3, [r3, #20]
 80138e2:	011b      	lsls	r3, r3, #4
 80138e4:	693a      	ldr	r2, [r7, #16]
 80138e6:	4313      	orrs	r3, r2
 80138e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	699b      	ldr	r3, [r3, #24]
 80138ee:	011b      	lsls	r3, r3, #4
 80138f0:	693a      	ldr	r2, [r7, #16]
 80138f2:	4313      	orrs	r3, r2
 80138f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	693a      	ldr	r2, [r7, #16]
 80138fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	68fa      	ldr	r2, [r7, #12]
 8013900:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	685a      	ldr	r2, [r3, #4]
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	697a      	ldr	r2, [r7, #20]
 801390e:	621a      	str	r2, [r3, #32]
}
 8013910:	bf00      	nop
 8013912:	371c      	adds	r7, #28
 8013914:	46bd      	mov	sp, r7
 8013916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391a:	4770      	bx	lr
 801391c:	fffeff8f 	.word	0xfffeff8f
 8013920:	40010000 	.word	0x40010000
 8013924:	40010400 	.word	0x40010400
 8013928:	40014000 	.word	0x40014000
 801392c:	40014400 	.word	0x40014400
 8013930:	40014800 	.word	0x40014800

08013934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013934:	b480      	push	{r7}
 8013936:	b087      	sub	sp, #28
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6a1b      	ldr	r3, [r3, #32]
 8013942:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6a1b      	ldr	r3, [r3, #32]
 8013948:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	69db      	ldr	r3, [r3, #28]
 801395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801395c:	68fa      	ldr	r2, [r7, #12]
 801395e:	4b24      	ldr	r3, [pc, #144]	@ (80139f0 <TIM_OC4_SetConfig+0xbc>)
 8013960:	4013      	ands	r3, r2
 8013962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801396a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801396c:	683b      	ldr	r3, [r7, #0]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	021b      	lsls	r3, r3, #8
 8013972:	68fa      	ldr	r2, [r7, #12]
 8013974:	4313      	orrs	r3, r2
 8013976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013978:	693b      	ldr	r3, [r7, #16]
 801397a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801397e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	689b      	ldr	r3, [r3, #8]
 8013984:	031b      	lsls	r3, r3, #12
 8013986:	693a      	ldr	r2, [r7, #16]
 8013988:	4313      	orrs	r3, r2
 801398a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	4a19      	ldr	r2, [pc, #100]	@ (80139f4 <TIM_OC4_SetConfig+0xc0>)
 8013990:	4293      	cmp	r3, r2
 8013992:	d00f      	beq.n	80139b4 <TIM_OC4_SetConfig+0x80>
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	4a18      	ldr	r2, [pc, #96]	@ (80139f8 <TIM_OC4_SetConfig+0xc4>)
 8013998:	4293      	cmp	r3, r2
 801399a:	d00b      	beq.n	80139b4 <TIM_OC4_SetConfig+0x80>
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	4a17      	ldr	r2, [pc, #92]	@ (80139fc <TIM_OC4_SetConfig+0xc8>)
 80139a0:	4293      	cmp	r3, r2
 80139a2:	d007      	beq.n	80139b4 <TIM_OC4_SetConfig+0x80>
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	4a16      	ldr	r2, [pc, #88]	@ (8013a00 <TIM_OC4_SetConfig+0xcc>)
 80139a8:	4293      	cmp	r3, r2
 80139aa:	d003      	beq.n	80139b4 <TIM_OC4_SetConfig+0x80>
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	4a15      	ldr	r2, [pc, #84]	@ (8013a04 <TIM_OC4_SetConfig+0xd0>)
 80139b0:	4293      	cmp	r3, r2
 80139b2:	d109      	bne.n	80139c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80139ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	695b      	ldr	r3, [r3, #20]
 80139c0:	019b      	lsls	r3, r3, #6
 80139c2:	697a      	ldr	r2, [r7, #20]
 80139c4:	4313      	orrs	r3, r2
 80139c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	697a      	ldr	r2, [r7, #20]
 80139cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	68fa      	ldr	r2, [r7, #12]
 80139d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	685a      	ldr	r2, [r3, #4]
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	693a      	ldr	r2, [r7, #16]
 80139e0:	621a      	str	r2, [r3, #32]
}
 80139e2:	bf00      	nop
 80139e4:	371c      	adds	r7, #28
 80139e6:	46bd      	mov	sp, r7
 80139e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ec:	4770      	bx	lr
 80139ee:	bf00      	nop
 80139f0:	feff8fff 	.word	0xfeff8fff
 80139f4:	40010000 	.word	0x40010000
 80139f8:	40010400 	.word	0x40010400
 80139fc:	40014000 	.word	0x40014000
 8013a00:	40014400 	.word	0x40014400
 8013a04:	40014800 	.word	0x40014800

08013a08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b087      	sub	sp, #28
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
 8013a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	6a1b      	ldr	r3, [r3, #32]
 8013a16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	6a1b      	ldr	r3, [r3, #32]
 8013a1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	685b      	ldr	r3, [r3, #4]
 8013a28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013a30:	68fa      	ldr	r2, [r7, #12]
 8013a32:	4b21      	ldr	r3, [pc, #132]	@ (8013ab8 <TIM_OC5_SetConfig+0xb0>)
 8013a34:	4013      	ands	r3, r2
 8013a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	68fa      	ldr	r2, [r7, #12]
 8013a3e:	4313      	orrs	r3, r2
 8013a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8013a48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	689b      	ldr	r3, [r3, #8]
 8013a4e:	041b      	lsls	r3, r3, #16
 8013a50:	693a      	ldr	r2, [r7, #16]
 8013a52:	4313      	orrs	r3, r2
 8013a54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	4a18      	ldr	r2, [pc, #96]	@ (8013abc <TIM_OC5_SetConfig+0xb4>)
 8013a5a:	4293      	cmp	r3, r2
 8013a5c:	d00f      	beq.n	8013a7e <TIM_OC5_SetConfig+0x76>
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	4a17      	ldr	r2, [pc, #92]	@ (8013ac0 <TIM_OC5_SetConfig+0xb8>)
 8013a62:	4293      	cmp	r3, r2
 8013a64:	d00b      	beq.n	8013a7e <TIM_OC5_SetConfig+0x76>
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	4a16      	ldr	r2, [pc, #88]	@ (8013ac4 <TIM_OC5_SetConfig+0xbc>)
 8013a6a:	4293      	cmp	r3, r2
 8013a6c:	d007      	beq.n	8013a7e <TIM_OC5_SetConfig+0x76>
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	4a15      	ldr	r2, [pc, #84]	@ (8013ac8 <TIM_OC5_SetConfig+0xc0>)
 8013a72:	4293      	cmp	r3, r2
 8013a74:	d003      	beq.n	8013a7e <TIM_OC5_SetConfig+0x76>
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	4a14      	ldr	r2, [pc, #80]	@ (8013acc <TIM_OC5_SetConfig+0xc4>)
 8013a7a:	4293      	cmp	r3, r2
 8013a7c:	d109      	bne.n	8013a92 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013a84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	695b      	ldr	r3, [r3, #20]
 8013a8a:	021b      	lsls	r3, r3, #8
 8013a8c:	697a      	ldr	r2, [r7, #20]
 8013a8e:	4313      	orrs	r3, r2
 8013a90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	697a      	ldr	r2, [r7, #20]
 8013a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	68fa      	ldr	r2, [r7, #12]
 8013a9c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013a9e:	683b      	ldr	r3, [r7, #0]
 8013aa0:	685a      	ldr	r2, [r3, #4]
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	693a      	ldr	r2, [r7, #16]
 8013aaa:	621a      	str	r2, [r3, #32]
}
 8013aac:	bf00      	nop
 8013aae:	371c      	adds	r7, #28
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab6:	4770      	bx	lr
 8013ab8:	fffeff8f 	.word	0xfffeff8f
 8013abc:	40010000 	.word	0x40010000
 8013ac0:	40010400 	.word	0x40010400
 8013ac4:	40014000 	.word	0x40014000
 8013ac8:	40014400 	.word	0x40014400
 8013acc:	40014800 	.word	0x40014800

08013ad0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013ad0:	b480      	push	{r7}
 8013ad2:	b087      	sub	sp, #28
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	6a1b      	ldr	r3, [r3, #32]
 8013ade:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6a1b      	ldr	r3, [r3, #32]
 8013ae4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	685b      	ldr	r3, [r3, #4]
 8013af0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013af8:	68fa      	ldr	r2, [r7, #12]
 8013afa:	4b22      	ldr	r3, [pc, #136]	@ (8013b84 <TIM_OC6_SetConfig+0xb4>)
 8013afc:	4013      	ands	r3, r2
 8013afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	021b      	lsls	r3, r3, #8
 8013b06:	68fa      	ldr	r2, [r7, #12]
 8013b08:	4313      	orrs	r3, r2
 8013b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013b0c:	693b      	ldr	r3, [r7, #16]
 8013b0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013b12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	689b      	ldr	r3, [r3, #8]
 8013b18:	051b      	lsls	r3, r3, #20
 8013b1a:	693a      	ldr	r2, [r7, #16]
 8013b1c:	4313      	orrs	r3, r2
 8013b1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	4a19      	ldr	r2, [pc, #100]	@ (8013b88 <TIM_OC6_SetConfig+0xb8>)
 8013b24:	4293      	cmp	r3, r2
 8013b26:	d00f      	beq.n	8013b48 <TIM_OC6_SetConfig+0x78>
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	4a18      	ldr	r2, [pc, #96]	@ (8013b8c <TIM_OC6_SetConfig+0xbc>)
 8013b2c:	4293      	cmp	r3, r2
 8013b2e:	d00b      	beq.n	8013b48 <TIM_OC6_SetConfig+0x78>
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	4a17      	ldr	r2, [pc, #92]	@ (8013b90 <TIM_OC6_SetConfig+0xc0>)
 8013b34:	4293      	cmp	r3, r2
 8013b36:	d007      	beq.n	8013b48 <TIM_OC6_SetConfig+0x78>
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	4a16      	ldr	r2, [pc, #88]	@ (8013b94 <TIM_OC6_SetConfig+0xc4>)
 8013b3c:	4293      	cmp	r3, r2
 8013b3e:	d003      	beq.n	8013b48 <TIM_OC6_SetConfig+0x78>
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	4a15      	ldr	r2, [pc, #84]	@ (8013b98 <TIM_OC6_SetConfig+0xc8>)
 8013b44:	4293      	cmp	r3, r2
 8013b46:	d109      	bne.n	8013b5c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	695b      	ldr	r3, [r3, #20]
 8013b54:	029b      	lsls	r3, r3, #10
 8013b56:	697a      	ldr	r2, [r7, #20]
 8013b58:	4313      	orrs	r3, r2
 8013b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	697a      	ldr	r2, [r7, #20]
 8013b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	68fa      	ldr	r2, [r7, #12]
 8013b66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	685a      	ldr	r2, [r3, #4]
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	693a      	ldr	r2, [r7, #16]
 8013b74:	621a      	str	r2, [r3, #32]
}
 8013b76:	bf00      	nop
 8013b78:	371c      	adds	r7, #28
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b80:	4770      	bx	lr
 8013b82:	bf00      	nop
 8013b84:	feff8fff 	.word	0xfeff8fff
 8013b88:	40010000 	.word	0x40010000
 8013b8c:	40010400 	.word	0x40010400
 8013b90:	40014000 	.word	0x40014000
 8013b94:	40014400 	.word	0x40014400
 8013b98:	40014800 	.word	0x40014800

08013b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b087      	sub	sp, #28
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	60f8      	str	r0, [r7, #12]
 8013ba4:	60b9      	str	r1, [r7, #8]
 8013ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	6a1b      	ldr	r3, [r3, #32]
 8013bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	6a1b      	ldr	r3, [r3, #32]
 8013bb2:	f023 0201 	bic.w	r2, r3, #1
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	699b      	ldr	r3, [r3, #24]
 8013bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013bc0:	693b      	ldr	r3, [r7, #16]
 8013bc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	011b      	lsls	r3, r3, #4
 8013bcc:	693a      	ldr	r2, [r7, #16]
 8013bce:	4313      	orrs	r3, r2
 8013bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	f023 030a 	bic.w	r3, r3, #10
 8013bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013bda:	697a      	ldr	r2, [r7, #20]
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	4313      	orrs	r3, r2
 8013be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	693a      	ldr	r2, [r7, #16]
 8013be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	697a      	ldr	r2, [r7, #20]
 8013bec:	621a      	str	r2, [r3, #32]
}
 8013bee:	bf00      	nop
 8013bf0:	371c      	adds	r7, #28
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf8:	4770      	bx	lr

08013bfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013bfa:	b480      	push	{r7}
 8013bfc:	b087      	sub	sp, #28
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	60f8      	str	r0, [r7, #12]
 8013c02:	60b9      	str	r1, [r7, #8]
 8013c04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	6a1b      	ldr	r3, [r3, #32]
 8013c0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	6a1b      	ldr	r3, [r3, #32]
 8013c10:	f023 0210 	bic.w	r2, r3, #16
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	699b      	ldr	r3, [r3, #24]
 8013c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013c1e:	693b      	ldr	r3, [r7, #16]
 8013c20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013c24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	031b      	lsls	r3, r3, #12
 8013c2a:	693a      	ldr	r2, [r7, #16]
 8013c2c:	4313      	orrs	r3, r2
 8013c2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013c30:	697b      	ldr	r3, [r7, #20]
 8013c32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013c36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	011b      	lsls	r3, r3, #4
 8013c3c:	697a      	ldr	r2, [r7, #20]
 8013c3e:	4313      	orrs	r3, r2
 8013c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	693a      	ldr	r2, [r7, #16]
 8013c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	697a      	ldr	r2, [r7, #20]
 8013c4c:	621a      	str	r2, [r3, #32]
}
 8013c4e:	bf00      	nop
 8013c50:	371c      	adds	r7, #28
 8013c52:	46bd      	mov	sp, r7
 8013c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c58:	4770      	bx	lr
	...

08013c5c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013c5c:	b480      	push	{r7}
 8013c5e:	b085      	sub	sp, #20
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
 8013c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	689b      	ldr	r3, [r3, #8]
 8013c6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013c6c:	68fa      	ldr	r2, [r7, #12]
 8013c6e:	4b09      	ldr	r3, [pc, #36]	@ (8013c94 <TIM_ITRx_SetConfig+0x38>)
 8013c70:	4013      	ands	r3, r2
 8013c72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013c74:	683a      	ldr	r2, [r7, #0]
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	4313      	orrs	r3, r2
 8013c7a:	f043 0307 	orr.w	r3, r3, #7
 8013c7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	68fa      	ldr	r2, [r7, #12]
 8013c84:	609a      	str	r2, [r3, #8]
}
 8013c86:	bf00      	nop
 8013c88:	3714      	adds	r7, #20
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c90:	4770      	bx	lr
 8013c92:	bf00      	nop
 8013c94:	ffcfff8f 	.word	0xffcfff8f

08013c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013c98:	b480      	push	{r7}
 8013c9a:	b087      	sub	sp, #28
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	607a      	str	r2, [r7, #4]
 8013ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	689b      	ldr	r3, [r3, #8]
 8013caa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013cac:	697b      	ldr	r3, [r7, #20]
 8013cae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013cb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	021a      	lsls	r2, r3, #8
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	431a      	orrs	r2, r3
 8013cbc:	68bb      	ldr	r3, [r7, #8]
 8013cbe:	4313      	orrs	r3, r2
 8013cc0:	697a      	ldr	r2, [r7, #20]
 8013cc2:	4313      	orrs	r3, r2
 8013cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	697a      	ldr	r2, [r7, #20]
 8013cca:	609a      	str	r2, [r3, #8]
}
 8013ccc:	bf00      	nop
 8013cce:	371c      	adds	r7, #28
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd6:	4770      	bx	lr

08013cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013cd8:	b480      	push	{r7}
 8013cda:	b087      	sub	sp, #28
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	60f8      	str	r0, [r7, #12]
 8013ce0:	60b9      	str	r1, [r7, #8]
 8013ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013ce4:	68bb      	ldr	r3, [r7, #8]
 8013ce6:	f003 031f 	and.w	r3, r3, #31
 8013cea:	2201      	movs	r2, #1
 8013cec:	fa02 f303 	lsl.w	r3, r2, r3
 8013cf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	6a1a      	ldr	r2, [r3, #32]
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	43db      	mvns	r3, r3
 8013cfa:	401a      	ands	r2, r3
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	6a1a      	ldr	r2, [r3, #32]
 8013d04:	68bb      	ldr	r3, [r7, #8]
 8013d06:	f003 031f 	and.w	r3, r3, #31
 8013d0a:	6879      	ldr	r1, [r7, #4]
 8013d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8013d10:	431a      	orrs	r2, r3
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	621a      	str	r2, [r3, #32]
}
 8013d16:	bf00      	nop
 8013d18:	371c      	adds	r7, #28
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d20:	4770      	bx	lr
	...

08013d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013d24:	b480      	push	{r7}
 8013d26:	b085      	sub	sp, #20
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
 8013d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013d34:	2b01      	cmp	r3, #1
 8013d36:	d101      	bne.n	8013d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013d38:	2302      	movs	r3, #2
 8013d3a:	e077      	b.n	8013e2c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2201      	movs	r2, #1
 8013d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2202      	movs	r2, #2
 8013d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	685b      	ldr	r3, [r3, #4]
 8013d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	689b      	ldr	r3, [r3, #8]
 8013d5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	4a35      	ldr	r2, [pc, #212]	@ (8013e38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013d62:	4293      	cmp	r3, r2
 8013d64:	d004      	beq.n	8013d70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	4a34      	ldr	r2, [pc, #208]	@ (8013e3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013d6c:	4293      	cmp	r3, r2
 8013d6e:	d108      	bne.n	8013d82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8013d76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013d78:	683b      	ldr	r3, [r7, #0]
 8013d7a:	685b      	ldr	r3, [r3, #4]
 8013d7c:	68fa      	ldr	r2, [r7, #12]
 8013d7e:	4313      	orrs	r3, r2
 8013d80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013d88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	68fa      	ldr	r2, [r7, #12]
 8013d90:	4313      	orrs	r3, r2
 8013d92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	68fa      	ldr	r2, [r7, #12]
 8013d9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	4a25      	ldr	r2, [pc, #148]	@ (8013e38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013da2:	4293      	cmp	r3, r2
 8013da4:	d02c      	beq.n	8013e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013dae:	d027      	beq.n	8013e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	4a22      	ldr	r2, [pc, #136]	@ (8013e40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8013db6:	4293      	cmp	r3, r2
 8013db8:	d022      	beq.n	8013e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	4a21      	ldr	r2, [pc, #132]	@ (8013e44 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8013dc0:	4293      	cmp	r3, r2
 8013dc2:	d01d      	beq.n	8013e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8013e48 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8013dca:	4293      	cmp	r3, r2
 8013dcc:	d018      	beq.n	8013e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8013e3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013dd4:	4293      	cmp	r3, r2
 8013dd6:	d013      	beq.n	8013e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8013e4c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8013dde:	4293      	cmp	r3, r2
 8013de0:	d00e      	beq.n	8013e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	4a1a      	ldr	r2, [pc, #104]	@ (8013e50 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8013de8:	4293      	cmp	r3, r2
 8013dea:	d009      	beq.n	8013e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	4a18      	ldr	r2, [pc, #96]	@ (8013e54 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8013df2:	4293      	cmp	r3, r2
 8013df4:	d004      	beq.n	8013e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	4a17      	ldr	r2, [pc, #92]	@ (8013e58 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8013dfc:	4293      	cmp	r3, r2
 8013dfe:	d10c      	bne.n	8013e1a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013e06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	689b      	ldr	r3, [r3, #8]
 8013e0c:	68ba      	ldr	r2, [r7, #8]
 8013e0e:	4313      	orrs	r3, r2
 8013e10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	68ba      	ldr	r2, [r7, #8]
 8013e18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	2201      	movs	r2, #1
 8013e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2200      	movs	r2, #0
 8013e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013e2a:	2300      	movs	r3, #0
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3714      	adds	r7, #20
 8013e30:	46bd      	mov	sp, r7
 8013e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e36:	4770      	bx	lr
 8013e38:	40010000 	.word	0x40010000
 8013e3c:	40010400 	.word	0x40010400
 8013e40:	40000400 	.word	0x40000400
 8013e44:	40000800 	.word	0x40000800
 8013e48:	40000c00 	.word	0x40000c00
 8013e4c:	40001800 	.word	0x40001800
 8013e50:	40014000 	.word	0x40014000
 8013e54:	4000e000 	.word	0x4000e000
 8013e58:	4000e400 	.word	0x4000e400

08013e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b083      	sub	sp, #12
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013e64:	bf00      	nop
 8013e66:	370c      	adds	r7, #12
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6e:	4770      	bx	lr

08013e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013e70:	b480      	push	{r7}
 8013e72:	b083      	sub	sp, #12
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013e78:	bf00      	nop
 8013e7a:	370c      	adds	r7, #12
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e82:	4770      	bx	lr

08013e84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013e84:	b480      	push	{r7}
 8013e86:	b083      	sub	sp, #12
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013e8c:	bf00      	nop
 8013e8e:	370c      	adds	r7, #12
 8013e90:	46bd      	mov	sp, r7
 8013e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e96:	4770      	bx	lr

08013e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d101      	bne.n	8013eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	e042      	b.n	8013f30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d106      	bne.n	8013ec2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f7ee fe05 	bl	8002acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	2224      	movs	r2, #36	@ 0x24
 8013ec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	681a      	ldr	r2, [r3, #0]
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	f022 0201 	bic.w	r2, r2, #1
 8013ed8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d002      	beq.n	8013ee8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f000 fe94 	bl	8014c10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013ee8:	6878      	ldr	r0, [r7, #4]
 8013eea:	f000 f825 	bl	8013f38 <UART_SetConfig>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	2b01      	cmp	r3, #1
 8013ef2:	d101      	bne.n	8013ef8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	e01b      	b.n	8013f30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	685a      	ldr	r2, [r3, #4]
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	689a      	ldr	r2, [r3, #8]
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	681a      	ldr	r2, [r3, #0]
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	f042 0201 	orr.w	r2, r2, #1
 8013f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f000 ff13 	bl	8014d54 <UART_CheckIdleState>
 8013f2e:	4603      	mov	r3, r0
}
 8013f30:	4618      	mov	r0, r3
 8013f32:	3708      	adds	r7, #8
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}

08013f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013f3c:	b092      	sub	sp, #72	@ 0x48
 8013f3e:	af00      	add	r7, sp, #0
 8013f40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013f42:	2300      	movs	r3, #0
 8013f44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013f48:	697b      	ldr	r3, [r7, #20]
 8013f4a:	689a      	ldr	r2, [r3, #8]
 8013f4c:	697b      	ldr	r3, [r7, #20]
 8013f4e:	691b      	ldr	r3, [r3, #16]
 8013f50:	431a      	orrs	r2, r3
 8013f52:	697b      	ldr	r3, [r7, #20]
 8013f54:	695b      	ldr	r3, [r3, #20]
 8013f56:	431a      	orrs	r2, r3
 8013f58:	697b      	ldr	r3, [r7, #20]
 8013f5a:	69db      	ldr	r3, [r3, #28]
 8013f5c:	4313      	orrs	r3, r2
 8013f5e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	681a      	ldr	r2, [r3, #0]
 8013f66:	4bbe      	ldr	r3, [pc, #760]	@ (8014260 <UART_SetConfig+0x328>)
 8013f68:	4013      	ands	r3, r2
 8013f6a:	697a      	ldr	r2, [r7, #20]
 8013f6c:	6812      	ldr	r2, [r2, #0]
 8013f6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013f70:	430b      	orrs	r3, r1
 8013f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013f74:	697b      	ldr	r3, [r7, #20]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	685b      	ldr	r3, [r3, #4]
 8013f7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8013f7e:	697b      	ldr	r3, [r7, #20]
 8013f80:	68da      	ldr	r2, [r3, #12]
 8013f82:	697b      	ldr	r3, [r7, #20]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	430a      	orrs	r2, r1
 8013f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013f8a:	697b      	ldr	r3, [r7, #20]
 8013f8c:	699b      	ldr	r3, [r3, #24]
 8013f8e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	4ab3      	ldr	r2, [pc, #716]	@ (8014264 <UART_SetConfig+0x32c>)
 8013f96:	4293      	cmp	r3, r2
 8013f98:	d004      	beq.n	8013fa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	6a1b      	ldr	r3, [r3, #32]
 8013f9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013fa0:	4313      	orrs	r3, r2
 8013fa2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013fa4:	697b      	ldr	r3, [r7, #20]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	689a      	ldr	r2, [r3, #8]
 8013faa:	4baf      	ldr	r3, [pc, #700]	@ (8014268 <UART_SetConfig+0x330>)
 8013fac:	4013      	ands	r3, r2
 8013fae:	697a      	ldr	r2, [r7, #20]
 8013fb0:	6812      	ldr	r2, [r2, #0]
 8013fb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013fb4:	430b      	orrs	r3, r1
 8013fb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013fb8:	697b      	ldr	r3, [r7, #20]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fbe:	f023 010f 	bic.w	r1, r3, #15
 8013fc2:	697b      	ldr	r3, [r7, #20]
 8013fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013fc6:	697b      	ldr	r3, [r7, #20]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	430a      	orrs	r2, r1
 8013fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013fce:	697b      	ldr	r3, [r7, #20]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	4aa6      	ldr	r2, [pc, #664]	@ (801426c <UART_SetConfig+0x334>)
 8013fd4:	4293      	cmp	r3, r2
 8013fd6:	d177      	bne.n	80140c8 <UART_SetConfig+0x190>
 8013fd8:	4ba5      	ldr	r3, [pc, #660]	@ (8014270 <UART_SetConfig+0x338>)
 8013fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013fdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013fe0:	2b28      	cmp	r3, #40	@ 0x28
 8013fe2:	d86d      	bhi.n	80140c0 <UART_SetConfig+0x188>
 8013fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8013fec <UART_SetConfig+0xb4>)
 8013fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fea:	bf00      	nop
 8013fec:	08014091 	.word	0x08014091
 8013ff0:	080140c1 	.word	0x080140c1
 8013ff4:	080140c1 	.word	0x080140c1
 8013ff8:	080140c1 	.word	0x080140c1
 8013ffc:	080140c1 	.word	0x080140c1
 8014000:	080140c1 	.word	0x080140c1
 8014004:	080140c1 	.word	0x080140c1
 8014008:	080140c1 	.word	0x080140c1
 801400c:	08014099 	.word	0x08014099
 8014010:	080140c1 	.word	0x080140c1
 8014014:	080140c1 	.word	0x080140c1
 8014018:	080140c1 	.word	0x080140c1
 801401c:	080140c1 	.word	0x080140c1
 8014020:	080140c1 	.word	0x080140c1
 8014024:	080140c1 	.word	0x080140c1
 8014028:	080140c1 	.word	0x080140c1
 801402c:	080140a1 	.word	0x080140a1
 8014030:	080140c1 	.word	0x080140c1
 8014034:	080140c1 	.word	0x080140c1
 8014038:	080140c1 	.word	0x080140c1
 801403c:	080140c1 	.word	0x080140c1
 8014040:	080140c1 	.word	0x080140c1
 8014044:	080140c1 	.word	0x080140c1
 8014048:	080140c1 	.word	0x080140c1
 801404c:	080140a9 	.word	0x080140a9
 8014050:	080140c1 	.word	0x080140c1
 8014054:	080140c1 	.word	0x080140c1
 8014058:	080140c1 	.word	0x080140c1
 801405c:	080140c1 	.word	0x080140c1
 8014060:	080140c1 	.word	0x080140c1
 8014064:	080140c1 	.word	0x080140c1
 8014068:	080140c1 	.word	0x080140c1
 801406c:	080140b1 	.word	0x080140b1
 8014070:	080140c1 	.word	0x080140c1
 8014074:	080140c1 	.word	0x080140c1
 8014078:	080140c1 	.word	0x080140c1
 801407c:	080140c1 	.word	0x080140c1
 8014080:	080140c1 	.word	0x080140c1
 8014084:	080140c1 	.word	0x080140c1
 8014088:	080140c1 	.word	0x080140c1
 801408c:	080140b9 	.word	0x080140b9
 8014090:	2301      	movs	r3, #1
 8014092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014096:	e326      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014098:	2304      	movs	r3, #4
 801409a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801409e:	e322      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80140a0:	2308      	movs	r3, #8
 80140a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80140a6:	e31e      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80140a8:	2310      	movs	r3, #16
 80140aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80140ae:	e31a      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80140b0:	2320      	movs	r3, #32
 80140b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80140b6:	e316      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80140b8:	2340      	movs	r3, #64	@ 0x40
 80140ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80140be:	e312      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80140c0:	2380      	movs	r3, #128	@ 0x80
 80140c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80140c6:	e30e      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	4a69      	ldr	r2, [pc, #420]	@ (8014274 <UART_SetConfig+0x33c>)
 80140ce:	4293      	cmp	r3, r2
 80140d0:	d130      	bne.n	8014134 <UART_SetConfig+0x1fc>
 80140d2:	4b67      	ldr	r3, [pc, #412]	@ (8014270 <UART_SetConfig+0x338>)
 80140d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140d6:	f003 0307 	and.w	r3, r3, #7
 80140da:	2b05      	cmp	r3, #5
 80140dc:	d826      	bhi.n	801412c <UART_SetConfig+0x1f4>
 80140de:	a201      	add	r2, pc, #4	@ (adr r2, 80140e4 <UART_SetConfig+0x1ac>)
 80140e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140e4:	080140fd 	.word	0x080140fd
 80140e8:	08014105 	.word	0x08014105
 80140ec:	0801410d 	.word	0x0801410d
 80140f0:	08014115 	.word	0x08014115
 80140f4:	0801411d 	.word	0x0801411d
 80140f8:	08014125 	.word	0x08014125
 80140fc:	2300      	movs	r3, #0
 80140fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014102:	e2f0      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014104:	2304      	movs	r3, #4
 8014106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801410a:	e2ec      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801410c:	2308      	movs	r3, #8
 801410e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014112:	e2e8      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014114:	2310      	movs	r3, #16
 8014116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801411a:	e2e4      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801411c:	2320      	movs	r3, #32
 801411e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014122:	e2e0      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014124:	2340      	movs	r3, #64	@ 0x40
 8014126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801412a:	e2dc      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801412c:	2380      	movs	r3, #128	@ 0x80
 801412e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014132:	e2d8      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	4a4f      	ldr	r2, [pc, #316]	@ (8014278 <UART_SetConfig+0x340>)
 801413a:	4293      	cmp	r3, r2
 801413c:	d130      	bne.n	80141a0 <UART_SetConfig+0x268>
 801413e:	4b4c      	ldr	r3, [pc, #304]	@ (8014270 <UART_SetConfig+0x338>)
 8014140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014142:	f003 0307 	and.w	r3, r3, #7
 8014146:	2b05      	cmp	r3, #5
 8014148:	d826      	bhi.n	8014198 <UART_SetConfig+0x260>
 801414a:	a201      	add	r2, pc, #4	@ (adr r2, 8014150 <UART_SetConfig+0x218>)
 801414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014150:	08014169 	.word	0x08014169
 8014154:	08014171 	.word	0x08014171
 8014158:	08014179 	.word	0x08014179
 801415c:	08014181 	.word	0x08014181
 8014160:	08014189 	.word	0x08014189
 8014164:	08014191 	.word	0x08014191
 8014168:	2300      	movs	r3, #0
 801416a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801416e:	e2ba      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014170:	2304      	movs	r3, #4
 8014172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014176:	e2b6      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014178:	2308      	movs	r3, #8
 801417a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801417e:	e2b2      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014180:	2310      	movs	r3, #16
 8014182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014186:	e2ae      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014188:	2320      	movs	r3, #32
 801418a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801418e:	e2aa      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014190:	2340      	movs	r3, #64	@ 0x40
 8014192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014196:	e2a6      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014198:	2380      	movs	r3, #128	@ 0x80
 801419a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801419e:	e2a2      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	4a35      	ldr	r2, [pc, #212]	@ (801427c <UART_SetConfig+0x344>)
 80141a6:	4293      	cmp	r3, r2
 80141a8:	d130      	bne.n	801420c <UART_SetConfig+0x2d4>
 80141aa:	4b31      	ldr	r3, [pc, #196]	@ (8014270 <UART_SetConfig+0x338>)
 80141ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80141ae:	f003 0307 	and.w	r3, r3, #7
 80141b2:	2b05      	cmp	r3, #5
 80141b4:	d826      	bhi.n	8014204 <UART_SetConfig+0x2cc>
 80141b6:	a201      	add	r2, pc, #4	@ (adr r2, 80141bc <UART_SetConfig+0x284>)
 80141b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141bc:	080141d5 	.word	0x080141d5
 80141c0:	080141dd 	.word	0x080141dd
 80141c4:	080141e5 	.word	0x080141e5
 80141c8:	080141ed 	.word	0x080141ed
 80141cc:	080141f5 	.word	0x080141f5
 80141d0:	080141fd 	.word	0x080141fd
 80141d4:	2300      	movs	r3, #0
 80141d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80141da:	e284      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80141dc:	2304      	movs	r3, #4
 80141de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80141e2:	e280      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80141e4:	2308      	movs	r3, #8
 80141e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80141ea:	e27c      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80141ec:	2310      	movs	r3, #16
 80141ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80141f2:	e278      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80141f4:	2320      	movs	r3, #32
 80141f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80141fa:	e274      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80141fc:	2340      	movs	r3, #64	@ 0x40
 80141fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014202:	e270      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014204:	2380      	movs	r3, #128	@ 0x80
 8014206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801420a:	e26c      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	4a1b      	ldr	r2, [pc, #108]	@ (8014280 <UART_SetConfig+0x348>)
 8014212:	4293      	cmp	r3, r2
 8014214:	d142      	bne.n	801429c <UART_SetConfig+0x364>
 8014216:	4b16      	ldr	r3, [pc, #88]	@ (8014270 <UART_SetConfig+0x338>)
 8014218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801421a:	f003 0307 	and.w	r3, r3, #7
 801421e:	2b05      	cmp	r3, #5
 8014220:	d838      	bhi.n	8014294 <UART_SetConfig+0x35c>
 8014222:	a201      	add	r2, pc, #4	@ (adr r2, 8014228 <UART_SetConfig+0x2f0>)
 8014224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014228:	08014241 	.word	0x08014241
 801422c:	08014249 	.word	0x08014249
 8014230:	08014251 	.word	0x08014251
 8014234:	08014259 	.word	0x08014259
 8014238:	08014285 	.word	0x08014285
 801423c:	0801428d 	.word	0x0801428d
 8014240:	2300      	movs	r3, #0
 8014242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014246:	e24e      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014248:	2304      	movs	r3, #4
 801424a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801424e:	e24a      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014250:	2308      	movs	r3, #8
 8014252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014256:	e246      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014258:	2310      	movs	r3, #16
 801425a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801425e:	e242      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014260:	cfff69f3 	.word	0xcfff69f3
 8014264:	58000c00 	.word	0x58000c00
 8014268:	11fff4ff 	.word	0x11fff4ff
 801426c:	40011000 	.word	0x40011000
 8014270:	58024400 	.word	0x58024400
 8014274:	40004400 	.word	0x40004400
 8014278:	40004800 	.word	0x40004800
 801427c:	40004c00 	.word	0x40004c00
 8014280:	40005000 	.word	0x40005000
 8014284:	2320      	movs	r3, #32
 8014286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801428a:	e22c      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801428c:	2340      	movs	r3, #64	@ 0x40
 801428e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014292:	e228      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014294:	2380      	movs	r3, #128	@ 0x80
 8014296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801429a:	e224      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801429c:	697b      	ldr	r3, [r7, #20]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	4ab1      	ldr	r2, [pc, #708]	@ (8014568 <UART_SetConfig+0x630>)
 80142a2:	4293      	cmp	r3, r2
 80142a4:	d176      	bne.n	8014394 <UART_SetConfig+0x45c>
 80142a6:	4bb1      	ldr	r3, [pc, #708]	@ (801456c <UART_SetConfig+0x634>)
 80142a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80142aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80142ae:	2b28      	cmp	r3, #40	@ 0x28
 80142b0:	d86c      	bhi.n	801438c <UART_SetConfig+0x454>
 80142b2:	a201      	add	r2, pc, #4	@ (adr r2, 80142b8 <UART_SetConfig+0x380>)
 80142b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142b8:	0801435d 	.word	0x0801435d
 80142bc:	0801438d 	.word	0x0801438d
 80142c0:	0801438d 	.word	0x0801438d
 80142c4:	0801438d 	.word	0x0801438d
 80142c8:	0801438d 	.word	0x0801438d
 80142cc:	0801438d 	.word	0x0801438d
 80142d0:	0801438d 	.word	0x0801438d
 80142d4:	0801438d 	.word	0x0801438d
 80142d8:	08014365 	.word	0x08014365
 80142dc:	0801438d 	.word	0x0801438d
 80142e0:	0801438d 	.word	0x0801438d
 80142e4:	0801438d 	.word	0x0801438d
 80142e8:	0801438d 	.word	0x0801438d
 80142ec:	0801438d 	.word	0x0801438d
 80142f0:	0801438d 	.word	0x0801438d
 80142f4:	0801438d 	.word	0x0801438d
 80142f8:	0801436d 	.word	0x0801436d
 80142fc:	0801438d 	.word	0x0801438d
 8014300:	0801438d 	.word	0x0801438d
 8014304:	0801438d 	.word	0x0801438d
 8014308:	0801438d 	.word	0x0801438d
 801430c:	0801438d 	.word	0x0801438d
 8014310:	0801438d 	.word	0x0801438d
 8014314:	0801438d 	.word	0x0801438d
 8014318:	08014375 	.word	0x08014375
 801431c:	0801438d 	.word	0x0801438d
 8014320:	0801438d 	.word	0x0801438d
 8014324:	0801438d 	.word	0x0801438d
 8014328:	0801438d 	.word	0x0801438d
 801432c:	0801438d 	.word	0x0801438d
 8014330:	0801438d 	.word	0x0801438d
 8014334:	0801438d 	.word	0x0801438d
 8014338:	0801437d 	.word	0x0801437d
 801433c:	0801438d 	.word	0x0801438d
 8014340:	0801438d 	.word	0x0801438d
 8014344:	0801438d 	.word	0x0801438d
 8014348:	0801438d 	.word	0x0801438d
 801434c:	0801438d 	.word	0x0801438d
 8014350:	0801438d 	.word	0x0801438d
 8014354:	0801438d 	.word	0x0801438d
 8014358:	08014385 	.word	0x08014385
 801435c:	2301      	movs	r3, #1
 801435e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014362:	e1c0      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014364:	2304      	movs	r3, #4
 8014366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801436a:	e1bc      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801436c:	2308      	movs	r3, #8
 801436e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014372:	e1b8      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014374:	2310      	movs	r3, #16
 8014376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801437a:	e1b4      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801437c:	2320      	movs	r3, #32
 801437e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014382:	e1b0      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014384:	2340      	movs	r3, #64	@ 0x40
 8014386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801438a:	e1ac      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801438c:	2380      	movs	r3, #128	@ 0x80
 801438e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014392:	e1a8      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	4a75      	ldr	r2, [pc, #468]	@ (8014570 <UART_SetConfig+0x638>)
 801439a:	4293      	cmp	r3, r2
 801439c:	d130      	bne.n	8014400 <UART_SetConfig+0x4c8>
 801439e:	4b73      	ldr	r3, [pc, #460]	@ (801456c <UART_SetConfig+0x634>)
 80143a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80143a2:	f003 0307 	and.w	r3, r3, #7
 80143a6:	2b05      	cmp	r3, #5
 80143a8:	d826      	bhi.n	80143f8 <UART_SetConfig+0x4c0>
 80143aa:	a201      	add	r2, pc, #4	@ (adr r2, 80143b0 <UART_SetConfig+0x478>)
 80143ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143b0:	080143c9 	.word	0x080143c9
 80143b4:	080143d1 	.word	0x080143d1
 80143b8:	080143d9 	.word	0x080143d9
 80143bc:	080143e1 	.word	0x080143e1
 80143c0:	080143e9 	.word	0x080143e9
 80143c4:	080143f1 	.word	0x080143f1
 80143c8:	2300      	movs	r3, #0
 80143ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143ce:	e18a      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80143d0:	2304      	movs	r3, #4
 80143d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143d6:	e186      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80143d8:	2308      	movs	r3, #8
 80143da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143de:	e182      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80143e0:	2310      	movs	r3, #16
 80143e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143e6:	e17e      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80143e8:	2320      	movs	r3, #32
 80143ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143ee:	e17a      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80143f0:	2340      	movs	r3, #64	@ 0x40
 80143f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143f6:	e176      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80143f8:	2380      	movs	r3, #128	@ 0x80
 80143fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143fe:	e172      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014400:	697b      	ldr	r3, [r7, #20]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	4a5b      	ldr	r2, [pc, #364]	@ (8014574 <UART_SetConfig+0x63c>)
 8014406:	4293      	cmp	r3, r2
 8014408:	d130      	bne.n	801446c <UART_SetConfig+0x534>
 801440a:	4b58      	ldr	r3, [pc, #352]	@ (801456c <UART_SetConfig+0x634>)
 801440c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801440e:	f003 0307 	and.w	r3, r3, #7
 8014412:	2b05      	cmp	r3, #5
 8014414:	d826      	bhi.n	8014464 <UART_SetConfig+0x52c>
 8014416:	a201      	add	r2, pc, #4	@ (adr r2, 801441c <UART_SetConfig+0x4e4>)
 8014418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801441c:	08014435 	.word	0x08014435
 8014420:	0801443d 	.word	0x0801443d
 8014424:	08014445 	.word	0x08014445
 8014428:	0801444d 	.word	0x0801444d
 801442c:	08014455 	.word	0x08014455
 8014430:	0801445d 	.word	0x0801445d
 8014434:	2300      	movs	r3, #0
 8014436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801443a:	e154      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801443c:	2304      	movs	r3, #4
 801443e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014442:	e150      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014444:	2308      	movs	r3, #8
 8014446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801444a:	e14c      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801444c:	2310      	movs	r3, #16
 801444e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014452:	e148      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014454:	2320      	movs	r3, #32
 8014456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801445a:	e144      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801445c:	2340      	movs	r3, #64	@ 0x40
 801445e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014462:	e140      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014464:	2380      	movs	r3, #128	@ 0x80
 8014466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801446a:	e13c      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	4a41      	ldr	r2, [pc, #260]	@ (8014578 <UART_SetConfig+0x640>)
 8014472:	4293      	cmp	r3, r2
 8014474:	f040 8082 	bne.w	801457c <UART_SetConfig+0x644>
 8014478:	4b3c      	ldr	r3, [pc, #240]	@ (801456c <UART_SetConfig+0x634>)
 801447a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801447c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014480:	2b28      	cmp	r3, #40	@ 0x28
 8014482:	d86d      	bhi.n	8014560 <UART_SetConfig+0x628>
 8014484:	a201      	add	r2, pc, #4	@ (adr r2, 801448c <UART_SetConfig+0x554>)
 8014486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801448a:	bf00      	nop
 801448c:	08014531 	.word	0x08014531
 8014490:	08014561 	.word	0x08014561
 8014494:	08014561 	.word	0x08014561
 8014498:	08014561 	.word	0x08014561
 801449c:	08014561 	.word	0x08014561
 80144a0:	08014561 	.word	0x08014561
 80144a4:	08014561 	.word	0x08014561
 80144a8:	08014561 	.word	0x08014561
 80144ac:	08014539 	.word	0x08014539
 80144b0:	08014561 	.word	0x08014561
 80144b4:	08014561 	.word	0x08014561
 80144b8:	08014561 	.word	0x08014561
 80144bc:	08014561 	.word	0x08014561
 80144c0:	08014561 	.word	0x08014561
 80144c4:	08014561 	.word	0x08014561
 80144c8:	08014561 	.word	0x08014561
 80144cc:	08014541 	.word	0x08014541
 80144d0:	08014561 	.word	0x08014561
 80144d4:	08014561 	.word	0x08014561
 80144d8:	08014561 	.word	0x08014561
 80144dc:	08014561 	.word	0x08014561
 80144e0:	08014561 	.word	0x08014561
 80144e4:	08014561 	.word	0x08014561
 80144e8:	08014561 	.word	0x08014561
 80144ec:	08014549 	.word	0x08014549
 80144f0:	08014561 	.word	0x08014561
 80144f4:	08014561 	.word	0x08014561
 80144f8:	08014561 	.word	0x08014561
 80144fc:	08014561 	.word	0x08014561
 8014500:	08014561 	.word	0x08014561
 8014504:	08014561 	.word	0x08014561
 8014508:	08014561 	.word	0x08014561
 801450c:	08014551 	.word	0x08014551
 8014510:	08014561 	.word	0x08014561
 8014514:	08014561 	.word	0x08014561
 8014518:	08014561 	.word	0x08014561
 801451c:	08014561 	.word	0x08014561
 8014520:	08014561 	.word	0x08014561
 8014524:	08014561 	.word	0x08014561
 8014528:	08014561 	.word	0x08014561
 801452c:	08014559 	.word	0x08014559
 8014530:	2301      	movs	r3, #1
 8014532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014536:	e0d6      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014538:	2304      	movs	r3, #4
 801453a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801453e:	e0d2      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014540:	2308      	movs	r3, #8
 8014542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014546:	e0ce      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014548:	2310      	movs	r3, #16
 801454a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801454e:	e0ca      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014550:	2320      	movs	r3, #32
 8014552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014556:	e0c6      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014558:	2340      	movs	r3, #64	@ 0x40
 801455a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801455e:	e0c2      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014560:	2380      	movs	r3, #128	@ 0x80
 8014562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014566:	e0be      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014568:	40011400 	.word	0x40011400
 801456c:	58024400 	.word	0x58024400
 8014570:	40007800 	.word	0x40007800
 8014574:	40007c00 	.word	0x40007c00
 8014578:	40011800 	.word	0x40011800
 801457c:	697b      	ldr	r3, [r7, #20]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	4aad      	ldr	r2, [pc, #692]	@ (8014838 <UART_SetConfig+0x900>)
 8014582:	4293      	cmp	r3, r2
 8014584:	d176      	bne.n	8014674 <UART_SetConfig+0x73c>
 8014586:	4bad      	ldr	r3, [pc, #692]	@ (801483c <UART_SetConfig+0x904>)
 8014588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801458a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801458e:	2b28      	cmp	r3, #40	@ 0x28
 8014590:	d86c      	bhi.n	801466c <UART_SetConfig+0x734>
 8014592:	a201      	add	r2, pc, #4	@ (adr r2, 8014598 <UART_SetConfig+0x660>)
 8014594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014598:	0801463d 	.word	0x0801463d
 801459c:	0801466d 	.word	0x0801466d
 80145a0:	0801466d 	.word	0x0801466d
 80145a4:	0801466d 	.word	0x0801466d
 80145a8:	0801466d 	.word	0x0801466d
 80145ac:	0801466d 	.word	0x0801466d
 80145b0:	0801466d 	.word	0x0801466d
 80145b4:	0801466d 	.word	0x0801466d
 80145b8:	08014645 	.word	0x08014645
 80145bc:	0801466d 	.word	0x0801466d
 80145c0:	0801466d 	.word	0x0801466d
 80145c4:	0801466d 	.word	0x0801466d
 80145c8:	0801466d 	.word	0x0801466d
 80145cc:	0801466d 	.word	0x0801466d
 80145d0:	0801466d 	.word	0x0801466d
 80145d4:	0801466d 	.word	0x0801466d
 80145d8:	0801464d 	.word	0x0801464d
 80145dc:	0801466d 	.word	0x0801466d
 80145e0:	0801466d 	.word	0x0801466d
 80145e4:	0801466d 	.word	0x0801466d
 80145e8:	0801466d 	.word	0x0801466d
 80145ec:	0801466d 	.word	0x0801466d
 80145f0:	0801466d 	.word	0x0801466d
 80145f4:	0801466d 	.word	0x0801466d
 80145f8:	08014655 	.word	0x08014655
 80145fc:	0801466d 	.word	0x0801466d
 8014600:	0801466d 	.word	0x0801466d
 8014604:	0801466d 	.word	0x0801466d
 8014608:	0801466d 	.word	0x0801466d
 801460c:	0801466d 	.word	0x0801466d
 8014610:	0801466d 	.word	0x0801466d
 8014614:	0801466d 	.word	0x0801466d
 8014618:	0801465d 	.word	0x0801465d
 801461c:	0801466d 	.word	0x0801466d
 8014620:	0801466d 	.word	0x0801466d
 8014624:	0801466d 	.word	0x0801466d
 8014628:	0801466d 	.word	0x0801466d
 801462c:	0801466d 	.word	0x0801466d
 8014630:	0801466d 	.word	0x0801466d
 8014634:	0801466d 	.word	0x0801466d
 8014638:	08014665 	.word	0x08014665
 801463c:	2301      	movs	r3, #1
 801463e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014642:	e050      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014644:	2304      	movs	r3, #4
 8014646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801464a:	e04c      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801464c:	2308      	movs	r3, #8
 801464e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014652:	e048      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014654:	2310      	movs	r3, #16
 8014656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801465a:	e044      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801465c:	2320      	movs	r3, #32
 801465e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014662:	e040      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014664:	2340      	movs	r3, #64	@ 0x40
 8014666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801466a:	e03c      	b.n	80146e6 <UART_SetConfig+0x7ae>
 801466c:	2380      	movs	r3, #128	@ 0x80
 801466e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014672:	e038      	b.n	80146e6 <UART_SetConfig+0x7ae>
 8014674:	697b      	ldr	r3, [r7, #20]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	4a71      	ldr	r2, [pc, #452]	@ (8014840 <UART_SetConfig+0x908>)
 801467a:	4293      	cmp	r3, r2
 801467c:	d130      	bne.n	80146e0 <UART_SetConfig+0x7a8>
 801467e:	4b6f      	ldr	r3, [pc, #444]	@ (801483c <UART_SetConfig+0x904>)
 8014680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014682:	f003 0307 	and.w	r3, r3, #7
 8014686:	2b05      	cmp	r3, #5
 8014688:	d826      	bhi.n	80146d8 <UART_SetConfig+0x7a0>
 801468a:	a201      	add	r2, pc, #4	@ (adr r2, 8014690 <UART_SetConfig+0x758>)
 801468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014690:	080146a9 	.word	0x080146a9
 8014694:	080146b1 	.word	0x080146b1
 8014698:	080146b9 	.word	0x080146b9
 801469c:	080146c1 	.word	0x080146c1
 80146a0:	080146c9 	.word	0x080146c9
 80146a4:	080146d1 	.word	0x080146d1
 80146a8:	2302      	movs	r3, #2
 80146aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146ae:	e01a      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80146b0:	2304      	movs	r3, #4
 80146b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146b6:	e016      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80146b8:	2308      	movs	r3, #8
 80146ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146be:	e012      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80146c0:	2310      	movs	r3, #16
 80146c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146c6:	e00e      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80146c8:	2320      	movs	r3, #32
 80146ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146ce:	e00a      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80146d0:	2340      	movs	r3, #64	@ 0x40
 80146d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146d6:	e006      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80146d8:	2380      	movs	r3, #128	@ 0x80
 80146da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146de:	e002      	b.n	80146e6 <UART_SetConfig+0x7ae>
 80146e0:	2380      	movs	r3, #128	@ 0x80
 80146e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80146e6:	697b      	ldr	r3, [r7, #20]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	4a55      	ldr	r2, [pc, #340]	@ (8014840 <UART_SetConfig+0x908>)
 80146ec:	4293      	cmp	r3, r2
 80146ee:	f040 80f8 	bne.w	80148e2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80146f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80146f6:	2b20      	cmp	r3, #32
 80146f8:	dc46      	bgt.n	8014788 <UART_SetConfig+0x850>
 80146fa:	2b02      	cmp	r3, #2
 80146fc:	db75      	blt.n	80147ea <UART_SetConfig+0x8b2>
 80146fe:	3b02      	subs	r3, #2
 8014700:	2b1e      	cmp	r3, #30
 8014702:	d872      	bhi.n	80147ea <UART_SetConfig+0x8b2>
 8014704:	a201      	add	r2, pc, #4	@ (adr r2, 801470c <UART_SetConfig+0x7d4>)
 8014706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801470a:	bf00      	nop
 801470c:	0801478f 	.word	0x0801478f
 8014710:	080147eb 	.word	0x080147eb
 8014714:	08014797 	.word	0x08014797
 8014718:	080147eb 	.word	0x080147eb
 801471c:	080147eb 	.word	0x080147eb
 8014720:	080147eb 	.word	0x080147eb
 8014724:	080147a7 	.word	0x080147a7
 8014728:	080147eb 	.word	0x080147eb
 801472c:	080147eb 	.word	0x080147eb
 8014730:	080147eb 	.word	0x080147eb
 8014734:	080147eb 	.word	0x080147eb
 8014738:	080147eb 	.word	0x080147eb
 801473c:	080147eb 	.word	0x080147eb
 8014740:	080147eb 	.word	0x080147eb
 8014744:	080147b7 	.word	0x080147b7
 8014748:	080147eb 	.word	0x080147eb
 801474c:	080147eb 	.word	0x080147eb
 8014750:	080147eb 	.word	0x080147eb
 8014754:	080147eb 	.word	0x080147eb
 8014758:	080147eb 	.word	0x080147eb
 801475c:	080147eb 	.word	0x080147eb
 8014760:	080147eb 	.word	0x080147eb
 8014764:	080147eb 	.word	0x080147eb
 8014768:	080147eb 	.word	0x080147eb
 801476c:	080147eb 	.word	0x080147eb
 8014770:	080147eb 	.word	0x080147eb
 8014774:	080147eb 	.word	0x080147eb
 8014778:	080147eb 	.word	0x080147eb
 801477c:	080147eb 	.word	0x080147eb
 8014780:	080147eb 	.word	0x080147eb
 8014784:	080147dd 	.word	0x080147dd
 8014788:	2b40      	cmp	r3, #64	@ 0x40
 801478a:	d02a      	beq.n	80147e2 <UART_SetConfig+0x8aa>
 801478c:	e02d      	b.n	80147ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801478e:	f7fb ffe1 	bl	8010754 <HAL_RCCEx_GetD3PCLK1Freq>
 8014792:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014794:	e02f      	b.n	80147f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801479a:	4618      	mov	r0, r3
 801479c:	f7fb fff0 	bl	8010780 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80147a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80147a4:	e027      	b.n	80147f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80147a6:	f107 0318 	add.w	r3, r7, #24
 80147aa:	4618      	mov	r0, r3
 80147ac:	f7fc f93c 	bl	8010a28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80147b0:	69fb      	ldr	r3, [r7, #28]
 80147b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80147b4:	e01f      	b.n	80147f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80147b6:	4b21      	ldr	r3, [pc, #132]	@ (801483c <UART_SetConfig+0x904>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	f003 0320 	and.w	r3, r3, #32
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d009      	beq.n	80147d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80147c2:	4b1e      	ldr	r3, [pc, #120]	@ (801483c <UART_SetConfig+0x904>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	08db      	lsrs	r3, r3, #3
 80147c8:	f003 0303 	and.w	r3, r3, #3
 80147cc:	4a1d      	ldr	r2, [pc, #116]	@ (8014844 <UART_SetConfig+0x90c>)
 80147ce:	fa22 f303 	lsr.w	r3, r2, r3
 80147d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80147d4:	e00f      	b.n	80147f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80147d6:	4b1b      	ldr	r3, [pc, #108]	@ (8014844 <UART_SetConfig+0x90c>)
 80147d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80147da:	e00c      	b.n	80147f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80147dc:	4b1a      	ldr	r3, [pc, #104]	@ (8014848 <UART_SetConfig+0x910>)
 80147de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80147e0:	e009      	b.n	80147f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80147e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80147e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80147e8:	e005      	b.n	80147f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80147ea:	2300      	movs	r3, #0
 80147ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80147ee:	2301      	movs	r3, #1
 80147f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80147f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80147f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	f000 81ee 	beq.w	8014bda <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014802:	4a12      	ldr	r2, [pc, #72]	@ (801484c <UART_SetConfig+0x914>)
 8014804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014808:	461a      	mov	r2, r3
 801480a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801480c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014810:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	685a      	ldr	r2, [r3, #4]
 8014816:	4613      	mov	r3, r2
 8014818:	005b      	lsls	r3, r3, #1
 801481a:	4413      	add	r3, r2
 801481c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801481e:	429a      	cmp	r2, r3
 8014820:	d305      	bcc.n	801482e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	685b      	ldr	r3, [r3, #4]
 8014826:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801482a:	429a      	cmp	r2, r3
 801482c:	d910      	bls.n	8014850 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801482e:	2301      	movs	r3, #1
 8014830:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014834:	e1d1      	b.n	8014bda <UART_SetConfig+0xca2>
 8014836:	bf00      	nop
 8014838:	40011c00 	.word	0x40011c00
 801483c:	58024400 	.word	0x58024400
 8014840:	58000c00 	.word	0x58000c00
 8014844:	03d09000 	.word	0x03d09000
 8014848:	003d0900 	.word	0x003d0900
 801484c:	0801eeec 	.word	0x0801eeec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014852:	2200      	movs	r2, #0
 8014854:	60bb      	str	r3, [r7, #8]
 8014856:	60fa      	str	r2, [r7, #12]
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801485c:	4ac0      	ldr	r2, [pc, #768]	@ (8014b60 <UART_SetConfig+0xc28>)
 801485e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014862:	b29b      	uxth	r3, r3
 8014864:	2200      	movs	r2, #0
 8014866:	603b      	str	r3, [r7, #0]
 8014868:	607a      	str	r2, [r7, #4]
 801486a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801486e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014872:	f7eb ff71 	bl	8000758 <__aeabi_uldivmod>
 8014876:	4602      	mov	r2, r0
 8014878:	460b      	mov	r3, r1
 801487a:	4610      	mov	r0, r2
 801487c:	4619      	mov	r1, r3
 801487e:	f04f 0200 	mov.w	r2, #0
 8014882:	f04f 0300 	mov.w	r3, #0
 8014886:	020b      	lsls	r3, r1, #8
 8014888:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801488c:	0202      	lsls	r2, r0, #8
 801488e:	6979      	ldr	r1, [r7, #20]
 8014890:	6849      	ldr	r1, [r1, #4]
 8014892:	0849      	lsrs	r1, r1, #1
 8014894:	2000      	movs	r0, #0
 8014896:	460c      	mov	r4, r1
 8014898:	4605      	mov	r5, r0
 801489a:	eb12 0804 	adds.w	r8, r2, r4
 801489e:	eb43 0905 	adc.w	r9, r3, r5
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	685b      	ldr	r3, [r3, #4]
 80148a6:	2200      	movs	r2, #0
 80148a8:	469a      	mov	sl, r3
 80148aa:	4693      	mov	fp, r2
 80148ac:	4652      	mov	r2, sl
 80148ae:	465b      	mov	r3, fp
 80148b0:	4640      	mov	r0, r8
 80148b2:	4649      	mov	r1, r9
 80148b4:	f7eb ff50 	bl	8000758 <__aeabi_uldivmod>
 80148b8:	4602      	mov	r2, r0
 80148ba:	460b      	mov	r3, r1
 80148bc:	4613      	mov	r3, r2
 80148be:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80148c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80148c6:	d308      	bcc.n	80148da <UART_SetConfig+0x9a2>
 80148c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80148ce:	d204      	bcs.n	80148da <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80148d0:	697b      	ldr	r3, [r7, #20]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80148d6:	60da      	str	r2, [r3, #12]
 80148d8:	e17f      	b.n	8014bda <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80148da:	2301      	movs	r3, #1
 80148dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80148e0:	e17b      	b.n	8014bda <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80148e2:	697b      	ldr	r3, [r7, #20]
 80148e4:	69db      	ldr	r3, [r3, #28]
 80148e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80148ea:	f040 80bd 	bne.w	8014a68 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80148ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80148f2:	2b20      	cmp	r3, #32
 80148f4:	dc48      	bgt.n	8014988 <UART_SetConfig+0xa50>
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	db7b      	blt.n	80149f2 <UART_SetConfig+0xaba>
 80148fa:	2b20      	cmp	r3, #32
 80148fc:	d879      	bhi.n	80149f2 <UART_SetConfig+0xaba>
 80148fe:	a201      	add	r2, pc, #4	@ (adr r2, 8014904 <UART_SetConfig+0x9cc>)
 8014900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014904:	0801498f 	.word	0x0801498f
 8014908:	08014997 	.word	0x08014997
 801490c:	080149f3 	.word	0x080149f3
 8014910:	080149f3 	.word	0x080149f3
 8014914:	0801499f 	.word	0x0801499f
 8014918:	080149f3 	.word	0x080149f3
 801491c:	080149f3 	.word	0x080149f3
 8014920:	080149f3 	.word	0x080149f3
 8014924:	080149af 	.word	0x080149af
 8014928:	080149f3 	.word	0x080149f3
 801492c:	080149f3 	.word	0x080149f3
 8014930:	080149f3 	.word	0x080149f3
 8014934:	080149f3 	.word	0x080149f3
 8014938:	080149f3 	.word	0x080149f3
 801493c:	080149f3 	.word	0x080149f3
 8014940:	080149f3 	.word	0x080149f3
 8014944:	080149bf 	.word	0x080149bf
 8014948:	080149f3 	.word	0x080149f3
 801494c:	080149f3 	.word	0x080149f3
 8014950:	080149f3 	.word	0x080149f3
 8014954:	080149f3 	.word	0x080149f3
 8014958:	080149f3 	.word	0x080149f3
 801495c:	080149f3 	.word	0x080149f3
 8014960:	080149f3 	.word	0x080149f3
 8014964:	080149f3 	.word	0x080149f3
 8014968:	080149f3 	.word	0x080149f3
 801496c:	080149f3 	.word	0x080149f3
 8014970:	080149f3 	.word	0x080149f3
 8014974:	080149f3 	.word	0x080149f3
 8014978:	080149f3 	.word	0x080149f3
 801497c:	080149f3 	.word	0x080149f3
 8014980:	080149f3 	.word	0x080149f3
 8014984:	080149e5 	.word	0x080149e5
 8014988:	2b40      	cmp	r3, #64	@ 0x40
 801498a:	d02e      	beq.n	80149ea <UART_SetConfig+0xab2>
 801498c:	e031      	b.n	80149f2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801498e:	f7fa f843 	bl	800ea18 <HAL_RCC_GetPCLK1Freq>
 8014992:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014994:	e033      	b.n	80149fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014996:	f7fa f855 	bl	800ea44 <HAL_RCC_GetPCLK2Freq>
 801499a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801499c:	e02f      	b.n	80149fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801499e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80149a2:	4618      	mov	r0, r3
 80149a4:	f7fb feec 	bl	8010780 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80149a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80149ac:	e027      	b.n	80149fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80149ae:	f107 0318 	add.w	r3, r7, #24
 80149b2:	4618      	mov	r0, r3
 80149b4:	f7fc f838 	bl	8010a28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80149b8:	69fb      	ldr	r3, [r7, #28]
 80149ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80149bc:	e01f      	b.n	80149fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80149be:	4b69      	ldr	r3, [pc, #420]	@ (8014b64 <UART_SetConfig+0xc2c>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	f003 0320 	and.w	r3, r3, #32
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d009      	beq.n	80149de <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80149ca:	4b66      	ldr	r3, [pc, #408]	@ (8014b64 <UART_SetConfig+0xc2c>)
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	08db      	lsrs	r3, r3, #3
 80149d0:	f003 0303 	and.w	r3, r3, #3
 80149d4:	4a64      	ldr	r2, [pc, #400]	@ (8014b68 <UART_SetConfig+0xc30>)
 80149d6:	fa22 f303 	lsr.w	r3, r2, r3
 80149da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80149dc:	e00f      	b.n	80149fe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80149de:	4b62      	ldr	r3, [pc, #392]	@ (8014b68 <UART_SetConfig+0xc30>)
 80149e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80149e2:	e00c      	b.n	80149fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80149e4:	4b61      	ldr	r3, [pc, #388]	@ (8014b6c <UART_SetConfig+0xc34>)
 80149e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80149e8:	e009      	b.n	80149fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80149ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80149ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80149f0:	e005      	b.n	80149fe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80149f2:	2300      	movs	r3, #0
 80149f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80149f6:	2301      	movs	r3, #1
 80149f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80149fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80149fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	f000 80ea 	beq.w	8014bda <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a0a:	4a55      	ldr	r2, [pc, #340]	@ (8014b60 <UART_SetConfig+0xc28>)
 8014a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a10:	461a      	mov	r2, r3
 8014a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a18:	005a      	lsls	r2, r3, #1
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	685b      	ldr	r3, [r3, #4]
 8014a1e:	085b      	lsrs	r3, r3, #1
 8014a20:	441a      	add	r2, r3
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	685b      	ldr	r3, [r3, #4]
 8014a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a2e:	2b0f      	cmp	r3, #15
 8014a30:	d916      	bls.n	8014a60 <UART_SetConfig+0xb28>
 8014a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014a38:	d212      	bcs.n	8014a60 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a3c:	b29b      	uxth	r3, r3
 8014a3e:	f023 030f 	bic.w	r3, r3, #15
 8014a42:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a46:	085b      	lsrs	r3, r3, #1
 8014a48:	b29b      	uxth	r3, r3
 8014a4a:	f003 0307 	and.w	r3, r3, #7
 8014a4e:	b29a      	uxth	r2, r3
 8014a50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014a52:	4313      	orrs	r3, r2
 8014a54:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014a5c:	60da      	str	r2, [r3, #12]
 8014a5e:	e0bc      	b.n	8014bda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8014a60:	2301      	movs	r3, #1
 8014a62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014a66:	e0b8      	b.n	8014bda <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014a68:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014a6c:	2b20      	cmp	r3, #32
 8014a6e:	dc4b      	bgt.n	8014b08 <UART_SetConfig+0xbd0>
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	f2c0 8087 	blt.w	8014b84 <UART_SetConfig+0xc4c>
 8014a76:	2b20      	cmp	r3, #32
 8014a78:	f200 8084 	bhi.w	8014b84 <UART_SetConfig+0xc4c>
 8014a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8014a84 <UART_SetConfig+0xb4c>)
 8014a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a82:	bf00      	nop
 8014a84:	08014b0f 	.word	0x08014b0f
 8014a88:	08014b17 	.word	0x08014b17
 8014a8c:	08014b85 	.word	0x08014b85
 8014a90:	08014b85 	.word	0x08014b85
 8014a94:	08014b1f 	.word	0x08014b1f
 8014a98:	08014b85 	.word	0x08014b85
 8014a9c:	08014b85 	.word	0x08014b85
 8014aa0:	08014b85 	.word	0x08014b85
 8014aa4:	08014b2f 	.word	0x08014b2f
 8014aa8:	08014b85 	.word	0x08014b85
 8014aac:	08014b85 	.word	0x08014b85
 8014ab0:	08014b85 	.word	0x08014b85
 8014ab4:	08014b85 	.word	0x08014b85
 8014ab8:	08014b85 	.word	0x08014b85
 8014abc:	08014b85 	.word	0x08014b85
 8014ac0:	08014b85 	.word	0x08014b85
 8014ac4:	08014b3f 	.word	0x08014b3f
 8014ac8:	08014b85 	.word	0x08014b85
 8014acc:	08014b85 	.word	0x08014b85
 8014ad0:	08014b85 	.word	0x08014b85
 8014ad4:	08014b85 	.word	0x08014b85
 8014ad8:	08014b85 	.word	0x08014b85
 8014adc:	08014b85 	.word	0x08014b85
 8014ae0:	08014b85 	.word	0x08014b85
 8014ae4:	08014b85 	.word	0x08014b85
 8014ae8:	08014b85 	.word	0x08014b85
 8014aec:	08014b85 	.word	0x08014b85
 8014af0:	08014b85 	.word	0x08014b85
 8014af4:	08014b85 	.word	0x08014b85
 8014af8:	08014b85 	.word	0x08014b85
 8014afc:	08014b85 	.word	0x08014b85
 8014b00:	08014b85 	.word	0x08014b85
 8014b04:	08014b77 	.word	0x08014b77
 8014b08:	2b40      	cmp	r3, #64	@ 0x40
 8014b0a:	d037      	beq.n	8014b7c <UART_SetConfig+0xc44>
 8014b0c:	e03a      	b.n	8014b84 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014b0e:	f7f9 ff83 	bl	800ea18 <HAL_RCC_GetPCLK1Freq>
 8014b12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014b14:	e03c      	b.n	8014b90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014b16:	f7f9 ff95 	bl	800ea44 <HAL_RCC_GetPCLK2Freq>
 8014b1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014b1c:	e038      	b.n	8014b90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014b22:	4618      	mov	r0, r3
 8014b24:	f7fb fe2c 	bl	8010780 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014b2c:	e030      	b.n	8014b90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014b2e:	f107 0318 	add.w	r3, r7, #24
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7fb ff78 	bl	8010a28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014b38:	69fb      	ldr	r3, [r7, #28]
 8014b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014b3c:	e028      	b.n	8014b90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014b3e:	4b09      	ldr	r3, [pc, #36]	@ (8014b64 <UART_SetConfig+0xc2c>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	f003 0320 	and.w	r3, r3, #32
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d012      	beq.n	8014b70 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014b4a:	4b06      	ldr	r3, [pc, #24]	@ (8014b64 <UART_SetConfig+0xc2c>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	08db      	lsrs	r3, r3, #3
 8014b50:	f003 0303 	and.w	r3, r3, #3
 8014b54:	4a04      	ldr	r2, [pc, #16]	@ (8014b68 <UART_SetConfig+0xc30>)
 8014b56:	fa22 f303 	lsr.w	r3, r2, r3
 8014b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014b5c:	e018      	b.n	8014b90 <UART_SetConfig+0xc58>
 8014b5e:	bf00      	nop
 8014b60:	0801eeec 	.word	0x0801eeec
 8014b64:	58024400 	.word	0x58024400
 8014b68:	03d09000 	.word	0x03d09000
 8014b6c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8014b70:	4b24      	ldr	r3, [pc, #144]	@ (8014c04 <UART_SetConfig+0xccc>)
 8014b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014b74:	e00c      	b.n	8014b90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014b76:	4b24      	ldr	r3, [pc, #144]	@ (8014c08 <UART_SetConfig+0xcd0>)
 8014b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014b7a:	e009      	b.n	8014b90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014b7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014b82:	e005      	b.n	8014b90 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8014b84:	2300      	movs	r3, #0
 8014b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014b88:	2301      	movs	r3, #1
 8014b8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014b8e:	bf00      	nop
    }

    if (pclk != 0U)
 8014b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d021      	beq.n	8014bda <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8014c0c <UART_SetConfig+0xcd4>)
 8014b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014ba0:	461a      	mov	r2, r3
 8014ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ba4:	fbb3 f2f2 	udiv	r2, r3, r2
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	685b      	ldr	r3, [r3, #4]
 8014bac:	085b      	lsrs	r3, r3, #1
 8014bae:	441a      	add	r2, r3
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	685b      	ldr	r3, [r3, #4]
 8014bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8014bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bbc:	2b0f      	cmp	r3, #15
 8014bbe:	d909      	bls.n	8014bd4 <UART_SetConfig+0xc9c>
 8014bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014bc6:	d205      	bcs.n	8014bd4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bca:	b29a      	uxth	r2, r3
 8014bcc:	697b      	ldr	r3, [r7, #20]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	60da      	str	r2, [r3, #12]
 8014bd2:	e002      	b.n	8014bda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014bda:	697b      	ldr	r3, [r7, #20]
 8014bdc:	2201      	movs	r2, #1
 8014bde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8014be2:	697b      	ldr	r3, [r7, #20]
 8014be4:	2201      	movs	r2, #1
 8014be6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014bea:	697b      	ldr	r3, [r7, #20]
 8014bec:	2200      	movs	r2, #0
 8014bee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8014bf0:	697b      	ldr	r3, [r7, #20]
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8014bf6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	3748      	adds	r7, #72	@ 0x48
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014c04:	03d09000 	.word	0x03d09000
 8014c08:	003d0900 	.word	0x003d0900
 8014c0c:	0801eeec 	.word	0x0801eeec

08014c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014c10:	b480      	push	{r7}
 8014c12:	b083      	sub	sp, #12
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c1c:	f003 0308 	and.w	r3, r3, #8
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d00a      	beq.n	8014c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	685b      	ldr	r3, [r3, #4]
 8014c2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	430a      	orrs	r2, r1
 8014c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c3e:	f003 0301 	and.w	r3, r3, #1
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d00a      	beq.n	8014c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	685b      	ldr	r3, [r3, #4]
 8014c4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	430a      	orrs	r2, r1
 8014c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c60:	f003 0302 	and.w	r3, r3, #2
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d00a      	beq.n	8014c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	685b      	ldr	r3, [r3, #4]
 8014c6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	430a      	orrs	r2, r1
 8014c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c82:	f003 0304 	and.w	r3, r3, #4
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d00a      	beq.n	8014ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	685b      	ldr	r3, [r3, #4]
 8014c90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	430a      	orrs	r2, r1
 8014c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ca4:	f003 0310 	and.w	r3, r3, #16
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d00a      	beq.n	8014cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	689b      	ldr	r3, [r3, #8]
 8014cb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	430a      	orrs	r2, r1
 8014cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014cc6:	f003 0320 	and.w	r3, r3, #32
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d00a      	beq.n	8014ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	689b      	ldr	r3, [r3, #8]
 8014cd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	430a      	orrs	r2, r1
 8014ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d01a      	beq.n	8014d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	685b      	ldr	r3, [r3, #4]
 8014cf6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	430a      	orrs	r2, r1
 8014d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014d0e:	d10a      	bne.n	8014d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	685b      	ldr	r3, [r3, #4]
 8014d16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	430a      	orrs	r2, r1
 8014d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d00a      	beq.n	8014d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	685b      	ldr	r3, [r3, #4]
 8014d38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	430a      	orrs	r2, r1
 8014d46:	605a      	str	r2, [r3, #4]
  }
}
 8014d48:	bf00      	nop
 8014d4a:	370c      	adds	r7, #12
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d52:	4770      	bx	lr

08014d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b098      	sub	sp, #96	@ 0x60
 8014d58:	af02      	add	r7, sp, #8
 8014d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014d64:	f7f3 f856 	bl	8007e14 <HAL_GetTick>
 8014d68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	f003 0308 	and.w	r3, r3, #8
 8014d74:	2b08      	cmp	r3, #8
 8014d76:	d12f      	bne.n	8014dd8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014d78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014d7c:	9300      	str	r3, [sp, #0]
 8014d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014d80:	2200      	movs	r2, #0
 8014d82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f000 f88e 	bl	8014ea8 <UART_WaitOnFlagUntilTimeout>
 8014d8c:	4603      	mov	r3, r0
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d022      	beq.n	8014dd8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d9a:	e853 3f00 	ldrex	r3, [r3]
 8014d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014da2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014da6:	653b      	str	r3, [r7, #80]	@ 0x50
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	461a      	mov	r2, r3
 8014dae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8014db2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014db4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014db6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014db8:	e841 2300 	strex	r3, r2, [r1]
 8014dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d1e6      	bne.n	8014d92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2220      	movs	r2, #32
 8014dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014dd4:	2303      	movs	r3, #3
 8014dd6:	e063      	b.n	8014ea0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	f003 0304 	and.w	r3, r3, #4
 8014de2:	2b04      	cmp	r3, #4
 8014de4:	d149      	bne.n	8014e7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014de6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014dea:	9300      	str	r3, [sp, #0]
 8014dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014dee:	2200      	movs	r2, #0
 8014df0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8014df4:	6878      	ldr	r0, [r7, #4]
 8014df6:	f000 f857 	bl	8014ea8 <UART_WaitOnFlagUntilTimeout>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d03c      	beq.n	8014e7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e08:	e853 3f00 	ldrex	r3, [r3]
 8014e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8014e0e:	6a3b      	ldr	r3, [r7, #32]
 8014e10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	461a      	mov	r2, r3
 8014e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8014e20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014e26:	e841 2300 	strex	r3, r2, [r1]
 8014e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d1e6      	bne.n	8014e00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	3308      	adds	r3, #8
 8014e38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e3a:	693b      	ldr	r3, [r7, #16]
 8014e3c:	e853 3f00 	ldrex	r3, [r3]
 8014e40:	60fb      	str	r3, [r7, #12]
   return(result);
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	f023 0301 	bic.w	r3, r3, #1
 8014e48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	3308      	adds	r3, #8
 8014e50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014e52:	61fa      	str	r2, [r7, #28]
 8014e54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e56:	69b9      	ldr	r1, [r7, #24]
 8014e58:	69fa      	ldr	r2, [r7, #28]
 8014e5a:	e841 2300 	strex	r3, r2, [r1]
 8014e5e:	617b      	str	r3, [r7, #20]
   return(result);
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d1e5      	bne.n	8014e32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	2220      	movs	r2, #32
 8014e6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	2200      	movs	r2, #0
 8014e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014e76:	2303      	movs	r3, #3
 8014e78:	e012      	b.n	8014ea0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2220      	movs	r2, #32
 8014e7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2220      	movs	r2, #32
 8014e86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2200      	movs	r2, #0
 8014e94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	2200      	movs	r2, #0
 8014e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014e9e:	2300      	movs	r3, #0
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3758      	adds	r7, #88	@ 0x58
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}

08014ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b084      	sub	sp, #16
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	60b9      	str	r1, [r7, #8]
 8014eb2:	603b      	str	r3, [r7, #0]
 8014eb4:	4613      	mov	r3, r2
 8014eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014eb8:	e04f      	b.n	8014f5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014eba:	69bb      	ldr	r3, [r7, #24]
 8014ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ec0:	d04b      	beq.n	8014f5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014ec2:	f7f2 ffa7 	bl	8007e14 <HAL_GetTick>
 8014ec6:	4602      	mov	r2, r0
 8014ec8:	683b      	ldr	r3, [r7, #0]
 8014eca:	1ad3      	subs	r3, r2, r3
 8014ecc:	69ba      	ldr	r2, [r7, #24]
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	d302      	bcc.n	8014ed8 <UART_WaitOnFlagUntilTimeout+0x30>
 8014ed2:	69bb      	ldr	r3, [r7, #24]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d101      	bne.n	8014edc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014ed8:	2303      	movs	r3, #3
 8014eda:	e04e      	b.n	8014f7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	f003 0304 	and.w	r3, r3, #4
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d037      	beq.n	8014f5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8014eea:	68bb      	ldr	r3, [r7, #8]
 8014eec:	2b80      	cmp	r3, #128	@ 0x80
 8014eee:	d034      	beq.n	8014f5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	2b40      	cmp	r3, #64	@ 0x40
 8014ef4:	d031      	beq.n	8014f5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	69db      	ldr	r3, [r3, #28]
 8014efc:	f003 0308 	and.w	r3, r3, #8
 8014f00:	2b08      	cmp	r3, #8
 8014f02:	d110      	bne.n	8014f26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	2208      	movs	r2, #8
 8014f0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014f0c:	68f8      	ldr	r0, [r7, #12]
 8014f0e:	f000 f839 	bl	8014f84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	2208      	movs	r2, #8
 8014f16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8014f22:	2301      	movs	r3, #1
 8014f24:	e029      	b.n	8014f7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	69db      	ldr	r3, [r3, #28]
 8014f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014f30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014f34:	d111      	bne.n	8014f5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014f3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014f40:	68f8      	ldr	r0, [r7, #12]
 8014f42:	f000 f81f 	bl	8014f84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	2220      	movs	r2, #32
 8014f4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	2200      	movs	r2, #0
 8014f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014f56:	2303      	movs	r3, #3
 8014f58:	e00f      	b.n	8014f7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	69da      	ldr	r2, [r3, #28]
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	4013      	ands	r3, r2
 8014f64:	68ba      	ldr	r2, [r7, #8]
 8014f66:	429a      	cmp	r2, r3
 8014f68:	bf0c      	ite	eq
 8014f6a:	2301      	moveq	r3, #1
 8014f6c:	2300      	movne	r3, #0
 8014f6e:	b2db      	uxtb	r3, r3
 8014f70:	461a      	mov	r2, r3
 8014f72:	79fb      	ldrb	r3, [r7, #7]
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d0a0      	beq.n	8014eba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014f78:	2300      	movs	r3, #0
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	3710      	adds	r7, #16
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}
	...

08014f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014f84:	b480      	push	{r7}
 8014f86:	b095      	sub	sp, #84	@ 0x54
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f94:	e853 3f00 	ldrex	r3, [r3]
 8014f98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	461a      	mov	r2, r3
 8014fa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014faa:	643b      	str	r3, [r7, #64]	@ 0x40
 8014fac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014fb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014fb2:	e841 2300 	strex	r3, r2, [r1]
 8014fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d1e6      	bne.n	8014f8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	3308      	adds	r3, #8
 8014fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fc6:	6a3b      	ldr	r3, [r7, #32]
 8014fc8:	e853 3f00 	ldrex	r3, [r3]
 8014fcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8014fce:	69fa      	ldr	r2, [r7, #28]
 8014fd0:	4b1e      	ldr	r3, [pc, #120]	@ (801504c <UART_EndRxTransfer+0xc8>)
 8014fd2:	4013      	ands	r3, r2
 8014fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	3308      	adds	r3, #8
 8014fdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014fde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014fe4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014fe6:	e841 2300 	strex	r3, r2, [r1]
 8014fea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d1e5      	bne.n	8014fbe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014ff6:	2b01      	cmp	r3, #1
 8014ff8:	d118      	bne.n	801502c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	e853 3f00 	ldrex	r3, [r3]
 8015006:	60bb      	str	r3, [r7, #8]
   return(result);
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	f023 0310 	bic.w	r3, r3, #16
 801500e:	647b      	str	r3, [r7, #68]	@ 0x44
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	461a      	mov	r2, r3
 8015016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015018:	61bb      	str	r3, [r7, #24]
 801501a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801501c:	6979      	ldr	r1, [r7, #20]
 801501e:	69ba      	ldr	r2, [r7, #24]
 8015020:	e841 2300 	strex	r3, r2, [r1]
 8015024:	613b      	str	r3, [r7, #16]
   return(result);
 8015026:	693b      	ldr	r3, [r7, #16]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d1e6      	bne.n	8014ffa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2220      	movs	r2, #32
 8015030:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	2200      	movs	r2, #0
 8015038:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	2200      	movs	r2, #0
 801503e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8015040:	bf00      	nop
 8015042:	3754      	adds	r7, #84	@ 0x54
 8015044:	46bd      	mov	sp, r7
 8015046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801504a:	4770      	bx	lr
 801504c:	effffffe 	.word	0xeffffffe

08015050 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8015050:	b480      	push	{r7}
 8015052:	b085      	sub	sp, #20
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801505e:	2b01      	cmp	r3, #1
 8015060:	d101      	bne.n	8015066 <HAL_UARTEx_DisableFifoMode+0x16>
 8015062:	2302      	movs	r3, #2
 8015064:	e027      	b.n	80150b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	2201      	movs	r2, #1
 801506a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	2224      	movs	r2, #36	@ 0x24
 8015072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	f022 0201 	bic.w	r2, r2, #1
 801508c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8015094:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	2200      	movs	r2, #0
 801509a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	68fa      	ldr	r2, [r7, #12]
 80150a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	2220      	movs	r2, #32
 80150a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	2200      	movs	r2, #0
 80150b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80150b4:	2300      	movs	r3, #0
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3714      	adds	r7, #20
 80150ba:	46bd      	mov	sp, r7
 80150bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c0:	4770      	bx	lr

080150c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80150c2:	b580      	push	{r7, lr}
 80150c4:	b084      	sub	sp, #16
 80150c6:	af00      	add	r7, sp, #0
 80150c8:	6078      	str	r0, [r7, #4]
 80150ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80150d2:	2b01      	cmp	r3, #1
 80150d4:	d101      	bne.n	80150da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80150d6:	2302      	movs	r3, #2
 80150d8:	e02d      	b.n	8015136 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	2201      	movs	r2, #1
 80150de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	2224      	movs	r2, #36	@ 0x24
 80150e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	681a      	ldr	r2, [r3, #0]
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	f022 0201 	bic.w	r2, r2, #1
 8015100:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	689b      	ldr	r3, [r3, #8]
 8015108:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	683a      	ldr	r2, [r7, #0]
 8015112:	430a      	orrs	r2, r1
 8015114:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015116:	6878      	ldr	r0, [r7, #4]
 8015118:	f000 f850 	bl	80151bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	68fa      	ldr	r2, [r7, #12]
 8015122:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	2220      	movs	r2, #32
 8015128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2200      	movs	r2, #0
 8015130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8015134:	2300      	movs	r3, #0
}
 8015136:	4618      	mov	r0, r3
 8015138:	3710      	adds	r7, #16
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}

0801513e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801513e:	b580      	push	{r7, lr}
 8015140:	b084      	sub	sp, #16
 8015142:	af00      	add	r7, sp, #0
 8015144:	6078      	str	r0, [r7, #4]
 8015146:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801514e:	2b01      	cmp	r3, #1
 8015150:	d101      	bne.n	8015156 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8015152:	2302      	movs	r3, #2
 8015154:	e02d      	b.n	80151b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2201      	movs	r2, #1
 801515a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	2224      	movs	r2, #36	@ 0x24
 8015162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	f022 0201 	bic.w	r2, r2, #1
 801517c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	689b      	ldr	r3, [r3, #8]
 8015184:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	683a      	ldr	r2, [r7, #0]
 801518e:	430a      	orrs	r2, r1
 8015190:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015192:	6878      	ldr	r0, [r7, #4]
 8015194:	f000 f812 	bl	80151bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	68fa      	ldr	r2, [r7, #12]
 801519e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	2220      	movs	r2, #32
 80151a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	2200      	movs	r2, #0
 80151ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80151b0:	2300      	movs	r3, #0
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	3710      	adds	r7, #16
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}
	...

080151bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80151bc:	b480      	push	{r7}
 80151be:	b085      	sub	sp, #20
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d108      	bne.n	80151de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2201      	movs	r2, #1
 80151d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2201      	movs	r2, #1
 80151d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80151dc:	e031      	b.n	8015242 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80151de:	2310      	movs	r3, #16
 80151e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80151e2:	2310      	movs	r3, #16
 80151e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	689b      	ldr	r3, [r3, #8]
 80151ec:	0e5b      	lsrs	r3, r3, #25
 80151ee:	b2db      	uxtb	r3, r3
 80151f0:	f003 0307 	and.w	r3, r3, #7
 80151f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	689b      	ldr	r3, [r3, #8]
 80151fc:	0f5b      	lsrs	r3, r3, #29
 80151fe:	b2db      	uxtb	r3, r3
 8015200:	f003 0307 	and.w	r3, r3, #7
 8015204:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015206:	7bbb      	ldrb	r3, [r7, #14]
 8015208:	7b3a      	ldrb	r2, [r7, #12]
 801520a:	4911      	ldr	r1, [pc, #68]	@ (8015250 <UARTEx_SetNbDataToProcess+0x94>)
 801520c:	5c8a      	ldrb	r2, [r1, r2]
 801520e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8015212:	7b3a      	ldrb	r2, [r7, #12]
 8015214:	490f      	ldr	r1, [pc, #60]	@ (8015254 <UARTEx_SetNbDataToProcess+0x98>)
 8015216:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015218:	fb93 f3f2 	sdiv	r3, r3, r2
 801521c:	b29a      	uxth	r2, r3
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015224:	7bfb      	ldrb	r3, [r7, #15]
 8015226:	7b7a      	ldrb	r2, [r7, #13]
 8015228:	4909      	ldr	r1, [pc, #36]	@ (8015250 <UARTEx_SetNbDataToProcess+0x94>)
 801522a:	5c8a      	ldrb	r2, [r1, r2]
 801522c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015230:	7b7a      	ldrb	r2, [r7, #13]
 8015232:	4908      	ldr	r1, [pc, #32]	@ (8015254 <UARTEx_SetNbDataToProcess+0x98>)
 8015234:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015236:	fb93 f3f2 	sdiv	r3, r3, r2
 801523a:	b29a      	uxth	r2, r3
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8015242:	bf00      	nop
 8015244:	3714      	adds	r7, #20
 8015246:	46bd      	mov	sp, r7
 8015248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524c:	4770      	bx	lr
 801524e:	bf00      	nop
 8015250:	0801ef04 	.word	0x0801ef04
 8015254:	0801ef0c 	.word	0x0801ef0c

08015258 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015258:	b084      	sub	sp, #16
 801525a:	b580      	push	{r7, lr}
 801525c:	b084      	sub	sp, #16
 801525e:	af00      	add	r7, sp, #0
 8015260:	6078      	str	r0, [r7, #4]
 8015262:	f107 001c 	add.w	r0, r7, #28
 8015266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801526a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801526e:	2b01      	cmp	r3, #1
 8015270:	d121      	bne.n	80152b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015276:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	68da      	ldr	r2, [r3, #12]
 8015282:	4b2c      	ldr	r3, [pc, #176]	@ (8015334 <USB_CoreInit+0xdc>)
 8015284:	4013      	ands	r3, r2
 8015286:	687a      	ldr	r2, [r7, #4]
 8015288:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	68db      	ldr	r3, [r3, #12]
 801528e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8015296:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801529a:	2b01      	cmp	r3, #1
 801529c:	d105      	bne.n	80152aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	68db      	ldr	r3, [r3, #12]
 80152a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80152aa:	6878      	ldr	r0, [r7, #4]
 80152ac:	f001 faf6 	bl	801689c <USB_CoreReset>
 80152b0:	4603      	mov	r3, r0
 80152b2:	73fb      	strb	r3, [r7, #15]
 80152b4:	e01b      	b.n	80152ee <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	68db      	ldr	r3, [r3, #12]
 80152ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80152c2:	6878      	ldr	r0, [r7, #4]
 80152c4:	f001 faea 	bl	801689c <USB_CoreReset>
 80152c8:	4603      	mov	r3, r0
 80152ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80152cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d106      	bne.n	80152e2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	639a      	str	r2, [r3, #56]	@ 0x38
 80152e0:	e005      	b.n	80152ee <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80152ee:	7fbb      	ldrb	r3, [r7, #30]
 80152f0:	2b01      	cmp	r3, #1
 80152f2:	d116      	bne.n	8015322 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80152f8:	b29a      	uxth	r2, r3
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015302:	4b0d      	ldr	r3, [pc, #52]	@ (8015338 <USB_CoreInit+0xe0>)
 8015304:	4313      	orrs	r3, r2
 8015306:	687a      	ldr	r2, [r7, #4]
 8015308:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	689b      	ldr	r3, [r3, #8]
 801530e:	f043 0206 	orr.w	r2, r3, #6
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	689b      	ldr	r3, [r3, #8]
 801531a:	f043 0220 	orr.w	r2, r3, #32
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8015322:	7bfb      	ldrb	r3, [r7, #15]
}
 8015324:	4618      	mov	r0, r3
 8015326:	3710      	adds	r7, #16
 8015328:	46bd      	mov	sp, r7
 801532a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801532e:	b004      	add	sp, #16
 8015330:	4770      	bx	lr
 8015332:	bf00      	nop
 8015334:	ffbdffbf 	.word	0xffbdffbf
 8015338:	03ee0000 	.word	0x03ee0000

0801533c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801533c:	b480      	push	{r7}
 801533e:	b087      	sub	sp, #28
 8015340:	af00      	add	r7, sp, #0
 8015342:	60f8      	str	r0, [r7, #12]
 8015344:	60b9      	str	r1, [r7, #8]
 8015346:	4613      	mov	r3, r2
 8015348:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801534a:	79fb      	ldrb	r3, [r7, #7]
 801534c:	2b02      	cmp	r3, #2
 801534e:	d165      	bne.n	801541c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8015350:	68bb      	ldr	r3, [r7, #8]
 8015352:	4a41      	ldr	r2, [pc, #260]	@ (8015458 <USB_SetTurnaroundTime+0x11c>)
 8015354:	4293      	cmp	r3, r2
 8015356:	d906      	bls.n	8015366 <USB_SetTurnaroundTime+0x2a>
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	4a40      	ldr	r2, [pc, #256]	@ (801545c <USB_SetTurnaroundTime+0x120>)
 801535c:	4293      	cmp	r3, r2
 801535e:	d202      	bcs.n	8015366 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8015360:	230f      	movs	r3, #15
 8015362:	617b      	str	r3, [r7, #20]
 8015364:	e062      	b.n	801542c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8015366:	68bb      	ldr	r3, [r7, #8]
 8015368:	4a3c      	ldr	r2, [pc, #240]	@ (801545c <USB_SetTurnaroundTime+0x120>)
 801536a:	4293      	cmp	r3, r2
 801536c:	d306      	bcc.n	801537c <USB_SetTurnaroundTime+0x40>
 801536e:	68bb      	ldr	r3, [r7, #8]
 8015370:	4a3b      	ldr	r2, [pc, #236]	@ (8015460 <USB_SetTurnaroundTime+0x124>)
 8015372:	4293      	cmp	r3, r2
 8015374:	d202      	bcs.n	801537c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8015376:	230e      	movs	r3, #14
 8015378:	617b      	str	r3, [r7, #20]
 801537a:	e057      	b.n	801542c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801537c:	68bb      	ldr	r3, [r7, #8]
 801537e:	4a38      	ldr	r2, [pc, #224]	@ (8015460 <USB_SetTurnaroundTime+0x124>)
 8015380:	4293      	cmp	r3, r2
 8015382:	d306      	bcc.n	8015392 <USB_SetTurnaroundTime+0x56>
 8015384:	68bb      	ldr	r3, [r7, #8]
 8015386:	4a37      	ldr	r2, [pc, #220]	@ (8015464 <USB_SetTurnaroundTime+0x128>)
 8015388:	4293      	cmp	r3, r2
 801538a:	d202      	bcs.n	8015392 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801538c:	230d      	movs	r3, #13
 801538e:	617b      	str	r3, [r7, #20]
 8015390:	e04c      	b.n	801542c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	4a33      	ldr	r2, [pc, #204]	@ (8015464 <USB_SetTurnaroundTime+0x128>)
 8015396:	4293      	cmp	r3, r2
 8015398:	d306      	bcc.n	80153a8 <USB_SetTurnaroundTime+0x6c>
 801539a:	68bb      	ldr	r3, [r7, #8]
 801539c:	4a32      	ldr	r2, [pc, #200]	@ (8015468 <USB_SetTurnaroundTime+0x12c>)
 801539e:	4293      	cmp	r3, r2
 80153a0:	d802      	bhi.n	80153a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80153a2:	230c      	movs	r3, #12
 80153a4:	617b      	str	r3, [r7, #20]
 80153a6:	e041      	b.n	801542c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80153a8:	68bb      	ldr	r3, [r7, #8]
 80153aa:	4a2f      	ldr	r2, [pc, #188]	@ (8015468 <USB_SetTurnaroundTime+0x12c>)
 80153ac:	4293      	cmp	r3, r2
 80153ae:	d906      	bls.n	80153be <USB_SetTurnaroundTime+0x82>
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	4a2e      	ldr	r2, [pc, #184]	@ (801546c <USB_SetTurnaroundTime+0x130>)
 80153b4:	4293      	cmp	r3, r2
 80153b6:	d802      	bhi.n	80153be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80153b8:	230b      	movs	r3, #11
 80153ba:	617b      	str	r3, [r7, #20]
 80153bc:	e036      	b.n	801542c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80153be:	68bb      	ldr	r3, [r7, #8]
 80153c0:	4a2a      	ldr	r2, [pc, #168]	@ (801546c <USB_SetTurnaroundTime+0x130>)
 80153c2:	4293      	cmp	r3, r2
 80153c4:	d906      	bls.n	80153d4 <USB_SetTurnaroundTime+0x98>
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	4a29      	ldr	r2, [pc, #164]	@ (8015470 <USB_SetTurnaroundTime+0x134>)
 80153ca:	4293      	cmp	r3, r2
 80153cc:	d802      	bhi.n	80153d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80153ce:	230a      	movs	r3, #10
 80153d0:	617b      	str	r3, [r7, #20]
 80153d2:	e02b      	b.n	801542c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80153d4:	68bb      	ldr	r3, [r7, #8]
 80153d6:	4a26      	ldr	r2, [pc, #152]	@ (8015470 <USB_SetTurnaroundTime+0x134>)
 80153d8:	4293      	cmp	r3, r2
 80153da:	d906      	bls.n	80153ea <USB_SetTurnaroundTime+0xae>
 80153dc:	68bb      	ldr	r3, [r7, #8]
 80153de:	4a25      	ldr	r2, [pc, #148]	@ (8015474 <USB_SetTurnaroundTime+0x138>)
 80153e0:	4293      	cmp	r3, r2
 80153e2:	d202      	bcs.n	80153ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80153e4:	2309      	movs	r3, #9
 80153e6:	617b      	str	r3, [r7, #20]
 80153e8:	e020      	b.n	801542c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	4a21      	ldr	r2, [pc, #132]	@ (8015474 <USB_SetTurnaroundTime+0x138>)
 80153ee:	4293      	cmp	r3, r2
 80153f0:	d306      	bcc.n	8015400 <USB_SetTurnaroundTime+0xc4>
 80153f2:	68bb      	ldr	r3, [r7, #8]
 80153f4:	4a20      	ldr	r2, [pc, #128]	@ (8015478 <USB_SetTurnaroundTime+0x13c>)
 80153f6:	4293      	cmp	r3, r2
 80153f8:	d802      	bhi.n	8015400 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80153fa:	2308      	movs	r3, #8
 80153fc:	617b      	str	r3, [r7, #20]
 80153fe:	e015      	b.n	801542c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8015400:	68bb      	ldr	r3, [r7, #8]
 8015402:	4a1d      	ldr	r2, [pc, #116]	@ (8015478 <USB_SetTurnaroundTime+0x13c>)
 8015404:	4293      	cmp	r3, r2
 8015406:	d906      	bls.n	8015416 <USB_SetTurnaroundTime+0xda>
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	4a1c      	ldr	r2, [pc, #112]	@ (801547c <USB_SetTurnaroundTime+0x140>)
 801540c:	4293      	cmp	r3, r2
 801540e:	d202      	bcs.n	8015416 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8015410:	2307      	movs	r3, #7
 8015412:	617b      	str	r3, [r7, #20]
 8015414:	e00a      	b.n	801542c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8015416:	2306      	movs	r3, #6
 8015418:	617b      	str	r3, [r7, #20]
 801541a:	e007      	b.n	801542c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801541c:	79fb      	ldrb	r3, [r7, #7]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d102      	bne.n	8015428 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8015422:	2309      	movs	r3, #9
 8015424:	617b      	str	r3, [r7, #20]
 8015426:	e001      	b.n	801542c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8015428:	2309      	movs	r3, #9
 801542a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	68db      	ldr	r3, [r3, #12]
 8015430:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	68da      	ldr	r2, [r3, #12]
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	029b      	lsls	r3, r3, #10
 8015440:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8015444:	431a      	orrs	r2, r3
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801544a:	2300      	movs	r3, #0
}
 801544c:	4618      	mov	r0, r3
 801544e:	371c      	adds	r7, #28
 8015450:	46bd      	mov	sp, r7
 8015452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015456:	4770      	bx	lr
 8015458:	00d8acbf 	.word	0x00d8acbf
 801545c:	00e4e1c0 	.word	0x00e4e1c0
 8015460:	00f42400 	.word	0x00f42400
 8015464:	01067380 	.word	0x01067380
 8015468:	011a499f 	.word	0x011a499f
 801546c:	01312cff 	.word	0x01312cff
 8015470:	014ca43f 	.word	0x014ca43f
 8015474:	016e3600 	.word	0x016e3600
 8015478:	01a6ab1f 	.word	0x01a6ab1f
 801547c:	01e84800 	.word	0x01e84800

08015480 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015480:	b480      	push	{r7}
 8015482:	b083      	sub	sp, #12
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	689b      	ldr	r3, [r3, #8]
 801548c:	f043 0201 	orr.w	r2, r3, #1
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015494:	2300      	movs	r3, #0
}
 8015496:	4618      	mov	r0, r3
 8015498:	370c      	adds	r7, #12
 801549a:	46bd      	mov	sp, r7
 801549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a0:	4770      	bx	lr

080154a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80154a2:	b480      	push	{r7}
 80154a4:	b083      	sub	sp, #12
 80154a6:	af00      	add	r7, sp, #0
 80154a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	689b      	ldr	r3, [r3, #8]
 80154ae:	f023 0201 	bic.w	r2, r3, #1
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80154b6:	2300      	movs	r3, #0
}
 80154b8:	4618      	mov	r0, r3
 80154ba:	370c      	adds	r7, #12
 80154bc:	46bd      	mov	sp, r7
 80154be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c2:	4770      	bx	lr

080154c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b084      	sub	sp, #16
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
 80154cc:	460b      	mov	r3, r1
 80154ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80154d0:	2300      	movs	r3, #0
 80154d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	68db      	ldr	r3, [r3, #12]
 80154d8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80154e0:	78fb      	ldrb	r3, [r7, #3]
 80154e2:	2b01      	cmp	r3, #1
 80154e4:	d115      	bne.n	8015512 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	68db      	ldr	r3, [r3, #12]
 80154ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80154f2:	200a      	movs	r0, #10
 80154f4:	f7f2 fc9a 	bl	8007e2c <HAL_Delay>
      ms += 10U;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	330a      	adds	r3, #10
 80154fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80154fe:	6878      	ldr	r0, [r7, #4]
 8015500:	f001 f93b 	bl	801677a <USB_GetMode>
 8015504:	4603      	mov	r3, r0
 8015506:	2b01      	cmp	r3, #1
 8015508:	d01e      	beq.n	8015548 <USB_SetCurrentMode+0x84>
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	2bc7      	cmp	r3, #199	@ 0xc7
 801550e:	d9f0      	bls.n	80154f2 <USB_SetCurrentMode+0x2e>
 8015510:	e01a      	b.n	8015548 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8015512:	78fb      	ldrb	r3, [r7, #3]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d115      	bne.n	8015544 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	68db      	ldr	r3, [r3, #12]
 801551c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8015524:	200a      	movs	r0, #10
 8015526:	f7f2 fc81 	bl	8007e2c <HAL_Delay>
      ms += 10U;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	330a      	adds	r3, #10
 801552e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8015530:	6878      	ldr	r0, [r7, #4]
 8015532:	f001 f922 	bl	801677a <USB_GetMode>
 8015536:	4603      	mov	r3, r0
 8015538:	2b00      	cmp	r3, #0
 801553a:	d005      	beq.n	8015548 <USB_SetCurrentMode+0x84>
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	2bc7      	cmp	r3, #199	@ 0xc7
 8015540:	d9f0      	bls.n	8015524 <USB_SetCurrentMode+0x60>
 8015542:	e001      	b.n	8015548 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8015544:	2301      	movs	r3, #1
 8015546:	e005      	b.n	8015554 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	2bc8      	cmp	r3, #200	@ 0xc8
 801554c:	d101      	bne.n	8015552 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801554e:	2301      	movs	r3, #1
 8015550:	e000      	b.n	8015554 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8015552:	2300      	movs	r3, #0
}
 8015554:	4618      	mov	r0, r3
 8015556:	3710      	adds	r7, #16
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}

0801555c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801555c:	b084      	sub	sp, #16
 801555e:	b580      	push	{r7, lr}
 8015560:	b086      	sub	sp, #24
 8015562:	af00      	add	r7, sp, #0
 8015564:	6078      	str	r0, [r7, #4]
 8015566:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801556a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801556e:	2300      	movs	r3, #0
 8015570:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8015576:	2300      	movs	r3, #0
 8015578:	613b      	str	r3, [r7, #16]
 801557a:	e009      	b.n	8015590 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801557c:	687a      	ldr	r2, [r7, #4]
 801557e:	693b      	ldr	r3, [r7, #16]
 8015580:	3340      	adds	r3, #64	@ 0x40
 8015582:	009b      	lsls	r3, r3, #2
 8015584:	4413      	add	r3, r2
 8015586:	2200      	movs	r2, #0
 8015588:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	3301      	adds	r3, #1
 801558e:	613b      	str	r3, [r7, #16]
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	2b0e      	cmp	r3, #14
 8015594:	d9f2      	bls.n	801557c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8015596:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801559a:	2b00      	cmp	r3, #0
 801559c:	d11c      	bne.n	80155d8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80155a4:	685b      	ldr	r3, [r3, #4]
 80155a6:	68fa      	ldr	r2, [r7, #12]
 80155a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80155ac:	f043 0302 	orr.w	r3, r3, #2
 80155b0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155b6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	601a      	str	r2, [r3, #0]
 80155d6:	e005      	b.n	80155e4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80155ea:	461a      	mov	r2, r3
 80155ec:	2300      	movs	r3, #0
 80155ee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80155f0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80155f4:	2b01      	cmp	r3, #1
 80155f6:	d10d      	bne.n	8015614 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80155f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d104      	bne.n	801560a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8015600:	2100      	movs	r1, #0
 8015602:	6878      	ldr	r0, [r7, #4]
 8015604:	f000 f968 	bl	80158d8 <USB_SetDevSpeed>
 8015608:	e008      	b.n	801561c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801560a:	2101      	movs	r1, #1
 801560c:	6878      	ldr	r0, [r7, #4]
 801560e:	f000 f963 	bl	80158d8 <USB_SetDevSpeed>
 8015612:	e003      	b.n	801561c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8015614:	2103      	movs	r1, #3
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	f000 f95e 	bl	80158d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801561c:	2110      	movs	r1, #16
 801561e:	6878      	ldr	r0, [r7, #4]
 8015620:	f000 f8fa 	bl	8015818 <USB_FlushTxFifo>
 8015624:	4603      	mov	r3, r0
 8015626:	2b00      	cmp	r3, #0
 8015628:	d001      	beq.n	801562e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801562a:	2301      	movs	r3, #1
 801562c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801562e:	6878      	ldr	r0, [r7, #4]
 8015630:	f000 f924 	bl	801587c <USB_FlushRxFifo>
 8015634:	4603      	mov	r3, r0
 8015636:	2b00      	cmp	r3, #0
 8015638:	d001      	beq.n	801563e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801563a:	2301      	movs	r3, #1
 801563c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015644:	461a      	mov	r2, r3
 8015646:	2300      	movs	r3, #0
 8015648:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015650:	461a      	mov	r2, r3
 8015652:	2300      	movs	r3, #0
 8015654:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801565c:	461a      	mov	r2, r3
 801565e:	2300      	movs	r3, #0
 8015660:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015662:	2300      	movs	r3, #0
 8015664:	613b      	str	r3, [r7, #16]
 8015666:	e043      	b.n	80156f0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015668:	693b      	ldr	r3, [r7, #16]
 801566a:	015a      	lsls	r2, r3, #5
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	4413      	add	r3, r2
 8015670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801567a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801567e:	d118      	bne.n	80156b2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8015680:	693b      	ldr	r3, [r7, #16]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d10a      	bne.n	801569c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8015686:	693b      	ldr	r3, [r7, #16]
 8015688:	015a      	lsls	r2, r3, #5
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	4413      	add	r3, r2
 801568e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015692:	461a      	mov	r2, r3
 8015694:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8015698:	6013      	str	r3, [r2, #0]
 801569a:	e013      	b.n	80156c4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801569c:	693b      	ldr	r3, [r7, #16]
 801569e:	015a      	lsls	r2, r3, #5
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	4413      	add	r3, r2
 80156a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80156a8:	461a      	mov	r2, r3
 80156aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80156ae:	6013      	str	r3, [r2, #0]
 80156b0:	e008      	b.n	80156c4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80156b2:	693b      	ldr	r3, [r7, #16]
 80156b4:	015a      	lsls	r2, r3, #5
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	4413      	add	r3, r2
 80156ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80156be:	461a      	mov	r2, r3
 80156c0:	2300      	movs	r3, #0
 80156c2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80156c4:	693b      	ldr	r3, [r7, #16]
 80156c6:	015a      	lsls	r2, r3, #5
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	4413      	add	r3, r2
 80156cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80156d0:	461a      	mov	r2, r3
 80156d2:	2300      	movs	r3, #0
 80156d4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80156d6:	693b      	ldr	r3, [r7, #16]
 80156d8:	015a      	lsls	r2, r3, #5
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	4413      	add	r3, r2
 80156de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80156e2:	461a      	mov	r2, r3
 80156e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80156e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	3301      	adds	r3, #1
 80156ee:	613b      	str	r3, [r7, #16]
 80156f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80156f4:	461a      	mov	r2, r3
 80156f6:	693b      	ldr	r3, [r7, #16]
 80156f8:	4293      	cmp	r3, r2
 80156fa:	d3b5      	bcc.n	8015668 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80156fc:	2300      	movs	r3, #0
 80156fe:	613b      	str	r3, [r7, #16]
 8015700:	e043      	b.n	801578a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015702:	693b      	ldr	r3, [r7, #16]
 8015704:	015a      	lsls	r2, r3, #5
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	4413      	add	r3, r2
 801570a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015714:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015718:	d118      	bne.n	801574c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801571a:	693b      	ldr	r3, [r7, #16]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d10a      	bne.n	8015736 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8015720:	693b      	ldr	r3, [r7, #16]
 8015722:	015a      	lsls	r2, r3, #5
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	4413      	add	r3, r2
 8015728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801572c:	461a      	mov	r2, r3
 801572e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8015732:	6013      	str	r3, [r2, #0]
 8015734:	e013      	b.n	801575e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	015a      	lsls	r2, r3, #5
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	4413      	add	r3, r2
 801573e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015742:	461a      	mov	r2, r3
 8015744:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8015748:	6013      	str	r3, [r2, #0]
 801574a:	e008      	b.n	801575e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801574c:	693b      	ldr	r3, [r7, #16]
 801574e:	015a      	lsls	r2, r3, #5
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	4413      	add	r3, r2
 8015754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015758:	461a      	mov	r2, r3
 801575a:	2300      	movs	r3, #0
 801575c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801575e:	693b      	ldr	r3, [r7, #16]
 8015760:	015a      	lsls	r2, r3, #5
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	4413      	add	r3, r2
 8015766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801576a:	461a      	mov	r2, r3
 801576c:	2300      	movs	r3, #0
 801576e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8015770:	693b      	ldr	r3, [r7, #16]
 8015772:	015a      	lsls	r2, r3, #5
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	4413      	add	r3, r2
 8015778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801577c:	461a      	mov	r2, r3
 801577e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8015782:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015784:	693b      	ldr	r3, [r7, #16]
 8015786:	3301      	adds	r3, #1
 8015788:	613b      	str	r3, [r7, #16]
 801578a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801578e:	461a      	mov	r2, r3
 8015790:	693b      	ldr	r3, [r7, #16]
 8015792:	4293      	cmp	r3, r2
 8015794:	d3b5      	bcc.n	8015702 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801579c:	691b      	ldr	r3, [r3, #16]
 801579e:	68fa      	ldr	r2, [r7, #12]
 80157a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80157a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80157a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	2200      	movs	r2, #0
 80157ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80157b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80157b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d105      	bne.n	80157cc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	699b      	ldr	r3, [r3, #24]
 80157c4:	f043 0210 	orr.w	r2, r3, #16
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	699a      	ldr	r2, [r3, #24]
 80157d0:	4b0f      	ldr	r3, [pc, #60]	@ (8015810 <USB_DevInit+0x2b4>)
 80157d2:	4313      	orrs	r3, r2
 80157d4:	687a      	ldr	r2, [r7, #4]
 80157d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80157d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d005      	beq.n	80157ec <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	699b      	ldr	r3, [r3, #24]
 80157e4:	f043 0208 	orr.w	r2, r3, #8
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80157ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80157f0:	2b01      	cmp	r3, #1
 80157f2:	d105      	bne.n	8015800 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	699a      	ldr	r2, [r3, #24]
 80157f8:	4b06      	ldr	r3, [pc, #24]	@ (8015814 <USB_DevInit+0x2b8>)
 80157fa:	4313      	orrs	r3, r2
 80157fc:	687a      	ldr	r2, [r7, #4]
 80157fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8015800:	7dfb      	ldrb	r3, [r7, #23]
}
 8015802:	4618      	mov	r0, r3
 8015804:	3718      	adds	r7, #24
 8015806:	46bd      	mov	sp, r7
 8015808:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801580c:	b004      	add	sp, #16
 801580e:	4770      	bx	lr
 8015810:	803c3800 	.word	0x803c3800
 8015814:	40000004 	.word	0x40000004

08015818 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8015818:	b480      	push	{r7}
 801581a:	b085      	sub	sp, #20
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
 8015820:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015822:	2300      	movs	r3, #0
 8015824:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	3301      	adds	r3, #1
 801582a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015832:	d901      	bls.n	8015838 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8015834:	2303      	movs	r3, #3
 8015836:	e01b      	b.n	8015870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	691b      	ldr	r3, [r3, #16]
 801583c:	2b00      	cmp	r3, #0
 801583e:	daf2      	bge.n	8015826 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8015840:	2300      	movs	r3, #0
 8015842:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	019b      	lsls	r3, r3, #6
 8015848:	f043 0220 	orr.w	r2, r3, #32
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	3301      	adds	r3, #1
 8015854:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801585c:	d901      	bls.n	8015862 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801585e:	2303      	movs	r3, #3
 8015860:	e006      	b.n	8015870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	691b      	ldr	r3, [r3, #16]
 8015866:	f003 0320 	and.w	r3, r3, #32
 801586a:	2b20      	cmp	r3, #32
 801586c:	d0f0      	beq.n	8015850 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801586e:	2300      	movs	r3, #0
}
 8015870:	4618      	mov	r0, r3
 8015872:	3714      	adds	r7, #20
 8015874:	46bd      	mov	sp, r7
 8015876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587a:	4770      	bx	lr

0801587c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801587c:	b480      	push	{r7}
 801587e:	b085      	sub	sp, #20
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015884:	2300      	movs	r3, #0
 8015886:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	3301      	adds	r3, #1
 801588c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015894:	d901      	bls.n	801589a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8015896:	2303      	movs	r3, #3
 8015898:	e018      	b.n	80158cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	691b      	ldr	r3, [r3, #16]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	daf2      	bge.n	8015888 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80158a2:	2300      	movs	r3, #0
 80158a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2210      	movs	r2, #16
 80158aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	3301      	adds	r3, #1
 80158b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80158b8:	d901      	bls.n	80158be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80158ba:	2303      	movs	r3, #3
 80158bc:	e006      	b.n	80158cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	691b      	ldr	r3, [r3, #16]
 80158c2:	f003 0310 	and.w	r3, r3, #16
 80158c6:	2b10      	cmp	r3, #16
 80158c8:	d0f0      	beq.n	80158ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80158ca:	2300      	movs	r3, #0
}
 80158cc:	4618      	mov	r0, r3
 80158ce:	3714      	adds	r7, #20
 80158d0:	46bd      	mov	sp, r7
 80158d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d6:	4770      	bx	lr

080158d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80158d8:	b480      	push	{r7}
 80158da:	b085      	sub	sp, #20
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
 80158e0:	460b      	mov	r3, r1
 80158e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80158ee:	681a      	ldr	r2, [r3, #0]
 80158f0:	78fb      	ldrb	r3, [r7, #3]
 80158f2:	68f9      	ldr	r1, [r7, #12]
 80158f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80158f8:	4313      	orrs	r3, r2
 80158fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80158fc:	2300      	movs	r3, #0
}
 80158fe:	4618      	mov	r0, r3
 8015900:	3714      	adds	r7, #20
 8015902:	46bd      	mov	sp, r7
 8015904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015908:	4770      	bx	lr

0801590a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801590a:	b480      	push	{r7}
 801590c:	b087      	sub	sp, #28
 801590e:	af00      	add	r7, sp, #0
 8015910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8015916:	693b      	ldr	r3, [r7, #16]
 8015918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801591c:	689b      	ldr	r3, [r3, #8]
 801591e:	f003 0306 	and.w	r3, r3, #6
 8015922:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d102      	bne.n	8015930 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801592a:	2300      	movs	r3, #0
 801592c:	75fb      	strb	r3, [r7, #23]
 801592e:	e00a      	b.n	8015946 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	2b02      	cmp	r3, #2
 8015934:	d002      	beq.n	801593c <USB_GetDevSpeed+0x32>
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	2b06      	cmp	r3, #6
 801593a:	d102      	bne.n	8015942 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801593c:	2302      	movs	r3, #2
 801593e:	75fb      	strb	r3, [r7, #23]
 8015940:	e001      	b.n	8015946 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8015942:	230f      	movs	r3, #15
 8015944:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8015946:	7dfb      	ldrb	r3, [r7, #23]
}
 8015948:	4618      	mov	r0, r3
 801594a:	371c      	adds	r7, #28
 801594c:	46bd      	mov	sp, r7
 801594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015952:	4770      	bx	lr

08015954 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015954:	b480      	push	{r7}
 8015956:	b085      	sub	sp, #20
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
 801595c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015962:	683b      	ldr	r3, [r7, #0]
 8015964:	781b      	ldrb	r3, [r3, #0]
 8015966:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	785b      	ldrb	r3, [r3, #1]
 801596c:	2b01      	cmp	r3, #1
 801596e:	d139      	bne.n	80159e4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015976:	69da      	ldr	r2, [r3, #28]
 8015978:	683b      	ldr	r3, [r7, #0]
 801597a:	781b      	ldrb	r3, [r3, #0]
 801597c:	f003 030f 	and.w	r3, r3, #15
 8015980:	2101      	movs	r1, #1
 8015982:	fa01 f303 	lsl.w	r3, r1, r3
 8015986:	b29b      	uxth	r3, r3
 8015988:	68f9      	ldr	r1, [r7, #12]
 801598a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801598e:	4313      	orrs	r3, r2
 8015990:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8015992:	68bb      	ldr	r3, [r7, #8]
 8015994:	015a      	lsls	r2, r3, #5
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	4413      	add	r3, r2
 801599a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d153      	bne.n	8015a50 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80159a8:	68bb      	ldr	r3, [r7, #8]
 80159aa:	015a      	lsls	r2, r3, #5
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	4413      	add	r3, r2
 80159b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80159b4:	681a      	ldr	r2, [r3, #0]
 80159b6:	683b      	ldr	r3, [r7, #0]
 80159b8:	689b      	ldr	r3, [r3, #8]
 80159ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80159be:	683b      	ldr	r3, [r7, #0]
 80159c0:	791b      	ldrb	r3, [r3, #4]
 80159c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80159c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80159c6:	68bb      	ldr	r3, [r7, #8]
 80159c8:	059b      	lsls	r3, r3, #22
 80159ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80159cc:	431a      	orrs	r2, r3
 80159ce:	68bb      	ldr	r3, [r7, #8]
 80159d0:	0159      	lsls	r1, r3, #5
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	440b      	add	r3, r1
 80159d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80159da:	4619      	mov	r1, r3
 80159dc:	4b20      	ldr	r3, [pc, #128]	@ (8015a60 <USB_ActivateEndpoint+0x10c>)
 80159de:	4313      	orrs	r3, r2
 80159e0:	600b      	str	r3, [r1, #0]
 80159e2:	e035      	b.n	8015a50 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80159ea:	69da      	ldr	r2, [r3, #28]
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	781b      	ldrb	r3, [r3, #0]
 80159f0:	f003 030f 	and.w	r3, r3, #15
 80159f4:	2101      	movs	r1, #1
 80159f6:	fa01 f303 	lsl.w	r3, r1, r3
 80159fa:	041b      	lsls	r3, r3, #16
 80159fc:	68f9      	ldr	r1, [r7, #12]
 80159fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015a02:	4313      	orrs	r3, r2
 8015a04:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8015a06:	68bb      	ldr	r3, [r7, #8]
 8015a08:	015a      	lsls	r2, r3, #5
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	4413      	add	r3, r2
 8015a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d119      	bne.n	8015a50 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015a1c:	68bb      	ldr	r3, [r7, #8]
 8015a1e:	015a      	lsls	r2, r3, #5
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	4413      	add	r3, r2
 8015a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a28:	681a      	ldr	r2, [r3, #0]
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	689b      	ldr	r3, [r3, #8]
 8015a2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8015a32:	683b      	ldr	r3, [r7, #0]
 8015a34:	791b      	ldrb	r3, [r3, #4]
 8015a36:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015a38:	430b      	orrs	r3, r1
 8015a3a:	431a      	orrs	r2, r3
 8015a3c:	68bb      	ldr	r3, [r7, #8]
 8015a3e:	0159      	lsls	r1, r3, #5
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	440b      	add	r3, r1
 8015a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a48:	4619      	mov	r1, r3
 8015a4a:	4b05      	ldr	r3, [pc, #20]	@ (8015a60 <USB_ActivateEndpoint+0x10c>)
 8015a4c:	4313      	orrs	r3, r2
 8015a4e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8015a50:	2300      	movs	r3, #0
}
 8015a52:	4618      	mov	r0, r3
 8015a54:	3714      	adds	r7, #20
 8015a56:	46bd      	mov	sp, r7
 8015a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5c:	4770      	bx	lr
 8015a5e:	bf00      	nop
 8015a60:	10008000 	.word	0x10008000

08015a64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015a64:	b480      	push	{r7}
 8015a66:	b085      	sub	sp, #20
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
 8015a6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015a72:	683b      	ldr	r3, [r7, #0]
 8015a74:	781b      	ldrb	r3, [r3, #0]
 8015a76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	785b      	ldrb	r3, [r3, #1]
 8015a7c:	2b01      	cmp	r3, #1
 8015a7e:	d161      	bne.n	8015b44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015a80:	68bb      	ldr	r3, [r7, #8]
 8015a82:	015a      	lsls	r2, r3, #5
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	4413      	add	r3, r2
 8015a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015a92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015a96:	d11f      	bne.n	8015ad8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8015a98:	68bb      	ldr	r3, [r7, #8]
 8015a9a:	015a      	lsls	r2, r3, #5
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	4413      	add	r3, r2
 8015aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	68ba      	ldr	r2, [r7, #8]
 8015aa8:	0151      	lsls	r1, r2, #5
 8015aaa:	68fa      	ldr	r2, [r7, #12]
 8015aac:	440a      	add	r2, r1
 8015aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015ab2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015ab6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	015a      	lsls	r2, r3, #5
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	4413      	add	r3, r2
 8015ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	68ba      	ldr	r2, [r7, #8]
 8015ac8:	0151      	lsls	r1, r2, #5
 8015aca:	68fa      	ldr	r2, [r7, #12]
 8015acc:	440a      	add	r2, r1
 8015ace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015ad2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015ad6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015ade:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015ae0:	683b      	ldr	r3, [r7, #0]
 8015ae2:	781b      	ldrb	r3, [r3, #0]
 8015ae4:	f003 030f 	and.w	r3, r3, #15
 8015ae8:	2101      	movs	r1, #1
 8015aea:	fa01 f303 	lsl.w	r3, r1, r3
 8015aee:	b29b      	uxth	r3, r3
 8015af0:	43db      	mvns	r3, r3
 8015af2:	68f9      	ldr	r1, [r7, #12]
 8015af4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015af8:	4013      	ands	r3, r2
 8015afa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015b02:	69da      	ldr	r2, [r3, #28]
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	781b      	ldrb	r3, [r3, #0]
 8015b08:	f003 030f 	and.w	r3, r3, #15
 8015b0c:	2101      	movs	r1, #1
 8015b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8015b12:	b29b      	uxth	r3, r3
 8015b14:	43db      	mvns	r3, r3
 8015b16:	68f9      	ldr	r1, [r7, #12]
 8015b18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015b1c:	4013      	ands	r3, r2
 8015b1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	015a      	lsls	r2, r3, #5
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	4413      	add	r3, r2
 8015b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015b2c:	681a      	ldr	r2, [r3, #0]
 8015b2e:	68bb      	ldr	r3, [r7, #8]
 8015b30:	0159      	lsls	r1, r3, #5
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	440b      	add	r3, r1
 8015b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015b3a:	4619      	mov	r1, r3
 8015b3c:	4b35      	ldr	r3, [pc, #212]	@ (8015c14 <USB_DeactivateEndpoint+0x1b0>)
 8015b3e:	4013      	ands	r3, r2
 8015b40:	600b      	str	r3, [r1, #0]
 8015b42:	e060      	b.n	8015c06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	015a      	lsls	r2, r3, #5
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	4413      	add	r3, r2
 8015b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015b56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015b5a:	d11f      	bne.n	8015b9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	015a      	lsls	r2, r3, #5
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	4413      	add	r3, r2
 8015b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	68ba      	ldr	r2, [r7, #8]
 8015b6c:	0151      	lsls	r1, r2, #5
 8015b6e:	68fa      	ldr	r2, [r7, #12]
 8015b70:	440a      	add	r2, r1
 8015b72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015b76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015b7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8015b7c:	68bb      	ldr	r3, [r7, #8]
 8015b7e:	015a      	lsls	r2, r3, #5
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	4413      	add	r3, r2
 8015b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	68ba      	ldr	r2, [r7, #8]
 8015b8c:	0151      	lsls	r1, r2, #5
 8015b8e:	68fa      	ldr	r2, [r7, #12]
 8015b90:	440a      	add	r2, r1
 8015b92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015b96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015b9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015ba2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015ba4:	683b      	ldr	r3, [r7, #0]
 8015ba6:	781b      	ldrb	r3, [r3, #0]
 8015ba8:	f003 030f 	and.w	r3, r3, #15
 8015bac:	2101      	movs	r1, #1
 8015bae:	fa01 f303 	lsl.w	r3, r1, r3
 8015bb2:	041b      	lsls	r3, r3, #16
 8015bb4:	43db      	mvns	r3, r3
 8015bb6:	68f9      	ldr	r1, [r7, #12]
 8015bb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015bbc:	4013      	ands	r3, r2
 8015bbe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015bc6:	69da      	ldr	r2, [r3, #28]
 8015bc8:	683b      	ldr	r3, [r7, #0]
 8015bca:	781b      	ldrb	r3, [r3, #0]
 8015bcc:	f003 030f 	and.w	r3, r3, #15
 8015bd0:	2101      	movs	r1, #1
 8015bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8015bd6:	041b      	lsls	r3, r3, #16
 8015bd8:	43db      	mvns	r3, r3
 8015bda:	68f9      	ldr	r1, [r7, #12]
 8015bdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015be0:	4013      	ands	r3, r2
 8015be2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8015be4:	68bb      	ldr	r3, [r7, #8]
 8015be6:	015a      	lsls	r2, r3, #5
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	4413      	add	r3, r2
 8015bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015bf0:	681a      	ldr	r2, [r3, #0]
 8015bf2:	68bb      	ldr	r3, [r7, #8]
 8015bf4:	0159      	lsls	r1, r3, #5
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	440b      	add	r3, r1
 8015bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015bfe:	4619      	mov	r1, r3
 8015c00:	4b05      	ldr	r3, [pc, #20]	@ (8015c18 <USB_DeactivateEndpoint+0x1b4>)
 8015c02:	4013      	ands	r3, r2
 8015c04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8015c06:	2300      	movs	r3, #0
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	3714      	adds	r7, #20
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c12:	4770      	bx	lr
 8015c14:	ec337800 	.word	0xec337800
 8015c18:	eff37800 	.word	0xeff37800

08015c1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b08a      	sub	sp, #40	@ 0x28
 8015c20:	af02      	add	r7, sp, #8
 8015c22:	60f8      	str	r0, [r7, #12]
 8015c24:	60b9      	str	r1, [r7, #8]
 8015c26:	4613      	mov	r3, r2
 8015c28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8015c2e:	68bb      	ldr	r3, [r7, #8]
 8015c30:	781b      	ldrb	r3, [r3, #0]
 8015c32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015c34:	68bb      	ldr	r3, [r7, #8]
 8015c36:	785b      	ldrb	r3, [r3, #1]
 8015c38:	2b01      	cmp	r3, #1
 8015c3a:	f040 8181 	bne.w	8015f40 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015c3e:	68bb      	ldr	r3, [r7, #8]
 8015c40:	691b      	ldr	r3, [r3, #16]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d132      	bne.n	8015cac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015c46:	69bb      	ldr	r3, [r7, #24]
 8015c48:	015a      	lsls	r2, r3, #5
 8015c4a:	69fb      	ldr	r3, [r7, #28]
 8015c4c:	4413      	add	r3, r2
 8015c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015c52:	691a      	ldr	r2, [r3, #16]
 8015c54:	69bb      	ldr	r3, [r7, #24]
 8015c56:	0159      	lsls	r1, r3, #5
 8015c58:	69fb      	ldr	r3, [r7, #28]
 8015c5a:	440b      	add	r3, r1
 8015c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015c60:	4619      	mov	r1, r3
 8015c62:	4ba5      	ldr	r3, [pc, #660]	@ (8015ef8 <USB_EPStartXfer+0x2dc>)
 8015c64:	4013      	ands	r3, r2
 8015c66:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015c68:	69bb      	ldr	r3, [r7, #24]
 8015c6a:	015a      	lsls	r2, r3, #5
 8015c6c:	69fb      	ldr	r3, [r7, #28]
 8015c6e:	4413      	add	r3, r2
 8015c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015c74:	691b      	ldr	r3, [r3, #16]
 8015c76:	69ba      	ldr	r2, [r7, #24]
 8015c78:	0151      	lsls	r1, r2, #5
 8015c7a:	69fa      	ldr	r2, [r7, #28]
 8015c7c:	440a      	add	r2, r1
 8015c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015c82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015c86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015c88:	69bb      	ldr	r3, [r7, #24]
 8015c8a:	015a      	lsls	r2, r3, #5
 8015c8c:	69fb      	ldr	r3, [r7, #28]
 8015c8e:	4413      	add	r3, r2
 8015c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015c94:	691a      	ldr	r2, [r3, #16]
 8015c96:	69bb      	ldr	r3, [r7, #24]
 8015c98:	0159      	lsls	r1, r3, #5
 8015c9a:	69fb      	ldr	r3, [r7, #28]
 8015c9c:	440b      	add	r3, r1
 8015c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015ca2:	4619      	mov	r1, r3
 8015ca4:	4b95      	ldr	r3, [pc, #596]	@ (8015efc <USB_EPStartXfer+0x2e0>)
 8015ca6:	4013      	ands	r3, r2
 8015ca8:	610b      	str	r3, [r1, #16]
 8015caa:	e092      	b.n	8015dd2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015cac:	69bb      	ldr	r3, [r7, #24]
 8015cae:	015a      	lsls	r2, r3, #5
 8015cb0:	69fb      	ldr	r3, [r7, #28]
 8015cb2:	4413      	add	r3, r2
 8015cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015cb8:	691a      	ldr	r2, [r3, #16]
 8015cba:	69bb      	ldr	r3, [r7, #24]
 8015cbc:	0159      	lsls	r1, r3, #5
 8015cbe:	69fb      	ldr	r3, [r7, #28]
 8015cc0:	440b      	add	r3, r1
 8015cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015cc6:	4619      	mov	r1, r3
 8015cc8:	4b8c      	ldr	r3, [pc, #560]	@ (8015efc <USB_EPStartXfer+0x2e0>)
 8015cca:	4013      	ands	r3, r2
 8015ccc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015cce:	69bb      	ldr	r3, [r7, #24]
 8015cd0:	015a      	lsls	r2, r3, #5
 8015cd2:	69fb      	ldr	r3, [r7, #28]
 8015cd4:	4413      	add	r3, r2
 8015cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015cda:	691a      	ldr	r2, [r3, #16]
 8015cdc:	69bb      	ldr	r3, [r7, #24]
 8015cde:	0159      	lsls	r1, r3, #5
 8015ce0:	69fb      	ldr	r3, [r7, #28]
 8015ce2:	440b      	add	r3, r1
 8015ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015ce8:	4619      	mov	r1, r3
 8015cea:	4b83      	ldr	r3, [pc, #524]	@ (8015ef8 <USB_EPStartXfer+0x2dc>)
 8015cec:	4013      	ands	r3, r2
 8015cee:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8015cf0:	69bb      	ldr	r3, [r7, #24]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d11a      	bne.n	8015d2c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8015cf6:	68bb      	ldr	r3, [r7, #8]
 8015cf8:	691a      	ldr	r2, [r3, #16]
 8015cfa:	68bb      	ldr	r3, [r7, #8]
 8015cfc:	689b      	ldr	r3, [r3, #8]
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d903      	bls.n	8015d0a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8015d02:	68bb      	ldr	r3, [r7, #8]
 8015d04:	689a      	ldr	r2, [r3, #8]
 8015d06:	68bb      	ldr	r3, [r7, #8]
 8015d08:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015d0a:	69bb      	ldr	r3, [r7, #24]
 8015d0c:	015a      	lsls	r2, r3, #5
 8015d0e:	69fb      	ldr	r3, [r7, #28]
 8015d10:	4413      	add	r3, r2
 8015d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d16:	691b      	ldr	r3, [r3, #16]
 8015d18:	69ba      	ldr	r2, [r7, #24]
 8015d1a:	0151      	lsls	r1, r2, #5
 8015d1c:	69fa      	ldr	r2, [r7, #28]
 8015d1e:	440a      	add	r2, r1
 8015d20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015d24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015d28:	6113      	str	r3, [r2, #16]
 8015d2a:	e01b      	b.n	8015d64 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015d2c:	69bb      	ldr	r3, [r7, #24]
 8015d2e:	015a      	lsls	r2, r3, #5
 8015d30:	69fb      	ldr	r3, [r7, #28]
 8015d32:	4413      	add	r3, r2
 8015d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d38:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8015d3a:	68bb      	ldr	r3, [r7, #8]
 8015d3c:	6919      	ldr	r1, [r3, #16]
 8015d3e:	68bb      	ldr	r3, [r7, #8]
 8015d40:	689b      	ldr	r3, [r3, #8]
 8015d42:	440b      	add	r3, r1
 8015d44:	1e59      	subs	r1, r3, #1
 8015d46:	68bb      	ldr	r3, [r7, #8]
 8015d48:	689b      	ldr	r3, [r3, #8]
 8015d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8015d4e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015d50:	4b6b      	ldr	r3, [pc, #428]	@ (8015f00 <USB_EPStartXfer+0x2e4>)
 8015d52:	400b      	ands	r3, r1
 8015d54:	69b9      	ldr	r1, [r7, #24]
 8015d56:	0148      	lsls	r0, r1, #5
 8015d58:	69f9      	ldr	r1, [r7, #28]
 8015d5a:	4401      	add	r1, r0
 8015d5c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8015d60:	4313      	orrs	r3, r2
 8015d62:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015d64:	69bb      	ldr	r3, [r7, #24]
 8015d66:	015a      	lsls	r2, r3, #5
 8015d68:	69fb      	ldr	r3, [r7, #28]
 8015d6a:	4413      	add	r3, r2
 8015d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d70:	691a      	ldr	r2, [r3, #16]
 8015d72:	68bb      	ldr	r3, [r7, #8]
 8015d74:	691b      	ldr	r3, [r3, #16]
 8015d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015d7a:	69b9      	ldr	r1, [r7, #24]
 8015d7c:	0148      	lsls	r0, r1, #5
 8015d7e:	69f9      	ldr	r1, [r7, #28]
 8015d80:	4401      	add	r1, r0
 8015d82:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8015d86:	4313      	orrs	r3, r2
 8015d88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8015d8a:	68bb      	ldr	r3, [r7, #8]
 8015d8c:	791b      	ldrb	r3, [r3, #4]
 8015d8e:	2b01      	cmp	r3, #1
 8015d90:	d11f      	bne.n	8015dd2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8015d92:	69bb      	ldr	r3, [r7, #24]
 8015d94:	015a      	lsls	r2, r3, #5
 8015d96:	69fb      	ldr	r3, [r7, #28]
 8015d98:	4413      	add	r3, r2
 8015d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d9e:	691b      	ldr	r3, [r3, #16]
 8015da0:	69ba      	ldr	r2, [r7, #24]
 8015da2:	0151      	lsls	r1, r2, #5
 8015da4:	69fa      	ldr	r2, [r7, #28]
 8015da6:	440a      	add	r2, r1
 8015da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015dac:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8015db0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8015db2:	69bb      	ldr	r3, [r7, #24]
 8015db4:	015a      	lsls	r2, r3, #5
 8015db6:	69fb      	ldr	r3, [r7, #28]
 8015db8:	4413      	add	r3, r2
 8015dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015dbe:	691b      	ldr	r3, [r3, #16]
 8015dc0:	69ba      	ldr	r2, [r7, #24]
 8015dc2:	0151      	lsls	r1, r2, #5
 8015dc4:	69fa      	ldr	r2, [r7, #28]
 8015dc6:	440a      	add	r2, r1
 8015dc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015dcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015dd0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8015dd2:	79fb      	ldrb	r3, [r7, #7]
 8015dd4:	2b01      	cmp	r3, #1
 8015dd6:	d14b      	bne.n	8015e70 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8015dd8:	68bb      	ldr	r3, [r7, #8]
 8015dda:	69db      	ldr	r3, [r3, #28]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d009      	beq.n	8015df4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8015de0:	69bb      	ldr	r3, [r7, #24]
 8015de2:	015a      	lsls	r2, r3, #5
 8015de4:	69fb      	ldr	r3, [r7, #28]
 8015de6:	4413      	add	r3, r2
 8015de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015dec:	461a      	mov	r2, r3
 8015dee:	68bb      	ldr	r3, [r7, #8]
 8015df0:	69db      	ldr	r3, [r3, #28]
 8015df2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8015df4:	68bb      	ldr	r3, [r7, #8]
 8015df6:	791b      	ldrb	r3, [r3, #4]
 8015df8:	2b01      	cmp	r3, #1
 8015dfa:	d128      	bne.n	8015e4e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015dfc:	69fb      	ldr	r3, [r7, #28]
 8015dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015e02:	689b      	ldr	r3, [r3, #8]
 8015e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d110      	bne.n	8015e2e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015e0c:	69bb      	ldr	r3, [r7, #24]
 8015e0e:	015a      	lsls	r2, r3, #5
 8015e10:	69fb      	ldr	r3, [r7, #28]
 8015e12:	4413      	add	r3, r2
 8015e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	69ba      	ldr	r2, [r7, #24]
 8015e1c:	0151      	lsls	r1, r2, #5
 8015e1e:	69fa      	ldr	r2, [r7, #28]
 8015e20:	440a      	add	r2, r1
 8015e22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015e26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015e2a:	6013      	str	r3, [r2, #0]
 8015e2c:	e00f      	b.n	8015e4e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015e2e:	69bb      	ldr	r3, [r7, #24]
 8015e30:	015a      	lsls	r2, r3, #5
 8015e32:	69fb      	ldr	r3, [r7, #28]
 8015e34:	4413      	add	r3, r2
 8015e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	69ba      	ldr	r2, [r7, #24]
 8015e3e:	0151      	lsls	r1, r2, #5
 8015e40:	69fa      	ldr	r2, [r7, #28]
 8015e42:	440a      	add	r2, r1
 8015e44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015e4c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015e4e:	69bb      	ldr	r3, [r7, #24]
 8015e50:	015a      	lsls	r2, r3, #5
 8015e52:	69fb      	ldr	r3, [r7, #28]
 8015e54:	4413      	add	r3, r2
 8015e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	69ba      	ldr	r2, [r7, #24]
 8015e5e:	0151      	lsls	r1, r2, #5
 8015e60:	69fa      	ldr	r2, [r7, #28]
 8015e62:	440a      	add	r2, r1
 8015e64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015e68:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015e6c:	6013      	str	r3, [r2, #0]
 8015e6e:	e16a      	b.n	8016146 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015e70:	69bb      	ldr	r3, [r7, #24]
 8015e72:	015a      	lsls	r2, r3, #5
 8015e74:	69fb      	ldr	r3, [r7, #28]
 8015e76:	4413      	add	r3, r2
 8015e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	69ba      	ldr	r2, [r7, #24]
 8015e80:	0151      	lsls	r1, r2, #5
 8015e82:	69fa      	ldr	r2, [r7, #28]
 8015e84:	440a      	add	r2, r1
 8015e86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015e8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015e8e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015e90:	68bb      	ldr	r3, [r7, #8]
 8015e92:	791b      	ldrb	r3, [r3, #4]
 8015e94:	2b01      	cmp	r3, #1
 8015e96:	d015      	beq.n	8015ec4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8015e98:	68bb      	ldr	r3, [r7, #8]
 8015e9a:	691b      	ldr	r3, [r3, #16]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	f000 8152 	beq.w	8016146 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015ea2:	69fb      	ldr	r3, [r7, #28]
 8015ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015eaa:	68bb      	ldr	r3, [r7, #8]
 8015eac:	781b      	ldrb	r3, [r3, #0]
 8015eae:	f003 030f 	and.w	r3, r3, #15
 8015eb2:	2101      	movs	r1, #1
 8015eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8015eb8:	69f9      	ldr	r1, [r7, #28]
 8015eba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015ebe:	4313      	orrs	r3, r2
 8015ec0:	634b      	str	r3, [r1, #52]	@ 0x34
 8015ec2:	e140      	b.n	8016146 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015ec4:	69fb      	ldr	r3, [r7, #28]
 8015ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015eca:	689b      	ldr	r3, [r3, #8]
 8015ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d117      	bne.n	8015f04 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015ed4:	69bb      	ldr	r3, [r7, #24]
 8015ed6:	015a      	lsls	r2, r3, #5
 8015ed8:	69fb      	ldr	r3, [r7, #28]
 8015eda:	4413      	add	r3, r2
 8015edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	69ba      	ldr	r2, [r7, #24]
 8015ee4:	0151      	lsls	r1, r2, #5
 8015ee6:	69fa      	ldr	r2, [r7, #28]
 8015ee8:	440a      	add	r2, r1
 8015eea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015eee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015ef2:	6013      	str	r3, [r2, #0]
 8015ef4:	e016      	b.n	8015f24 <USB_EPStartXfer+0x308>
 8015ef6:	bf00      	nop
 8015ef8:	e007ffff 	.word	0xe007ffff
 8015efc:	fff80000 	.word	0xfff80000
 8015f00:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015f04:	69bb      	ldr	r3, [r7, #24]
 8015f06:	015a      	lsls	r2, r3, #5
 8015f08:	69fb      	ldr	r3, [r7, #28]
 8015f0a:	4413      	add	r3, r2
 8015f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	69ba      	ldr	r2, [r7, #24]
 8015f14:	0151      	lsls	r1, r2, #5
 8015f16:	69fa      	ldr	r2, [r7, #28]
 8015f18:	440a      	add	r2, r1
 8015f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015f22:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	68d9      	ldr	r1, [r3, #12]
 8015f28:	68bb      	ldr	r3, [r7, #8]
 8015f2a:	781a      	ldrb	r2, [r3, #0]
 8015f2c:	68bb      	ldr	r3, [r7, #8]
 8015f2e:	691b      	ldr	r3, [r3, #16]
 8015f30:	b298      	uxth	r0, r3
 8015f32:	79fb      	ldrb	r3, [r7, #7]
 8015f34:	9300      	str	r3, [sp, #0]
 8015f36:	4603      	mov	r3, r0
 8015f38:	68f8      	ldr	r0, [r7, #12]
 8015f3a:	f000 f9b9 	bl	80162b0 <USB_WritePacket>
 8015f3e:	e102      	b.n	8016146 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015f40:	69bb      	ldr	r3, [r7, #24]
 8015f42:	015a      	lsls	r2, r3, #5
 8015f44:	69fb      	ldr	r3, [r7, #28]
 8015f46:	4413      	add	r3, r2
 8015f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015f4c:	691a      	ldr	r2, [r3, #16]
 8015f4e:	69bb      	ldr	r3, [r7, #24]
 8015f50:	0159      	lsls	r1, r3, #5
 8015f52:	69fb      	ldr	r3, [r7, #28]
 8015f54:	440b      	add	r3, r1
 8015f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015f5a:	4619      	mov	r1, r3
 8015f5c:	4b7c      	ldr	r3, [pc, #496]	@ (8016150 <USB_EPStartXfer+0x534>)
 8015f5e:	4013      	ands	r3, r2
 8015f60:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8015f62:	69bb      	ldr	r3, [r7, #24]
 8015f64:	015a      	lsls	r2, r3, #5
 8015f66:	69fb      	ldr	r3, [r7, #28]
 8015f68:	4413      	add	r3, r2
 8015f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015f6e:	691a      	ldr	r2, [r3, #16]
 8015f70:	69bb      	ldr	r3, [r7, #24]
 8015f72:	0159      	lsls	r1, r3, #5
 8015f74:	69fb      	ldr	r3, [r7, #28]
 8015f76:	440b      	add	r3, r1
 8015f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015f7c:	4619      	mov	r1, r3
 8015f7e:	4b75      	ldr	r3, [pc, #468]	@ (8016154 <USB_EPStartXfer+0x538>)
 8015f80:	4013      	ands	r3, r2
 8015f82:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8015f84:	69bb      	ldr	r3, [r7, #24]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d12f      	bne.n	8015fea <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8015f8a:	68bb      	ldr	r3, [r7, #8]
 8015f8c:	691b      	ldr	r3, [r3, #16]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d003      	beq.n	8015f9a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8015f92:	68bb      	ldr	r3, [r7, #8]
 8015f94:	689a      	ldr	r2, [r3, #8]
 8015f96:	68bb      	ldr	r3, [r7, #8]
 8015f98:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8015f9a:	68bb      	ldr	r3, [r7, #8]
 8015f9c:	689a      	ldr	r2, [r3, #8]
 8015f9e:	68bb      	ldr	r3, [r7, #8]
 8015fa0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8015fa2:	69bb      	ldr	r3, [r7, #24]
 8015fa4:	015a      	lsls	r2, r3, #5
 8015fa6:	69fb      	ldr	r3, [r7, #28]
 8015fa8:	4413      	add	r3, r2
 8015faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015fae:	691a      	ldr	r2, [r3, #16]
 8015fb0:	68bb      	ldr	r3, [r7, #8]
 8015fb2:	6a1b      	ldr	r3, [r3, #32]
 8015fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015fb8:	69b9      	ldr	r1, [r7, #24]
 8015fba:	0148      	lsls	r0, r1, #5
 8015fbc:	69f9      	ldr	r1, [r7, #28]
 8015fbe:	4401      	add	r1, r0
 8015fc0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015fc4:	4313      	orrs	r3, r2
 8015fc6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015fc8:	69bb      	ldr	r3, [r7, #24]
 8015fca:	015a      	lsls	r2, r3, #5
 8015fcc:	69fb      	ldr	r3, [r7, #28]
 8015fce:	4413      	add	r3, r2
 8015fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015fd4:	691b      	ldr	r3, [r3, #16]
 8015fd6:	69ba      	ldr	r2, [r7, #24]
 8015fd8:	0151      	lsls	r1, r2, #5
 8015fda:	69fa      	ldr	r2, [r7, #28]
 8015fdc:	440a      	add	r2, r1
 8015fde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015fe2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015fe6:	6113      	str	r3, [r2, #16]
 8015fe8:	e05f      	b.n	80160aa <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8015fea:	68bb      	ldr	r3, [r7, #8]
 8015fec:	691b      	ldr	r3, [r3, #16]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d123      	bne.n	801603a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8015ff2:	69bb      	ldr	r3, [r7, #24]
 8015ff4:	015a      	lsls	r2, r3, #5
 8015ff6:	69fb      	ldr	r3, [r7, #28]
 8015ff8:	4413      	add	r3, r2
 8015ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ffe:	691a      	ldr	r2, [r3, #16]
 8016000:	68bb      	ldr	r3, [r7, #8]
 8016002:	689b      	ldr	r3, [r3, #8]
 8016004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016008:	69b9      	ldr	r1, [r7, #24]
 801600a:	0148      	lsls	r0, r1, #5
 801600c:	69f9      	ldr	r1, [r7, #28]
 801600e:	4401      	add	r1, r0
 8016010:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8016014:	4313      	orrs	r3, r2
 8016016:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016018:	69bb      	ldr	r3, [r7, #24]
 801601a:	015a      	lsls	r2, r3, #5
 801601c:	69fb      	ldr	r3, [r7, #28]
 801601e:	4413      	add	r3, r2
 8016020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016024:	691b      	ldr	r3, [r3, #16]
 8016026:	69ba      	ldr	r2, [r7, #24]
 8016028:	0151      	lsls	r1, r2, #5
 801602a:	69fa      	ldr	r2, [r7, #28]
 801602c:	440a      	add	r2, r1
 801602e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016032:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016036:	6113      	str	r3, [r2, #16]
 8016038:	e037      	b.n	80160aa <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801603a:	68bb      	ldr	r3, [r7, #8]
 801603c:	691a      	ldr	r2, [r3, #16]
 801603e:	68bb      	ldr	r3, [r7, #8]
 8016040:	689b      	ldr	r3, [r3, #8]
 8016042:	4413      	add	r3, r2
 8016044:	1e5a      	subs	r2, r3, #1
 8016046:	68bb      	ldr	r3, [r7, #8]
 8016048:	689b      	ldr	r3, [r3, #8]
 801604a:	fbb2 f3f3 	udiv	r3, r2, r3
 801604e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8016050:	68bb      	ldr	r3, [r7, #8]
 8016052:	689b      	ldr	r3, [r3, #8]
 8016054:	8afa      	ldrh	r2, [r7, #22]
 8016056:	fb03 f202 	mul.w	r2, r3, r2
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801605e:	69bb      	ldr	r3, [r7, #24]
 8016060:	015a      	lsls	r2, r3, #5
 8016062:	69fb      	ldr	r3, [r7, #28]
 8016064:	4413      	add	r3, r2
 8016066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801606a:	691a      	ldr	r2, [r3, #16]
 801606c:	8afb      	ldrh	r3, [r7, #22]
 801606e:	04d9      	lsls	r1, r3, #19
 8016070:	4b39      	ldr	r3, [pc, #228]	@ (8016158 <USB_EPStartXfer+0x53c>)
 8016072:	400b      	ands	r3, r1
 8016074:	69b9      	ldr	r1, [r7, #24]
 8016076:	0148      	lsls	r0, r1, #5
 8016078:	69f9      	ldr	r1, [r7, #28]
 801607a:	4401      	add	r1, r0
 801607c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8016080:	4313      	orrs	r3, r2
 8016082:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8016084:	69bb      	ldr	r3, [r7, #24]
 8016086:	015a      	lsls	r2, r3, #5
 8016088:	69fb      	ldr	r3, [r7, #28]
 801608a:	4413      	add	r3, r2
 801608c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016090:	691a      	ldr	r2, [r3, #16]
 8016092:	68bb      	ldr	r3, [r7, #8]
 8016094:	6a1b      	ldr	r3, [r3, #32]
 8016096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801609a:	69b9      	ldr	r1, [r7, #24]
 801609c:	0148      	lsls	r0, r1, #5
 801609e:	69f9      	ldr	r1, [r7, #28]
 80160a0:	4401      	add	r1, r0
 80160a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80160a6:	4313      	orrs	r3, r2
 80160a8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80160aa:	79fb      	ldrb	r3, [r7, #7]
 80160ac:	2b01      	cmp	r3, #1
 80160ae:	d10d      	bne.n	80160cc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80160b0:	68bb      	ldr	r3, [r7, #8]
 80160b2:	68db      	ldr	r3, [r3, #12]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d009      	beq.n	80160cc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	68d9      	ldr	r1, [r3, #12]
 80160bc:	69bb      	ldr	r3, [r7, #24]
 80160be:	015a      	lsls	r2, r3, #5
 80160c0:	69fb      	ldr	r3, [r7, #28]
 80160c2:	4413      	add	r3, r2
 80160c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80160c8:	460a      	mov	r2, r1
 80160ca:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	791b      	ldrb	r3, [r3, #4]
 80160d0:	2b01      	cmp	r3, #1
 80160d2:	d128      	bne.n	8016126 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80160d4:	69fb      	ldr	r3, [r7, #28]
 80160d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80160da:	689b      	ldr	r3, [r3, #8]
 80160dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d110      	bne.n	8016106 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80160e4:	69bb      	ldr	r3, [r7, #24]
 80160e6:	015a      	lsls	r2, r3, #5
 80160e8:	69fb      	ldr	r3, [r7, #28]
 80160ea:	4413      	add	r3, r2
 80160ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	69ba      	ldr	r2, [r7, #24]
 80160f4:	0151      	lsls	r1, r2, #5
 80160f6:	69fa      	ldr	r2, [r7, #28]
 80160f8:	440a      	add	r2, r1
 80160fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80160fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8016102:	6013      	str	r3, [r2, #0]
 8016104:	e00f      	b.n	8016126 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8016106:	69bb      	ldr	r3, [r7, #24]
 8016108:	015a      	lsls	r2, r3, #5
 801610a:	69fb      	ldr	r3, [r7, #28]
 801610c:	4413      	add	r3, r2
 801610e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	69ba      	ldr	r2, [r7, #24]
 8016116:	0151      	lsls	r1, r2, #5
 8016118:	69fa      	ldr	r2, [r7, #28]
 801611a:	440a      	add	r2, r1
 801611c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016124:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8016126:	69bb      	ldr	r3, [r7, #24]
 8016128:	015a      	lsls	r2, r3, #5
 801612a:	69fb      	ldr	r3, [r7, #28]
 801612c:	4413      	add	r3, r2
 801612e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	69ba      	ldr	r2, [r7, #24]
 8016136:	0151      	lsls	r1, r2, #5
 8016138:	69fa      	ldr	r2, [r7, #28]
 801613a:	440a      	add	r2, r1
 801613c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016140:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8016144:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016146:	2300      	movs	r3, #0
}
 8016148:	4618      	mov	r0, r3
 801614a:	3720      	adds	r7, #32
 801614c:	46bd      	mov	sp, r7
 801614e:	bd80      	pop	{r7, pc}
 8016150:	fff80000 	.word	0xfff80000
 8016154:	e007ffff 	.word	0xe007ffff
 8016158:	1ff80000 	.word	0x1ff80000

0801615c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801615c:	b480      	push	{r7}
 801615e:	b087      	sub	sp, #28
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
 8016164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8016166:	2300      	movs	r3, #0
 8016168:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801616a:	2300      	movs	r3, #0
 801616c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	785b      	ldrb	r3, [r3, #1]
 8016176:	2b01      	cmp	r3, #1
 8016178:	d14a      	bne.n	8016210 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801617a:	683b      	ldr	r3, [r7, #0]
 801617c:	781b      	ldrb	r3, [r3, #0]
 801617e:	015a      	lsls	r2, r3, #5
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	4413      	add	r3, r2
 8016184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801618e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016192:	f040 8086 	bne.w	80162a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	781b      	ldrb	r3, [r3, #0]
 801619a:	015a      	lsls	r2, r3, #5
 801619c:	693b      	ldr	r3, [r7, #16]
 801619e:	4413      	add	r3, r2
 80161a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	683a      	ldr	r2, [r7, #0]
 80161a8:	7812      	ldrb	r2, [r2, #0]
 80161aa:	0151      	lsls	r1, r2, #5
 80161ac:	693a      	ldr	r2, [r7, #16]
 80161ae:	440a      	add	r2, r1
 80161b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80161b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80161b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80161ba:	683b      	ldr	r3, [r7, #0]
 80161bc:	781b      	ldrb	r3, [r3, #0]
 80161be:	015a      	lsls	r2, r3, #5
 80161c0:	693b      	ldr	r3, [r7, #16]
 80161c2:	4413      	add	r3, r2
 80161c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	683a      	ldr	r2, [r7, #0]
 80161cc:	7812      	ldrb	r2, [r2, #0]
 80161ce:	0151      	lsls	r1, r2, #5
 80161d0:	693a      	ldr	r2, [r7, #16]
 80161d2:	440a      	add	r2, r1
 80161d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80161d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80161dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	3301      	adds	r3, #1
 80161e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80161ea:	4293      	cmp	r3, r2
 80161ec:	d902      	bls.n	80161f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80161ee:	2301      	movs	r3, #1
 80161f0:	75fb      	strb	r3, [r7, #23]
          break;
 80161f2:	e056      	b.n	80162a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	781b      	ldrb	r3, [r3, #0]
 80161f8:	015a      	lsls	r2, r3, #5
 80161fa:	693b      	ldr	r3, [r7, #16]
 80161fc:	4413      	add	r3, r2
 80161fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016208:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801620c:	d0e7      	beq.n	80161de <USB_EPStopXfer+0x82>
 801620e:	e048      	b.n	80162a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016210:	683b      	ldr	r3, [r7, #0]
 8016212:	781b      	ldrb	r3, [r3, #0]
 8016214:	015a      	lsls	r2, r3, #5
 8016216:	693b      	ldr	r3, [r7, #16]
 8016218:	4413      	add	r3, r2
 801621a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016224:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016228:	d13b      	bne.n	80162a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801622a:	683b      	ldr	r3, [r7, #0]
 801622c:	781b      	ldrb	r3, [r3, #0]
 801622e:	015a      	lsls	r2, r3, #5
 8016230:	693b      	ldr	r3, [r7, #16]
 8016232:	4413      	add	r3, r2
 8016234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	683a      	ldr	r2, [r7, #0]
 801623c:	7812      	ldrb	r2, [r2, #0]
 801623e:	0151      	lsls	r1, r2, #5
 8016240:	693a      	ldr	r2, [r7, #16]
 8016242:	440a      	add	r2, r1
 8016244:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016248:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801624c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801624e:	683b      	ldr	r3, [r7, #0]
 8016250:	781b      	ldrb	r3, [r3, #0]
 8016252:	015a      	lsls	r2, r3, #5
 8016254:	693b      	ldr	r3, [r7, #16]
 8016256:	4413      	add	r3, r2
 8016258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	683a      	ldr	r2, [r7, #0]
 8016260:	7812      	ldrb	r2, [r2, #0]
 8016262:	0151      	lsls	r1, r2, #5
 8016264:	693a      	ldr	r2, [r7, #16]
 8016266:	440a      	add	r2, r1
 8016268:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801626c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016270:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	3301      	adds	r3, #1
 8016276:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801627e:	4293      	cmp	r3, r2
 8016280:	d902      	bls.n	8016288 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8016282:	2301      	movs	r3, #1
 8016284:	75fb      	strb	r3, [r7, #23]
          break;
 8016286:	e00c      	b.n	80162a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8016288:	683b      	ldr	r3, [r7, #0]
 801628a:	781b      	ldrb	r3, [r3, #0]
 801628c:	015a      	lsls	r2, r3, #5
 801628e:	693b      	ldr	r3, [r7, #16]
 8016290:	4413      	add	r3, r2
 8016292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801629c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80162a0:	d0e7      	beq.n	8016272 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80162a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80162a4:	4618      	mov	r0, r3
 80162a6:	371c      	adds	r7, #28
 80162a8:	46bd      	mov	sp, r7
 80162aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ae:	4770      	bx	lr

080162b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80162b0:	b480      	push	{r7}
 80162b2:	b089      	sub	sp, #36	@ 0x24
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	60f8      	str	r0, [r7, #12]
 80162b8:	60b9      	str	r1, [r7, #8]
 80162ba:	4611      	mov	r1, r2
 80162bc:	461a      	mov	r2, r3
 80162be:	460b      	mov	r3, r1
 80162c0:	71fb      	strb	r3, [r7, #7]
 80162c2:	4613      	mov	r3, r2
 80162c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80162ca:	68bb      	ldr	r3, [r7, #8]
 80162cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80162ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d123      	bne.n	801631e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80162d6:	88bb      	ldrh	r3, [r7, #4]
 80162d8:	3303      	adds	r3, #3
 80162da:	089b      	lsrs	r3, r3, #2
 80162dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80162de:	2300      	movs	r3, #0
 80162e0:	61bb      	str	r3, [r7, #24]
 80162e2:	e018      	b.n	8016316 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80162e4:	79fb      	ldrb	r3, [r7, #7]
 80162e6:	031a      	lsls	r2, r3, #12
 80162e8:	697b      	ldr	r3, [r7, #20]
 80162ea:	4413      	add	r3, r2
 80162ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80162f0:	461a      	mov	r2, r3
 80162f2:	69fb      	ldr	r3, [r7, #28]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80162f8:	69fb      	ldr	r3, [r7, #28]
 80162fa:	3301      	adds	r3, #1
 80162fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80162fe:	69fb      	ldr	r3, [r7, #28]
 8016300:	3301      	adds	r3, #1
 8016302:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8016304:	69fb      	ldr	r3, [r7, #28]
 8016306:	3301      	adds	r3, #1
 8016308:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801630a:	69fb      	ldr	r3, [r7, #28]
 801630c:	3301      	adds	r3, #1
 801630e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8016310:	69bb      	ldr	r3, [r7, #24]
 8016312:	3301      	adds	r3, #1
 8016314:	61bb      	str	r3, [r7, #24]
 8016316:	69ba      	ldr	r2, [r7, #24]
 8016318:	693b      	ldr	r3, [r7, #16]
 801631a:	429a      	cmp	r2, r3
 801631c:	d3e2      	bcc.n	80162e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801631e:	2300      	movs	r3, #0
}
 8016320:	4618      	mov	r0, r3
 8016322:	3724      	adds	r7, #36	@ 0x24
 8016324:	46bd      	mov	sp, r7
 8016326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632a:	4770      	bx	lr

0801632c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801632c:	b480      	push	{r7}
 801632e:	b08b      	sub	sp, #44	@ 0x2c
 8016330:	af00      	add	r7, sp, #0
 8016332:	60f8      	str	r0, [r7, #12]
 8016334:	60b9      	str	r1, [r7, #8]
 8016336:	4613      	mov	r3, r2
 8016338:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801633e:	68bb      	ldr	r3, [r7, #8]
 8016340:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8016342:	88fb      	ldrh	r3, [r7, #6]
 8016344:	089b      	lsrs	r3, r3, #2
 8016346:	b29b      	uxth	r3, r3
 8016348:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801634a:	88fb      	ldrh	r3, [r7, #6]
 801634c:	f003 0303 	and.w	r3, r3, #3
 8016350:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8016352:	2300      	movs	r3, #0
 8016354:	623b      	str	r3, [r7, #32]
 8016356:	e014      	b.n	8016382 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8016358:	69bb      	ldr	r3, [r7, #24]
 801635a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801635e:	681a      	ldr	r2, [r3, #0]
 8016360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016362:	601a      	str	r2, [r3, #0]
    pDest++;
 8016364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016366:	3301      	adds	r3, #1
 8016368:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801636c:	3301      	adds	r3, #1
 801636e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016372:	3301      	adds	r3, #1
 8016374:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016378:	3301      	adds	r3, #1
 801637a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801637c:	6a3b      	ldr	r3, [r7, #32]
 801637e:	3301      	adds	r3, #1
 8016380:	623b      	str	r3, [r7, #32]
 8016382:	6a3a      	ldr	r2, [r7, #32]
 8016384:	697b      	ldr	r3, [r7, #20]
 8016386:	429a      	cmp	r2, r3
 8016388:	d3e6      	bcc.n	8016358 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801638a:	8bfb      	ldrh	r3, [r7, #30]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d01e      	beq.n	80163ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8016390:	2300      	movs	r3, #0
 8016392:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8016394:	69bb      	ldr	r3, [r7, #24]
 8016396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801639a:	461a      	mov	r2, r3
 801639c:	f107 0310 	add.w	r3, r7, #16
 80163a0:	6812      	ldr	r2, [r2, #0]
 80163a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80163a4:	693a      	ldr	r2, [r7, #16]
 80163a6:	6a3b      	ldr	r3, [r7, #32]
 80163a8:	b2db      	uxtb	r3, r3
 80163aa:	00db      	lsls	r3, r3, #3
 80163ac:	fa22 f303 	lsr.w	r3, r2, r3
 80163b0:	b2da      	uxtb	r2, r3
 80163b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163b4:	701a      	strb	r2, [r3, #0]
      i++;
 80163b6:	6a3b      	ldr	r3, [r7, #32]
 80163b8:	3301      	adds	r3, #1
 80163ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80163bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163be:	3301      	adds	r3, #1
 80163c0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80163c2:	8bfb      	ldrh	r3, [r7, #30]
 80163c4:	3b01      	subs	r3, #1
 80163c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80163c8:	8bfb      	ldrh	r3, [r7, #30]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d1ea      	bne.n	80163a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80163ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80163d0:	4618      	mov	r0, r3
 80163d2:	372c      	adds	r7, #44	@ 0x2c
 80163d4:	46bd      	mov	sp, r7
 80163d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163da:	4770      	bx	lr

080163dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80163dc:	b480      	push	{r7}
 80163de:	b085      	sub	sp, #20
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
 80163e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	781b      	ldrb	r3, [r3, #0]
 80163ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80163f0:	683b      	ldr	r3, [r7, #0]
 80163f2:	785b      	ldrb	r3, [r3, #1]
 80163f4:	2b01      	cmp	r3, #1
 80163f6:	d12c      	bne.n	8016452 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80163f8:	68bb      	ldr	r3, [r7, #8]
 80163fa:	015a      	lsls	r2, r3, #5
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	4413      	add	r3, r2
 8016400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	2b00      	cmp	r3, #0
 8016408:	db12      	blt.n	8016430 <USB_EPSetStall+0x54>
 801640a:	68bb      	ldr	r3, [r7, #8]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d00f      	beq.n	8016430 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	015a      	lsls	r2, r3, #5
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	4413      	add	r3, r2
 8016418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	68ba      	ldr	r2, [r7, #8]
 8016420:	0151      	lsls	r1, r2, #5
 8016422:	68fa      	ldr	r2, [r7, #12]
 8016424:	440a      	add	r2, r1
 8016426:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801642a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801642e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8016430:	68bb      	ldr	r3, [r7, #8]
 8016432:	015a      	lsls	r2, r3, #5
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	4413      	add	r3, r2
 8016438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	68ba      	ldr	r2, [r7, #8]
 8016440:	0151      	lsls	r1, r2, #5
 8016442:	68fa      	ldr	r2, [r7, #12]
 8016444:	440a      	add	r2, r1
 8016446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801644a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801644e:	6013      	str	r3, [r2, #0]
 8016450:	e02b      	b.n	80164aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016452:	68bb      	ldr	r3, [r7, #8]
 8016454:	015a      	lsls	r2, r3, #5
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	4413      	add	r3, r2
 801645a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	2b00      	cmp	r3, #0
 8016462:	db12      	blt.n	801648a <USB_EPSetStall+0xae>
 8016464:	68bb      	ldr	r3, [r7, #8]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d00f      	beq.n	801648a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801646a:	68bb      	ldr	r3, [r7, #8]
 801646c:	015a      	lsls	r2, r3, #5
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	4413      	add	r3, r2
 8016472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	68ba      	ldr	r2, [r7, #8]
 801647a:	0151      	lsls	r1, r2, #5
 801647c:	68fa      	ldr	r2, [r7, #12]
 801647e:	440a      	add	r2, r1
 8016480:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016484:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8016488:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801648a:	68bb      	ldr	r3, [r7, #8]
 801648c:	015a      	lsls	r2, r3, #5
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	4413      	add	r3, r2
 8016492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	68ba      	ldr	r2, [r7, #8]
 801649a:	0151      	lsls	r1, r2, #5
 801649c:	68fa      	ldr	r2, [r7, #12]
 801649e:	440a      	add	r2, r1
 80164a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80164a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80164a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80164aa:	2300      	movs	r3, #0
}
 80164ac:	4618      	mov	r0, r3
 80164ae:	3714      	adds	r7, #20
 80164b0:	46bd      	mov	sp, r7
 80164b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b6:	4770      	bx	lr

080164b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80164b8:	b480      	push	{r7}
 80164ba:	b085      	sub	sp, #20
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
 80164c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	781b      	ldrb	r3, [r3, #0]
 80164ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	785b      	ldrb	r3, [r3, #1]
 80164d0:	2b01      	cmp	r3, #1
 80164d2:	d128      	bne.n	8016526 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	015a      	lsls	r2, r3, #5
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	4413      	add	r3, r2
 80164dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	68ba      	ldr	r2, [r7, #8]
 80164e4:	0151      	lsls	r1, r2, #5
 80164e6:	68fa      	ldr	r2, [r7, #12]
 80164e8:	440a      	add	r2, r1
 80164ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80164ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80164f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80164f4:	683b      	ldr	r3, [r7, #0]
 80164f6:	791b      	ldrb	r3, [r3, #4]
 80164f8:	2b03      	cmp	r3, #3
 80164fa:	d003      	beq.n	8016504 <USB_EPClearStall+0x4c>
 80164fc:	683b      	ldr	r3, [r7, #0]
 80164fe:	791b      	ldrb	r3, [r3, #4]
 8016500:	2b02      	cmp	r3, #2
 8016502:	d138      	bne.n	8016576 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016504:	68bb      	ldr	r3, [r7, #8]
 8016506:	015a      	lsls	r2, r3, #5
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	4413      	add	r3, r2
 801650c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	68ba      	ldr	r2, [r7, #8]
 8016514:	0151      	lsls	r1, r2, #5
 8016516:	68fa      	ldr	r2, [r7, #12]
 8016518:	440a      	add	r2, r1
 801651a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801651e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016522:	6013      	str	r3, [r2, #0]
 8016524:	e027      	b.n	8016576 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8016526:	68bb      	ldr	r3, [r7, #8]
 8016528:	015a      	lsls	r2, r3, #5
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	4413      	add	r3, r2
 801652e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	68ba      	ldr	r2, [r7, #8]
 8016536:	0151      	lsls	r1, r2, #5
 8016538:	68fa      	ldr	r2, [r7, #12]
 801653a:	440a      	add	r2, r1
 801653c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016540:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016544:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016546:	683b      	ldr	r3, [r7, #0]
 8016548:	791b      	ldrb	r3, [r3, #4]
 801654a:	2b03      	cmp	r3, #3
 801654c:	d003      	beq.n	8016556 <USB_EPClearStall+0x9e>
 801654e:	683b      	ldr	r3, [r7, #0]
 8016550:	791b      	ldrb	r3, [r3, #4]
 8016552:	2b02      	cmp	r3, #2
 8016554:	d10f      	bne.n	8016576 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016556:	68bb      	ldr	r3, [r7, #8]
 8016558:	015a      	lsls	r2, r3, #5
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	4413      	add	r3, r2
 801655e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	68ba      	ldr	r2, [r7, #8]
 8016566:	0151      	lsls	r1, r2, #5
 8016568:	68fa      	ldr	r2, [r7, #12]
 801656a:	440a      	add	r2, r1
 801656c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016574:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8016576:	2300      	movs	r3, #0
}
 8016578:	4618      	mov	r0, r3
 801657a:	3714      	adds	r7, #20
 801657c:	46bd      	mov	sp, r7
 801657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016582:	4770      	bx	lr

08016584 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8016584:	b480      	push	{r7}
 8016586:	b085      	sub	sp, #20
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
 801658c:	460b      	mov	r3, r1
 801658e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	68fa      	ldr	r2, [r7, #12]
 801659e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80165a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80165a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80165ae:	681a      	ldr	r2, [r3, #0]
 80165b0:	78fb      	ldrb	r3, [r7, #3]
 80165b2:	011b      	lsls	r3, r3, #4
 80165b4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80165b8:	68f9      	ldr	r1, [r7, #12]
 80165ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80165be:	4313      	orrs	r3, r2
 80165c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80165c2:	2300      	movs	r3, #0
}
 80165c4:	4618      	mov	r0, r3
 80165c6:	3714      	adds	r7, #20
 80165c8:	46bd      	mov	sp, r7
 80165ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ce:	4770      	bx	lr

080165d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80165d0:	b480      	push	{r7}
 80165d2:	b085      	sub	sp, #20
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	68fa      	ldr	r2, [r7, #12]
 80165e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80165ea:	f023 0303 	bic.w	r3, r3, #3
 80165ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80165f6:	685b      	ldr	r3, [r3, #4]
 80165f8:	68fa      	ldr	r2, [r7, #12]
 80165fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80165fe:	f023 0302 	bic.w	r3, r3, #2
 8016602:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016604:	2300      	movs	r3, #0
}
 8016606:	4618      	mov	r0, r3
 8016608:	3714      	adds	r7, #20
 801660a:	46bd      	mov	sp, r7
 801660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016610:	4770      	bx	lr

08016612 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8016612:	b480      	push	{r7}
 8016614:	b085      	sub	sp, #20
 8016616:	af00      	add	r7, sp, #0
 8016618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	68fa      	ldr	r2, [r7, #12]
 8016628:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801662c:	f023 0303 	bic.w	r3, r3, #3
 8016630:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016638:	685b      	ldr	r3, [r3, #4]
 801663a:	68fa      	ldr	r2, [r7, #12]
 801663c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016640:	f043 0302 	orr.w	r3, r3, #2
 8016644:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016646:	2300      	movs	r3, #0
}
 8016648:	4618      	mov	r0, r3
 801664a:	3714      	adds	r7, #20
 801664c:	46bd      	mov	sp, r7
 801664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016652:	4770      	bx	lr

08016654 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8016654:	b480      	push	{r7}
 8016656:	b085      	sub	sp, #20
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	695b      	ldr	r3, [r3, #20]
 8016660:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	699b      	ldr	r3, [r3, #24]
 8016666:	68fa      	ldr	r2, [r7, #12]
 8016668:	4013      	ands	r3, r2
 801666a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801666c:	68fb      	ldr	r3, [r7, #12]
}
 801666e:	4618      	mov	r0, r3
 8016670:	3714      	adds	r7, #20
 8016672:	46bd      	mov	sp, r7
 8016674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016678:	4770      	bx	lr

0801667a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801667a:	b480      	push	{r7}
 801667c:	b085      	sub	sp, #20
 801667e:	af00      	add	r7, sp, #0
 8016680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801668c:	699b      	ldr	r3, [r3, #24]
 801668e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016696:	69db      	ldr	r3, [r3, #28]
 8016698:	68ba      	ldr	r2, [r7, #8]
 801669a:	4013      	ands	r3, r2
 801669c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801669e:	68bb      	ldr	r3, [r7, #8]
 80166a0:	0c1b      	lsrs	r3, r3, #16
}
 80166a2:	4618      	mov	r0, r3
 80166a4:	3714      	adds	r7, #20
 80166a6:	46bd      	mov	sp, r7
 80166a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ac:	4770      	bx	lr

080166ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80166ae:	b480      	push	{r7}
 80166b0:	b085      	sub	sp, #20
 80166b2:	af00      	add	r7, sp, #0
 80166b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80166c0:	699b      	ldr	r3, [r3, #24]
 80166c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80166ca:	69db      	ldr	r3, [r3, #28]
 80166cc:	68ba      	ldr	r2, [r7, #8]
 80166ce:	4013      	ands	r3, r2
 80166d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80166d2:	68bb      	ldr	r3, [r7, #8]
 80166d4:	b29b      	uxth	r3, r3
}
 80166d6:	4618      	mov	r0, r3
 80166d8:	3714      	adds	r7, #20
 80166da:	46bd      	mov	sp, r7
 80166dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e0:	4770      	bx	lr

080166e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80166e2:	b480      	push	{r7}
 80166e4:	b085      	sub	sp, #20
 80166e6:	af00      	add	r7, sp, #0
 80166e8:	6078      	str	r0, [r7, #4]
 80166ea:	460b      	mov	r3, r1
 80166ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80166f2:	78fb      	ldrb	r3, [r7, #3]
 80166f4:	015a      	lsls	r2, r3, #5
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	4413      	add	r3, r2
 80166fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80166fe:	689b      	ldr	r3, [r3, #8]
 8016700:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016708:	695b      	ldr	r3, [r3, #20]
 801670a:	68ba      	ldr	r2, [r7, #8]
 801670c:	4013      	ands	r3, r2
 801670e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016710:	68bb      	ldr	r3, [r7, #8]
}
 8016712:	4618      	mov	r0, r3
 8016714:	3714      	adds	r7, #20
 8016716:	46bd      	mov	sp, r7
 8016718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801671c:	4770      	bx	lr

0801671e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801671e:	b480      	push	{r7}
 8016720:	b087      	sub	sp, #28
 8016722:	af00      	add	r7, sp, #0
 8016724:	6078      	str	r0, [r7, #4]
 8016726:	460b      	mov	r3, r1
 8016728:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801672e:	697b      	ldr	r3, [r7, #20]
 8016730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016734:	691b      	ldr	r3, [r3, #16]
 8016736:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8016738:	697b      	ldr	r3, [r7, #20]
 801673a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801673e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016740:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8016742:	78fb      	ldrb	r3, [r7, #3]
 8016744:	f003 030f 	and.w	r3, r3, #15
 8016748:	68fa      	ldr	r2, [r7, #12]
 801674a:	fa22 f303 	lsr.w	r3, r2, r3
 801674e:	01db      	lsls	r3, r3, #7
 8016750:	b2db      	uxtb	r3, r3
 8016752:	693a      	ldr	r2, [r7, #16]
 8016754:	4313      	orrs	r3, r2
 8016756:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8016758:	78fb      	ldrb	r3, [r7, #3]
 801675a:	015a      	lsls	r2, r3, #5
 801675c:	697b      	ldr	r3, [r7, #20]
 801675e:	4413      	add	r3, r2
 8016760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016764:	689b      	ldr	r3, [r3, #8]
 8016766:	693a      	ldr	r2, [r7, #16]
 8016768:	4013      	ands	r3, r2
 801676a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801676c:	68bb      	ldr	r3, [r7, #8]
}
 801676e:	4618      	mov	r0, r3
 8016770:	371c      	adds	r7, #28
 8016772:	46bd      	mov	sp, r7
 8016774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016778:	4770      	bx	lr

0801677a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801677a:	b480      	push	{r7}
 801677c:	b083      	sub	sp, #12
 801677e:	af00      	add	r7, sp, #0
 8016780:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	695b      	ldr	r3, [r3, #20]
 8016786:	f003 0301 	and.w	r3, r3, #1
}
 801678a:	4618      	mov	r0, r3
 801678c:	370c      	adds	r7, #12
 801678e:	46bd      	mov	sp, r7
 8016790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016794:	4770      	bx	lr
	...

08016798 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8016798:	b480      	push	{r7}
 801679a:	b085      	sub	sp, #20
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80167aa:	681a      	ldr	r2, [r3, #0]
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80167b2:	4619      	mov	r1, r3
 80167b4:	4b09      	ldr	r3, [pc, #36]	@ (80167dc <USB_ActivateSetup+0x44>)
 80167b6:	4013      	ands	r3, r2
 80167b8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80167c0:	685b      	ldr	r3, [r3, #4]
 80167c2:	68fa      	ldr	r2, [r7, #12]
 80167c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80167c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80167cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80167ce:	2300      	movs	r3, #0
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	3714      	adds	r7, #20
 80167d4:	46bd      	mov	sp, r7
 80167d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167da:	4770      	bx	lr
 80167dc:	fffff800 	.word	0xfffff800

080167e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80167e0:	b480      	push	{r7}
 80167e2:	b087      	sub	sp, #28
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	60f8      	str	r0, [r7, #12]
 80167e8:	460b      	mov	r3, r1
 80167ea:	607a      	str	r2, [r7, #4]
 80167ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	333c      	adds	r3, #60	@ 0x3c
 80167f6:	3304      	adds	r3, #4
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80167fc:	693b      	ldr	r3, [r7, #16]
 80167fe:	4a26      	ldr	r2, [pc, #152]	@ (8016898 <USB_EP0_OutStart+0xb8>)
 8016800:	4293      	cmp	r3, r2
 8016802:	d90a      	bls.n	801681a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016804:	697b      	ldr	r3, [r7, #20]
 8016806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016810:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016814:	d101      	bne.n	801681a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8016816:	2300      	movs	r3, #0
 8016818:	e037      	b.n	801688a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801681a:	697b      	ldr	r3, [r7, #20]
 801681c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016820:	461a      	mov	r2, r3
 8016822:	2300      	movs	r3, #0
 8016824:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016826:	697b      	ldr	r3, [r7, #20]
 8016828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801682c:	691b      	ldr	r3, [r3, #16]
 801682e:	697a      	ldr	r2, [r7, #20]
 8016830:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016834:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016838:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801683a:	697b      	ldr	r3, [r7, #20]
 801683c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016840:	691b      	ldr	r3, [r3, #16]
 8016842:	697a      	ldr	r2, [r7, #20]
 8016844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016848:	f043 0318 	orr.w	r3, r3, #24
 801684c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801684e:	697b      	ldr	r3, [r7, #20]
 8016850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016854:	691b      	ldr	r3, [r3, #16]
 8016856:	697a      	ldr	r2, [r7, #20]
 8016858:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801685c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8016860:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8016862:	7afb      	ldrb	r3, [r7, #11]
 8016864:	2b01      	cmp	r3, #1
 8016866:	d10f      	bne.n	8016888 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8016868:	697b      	ldr	r3, [r7, #20]
 801686a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801686e:	461a      	mov	r2, r3
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	697a      	ldr	r2, [r7, #20]
 801687e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016882:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8016886:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016888:	2300      	movs	r3, #0
}
 801688a:	4618      	mov	r0, r3
 801688c:	371c      	adds	r7, #28
 801688e:	46bd      	mov	sp, r7
 8016890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016894:	4770      	bx	lr
 8016896:	bf00      	nop
 8016898:	4f54300a 	.word	0x4f54300a

0801689c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801689c:	b480      	push	{r7}
 801689e:	b085      	sub	sp, #20
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80168a4:	2300      	movs	r3, #0
 80168a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	3301      	adds	r3, #1
 80168ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80168b4:	d901      	bls.n	80168ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80168b6:	2303      	movs	r3, #3
 80168b8:	e01b      	b.n	80168f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	691b      	ldr	r3, [r3, #16]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	daf2      	bge.n	80168a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80168c2:	2300      	movs	r3, #0
 80168c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	691b      	ldr	r3, [r3, #16]
 80168ca:	f043 0201 	orr.w	r2, r3, #1
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	3301      	adds	r3, #1
 80168d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80168de:	d901      	bls.n	80168e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80168e0:	2303      	movs	r3, #3
 80168e2:	e006      	b.n	80168f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	691b      	ldr	r3, [r3, #16]
 80168e8:	f003 0301 	and.w	r3, r3, #1
 80168ec:	2b01      	cmp	r3, #1
 80168ee:	d0f0      	beq.n	80168d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80168f0:	2300      	movs	r3, #0
}
 80168f2:	4618      	mov	r0, r3
 80168f4:	3714      	adds	r7, #20
 80168f6:	46bd      	mov	sp, r7
 80168f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fc:	4770      	bx	lr
	...

08016900 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b084      	sub	sp, #16
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
 8016908:	460b      	mov	r3, r1
 801690a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801690c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8016910:	f002 fcca 	bl	80192a8 <USBD_static_malloc>
 8016914:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d109      	bne.n	8016930 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	32b0      	adds	r2, #176	@ 0xb0
 8016926:	2100      	movs	r1, #0
 8016928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801692c:	2302      	movs	r3, #2
 801692e:	e0d4      	b.n	8016ada <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8016930:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8016934:	2100      	movs	r1, #0
 8016936:	68f8      	ldr	r0, [r7, #12]
 8016938:	f004 f89f 	bl	801aa7a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	32b0      	adds	r2, #176	@ 0xb0
 8016946:	68f9      	ldr	r1, [r7, #12]
 8016948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	32b0      	adds	r2, #176	@ 0xb0
 8016956:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	7c1b      	ldrb	r3, [r3, #16]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d138      	bne.n	80169da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8016968:	4b5e      	ldr	r3, [pc, #376]	@ (8016ae4 <USBD_CDC_Init+0x1e4>)
 801696a:	7819      	ldrb	r1, [r3, #0]
 801696c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016970:	2202      	movs	r2, #2
 8016972:	6878      	ldr	r0, [r7, #4]
 8016974:	f002 fb75 	bl	8019062 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8016978:	4b5a      	ldr	r3, [pc, #360]	@ (8016ae4 <USBD_CDC_Init+0x1e4>)
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	f003 020f 	and.w	r2, r3, #15
 8016980:	6879      	ldr	r1, [r7, #4]
 8016982:	4613      	mov	r3, r2
 8016984:	009b      	lsls	r3, r3, #2
 8016986:	4413      	add	r3, r2
 8016988:	009b      	lsls	r3, r3, #2
 801698a:	440b      	add	r3, r1
 801698c:	3324      	adds	r3, #36	@ 0x24
 801698e:	2201      	movs	r2, #1
 8016990:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8016992:	4b55      	ldr	r3, [pc, #340]	@ (8016ae8 <USBD_CDC_Init+0x1e8>)
 8016994:	7819      	ldrb	r1, [r3, #0]
 8016996:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801699a:	2202      	movs	r2, #2
 801699c:	6878      	ldr	r0, [r7, #4]
 801699e:	f002 fb60 	bl	8019062 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80169a2:	4b51      	ldr	r3, [pc, #324]	@ (8016ae8 <USBD_CDC_Init+0x1e8>)
 80169a4:	781b      	ldrb	r3, [r3, #0]
 80169a6:	f003 020f 	and.w	r2, r3, #15
 80169aa:	6879      	ldr	r1, [r7, #4]
 80169ac:	4613      	mov	r3, r2
 80169ae:	009b      	lsls	r3, r3, #2
 80169b0:	4413      	add	r3, r2
 80169b2:	009b      	lsls	r3, r3, #2
 80169b4:	440b      	add	r3, r1
 80169b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80169ba:	2201      	movs	r2, #1
 80169bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80169be:	4b4b      	ldr	r3, [pc, #300]	@ (8016aec <USBD_CDC_Init+0x1ec>)
 80169c0:	781b      	ldrb	r3, [r3, #0]
 80169c2:	f003 020f 	and.w	r2, r3, #15
 80169c6:	6879      	ldr	r1, [r7, #4]
 80169c8:	4613      	mov	r3, r2
 80169ca:	009b      	lsls	r3, r3, #2
 80169cc:	4413      	add	r3, r2
 80169ce:	009b      	lsls	r3, r3, #2
 80169d0:	440b      	add	r3, r1
 80169d2:	3326      	adds	r3, #38	@ 0x26
 80169d4:	2210      	movs	r2, #16
 80169d6:	801a      	strh	r2, [r3, #0]
 80169d8:	e035      	b.n	8016a46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80169da:	4b42      	ldr	r3, [pc, #264]	@ (8016ae4 <USBD_CDC_Init+0x1e4>)
 80169dc:	7819      	ldrb	r1, [r3, #0]
 80169de:	2340      	movs	r3, #64	@ 0x40
 80169e0:	2202      	movs	r2, #2
 80169e2:	6878      	ldr	r0, [r7, #4]
 80169e4:	f002 fb3d 	bl	8019062 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80169e8:	4b3e      	ldr	r3, [pc, #248]	@ (8016ae4 <USBD_CDC_Init+0x1e4>)
 80169ea:	781b      	ldrb	r3, [r3, #0]
 80169ec:	f003 020f 	and.w	r2, r3, #15
 80169f0:	6879      	ldr	r1, [r7, #4]
 80169f2:	4613      	mov	r3, r2
 80169f4:	009b      	lsls	r3, r3, #2
 80169f6:	4413      	add	r3, r2
 80169f8:	009b      	lsls	r3, r3, #2
 80169fa:	440b      	add	r3, r1
 80169fc:	3324      	adds	r3, #36	@ 0x24
 80169fe:	2201      	movs	r2, #1
 8016a00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8016a02:	4b39      	ldr	r3, [pc, #228]	@ (8016ae8 <USBD_CDC_Init+0x1e8>)
 8016a04:	7819      	ldrb	r1, [r3, #0]
 8016a06:	2340      	movs	r3, #64	@ 0x40
 8016a08:	2202      	movs	r2, #2
 8016a0a:	6878      	ldr	r0, [r7, #4]
 8016a0c:	f002 fb29 	bl	8019062 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8016a10:	4b35      	ldr	r3, [pc, #212]	@ (8016ae8 <USBD_CDC_Init+0x1e8>)
 8016a12:	781b      	ldrb	r3, [r3, #0]
 8016a14:	f003 020f 	and.w	r2, r3, #15
 8016a18:	6879      	ldr	r1, [r7, #4]
 8016a1a:	4613      	mov	r3, r2
 8016a1c:	009b      	lsls	r3, r3, #2
 8016a1e:	4413      	add	r3, r2
 8016a20:	009b      	lsls	r3, r3, #2
 8016a22:	440b      	add	r3, r1
 8016a24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016a28:	2201      	movs	r2, #1
 8016a2a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8016a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8016aec <USBD_CDC_Init+0x1ec>)
 8016a2e:	781b      	ldrb	r3, [r3, #0]
 8016a30:	f003 020f 	and.w	r2, r3, #15
 8016a34:	6879      	ldr	r1, [r7, #4]
 8016a36:	4613      	mov	r3, r2
 8016a38:	009b      	lsls	r3, r3, #2
 8016a3a:	4413      	add	r3, r2
 8016a3c:	009b      	lsls	r3, r3, #2
 8016a3e:	440b      	add	r3, r1
 8016a40:	3326      	adds	r3, #38	@ 0x26
 8016a42:	2210      	movs	r2, #16
 8016a44:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8016a46:	4b29      	ldr	r3, [pc, #164]	@ (8016aec <USBD_CDC_Init+0x1ec>)
 8016a48:	7819      	ldrb	r1, [r3, #0]
 8016a4a:	2308      	movs	r3, #8
 8016a4c:	2203      	movs	r2, #3
 8016a4e:	6878      	ldr	r0, [r7, #4]
 8016a50:	f002 fb07 	bl	8019062 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8016a54:	4b25      	ldr	r3, [pc, #148]	@ (8016aec <USBD_CDC_Init+0x1ec>)
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	f003 020f 	and.w	r2, r3, #15
 8016a5c:	6879      	ldr	r1, [r7, #4]
 8016a5e:	4613      	mov	r3, r2
 8016a60:	009b      	lsls	r3, r3, #2
 8016a62:	4413      	add	r3, r2
 8016a64:	009b      	lsls	r3, r3, #2
 8016a66:	440b      	add	r3, r1
 8016a68:	3324      	adds	r3, #36	@ 0x24
 8016a6a:	2201      	movs	r2, #1
 8016a6c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	2200      	movs	r2, #0
 8016a72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016a7c:	687a      	ldr	r2, [r7, #4]
 8016a7e:	33b0      	adds	r3, #176	@ 0xb0
 8016a80:	009b      	lsls	r3, r3, #2
 8016a82:	4413      	add	r3, r2
 8016a84:	685b      	ldr	r3, [r3, #4]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	2200      	movs	r2, #0
 8016a96:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d101      	bne.n	8016aa8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8016aa4:	2302      	movs	r3, #2
 8016aa6:	e018      	b.n	8016ada <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	7c1b      	ldrb	r3, [r3, #16]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d10a      	bne.n	8016ac6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8016ae8 <USBD_CDC_Init+0x1e8>)
 8016ab2:	7819      	ldrb	r1, [r3, #0]
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016aba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016abe:	6878      	ldr	r0, [r7, #4]
 8016ac0:	f002 fbbe 	bl	8019240 <USBD_LL_PrepareReceive>
 8016ac4:	e008      	b.n	8016ad8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016ac6:	4b08      	ldr	r3, [pc, #32]	@ (8016ae8 <USBD_CDC_Init+0x1e8>)
 8016ac8:	7819      	ldrb	r1, [r3, #0]
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016ad0:	2340      	movs	r3, #64	@ 0x40
 8016ad2:	6878      	ldr	r0, [r7, #4]
 8016ad4:	f002 fbb4 	bl	8019240 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016ad8:	2300      	movs	r3, #0
}
 8016ada:	4618      	mov	r0, r3
 8016adc:	3710      	adds	r7, #16
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd80      	pop	{r7, pc}
 8016ae2:	bf00      	nop
 8016ae4:	240000c7 	.word	0x240000c7
 8016ae8:	240000c8 	.word	0x240000c8
 8016aec:	240000c9 	.word	0x240000c9

08016af0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b082      	sub	sp, #8
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
 8016af8:	460b      	mov	r3, r1
 8016afa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8016afc:	4b3a      	ldr	r3, [pc, #232]	@ (8016be8 <USBD_CDC_DeInit+0xf8>)
 8016afe:	781b      	ldrb	r3, [r3, #0]
 8016b00:	4619      	mov	r1, r3
 8016b02:	6878      	ldr	r0, [r7, #4]
 8016b04:	f002 fad3 	bl	80190ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8016b08:	4b37      	ldr	r3, [pc, #220]	@ (8016be8 <USBD_CDC_DeInit+0xf8>)
 8016b0a:	781b      	ldrb	r3, [r3, #0]
 8016b0c:	f003 020f 	and.w	r2, r3, #15
 8016b10:	6879      	ldr	r1, [r7, #4]
 8016b12:	4613      	mov	r3, r2
 8016b14:	009b      	lsls	r3, r3, #2
 8016b16:	4413      	add	r3, r2
 8016b18:	009b      	lsls	r3, r3, #2
 8016b1a:	440b      	add	r3, r1
 8016b1c:	3324      	adds	r3, #36	@ 0x24
 8016b1e:	2200      	movs	r2, #0
 8016b20:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8016b22:	4b32      	ldr	r3, [pc, #200]	@ (8016bec <USBD_CDC_DeInit+0xfc>)
 8016b24:	781b      	ldrb	r3, [r3, #0]
 8016b26:	4619      	mov	r1, r3
 8016b28:	6878      	ldr	r0, [r7, #4]
 8016b2a:	f002 fac0 	bl	80190ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8016b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8016bec <USBD_CDC_DeInit+0xfc>)
 8016b30:	781b      	ldrb	r3, [r3, #0]
 8016b32:	f003 020f 	and.w	r2, r3, #15
 8016b36:	6879      	ldr	r1, [r7, #4]
 8016b38:	4613      	mov	r3, r2
 8016b3a:	009b      	lsls	r3, r3, #2
 8016b3c:	4413      	add	r3, r2
 8016b3e:	009b      	lsls	r3, r3, #2
 8016b40:	440b      	add	r3, r1
 8016b42:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016b46:	2200      	movs	r2, #0
 8016b48:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8016b4a:	4b29      	ldr	r3, [pc, #164]	@ (8016bf0 <USBD_CDC_DeInit+0x100>)
 8016b4c:	781b      	ldrb	r3, [r3, #0]
 8016b4e:	4619      	mov	r1, r3
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f002 faac 	bl	80190ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8016b56:	4b26      	ldr	r3, [pc, #152]	@ (8016bf0 <USBD_CDC_DeInit+0x100>)
 8016b58:	781b      	ldrb	r3, [r3, #0]
 8016b5a:	f003 020f 	and.w	r2, r3, #15
 8016b5e:	6879      	ldr	r1, [r7, #4]
 8016b60:	4613      	mov	r3, r2
 8016b62:	009b      	lsls	r3, r3, #2
 8016b64:	4413      	add	r3, r2
 8016b66:	009b      	lsls	r3, r3, #2
 8016b68:	440b      	add	r3, r1
 8016b6a:	3324      	adds	r3, #36	@ 0x24
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8016b70:	4b1f      	ldr	r3, [pc, #124]	@ (8016bf0 <USBD_CDC_DeInit+0x100>)
 8016b72:	781b      	ldrb	r3, [r3, #0]
 8016b74:	f003 020f 	and.w	r2, r3, #15
 8016b78:	6879      	ldr	r1, [r7, #4]
 8016b7a:	4613      	mov	r3, r2
 8016b7c:	009b      	lsls	r3, r3, #2
 8016b7e:	4413      	add	r3, r2
 8016b80:	009b      	lsls	r3, r3, #2
 8016b82:	440b      	add	r3, r1
 8016b84:	3326      	adds	r3, #38	@ 0x26
 8016b86:	2200      	movs	r2, #0
 8016b88:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	32b0      	adds	r2, #176	@ 0xb0
 8016b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d01f      	beq.n	8016bdc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016ba2:	687a      	ldr	r2, [r7, #4]
 8016ba4:	33b0      	adds	r3, #176	@ 0xb0
 8016ba6:	009b      	lsls	r3, r3, #2
 8016ba8:	4413      	add	r3, r2
 8016baa:	685b      	ldr	r3, [r3, #4]
 8016bac:	685b      	ldr	r3, [r3, #4]
 8016bae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	32b0      	adds	r2, #176	@ 0xb0
 8016bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f002 fb80 	bl	80192c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	32b0      	adds	r2, #176	@ 0xb0
 8016bce:	2100      	movs	r1, #0
 8016bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8016bdc:	2300      	movs	r3, #0
}
 8016bde:	4618      	mov	r0, r3
 8016be0:	3708      	adds	r7, #8
 8016be2:	46bd      	mov	sp, r7
 8016be4:	bd80      	pop	{r7, pc}
 8016be6:	bf00      	nop
 8016be8:	240000c7 	.word	0x240000c7
 8016bec:	240000c8 	.word	0x240000c8
 8016bf0:	240000c9 	.word	0x240000c9

08016bf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b086      	sub	sp, #24
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
 8016bfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	32b0      	adds	r2, #176	@ 0xb0
 8016c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8016c12:	2300      	movs	r3, #0
 8016c14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8016c16:	2300      	movs	r3, #0
 8016c18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8016c1a:	693b      	ldr	r3, [r7, #16]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d101      	bne.n	8016c24 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8016c20:	2303      	movs	r3, #3
 8016c22:	e0bf      	b.n	8016da4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	781b      	ldrb	r3, [r3, #0]
 8016c28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d050      	beq.n	8016cd2 <USBD_CDC_Setup+0xde>
 8016c30:	2b20      	cmp	r3, #32
 8016c32:	f040 80af 	bne.w	8016d94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8016c36:	683b      	ldr	r3, [r7, #0]
 8016c38:	88db      	ldrh	r3, [r3, #6]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d03a      	beq.n	8016cb4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8016c3e:	683b      	ldr	r3, [r7, #0]
 8016c40:	781b      	ldrb	r3, [r3, #0]
 8016c42:	b25b      	sxtb	r3, r3
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	da1b      	bge.n	8016c80 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016c4e:	687a      	ldr	r2, [r7, #4]
 8016c50:	33b0      	adds	r3, #176	@ 0xb0
 8016c52:	009b      	lsls	r3, r3, #2
 8016c54:	4413      	add	r3, r2
 8016c56:	685b      	ldr	r3, [r3, #4]
 8016c58:	689b      	ldr	r3, [r3, #8]
 8016c5a:	683a      	ldr	r2, [r7, #0]
 8016c5c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8016c5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016c60:	683a      	ldr	r2, [r7, #0]
 8016c62:	88d2      	ldrh	r2, [r2, #6]
 8016c64:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	88db      	ldrh	r3, [r3, #6]
 8016c6a:	2b07      	cmp	r3, #7
 8016c6c:	bf28      	it	cs
 8016c6e:	2307      	movcs	r3, #7
 8016c70:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8016c72:	693b      	ldr	r3, [r7, #16]
 8016c74:	89fa      	ldrh	r2, [r7, #14]
 8016c76:	4619      	mov	r1, r3
 8016c78:	6878      	ldr	r0, [r7, #4]
 8016c7a:	f001 fdbd 	bl	80187f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8016c7e:	e090      	b.n	8016da2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	785a      	ldrb	r2, [r3, #1]
 8016c84:	693b      	ldr	r3, [r7, #16]
 8016c86:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8016c8a:	683b      	ldr	r3, [r7, #0]
 8016c8c:	88db      	ldrh	r3, [r3, #6]
 8016c8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8016c90:	d803      	bhi.n	8016c9a <USBD_CDC_Setup+0xa6>
 8016c92:	683b      	ldr	r3, [r7, #0]
 8016c94:	88db      	ldrh	r3, [r3, #6]
 8016c96:	b2da      	uxtb	r2, r3
 8016c98:	e000      	b.n	8016c9c <USBD_CDC_Setup+0xa8>
 8016c9a:	2240      	movs	r2, #64	@ 0x40
 8016c9c:	693b      	ldr	r3, [r7, #16]
 8016c9e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8016ca2:	6939      	ldr	r1, [r7, #16]
 8016ca4:	693b      	ldr	r3, [r7, #16]
 8016ca6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8016caa:	461a      	mov	r2, r3
 8016cac:	6878      	ldr	r0, [r7, #4]
 8016cae:	f001 fdcf 	bl	8018850 <USBD_CtlPrepareRx>
      break;
 8016cb2:	e076      	b.n	8016da2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016cba:	687a      	ldr	r2, [r7, #4]
 8016cbc:	33b0      	adds	r3, #176	@ 0xb0
 8016cbe:	009b      	lsls	r3, r3, #2
 8016cc0:	4413      	add	r3, r2
 8016cc2:	685b      	ldr	r3, [r3, #4]
 8016cc4:	689b      	ldr	r3, [r3, #8]
 8016cc6:	683a      	ldr	r2, [r7, #0]
 8016cc8:	7850      	ldrb	r0, [r2, #1]
 8016cca:	2200      	movs	r2, #0
 8016ccc:	6839      	ldr	r1, [r7, #0]
 8016cce:	4798      	blx	r3
      break;
 8016cd0:	e067      	b.n	8016da2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016cd2:	683b      	ldr	r3, [r7, #0]
 8016cd4:	785b      	ldrb	r3, [r3, #1]
 8016cd6:	2b0b      	cmp	r3, #11
 8016cd8:	d851      	bhi.n	8016d7e <USBD_CDC_Setup+0x18a>
 8016cda:	a201      	add	r2, pc, #4	@ (adr r2, 8016ce0 <USBD_CDC_Setup+0xec>)
 8016cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ce0:	08016d11 	.word	0x08016d11
 8016ce4:	08016d8d 	.word	0x08016d8d
 8016ce8:	08016d7f 	.word	0x08016d7f
 8016cec:	08016d7f 	.word	0x08016d7f
 8016cf0:	08016d7f 	.word	0x08016d7f
 8016cf4:	08016d7f 	.word	0x08016d7f
 8016cf8:	08016d7f 	.word	0x08016d7f
 8016cfc:	08016d7f 	.word	0x08016d7f
 8016d00:	08016d7f 	.word	0x08016d7f
 8016d04:	08016d7f 	.word	0x08016d7f
 8016d08:	08016d3b 	.word	0x08016d3b
 8016d0c:	08016d65 	.word	0x08016d65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d16:	b2db      	uxtb	r3, r3
 8016d18:	2b03      	cmp	r3, #3
 8016d1a:	d107      	bne.n	8016d2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016d1c:	f107 030a 	add.w	r3, r7, #10
 8016d20:	2202      	movs	r2, #2
 8016d22:	4619      	mov	r1, r3
 8016d24:	6878      	ldr	r0, [r7, #4]
 8016d26:	f001 fd67 	bl	80187f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016d2a:	e032      	b.n	8016d92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8016d2c:	6839      	ldr	r1, [r7, #0]
 8016d2e:	6878      	ldr	r0, [r7, #4]
 8016d30:	f001 fce5 	bl	80186fe <USBD_CtlError>
            ret = USBD_FAIL;
 8016d34:	2303      	movs	r3, #3
 8016d36:	75fb      	strb	r3, [r7, #23]
          break;
 8016d38:	e02b      	b.n	8016d92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d40:	b2db      	uxtb	r3, r3
 8016d42:	2b03      	cmp	r3, #3
 8016d44:	d107      	bne.n	8016d56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8016d46:	f107 030d 	add.w	r3, r7, #13
 8016d4a:	2201      	movs	r2, #1
 8016d4c:	4619      	mov	r1, r3
 8016d4e:	6878      	ldr	r0, [r7, #4]
 8016d50:	f001 fd52 	bl	80187f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016d54:	e01d      	b.n	8016d92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8016d56:	6839      	ldr	r1, [r7, #0]
 8016d58:	6878      	ldr	r0, [r7, #4]
 8016d5a:	f001 fcd0 	bl	80186fe <USBD_CtlError>
            ret = USBD_FAIL;
 8016d5e:	2303      	movs	r3, #3
 8016d60:	75fb      	strb	r3, [r7, #23]
          break;
 8016d62:	e016      	b.n	8016d92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d6a:	b2db      	uxtb	r3, r3
 8016d6c:	2b03      	cmp	r3, #3
 8016d6e:	d00f      	beq.n	8016d90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8016d70:	6839      	ldr	r1, [r7, #0]
 8016d72:	6878      	ldr	r0, [r7, #4]
 8016d74:	f001 fcc3 	bl	80186fe <USBD_CtlError>
            ret = USBD_FAIL;
 8016d78:	2303      	movs	r3, #3
 8016d7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016d7c:	e008      	b.n	8016d90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8016d7e:	6839      	ldr	r1, [r7, #0]
 8016d80:	6878      	ldr	r0, [r7, #4]
 8016d82:	f001 fcbc 	bl	80186fe <USBD_CtlError>
          ret = USBD_FAIL;
 8016d86:	2303      	movs	r3, #3
 8016d88:	75fb      	strb	r3, [r7, #23]
          break;
 8016d8a:	e002      	b.n	8016d92 <USBD_CDC_Setup+0x19e>
          break;
 8016d8c:	bf00      	nop
 8016d8e:	e008      	b.n	8016da2 <USBD_CDC_Setup+0x1ae>
          break;
 8016d90:	bf00      	nop
      }
      break;
 8016d92:	e006      	b.n	8016da2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8016d94:	6839      	ldr	r1, [r7, #0]
 8016d96:	6878      	ldr	r0, [r7, #4]
 8016d98:	f001 fcb1 	bl	80186fe <USBD_CtlError>
      ret = USBD_FAIL;
 8016d9c:	2303      	movs	r3, #3
 8016d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8016da0:	bf00      	nop
  }

  return (uint8_t)ret;
 8016da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8016da4:	4618      	mov	r0, r3
 8016da6:	3718      	adds	r7, #24
 8016da8:	46bd      	mov	sp, r7
 8016daa:	bd80      	pop	{r7, pc}

08016dac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b084      	sub	sp, #16
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	6078      	str	r0, [r7, #4]
 8016db4:	460b      	mov	r3, r1
 8016db6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016dbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	32b0      	adds	r2, #176	@ 0xb0
 8016dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d101      	bne.n	8016dd6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8016dd2:	2303      	movs	r3, #3
 8016dd4:	e065      	b.n	8016ea2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	32b0      	adds	r2, #176	@ 0xb0
 8016de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016de4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8016de6:	78fb      	ldrb	r3, [r7, #3]
 8016de8:	f003 020f 	and.w	r2, r3, #15
 8016dec:	6879      	ldr	r1, [r7, #4]
 8016dee:	4613      	mov	r3, r2
 8016df0:	009b      	lsls	r3, r3, #2
 8016df2:	4413      	add	r3, r2
 8016df4:	009b      	lsls	r3, r3, #2
 8016df6:	440b      	add	r3, r1
 8016df8:	3318      	adds	r3, #24
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d02f      	beq.n	8016e60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8016e00:	78fb      	ldrb	r3, [r7, #3]
 8016e02:	f003 020f 	and.w	r2, r3, #15
 8016e06:	6879      	ldr	r1, [r7, #4]
 8016e08:	4613      	mov	r3, r2
 8016e0a:	009b      	lsls	r3, r3, #2
 8016e0c:	4413      	add	r3, r2
 8016e0e:	009b      	lsls	r3, r3, #2
 8016e10:	440b      	add	r3, r1
 8016e12:	3318      	adds	r3, #24
 8016e14:	681a      	ldr	r2, [r3, #0]
 8016e16:	78fb      	ldrb	r3, [r7, #3]
 8016e18:	f003 010f 	and.w	r1, r3, #15
 8016e1c:	68f8      	ldr	r0, [r7, #12]
 8016e1e:	460b      	mov	r3, r1
 8016e20:	00db      	lsls	r3, r3, #3
 8016e22:	440b      	add	r3, r1
 8016e24:	009b      	lsls	r3, r3, #2
 8016e26:	4403      	add	r3, r0
 8016e28:	331c      	adds	r3, #28
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8016e30:	fb01 f303 	mul.w	r3, r1, r3
 8016e34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d112      	bne.n	8016e60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8016e3a:	78fb      	ldrb	r3, [r7, #3]
 8016e3c:	f003 020f 	and.w	r2, r3, #15
 8016e40:	6879      	ldr	r1, [r7, #4]
 8016e42:	4613      	mov	r3, r2
 8016e44:	009b      	lsls	r3, r3, #2
 8016e46:	4413      	add	r3, r2
 8016e48:	009b      	lsls	r3, r3, #2
 8016e4a:	440b      	add	r3, r1
 8016e4c:	3318      	adds	r3, #24
 8016e4e:	2200      	movs	r2, #0
 8016e50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016e52:	78f9      	ldrb	r1, [r7, #3]
 8016e54:	2300      	movs	r3, #0
 8016e56:	2200      	movs	r2, #0
 8016e58:	6878      	ldr	r0, [r7, #4]
 8016e5a:	f002 f9d0 	bl	80191fe <USBD_LL_Transmit>
 8016e5e:	e01f      	b.n	8016ea0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	2200      	movs	r2, #0
 8016e64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016e6e:	687a      	ldr	r2, [r7, #4]
 8016e70:	33b0      	adds	r3, #176	@ 0xb0
 8016e72:	009b      	lsls	r3, r3, #2
 8016e74:	4413      	add	r3, r2
 8016e76:	685b      	ldr	r3, [r3, #4]
 8016e78:	691b      	ldr	r3, [r3, #16]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d010      	beq.n	8016ea0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016e84:	687a      	ldr	r2, [r7, #4]
 8016e86:	33b0      	adds	r3, #176	@ 0xb0
 8016e88:	009b      	lsls	r3, r3, #2
 8016e8a:	4413      	add	r3, r2
 8016e8c:	685b      	ldr	r3, [r3, #4]
 8016e8e:	691b      	ldr	r3, [r3, #16]
 8016e90:	68ba      	ldr	r2, [r7, #8]
 8016e92:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8016e96:	68ba      	ldr	r2, [r7, #8]
 8016e98:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8016e9c:	78fa      	ldrb	r2, [r7, #3]
 8016e9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016ea0:	2300      	movs	r3, #0
}
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	3710      	adds	r7, #16
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	bd80      	pop	{r7, pc}

08016eaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016eaa:	b580      	push	{r7, lr}
 8016eac:	b084      	sub	sp, #16
 8016eae:	af00      	add	r7, sp, #0
 8016eb0:	6078      	str	r0, [r7, #4]
 8016eb2:	460b      	mov	r3, r1
 8016eb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	32b0      	adds	r2, #176	@ 0xb0
 8016ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ec4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	32b0      	adds	r2, #176	@ 0xb0
 8016ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d101      	bne.n	8016edc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8016ed8:	2303      	movs	r3, #3
 8016eda:	e01a      	b.n	8016f12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016edc:	78fb      	ldrb	r3, [r7, #3]
 8016ede:	4619      	mov	r1, r3
 8016ee0:	6878      	ldr	r0, [r7, #4]
 8016ee2:	f002 f9ce 	bl	8019282 <USBD_LL_GetRxDataSize>
 8016ee6:	4602      	mov	r2, r0
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016ef4:	687a      	ldr	r2, [r7, #4]
 8016ef6:	33b0      	adds	r3, #176	@ 0xb0
 8016ef8:	009b      	lsls	r3, r3, #2
 8016efa:	4413      	add	r3, r2
 8016efc:	685b      	ldr	r3, [r3, #4]
 8016efe:	68db      	ldr	r3, [r3, #12]
 8016f00:	68fa      	ldr	r2, [r7, #12]
 8016f02:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8016f06:	68fa      	ldr	r2, [r7, #12]
 8016f08:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8016f0c:	4611      	mov	r1, r2
 8016f0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016f10:	2300      	movs	r3, #0
}
 8016f12:	4618      	mov	r0, r3
 8016f14:	3710      	adds	r7, #16
 8016f16:	46bd      	mov	sp, r7
 8016f18:	bd80      	pop	{r7, pc}

08016f1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016f1a:	b580      	push	{r7, lr}
 8016f1c:	b084      	sub	sp, #16
 8016f1e:	af00      	add	r7, sp, #0
 8016f20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	32b0      	adds	r2, #176	@ 0xb0
 8016f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d101      	bne.n	8016f3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016f38:	2303      	movs	r3, #3
 8016f3a:	e024      	b.n	8016f86 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016f42:	687a      	ldr	r2, [r7, #4]
 8016f44:	33b0      	adds	r3, #176	@ 0xb0
 8016f46:	009b      	lsls	r3, r3, #2
 8016f48:	4413      	add	r3, r2
 8016f4a:	685b      	ldr	r3, [r3, #4]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d019      	beq.n	8016f84 <USBD_CDC_EP0_RxReady+0x6a>
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8016f56:	2bff      	cmp	r3, #255	@ 0xff
 8016f58:	d014      	beq.n	8016f84 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016f60:	687a      	ldr	r2, [r7, #4]
 8016f62:	33b0      	adds	r3, #176	@ 0xb0
 8016f64:	009b      	lsls	r3, r3, #2
 8016f66:	4413      	add	r3, r2
 8016f68:	685b      	ldr	r3, [r3, #4]
 8016f6a:	689b      	ldr	r3, [r3, #8]
 8016f6c:	68fa      	ldr	r2, [r7, #12]
 8016f6e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8016f72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8016f74:	68fa      	ldr	r2, [r7, #12]
 8016f76:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8016f7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	22ff      	movs	r2, #255	@ 0xff
 8016f80:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8016f84:	2300      	movs	r3, #0
}
 8016f86:	4618      	mov	r0, r3
 8016f88:	3710      	adds	r7, #16
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}
	...

08016f90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b086      	sub	sp, #24
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016f98:	2182      	movs	r1, #130	@ 0x82
 8016f9a:	4818      	ldr	r0, [pc, #96]	@ (8016ffc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016f9c:	f000 fd4f 	bl	8017a3e <USBD_GetEpDesc>
 8016fa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016fa2:	2101      	movs	r1, #1
 8016fa4:	4815      	ldr	r0, [pc, #84]	@ (8016ffc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016fa6:	f000 fd4a 	bl	8017a3e <USBD_GetEpDesc>
 8016faa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016fac:	2181      	movs	r1, #129	@ 0x81
 8016fae:	4813      	ldr	r0, [pc, #76]	@ (8016ffc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016fb0:	f000 fd45 	bl	8017a3e <USBD_GetEpDesc>
 8016fb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016fb6:	697b      	ldr	r3, [r7, #20]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d002      	beq.n	8016fc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016fbc:	697b      	ldr	r3, [r7, #20]
 8016fbe:	2210      	movs	r2, #16
 8016fc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016fc2:	693b      	ldr	r3, [r7, #16]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d006      	beq.n	8016fd6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016fc8:	693b      	ldr	r3, [r7, #16]
 8016fca:	2200      	movs	r2, #0
 8016fcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016fd0:	711a      	strb	r2, [r3, #4]
 8016fd2:	2200      	movs	r2, #0
 8016fd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d006      	beq.n	8016fea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	2200      	movs	r2, #0
 8016fe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016fe4:	711a      	strb	r2, [r3, #4]
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	2243      	movs	r2, #67	@ 0x43
 8016fee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016ff0:	4b02      	ldr	r3, [pc, #8]	@ (8016ffc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	3718      	adds	r7, #24
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	bd80      	pop	{r7, pc}
 8016ffa:	bf00      	nop
 8016ffc:	24000084 	.word	0x24000084

08017000 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b086      	sub	sp, #24
 8017004:	af00      	add	r7, sp, #0
 8017006:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8017008:	2182      	movs	r1, #130	@ 0x82
 801700a:	4818      	ldr	r0, [pc, #96]	@ (801706c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801700c:	f000 fd17 	bl	8017a3e <USBD_GetEpDesc>
 8017010:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8017012:	2101      	movs	r1, #1
 8017014:	4815      	ldr	r0, [pc, #84]	@ (801706c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8017016:	f000 fd12 	bl	8017a3e <USBD_GetEpDesc>
 801701a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801701c:	2181      	movs	r1, #129	@ 0x81
 801701e:	4813      	ldr	r0, [pc, #76]	@ (801706c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8017020:	f000 fd0d 	bl	8017a3e <USBD_GetEpDesc>
 8017024:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8017026:	697b      	ldr	r3, [r7, #20]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d002      	beq.n	8017032 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801702c:	697b      	ldr	r3, [r7, #20]
 801702e:	2210      	movs	r2, #16
 8017030:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8017032:	693b      	ldr	r3, [r7, #16]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d006      	beq.n	8017046 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8017038:	693b      	ldr	r3, [r7, #16]
 801703a:	2200      	movs	r2, #0
 801703c:	711a      	strb	r2, [r3, #4]
 801703e:	2200      	movs	r2, #0
 8017040:	f042 0202 	orr.w	r2, r2, #2
 8017044:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	2b00      	cmp	r3, #0
 801704a:	d006      	beq.n	801705a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	2200      	movs	r2, #0
 8017050:	711a      	strb	r2, [r3, #4]
 8017052:	2200      	movs	r2, #0
 8017054:	f042 0202 	orr.w	r2, r2, #2
 8017058:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	2243      	movs	r2, #67	@ 0x43
 801705e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8017060:	4b02      	ldr	r3, [pc, #8]	@ (801706c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8017062:	4618      	mov	r0, r3
 8017064:	3718      	adds	r7, #24
 8017066:	46bd      	mov	sp, r7
 8017068:	bd80      	pop	{r7, pc}
 801706a:	bf00      	nop
 801706c:	24000084 	.word	0x24000084

08017070 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b086      	sub	sp, #24
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8017078:	2182      	movs	r1, #130	@ 0x82
 801707a:	4818      	ldr	r0, [pc, #96]	@ (80170dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801707c:	f000 fcdf 	bl	8017a3e <USBD_GetEpDesc>
 8017080:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8017082:	2101      	movs	r1, #1
 8017084:	4815      	ldr	r0, [pc, #84]	@ (80170dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8017086:	f000 fcda 	bl	8017a3e <USBD_GetEpDesc>
 801708a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801708c:	2181      	movs	r1, #129	@ 0x81
 801708e:	4813      	ldr	r0, [pc, #76]	@ (80170dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8017090:	f000 fcd5 	bl	8017a3e <USBD_GetEpDesc>
 8017094:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8017096:	697b      	ldr	r3, [r7, #20]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d002      	beq.n	80170a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801709c:	697b      	ldr	r3, [r7, #20]
 801709e:	2210      	movs	r2, #16
 80170a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80170a2:	693b      	ldr	r3, [r7, #16]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d006      	beq.n	80170b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80170a8:	693b      	ldr	r3, [r7, #16]
 80170aa:	2200      	movs	r2, #0
 80170ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80170b0:	711a      	strb	r2, [r3, #4]
 80170b2:	2200      	movs	r2, #0
 80170b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d006      	beq.n	80170ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	2200      	movs	r2, #0
 80170c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80170c4:	711a      	strb	r2, [r3, #4]
 80170c6:	2200      	movs	r2, #0
 80170c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	2243      	movs	r2, #67	@ 0x43
 80170ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80170d0:	4b02      	ldr	r3, [pc, #8]	@ (80170dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80170d2:	4618      	mov	r0, r3
 80170d4:	3718      	adds	r7, #24
 80170d6:	46bd      	mov	sp, r7
 80170d8:	bd80      	pop	{r7, pc}
 80170da:	bf00      	nop
 80170dc:	24000084 	.word	0x24000084

080170e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80170e0:	b480      	push	{r7}
 80170e2:	b083      	sub	sp, #12
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	220a      	movs	r2, #10
 80170ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80170ee:	4b03      	ldr	r3, [pc, #12]	@ (80170fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80170f0:	4618      	mov	r0, r3
 80170f2:	370c      	adds	r7, #12
 80170f4:	46bd      	mov	sp, r7
 80170f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fa:	4770      	bx	lr
 80170fc:	24000040 	.word	0x24000040

08017100 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8017100:	b480      	push	{r7}
 8017102:	b083      	sub	sp, #12
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
 8017108:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801710a:	683b      	ldr	r3, [r7, #0]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d101      	bne.n	8017114 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8017110:	2303      	movs	r3, #3
 8017112:	e009      	b.n	8017128 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801711a:	687a      	ldr	r2, [r7, #4]
 801711c:	33b0      	adds	r3, #176	@ 0xb0
 801711e:	009b      	lsls	r3, r3, #2
 8017120:	4413      	add	r3, r2
 8017122:	683a      	ldr	r2, [r7, #0]
 8017124:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8017126:	2300      	movs	r3, #0
}
 8017128:	4618      	mov	r0, r3
 801712a:	370c      	adds	r7, #12
 801712c:	46bd      	mov	sp, r7
 801712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017132:	4770      	bx	lr

08017134 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8017134:	b480      	push	{r7}
 8017136:	b087      	sub	sp, #28
 8017138:	af00      	add	r7, sp, #0
 801713a:	60f8      	str	r0, [r7, #12]
 801713c:	60b9      	str	r1, [r7, #8]
 801713e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	32b0      	adds	r2, #176	@ 0xb0
 801714a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801714e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8017150:	697b      	ldr	r3, [r7, #20]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d101      	bne.n	801715a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8017156:	2303      	movs	r3, #3
 8017158:	e008      	b.n	801716c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801715a:	697b      	ldr	r3, [r7, #20]
 801715c:	68ba      	ldr	r2, [r7, #8]
 801715e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8017162:	697b      	ldr	r3, [r7, #20]
 8017164:	687a      	ldr	r2, [r7, #4]
 8017166:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801716a:	2300      	movs	r3, #0
}
 801716c:	4618      	mov	r0, r3
 801716e:	371c      	adds	r7, #28
 8017170:	46bd      	mov	sp, r7
 8017172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017176:	4770      	bx	lr

08017178 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8017178:	b480      	push	{r7}
 801717a:	b085      	sub	sp, #20
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
 8017180:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	32b0      	adds	r2, #176	@ 0xb0
 801718c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017190:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d101      	bne.n	801719c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8017198:	2303      	movs	r3, #3
 801719a:	e004      	b.n	80171a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	683a      	ldr	r2, [r7, #0]
 80171a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80171a4:	2300      	movs	r3, #0
}
 80171a6:	4618      	mov	r0, r3
 80171a8:	3714      	adds	r7, #20
 80171aa:	46bd      	mov	sp, r7
 80171ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b0:	4770      	bx	lr
	...

080171b4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b084      	sub	sp, #16
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	32b0      	adds	r2, #176	@ 0xb0
 80171c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171ca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80171cc:	2301      	movs	r3, #1
 80171ce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80171d0:	68bb      	ldr	r3, [r7, #8]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d101      	bne.n	80171da <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80171d6:	2303      	movs	r3, #3
 80171d8:	e025      	b.n	8017226 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80171da:	68bb      	ldr	r3, [r7, #8]
 80171dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d11f      	bne.n	8017224 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80171e4:	68bb      	ldr	r3, [r7, #8]
 80171e6:	2201      	movs	r2, #1
 80171e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80171ec:	4b10      	ldr	r3, [pc, #64]	@ (8017230 <USBD_CDC_TransmitPacket+0x7c>)
 80171ee:	781b      	ldrb	r3, [r3, #0]
 80171f0:	f003 020f 	and.w	r2, r3, #15
 80171f4:	68bb      	ldr	r3, [r7, #8]
 80171f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80171fa:	6878      	ldr	r0, [r7, #4]
 80171fc:	4613      	mov	r3, r2
 80171fe:	009b      	lsls	r3, r3, #2
 8017200:	4413      	add	r3, r2
 8017202:	009b      	lsls	r3, r3, #2
 8017204:	4403      	add	r3, r0
 8017206:	3318      	adds	r3, #24
 8017208:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801720a:	4b09      	ldr	r3, [pc, #36]	@ (8017230 <USBD_CDC_TransmitPacket+0x7c>)
 801720c:	7819      	ldrb	r1, [r3, #0]
 801720e:	68bb      	ldr	r3, [r7, #8]
 8017210:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8017214:	68bb      	ldr	r3, [r7, #8]
 8017216:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801721a:	6878      	ldr	r0, [r7, #4]
 801721c:	f001 ffef 	bl	80191fe <USBD_LL_Transmit>

    ret = USBD_OK;
 8017220:	2300      	movs	r3, #0
 8017222:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8017224:	7bfb      	ldrb	r3, [r7, #15]
}
 8017226:	4618      	mov	r0, r3
 8017228:	3710      	adds	r7, #16
 801722a:	46bd      	mov	sp, r7
 801722c:	bd80      	pop	{r7, pc}
 801722e:	bf00      	nop
 8017230:	240000c7 	.word	0x240000c7

08017234 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8017234:	b580      	push	{r7, lr}
 8017236:	b084      	sub	sp, #16
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	32b0      	adds	r2, #176	@ 0xb0
 8017246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801724a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	32b0      	adds	r2, #176	@ 0xb0
 8017256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801725a:	2b00      	cmp	r3, #0
 801725c:	d101      	bne.n	8017262 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801725e:	2303      	movs	r3, #3
 8017260:	e018      	b.n	8017294 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	7c1b      	ldrb	r3, [r3, #16]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d10a      	bne.n	8017280 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801726a:	4b0c      	ldr	r3, [pc, #48]	@ (801729c <USBD_CDC_ReceivePacket+0x68>)
 801726c:	7819      	ldrb	r1, [r3, #0]
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017274:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017278:	6878      	ldr	r0, [r7, #4]
 801727a:	f001 ffe1 	bl	8019240 <USBD_LL_PrepareReceive>
 801727e:	e008      	b.n	8017292 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017280:	4b06      	ldr	r3, [pc, #24]	@ (801729c <USBD_CDC_ReceivePacket+0x68>)
 8017282:	7819      	ldrb	r1, [r3, #0]
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801728a:	2340      	movs	r3, #64	@ 0x40
 801728c:	6878      	ldr	r0, [r7, #4]
 801728e:	f001 ffd7 	bl	8019240 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8017292:	2300      	movs	r3, #0
}
 8017294:	4618      	mov	r0, r3
 8017296:	3710      	adds	r7, #16
 8017298:	46bd      	mov	sp, r7
 801729a:	bd80      	pop	{r7, pc}
 801729c:	240000c8 	.word	0x240000c8

080172a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b086      	sub	sp, #24
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	60f8      	str	r0, [r7, #12]
 80172a8:	60b9      	str	r1, [r7, #8]
 80172aa:	4613      	mov	r3, r2
 80172ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d101      	bne.n	80172b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80172b4:	2303      	movs	r3, #3
 80172b6:	e01f      	b.n	80172f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	2200      	movs	r2, #0
 80172bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	2200      	movs	r2, #0
 80172c4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	2200      	movs	r2, #0
 80172cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80172d0:	68bb      	ldr	r3, [r7, #8]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d003      	beq.n	80172de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	68ba      	ldr	r2, [r7, #8]
 80172da:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	2201      	movs	r2, #1
 80172e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	79fa      	ldrb	r2, [r7, #7]
 80172ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80172ec:	68f8      	ldr	r0, [r7, #12]
 80172ee:	f001 fe4b 	bl	8018f88 <USBD_LL_Init>
 80172f2:	4603      	mov	r3, r0
 80172f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80172f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80172f8:	4618      	mov	r0, r3
 80172fa:	3718      	adds	r7, #24
 80172fc:	46bd      	mov	sp, r7
 80172fe:	bd80      	pop	{r7, pc}

08017300 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017300:	b580      	push	{r7, lr}
 8017302:	b084      	sub	sp, #16
 8017304:	af00      	add	r7, sp, #0
 8017306:	6078      	str	r0, [r7, #4]
 8017308:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801730a:	2300      	movs	r3, #0
 801730c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801730e:	683b      	ldr	r3, [r7, #0]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d101      	bne.n	8017318 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017314:	2303      	movs	r3, #3
 8017316:	e025      	b.n	8017364 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	683a      	ldr	r2, [r7, #0]
 801731c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	32ae      	adds	r2, #174	@ 0xae
 801732a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801732e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017330:	2b00      	cmp	r3, #0
 8017332:	d00f      	beq.n	8017354 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	32ae      	adds	r2, #174	@ 0xae
 801733e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017344:	f107 020e 	add.w	r2, r7, #14
 8017348:	4610      	mov	r0, r2
 801734a:	4798      	blx	r3
 801734c:	4602      	mov	r2, r0
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801735a:	1c5a      	adds	r2, r3, #1
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8017362:	2300      	movs	r3, #0
}
 8017364:	4618      	mov	r0, r3
 8017366:	3710      	adds	r7, #16
 8017368:	46bd      	mov	sp, r7
 801736a:	bd80      	pop	{r7, pc}

0801736c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b082      	sub	sp, #8
 8017370:	af00      	add	r7, sp, #0
 8017372:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f001 fe59 	bl	801902c <USBD_LL_Start>
 801737a:	4603      	mov	r3, r0
}
 801737c:	4618      	mov	r0, r3
 801737e:	3708      	adds	r7, #8
 8017380:	46bd      	mov	sp, r7
 8017382:	bd80      	pop	{r7, pc}

08017384 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8017384:	b480      	push	{r7}
 8017386:	b083      	sub	sp, #12
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801738c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801738e:	4618      	mov	r0, r3
 8017390:	370c      	adds	r7, #12
 8017392:	46bd      	mov	sp, r7
 8017394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017398:	4770      	bx	lr

0801739a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801739a:	b580      	push	{r7, lr}
 801739c:	b084      	sub	sp, #16
 801739e:	af00      	add	r7, sp, #0
 80173a0:	6078      	str	r0, [r7, #4]
 80173a2:	460b      	mov	r3, r1
 80173a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80173a6:	2300      	movs	r3, #0
 80173a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d009      	beq.n	80173c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	78fa      	ldrb	r2, [r7, #3]
 80173be:	4611      	mov	r1, r2
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	4798      	blx	r3
 80173c4:	4603      	mov	r3, r0
 80173c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80173c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80173ca:	4618      	mov	r0, r3
 80173cc:	3710      	adds	r7, #16
 80173ce:	46bd      	mov	sp, r7
 80173d0:	bd80      	pop	{r7, pc}

080173d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80173d2:	b580      	push	{r7, lr}
 80173d4:	b084      	sub	sp, #16
 80173d6:	af00      	add	r7, sp, #0
 80173d8:	6078      	str	r0, [r7, #4]
 80173da:	460b      	mov	r3, r1
 80173dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80173de:	2300      	movs	r3, #0
 80173e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80173e8:	685b      	ldr	r3, [r3, #4]
 80173ea:	78fa      	ldrb	r2, [r7, #3]
 80173ec:	4611      	mov	r1, r2
 80173ee:	6878      	ldr	r0, [r7, #4]
 80173f0:	4798      	blx	r3
 80173f2:	4603      	mov	r3, r0
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d001      	beq.n	80173fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80173f8:	2303      	movs	r3, #3
 80173fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80173fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80173fe:	4618      	mov	r0, r3
 8017400:	3710      	adds	r7, #16
 8017402:	46bd      	mov	sp, r7
 8017404:	bd80      	pop	{r7, pc}

08017406 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017406:	b580      	push	{r7, lr}
 8017408:	b084      	sub	sp, #16
 801740a:	af00      	add	r7, sp, #0
 801740c:	6078      	str	r0, [r7, #4]
 801740e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017416:	6839      	ldr	r1, [r7, #0]
 8017418:	4618      	mov	r0, r3
 801741a:	f001 f936 	bl	801868a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	2201      	movs	r2, #1
 8017422:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801742c:	461a      	mov	r2, r3
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801743a:	f003 031f 	and.w	r3, r3, #31
 801743e:	2b02      	cmp	r3, #2
 8017440:	d01a      	beq.n	8017478 <USBD_LL_SetupStage+0x72>
 8017442:	2b02      	cmp	r3, #2
 8017444:	d822      	bhi.n	801748c <USBD_LL_SetupStage+0x86>
 8017446:	2b00      	cmp	r3, #0
 8017448:	d002      	beq.n	8017450 <USBD_LL_SetupStage+0x4a>
 801744a:	2b01      	cmp	r3, #1
 801744c:	d00a      	beq.n	8017464 <USBD_LL_SetupStage+0x5e>
 801744e:	e01d      	b.n	801748c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017456:	4619      	mov	r1, r3
 8017458:	6878      	ldr	r0, [r7, #4]
 801745a:	f000 fb63 	bl	8017b24 <USBD_StdDevReq>
 801745e:	4603      	mov	r3, r0
 8017460:	73fb      	strb	r3, [r7, #15]
      break;
 8017462:	e020      	b.n	80174a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801746a:	4619      	mov	r1, r3
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f000 fbcb 	bl	8017c08 <USBD_StdItfReq>
 8017472:	4603      	mov	r3, r0
 8017474:	73fb      	strb	r3, [r7, #15]
      break;
 8017476:	e016      	b.n	80174a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801747e:	4619      	mov	r1, r3
 8017480:	6878      	ldr	r0, [r7, #4]
 8017482:	f000 fc2d 	bl	8017ce0 <USBD_StdEPReq>
 8017486:	4603      	mov	r3, r0
 8017488:	73fb      	strb	r3, [r7, #15]
      break;
 801748a:	e00c      	b.n	80174a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017492:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8017496:	b2db      	uxtb	r3, r3
 8017498:	4619      	mov	r1, r3
 801749a:	6878      	ldr	r0, [r7, #4]
 801749c:	f001 fe26 	bl	80190ec <USBD_LL_StallEP>
 80174a0:	4603      	mov	r3, r0
 80174a2:	73fb      	strb	r3, [r7, #15]
      break;
 80174a4:	bf00      	nop
  }

  return ret;
 80174a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80174a8:	4618      	mov	r0, r3
 80174aa:	3710      	adds	r7, #16
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd80      	pop	{r7, pc}

080174b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b086      	sub	sp, #24
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	60f8      	str	r0, [r7, #12]
 80174b8:	460b      	mov	r3, r1
 80174ba:	607a      	str	r2, [r7, #4]
 80174bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80174be:	2300      	movs	r3, #0
 80174c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80174c2:	7afb      	ldrb	r3, [r7, #11]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d16e      	bne.n	80175a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80174ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80174d6:	2b03      	cmp	r3, #3
 80174d8:	f040 8098 	bne.w	801760c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80174dc:	693b      	ldr	r3, [r7, #16]
 80174de:	689a      	ldr	r2, [r3, #8]
 80174e0:	693b      	ldr	r3, [r7, #16]
 80174e2:	68db      	ldr	r3, [r3, #12]
 80174e4:	429a      	cmp	r2, r3
 80174e6:	d913      	bls.n	8017510 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80174e8:	693b      	ldr	r3, [r7, #16]
 80174ea:	689a      	ldr	r2, [r3, #8]
 80174ec:	693b      	ldr	r3, [r7, #16]
 80174ee:	68db      	ldr	r3, [r3, #12]
 80174f0:	1ad2      	subs	r2, r2, r3
 80174f2:	693b      	ldr	r3, [r7, #16]
 80174f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80174f6:	693b      	ldr	r3, [r7, #16]
 80174f8:	68da      	ldr	r2, [r3, #12]
 80174fa:	693b      	ldr	r3, [r7, #16]
 80174fc:	689b      	ldr	r3, [r3, #8]
 80174fe:	4293      	cmp	r3, r2
 8017500:	bf28      	it	cs
 8017502:	4613      	movcs	r3, r2
 8017504:	461a      	mov	r2, r3
 8017506:	6879      	ldr	r1, [r7, #4]
 8017508:	68f8      	ldr	r0, [r7, #12]
 801750a:	f001 f9be 	bl	801888a <USBD_CtlContinueRx>
 801750e:	e07d      	b.n	801760c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017516:	f003 031f 	and.w	r3, r3, #31
 801751a:	2b02      	cmp	r3, #2
 801751c:	d014      	beq.n	8017548 <USBD_LL_DataOutStage+0x98>
 801751e:	2b02      	cmp	r3, #2
 8017520:	d81d      	bhi.n	801755e <USBD_LL_DataOutStage+0xae>
 8017522:	2b00      	cmp	r3, #0
 8017524:	d002      	beq.n	801752c <USBD_LL_DataOutStage+0x7c>
 8017526:	2b01      	cmp	r3, #1
 8017528:	d003      	beq.n	8017532 <USBD_LL_DataOutStage+0x82>
 801752a:	e018      	b.n	801755e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801752c:	2300      	movs	r3, #0
 801752e:	75bb      	strb	r3, [r7, #22]
            break;
 8017530:	e018      	b.n	8017564 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017538:	b2db      	uxtb	r3, r3
 801753a:	4619      	mov	r1, r3
 801753c:	68f8      	ldr	r0, [r7, #12]
 801753e:	f000 fa64 	bl	8017a0a <USBD_CoreFindIF>
 8017542:	4603      	mov	r3, r0
 8017544:	75bb      	strb	r3, [r7, #22]
            break;
 8017546:	e00d      	b.n	8017564 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801754e:	b2db      	uxtb	r3, r3
 8017550:	4619      	mov	r1, r3
 8017552:	68f8      	ldr	r0, [r7, #12]
 8017554:	f000 fa66 	bl	8017a24 <USBD_CoreFindEP>
 8017558:	4603      	mov	r3, r0
 801755a:	75bb      	strb	r3, [r7, #22]
            break;
 801755c:	e002      	b.n	8017564 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801755e:	2300      	movs	r3, #0
 8017560:	75bb      	strb	r3, [r7, #22]
            break;
 8017562:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8017564:	7dbb      	ldrb	r3, [r7, #22]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d119      	bne.n	801759e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017570:	b2db      	uxtb	r3, r3
 8017572:	2b03      	cmp	r3, #3
 8017574:	d113      	bne.n	801759e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8017576:	7dba      	ldrb	r2, [r7, #22]
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	32ae      	adds	r2, #174	@ 0xae
 801757c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017580:	691b      	ldr	r3, [r3, #16]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d00b      	beq.n	801759e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8017586:	7dba      	ldrb	r2, [r7, #22]
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801758e:	7dba      	ldrb	r2, [r7, #22]
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	32ae      	adds	r2, #174	@ 0xae
 8017594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017598:	691b      	ldr	r3, [r3, #16]
 801759a:	68f8      	ldr	r0, [r7, #12]
 801759c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801759e:	68f8      	ldr	r0, [r7, #12]
 80175a0:	f001 f984 	bl	80188ac <USBD_CtlSendStatus>
 80175a4:	e032      	b.n	801760c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80175a6:	7afb      	ldrb	r3, [r7, #11]
 80175a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80175ac:	b2db      	uxtb	r3, r3
 80175ae:	4619      	mov	r1, r3
 80175b0:	68f8      	ldr	r0, [r7, #12]
 80175b2:	f000 fa37 	bl	8017a24 <USBD_CoreFindEP>
 80175b6:	4603      	mov	r3, r0
 80175b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80175ba:	7dbb      	ldrb	r3, [r7, #22]
 80175bc:	2bff      	cmp	r3, #255	@ 0xff
 80175be:	d025      	beq.n	801760c <USBD_LL_DataOutStage+0x15c>
 80175c0:	7dbb      	ldrb	r3, [r7, #22]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d122      	bne.n	801760c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80175cc:	b2db      	uxtb	r3, r3
 80175ce:	2b03      	cmp	r3, #3
 80175d0:	d117      	bne.n	8017602 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80175d2:	7dba      	ldrb	r2, [r7, #22]
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	32ae      	adds	r2, #174	@ 0xae
 80175d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80175dc:	699b      	ldr	r3, [r3, #24]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d00f      	beq.n	8017602 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80175e2:	7dba      	ldrb	r2, [r7, #22]
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80175ea:	7dba      	ldrb	r2, [r7, #22]
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	32ae      	adds	r2, #174	@ 0xae
 80175f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80175f4:	699b      	ldr	r3, [r3, #24]
 80175f6:	7afa      	ldrb	r2, [r7, #11]
 80175f8:	4611      	mov	r1, r2
 80175fa:	68f8      	ldr	r0, [r7, #12]
 80175fc:	4798      	blx	r3
 80175fe:	4603      	mov	r3, r0
 8017600:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8017602:	7dfb      	ldrb	r3, [r7, #23]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d001      	beq.n	801760c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8017608:	7dfb      	ldrb	r3, [r7, #23]
 801760a:	e000      	b.n	801760e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801760c:	2300      	movs	r3, #0
}
 801760e:	4618      	mov	r0, r3
 8017610:	3718      	adds	r7, #24
 8017612:	46bd      	mov	sp, r7
 8017614:	bd80      	pop	{r7, pc}

08017616 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017616:	b580      	push	{r7, lr}
 8017618:	b086      	sub	sp, #24
 801761a:	af00      	add	r7, sp, #0
 801761c:	60f8      	str	r0, [r7, #12]
 801761e:	460b      	mov	r3, r1
 8017620:	607a      	str	r2, [r7, #4]
 8017622:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8017624:	7afb      	ldrb	r3, [r7, #11]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d16f      	bne.n	801770a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	3314      	adds	r3, #20
 801762e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017636:	2b02      	cmp	r3, #2
 8017638:	d15a      	bne.n	80176f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	689a      	ldr	r2, [r3, #8]
 801763e:	693b      	ldr	r3, [r7, #16]
 8017640:	68db      	ldr	r3, [r3, #12]
 8017642:	429a      	cmp	r2, r3
 8017644:	d914      	bls.n	8017670 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017646:	693b      	ldr	r3, [r7, #16]
 8017648:	689a      	ldr	r2, [r3, #8]
 801764a:	693b      	ldr	r3, [r7, #16]
 801764c:	68db      	ldr	r3, [r3, #12]
 801764e:	1ad2      	subs	r2, r2, r3
 8017650:	693b      	ldr	r3, [r7, #16]
 8017652:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8017654:	693b      	ldr	r3, [r7, #16]
 8017656:	689b      	ldr	r3, [r3, #8]
 8017658:	461a      	mov	r2, r3
 801765a:	6879      	ldr	r1, [r7, #4]
 801765c:	68f8      	ldr	r0, [r7, #12]
 801765e:	f001 f8e6 	bl	801882e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017662:	2300      	movs	r3, #0
 8017664:	2200      	movs	r2, #0
 8017666:	2100      	movs	r1, #0
 8017668:	68f8      	ldr	r0, [r7, #12]
 801766a:	f001 fde9 	bl	8019240 <USBD_LL_PrepareReceive>
 801766e:	e03f      	b.n	80176f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017670:	693b      	ldr	r3, [r7, #16]
 8017672:	68da      	ldr	r2, [r3, #12]
 8017674:	693b      	ldr	r3, [r7, #16]
 8017676:	689b      	ldr	r3, [r3, #8]
 8017678:	429a      	cmp	r2, r3
 801767a:	d11c      	bne.n	80176b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801767c:	693b      	ldr	r3, [r7, #16]
 801767e:	685a      	ldr	r2, [r3, #4]
 8017680:	693b      	ldr	r3, [r7, #16]
 8017682:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017684:	429a      	cmp	r2, r3
 8017686:	d316      	bcc.n	80176b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8017688:	693b      	ldr	r3, [r7, #16]
 801768a:	685a      	ldr	r2, [r3, #4]
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017692:	429a      	cmp	r2, r3
 8017694:	d20f      	bcs.n	80176b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017696:	2200      	movs	r2, #0
 8017698:	2100      	movs	r1, #0
 801769a:	68f8      	ldr	r0, [r7, #12]
 801769c:	f001 f8c7 	bl	801882e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	2200      	movs	r2, #0
 80176a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80176a8:	2300      	movs	r3, #0
 80176aa:	2200      	movs	r2, #0
 80176ac:	2100      	movs	r1, #0
 80176ae:	68f8      	ldr	r0, [r7, #12]
 80176b0:	f001 fdc6 	bl	8019240 <USBD_LL_PrepareReceive>
 80176b4:	e01c      	b.n	80176f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80176bc:	b2db      	uxtb	r3, r3
 80176be:	2b03      	cmp	r3, #3
 80176c0:	d10f      	bne.n	80176e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80176c8:	68db      	ldr	r3, [r3, #12]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d009      	beq.n	80176e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	2200      	movs	r2, #0
 80176d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80176dc:	68db      	ldr	r3, [r3, #12]
 80176de:	68f8      	ldr	r0, [r7, #12]
 80176e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80176e2:	2180      	movs	r1, #128	@ 0x80
 80176e4:	68f8      	ldr	r0, [r7, #12]
 80176e6:	f001 fd01 	bl	80190ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80176ea:	68f8      	ldr	r0, [r7, #12]
 80176ec:	f001 f8f1 	bl	80188d2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d03a      	beq.n	8017770 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80176fa:	68f8      	ldr	r0, [r7, #12]
 80176fc:	f7ff fe42 	bl	8017384 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	2200      	movs	r2, #0
 8017704:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8017708:	e032      	b.n	8017770 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801770a:	7afb      	ldrb	r3, [r7, #11]
 801770c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8017710:	b2db      	uxtb	r3, r3
 8017712:	4619      	mov	r1, r3
 8017714:	68f8      	ldr	r0, [r7, #12]
 8017716:	f000 f985 	bl	8017a24 <USBD_CoreFindEP>
 801771a:	4603      	mov	r3, r0
 801771c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801771e:	7dfb      	ldrb	r3, [r7, #23]
 8017720:	2bff      	cmp	r3, #255	@ 0xff
 8017722:	d025      	beq.n	8017770 <USBD_LL_DataInStage+0x15a>
 8017724:	7dfb      	ldrb	r3, [r7, #23]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d122      	bne.n	8017770 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017730:	b2db      	uxtb	r3, r3
 8017732:	2b03      	cmp	r3, #3
 8017734:	d11c      	bne.n	8017770 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8017736:	7dfa      	ldrb	r2, [r7, #23]
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	32ae      	adds	r2, #174	@ 0xae
 801773c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017740:	695b      	ldr	r3, [r3, #20]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d014      	beq.n	8017770 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8017746:	7dfa      	ldrb	r2, [r7, #23]
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801774e:	7dfa      	ldrb	r2, [r7, #23]
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	32ae      	adds	r2, #174	@ 0xae
 8017754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017758:	695b      	ldr	r3, [r3, #20]
 801775a:	7afa      	ldrb	r2, [r7, #11]
 801775c:	4611      	mov	r1, r2
 801775e:	68f8      	ldr	r0, [r7, #12]
 8017760:	4798      	blx	r3
 8017762:	4603      	mov	r3, r0
 8017764:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8017766:	7dbb      	ldrb	r3, [r7, #22]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d001      	beq.n	8017770 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801776c:	7dbb      	ldrb	r3, [r7, #22]
 801776e:	e000      	b.n	8017772 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8017770:	2300      	movs	r3, #0
}
 8017772:	4618      	mov	r0, r3
 8017774:	3718      	adds	r7, #24
 8017776:	46bd      	mov	sp, r7
 8017778:	bd80      	pop	{r7, pc}

0801777a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801777a:	b580      	push	{r7, lr}
 801777c:	b084      	sub	sp, #16
 801777e:	af00      	add	r7, sp, #0
 8017780:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8017782:	2300      	movs	r3, #0
 8017784:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	2201      	movs	r2, #1
 801778a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	2200      	movs	r2, #0
 8017792:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	2200      	movs	r2, #0
 801779a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	2200      	movs	r2, #0
 80177a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	2200      	movs	r2, #0
 80177a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d014      	beq.n	80177e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80177bc:	685b      	ldr	r3, [r3, #4]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d00e      	beq.n	80177e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80177c8:	685b      	ldr	r3, [r3, #4]
 80177ca:	687a      	ldr	r2, [r7, #4]
 80177cc:	6852      	ldr	r2, [r2, #4]
 80177ce:	b2d2      	uxtb	r2, r2
 80177d0:	4611      	mov	r1, r2
 80177d2:	6878      	ldr	r0, [r7, #4]
 80177d4:	4798      	blx	r3
 80177d6:	4603      	mov	r3, r0
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d001      	beq.n	80177e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80177dc:	2303      	movs	r3, #3
 80177de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80177e0:	2340      	movs	r3, #64	@ 0x40
 80177e2:	2200      	movs	r2, #0
 80177e4:	2100      	movs	r1, #0
 80177e6:	6878      	ldr	r0, [r7, #4]
 80177e8:	f001 fc3b 	bl	8019062 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	2201      	movs	r2, #1
 80177f0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	2240      	movs	r2, #64	@ 0x40
 80177f8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80177fc:	2340      	movs	r3, #64	@ 0x40
 80177fe:	2200      	movs	r2, #0
 8017800:	2180      	movs	r1, #128	@ 0x80
 8017802:	6878      	ldr	r0, [r7, #4]
 8017804:	f001 fc2d 	bl	8019062 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	2201      	movs	r2, #1
 801780c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	2240      	movs	r2, #64	@ 0x40
 8017812:	621a      	str	r2, [r3, #32]

  return ret;
 8017814:	7bfb      	ldrb	r3, [r7, #15]
}
 8017816:	4618      	mov	r0, r3
 8017818:	3710      	adds	r7, #16
 801781a:	46bd      	mov	sp, r7
 801781c:	bd80      	pop	{r7, pc}

0801781e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801781e:	b480      	push	{r7}
 8017820:	b083      	sub	sp, #12
 8017822:	af00      	add	r7, sp, #0
 8017824:	6078      	str	r0, [r7, #4]
 8017826:	460b      	mov	r3, r1
 8017828:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	78fa      	ldrb	r2, [r7, #3]
 801782e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8017830:	2300      	movs	r3, #0
}
 8017832:	4618      	mov	r0, r3
 8017834:	370c      	adds	r7, #12
 8017836:	46bd      	mov	sp, r7
 8017838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801783c:	4770      	bx	lr

0801783e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801783e:	b480      	push	{r7}
 8017840:	b083      	sub	sp, #12
 8017842:	af00      	add	r7, sp, #0
 8017844:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801784c:	b2db      	uxtb	r3, r3
 801784e:	2b04      	cmp	r3, #4
 8017850:	d006      	beq.n	8017860 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017858:	b2da      	uxtb	r2, r3
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	2204      	movs	r2, #4
 8017864:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8017868:	2300      	movs	r3, #0
}
 801786a:	4618      	mov	r0, r3
 801786c:	370c      	adds	r7, #12
 801786e:	46bd      	mov	sp, r7
 8017870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017874:	4770      	bx	lr

08017876 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8017876:	b480      	push	{r7}
 8017878:	b083      	sub	sp, #12
 801787a:	af00      	add	r7, sp, #0
 801787c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017884:	b2db      	uxtb	r3, r3
 8017886:	2b04      	cmp	r3, #4
 8017888:	d106      	bne.n	8017898 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8017890:	b2da      	uxtb	r2, r3
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8017898:	2300      	movs	r3, #0
}
 801789a:	4618      	mov	r0, r3
 801789c:	370c      	adds	r7, #12
 801789e:	46bd      	mov	sp, r7
 80178a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a4:	4770      	bx	lr

080178a6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80178a6:	b580      	push	{r7, lr}
 80178a8:	b082      	sub	sp, #8
 80178aa:	af00      	add	r7, sp, #0
 80178ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80178b4:	b2db      	uxtb	r3, r3
 80178b6:	2b03      	cmp	r3, #3
 80178b8:	d110      	bne.n	80178dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d00b      	beq.n	80178dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80178ca:	69db      	ldr	r3, [r3, #28]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d005      	beq.n	80178dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80178d6:	69db      	ldr	r3, [r3, #28]
 80178d8:	6878      	ldr	r0, [r7, #4]
 80178da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80178dc:	2300      	movs	r3, #0
}
 80178de:	4618      	mov	r0, r3
 80178e0:	3708      	adds	r7, #8
 80178e2:	46bd      	mov	sp, r7
 80178e4:	bd80      	pop	{r7, pc}

080178e6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80178e6:	b580      	push	{r7, lr}
 80178e8:	b082      	sub	sp, #8
 80178ea:	af00      	add	r7, sp, #0
 80178ec:	6078      	str	r0, [r7, #4]
 80178ee:	460b      	mov	r3, r1
 80178f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	32ae      	adds	r2, #174	@ 0xae
 80178fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d101      	bne.n	8017908 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8017904:	2303      	movs	r3, #3
 8017906:	e01c      	b.n	8017942 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801790e:	b2db      	uxtb	r3, r3
 8017910:	2b03      	cmp	r3, #3
 8017912:	d115      	bne.n	8017940 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	32ae      	adds	r2, #174	@ 0xae
 801791e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017922:	6a1b      	ldr	r3, [r3, #32]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d00b      	beq.n	8017940 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	32ae      	adds	r2, #174	@ 0xae
 8017932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017936:	6a1b      	ldr	r3, [r3, #32]
 8017938:	78fa      	ldrb	r2, [r7, #3]
 801793a:	4611      	mov	r1, r2
 801793c:	6878      	ldr	r0, [r7, #4]
 801793e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017940:	2300      	movs	r3, #0
}
 8017942:	4618      	mov	r0, r3
 8017944:	3708      	adds	r7, #8
 8017946:	46bd      	mov	sp, r7
 8017948:	bd80      	pop	{r7, pc}

0801794a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801794a:	b580      	push	{r7, lr}
 801794c:	b082      	sub	sp, #8
 801794e:	af00      	add	r7, sp, #0
 8017950:	6078      	str	r0, [r7, #4]
 8017952:	460b      	mov	r3, r1
 8017954:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	32ae      	adds	r2, #174	@ 0xae
 8017960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d101      	bne.n	801796c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8017968:	2303      	movs	r3, #3
 801796a:	e01c      	b.n	80179a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017972:	b2db      	uxtb	r3, r3
 8017974:	2b03      	cmp	r3, #3
 8017976:	d115      	bne.n	80179a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	32ae      	adds	r2, #174	@ 0xae
 8017982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017988:	2b00      	cmp	r3, #0
 801798a:	d00b      	beq.n	80179a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	32ae      	adds	r2, #174	@ 0xae
 8017996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801799a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801799c:	78fa      	ldrb	r2, [r7, #3]
 801799e:	4611      	mov	r1, r2
 80179a0:	6878      	ldr	r0, [r7, #4]
 80179a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80179a4:	2300      	movs	r3, #0
}
 80179a6:	4618      	mov	r0, r3
 80179a8:	3708      	adds	r7, #8
 80179aa:	46bd      	mov	sp, r7
 80179ac:	bd80      	pop	{r7, pc}

080179ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80179ae:	b480      	push	{r7}
 80179b0:	b083      	sub	sp, #12
 80179b2:	af00      	add	r7, sp, #0
 80179b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80179b6:	2300      	movs	r3, #0
}
 80179b8:	4618      	mov	r0, r3
 80179ba:	370c      	adds	r7, #12
 80179bc:	46bd      	mov	sp, r7
 80179be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c2:	4770      	bx	lr

080179c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b084      	sub	sp, #16
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80179cc:	2300      	movs	r3, #0
 80179ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	2201      	movs	r2, #1
 80179d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d00e      	beq.n	8017a00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80179e8:	685b      	ldr	r3, [r3, #4]
 80179ea:	687a      	ldr	r2, [r7, #4]
 80179ec:	6852      	ldr	r2, [r2, #4]
 80179ee:	b2d2      	uxtb	r2, r2
 80179f0:	4611      	mov	r1, r2
 80179f2:	6878      	ldr	r0, [r7, #4]
 80179f4:	4798      	blx	r3
 80179f6:	4603      	mov	r3, r0
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d001      	beq.n	8017a00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80179fc:	2303      	movs	r3, #3
 80179fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a02:	4618      	mov	r0, r3
 8017a04:	3710      	adds	r7, #16
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}

08017a0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8017a0a:	b480      	push	{r7}
 8017a0c:	b083      	sub	sp, #12
 8017a0e:	af00      	add	r7, sp, #0
 8017a10:	6078      	str	r0, [r7, #4]
 8017a12:	460b      	mov	r3, r1
 8017a14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8017a16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8017a18:	4618      	mov	r0, r3
 8017a1a:	370c      	adds	r7, #12
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a22:	4770      	bx	lr

08017a24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8017a24:	b480      	push	{r7}
 8017a26:	b083      	sub	sp, #12
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
 8017a2c:	460b      	mov	r3, r1
 8017a2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8017a30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8017a32:	4618      	mov	r0, r3
 8017a34:	370c      	adds	r7, #12
 8017a36:	46bd      	mov	sp, r7
 8017a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a3c:	4770      	bx	lr

08017a3e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8017a3e:	b580      	push	{r7, lr}
 8017a40:	b086      	sub	sp, #24
 8017a42:	af00      	add	r7, sp, #0
 8017a44:	6078      	str	r0, [r7, #4]
 8017a46:	460b      	mov	r3, r1
 8017a48:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8017a52:	2300      	movs	r3, #0
 8017a54:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	885b      	ldrh	r3, [r3, #2]
 8017a5a:	b29b      	uxth	r3, r3
 8017a5c:	68fa      	ldr	r2, [r7, #12]
 8017a5e:	7812      	ldrb	r2, [r2, #0]
 8017a60:	4293      	cmp	r3, r2
 8017a62:	d91f      	bls.n	8017aa4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	781b      	ldrb	r3, [r3, #0]
 8017a68:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8017a6a:	e013      	b.n	8017a94 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8017a6c:	f107 030a 	add.w	r3, r7, #10
 8017a70:	4619      	mov	r1, r3
 8017a72:	6978      	ldr	r0, [r7, #20]
 8017a74:	f000 f81b 	bl	8017aae <USBD_GetNextDesc>
 8017a78:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8017a7a:	697b      	ldr	r3, [r7, #20]
 8017a7c:	785b      	ldrb	r3, [r3, #1]
 8017a7e:	2b05      	cmp	r3, #5
 8017a80:	d108      	bne.n	8017a94 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8017a82:	697b      	ldr	r3, [r7, #20]
 8017a84:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8017a86:	693b      	ldr	r3, [r7, #16]
 8017a88:	789b      	ldrb	r3, [r3, #2]
 8017a8a:	78fa      	ldrb	r2, [r7, #3]
 8017a8c:	429a      	cmp	r2, r3
 8017a8e:	d008      	beq.n	8017aa2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8017a90:	2300      	movs	r3, #0
 8017a92:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	885b      	ldrh	r3, [r3, #2]
 8017a98:	b29a      	uxth	r2, r3
 8017a9a:	897b      	ldrh	r3, [r7, #10]
 8017a9c:	429a      	cmp	r2, r3
 8017a9e:	d8e5      	bhi.n	8017a6c <USBD_GetEpDesc+0x2e>
 8017aa0:	e000      	b.n	8017aa4 <USBD_GetEpDesc+0x66>
          break;
 8017aa2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8017aa4:	693b      	ldr	r3, [r7, #16]
}
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	3718      	adds	r7, #24
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	bd80      	pop	{r7, pc}

08017aae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8017aae:	b480      	push	{r7}
 8017ab0:	b085      	sub	sp, #20
 8017ab2:	af00      	add	r7, sp, #0
 8017ab4:	6078      	str	r0, [r7, #4]
 8017ab6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8017abc:	683b      	ldr	r3, [r7, #0]
 8017abe:	881b      	ldrh	r3, [r3, #0]
 8017ac0:	68fa      	ldr	r2, [r7, #12]
 8017ac2:	7812      	ldrb	r2, [r2, #0]
 8017ac4:	4413      	add	r3, r2
 8017ac6:	b29a      	uxth	r2, r3
 8017ac8:	683b      	ldr	r3, [r7, #0]
 8017aca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	781b      	ldrb	r3, [r3, #0]
 8017ad0:	461a      	mov	r2, r3
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	4413      	add	r3, r2
 8017ad6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8017ad8:	68fb      	ldr	r3, [r7, #12]
}
 8017ada:	4618      	mov	r0, r3
 8017adc:	3714      	adds	r7, #20
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae4:	4770      	bx	lr

08017ae6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8017ae6:	b480      	push	{r7}
 8017ae8:	b087      	sub	sp, #28
 8017aea:	af00      	add	r7, sp, #0
 8017aec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017af2:	697b      	ldr	r3, [r7, #20]
 8017af4:	781b      	ldrb	r3, [r3, #0]
 8017af6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8017af8:	697b      	ldr	r3, [r7, #20]
 8017afa:	3301      	adds	r3, #1
 8017afc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8017afe:	697b      	ldr	r3, [r7, #20]
 8017b00:	781b      	ldrb	r3, [r3, #0]
 8017b02:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017b04:	8a3b      	ldrh	r3, [r7, #16]
 8017b06:	021b      	lsls	r3, r3, #8
 8017b08:	b21a      	sxth	r2, r3
 8017b0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017b0e:	4313      	orrs	r3, r2
 8017b10:	b21b      	sxth	r3, r3
 8017b12:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8017b14:	89fb      	ldrh	r3, [r7, #14]
}
 8017b16:	4618      	mov	r0, r3
 8017b18:	371c      	adds	r7, #28
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b20:	4770      	bx	lr
	...

08017b24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b084      	sub	sp, #16
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	6078      	str	r0, [r7, #4]
 8017b2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017b2e:	2300      	movs	r3, #0
 8017b30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017b32:	683b      	ldr	r3, [r7, #0]
 8017b34:	781b      	ldrb	r3, [r3, #0]
 8017b36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017b3a:	2b40      	cmp	r3, #64	@ 0x40
 8017b3c:	d005      	beq.n	8017b4a <USBD_StdDevReq+0x26>
 8017b3e:	2b40      	cmp	r3, #64	@ 0x40
 8017b40:	d857      	bhi.n	8017bf2 <USBD_StdDevReq+0xce>
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d00f      	beq.n	8017b66 <USBD_StdDevReq+0x42>
 8017b46:	2b20      	cmp	r3, #32
 8017b48:	d153      	bne.n	8017bf2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	32ae      	adds	r2, #174	@ 0xae
 8017b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017b58:	689b      	ldr	r3, [r3, #8]
 8017b5a:	6839      	ldr	r1, [r7, #0]
 8017b5c:	6878      	ldr	r0, [r7, #4]
 8017b5e:	4798      	blx	r3
 8017b60:	4603      	mov	r3, r0
 8017b62:	73fb      	strb	r3, [r7, #15]
      break;
 8017b64:	e04a      	b.n	8017bfc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017b66:	683b      	ldr	r3, [r7, #0]
 8017b68:	785b      	ldrb	r3, [r3, #1]
 8017b6a:	2b09      	cmp	r3, #9
 8017b6c:	d83b      	bhi.n	8017be6 <USBD_StdDevReq+0xc2>
 8017b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8017b74 <USBD_StdDevReq+0x50>)
 8017b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b74:	08017bc9 	.word	0x08017bc9
 8017b78:	08017bdd 	.word	0x08017bdd
 8017b7c:	08017be7 	.word	0x08017be7
 8017b80:	08017bd3 	.word	0x08017bd3
 8017b84:	08017be7 	.word	0x08017be7
 8017b88:	08017ba7 	.word	0x08017ba7
 8017b8c:	08017b9d 	.word	0x08017b9d
 8017b90:	08017be7 	.word	0x08017be7
 8017b94:	08017bbf 	.word	0x08017bbf
 8017b98:	08017bb1 	.word	0x08017bb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017b9c:	6839      	ldr	r1, [r7, #0]
 8017b9e:	6878      	ldr	r0, [r7, #4]
 8017ba0:	f000 fa3c 	bl	801801c <USBD_GetDescriptor>
          break;
 8017ba4:	e024      	b.n	8017bf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8017ba6:	6839      	ldr	r1, [r7, #0]
 8017ba8:	6878      	ldr	r0, [r7, #4]
 8017baa:	f000 fbcb 	bl	8018344 <USBD_SetAddress>
          break;
 8017bae:	e01f      	b.n	8017bf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8017bb0:	6839      	ldr	r1, [r7, #0]
 8017bb2:	6878      	ldr	r0, [r7, #4]
 8017bb4:	f000 fc0a 	bl	80183cc <USBD_SetConfig>
 8017bb8:	4603      	mov	r3, r0
 8017bba:	73fb      	strb	r3, [r7, #15]
          break;
 8017bbc:	e018      	b.n	8017bf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8017bbe:	6839      	ldr	r1, [r7, #0]
 8017bc0:	6878      	ldr	r0, [r7, #4]
 8017bc2:	f000 fcad 	bl	8018520 <USBD_GetConfig>
          break;
 8017bc6:	e013      	b.n	8017bf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017bc8:	6839      	ldr	r1, [r7, #0]
 8017bca:	6878      	ldr	r0, [r7, #4]
 8017bcc:	f000 fcde 	bl	801858c <USBD_GetStatus>
          break;
 8017bd0:	e00e      	b.n	8017bf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8017bd2:	6839      	ldr	r1, [r7, #0]
 8017bd4:	6878      	ldr	r0, [r7, #4]
 8017bd6:	f000 fd0d 	bl	80185f4 <USBD_SetFeature>
          break;
 8017bda:	e009      	b.n	8017bf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8017bdc:	6839      	ldr	r1, [r7, #0]
 8017bde:	6878      	ldr	r0, [r7, #4]
 8017be0:	f000 fd31 	bl	8018646 <USBD_ClrFeature>
          break;
 8017be4:	e004      	b.n	8017bf0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8017be6:	6839      	ldr	r1, [r7, #0]
 8017be8:	6878      	ldr	r0, [r7, #4]
 8017bea:	f000 fd88 	bl	80186fe <USBD_CtlError>
          break;
 8017bee:	bf00      	nop
      }
      break;
 8017bf0:	e004      	b.n	8017bfc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8017bf2:	6839      	ldr	r1, [r7, #0]
 8017bf4:	6878      	ldr	r0, [r7, #4]
 8017bf6:	f000 fd82 	bl	80186fe <USBD_CtlError>
      break;
 8017bfa:	bf00      	nop
  }

  return ret;
 8017bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bfe:	4618      	mov	r0, r3
 8017c00:	3710      	adds	r7, #16
 8017c02:	46bd      	mov	sp, r7
 8017c04:	bd80      	pop	{r7, pc}
 8017c06:	bf00      	nop

08017c08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b084      	sub	sp, #16
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
 8017c10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017c12:	2300      	movs	r3, #0
 8017c14:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017c16:	683b      	ldr	r3, [r7, #0]
 8017c18:	781b      	ldrb	r3, [r3, #0]
 8017c1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017c1e:	2b40      	cmp	r3, #64	@ 0x40
 8017c20:	d005      	beq.n	8017c2e <USBD_StdItfReq+0x26>
 8017c22:	2b40      	cmp	r3, #64	@ 0x40
 8017c24:	d852      	bhi.n	8017ccc <USBD_StdItfReq+0xc4>
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d001      	beq.n	8017c2e <USBD_StdItfReq+0x26>
 8017c2a:	2b20      	cmp	r3, #32
 8017c2c:	d14e      	bne.n	8017ccc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017c34:	b2db      	uxtb	r3, r3
 8017c36:	3b01      	subs	r3, #1
 8017c38:	2b02      	cmp	r3, #2
 8017c3a:	d840      	bhi.n	8017cbe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8017c3c:	683b      	ldr	r3, [r7, #0]
 8017c3e:	889b      	ldrh	r3, [r3, #4]
 8017c40:	b2db      	uxtb	r3, r3
 8017c42:	2b01      	cmp	r3, #1
 8017c44:	d836      	bhi.n	8017cb4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8017c46:	683b      	ldr	r3, [r7, #0]
 8017c48:	889b      	ldrh	r3, [r3, #4]
 8017c4a:	b2db      	uxtb	r3, r3
 8017c4c:	4619      	mov	r1, r3
 8017c4e:	6878      	ldr	r0, [r7, #4]
 8017c50:	f7ff fedb 	bl	8017a0a <USBD_CoreFindIF>
 8017c54:	4603      	mov	r3, r0
 8017c56:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017c58:	7bbb      	ldrb	r3, [r7, #14]
 8017c5a:	2bff      	cmp	r3, #255	@ 0xff
 8017c5c:	d01d      	beq.n	8017c9a <USBD_StdItfReq+0x92>
 8017c5e:	7bbb      	ldrb	r3, [r7, #14]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d11a      	bne.n	8017c9a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8017c64:	7bba      	ldrb	r2, [r7, #14]
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	32ae      	adds	r2, #174	@ 0xae
 8017c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c6e:	689b      	ldr	r3, [r3, #8]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d00f      	beq.n	8017c94 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8017c74:	7bba      	ldrb	r2, [r7, #14]
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017c7c:	7bba      	ldrb	r2, [r7, #14]
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	32ae      	adds	r2, #174	@ 0xae
 8017c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c86:	689b      	ldr	r3, [r3, #8]
 8017c88:	6839      	ldr	r1, [r7, #0]
 8017c8a:	6878      	ldr	r0, [r7, #4]
 8017c8c:	4798      	blx	r3
 8017c8e:	4603      	mov	r3, r0
 8017c90:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8017c92:	e004      	b.n	8017c9e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8017c94:	2303      	movs	r3, #3
 8017c96:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8017c98:	e001      	b.n	8017c9e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8017c9a:	2303      	movs	r3, #3
 8017c9c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8017c9e:	683b      	ldr	r3, [r7, #0]
 8017ca0:	88db      	ldrh	r3, [r3, #6]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d110      	bne.n	8017cc8 <USBD_StdItfReq+0xc0>
 8017ca6:	7bfb      	ldrb	r3, [r7, #15]
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d10d      	bne.n	8017cc8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8017cac:	6878      	ldr	r0, [r7, #4]
 8017cae:	f000 fdfd 	bl	80188ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017cb2:	e009      	b.n	8017cc8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8017cb4:	6839      	ldr	r1, [r7, #0]
 8017cb6:	6878      	ldr	r0, [r7, #4]
 8017cb8:	f000 fd21 	bl	80186fe <USBD_CtlError>
          break;
 8017cbc:	e004      	b.n	8017cc8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8017cbe:	6839      	ldr	r1, [r7, #0]
 8017cc0:	6878      	ldr	r0, [r7, #4]
 8017cc2:	f000 fd1c 	bl	80186fe <USBD_CtlError>
          break;
 8017cc6:	e000      	b.n	8017cca <USBD_StdItfReq+0xc2>
          break;
 8017cc8:	bf00      	nop
      }
      break;
 8017cca:	e004      	b.n	8017cd6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8017ccc:	6839      	ldr	r1, [r7, #0]
 8017cce:	6878      	ldr	r0, [r7, #4]
 8017cd0:	f000 fd15 	bl	80186fe <USBD_CtlError>
      break;
 8017cd4:	bf00      	nop
  }

  return ret;
 8017cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cd8:	4618      	mov	r0, r3
 8017cda:	3710      	adds	r7, #16
 8017cdc:	46bd      	mov	sp, r7
 8017cde:	bd80      	pop	{r7, pc}

08017ce0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017ce0:	b580      	push	{r7, lr}
 8017ce2:	b084      	sub	sp, #16
 8017ce4:	af00      	add	r7, sp, #0
 8017ce6:	6078      	str	r0, [r7, #4]
 8017ce8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8017cea:	2300      	movs	r3, #0
 8017cec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8017cee:	683b      	ldr	r3, [r7, #0]
 8017cf0:	889b      	ldrh	r3, [r3, #4]
 8017cf2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017cf4:	683b      	ldr	r3, [r7, #0]
 8017cf6:	781b      	ldrb	r3, [r3, #0]
 8017cf8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017cfc:	2b40      	cmp	r3, #64	@ 0x40
 8017cfe:	d007      	beq.n	8017d10 <USBD_StdEPReq+0x30>
 8017d00:	2b40      	cmp	r3, #64	@ 0x40
 8017d02:	f200 817f 	bhi.w	8018004 <USBD_StdEPReq+0x324>
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d02a      	beq.n	8017d60 <USBD_StdEPReq+0x80>
 8017d0a:	2b20      	cmp	r3, #32
 8017d0c:	f040 817a 	bne.w	8018004 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8017d10:	7bbb      	ldrb	r3, [r7, #14]
 8017d12:	4619      	mov	r1, r3
 8017d14:	6878      	ldr	r0, [r7, #4]
 8017d16:	f7ff fe85 	bl	8017a24 <USBD_CoreFindEP>
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017d1e:	7b7b      	ldrb	r3, [r7, #13]
 8017d20:	2bff      	cmp	r3, #255	@ 0xff
 8017d22:	f000 8174 	beq.w	801800e <USBD_StdEPReq+0x32e>
 8017d26:	7b7b      	ldrb	r3, [r7, #13]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	f040 8170 	bne.w	801800e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8017d2e:	7b7a      	ldrb	r2, [r7, #13]
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8017d36:	7b7a      	ldrb	r2, [r7, #13]
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	32ae      	adds	r2, #174	@ 0xae
 8017d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d40:	689b      	ldr	r3, [r3, #8]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	f000 8163 	beq.w	801800e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8017d48:	7b7a      	ldrb	r2, [r7, #13]
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	32ae      	adds	r2, #174	@ 0xae
 8017d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d52:	689b      	ldr	r3, [r3, #8]
 8017d54:	6839      	ldr	r1, [r7, #0]
 8017d56:	6878      	ldr	r0, [r7, #4]
 8017d58:	4798      	blx	r3
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8017d5e:	e156      	b.n	801800e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017d60:	683b      	ldr	r3, [r7, #0]
 8017d62:	785b      	ldrb	r3, [r3, #1]
 8017d64:	2b03      	cmp	r3, #3
 8017d66:	d008      	beq.n	8017d7a <USBD_StdEPReq+0x9a>
 8017d68:	2b03      	cmp	r3, #3
 8017d6a:	f300 8145 	bgt.w	8017ff8 <USBD_StdEPReq+0x318>
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	f000 809b 	beq.w	8017eaa <USBD_StdEPReq+0x1ca>
 8017d74:	2b01      	cmp	r3, #1
 8017d76:	d03c      	beq.n	8017df2 <USBD_StdEPReq+0x112>
 8017d78:	e13e      	b.n	8017ff8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017d80:	b2db      	uxtb	r3, r3
 8017d82:	2b02      	cmp	r3, #2
 8017d84:	d002      	beq.n	8017d8c <USBD_StdEPReq+0xac>
 8017d86:	2b03      	cmp	r3, #3
 8017d88:	d016      	beq.n	8017db8 <USBD_StdEPReq+0xd8>
 8017d8a:	e02c      	b.n	8017de6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017d8c:	7bbb      	ldrb	r3, [r7, #14]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d00d      	beq.n	8017dae <USBD_StdEPReq+0xce>
 8017d92:	7bbb      	ldrb	r3, [r7, #14]
 8017d94:	2b80      	cmp	r3, #128	@ 0x80
 8017d96:	d00a      	beq.n	8017dae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017d98:	7bbb      	ldrb	r3, [r7, #14]
 8017d9a:	4619      	mov	r1, r3
 8017d9c:	6878      	ldr	r0, [r7, #4]
 8017d9e:	f001 f9a5 	bl	80190ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017da2:	2180      	movs	r1, #128	@ 0x80
 8017da4:	6878      	ldr	r0, [r7, #4]
 8017da6:	f001 f9a1 	bl	80190ec <USBD_LL_StallEP>
 8017daa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017dac:	e020      	b.n	8017df0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8017dae:	6839      	ldr	r1, [r7, #0]
 8017db0:	6878      	ldr	r0, [r7, #4]
 8017db2:	f000 fca4 	bl	80186fe <USBD_CtlError>
              break;
 8017db6:	e01b      	b.n	8017df0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017db8:	683b      	ldr	r3, [r7, #0]
 8017dba:	885b      	ldrh	r3, [r3, #2]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d10e      	bne.n	8017dde <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017dc0:	7bbb      	ldrb	r3, [r7, #14]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d00b      	beq.n	8017dde <USBD_StdEPReq+0xfe>
 8017dc6:	7bbb      	ldrb	r3, [r7, #14]
 8017dc8:	2b80      	cmp	r3, #128	@ 0x80
 8017dca:	d008      	beq.n	8017dde <USBD_StdEPReq+0xfe>
 8017dcc:	683b      	ldr	r3, [r7, #0]
 8017dce:	88db      	ldrh	r3, [r3, #6]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d104      	bne.n	8017dde <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017dd4:	7bbb      	ldrb	r3, [r7, #14]
 8017dd6:	4619      	mov	r1, r3
 8017dd8:	6878      	ldr	r0, [r7, #4]
 8017dda:	f001 f987 	bl	80190ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8017dde:	6878      	ldr	r0, [r7, #4]
 8017de0:	f000 fd64 	bl	80188ac <USBD_CtlSendStatus>

              break;
 8017de4:	e004      	b.n	8017df0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8017de6:	6839      	ldr	r1, [r7, #0]
 8017de8:	6878      	ldr	r0, [r7, #4]
 8017dea:	f000 fc88 	bl	80186fe <USBD_CtlError>
              break;
 8017dee:	bf00      	nop
          }
          break;
 8017df0:	e107      	b.n	8018002 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017df8:	b2db      	uxtb	r3, r3
 8017dfa:	2b02      	cmp	r3, #2
 8017dfc:	d002      	beq.n	8017e04 <USBD_StdEPReq+0x124>
 8017dfe:	2b03      	cmp	r3, #3
 8017e00:	d016      	beq.n	8017e30 <USBD_StdEPReq+0x150>
 8017e02:	e04b      	b.n	8017e9c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017e04:	7bbb      	ldrb	r3, [r7, #14]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d00d      	beq.n	8017e26 <USBD_StdEPReq+0x146>
 8017e0a:	7bbb      	ldrb	r3, [r7, #14]
 8017e0c:	2b80      	cmp	r3, #128	@ 0x80
 8017e0e:	d00a      	beq.n	8017e26 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017e10:	7bbb      	ldrb	r3, [r7, #14]
 8017e12:	4619      	mov	r1, r3
 8017e14:	6878      	ldr	r0, [r7, #4]
 8017e16:	f001 f969 	bl	80190ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017e1a:	2180      	movs	r1, #128	@ 0x80
 8017e1c:	6878      	ldr	r0, [r7, #4]
 8017e1e:	f001 f965 	bl	80190ec <USBD_LL_StallEP>
 8017e22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017e24:	e040      	b.n	8017ea8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8017e26:	6839      	ldr	r1, [r7, #0]
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	f000 fc68 	bl	80186fe <USBD_CtlError>
              break;
 8017e2e:	e03b      	b.n	8017ea8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017e30:	683b      	ldr	r3, [r7, #0]
 8017e32:	885b      	ldrh	r3, [r3, #2]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d136      	bne.n	8017ea6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017e38:	7bbb      	ldrb	r3, [r7, #14]
 8017e3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d004      	beq.n	8017e4c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8017e42:	7bbb      	ldrb	r3, [r7, #14]
 8017e44:	4619      	mov	r1, r3
 8017e46:	6878      	ldr	r0, [r7, #4]
 8017e48:	f001 f96f 	bl	801912a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017e4c:	6878      	ldr	r0, [r7, #4]
 8017e4e:	f000 fd2d 	bl	80188ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8017e52:	7bbb      	ldrb	r3, [r7, #14]
 8017e54:	4619      	mov	r1, r3
 8017e56:	6878      	ldr	r0, [r7, #4]
 8017e58:	f7ff fde4 	bl	8017a24 <USBD_CoreFindEP>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017e60:	7b7b      	ldrb	r3, [r7, #13]
 8017e62:	2bff      	cmp	r3, #255	@ 0xff
 8017e64:	d01f      	beq.n	8017ea6 <USBD_StdEPReq+0x1c6>
 8017e66:	7b7b      	ldrb	r3, [r7, #13]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d11c      	bne.n	8017ea6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8017e6c:	7b7a      	ldrb	r2, [r7, #13]
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8017e74:	7b7a      	ldrb	r2, [r7, #13]
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	32ae      	adds	r2, #174	@ 0xae
 8017e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e7e:	689b      	ldr	r3, [r3, #8]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d010      	beq.n	8017ea6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017e84:	7b7a      	ldrb	r2, [r7, #13]
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	32ae      	adds	r2, #174	@ 0xae
 8017e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e8e:	689b      	ldr	r3, [r3, #8]
 8017e90:	6839      	ldr	r1, [r7, #0]
 8017e92:	6878      	ldr	r0, [r7, #4]
 8017e94:	4798      	blx	r3
 8017e96:	4603      	mov	r3, r0
 8017e98:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8017e9a:	e004      	b.n	8017ea6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8017e9c:	6839      	ldr	r1, [r7, #0]
 8017e9e:	6878      	ldr	r0, [r7, #4]
 8017ea0:	f000 fc2d 	bl	80186fe <USBD_CtlError>
              break;
 8017ea4:	e000      	b.n	8017ea8 <USBD_StdEPReq+0x1c8>
              break;
 8017ea6:	bf00      	nop
          }
          break;
 8017ea8:	e0ab      	b.n	8018002 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017eb0:	b2db      	uxtb	r3, r3
 8017eb2:	2b02      	cmp	r3, #2
 8017eb4:	d002      	beq.n	8017ebc <USBD_StdEPReq+0x1dc>
 8017eb6:	2b03      	cmp	r3, #3
 8017eb8:	d032      	beq.n	8017f20 <USBD_StdEPReq+0x240>
 8017eba:	e097      	b.n	8017fec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017ebc:	7bbb      	ldrb	r3, [r7, #14]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d007      	beq.n	8017ed2 <USBD_StdEPReq+0x1f2>
 8017ec2:	7bbb      	ldrb	r3, [r7, #14]
 8017ec4:	2b80      	cmp	r3, #128	@ 0x80
 8017ec6:	d004      	beq.n	8017ed2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8017ec8:	6839      	ldr	r1, [r7, #0]
 8017eca:	6878      	ldr	r0, [r7, #4]
 8017ecc:	f000 fc17 	bl	80186fe <USBD_CtlError>
                break;
 8017ed0:	e091      	b.n	8017ff6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017ed2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	da0b      	bge.n	8017ef2 <USBD_StdEPReq+0x212>
 8017eda:	7bbb      	ldrb	r3, [r7, #14]
 8017edc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017ee0:	4613      	mov	r3, r2
 8017ee2:	009b      	lsls	r3, r3, #2
 8017ee4:	4413      	add	r3, r2
 8017ee6:	009b      	lsls	r3, r3, #2
 8017ee8:	3310      	adds	r3, #16
 8017eea:	687a      	ldr	r2, [r7, #4]
 8017eec:	4413      	add	r3, r2
 8017eee:	3304      	adds	r3, #4
 8017ef0:	e00b      	b.n	8017f0a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017ef2:	7bbb      	ldrb	r3, [r7, #14]
 8017ef4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017ef8:	4613      	mov	r3, r2
 8017efa:	009b      	lsls	r3, r3, #2
 8017efc:	4413      	add	r3, r2
 8017efe:	009b      	lsls	r3, r3, #2
 8017f00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017f04:	687a      	ldr	r2, [r7, #4]
 8017f06:	4413      	add	r3, r2
 8017f08:	3304      	adds	r3, #4
 8017f0a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017f0c:	68bb      	ldr	r3, [r7, #8]
 8017f0e:	2200      	movs	r2, #0
 8017f10:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017f12:	68bb      	ldr	r3, [r7, #8]
 8017f14:	2202      	movs	r2, #2
 8017f16:	4619      	mov	r1, r3
 8017f18:	6878      	ldr	r0, [r7, #4]
 8017f1a:	f000 fc6d 	bl	80187f8 <USBD_CtlSendData>
              break;
 8017f1e:	e06a      	b.n	8017ff6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017f20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	da11      	bge.n	8017f4c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017f28:	7bbb      	ldrb	r3, [r7, #14]
 8017f2a:	f003 020f 	and.w	r2, r3, #15
 8017f2e:	6879      	ldr	r1, [r7, #4]
 8017f30:	4613      	mov	r3, r2
 8017f32:	009b      	lsls	r3, r3, #2
 8017f34:	4413      	add	r3, r2
 8017f36:	009b      	lsls	r3, r3, #2
 8017f38:	440b      	add	r3, r1
 8017f3a:	3324      	adds	r3, #36	@ 0x24
 8017f3c:	881b      	ldrh	r3, [r3, #0]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d117      	bne.n	8017f72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017f42:	6839      	ldr	r1, [r7, #0]
 8017f44:	6878      	ldr	r0, [r7, #4]
 8017f46:	f000 fbda 	bl	80186fe <USBD_CtlError>
                  break;
 8017f4a:	e054      	b.n	8017ff6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017f4c:	7bbb      	ldrb	r3, [r7, #14]
 8017f4e:	f003 020f 	and.w	r2, r3, #15
 8017f52:	6879      	ldr	r1, [r7, #4]
 8017f54:	4613      	mov	r3, r2
 8017f56:	009b      	lsls	r3, r3, #2
 8017f58:	4413      	add	r3, r2
 8017f5a:	009b      	lsls	r3, r3, #2
 8017f5c:	440b      	add	r3, r1
 8017f5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017f62:	881b      	ldrh	r3, [r3, #0]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d104      	bne.n	8017f72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017f68:	6839      	ldr	r1, [r7, #0]
 8017f6a:	6878      	ldr	r0, [r7, #4]
 8017f6c:	f000 fbc7 	bl	80186fe <USBD_CtlError>
                  break;
 8017f70:	e041      	b.n	8017ff6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017f72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	da0b      	bge.n	8017f92 <USBD_StdEPReq+0x2b2>
 8017f7a:	7bbb      	ldrb	r3, [r7, #14]
 8017f7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017f80:	4613      	mov	r3, r2
 8017f82:	009b      	lsls	r3, r3, #2
 8017f84:	4413      	add	r3, r2
 8017f86:	009b      	lsls	r3, r3, #2
 8017f88:	3310      	adds	r3, #16
 8017f8a:	687a      	ldr	r2, [r7, #4]
 8017f8c:	4413      	add	r3, r2
 8017f8e:	3304      	adds	r3, #4
 8017f90:	e00b      	b.n	8017faa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017f92:	7bbb      	ldrb	r3, [r7, #14]
 8017f94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017f98:	4613      	mov	r3, r2
 8017f9a:	009b      	lsls	r3, r3, #2
 8017f9c:	4413      	add	r3, r2
 8017f9e:	009b      	lsls	r3, r3, #2
 8017fa0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017fa4:	687a      	ldr	r2, [r7, #4]
 8017fa6:	4413      	add	r3, r2
 8017fa8:	3304      	adds	r3, #4
 8017faa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017fac:	7bbb      	ldrb	r3, [r7, #14]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d002      	beq.n	8017fb8 <USBD_StdEPReq+0x2d8>
 8017fb2:	7bbb      	ldrb	r3, [r7, #14]
 8017fb4:	2b80      	cmp	r3, #128	@ 0x80
 8017fb6:	d103      	bne.n	8017fc0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8017fb8:	68bb      	ldr	r3, [r7, #8]
 8017fba:	2200      	movs	r2, #0
 8017fbc:	601a      	str	r2, [r3, #0]
 8017fbe:	e00e      	b.n	8017fde <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017fc0:	7bbb      	ldrb	r3, [r7, #14]
 8017fc2:	4619      	mov	r1, r3
 8017fc4:	6878      	ldr	r0, [r7, #4]
 8017fc6:	f001 f8cf 	bl	8019168 <USBD_LL_IsStallEP>
 8017fca:	4603      	mov	r3, r0
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d003      	beq.n	8017fd8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8017fd0:	68bb      	ldr	r3, [r7, #8]
 8017fd2:	2201      	movs	r2, #1
 8017fd4:	601a      	str	r2, [r3, #0]
 8017fd6:	e002      	b.n	8017fde <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8017fd8:	68bb      	ldr	r3, [r7, #8]
 8017fda:	2200      	movs	r2, #0
 8017fdc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017fde:	68bb      	ldr	r3, [r7, #8]
 8017fe0:	2202      	movs	r2, #2
 8017fe2:	4619      	mov	r1, r3
 8017fe4:	6878      	ldr	r0, [r7, #4]
 8017fe6:	f000 fc07 	bl	80187f8 <USBD_CtlSendData>
              break;
 8017fea:	e004      	b.n	8017ff6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8017fec:	6839      	ldr	r1, [r7, #0]
 8017fee:	6878      	ldr	r0, [r7, #4]
 8017ff0:	f000 fb85 	bl	80186fe <USBD_CtlError>
              break;
 8017ff4:	bf00      	nop
          }
          break;
 8017ff6:	e004      	b.n	8018002 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8017ff8:	6839      	ldr	r1, [r7, #0]
 8017ffa:	6878      	ldr	r0, [r7, #4]
 8017ffc:	f000 fb7f 	bl	80186fe <USBD_CtlError>
          break;
 8018000:	bf00      	nop
      }
      break;
 8018002:	e005      	b.n	8018010 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8018004:	6839      	ldr	r1, [r7, #0]
 8018006:	6878      	ldr	r0, [r7, #4]
 8018008:	f000 fb79 	bl	80186fe <USBD_CtlError>
      break;
 801800c:	e000      	b.n	8018010 <USBD_StdEPReq+0x330>
      break;
 801800e:	bf00      	nop
  }

  return ret;
 8018010:	7bfb      	ldrb	r3, [r7, #15]
}
 8018012:	4618      	mov	r0, r3
 8018014:	3710      	adds	r7, #16
 8018016:	46bd      	mov	sp, r7
 8018018:	bd80      	pop	{r7, pc}
	...

0801801c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801801c:	b580      	push	{r7, lr}
 801801e:	b084      	sub	sp, #16
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
 8018024:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018026:	2300      	movs	r3, #0
 8018028:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801802a:	2300      	movs	r3, #0
 801802c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801802e:	2300      	movs	r3, #0
 8018030:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8018032:	683b      	ldr	r3, [r7, #0]
 8018034:	885b      	ldrh	r3, [r3, #2]
 8018036:	0a1b      	lsrs	r3, r3, #8
 8018038:	b29b      	uxth	r3, r3
 801803a:	3b01      	subs	r3, #1
 801803c:	2b0e      	cmp	r3, #14
 801803e:	f200 8152 	bhi.w	80182e6 <USBD_GetDescriptor+0x2ca>
 8018042:	a201      	add	r2, pc, #4	@ (adr r2, 8018048 <USBD_GetDescriptor+0x2c>)
 8018044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018048:	080180b9 	.word	0x080180b9
 801804c:	080180d1 	.word	0x080180d1
 8018050:	08018111 	.word	0x08018111
 8018054:	080182e7 	.word	0x080182e7
 8018058:	080182e7 	.word	0x080182e7
 801805c:	08018287 	.word	0x08018287
 8018060:	080182b3 	.word	0x080182b3
 8018064:	080182e7 	.word	0x080182e7
 8018068:	080182e7 	.word	0x080182e7
 801806c:	080182e7 	.word	0x080182e7
 8018070:	080182e7 	.word	0x080182e7
 8018074:	080182e7 	.word	0x080182e7
 8018078:	080182e7 	.word	0x080182e7
 801807c:	080182e7 	.word	0x080182e7
 8018080:	08018085 	.word	0x08018085
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801808a:	69db      	ldr	r3, [r3, #28]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d00b      	beq.n	80180a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018096:	69db      	ldr	r3, [r3, #28]
 8018098:	687a      	ldr	r2, [r7, #4]
 801809a:	7c12      	ldrb	r2, [r2, #16]
 801809c:	f107 0108 	add.w	r1, r7, #8
 80180a0:	4610      	mov	r0, r2
 80180a2:	4798      	blx	r3
 80180a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80180a6:	e126      	b.n	80182f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80180a8:	6839      	ldr	r1, [r7, #0]
 80180aa:	6878      	ldr	r0, [r7, #4]
 80180ac:	f000 fb27 	bl	80186fe <USBD_CtlError>
        err++;
 80180b0:	7afb      	ldrb	r3, [r7, #11]
 80180b2:	3301      	adds	r3, #1
 80180b4:	72fb      	strb	r3, [r7, #11]
      break;
 80180b6:	e11e      	b.n	80182f6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	687a      	ldr	r2, [r7, #4]
 80180c2:	7c12      	ldrb	r2, [r2, #16]
 80180c4:	f107 0108 	add.w	r1, r7, #8
 80180c8:	4610      	mov	r0, r2
 80180ca:	4798      	blx	r3
 80180cc:	60f8      	str	r0, [r7, #12]
      break;
 80180ce:	e112      	b.n	80182f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	7c1b      	ldrb	r3, [r3, #16]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d10d      	bne.n	80180f4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80180de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180e0:	f107 0208 	add.w	r2, r7, #8
 80180e4:	4610      	mov	r0, r2
 80180e6:	4798      	blx	r3
 80180e8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	3301      	adds	r3, #1
 80180ee:	2202      	movs	r2, #2
 80180f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80180f2:	e100      	b.n	80182f6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80180fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80180fc:	f107 0208 	add.w	r2, r7, #8
 8018100:	4610      	mov	r0, r2
 8018102:	4798      	blx	r3
 8018104:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	3301      	adds	r3, #1
 801810a:	2202      	movs	r2, #2
 801810c:	701a      	strb	r2, [r3, #0]
      break;
 801810e:	e0f2      	b.n	80182f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8018110:	683b      	ldr	r3, [r7, #0]
 8018112:	885b      	ldrh	r3, [r3, #2]
 8018114:	b2db      	uxtb	r3, r3
 8018116:	2b05      	cmp	r3, #5
 8018118:	f200 80ac 	bhi.w	8018274 <USBD_GetDescriptor+0x258>
 801811c:	a201      	add	r2, pc, #4	@ (adr r2, 8018124 <USBD_GetDescriptor+0x108>)
 801811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018122:	bf00      	nop
 8018124:	0801813d 	.word	0x0801813d
 8018128:	08018171 	.word	0x08018171
 801812c:	080181a5 	.word	0x080181a5
 8018130:	080181d9 	.word	0x080181d9
 8018134:	0801820d 	.word	0x0801820d
 8018138:	08018241 	.word	0x08018241
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018142:	685b      	ldr	r3, [r3, #4]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d00b      	beq.n	8018160 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801814e:	685b      	ldr	r3, [r3, #4]
 8018150:	687a      	ldr	r2, [r7, #4]
 8018152:	7c12      	ldrb	r2, [r2, #16]
 8018154:	f107 0108 	add.w	r1, r7, #8
 8018158:	4610      	mov	r0, r2
 801815a:	4798      	blx	r3
 801815c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801815e:	e091      	b.n	8018284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018160:	6839      	ldr	r1, [r7, #0]
 8018162:	6878      	ldr	r0, [r7, #4]
 8018164:	f000 facb 	bl	80186fe <USBD_CtlError>
            err++;
 8018168:	7afb      	ldrb	r3, [r7, #11]
 801816a:	3301      	adds	r3, #1
 801816c:	72fb      	strb	r3, [r7, #11]
          break;
 801816e:	e089      	b.n	8018284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018176:	689b      	ldr	r3, [r3, #8]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d00b      	beq.n	8018194 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018182:	689b      	ldr	r3, [r3, #8]
 8018184:	687a      	ldr	r2, [r7, #4]
 8018186:	7c12      	ldrb	r2, [r2, #16]
 8018188:	f107 0108 	add.w	r1, r7, #8
 801818c:	4610      	mov	r0, r2
 801818e:	4798      	blx	r3
 8018190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018192:	e077      	b.n	8018284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018194:	6839      	ldr	r1, [r7, #0]
 8018196:	6878      	ldr	r0, [r7, #4]
 8018198:	f000 fab1 	bl	80186fe <USBD_CtlError>
            err++;
 801819c:	7afb      	ldrb	r3, [r7, #11]
 801819e:	3301      	adds	r3, #1
 80181a0:	72fb      	strb	r3, [r7, #11]
          break;
 80181a2:	e06f      	b.n	8018284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80181aa:	68db      	ldr	r3, [r3, #12]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d00b      	beq.n	80181c8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80181b6:	68db      	ldr	r3, [r3, #12]
 80181b8:	687a      	ldr	r2, [r7, #4]
 80181ba:	7c12      	ldrb	r2, [r2, #16]
 80181bc:	f107 0108 	add.w	r1, r7, #8
 80181c0:	4610      	mov	r0, r2
 80181c2:	4798      	blx	r3
 80181c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80181c6:	e05d      	b.n	8018284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80181c8:	6839      	ldr	r1, [r7, #0]
 80181ca:	6878      	ldr	r0, [r7, #4]
 80181cc:	f000 fa97 	bl	80186fe <USBD_CtlError>
            err++;
 80181d0:	7afb      	ldrb	r3, [r7, #11]
 80181d2:	3301      	adds	r3, #1
 80181d4:	72fb      	strb	r3, [r7, #11]
          break;
 80181d6:	e055      	b.n	8018284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80181de:	691b      	ldr	r3, [r3, #16]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d00b      	beq.n	80181fc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80181ea:	691b      	ldr	r3, [r3, #16]
 80181ec:	687a      	ldr	r2, [r7, #4]
 80181ee:	7c12      	ldrb	r2, [r2, #16]
 80181f0:	f107 0108 	add.w	r1, r7, #8
 80181f4:	4610      	mov	r0, r2
 80181f6:	4798      	blx	r3
 80181f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80181fa:	e043      	b.n	8018284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80181fc:	6839      	ldr	r1, [r7, #0]
 80181fe:	6878      	ldr	r0, [r7, #4]
 8018200:	f000 fa7d 	bl	80186fe <USBD_CtlError>
            err++;
 8018204:	7afb      	ldrb	r3, [r7, #11]
 8018206:	3301      	adds	r3, #1
 8018208:	72fb      	strb	r3, [r7, #11]
          break;
 801820a:	e03b      	b.n	8018284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018212:	695b      	ldr	r3, [r3, #20]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d00b      	beq.n	8018230 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801821e:	695b      	ldr	r3, [r3, #20]
 8018220:	687a      	ldr	r2, [r7, #4]
 8018222:	7c12      	ldrb	r2, [r2, #16]
 8018224:	f107 0108 	add.w	r1, r7, #8
 8018228:	4610      	mov	r0, r2
 801822a:	4798      	blx	r3
 801822c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801822e:	e029      	b.n	8018284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018230:	6839      	ldr	r1, [r7, #0]
 8018232:	6878      	ldr	r0, [r7, #4]
 8018234:	f000 fa63 	bl	80186fe <USBD_CtlError>
            err++;
 8018238:	7afb      	ldrb	r3, [r7, #11]
 801823a:	3301      	adds	r3, #1
 801823c:	72fb      	strb	r3, [r7, #11]
          break;
 801823e:	e021      	b.n	8018284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018246:	699b      	ldr	r3, [r3, #24]
 8018248:	2b00      	cmp	r3, #0
 801824a:	d00b      	beq.n	8018264 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018252:	699b      	ldr	r3, [r3, #24]
 8018254:	687a      	ldr	r2, [r7, #4]
 8018256:	7c12      	ldrb	r2, [r2, #16]
 8018258:	f107 0108 	add.w	r1, r7, #8
 801825c:	4610      	mov	r0, r2
 801825e:	4798      	blx	r3
 8018260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018262:	e00f      	b.n	8018284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018264:	6839      	ldr	r1, [r7, #0]
 8018266:	6878      	ldr	r0, [r7, #4]
 8018268:	f000 fa49 	bl	80186fe <USBD_CtlError>
            err++;
 801826c:	7afb      	ldrb	r3, [r7, #11]
 801826e:	3301      	adds	r3, #1
 8018270:	72fb      	strb	r3, [r7, #11]
          break;
 8018272:	e007      	b.n	8018284 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018274:	6839      	ldr	r1, [r7, #0]
 8018276:	6878      	ldr	r0, [r7, #4]
 8018278:	f000 fa41 	bl	80186fe <USBD_CtlError>
          err++;
 801827c:	7afb      	ldrb	r3, [r7, #11]
 801827e:	3301      	adds	r3, #1
 8018280:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8018282:	bf00      	nop
      }
      break;
 8018284:	e037      	b.n	80182f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	7c1b      	ldrb	r3, [r3, #16]
 801828a:	2b00      	cmp	r3, #0
 801828c:	d109      	bne.n	80182a2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018296:	f107 0208 	add.w	r2, r7, #8
 801829a:	4610      	mov	r0, r2
 801829c:	4798      	blx	r3
 801829e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80182a0:	e029      	b.n	80182f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80182a2:	6839      	ldr	r1, [r7, #0]
 80182a4:	6878      	ldr	r0, [r7, #4]
 80182a6:	f000 fa2a 	bl	80186fe <USBD_CtlError>
        err++;
 80182aa:	7afb      	ldrb	r3, [r7, #11]
 80182ac:	3301      	adds	r3, #1
 80182ae:	72fb      	strb	r3, [r7, #11]
      break;
 80182b0:	e021      	b.n	80182f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	7c1b      	ldrb	r3, [r3, #16]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d10d      	bne.n	80182d6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80182c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80182c2:	f107 0208 	add.w	r2, r7, #8
 80182c6:	4610      	mov	r0, r2
 80182c8:	4798      	blx	r3
 80182ca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	3301      	adds	r3, #1
 80182d0:	2207      	movs	r2, #7
 80182d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80182d4:	e00f      	b.n	80182f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80182d6:	6839      	ldr	r1, [r7, #0]
 80182d8:	6878      	ldr	r0, [r7, #4]
 80182da:	f000 fa10 	bl	80186fe <USBD_CtlError>
        err++;
 80182de:	7afb      	ldrb	r3, [r7, #11]
 80182e0:	3301      	adds	r3, #1
 80182e2:	72fb      	strb	r3, [r7, #11]
      break;
 80182e4:	e007      	b.n	80182f6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80182e6:	6839      	ldr	r1, [r7, #0]
 80182e8:	6878      	ldr	r0, [r7, #4]
 80182ea:	f000 fa08 	bl	80186fe <USBD_CtlError>
      err++;
 80182ee:	7afb      	ldrb	r3, [r7, #11]
 80182f0:	3301      	adds	r3, #1
 80182f2:	72fb      	strb	r3, [r7, #11]
      break;
 80182f4:	bf00      	nop
  }

  if (err != 0U)
 80182f6:	7afb      	ldrb	r3, [r7, #11]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d11e      	bne.n	801833a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80182fc:	683b      	ldr	r3, [r7, #0]
 80182fe:	88db      	ldrh	r3, [r3, #6]
 8018300:	2b00      	cmp	r3, #0
 8018302:	d016      	beq.n	8018332 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8018304:	893b      	ldrh	r3, [r7, #8]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d00e      	beq.n	8018328 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801830a:	683b      	ldr	r3, [r7, #0]
 801830c:	88da      	ldrh	r2, [r3, #6]
 801830e:	893b      	ldrh	r3, [r7, #8]
 8018310:	4293      	cmp	r3, r2
 8018312:	bf28      	it	cs
 8018314:	4613      	movcs	r3, r2
 8018316:	b29b      	uxth	r3, r3
 8018318:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801831a:	893b      	ldrh	r3, [r7, #8]
 801831c:	461a      	mov	r2, r3
 801831e:	68f9      	ldr	r1, [r7, #12]
 8018320:	6878      	ldr	r0, [r7, #4]
 8018322:	f000 fa69 	bl	80187f8 <USBD_CtlSendData>
 8018326:	e009      	b.n	801833c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018328:	6839      	ldr	r1, [r7, #0]
 801832a:	6878      	ldr	r0, [r7, #4]
 801832c:	f000 f9e7 	bl	80186fe <USBD_CtlError>
 8018330:	e004      	b.n	801833c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8018332:	6878      	ldr	r0, [r7, #4]
 8018334:	f000 faba 	bl	80188ac <USBD_CtlSendStatus>
 8018338:	e000      	b.n	801833c <USBD_GetDescriptor+0x320>
    return;
 801833a:	bf00      	nop
  }
}
 801833c:	3710      	adds	r7, #16
 801833e:	46bd      	mov	sp, r7
 8018340:	bd80      	pop	{r7, pc}
 8018342:	bf00      	nop

08018344 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018344:	b580      	push	{r7, lr}
 8018346:	b084      	sub	sp, #16
 8018348:	af00      	add	r7, sp, #0
 801834a:	6078      	str	r0, [r7, #4]
 801834c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801834e:	683b      	ldr	r3, [r7, #0]
 8018350:	889b      	ldrh	r3, [r3, #4]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d131      	bne.n	80183ba <USBD_SetAddress+0x76>
 8018356:	683b      	ldr	r3, [r7, #0]
 8018358:	88db      	ldrh	r3, [r3, #6]
 801835a:	2b00      	cmp	r3, #0
 801835c:	d12d      	bne.n	80183ba <USBD_SetAddress+0x76>
 801835e:	683b      	ldr	r3, [r7, #0]
 8018360:	885b      	ldrh	r3, [r3, #2]
 8018362:	2b7f      	cmp	r3, #127	@ 0x7f
 8018364:	d829      	bhi.n	80183ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018366:	683b      	ldr	r3, [r7, #0]
 8018368:	885b      	ldrh	r3, [r3, #2]
 801836a:	b2db      	uxtb	r3, r3
 801836c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018370:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018378:	b2db      	uxtb	r3, r3
 801837a:	2b03      	cmp	r3, #3
 801837c:	d104      	bne.n	8018388 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801837e:	6839      	ldr	r1, [r7, #0]
 8018380:	6878      	ldr	r0, [r7, #4]
 8018382:	f000 f9bc 	bl	80186fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018386:	e01d      	b.n	80183c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	7bfa      	ldrb	r2, [r7, #15]
 801838c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018390:	7bfb      	ldrb	r3, [r7, #15]
 8018392:	4619      	mov	r1, r3
 8018394:	6878      	ldr	r0, [r7, #4]
 8018396:	f000 ff13 	bl	80191c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801839a:	6878      	ldr	r0, [r7, #4]
 801839c:	f000 fa86 	bl	80188ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80183a0:	7bfb      	ldrb	r3, [r7, #15]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d004      	beq.n	80183b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	2202      	movs	r2, #2
 80183aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80183ae:	e009      	b.n	80183c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	2201      	movs	r2, #1
 80183b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80183b8:	e004      	b.n	80183c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80183ba:	6839      	ldr	r1, [r7, #0]
 80183bc:	6878      	ldr	r0, [r7, #4]
 80183be:	f000 f99e 	bl	80186fe <USBD_CtlError>
  }
}
 80183c2:	bf00      	nop
 80183c4:	bf00      	nop
 80183c6:	3710      	adds	r7, #16
 80183c8:	46bd      	mov	sp, r7
 80183ca:	bd80      	pop	{r7, pc}

080183cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b084      	sub	sp, #16
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	6078      	str	r0, [r7, #4]
 80183d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80183d6:	2300      	movs	r3, #0
 80183d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80183da:	683b      	ldr	r3, [r7, #0]
 80183dc:	885b      	ldrh	r3, [r3, #2]
 80183de:	b2da      	uxtb	r2, r3
 80183e0:	4b4e      	ldr	r3, [pc, #312]	@ (801851c <USBD_SetConfig+0x150>)
 80183e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80183e4:	4b4d      	ldr	r3, [pc, #308]	@ (801851c <USBD_SetConfig+0x150>)
 80183e6:	781b      	ldrb	r3, [r3, #0]
 80183e8:	2b01      	cmp	r3, #1
 80183ea:	d905      	bls.n	80183f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80183ec:	6839      	ldr	r1, [r7, #0]
 80183ee:	6878      	ldr	r0, [r7, #4]
 80183f0:	f000 f985 	bl	80186fe <USBD_CtlError>
    return USBD_FAIL;
 80183f4:	2303      	movs	r3, #3
 80183f6:	e08c      	b.n	8018512 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80183fe:	b2db      	uxtb	r3, r3
 8018400:	2b02      	cmp	r3, #2
 8018402:	d002      	beq.n	801840a <USBD_SetConfig+0x3e>
 8018404:	2b03      	cmp	r3, #3
 8018406:	d029      	beq.n	801845c <USBD_SetConfig+0x90>
 8018408:	e075      	b.n	80184f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801840a:	4b44      	ldr	r3, [pc, #272]	@ (801851c <USBD_SetConfig+0x150>)
 801840c:	781b      	ldrb	r3, [r3, #0]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d020      	beq.n	8018454 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8018412:	4b42      	ldr	r3, [pc, #264]	@ (801851c <USBD_SetConfig+0x150>)
 8018414:	781b      	ldrb	r3, [r3, #0]
 8018416:	461a      	mov	r2, r3
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801841c:	4b3f      	ldr	r3, [pc, #252]	@ (801851c <USBD_SetConfig+0x150>)
 801841e:	781b      	ldrb	r3, [r3, #0]
 8018420:	4619      	mov	r1, r3
 8018422:	6878      	ldr	r0, [r7, #4]
 8018424:	f7fe ffb9 	bl	801739a <USBD_SetClassConfig>
 8018428:	4603      	mov	r3, r0
 801842a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801842c:	7bfb      	ldrb	r3, [r7, #15]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d008      	beq.n	8018444 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8018432:	6839      	ldr	r1, [r7, #0]
 8018434:	6878      	ldr	r0, [r7, #4]
 8018436:	f000 f962 	bl	80186fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	2202      	movs	r2, #2
 801843e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018442:	e065      	b.n	8018510 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018444:	6878      	ldr	r0, [r7, #4]
 8018446:	f000 fa31 	bl	80188ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	2203      	movs	r2, #3
 801844e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018452:	e05d      	b.n	8018510 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018454:	6878      	ldr	r0, [r7, #4]
 8018456:	f000 fa29 	bl	80188ac <USBD_CtlSendStatus>
      break;
 801845a:	e059      	b.n	8018510 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801845c:	4b2f      	ldr	r3, [pc, #188]	@ (801851c <USBD_SetConfig+0x150>)
 801845e:	781b      	ldrb	r3, [r3, #0]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d112      	bne.n	801848a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	2202      	movs	r2, #2
 8018468:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801846c:	4b2b      	ldr	r3, [pc, #172]	@ (801851c <USBD_SetConfig+0x150>)
 801846e:	781b      	ldrb	r3, [r3, #0]
 8018470:	461a      	mov	r2, r3
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018476:	4b29      	ldr	r3, [pc, #164]	@ (801851c <USBD_SetConfig+0x150>)
 8018478:	781b      	ldrb	r3, [r3, #0]
 801847a:	4619      	mov	r1, r3
 801847c:	6878      	ldr	r0, [r7, #4]
 801847e:	f7fe ffa8 	bl	80173d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8018482:	6878      	ldr	r0, [r7, #4]
 8018484:	f000 fa12 	bl	80188ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018488:	e042      	b.n	8018510 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801848a:	4b24      	ldr	r3, [pc, #144]	@ (801851c <USBD_SetConfig+0x150>)
 801848c:	781b      	ldrb	r3, [r3, #0]
 801848e:	461a      	mov	r2, r3
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	685b      	ldr	r3, [r3, #4]
 8018494:	429a      	cmp	r2, r3
 8018496:	d02a      	beq.n	80184ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	685b      	ldr	r3, [r3, #4]
 801849c:	b2db      	uxtb	r3, r3
 801849e:	4619      	mov	r1, r3
 80184a0:	6878      	ldr	r0, [r7, #4]
 80184a2:	f7fe ff96 	bl	80173d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80184a6:	4b1d      	ldr	r3, [pc, #116]	@ (801851c <USBD_SetConfig+0x150>)
 80184a8:	781b      	ldrb	r3, [r3, #0]
 80184aa:	461a      	mov	r2, r3
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80184b0:	4b1a      	ldr	r3, [pc, #104]	@ (801851c <USBD_SetConfig+0x150>)
 80184b2:	781b      	ldrb	r3, [r3, #0]
 80184b4:	4619      	mov	r1, r3
 80184b6:	6878      	ldr	r0, [r7, #4]
 80184b8:	f7fe ff6f 	bl	801739a <USBD_SetClassConfig>
 80184bc:	4603      	mov	r3, r0
 80184be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80184c0:	7bfb      	ldrb	r3, [r7, #15]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d00f      	beq.n	80184e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80184c6:	6839      	ldr	r1, [r7, #0]
 80184c8:	6878      	ldr	r0, [r7, #4]
 80184ca:	f000 f918 	bl	80186fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	685b      	ldr	r3, [r3, #4]
 80184d2:	b2db      	uxtb	r3, r3
 80184d4:	4619      	mov	r1, r3
 80184d6:	6878      	ldr	r0, [r7, #4]
 80184d8:	f7fe ff7b 	bl	80173d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	2202      	movs	r2, #2
 80184e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80184e4:	e014      	b.n	8018510 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80184e6:	6878      	ldr	r0, [r7, #4]
 80184e8:	f000 f9e0 	bl	80188ac <USBD_CtlSendStatus>
      break;
 80184ec:	e010      	b.n	8018510 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80184ee:	6878      	ldr	r0, [r7, #4]
 80184f0:	f000 f9dc 	bl	80188ac <USBD_CtlSendStatus>
      break;
 80184f4:	e00c      	b.n	8018510 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80184f6:	6839      	ldr	r1, [r7, #0]
 80184f8:	6878      	ldr	r0, [r7, #4]
 80184fa:	f000 f900 	bl	80186fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80184fe:	4b07      	ldr	r3, [pc, #28]	@ (801851c <USBD_SetConfig+0x150>)
 8018500:	781b      	ldrb	r3, [r3, #0]
 8018502:	4619      	mov	r1, r3
 8018504:	6878      	ldr	r0, [r7, #4]
 8018506:	f7fe ff64 	bl	80173d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801850a:	2303      	movs	r3, #3
 801850c:	73fb      	strb	r3, [r7, #15]
      break;
 801850e:	bf00      	nop
  }

  return ret;
 8018510:	7bfb      	ldrb	r3, [r7, #15]
}
 8018512:	4618      	mov	r0, r3
 8018514:	3710      	adds	r7, #16
 8018516:	46bd      	mov	sp, r7
 8018518:	bd80      	pop	{r7, pc}
 801851a:	bf00      	nop
 801851c:	24014510 	.word	0x24014510

08018520 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018520:	b580      	push	{r7, lr}
 8018522:	b082      	sub	sp, #8
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
 8018528:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801852a:	683b      	ldr	r3, [r7, #0]
 801852c:	88db      	ldrh	r3, [r3, #6]
 801852e:	2b01      	cmp	r3, #1
 8018530:	d004      	beq.n	801853c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8018532:	6839      	ldr	r1, [r7, #0]
 8018534:	6878      	ldr	r0, [r7, #4]
 8018536:	f000 f8e2 	bl	80186fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801853a:	e023      	b.n	8018584 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018542:	b2db      	uxtb	r3, r3
 8018544:	2b02      	cmp	r3, #2
 8018546:	dc02      	bgt.n	801854e <USBD_GetConfig+0x2e>
 8018548:	2b00      	cmp	r3, #0
 801854a:	dc03      	bgt.n	8018554 <USBD_GetConfig+0x34>
 801854c:	e015      	b.n	801857a <USBD_GetConfig+0x5a>
 801854e:	2b03      	cmp	r3, #3
 8018550:	d00b      	beq.n	801856a <USBD_GetConfig+0x4a>
 8018552:	e012      	b.n	801857a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	2200      	movs	r2, #0
 8018558:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	3308      	adds	r3, #8
 801855e:	2201      	movs	r2, #1
 8018560:	4619      	mov	r1, r3
 8018562:	6878      	ldr	r0, [r7, #4]
 8018564:	f000 f948 	bl	80187f8 <USBD_CtlSendData>
        break;
 8018568:	e00c      	b.n	8018584 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	3304      	adds	r3, #4
 801856e:	2201      	movs	r2, #1
 8018570:	4619      	mov	r1, r3
 8018572:	6878      	ldr	r0, [r7, #4]
 8018574:	f000 f940 	bl	80187f8 <USBD_CtlSendData>
        break;
 8018578:	e004      	b.n	8018584 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801857a:	6839      	ldr	r1, [r7, #0]
 801857c:	6878      	ldr	r0, [r7, #4]
 801857e:	f000 f8be 	bl	80186fe <USBD_CtlError>
        break;
 8018582:	bf00      	nop
}
 8018584:	bf00      	nop
 8018586:	3708      	adds	r7, #8
 8018588:	46bd      	mov	sp, r7
 801858a:	bd80      	pop	{r7, pc}

0801858c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801858c:	b580      	push	{r7, lr}
 801858e:	b082      	sub	sp, #8
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
 8018594:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801859c:	b2db      	uxtb	r3, r3
 801859e:	3b01      	subs	r3, #1
 80185a0:	2b02      	cmp	r3, #2
 80185a2:	d81e      	bhi.n	80185e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	88db      	ldrh	r3, [r3, #6]
 80185a8:	2b02      	cmp	r3, #2
 80185aa:	d004      	beq.n	80185b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80185ac:	6839      	ldr	r1, [r7, #0]
 80185ae:	6878      	ldr	r0, [r7, #4]
 80185b0:	f000 f8a5 	bl	80186fe <USBD_CtlError>
        break;
 80185b4:	e01a      	b.n	80185ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	2201      	movs	r2, #1
 80185ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d005      	beq.n	80185d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	68db      	ldr	r3, [r3, #12]
 80185ca:	f043 0202 	orr.w	r2, r3, #2
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	330c      	adds	r3, #12
 80185d6:	2202      	movs	r2, #2
 80185d8:	4619      	mov	r1, r3
 80185da:	6878      	ldr	r0, [r7, #4]
 80185dc:	f000 f90c 	bl	80187f8 <USBD_CtlSendData>
      break;
 80185e0:	e004      	b.n	80185ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80185e2:	6839      	ldr	r1, [r7, #0]
 80185e4:	6878      	ldr	r0, [r7, #4]
 80185e6:	f000 f88a 	bl	80186fe <USBD_CtlError>
      break;
 80185ea:	bf00      	nop
  }
}
 80185ec:	bf00      	nop
 80185ee:	3708      	adds	r7, #8
 80185f0:	46bd      	mov	sp, r7
 80185f2:	bd80      	pop	{r7, pc}

080185f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b082      	sub	sp, #8
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	6078      	str	r0, [r7, #4]
 80185fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80185fe:	683b      	ldr	r3, [r7, #0]
 8018600:	885b      	ldrh	r3, [r3, #2]
 8018602:	2b01      	cmp	r3, #1
 8018604:	d107      	bne.n	8018616 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	2201      	movs	r2, #1
 801860a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801860e:	6878      	ldr	r0, [r7, #4]
 8018610:	f000 f94c 	bl	80188ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8018614:	e013      	b.n	801863e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8018616:	683b      	ldr	r3, [r7, #0]
 8018618:	885b      	ldrh	r3, [r3, #2]
 801861a:	2b02      	cmp	r3, #2
 801861c:	d10b      	bne.n	8018636 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801861e:	683b      	ldr	r3, [r7, #0]
 8018620:	889b      	ldrh	r3, [r3, #4]
 8018622:	0a1b      	lsrs	r3, r3, #8
 8018624:	b29b      	uxth	r3, r3
 8018626:	b2da      	uxtb	r2, r3
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801862e:	6878      	ldr	r0, [r7, #4]
 8018630:	f000 f93c 	bl	80188ac <USBD_CtlSendStatus>
}
 8018634:	e003      	b.n	801863e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8018636:	6839      	ldr	r1, [r7, #0]
 8018638:	6878      	ldr	r0, [r7, #4]
 801863a:	f000 f860 	bl	80186fe <USBD_CtlError>
}
 801863e:	bf00      	nop
 8018640:	3708      	adds	r7, #8
 8018642:	46bd      	mov	sp, r7
 8018644:	bd80      	pop	{r7, pc}

08018646 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018646:	b580      	push	{r7, lr}
 8018648:	b082      	sub	sp, #8
 801864a:	af00      	add	r7, sp, #0
 801864c:	6078      	str	r0, [r7, #4]
 801864e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018656:	b2db      	uxtb	r3, r3
 8018658:	3b01      	subs	r3, #1
 801865a:	2b02      	cmp	r3, #2
 801865c:	d80b      	bhi.n	8018676 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801865e:	683b      	ldr	r3, [r7, #0]
 8018660:	885b      	ldrh	r3, [r3, #2]
 8018662:	2b01      	cmp	r3, #1
 8018664:	d10c      	bne.n	8018680 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	2200      	movs	r2, #0
 801866a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801866e:	6878      	ldr	r0, [r7, #4]
 8018670:	f000 f91c 	bl	80188ac <USBD_CtlSendStatus>
      }
      break;
 8018674:	e004      	b.n	8018680 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8018676:	6839      	ldr	r1, [r7, #0]
 8018678:	6878      	ldr	r0, [r7, #4]
 801867a:	f000 f840 	bl	80186fe <USBD_CtlError>
      break;
 801867e:	e000      	b.n	8018682 <USBD_ClrFeature+0x3c>
      break;
 8018680:	bf00      	nop
  }
}
 8018682:	bf00      	nop
 8018684:	3708      	adds	r7, #8
 8018686:	46bd      	mov	sp, r7
 8018688:	bd80      	pop	{r7, pc}

0801868a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801868a:	b580      	push	{r7, lr}
 801868c:	b084      	sub	sp, #16
 801868e:	af00      	add	r7, sp, #0
 8018690:	6078      	str	r0, [r7, #4]
 8018692:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018694:	683b      	ldr	r3, [r7, #0]
 8018696:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	781a      	ldrb	r2, [r3, #0]
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	3301      	adds	r3, #1
 80186a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	781a      	ldrb	r2, [r3, #0]
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	3301      	adds	r3, #1
 80186b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80186b4:	68f8      	ldr	r0, [r7, #12]
 80186b6:	f7ff fa16 	bl	8017ae6 <SWAPBYTE>
 80186ba:	4603      	mov	r3, r0
 80186bc:	461a      	mov	r2, r3
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	3301      	adds	r3, #1
 80186c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	3301      	adds	r3, #1
 80186cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80186ce:	68f8      	ldr	r0, [r7, #12]
 80186d0:	f7ff fa09 	bl	8017ae6 <SWAPBYTE>
 80186d4:	4603      	mov	r3, r0
 80186d6:	461a      	mov	r2, r3
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	3301      	adds	r3, #1
 80186e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	3301      	adds	r3, #1
 80186e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80186e8:	68f8      	ldr	r0, [r7, #12]
 80186ea:	f7ff f9fc 	bl	8017ae6 <SWAPBYTE>
 80186ee:	4603      	mov	r3, r0
 80186f0:	461a      	mov	r2, r3
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	80da      	strh	r2, [r3, #6]
}
 80186f6:	bf00      	nop
 80186f8:	3710      	adds	r7, #16
 80186fa:	46bd      	mov	sp, r7
 80186fc:	bd80      	pop	{r7, pc}

080186fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80186fe:	b580      	push	{r7, lr}
 8018700:	b082      	sub	sp, #8
 8018702:	af00      	add	r7, sp, #0
 8018704:	6078      	str	r0, [r7, #4]
 8018706:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8018708:	2180      	movs	r1, #128	@ 0x80
 801870a:	6878      	ldr	r0, [r7, #4]
 801870c:	f000 fcee 	bl	80190ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8018710:	2100      	movs	r1, #0
 8018712:	6878      	ldr	r0, [r7, #4]
 8018714:	f000 fcea 	bl	80190ec <USBD_LL_StallEP>
}
 8018718:	bf00      	nop
 801871a:	3708      	adds	r7, #8
 801871c:	46bd      	mov	sp, r7
 801871e:	bd80      	pop	{r7, pc}

08018720 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b086      	sub	sp, #24
 8018724:	af00      	add	r7, sp, #0
 8018726:	60f8      	str	r0, [r7, #12]
 8018728:	60b9      	str	r1, [r7, #8]
 801872a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801872c:	2300      	movs	r3, #0
 801872e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d042      	beq.n	80187bc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801873a:	6938      	ldr	r0, [r7, #16]
 801873c:	f000 f842 	bl	80187c4 <USBD_GetLen>
 8018740:	4603      	mov	r3, r0
 8018742:	3301      	adds	r3, #1
 8018744:	005b      	lsls	r3, r3, #1
 8018746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801874a:	d808      	bhi.n	801875e <USBD_GetString+0x3e>
 801874c:	6938      	ldr	r0, [r7, #16]
 801874e:	f000 f839 	bl	80187c4 <USBD_GetLen>
 8018752:	4603      	mov	r3, r0
 8018754:	3301      	adds	r3, #1
 8018756:	b29b      	uxth	r3, r3
 8018758:	005b      	lsls	r3, r3, #1
 801875a:	b29a      	uxth	r2, r3
 801875c:	e001      	b.n	8018762 <USBD_GetString+0x42>
 801875e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8018766:	7dfb      	ldrb	r3, [r7, #23]
 8018768:	68ba      	ldr	r2, [r7, #8]
 801876a:	4413      	add	r3, r2
 801876c:	687a      	ldr	r2, [r7, #4]
 801876e:	7812      	ldrb	r2, [r2, #0]
 8018770:	701a      	strb	r2, [r3, #0]
  idx++;
 8018772:	7dfb      	ldrb	r3, [r7, #23]
 8018774:	3301      	adds	r3, #1
 8018776:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8018778:	7dfb      	ldrb	r3, [r7, #23]
 801877a:	68ba      	ldr	r2, [r7, #8]
 801877c:	4413      	add	r3, r2
 801877e:	2203      	movs	r2, #3
 8018780:	701a      	strb	r2, [r3, #0]
  idx++;
 8018782:	7dfb      	ldrb	r3, [r7, #23]
 8018784:	3301      	adds	r3, #1
 8018786:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8018788:	e013      	b.n	80187b2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801878a:	7dfb      	ldrb	r3, [r7, #23]
 801878c:	68ba      	ldr	r2, [r7, #8]
 801878e:	4413      	add	r3, r2
 8018790:	693a      	ldr	r2, [r7, #16]
 8018792:	7812      	ldrb	r2, [r2, #0]
 8018794:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8018796:	693b      	ldr	r3, [r7, #16]
 8018798:	3301      	adds	r3, #1
 801879a:	613b      	str	r3, [r7, #16]
    idx++;
 801879c:	7dfb      	ldrb	r3, [r7, #23]
 801879e:	3301      	adds	r3, #1
 80187a0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80187a2:	7dfb      	ldrb	r3, [r7, #23]
 80187a4:	68ba      	ldr	r2, [r7, #8]
 80187a6:	4413      	add	r3, r2
 80187a8:	2200      	movs	r2, #0
 80187aa:	701a      	strb	r2, [r3, #0]
    idx++;
 80187ac:	7dfb      	ldrb	r3, [r7, #23]
 80187ae:	3301      	adds	r3, #1
 80187b0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80187b2:	693b      	ldr	r3, [r7, #16]
 80187b4:	781b      	ldrb	r3, [r3, #0]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d1e7      	bne.n	801878a <USBD_GetString+0x6a>
 80187ba:	e000      	b.n	80187be <USBD_GetString+0x9e>
    return;
 80187bc:	bf00      	nop
  }
}
 80187be:	3718      	adds	r7, #24
 80187c0:	46bd      	mov	sp, r7
 80187c2:	bd80      	pop	{r7, pc}

080187c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80187c4:	b480      	push	{r7}
 80187c6:	b085      	sub	sp, #20
 80187c8:	af00      	add	r7, sp, #0
 80187ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80187cc:	2300      	movs	r3, #0
 80187ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80187d4:	e005      	b.n	80187e2 <USBD_GetLen+0x1e>
  {
    len++;
 80187d6:	7bfb      	ldrb	r3, [r7, #15]
 80187d8:	3301      	adds	r3, #1
 80187da:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80187dc:	68bb      	ldr	r3, [r7, #8]
 80187de:	3301      	adds	r3, #1
 80187e0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80187e2:	68bb      	ldr	r3, [r7, #8]
 80187e4:	781b      	ldrb	r3, [r3, #0]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d1f5      	bne.n	80187d6 <USBD_GetLen+0x12>
  }

  return len;
 80187ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80187ec:	4618      	mov	r0, r3
 80187ee:	3714      	adds	r7, #20
 80187f0:	46bd      	mov	sp, r7
 80187f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f6:	4770      	bx	lr

080187f8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b084      	sub	sp, #16
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	60f8      	str	r0, [r7, #12]
 8018800:	60b9      	str	r1, [r7, #8]
 8018802:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	2202      	movs	r2, #2
 8018808:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	687a      	ldr	r2, [r7, #4]
 8018810:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	687a      	ldr	r2, [r7, #4]
 8018816:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	68ba      	ldr	r2, [r7, #8]
 801881c:	2100      	movs	r1, #0
 801881e:	68f8      	ldr	r0, [r7, #12]
 8018820:	f000 fced 	bl	80191fe <USBD_LL_Transmit>

  return USBD_OK;
 8018824:	2300      	movs	r3, #0
}
 8018826:	4618      	mov	r0, r3
 8018828:	3710      	adds	r7, #16
 801882a:	46bd      	mov	sp, r7
 801882c:	bd80      	pop	{r7, pc}

0801882e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801882e:	b580      	push	{r7, lr}
 8018830:	b084      	sub	sp, #16
 8018832:	af00      	add	r7, sp, #0
 8018834:	60f8      	str	r0, [r7, #12]
 8018836:	60b9      	str	r1, [r7, #8]
 8018838:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	68ba      	ldr	r2, [r7, #8]
 801883e:	2100      	movs	r1, #0
 8018840:	68f8      	ldr	r0, [r7, #12]
 8018842:	f000 fcdc 	bl	80191fe <USBD_LL_Transmit>

  return USBD_OK;
 8018846:	2300      	movs	r3, #0
}
 8018848:	4618      	mov	r0, r3
 801884a:	3710      	adds	r7, #16
 801884c:	46bd      	mov	sp, r7
 801884e:	bd80      	pop	{r7, pc}

08018850 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8018850:	b580      	push	{r7, lr}
 8018852:	b084      	sub	sp, #16
 8018854:	af00      	add	r7, sp, #0
 8018856:	60f8      	str	r0, [r7, #12]
 8018858:	60b9      	str	r1, [r7, #8]
 801885a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	2203      	movs	r2, #3
 8018860:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	687a      	ldr	r2, [r7, #4]
 8018868:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801886c:	68fb      	ldr	r3, [r7, #12]
 801886e:	687a      	ldr	r2, [r7, #4]
 8018870:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	68ba      	ldr	r2, [r7, #8]
 8018878:	2100      	movs	r1, #0
 801887a:	68f8      	ldr	r0, [r7, #12]
 801887c:	f000 fce0 	bl	8019240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018880:	2300      	movs	r3, #0
}
 8018882:	4618      	mov	r0, r3
 8018884:	3710      	adds	r7, #16
 8018886:	46bd      	mov	sp, r7
 8018888:	bd80      	pop	{r7, pc}

0801888a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801888a:	b580      	push	{r7, lr}
 801888c:	b084      	sub	sp, #16
 801888e:	af00      	add	r7, sp, #0
 8018890:	60f8      	str	r0, [r7, #12]
 8018892:	60b9      	str	r1, [r7, #8]
 8018894:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	68ba      	ldr	r2, [r7, #8]
 801889a:	2100      	movs	r1, #0
 801889c:	68f8      	ldr	r0, [r7, #12]
 801889e:	f000 fccf 	bl	8019240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80188a2:	2300      	movs	r3, #0
}
 80188a4:	4618      	mov	r0, r3
 80188a6:	3710      	adds	r7, #16
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd80      	pop	{r7, pc}

080188ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80188ac:	b580      	push	{r7, lr}
 80188ae:	b082      	sub	sp, #8
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	2204      	movs	r2, #4
 80188b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80188bc:	2300      	movs	r3, #0
 80188be:	2200      	movs	r2, #0
 80188c0:	2100      	movs	r1, #0
 80188c2:	6878      	ldr	r0, [r7, #4]
 80188c4:	f000 fc9b 	bl	80191fe <USBD_LL_Transmit>

  return USBD_OK;
 80188c8:	2300      	movs	r3, #0
}
 80188ca:	4618      	mov	r0, r3
 80188cc:	3708      	adds	r7, #8
 80188ce:	46bd      	mov	sp, r7
 80188d0:	bd80      	pop	{r7, pc}

080188d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80188d2:	b580      	push	{r7, lr}
 80188d4:	b082      	sub	sp, #8
 80188d6:	af00      	add	r7, sp, #0
 80188d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	2205      	movs	r2, #5
 80188de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80188e2:	2300      	movs	r3, #0
 80188e4:	2200      	movs	r2, #0
 80188e6:	2100      	movs	r1, #0
 80188e8:	6878      	ldr	r0, [r7, #4]
 80188ea:	f000 fca9 	bl	8019240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80188ee:	2300      	movs	r3, #0
}
 80188f0:	4618      	mov	r0, r3
 80188f2:	3708      	adds	r7, #8
 80188f4:	46bd      	mov	sp, r7
 80188f6:	bd80      	pop	{r7, pc}

080188f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80188fc:	2201      	movs	r2, #1
 80188fe:	4913      	ldr	r1, [pc, #76]	@ (801894c <MX_USB_DEVICE_Init+0x54>)
 8018900:	4813      	ldr	r0, [pc, #76]	@ (8018950 <MX_USB_DEVICE_Init+0x58>)
 8018902:	f7fe fccd 	bl	80172a0 <USBD_Init>
 8018906:	4603      	mov	r3, r0
 8018908:	2b00      	cmp	r3, #0
 801890a:	d001      	beq.n	8018910 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801890c:	f7e9 fc68 	bl	80021e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8018910:	4910      	ldr	r1, [pc, #64]	@ (8018954 <MX_USB_DEVICE_Init+0x5c>)
 8018912:	480f      	ldr	r0, [pc, #60]	@ (8018950 <MX_USB_DEVICE_Init+0x58>)
 8018914:	f7fe fcf4 	bl	8017300 <USBD_RegisterClass>
 8018918:	4603      	mov	r3, r0
 801891a:	2b00      	cmp	r3, #0
 801891c:	d001      	beq.n	8018922 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801891e:	f7e9 fc5f 	bl	80021e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8018922:	490d      	ldr	r1, [pc, #52]	@ (8018958 <MX_USB_DEVICE_Init+0x60>)
 8018924:	480a      	ldr	r0, [pc, #40]	@ (8018950 <MX_USB_DEVICE_Init+0x58>)
 8018926:	f7fe fbeb 	bl	8017100 <USBD_CDC_RegisterInterface>
 801892a:	4603      	mov	r3, r0
 801892c:	2b00      	cmp	r3, #0
 801892e:	d001      	beq.n	8018934 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018930:	f7e9 fc56 	bl	80021e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8018934:	4806      	ldr	r0, [pc, #24]	@ (8018950 <MX_USB_DEVICE_Init+0x58>)
 8018936:	f7fe fd19 	bl	801736c <USBD_Start>
 801893a:	4603      	mov	r3, r0
 801893c:	2b00      	cmp	r3, #0
 801893e:	d001      	beq.n	8018944 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018940:	f7e9 fc4e 	bl	80021e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8018944:	f7f5 f91e 	bl	800db84 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018948:	bf00      	nop
 801894a:	bd80      	pop	{r7, pc}
 801894c:	240000e0 	.word	0x240000e0
 8018950:	24014514 	.word	0x24014514
 8018954:	2400004c 	.word	0x2400004c
 8018958:	240000cc 	.word	0x240000cc

0801895c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801895c:	b580      	push	{r7, lr}
 801895e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8018960:	2200      	movs	r2, #0
 8018962:	4905      	ldr	r1, [pc, #20]	@ (8018978 <CDC_Init_HS+0x1c>)
 8018964:	4805      	ldr	r0, [pc, #20]	@ (801897c <CDC_Init_HS+0x20>)
 8018966:	f7fe fbe5 	bl	8017134 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801896a:	4905      	ldr	r1, [pc, #20]	@ (8018980 <CDC_Init_HS+0x24>)
 801896c:	4803      	ldr	r0, [pc, #12]	@ (801897c <CDC_Init_HS+0x20>)
 801896e:	f7fe fc03 	bl	8017178 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018972:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8018974:	4618      	mov	r0, r3
 8018976:	bd80      	pop	{r7, pc}
 8018978:	2401c7f0 	.word	0x2401c7f0
 801897c:	24014514 	.word	0x24014514
 8018980:	240147f0 	.word	0x240147f0

08018984 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8018984:	b480      	push	{r7}
 8018986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8018988:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801898a:	4618      	mov	r0, r3
 801898c:	46bd      	mov	sp, r7
 801898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018992:	4770      	bx	lr

08018994 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018994:	b480      	push	{r7}
 8018996:	b083      	sub	sp, #12
 8018998:	af00      	add	r7, sp, #0
 801899a:	4603      	mov	r3, r0
 801899c:	6039      	str	r1, [r7, #0]
 801899e:	71fb      	strb	r3, [r7, #7]
 80189a0:	4613      	mov	r3, r2
 80189a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80189a4:	79fb      	ldrb	r3, [r7, #7]
 80189a6:	2b23      	cmp	r3, #35	@ 0x23
 80189a8:	d84a      	bhi.n	8018a40 <CDC_Control_HS+0xac>
 80189aa:	a201      	add	r2, pc, #4	@ (adr r2, 80189b0 <CDC_Control_HS+0x1c>)
 80189ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189b0:	08018a41 	.word	0x08018a41
 80189b4:	08018a41 	.word	0x08018a41
 80189b8:	08018a41 	.word	0x08018a41
 80189bc:	08018a41 	.word	0x08018a41
 80189c0:	08018a41 	.word	0x08018a41
 80189c4:	08018a41 	.word	0x08018a41
 80189c8:	08018a41 	.word	0x08018a41
 80189cc:	08018a41 	.word	0x08018a41
 80189d0:	08018a41 	.word	0x08018a41
 80189d4:	08018a41 	.word	0x08018a41
 80189d8:	08018a41 	.word	0x08018a41
 80189dc:	08018a41 	.word	0x08018a41
 80189e0:	08018a41 	.word	0x08018a41
 80189e4:	08018a41 	.word	0x08018a41
 80189e8:	08018a41 	.word	0x08018a41
 80189ec:	08018a41 	.word	0x08018a41
 80189f0:	08018a41 	.word	0x08018a41
 80189f4:	08018a41 	.word	0x08018a41
 80189f8:	08018a41 	.word	0x08018a41
 80189fc:	08018a41 	.word	0x08018a41
 8018a00:	08018a41 	.word	0x08018a41
 8018a04:	08018a41 	.word	0x08018a41
 8018a08:	08018a41 	.word	0x08018a41
 8018a0c:	08018a41 	.word	0x08018a41
 8018a10:	08018a41 	.word	0x08018a41
 8018a14:	08018a41 	.word	0x08018a41
 8018a18:	08018a41 	.word	0x08018a41
 8018a1c:	08018a41 	.word	0x08018a41
 8018a20:	08018a41 	.word	0x08018a41
 8018a24:	08018a41 	.word	0x08018a41
 8018a28:	08018a41 	.word	0x08018a41
 8018a2c:	08018a41 	.word	0x08018a41
 8018a30:	08018a41 	.word	0x08018a41
 8018a34:	08018a41 	.word	0x08018a41
 8018a38:	08018a41 	.word	0x08018a41
 8018a3c:	08018a41 	.word	0x08018a41
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018a40:	bf00      	nop
  }

  return (USBD_OK);
 8018a42:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8018a44:	4618      	mov	r0, r3
 8018a46:	370c      	adds	r7, #12
 8018a48:	46bd      	mov	sp, r7
 8018a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a4e:	4770      	bx	lr

08018a50 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8018a50:	b580      	push	{r7, lr}
 8018a52:	b082      	sub	sp, #8
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	6078      	str	r0, [r7, #4]
 8018a58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8018a5a:	6879      	ldr	r1, [r7, #4]
 8018a5c:	4808      	ldr	r0, [pc, #32]	@ (8018a80 <CDC_Receive_HS+0x30>)
 8018a5e:	f7fe fb8b 	bl	8017178 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8018a62:	4807      	ldr	r0, [pc, #28]	@ (8018a80 <CDC_Receive_HS+0x30>)
 8018a64:	f7fe fbe6 	bl	8017234 <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 8018a68:	683b      	ldr	r3, [r7, #0]
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	461a      	mov	r2, r3
 8018a6e:	6879      	ldr	r1, [r7, #4]
 8018a70:	4804      	ldr	r0, [pc, #16]	@ (8018a84 <CDC_Receive_HS+0x34>)
 8018a72:	f7ed fc11 	bl	8006298 <VibeCheckShell_PutInput>

	return (USBD_OK);
 8018a76:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8018a78:	4618      	mov	r0, r3
 8018a7a:	3708      	adds	r7, #8
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	bd80      	pop	{r7, pc}
 8018a80:	24014514 	.word	0x24014514
 8018a84:	240009b8 	.word	0x240009b8

08018a88 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b084      	sub	sp, #16
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
 8018a90:	460b      	mov	r3, r1
 8018a92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018a94:	2300      	movs	r3, #0
 8018a96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8018a98:	4b0d      	ldr	r3, [pc, #52]	@ (8018ad0 <CDC_Transmit_HS+0x48>)
 8018a9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8018a9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018aa0:	68bb      	ldr	r3, [r7, #8]
 8018aa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d001      	beq.n	8018aae <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8018aaa:	2301      	movs	r3, #1
 8018aac:	e00b      	b.n	8018ac6 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8018aae:	887b      	ldrh	r3, [r7, #2]
 8018ab0:	461a      	mov	r2, r3
 8018ab2:	6879      	ldr	r1, [r7, #4]
 8018ab4:	4806      	ldr	r0, [pc, #24]	@ (8018ad0 <CDC_Transmit_HS+0x48>)
 8018ab6:	f7fe fb3d 	bl	8017134 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8018aba:	4805      	ldr	r0, [pc, #20]	@ (8018ad0 <CDC_Transmit_HS+0x48>)
 8018abc:	f7fe fb7a 	bl	80171b4 <USBD_CDC_TransmitPacket>
 8018ac0:	4603      	mov	r3, r0
 8018ac2:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 12 */
  return result;
 8018ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	3710      	adds	r7, #16
 8018aca:	46bd      	mov	sp, r7
 8018acc:	bd80      	pop	{r7, pc}
 8018ace:	bf00      	nop
 8018ad0:	24014514 	.word	0x24014514

08018ad4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018ad4:	b480      	push	{r7}
 8018ad6:	b087      	sub	sp, #28
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	60f8      	str	r0, [r7, #12]
 8018adc:	60b9      	str	r1, [r7, #8]
 8018ade:	4613      	mov	r3, r2
 8018ae0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8018ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018aea:	4618      	mov	r0, r3
 8018aec:	371c      	adds	r7, #28
 8018aee:	46bd      	mov	sp, r7
 8018af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af4:	4770      	bx	lr
	...

08018af8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018af8:	b480      	push	{r7}
 8018afa:	b083      	sub	sp, #12
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	4603      	mov	r3, r0
 8018b00:	6039      	str	r1, [r7, #0]
 8018b02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8018b04:	683b      	ldr	r3, [r7, #0]
 8018b06:	2212      	movs	r2, #18
 8018b08:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8018b0a:	4b03      	ldr	r3, [pc, #12]	@ (8018b18 <USBD_HS_DeviceDescriptor+0x20>)
}
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	370c      	adds	r7, #12
 8018b10:	46bd      	mov	sp, r7
 8018b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b16:	4770      	bx	lr
 8018b18:	24000100 	.word	0x24000100

08018b1c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b1c:	b480      	push	{r7}
 8018b1e:	b083      	sub	sp, #12
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	4603      	mov	r3, r0
 8018b24:	6039      	str	r1, [r7, #0]
 8018b26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018b28:	683b      	ldr	r3, [r7, #0]
 8018b2a:	2204      	movs	r2, #4
 8018b2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018b2e:	4b03      	ldr	r3, [pc, #12]	@ (8018b3c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8018b30:	4618      	mov	r0, r3
 8018b32:	370c      	adds	r7, #12
 8018b34:	46bd      	mov	sp, r7
 8018b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b3a:	4770      	bx	lr
 8018b3c:	24000114 	.word	0x24000114

08018b40 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b082      	sub	sp, #8
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	4603      	mov	r3, r0
 8018b48:	6039      	str	r1, [r7, #0]
 8018b4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018b4c:	79fb      	ldrb	r3, [r7, #7]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d105      	bne.n	8018b5e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8018b52:	683a      	ldr	r2, [r7, #0]
 8018b54:	4907      	ldr	r1, [pc, #28]	@ (8018b74 <USBD_HS_ProductStrDescriptor+0x34>)
 8018b56:	4808      	ldr	r0, [pc, #32]	@ (8018b78 <USBD_HS_ProductStrDescriptor+0x38>)
 8018b58:	f7ff fde2 	bl	8018720 <USBD_GetString>
 8018b5c:	e004      	b.n	8018b68 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8018b5e:	683a      	ldr	r2, [r7, #0]
 8018b60:	4904      	ldr	r1, [pc, #16]	@ (8018b74 <USBD_HS_ProductStrDescriptor+0x34>)
 8018b62:	4805      	ldr	r0, [pc, #20]	@ (8018b78 <USBD_HS_ProductStrDescriptor+0x38>)
 8018b64:	f7ff fddc 	bl	8018720 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018b68:	4b02      	ldr	r3, [pc, #8]	@ (8018b74 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	3708      	adds	r7, #8
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	bd80      	pop	{r7, pc}
 8018b72:	bf00      	nop
 8018b74:	2401cff0 	.word	0x2401cff0
 8018b78:	0801e440 	.word	0x0801e440

08018b7c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b7c:	b580      	push	{r7, lr}
 8018b7e:	b082      	sub	sp, #8
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	4603      	mov	r3, r0
 8018b84:	6039      	str	r1, [r7, #0]
 8018b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018b88:	683a      	ldr	r2, [r7, #0]
 8018b8a:	4904      	ldr	r1, [pc, #16]	@ (8018b9c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8018b8c:	4804      	ldr	r0, [pc, #16]	@ (8018ba0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8018b8e:	f7ff fdc7 	bl	8018720 <USBD_GetString>
  return USBD_StrDesc;
 8018b92:	4b02      	ldr	r3, [pc, #8]	@ (8018b9c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8018b94:	4618      	mov	r0, r3
 8018b96:	3708      	adds	r7, #8
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	bd80      	pop	{r7, pc}
 8018b9c:	2401cff0 	.word	0x2401cff0
 8018ba0:	0801e44c 	.word	0x0801e44c

08018ba4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b082      	sub	sp, #8
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	4603      	mov	r3, r0
 8018bac:	6039      	str	r1, [r7, #0]
 8018bae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018bb0:	683b      	ldr	r3, [r7, #0]
 8018bb2:	221a      	movs	r2, #26
 8018bb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018bb6:	f000 f843 	bl	8018c40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8018bba:	4b02      	ldr	r3, [pc, #8]	@ (8018bc4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	3708      	adds	r7, #8
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bd80      	pop	{r7, pc}
 8018bc4:	24000118 	.word	0x24000118

08018bc8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	b082      	sub	sp, #8
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	4603      	mov	r3, r0
 8018bd0:	6039      	str	r1, [r7, #0]
 8018bd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018bd4:	79fb      	ldrb	r3, [r7, #7]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d105      	bne.n	8018be6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8018bda:	683a      	ldr	r2, [r7, #0]
 8018bdc:	4907      	ldr	r1, [pc, #28]	@ (8018bfc <USBD_HS_ConfigStrDescriptor+0x34>)
 8018bde:	4808      	ldr	r0, [pc, #32]	@ (8018c00 <USBD_HS_ConfigStrDescriptor+0x38>)
 8018be0:	f7ff fd9e 	bl	8018720 <USBD_GetString>
 8018be4:	e004      	b.n	8018bf0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8018be6:	683a      	ldr	r2, [r7, #0]
 8018be8:	4904      	ldr	r1, [pc, #16]	@ (8018bfc <USBD_HS_ConfigStrDescriptor+0x34>)
 8018bea:	4805      	ldr	r0, [pc, #20]	@ (8018c00 <USBD_HS_ConfigStrDescriptor+0x38>)
 8018bec:	f7ff fd98 	bl	8018720 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018bf0:	4b02      	ldr	r3, [pc, #8]	@ (8018bfc <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	3708      	adds	r7, #8
 8018bf6:	46bd      	mov	sp, r7
 8018bf8:	bd80      	pop	{r7, pc}
 8018bfa:	bf00      	nop
 8018bfc:	2401cff0 	.word	0x2401cff0
 8018c00:	0801e458 	.word	0x0801e458

08018c04 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c04:	b580      	push	{r7, lr}
 8018c06:	b082      	sub	sp, #8
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	4603      	mov	r3, r0
 8018c0c:	6039      	str	r1, [r7, #0]
 8018c0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018c10:	79fb      	ldrb	r3, [r7, #7]
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d105      	bne.n	8018c22 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8018c16:	683a      	ldr	r2, [r7, #0]
 8018c18:	4907      	ldr	r1, [pc, #28]	@ (8018c38 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8018c1a:	4808      	ldr	r0, [pc, #32]	@ (8018c3c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8018c1c:	f7ff fd80 	bl	8018720 <USBD_GetString>
 8018c20:	e004      	b.n	8018c2c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8018c22:	683a      	ldr	r2, [r7, #0]
 8018c24:	4904      	ldr	r1, [pc, #16]	@ (8018c38 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8018c26:	4805      	ldr	r0, [pc, #20]	@ (8018c3c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8018c28:	f7ff fd7a 	bl	8018720 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018c2c:	4b02      	ldr	r3, [pc, #8]	@ (8018c38 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8018c2e:	4618      	mov	r0, r3
 8018c30:	3708      	adds	r7, #8
 8018c32:	46bd      	mov	sp, r7
 8018c34:	bd80      	pop	{r7, pc}
 8018c36:	bf00      	nop
 8018c38:	2401cff0 	.word	0x2401cff0
 8018c3c:	0801e464 	.word	0x0801e464

08018c40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018c40:	b580      	push	{r7, lr}
 8018c42:	b084      	sub	sp, #16
 8018c44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018c46:	4b0f      	ldr	r3, [pc, #60]	@ (8018c84 <Get_SerialNum+0x44>)
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8018c88 <Get_SerialNum+0x48>)
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018c52:	4b0e      	ldr	r3, [pc, #56]	@ (8018c8c <Get_SerialNum+0x4c>)
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018c58:	68fa      	ldr	r2, [r7, #12]
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	4413      	add	r3, r2
 8018c5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d009      	beq.n	8018c7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018c66:	2208      	movs	r2, #8
 8018c68:	4909      	ldr	r1, [pc, #36]	@ (8018c90 <Get_SerialNum+0x50>)
 8018c6a:	68f8      	ldr	r0, [r7, #12]
 8018c6c:	f000 f814 	bl	8018c98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018c70:	2204      	movs	r2, #4
 8018c72:	4908      	ldr	r1, [pc, #32]	@ (8018c94 <Get_SerialNum+0x54>)
 8018c74:	68b8      	ldr	r0, [r7, #8]
 8018c76:	f000 f80f 	bl	8018c98 <IntToUnicode>
  }
}
 8018c7a:	bf00      	nop
 8018c7c:	3710      	adds	r7, #16
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	bd80      	pop	{r7, pc}
 8018c82:	bf00      	nop
 8018c84:	1ff1e800 	.word	0x1ff1e800
 8018c88:	1ff1e804 	.word	0x1ff1e804
 8018c8c:	1ff1e808 	.word	0x1ff1e808
 8018c90:	2400011a 	.word	0x2400011a
 8018c94:	2400012a 	.word	0x2400012a

08018c98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018c98:	b480      	push	{r7}
 8018c9a:	b087      	sub	sp, #28
 8018c9c:	af00      	add	r7, sp, #0
 8018c9e:	60f8      	str	r0, [r7, #12]
 8018ca0:	60b9      	str	r1, [r7, #8]
 8018ca2:	4613      	mov	r3, r2
 8018ca4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018ca6:	2300      	movs	r3, #0
 8018ca8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018caa:	2300      	movs	r3, #0
 8018cac:	75fb      	strb	r3, [r7, #23]
 8018cae:	e027      	b.n	8018d00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	0f1b      	lsrs	r3, r3, #28
 8018cb4:	2b09      	cmp	r3, #9
 8018cb6:	d80b      	bhi.n	8018cd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018cb8:	68fb      	ldr	r3, [r7, #12]
 8018cba:	0f1b      	lsrs	r3, r3, #28
 8018cbc:	b2da      	uxtb	r2, r3
 8018cbe:	7dfb      	ldrb	r3, [r7, #23]
 8018cc0:	005b      	lsls	r3, r3, #1
 8018cc2:	4619      	mov	r1, r3
 8018cc4:	68bb      	ldr	r3, [r7, #8]
 8018cc6:	440b      	add	r3, r1
 8018cc8:	3230      	adds	r2, #48	@ 0x30
 8018cca:	b2d2      	uxtb	r2, r2
 8018ccc:	701a      	strb	r2, [r3, #0]
 8018cce:	e00a      	b.n	8018ce6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	0f1b      	lsrs	r3, r3, #28
 8018cd4:	b2da      	uxtb	r2, r3
 8018cd6:	7dfb      	ldrb	r3, [r7, #23]
 8018cd8:	005b      	lsls	r3, r3, #1
 8018cda:	4619      	mov	r1, r3
 8018cdc:	68bb      	ldr	r3, [r7, #8]
 8018cde:	440b      	add	r3, r1
 8018ce0:	3237      	adds	r2, #55	@ 0x37
 8018ce2:	b2d2      	uxtb	r2, r2
 8018ce4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	011b      	lsls	r3, r3, #4
 8018cea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018cec:	7dfb      	ldrb	r3, [r7, #23]
 8018cee:	005b      	lsls	r3, r3, #1
 8018cf0:	3301      	adds	r3, #1
 8018cf2:	68ba      	ldr	r2, [r7, #8]
 8018cf4:	4413      	add	r3, r2
 8018cf6:	2200      	movs	r2, #0
 8018cf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018cfa:	7dfb      	ldrb	r3, [r7, #23]
 8018cfc:	3301      	adds	r3, #1
 8018cfe:	75fb      	strb	r3, [r7, #23]
 8018d00:	7dfa      	ldrb	r2, [r7, #23]
 8018d02:	79fb      	ldrb	r3, [r7, #7]
 8018d04:	429a      	cmp	r2, r3
 8018d06:	d3d3      	bcc.n	8018cb0 <IntToUnicode+0x18>
  }
}
 8018d08:	bf00      	nop
 8018d0a:	bf00      	nop
 8018d0c:	371c      	adds	r7, #28
 8018d0e:	46bd      	mov	sp, r7
 8018d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d14:	4770      	bx	lr
	...

08018d18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018d18:	b580      	push	{r7, lr}
 8018d1a:	b0b2      	sub	sp, #200	@ 0xc8
 8018d1c:	af00      	add	r7, sp, #0
 8018d1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018d20:	f107 0310 	add.w	r3, r7, #16
 8018d24:	22b8      	movs	r2, #184	@ 0xb8
 8018d26:	2100      	movs	r1, #0
 8018d28:	4618      	mov	r0, r3
 8018d2a:	f001 fea6 	bl	801aa7a <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	4a1a      	ldr	r2, [pc, #104]	@ (8018d9c <HAL_PCD_MspInit+0x84>)
 8018d34:	4293      	cmp	r3, r2
 8018d36:	d12c      	bne.n	8018d92 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018d38:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8018d3c:	f04f 0300 	mov.w	r3, #0
 8018d40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018d44:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8018d48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018d4c:	f107 0310 	add.w	r3, r7, #16
 8018d50:	4618      	mov	r0, r3
 8018d52:	f7f5 fe8d 	bl	800ea70 <HAL_RCCEx_PeriphCLKConfig>
 8018d56:	4603      	mov	r3, r0
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d001      	beq.n	8018d60 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8018d5c:	f7e9 fa40 	bl	80021e0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8018d60:	f7f4 ff10 	bl	800db84 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8018d64:	4b0e      	ldr	r3, [pc, #56]	@ (8018da0 <HAL_PCD_MspInit+0x88>)
 8018d66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8018da0 <HAL_PCD_MspInit+0x88>)
 8018d6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8018d70:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8018d74:	4b0a      	ldr	r3, [pc, #40]	@ (8018da0 <HAL_PCD_MspInit+0x88>)
 8018d76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018d7e:	60fb      	str	r3, [r7, #12]
 8018d80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 1);
 8018d82:	2201      	movs	r2, #1
 8018d84:	2101      	movs	r1, #1
 8018d86:	204d      	movs	r0, #77	@ 0x4d
 8018d88:	f7f0 fcc3 	bl	8009712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8018d8c:	204d      	movs	r0, #77	@ 0x4d
 8018d8e:	f7f0 fcda 	bl	8009746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8018d92:	bf00      	nop
 8018d94:	37c8      	adds	r7, #200	@ 0xc8
 8018d96:	46bd      	mov	sp, r7
 8018d98:	bd80      	pop	{r7, pc}
 8018d9a:	bf00      	nop
 8018d9c:	40040000 	.word	0x40040000
 8018da0:	58024400 	.word	0x58024400

08018da4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b082      	sub	sp, #8
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8018db8:	4619      	mov	r1, r3
 8018dba:	4610      	mov	r0, r2
 8018dbc:	f7fe fb23 	bl	8017406 <USBD_LL_SetupStage>
}
 8018dc0:	bf00      	nop
 8018dc2:	3708      	adds	r7, #8
 8018dc4:	46bd      	mov	sp, r7
 8018dc6:	bd80      	pop	{r7, pc}

08018dc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b082      	sub	sp, #8
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
 8018dd0:	460b      	mov	r3, r1
 8018dd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018dda:	78fa      	ldrb	r2, [r7, #3]
 8018ddc:	6879      	ldr	r1, [r7, #4]
 8018dde:	4613      	mov	r3, r2
 8018de0:	00db      	lsls	r3, r3, #3
 8018de2:	4413      	add	r3, r2
 8018de4:	009b      	lsls	r3, r3, #2
 8018de6:	440b      	add	r3, r1
 8018de8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8018dec:	681a      	ldr	r2, [r3, #0]
 8018dee:	78fb      	ldrb	r3, [r7, #3]
 8018df0:	4619      	mov	r1, r3
 8018df2:	f7fe fb5d 	bl	80174b0 <USBD_LL_DataOutStage>
}
 8018df6:	bf00      	nop
 8018df8:	3708      	adds	r7, #8
 8018dfa:	46bd      	mov	sp, r7
 8018dfc:	bd80      	pop	{r7, pc}

08018dfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dfe:	b580      	push	{r7, lr}
 8018e00:	b082      	sub	sp, #8
 8018e02:	af00      	add	r7, sp, #0
 8018e04:	6078      	str	r0, [r7, #4]
 8018e06:	460b      	mov	r3, r1
 8018e08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018e10:	78fa      	ldrb	r2, [r7, #3]
 8018e12:	6879      	ldr	r1, [r7, #4]
 8018e14:	4613      	mov	r3, r2
 8018e16:	00db      	lsls	r3, r3, #3
 8018e18:	4413      	add	r3, r2
 8018e1a:	009b      	lsls	r3, r3, #2
 8018e1c:	440b      	add	r3, r1
 8018e1e:	3320      	adds	r3, #32
 8018e20:	681a      	ldr	r2, [r3, #0]
 8018e22:	78fb      	ldrb	r3, [r7, #3]
 8018e24:	4619      	mov	r1, r3
 8018e26:	f7fe fbf6 	bl	8017616 <USBD_LL_DataInStage>
}
 8018e2a:	bf00      	nop
 8018e2c:	3708      	adds	r7, #8
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	bd80      	pop	{r7, pc}

08018e32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e32:	b580      	push	{r7, lr}
 8018e34:	b082      	sub	sp, #8
 8018e36:	af00      	add	r7, sp, #0
 8018e38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018e40:	4618      	mov	r0, r3
 8018e42:	f7fe fd30 	bl	80178a6 <USBD_LL_SOF>
}
 8018e46:	bf00      	nop
 8018e48:	3708      	adds	r7, #8
 8018e4a:	46bd      	mov	sp, r7
 8018e4c:	bd80      	pop	{r7, pc}

08018e4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e4e:	b580      	push	{r7, lr}
 8018e50:	b084      	sub	sp, #16
 8018e52:	af00      	add	r7, sp, #0
 8018e54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018e56:	2301      	movs	r3, #1
 8018e58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	79db      	ldrb	r3, [r3, #7]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d102      	bne.n	8018e68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018e62:	2300      	movs	r3, #0
 8018e64:	73fb      	strb	r3, [r7, #15]
 8018e66:	e008      	b.n	8018e7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	79db      	ldrb	r3, [r3, #7]
 8018e6c:	2b02      	cmp	r3, #2
 8018e6e:	d102      	bne.n	8018e76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018e70:	2301      	movs	r3, #1
 8018e72:	73fb      	strb	r3, [r7, #15]
 8018e74:	e001      	b.n	8018e7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018e76:	f7e9 f9b3 	bl	80021e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018e80:	7bfa      	ldrb	r2, [r7, #15]
 8018e82:	4611      	mov	r1, r2
 8018e84:	4618      	mov	r0, r3
 8018e86:	f7fe fcca 	bl	801781e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018e90:	4618      	mov	r0, r3
 8018e92:	f7fe fc72 	bl	801777a <USBD_LL_Reset>
}
 8018e96:	bf00      	nop
 8018e98:	3710      	adds	r7, #16
 8018e9a:	46bd      	mov	sp, r7
 8018e9c:	bd80      	pop	{r7, pc}
	...

08018ea0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ea0:	b580      	push	{r7, lr}
 8018ea2:	b082      	sub	sp, #8
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018eae:	4618      	mov	r0, r3
 8018eb0:	f7fe fcc5 	bl	801783e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	687a      	ldr	r2, [r7, #4]
 8018ec0:	6812      	ldr	r2, [r2, #0]
 8018ec2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8018ec6:	f043 0301 	orr.w	r3, r3, #1
 8018eca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	7adb      	ldrb	r3, [r3, #11]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d005      	beq.n	8018ee0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018ed4:	4b04      	ldr	r3, [pc, #16]	@ (8018ee8 <HAL_PCD_SuspendCallback+0x48>)
 8018ed6:	691b      	ldr	r3, [r3, #16]
 8018ed8:	4a03      	ldr	r2, [pc, #12]	@ (8018ee8 <HAL_PCD_SuspendCallback+0x48>)
 8018eda:	f043 0306 	orr.w	r3, r3, #6
 8018ede:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018ee0:	bf00      	nop
 8018ee2:	3708      	adds	r7, #8
 8018ee4:	46bd      	mov	sp, r7
 8018ee6:	bd80      	pop	{r7, pc}
 8018ee8:	e000ed00 	.word	0xe000ed00

08018eec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018eec:	b580      	push	{r7, lr}
 8018eee:	b082      	sub	sp, #8
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018efa:	4618      	mov	r0, r3
 8018efc:	f7fe fcbb 	bl	8017876 <USBD_LL_Resume>
}
 8018f00:	bf00      	nop
 8018f02:	3708      	adds	r7, #8
 8018f04:	46bd      	mov	sp, r7
 8018f06:	bd80      	pop	{r7, pc}

08018f08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b082      	sub	sp, #8
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
 8018f10:	460b      	mov	r3, r1
 8018f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018f1a:	78fa      	ldrb	r2, [r7, #3]
 8018f1c:	4611      	mov	r1, r2
 8018f1e:	4618      	mov	r0, r3
 8018f20:	f7fe fd13 	bl	801794a <USBD_LL_IsoOUTIncomplete>
}
 8018f24:	bf00      	nop
 8018f26:	3708      	adds	r7, #8
 8018f28:	46bd      	mov	sp, r7
 8018f2a:	bd80      	pop	{r7, pc}

08018f2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	b082      	sub	sp, #8
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	6078      	str	r0, [r7, #4]
 8018f34:	460b      	mov	r3, r1
 8018f36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018f3e:	78fa      	ldrb	r2, [r7, #3]
 8018f40:	4611      	mov	r1, r2
 8018f42:	4618      	mov	r0, r3
 8018f44:	f7fe fccf 	bl	80178e6 <USBD_LL_IsoINIncomplete>
}
 8018f48:	bf00      	nop
 8018f4a:	3708      	adds	r7, #8
 8018f4c:	46bd      	mov	sp, r7
 8018f4e:	bd80      	pop	{r7, pc}

08018f50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b082      	sub	sp, #8
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018f5e:	4618      	mov	r0, r3
 8018f60:	f7fe fd25 	bl	80179ae <USBD_LL_DevConnected>
}
 8018f64:	bf00      	nop
 8018f66:	3708      	adds	r7, #8
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	bd80      	pop	{r7, pc}

08018f6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b082      	sub	sp, #8
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	f7fe fd22 	bl	80179c4 <USBD_LL_DevDisconnected>
}
 8018f80:	bf00      	nop
 8018f82:	3708      	adds	r7, #8
 8018f84:	46bd      	mov	sp, r7
 8018f86:	bd80      	pop	{r7, pc}

08018f88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	b082      	sub	sp, #8
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	781b      	ldrb	r3, [r3, #0]
 8018f94:	2b01      	cmp	r3, #1
 8018f96:	d140      	bne.n	801901a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8018f98:	4a22      	ldr	r2, [pc, #136]	@ (8019024 <USBD_LL_Init+0x9c>)
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	4a20      	ldr	r2, [pc, #128]	@ (8019024 <USBD_LL_Init+0x9c>)
 8018fa4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8018fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8019024 <USBD_LL_Init+0x9c>)
 8018faa:	4a1f      	ldr	r2, [pc, #124]	@ (8019028 <USBD_LL_Init+0xa0>)
 8018fac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8018fae:	4b1d      	ldr	r3, [pc, #116]	@ (8019024 <USBD_LL_Init+0x9c>)
 8018fb0:	2209      	movs	r2, #9
 8018fb2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8018fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8019024 <USBD_LL_Init+0x9c>)
 8018fb6:	2202      	movs	r2, #2
 8018fb8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8018fba:	4b1a      	ldr	r3, [pc, #104]	@ (8019024 <USBD_LL_Init+0x9c>)
 8018fbc:	2200      	movs	r2, #0
 8018fbe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8018fc0:	4b18      	ldr	r3, [pc, #96]	@ (8019024 <USBD_LL_Init+0x9c>)
 8018fc2:	2202      	movs	r2, #2
 8018fc4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8018fc6:	4b17      	ldr	r3, [pc, #92]	@ (8019024 <USBD_LL_Init+0x9c>)
 8018fc8:	2200      	movs	r2, #0
 8018fca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8018fcc:	4b15      	ldr	r3, [pc, #84]	@ (8019024 <USBD_LL_Init+0x9c>)
 8018fce:	2200      	movs	r2, #0
 8018fd0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8018fd2:	4b14      	ldr	r3, [pc, #80]	@ (8019024 <USBD_LL_Init+0x9c>)
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8018fd8:	4b12      	ldr	r3, [pc, #72]	@ (8019024 <USBD_LL_Init+0x9c>)
 8018fda:	2200      	movs	r2, #0
 8018fdc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8018fde:	4b11      	ldr	r3, [pc, #68]	@ (8019024 <USBD_LL_Init+0x9c>)
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8018fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8019024 <USBD_LL_Init+0x9c>)
 8018fe6:	2200      	movs	r2, #0
 8018fe8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8018fea:	480e      	ldr	r0, [pc, #56]	@ (8019024 <USBD_LL_Init+0x9c>)
 8018fec:	f7f3 faf1 	bl	800c5d2 <HAL_PCD_Init>
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d001      	beq.n	8018ffa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8018ff6:	f7e9 f8f3 	bl	80021e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8018ffa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018ffe:	4809      	ldr	r0, [pc, #36]	@ (8019024 <USBD_LL_Init+0x9c>)
 8019000:	f7f4 fd45 	bl	800da8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8019004:	2280      	movs	r2, #128	@ 0x80
 8019006:	2100      	movs	r1, #0
 8019008:	4806      	ldr	r0, [pc, #24]	@ (8019024 <USBD_LL_Init+0x9c>)
 801900a:	f7f4 fcf9 	bl	800da00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801900e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8019012:	2101      	movs	r1, #1
 8019014:	4803      	ldr	r0, [pc, #12]	@ (8019024 <USBD_LL_Init+0x9c>)
 8019016:	f7f4 fcf3 	bl	800da00 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801901a:	2300      	movs	r3, #0
}
 801901c:	4618      	mov	r0, r3
 801901e:	3708      	adds	r7, #8
 8019020:	46bd      	mov	sp, r7
 8019022:	bd80      	pop	{r7, pc}
 8019024:	2401d1f0 	.word	0x2401d1f0
 8019028:	40040000 	.word	0x40040000

0801902c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b084      	sub	sp, #16
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019034:	2300      	movs	r3, #0
 8019036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019038:	2300      	movs	r3, #0
 801903a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019042:	4618      	mov	r0, r3
 8019044:	f7f3 fbd1 	bl	800c7ea <HAL_PCD_Start>
 8019048:	4603      	mov	r3, r0
 801904a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801904c:	7bfb      	ldrb	r3, [r7, #15]
 801904e:	4618      	mov	r0, r3
 8019050:	f000 f942 	bl	80192d8 <USBD_Get_USB_Status>
 8019054:	4603      	mov	r3, r0
 8019056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019058:	7bbb      	ldrb	r3, [r7, #14]
}
 801905a:	4618      	mov	r0, r3
 801905c:	3710      	adds	r7, #16
 801905e:	46bd      	mov	sp, r7
 8019060:	bd80      	pop	{r7, pc}

08019062 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019062:	b580      	push	{r7, lr}
 8019064:	b084      	sub	sp, #16
 8019066:	af00      	add	r7, sp, #0
 8019068:	6078      	str	r0, [r7, #4]
 801906a:	4608      	mov	r0, r1
 801906c:	4611      	mov	r1, r2
 801906e:	461a      	mov	r2, r3
 8019070:	4603      	mov	r3, r0
 8019072:	70fb      	strb	r3, [r7, #3]
 8019074:	460b      	mov	r3, r1
 8019076:	70bb      	strb	r3, [r7, #2]
 8019078:	4613      	mov	r3, r2
 801907a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801907c:	2300      	movs	r3, #0
 801907e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019080:	2300      	movs	r3, #0
 8019082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801908a:	78bb      	ldrb	r3, [r7, #2]
 801908c:	883a      	ldrh	r2, [r7, #0]
 801908e:	78f9      	ldrb	r1, [r7, #3]
 8019090:	f7f4 f8d2 	bl	800d238 <HAL_PCD_EP_Open>
 8019094:	4603      	mov	r3, r0
 8019096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019098:	7bfb      	ldrb	r3, [r7, #15]
 801909a:	4618      	mov	r0, r3
 801909c:	f000 f91c 	bl	80192d8 <USBD_Get_USB_Status>
 80190a0:	4603      	mov	r3, r0
 80190a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80190a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80190a6:	4618      	mov	r0, r3
 80190a8:	3710      	adds	r7, #16
 80190aa:	46bd      	mov	sp, r7
 80190ac:	bd80      	pop	{r7, pc}

080190ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80190ae:	b580      	push	{r7, lr}
 80190b0:	b084      	sub	sp, #16
 80190b2:	af00      	add	r7, sp, #0
 80190b4:	6078      	str	r0, [r7, #4]
 80190b6:	460b      	mov	r3, r1
 80190b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190ba:	2300      	movs	r3, #0
 80190bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190be:	2300      	movs	r3, #0
 80190c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80190c8:	78fa      	ldrb	r2, [r7, #3]
 80190ca:	4611      	mov	r1, r2
 80190cc:	4618      	mov	r0, r3
 80190ce:	f7f4 f91b 	bl	800d308 <HAL_PCD_EP_Close>
 80190d2:	4603      	mov	r3, r0
 80190d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190d6:	7bfb      	ldrb	r3, [r7, #15]
 80190d8:	4618      	mov	r0, r3
 80190da:	f000 f8fd 	bl	80192d8 <USBD_Get_USB_Status>
 80190de:	4603      	mov	r3, r0
 80190e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80190e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80190e4:	4618      	mov	r0, r3
 80190e6:	3710      	adds	r7, #16
 80190e8:	46bd      	mov	sp, r7
 80190ea:	bd80      	pop	{r7, pc}

080190ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b084      	sub	sp, #16
 80190f0:	af00      	add	r7, sp, #0
 80190f2:	6078      	str	r0, [r7, #4]
 80190f4:	460b      	mov	r3, r1
 80190f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190f8:	2300      	movs	r3, #0
 80190fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190fc:	2300      	movs	r3, #0
 80190fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019106:	78fa      	ldrb	r2, [r7, #3]
 8019108:	4611      	mov	r1, r2
 801910a:	4618      	mov	r0, r3
 801910c:	f7f4 f9d3 	bl	800d4b6 <HAL_PCD_EP_SetStall>
 8019110:	4603      	mov	r3, r0
 8019112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019114:	7bfb      	ldrb	r3, [r7, #15]
 8019116:	4618      	mov	r0, r3
 8019118:	f000 f8de 	bl	80192d8 <USBD_Get_USB_Status>
 801911c:	4603      	mov	r3, r0
 801911e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019120:	7bbb      	ldrb	r3, [r7, #14]
}
 8019122:	4618      	mov	r0, r3
 8019124:	3710      	adds	r7, #16
 8019126:	46bd      	mov	sp, r7
 8019128:	bd80      	pop	{r7, pc}

0801912a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801912a:	b580      	push	{r7, lr}
 801912c:	b084      	sub	sp, #16
 801912e:	af00      	add	r7, sp, #0
 8019130:	6078      	str	r0, [r7, #4]
 8019132:	460b      	mov	r3, r1
 8019134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019136:	2300      	movs	r3, #0
 8019138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801913a:	2300      	movs	r3, #0
 801913c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019144:	78fa      	ldrb	r2, [r7, #3]
 8019146:	4611      	mov	r1, r2
 8019148:	4618      	mov	r0, r3
 801914a:	f7f4 fa17 	bl	800d57c <HAL_PCD_EP_ClrStall>
 801914e:	4603      	mov	r3, r0
 8019150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019152:	7bfb      	ldrb	r3, [r7, #15]
 8019154:	4618      	mov	r0, r3
 8019156:	f000 f8bf 	bl	80192d8 <USBD_Get_USB_Status>
 801915a:	4603      	mov	r3, r0
 801915c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801915e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019160:	4618      	mov	r0, r3
 8019162:	3710      	adds	r7, #16
 8019164:	46bd      	mov	sp, r7
 8019166:	bd80      	pop	{r7, pc}

08019168 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019168:	b480      	push	{r7}
 801916a:	b085      	sub	sp, #20
 801916c:	af00      	add	r7, sp, #0
 801916e:	6078      	str	r0, [r7, #4]
 8019170:	460b      	mov	r3, r1
 8019172:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801917a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801917c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019180:	2b00      	cmp	r3, #0
 8019182:	da0b      	bge.n	801919c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019184:	78fb      	ldrb	r3, [r7, #3]
 8019186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801918a:	68f9      	ldr	r1, [r7, #12]
 801918c:	4613      	mov	r3, r2
 801918e:	00db      	lsls	r3, r3, #3
 8019190:	4413      	add	r3, r2
 8019192:	009b      	lsls	r3, r3, #2
 8019194:	440b      	add	r3, r1
 8019196:	3316      	adds	r3, #22
 8019198:	781b      	ldrb	r3, [r3, #0]
 801919a:	e00b      	b.n	80191b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801919c:	78fb      	ldrb	r3, [r7, #3]
 801919e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80191a2:	68f9      	ldr	r1, [r7, #12]
 80191a4:	4613      	mov	r3, r2
 80191a6:	00db      	lsls	r3, r3, #3
 80191a8:	4413      	add	r3, r2
 80191aa:	009b      	lsls	r3, r3, #2
 80191ac:	440b      	add	r3, r1
 80191ae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80191b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80191b4:	4618      	mov	r0, r3
 80191b6:	3714      	adds	r7, #20
 80191b8:	46bd      	mov	sp, r7
 80191ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191be:	4770      	bx	lr

080191c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80191c0:	b580      	push	{r7, lr}
 80191c2:	b084      	sub	sp, #16
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	6078      	str	r0, [r7, #4]
 80191c8:	460b      	mov	r3, r1
 80191ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191cc:	2300      	movs	r3, #0
 80191ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191d0:	2300      	movs	r3, #0
 80191d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80191da:	78fa      	ldrb	r2, [r7, #3]
 80191dc:	4611      	mov	r1, r2
 80191de:	4618      	mov	r0, r3
 80191e0:	f7f4 f806 	bl	800d1f0 <HAL_PCD_SetAddress>
 80191e4:	4603      	mov	r3, r0
 80191e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191e8:	7bfb      	ldrb	r3, [r7, #15]
 80191ea:	4618      	mov	r0, r3
 80191ec:	f000 f874 	bl	80192d8 <USBD_Get_USB_Status>
 80191f0:	4603      	mov	r3, r0
 80191f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80191f6:	4618      	mov	r0, r3
 80191f8:	3710      	adds	r7, #16
 80191fa:	46bd      	mov	sp, r7
 80191fc:	bd80      	pop	{r7, pc}

080191fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80191fe:	b580      	push	{r7, lr}
 8019200:	b086      	sub	sp, #24
 8019202:	af00      	add	r7, sp, #0
 8019204:	60f8      	str	r0, [r7, #12]
 8019206:	607a      	str	r2, [r7, #4]
 8019208:	603b      	str	r3, [r7, #0]
 801920a:	460b      	mov	r3, r1
 801920c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801920e:	2300      	movs	r3, #0
 8019210:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019212:	2300      	movs	r3, #0
 8019214:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801921c:	7af9      	ldrb	r1, [r7, #11]
 801921e:	683b      	ldr	r3, [r7, #0]
 8019220:	687a      	ldr	r2, [r7, #4]
 8019222:	f7f4 f90e 	bl	800d442 <HAL_PCD_EP_Transmit>
 8019226:	4603      	mov	r3, r0
 8019228:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801922a:	7dfb      	ldrb	r3, [r7, #23]
 801922c:	4618      	mov	r0, r3
 801922e:	f000 f853 	bl	80192d8 <USBD_Get_USB_Status>
 8019232:	4603      	mov	r3, r0
 8019234:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019236:	7dbb      	ldrb	r3, [r7, #22]
}
 8019238:	4618      	mov	r0, r3
 801923a:	3718      	adds	r7, #24
 801923c:	46bd      	mov	sp, r7
 801923e:	bd80      	pop	{r7, pc}

08019240 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b086      	sub	sp, #24
 8019244:	af00      	add	r7, sp, #0
 8019246:	60f8      	str	r0, [r7, #12]
 8019248:	607a      	str	r2, [r7, #4]
 801924a:	603b      	str	r3, [r7, #0]
 801924c:	460b      	mov	r3, r1
 801924e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019250:	2300      	movs	r3, #0
 8019252:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019254:	2300      	movs	r3, #0
 8019256:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801925e:	7af9      	ldrb	r1, [r7, #11]
 8019260:	683b      	ldr	r3, [r7, #0]
 8019262:	687a      	ldr	r2, [r7, #4]
 8019264:	f7f4 f89a 	bl	800d39c <HAL_PCD_EP_Receive>
 8019268:	4603      	mov	r3, r0
 801926a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801926c:	7dfb      	ldrb	r3, [r7, #23]
 801926e:	4618      	mov	r0, r3
 8019270:	f000 f832 	bl	80192d8 <USBD_Get_USB_Status>
 8019274:	4603      	mov	r3, r0
 8019276:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019278:	7dbb      	ldrb	r3, [r7, #22]
}
 801927a:	4618      	mov	r0, r3
 801927c:	3718      	adds	r7, #24
 801927e:	46bd      	mov	sp, r7
 8019280:	bd80      	pop	{r7, pc}

08019282 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019282:	b580      	push	{r7, lr}
 8019284:	b082      	sub	sp, #8
 8019286:	af00      	add	r7, sp, #0
 8019288:	6078      	str	r0, [r7, #4]
 801928a:	460b      	mov	r3, r1
 801928c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019294:	78fa      	ldrb	r2, [r7, #3]
 8019296:	4611      	mov	r1, r2
 8019298:	4618      	mov	r0, r3
 801929a:	f7f4 f8ba 	bl	800d412 <HAL_PCD_EP_GetRxCount>
 801929e:	4603      	mov	r3, r0
}
 80192a0:	4618      	mov	r0, r3
 80192a2:	3708      	adds	r7, #8
 80192a4:	46bd      	mov	sp, r7
 80192a6:	bd80      	pop	{r7, pc}

080192a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80192a8:	b480      	push	{r7}
 80192aa:	b083      	sub	sp, #12
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80192b0:	4b03      	ldr	r3, [pc, #12]	@ (80192c0 <USBD_static_malloc+0x18>)
}
 80192b2:	4618      	mov	r0, r3
 80192b4:	370c      	adds	r7, #12
 80192b6:	46bd      	mov	sp, r7
 80192b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192bc:	4770      	bx	lr
 80192be:	bf00      	nop
 80192c0:	2401d6d4 	.word	0x2401d6d4

080192c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80192c4:	b480      	push	{r7}
 80192c6:	b083      	sub	sp, #12
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80192cc:	bf00      	nop
 80192ce:	370c      	adds	r7, #12
 80192d0:	46bd      	mov	sp, r7
 80192d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d6:	4770      	bx	lr

080192d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80192d8:	b480      	push	{r7}
 80192da:	b085      	sub	sp, #20
 80192dc:	af00      	add	r7, sp, #0
 80192de:	4603      	mov	r3, r0
 80192e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192e2:	2300      	movs	r3, #0
 80192e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80192e6:	79fb      	ldrb	r3, [r7, #7]
 80192e8:	2b03      	cmp	r3, #3
 80192ea:	d817      	bhi.n	801931c <USBD_Get_USB_Status+0x44>
 80192ec:	a201      	add	r2, pc, #4	@ (adr r2, 80192f4 <USBD_Get_USB_Status+0x1c>)
 80192ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192f2:	bf00      	nop
 80192f4:	08019305 	.word	0x08019305
 80192f8:	0801930b 	.word	0x0801930b
 80192fc:	08019311 	.word	0x08019311
 8019300:	08019317 	.word	0x08019317
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019304:	2300      	movs	r3, #0
 8019306:	73fb      	strb	r3, [r7, #15]
    break;
 8019308:	e00b      	b.n	8019322 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801930a:	2303      	movs	r3, #3
 801930c:	73fb      	strb	r3, [r7, #15]
    break;
 801930e:	e008      	b.n	8019322 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019310:	2301      	movs	r3, #1
 8019312:	73fb      	strb	r3, [r7, #15]
    break;
 8019314:	e005      	b.n	8019322 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019316:	2303      	movs	r3, #3
 8019318:	73fb      	strb	r3, [r7, #15]
    break;
 801931a:	e002      	b.n	8019322 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801931c:	2303      	movs	r3, #3
 801931e:	73fb      	strb	r3, [r7, #15]
    break;
 8019320:	bf00      	nop
  }
  return usb_status;
 8019322:	7bfb      	ldrb	r3, [r7, #15]
}
 8019324:	4618      	mov	r0, r3
 8019326:	3714      	adds	r7, #20
 8019328:	46bd      	mov	sp, r7
 801932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801932e:	4770      	bx	lr

08019330 <atof>:
 8019330:	2100      	movs	r1, #0
 8019332:	f000 bdb7 	b.w	8019ea4 <strtod>

08019336 <atoi>:
 8019336:	220a      	movs	r2, #10
 8019338:	2100      	movs	r1, #0
 801933a:	f000 be39 	b.w	8019fb0 <strtol>

0801933e <sulp>:
 801933e:	b570      	push	{r4, r5, r6, lr}
 8019340:	4604      	mov	r4, r0
 8019342:	460d      	mov	r5, r1
 8019344:	4616      	mov	r6, r2
 8019346:	ec45 4b10 	vmov	d0, r4, r5
 801934a:	f003 f9eb 	bl	801c724 <__ulp>
 801934e:	b17e      	cbz	r6, 8019370 <sulp+0x32>
 8019350:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019354:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019358:	2b00      	cmp	r3, #0
 801935a:	dd09      	ble.n	8019370 <sulp+0x32>
 801935c:	051b      	lsls	r3, r3, #20
 801935e:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8019362:	2000      	movs	r0, #0
 8019364:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8019368:	ec41 0b17 	vmov	d7, r0, r1
 801936c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019370:	bd70      	pop	{r4, r5, r6, pc}
 8019372:	0000      	movs	r0, r0
 8019374:	0000      	movs	r0, r0
	...

08019378 <_strtod_l>:
 8019378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801937c:	ed2d 8b0a 	vpush	{d8-d12}
 8019380:	b097      	sub	sp, #92	@ 0x5c
 8019382:	4688      	mov	r8, r1
 8019384:	920e      	str	r2, [sp, #56]	@ 0x38
 8019386:	2200      	movs	r2, #0
 8019388:	9212      	str	r2, [sp, #72]	@ 0x48
 801938a:	9005      	str	r0, [sp, #20]
 801938c:	f04f 0a00 	mov.w	sl, #0
 8019390:	f04f 0b00 	mov.w	fp, #0
 8019394:	460a      	mov	r2, r1
 8019396:	9211      	str	r2, [sp, #68]	@ 0x44
 8019398:	7811      	ldrb	r1, [r2, #0]
 801939a:	292b      	cmp	r1, #43	@ 0x2b
 801939c:	d04c      	beq.n	8019438 <_strtod_l+0xc0>
 801939e:	d839      	bhi.n	8019414 <_strtod_l+0x9c>
 80193a0:	290d      	cmp	r1, #13
 80193a2:	d833      	bhi.n	801940c <_strtod_l+0x94>
 80193a4:	2908      	cmp	r1, #8
 80193a6:	d833      	bhi.n	8019410 <_strtod_l+0x98>
 80193a8:	2900      	cmp	r1, #0
 80193aa:	d03c      	beq.n	8019426 <_strtod_l+0xae>
 80193ac:	2200      	movs	r2, #0
 80193ae:	9208      	str	r2, [sp, #32]
 80193b0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80193b2:	782a      	ldrb	r2, [r5, #0]
 80193b4:	2a30      	cmp	r2, #48	@ 0x30
 80193b6:	f040 80b5 	bne.w	8019524 <_strtod_l+0x1ac>
 80193ba:	786a      	ldrb	r2, [r5, #1]
 80193bc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80193c0:	2a58      	cmp	r2, #88	@ 0x58
 80193c2:	d170      	bne.n	80194a6 <_strtod_l+0x12e>
 80193c4:	9302      	str	r3, [sp, #8]
 80193c6:	9b08      	ldr	r3, [sp, #32]
 80193c8:	9301      	str	r3, [sp, #4]
 80193ca:	ab12      	add	r3, sp, #72	@ 0x48
 80193cc:	9300      	str	r3, [sp, #0]
 80193ce:	4a8b      	ldr	r2, [pc, #556]	@ (80195fc <_strtod_l+0x284>)
 80193d0:	9805      	ldr	r0, [sp, #20]
 80193d2:	ab13      	add	r3, sp, #76	@ 0x4c
 80193d4:	a911      	add	r1, sp, #68	@ 0x44
 80193d6:	f002 fa97 	bl	801b908 <__gethex>
 80193da:	f010 060f 	ands.w	r6, r0, #15
 80193de:	4604      	mov	r4, r0
 80193e0:	d005      	beq.n	80193ee <_strtod_l+0x76>
 80193e2:	2e06      	cmp	r6, #6
 80193e4:	d12a      	bne.n	801943c <_strtod_l+0xc4>
 80193e6:	3501      	adds	r5, #1
 80193e8:	2300      	movs	r3, #0
 80193ea:	9511      	str	r5, [sp, #68]	@ 0x44
 80193ec:	9308      	str	r3, [sp, #32]
 80193ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	f040 852f 	bne.w	8019e54 <_strtod_l+0xadc>
 80193f6:	9b08      	ldr	r3, [sp, #32]
 80193f8:	ec4b ab10 	vmov	d0, sl, fp
 80193fc:	b1cb      	cbz	r3, 8019432 <_strtod_l+0xba>
 80193fe:	eeb1 0b40 	vneg.f64	d0, d0
 8019402:	b017      	add	sp, #92	@ 0x5c
 8019404:	ecbd 8b0a 	vpop	{d8-d12}
 8019408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801940c:	2920      	cmp	r1, #32
 801940e:	d1cd      	bne.n	80193ac <_strtod_l+0x34>
 8019410:	3201      	adds	r2, #1
 8019412:	e7c0      	b.n	8019396 <_strtod_l+0x1e>
 8019414:	292d      	cmp	r1, #45	@ 0x2d
 8019416:	d1c9      	bne.n	80193ac <_strtod_l+0x34>
 8019418:	2101      	movs	r1, #1
 801941a:	9108      	str	r1, [sp, #32]
 801941c:	1c51      	adds	r1, r2, #1
 801941e:	9111      	str	r1, [sp, #68]	@ 0x44
 8019420:	7852      	ldrb	r2, [r2, #1]
 8019422:	2a00      	cmp	r2, #0
 8019424:	d1c4      	bne.n	80193b0 <_strtod_l+0x38>
 8019426:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019428:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801942c:	2b00      	cmp	r3, #0
 801942e:	f040 850f 	bne.w	8019e50 <_strtod_l+0xad8>
 8019432:	ec4b ab10 	vmov	d0, sl, fp
 8019436:	e7e4      	b.n	8019402 <_strtod_l+0x8a>
 8019438:	2100      	movs	r1, #0
 801943a:	e7ee      	b.n	801941a <_strtod_l+0xa2>
 801943c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801943e:	b13a      	cbz	r2, 8019450 <_strtod_l+0xd8>
 8019440:	2135      	movs	r1, #53	@ 0x35
 8019442:	a814      	add	r0, sp, #80	@ 0x50
 8019444:	f003 fa65 	bl	801c912 <__copybits>
 8019448:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801944a:	9805      	ldr	r0, [sp, #20]
 801944c:	f002 fe36 	bl	801c0bc <_Bfree>
 8019450:	1e73      	subs	r3, r6, #1
 8019452:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019454:	2b04      	cmp	r3, #4
 8019456:	d806      	bhi.n	8019466 <_strtod_l+0xee>
 8019458:	e8df f003 	tbb	[pc, r3]
 801945c:	201d0314 	.word	0x201d0314
 8019460:	14          	.byte	0x14
 8019461:	00          	.byte	0x00
 8019462:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8019466:	05e3      	lsls	r3, r4, #23
 8019468:	bf48      	it	mi
 801946a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801946e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019472:	0d1b      	lsrs	r3, r3, #20
 8019474:	051b      	lsls	r3, r3, #20
 8019476:	2b00      	cmp	r3, #0
 8019478:	d1b9      	bne.n	80193ee <_strtod_l+0x76>
 801947a:	f001 fb6f 	bl	801ab5c <__errno>
 801947e:	2322      	movs	r3, #34	@ 0x22
 8019480:	6003      	str	r3, [r0, #0]
 8019482:	e7b4      	b.n	80193ee <_strtod_l+0x76>
 8019484:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8019488:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801948c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8019490:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019494:	e7e7      	b.n	8019466 <_strtod_l+0xee>
 8019496:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8019604 <_strtod_l+0x28c>
 801949a:	e7e4      	b.n	8019466 <_strtod_l+0xee>
 801949c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80194a0:	f04f 3aff 	mov.w	sl, #4294967295
 80194a4:	e7df      	b.n	8019466 <_strtod_l+0xee>
 80194a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80194a8:	1c5a      	adds	r2, r3, #1
 80194aa:	9211      	str	r2, [sp, #68]	@ 0x44
 80194ac:	785b      	ldrb	r3, [r3, #1]
 80194ae:	2b30      	cmp	r3, #48	@ 0x30
 80194b0:	d0f9      	beq.n	80194a6 <_strtod_l+0x12e>
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d09b      	beq.n	80193ee <_strtod_l+0x76>
 80194b6:	2301      	movs	r3, #1
 80194b8:	2600      	movs	r6, #0
 80194ba:	9307      	str	r3, [sp, #28]
 80194bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80194be:	930a      	str	r3, [sp, #40]	@ 0x28
 80194c0:	46b1      	mov	r9, r6
 80194c2:	4635      	mov	r5, r6
 80194c4:	220a      	movs	r2, #10
 80194c6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80194c8:	7804      	ldrb	r4, [r0, #0]
 80194ca:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80194ce:	b2d9      	uxtb	r1, r3
 80194d0:	2909      	cmp	r1, #9
 80194d2:	d929      	bls.n	8019528 <_strtod_l+0x1b0>
 80194d4:	494a      	ldr	r1, [pc, #296]	@ (8019600 <_strtod_l+0x288>)
 80194d6:	2201      	movs	r2, #1
 80194d8:	f001 fae4 	bl	801aaa4 <strncmp>
 80194dc:	b378      	cbz	r0, 801953e <_strtod_l+0x1c6>
 80194de:	2000      	movs	r0, #0
 80194e0:	4622      	mov	r2, r4
 80194e2:	462b      	mov	r3, r5
 80194e4:	4607      	mov	r7, r0
 80194e6:	9006      	str	r0, [sp, #24]
 80194e8:	2a65      	cmp	r2, #101	@ 0x65
 80194ea:	d001      	beq.n	80194f0 <_strtod_l+0x178>
 80194ec:	2a45      	cmp	r2, #69	@ 0x45
 80194ee:	d117      	bne.n	8019520 <_strtod_l+0x1a8>
 80194f0:	b91b      	cbnz	r3, 80194fa <_strtod_l+0x182>
 80194f2:	9b07      	ldr	r3, [sp, #28]
 80194f4:	4303      	orrs	r3, r0
 80194f6:	d096      	beq.n	8019426 <_strtod_l+0xae>
 80194f8:	2300      	movs	r3, #0
 80194fa:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80194fe:	f108 0201 	add.w	r2, r8, #1
 8019502:	9211      	str	r2, [sp, #68]	@ 0x44
 8019504:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019508:	2a2b      	cmp	r2, #43	@ 0x2b
 801950a:	d06b      	beq.n	80195e4 <_strtod_l+0x26c>
 801950c:	2a2d      	cmp	r2, #45	@ 0x2d
 801950e:	d071      	beq.n	80195f4 <_strtod_l+0x27c>
 8019510:	f04f 0e00 	mov.w	lr, #0
 8019514:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8019518:	2c09      	cmp	r4, #9
 801951a:	d979      	bls.n	8019610 <_strtod_l+0x298>
 801951c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8019520:	2400      	movs	r4, #0
 8019522:	e094      	b.n	801964e <_strtod_l+0x2d6>
 8019524:	2300      	movs	r3, #0
 8019526:	e7c7      	b.n	80194b8 <_strtod_l+0x140>
 8019528:	2d08      	cmp	r5, #8
 801952a:	f100 0001 	add.w	r0, r0, #1
 801952e:	bfd4      	ite	le
 8019530:	fb02 3909 	mlale	r9, r2, r9, r3
 8019534:	fb02 3606 	mlagt	r6, r2, r6, r3
 8019538:	3501      	adds	r5, #1
 801953a:	9011      	str	r0, [sp, #68]	@ 0x44
 801953c:	e7c3      	b.n	80194c6 <_strtod_l+0x14e>
 801953e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019540:	1c5a      	adds	r2, r3, #1
 8019542:	9211      	str	r2, [sp, #68]	@ 0x44
 8019544:	785a      	ldrb	r2, [r3, #1]
 8019546:	b375      	cbz	r5, 80195a6 <_strtod_l+0x22e>
 8019548:	4607      	mov	r7, r0
 801954a:	462b      	mov	r3, r5
 801954c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8019550:	2909      	cmp	r1, #9
 8019552:	d913      	bls.n	801957c <_strtod_l+0x204>
 8019554:	2101      	movs	r1, #1
 8019556:	9106      	str	r1, [sp, #24]
 8019558:	e7c6      	b.n	80194e8 <_strtod_l+0x170>
 801955a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801955c:	1c5a      	adds	r2, r3, #1
 801955e:	9211      	str	r2, [sp, #68]	@ 0x44
 8019560:	785a      	ldrb	r2, [r3, #1]
 8019562:	3001      	adds	r0, #1
 8019564:	2a30      	cmp	r2, #48	@ 0x30
 8019566:	d0f8      	beq.n	801955a <_strtod_l+0x1e2>
 8019568:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801956c:	2b08      	cmp	r3, #8
 801956e:	f200 8476 	bhi.w	8019e5e <_strtod_l+0xae6>
 8019572:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019574:	930a      	str	r3, [sp, #40]	@ 0x28
 8019576:	4607      	mov	r7, r0
 8019578:	2000      	movs	r0, #0
 801957a:	4603      	mov	r3, r0
 801957c:	3a30      	subs	r2, #48	@ 0x30
 801957e:	f100 0101 	add.w	r1, r0, #1
 8019582:	d023      	beq.n	80195cc <_strtod_l+0x254>
 8019584:	440f      	add	r7, r1
 8019586:	eb00 0c03 	add.w	ip, r0, r3
 801958a:	4619      	mov	r1, r3
 801958c:	240a      	movs	r4, #10
 801958e:	4561      	cmp	r1, ip
 8019590:	d10b      	bne.n	80195aa <_strtod_l+0x232>
 8019592:	1c5c      	adds	r4, r3, #1
 8019594:	4403      	add	r3, r0
 8019596:	2b08      	cmp	r3, #8
 8019598:	4404      	add	r4, r0
 801959a:	dc11      	bgt.n	80195c0 <_strtod_l+0x248>
 801959c:	230a      	movs	r3, #10
 801959e:	fb03 2909 	mla	r9, r3, r9, r2
 80195a2:	2100      	movs	r1, #0
 80195a4:	e013      	b.n	80195ce <_strtod_l+0x256>
 80195a6:	4628      	mov	r0, r5
 80195a8:	e7dc      	b.n	8019564 <_strtod_l+0x1ec>
 80195aa:	2908      	cmp	r1, #8
 80195ac:	f101 0101 	add.w	r1, r1, #1
 80195b0:	dc02      	bgt.n	80195b8 <_strtod_l+0x240>
 80195b2:	fb04 f909 	mul.w	r9, r4, r9
 80195b6:	e7ea      	b.n	801958e <_strtod_l+0x216>
 80195b8:	2910      	cmp	r1, #16
 80195ba:	bfd8      	it	le
 80195bc:	4366      	mulle	r6, r4
 80195be:	e7e6      	b.n	801958e <_strtod_l+0x216>
 80195c0:	2b0f      	cmp	r3, #15
 80195c2:	dcee      	bgt.n	80195a2 <_strtod_l+0x22a>
 80195c4:	230a      	movs	r3, #10
 80195c6:	fb03 2606 	mla	r6, r3, r6, r2
 80195ca:	e7ea      	b.n	80195a2 <_strtod_l+0x22a>
 80195cc:	461c      	mov	r4, r3
 80195ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80195d0:	1c5a      	adds	r2, r3, #1
 80195d2:	9211      	str	r2, [sp, #68]	@ 0x44
 80195d4:	785a      	ldrb	r2, [r3, #1]
 80195d6:	4608      	mov	r0, r1
 80195d8:	4623      	mov	r3, r4
 80195da:	e7b7      	b.n	801954c <_strtod_l+0x1d4>
 80195dc:	2301      	movs	r3, #1
 80195de:	2700      	movs	r7, #0
 80195e0:	9306      	str	r3, [sp, #24]
 80195e2:	e786      	b.n	80194f2 <_strtod_l+0x17a>
 80195e4:	f04f 0e00 	mov.w	lr, #0
 80195e8:	f108 0202 	add.w	r2, r8, #2
 80195ec:	9211      	str	r2, [sp, #68]	@ 0x44
 80195ee:	f898 2002 	ldrb.w	r2, [r8, #2]
 80195f2:	e78f      	b.n	8019514 <_strtod_l+0x19c>
 80195f4:	f04f 0e01 	mov.w	lr, #1
 80195f8:	e7f6      	b.n	80195e8 <_strtod_l+0x270>
 80195fa:	bf00      	nop
 80195fc:	0801ef2c 	.word	0x0801ef2c
 8019600:	0801ef14 	.word	0x0801ef14
 8019604:	7ff00000 	.word	0x7ff00000
 8019608:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801960a:	1c54      	adds	r4, r2, #1
 801960c:	9411      	str	r4, [sp, #68]	@ 0x44
 801960e:	7852      	ldrb	r2, [r2, #1]
 8019610:	2a30      	cmp	r2, #48	@ 0x30
 8019612:	d0f9      	beq.n	8019608 <_strtod_l+0x290>
 8019614:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8019618:	2c08      	cmp	r4, #8
 801961a:	d881      	bhi.n	8019520 <_strtod_l+0x1a8>
 801961c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8019620:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019622:	9209      	str	r2, [sp, #36]	@ 0x24
 8019624:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019626:	1c51      	adds	r1, r2, #1
 8019628:	9111      	str	r1, [sp, #68]	@ 0x44
 801962a:	7852      	ldrb	r2, [r2, #1]
 801962c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8019630:	2c09      	cmp	r4, #9
 8019632:	d938      	bls.n	80196a6 <_strtod_l+0x32e>
 8019634:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8019636:	1b0c      	subs	r4, r1, r4
 8019638:	2c08      	cmp	r4, #8
 801963a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 801963e:	dc02      	bgt.n	8019646 <_strtod_l+0x2ce>
 8019640:	4564      	cmp	r4, ip
 8019642:	bfa8      	it	ge
 8019644:	4664      	movge	r4, ip
 8019646:	f1be 0f00 	cmp.w	lr, #0
 801964a:	d000      	beq.n	801964e <_strtod_l+0x2d6>
 801964c:	4264      	negs	r4, r4
 801964e:	2b00      	cmp	r3, #0
 8019650:	d14e      	bne.n	80196f0 <_strtod_l+0x378>
 8019652:	9b07      	ldr	r3, [sp, #28]
 8019654:	4318      	orrs	r0, r3
 8019656:	f47f aeca 	bne.w	80193ee <_strtod_l+0x76>
 801965a:	9b06      	ldr	r3, [sp, #24]
 801965c:	2b00      	cmp	r3, #0
 801965e:	f47f aee2 	bne.w	8019426 <_strtod_l+0xae>
 8019662:	2a69      	cmp	r2, #105	@ 0x69
 8019664:	d027      	beq.n	80196b6 <_strtod_l+0x33e>
 8019666:	dc24      	bgt.n	80196b2 <_strtod_l+0x33a>
 8019668:	2a49      	cmp	r2, #73	@ 0x49
 801966a:	d024      	beq.n	80196b6 <_strtod_l+0x33e>
 801966c:	2a4e      	cmp	r2, #78	@ 0x4e
 801966e:	f47f aeda 	bne.w	8019426 <_strtod_l+0xae>
 8019672:	4997      	ldr	r1, [pc, #604]	@ (80198d0 <_strtod_l+0x558>)
 8019674:	a811      	add	r0, sp, #68	@ 0x44
 8019676:	f002 fb69 	bl	801bd4c <__match>
 801967a:	2800      	cmp	r0, #0
 801967c:	f43f aed3 	beq.w	8019426 <_strtod_l+0xae>
 8019680:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019682:	781b      	ldrb	r3, [r3, #0]
 8019684:	2b28      	cmp	r3, #40	@ 0x28
 8019686:	d12d      	bne.n	80196e4 <_strtod_l+0x36c>
 8019688:	4992      	ldr	r1, [pc, #584]	@ (80198d4 <_strtod_l+0x55c>)
 801968a:	aa14      	add	r2, sp, #80	@ 0x50
 801968c:	a811      	add	r0, sp, #68	@ 0x44
 801968e:	f002 fb71 	bl	801bd74 <__hexnan>
 8019692:	2805      	cmp	r0, #5
 8019694:	d126      	bne.n	80196e4 <_strtod_l+0x36c>
 8019696:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019698:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 801969c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80196a0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80196a4:	e6a3      	b.n	80193ee <_strtod_l+0x76>
 80196a6:	240a      	movs	r4, #10
 80196a8:	fb04 2c0c 	mla	ip, r4, ip, r2
 80196ac:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80196b0:	e7b8      	b.n	8019624 <_strtod_l+0x2ac>
 80196b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80196b4:	e7db      	b.n	801966e <_strtod_l+0x2f6>
 80196b6:	4988      	ldr	r1, [pc, #544]	@ (80198d8 <_strtod_l+0x560>)
 80196b8:	a811      	add	r0, sp, #68	@ 0x44
 80196ba:	f002 fb47 	bl	801bd4c <__match>
 80196be:	2800      	cmp	r0, #0
 80196c0:	f43f aeb1 	beq.w	8019426 <_strtod_l+0xae>
 80196c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80196c6:	4985      	ldr	r1, [pc, #532]	@ (80198dc <_strtod_l+0x564>)
 80196c8:	3b01      	subs	r3, #1
 80196ca:	a811      	add	r0, sp, #68	@ 0x44
 80196cc:	9311      	str	r3, [sp, #68]	@ 0x44
 80196ce:	f002 fb3d 	bl	801bd4c <__match>
 80196d2:	b910      	cbnz	r0, 80196da <_strtod_l+0x362>
 80196d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80196d6:	3301      	adds	r3, #1
 80196d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80196da:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80198f0 <_strtod_l+0x578>
 80196de:	f04f 0a00 	mov.w	sl, #0
 80196e2:	e684      	b.n	80193ee <_strtod_l+0x76>
 80196e4:	487e      	ldr	r0, [pc, #504]	@ (80198e0 <_strtod_l+0x568>)
 80196e6:	f001 fa77 	bl	801abd8 <nan>
 80196ea:	ec5b ab10 	vmov	sl, fp, d0
 80196ee:	e67e      	b.n	80193ee <_strtod_l+0x76>
 80196f0:	ee07 9a90 	vmov	s15, r9
 80196f4:	1be2      	subs	r2, r4, r7
 80196f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80196fa:	2d00      	cmp	r5, #0
 80196fc:	bf08      	it	eq
 80196fe:	461d      	moveq	r5, r3
 8019700:	2b10      	cmp	r3, #16
 8019702:	9209      	str	r2, [sp, #36]	@ 0x24
 8019704:	461a      	mov	r2, r3
 8019706:	bfa8      	it	ge
 8019708:	2210      	movge	r2, #16
 801970a:	2b09      	cmp	r3, #9
 801970c:	ec5b ab17 	vmov	sl, fp, d7
 8019710:	dc15      	bgt.n	801973e <_strtod_l+0x3c6>
 8019712:	1be1      	subs	r1, r4, r7
 8019714:	2900      	cmp	r1, #0
 8019716:	f43f ae6a 	beq.w	80193ee <_strtod_l+0x76>
 801971a:	eba4 0107 	sub.w	r1, r4, r7
 801971e:	dd72      	ble.n	8019806 <_strtod_l+0x48e>
 8019720:	2916      	cmp	r1, #22
 8019722:	dc59      	bgt.n	80197d8 <_strtod_l+0x460>
 8019724:	4b6f      	ldr	r3, [pc, #444]	@ (80198e4 <_strtod_l+0x56c>)
 8019726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019728:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801972c:	ed93 7b00 	vldr	d7, [r3]
 8019730:	ec4b ab16 	vmov	d6, sl, fp
 8019734:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019738:	ec5b ab17 	vmov	sl, fp, d7
 801973c:	e657      	b.n	80193ee <_strtod_l+0x76>
 801973e:	4969      	ldr	r1, [pc, #420]	@ (80198e4 <_strtod_l+0x56c>)
 8019740:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8019744:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8019748:	ee06 6a90 	vmov	s13, r6
 801974c:	2b0f      	cmp	r3, #15
 801974e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8019752:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019756:	ec5b ab16 	vmov	sl, fp, d6
 801975a:	ddda      	ble.n	8019712 <_strtod_l+0x39a>
 801975c:	1a9a      	subs	r2, r3, r2
 801975e:	1be1      	subs	r1, r4, r7
 8019760:	440a      	add	r2, r1
 8019762:	2a00      	cmp	r2, #0
 8019764:	f340 8094 	ble.w	8019890 <_strtod_l+0x518>
 8019768:	f012 000f 	ands.w	r0, r2, #15
 801976c:	d00a      	beq.n	8019784 <_strtod_l+0x40c>
 801976e:	495d      	ldr	r1, [pc, #372]	@ (80198e4 <_strtod_l+0x56c>)
 8019770:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019774:	ed91 7b00 	vldr	d7, [r1]
 8019778:	ec4b ab16 	vmov	d6, sl, fp
 801977c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019780:	ec5b ab17 	vmov	sl, fp, d7
 8019784:	f032 020f 	bics.w	r2, r2, #15
 8019788:	d073      	beq.n	8019872 <_strtod_l+0x4fa>
 801978a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 801978e:	dd47      	ble.n	8019820 <_strtod_l+0x4a8>
 8019790:	2400      	movs	r4, #0
 8019792:	4625      	mov	r5, r4
 8019794:	9407      	str	r4, [sp, #28]
 8019796:	4626      	mov	r6, r4
 8019798:	9a05      	ldr	r2, [sp, #20]
 801979a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80198f0 <_strtod_l+0x578>
 801979e:	2322      	movs	r3, #34	@ 0x22
 80197a0:	6013      	str	r3, [r2, #0]
 80197a2:	f04f 0a00 	mov.w	sl, #0
 80197a6:	9b07      	ldr	r3, [sp, #28]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	f43f ae20 	beq.w	80193ee <_strtod_l+0x76>
 80197ae:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80197b0:	9805      	ldr	r0, [sp, #20]
 80197b2:	f002 fc83 	bl	801c0bc <_Bfree>
 80197b6:	9805      	ldr	r0, [sp, #20]
 80197b8:	4631      	mov	r1, r6
 80197ba:	f002 fc7f 	bl	801c0bc <_Bfree>
 80197be:	9805      	ldr	r0, [sp, #20]
 80197c0:	4629      	mov	r1, r5
 80197c2:	f002 fc7b 	bl	801c0bc <_Bfree>
 80197c6:	9907      	ldr	r1, [sp, #28]
 80197c8:	9805      	ldr	r0, [sp, #20]
 80197ca:	f002 fc77 	bl	801c0bc <_Bfree>
 80197ce:	9805      	ldr	r0, [sp, #20]
 80197d0:	4621      	mov	r1, r4
 80197d2:	f002 fc73 	bl	801c0bc <_Bfree>
 80197d6:	e60a      	b.n	80193ee <_strtod_l+0x76>
 80197d8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80197dc:	1be0      	subs	r0, r4, r7
 80197de:	4281      	cmp	r1, r0
 80197e0:	dbbc      	blt.n	801975c <_strtod_l+0x3e4>
 80197e2:	4a40      	ldr	r2, [pc, #256]	@ (80198e4 <_strtod_l+0x56c>)
 80197e4:	f1c3 030f 	rsb	r3, r3, #15
 80197e8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80197ec:	ed91 7b00 	vldr	d7, [r1]
 80197f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80197f2:	ec4b ab16 	vmov	d6, sl, fp
 80197f6:	1acb      	subs	r3, r1, r3
 80197f8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80197fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019800:	ed92 6b00 	vldr	d6, [r2]
 8019804:	e796      	b.n	8019734 <_strtod_l+0x3bc>
 8019806:	3116      	adds	r1, #22
 8019808:	dba8      	blt.n	801975c <_strtod_l+0x3e4>
 801980a:	4b36      	ldr	r3, [pc, #216]	@ (80198e4 <_strtod_l+0x56c>)
 801980c:	1b3c      	subs	r4, r7, r4
 801980e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8019812:	ed94 7b00 	vldr	d7, [r4]
 8019816:	ec4b ab16 	vmov	d6, sl, fp
 801981a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801981e:	e78b      	b.n	8019738 <_strtod_l+0x3c0>
 8019820:	2000      	movs	r0, #0
 8019822:	ec4b ab17 	vmov	d7, sl, fp
 8019826:	4e30      	ldr	r6, [pc, #192]	@ (80198e8 <_strtod_l+0x570>)
 8019828:	1112      	asrs	r2, r2, #4
 801982a:	4601      	mov	r1, r0
 801982c:	2a01      	cmp	r2, #1
 801982e:	dc23      	bgt.n	8019878 <_strtod_l+0x500>
 8019830:	b108      	cbz	r0, 8019836 <_strtod_l+0x4be>
 8019832:	ec5b ab17 	vmov	sl, fp, d7
 8019836:	4a2c      	ldr	r2, [pc, #176]	@ (80198e8 <_strtod_l+0x570>)
 8019838:	482c      	ldr	r0, [pc, #176]	@ (80198ec <_strtod_l+0x574>)
 801983a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801983e:	ed92 7b00 	vldr	d7, [r2]
 8019842:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8019846:	ec4b ab16 	vmov	d6, sl, fp
 801984a:	4a29      	ldr	r2, [pc, #164]	@ (80198f0 <_strtod_l+0x578>)
 801984c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019850:	ee17 1a90 	vmov	r1, s15
 8019854:	400a      	ands	r2, r1
 8019856:	4282      	cmp	r2, r0
 8019858:	ec5b ab17 	vmov	sl, fp, d7
 801985c:	d898      	bhi.n	8019790 <_strtod_l+0x418>
 801985e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8019862:	4282      	cmp	r2, r0
 8019864:	bf86      	itte	hi
 8019866:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80198f4 <_strtod_l+0x57c>
 801986a:	f04f 3aff 	movhi.w	sl, #4294967295
 801986e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8019872:	2200      	movs	r2, #0
 8019874:	9206      	str	r2, [sp, #24]
 8019876:	e076      	b.n	8019966 <_strtod_l+0x5ee>
 8019878:	f012 0f01 	tst.w	r2, #1
 801987c:	d004      	beq.n	8019888 <_strtod_l+0x510>
 801987e:	ed96 6b00 	vldr	d6, [r6]
 8019882:	2001      	movs	r0, #1
 8019884:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019888:	3101      	adds	r1, #1
 801988a:	1052      	asrs	r2, r2, #1
 801988c:	3608      	adds	r6, #8
 801988e:	e7cd      	b.n	801982c <_strtod_l+0x4b4>
 8019890:	d0ef      	beq.n	8019872 <_strtod_l+0x4fa>
 8019892:	4252      	negs	r2, r2
 8019894:	f012 000f 	ands.w	r0, r2, #15
 8019898:	d00a      	beq.n	80198b0 <_strtod_l+0x538>
 801989a:	4912      	ldr	r1, [pc, #72]	@ (80198e4 <_strtod_l+0x56c>)
 801989c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80198a0:	ed91 7b00 	vldr	d7, [r1]
 80198a4:	ec4b ab16 	vmov	d6, sl, fp
 80198a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80198ac:	ec5b ab17 	vmov	sl, fp, d7
 80198b0:	1112      	asrs	r2, r2, #4
 80198b2:	d0de      	beq.n	8019872 <_strtod_l+0x4fa>
 80198b4:	2a1f      	cmp	r2, #31
 80198b6:	dd1f      	ble.n	80198f8 <_strtod_l+0x580>
 80198b8:	2400      	movs	r4, #0
 80198ba:	4625      	mov	r5, r4
 80198bc:	9407      	str	r4, [sp, #28]
 80198be:	4626      	mov	r6, r4
 80198c0:	9a05      	ldr	r2, [sp, #20]
 80198c2:	2322      	movs	r3, #34	@ 0x22
 80198c4:	f04f 0a00 	mov.w	sl, #0
 80198c8:	f04f 0b00 	mov.w	fp, #0
 80198cc:	6013      	str	r3, [r2, #0]
 80198ce:	e76a      	b.n	80197a6 <_strtod_l+0x42e>
 80198d0:	0801f076 	.word	0x0801f076
 80198d4:	0801ef18 	.word	0x0801ef18
 80198d8:	0801f06e 	.word	0x0801f06e
 80198dc:	0801f0a8 	.word	0x0801f0a8
 80198e0:	0801f334 	.word	0x0801f334
 80198e4:	0801f220 	.word	0x0801f220
 80198e8:	0801f1f8 	.word	0x0801f1f8
 80198ec:	7ca00000 	.word	0x7ca00000
 80198f0:	7ff00000 	.word	0x7ff00000
 80198f4:	7fefffff 	.word	0x7fefffff
 80198f8:	f012 0110 	ands.w	r1, r2, #16
 80198fc:	bf18      	it	ne
 80198fe:	216a      	movne	r1, #106	@ 0x6a
 8019900:	9106      	str	r1, [sp, #24]
 8019902:	ec4b ab17 	vmov	d7, sl, fp
 8019906:	49b0      	ldr	r1, [pc, #704]	@ (8019bc8 <_strtod_l+0x850>)
 8019908:	2000      	movs	r0, #0
 801990a:	07d6      	lsls	r6, r2, #31
 801990c:	d504      	bpl.n	8019918 <_strtod_l+0x5a0>
 801990e:	ed91 6b00 	vldr	d6, [r1]
 8019912:	2001      	movs	r0, #1
 8019914:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019918:	1052      	asrs	r2, r2, #1
 801991a:	f101 0108 	add.w	r1, r1, #8
 801991e:	d1f4      	bne.n	801990a <_strtod_l+0x592>
 8019920:	b108      	cbz	r0, 8019926 <_strtod_l+0x5ae>
 8019922:	ec5b ab17 	vmov	sl, fp, d7
 8019926:	9a06      	ldr	r2, [sp, #24]
 8019928:	b1b2      	cbz	r2, 8019958 <_strtod_l+0x5e0>
 801992a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801992e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8019932:	2a00      	cmp	r2, #0
 8019934:	4658      	mov	r0, fp
 8019936:	dd0f      	ble.n	8019958 <_strtod_l+0x5e0>
 8019938:	2a1f      	cmp	r2, #31
 801993a:	dd55      	ble.n	80199e8 <_strtod_l+0x670>
 801993c:	2a34      	cmp	r2, #52	@ 0x34
 801993e:	bfde      	ittt	le
 8019940:	f04f 32ff 	movle.w	r2, #4294967295
 8019944:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8019948:	408a      	lslle	r2, r1
 801994a:	f04f 0a00 	mov.w	sl, #0
 801994e:	bfcc      	ite	gt
 8019950:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8019954:	ea02 0b00 	andle.w	fp, r2, r0
 8019958:	ec4b ab17 	vmov	d7, sl, fp
 801995c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019964:	d0a8      	beq.n	80198b8 <_strtod_l+0x540>
 8019966:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019968:	9805      	ldr	r0, [sp, #20]
 801996a:	f8cd 9000 	str.w	r9, [sp]
 801996e:	462a      	mov	r2, r5
 8019970:	f002 fc0c 	bl	801c18c <__s2b>
 8019974:	9007      	str	r0, [sp, #28]
 8019976:	2800      	cmp	r0, #0
 8019978:	f43f af0a 	beq.w	8019790 <_strtod_l+0x418>
 801997c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801997e:	1b3f      	subs	r7, r7, r4
 8019980:	2b00      	cmp	r3, #0
 8019982:	bfb4      	ite	lt
 8019984:	463b      	movlt	r3, r7
 8019986:	2300      	movge	r3, #0
 8019988:	930a      	str	r3, [sp, #40]	@ 0x28
 801998a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801998c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8019bb8 <_strtod_l+0x840>
 8019990:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019994:	2400      	movs	r4, #0
 8019996:	930d      	str	r3, [sp, #52]	@ 0x34
 8019998:	4625      	mov	r5, r4
 801999a:	9b07      	ldr	r3, [sp, #28]
 801999c:	9805      	ldr	r0, [sp, #20]
 801999e:	6859      	ldr	r1, [r3, #4]
 80199a0:	f002 fb4c 	bl	801c03c <_Balloc>
 80199a4:	4606      	mov	r6, r0
 80199a6:	2800      	cmp	r0, #0
 80199a8:	f43f aef6 	beq.w	8019798 <_strtod_l+0x420>
 80199ac:	9b07      	ldr	r3, [sp, #28]
 80199ae:	691a      	ldr	r2, [r3, #16]
 80199b0:	ec4b ab19 	vmov	d9, sl, fp
 80199b4:	3202      	adds	r2, #2
 80199b6:	f103 010c 	add.w	r1, r3, #12
 80199ba:	0092      	lsls	r2, r2, #2
 80199bc:	300c      	adds	r0, #12
 80199be:	f001 f8fa 	bl	801abb6 <memcpy>
 80199c2:	eeb0 0b49 	vmov.f64	d0, d9
 80199c6:	9805      	ldr	r0, [sp, #20]
 80199c8:	aa14      	add	r2, sp, #80	@ 0x50
 80199ca:	a913      	add	r1, sp, #76	@ 0x4c
 80199cc:	f002 ff1a 	bl	801c804 <__d2b>
 80199d0:	9012      	str	r0, [sp, #72]	@ 0x48
 80199d2:	2800      	cmp	r0, #0
 80199d4:	f43f aee0 	beq.w	8019798 <_strtod_l+0x420>
 80199d8:	9805      	ldr	r0, [sp, #20]
 80199da:	2101      	movs	r1, #1
 80199dc:	f002 fc6c 	bl	801c2b8 <__i2b>
 80199e0:	4605      	mov	r5, r0
 80199e2:	b940      	cbnz	r0, 80199f6 <_strtod_l+0x67e>
 80199e4:	2500      	movs	r5, #0
 80199e6:	e6d7      	b.n	8019798 <_strtod_l+0x420>
 80199e8:	f04f 31ff 	mov.w	r1, #4294967295
 80199ec:	fa01 f202 	lsl.w	r2, r1, r2
 80199f0:	ea02 0a0a 	and.w	sl, r2, sl
 80199f4:	e7b0      	b.n	8019958 <_strtod_l+0x5e0>
 80199f6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80199f8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80199fa:	2f00      	cmp	r7, #0
 80199fc:	bfab      	itete	ge
 80199fe:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8019a00:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8019a02:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8019a06:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8019a0a:	bfac      	ite	ge
 8019a0c:	eb07 0903 	addge.w	r9, r7, r3
 8019a10:	eba3 0807 	sublt.w	r8, r3, r7
 8019a14:	9b06      	ldr	r3, [sp, #24]
 8019a16:	1aff      	subs	r7, r7, r3
 8019a18:	4417      	add	r7, r2
 8019a1a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8019a1e:	4a6b      	ldr	r2, [pc, #428]	@ (8019bcc <_strtod_l+0x854>)
 8019a20:	3f01      	subs	r7, #1
 8019a22:	4297      	cmp	r7, r2
 8019a24:	da51      	bge.n	8019aca <_strtod_l+0x752>
 8019a26:	1bd1      	subs	r1, r2, r7
 8019a28:	291f      	cmp	r1, #31
 8019a2a:	eba3 0301 	sub.w	r3, r3, r1
 8019a2e:	f04f 0201 	mov.w	r2, #1
 8019a32:	dc3e      	bgt.n	8019ab2 <_strtod_l+0x73a>
 8019a34:	408a      	lsls	r2, r1
 8019a36:	920c      	str	r2, [sp, #48]	@ 0x30
 8019a38:	2200      	movs	r2, #0
 8019a3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019a3c:	eb09 0703 	add.w	r7, r9, r3
 8019a40:	4498      	add	r8, r3
 8019a42:	9b06      	ldr	r3, [sp, #24]
 8019a44:	45b9      	cmp	r9, r7
 8019a46:	4498      	add	r8, r3
 8019a48:	464b      	mov	r3, r9
 8019a4a:	bfa8      	it	ge
 8019a4c:	463b      	movge	r3, r7
 8019a4e:	4543      	cmp	r3, r8
 8019a50:	bfa8      	it	ge
 8019a52:	4643      	movge	r3, r8
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	bfc2      	ittt	gt
 8019a58:	1aff      	subgt	r7, r7, r3
 8019a5a:	eba8 0803 	subgt.w	r8, r8, r3
 8019a5e:	eba9 0903 	subgt.w	r9, r9, r3
 8019a62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	dd16      	ble.n	8019a96 <_strtod_l+0x71e>
 8019a68:	4629      	mov	r1, r5
 8019a6a:	9805      	ldr	r0, [sp, #20]
 8019a6c:	461a      	mov	r2, r3
 8019a6e:	f002 fce3 	bl	801c438 <__pow5mult>
 8019a72:	4605      	mov	r5, r0
 8019a74:	2800      	cmp	r0, #0
 8019a76:	d0b5      	beq.n	80199e4 <_strtod_l+0x66c>
 8019a78:	4601      	mov	r1, r0
 8019a7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019a7c:	9805      	ldr	r0, [sp, #20]
 8019a7e:	f002 fc31 	bl	801c2e4 <__multiply>
 8019a82:	900f      	str	r0, [sp, #60]	@ 0x3c
 8019a84:	2800      	cmp	r0, #0
 8019a86:	f43f ae87 	beq.w	8019798 <_strtod_l+0x420>
 8019a8a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019a8c:	9805      	ldr	r0, [sp, #20]
 8019a8e:	f002 fb15 	bl	801c0bc <_Bfree>
 8019a92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a94:	9312      	str	r3, [sp, #72]	@ 0x48
 8019a96:	2f00      	cmp	r7, #0
 8019a98:	dc1b      	bgt.n	8019ad2 <_strtod_l+0x75a>
 8019a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	dd21      	ble.n	8019ae4 <_strtod_l+0x76c>
 8019aa0:	4631      	mov	r1, r6
 8019aa2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019aa4:	9805      	ldr	r0, [sp, #20]
 8019aa6:	f002 fcc7 	bl	801c438 <__pow5mult>
 8019aaa:	4606      	mov	r6, r0
 8019aac:	b9d0      	cbnz	r0, 8019ae4 <_strtod_l+0x76c>
 8019aae:	2600      	movs	r6, #0
 8019ab0:	e672      	b.n	8019798 <_strtod_l+0x420>
 8019ab2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8019ab6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8019aba:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8019abe:	37e2      	adds	r7, #226	@ 0xe2
 8019ac0:	fa02 f107 	lsl.w	r1, r2, r7
 8019ac4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019ac6:	920c      	str	r2, [sp, #48]	@ 0x30
 8019ac8:	e7b8      	b.n	8019a3c <_strtod_l+0x6c4>
 8019aca:	2200      	movs	r2, #0
 8019acc:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019ace:	2201      	movs	r2, #1
 8019ad0:	e7f9      	b.n	8019ac6 <_strtod_l+0x74e>
 8019ad2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019ad4:	9805      	ldr	r0, [sp, #20]
 8019ad6:	463a      	mov	r2, r7
 8019ad8:	f002 fd08 	bl	801c4ec <__lshift>
 8019adc:	9012      	str	r0, [sp, #72]	@ 0x48
 8019ade:	2800      	cmp	r0, #0
 8019ae0:	d1db      	bne.n	8019a9a <_strtod_l+0x722>
 8019ae2:	e659      	b.n	8019798 <_strtod_l+0x420>
 8019ae4:	f1b8 0f00 	cmp.w	r8, #0
 8019ae8:	dd07      	ble.n	8019afa <_strtod_l+0x782>
 8019aea:	4631      	mov	r1, r6
 8019aec:	9805      	ldr	r0, [sp, #20]
 8019aee:	4642      	mov	r2, r8
 8019af0:	f002 fcfc 	bl	801c4ec <__lshift>
 8019af4:	4606      	mov	r6, r0
 8019af6:	2800      	cmp	r0, #0
 8019af8:	d0d9      	beq.n	8019aae <_strtod_l+0x736>
 8019afa:	f1b9 0f00 	cmp.w	r9, #0
 8019afe:	dd08      	ble.n	8019b12 <_strtod_l+0x79a>
 8019b00:	4629      	mov	r1, r5
 8019b02:	9805      	ldr	r0, [sp, #20]
 8019b04:	464a      	mov	r2, r9
 8019b06:	f002 fcf1 	bl	801c4ec <__lshift>
 8019b0a:	4605      	mov	r5, r0
 8019b0c:	2800      	cmp	r0, #0
 8019b0e:	f43f ae43 	beq.w	8019798 <_strtod_l+0x420>
 8019b12:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019b14:	9805      	ldr	r0, [sp, #20]
 8019b16:	4632      	mov	r2, r6
 8019b18:	f002 fd70 	bl	801c5fc <__mdiff>
 8019b1c:	4604      	mov	r4, r0
 8019b1e:	2800      	cmp	r0, #0
 8019b20:	f43f ae3a 	beq.w	8019798 <_strtod_l+0x420>
 8019b24:	2300      	movs	r3, #0
 8019b26:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019b2a:	60c3      	str	r3, [r0, #12]
 8019b2c:	4629      	mov	r1, r5
 8019b2e:	f002 fd49 	bl	801c5c4 <__mcmp>
 8019b32:	2800      	cmp	r0, #0
 8019b34:	da4e      	bge.n	8019bd4 <_strtod_l+0x85c>
 8019b36:	ea58 080a 	orrs.w	r8, r8, sl
 8019b3a:	d174      	bne.n	8019c26 <_strtod_l+0x8ae>
 8019b3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d170      	bne.n	8019c26 <_strtod_l+0x8ae>
 8019b44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019b48:	0d1b      	lsrs	r3, r3, #20
 8019b4a:	051b      	lsls	r3, r3, #20
 8019b4c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019b50:	d969      	bls.n	8019c26 <_strtod_l+0x8ae>
 8019b52:	6963      	ldr	r3, [r4, #20]
 8019b54:	b913      	cbnz	r3, 8019b5c <_strtod_l+0x7e4>
 8019b56:	6923      	ldr	r3, [r4, #16]
 8019b58:	2b01      	cmp	r3, #1
 8019b5a:	dd64      	ble.n	8019c26 <_strtod_l+0x8ae>
 8019b5c:	4621      	mov	r1, r4
 8019b5e:	2201      	movs	r2, #1
 8019b60:	9805      	ldr	r0, [sp, #20]
 8019b62:	f002 fcc3 	bl	801c4ec <__lshift>
 8019b66:	4629      	mov	r1, r5
 8019b68:	4604      	mov	r4, r0
 8019b6a:	f002 fd2b 	bl	801c5c4 <__mcmp>
 8019b6e:	2800      	cmp	r0, #0
 8019b70:	dd59      	ble.n	8019c26 <_strtod_l+0x8ae>
 8019b72:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019b76:	9a06      	ldr	r2, [sp, #24]
 8019b78:	0d1b      	lsrs	r3, r3, #20
 8019b7a:	051b      	lsls	r3, r3, #20
 8019b7c:	2a00      	cmp	r2, #0
 8019b7e:	d070      	beq.n	8019c62 <_strtod_l+0x8ea>
 8019b80:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019b84:	d86d      	bhi.n	8019c62 <_strtod_l+0x8ea>
 8019b86:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8019b8a:	f67f ae99 	bls.w	80198c0 <_strtod_l+0x548>
 8019b8e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8019bc0 <_strtod_l+0x848>
 8019b92:	ec4b ab16 	vmov	d6, sl, fp
 8019b96:	4b0e      	ldr	r3, [pc, #56]	@ (8019bd0 <_strtod_l+0x858>)
 8019b98:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019b9c:	ee17 2a90 	vmov	r2, s15
 8019ba0:	4013      	ands	r3, r2
 8019ba2:	ec5b ab17 	vmov	sl, fp, d7
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	f47f ae01 	bne.w	80197ae <_strtod_l+0x436>
 8019bac:	9a05      	ldr	r2, [sp, #20]
 8019bae:	2322      	movs	r3, #34	@ 0x22
 8019bb0:	6013      	str	r3, [r2, #0]
 8019bb2:	e5fc      	b.n	80197ae <_strtod_l+0x436>
 8019bb4:	f3af 8000 	nop.w
 8019bb8:	ffc00000 	.word	0xffc00000
 8019bbc:	41dfffff 	.word	0x41dfffff
 8019bc0:	00000000 	.word	0x00000000
 8019bc4:	39500000 	.word	0x39500000
 8019bc8:	0801ef40 	.word	0x0801ef40
 8019bcc:	fffffc02 	.word	0xfffffc02
 8019bd0:	7ff00000 	.word	0x7ff00000
 8019bd4:	46d9      	mov	r9, fp
 8019bd6:	d15d      	bne.n	8019c94 <_strtod_l+0x91c>
 8019bd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019bdc:	f1b8 0f00 	cmp.w	r8, #0
 8019be0:	d02a      	beq.n	8019c38 <_strtod_l+0x8c0>
 8019be2:	4aab      	ldr	r2, [pc, #684]	@ (8019e90 <_strtod_l+0xb18>)
 8019be4:	4293      	cmp	r3, r2
 8019be6:	d12a      	bne.n	8019c3e <_strtod_l+0x8c6>
 8019be8:	9b06      	ldr	r3, [sp, #24]
 8019bea:	4652      	mov	r2, sl
 8019bec:	b1fb      	cbz	r3, 8019c2e <_strtod_l+0x8b6>
 8019bee:	4ba9      	ldr	r3, [pc, #676]	@ (8019e94 <_strtod_l+0xb1c>)
 8019bf0:	ea0b 0303 	and.w	r3, fp, r3
 8019bf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8019bfc:	d81a      	bhi.n	8019c34 <_strtod_l+0x8bc>
 8019bfe:	0d1b      	lsrs	r3, r3, #20
 8019c00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019c04:	fa01 f303 	lsl.w	r3, r1, r3
 8019c08:	429a      	cmp	r2, r3
 8019c0a:	d118      	bne.n	8019c3e <_strtod_l+0x8c6>
 8019c0c:	4ba2      	ldr	r3, [pc, #648]	@ (8019e98 <_strtod_l+0xb20>)
 8019c0e:	4599      	cmp	r9, r3
 8019c10:	d102      	bne.n	8019c18 <_strtod_l+0x8a0>
 8019c12:	3201      	adds	r2, #1
 8019c14:	f43f adc0 	beq.w	8019798 <_strtod_l+0x420>
 8019c18:	4b9e      	ldr	r3, [pc, #632]	@ (8019e94 <_strtod_l+0xb1c>)
 8019c1a:	ea09 0303 	and.w	r3, r9, r3
 8019c1e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8019c22:	f04f 0a00 	mov.w	sl, #0
 8019c26:	9b06      	ldr	r3, [sp, #24]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d1b0      	bne.n	8019b8e <_strtod_l+0x816>
 8019c2c:	e5bf      	b.n	80197ae <_strtod_l+0x436>
 8019c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8019c32:	e7e9      	b.n	8019c08 <_strtod_l+0x890>
 8019c34:	460b      	mov	r3, r1
 8019c36:	e7e7      	b.n	8019c08 <_strtod_l+0x890>
 8019c38:	ea53 030a 	orrs.w	r3, r3, sl
 8019c3c:	d099      	beq.n	8019b72 <_strtod_l+0x7fa>
 8019c3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019c40:	b1c3      	cbz	r3, 8019c74 <_strtod_l+0x8fc>
 8019c42:	ea13 0f09 	tst.w	r3, r9
 8019c46:	d0ee      	beq.n	8019c26 <_strtod_l+0x8ae>
 8019c48:	9a06      	ldr	r2, [sp, #24]
 8019c4a:	4650      	mov	r0, sl
 8019c4c:	4659      	mov	r1, fp
 8019c4e:	f1b8 0f00 	cmp.w	r8, #0
 8019c52:	d013      	beq.n	8019c7c <_strtod_l+0x904>
 8019c54:	f7ff fb73 	bl	801933e <sulp>
 8019c58:	ee39 7b00 	vadd.f64	d7, d9, d0
 8019c5c:	ec5b ab17 	vmov	sl, fp, d7
 8019c60:	e7e1      	b.n	8019c26 <_strtod_l+0x8ae>
 8019c62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8019c66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8019c6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8019c6e:	f04f 3aff 	mov.w	sl, #4294967295
 8019c72:	e7d8      	b.n	8019c26 <_strtod_l+0x8ae>
 8019c74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c76:	ea13 0f0a 	tst.w	r3, sl
 8019c7a:	e7e4      	b.n	8019c46 <_strtod_l+0x8ce>
 8019c7c:	f7ff fb5f 	bl	801933e <sulp>
 8019c80:	ee39 0b40 	vsub.f64	d0, d9, d0
 8019c84:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8019c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c8c:	ec5b ab10 	vmov	sl, fp, d0
 8019c90:	d1c9      	bne.n	8019c26 <_strtod_l+0x8ae>
 8019c92:	e615      	b.n	80198c0 <_strtod_l+0x548>
 8019c94:	4629      	mov	r1, r5
 8019c96:	4620      	mov	r0, r4
 8019c98:	f002 fe0c 	bl	801c8b4 <__ratio>
 8019c9c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8019ca0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ca8:	d85d      	bhi.n	8019d66 <_strtod_l+0x9ee>
 8019caa:	f1b8 0f00 	cmp.w	r8, #0
 8019cae:	d164      	bne.n	8019d7a <_strtod_l+0xa02>
 8019cb0:	f1ba 0f00 	cmp.w	sl, #0
 8019cb4:	d14b      	bne.n	8019d4e <_strtod_l+0x9d6>
 8019cb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019cba:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d160      	bne.n	8019d84 <_strtod_l+0xa0c>
 8019cc2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8019cc6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8019cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cce:	d401      	bmi.n	8019cd4 <_strtod_l+0x95c>
 8019cd0:	ee20 8b08 	vmul.f64	d8, d0, d8
 8019cd4:	eeb1 ab48 	vneg.f64	d10, d8
 8019cd8:	486e      	ldr	r0, [pc, #440]	@ (8019e94 <_strtod_l+0xb1c>)
 8019cda:	4970      	ldr	r1, [pc, #448]	@ (8019e9c <_strtod_l+0xb24>)
 8019cdc:	ea09 0700 	and.w	r7, r9, r0
 8019ce0:	428f      	cmp	r7, r1
 8019ce2:	ec53 2b1a 	vmov	r2, r3, d10
 8019ce6:	d17d      	bne.n	8019de4 <_strtod_l+0xa6c>
 8019ce8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8019cec:	ec4b ab1c 	vmov	d12, sl, fp
 8019cf0:	eeb0 0b4c 	vmov.f64	d0, d12
 8019cf4:	f002 fd16 	bl	801c724 <__ulp>
 8019cf8:	4866      	ldr	r0, [pc, #408]	@ (8019e94 <_strtod_l+0xb1c>)
 8019cfa:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8019cfe:	ee1c 3a90 	vmov	r3, s25
 8019d02:	4a67      	ldr	r2, [pc, #412]	@ (8019ea0 <_strtod_l+0xb28>)
 8019d04:	ea03 0100 	and.w	r1, r3, r0
 8019d08:	4291      	cmp	r1, r2
 8019d0a:	ec5b ab1c 	vmov	sl, fp, d12
 8019d0e:	d93c      	bls.n	8019d8a <_strtod_l+0xa12>
 8019d10:	ee19 2a90 	vmov	r2, s19
 8019d14:	4b60      	ldr	r3, [pc, #384]	@ (8019e98 <_strtod_l+0xb20>)
 8019d16:	429a      	cmp	r2, r3
 8019d18:	d104      	bne.n	8019d24 <_strtod_l+0x9ac>
 8019d1a:	ee19 3a10 	vmov	r3, s18
 8019d1e:	3301      	adds	r3, #1
 8019d20:	f43f ad3a 	beq.w	8019798 <_strtod_l+0x420>
 8019d24:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8019e98 <_strtod_l+0xb20>
 8019d28:	f04f 3aff 	mov.w	sl, #4294967295
 8019d2c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019d2e:	9805      	ldr	r0, [sp, #20]
 8019d30:	f002 f9c4 	bl	801c0bc <_Bfree>
 8019d34:	9805      	ldr	r0, [sp, #20]
 8019d36:	4631      	mov	r1, r6
 8019d38:	f002 f9c0 	bl	801c0bc <_Bfree>
 8019d3c:	9805      	ldr	r0, [sp, #20]
 8019d3e:	4629      	mov	r1, r5
 8019d40:	f002 f9bc 	bl	801c0bc <_Bfree>
 8019d44:	9805      	ldr	r0, [sp, #20]
 8019d46:	4621      	mov	r1, r4
 8019d48:	f002 f9b8 	bl	801c0bc <_Bfree>
 8019d4c:	e625      	b.n	801999a <_strtod_l+0x622>
 8019d4e:	f1ba 0f01 	cmp.w	sl, #1
 8019d52:	d103      	bne.n	8019d5c <_strtod_l+0x9e4>
 8019d54:	f1bb 0f00 	cmp.w	fp, #0
 8019d58:	f43f adb2 	beq.w	80198c0 <_strtod_l+0x548>
 8019d5c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8019d60:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8019d64:	e7b8      	b.n	8019cd8 <_strtod_l+0x960>
 8019d66:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8019d6a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8019d6e:	f1b8 0f00 	cmp.w	r8, #0
 8019d72:	d0af      	beq.n	8019cd4 <_strtod_l+0x95c>
 8019d74:	eeb0 ab48 	vmov.f64	d10, d8
 8019d78:	e7ae      	b.n	8019cd8 <_strtod_l+0x960>
 8019d7a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8019d7e:	eeb0 8b4a 	vmov.f64	d8, d10
 8019d82:	e7a9      	b.n	8019cd8 <_strtod_l+0x960>
 8019d84:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8019d88:	e7a6      	b.n	8019cd8 <_strtod_l+0x960>
 8019d8a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8019d8e:	9b06      	ldr	r3, [sp, #24]
 8019d90:	46d9      	mov	r9, fp
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d1ca      	bne.n	8019d2c <_strtod_l+0x9b4>
 8019d96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019d9a:	0d1b      	lsrs	r3, r3, #20
 8019d9c:	051b      	lsls	r3, r3, #20
 8019d9e:	429f      	cmp	r7, r3
 8019da0:	d1c4      	bne.n	8019d2c <_strtod_l+0x9b4>
 8019da2:	ec51 0b18 	vmov	r0, r1, d8
 8019da6:	f7e6 fcef 	bl	8000788 <__aeabi_d2lz>
 8019daa:	f7e6 fca7 	bl	80006fc <__aeabi_l2d>
 8019dae:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8019db2:	ec41 0b17 	vmov	d7, r0, r1
 8019db6:	ea49 090a 	orr.w	r9, r9, sl
 8019dba:	ea59 0908 	orrs.w	r9, r9, r8
 8019dbe:	ee38 8b47 	vsub.f64	d8, d8, d7
 8019dc2:	d03c      	beq.n	8019e3e <_strtod_l+0xac6>
 8019dc4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8019e78 <_strtod_l+0xb00>
 8019dc8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dd0:	f53f aced 	bmi.w	80197ae <_strtod_l+0x436>
 8019dd4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8019e80 <_strtod_l+0xb08>
 8019dd8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019de0:	dda4      	ble.n	8019d2c <_strtod_l+0x9b4>
 8019de2:	e4e4      	b.n	80197ae <_strtod_l+0x436>
 8019de4:	9906      	ldr	r1, [sp, #24]
 8019de6:	b1e1      	cbz	r1, 8019e22 <_strtod_l+0xaaa>
 8019de8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8019dec:	d819      	bhi.n	8019e22 <_strtod_l+0xaaa>
 8019dee:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8019df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019df6:	d811      	bhi.n	8019e1c <_strtod_l+0xaa4>
 8019df8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8019dfc:	ee18 3a10 	vmov	r3, s16
 8019e00:	2b01      	cmp	r3, #1
 8019e02:	bf38      	it	cc
 8019e04:	2301      	movcc	r3, #1
 8019e06:	ee08 3a10 	vmov	s16, r3
 8019e0a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8019e0e:	f1b8 0f00 	cmp.w	r8, #0
 8019e12:	d111      	bne.n	8019e38 <_strtod_l+0xac0>
 8019e14:	eeb1 7b48 	vneg.f64	d7, d8
 8019e18:	ec53 2b17 	vmov	r2, r3, d7
 8019e1c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8019e20:	1bcb      	subs	r3, r1, r7
 8019e22:	eeb0 0b49 	vmov.f64	d0, d9
 8019e26:	ec43 2b1a 	vmov	d10, r2, r3
 8019e2a:	f002 fc7b 	bl	801c724 <__ulp>
 8019e2e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8019e32:	ec5b ab19 	vmov	sl, fp, d9
 8019e36:	e7aa      	b.n	8019d8e <_strtod_l+0xa16>
 8019e38:	eeb0 7b48 	vmov.f64	d7, d8
 8019e3c:	e7ec      	b.n	8019e18 <_strtod_l+0xaa0>
 8019e3e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8019e88 <_strtod_l+0xb10>
 8019e42:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e4a:	f57f af6f 	bpl.w	8019d2c <_strtod_l+0x9b4>
 8019e4e:	e4ae      	b.n	80197ae <_strtod_l+0x436>
 8019e50:	2300      	movs	r3, #0
 8019e52:	9308      	str	r3, [sp, #32]
 8019e54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019e56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019e58:	6013      	str	r3, [r2, #0]
 8019e5a:	f7ff bacc 	b.w	80193f6 <_strtod_l+0x7e>
 8019e5e:	2a65      	cmp	r2, #101	@ 0x65
 8019e60:	f43f abbc 	beq.w	80195dc <_strtod_l+0x264>
 8019e64:	2a45      	cmp	r2, #69	@ 0x45
 8019e66:	f43f abb9 	beq.w	80195dc <_strtod_l+0x264>
 8019e6a:	2301      	movs	r3, #1
 8019e6c:	9306      	str	r3, [sp, #24]
 8019e6e:	f7ff bbf0 	b.w	8019652 <_strtod_l+0x2da>
 8019e72:	bf00      	nop
 8019e74:	f3af 8000 	nop.w
 8019e78:	94a03595 	.word	0x94a03595
 8019e7c:	3fdfffff 	.word	0x3fdfffff
 8019e80:	35afe535 	.word	0x35afe535
 8019e84:	3fe00000 	.word	0x3fe00000
 8019e88:	94a03595 	.word	0x94a03595
 8019e8c:	3fcfffff 	.word	0x3fcfffff
 8019e90:	000fffff 	.word	0x000fffff
 8019e94:	7ff00000 	.word	0x7ff00000
 8019e98:	7fefffff 	.word	0x7fefffff
 8019e9c:	7fe00000 	.word	0x7fe00000
 8019ea0:	7c9fffff 	.word	0x7c9fffff

08019ea4 <strtod>:
 8019ea4:	460a      	mov	r2, r1
 8019ea6:	4601      	mov	r1, r0
 8019ea8:	4802      	ldr	r0, [pc, #8]	@ (8019eb4 <strtod+0x10>)
 8019eaa:	4b03      	ldr	r3, [pc, #12]	@ (8019eb8 <strtod+0x14>)
 8019eac:	6800      	ldr	r0, [r0, #0]
 8019eae:	f7ff ba63 	b.w	8019378 <_strtod_l>
 8019eb2:	bf00      	nop
 8019eb4:	240002ac 	.word	0x240002ac
 8019eb8:	24000140 	.word	0x24000140

08019ebc <_strtol_l.constprop.0>:
 8019ebc:	2b24      	cmp	r3, #36	@ 0x24
 8019ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ec2:	4686      	mov	lr, r0
 8019ec4:	4690      	mov	r8, r2
 8019ec6:	d801      	bhi.n	8019ecc <_strtol_l.constprop.0+0x10>
 8019ec8:	2b01      	cmp	r3, #1
 8019eca:	d106      	bne.n	8019eda <_strtol_l.constprop.0+0x1e>
 8019ecc:	f000 fe46 	bl	801ab5c <__errno>
 8019ed0:	2316      	movs	r3, #22
 8019ed2:	6003      	str	r3, [r0, #0]
 8019ed4:	2000      	movs	r0, #0
 8019ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019eda:	4834      	ldr	r0, [pc, #208]	@ (8019fac <_strtol_l.constprop.0+0xf0>)
 8019edc:	460d      	mov	r5, r1
 8019ede:	462a      	mov	r2, r5
 8019ee0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019ee4:	5d06      	ldrb	r6, [r0, r4]
 8019ee6:	f016 0608 	ands.w	r6, r6, #8
 8019eea:	d1f8      	bne.n	8019ede <_strtol_l.constprop.0+0x22>
 8019eec:	2c2d      	cmp	r4, #45	@ 0x2d
 8019eee:	d12d      	bne.n	8019f4c <_strtol_l.constprop.0+0x90>
 8019ef0:	782c      	ldrb	r4, [r5, #0]
 8019ef2:	2601      	movs	r6, #1
 8019ef4:	1c95      	adds	r5, r2, #2
 8019ef6:	f033 0210 	bics.w	r2, r3, #16
 8019efa:	d109      	bne.n	8019f10 <_strtol_l.constprop.0+0x54>
 8019efc:	2c30      	cmp	r4, #48	@ 0x30
 8019efe:	d12a      	bne.n	8019f56 <_strtol_l.constprop.0+0x9a>
 8019f00:	782a      	ldrb	r2, [r5, #0]
 8019f02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019f06:	2a58      	cmp	r2, #88	@ 0x58
 8019f08:	d125      	bne.n	8019f56 <_strtol_l.constprop.0+0x9a>
 8019f0a:	786c      	ldrb	r4, [r5, #1]
 8019f0c:	2310      	movs	r3, #16
 8019f0e:	3502      	adds	r5, #2
 8019f10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8019f14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019f18:	2200      	movs	r2, #0
 8019f1a:	fbbc f9f3 	udiv	r9, ip, r3
 8019f1e:	4610      	mov	r0, r2
 8019f20:	fb03 ca19 	mls	sl, r3, r9, ip
 8019f24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8019f28:	2f09      	cmp	r7, #9
 8019f2a:	d81b      	bhi.n	8019f64 <_strtol_l.constprop.0+0xa8>
 8019f2c:	463c      	mov	r4, r7
 8019f2e:	42a3      	cmp	r3, r4
 8019f30:	dd27      	ble.n	8019f82 <_strtol_l.constprop.0+0xc6>
 8019f32:	1c57      	adds	r7, r2, #1
 8019f34:	d007      	beq.n	8019f46 <_strtol_l.constprop.0+0x8a>
 8019f36:	4581      	cmp	r9, r0
 8019f38:	d320      	bcc.n	8019f7c <_strtol_l.constprop.0+0xc0>
 8019f3a:	d101      	bne.n	8019f40 <_strtol_l.constprop.0+0x84>
 8019f3c:	45a2      	cmp	sl, r4
 8019f3e:	db1d      	blt.n	8019f7c <_strtol_l.constprop.0+0xc0>
 8019f40:	fb00 4003 	mla	r0, r0, r3, r4
 8019f44:	2201      	movs	r2, #1
 8019f46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f4a:	e7eb      	b.n	8019f24 <_strtol_l.constprop.0+0x68>
 8019f4c:	2c2b      	cmp	r4, #43	@ 0x2b
 8019f4e:	bf04      	itt	eq
 8019f50:	782c      	ldrbeq	r4, [r5, #0]
 8019f52:	1c95      	addeq	r5, r2, #2
 8019f54:	e7cf      	b.n	8019ef6 <_strtol_l.constprop.0+0x3a>
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d1da      	bne.n	8019f10 <_strtol_l.constprop.0+0x54>
 8019f5a:	2c30      	cmp	r4, #48	@ 0x30
 8019f5c:	bf0c      	ite	eq
 8019f5e:	2308      	moveq	r3, #8
 8019f60:	230a      	movne	r3, #10
 8019f62:	e7d5      	b.n	8019f10 <_strtol_l.constprop.0+0x54>
 8019f64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8019f68:	2f19      	cmp	r7, #25
 8019f6a:	d801      	bhi.n	8019f70 <_strtol_l.constprop.0+0xb4>
 8019f6c:	3c37      	subs	r4, #55	@ 0x37
 8019f6e:	e7de      	b.n	8019f2e <_strtol_l.constprop.0+0x72>
 8019f70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8019f74:	2f19      	cmp	r7, #25
 8019f76:	d804      	bhi.n	8019f82 <_strtol_l.constprop.0+0xc6>
 8019f78:	3c57      	subs	r4, #87	@ 0x57
 8019f7a:	e7d8      	b.n	8019f2e <_strtol_l.constprop.0+0x72>
 8019f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8019f80:	e7e1      	b.n	8019f46 <_strtol_l.constprop.0+0x8a>
 8019f82:	1c53      	adds	r3, r2, #1
 8019f84:	d108      	bne.n	8019f98 <_strtol_l.constprop.0+0xdc>
 8019f86:	2322      	movs	r3, #34	@ 0x22
 8019f88:	f8ce 3000 	str.w	r3, [lr]
 8019f8c:	4660      	mov	r0, ip
 8019f8e:	f1b8 0f00 	cmp.w	r8, #0
 8019f92:	d0a0      	beq.n	8019ed6 <_strtol_l.constprop.0+0x1a>
 8019f94:	1e69      	subs	r1, r5, #1
 8019f96:	e006      	b.n	8019fa6 <_strtol_l.constprop.0+0xea>
 8019f98:	b106      	cbz	r6, 8019f9c <_strtol_l.constprop.0+0xe0>
 8019f9a:	4240      	negs	r0, r0
 8019f9c:	f1b8 0f00 	cmp.w	r8, #0
 8019fa0:	d099      	beq.n	8019ed6 <_strtol_l.constprop.0+0x1a>
 8019fa2:	2a00      	cmp	r2, #0
 8019fa4:	d1f6      	bne.n	8019f94 <_strtol_l.constprop.0+0xd8>
 8019fa6:	f8c8 1000 	str.w	r1, [r8]
 8019faa:	e794      	b.n	8019ed6 <_strtol_l.constprop.0+0x1a>
 8019fac:	0801ef69 	.word	0x0801ef69

08019fb0 <strtol>:
 8019fb0:	4613      	mov	r3, r2
 8019fb2:	460a      	mov	r2, r1
 8019fb4:	4601      	mov	r1, r0
 8019fb6:	4802      	ldr	r0, [pc, #8]	@ (8019fc0 <strtol+0x10>)
 8019fb8:	6800      	ldr	r0, [r0, #0]
 8019fba:	f7ff bf7f 	b.w	8019ebc <_strtol_l.constprop.0>
 8019fbe:	bf00      	nop
 8019fc0:	240002ac 	.word	0x240002ac

08019fc4 <__cvt>:
 8019fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019fc6:	ed2d 8b02 	vpush	{d8}
 8019fca:	eeb0 8b40 	vmov.f64	d8, d0
 8019fce:	b085      	sub	sp, #20
 8019fd0:	4617      	mov	r7, r2
 8019fd2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8019fd4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019fd6:	ee18 2a90 	vmov	r2, s17
 8019fda:	f025 0520 	bic.w	r5, r5, #32
 8019fde:	2a00      	cmp	r2, #0
 8019fe0:	bfb6      	itet	lt
 8019fe2:	222d      	movlt	r2, #45	@ 0x2d
 8019fe4:	2200      	movge	r2, #0
 8019fe6:	eeb1 8b40 	vneglt.f64	d8, d0
 8019fea:	2d46      	cmp	r5, #70	@ 0x46
 8019fec:	460c      	mov	r4, r1
 8019fee:	701a      	strb	r2, [r3, #0]
 8019ff0:	d004      	beq.n	8019ffc <__cvt+0x38>
 8019ff2:	2d45      	cmp	r5, #69	@ 0x45
 8019ff4:	d100      	bne.n	8019ff8 <__cvt+0x34>
 8019ff6:	3401      	adds	r4, #1
 8019ff8:	2102      	movs	r1, #2
 8019ffa:	e000      	b.n	8019ffe <__cvt+0x3a>
 8019ffc:	2103      	movs	r1, #3
 8019ffe:	ab03      	add	r3, sp, #12
 801a000:	9301      	str	r3, [sp, #4]
 801a002:	ab02      	add	r3, sp, #8
 801a004:	9300      	str	r3, [sp, #0]
 801a006:	4622      	mov	r2, r4
 801a008:	4633      	mov	r3, r6
 801a00a:	eeb0 0b48 	vmov.f64	d0, d8
 801a00e:	f000 fe73 	bl	801acf8 <_dtoa_r>
 801a012:	2d47      	cmp	r5, #71	@ 0x47
 801a014:	d114      	bne.n	801a040 <__cvt+0x7c>
 801a016:	07fb      	lsls	r3, r7, #31
 801a018:	d50a      	bpl.n	801a030 <__cvt+0x6c>
 801a01a:	1902      	adds	r2, r0, r4
 801a01c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a024:	bf08      	it	eq
 801a026:	9203      	streq	r2, [sp, #12]
 801a028:	2130      	movs	r1, #48	@ 0x30
 801a02a:	9b03      	ldr	r3, [sp, #12]
 801a02c:	4293      	cmp	r3, r2
 801a02e:	d319      	bcc.n	801a064 <__cvt+0xa0>
 801a030:	9b03      	ldr	r3, [sp, #12]
 801a032:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a034:	1a1b      	subs	r3, r3, r0
 801a036:	6013      	str	r3, [r2, #0]
 801a038:	b005      	add	sp, #20
 801a03a:	ecbd 8b02 	vpop	{d8}
 801a03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a040:	2d46      	cmp	r5, #70	@ 0x46
 801a042:	eb00 0204 	add.w	r2, r0, r4
 801a046:	d1e9      	bne.n	801a01c <__cvt+0x58>
 801a048:	7803      	ldrb	r3, [r0, #0]
 801a04a:	2b30      	cmp	r3, #48	@ 0x30
 801a04c:	d107      	bne.n	801a05e <__cvt+0x9a>
 801a04e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a056:	bf1c      	itt	ne
 801a058:	f1c4 0401 	rsbne	r4, r4, #1
 801a05c:	6034      	strne	r4, [r6, #0]
 801a05e:	6833      	ldr	r3, [r6, #0]
 801a060:	441a      	add	r2, r3
 801a062:	e7db      	b.n	801a01c <__cvt+0x58>
 801a064:	1c5c      	adds	r4, r3, #1
 801a066:	9403      	str	r4, [sp, #12]
 801a068:	7019      	strb	r1, [r3, #0]
 801a06a:	e7de      	b.n	801a02a <__cvt+0x66>

0801a06c <__exponent>:
 801a06c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a06e:	2900      	cmp	r1, #0
 801a070:	bfba      	itte	lt
 801a072:	4249      	neglt	r1, r1
 801a074:	232d      	movlt	r3, #45	@ 0x2d
 801a076:	232b      	movge	r3, #43	@ 0x2b
 801a078:	2909      	cmp	r1, #9
 801a07a:	7002      	strb	r2, [r0, #0]
 801a07c:	7043      	strb	r3, [r0, #1]
 801a07e:	dd29      	ble.n	801a0d4 <__exponent+0x68>
 801a080:	f10d 0307 	add.w	r3, sp, #7
 801a084:	461d      	mov	r5, r3
 801a086:	270a      	movs	r7, #10
 801a088:	461a      	mov	r2, r3
 801a08a:	fbb1 f6f7 	udiv	r6, r1, r7
 801a08e:	fb07 1416 	mls	r4, r7, r6, r1
 801a092:	3430      	adds	r4, #48	@ 0x30
 801a094:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a098:	460c      	mov	r4, r1
 801a09a:	2c63      	cmp	r4, #99	@ 0x63
 801a09c:	f103 33ff 	add.w	r3, r3, #4294967295
 801a0a0:	4631      	mov	r1, r6
 801a0a2:	dcf1      	bgt.n	801a088 <__exponent+0x1c>
 801a0a4:	3130      	adds	r1, #48	@ 0x30
 801a0a6:	1e94      	subs	r4, r2, #2
 801a0a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a0ac:	1c41      	adds	r1, r0, #1
 801a0ae:	4623      	mov	r3, r4
 801a0b0:	42ab      	cmp	r3, r5
 801a0b2:	d30a      	bcc.n	801a0ca <__exponent+0x5e>
 801a0b4:	f10d 0309 	add.w	r3, sp, #9
 801a0b8:	1a9b      	subs	r3, r3, r2
 801a0ba:	42ac      	cmp	r4, r5
 801a0bc:	bf88      	it	hi
 801a0be:	2300      	movhi	r3, #0
 801a0c0:	3302      	adds	r3, #2
 801a0c2:	4403      	add	r3, r0
 801a0c4:	1a18      	subs	r0, r3, r0
 801a0c6:	b003      	add	sp, #12
 801a0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0ca:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a0ce:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a0d2:	e7ed      	b.n	801a0b0 <__exponent+0x44>
 801a0d4:	2330      	movs	r3, #48	@ 0x30
 801a0d6:	3130      	adds	r1, #48	@ 0x30
 801a0d8:	7083      	strb	r3, [r0, #2]
 801a0da:	70c1      	strb	r1, [r0, #3]
 801a0dc:	1d03      	adds	r3, r0, #4
 801a0de:	e7f1      	b.n	801a0c4 <__exponent+0x58>

0801a0e0 <_printf_float>:
 801a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0e4:	b08d      	sub	sp, #52	@ 0x34
 801a0e6:	460c      	mov	r4, r1
 801a0e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a0ec:	4616      	mov	r6, r2
 801a0ee:	461f      	mov	r7, r3
 801a0f0:	4605      	mov	r5, r0
 801a0f2:	f000 fce9 	bl	801aac8 <_localeconv_r>
 801a0f6:	f8d0 b000 	ldr.w	fp, [r0]
 801a0fa:	4658      	mov	r0, fp
 801a0fc:	f7e6 f968 	bl	80003d0 <strlen>
 801a100:	2300      	movs	r3, #0
 801a102:	930a      	str	r3, [sp, #40]	@ 0x28
 801a104:	f8d8 3000 	ldr.w	r3, [r8]
 801a108:	f894 9018 	ldrb.w	r9, [r4, #24]
 801a10c:	6822      	ldr	r2, [r4, #0]
 801a10e:	9005      	str	r0, [sp, #20]
 801a110:	3307      	adds	r3, #7
 801a112:	f023 0307 	bic.w	r3, r3, #7
 801a116:	f103 0108 	add.w	r1, r3, #8
 801a11a:	f8c8 1000 	str.w	r1, [r8]
 801a11e:	ed93 0b00 	vldr	d0, [r3]
 801a122:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 801a380 <_printf_float+0x2a0>
 801a126:	eeb0 7bc0 	vabs.f64	d7, d0
 801a12a:	eeb4 7b46 	vcmp.f64	d7, d6
 801a12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a132:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801a136:	dd24      	ble.n	801a182 <_printf_float+0xa2>
 801a138:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a140:	d502      	bpl.n	801a148 <_printf_float+0x68>
 801a142:	232d      	movs	r3, #45	@ 0x2d
 801a144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a148:	498f      	ldr	r1, [pc, #572]	@ (801a388 <_printf_float+0x2a8>)
 801a14a:	4b90      	ldr	r3, [pc, #576]	@ (801a38c <_printf_float+0x2ac>)
 801a14c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 801a150:	bf94      	ite	ls
 801a152:	4688      	movls	r8, r1
 801a154:	4698      	movhi	r8, r3
 801a156:	f022 0204 	bic.w	r2, r2, #4
 801a15a:	2303      	movs	r3, #3
 801a15c:	6123      	str	r3, [r4, #16]
 801a15e:	6022      	str	r2, [r4, #0]
 801a160:	f04f 0a00 	mov.w	sl, #0
 801a164:	9700      	str	r7, [sp, #0]
 801a166:	4633      	mov	r3, r6
 801a168:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a16a:	4621      	mov	r1, r4
 801a16c:	4628      	mov	r0, r5
 801a16e:	f000 f9d1 	bl	801a514 <_printf_common>
 801a172:	3001      	adds	r0, #1
 801a174:	f040 8089 	bne.w	801a28a <_printf_float+0x1aa>
 801a178:	f04f 30ff 	mov.w	r0, #4294967295
 801a17c:	b00d      	add	sp, #52	@ 0x34
 801a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a182:	eeb4 0b40 	vcmp.f64	d0, d0
 801a186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a18a:	d709      	bvc.n	801a1a0 <_printf_float+0xc0>
 801a18c:	ee10 3a90 	vmov	r3, s1
 801a190:	2b00      	cmp	r3, #0
 801a192:	bfbc      	itt	lt
 801a194:	232d      	movlt	r3, #45	@ 0x2d
 801a196:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a19a:	497d      	ldr	r1, [pc, #500]	@ (801a390 <_printf_float+0x2b0>)
 801a19c:	4b7d      	ldr	r3, [pc, #500]	@ (801a394 <_printf_float+0x2b4>)
 801a19e:	e7d5      	b.n	801a14c <_printf_float+0x6c>
 801a1a0:	6863      	ldr	r3, [r4, #4]
 801a1a2:	1c59      	adds	r1, r3, #1
 801a1a4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 801a1a8:	d139      	bne.n	801a21e <_printf_float+0x13e>
 801a1aa:	2306      	movs	r3, #6
 801a1ac:	6063      	str	r3, [r4, #4]
 801a1ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	6022      	str	r2, [r4, #0]
 801a1b6:	9303      	str	r3, [sp, #12]
 801a1b8:	ab0a      	add	r3, sp, #40	@ 0x28
 801a1ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801a1be:	ab09      	add	r3, sp, #36	@ 0x24
 801a1c0:	9300      	str	r3, [sp, #0]
 801a1c2:	6861      	ldr	r1, [r4, #4]
 801a1c4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a1c8:	4628      	mov	r0, r5
 801a1ca:	f7ff fefb 	bl	8019fc4 <__cvt>
 801a1ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a1d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a1d4:	4680      	mov	r8, r0
 801a1d6:	d129      	bne.n	801a22c <_printf_float+0x14c>
 801a1d8:	1cc8      	adds	r0, r1, #3
 801a1da:	db02      	blt.n	801a1e2 <_printf_float+0x102>
 801a1dc:	6863      	ldr	r3, [r4, #4]
 801a1de:	4299      	cmp	r1, r3
 801a1e0:	dd41      	ble.n	801a266 <_printf_float+0x186>
 801a1e2:	f1a9 0902 	sub.w	r9, r9, #2
 801a1e6:	fa5f f989 	uxtb.w	r9, r9
 801a1ea:	3901      	subs	r1, #1
 801a1ec:	464a      	mov	r2, r9
 801a1ee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a1f2:	9109      	str	r1, [sp, #36]	@ 0x24
 801a1f4:	f7ff ff3a 	bl	801a06c <__exponent>
 801a1f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a1fa:	1813      	adds	r3, r2, r0
 801a1fc:	2a01      	cmp	r2, #1
 801a1fe:	4682      	mov	sl, r0
 801a200:	6123      	str	r3, [r4, #16]
 801a202:	dc02      	bgt.n	801a20a <_printf_float+0x12a>
 801a204:	6822      	ldr	r2, [r4, #0]
 801a206:	07d2      	lsls	r2, r2, #31
 801a208:	d501      	bpl.n	801a20e <_printf_float+0x12e>
 801a20a:	3301      	adds	r3, #1
 801a20c:	6123      	str	r3, [r4, #16]
 801a20e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a212:	2b00      	cmp	r3, #0
 801a214:	d0a6      	beq.n	801a164 <_printf_float+0x84>
 801a216:	232d      	movs	r3, #45	@ 0x2d
 801a218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a21c:	e7a2      	b.n	801a164 <_printf_float+0x84>
 801a21e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a222:	d1c4      	bne.n	801a1ae <_printf_float+0xce>
 801a224:	2b00      	cmp	r3, #0
 801a226:	d1c2      	bne.n	801a1ae <_printf_float+0xce>
 801a228:	2301      	movs	r3, #1
 801a22a:	e7bf      	b.n	801a1ac <_printf_float+0xcc>
 801a22c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801a230:	d9db      	bls.n	801a1ea <_printf_float+0x10a>
 801a232:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801a236:	d118      	bne.n	801a26a <_printf_float+0x18a>
 801a238:	2900      	cmp	r1, #0
 801a23a:	6863      	ldr	r3, [r4, #4]
 801a23c:	dd0b      	ble.n	801a256 <_printf_float+0x176>
 801a23e:	6121      	str	r1, [r4, #16]
 801a240:	b913      	cbnz	r3, 801a248 <_printf_float+0x168>
 801a242:	6822      	ldr	r2, [r4, #0]
 801a244:	07d0      	lsls	r0, r2, #31
 801a246:	d502      	bpl.n	801a24e <_printf_float+0x16e>
 801a248:	3301      	adds	r3, #1
 801a24a:	440b      	add	r3, r1
 801a24c:	6123      	str	r3, [r4, #16]
 801a24e:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a250:	f04f 0a00 	mov.w	sl, #0
 801a254:	e7db      	b.n	801a20e <_printf_float+0x12e>
 801a256:	b913      	cbnz	r3, 801a25e <_printf_float+0x17e>
 801a258:	6822      	ldr	r2, [r4, #0]
 801a25a:	07d2      	lsls	r2, r2, #31
 801a25c:	d501      	bpl.n	801a262 <_printf_float+0x182>
 801a25e:	3302      	adds	r3, #2
 801a260:	e7f4      	b.n	801a24c <_printf_float+0x16c>
 801a262:	2301      	movs	r3, #1
 801a264:	e7f2      	b.n	801a24c <_printf_float+0x16c>
 801a266:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801a26a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a26c:	4299      	cmp	r1, r3
 801a26e:	db05      	blt.n	801a27c <_printf_float+0x19c>
 801a270:	6823      	ldr	r3, [r4, #0]
 801a272:	6121      	str	r1, [r4, #16]
 801a274:	07d8      	lsls	r0, r3, #31
 801a276:	d5ea      	bpl.n	801a24e <_printf_float+0x16e>
 801a278:	1c4b      	adds	r3, r1, #1
 801a27a:	e7e7      	b.n	801a24c <_printf_float+0x16c>
 801a27c:	2900      	cmp	r1, #0
 801a27e:	bfd4      	ite	le
 801a280:	f1c1 0202 	rsble	r2, r1, #2
 801a284:	2201      	movgt	r2, #1
 801a286:	4413      	add	r3, r2
 801a288:	e7e0      	b.n	801a24c <_printf_float+0x16c>
 801a28a:	6823      	ldr	r3, [r4, #0]
 801a28c:	055a      	lsls	r2, r3, #21
 801a28e:	d407      	bmi.n	801a2a0 <_printf_float+0x1c0>
 801a290:	6923      	ldr	r3, [r4, #16]
 801a292:	4642      	mov	r2, r8
 801a294:	4631      	mov	r1, r6
 801a296:	4628      	mov	r0, r5
 801a298:	47b8      	blx	r7
 801a29a:	3001      	adds	r0, #1
 801a29c:	d12a      	bne.n	801a2f4 <_printf_float+0x214>
 801a29e:	e76b      	b.n	801a178 <_printf_float+0x98>
 801a2a0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801a2a4:	f240 80e0 	bls.w	801a468 <_printf_float+0x388>
 801a2a8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801a2ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2b4:	d133      	bne.n	801a31e <_printf_float+0x23e>
 801a2b6:	4a38      	ldr	r2, [pc, #224]	@ (801a398 <_printf_float+0x2b8>)
 801a2b8:	2301      	movs	r3, #1
 801a2ba:	4631      	mov	r1, r6
 801a2bc:	4628      	mov	r0, r5
 801a2be:	47b8      	blx	r7
 801a2c0:	3001      	adds	r0, #1
 801a2c2:	f43f af59 	beq.w	801a178 <_printf_float+0x98>
 801a2c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a2ca:	4543      	cmp	r3, r8
 801a2cc:	db02      	blt.n	801a2d4 <_printf_float+0x1f4>
 801a2ce:	6823      	ldr	r3, [r4, #0]
 801a2d0:	07d8      	lsls	r0, r3, #31
 801a2d2:	d50f      	bpl.n	801a2f4 <_printf_float+0x214>
 801a2d4:	9b05      	ldr	r3, [sp, #20]
 801a2d6:	465a      	mov	r2, fp
 801a2d8:	4631      	mov	r1, r6
 801a2da:	4628      	mov	r0, r5
 801a2dc:	47b8      	blx	r7
 801a2de:	3001      	adds	r0, #1
 801a2e0:	f43f af4a 	beq.w	801a178 <_printf_float+0x98>
 801a2e4:	f04f 0900 	mov.w	r9, #0
 801a2e8:	f108 38ff 	add.w	r8, r8, #4294967295
 801a2ec:	f104 0a1a 	add.w	sl, r4, #26
 801a2f0:	45c8      	cmp	r8, r9
 801a2f2:	dc09      	bgt.n	801a308 <_printf_float+0x228>
 801a2f4:	6823      	ldr	r3, [r4, #0]
 801a2f6:	079b      	lsls	r3, r3, #30
 801a2f8:	f100 8107 	bmi.w	801a50a <_printf_float+0x42a>
 801a2fc:	68e0      	ldr	r0, [r4, #12]
 801a2fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a300:	4298      	cmp	r0, r3
 801a302:	bfb8      	it	lt
 801a304:	4618      	movlt	r0, r3
 801a306:	e739      	b.n	801a17c <_printf_float+0x9c>
 801a308:	2301      	movs	r3, #1
 801a30a:	4652      	mov	r2, sl
 801a30c:	4631      	mov	r1, r6
 801a30e:	4628      	mov	r0, r5
 801a310:	47b8      	blx	r7
 801a312:	3001      	adds	r0, #1
 801a314:	f43f af30 	beq.w	801a178 <_printf_float+0x98>
 801a318:	f109 0901 	add.w	r9, r9, #1
 801a31c:	e7e8      	b.n	801a2f0 <_printf_float+0x210>
 801a31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a320:	2b00      	cmp	r3, #0
 801a322:	dc3b      	bgt.n	801a39c <_printf_float+0x2bc>
 801a324:	4a1c      	ldr	r2, [pc, #112]	@ (801a398 <_printf_float+0x2b8>)
 801a326:	2301      	movs	r3, #1
 801a328:	4631      	mov	r1, r6
 801a32a:	4628      	mov	r0, r5
 801a32c:	47b8      	blx	r7
 801a32e:	3001      	adds	r0, #1
 801a330:	f43f af22 	beq.w	801a178 <_printf_float+0x98>
 801a334:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a338:	ea59 0303 	orrs.w	r3, r9, r3
 801a33c:	d102      	bne.n	801a344 <_printf_float+0x264>
 801a33e:	6823      	ldr	r3, [r4, #0]
 801a340:	07d9      	lsls	r1, r3, #31
 801a342:	d5d7      	bpl.n	801a2f4 <_printf_float+0x214>
 801a344:	9b05      	ldr	r3, [sp, #20]
 801a346:	465a      	mov	r2, fp
 801a348:	4631      	mov	r1, r6
 801a34a:	4628      	mov	r0, r5
 801a34c:	47b8      	blx	r7
 801a34e:	3001      	adds	r0, #1
 801a350:	f43f af12 	beq.w	801a178 <_printf_float+0x98>
 801a354:	f04f 0a00 	mov.w	sl, #0
 801a358:	f104 0b1a 	add.w	fp, r4, #26
 801a35c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a35e:	425b      	negs	r3, r3
 801a360:	4553      	cmp	r3, sl
 801a362:	dc01      	bgt.n	801a368 <_printf_float+0x288>
 801a364:	464b      	mov	r3, r9
 801a366:	e794      	b.n	801a292 <_printf_float+0x1b2>
 801a368:	2301      	movs	r3, #1
 801a36a:	465a      	mov	r2, fp
 801a36c:	4631      	mov	r1, r6
 801a36e:	4628      	mov	r0, r5
 801a370:	47b8      	blx	r7
 801a372:	3001      	adds	r0, #1
 801a374:	f43f af00 	beq.w	801a178 <_printf_float+0x98>
 801a378:	f10a 0a01 	add.w	sl, sl, #1
 801a37c:	e7ee      	b.n	801a35c <_printf_float+0x27c>
 801a37e:	bf00      	nop
 801a380:	ffffffff 	.word	0xffffffff
 801a384:	7fefffff 	.word	0x7fefffff
 801a388:	0801f069 	.word	0x0801f069
 801a38c:	0801f06d 	.word	0x0801f06d
 801a390:	0801f071 	.word	0x0801f071
 801a394:	0801f075 	.word	0x0801f075
 801a398:	0801f079 	.word	0x0801f079
 801a39c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a39e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a3a2:	4553      	cmp	r3, sl
 801a3a4:	bfa8      	it	ge
 801a3a6:	4653      	movge	r3, sl
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	4699      	mov	r9, r3
 801a3ac:	dc37      	bgt.n	801a41e <_printf_float+0x33e>
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	9307      	str	r3, [sp, #28]
 801a3b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a3b6:	f104 021a 	add.w	r2, r4, #26
 801a3ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a3bc:	9907      	ldr	r1, [sp, #28]
 801a3be:	9306      	str	r3, [sp, #24]
 801a3c0:	eba3 0309 	sub.w	r3, r3, r9
 801a3c4:	428b      	cmp	r3, r1
 801a3c6:	dc31      	bgt.n	801a42c <_printf_float+0x34c>
 801a3c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a3ca:	459a      	cmp	sl, r3
 801a3cc:	dc3b      	bgt.n	801a446 <_printf_float+0x366>
 801a3ce:	6823      	ldr	r3, [r4, #0]
 801a3d0:	07da      	lsls	r2, r3, #31
 801a3d2:	d438      	bmi.n	801a446 <_printf_float+0x366>
 801a3d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a3d6:	ebaa 0903 	sub.w	r9, sl, r3
 801a3da:	9b06      	ldr	r3, [sp, #24]
 801a3dc:	ebaa 0303 	sub.w	r3, sl, r3
 801a3e0:	4599      	cmp	r9, r3
 801a3e2:	bfa8      	it	ge
 801a3e4:	4699      	movge	r9, r3
 801a3e6:	f1b9 0f00 	cmp.w	r9, #0
 801a3ea:	dc34      	bgt.n	801a456 <_printf_float+0x376>
 801a3ec:	f04f 0800 	mov.w	r8, #0
 801a3f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a3f4:	f104 0b1a 	add.w	fp, r4, #26
 801a3f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a3fa:	ebaa 0303 	sub.w	r3, sl, r3
 801a3fe:	eba3 0309 	sub.w	r3, r3, r9
 801a402:	4543      	cmp	r3, r8
 801a404:	f77f af76 	ble.w	801a2f4 <_printf_float+0x214>
 801a408:	2301      	movs	r3, #1
 801a40a:	465a      	mov	r2, fp
 801a40c:	4631      	mov	r1, r6
 801a40e:	4628      	mov	r0, r5
 801a410:	47b8      	blx	r7
 801a412:	3001      	adds	r0, #1
 801a414:	f43f aeb0 	beq.w	801a178 <_printf_float+0x98>
 801a418:	f108 0801 	add.w	r8, r8, #1
 801a41c:	e7ec      	b.n	801a3f8 <_printf_float+0x318>
 801a41e:	4642      	mov	r2, r8
 801a420:	4631      	mov	r1, r6
 801a422:	4628      	mov	r0, r5
 801a424:	47b8      	blx	r7
 801a426:	3001      	adds	r0, #1
 801a428:	d1c1      	bne.n	801a3ae <_printf_float+0x2ce>
 801a42a:	e6a5      	b.n	801a178 <_printf_float+0x98>
 801a42c:	2301      	movs	r3, #1
 801a42e:	4631      	mov	r1, r6
 801a430:	4628      	mov	r0, r5
 801a432:	9206      	str	r2, [sp, #24]
 801a434:	47b8      	blx	r7
 801a436:	3001      	adds	r0, #1
 801a438:	f43f ae9e 	beq.w	801a178 <_printf_float+0x98>
 801a43c:	9b07      	ldr	r3, [sp, #28]
 801a43e:	9a06      	ldr	r2, [sp, #24]
 801a440:	3301      	adds	r3, #1
 801a442:	9307      	str	r3, [sp, #28]
 801a444:	e7b9      	b.n	801a3ba <_printf_float+0x2da>
 801a446:	9b05      	ldr	r3, [sp, #20]
 801a448:	465a      	mov	r2, fp
 801a44a:	4631      	mov	r1, r6
 801a44c:	4628      	mov	r0, r5
 801a44e:	47b8      	blx	r7
 801a450:	3001      	adds	r0, #1
 801a452:	d1bf      	bne.n	801a3d4 <_printf_float+0x2f4>
 801a454:	e690      	b.n	801a178 <_printf_float+0x98>
 801a456:	9a06      	ldr	r2, [sp, #24]
 801a458:	464b      	mov	r3, r9
 801a45a:	4442      	add	r2, r8
 801a45c:	4631      	mov	r1, r6
 801a45e:	4628      	mov	r0, r5
 801a460:	47b8      	blx	r7
 801a462:	3001      	adds	r0, #1
 801a464:	d1c2      	bne.n	801a3ec <_printf_float+0x30c>
 801a466:	e687      	b.n	801a178 <_printf_float+0x98>
 801a468:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801a46c:	f1b9 0f01 	cmp.w	r9, #1
 801a470:	dc01      	bgt.n	801a476 <_printf_float+0x396>
 801a472:	07db      	lsls	r3, r3, #31
 801a474:	d536      	bpl.n	801a4e4 <_printf_float+0x404>
 801a476:	2301      	movs	r3, #1
 801a478:	4642      	mov	r2, r8
 801a47a:	4631      	mov	r1, r6
 801a47c:	4628      	mov	r0, r5
 801a47e:	47b8      	blx	r7
 801a480:	3001      	adds	r0, #1
 801a482:	f43f ae79 	beq.w	801a178 <_printf_float+0x98>
 801a486:	9b05      	ldr	r3, [sp, #20]
 801a488:	465a      	mov	r2, fp
 801a48a:	4631      	mov	r1, r6
 801a48c:	4628      	mov	r0, r5
 801a48e:	47b8      	blx	r7
 801a490:	3001      	adds	r0, #1
 801a492:	f43f ae71 	beq.w	801a178 <_printf_float+0x98>
 801a496:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801a49a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4a2:	f109 39ff 	add.w	r9, r9, #4294967295
 801a4a6:	d018      	beq.n	801a4da <_printf_float+0x3fa>
 801a4a8:	464b      	mov	r3, r9
 801a4aa:	f108 0201 	add.w	r2, r8, #1
 801a4ae:	4631      	mov	r1, r6
 801a4b0:	4628      	mov	r0, r5
 801a4b2:	47b8      	blx	r7
 801a4b4:	3001      	adds	r0, #1
 801a4b6:	d10c      	bne.n	801a4d2 <_printf_float+0x3f2>
 801a4b8:	e65e      	b.n	801a178 <_printf_float+0x98>
 801a4ba:	2301      	movs	r3, #1
 801a4bc:	465a      	mov	r2, fp
 801a4be:	4631      	mov	r1, r6
 801a4c0:	4628      	mov	r0, r5
 801a4c2:	47b8      	blx	r7
 801a4c4:	3001      	adds	r0, #1
 801a4c6:	f43f ae57 	beq.w	801a178 <_printf_float+0x98>
 801a4ca:	f108 0801 	add.w	r8, r8, #1
 801a4ce:	45c8      	cmp	r8, r9
 801a4d0:	dbf3      	blt.n	801a4ba <_printf_float+0x3da>
 801a4d2:	4653      	mov	r3, sl
 801a4d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801a4d8:	e6dc      	b.n	801a294 <_printf_float+0x1b4>
 801a4da:	f04f 0800 	mov.w	r8, #0
 801a4de:	f104 0b1a 	add.w	fp, r4, #26
 801a4e2:	e7f4      	b.n	801a4ce <_printf_float+0x3ee>
 801a4e4:	2301      	movs	r3, #1
 801a4e6:	4642      	mov	r2, r8
 801a4e8:	e7e1      	b.n	801a4ae <_printf_float+0x3ce>
 801a4ea:	2301      	movs	r3, #1
 801a4ec:	464a      	mov	r2, r9
 801a4ee:	4631      	mov	r1, r6
 801a4f0:	4628      	mov	r0, r5
 801a4f2:	47b8      	blx	r7
 801a4f4:	3001      	adds	r0, #1
 801a4f6:	f43f ae3f 	beq.w	801a178 <_printf_float+0x98>
 801a4fa:	f108 0801 	add.w	r8, r8, #1
 801a4fe:	68e3      	ldr	r3, [r4, #12]
 801a500:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a502:	1a5b      	subs	r3, r3, r1
 801a504:	4543      	cmp	r3, r8
 801a506:	dcf0      	bgt.n	801a4ea <_printf_float+0x40a>
 801a508:	e6f8      	b.n	801a2fc <_printf_float+0x21c>
 801a50a:	f04f 0800 	mov.w	r8, #0
 801a50e:	f104 0919 	add.w	r9, r4, #25
 801a512:	e7f4      	b.n	801a4fe <_printf_float+0x41e>

0801a514 <_printf_common>:
 801a514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a518:	4616      	mov	r6, r2
 801a51a:	4698      	mov	r8, r3
 801a51c:	688a      	ldr	r2, [r1, #8]
 801a51e:	690b      	ldr	r3, [r1, #16]
 801a520:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a524:	4293      	cmp	r3, r2
 801a526:	bfb8      	it	lt
 801a528:	4613      	movlt	r3, r2
 801a52a:	6033      	str	r3, [r6, #0]
 801a52c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a530:	4607      	mov	r7, r0
 801a532:	460c      	mov	r4, r1
 801a534:	b10a      	cbz	r2, 801a53a <_printf_common+0x26>
 801a536:	3301      	adds	r3, #1
 801a538:	6033      	str	r3, [r6, #0]
 801a53a:	6823      	ldr	r3, [r4, #0]
 801a53c:	0699      	lsls	r1, r3, #26
 801a53e:	bf42      	ittt	mi
 801a540:	6833      	ldrmi	r3, [r6, #0]
 801a542:	3302      	addmi	r3, #2
 801a544:	6033      	strmi	r3, [r6, #0]
 801a546:	6825      	ldr	r5, [r4, #0]
 801a548:	f015 0506 	ands.w	r5, r5, #6
 801a54c:	d106      	bne.n	801a55c <_printf_common+0x48>
 801a54e:	f104 0a19 	add.w	sl, r4, #25
 801a552:	68e3      	ldr	r3, [r4, #12]
 801a554:	6832      	ldr	r2, [r6, #0]
 801a556:	1a9b      	subs	r3, r3, r2
 801a558:	42ab      	cmp	r3, r5
 801a55a:	dc26      	bgt.n	801a5aa <_printf_common+0x96>
 801a55c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a560:	6822      	ldr	r2, [r4, #0]
 801a562:	3b00      	subs	r3, #0
 801a564:	bf18      	it	ne
 801a566:	2301      	movne	r3, #1
 801a568:	0692      	lsls	r2, r2, #26
 801a56a:	d42b      	bmi.n	801a5c4 <_printf_common+0xb0>
 801a56c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a570:	4641      	mov	r1, r8
 801a572:	4638      	mov	r0, r7
 801a574:	47c8      	blx	r9
 801a576:	3001      	adds	r0, #1
 801a578:	d01e      	beq.n	801a5b8 <_printf_common+0xa4>
 801a57a:	6823      	ldr	r3, [r4, #0]
 801a57c:	6922      	ldr	r2, [r4, #16]
 801a57e:	f003 0306 	and.w	r3, r3, #6
 801a582:	2b04      	cmp	r3, #4
 801a584:	bf02      	ittt	eq
 801a586:	68e5      	ldreq	r5, [r4, #12]
 801a588:	6833      	ldreq	r3, [r6, #0]
 801a58a:	1aed      	subeq	r5, r5, r3
 801a58c:	68a3      	ldr	r3, [r4, #8]
 801a58e:	bf0c      	ite	eq
 801a590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a594:	2500      	movne	r5, #0
 801a596:	4293      	cmp	r3, r2
 801a598:	bfc4      	itt	gt
 801a59a:	1a9b      	subgt	r3, r3, r2
 801a59c:	18ed      	addgt	r5, r5, r3
 801a59e:	2600      	movs	r6, #0
 801a5a0:	341a      	adds	r4, #26
 801a5a2:	42b5      	cmp	r5, r6
 801a5a4:	d11a      	bne.n	801a5dc <_printf_common+0xc8>
 801a5a6:	2000      	movs	r0, #0
 801a5a8:	e008      	b.n	801a5bc <_printf_common+0xa8>
 801a5aa:	2301      	movs	r3, #1
 801a5ac:	4652      	mov	r2, sl
 801a5ae:	4641      	mov	r1, r8
 801a5b0:	4638      	mov	r0, r7
 801a5b2:	47c8      	blx	r9
 801a5b4:	3001      	adds	r0, #1
 801a5b6:	d103      	bne.n	801a5c0 <_printf_common+0xac>
 801a5b8:	f04f 30ff 	mov.w	r0, #4294967295
 801a5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5c0:	3501      	adds	r5, #1
 801a5c2:	e7c6      	b.n	801a552 <_printf_common+0x3e>
 801a5c4:	18e1      	adds	r1, r4, r3
 801a5c6:	1c5a      	adds	r2, r3, #1
 801a5c8:	2030      	movs	r0, #48	@ 0x30
 801a5ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a5ce:	4422      	add	r2, r4
 801a5d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a5d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a5d8:	3302      	adds	r3, #2
 801a5da:	e7c7      	b.n	801a56c <_printf_common+0x58>
 801a5dc:	2301      	movs	r3, #1
 801a5de:	4622      	mov	r2, r4
 801a5e0:	4641      	mov	r1, r8
 801a5e2:	4638      	mov	r0, r7
 801a5e4:	47c8      	blx	r9
 801a5e6:	3001      	adds	r0, #1
 801a5e8:	d0e6      	beq.n	801a5b8 <_printf_common+0xa4>
 801a5ea:	3601      	adds	r6, #1
 801a5ec:	e7d9      	b.n	801a5a2 <_printf_common+0x8e>
	...

0801a5f0 <_printf_i>:
 801a5f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a5f4:	7e0f      	ldrb	r7, [r1, #24]
 801a5f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a5f8:	2f78      	cmp	r7, #120	@ 0x78
 801a5fa:	4691      	mov	r9, r2
 801a5fc:	4680      	mov	r8, r0
 801a5fe:	460c      	mov	r4, r1
 801a600:	469a      	mov	sl, r3
 801a602:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a606:	d807      	bhi.n	801a618 <_printf_i+0x28>
 801a608:	2f62      	cmp	r7, #98	@ 0x62
 801a60a:	d80a      	bhi.n	801a622 <_printf_i+0x32>
 801a60c:	2f00      	cmp	r7, #0
 801a60e:	f000 80d2 	beq.w	801a7b6 <_printf_i+0x1c6>
 801a612:	2f58      	cmp	r7, #88	@ 0x58
 801a614:	f000 80b9 	beq.w	801a78a <_printf_i+0x19a>
 801a618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a61c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a620:	e03a      	b.n	801a698 <_printf_i+0xa8>
 801a622:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a626:	2b15      	cmp	r3, #21
 801a628:	d8f6      	bhi.n	801a618 <_printf_i+0x28>
 801a62a:	a101      	add	r1, pc, #4	@ (adr r1, 801a630 <_printf_i+0x40>)
 801a62c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a630:	0801a689 	.word	0x0801a689
 801a634:	0801a69d 	.word	0x0801a69d
 801a638:	0801a619 	.word	0x0801a619
 801a63c:	0801a619 	.word	0x0801a619
 801a640:	0801a619 	.word	0x0801a619
 801a644:	0801a619 	.word	0x0801a619
 801a648:	0801a69d 	.word	0x0801a69d
 801a64c:	0801a619 	.word	0x0801a619
 801a650:	0801a619 	.word	0x0801a619
 801a654:	0801a619 	.word	0x0801a619
 801a658:	0801a619 	.word	0x0801a619
 801a65c:	0801a79d 	.word	0x0801a79d
 801a660:	0801a6c7 	.word	0x0801a6c7
 801a664:	0801a757 	.word	0x0801a757
 801a668:	0801a619 	.word	0x0801a619
 801a66c:	0801a619 	.word	0x0801a619
 801a670:	0801a7bf 	.word	0x0801a7bf
 801a674:	0801a619 	.word	0x0801a619
 801a678:	0801a6c7 	.word	0x0801a6c7
 801a67c:	0801a619 	.word	0x0801a619
 801a680:	0801a619 	.word	0x0801a619
 801a684:	0801a75f 	.word	0x0801a75f
 801a688:	6833      	ldr	r3, [r6, #0]
 801a68a:	1d1a      	adds	r2, r3, #4
 801a68c:	681b      	ldr	r3, [r3, #0]
 801a68e:	6032      	str	r2, [r6, #0]
 801a690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a694:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a698:	2301      	movs	r3, #1
 801a69a:	e09d      	b.n	801a7d8 <_printf_i+0x1e8>
 801a69c:	6833      	ldr	r3, [r6, #0]
 801a69e:	6820      	ldr	r0, [r4, #0]
 801a6a0:	1d19      	adds	r1, r3, #4
 801a6a2:	6031      	str	r1, [r6, #0]
 801a6a4:	0606      	lsls	r6, r0, #24
 801a6a6:	d501      	bpl.n	801a6ac <_printf_i+0xbc>
 801a6a8:	681d      	ldr	r5, [r3, #0]
 801a6aa:	e003      	b.n	801a6b4 <_printf_i+0xc4>
 801a6ac:	0645      	lsls	r5, r0, #25
 801a6ae:	d5fb      	bpl.n	801a6a8 <_printf_i+0xb8>
 801a6b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a6b4:	2d00      	cmp	r5, #0
 801a6b6:	da03      	bge.n	801a6c0 <_printf_i+0xd0>
 801a6b8:	232d      	movs	r3, #45	@ 0x2d
 801a6ba:	426d      	negs	r5, r5
 801a6bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a6c0:	4859      	ldr	r0, [pc, #356]	@ (801a828 <_printf_i+0x238>)
 801a6c2:	230a      	movs	r3, #10
 801a6c4:	e011      	b.n	801a6ea <_printf_i+0xfa>
 801a6c6:	6821      	ldr	r1, [r4, #0]
 801a6c8:	6833      	ldr	r3, [r6, #0]
 801a6ca:	0608      	lsls	r0, r1, #24
 801a6cc:	f853 5b04 	ldr.w	r5, [r3], #4
 801a6d0:	d402      	bmi.n	801a6d8 <_printf_i+0xe8>
 801a6d2:	0649      	lsls	r1, r1, #25
 801a6d4:	bf48      	it	mi
 801a6d6:	b2ad      	uxthmi	r5, r5
 801a6d8:	2f6f      	cmp	r7, #111	@ 0x6f
 801a6da:	4853      	ldr	r0, [pc, #332]	@ (801a828 <_printf_i+0x238>)
 801a6dc:	6033      	str	r3, [r6, #0]
 801a6de:	bf14      	ite	ne
 801a6e0:	230a      	movne	r3, #10
 801a6e2:	2308      	moveq	r3, #8
 801a6e4:	2100      	movs	r1, #0
 801a6e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a6ea:	6866      	ldr	r6, [r4, #4]
 801a6ec:	60a6      	str	r6, [r4, #8]
 801a6ee:	2e00      	cmp	r6, #0
 801a6f0:	bfa2      	ittt	ge
 801a6f2:	6821      	ldrge	r1, [r4, #0]
 801a6f4:	f021 0104 	bicge.w	r1, r1, #4
 801a6f8:	6021      	strge	r1, [r4, #0]
 801a6fa:	b90d      	cbnz	r5, 801a700 <_printf_i+0x110>
 801a6fc:	2e00      	cmp	r6, #0
 801a6fe:	d04b      	beq.n	801a798 <_printf_i+0x1a8>
 801a700:	4616      	mov	r6, r2
 801a702:	fbb5 f1f3 	udiv	r1, r5, r3
 801a706:	fb03 5711 	mls	r7, r3, r1, r5
 801a70a:	5dc7      	ldrb	r7, [r0, r7]
 801a70c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a710:	462f      	mov	r7, r5
 801a712:	42bb      	cmp	r3, r7
 801a714:	460d      	mov	r5, r1
 801a716:	d9f4      	bls.n	801a702 <_printf_i+0x112>
 801a718:	2b08      	cmp	r3, #8
 801a71a:	d10b      	bne.n	801a734 <_printf_i+0x144>
 801a71c:	6823      	ldr	r3, [r4, #0]
 801a71e:	07df      	lsls	r7, r3, #31
 801a720:	d508      	bpl.n	801a734 <_printf_i+0x144>
 801a722:	6923      	ldr	r3, [r4, #16]
 801a724:	6861      	ldr	r1, [r4, #4]
 801a726:	4299      	cmp	r1, r3
 801a728:	bfde      	ittt	le
 801a72a:	2330      	movle	r3, #48	@ 0x30
 801a72c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a730:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a734:	1b92      	subs	r2, r2, r6
 801a736:	6122      	str	r2, [r4, #16]
 801a738:	f8cd a000 	str.w	sl, [sp]
 801a73c:	464b      	mov	r3, r9
 801a73e:	aa03      	add	r2, sp, #12
 801a740:	4621      	mov	r1, r4
 801a742:	4640      	mov	r0, r8
 801a744:	f7ff fee6 	bl	801a514 <_printf_common>
 801a748:	3001      	adds	r0, #1
 801a74a:	d14a      	bne.n	801a7e2 <_printf_i+0x1f2>
 801a74c:	f04f 30ff 	mov.w	r0, #4294967295
 801a750:	b004      	add	sp, #16
 801a752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a756:	6823      	ldr	r3, [r4, #0]
 801a758:	f043 0320 	orr.w	r3, r3, #32
 801a75c:	6023      	str	r3, [r4, #0]
 801a75e:	4833      	ldr	r0, [pc, #204]	@ (801a82c <_printf_i+0x23c>)
 801a760:	2778      	movs	r7, #120	@ 0x78
 801a762:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a766:	6823      	ldr	r3, [r4, #0]
 801a768:	6831      	ldr	r1, [r6, #0]
 801a76a:	061f      	lsls	r7, r3, #24
 801a76c:	f851 5b04 	ldr.w	r5, [r1], #4
 801a770:	d402      	bmi.n	801a778 <_printf_i+0x188>
 801a772:	065f      	lsls	r7, r3, #25
 801a774:	bf48      	it	mi
 801a776:	b2ad      	uxthmi	r5, r5
 801a778:	6031      	str	r1, [r6, #0]
 801a77a:	07d9      	lsls	r1, r3, #31
 801a77c:	bf44      	itt	mi
 801a77e:	f043 0320 	orrmi.w	r3, r3, #32
 801a782:	6023      	strmi	r3, [r4, #0]
 801a784:	b11d      	cbz	r5, 801a78e <_printf_i+0x19e>
 801a786:	2310      	movs	r3, #16
 801a788:	e7ac      	b.n	801a6e4 <_printf_i+0xf4>
 801a78a:	4827      	ldr	r0, [pc, #156]	@ (801a828 <_printf_i+0x238>)
 801a78c:	e7e9      	b.n	801a762 <_printf_i+0x172>
 801a78e:	6823      	ldr	r3, [r4, #0]
 801a790:	f023 0320 	bic.w	r3, r3, #32
 801a794:	6023      	str	r3, [r4, #0]
 801a796:	e7f6      	b.n	801a786 <_printf_i+0x196>
 801a798:	4616      	mov	r6, r2
 801a79a:	e7bd      	b.n	801a718 <_printf_i+0x128>
 801a79c:	6833      	ldr	r3, [r6, #0]
 801a79e:	6825      	ldr	r5, [r4, #0]
 801a7a0:	6961      	ldr	r1, [r4, #20]
 801a7a2:	1d18      	adds	r0, r3, #4
 801a7a4:	6030      	str	r0, [r6, #0]
 801a7a6:	062e      	lsls	r6, r5, #24
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	d501      	bpl.n	801a7b0 <_printf_i+0x1c0>
 801a7ac:	6019      	str	r1, [r3, #0]
 801a7ae:	e002      	b.n	801a7b6 <_printf_i+0x1c6>
 801a7b0:	0668      	lsls	r0, r5, #25
 801a7b2:	d5fb      	bpl.n	801a7ac <_printf_i+0x1bc>
 801a7b4:	8019      	strh	r1, [r3, #0]
 801a7b6:	2300      	movs	r3, #0
 801a7b8:	6123      	str	r3, [r4, #16]
 801a7ba:	4616      	mov	r6, r2
 801a7bc:	e7bc      	b.n	801a738 <_printf_i+0x148>
 801a7be:	6833      	ldr	r3, [r6, #0]
 801a7c0:	1d1a      	adds	r2, r3, #4
 801a7c2:	6032      	str	r2, [r6, #0]
 801a7c4:	681e      	ldr	r6, [r3, #0]
 801a7c6:	6862      	ldr	r2, [r4, #4]
 801a7c8:	2100      	movs	r1, #0
 801a7ca:	4630      	mov	r0, r6
 801a7cc:	f7e5 fdb0 	bl	8000330 <memchr>
 801a7d0:	b108      	cbz	r0, 801a7d6 <_printf_i+0x1e6>
 801a7d2:	1b80      	subs	r0, r0, r6
 801a7d4:	6060      	str	r0, [r4, #4]
 801a7d6:	6863      	ldr	r3, [r4, #4]
 801a7d8:	6123      	str	r3, [r4, #16]
 801a7da:	2300      	movs	r3, #0
 801a7dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a7e0:	e7aa      	b.n	801a738 <_printf_i+0x148>
 801a7e2:	6923      	ldr	r3, [r4, #16]
 801a7e4:	4632      	mov	r2, r6
 801a7e6:	4649      	mov	r1, r9
 801a7e8:	4640      	mov	r0, r8
 801a7ea:	47d0      	blx	sl
 801a7ec:	3001      	adds	r0, #1
 801a7ee:	d0ad      	beq.n	801a74c <_printf_i+0x15c>
 801a7f0:	6823      	ldr	r3, [r4, #0]
 801a7f2:	079b      	lsls	r3, r3, #30
 801a7f4:	d413      	bmi.n	801a81e <_printf_i+0x22e>
 801a7f6:	68e0      	ldr	r0, [r4, #12]
 801a7f8:	9b03      	ldr	r3, [sp, #12]
 801a7fa:	4298      	cmp	r0, r3
 801a7fc:	bfb8      	it	lt
 801a7fe:	4618      	movlt	r0, r3
 801a800:	e7a6      	b.n	801a750 <_printf_i+0x160>
 801a802:	2301      	movs	r3, #1
 801a804:	4632      	mov	r2, r6
 801a806:	4649      	mov	r1, r9
 801a808:	4640      	mov	r0, r8
 801a80a:	47d0      	blx	sl
 801a80c:	3001      	adds	r0, #1
 801a80e:	d09d      	beq.n	801a74c <_printf_i+0x15c>
 801a810:	3501      	adds	r5, #1
 801a812:	68e3      	ldr	r3, [r4, #12]
 801a814:	9903      	ldr	r1, [sp, #12]
 801a816:	1a5b      	subs	r3, r3, r1
 801a818:	42ab      	cmp	r3, r5
 801a81a:	dcf2      	bgt.n	801a802 <_printf_i+0x212>
 801a81c:	e7eb      	b.n	801a7f6 <_printf_i+0x206>
 801a81e:	2500      	movs	r5, #0
 801a820:	f104 0619 	add.w	r6, r4, #25
 801a824:	e7f5      	b.n	801a812 <_printf_i+0x222>
 801a826:	bf00      	nop
 801a828:	0801f07b 	.word	0x0801f07b
 801a82c:	0801f08c 	.word	0x0801f08c

0801a830 <std>:
 801a830:	2300      	movs	r3, #0
 801a832:	b510      	push	{r4, lr}
 801a834:	4604      	mov	r4, r0
 801a836:	e9c0 3300 	strd	r3, r3, [r0]
 801a83a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a83e:	6083      	str	r3, [r0, #8]
 801a840:	8181      	strh	r1, [r0, #12]
 801a842:	6643      	str	r3, [r0, #100]	@ 0x64
 801a844:	81c2      	strh	r2, [r0, #14]
 801a846:	6183      	str	r3, [r0, #24]
 801a848:	4619      	mov	r1, r3
 801a84a:	2208      	movs	r2, #8
 801a84c:	305c      	adds	r0, #92	@ 0x5c
 801a84e:	f000 f914 	bl	801aa7a <memset>
 801a852:	4b0d      	ldr	r3, [pc, #52]	@ (801a888 <std+0x58>)
 801a854:	6263      	str	r3, [r4, #36]	@ 0x24
 801a856:	4b0d      	ldr	r3, [pc, #52]	@ (801a88c <std+0x5c>)
 801a858:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a85a:	4b0d      	ldr	r3, [pc, #52]	@ (801a890 <std+0x60>)
 801a85c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a85e:	4b0d      	ldr	r3, [pc, #52]	@ (801a894 <std+0x64>)
 801a860:	6323      	str	r3, [r4, #48]	@ 0x30
 801a862:	4b0d      	ldr	r3, [pc, #52]	@ (801a898 <std+0x68>)
 801a864:	6224      	str	r4, [r4, #32]
 801a866:	429c      	cmp	r4, r3
 801a868:	d006      	beq.n	801a878 <std+0x48>
 801a86a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a86e:	4294      	cmp	r4, r2
 801a870:	d002      	beq.n	801a878 <std+0x48>
 801a872:	33d0      	adds	r3, #208	@ 0xd0
 801a874:	429c      	cmp	r4, r3
 801a876:	d105      	bne.n	801a884 <std+0x54>
 801a878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a880:	f000 b996 	b.w	801abb0 <__retarget_lock_init_recursive>
 801a884:	bd10      	pop	{r4, pc}
 801a886:	bf00      	nop
 801a888:	0801a9f5 	.word	0x0801a9f5
 801a88c:	0801aa17 	.word	0x0801aa17
 801a890:	0801aa4f 	.word	0x0801aa4f
 801a894:	0801aa73 	.word	0x0801aa73
 801a898:	2401d8f4 	.word	0x2401d8f4

0801a89c <stdio_exit_handler>:
 801a89c:	4a02      	ldr	r2, [pc, #8]	@ (801a8a8 <stdio_exit_handler+0xc>)
 801a89e:	4903      	ldr	r1, [pc, #12]	@ (801a8ac <stdio_exit_handler+0x10>)
 801a8a0:	4803      	ldr	r0, [pc, #12]	@ (801a8b0 <stdio_exit_handler+0x14>)
 801a8a2:	f000 b869 	b.w	801a978 <_fwalk_sglue>
 801a8a6:	bf00      	nop
 801a8a8:	24000134 	.word	0x24000134
 801a8ac:	0801cd6d 	.word	0x0801cd6d
 801a8b0:	240002b0 	.word	0x240002b0

0801a8b4 <cleanup_stdio>:
 801a8b4:	6841      	ldr	r1, [r0, #4]
 801a8b6:	4b0c      	ldr	r3, [pc, #48]	@ (801a8e8 <cleanup_stdio+0x34>)
 801a8b8:	4299      	cmp	r1, r3
 801a8ba:	b510      	push	{r4, lr}
 801a8bc:	4604      	mov	r4, r0
 801a8be:	d001      	beq.n	801a8c4 <cleanup_stdio+0x10>
 801a8c0:	f002 fa54 	bl	801cd6c <_fflush_r>
 801a8c4:	68a1      	ldr	r1, [r4, #8]
 801a8c6:	4b09      	ldr	r3, [pc, #36]	@ (801a8ec <cleanup_stdio+0x38>)
 801a8c8:	4299      	cmp	r1, r3
 801a8ca:	d002      	beq.n	801a8d2 <cleanup_stdio+0x1e>
 801a8cc:	4620      	mov	r0, r4
 801a8ce:	f002 fa4d 	bl	801cd6c <_fflush_r>
 801a8d2:	68e1      	ldr	r1, [r4, #12]
 801a8d4:	4b06      	ldr	r3, [pc, #24]	@ (801a8f0 <cleanup_stdio+0x3c>)
 801a8d6:	4299      	cmp	r1, r3
 801a8d8:	d004      	beq.n	801a8e4 <cleanup_stdio+0x30>
 801a8da:	4620      	mov	r0, r4
 801a8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a8e0:	f002 ba44 	b.w	801cd6c <_fflush_r>
 801a8e4:	bd10      	pop	{r4, pc}
 801a8e6:	bf00      	nop
 801a8e8:	2401d8f4 	.word	0x2401d8f4
 801a8ec:	2401d95c 	.word	0x2401d95c
 801a8f0:	2401d9c4 	.word	0x2401d9c4

0801a8f4 <global_stdio_init.part.0>:
 801a8f4:	b510      	push	{r4, lr}
 801a8f6:	4b0b      	ldr	r3, [pc, #44]	@ (801a924 <global_stdio_init.part.0+0x30>)
 801a8f8:	4c0b      	ldr	r4, [pc, #44]	@ (801a928 <global_stdio_init.part.0+0x34>)
 801a8fa:	4a0c      	ldr	r2, [pc, #48]	@ (801a92c <global_stdio_init.part.0+0x38>)
 801a8fc:	601a      	str	r2, [r3, #0]
 801a8fe:	4620      	mov	r0, r4
 801a900:	2200      	movs	r2, #0
 801a902:	2104      	movs	r1, #4
 801a904:	f7ff ff94 	bl	801a830 <std>
 801a908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a90c:	2201      	movs	r2, #1
 801a90e:	2109      	movs	r1, #9
 801a910:	f7ff ff8e 	bl	801a830 <std>
 801a914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a918:	2202      	movs	r2, #2
 801a91a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a91e:	2112      	movs	r1, #18
 801a920:	f7ff bf86 	b.w	801a830 <std>
 801a924:	2401da2c 	.word	0x2401da2c
 801a928:	2401d8f4 	.word	0x2401d8f4
 801a92c:	0801a89d 	.word	0x0801a89d

0801a930 <__sfp_lock_acquire>:
 801a930:	4801      	ldr	r0, [pc, #4]	@ (801a938 <__sfp_lock_acquire+0x8>)
 801a932:	f000 b93e 	b.w	801abb2 <__retarget_lock_acquire_recursive>
 801a936:	bf00      	nop
 801a938:	2401da35 	.word	0x2401da35

0801a93c <__sfp_lock_release>:
 801a93c:	4801      	ldr	r0, [pc, #4]	@ (801a944 <__sfp_lock_release+0x8>)
 801a93e:	f000 b939 	b.w	801abb4 <__retarget_lock_release_recursive>
 801a942:	bf00      	nop
 801a944:	2401da35 	.word	0x2401da35

0801a948 <__sinit>:
 801a948:	b510      	push	{r4, lr}
 801a94a:	4604      	mov	r4, r0
 801a94c:	f7ff fff0 	bl	801a930 <__sfp_lock_acquire>
 801a950:	6a23      	ldr	r3, [r4, #32]
 801a952:	b11b      	cbz	r3, 801a95c <__sinit+0x14>
 801a954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a958:	f7ff bff0 	b.w	801a93c <__sfp_lock_release>
 801a95c:	4b04      	ldr	r3, [pc, #16]	@ (801a970 <__sinit+0x28>)
 801a95e:	6223      	str	r3, [r4, #32]
 801a960:	4b04      	ldr	r3, [pc, #16]	@ (801a974 <__sinit+0x2c>)
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	2b00      	cmp	r3, #0
 801a966:	d1f5      	bne.n	801a954 <__sinit+0xc>
 801a968:	f7ff ffc4 	bl	801a8f4 <global_stdio_init.part.0>
 801a96c:	e7f2      	b.n	801a954 <__sinit+0xc>
 801a96e:	bf00      	nop
 801a970:	0801a8b5 	.word	0x0801a8b5
 801a974:	2401da2c 	.word	0x2401da2c

0801a978 <_fwalk_sglue>:
 801a978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a97c:	4607      	mov	r7, r0
 801a97e:	4688      	mov	r8, r1
 801a980:	4614      	mov	r4, r2
 801a982:	2600      	movs	r6, #0
 801a984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a988:	f1b9 0901 	subs.w	r9, r9, #1
 801a98c:	d505      	bpl.n	801a99a <_fwalk_sglue+0x22>
 801a98e:	6824      	ldr	r4, [r4, #0]
 801a990:	2c00      	cmp	r4, #0
 801a992:	d1f7      	bne.n	801a984 <_fwalk_sglue+0xc>
 801a994:	4630      	mov	r0, r6
 801a996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a99a:	89ab      	ldrh	r3, [r5, #12]
 801a99c:	2b01      	cmp	r3, #1
 801a99e:	d907      	bls.n	801a9b0 <_fwalk_sglue+0x38>
 801a9a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a9a4:	3301      	adds	r3, #1
 801a9a6:	d003      	beq.n	801a9b0 <_fwalk_sglue+0x38>
 801a9a8:	4629      	mov	r1, r5
 801a9aa:	4638      	mov	r0, r7
 801a9ac:	47c0      	blx	r8
 801a9ae:	4306      	orrs	r6, r0
 801a9b0:	3568      	adds	r5, #104	@ 0x68
 801a9b2:	e7e9      	b.n	801a988 <_fwalk_sglue+0x10>

0801a9b4 <siprintf>:
 801a9b4:	b40e      	push	{r1, r2, r3}
 801a9b6:	b500      	push	{lr}
 801a9b8:	b09c      	sub	sp, #112	@ 0x70
 801a9ba:	ab1d      	add	r3, sp, #116	@ 0x74
 801a9bc:	9002      	str	r0, [sp, #8]
 801a9be:	9006      	str	r0, [sp, #24]
 801a9c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a9c4:	4809      	ldr	r0, [pc, #36]	@ (801a9ec <siprintf+0x38>)
 801a9c6:	9107      	str	r1, [sp, #28]
 801a9c8:	9104      	str	r1, [sp, #16]
 801a9ca:	4909      	ldr	r1, [pc, #36]	@ (801a9f0 <siprintf+0x3c>)
 801a9cc:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9d0:	9105      	str	r1, [sp, #20]
 801a9d2:	6800      	ldr	r0, [r0, #0]
 801a9d4:	9301      	str	r3, [sp, #4]
 801a9d6:	a902      	add	r1, sp, #8
 801a9d8:	f002 f848 	bl	801ca6c <_svfiprintf_r>
 801a9dc:	9b02      	ldr	r3, [sp, #8]
 801a9de:	2200      	movs	r2, #0
 801a9e0:	701a      	strb	r2, [r3, #0]
 801a9e2:	b01c      	add	sp, #112	@ 0x70
 801a9e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a9e8:	b003      	add	sp, #12
 801a9ea:	4770      	bx	lr
 801a9ec:	240002ac 	.word	0x240002ac
 801a9f0:	ffff0208 	.word	0xffff0208

0801a9f4 <__sread>:
 801a9f4:	b510      	push	{r4, lr}
 801a9f6:	460c      	mov	r4, r1
 801a9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9fc:	f000 f88a 	bl	801ab14 <_read_r>
 801aa00:	2800      	cmp	r0, #0
 801aa02:	bfab      	itete	ge
 801aa04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801aa06:	89a3      	ldrhlt	r3, [r4, #12]
 801aa08:	181b      	addge	r3, r3, r0
 801aa0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801aa0e:	bfac      	ite	ge
 801aa10:	6563      	strge	r3, [r4, #84]	@ 0x54
 801aa12:	81a3      	strhlt	r3, [r4, #12]
 801aa14:	bd10      	pop	{r4, pc}

0801aa16 <__swrite>:
 801aa16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa1a:	461f      	mov	r7, r3
 801aa1c:	898b      	ldrh	r3, [r1, #12]
 801aa1e:	05db      	lsls	r3, r3, #23
 801aa20:	4605      	mov	r5, r0
 801aa22:	460c      	mov	r4, r1
 801aa24:	4616      	mov	r6, r2
 801aa26:	d505      	bpl.n	801aa34 <__swrite+0x1e>
 801aa28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa2c:	2302      	movs	r3, #2
 801aa2e:	2200      	movs	r2, #0
 801aa30:	f000 f85e 	bl	801aaf0 <_lseek_r>
 801aa34:	89a3      	ldrh	r3, [r4, #12]
 801aa36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aa3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801aa3e:	81a3      	strh	r3, [r4, #12]
 801aa40:	4632      	mov	r2, r6
 801aa42:	463b      	mov	r3, r7
 801aa44:	4628      	mov	r0, r5
 801aa46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa4a:	f000 b875 	b.w	801ab38 <_write_r>

0801aa4e <__sseek>:
 801aa4e:	b510      	push	{r4, lr}
 801aa50:	460c      	mov	r4, r1
 801aa52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa56:	f000 f84b 	bl	801aaf0 <_lseek_r>
 801aa5a:	1c43      	adds	r3, r0, #1
 801aa5c:	89a3      	ldrh	r3, [r4, #12]
 801aa5e:	bf15      	itete	ne
 801aa60:	6560      	strne	r0, [r4, #84]	@ 0x54
 801aa62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801aa66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801aa6a:	81a3      	strheq	r3, [r4, #12]
 801aa6c:	bf18      	it	ne
 801aa6e:	81a3      	strhne	r3, [r4, #12]
 801aa70:	bd10      	pop	{r4, pc}

0801aa72 <__sclose>:
 801aa72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa76:	f000 b82b 	b.w	801aad0 <_close_r>

0801aa7a <memset>:
 801aa7a:	4402      	add	r2, r0
 801aa7c:	4603      	mov	r3, r0
 801aa7e:	4293      	cmp	r3, r2
 801aa80:	d100      	bne.n	801aa84 <memset+0xa>
 801aa82:	4770      	bx	lr
 801aa84:	f803 1b01 	strb.w	r1, [r3], #1
 801aa88:	e7f9      	b.n	801aa7e <memset+0x4>

0801aa8a <strchr>:
 801aa8a:	b2c9      	uxtb	r1, r1
 801aa8c:	4603      	mov	r3, r0
 801aa8e:	4618      	mov	r0, r3
 801aa90:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa94:	b112      	cbz	r2, 801aa9c <strchr+0x12>
 801aa96:	428a      	cmp	r2, r1
 801aa98:	d1f9      	bne.n	801aa8e <strchr+0x4>
 801aa9a:	4770      	bx	lr
 801aa9c:	2900      	cmp	r1, #0
 801aa9e:	bf18      	it	ne
 801aaa0:	2000      	movne	r0, #0
 801aaa2:	4770      	bx	lr

0801aaa4 <strncmp>:
 801aaa4:	b510      	push	{r4, lr}
 801aaa6:	b16a      	cbz	r2, 801aac4 <strncmp+0x20>
 801aaa8:	3901      	subs	r1, #1
 801aaaa:	1884      	adds	r4, r0, r2
 801aaac:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aab0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801aab4:	429a      	cmp	r2, r3
 801aab6:	d103      	bne.n	801aac0 <strncmp+0x1c>
 801aab8:	42a0      	cmp	r0, r4
 801aaba:	d001      	beq.n	801aac0 <strncmp+0x1c>
 801aabc:	2a00      	cmp	r2, #0
 801aabe:	d1f5      	bne.n	801aaac <strncmp+0x8>
 801aac0:	1ad0      	subs	r0, r2, r3
 801aac2:	bd10      	pop	{r4, pc}
 801aac4:	4610      	mov	r0, r2
 801aac6:	e7fc      	b.n	801aac2 <strncmp+0x1e>

0801aac8 <_localeconv_r>:
 801aac8:	4800      	ldr	r0, [pc, #0]	@ (801aacc <_localeconv_r+0x4>)
 801aaca:	4770      	bx	lr
 801aacc:	24000230 	.word	0x24000230

0801aad0 <_close_r>:
 801aad0:	b538      	push	{r3, r4, r5, lr}
 801aad2:	4d06      	ldr	r5, [pc, #24]	@ (801aaec <_close_r+0x1c>)
 801aad4:	2300      	movs	r3, #0
 801aad6:	4604      	mov	r4, r0
 801aad8:	4608      	mov	r0, r1
 801aada:	602b      	str	r3, [r5, #0]
 801aadc:	f7e8 f996 	bl	8002e0c <_close>
 801aae0:	1c43      	adds	r3, r0, #1
 801aae2:	d102      	bne.n	801aaea <_close_r+0x1a>
 801aae4:	682b      	ldr	r3, [r5, #0]
 801aae6:	b103      	cbz	r3, 801aaea <_close_r+0x1a>
 801aae8:	6023      	str	r3, [r4, #0]
 801aaea:	bd38      	pop	{r3, r4, r5, pc}
 801aaec:	2401da30 	.word	0x2401da30

0801aaf0 <_lseek_r>:
 801aaf0:	b538      	push	{r3, r4, r5, lr}
 801aaf2:	4d07      	ldr	r5, [pc, #28]	@ (801ab10 <_lseek_r+0x20>)
 801aaf4:	4604      	mov	r4, r0
 801aaf6:	4608      	mov	r0, r1
 801aaf8:	4611      	mov	r1, r2
 801aafa:	2200      	movs	r2, #0
 801aafc:	602a      	str	r2, [r5, #0]
 801aafe:	461a      	mov	r2, r3
 801ab00:	f7e8 f9ab 	bl	8002e5a <_lseek>
 801ab04:	1c43      	adds	r3, r0, #1
 801ab06:	d102      	bne.n	801ab0e <_lseek_r+0x1e>
 801ab08:	682b      	ldr	r3, [r5, #0]
 801ab0a:	b103      	cbz	r3, 801ab0e <_lseek_r+0x1e>
 801ab0c:	6023      	str	r3, [r4, #0]
 801ab0e:	bd38      	pop	{r3, r4, r5, pc}
 801ab10:	2401da30 	.word	0x2401da30

0801ab14 <_read_r>:
 801ab14:	b538      	push	{r3, r4, r5, lr}
 801ab16:	4d07      	ldr	r5, [pc, #28]	@ (801ab34 <_read_r+0x20>)
 801ab18:	4604      	mov	r4, r0
 801ab1a:	4608      	mov	r0, r1
 801ab1c:	4611      	mov	r1, r2
 801ab1e:	2200      	movs	r2, #0
 801ab20:	602a      	str	r2, [r5, #0]
 801ab22:	461a      	mov	r2, r3
 801ab24:	f7e8 f939 	bl	8002d9a <_read>
 801ab28:	1c43      	adds	r3, r0, #1
 801ab2a:	d102      	bne.n	801ab32 <_read_r+0x1e>
 801ab2c:	682b      	ldr	r3, [r5, #0]
 801ab2e:	b103      	cbz	r3, 801ab32 <_read_r+0x1e>
 801ab30:	6023      	str	r3, [r4, #0]
 801ab32:	bd38      	pop	{r3, r4, r5, pc}
 801ab34:	2401da30 	.word	0x2401da30

0801ab38 <_write_r>:
 801ab38:	b538      	push	{r3, r4, r5, lr}
 801ab3a:	4d07      	ldr	r5, [pc, #28]	@ (801ab58 <_write_r+0x20>)
 801ab3c:	4604      	mov	r4, r0
 801ab3e:	4608      	mov	r0, r1
 801ab40:	4611      	mov	r1, r2
 801ab42:	2200      	movs	r2, #0
 801ab44:	602a      	str	r2, [r5, #0]
 801ab46:	461a      	mov	r2, r3
 801ab48:	f7e8 f944 	bl	8002dd4 <_write>
 801ab4c:	1c43      	adds	r3, r0, #1
 801ab4e:	d102      	bne.n	801ab56 <_write_r+0x1e>
 801ab50:	682b      	ldr	r3, [r5, #0]
 801ab52:	b103      	cbz	r3, 801ab56 <_write_r+0x1e>
 801ab54:	6023      	str	r3, [r4, #0]
 801ab56:	bd38      	pop	{r3, r4, r5, pc}
 801ab58:	2401da30 	.word	0x2401da30

0801ab5c <__errno>:
 801ab5c:	4b01      	ldr	r3, [pc, #4]	@ (801ab64 <__errno+0x8>)
 801ab5e:	6818      	ldr	r0, [r3, #0]
 801ab60:	4770      	bx	lr
 801ab62:	bf00      	nop
 801ab64:	240002ac 	.word	0x240002ac

0801ab68 <__libc_init_array>:
 801ab68:	b570      	push	{r4, r5, r6, lr}
 801ab6a:	4d0d      	ldr	r5, [pc, #52]	@ (801aba0 <__libc_init_array+0x38>)
 801ab6c:	4c0d      	ldr	r4, [pc, #52]	@ (801aba4 <__libc_init_array+0x3c>)
 801ab6e:	1b64      	subs	r4, r4, r5
 801ab70:	10a4      	asrs	r4, r4, #2
 801ab72:	2600      	movs	r6, #0
 801ab74:	42a6      	cmp	r6, r4
 801ab76:	d109      	bne.n	801ab8c <__libc_init_array+0x24>
 801ab78:	4d0b      	ldr	r5, [pc, #44]	@ (801aba8 <__libc_init_array+0x40>)
 801ab7a:	4c0c      	ldr	r4, [pc, #48]	@ (801abac <__libc_init_array+0x44>)
 801ab7c:	f003 fb18 	bl	801e1b0 <_init>
 801ab80:	1b64      	subs	r4, r4, r5
 801ab82:	10a4      	asrs	r4, r4, #2
 801ab84:	2600      	movs	r6, #0
 801ab86:	42a6      	cmp	r6, r4
 801ab88:	d105      	bne.n	801ab96 <__libc_init_array+0x2e>
 801ab8a:	bd70      	pop	{r4, r5, r6, pc}
 801ab8c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab90:	4798      	blx	r3
 801ab92:	3601      	adds	r6, #1
 801ab94:	e7ee      	b.n	801ab74 <__libc_init_array+0xc>
 801ab96:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab9a:	4798      	blx	r3
 801ab9c:	3601      	adds	r6, #1
 801ab9e:	e7f2      	b.n	801ab86 <__libc_init_array+0x1e>
 801aba0:	0801f658 	.word	0x0801f658
 801aba4:	0801f658 	.word	0x0801f658
 801aba8:	0801f658 	.word	0x0801f658
 801abac:	0801f65c 	.word	0x0801f65c

0801abb0 <__retarget_lock_init_recursive>:
 801abb0:	4770      	bx	lr

0801abb2 <__retarget_lock_acquire_recursive>:
 801abb2:	4770      	bx	lr

0801abb4 <__retarget_lock_release_recursive>:
 801abb4:	4770      	bx	lr

0801abb6 <memcpy>:
 801abb6:	440a      	add	r2, r1
 801abb8:	4291      	cmp	r1, r2
 801abba:	f100 33ff 	add.w	r3, r0, #4294967295
 801abbe:	d100      	bne.n	801abc2 <memcpy+0xc>
 801abc0:	4770      	bx	lr
 801abc2:	b510      	push	{r4, lr}
 801abc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801abc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801abcc:	4291      	cmp	r1, r2
 801abce:	d1f9      	bne.n	801abc4 <memcpy+0xe>
 801abd0:	bd10      	pop	{r4, pc}
 801abd2:	0000      	movs	r0, r0
 801abd4:	0000      	movs	r0, r0
	...

0801abd8 <nan>:
 801abd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801abe0 <nan+0x8>
 801abdc:	4770      	bx	lr
 801abde:	bf00      	nop
 801abe0:	00000000 	.word	0x00000000
 801abe4:	7ff80000 	.word	0x7ff80000

0801abe8 <quorem>:
 801abe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abec:	6903      	ldr	r3, [r0, #16]
 801abee:	690c      	ldr	r4, [r1, #16]
 801abf0:	42a3      	cmp	r3, r4
 801abf2:	4607      	mov	r7, r0
 801abf4:	db7e      	blt.n	801acf4 <quorem+0x10c>
 801abf6:	3c01      	subs	r4, #1
 801abf8:	f101 0814 	add.w	r8, r1, #20
 801abfc:	00a3      	lsls	r3, r4, #2
 801abfe:	f100 0514 	add.w	r5, r0, #20
 801ac02:	9300      	str	r3, [sp, #0]
 801ac04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ac08:	9301      	str	r3, [sp, #4]
 801ac0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ac0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ac12:	3301      	adds	r3, #1
 801ac14:	429a      	cmp	r2, r3
 801ac16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ac1a:	fbb2 f6f3 	udiv	r6, r2, r3
 801ac1e:	d32e      	bcc.n	801ac7e <quorem+0x96>
 801ac20:	f04f 0a00 	mov.w	sl, #0
 801ac24:	46c4      	mov	ip, r8
 801ac26:	46ae      	mov	lr, r5
 801ac28:	46d3      	mov	fp, sl
 801ac2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ac2e:	b298      	uxth	r0, r3
 801ac30:	fb06 a000 	mla	r0, r6, r0, sl
 801ac34:	0c02      	lsrs	r2, r0, #16
 801ac36:	0c1b      	lsrs	r3, r3, #16
 801ac38:	fb06 2303 	mla	r3, r6, r3, r2
 801ac3c:	f8de 2000 	ldr.w	r2, [lr]
 801ac40:	b280      	uxth	r0, r0
 801ac42:	b292      	uxth	r2, r2
 801ac44:	1a12      	subs	r2, r2, r0
 801ac46:	445a      	add	r2, fp
 801ac48:	f8de 0000 	ldr.w	r0, [lr]
 801ac4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ac50:	b29b      	uxth	r3, r3
 801ac52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801ac56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801ac5a:	b292      	uxth	r2, r2
 801ac5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801ac60:	45e1      	cmp	r9, ip
 801ac62:	f84e 2b04 	str.w	r2, [lr], #4
 801ac66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801ac6a:	d2de      	bcs.n	801ac2a <quorem+0x42>
 801ac6c:	9b00      	ldr	r3, [sp, #0]
 801ac6e:	58eb      	ldr	r3, [r5, r3]
 801ac70:	b92b      	cbnz	r3, 801ac7e <quorem+0x96>
 801ac72:	9b01      	ldr	r3, [sp, #4]
 801ac74:	3b04      	subs	r3, #4
 801ac76:	429d      	cmp	r5, r3
 801ac78:	461a      	mov	r2, r3
 801ac7a:	d32f      	bcc.n	801acdc <quorem+0xf4>
 801ac7c:	613c      	str	r4, [r7, #16]
 801ac7e:	4638      	mov	r0, r7
 801ac80:	f001 fca0 	bl	801c5c4 <__mcmp>
 801ac84:	2800      	cmp	r0, #0
 801ac86:	db25      	blt.n	801acd4 <quorem+0xec>
 801ac88:	4629      	mov	r1, r5
 801ac8a:	2000      	movs	r0, #0
 801ac8c:	f858 2b04 	ldr.w	r2, [r8], #4
 801ac90:	f8d1 c000 	ldr.w	ip, [r1]
 801ac94:	fa1f fe82 	uxth.w	lr, r2
 801ac98:	fa1f f38c 	uxth.w	r3, ip
 801ac9c:	eba3 030e 	sub.w	r3, r3, lr
 801aca0:	4403      	add	r3, r0
 801aca2:	0c12      	lsrs	r2, r2, #16
 801aca4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801aca8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801acac:	b29b      	uxth	r3, r3
 801acae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801acb2:	45c1      	cmp	r9, r8
 801acb4:	f841 3b04 	str.w	r3, [r1], #4
 801acb8:	ea4f 4022 	mov.w	r0, r2, asr #16
 801acbc:	d2e6      	bcs.n	801ac8c <quorem+0xa4>
 801acbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801acc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801acc6:	b922      	cbnz	r2, 801acd2 <quorem+0xea>
 801acc8:	3b04      	subs	r3, #4
 801acca:	429d      	cmp	r5, r3
 801accc:	461a      	mov	r2, r3
 801acce:	d30b      	bcc.n	801ace8 <quorem+0x100>
 801acd0:	613c      	str	r4, [r7, #16]
 801acd2:	3601      	adds	r6, #1
 801acd4:	4630      	mov	r0, r6
 801acd6:	b003      	add	sp, #12
 801acd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acdc:	6812      	ldr	r2, [r2, #0]
 801acde:	3b04      	subs	r3, #4
 801ace0:	2a00      	cmp	r2, #0
 801ace2:	d1cb      	bne.n	801ac7c <quorem+0x94>
 801ace4:	3c01      	subs	r4, #1
 801ace6:	e7c6      	b.n	801ac76 <quorem+0x8e>
 801ace8:	6812      	ldr	r2, [r2, #0]
 801acea:	3b04      	subs	r3, #4
 801acec:	2a00      	cmp	r2, #0
 801acee:	d1ef      	bne.n	801acd0 <quorem+0xe8>
 801acf0:	3c01      	subs	r4, #1
 801acf2:	e7ea      	b.n	801acca <quorem+0xe2>
 801acf4:	2000      	movs	r0, #0
 801acf6:	e7ee      	b.n	801acd6 <quorem+0xee>

0801acf8 <_dtoa_r>:
 801acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acfc:	ed2d 8b02 	vpush	{d8}
 801ad00:	69c7      	ldr	r7, [r0, #28]
 801ad02:	b091      	sub	sp, #68	@ 0x44
 801ad04:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ad08:	ec55 4b10 	vmov	r4, r5, d0
 801ad0c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801ad0e:	9107      	str	r1, [sp, #28]
 801ad10:	4681      	mov	r9, r0
 801ad12:	9209      	str	r2, [sp, #36]	@ 0x24
 801ad14:	930d      	str	r3, [sp, #52]	@ 0x34
 801ad16:	b97f      	cbnz	r7, 801ad38 <_dtoa_r+0x40>
 801ad18:	2010      	movs	r0, #16
 801ad1a:	f001 f8c7 	bl	801beac <malloc>
 801ad1e:	4602      	mov	r2, r0
 801ad20:	f8c9 001c 	str.w	r0, [r9, #28]
 801ad24:	b920      	cbnz	r0, 801ad30 <_dtoa_r+0x38>
 801ad26:	4ba0      	ldr	r3, [pc, #640]	@ (801afa8 <_dtoa_r+0x2b0>)
 801ad28:	21ef      	movs	r1, #239	@ 0xef
 801ad2a:	48a0      	ldr	r0, [pc, #640]	@ (801afac <_dtoa_r+0x2b4>)
 801ad2c:	f002 f870 	bl	801ce10 <__assert_func>
 801ad30:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801ad34:	6007      	str	r7, [r0, #0]
 801ad36:	60c7      	str	r7, [r0, #12]
 801ad38:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801ad3c:	6819      	ldr	r1, [r3, #0]
 801ad3e:	b159      	cbz	r1, 801ad58 <_dtoa_r+0x60>
 801ad40:	685a      	ldr	r2, [r3, #4]
 801ad42:	604a      	str	r2, [r1, #4]
 801ad44:	2301      	movs	r3, #1
 801ad46:	4093      	lsls	r3, r2
 801ad48:	608b      	str	r3, [r1, #8]
 801ad4a:	4648      	mov	r0, r9
 801ad4c:	f001 f9b6 	bl	801c0bc <_Bfree>
 801ad50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801ad54:	2200      	movs	r2, #0
 801ad56:	601a      	str	r2, [r3, #0]
 801ad58:	1e2b      	subs	r3, r5, #0
 801ad5a:	bfbb      	ittet	lt
 801ad5c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801ad60:	9303      	strlt	r3, [sp, #12]
 801ad62:	2300      	movge	r3, #0
 801ad64:	2201      	movlt	r2, #1
 801ad66:	bfac      	ite	ge
 801ad68:	6033      	strge	r3, [r6, #0]
 801ad6a:	6032      	strlt	r2, [r6, #0]
 801ad6c:	4b90      	ldr	r3, [pc, #576]	@ (801afb0 <_dtoa_r+0x2b8>)
 801ad6e:	9e03      	ldr	r6, [sp, #12]
 801ad70:	43b3      	bics	r3, r6
 801ad72:	d110      	bne.n	801ad96 <_dtoa_r+0x9e>
 801ad74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ad76:	f242 730f 	movw	r3, #9999	@ 0x270f
 801ad7a:	6013      	str	r3, [r2, #0]
 801ad7c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801ad80:	4323      	orrs	r3, r4
 801ad82:	f000 84de 	beq.w	801b742 <_dtoa_r+0xa4a>
 801ad86:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ad88:	4f8a      	ldr	r7, [pc, #552]	@ (801afb4 <_dtoa_r+0x2bc>)
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	f000 84e0 	beq.w	801b750 <_dtoa_r+0xa58>
 801ad90:	1cfb      	adds	r3, r7, #3
 801ad92:	f000 bcdb 	b.w	801b74c <_dtoa_r+0xa54>
 801ad96:	ed9d 8b02 	vldr	d8, [sp, #8]
 801ad9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ad9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ada2:	d10a      	bne.n	801adba <_dtoa_r+0xc2>
 801ada4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ada6:	2301      	movs	r3, #1
 801ada8:	6013      	str	r3, [r2, #0]
 801adaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801adac:	b113      	cbz	r3, 801adb4 <_dtoa_r+0xbc>
 801adae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801adb0:	4b81      	ldr	r3, [pc, #516]	@ (801afb8 <_dtoa_r+0x2c0>)
 801adb2:	6013      	str	r3, [r2, #0]
 801adb4:	4f81      	ldr	r7, [pc, #516]	@ (801afbc <_dtoa_r+0x2c4>)
 801adb6:	f000 bccb 	b.w	801b750 <_dtoa_r+0xa58>
 801adba:	aa0e      	add	r2, sp, #56	@ 0x38
 801adbc:	a90f      	add	r1, sp, #60	@ 0x3c
 801adbe:	4648      	mov	r0, r9
 801adc0:	eeb0 0b48 	vmov.f64	d0, d8
 801adc4:	f001 fd1e 	bl	801c804 <__d2b>
 801adc8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801adcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801adce:	9001      	str	r0, [sp, #4]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d045      	beq.n	801ae60 <_dtoa_r+0x168>
 801add4:	eeb0 7b48 	vmov.f64	d7, d8
 801add8:	ee18 1a90 	vmov	r1, s17
 801addc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801ade0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801ade4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801ade8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801adec:	2500      	movs	r5, #0
 801adee:	ee07 1a90 	vmov	s15, r1
 801adf2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801adf6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801af90 <_dtoa_r+0x298>
 801adfa:	ee37 7b46 	vsub.f64	d7, d7, d6
 801adfe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801af98 <_dtoa_r+0x2a0>
 801ae02:	eea7 6b05 	vfma.f64	d6, d7, d5
 801ae06:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801afa0 <_dtoa_r+0x2a8>
 801ae0a:	ee07 3a90 	vmov	s15, r3
 801ae0e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801ae12:	eeb0 7b46 	vmov.f64	d7, d6
 801ae16:	eea4 7b05 	vfma.f64	d7, d4, d5
 801ae1a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801ae1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801ae22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae26:	ee16 8a90 	vmov	r8, s13
 801ae2a:	d508      	bpl.n	801ae3e <_dtoa_r+0x146>
 801ae2c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801ae30:	eeb4 6b47 	vcmp.f64	d6, d7
 801ae34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae38:	bf18      	it	ne
 801ae3a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801ae3e:	f1b8 0f16 	cmp.w	r8, #22
 801ae42:	d82b      	bhi.n	801ae9c <_dtoa_r+0x1a4>
 801ae44:	495e      	ldr	r1, [pc, #376]	@ (801afc0 <_dtoa_r+0x2c8>)
 801ae46:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801ae4a:	ed91 7b00 	vldr	d7, [r1]
 801ae4e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801ae52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae56:	d501      	bpl.n	801ae5c <_dtoa_r+0x164>
 801ae58:	f108 38ff 	add.w	r8, r8, #4294967295
 801ae5c:	2100      	movs	r1, #0
 801ae5e:	e01e      	b.n	801ae9e <_dtoa_r+0x1a6>
 801ae60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ae62:	4413      	add	r3, r2
 801ae64:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801ae68:	2920      	cmp	r1, #32
 801ae6a:	bfc1      	itttt	gt
 801ae6c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801ae70:	408e      	lslgt	r6, r1
 801ae72:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801ae76:	fa24 f101 	lsrgt.w	r1, r4, r1
 801ae7a:	bfd6      	itet	le
 801ae7c:	f1c1 0120 	rsble	r1, r1, #32
 801ae80:	4331      	orrgt	r1, r6
 801ae82:	fa04 f101 	lslle.w	r1, r4, r1
 801ae86:	ee07 1a90 	vmov	s15, r1
 801ae8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ae8e:	3b01      	subs	r3, #1
 801ae90:	ee17 1a90 	vmov	r1, s15
 801ae94:	2501      	movs	r5, #1
 801ae96:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801ae9a:	e7a8      	b.n	801adee <_dtoa_r+0xf6>
 801ae9c:	2101      	movs	r1, #1
 801ae9e:	1ad2      	subs	r2, r2, r3
 801aea0:	1e53      	subs	r3, r2, #1
 801aea2:	9306      	str	r3, [sp, #24]
 801aea4:	bf45      	ittet	mi
 801aea6:	f1c2 0301 	rsbmi	r3, r2, #1
 801aeaa:	9305      	strmi	r3, [sp, #20]
 801aeac:	2300      	movpl	r3, #0
 801aeae:	2300      	movmi	r3, #0
 801aeb0:	bf4c      	ite	mi
 801aeb2:	9306      	strmi	r3, [sp, #24]
 801aeb4:	9305      	strpl	r3, [sp, #20]
 801aeb6:	f1b8 0f00 	cmp.w	r8, #0
 801aeba:	910c      	str	r1, [sp, #48]	@ 0x30
 801aebc:	db18      	blt.n	801aef0 <_dtoa_r+0x1f8>
 801aebe:	9b06      	ldr	r3, [sp, #24]
 801aec0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801aec4:	4443      	add	r3, r8
 801aec6:	9306      	str	r3, [sp, #24]
 801aec8:	2300      	movs	r3, #0
 801aeca:	9a07      	ldr	r2, [sp, #28]
 801aecc:	2a09      	cmp	r2, #9
 801aece:	d849      	bhi.n	801af64 <_dtoa_r+0x26c>
 801aed0:	2a05      	cmp	r2, #5
 801aed2:	bfc4      	itt	gt
 801aed4:	3a04      	subgt	r2, #4
 801aed6:	9207      	strgt	r2, [sp, #28]
 801aed8:	9a07      	ldr	r2, [sp, #28]
 801aeda:	f1a2 0202 	sub.w	r2, r2, #2
 801aede:	bfcc      	ite	gt
 801aee0:	2400      	movgt	r4, #0
 801aee2:	2401      	movle	r4, #1
 801aee4:	2a03      	cmp	r2, #3
 801aee6:	d848      	bhi.n	801af7a <_dtoa_r+0x282>
 801aee8:	e8df f002 	tbb	[pc, r2]
 801aeec:	3a2c2e0b 	.word	0x3a2c2e0b
 801aef0:	9b05      	ldr	r3, [sp, #20]
 801aef2:	2200      	movs	r2, #0
 801aef4:	eba3 0308 	sub.w	r3, r3, r8
 801aef8:	9305      	str	r3, [sp, #20]
 801aefa:	920a      	str	r2, [sp, #40]	@ 0x28
 801aefc:	f1c8 0300 	rsb	r3, r8, #0
 801af00:	e7e3      	b.n	801aeca <_dtoa_r+0x1d2>
 801af02:	2200      	movs	r2, #0
 801af04:	9208      	str	r2, [sp, #32]
 801af06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801af08:	2a00      	cmp	r2, #0
 801af0a:	dc39      	bgt.n	801af80 <_dtoa_r+0x288>
 801af0c:	f04f 0b01 	mov.w	fp, #1
 801af10:	46da      	mov	sl, fp
 801af12:	465a      	mov	r2, fp
 801af14:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801af18:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801af1c:	2100      	movs	r1, #0
 801af1e:	2004      	movs	r0, #4
 801af20:	f100 0614 	add.w	r6, r0, #20
 801af24:	4296      	cmp	r6, r2
 801af26:	d930      	bls.n	801af8a <_dtoa_r+0x292>
 801af28:	6079      	str	r1, [r7, #4]
 801af2a:	4648      	mov	r0, r9
 801af2c:	9304      	str	r3, [sp, #16]
 801af2e:	f001 f885 	bl	801c03c <_Balloc>
 801af32:	9b04      	ldr	r3, [sp, #16]
 801af34:	4607      	mov	r7, r0
 801af36:	2800      	cmp	r0, #0
 801af38:	d146      	bne.n	801afc8 <_dtoa_r+0x2d0>
 801af3a:	4b22      	ldr	r3, [pc, #136]	@ (801afc4 <_dtoa_r+0x2cc>)
 801af3c:	4602      	mov	r2, r0
 801af3e:	f240 11af 	movw	r1, #431	@ 0x1af
 801af42:	e6f2      	b.n	801ad2a <_dtoa_r+0x32>
 801af44:	2201      	movs	r2, #1
 801af46:	e7dd      	b.n	801af04 <_dtoa_r+0x20c>
 801af48:	2200      	movs	r2, #0
 801af4a:	9208      	str	r2, [sp, #32]
 801af4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801af4e:	eb08 0b02 	add.w	fp, r8, r2
 801af52:	f10b 0a01 	add.w	sl, fp, #1
 801af56:	4652      	mov	r2, sl
 801af58:	2a01      	cmp	r2, #1
 801af5a:	bfb8      	it	lt
 801af5c:	2201      	movlt	r2, #1
 801af5e:	e7db      	b.n	801af18 <_dtoa_r+0x220>
 801af60:	2201      	movs	r2, #1
 801af62:	e7f2      	b.n	801af4a <_dtoa_r+0x252>
 801af64:	2401      	movs	r4, #1
 801af66:	2200      	movs	r2, #0
 801af68:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801af6c:	f04f 3bff 	mov.w	fp, #4294967295
 801af70:	2100      	movs	r1, #0
 801af72:	46da      	mov	sl, fp
 801af74:	2212      	movs	r2, #18
 801af76:	9109      	str	r1, [sp, #36]	@ 0x24
 801af78:	e7ce      	b.n	801af18 <_dtoa_r+0x220>
 801af7a:	2201      	movs	r2, #1
 801af7c:	9208      	str	r2, [sp, #32]
 801af7e:	e7f5      	b.n	801af6c <_dtoa_r+0x274>
 801af80:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801af84:	46da      	mov	sl, fp
 801af86:	465a      	mov	r2, fp
 801af88:	e7c6      	b.n	801af18 <_dtoa_r+0x220>
 801af8a:	3101      	adds	r1, #1
 801af8c:	0040      	lsls	r0, r0, #1
 801af8e:	e7c7      	b.n	801af20 <_dtoa_r+0x228>
 801af90:	636f4361 	.word	0x636f4361
 801af94:	3fd287a7 	.word	0x3fd287a7
 801af98:	8b60c8b3 	.word	0x8b60c8b3
 801af9c:	3fc68a28 	.word	0x3fc68a28
 801afa0:	509f79fb 	.word	0x509f79fb
 801afa4:	3fd34413 	.word	0x3fd34413
 801afa8:	0801f0b2 	.word	0x0801f0b2
 801afac:	0801f0c9 	.word	0x0801f0c9
 801afb0:	7ff00000 	.word	0x7ff00000
 801afb4:	0801f0ae 	.word	0x0801f0ae
 801afb8:	0801f07a 	.word	0x0801f07a
 801afbc:	0801f079 	.word	0x0801f079
 801afc0:	0801f220 	.word	0x0801f220
 801afc4:	0801f121 	.word	0x0801f121
 801afc8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801afcc:	f1ba 0f0e 	cmp.w	sl, #14
 801afd0:	6010      	str	r0, [r2, #0]
 801afd2:	d86f      	bhi.n	801b0b4 <_dtoa_r+0x3bc>
 801afd4:	2c00      	cmp	r4, #0
 801afd6:	d06d      	beq.n	801b0b4 <_dtoa_r+0x3bc>
 801afd8:	f1b8 0f00 	cmp.w	r8, #0
 801afdc:	f340 80c2 	ble.w	801b164 <_dtoa_r+0x46c>
 801afe0:	4aca      	ldr	r2, [pc, #808]	@ (801b30c <_dtoa_r+0x614>)
 801afe2:	f008 010f 	and.w	r1, r8, #15
 801afe6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801afea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801afee:	ed92 7b00 	vldr	d7, [r2]
 801aff2:	ea4f 1128 	mov.w	r1, r8, asr #4
 801aff6:	f000 80a9 	beq.w	801b14c <_dtoa_r+0x454>
 801affa:	4ac5      	ldr	r2, [pc, #788]	@ (801b310 <_dtoa_r+0x618>)
 801affc:	ed92 6b08 	vldr	d6, [r2, #32]
 801b000:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801b004:	ed8d 6b02 	vstr	d6, [sp, #8]
 801b008:	f001 010f 	and.w	r1, r1, #15
 801b00c:	2203      	movs	r2, #3
 801b00e:	48c0      	ldr	r0, [pc, #768]	@ (801b310 <_dtoa_r+0x618>)
 801b010:	2900      	cmp	r1, #0
 801b012:	f040 809d 	bne.w	801b150 <_dtoa_r+0x458>
 801b016:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b01a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801b01e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b022:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b024:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b028:	2900      	cmp	r1, #0
 801b02a:	f000 80c1 	beq.w	801b1b0 <_dtoa_r+0x4b8>
 801b02e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801b032:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b03a:	f140 80b9 	bpl.w	801b1b0 <_dtoa_r+0x4b8>
 801b03e:	f1ba 0f00 	cmp.w	sl, #0
 801b042:	f000 80b5 	beq.w	801b1b0 <_dtoa_r+0x4b8>
 801b046:	f1bb 0f00 	cmp.w	fp, #0
 801b04a:	dd31      	ble.n	801b0b0 <_dtoa_r+0x3b8>
 801b04c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801b050:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b054:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b058:	f108 31ff 	add.w	r1, r8, #4294967295
 801b05c:	9104      	str	r1, [sp, #16]
 801b05e:	3201      	adds	r2, #1
 801b060:	465c      	mov	r4, fp
 801b062:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b066:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801b06a:	ee07 2a90 	vmov	s15, r2
 801b06e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b072:	eea7 5b06 	vfma.f64	d5, d7, d6
 801b076:	ee15 2a90 	vmov	r2, s11
 801b07a:	ec51 0b15 	vmov	r0, r1, d5
 801b07e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801b082:	2c00      	cmp	r4, #0
 801b084:	f040 8098 	bne.w	801b1b8 <_dtoa_r+0x4c0>
 801b088:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801b08c:	ee36 6b47 	vsub.f64	d6, d6, d7
 801b090:	ec41 0b17 	vmov	d7, r0, r1
 801b094:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b09c:	f300 8261 	bgt.w	801b562 <_dtoa_r+0x86a>
 801b0a0:	eeb1 7b47 	vneg.f64	d7, d7
 801b0a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0ac:	f100 80f5 	bmi.w	801b29a <_dtoa_r+0x5a2>
 801b0b0:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b0b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b0b6:	2a00      	cmp	r2, #0
 801b0b8:	f2c0 812c 	blt.w	801b314 <_dtoa_r+0x61c>
 801b0bc:	f1b8 0f0e 	cmp.w	r8, #14
 801b0c0:	f300 8128 	bgt.w	801b314 <_dtoa_r+0x61c>
 801b0c4:	4b91      	ldr	r3, [pc, #580]	@ (801b30c <_dtoa_r+0x614>)
 801b0c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b0ca:	ed93 6b00 	vldr	d6, [r3]
 801b0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	da03      	bge.n	801b0dc <_dtoa_r+0x3e4>
 801b0d4:	f1ba 0f00 	cmp.w	sl, #0
 801b0d8:	f340 80d2 	ble.w	801b280 <_dtoa_r+0x588>
 801b0dc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801b0e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b0e4:	463e      	mov	r6, r7
 801b0e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801b0ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801b0ee:	ee15 3a10 	vmov	r3, s10
 801b0f2:	3330      	adds	r3, #48	@ 0x30
 801b0f4:	f806 3b01 	strb.w	r3, [r6], #1
 801b0f8:	1bf3      	subs	r3, r6, r7
 801b0fa:	459a      	cmp	sl, r3
 801b0fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801b100:	eea3 7b46 	vfms.f64	d7, d3, d6
 801b104:	f040 80f8 	bne.w	801b2f8 <_dtoa_r+0x600>
 801b108:	ee37 7b07 	vadd.f64	d7, d7, d7
 801b10c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b114:	f300 80dd 	bgt.w	801b2d2 <_dtoa_r+0x5da>
 801b118:	eeb4 7b46 	vcmp.f64	d7, d6
 801b11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b120:	d104      	bne.n	801b12c <_dtoa_r+0x434>
 801b122:	ee15 3a10 	vmov	r3, s10
 801b126:	07db      	lsls	r3, r3, #31
 801b128:	f100 80d3 	bmi.w	801b2d2 <_dtoa_r+0x5da>
 801b12c:	9901      	ldr	r1, [sp, #4]
 801b12e:	4648      	mov	r0, r9
 801b130:	f000 ffc4 	bl	801c0bc <_Bfree>
 801b134:	2300      	movs	r3, #0
 801b136:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b138:	7033      	strb	r3, [r6, #0]
 801b13a:	f108 0301 	add.w	r3, r8, #1
 801b13e:	6013      	str	r3, [r2, #0]
 801b140:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b142:	2b00      	cmp	r3, #0
 801b144:	f000 8304 	beq.w	801b750 <_dtoa_r+0xa58>
 801b148:	601e      	str	r6, [r3, #0]
 801b14a:	e301      	b.n	801b750 <_dtoa_r+0xa58>
 801b14c:	2202      	movs	r2, #2
 801b14e:	e75e      	b.n	801b00e <_dtoa_r+0x316>
 801b150:	07cc      	lsls	r4, r1, #31
 801b152:	d504      	bpl.n	801b15e <_dtoa_r+0x466>
 801b154:	ed90 6b00 	vldr	d6, [r0]
 801b158:	3201      	adds	r2, #1
 801b15a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b15e:	1049      	asrs	r1, r1, #1
 801b160:	3008      	adds	r0, #8
 801b162:	e755      	b.n	801b010 <_dtoa_r+0x318>
 801b164:	d022      	beq.n	801b1ac <_dtoa_r+0x4b4>
 801b166:	f1c8 0100 	rsb	r1, r8, #0
 801b16a:	4a68      	ldr	r2, [pc, #416]	@ (801b30c <_dtoa_r+0x614>)
 801b16c:	f001 000f 	and.w	r0, r1, #15
 801b170:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801b174:	ed92 7b00 	vldr	d7, [r2]
 801b178:	ee28 7b07 	vmul.f64	d7, d8, d7
 801b17c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b180:	4863      	ldr	r0, [pc, #396]	@ (801b310 <_dtoa_r+0x618>)
 801b182:	1109      	asrs	r1, r1, #4
 801b184:	2400      	movs	r4, #0
 801b186:	2202      	movs	r2, #2
 801b188:	b929      	cbnz	r1, 801b196 <_dtoa_r+0x49e>
 801b18a:	2c00      	cmp	r4, #0
 801b18c:	f43f af49 	beq.w	801b022 <_dtoa_r+0x32a>
 801b190:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b194:	e745      	b.n	801b022 <_dtoa_r+0x32a>
 801b196:	07ce      	lsls	r6, r1, #31
 801b198:	d505      	bpl.n	801b1a6 <_dtoa_r+0x4ae>
 801b19a:	ed90 6b00 	vldr	d6, [r0]
 801b19e:	3201      	adds	r2, #1
 801b1a0:	2401      	movs	r4, #1
 801b1a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b1a6:	1049      	asrs	r1, r1, #1
 801b1a8:	3008      	adds	r0, #8
 801b1aa:	e7ed      	b.n	801b188 <_dtoa_r+0x490>
 801b1ac:	2202      	movs	r2, #2
 801b1ae:	e738      	b.n	801b022 <_dtoa_r+0x32a>
 801b1b0:	f8cd 8010 	str.w	r8, [sp, #16]
 801b1b4:	4654      	mov	r4, sl
 801b1b6:	e754      	b.n	801b062 <_dtoa_r+0x36a>
 801b1b8:	4a54      	ldr	r2, [pc, #336]	@ (801b30c <_dtoa_r+0x614>)
 801b1ba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801b1be:	ed12 4b02 	vldr	d4, [r2, #-8]
 801b1c2:	9a08      	ldr	r2, [sp, #32]
 801b1c4:	ec41 0b17 	vmov	d7, r0, r1
 801b1c8:	443c      	add	r4, r7
 801b1ca:	b34a      	cbz	r2, 801b220 <_dtoa_r+0x528>
 801b1cc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801b1d0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801b1d4:	463e      	mov	r6, r7
 801b1d6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801b1da:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801b1de:	ee35 7b47 	vsub.f64	d7, d5, d7
 801b1e2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801b1e6:	ee14 2a90 	vmov	r2, s9
 801b1ea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801b1ee:	3230      	adds	r2, #48	@ 0x30
 801b1f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 801b1f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1fc:	f806 2b01 	strb.w	r2, [r6], #1
 801b200:	d438      	bmi.n	801b274 <_dtoa_r+0x57c>
 801b202:	ee32 5b46 	vsub.f64	d5, d2, d6
 801b206:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801b20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b20e:	d462      	bmi.n	801b2d6 <_dtoa_r+0x5de>
 801b210:	42a6      	cmp	r6, r4
 801b212:	f43f af4d 	beq.w	801b0b0 <_dtoa_r+0x3b8>
 801b216:	ee27 7b03 	vmul.f64	d7, d7, d3
 801b21a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801b21e:	e7e0      	b.n	801b1e2 <_dtoa_r+0x4ea>
 801b220:	4621      	mov	r1, r4
 801b222:	463e      	mov	r6, r7
 801b224:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b228:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801b22c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801b230:	ee14 2a90 	vmov	r2, s9
 801b234:	3230      	adds	r2, #48	@ 0x30
 801b236:	f806 2b01 	strb.w	r2, [r6], #1
 801b23a:	42a6      	cmp	r6, r4
 801b23c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801b240:	ee36 6b45 	vsub.f64	d6, d6, d5
 801b244:	d119      	bne.n	801b27a <_dtoa_r+0x582>
 801b246:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801b24a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801b24e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801b252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b256:	dc3e      	bgt.n	801b2d6 <_dtoa_r+0x5de>
 801b258:	ee35 5b47 	vsub.f64	d5, d5, d7
 801b25c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801b260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b264:	f57f af24 	bpl.w	801b0b0 <_dtoa_r+0x3b8>
 801b268:	460e      	mov	r6, r1
 801b26a:	3901      	subs	r1, #1
 801b26c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b270:	2b30      	cmp	r3, #48	@ 0x30
 801b272:	d0f9      	beq.n	801b268 <_dtoa_r+0x570>
 801b274:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801b278:	e758      	b.n	801b12c <_dtoa_r+0x434>
 801b27a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801b27e:	e7d5      	b.n	801b22c <_dtoa_r+0x534>
 801b280:	d10b      	bne.n	801b29a <_dtoa_r+0x5a2>
 801b282:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801b286:	ee26 6b07 	vmul.f64	d6, d6, d7
 801b28a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b28e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b296:	f2c0 8161 	blt.w	801b55c <_dtoa_r+0x864>
 801b29a:	2400      	movs	r4, #0
 801b29c:	4625      	mov	r5, r4
 801b29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b2a0:	43db      	mvns	r3, r3
 801b2a2:	9304      	str	r3, [sp, #16]
 801b2a4:	463e      	mov	r6, r7
 801b2a6:	f04f 0800 	mov.w	r8, #0
 801b2aa:	4621      	mov	r1, r4
 801b2ac:	4648      	mov	r0, r9
 801b2ae:	f000 ff05 	bl	801c0bc <_Bfree>
 801b2b2:	2d00      	cmp	r5, #0
 801b2b4:	d0de      	beq.n	801b274 <_dtoa_r+0x57c>
 801b2b6:	f1b8 0f00 	cmp.w	r8, #0
 801b2ba:	d005      	beq.n	801b2c8 <_dtoa_r+0x5d0>
 801b2bc:	45a8      	cmp	r8, r5
 801b2be:	d003      	beq.n	801b2c8 <_dtoa_r+0x5d0>
 801b2c0:	4641      	mov	r1, r8
 801b2c2:	4648      	mov	r0, r9
 801b2c4:	f000 fefa 	bl	801c0bc <_Bfree>
 801b2c8:	4629      	mov	r1, r5
 801b2ca:	4648      	mov	r0, r9
 801b2cc:	f000 fef6 	bl	801c0bc <_Bfree>
 801b2d0:	e7d0      	b.n	801b274 <_dtoa_r+0x57c>
 801b2d2:	f8cd 8010 	str.w	r8, [sp, #16]
 801b2d6:	4633      	mov	r3, r6
 801b2d8:	461e      	mov	r6, r3
 801b2da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b2de:	2a39      	cmp	r2, #57	@ 0x39
 801b2e0:	d106      	bne.n	801b2f0 <_dtoa_r+0x5f8>
 801b2e2:	429f      	cmp	r7, r3
 801b2e4:	d1f8      	bne.n	801b2d8 <_dtoa_r+0x5e0>
 801b2e6:	9a04      	ldr	r2, [sp, #16]
 801b2e8:	3201      	adds	r2, #1
 801b2ea:	9204      	str	r2, [sp, #16]
 801b2ec:	2230      	movs	r2, #48	@ 0x30
 801b2ee:	703a      	strb	r2, [r7, #0]
 801b2f0:	781a      	ldrb	r2, [r3, #0]
 801b2f2:	3201      	adds	r2, #1
 801b2f4:	701a      	strb	r2, [r3, #0]
 801b2f6:	e7bd      	b.n	801b274 <_dtoa_r+0x57c>
 801b2f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b2fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b304:	f47f aeef 	bne.w	801b0e6 <_dtoa_r+0x3ee>
 801b308:	e710      	b.n	801b12c <_dtoa_r+0x434>
 801b30a:	bf00      	nop
 801b30c:	0801f220 	.word	0x0801f220
 801b310:	0801f1f8 	.word	0x0801f1f8
 801b314:	9908      	ldr	r1, [sp, #32]
 801b316:	2900      	cmp	r1, #0
 801b318:	f000 80e3 	beq.w	801b4e2 <_dtoa_r+0x7ea>
 801b31c:	9907      	ldr	r1, [sp, #28]
 801b31e:	2901      	cmp	r1, #1
 801b320:	f300 80c8 	bgt.w	801b4b4 <_dtoa_r+0x7bc>
 801b324:	2d00      	cmp	r5, #0
 801b326:	f000 80c1 	beq.w	801b4ac <_dtoa_r+0x7b4>
 801b32a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801b32e:	9e05      	ldr	r6, [sp, #20]
 801b330:	461c      	mov	r4, r3
 801b332:	9304      	str	r3, [sp, #16]
 801b334:	9b05      	ldr	r3, [sp, #20]
 801b336:	4413      	add	r3, r2
 801b338:	9305      	str	r3, [sp, #20]
 801b33a:	9b06      	ldr	r3, [sp, #24]
 801b33c:	2101      	movs	r1, #1
 801b33e:	4413      	add	r3, r2
 801b340:	4648      	mov	r0, r9
 801b342:	9306      	str	r3, [sp, #24]
 801b344:	f000 ffb8 	bl	801c2b8 <__i2b>
 801b348:	9b04      	ldr	r3, [sp, #16]
 801b34a:	4605      	mov	r5, r0
 801b34c:	b166      	cbz	r6, 801b368 <_dtoa_r+0x670>
 801b34e:	9a06      	ldr	r2, [sp, #24]
 801b350:	2a00      	cmp	r2, #0
 801b352:	dd09      	ble.n	801b368 <_dtoa_r+0x670>
 801b354:	42b2      	cmp	r2, r6
 801b356:	9905      	ldr	r1, [sp, #20]
 801b358:	bfa8      	it	ge
 801b35a:	4632      	movge	r2, r6
 801b35c:	1a89      	subs	r1, r1, r2
 801b35e:	9105      	str	r1, [sp, #20]
 801b360:	9906      	ldr	r1, [sp, #24]
 801b362:	1ab6      	subs	r6, r6, r2
 801b364:	1a8a      	subs	r2, r1, r2
 801b366:	9206      	str	r2, [sp, #24]
 801b368:	b1fb      	cbz	r3, 801b3aa <_dtoa_r+0x6b2>
 801b36a:	9a08      	ldr	r2, [sp, #32]
 801b36c:	2a00      	cmp	r2, #0
 801b36e:	f000 80bc 	beq.w	801b4ea <_dtoa_r+0x7f2>
 801b372:	b19c      	cbz	r4, 801b39c <_dtoa_r+0x6a4>
 801b374:	4629      	mov	r1, r5
 801b376:	4622      	mov	r2, r4
 801b378:	4648      	mov	r0, r9
 801b37a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b37c:	f001 f85c 	bl	801c438 <__pow5mult>
 801b380:	9a01      	ldr	r2, [sp, #4]
 801b382:	4601      	mov	r1, r0
 801b384:	4605      	mov	r5, r0
 801b386:	4648      	mov	r0, r9
 801b388:	f000 ffac 	bl	801c2e4 <__multiply>
 801b38c:	9901      	ldr	r1, [sp, #4]
 801b38e:	9004      	str	r0, [sp, #16]
 801b390:	4648      	mov	r0, r9
 801b392:	f000 fe93 	bl	801c0bc <_Bfree>
 801b396:	9a04      	ldr	r2, [sp, #16]
 801b398:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b39a:	9201      	str	r2, [sp, #4]
 801b39c:	1b1a      	subs	r2, r3, r4
 801b39e:	d004      	beq.n	801b3aa <_dtoa_r+0x6b2>
 801b3a0:	9901      	ldr	r1, [sp, #4]
 801b3a2:	4648      	mov	r0, r9
 801b3a4:	f001 f848 	bl	801c438 <__pow5mult>
 801b3a8:	9001      	str	r0, [sp, #4]
 801b3aa:	2101      	movs	r1, #1
 801b3ac:	4648      	mov	r0, r9
 801b3ae:	f000 ff83 	bl	801c2b8 <__i2b>
 801b3b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b3b4:	4604      	mov	r4, r0
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	f000 81d0 	beq.w	801b75c <_dtoa_r+0xa64>
 801b3bc:	461a      	mov	r2, r3
 801b3be:	4601      	mov	r1, r0
 801b3c0:	4648      	mov	r0, r9
 801b3c2:	f001 f839 	bl	801c438 <__pow5mult>
 801b3c6:	9b07      	ldr	r3, [sp, #28]
 801b3c8:	2b01      	cmp	r3, #1
 801b3ca:	4604      	mov	r4, r0
 801b3cc:	f300 8095 	bgt.w	801b4fa <_dtoa_r+0x802>
 801b3d0:	9b02      	ldr	r3, [sp, #8]
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	f040 808b 	bne.w	801b4ee <_dtoa_r+0x7f6>
 801b3d8:	9b03      	ldr	r3, [sp, #12]
 801b3da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801b3de:	2a00      	cmp	r2, #0
 801b3e0:	f040 8087 	bne.w	801b4f2 <_dtoa_r+0x7fa>
 801b3e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801b3e8:	0d12      	lsrs	r2, r2, #20
 801b3ea:	0512      	lsls	r2, r2, #20
 801b3ec:	2a00      	cmp	r2, #0
 801b3ee:	f000 8082 	beq.w	801b4f6 <_dtoa_r+0x7fe>
 801b3f2:	9b05      	ldr	r3, [sp, #20]
 801b3f4:	3301      	adds	r3, #1
 801b3f6:	9305      	str	r3, [sp, #20]
 801b3f8:	9b06      	ldr	r3, [sp, #24]
 801b3fa:	3301      	adds	r3, #1
 801b3fc:	9306      	str	r3, [sp, #24]
 801b3fe:	2301      	movs	r3, #1
 801b400:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b404:	2b00      	cmp	r3, #0
 801b406:	f000 81af 	beq.w	801b768 <_dtoa_r+0xa70>
 801b40a:	6922      	ldr	r2, [r4, #16]
 801b40c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801b410:	6910      	ldr	r0, [r2, #16]
 801b412:	f000 ff05 	bl	801c220 <__hi0bits>
 801b416:	f1c0 0020 	rsb	r0, r0, #32
 801b41a:	9b06      	ldr	r3, [sp, #24]
 801b41c:	4418      	add	r0, r3
 801b41e:	f010 001f 	ands.w	r0, r0, #31
 801b422:	d076      	beq.n	801b512 <_dtoa_r+0x81a>
 801b424:	f1c0 0220 	rsb	r2, r0, #32
 801b428:	2a04      	cmp	r2, #4
 801b42a:	dd69      	ble.n	801b500 <_dtoa_r+0x808>
 801b42c:	9b05      	ldr	r3, [sp, #20]
 801b42e:	f1c0 001c 	rsb	r0, r0, #28
 801b432:	4403      	add	r3, r0
 801b434:	9305      	str	r3, [sp, #20]
 801b436:	9b06      	ldr	r3, [sp, #24]
 801b438:	4406      	add	r6, r0
 801b43a:	4403      	add	r3, r0
 801b43c:	9306      	str	r3, [sp, #24]
 801b43e:	9b05      	ldr	r3, [sp, #20]
 801b440:	2b00      	cmp	r3, #0
 801b442:	dd05      	ble.n	801b450 <_dtoa_r+0x758>
 801b444:	9901      	ldr	r1, [sp, #4]
 801b446:	461a      	mov	r2, r3
 801b448:	4648      	mov	r0, r9
 801b44a:	f001 f84f 	bl	801c4ec <__lshift>
 801b44e:	9001      	str	r0, [sp, #4]
 801b450:	9b06      	ldr	r3, [sp, #24]
 801b452:	2b00      	cmp	r3, #0
 801b454:	dd05      	ble.n	801b462 <_dtoa_r+0x76a>
 801b456:	4621      	mov	r1, r4
 801b458:	461a      	mov	r2, r3
 801b45a:	4648      	mov	r0, r9
 801b45c:	f001 f846 	bl	801c4ec <__lshift>
 801b460:	4604      	mov	r4, r0
 801b462:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b464:	2b00      	cmp	r3, #0
 801b466:	d056      	beq.n	801b516 <_dtoa_r+0x81e>
 801b468:	9801      	ldr	r0, [sp, #4]
 801b46a:	4621      	mov	r1, r4
 801b46c:	f001 f8aa 	bl	801c5c4 <__mcmp>
 801b470:	2800      	cmp	r0, #0
 801b472:	da50      	bge.n	801b516 <_dtoa_r+0x81e>
 801b474:	f108 33ff 	add.w	r3, r8, #4294967295
 801b478:	9304      	str	r3, [sp, #16]
 801b47a:	9901      	ldr	r1, [sp, #4]
 801b47c:	2300      	movs	r3, #0
 801b47e:	220a      	movs	r2, #10
 801b480:	4648      	mov	r0, r9
 801b482:	f000 fe3d 	bl	801c100 <__multadd>
 801b486:	9b08      	ldr	r3, [sp, #32]
 801b488:	9001      	str	r0, [sp, #4]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	f000 816e 	beq.w	801b76c <_dtoa_r+0xa74>
 801b490:	4629      	mov	r1, r5
 801b492:	2300      	movs	r3, #0
 801b494:	220a      	movs	r2, #10
 801b496:	4648      	mov	r0, r9
 801b498:	f000 fe32 	bl	801c100 <__multadd>
 801b49c:	f1bb 0f00 	cmp.w	fp, #0
 801b4a0:	4605      	mov	r5, r0
 801b4a2:	dc64      	bgt.n	801b56e <_dtoa_r+0x876>
 801b4a4:	9b07      	ldr	r3, [sp, #28]
 801b4a6:	2b02      	cmp	r3, #2
 801b4a8:	dc3e      	bgt.n	801b528 <_dtoa_r+0x830>
 801b4aa:	e060      	b.n	801b56e <_dtoa_r+0x876>
 801b4ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b4ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801b4b2:	e73c      	b.n	801b32e <_dtoa_r+0x636>
 801b4b4:	f10a 34ff 	add.w	r4, sl, #4294967295
 801b4b8:	42a3      	cmp	r3, r4
 801b4ba:	bfbf      	itttt	lt
 801b4bc:	1ae2      	sublt	r2, r4, r3
 801b4be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801b4c0:	189b      	addlt	r3, r3, r2
 801b4c2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801b4c4:	bfae      	itee	ge
 801b4c6:	1b1c      	subge	r4, r3, r4
 801b4c8:	4623      	movlt	r3, r4
 801b4ca:	2400      	movlt	r4, #0
 801b4cc:	f1ba 0f00 	cmp.w	sl, #0
 801b4d0:	bfb5      	itete	lt
 801b4d2:	9a05      	ldrlt	r2, [sp, #20]
 801b4d4:	9e05      	ldrge	r6, [sp, #20]
 801b4d6:	eba2 060a 	sublt.w	r6, r2, sl
 801b4da:	4652      	movge	r2, sl
 801b4dc:	bfb8      	it	lt
 801b4de:	2200      	movlt	r2, #0
 801b4e0:	e727      	b.n	801b332 <_dtoa_r+0x63a>
 801b4e2:	9e05      	ldr	r6, [sp, #20]
 801b4e4:	9d08      	ldr	r5, [sp, #32]
 801b4e6:	461c      	mov	r4, r3
 801b4e8:	e730      	b.n	801b34c <_dtoa_r+0x654>
 801b4ea:	461a      	mov	r2, r3
 801b4ec:	e758      	b.n	801b3a0 <_dtoa_r+0x6a8>
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	e786      	b.n	801b400 <_dtoa_r+0x708>
 801b4f2:	9b02      	ldr	r3, [sp, #8]
 801b4f4:	e784      	b.n	801b400 <_dtoa_r+0x708>
 801b4f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801b4f8:	e783      	b.n	801b402 <_dtoa_r+0x70a>
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b4fe:	e784      	b.n	801b40a <_dtoa_r+0x712>
 801b500:	d09d      	beq.n	801b43e <_dtoa_r+0x746>
 801b502:	9b05      	ldr	r3, [sp, #20]
 801b504:	321c      	adds	r2, #28
 801b506:	4413      	add	r3, r2
 801b508:	9305      	str	r3, [sp, #20]
 801b50a:	9b06      	ldr	r3, [sp, #24]
 801b50c:	4416      	add	r6, r2
 801b50e:	4413      	add	r3, r2
 801b510:	e794      	b.n	801b43c <_dtoa_r+0x744>
 801b512:	4602      	mov	r2, r0
 801b514:	e7f5      	b.n	801b502 <_dtoa_r+0x80a>
 801b516:	f1ba 0f00 	cmp.w	sl, #0
 801b51a:	f8cd 8010 	str.w	r8, [sp, #16]
 801b51e:	46d3      	mov	fp, sl
 801b520:	dc21      	bgt.n	801b566 <_dtoa_r+0x86e>
 801b522:	9b07      	ldr	r3, [sp, #28]
 801b524:	2b02      	cmp	r3, #2
 801b526:	dd1e      	ble.n	801b566 <_dtoa_r+0x86e>
 801b528:	f1bb 0f00 	cmp.w	fp, #0
 801b52c:	f47f aeb7 	bne.w	801b29e <_dtoa_r+0x5a6>
 801b530:	4621      	mov	r1, r4
 801b532:	465b      	mov	r3, fp
 801b534:	2205      	movs	r2, #5
 801b536:	4648      	mov	r0, r9
 801b538:	f000 fde2 	bl	801c100 <__multadd>
 801b53c:	4601      	mov	r1, r0
 801b53e:	4604      	mov	r4, r0
 801b540:	9801      	ldr	r0, [sp, #4]
 801b542:	f001 f83f 	bl	801c5c4 <__mcmp>
 801b546:	2800      	cmp	r0, #0
 801b548:	f77f aea9 	ble.w	801b29e <_dtoa_r+0x5a6>
 801b54c:	463e      	mov	r6, r7
 801b54e:	2331      	movs	r3, #49	@ 0x31
 801b550:	f806 3b01 	strb.w	r3, [r6], #1
 801b554:	9b04      	ldr	r3, [sp, #16]
 801b556:	3301      	adds	r3, #1
 801b558:	9304      	str	r3, [sp, #16]
 801b55a:	e6a4      	b.n	801b2a6 <_dtoa_r+0x5ae>
 801b55c:	f8cd 8010 	str.w	r8, [sp, #16]
 801b560:	4654      	mov	r4, sl
 801b562:	4625      	mov	r5, r4
 801b564:	e7f2      	b.n	801b54c <_dtoa_r+0x854>
 801b566:	9b08      	ldr	r3, [sp, #32]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	f000 8103 	beq.w	801b774 <_dtoa_r+0xa7c>
 801b56e:	2e00      	cmp	r6, #0
 801b570:	dd05      	ble.n	801b57e <_dtoa_r+0x886>
 801b572:	4629      	mov	r1, r5
 801b574:	4632      	mov	r2, r6
 801b576:	4648      	mov	r0, r9
 801b578:	f000 ffb8 	bl	801c4ec <__lshift>
 801b57c:	4605      	mov	r5, r0
 801b57e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b580:	2b00      	cmp	r3, #0
 801b582:	d058      	beq.n	801b636 <_dtoa_r+0x93e>
 801b584:	6869      	ldr	r1, [r5, #4]
 801b586:	4648      	mov	r0, r9
 801b588:	f000 fd58 	bl	801c03c <_Balloc>
 801b58c:	4606      	mov	r6, r0
 801b58e:	b928      	cbnz	r0, 801b59c <_dtoa_r+0x8a4>
 801b590:	4b82      	ldr	r3, [pc, #520]	@ (801b79c <_dtoa_r+0xaa4>)
 801b592:	4602      	mov	r2, r0
 801b594:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801b598:	f7ff bbc7 	b.w	801ad2a <_dtoa_r+0x32>
 801b59c:	692a      	ldr	r2, [r5, #16]
 801b59e:	3202      	adds	r2, #2
 801b5a0:	0092      	lsls	r2, r2, #2
 801b5a2:	f105 010c 	add.w	r1, r5, #12
 801b5a6:	300c      	adds	r0, #12
 801b5a8:	f7ff fb05 	bl	801abb6 <memcpy>
 801b5ac:	2201      	movs	r2, #1
 801b5ae:	4631      	mov	r1, r6
 801b5b0:	4648      	mov	r0, r9
 801b5b2:	f000 ff9b 	bl	801c4ec <__lshift>
 801b5b6:	1c7b      	adds	r3, r7, #1
 801b5b8:	9305      	str	r3, [sp, #20]
 801b5ba:	eb07 030b 	add.w	r3, r7, fp
 801b5be:	9309      	str	r3, [sp, #36]	@ 0x24
 801b5c0:	9b02      	ldr	r3, [sp, #8]
 801b5c2:	f003 0301 	and.w	r3, r3, #1
 801b5c6:	46a8      	mov	r8, r5
 801b5c8:	9308      	str	r3, [sp, #32]
 801b5ca:	4605      	mov	r5, r0
 801b5cc:	9b05      	ldr	r3, [sp, #20]
 801b5ce:	9801      	ldr	r0, [sp, #4]
 801b5d0:	4621      	mov	r1, r4
 801b5d2:	f103 3bff 	add.w	fp, r3, #4294967295
 801b5d6:	f7ff fb07 	bl	801abe8 <quorem>
 801b5da:	4641      	mov	r1, r8
 801b5dc:	9002      	str	r0, [sp, #8]
 801b5de:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801b5e2:	9801      	ldr	r0, [sp, #4]
 801b5e4:	f000 ffee 	bl	801c5c4 <__mcmp>
 801b5e8:	462a      	mov	r2, r5
 801b5ea:	9006      	str	r0, [sp, #24]
 801b5ec:	4621      	mov	r1, r4
 801b5ee:	4648      	mov	r0, r9
 801b5f0:	f001 f804 	bl	801c5fc <__mdiff>
 801b5f4:	68c2      	ldr	r2, [r0, #12]
 801b5f6:	4606      	mov	r6, r0
 801b5f8:	b9fa      	cbnz	r2, 801b63a <_dtoa_r+0x942>
 801b5fa:	4601      	mov	r1, r0
 801b5fc:	9801      	ldr	r0, [sp, #4]
 801b5fe:	f000 ffe1 	bl	801c5c4 <__mcmp>
 801b602:	4602      	mov	r2, r0
 801b604:	4631      	mov	r1, r6
 801b606:	4648      	mov	r0, r9
 801b608:	920a      	str	r2, [sp, #40]	@ 0x28
 801b60a:	f000 fd57 	bl	801c0bc <_Bfree>
 801b60e:	9b07      	ldr	r3, [sp, #28]
 801b610:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b612:	9e05      	ldr	r6, [sp, #20]
 801b614:	ea43 0102 	orr.w	r1, r3, r2
 801b618:	9b08      	ldr	r3, [sp, #32]
 801b61a:	4319      	orrs	r1, r3
 801b61c:	d10f      	bne.n	801b63e <_dtoa_r+0x946>
 801b61e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801b622:	d028      	beq.n	801b676 <_dtoa_r+0x97e>
 801b624:	9b06      	ldr	r3, [sp, #24]
 801b626:	2b00      	cmp	r3, #0
 801b628:	dd02      	ble.n	801b630 <_dtoa_r+0x938>
 801b62a:	9b02      	ldr	r3, [sp, #8]
 801b62c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801b630:	f88b a000 	strb.w	sl, [fp]
 801b634:	e639      	b.n	801b2aa <_dtoa_r+0x5b2>
 801b636:	4628      	mov	r0, r5
 801b638:	e7bd      	b.n	801b5b6 <_dtoa_r+0x8be>
 801b63a:	2201      	movs	r2, #1
 801b63c:	e7e2      	b.n	801b604 <_dtoa_r+0x90c>
 801b63e:	9b06      	ldr	r3, [sp, #24]
 801b640:	2b00      	cmp	r3, #0
 801b642:	db04      	blt.n	801b64e <_dtoa_r+0x956>
 801b644:	9907      	ldr	r1, [sp, #28]
 801b646:	430b      	orrs	r3, r1
 801b648:	9908      	ldr	r1, [sp, #32]
 801b64a:	430b      	orrs	r3, r1
 801b64c:	d120      	bne.n	801b690 <_dtoa_r+0x998>
 801b64e:	2a00      	cmp	r2, #0
 801b650:	ddee      	ble.n	801b630 <_dtoa_r+0x938>
 801b652:	9901      	ldr	r1, [sp, #4]
 801b654:	2201      	movs	r2, #1
 801b656:	4648      	mov	r0, r9
 801b658:	f000 ff48 	bl	801c4ec <__lshift>
 801b65c:	4621      	mov	r1, r4
 801b65e:	9001      	str	r0, [sp, #4]
 801b660:	f000 ffb0 	bl	801c5c4 <__mcmp>
 801b664:	2800      	cmp	r0, #0
 801b666:	dc03      	bgt.n	801b670 <_dtoa_r+0x978>
 801b668:	d1e2      	bne.n	801b630 <_dtoa_r+0x938>
 801b66a:	f01a 0f01 	tst.w	sl, #1
 801b66e:	d0df      	beq.n	801b630 <_dtoa_r+0x938>
 801b670:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801b674:	d1d9      	bne.n	801b62a <_dtoa_r+0x932>
 801b676:	2339      	movs	r3, #57	@ 0x39
 801b678:	f88b 3000 	strb.w	r3, [fp]
 801b67c:	4633      	mov	r3, r6
 801b67e:	461e      	mov	r6, r3
 801b680:	3b01      	subs	r3, #1
 801b682:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801b686:	2a39      	cmp	r2, #57	@ 0x39
 801b688:	d053      	beq.n	801b732 <_dtoa_r+0xa3a>
 801b68a:	3201      	adds	r2, #1
 801b68c:	701a      	strb	r2, [r3, #0]
 801b68e:	e60c      	b.n	801b2aa <_dtoa_r+0x5b2>
 801b690:	2a00      	cmp	r2, #0
 801b692:	dd07      	ble.n	801b6a4 <_dtoa_r+0x9ac>
 801b694:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801b698:	d0ed      	beq.n	801b676 <_dtoa_r+0x97e>
 801b69a:	f10a 0301 	add.w	r3, sl, #1
 801b69e:	f88b 3000 	strb.w	r3, [fp]
 801b6a2:	e602      	b.n	801b2aa <_dtoa_r+0x5b2>
 801b6a4:	9b05      	ldr	r3, [sp, #20]
 801b6a6:	9a05      	ldr	r2, [sp, #20]
 801b6a8:	f803 ac01 	strb.w	sl, [r3, #-1]
 801b6ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6ae:	4293      	cmp	r3, r2
 801b6b0:	d029      	beq.n	801b706 <_dtoa_r+0xa0e>
 801b6b2:	9901      	ldr	r1, [sp, #4]
 801b6b4:	2300      	movs	r3, #0
 801b6b6:	220a      	movs	r2, #10
 801b6b8:	4648      	mov	r0, r9
 801b6ba:	f000 fd21 	bl	801c100 <__multadd>
 801b6be:	45a8      	cmp	r8, r5
 801b6c0:	9001      	str	r0, [sp, #4]
 801b6c2:	f04f 0300 	mov.w	r3, #0
 801b6c6:	f04f 020a 	mov.w	r2, #10
 801b6ca:	4641      	mov	r1, r8
 801b6cc:	4648      	mov	r0, r9
 801b6ce:	d107      	bne.n	801b6e0 <_dtoa_r+0x9e8>
 801b6d0:	f000 fd16 	bl	801c100 <__multadd>
 801b6d4:	4680      	mov	r8, r0
 801b6d6:	4605      	mov	r5, r0
 801b6d8:	9b05      	ldr	r3, [sp, #20]
 801b6da:	3301      	adds	r3, #1
 801b6dc:	9305      	str	r3, [sp, #20]
 801b6de:	e775      	b.n	801b5cc <_dtoa_r+0x8d4>
 801b6e0:	f000 fd0e 	bl	801c100 <__multadd>
 801b6e4:	4629      	mov	r1, r5
 801b6e6:	4680      	mov	r8, r0
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	220a      	movs	r2, #10
 801b6ec:	4648      	mov	r0, r9
 801b6ee:	f000 fd07 	bl	801c100 <__multadd>
 801b6f2:	4605      	mov	r5, r0
 801b6f4:	e7f0      	b.n	801b6d8 <_dtoa_r+0x9e0>
 801b6f6:	f1bb 0f00 	cmp.w	fp, #0
 801b6fa:	bfcc      	ite	gt
 801b6fc:	465e      	movgt	r6, fp
 801b6fe:	2601      	movle	r6, #1
 801b700:	443e      	add	r6, r7
 801b702:	f04f 0800 	mov.w	r8, #0
 801b706:	9901      	ldr	r1, [sp, #4]
 801b708:	2201      	movs	r2, #1
 801b70a:	4648      	mov	r0, r9
 801b70c:	f000 feee 	bl	801c4ec <__lshift>
 801b710:	4621      	mov	r1, r4
 801b712:	9001      	str	r0, [sp, #4]
 801b714:	f000 ff56 	bl	801c5c4 <__mcmp>
 801b718:	2800      	cmp	r0, #0
 801b71a:	dcaf      	bgt.n	801b67c <_dtoa_r+0x984>
 801b71c:	d102      	bne.n	801b724 <_dtoa_r+0xa2c>
 801b71e:	f01a 0f01 	tst.w	sl, #1
 801b722:	d1ab      	bne.n	801b67c <_dtoa_r+0x984>
 801b724:	4633      	mov	r3, r6
 801b726:	461e      	mov	r6, r3
 801b728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b72c:	2a30      	cmp	r2, #48	@ 0x30
 801b72e:	d0fa      	beq.n	801b726 <_dtoa_r+0xa2e>
 801b730:	e5bb      	b.n	801b2aa <_dtoa_r+0x5b2>
 801b732:	429f      	cmp	r7, r3
 801b734:	d1a3      	bne.n	801b67e <_dtoa_r+0x986>
 801b736:	9b04      	ldr	r3, [sp, #16]
 801b738:	3301      	adds	r3, #1
 801b73a:	9304      	str	r3, [sp, #16]
 801b73c:	2331      	movs	r3, #49	@ 0x31
 801b73e:	703b      	strb	r3, [r7, #0]
 801b740:	e5b3      	b.n	801b2aa <_dtoa_r+0x5b2>
 801b742:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b744:	4f16      	ldr	r7, [pc, #88]	@ (801b7a0 <_dtoa_r+0xaa8>)
 801b746:	b11b      	cbz	r3, 801b750 <_dtoa_r+0xa58>
 801b748:	f107 0308 	add.w	r3, r7, #8
 801b74c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801b74e:	6013      	str	r3, [r2, #0]
 801b750:	4638      	mov	r0, r7
 801b752:	b011      	add	sp, #68	@ 0x44
 801b754:	ecbd 8b02 	vpop	{d8}
 801b758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b75c:	9b07      	ldr	r3, [sp, #28]
 801b75e:	2b01      	cmp	r3, #1
 801b760:	f77f ae36 	ble.w	801b3d0 <_dtoa_r+0x6d8>
 801b764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b766:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b768:	2001      	movs	r0, #1
 801b76a:	e656      	b.n	801b41a <_dtoa_r+0x722>
 801b76c:	f1bb 0f00 	cmp.w	fp, #0
 801b770:	f77f aed7 	ble.w	801b522 <_dtoa_r+0x82a>
 801b774:	463e      	mov	r6, r7
 801b776:	9801      	ldr	r0, [sp, #4]
 801b778:	4621      	mov	r1, r4
 801b77a:	f7ff fa35 	bl	801abe8 <quorem>
 801b77e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801b782:	f806 ab01 	strb.w	sl, [r6], #1
 801b786:	1bf2      	subs	r2, r6, r7
 801b788:	4593      	cmp	fp, r2
 801b78a:	ddb4      	ble.n	801b6f6 <_dtoa_r+0x9fe>
 801b78c:	9901      	ldr	r1, [sp, #4]
 801b78e:	2300      	movs	r3, #0
 801b790:	220a      	movs	r2, #10
 801b792:	4648      	mov	r0, r9
 801b794:	f000 fcb4 	bl	801c100 <__multadd>
 801b798:	9001      	str	r0, [sp, #4]
 801b79a:	e7ec      	b.n	801b776 <_dtoa_r+0xa7e>
 801b79c:	0801f121 	.word	0x0801f121
 801b7a0:	0801f0a5 	.word	0x0801f0a5

0801b7a4 <_free_r>:
 801b7a4:	b538      	push	{r3, r4, r5, lr}
 801b7a6:	4605      	mov	r5, r0
 801b7a8:	2900      	cmp	r1, #0
 801b7aa:	d041      	beq.n	801b830 <_free_r+0x8c>
 801b7ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b7b0:	1f0c      	subs	r4, r1, #4
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	bfb8      	it	lt
 801b7b6:	18e4      	addlt	r4, r4, r3
 801b7b8:	f000 fc34 	bl	801c024 <__malloc_lock>
 801b7bc:	4a1d      	ldr	r2, [pc, #116]	@ (801b834 <_free_r+0x90>)
 801b7be:	6813      	ldr	r3, [r2, #0]
 801b7c0:	b933      	cbnz	r3, 801b7d0 <_free_r+0x2c>
 801b7c2:	6063      	str	r3, [r4, #4]
 801b7c4:	6014      	str	r4, [r2, #0]
 801b7c6:	4628      	mov	r0, r5
 801b7c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b7cc:	f000 bc30 	b.w	801c030 <__malloc_unlock>
 801b7d0:	42a3      	cmp	r3, r4
 801b7d2:	d908      	bls.n	801b7e6 <_free_r+0x42>
 801b7d4:	6820      	ldr	r0, [r4, #0]
 801b7d6:	1821      	adds	r1, r4, r0
 801b7d8:	428b      	cmp	r3, r1
 801b7da:	bf01      	itttt	eq
 801b7dc:	6819      	ldreq	r1, [r3, #0]
 801b7de:	685b      	ldreq	r3, [r3, #4]
 801b7e0:	1809      	addeq	r1, r1, r0
 801b7e2:	6021      	streq	r1, [r4, #0]
 801b7e4:	e7ed      	b.n	801b7c2 <_free_r+0x1e>
 801b7e6:	461a      	mov	r2, r3
 801b7e8:	685b      	ldr	r3, [r3, #4]
 801b7ea:	b10b      	cbz	r3, 801b7f0 <_free_r+0x4c>
 801b7ec:	42a3      	cmp	r3, r4
 801b7ee:	d9fa      	bls.n	801b7e6 <_free_r+0x42>
 801b7f0:	6811      	ldr	r1, [r2, #0]
 801b7f2:	1850      	adds	r0, r2, r1
 801b7f4:	42a0      	cmp	r0, r4
 801b7f6:	d10b      	bne.n	801b810 <_free_r+0x6c>
 801b7f8:	6820      	ldr	r0, [r4, #0]
 801b7fa:	4401      	add	r1, r0
 801b7fc:	1850      	adds	r0, r2, r1
 801b7fe:	4283      	cmp	r3, r0
 801b800:	6011      	str	r1, [r2, #0]
 801b802:	d1e0      	bne.n	801b7c6 <_free_r+0x22>
 801b804:	6818      	ldr	r0, [r3, #0]
 801b806:	685b      	ldr	r3, [r3, #4]
 801b808:	6053      	str	r3, [r2, #4]
 801b80a:	4408      	add	r0, r1
 801b80c:	6010      	str	r0, [r2, #0]
 801b80e:	e7da      	b.n	801b7c6 <_free_r+0x22>
 801b810:	d902      	bls.n	801b818 <_free_r+0x74>
 801b812:	230c      	movs	r3, #12
 801b814:	602b      	str	r3, [r5, #0]
 801b816:	e7d6      	b.n	801b7c6 <_free_r+0x22>
 801b818:	6820      	ldr	r0, [r4, #0]
 801b81a:	1821      	adds	r1, r4, r0
 801b81c:	428b      	cmp	r3, r1
 801b81e:	bf04      	itt	eq
 801b820:	6819      	ldreq	r1, [r3, #0]
 801b822:	685b      	ldreq	r3, [r3, #4]
 801b824:	6063      	str	r3, [r4, #4]
 801b826:	bf04      	itt	eq
 801b828:	1809      	addeq	r1, r1, r0
 801b82a:	6021      	streq	r1, [r4, #0]
 801b82c:	6054      	str	r4, [r2, #4]
 801b82e:	e7ca      	b.n	801b7c6 <_free_r+0x22>
 801b830:	bd38      	pop	{r3, r4, r5, pc}
 801b832:	bf00      	nop
 801b834:	2401da3c 	.word	0x2401da3c

0801b838 <rshift>:
 801b838:	6903      	ldr	r3, [r0, #16]
 801b83a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b83e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b842:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b846:	f100 0414 	add.w	r4, r0, #20
 801b84a:	dd45      	ble.n	801b8d8 <rshift+0xa0>
 801b84c:	f011 011f 	ands.w	r1, r1, #31
 801b850:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b854:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b858:	d10c      	bne.n	801b874 <rshift+0x3c>
 801b85a:	f100 0710 	add.w	r7, r0, #16
 801b85e:	4629      	mov	r1, r5
 801b860:	42b1      	cmp	r1, r6
 801b862:	d334      	bcc.n	801b8ce <rshift+0x96>
 801b864:	1a9b      	subs	r3, r3, r2
 801b866:	009b      	lsls	r3, r3, #2
 801b868:	1eea      	subs	r2, r5, #3
 801b86a:	4296      	cmp	r6, r2
 801b86c:	bf38      	it	cc
 801b86e:	2300      	movcc	r3, #0
 801b870:	4423      	add	r3, r4
 801b872:	e015      	b.n	801b8a0 <rshift+0x68>
 801b874:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b878:	f1c1 0820 	rsb	r8, r1, #32
 801b87c:	40cf      	lsrs	r7, r1
 801b87e:	f105 0e04 	add.w	lr, r5, #4
 801b882:	46a1      	mov	r9, r4
 801b884:	4576      	cmp	r6, lr
 801b886:	46f4      	mov	ip, lr
 801b888:	d815      	bhi.n	801b8b6 <rshift+0x7e>
 801b88a:	1a9a      	subs	r2, r3, r2
 801b88c:	0092      	lsls	r2, r2, #2
 801b88e:	3a04      	subs	r2, #4
 801b890:	3501      	adds	r5, #1
 801b892:	42ae      	cmp	r6, r5
 801b894:	bf38      	it	cc
 801b896:	2200      	movcc	r2, #0
 801b898:	18a3      	adds	r3, r4, r2
 801b89a:	50a7      	str	r7, [r4, r2]
 801b89c:	b107      	cbz	r7, 801b8a0 <rshift+0x68>
 801b89e:	3304      	adds	r3, #4
 801b8a0:	1b1a      	subs	r2, r3, r4
 801b8a2:	42a3      	cmp	r3, r4
 801b8a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b8a8:	bf08      	it	eq
 801b8aa:	2300      	moveq	r3, #0
 801b8ac:	6102      	str	r2, [r0, #16]
 801b8ae:	bf08      	it	eq
 801b8b0:	6143      	streq	r3, [r0, #20]
 801b8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b8b6:	f8dc c000 	ldr.w	ip, [ip]
 801b8ba:	fa0c fc08 	lsl.w	ip, ip, r8
 801b8be:	ea4c 0707 	orr.w	r7, ip, r7
 801b8c2:	f849 7b04 	str.w	r7, [r9], #4
 801b8c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b8ca:	40cf      	lsrs	r7, r1
 801b8cc:	e7da      	b.n	801b884 <rshift+0x4c>
 801b8ce:	f851 cb04 	ldr.w	ip, [r1], #4
 801b8d2:	f847 cf04 	str.w	ip, [r7, #4]!
 801b8d6:	e7c3      	b.n	801b860 <rshift+0x28>
 801b8d8:	4623      	mov	r3, r4
 801b8da:	e7e1      	b.n	801b8a0 <rshift+0x68>

0801b8dc <__hexdig_fun>:
 801b8dc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801b8e0:	2b09      	cmp	r3, #9
 801b8e2:	d802      	bhi.n	801b8ea <__hexdig_fun+0xe>
 801b8e4:	3820      	subs	r0, #32
 801b8e6:	b2c0      	uxtb	r0, r0
 801b8e8:	4770      	bx	lr
 801b8ea:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801b8ee:	2b05      	cmp	r3, #5
 801b8f0:	d801      	bhi.n	801b8f6 <__hexdig_fun+0x1a>
 801b8f2:	3847      	subs	r0, #71	@ 0x47
 801b8f4:	e7f7      	b.n	801b8e6 <__hexdig_fun+0xa>
 801b8f6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801b8fa:	2b05      	cmp	r3, #5
 801b8fc:	d801      	bhi.n	801b902 <__hexdig_fun+0x26>
 801b8fe:	3827      	subs	r0, #39	@ 0x27
 801b900:	e7f1      	b.n	801b8e6 <__hexdig_fun+0xa>
 801b902:	2000      	movs	r0, #0
 801b904:	4770      	bx	lr
	...

0801b908 <__gethex>:
 801b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b90c:	b085      	sub	sp, #20
 801b90e:	468a      	mov	sl, r1
 801b910:	9302      	str	r3, [sp, #8]
 801b912:	680b      	ldr	r3, [r1, #0]
 801b914:	9001      	str	r0, [sp, #4]
 801b916:	4690      	mov	r8, r2
 801b918:	1c9c      	adds	r4, r3, #2
 801b91a:	46a1      	mov	r9, r4
 801b91c:	f814 0b01 	ldrb.w	r0, [r4], #1
 801b920:	2830      	cmp	r0, #48	@ 0x30
 801b922:	d0fa      	beq.n	801b91a <__gethex+0x12>
 801b924:	eba9 0303 	sub.w	r3, r9, r3
 801b928:	f1a3 0b02 	sub.w	fp, r3, #2
 801b92c:	f7ff ffd6 	bl	801b8dc <__hexdig_fun>
 801b930:	4605      	mov	r5, r0
 801b932:	2800      	cmp	r0, #0
 801b934:	d168      	bne.n	801ba08 <__gethex+0x100>
 801b936:	49a0      	ldr	r1, [pc, #640]	@ (801bbb8 <__gethex+0x2b0>)
 801b938:	2201      	movs	r2, #1
 801b93a:	4648      	mov	r0, r9
 801b93c:	f7ff f8b2 	bl	801aaa4 <strncmp>
 801b940:	4607      	mov	r7, r0
 801b942:	2800      	cmp	r0, #0
 801b944:	d167      	bne.n	801ba16 <__gethex+0x10e>
 801b946:	f899 0001 	ldrb.w	r0, [r9, #1]
 801b94a:	4626      	mov	r6, r4
 801b94c:	f7ff ffc6 	bl	801b8dc <__hexdig_fun>
 801b950:	2800      	cmp	r0, #0
 801b952:	d062      	beq.n	801ba1a <__gethex+0x112>
 801b954:	4623      	mov	r3, r4
 801b956:	7818      	ldrb	r0, [r3, #0]
 801b958:	2830      	cmp	r0, #48	@ 0x30
 801b95a:	4699      	mov	r9, r3
 801b95c:	f103 0301 	add.w	r3, r3, #1
 801b960:	d0f9      	beq.n	801b956 <__gethex+0x4e>
 801b962:	f7ff ffbb 	bl	801b8dc <__hexdig_fun>
 801b966:	fab0 f580 	clz	r5, r0
 801b96a:	096d      	lsrs	r5, r5, #5
 801b96c:	f04f 0b01 	mov.w	fp, #1
 801b970:	464a      	mov	r2, r9
 801b972:	4616      	mov	r6, r2
 801b974:	3201      	adds	r2, #1
 801b976:	7830      	ldrb	r0, [r6, #0]
 801b978:	f7ff ffb0 	bl	801b8dc <__hexdig_fun>
 801b97c:	2800      	cmp	r0, #0
 801b97e:	d1f8      	bne.n	801b972 <__gethex+0x6a>
 801b980:	498d      	ldr	r1, [pc, #564]	@ (801bbb8 <__gethex+0x2b0>)
 801b982:	2201      	movs	r2, #1
 801b984:	4630      	mov	r0, r6
 801b986:	f7ff f88d 	bl	801aaa4 <strncmp>
 801b98a:	2800      	cmp	r0, #0
 801b98c:	d13f      	bne.n	801ba0e <__gethex+0x106>
 801b98e:	b944      	cbnz	r4, 801b9a2 <__gethex+0x9a>
 801b990:	1c74      	adds	r4, r6, #1
 801b992:	4622      	mov	r2, r4
 801b994:	4616      	mov	r6, r2
 801b996:	3201      	adds	r2, #1
 801b998:	7830      	ldrb	r0, [r6, #0]
 801b99a:	f7ff ff9f 	bl	801b8dc <__hexdig_fun>
 801b99e:	2800      	cmp	r0, #0
 801b9a0:	d1f8      	bne.n	801b994 <__gethex+0x8c>
 801b9a2:	1ba4      	subs	r4, r4, r6
 801b9a4:	00a7      	lsls	r7, r4, #2
 801b9a6:	7833      	ldrb	r3, [r6, #0]
 801b9a8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801b9ac:	2b50      	cmp	r3, #80	@ 0x50
 801b9ae:	d13e      	bne.n	801ba2e <__gethex+0x126>
 801b9b0:	7873      	ldrb	r3, [r6, #1]
 801b9b2:	2b2b      	cmp	r3, #43	@ 0x2b
 801b9b4:	d033      	beq.n	801ba1e <__gethex+0x116>
 801b9b6:	2b2d      	cmp	r3, #45	@ 0x2d
 801b9b8:	d034      	beq.n	801ba24 <__gethex+0x11c>
 801b9ba:	1c71      	adds	r1, r6, #1
 801b9bc:	2400      	movs	r4, #0
 801b9be:	7808      	ldrb	r0, [r1, #0]
 801b9c0:	f7ff ff8c 	bl	801b8dc <__hexdig_fun>
 801b9c4:	1e43      	subs	r3, r0, #1
 801b9c6:	b2db      	uxtb	r3, r3
 801b9c8:	2b18      	cmp	r3, #24
 801b9ca:	d830      	bhi.n	801ba2e <__gethex+0x126>
 801b9cc:	f1a0 0210 	sub.w	r2, r0, #16
 801b9d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b9d4:	f7ff ff82 	bl	801b8dc <__hexdig_fun>
 801b9d8:	f100 3cff 	add.w	ip, r0, #4294967295
 801b9dc:	fa5f fc8c 	uxtb.w	ip, ip
 801b9e0:	f1bc 0f18 	cmp.w	ip, #24
 801b9e4:	f04f 030a 	mov.w	r3, #10
 801b9e8:	d91e      	bls.n	801ba28 <__gethex+0x120>
 801b9ea:	b104      	cbz	r4, 801b9ee <__gethex+0xe6>
 801b9ec:	4252      	negs	r2, r2
 801b9ee:	4417      	add	r7, r2
 801b9f0:	f8ca 1000 	str.w	r1, [sl]
 801b9f4:	b1ed      	cbz	r5, 801ba32 <__gethex+0x12a>
 801b9f6:	f1bb 0f00 	cmp.w	fp, #0
 801b9fa:	bf0c      	ite	eq
 801b9fc:	2506      	moveq	r5, #6
 801b9fe:	2500      	movne	r5, #0
 801ba00:	4628      	mov	r0, r5
 801ba02:	b005      	add	sp, #20
 801ba04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba08:	2500      	movs	r5, #0
 801ba0a:	462c      	mov	r4, r5
 801ba0c:	e7b0      	b.n	801b970 <__gethex+0x68>
 801ba0e:	2c00      	cmp	r4, #0
 801ba10:	d1c7      	bne.n	801b9a2 <__gethex+0x9a>
 801ba12:	4627      	mov	r7, r4
 801ba14:	e7c7      	b.n	801b9a6 <__gethex+0x9e>
 801ba16:	464e      	mov	r6, r9
 801ba18:	462f      	mov	r7, r5
 801ba1a:	2501      	movs	r5, #1
 801ba1c:	e7c3      	b.n	801b9a6 <__gethex+0x9e>
 801ba1e:	2400      	movs	r4, #0
 801ba20:	1cb1      	adds	r1, r6, #2
 801ba22:	e7cc      	b.n	801b9be <__gethex+0xb6>
 801ba24:	2401      	movs	r4, #1
 801ba26:	e7fb      	b.n	801ba20 <__gethex+0x118>
 801ba28:	fb03 0002 	mla	r0, r3, r2, r0
 801ba2c:	e7ce      	b.n	801b9cc <__gethex+0xc4>
 801ba2e:	4631      	mov	r1, r6
 801ba30:	e7de      	b.n	801b9f0 <__gethex+0xe8>
 801ba32:	eba6 0309 	sub.w	r3, r6, r9
 801ba36:	3b01      	subs	r3, #1
 801ba38:	4629      	mov	r1, r5
 801ba3a:	2b07      	cmp	r3, #7
 801ba3c:	dc0a      	bgt.n	801ba54 <__gethex+0x14c>
 801ba3e:	9801      	ldr	r0, [sp, #4]
 801ba40:	f000 fafc 	bl	801c03c <_Balloc>
 801ba44:	4604      	mov	r4, r0
 801ba46:	b940      	cbnz	r0, 801ba5a <__gethex+0x152>
 801ba48:	4b5c      	ldr	r3, [pc, #368]	@ (801bbbc <__gethex+0x2b4>)
 801ba4a:	4602      	mov	r2, r0
 801ba4c:	21e4      	movs	r1, #228	@ 0xe4
 801ba4e:	485c      	ldr	r0, [pc, #368]	@ (801bbc0 <__gethex+0x2b8>)
 801ba50:	f001 f9de 	bl	801ce10 <__assert_func>
 801ba54:	3101      	adds	r1, #1
 801ba56:	105b      	asrs	r3, r3, #1
 801ba58:	e7ef      	b.n	801ba3a <__gethex+0x132>
 801ba5a:	f100 0a14 	add.w	sl, r0, #20
 801ba5e:	2300      	movs	r3, #0
 801ba60:	4655      	mov	r5, sl
 801ba62:	469b      	mov	fp, r3
 801ba64:	45b1      	cmp	r9, r6
 801ba66:	d337      	bcc.n	801bad8 <__gethex+0x1d0>
 801ba68:	f845 bb04 	str.w	fp, [r5], #4
 801ba6c:	eba5 050a 	sub.w	r5, r5, sl
 801ba70:	10ad      	asrs	r5, r5, #2
 801ba72:	6125      	str	r5, [r4, #16]
 801ba74:	4658      	mov	r0, fp
 801ba76:	f000 fbd3 	bl	801c220 <__hi0bits>
 801ba7a:	016d      	lsls	r5, r5, #5
 801ba7c:	f8d8 6000 	ldr.w	r6, [r8]
 801ba80:	1a2d      	subs	r5, r5, r0
 801ba82:	42b5      	cmp	r5, r6
 801ba84:	dd54      	ble.n	801bb30 <__gethex+0x228>
 801ba86:	1bad      	subs	r5, r5, r6
 801ba88:	4629      	mov	r1, r5
 801ba8a:	4620      	mov	r0, r4
 801ba8c:	f000 ff64 	bl	801c958 <__any_on>
 801ba90:	4681      	mov	r9, r0
 801ba92:	b178      	cbz	r0, 801bab4 <__gethex+0x1ac>
 801ba94:	1e6b      	subs	r3, r5, #1
 801ba96:	1159      	asrs	r1, r3, #5
 801ba98:	f003 021f 	and.w	r2, r3, #31
 801ba9c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801baa0:	f04f 0901 	mov.w	r9, #1
 801baa4:	fa09 f202 	lsl.w	r2, r9, r2
 801baa8:	420a      	tst	r2, r1
 801baaa:	d003      	beq.n	801bab4 <__gethex+0x1ac>
 801baac:	454b      	cmp	r3, r9
 801baae:	dc36      	bgt.n	801bb1e <__gethex+0x216>
 801bab0:	f04f 0902 	mov.w	r9, #2
 801bab4:	4629      	mov	r1, r5
 801bab6:	4620      	mov	r0, r4
 801bab8:	f7ff febe 	bl	801b838 <rshift>
 801babc:	442f      	add	r7, r5
 801babe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bac2:	42bb      	cmp	r3, r7
 801bac4:	da42      	bge.n	801bb4c <__gethex+0x244>
 801bac6:	9801      	ldr	r0, [sp, #4]
 801bac8:	4621      	mov	r1, r4
 801baca:	f000 faf7 	bl	801c0bc <_Bfree>
 801bace:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bad0:	2300      	movs	r3, #0
 801bad2:	6013      	str	r3, [r2, #0]
 801bad4:	25a3      	movs	r5, #163	@ 0xa3
 801bad6:	e793      	b.n	801ba00 <__gethex+0xf8>
 801bad8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801badc:	2a2e      	cmp	r2, #46	@ 0x2e
 801bade:	d012      	beq.n	801bb06 <__gethex+0x1fe>
 801bae0:	2b20      	cmp	r3, #32
 801bae2:	d104      	bne.n	801baee <__gethex+0x1e6>
 801bae4:	f845 bb04 	str.w	fp, [r5], #4
 801bae8:	f04f 0b00 	mov.w	fp, #0
 801baec:	465b      	mov	r3, fp
 801baee:	7830      	ldrb	r0, [r6, #0]
 801baf0:	9303      	str	r3, [sp, #12]
 801baf2:	f7ff fef3 	bl	801b8dc <__hexdig_fun>
 801baf6:	9b03      	ldr	r3, [sp, #12]
 801baf8:	f000 000f 	and.w	r0, r0, #15
 801bafc:	4098      	lsls	r0, r3
 801bafe:	ea4b 0b00 	orr.w	fp, fp, r0
 801bb02:	3304      	adds	r3, #4
 801bb04:	e7ae      	b.n	801ba64 <__gethex+0x15c>
 801bb06:	45b1      	cmp	r9, r6
 801bb08:	d8ea      	bhi.n	801bae0 <__gethex+0x1d8>
 801bb0a:	492b      	ldr	r1, [pc, #172]	@ (801bbb8 <__gethex+0x2b0>)
 801bb0c:	9303      	str	r3, [sp, #12]
 801bb0e:	2201      	movs	r2, #1
 801bb10:	4630      	mov	r0, r6
 801bb12:	f7fe ffc7 	bl	801aaa4 <strncmp>
 801bb16:	9b03      	ldr	r3, [sp, #12]
 801bb18:	2800      	cmp	r0, #0
 801bb1a:	d1e1      	bne.n	801bae0 <__gethex+0x1d8>
 801bb1c:	e7a2      	b.n	801ba64 <__gethex+0x15c>
 801bb1e:	1ea9      	subs	r1, r5, #2
 801bb20:	4620      	mov	r0, r4
 801bb22:	f000 ff19 	bl	801c958 <__any_on>
 801bb26:	2800      	cmp	r0, #0
 801bb28:	d0c2      	beq.n	801bab0 <__gethex+0x1a8>
 801bb2a:	f04f 0903 	mov.w	r9, #3
 801bb2e:	e7c1      	b.n	801bab4 <__gethex+0x1ac>
 801bb30:	da09      	bge.n	801bb46 <__gethex+0x23e>
 801bb32:	1b75      	subs	r5, r6, r5
 801bb34:	4621      	mov	r1, r4
 801bb36:	9801      	ldr	r0, [sp, #4]
 801bb38:	462a      	mov	r2, r5
 801bb3a:	f000 fcd7 	bl	801c4ec <__lshift>
 801bb3e:	1b7f      	subs	r7, r7, r5
 801bb40:	4604      	mov	r4, r0
 801bb42:	f100 0a14 	add.w	sl, r0, #20
 801bb46:	f04f 0900 	mov.w	r9, #0
 801bb4a:	e7b8      	b.n	801babe <__gethex+0x1b6>
 801bb4c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801bb50:	42bd      	cmp	r5, r7
 801bb52:	dd6f      	ble.n	801bc34 <__gethex+0x32c>
 801bb54:	1bed      	subs	r5, r5, r7
 801bb56:	42ae      	cmp	r6, r5
 801bb58:	dc34      	bgt.n	801bbc4 <__gethex+0x2bc>
 801bb5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801bb5e:	2b02      	cmp	r3, #2
 801bb60:	d022      	beq.n	801bba8 <__gethex+0x2a0>
 801bb62:	2b03      	cmp	r3, #3
 801bb64:	d024      	beq.n	801bbb0 <__gethex+0x2a8>
 801bb66:	2b01      	cmp	r3, #1
 801bb68:	d115      	bne.n	801bb96 <__gethex+0x28e>
 801bb6a:	42ae      	cmp	r6, r5
 801bb6c:	d113      	bne.n	801bb96 <__gethex+0x28e>
 801bb6e:	2e01      	cmp	r6, #1
 801bb70:	d10b      	bne.n	801bb8a <__gethex+0x282>
 801bb72:	9a02      	ldr	r2, [sp, #8]
 801bb74:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bb78:	6013      	str	r3, [r2, #0]
 801bb7a:	2301      	movs	r3, #1
 801bb7c:	6123      	str	r3, [r4, #16]
 801bb7e:	f8ca 3000 	str.w	r3, [sl]
 801bb82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bb84:	2562      	movs	r5, #98	@ 0x62
 801bb86:	601c      	str	r4, [r3, #0]
 801bb88:	e73a      	b.n	801ba00 <__gethex+0xf8>
 801bb8a:	1e71      	subs	r1, r6, #1
 801bb8c:	4620      	mov	r0, r4
 801bb8e:	f000 fee3 	bl	801c958 <__any_on>
 801bb92:	2800      	cmp	r0, #0
 801bb94:	d1ed      	bne.n	801bb72 <__gethex+0x26a>
 801bb96:	9801      	ldr	r0, [sp, #4]
 801bb98:	4621      	mov	r1, r4
 801bb9a:	f000 fa8f 	bl	801c0bc <_Bfree>
 801bb9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bba0:	2300      	movs	r3, #0
 801bba2:	6013      	str	r3, [r2, #0]
 801bba4:	2550      	movs	r5, #80	@ 0x50
 801bba6:	e72b      	b.n	801ba00 <__gethex+0xf8>
 801bba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d1f3      	bne.n	801bb96 <__gethex+0x28e>
 801bbae:	e7e0      	b.n	801bb72 <__gethex+0x26a>
 801bbb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d1dd      	bne.n	801bb72 <__gethex+0x26a>
 801bbb6:	e7ee      	b.n	801bb96 <__gethex+0x28e>
 801bbb8:	0801ef14 	.word	0x0801ef14
 801bbbc:	0801f121 	.word	0x0801f121
 801bbc0:	0801f132 	.word	0x0801f132
 801bbc4:	1e6f      	subs	r7, r5, #1
 801bbc6:	f1b9 0f00 	cmp.w	r9, #0
 801bbca:	d130      	bne.n	801bc2e <__gethex+0x326>
 801bbcc:	b127      	cbz	r7, 801bbd8 <__gethex+0x2d0>
 801bbce:	4639      	mov	r1, r7
 801bbd0:	4620      	mov	r0, r4
 801bbd2:	f000 fec1 	bl	801c958 <__any_on>
 801bbd6:	4681      	mov	r9, r0
 801bbd8:	117a      	asrs	r2, r7, #5
 801bbda:	2301      	movs	r3, #1
 801bbdc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801bbe0:	f007 071f 	and.w	r7, r7, #31
 801bbe4:	40bb      	lsls	r3, r7
 801bbe6:	4213      	tst	r3, r2
 801bbe8:	4629      	mov	r1, r5
 801bbea:	4620      	mov	r0, r4
 801bbec:	bf18      	it	ne
 801bbee:	f049 0902 	orrne.w	r9, r9, #2
 801bbf2:	f7ff fe21 	bl	801b838 <rshift>
 801bbf6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801bbfa:	1b76      	subs	r6, r6, r5
 801bbfc:	2502      	movs	r5, #2
 801bbfe:	f1b9 0f00 	cmp.w	r9, #0
 801bc02:	d047      	beq.n	801bc94 <__gethex+0x38c>
 801bc04:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801bc08:	2b02      	cmp	r3, #2
 801bc0a:	d015      	beq.n	801bc38 <__gethex+0x330>
 801bc0c:	2b03      	cmp	r3, #3
 801bc0e:	d017      	beq.n	801bc40 <__gethex+0x338>
 801bc10:	2b01      	cmp	r3, #1
 801bc12:	d109      	bne.n	801bc28 <__gethex+0x320>
 801bc14:	f019 0f02 	tst.w	r9, #2
 801bc18:	d006      	beq.n	801bc28 <__gethex+0x320>
 801bc1a:	f8da 3000 	ldr.w	r3, [sl]
 801bc1e:	ea49 0903 	orr.w	r9, r9, r3
 801bc22:	f019 0f01 	tst.w	r9, #1
 801bc26:	d10e      	bne.n	801bc46 <__gethex+0x33e>
 801bc28:	f045 0510 	orr.w	r5, r5, #16
 801bc2c:	e032      	b.n	801bc94 <__gethex+0x38c>
 801bc2e:	f04f 0901 	mov.w	r9, #1
 801bc32:	e7d1      	b.n	801bbd8 <__gethex+0x2d0>
 801bc34:	2501      	movs	r5, #1
 801bc36:	e7e2      	b.n	801bbfe <__gethex+0x2f6>
 801bc38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bc3a:	f1c3 0301 	rsb	r3, r3, #1
 801bc3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bc40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d0f0      	beq.n	801bc28 <__gethex+0x320>
 801bc46:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801bc4a:	f104 0314 	add.w	r3, r4, #20
 801bc4e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801bc52:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801bc56:	f04f 0c00 	mov.w	ip, #0
 801bc5a:	4618      	mov	r0, r3
 801bc5c:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc60:	f1b2 3fff 	cmp.w	r2, #4294967295
 801bc64:	d01b      	beq.n	801bc9e <__gethex+0x396>
 801bc66:	3201      	adds	r2, #1
 801bc68:	6002      	str	r2, [r0, #0]
 801bc6a:	2d02      	cmp	r5, #2
 801bc6c:	f104 0314 	add.w	r3, r4, #20
 801bc70:	d13c      	bne.n	801bcec <__gethex+0x3e4>
 801bc72:	f8d8 2000 	ldr.w	r2, [r8]
 801bc76:	3a01      	subs	r2, #1
 801bc78:	42b2      	cmp	r2, r6
 801bc7a:	d109      	bne.n	801bc90 <__gethex+0x388>
 801bc7c:	1171      	asrs	r1, r6, #5
 801bc7e:	2201      	movs	r2, #1
 801bc80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801bc84:	f006 061f 	and.w	r6, r6, #31
 801bc88:	fa02 f606 	lsl.w	r6, r2, r6
 801bc8c:	421e      	tst	r6, r3
 801bc8e:	d13a      	bne.n	801bd06 <__gethex+0x3fe>
 801bc90:	f045 0520 	orr.w	r5, r5, #32
 801bc94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bc96:	601c      	str	r4, [r3, #0]
 801bc98:	9b02      	ldr	r3, [sp, #8]
 801bc9a:	601f      	str	r7, [r3, #0]
 801bc9c:	e6b0      	b.n	801ba00 <__gethex+0xf8>
 801bc9e:	4299      	cmp	r1, r3
 801bca0:	f843 cc04 	str.w	ip, [r3, #-4]
 801bca4:	d8d9      	bhi.n	801bc5a <__gethex+0x352>
 801bca6:	68a3      	ldr	r3, [r4, #8]
 801bca8:	459b      	cmp	fp, r3
 801bcaa:	db17      	blt.n	801bcdc <__gethex+0x3d4>
 801bcac:	6861      	ldr	r1, [r4, #4]
 801bcae:	9801      	ldr	r0, [sp, #4]
 801bcb0:	3101      	adds	r1, #1
 801bcb2:	f000 f9c3 	bl	801c03c <_Balloc>
 801bcb6:	4681      	mov	r9, r0
 801bcb8:	b918      	cbnz	r0, 801bcc2 <__gethex+0x3ba>
 801bcba:	4b1a      	ldr	r3, [pc, #104]	@ (801bd24 <__gethex+0x41c>)
 801bcbc:	4602      	mov	r2, r0
 801bcbe:	2184      	movs	r1, #132	@ 0x84
 801bcc0:	e6c5      	b.n	801ba4e <__gethex+0x146>
 801bcc2:	6922      	ldr	r2, [r4, #16]
 801bcc4:	3202      	adds	r2, #2
 801bcc6:	f104 010c 	add.w	r1, r4, #12
 801bcca:	0092      	lsls	r2, r2, #2
 801bccc:	300c      	adds	r0, #12
 801bcce:	f7fe ff72 	bl	801abb6 <memcpy>
 801bcd2:	4621      	mov	r1, r4
 801bcd4:	9801      	ldr	r0, [sp, #4]
 801bcd6:	f000 f9f1 	bl	801c0bc <_Bfree>
 801bcda:	464c      	mov	r4, r9
 801bcdc:	6923      	ldr	r3, [r4, #16]
 801bcde:	1c5a      	adds	r2, r3, #1
 801bce0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bce4:	6122      	str	r2, [r4, #16]
 801bce6:	2201      	movs	r2, #1
 801bce8:	615a      	str	r2, [r3, #20]
 801bcea:	e7be      	b.n	801bc6a <__gethex+0x362>
 801bcec:	6922      	ldr	r2, [r4, #16]
 801bcee:	455a      	cmp	r2, fp
 801bcf0:	dd0b      	ble.n	801bd0a <__gethex+0x402>
 801bcf2:	2101      	movs	r1, #1
 801bcf4:	4620      	mov	r0, r4
 801bcf6:	f7ff fd9f 	bl	801b838 <rshift>
 801bcfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bcfe:	3701      	adds	r7, #1
 801bd00:	42bb      	cmp	r3, r7
 801bd02:	f6ff aee0 	blt.w	801bac6 <__gethex+0x1be>
 801bd06:	2501      	movs	r5, #1
 801bd08:	e7c2      	b.n	801bc90 <__gethex+0x388>
 801bd0a:	f016 061f 	ands.w	r6, r6, #31
 801bd0e:	d0fa      	beq.n	801bd06 <__gethex+0x3fe>
 801bd10:	4453      	add	r3, sl
 801bd12:	f1c6 0620 	rsb	r6, r6, #32
 801bd16:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801bd1a:	f000 fa81 	bl	801c220 <__hi0bits>
 801bd1e:	42b0      	cmp	r0, r6
 801bd20:	dbe7      	blt.n	801bcf2 <__gethex+0x3ea>
 801bd22:	e7f0      	b.n	801bd06 <__gethex+0x3fe>
 801bd24:	0801f121 	.word	0x0801f121

0801bd28 <L_shift>:
 801bd28:	f1c2 0208 	rsb	r2, r2, #8
 801bd2c:	0092      	lsls	r2, r2, #2
 801bd2e:	b570      	push	{r4, r5, r6, lr}
 801bd30:	f1c2 0620 	rsb	r6, r2, #32
 801bd34:	6843      	ldr	r3, [r0, #4]
 801bd36:	6804      	ldr	r4, [r0, #0]
 801bd38:	fa03 f506 	lsl.w	r5, r3, r6
 801bd3c:	432c      	orrs	r4, r5
 801bd3e:	40d3      	lsrs	r3, r2
 801bd40:	6004      	str	r4, [r0, #0]
 801bd42:	f840 3f04 	str.w	r3, [r0, #4]!
 801bd46:	4288      	cmp	r0, r1
 801bd48:	d3f4      	bcc.n	801bd34 <L_shift+0xc>
 801bd4a:	bd70      	pop	{r4, r5, r6, pc}

0801bd4c <__match>:
 801bd4c:	b530      	push	{r4, r5, lr}
 801bd4e:	6803      	ldr	r3, [r0, #0]
 801bd50:	3301      	adds	r3, #1
 801bd52:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bd56:	b914      	cbnz	r4, 801bd5e <__match+0x12>
 801bd58:	6003      	str	r3, [r0, #0]
 801bd5a:	2001      	movs	r0, #1
 801bd5c:	bd30      	pop	{r4, r5, pc}
 801bd5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd62:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801bd66:	2d19      	cmp	r5, #25
 801bd68:	bf98      	it	ls
 801bd6a:	3220      	addls	r2, #32
 801bd6c:	42a2      	cmp	r2, r4
 801bd6e:	d0f0      	beq.n	801bd52 <__match+0x6>
 801bd70:	2000      	movs	r0, #0
 801bd72:	e7f3      	b.n	801bd5c <__match+0x10>

0801bd74 <__hexnan>:
 801bd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd78:	680b      	ldr	r3, [r1, #0]
 801bd7a:	6801      	ldr	r1, [r0, #0]
 801bd7c:	115e      	asrs	r6, r3, #5
 801bd7e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801bd82:	f013 031f 	ands.w	r3, r3, #31
 801bd86:	b087      	sub	sp, #28
 801bd88:	bf18      	it	ne
 801bd8a:	3604      	addne	r6, #4
 801bd8c:	2500      	movs	r5, #0
 801bd8e:	1f37      	subs	r7, r6, #4
 801bd90:	4682      	mov	sl, r0
 801bd92:	4690      	mov	r8, r2
 801bd94:	9301      	str	r3, [sp, #4]
 801bd96:	f846 5c04 	str.w	r5, [r6, #-4]
 801bd9a:	46b9      	mov	r9, r7
 801bd9c:	463c      	mov	r4, r7
 801bd9e:	9502      	str	r5, [sp, #8]
 801bda0:	46ab      	mov	fp, r5
 801bda2:	784a      	ldrb	r2, [r1, #1]
 801bda4:	1c4b      	adds	r3, r1, #1
 801bda6:	9303      	str	r3, [sp, #12]
 801bda8:	b342      	cbz	r2, 801bdfc <__hexnan+0x88>
 801bdaa:	4610      	mov	r0, r2
 801bdac:	9105      	str	r1, [sp, #20]
 801bdae:	9204      	str	r2, [sp, #16]
 801bdb0:	f7ff fd94 	bl	801b8dc <__hexdig_fun>
 801bdb4:	2800      	cmp	r0, #0
 801bdb6:	d151      	bne.n	801be5c <__hexnan+0xe8>
 801bdb8:	9a04      	ldr	r2, [sp, #16]
 801bdba:	9905      	ldr	r1, [sp, #20]
 801bdbc:	2a20      	cmp	r2, #32
 801bdbe:	d818      	bhi.n	801bdf2 <__hexnan+0x7e>
 801bdc0:	9b02      	ldr	r3, [sp, #8]
 801bdc2:	459b      	cmp	fp, r3
 801bdc4:	dd13      	ble.n	801bdee <__hexnan+0x7a>
 801bdc6:	454c      	cmp	r4, r9
 801bdc8:	d206      	bcs.n	801bdd8 <__hexnan+0x64>
 801bdca:	2d07      	cmp	r5, #7
 801bdcc:	dc04      	bgt.n	801bdd8 <__hexnan+0x64>
 801bdce:	462a      	mov	r2, r5
 801bdd0:	4649      	mov	r1, r9
 801bdd2:	4620      	mov	r0, r4
 801bdd4:	f7ff ffa8 	bl	801bd28 <L_shift>
 801bdd8:	4544      	cmp	r4, r8
 801bdda:	d952      	bls.n	801be82 <__hexnan+0x10e>
 801bddc:	2300      	movs	r3, #0
 801bdde:	f1a4 0904 	sub.w	r9, r4, #4
 801bde2:	f844 3c04 	str.w	r3, [r4, #-4]
 801bde6:	f8cd b008 	str.w	fp, [sp, #8]
 801bdea:	464c      	mov	r4, r9
 801bdec:	461d      	mov	r5, r3
 801bdee:	9903      	ldr	r1, [sp, #12]
 801bdf0:	e7d7      	b.n	801bda2 <__hexnan+0x2e>
 801bdf2:	2a29      	cmp	r2, #41	@ 0x29
 801bdf4:	d157      	bne.n	801bea6 <__hexnan+0x132>
 801bdf6:	3102      	adds	r1, #2
 801bdf8:	f8ca 1000 	str.w	r1, [sl]
 801bdfc:	f1bb 0f00 	cmp.w	fp, #0
 801be00:	d051      	beq.n	801bea6 <__hexnan+0x132>
 801be02:	454c      	cmp	r4, r9
 801be04:	d206      	bcs.n	801be14 <__hexnan+0xa0>
 801be06:	2d07      	cmp	r5, #7
 801be08:	dc04      	bgt.n	801be14 <__hexnan+0xa0>
 801be0a:	462a      	mov	r2, r5
 801be0c:	4649      	mov	r1, r9
 801be0e:	4620      	mov	r0, r4
 801be10:	f7ff ff8a 	bl	801bd28 <L_shift>
 801be14:	4544      	cmp	r4, r8
 801be16:	d936      	bls.n	801be86 <__hexnan+0x112>
 801be18:	f1a8 0204 	sub.w	r2, r8, #4
 801be1c:	4623      	mov	r3, r4
 801be1e:	f853 1b04 	ldr.w	r1, [r3], #4
 801be22:	f842 1f04 	str.w	r1, [r2, #4]!
 801be26:	429f      	cmp	r7, r3
 801be28:	d2f9      	bcs.n	801be1e <__hexnan+0xaa>
 801be2a:	1b3b      	subs	r3, r7, r4
 801be2c:	f023 0303 	bic.w	r3, r3, #3
 801be30:	3304      	adds	r3, #4
 801be32:	3401      	adds	r4, #1
 801be34:	3e03      	subs	r6, #3
 801be36:	42b4      	cmp	r4, r6
 801be38:	bf88      	it	hi
 801be3a:	2304      	movhi	r3, #4
 801be3c:	4443      	add	r3, r8
 801be3e:	2200      	movs	r2, #0
 801be40:	f843 2b04 	str.w	r2, [r3], #4
 801be44:	429f      	cmp	r7, r3
 801be46:	d2fb      	bcs.n	801be40 <__hexnan+0xcc>
 801be48:	683b      	ldr	r3, [r7, #0]
 801be4a:	b91b      	cbnz	r3, 801be54 <__hexnan+0xe0>
 801be4c:	4547      	cmp	r7, r8
 801be4e:	d128      	bne.n	801bea2 <__hexnan+0x12e>
 801be50:	2301      	movs	r3, #1
 801be52:	603b      	str	r3, [r7, #0]
 801be54:	2005      	movs	r0, #5
 801be56:	b007      	add	sp, #28
 801be58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be5c:	3501      	adds	r5, #1
 801be5e:	2d08      	cmp	r5, #8
 801be60:	f10b 0b01 	add.w	fp, fp, #1
 801be64:	dd06      	ble.n	801be74 <__hexnan+0x100>
 801be66:	4544      	cmp	r4, r8
 801be68:	d9c1      	bls.n	801bdee <__hexnan+0x7a>
 801be6a:	2300      	movs	r3, #0
 801be6c:	f844 3c04 	str.w	r3, [r4, #-4]
 801be70:	2501      	movs	r5, #1
 801be72:	3c04      	subs	r4, #4
 801be74:	6822      	ldr	r2, [r4, #0]
 801be76:	f000 000f 	and.w	r0, r0, #15
 801be7a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801be7e:	6020      	str	r0, [r4, #0]
 801be80:	e7b5      	b.n	801bdee <__hexnan+0x7a>
 801be82:	2508      	movs	r5, #8
 801be84:	e7b3      	b.n	801bdee <__hexnan+0x7a>
 801be86:	9b01      	ldr	r3, [sp, #4]
 801be88:	2b00      	cmp	r3, #0
 801be8a:	d0dd      	beq.n	801be48 <__hexnan+0xd4>
 801be8c:	f1c3 0320 	rsb	r3, r3, #32
 801be90:	f04f 32ff 	mov.w	r2, #4294967295
 801be94:	40da      	lsrs	r2, r3
 801be96:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801be9a:	4013      	ands	r3, r2
 801be9c:	f846 3c04 	str.w	r3, [r6, #-4]
 801bea0:	e7d2      	b.n	801be48 <__hexnan+0xd4>
 801bea2:	3f04      	subs	r7, #4
 801bea4:	e7d0      	b.n	801be48 <__hexnan+0xd4>
 801bea6:	2004      	movs	r0, #4
 801bea8:	e7d5      	b.n	801be56 <__hexnan+0xe2>
	...

0801beac <malloc>:
 801beac:	4b02      	ldr	r3, [pc, #8]	@ (801beb8 <malloc+0xc>)
 801beae:	4601      	mov	r1, r0
 801beb0:	6818      	ldr	r0, [r3, #0]
 801beb2:	f000 b825 	b.w	801bf00 <_malloc_r>
 801beb6:	bf00      	nop
 801beb8:	240002ac 	.word	0x240002ac

0801bebc <sbrk_aligned>:
 801bebc:	b570      	push	{r4, r5, r6, lr}
 801bebe:	4e0f      	ldr	r6, [pc, #60]	@ (801befc <sbrk_aligned+0x40>)
 801bec0:	460c      	mov	r4, r1
 801bec2:	6831      	ldr	r1, [r6, #0]
 801bec4:	4605      	mov	r5, r0
 801bec6:	b911      	cbnz	r1, 801bece <sbrk_aligned+0x12>
 801bec8:	f000 ff92 	bl	801cdf0 <_sbrk_r>
 801becc:	6030      	str	r0, [r6, #0]
 801bece:	4621      	mov	r1, r4
 801bed0:	4628      	mov	r0, r5
 801bed2:	f000 ff8d 	bl	801cdf0 <_sbrk_r>
 801bed6:	1c43      	adds	r3, r0, #1
 801bed8:	d103      	bne.n	801bee2 <sbrk_aligned+0x26>
 801beda:	f04f 34ff 	mov.w	r4, #4294967295
 801bede:	4620      	mov	r0, r4
 801bee0:	bd70      	pop	{r4, r5, r6, pc}
 801bee2:	1cc4      	adds	r4, r0, #3
 801bee4:	f024 0403 	bic.w	r4, r4, #3
 801bee8:	42a0      	cmp	r0, r4
 801beea:	d0f8      	beq.n	801bede <sbrk_aligned+0x22>
 801beec:	1a21      	subs	r1, r4, r0
 801beee:	4628      	mov	r0, r5
 801bef0:	f000 ff7e 	bl	801cdf0 <_sbrk_r>
 801bef4:	3001      	adds	r0, #1
 801bef6:	d1f2      	bne.n	801bede <sbrk_aligned+0x22>
 801bef8:	e7ef      	b.n	801beda <sbrk_aligned+0x1e>
 801befa:	bf00      	nop
 801befc:	2401da38 	.word	0x2401da38

0801bf00 <_malloc_r>:
 801bf00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf04:	1ccd      	adds	r5, r1, #3
 801bf06:	f025 0503 	bic.w	r5, r5, #3
 801bf0a:	3508      	adds	r5, #8
 801bf0c:	2d0c      	cmp	r5, #12
 801bf0e:	bf38      	it	cc
 801bf10:	250c      	movcc	r5, #12
 801bf12:	2d00      	cmp	r5, #0
 801bf14:	4606      	mov	r6, r0
 801bf16:	db01      	blt.n	801bf1c <_malloc_r+0x1c>
 801bf18:	42a9      	cmp	r1, r5
 801bf1a:	d904      	bls.n	801bf26 <_malloc_r+0x26>
 801bf1c:	230c      	movs	r3, #12
 801bf1e:	6033      	str	r3, [r6, #0]
 801bf20:	2000      	movs	r0, #0
 801bf22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bffc <_malloc_r+0xfc>
 801bf2a:	f000 f87b 	bl	801c024 <__malloc_lock>
 801bf2e:	f8d8 3000 	ldr.w	r3, [r8]
 801bf32:	461c      	mov	r4, r3
 801bf34:	bb44      	cbnz	r4, 801bf88 <_malloc_r+0x88>
 801bf36:	4629      	mov	r1, r5
 801bf38:	4630      	mov	r0, r6
 801bf3a:	f7ff ffbf 	bl	801bebc <sbrk_aligned>
 801bf3e:	1c43      	adds	r3, r0, #1
 801bf40:	4604      	mov	r4, r0
 801bf42:	d158      	bne.n	801bff6 <_malloc_r+0xf6>
 801bf44:	f8d8 4000 	ldr.w	r4, [r8]
 801bf48:	4627      	mov	r7, r4
 801bf4a:	2f00      	cmp	r7, #0
 801bf4c:	d143      	bne.n	801bfd6 <_malloc_r+0xd6>
 801bf4e:	2c00      	cmp	r4, #0
 801bf50:	d04b      	beq.n	801bfea <_malloc_r+0xea>
 801bf52:	6823      	ldr	r3, [r4, #0]
 801bf54:	4639      	mov	r1, r7
 801bf56:	4630      	mov	r0, r6
 801bf58:	eb04 0903 	add.w	r9, r4, r3
 801bf5c:	f000 ff48 	bl	801cdf0 <_sbrk_r>
 801bf60:	4581      	cmp	r9, r0
 801bf62:	d142      	bne.n	801bfea <_malloc_r+0xea>
 801bf64:	6821      	ldr	r1, [r4, #0]
 801bf66:	1a6d      	subs	r5, r5, r1
 801bf68:	4629      	mov	r1, r5
 801bf6a:	4630      	mov	r0, r6
 801bf6c:	f7ff ffa6 	bl	801bebc <sbrk_aligned>
 801bf70:	3001      	adds	r0, #1
 801bf72:	d03a      	beq.n	801bfea <_malloc_r+0xea>
 801bf74:	6823      	ldr	r3, [r4, #0]
 801bf76:	442b      	add	r3, r5
 801bf78:	6023      	str	r3, [r4, #0]
 801bf7a:	f8d8 3000 	ldr.w	r3, [r8]
 801bf7e:	685a      	ldr	r2, [r3, #4]
 801bf80:	bb62      	cbnz	r2, 801bfdc <_malloc_r+0xdc>
 801bf82:	f8c8 7000 	str.w	r7, [r8]
 801bf86:	e00f      	b.n	801bfa8 <_malloc_r+0xa8>
 801bf88:	6822      	ldr	r2, [r4, #0]
 801bf8a:	1b52      	subs	r2, r2, r5
 801bf8c:	d420      	bmi.n	801bfd0 <_malloc_r+0xd0>
 801bf8e:	2a0b      	cmp	r2, #11
 801bf90:	d917      	bls.n	801bfc2 <_malloc_r+0xc2>
 801bf92:	1961      	adds	r1, r4, r5
 801bf94:	42a3      	cmp	r3, r4
 801bf96:	6025      	str	r5, [r4, #0]
 801bf98:	bf18      	it	ne
 801bf9a:	6059      	strne	r1, [r3, #4]
 801bf9c:	6863      	ldr	r3, [r4, #4]
 801bf9e:	bf08      	it	eq
 801bfa0:	f8c8 1000 	streq.w	r1, [r8]
 801bfa4:	5162      	str	r2, [r4, r5]
 801bfa6:	604b      	str	r3, [r1, #4]
 801bfa8:	4630      	mov	r0, r6
 801bfaa:	f000 f841 	bl	801c030 <__malloc_unlock>
 801bfae:	f104 000b 	add.w	r0, r4, #11
 801bfb2:	1d23      	adds	r3, r4, #4
 801bfb4:	f020 0007 	bic.w	r0, r0, #7
 801bfb8:	1ac2      	subs	r2, r0, r3
 801bfba:	bf1c      	itt	ne
 801bfbc:	1a1b      	subne	r3, r3, r0
 801bfbe:	50a3      	strne	r3, [r4, r2]
 801bfc0:	e7af      	b.n	801bf22 <_malloc_r+0x22>
 801bfc2:	6862      	ldr	r2, [r4, #4]
 801bfc4:	42a3      	cmp	r3, r4
 801bfc6:	bf0c      	ite	eq
 801bfc8:	f8c8 2000 	streq.w	r2, [r8]
 801bfcc:	605a      	strne	r2, [r3, #4]
 801bfce:	e7eb      	b.n	801bfa8 <_malloc_r+0xa8>
 801bfd0:	4623      	mov	r3, r4
 801bfd2:	6864      	ldr	r4, [r4, #4]
 801bfd4:	e7ae      	b.n	801bf34 <_malloc_r+0x34>
 801bfd6:	463c      	mov	r4, r7
 801bfd8:	687f      	ldr	r7, [r7, #4]
 801bfda:	e7b6      	b.n	801bf4a <_malloc_r+0x4a>
 801bfdc:	461a      	mov	r2, r3
 801bfde:	685b      	ldr	r3, [r3, #4]
 801bfe0:	42a3      	cmp	r3, r4
 801bfe2:	d1fb      	bne.n	801bfdc <_malloc_r+0xdc>
 801bfe4:	2300      	movs	r3, #0
 801bfe6:	6053      	str	r3, [r2, #4]
 801bfe8:	e7de      	b.n	801bfa8 <_malloc_r+0xa8>
 801bfea:	230c      	movs	r3, #12
 801bfec:	6033      	str	r3, [r6, #0]
 801bfee:	4630      	mov	r0, r6
 801bff0:	f000 f81e 	bl	801c030 <__malloc_unlock>
 801bff4:	e794      	b.n	801bf20 <_malloc_r+0x20>
 801bff6:	6005      	str	r5, [r0, #0]
 801bff8:	e7d6      	b.n	801bfa8 <_malloc_r+0xa8>
 801bffa:	bf00      	nop
 801bffc:	2401da3c 	.word	0x2401da3c

0801c000 <__ascii_mbtowc>:
 801c000:	b082      	sub	sp, #8
 801c002:	b901      	cbnz	r1, 801c006 <__ascii_mbtowc+0x6>
 801c004:	a901      	add	r1, sp, #4
 801c006:	b142      	cbz	r2, 801c01a <__ascii_mbtowc+0x1a>
 801c008:	b14b      	cbz	r3, 801c01e <__ascii_mbtowc+0x1e>
 801c00a:	7813      	ldrb	r3, [r2, #0]
 801c00c:	600b      	str	r3, [r1, #0]
 801c00e:	7812      	ldrb	r2, [r2, #0]
 801c010:	1e10      	subs	r0, r2, #0
 801c012:	bf18      	it	ne
 801c014:	2001      	movne	r0, #1
 801c016:	b002      	add	sp, #8
 801c018:	4770      	bx	lr
 801c01a:	4610      	mov	r0, r2
 801c01c:	e7fb      	b.n	801c016 <__ascii_mbtowc+0x16>
 801c01e:	f06f 0001 	mvn.w	r0, #1
 801c022:	e7f8      	b.n	801c016 <__ascii_mbtowc+0x16>

0801c024 <__malloc_lock>:
 801c024:	4801      	ldr	r0, [pc, #4]	@ (801c02c <__malloc_lock+0x8>)
 801c026:	f7fe bdc4 	b.w	801abb2 <__retarget_lock_acquire_recursive>
 801c02a:	bf00      	nop
 801c02c:	2401da34 	.word	0x2401da34

0801c030 <__malloc_unlock>:
 801c030:	4801      	ldr	r0, [pc, #4]	@ (801c038 <__malloc_unlock+0x8>)
 801c032:	f7fe bdbf 	b.w	801abb4 <__retarget_lock_release_recursive>
 801c036:	bf00      	nop
 801c038:	2401da34 	.word	0x2401da34

0801c03c <_Balloc>:
 801c03c:	b570      	push	{r4, r5, r6, lr}
 801c03e:	69c6      	ldr	r6, [r0, #28]
 801c040:	4604      	mov	r4, r0
 801c042:	460d      	mov	r5, r1
 801c044:	b976      	cbnz	r6, 801c064 <_Balloc+0x28>
 801c046:	2010      	movs	r0, #16
 801c048:	f7ff ff30 	bl	801beac <malloc>
 801c04c:	4602      	mov	r2, r0
 801c04e:	61e0      	str	r0, [r4, #28]
 801c050:	b920      	cbnz	r0, 801c05c <_Balloc+0x20>
 801c052:	4b18      	ldr	r3, [pc, #96]	@ (801c0b4 <_Balloc+0x78>)
 801c054:	4818      	ldr	r0, [pc, #96]	@ (801c0b8 <_Balloc+0x7c>)
 801c056:	216b      	movs	r1, #107	@ 0x6b
 801c058:	f000 feda 	bl	801ce10 <__assert_func>
 801c05c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c060:	6006      	str	r6, [r0, #0]
 801c062:	60c6      	str	r6, [r0, #12]
 801c064:	69e6      	ldr	r6, [r4, #28]
 801c066:	68f3      	ldr	r3, [r6, #12]
 801c068:	b183      	cbz	r3, 801c08c <_Balloc+0x50>
 801c06a:	69e3      	ldr	r3, [r4, #28]
 801c06c:	68db      	ldr	r3, [r3, #12]
 801c06e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c072:	b9b8      	cbnz	r0, 801c0a4 <_Balloc+0x68>
 801c074:	2101      	movs	r1, #1
 801c076:	fa01 f605 	lsl.w	r6, r1, r5
 801c07a:	1d72      	adds	r2, r6, #5
 801c07c:	0092      	lsls	r2, r2, #2
 801c07e:	4620      	mov	r0, r4
 801c080:	f000 fee4 	bl	801ce4c <_calloc_r>
 801c084:	b160      	cbz	r0, 801c0a0 <_Balloc+0x64>
 801c086:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c08a:	e00e      	b.n	801c0aa <_Balloc+0x6e>
 801c08c:	2221      	movs	r2, #33	@ 0x21
 801c08e:	2104      	movs	r1, #4
 801c090:	4620      	mov	r0, r4
 801c092:	f000 fedb 	bl	801ce4c <_calloc_r>
 801c096:	69e3      	ldr	r3, [r4, #28]
 801c098:	60f0      	str	r0, [r6, #12]
 801c09a:	68db      	ldr	r3, [r3, #12]
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d1e4      	bne.n	801c06a <_Balloc+0x2e>
 801c0a0:	2000      	movs	r0, #0
 801c0a2:	bd70      	pop	{r4, r5, r6, pc}
 801c0a4:	6802      	ldr	r2, [r0, #0]
 801c0a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c0aa:	2300      	movs	r3, #0
 801c0ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c0b0:	e7f7      	b.n	801c0a2 <_Balloc+0x66>
 801c0b2:	bf00      	nop
 801c0b4:	0801f0b2 	.word	0x0801f0b2
 801c0b8:	0801f192 	.word	0x0801f192

0801c0bc <_Bfree>:
 801c0bc:	b570      	push	{r4, r5, r6, lr}
 801c0be:	69c6      	ldr	r6, [r0, #28]
 801c0c0:	4605      	mov	r5, r0
 801c0c2:	460c      	mov	r4, r1
 801c0c4:	b976      	cbnz	r6, 801c0e4 <_Bfree+0x28>
 801c0c6:	2010      	movs	r0, #16
 801c0c8:	f7ff fef0 	bl	801beac <malloc>
 801c0cc:	4602      	mov	r2, r0
 801c0ce:	61e8      	str	r0, [r5, #28]
 801c0d0:	b920      	cbnz	r0, 801c0dc <_Bfree+0x20>
 801c0d2:	4b09      	ldr	r3, [pc, #36]	@ (801c0f8 <_Bfree+0x3c>)
 801c0d4:	4809      	ldr	r0, [pc, #36]	@ (801c0fc <_Bfree+0x40>)
 801c0d6:	218f      	movs	r1, #143	@ 0x8f
 801c0d8:	f000 fe9a 	bl	801ce10 <__assert_func>
 801c0dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c0e0:	6006      	str	r6, [r0, #0]
 801c0e2:	60c6      	str	r6, [r0, #12]
 801c0e4:	b13c      	cbz	r4, 801c0f6 <_Bfree+0x3a>
 801c0e6:	69eb      	ldr	r3, [r5, #28]
 801c0e8:	6862      	ldr	r2, [r4, #4]
 801c0ea:	68db      	ldr	r3, [r3, #12]
 801c0ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c0f0:	6021      	str	r1, [r4, #0]
 801c0f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c0f6:	bd70      	pop	{r4, r5, r6, pc}
 801c0f8:	0801f0b2 	.word	0x0801f0b2
 801c0fc:	0801f192 	.word	0x0801f192

0801c100 <__multadd>:
 801c100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c104:	690d      	ldr	r5, [r1, #16]
 801c106:	4607      	mov	r7, r0
 801c108:	460c      	mov	r4, r1
 801c10a:	461e      	mov	r6, r3
 801c10c:	f101 0c14 	add.w	ip, r1, #20
 801c110:	2000      	movs	r0, #0
 801c112:	f8dc 3000 	ldr.w	r3, [ip]
 801c116:	b299      	uxth	r1, r3
 801c118:	fb02 6101 	mla	r1, r2, r1, r6
 801c11c:	0c1e      	lsrs	r6, r3, #16
 801c11e:	0c0b      	lsrs	r3, r1, #16
 801c120:	fb02 3306 	mla	r3, r2, r6, r3
 801c124:	b289      	uxth	r1, r1
 801c126:	3001      	adds	r0, #1
 801c128:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c12c:	4285      	cmp	r5, r0
 801c12e:	f84c 1b04 	str.w	r1, [ip], #4
 801c132:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c136:	dcec      	bgt.n	801c112 <__multadd+0x12>
 801c138:	b30e      	cbz	r6, 801c17e <__multadd+0x7e>
 801c13a:	68a3      	ldr	r3, [r4, #8]
 801c13c:	42ab      	cmp	r3, r5
 801c13e:	dc19      	bgt.n	801c174 <__multadd+0x74>
 801c140:	6861      	ldr	r1, [r4, #4]
 801c142:	4638      	mov	r0, r7
 801c144:	3101      	adds	r1, #1
 801c146:	f7ff ff79 	bl	801c03c <_Balloc>
 801c14a:	4680      	mov	r8, r0
 801c14c:	b928      	cbnz	r0, 801c15a <__multadd+0x5a>
 801c14e:	4602      	mov	r2, r0
 801c150:	4b0c      	ldr	r3, [pc, #48]	@ (801c184 <__multadd+0x84>)
 801c152:	480d      	ldr	r0, [pc, #52]	@ (801c188 <__multadd+0x88>)
 801c154:	21ba      	movs	r1, #186	@ 0xba
 801c156:	f000 fe5b 	bl	801ce10 <__assert_func>
 801c15a:	6922      	ldr	r2, [r4, #16]
 801c15c:	3202      	adds	r2, #2
 801c15e:	f104 010c 	add.w	r1, r4, #12
 801c162:	0092      	lsls	r2, r2, #2
 801c164:	300c      	adds	r0, #12
 801c166:	f7fe fd26 	bl	801abb6 <memcpy>
 801c16a:	4621      	mov	r1, r4
 801c16c:	4638      	mov	r0, r7
 801c16e:	f7ff ffa5 	bl	801c0bc <_Bfree>
 801c172:	4644      	mov	r4, r8
 801c174:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c178:	3501      	adds	r5, #1
 801c17a:	615e      	str	r6, [r3, #20]
 801c17c:	6125      	str	r5, [r4, #16]
 801c17e:	4620      	mov	r0, r4
 801c180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c184:	0801f121 	.word	0x0801f121
 801c188:	0801f192 	.word	0x0801f192

0801c18c <__s2b>:
 801c18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c190:	460c      	mov	r4, r1
 801c192:	4615      	mov	r5, r2
 801c194:	461f      	mov	r7, r3
 801c196:	2209      	movs	r2, #9
 801c198:	3308      	adds	r3, #8
 801c19a:	4606      	mov	r6, r0
 801c19c:	fb93 f3f2 	sdiv	r3, r3, r2
 801c1a0:	2100      	movs	r1, #0
 801c1a2:	2201      	movs	r2, #1
 801c1a4:	429a      	cmp	r2, r3
 801c1a6:	db09      	blt.n	801c1bc <__s2b+0x30>
 801c1a8:	4630      	mov	r0, r6
 801c1aa:	f7ff ff47 	bl	801c03c <_Balloc>
 801c1ae:	b940      	cbnz	r0, 801c1c2 <__s2b+0x36>
 801c1b0:	4602      	mov	r2, r0
 801c1b2:	4b19      	ldr	r3, [pc, #100]	@ (801c218 <__s2b+0x8c>)
 801c1b4:	4819      	ldr	r0, [pc, #100]	@ (801c21c <__s2b+0x90>)
 801c1b6:	21d3      	movs	r1, #211	@ 0xd3
 801c1b8:	f000 fe2a 	bl	801ce10 <__assert_func>
 801c1bc:	0052      	lsls	r2, r2, #1
 801c1be:	3101      	adds	r1, #1
 801c1c0:	e7f0      	b.n	801c1a4 <__s2b+0x18>
 801c1c2:	9b08      	ldr	r3, [sp, #32]
 801c1c4:	6143      	str	r3, [r0, #20]
 801c1c6:	2d09      	cmp	r5, #9
 801c1c8:	f04f 0301 	mov.w	r3, #1
 801c1cc:	6103      	str	r3, [r0, #16]
 801c1ce:	dd16      	ble.n	801c1fe <__s2b+0x72>
 801c1d0:	f104 0909 	add.w	r9, r4, #9
 801c1d4:	46c8      	mov	r8, r9
 801c1d6:	442c      	add	r4, r5
 801c1d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c1dc:	4601      	mov	r1, r0
 801c1de:	3b30      	subs	r3, #48	@ 0x30
 801c1e0:	220a      	movs	r2, #10
 801c1e2:	4630      	mov	r0, r6
 801c1e4:	f7ff ff8c 	bl	801c100 <__multadd>
 801c1e8:	45a0      	cmp	r8, r4
 801c1ea:	d1f5      	bne.n	801c1d8 <__s2b+0x4c>
 801c1ec:	f1a5 0408 	sub.w	r4, r5, #8
 801c1f0:	444c      	add	r4, r9
 801c1f2:	1b2d      	subs	r5, r5, r4
 801c1f4:	1963      	adds	r3, r4, r5
 801c1f6:	42bb      	cmp	r3, r7
 801c1f8:	db04      	blt.n	801c204 <__s2b+0x78>
 801c1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c1fe:	340a      	adds	r4, #10
 801c200:	2509      	movs	r5, #9
 801c202:	e7f6      	b.n	801c1f2 <__s2b+0x66>
 801c204:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c208:	4601      	mov	r1, r0
 801c20a:	3b30      	subs	r3, #48	@ 0x30
 801c20c:	220a      	movs	r2, #10
 801c20e:	4630      	mov	r0, r6
 801c210:	f7ff ff76 	bl	801c100 <__multadd>
 801c214:	e7ee      	b.n	801c1f4 <__s2b+0x68>
 801c216:	bf00      	nop
 801c218:	0801f121 	.word	0x0801f121
 801c21c:	0801f192 	.word	0x0801f192

0801c220 <__hi0bits>:
 801c220:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801c224:	4603      	mov	r3, r0
 801c226:	bf36      	itet	cc
 801c228:	0403      	lslcc	r3, r0, #16
 801c22a:	2000      	movcs	r0, #0
 801c22c:	2010      	movcc	r0, #16
 801c22e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c232:	bf3c      	itt	cc
 801c234:	021b      	lslcc	r3, r3, #8
 801c236:	3008      	addcc	r0, #8
 801c238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c23c:	bf3c      	itt	cc
 801c23e:	011b      	lslcc	r3, r3, #4
 801c240:	3004      	addcc	r0, #4
 801c242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c246:	bf3c      	itt	cc
 801c248:	009b      	lslcc	r3, r3, #2
 801c24a:	3002      	addcc	r0, #2
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	db05      	blt.n	801c25c <__hi0bits+0x3c>
 801c250:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801c254:	f100 0001 	add.w	r0, r0, #1
 801c258:	bf08      	it	eq
 801c25a:	2020      	moveq	r0, #32
 801c25c:	4770      	bx	lr

0801c25e <__lo0bits>:
 801c25e:	6803      	ldr	r3, [r0, #0]
 801c260:	4602      	mov	r2, r0
 801c262:	f013 0007 	ands.w	r0, r3, #7
 801c266:	d00b      	beq.n	801c280 <__lo0bits+0x22>
 801c268:	07d9      	lsls	r1, r3, #31
 801c26a:	d421      	bmi.n	801c2b0 <__lo0bits+0x52>
 801c26c:	0798      	lsls	r0, r3, #30
 801c26e:	bf49      	itett	mi
 801c270:	085b      	lsrmi	r3, r3, #1
 801c272:	089b      	lsrpl	r3, r3, #2
 801c274:	2001      	movmi	r0, #1
 801c276:	6013      	strmi	r3, [r2, #0]
 801c278:	bf5c      	itt	pl
 801c27a:	6013      	strpl	r3, [r2, #0]
 801c27c:	2002      	movpl	r0, #2
 801c27e:	4770      	bx	lr
 801c280:	b299      	uxth	r1, r3
 801c282:	b909      	cbnz	r1, 801c288 <__lo0bits+0x2a>
 801c284:	0c1b      	lsrs	r3, r3, #16
 801c286:	2010      	movs	r0, #16
 801c288:	b2d9      	uxtb	r1, r3
 801c28a:	b909      	cbnz	r1, 801c290 <__lo0bits+0x32>
 801c28c:	3008      	adds	r0, #8
 801c28e:	0a1b      	lsrs	r3, r3, #8
 801c290:	0719      	lsls	r1, r3, #28
 801c292:	bf04      	itt	eq
 801c294:	091b      	lsreq	r3, r3, #4
 801c296:	3004      	addeq	r0, #4
 801c298:	0799      	lsls	r1, r3, #30
 801c29a:	bf04      	itt	eq
 801c29c:	089b      	lsreq	r3, r3, #2
 801c29e:	3002      	addeq	r0, #2
 801c2a0:	07d9      	lsls	r1, r3, #31
 801c2a2:	d403      	bmi.n	801c2ac <__lo0bits+0x4e>
 801c2a4:	085b      	lsrs	r3, r3, #1
 801c2a6:	f100 0001 	add.w	r0, r0, #1
 801c2aa:	d003      	beq.n	801c2b4 <__lo0bits+0x56>
 801c2ac:	6013      	str	r3, [r2, #0]
 801c2ae:	4770      	bx	lr
 801c2b0:	2000      	movs	r0, #0
 801c2b2:	4770      	bx	lr
 801c2b4:	2020      	movs	r0, #32
 801c2b6:	4770      	bx	lr

0801c2b8 <__i2b>:
 801c2b8:	b510      	push	{r4, lr}
 801c2ba:	460c      	mov	r4, r1
 801c2bc:	2101      	movs	r1, #1
 801c2be:	f7ff febd 	bl	801c03c <_Balloc>
 801c2c2:	4602      	mov	r2, r0
 801c2c4:	b928      	cbnz	r0, 801c2d2 <__i2b+0x1a>
 801c2c6:	4b05      	ldr	r3, [pc, #20]	@ (801c2dc <__i2b+0x24>)
 801c2c8:	4805      	ldr	r0, [pc, #20]	@ (801c2e0 <__i2b+0x28>)
 801c2ca:	f240 1145 	movw	r1, #325	@ 0x145
 801c2ce:	f000 fd9f 	bl	801ce10 <__assert_func>
 801c2d2:	2301      	movs	r3, #1
 801c2d4:	6144      	str	r4, [r0, #20]
 801c2d6:	6103      	str	r3, [r0, #16]
 801c2d8:	bd10      	pop	{r4, pc}
 801c2da:	bf00      	nop
 801c2dc:	0801f121 	.word	0x0801f121
 801c2e0:	0801f192 	.word	0x0801f192

0801c2e4 <__multiply>:
 801c2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2e8:	4614      	mov	r4, r2
 801c2ea:	690a      	ldr	r2, [r1, #16]
 801c2ec:	6923      	ldr	r3, [r4, #16]
 801c2ee:	429a      	cmp	r2, r3
 801c2f0:	bfa8      	it	ge
 801c2f2:	4623      	movge	r3, r4
 801c2f4:	460f      	mov	r7, r1
 801c2f6:	bfa4      	itt	ge
 801c2f8:	460c      	movge	r4, r1
 801c2fa:	461f      	movge	r7, r3
 801c2fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801c300:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801c304:	68a3      	ldr	r3, [r4, #8]
 801c306:	6861      	ldr	r1, [r4, #4]
 801c308:	eb0a 0609 	add.w	r6, sl, r9
 801c30c:	42b3      	cmp	r3, r6
 801c30e:	b085      	sub	sp, #20
 801c310:	bfb8      	it	lt
 801c312:	3101      	addlt	r1, #1
 801c314:	f7ff fe92 	bl	801c03c <_Balloc>
 801c318:	b930      	cbnz	r0, 801c328 <__multiply+0x44>
 801c31a:	4602      	mov	r2, r0
 801c31c:	4b44      	ldr	r3, [pc, #272]	@ (801c430 <__multiply+0x14c>)
 801c31e:	4845      	ldr	r0, [pc, #276]	@ (801c434 <__multiply+0x150>)
 801c320:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801c324:	f000 fd74 	bl	801ce10 <__assert_func>
 801c328:	f100 0514 	add.w	r5, r0, #20
 801c32c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c330:	462b      	mov	r3, r5
 801c332:	2200      	movs	r2, #0
 801c334:	4543      	cmp	r3, r8
 801c336:	d321      	bcc.n	801c37c <__multiply+0x98>
 801c338:	f107 0114 	add.w	r1, r7, #20
 801c33c:	f104 0214 	add.w	r2, r4, #20
 801c340:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801c344:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801c348:	9302      	str	r3, [sp, #8]
 801c34a:	1b13      	subs	r3, r2, r4
 801c34c:	3b15      	subs	r3, #21
 801c34e:	f023 0303 	bic.w	r3, r3, #3
 801c352:	3304      	adds	r3, #4
 801c354:	f104 0715 	add.w	r7, r4, #21
 801c358:	42ba      	cmp	r2, r7
 801c35a:	bf38      	it	cc
 801c35c:	2304      	movcc	r3, #4
 801c35e:	9301      	str	r3, [sp, #4]
 801c360:	9b02      	ldr	r3, [sp, #8]
 801c362:	9103      	str	r1, [sp, #12]
 801c364:	428b      	cmp	r3, r1
 801c366:	d80c      	bhi.n	801c382 <__multiply+0x9e>
 801c368:	2e00      	cmp	r6, #0
 801c36a:	dd03      	ble.n	801c374 <__multiply+0x90>
 801c36c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c370:	2b00      	cmp	r3, #0
 801c372:	d05b      	beq.n	801c42c <__multiply+0x148>
 801c374:	6106      	str	r6, [r0, #16]
 801c376:	b005      	add	sp, #20
 801c378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c37c:	f843 2b04 	str.w	r2, [r3], #4
 801c380:	e7d8      	b.n	801c334 <__multiply+0x50>
 801c382:	f8b1 a000 	ldrh.w	sl, [r1]
 801c386:	f1ba 0f00 	cmp.w	sl, #0
 801c38a:	d024      	beq.n	801c3d6 <__multiply+0xf2>
 801c38c:	f104 0e14 	add.w	lr, r4, #20
 801c390:	46a9      	mov	r9, r5
 801c392:	f04f 0c00 	mov.w	ip, #0
 801c396:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c39a:	f8d9 3000 	ldr.w	r3, [r9]
 801c39e:	fa1f fb87 	uxth.w	fp, r7
 801c3a2:	b29b      	uxth	r3, r3
 801c3a4:	fb0a 330b 	mla	r3, sl, fp, r3
 801c3a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801c3ac:	f8d9 7000 	ldr.w	r7, [r9]
 801c3b0:	4463      	add	r3, ip
 801c3b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c3b6:	fb0a c70b 	mla	r7, sl, fp, ip
 801c3ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801c3be:	b29b      	uxth	r3, r3
 801c3c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c3c4:	4572      	cmp	r2, lr
 801c3c6:	f849 3b04 	str.w	r3, [r9], #4
 801c3ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c3ce:	d8e2      	bhi.n	801c396 <__multiply+0xb2>
 801c3d0:	9b01      	ldr	r3, [sp, #4]
 801c3d2:	f845 c003 	str.w	ip, [r5, r3]
 801c3d6:	9b03      	ldr	r3, [sp, #12]
 801c3d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801c3dc:	3104      	adds	r1, #4
 801c3de:	f1b9 0f00 	cmp.w	r9, #0
 801c3e2:	d021      	beq.n	801c428 <__multiply+0x144>
 801c3e4:	682b      	ldr	r3, [r5, #0]
 801c3e6:	f104 0c14 	add.w	ip, r4, #20
 801c3ea:	46ae      	mov	lr, r5
 801c3ec:	f04f 0a00 	mov.w	sl, #0
 801c3f0:	f8bc b000 	ldrh.w	fp, [ip]
 801c3f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801c3f8:	fb09 770b 	mla	r7, r9, fp, r7
 801c3fc:	4457      	add	r7, sl
 801c3fe:	b29b      	uxth	r3, r3
 801c400:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c404:	f84e 3b04 	str.w	r3, [lr], #4
 801c408:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c40c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c410:	f8be 3000 	ldrh.w	r3, [lr]
 801c414:	fb09 330a 	mla	r3, r9, sl, r3
 801c418:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801c41c:	4562      	cmp	r2, ip
 801c41e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c422:	d8e5      	bhi.n	801c3f0 <__multiply+0x10c>
 801c424:	9f01      	ldr	r7, [sp, #4]
 801c426:	51eb      	str	r3, [r5, r7]
 801c428:	3504      	adds	r5, #4
 801c42a:	e799      	b.n	801c360 <__multiply+0x7c>
 801c42c:	3e01      	subs	r6, #1
 801c42e:	e79b      	b.n	801c368 <__multiply+0x84>
 801c430:	0801f121 	.word	0x0801f121
 801c434:	0801f192 	.word	0x0801f192

0801c438 <__pow5mult>:
 801c438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c43c:	4615      	mov	r5, r2
 801c43e:	f012 0203 	ands.w	r2, r2, #3
 801c442:	4607      	mov	r7, r0
 801c444:	460e      	mov	r6, r1
 801c446:	d007      	beq.n	801c458 <__pow5mult+0x20>
 801c448:	4c25      	ldr	r4, [pc, #148]	@ (801c4e0 <__pow5mult+0xa8>)
 801c44a:	3a01      	subs	r2, #1
 801c44c:	2300      	movs	r3, #0
 801c44e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c452:	f7ff fe55 	bl	801c100 <__multadd>
 801c456:	4606      	mov	r6, r0
 801c458:	10ad      	asrs	r5, r5, #2
 801c45a:	d03d      	beq.n	801c4d8 <__pow5mult+0xa0>
 801c45c:	69fc      	ldr	r4, [r7, #28]
 801c45e:	b97c      	cbnz	r4, 801c480 <__pow5mult+0x48>
 801c460:	2010      	movs	r0, #16
 801c462:	f7ff fd23 	bl	801beac <malloc>
 801c466:	4602      	mov	r2, r0
 801c468:	61f8      	str	r0, [r7, #28]
 801c46a:	b928      	cbnz	r0, 801c478 <__pow5mult+0x40>
 801c46c:	4b1d      	ldr	r3, [pc, #116]	@ (801c4e4 <__pow5mult+0xac>)
 801c46e:	481e      	ldr	r0, [pc, #120]	@ (801c4e8 <__pow5mult+0xb0>)
 801c470:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801c474:	f000 fccc 	bl	801ce10 <__assert_func>
 801c478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c47c:	6004      	str	r4, [r0, #0]
 801c47e:	60c4      	str	r4, [r0, #12]
 801c480:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801c484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c488:	b94c      	cbnz	r4, 801c49e <__pow5mult+0x66>
 801c48a:	f240 2171 	movw	r1, #625	@ 0x271
 801c48e:	4638      	mov	r0, r7
 801c490:	f7ff ff12 	bl	801c2b8 <__i2b>
 801c494:	2300      	movs	r3, #0
 801c496:	f8c8 0008 	str.w	r0, [r8, #8]
 801c49a:	4604      	mov	r4, r0
 801c49c:	6003      	str	r3, [r0, #0]
 801c49e:	f04f 0900 	mov.w	r9, #0
 801c4a2:	07eb      	lsls	r3, r5, #31
 801c4a4:	d50a      	bpl.n	801c4bc <__pow5mult+0x84>
 801c4a6:	4631      	mov	r1, r6
 801c4a8:	4622      	mov	r2, r4
 801c4aa:	4638      	mov	r0, r7
 801c4ac:	f7ff ff1a 	bl	801c2e4 <__multiply>
 801c4b0:	4631      	mov	r1, r6
 801c4b2:	4680      	mov	r8, r0
 801c4b4:	4638      	mov	r0, r7
 801c4b6:	f7ff fe01 	bl	801c0bc <_Bfree>
 801c4ba:	4646      	mov	r6, r8
 801c4bc:	106d      	asrs	r5, r5, #1
 801c4be:	d00b      	beq.n	801c4d8 <__pow5mult+0xa0>
 801c4c0:	6820      	ldr	r0, [r4, #0]
 801c4c2:	b938      	cbnz	r0, 801c4d4 <__pow5mult+0x9c>
 801c4c4:	4622      	mov	r2, r4
 801c4c6:	4621      	mov	r1, r4
 801c4c8:	4638      	mov	r0, r7
 801c4ca:	f7ff ff0b 	bl	801c2e4 <__multiply>
 801c4ce:	6020      	str	r0, [r4, #0]
 801c4d0:	f8c0 9000 	str.w	r9, [r0]
 801c4d4:	4604      	mov	r4, r0
 801c4d6:	e7e4      	b.n	801c4a2 <__pow5mult+0x6a>
 801c4d8:	4630      	mov	r0, r6
 801c4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c4de:	bf00      	nop
 801c4e0:	0801f1ec 	.word	0x0801f1ec
 801c4e4:	0801f0b2 	.word	0x0801f0b2
 801c4e8:	0801f192 	.word	0x0801f192

0801c4ec <__lshift>:
 801c4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c4f0:	460c      	mov	r4, r1
 801c4f2:	6849      	ldr	r1, [r1, #4]
 801c4f4:	6923      	ldr	r3, [r4, #16]
 801c4f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c4fa:	68a3      	ldr	r3, [r4, #8]
 801c4fc:	4607      	mov	r7, r0
 801c4fe:	4691      	mov	r9, r2
 801c500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c504:	f108 0601 	add.w	r6, r8, #1
 801c508:	42b3      	cmp	r3, r6
 801c50a:	db0b      	blt.n	801c524 <__lshift+0x38>
 801c50c:	4638      	mov	r0, r7
 801c50e:	f7ff fd95 	bl	801c03c <_Balloc>
 801c512:	4605      	mov	r5, r0
 801c514:	b948      	cbnz	r0, 801c52a <__lshift+0x3e>
 801c516:	4602      	mov	r2, r0
 801c518:	4b28      	ldr	r3, [pc, #160]	@ (801c5bc <__lshift+0xd0>)
 801c51a:	4829      	ldr	r0, [pc, #164]	@ (801c5c0 <__lshift+0xd4>)
 801c51c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801c520:	f000 fc76 	bl	801ce10 <__assert_func>
 801c524:	3101      	adds	r1, #1
 801c526:	005b      	lsls	r3, r3, #1
 801c528:	e7ee      	b.n	801c508 <__lshift+0x1c>
 801c52a:	2300      	movs	r3, #0
 801c52c:	f100 0114 	add.w	r1, r0, #20
 801c530:	f100 0210 	add.w	r2, r0, #16
 801c534:	4618      	mov	r0, r3
 801c536:	4553      	cmp	r3, sl
 801c538:	db33      	blt.n	801c5a2 <__lshift+0xb6>
 801c53a:	6920      	ldr	r0, [r4, #16]
 801c53c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c540:	f104 0314 	add.w	r3, r4, #20
 801c544:	f019 091f 	ands.w	r9, r9, #31
 801c548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c54c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c550:	d02b      	beq.n	801c5aa <__lshift+0xbe>
 801c552:	f1c9 0e20 	rsb	lr, r9, #32
 801c556:	468a      	mov	sl, r1
 801c558:	2200      	movs	r2, #0
 801c55a:	6818      	ldr	r0, [r3, #0]
 801c55c:	fa00 f009 	lsl.w	r0, r0, r9
 801c560:	4310      	orrs	r0, r2
 801c562:	f84a 0b04 	str.w	r0, [sl], #4
 801c566:	f853 2b04 	ldr.w	r2, [r3], #4
 801c56a:	459c      	cmp	ip, r3
 801c56c:	fa22 f20e 	lsr.w	r2, r2, lr
 801c570:	d8f3      	bhi.n	801c55a <__lshift+0x6e>
 801c572:	ebac 0304 	sub.w	r3, ip, r4
 801c576:	3b15      	subs	r3, #21
 801c578:	f023 0303 	bic.w	r3, r3, #3
 801c57c:	3304      	adds	r3, #4
 801c57e:	f104 0015 	add.w	r0, r4, #21
 801c582:	4584      	cmp	ip, r0
 801c584:	bf38      	it	cc
 801c586:	2304      	movcc	r3, #4
 801c588:	50ca      	str	r2, [r1, r3]
 801c58a:	b10a      	cbz	r2, 801c590 <__lshift+0xa4>
 801c58c:	f108 0602 	add.w	r6, r8, #2
 801c590:	3e01      	subs	r6, #1
 801c592:	4638      	mov	r0, r7
 801c594:	612e      	str	r6, [r5, #16]
 801c596:	4621      	mov	r1, r4
 801c598:	f7ff fd90 	bl	801c0bc <_Bfree>
 801c59c:	4628      	mov	r0, r5
 801c59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c5a2:	f842 0f04 	str.w	r0, [r2, #4]!
 801c5a6:	3301      	adds	r3, #1
 801c5a8:	e7c5      	b.n	801c536 <__lshift+0x4a>
 801c5aa:	3904      	subs	r1, #4
 801c5ac:	f853 2b04 	ldr.w	r2, [r3], #4
 801c5b0:	f841 2f04 	str.w	r2, [r1, #4]!
 801c5b4:	459c      	cmp	ip, r3
 801c5b6:	d8f9      	bhi.n	801c5ac <__lshift+0xc0>
 801c5b8:	e7ea      	b.n	801c590 <__lshift+0xa4>
 801c5ba:	bf00      	nop
 801c5bc:	0801f121 	.word	0x0801f121
 801c5c0:	0801f192 	.word	0x0801f192

0801c5c4 <__mcmp>:
 801c5c4:	690a      	ldr	r2, [r1, #16]
 801c5c6:	4603      	mov	r3, r0
 801c5c8:	6900      	ldr	r0, [r0, #16]
 801c5ca:	1a80      	subs	r0, r0, r2
 801c5cc:	b530      	push	{r4, r5, lr}
 801c5ce:	d10e      	bne.n	801c5ee <__mcmp+0x2a>
 801c5d0:	3314      	adds	r3, #20
 801c5d2:	3114      	adds	r1, #20
 801c5d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801c5d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801c5dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c5e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c5e4:	4295      	cmp	r5, r2
 801c5e6:	d003      	beq.n	801c5f0 <__mcmp+0x2c>
 801c5e8:	d205      	bcs.n	801c5f6 <__mcmp+0x32>
 801c5ea:	f04f 30ff 	mov.w	r0, #4294967295
 801c5ee:	bd30      	pop	{r4, r5, pc}
 801c5f0:	42a3      	cmp	r3, r4
 801c5f2:	d3f3      	bcc.n	801c5dc <__mcmp+0x18>
 801c5f4:	e7fb      	b.n	801c5ee <__mcmp+0x2a>
 801c5f6:	2001      	movs	r0, #1
 801c5f8:	e7f9      	b.n	801c5ee <__mcmp+0x2a>
	...

0801c5fc <__mdiff>:
 801c5fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c600:	4689      	mov	r9, r1
 801c602:	4606      	mov	r6, r0
 801c604:	4611      	mov	r1, r2
 801c606:	4648      	mov	r0, r9
 801c608:	4614      	mov	r4, r2
 801c60a:	f7ff ffdb 	bl	801c5c4 <__mcmp>
 801c60e:	1e05      	subs	r5, r0, #0
 801c610:	d112      	bne.n	801c638 <__mdiff+0x3c>
 801c612:	4629      	mov	r1, r5
 801c614:	4630      	mov	r0, r6
 801c616:	f7ff fd11 	bl	801c03c <_Balloc>
 801c61a:	4602      	mov	r2, r0
 801c61c:	b928      	cbnz	r0, 801c62a <__mdiff+0x2e>
 801c61e:	4b3f      	ldr	r3, [pc, #252]	@ (801c71c <__mdiff+0x120>)
 801c620:	f240 2137 	movw	r1, #567	@ 0x237
 801c624:	483e      	ldr	r0, [pc, #248]	@ (801c720 <__mdiff+0x124>)
 801c626:	f000 fbf3 	bl	801ce10 <__assert_func>
 801c62a:	2301      	movs	r3, #1
 801c62c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c630:	4610      	mov	r0, r2
 801c632:	b003      	add	sp, #12
 801c634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c638:	bfbc      	itt	lt
 801c63a:	464b      	movlt	r3, r9
 801c63c:	46a1      	movlt	r9, r4
 801c63e:	4630      	mov	r0, r6
 801c640:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c644:	bfba      	itte	lt
 801c646:	461c      	movlt	r4, r3
 801c648:	2501      	movlt	r5, #1
 801c64a:	2500      	movge	r5, #0
 801c64c:	f7ff fcf6 	bl	801c03c <_Balloc>
 801c650:	4602      	mov	r2, r0
 801c652:	b918      	cbnz	r0, 801c65c <__mdiff+0x60>
 801c654:	4b31      	ldr	r3, [pc, #196]	@ (801c71c <__mdiff+0x120>)
 801c656:	f240 2145 	movw	r1, #581	@ 0x245
 801c65a:	e7e3      	b.n	801c624 <__mdiff+0x28>
 801c65c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801c660:	6926      	ldr	r6, [r4, #16]
 801c662:	60c5      	str	r5, [r0, #12]
 801c664:	f109 0310 	add.w	r3, r9, #16
 801c668:	f109 0514 	add.w	r5, r9, #20
 801c66c:	f104 0e14 	add.w	lr, r4, #20
 801c670:	f100 0b14 	add.w	fp, r0, #20
 801c674:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801c678:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801c67c:	9301      	str	r3, [sp, #4]
 801c67e:	46d9      	mov	r9, fp
 801c680:	f04f 0c00 	mov.w	ip, #0
 801c684:	9b01      	ldr	r3, [sp, #4]
 801c686:	f85e 0b04 	ldr.w	r0, [lr], #4
 801c68a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801c68e:	9301      	str	r3, [sp, #4]
 801c690:	fa1f f38a 	uxth.w	r3, sl
 801c694:	4619      	mov	r1, r3
 801c696:	b283      	uxth	r3, r0
 801c698:	1acb      	subs	r3, r1, r3
 801c69a:	0c00      	lsrs	r0, r0, #16
 801c69c:	4463      	add	r3, ip
 801c69e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c6a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c6a6:	b29b      	uxth	r3, r3
 801c6a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c6ac:	4576      	cmp	r6, lr
 801c6ae:	f849 3b04 	str.w	r3, [r9], #4
 801c6b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c6b6:	d8e5      	bhi.n	801c684 <__mdiff+0x88>
 801c6b8:	1b33      	subs	r3, r6, r4
 801c6ba:	3b15      	subs	r3, #21
 801c6bc:	f023 0303 	bic.w	r3, r3, #3
 801c6c0:	3415      	adds	r4, #21
 801c6c2:	3304      	adds	r3, #4
 801c6c4:	42a6      	cmp	r6, r4
 801c6c6:	bf38      	it	cc
 801c6c8:	2304      	movcc	r3, #4
 801c6ca:	441d      	add	r5, r3
 801c6cc:	445b      	add	r3, fp
 801c6ce:	461e      	mov	r6, r3
 801c6d0:	462c      	mov	r4, r5
 801c6d2:	4544      	cmp	r4, r8
 801c6d4:	d30e      	bcc.n	801c6f4 <__mdiff+0xf8>
 801c6d6:	f108 0103 	add.w	r1, r8, #3
 801c6da:	1b49      	subs	r1, r1, r5
 801c6dc:	f021 0103 	bic.w	r1, r1, #3
 801c6e0:	3d03      	subs	r5, #3
 801c6e2:	45a8      	cmp	r8, r5
 801c6e4:	bf38      	it	cc
 801c6e6:	2100      	movcc	r1, #0
 801c6e8:	440b      	add	r3, r1
 801c6ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c6ee:	b191      	cbz	r1, 801c716 <__mdiff+0x11a>
 801c6f0:	6117      	str	r7, [r2, #16]
 801c6f2:	e79d      	b.n	801c630 <__mdiff+0x34>
 801c6f4:	f854 1b04 	ldr.w	r1, [r4], #4
 801c6f8:	46e6      	mov	lr, ip
 801c6fa:	0c08      	lsrs	r0, r1, #16
 801c6fc:	fa1c fc81 	uxtah	ip, ip, r1
 801c700:	4471      	add	r1, lr
 801c702:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801c706:	b289      	uxth	r1, r1
 801c708:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c70c:	f846 1b04 	str.w	r1, [r6], #4
 801c710:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c714:	e7dd      	b.n	801c6d2 <__mdiff+0xd6>
 801c716:	3f01      	subs	r7, #1
 801c718:	e7e7      	b.n	801c6ea <__mdiff+0xee>
 801c71a:	bf00      	nop
 801c71c:	0801f121 	.word	0x0801f121
 801c720:	0801f192 	.word	0x0801f192

0801c724 <__ulp>:
 801c724:	b082      	sub	sp, #8
 801c726:	ed8d 0b00 	vstr	d0, [sp]
 801c72a:	9a01      	ldr	r2, [sp, #4]
 801c72c:	4b0f      	ldr	r3, [pc, #60]	@ (801c76c <__ulp+0x48>)
 801c72e:	4013      	ands	r3, r2
 801c730:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801c734:	2b00      	cmp	r3, #0
 801c736:	dc08      	bgt.n	801c74a <__ulp+0x26>
 801c738:	425b      	negs	r3, r3
 801c73a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801c73e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c742:	da04      	bge.n	801c74e <__ulp+0x2a>
 801c744:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801c748:	4113      	asrs	r3, r2
 801c74a:	2200      	movs	r2, #0
 801c74c:	e008      	b.n	801c760 <__ulp+0x3c>
 801c74e:	f1a2 0314 	sub.w	r3, r2, #20
 801c752:	2b1e      	cmp	r3, #30
 801c754:	bfda      	itte	le
 801c756:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801c75a:	40da      	lsrle	r2, r3
 801c75c:	2201      	movgt	r2, #1
 801c75e:	2300      	movs	r3, #0
 801c760:	4619      	mov	r1, r3
 801c762:	4610      	mov	r0, r2
 801c764:	ec41 0b10 	vmov	d0, r0, r1
 801c768:	b002      	add	sp, #8
 801c76a:	4770      	bx	lr
 801c76c:	7ff00000 	.word	0x7ff00000

0801c770 <__b2d>:
 801c770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c774:	6906      	ldr	r6, [r0, #16]
 801c776:	f100 0814 	add.w	r8, r0, #20
 801c77a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801c77e:	1f37      	subs	r7, r6, #4
 801c780:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c784:	4610      	mov	r0, r2
 801c786:	f7ff fd4b 	bl	801c220 <__hi0bits>
 801c78a:	f1c0 0320 	rsb	r3, r0, #32
 801c78e:	280a      	cmp	r0, #10
 801c790:	600b      	str	r3, [r1, #0]
 801c792:	491b      	ldr	r1, [pc, #108]	@ (801c800 <__b2d+0x90>)
 801c794:	dc15      	bgt.n	801c7c2 <__b2d+0x52>
 801c796:	f1c0 0c0b 	rsb	ip, r0, #11
 801c79a:	fa22 f30c 	lsr.w	r3, r2, ip
 801c79e:	45b8      	cmp	r8, r7
 801c7a0:	ea43 0501 	orr.w	r5, r3, r1
 801c7a4:	bf34      	ite	cc
 801c7a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c7aa:	2300      	movcs	r3, #0
 801c7ac:	3015      	adds	r0, #21
 801c7ae:	fa02 f000 	lsl.w	r0, r2, r0
 801c7b2:	fa23 f30c 	lsr.w	r3, r3, ip
 801c7b6:	4303      	orrs	r3, r0
 801c7b8:	461c      	mov	r4, r3
 801c7ba:	ec45 4b10 	vmov	d0, r4, r5
 801c7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7c2:	45b8      	cmp	r8, r7
 801c7c4:	bf3a      	itte	cc
 801c7c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c7ca:	f1a6 0708 	subcc.w	r7, r6, #8
 801c7ce:	2300      	movcs	r3, #0
 801c7d0:	380b      	subs	r0, #11
 801c7d2:	d012      	beq.n	801c7fa <__b2d+0x8a>
 801c7d4:	f1c0 0120 	rsb	r1, r0, #32
 801c7d8:	fa23 f401 	lsr.w	r4, r3, r1
 801c7dc:	4082      	lsls	r2, r0
 801c7de:	4322      	orrs	r2, r4
 801c7e0:	4547      	cmp	r7, r8
 801c7e2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801c7e6:	bf8c      	ite	hi
 801c7e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801c7ec:	2200      	movls	r2, #0
 801c7ee:	4083      	lsls	r3, r0
 801c7f0:	40ca      	lsrs	r2, r1
 801c7f2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801c7f6:	4313      	orrs	r3, r2
 801c7f8:	e7de      	b.n	801c7b8 <__b2d+0x48>
 801c7fa:	ea42 0501 	orr.w	r5, r2, r1
 801c7fe:	e7db      	b.n	801c7b8 <__b2d+0x48>
 801c800:	3ff00000 	.word	0x3ff00000

0801c804 <__d2b>:
 801c804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c808:	460f      	mov	r7, r1
 801c80a:	2101      	movs	r1, #1
 801c80c:	ec59 8b10 	vmov	r8, r9, d0
 801c810:	4616      	mov	r6, r2
 801c812:	f7ff fc13 	bl	801c03c <_Balloc>
 801c816:	4604      	mov	r4, r0
 801c818:	b930      	cbnz	r0, 801c828 <__d2b+0x24>
 801c81a:	4602      	mov	r2, r0
 801c81c:	4b23      	ldr	r3, [pc, #140]	@ (801c8ac <__d2b+0xa8>)
 801c81e:	4824      	ldr	r0, [pc, #144]	@ (801c8b0 <__d2b+0xac>)
 801c820:	f240 310f 	movw	r1, #783	@ 0x30f
 801c824:	f000 faf4 	bl	801ce10 <__assert_func>
 801c828:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c82c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c830:	b10d      	cbz	r5, 801c836 <__d2b+0x32>
 801c832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c836:	9301      	str	r3, [sp, #4]
 801c838:	f1b8 0300 	subs.w	r3, r8, #0
 801c83c:	d023      	beq.n	801c886 <__d2b+0x82>
 801c83e:	4668      	mov	r0, sp
 801c840:	9300      	str	r3, [sp, #0]
 801c842:	f7ff fd0c 	bl	801c25e <__lo0bits>
 801c846:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c84a:	b1d0      	cbz	r0, 801c882 <__d2b+0x7e>
 801c84c:	f1c0 0320 	rsb	r3, r0, #32
 801c850:	fa02 f303 	lsl.w	r3, r2, r3
 801c854:	430b      	orrs	r3, r1
 801c856:	40c2      	lsrs	r2, r0
 801c858:	6163      	str	r3, [r4, #20]
 801c85a:	9201      	str	r2, [sp, #4]
 801c85c:	9b01      	ldr	r3, [sp, #4]
 801c85e:	61a3      	str	r3, [r4, #24]
 801c860:	2b00      	cmp	r3, #0
 801c862:	bf0c      	ite	eq
 801c864:	2201      	moveq	r2, #1
 801c866:	2202      	movne	r2, #2
 801c868:	6122      	str	r2, [r4, #16]
 801c86a:	b1a5      	cbz	r5, 801c896 <__d2b+0x92>
 801c86c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801c870:	4405      	add	r5, r0
 801c872:	603d      	str	r5, [r7, #0]
 801c874:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801c878:	6030      	str	r0, [r6, #0]
 801c87a:	4620      	mov	r0, r4
 801c87c:	b003      	add	sp, #12
 801c87e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c882:	6161      	str	r1, [r4, #20]
 801c884:	e7ea      	b.n	801c85c <__d2b+0x58>
 801c886:	a801      	add	r0, sp, #4
 801c888:	f7ff fce9 	bl	801c25e <__lo0bits>
 801c88c:	9b01      	ldr	r3, [sp, #4]
 801c88e:	6163      	str	r3, [r4, #20]
 801c890:	3020      	adds	r0, #32
 801c892:	2201      	movs	r2, #1
 801c894:	e7e8      	b.n	801c868 <__d2b+0x64>
 801c896:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c89a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801c89e:	6038      	str	r0, [r7, #0]
 801c8a0:	6918      	ldr	r0, [r3, #16]
 801c8a2:	f7ff fcbd 	bl	801c220 <__hi0bits>
 801c8a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c8aa:	e7e5      	b.n	801c878 <__d2b+0x74>
 801c8ac:	0801f121 	.word	0x0801f121
 801c8b0:	0801f192 	.word	0x0801f192

0801c8b4 <__ratio>:
 801c8b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8b8:	4688      	mov	r8, r1
 801c8ba:	4669      	mov	r1, sp
 801c8bc:	4681      	mov	r9, r0
 801c8be:	f7ff ff57 	bl	801c770 <__b2d>
 801c8c2:	a901      	add	r1, sp, #4
 801c8c4:	4640      	mov	r0, r8
 801c8c6:	ec55 4b10 	vmov	r4, r5, d0
 801c8ca:	f7ff ff51 	bl	801c770 <__b2d>
 801c8ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801c8d2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801c8d6:	1ad2      	subs	r2, r2, r3
 801c8d8:	e9dd 3100 	ldrd	r3, r1, [sp]
 801c8dc:	1a5b      	subs	r3, r3, r1
 801c8de:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801c8e2:	ec57 6b10 	vmov	r6, r7, d0
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	bfd6      	itet	le
 801c8ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c8ee:	462a      	movgt	r2, r5
 801c8f0:	463a      	movle	r2, r7
 801c8f2:	46ab      	mov	fp, r5
 801c8f4:	46a2      	mov	sl, r4
 801c8f6:	bfce      	itee	gt
 801c8f8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801c8fc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801c900:	ee00 3a90 	vmovle	s1, r3
 801c904:	ec4b ab17 	vmov	d7, sl, fp
 801c908:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801c90c:	b003      	add	sp, #12
 801c90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c912 <__copybits>:
 801c912:	3901      	subs	r1, #1
 801c914:	b570      	push	{r4, r5, r6, lr}
 801c916:	1149      	asrs	r1, r1, #5
 801c918:	6914      	ldr	r4, [r2, #16]
 801c91a:	3101      	adds	r1, #1
 801c91c:	f102 0314 	add.w	r3, r2, #20
 801c920:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c924:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c928:	1f05      	subs	r5, r0, #4
 801c92a:	42a3      	cmp	r3, r4
 801c92c:	d30c      	bcc.n	801c948 <__copybits+0x36>
 801c92e:	1aa3      	subs	r3, r4, r2
 801c930:	3b11      	subs	r3, #17
 801c932:	f023 0303 	bic.w	r3, r3, #3
 801c936:	3211      	adds	r2, #17
 801c938:	42a2      	cmp	r2, r4
 801c93a:	bf88      	it	hi
 801c93c:	2300      	movhi	r3, #0
 801c93e:	4418      	add	r0, r3
 801c940:	2300      	movs	r3, #0
 801c942:	4288      	cmp	r0, r1
 801c944:	d305      	bcc.n	801c952 <__copybits+0x40>
 801c946:	bd70      	pop	{r4, r5, r6, pc}
 801c948:	f853 6b04 	ldr.w	r6, [r3], #4
 801c94c:	f845 6f04 	str.w	r6, [r5, #4]!
 801c950:	e7eb      	b.n	801c92a <__copybits+0x18>
 801c952:	f840 3b04 	str.w	r3, [r0], #4
 801c956:	e7f4      	b.n	801c942 <__copybits+0x30>

0801c958 <__any_on>:
 801c958:	f100 0214 	add.w	r2, r0, #20
 801c95c:	6900      	ldr	r0, [r0, #16]
 801c95e:	114b      	asrs	r3, r1, #5
 801c960:	4298      	cmp	r0, r3
 801c962:	b510      	push	{r4, lr}
 801c964:	db11      	blt.n	801c98a <__any_on+0x32>
 801c966:	dd0a      	ble.n	801c97e <__any_on+0x26>
 801c968:	f011 011f 	ands.w	r1, r1, #31
 801c96c:	d007      	beq.n	801c97e <__any_on+0x26>
 801c96e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c972:	fa24 f001 	lsr.w	r0, r4, r1
 801c976:	fa00 f101 	lsl.w	r1, r0, r1
 801c97a:	428c      	cmp	r4, r1
 801c97c:	d10b      	bne.n	801c996 <__any_on+0x3e>
 801c97e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c982:	4293      	cmp	r3, r2
 801c984:	d803      	bhi.n	801c98e <__any_on+0x36>
 801c986:	2000      	movs	r0, #0
 801c988:	bd10      	pop	{r4, pc}
 801c98a:	4603      	mov	r3, r0
 801c98c:	e7f7      	b.n	801c97e <__any_on+0x26>
 801c98e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c992:	2900      	cmp	r1, #0
 801c994:	d0f5      	beq.n	801c982 <__any_on+0x2a>
 801c996:	2001      	movs	r0, #1
 801c998:	e7f6      	b.n	801c988 <__any_on+0x30>

0801c99a <__ascii_wctomb>:
 801c99a:	4603      	mov	r3, r0
 801c99c:	4608      	mov	r0, r1
 801c99e:	b141      	cbz	r1, 801c9b2 <__ascii_wctomb+0x18>
 801c9a0:	2aff      	cmp	r2, #255	@ 0xff
 801c9a2:	d904      	bls.n	801c9ae <__ascii_wctomb+0x14>
 801c9a4:	228a      	movs	r2, #138	@ 0x8a
 801c9a6:	601a      	str	r2, [r3, #0]
 801c9a8:	f04f 30ff 	mov.w	r0, #4294967295
 801c9ac:	4770      	bx	lr
 801c9ae:	700a      	strb	r2, [r1, #0]
 801c9b0:	2001      	movs	r0, #1
 801c9b2:	4770      	bx	lr

0801c9b4 <__ssputs_r>:
 801c9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c9b8:	688e      	ldr	r6, [r1, #8]
 801c9ba:	461f      	mov	r7, r3
 801c9bc:	42be      	cmp	r6, r7
 801c9be:	680b      	ldr	r3, [r1, #0]
 801c9c0:	4682      	mov	sl, r0
 801c9c2:	460c      	mov	r4, r1
 801c9c4:	4690      	mov	r8, r2
 801c9c6:	d82d      	bhi.n	801ca24 <__ssputs_r+0x70>
 801c9c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c9cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c9d0:	d026      	beq.n	801ca20 <__ssputs_r+0x6c>
 801c9d2:	6965      	ldr	r5, [r4, #20]
 801c9d4:	6909      	ldr	r1, [r1, #16]
 801c9d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c9da:	eba3 0901 	sub.w	r9, r3, r1
 801c9de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c9e2:	1c7b      	adds	r3, r7, #1
 801c9e4:	444b      	add	r3, r9
 801c9e6:	106d      	asrs	r5, r5, #1
 801c9e8:	429d      	cmp	r5, r3
 801c9ea:	bf38      	it	cc
 801c9ec:	461d      	movcc	r5, r3
 801c9ee:	0553      	lsls	r3, r2, #21
 801c9f0:	d527      	bpl.n	801ca42 <__ssputs_r+0x8e>
 801c9f2:	4629      	mov	r1, r5
 801c9f4:	f7ff fa84 	bl	801bf00 <_malloc_r>
 801c9f8:	4606      	mov	r6, r0
 801c9fa:	b360      	cbz	r0, 801ca56 <__ssputs_r+0xa2>
 801c9fc:	6921      	ldr	r1, [r4, #16]
 801c9fe:	464a      	mov	r2, r9
 801ca00:	f7fe f8d9 	bl	801abb6 <memcpy>
 801ca04:	89a3      	ldrh	r3, [r4, #12]
 801ca06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ca0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ca0e:	81a3      	strh	r3, [r4, #12]
 801ca10:	6126      	str	r6, [r4, #16]
 801ca12:	6165      	str	r5, [r4, #20]
 801ca14:	444e      	add	r6, r9
 801ca16:	eba5 0509 	sub.w	r5, r5, r9
 801ca1a:	6026      	str	r6, [r4, #0]
 801ca1c:	60a5      	str	r5, [r4, #8]
 801ca1e:	463e      	mov	r6, r7
 801ca20:	42be      	cmp	r6, r7
 801ca22:	d900      	bls.n	801ca26 <__ssputs_r+0x72>
 801ca24:	463e      	mov	r6, r7
 801ca26:	6820      	ldr	r0, [r4, #0]
 801ca28:	4632      	mov	r2, r6
 801ca2a:	4641      	mov	r1, r8
 801ca2c:	f000 f9c6 	bl	801cdbc <memmove>
 801ca30:	68a3      	ldr	r3, [r4, #8]
 801ca32:	1b9b      	subs	r3, r3, r6
 801ca34:	60a3      	str	r3, [r4, #8]
 801ca36:	6823      	ldr	r3, [r4, #0]
 801ca38:	4433      	add	r3, r6
 801ca3a:	6023      	str	r3, [r4, #0]
 801ca3c:	2000      	movs	r0, #0
 801ca3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca42:	462a      	mov	r2, r5
 801ca44:	f000 fa16 	bl	801ce74 <_realloc_r>
 801ca48:	4606      	mov	r6, r0
 801ca4a:	2800      	cmp	r0, #0
 801ca4c:	d1e0      	bne.n	801ca10 <__ssputs_r+0x5c>
 801ca4e:	6921      	ldr	r1, [r4, #16]
 801ca50:	4650      	mov	r0, sl
 801ca52:	f7fe fea7 	bl	801b7a4 <_free_r>
 801ca56:	230c      	movs	r3, #12
 801ca58:	f8ca 3000 	str.w	r3, [sl]
 801ca5c:	89a3      	ldrh	r3, [r4, #12]
 801ca5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ca62:	81a3      	strh	r3, [r4, #12]
 801ca64:	f04f 30ff 	mov.w	r0, #4294967295
 801ca68:	e7e9      	b.n	801ca3e <__ssputs_r+0x8a>
	...

0801ca6c <_svfiprintf_r>:
 801ca6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca70:	4698      	mov	r8, r3
 801ca72:	898b      	ldrh	r3, [r1, #12]
 801ca74:	061b      	lsls	r3, r3, #24
 801ca76:	b09d      	sub	sp, #116	@ 0x74
 801ca78:	4607      	mov	r7, r0
 801ca7a:	460d      	mov	r5, r1
 801ca7c:	4614      	mov	r4, r2
 801ca7e:	d510      	bpl.n	801caa2 <_svfiprintf_r+0x36>
 801ca80:	690b      	ldr	r3, [r1, #16]
 801ca82:	b973      	cbnz	r3, 801caa2 <_svfiprintf_r+0x36>
 801ca84:	2140      	movs	r1, #64	@ 0x40
 801ca86:	f7ff fa3b 	bl	801bf00 <_malloc_r>
 801ca8a:	6028      	str	r0, [r5, #0]
 801ca8c:	6128      	str	r0, [r5, #16]
 801ca8e:	b930      	cbnz	r0, 801ca9e <_svfiprintf_r+0x32>
 801ca90:	230c      	movs	r3, #12
 801ca92:	603b      	str	r3, [r7, #0]
 801ca94:	f04f 30ff 	mov.w	r0, #4294967295
 801ca98:	b01d      	add	sp, #116	@ 0x74
 801ca9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca9e:	2340      	movs	r3, #64	@ 0x40
 801caa0:	616b      	str	r3, [r5, #20]
 801caa2:	2300      	movs	r3, #0
 801caa4:	9309      	str	r3, [sp, #36]	@ 0x24
 801caa6:	2320      	movs	r3, #32
 801caa8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801caac:	f8cd 800c 	str.w	r8, [sp, #12]
 801cab0:	2330      	movs	r3, #48	@ 0x30
 801cab2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801cc50 <_svfiprintf_r+0x1e4>
 801cab6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801caba:	f04f 0901 	mov.w	r9, #1
 801cabe:	4623      	mov	r3, r4
 801cac0:	469a      	mov	sl, r3
 801cac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cac6:	b10a      	cbz	r2, 801cacc <_svfiprintf_r+0x60>
 801cac8:	2a25      	cmp	r2, #37	@ 0x25
 801caca:	d1f9      	bne.n	801cac0 <_svfiprintf_r+0x54>
 801cacc:	ebba 0b04 	subs.w	fp, sl, r4
 801cad0:	d00b      	beq.n	801caea <_svfiprintf_r+0x7e>
 801cad2:	465b      	mov	r3, fp
 801cad4:	4622      	mov	r2, r4
 801cad6:	4629      	mov	r1, r5
 801cad8:	4638      	mov	r0, r7
 801cada:	f7ff ff6b 	bl	801c9b4 <__ssputs_r>
 801cade:	3001      	adds	r0, #1
 801cae0:	f000 80a7 	beq.w	801cc32 <_svfiprintf_r+0x1c6>
 801cae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cae6:	445a      	add	r2, fp
 801cae8:	9209      	str	r2, [sp, #36]	@ 0x24
 801caea:	f89a 3000 	ldrb.w	r3, [sl]
 801caee:	2b00      	cmp	r3, #0
 801caf0:	f000 809f 	beq.w	801cc32 <_svfiprintf_r+0x1c6>
 801caf4:	2300      	movs	r3, #0
 801caf6:	f04f 32ff 	mov.w	r2, #4294967295
 801cafa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cafe:	f10a 0a01 	add.w	sl, sl, #1
 801cb02:	9304      	str	r3, [sp, #16]
 801cb04:	9307      	str	r3, [sp, #28]
 801cb06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cb0a:	931a      	str	r3, [sp, #104]	@ 0x68
 801cb0c:	4654      	mov	r4, sl
 801cb0e:	2205      	movs	r2, #5
 801cb10:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb14:	484e      	ldr	r0, [pc, #312]	@ (801cc50 <_svfiprintf_r+0x1e4>)
 801cb16:	f7e3 fc0b 	bl	8000330 <memchr>
 801cb1a:	9a04      	ldr	r2, [sp, #16]
 801cb1c:	b9d8      	cbnz	r0, 801cb56 <_svfiprintf_r+0xea>
 801cb1e:	06d0      	lsls	r0, r2, #27
 801cb20:	bf44      	itt	mi
 801cb22:	2320      	movmi	r3, #32
 801cb24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cb28:	0711      	lsls	r1, r2, #28
 801cb2a:	bf44      	itt	mi
 801cb2c:	232b      	movmi	r3, #43	@ 0x2b
 801cb2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cb32:	f89a 3000 	ldrb.w	r3, [sl]
 801cb36:	2b2a      	cmp	r3, #42	@ 0x2a
 801cb38:	d015      	beq.n	801cb66 <_svfiprintf_r+0xfa>
 801cb3a:	9a07      	ldr	r2, [sp, #28]
 801cb3c:	4654      	mov	r4, sl
 801cb3e:	2000      	movs	r0, #0
 801cb40:	f04f 0c0a 	mov.w	ip, #10
 801cb44:	4621      	mov	r1, r4
 801cb46:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cb4a:	3b30      	subs	r3, #48	@ 0x30
 801cb4c:	2b09      	cmp	r3, #9
 801cb4e:	d94b      	bls.n	801cbe8 <_svfiprintf_r+0x17c>
 801cb50:	b1b0      	cbz	r0, 801cb80 <_svfiprintf_r+0x114>
 801cb52:	9207      	str	r2, [sp, #28]
 801cb54:	e014      	b.n	801cb80 <_svfiprintf_r+0x114>
 801cb56:	eba0 0308 	sub.w	r3, r0, r8
 801cb5a:	fa09 f303 	lsl.w	r3, r9, r3
 801cb5e:	4313      	orrs	r3, r2
 801cb60:	9304      	str	r3, [sp, #16]
 801cb62:	46a2      	mov	sl, r4
 801cb64:	e7d2      	b.n	801cb0c <_svfiprintf_r+0xa0>
 801cb66:	9b03      	ldr	r3, [sp, #12]
 801cb68:	1d19      	adds	r1, r3, #4
 801cb6a:	681b      	ldr	r3, [r3, #0]
 801cb6c:	9103      	str	r1, [sp, #12]
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	bfbb      	ittet	lt
 801cb72:	425b      	neglt	r3, r3
 801cb74:	f042 0202 	orrlt.w	r2, r2, #2
 801cb78:	9307      	strge	r3, [sp, #28]
 801cb7a:	9307      	strlt	r3, [sp, #28]
 801cb7c:	bfb8      	it	lt
 801cb7e:	9204      	strlt	r2, [sp, #16]
 801cb80:	7823      	ldrb	r3, [r4, #0]
 801cb82:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb84:	d10a      	bne.n	801cb9c <_svfiprintf_r+0x130>
 801cb86:	7863      	ldrb	r3, [r4, #1]
 801cb88:	2b2a      	cmp	r3, #42	@ 0x2a
 801cb8a:	d132      	bne.n	801cbf2 <_svfiprintf_r+0x186>
 801cb8c:	9b03      	ldr	r3, [sp, #12]
 801cb8e:	1d1a      	adds	r2, r3, #4
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	9203      	str	r2, [sp, #12]
 801cb94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cb98:	3402      	adds	r4, #2
 801cb9a:	9305      	str	r3, [sp, #20]
 801cb9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801cc60 <_svfiprintf_r+0x1f4>
 801cba0:	7821      	ldrb	r1, [r4, #0]
 801cba2:	2203      	movs	r2, #3
 801cba4:	4650      	mov	r0, sl
 801cba6:	f7e3 fbc3 	bl	8000330 <memchr>
 801cbaa:	b138      	cbz	r0, 801cbbc <_svfiprintf_r+0x150>
 801cbac:	9b04      	ldr	r3, [sp, #16]
 801cbae:	eba0 000a 	sub.w	r0, r0, sl
 801cbb2:	2240      	movs	r2, #64	@ 0x40
 801cbb4:	4082      	lsls	r2, r0
 801cbb6:	4313      	orrs	r3, r2
 801cbb8:	3401      	adds	r4, #1
 801cbba:	9304      	str	r3, [sp, #16]
 801cbbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cbc0:	4824      	ldr	r0, [pc, #144]	@ (801cc54 <_svfiprintf_r+0x1e8>)
 801cbc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cbc6:	2206      	movs	r2, #6
 801cbc8:	f7e3 fbb2 	bl	8000330 <memchr>
 801cbcc:	2800      	cmp	r0, #0
 801cbce:	d036      	beq.n	801cc3e <_svfiprintf_r+0x1d2>
 801cbd0:	4b21      	ldr	r3, [pc, #132]	@ (801cc58 <_svfiprintf_r+0x1ec>)
 801cbd2:	bb1b      	cbnz	r3, 801cc1c <_svfiprintf_r+0x1b0>
 801cbd4:	9b03      	ldr	r3, [sp, #12]
 801cbd6:	3307      	adds	r3, #7
 801cbd8:	f023 0307 	bic.w	r3, r3, #7
 801cbdc:	3308      	adds	r3, #8
 801cbde:	9303      	str	r3, [sp, #12]
 801cbe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cbe2:	4433      	add	r3, r6
 801cbe4:	9309      	str	r3, [sp, #36]	@ 0x24
 801cbe6:	e76a      	b.n	801cabe <_svfiprintf_r+0x52>
 801cbe8:	fb0c 3202 	mla	r2, ip, r2, r3
 801cbec:	460c      	mov	r4, r1
 801cbee:	2001      	movs	r0, #1
 801cbf0:	e7a8      	b.n	801cb44 <_svfiprintf_r+0xd8>
 801cbf2:	2300      	movs	r3, #0
 801cbf4:	3401      	adds	r4, #1
 801cbf6:	9305      	str	r3, [sp, #20]
 801cbf8:	4619      	mov	r1, r3
 801cbfa:	f04f 0c0a 	mov.w	ip, #10
 801cbfe:	4620      	mov	r0, r4
 801cc00:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cc04:	3a30      	subs	r2, #48	@ 0x30
 801cc06:	2a09      	cmp	r2, #9
 801cc08:	d903      	bls.n	801cc12 <_svfiprintf_r+0x1a6>
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	d0c6      	beq.n	801cb9c <_svfiprintf_r+0x130>
 801cc0e:	9105      	str	r1, [sp, #20]
 801cc10:	e7c4      	b.n	801cb9c <_svfiprintf_r+0x130>
 801cc12:	fb0c 2101 	mla	r1, ip, r1, r2
 801cc16:	4604      	mov	r4, r0
 801cc18:	2301      	movs	r3, #1
 801cc1a:	e7f0      	b.n	801cbfe <_svfiprintf_r+0x192>
 801cc1c:	ab03      	add	r3, sp, #12
 801cc1e:	9300      	str	r3, [sp, #0]
 801cc20:	462a      	mov	r2, r5
 801cc22:	4b0e      	ldr	r3, [pc, #56]	@ (801cc5c <_svfiprintf_r+0x1f0>)
 801cc24:	a904      	add	r1, sp, #16
 801cc26:	4638      	mov	r0, r7
 801cc28:	f7fd fa5a 	bl	801a0e0 <_printf_float>
 801cc2c:	1c42      	adds	r2, r0, #1
 801cc2e:	4606      	mov	r6, r0
 801cc30:	d1d6      	bne.n	801cbe0 <_svfiprintf_r+0x174>
 801cc32:	89ab      	ldrh	r3, [r5, #12]
 801cc34:	065b      	lsls	r3, r3, #25
 801cc36:	f53f af2d 	bmi.w	801ca94 <_svfiprintf_r+0x28>
 801cc3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cc3c:	e72c      	b.n	801ca98 <_svfiprintf_r+0x2c>
 801cc3e:	ab03      	add	r3, sp, #12
 801cc40:	9300      	str	r3, [sp, #0]
 801cc42:	462a      	mov	r2, r5
 801cc44:	4b05      	ldr	r3, [pc, #20]	@ (801cc5c <_svfiprintf_r+0x1f0>)
 801cc46:	a904      	add	r1, sp, #16
 801cc48:	4638      	mov	r0, r7
 801cc4a:	f7fd fcd1 	bl	801a5f0 <_printf_i>
 801cc4e:	e7ed      	b.n	801cc2c <_svfiprintf_r+0x1c0>
 801cc50:	0801f2e8 	.word	0x0801f2e8
 801cc54:	0801f2f2 	.word	0x0801f2f2
 801cc58:	0801a0e1 	.word	0x0801a0e1
 801cc5c:	0801c9b5 	.word	0x0801c9b5
 801cc60:	0801f2ee 	.word	0x0801f2ee

0801cc64 <__sflush_r>:
 801cc64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc6c:	0716      	lsls	r6, r2, #28
 801cc6e:	4605      	mov	r5, r0
 801cc70:	460c      	mov	r4, r1
 801cc72:	d454      	bmi.n	801cd1e <__sflush_r+0xba>
 801cc74:	684b      	ldr	r3, [r1, #4]
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	dc02      	bgt.n	801cc80 <__sflush_r+0x1c>
 801cc7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	dd48      	ble.n	801cd12 <__sflush_r+0xae>
 801cc80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cc82:	2e00      	cmp	r6, #0
 801cc84:	d045      	beq.n	801cd12 <__sflush_r+0xae>
 801cc86:	2300      	movs	r3, #0
 801cc88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cc8c:	682f      	ldr	r7, [r5, #0]
 801cc8e:	6a21      	ldr	r1, [r4, #32]
 801cc90:	602b      	str	r3, [r5, #0]
 801cc92:	d030      	beq.n	801ccf6 <__sflush_r+0x92>
 801cc94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cc96:	89a3      	ldrh	r3, [r4, #12]
 801cc98:	0759      	lsls	r1, r3, #29
 801cc9a:	d505      	bpl.n	801cca8 <__sflush_r+0x44>
 801cc9c:	6863      	ldr	r3, [r4, #4]
 801cc9e:	1ad2      	subs	r2, r2, r3
 801cca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cca2:	b10b      	cbz	r3, 801cca8 <__sflush_r+0x44>
 801cca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cca6:	1ad2      	subs	r2, r2, r3
 801cca8:	2300      	movs	r3, #0
 801ccaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ccac:	6a21      	ldr	r1, [r4, #32]
 801ccae:	4628      	mov	r0, r5
 801ccb0:	47b0      	blx	r6
 801ccb2:	1c43      	adds	r3, r0, #1
 801ccb4:	89a3      	ldrh	r3, [r4, #12]
 801ccb6:	d106      	bne.n	801ccc6 <__sflush_r+0x62>
 801ccb8:	6829      	ldr	r1, [r5, #0]
 801ccba:	291d      	cmp	r1, #29
 801ccbc:	d82b      	bhi.n	801cd16 <__sflush_r+0xb2>
 801ccbe:	4a2a      	ldr	r2, [pc, #168]	@ (801cd68 <__sflush_r+0x104>)
 801ccc0:	410a      	asrs	r2, r1
 801ccc2:	07d6      	lsls	r6, r2, #31
 801ccc4:	d427      	bmi.n	801cd16 <__sflush_r+0xb2>
 801ccc6:	2200      	movs	r2, #0
 801ccc8:	6062      	str	r2, [r4, #4]
 801ccca:	04d9      	lsls	r1, r3, #19
 801cccc:	6922      	ldr	r2, [r4, #16]
 801ccce:	6022      	str	r2, [r4, #0]
 801ccd0:	d504      	bpl.n	801ccdc <__sflush_r+0x78>
 801ccd2:	1c42      	adds	r2, r0, #1
 801ccd4:	d101      	bne.n	801ccda <__sflush_r+0x76>
 801ccd6:	682b      	ldr	r3, [r5, #0]
 801ccd8:	b903      	cbnz	r3, 801ccdc <__sflush_r+0x78>
 801ccda:	6560      	str	r0, [r4, #84]	@ 0x54
 801ccdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ccde:	602f      	str	r7, [r5, #0]
 801cce0:	b1b9      	cbz	r1, 801cd12 <__sflush_r+0xae>
 801cce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cce6:	4299      	cmp	r1, r3
 801cce8:	d002      	beq.n	801ccf0 <__sflush_r+0x8c>
 801ccea:	4628      	mov	r0, r5
 801ccec:	f7fe fd5a 	bl	801b7a4 <_free_r>
 801ccf0:	2300      	movs	r3, #0
 801ccf2:	6363      	str	r3, [r4, #52]	@ 0x34
 801ccf4:	e00d      	b.n	801cd12 <__sflush_r+0xae>
 801ccf6:	2301      	movs	r3, #1
 801ccf8:	4628      	mov	r0, r5
 801ccfa:	47b0      	blx	r6
 801ccfc:	4602      	mov	r2, r0
 801ccfe:	1c50      	adds	r0, r2, #1
 801cd00:	d1c9      	bne.n	801cc96 <__sflush_r+0x32>
 801cd02:	682b      	ldr	r3, [r5, #0]
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d0c6      	beq.n	801cc96 <__sflush_r+0x32>
 801cd08:	2b1d      	cmp	r3, #29
 801cd0a:	d001      	beq.n	801cd10 <__sflush_r+0xac>
 801cd0c:	2b16      	cmp	r3, #22
 801cd0e:	d11e      	bne.n	801cd4e <__sflush_r+0xea>
 801cd10:	602f      	str	r7, [r5, #0]
 801cd12:	2000      	movs	r0, #0
 801cd14:	e022      	b.n	801cd5c <__sflush_r+0xf8>
 801cd16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cd1a:	b21b      	sxth	r3, r3
 801cd1c:	e01b      	b.n	801cd56 <__sflush_r+0xf2>
 801cd1e:	690f      	ldr	r7, [r1, #16]
 801cd20:	2f00      	cmp	r7, #0
 801cd22:	d0f6      	beq.n	801cd12 <__sflush_r+0xae>
 801cd24:	0793      	lsls	r3, r2, #30
 801cd26:	680e      	ldr	r6, [r1, #0]
 801cd28:	bf08      	it	eq
 801cd2a:	694b      	ldreq	r3, [r1, #20]
 801cd2c:	600f      	str	r7, [r1, #0]
 801cd2e:	bf18      	it	ne
 801cd30:	2300      	movne	r3, #0
 801cd32:	eba6 0807 	sub.w	r8, r6, r7
 801cd36:	608b      	str	r3, [r1, #8]
 801cd38:	f1b8 0f00 	cmp.w	r8, #0
 801cd3c:	dde9      	ble.n	801cd12 <__sflush_r+0xae>
 801cd3e:	6a21      	ldr	r1, [r4, #32]
 801cd40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801cd42:	4643      	mov	r3, r8
 801cd44:	463a      	mov	r2, r7
 801cd46:	4628      	mov	r0, r5
 801cd48:	47b0      	blx	r6
 801cd4a:	2800      	cmp	r0, #0
 801cd4c:	dc08      	bgt.n	801cd60 <__sflush_r+0xfc>
 801cd4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cd56:	81a3      	strh	r3, [r4, #12]
 801cd58:	f04f 30ff 	mov.w	r0, #4294967295
 801cd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd60:	4407      	add	r7, r0
 801cd62:	eba8 0800 	sub.w	r8, r8, r0
 801cd66:	e7e7      	b.n	801cd38 <__sflush_r+0xd4>
 801cd68:	dfbffffe 	.word	0xdfbffffe

0801cd6c <_fflush_r>:
 801cd6c:	b538      	push	{r3, r4, r5, lr}
 801cd6e:	690b      	ldr	r3, [r1, #16]
 801cd70:	4605      	mov	r5, r0
 801cd72:	460c      	mov	r4, r1
 801cd74:	b913      	cbnz	r3, 801cd7c <_fflush_r+0x10>
 801cd76:	2500      	movs	r5, #0
 801cd78:	4628      	mov	r0, r5
 801cd7a:	bd38      	pop	{r3, r4, r5, pc}
 801cd7c:	b118      	cbz	r0, 801cd86 <_fflush_r+0x1a>
 801cd7e:	6a03      	ldr	r3, [r0, #32]
 801cd80:	b90b      	cbnz	r3, 801cd86 <_fflush_r+0x1a>
 801cd82:	f7fd fde1 	bl	801a948 <__sinit>
 801cd86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d0f3      	beq.n	801cd76 <_fflush_r+0xa>
 801cd8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801cd90:	07d0      	lsls	r0, r2, #31
 801cd92:	d404      	bmi.n	801cd9e <_fflush_r+0x32>
 801cd94:	0599      	lsls	r1, r3, #22
 801cd96:	d402      	bmi.n	801cd9e <_fflush_r+0x32>
 801cd98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cd9a:	f7fd ff0a 	bl	801abb2 <__retarget_lock_acquire_recursive>
 801cd9e:	4628      	mov	r0, r5
 801cda0:	4621      	mov	r1, r4
 801cda2:	f7ff ff5f 	bl	801cc64 <__sflush_r>
 801cda6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cda8:	07da      	lsls	r2, r3, #31
 801cdaa:	4605      	mov	r5, r0
 801cdac:	d4e4      	bmi.n	801cd78 <_fflush_r+0xc>
 801cdae:	89a3      	ldrh	r3, [r4, #12]
 801cdb0:	059b      	lsls	r3, r3, #22
 801cdb2:	d4e1      	bmi.n	801cd78 <_fflush_r+0xc>
 801cdb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cdb6:	f7fd fefd 	bl	801abb4 <__retarget_lock_release_recursive>
 801cdba:	e7dd      	b.n	801cd78 <_fflush_r+0xc>

0801cdbc <memmove>:
 801cdbc:	4288      	cmp	r0, r1
 801cdbe:	b510      	push	{r4, lr}
 801cdc0:	eb01 0402 	add.w	r4, r1, r2
 801cdc4:	d902      	bls.n	801cdcc <memmove+0x10>
 801cdc6:	4284      	cmp	r4, r0
 801cdc8:	4623      	mov	r3, r4
 801cdca:	d807      	bhi.n	801cddc <memmove+0x20>
 801cdcc:	1e43      	subs	r3, r0, #1
 801cdce:	42a1      	cmp	r1, r4
 801cdd0:	d008      	beq.n	801cde4 <memmove+0x28>
 801cdd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cdd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cdda:	e7f8      	b.n	801cdce <memmove+0x12>
 801cddc:	4402      	add	r2, r0
 801cdde:	4601      	mov	r1, r0
 801cde0:	428a      	cmp	r2, r1
 801cde2:	d100      	bne.n	801cde6 <memmove+0x2a>
 801cde4:	bd10      	pop	{r4, pc}
 801cde6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801cdea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801cdee:	e7f7      	b.n	801cde0 <memmove+0x24>

0801cdf0 <_sbrk_r>:
 801cdf0:	b538      	push	{r3, r4, r5, lr}
 801cdf2:	4d06      	ldr	r5, [pc, #24]	@ (801ce0c <_sbrk_r+0x1c>)
 801cdf4:	2300      	movs	r3, #0
 801cdf6:	4604      	mov	r4, r0
 801cdf8:	4608      	mov	r0, r1
 801cdfa:	602b      	str	r3, [r5, #0]
 801cdfc:	f7e6 f83a 	bl	8002e74 <_sbrk>
 801ce00:	1c43      	adds	r3, r0, #1
 801ce02:	d102      	bne.n	801ce0a <_sbrk_r+0x1a>
 801ce04:	682b      	ldr	r3, [r5, #0]
 801ce06:	b103      	cbz	r3, 801ce0a <_sbrk_r+0x1a>
 801ce08:	6023      	str	r3, [r4, #0]
 801ce0a:	bd38      	pop	{r3, r4, r5, pc}
 801ce0c:	2401da30 	.word	0x2401da30

0801ce10 <__assert_func>:
 801ce10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ce12:	4614      	mov	r4, r2
 801ce14:	461a      	mov	r2, r3
 801ce16:	4b09      	ldr	r3, [pc, #36]	@ (801ce3c <__assert_func+0x2c>)
 801ce18:	681b      	ldr	r3, [r3, #0]
 801ce1a:	4605      	mov	r5, r0
 801ce1c:	68d8      	ldr	r0, [r3, #12]
 801ce1e:	b954      	cbnz	r4, 801ce36 <__assert_func+0x26>
 801ce20:	4b07      	ldr	r3, [pc, #28]	@ (801ce40 <__assert_func+0x30>)
 801ce22:	461c      	mov	r4, r3
 801ce24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ce28:	9100      	str	r1, [sp, #0]
 801ce2a:	462b      	mov	r3, r5
 801ce2c:	4905      	ldr	r1, [pc, #20]	@ (801ce44 <__assert_func+0x34>)
 801ce2e:	f000 f84f 	bl	801ced0 <fiprintf>
 801ce32:	f000 f85f 	bl	801cef4 <abort>
 801ce36:	4b04      	ldr	r3, [pc, #16]	@ (801ce48 <__assert_func+0x38>)
 801ce38:	e7f4      	b.n	801ce24 <__assert_func+0x14>
 801ce3a:	bf00      	nop
 801ce3c:	240002ac 	.word	0x240002ac
 801ce40:	0801f334 	.word	0x0801f334
 801ce44:	0801f306 	.word	0x0801f306
 801ce48:	0801f2f9 	.word	0x0801f2f9

0801ce4c <_calloc_r>:
 801ce4c:	b570      	push	{r4, r5, r6, lr}
 801ce4e:	fba1 5402 	umull	r5, r4, r1, r2
 801ce52:	b93c      	cbnz	r4, 801ce64 <_calloc_r+0x18>
 801ce54:	4629      	mov	r1, r5
 801ce56:	f7ff f853 	bl	801bf00 <_malloc_r>
 801ce5a:	4606      	mov	r6, r0
 801ce5c:	b928      	cbnz	r0, 801ce6a <_calloc_r+0x1e>
 801ce5e:	2600      	movs	r6, #0
 801ce60:	4630      	mov	r0, r6
 801ce62:	bd70      	pop	{r4, r5, r6, pc}
 801ce64:	220c      	movs	r2, #12
 801ce66:	6002      	str	r2, [r0, #0]
 801ce68:	e7f9      	b.n	801ce5e <_calloc_r+0x12>
 801ce6a:	462a      	mov	r2, r5
 801ce6c:	4621      	mov	r1, r4
 801ce6e:	f7fd fe04 	bl	801aa7a <memset>
 801ce72:	e7f5      	b.n	801ce60 <_calloc_r+0x14>

0801ce74 <_realloc_r>:
 801ce74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce78:	4680      	mov	r8, r0
 801ce7a:	4615      	mov	r5, r2
 801ce7c:	460c      	mov	r4, r1
 801ce7e:	b921      	cbnz	r1, 801ce8a <_realloc_r+0x16>
 801ce80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ce84:	4611      	mov	r1, r2
 801ce86:	f7ff b83b 	b.w	801bf00 <_malloc_r>
 801ce8a:	b92a      	cbnz	r2, 801ce98 <_realloc_r+0x24>
 801ce8c:	f7fe fc8a 	bl	801b7a4 <_free_r>
 801ce90:	2400      	movs	r4, #0
 801ce92:	4620      	mov	r0, r4
 801ce94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce98:	f000 f833 	bl	801cf02 <_malloc_usable_size_r>
 801ce9c:	4285      	cmp	r5, r0
 801ce9e:	4606      	mov	r6, r0
 801cea0:	d802      	bhi.n	801cea8 <_realloc_r+0x34>
 801cea2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801cea6:	d8f4      	bhi.n	801ce92 <_realloc_r+0x1e>
 801cea8:	4629      	mov	r1, r5
 801ceaa:	4640      	mov	r0, r8
 801ceac:	f7ff f828 	bl	801bf00 <_malloc_r>
 801ceb0:	4607      	mov	r7, r0
 801ceb2:	2800      	cmp	r0, #0
 801ceb4:	d0ec      	beq.n	801ce90 <_realloc_r+0x1c>
 801ceb6:	42b5      	cmp	r5, r6
 801ceb8:	462a      	mov	r2, r5
 801ceba:	4621      	mov	r1, r4
 801cebc:	bf28      	it	cs
 801cebe:	4632      	movcs	r2, r6
 801cec0:	f7fd fe79 	bl	801abb6 <memcpy>
 801cec4:	4621      	mov	r1, r4
 801cec6:	4640      	mov	r0, r8
 801cec8:	f7fe fc6c 	bl	801b7a4 <_free_r>
 801cecc:	463c      	mov	r4, r7
 801cece:	e7e0      	b.n	801ce92 <_realloc_r+0x1e>

0801ced0 <fiprintf>:
 801ced0:	b40e      	push	{r1, r2, r3}
 801ced2:	b503      	push	{r0, r1, lr}
 801ced4:	4601      	mov	r1, r0
 801ced6:	ab03      	add	r3, sp, #12
 801ced8:	4805      	ldr	r0, [pc, #20]	@ (801cef0 <fiprintf+0x20>)
 801ceda:	f853 2b04 	ldr.w	r2, [r3], #4
 801cede:	6800      	ldr	r0, [r0, #0]
 801cee0:	9301      	str	r3, [sp, #4]
 801cee2:	f000 f83f 	bl	801cf64 <_vfiprintf_r>
 801cee6:	b002      	add	sp, #8
 801cee8:	f85d eb04 	ldr.w	lr, [sp], #4
 801ceec:	b003      	add	sp, #12
 801ceee:	4770      	bx	lr
 801cef0:	240002ac 	.word	0x240002ac

0801cef4 <abort>:
 801cef4:	b508      	push	{r3, lr}
 801cef6:	2006      	movs	r0, #6
 801cef8:	f000 fa08 	bl	801d30c <raise>
 801cefc:	2001      	movs	r0, #1
 801cefe:	f7e5 ff41 	bl	8002d84 <_exit>

0801cf02 <_malloc_usable_size_r>:
 801cf02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cf06:	1f18      	subs	r0, r3, #4
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	bfbc      	itt	lt
 801cf0c:	580b      	ldrlt	r3, [r1, r0]
 801cf0e:	18c0      	addlt	r0, r0, r3
 801cf10:	4770      	bx	lr

0801cf12 <__sfputc_r>:
 801cf12:	6893      	ldr	r3, [r2, #8]
 801cf14:	3b01      	subs	r3, #1
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	b410      	push	{r4}
 801cf1a:	6093      	str	r3, [r2, #8]
 801cf1c:	da08      	bge.n	801cf30 <__sfputc_r+0x1e>
 801cf1e:	6994      	ldr	r4, [r2, #24]
 801cf20:	42a3      	cmp	r3, r4
 801cf22:	db01      	blt.n	801cf28 <__sfputc_r+0x16>
 801cf24:	290a      	cmp	r1, #10
 801cf26:	d103      	bne.n	801cf30 <__sfputc_r+0x1e>
 801cf28:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cf2c:	f000 b932 	b.w	801d194 <__swbuf_r>
 801cf30:	6813      	ldr	r3, [r2, #0]
 801cf32:	1c58      	adds	r0, r3, #1
 801cf34:	6010      	str	r0, [r2, #0]
 801cf36:	7019      	strb	r1, [r3, #0]
 801cf38:	4608      	mov	r0, r1
 801cf3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cf3e:	4770      	bx	lr

0801cf40 <__sfputs_r>:
 801cf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf42:	4606      	mov	r6, r0
 801cf44:	460f      	mov	r7, r1
 801cf46:	4614      	mov	r4, r2
 801cf48:	18d5      	adds	r5, r2, r3
 801cf4a:	42ac      	cmp	r4, r5
 801cf4c:	d101      	bne.n	801cf52 <__sfputs_r+0x12>
 801cf4e:	2000      	movs	r0, #0
 801cf50:	e007      	b.n	801cf62 <__sfputs_r+0x22>
 801cf52:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf56:	463a      	mov	r2, r7
 801cf58:	4630      	mov	r0, r6
 801cf5a:	f7ff ffda 	bl	801cf12 <__sfputc_r>
 801cf5e:	1c43      	adds	r3, r0, #1
 801cf60:	d1f3      	bne.n	801cf4a <__sfputs_r+0xa>
 801cf62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cf64 <_vfiprintf_r>:
 801cf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf68:	460d      	mov	r5, r1
 801cf6a:	b09d      	sub	sp, #116	@ 0x74
 801cf6c:	4614      	mov	r4, r2
 801cf6e:	4698      	mov	r8, r3
 801cf70:	4606      	mov	r6, r0
 801cf72:	b118      	cbz	r0, 801cf7c <_vfiprintf_r+0x18>
 801cf74:	6a03      	ldr	r3, [r0, #32]
 801cf76:	b90b      	cbnz	r3, 801cf7c <_vfiprintf_r+0x18>
 801cf78:	f7fd fce6 	bl	801a948 <__sinit>
 801cf7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cf7e:	07d9      	lsls	r1, r3, #31
 801cf80:	d405      	bmi.n	801cf8e <_vfiprintf_r+0x2a>
 801cf82:	89ab      	ldrh	r3, [r5, #12]
 801cf84:	059a      	lsls	r2, r3, #22
 801cf86:	d402      	bmi.n	801cf8e <_vfiprintf_r+0x2a>
 801cf88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cf8a:	f7fd fe12 	bl	801abb2 <__retarget_lock_acquire_recursive>
 801cf8e:	89ab      	ldrh	r3, [r5, #12]
 801cf90:	071b      	lsls	r3, r3, #28
 801cf92:	d501      	bpl.n	801cf98 <_vfiprintf_r+0x34>
 801cf94:	692b      	ldr	r3, [r5, #16]
 801cf96:	b99b      	cbnz	r3, 801cfc0 <_vfiprintf_r+0x5c>
 801cf98:	4629      	mov	r1, r5
 801cf9a:	4630      	mov	r0, r6
 801cf9c:	f000 f938 	bl	801d210 <__swsetup_r>
 801cfa0:	b170      	cbz	r0, 801cfc0 <_vfiprintf_r+0x5c>
 801cfa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cfa4:	07dc      	lsls	r4, r3, #31
 801cfa6:	d504      	bpl.n	801cfb2 <_vfiprintf_r+0x4e>
 801cfa8:	f04f 30ff 	mov.w	r0, #4294967295
 801cfac:	b01d      	add	sp, #116	@ 0x74
 801cfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfb2:	89ab      	ldrh	r3, [r5, #12]
 801cfb4:	0598      	lsls	r0, r3, #22
 801cfb6:	d4f7      	bmi.n	801cfa8 <_vfiprintf_r+0x44>
 801cfb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cfba:	f7fd fdfb 	bl	801abb4 <__retarget_lock_release_recursive>
 801cfbe:	e7f3      	b.n	801cfa8 <_vfiprintf_r+0x44>
 801cfc0:	2300      	movs	r3, #0
 801cfc2:	9309      	str	r3, [sp, #36]	@ 0x24
 801cfc4:	2320      	movs	r3, #32
 801cfc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cfca:	f8cd 800c 	str.w	r8, [sp, #12]
 801cfce:	2330      	movs	r3, #48	@ 0x30
 801cfd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d180 <_vfiprintf_r+0x21c>
 801cfd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cfd8:	f04f 0901 	mov.w	r9, #1
 801cfdc:	4623      	mov	r3, r4
 801cfde:	469a      	mov	sl, r3
 801cfe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cfe4:	b10a      	cbz	r2, 801cfea <_vfiprintf_r+0x86>
 801cfe6:	2a25      	cmp	r2, #37	@ 0x25
 801cfe8:	d1f9      	bne.n	801cfde <_vfiprintf_r+0x7a>
 801cfea:	ebba 0b04 	subs.w	fp, sl, r4
 801cfee:	d00b      	beq.n	801d008 <_vfiprintf_r+0xa4>
 801cff0:	465b      	mov	r3, fp
 801cff2:	4622      	mov	r2, r4
 801cff4:	4629      	mov	r1, r5
 801cff6:	4630      	mov	r0, r6
 801cff8:	f7ff ffa2 	bl	801cf40 <__sfputs_r>
 801cffc:	3001      	adds	r0, #1
 801cffe:	f000 80a7 	beq.w	801d150 <_vfiprintf_r+0x1ec>
 801d002:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d004:	445a      	add	r2, fp
 801d006:	9209      	str	r2, [sp, #36]	@ 0x24
 801d008:	f89a 3000 	ldrb.w	r3, [sl]
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	f000 809f 	beq.w	801d150 <_vfiprintf_r+0x1ec>
 801d012:	2300      	movs	r3, #0
 801d014:	f04f 32ff 	mov.w	r2, #4294967295
 801d018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d01c:	f10a 0a01 	add.w	sl, sl, #1
 801d020:	9304      	str	r3, [sp, #16]
 801d022:	9307      	str	r3, [sp, #28]
 801d024:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d028:	931a      	str	r3, [sp, #104]	@ 0x68
 801d02a:	4654      	mov	r4, sl
 801d02c:	2205      	movs	r2, #5
 801d02e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d032:	4853      	ldr	r0, [pc, #332]	@ (801d180 <_vfiprintf_r+0x21c>)
 801d034:	f7e3 f97c 	bl	8000330 <memchr>
 801d038:	9a04      	ldr	r2, [sp, #16]
 801d03a:	b9d8      	cbnz	r0, 801d074 <_vfiprintf_r+0x110>
 801d03c:	06d1      	lsls	r1, r2, #27
 801d03e:	bf44      	itt	mi
 801d040:	2320      	movmi	r3, #32
 801d042:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d046:	0713      	lsls	r3, r2, #28
 801d048:	bf44      	itt	mi
 801d04a:	232b      	movmi	r3, #43	@ 0x2b
 801d04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d050:	f89a 3000 	ldrb.w	r3, [sl]
 801d054:	2b2a      	cmp	r3, #42	@ 0x2a
 801d056:	d015      	beq.n	801d084 <_vfiprintf_r+0x120>
 801d058:	9a07      	ldr	r2, [sp, #28]
 801d05a:	4654      	mov	r4, sl
 801d05c:	2000      	movs	r0, #0
 801d05e:	f04f 0c0a 	mov.w	ip, #10
 801d062:	4621      	mov	r1, r4
 801d064:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d068:	3b30      	subs	r3, #48	@ 0x30
 801d06a:	2b09      	cmp	r3, #9
 801d06c:	d94b      	bls.n	801d106 <_vfiprintf_r+0x1a2>
 801d06e:	b1b0      	cbz	r0, 801d09e <_vfiprintf_r+0x13a>
 801d070:	9207      	str	r2, [sp, #28]
 801d072:	e014      	b.n	801d09e <_vfiprintf_r+0x13a>
 801d074:	eba0 0308 	sub.w	r3, r0, r8
 801d078:	fa09 f303 	lsl.w	r3, r9, r3
 801d07c:	4313      	orrs	r3, r2
 801d07e:	9304      	str	r3, [sp, #16]
 801d080:	46a2      	mov	sl, r4
 801d082:	e7d2      	b.n	801d02a <_vfiprintf_r+0xc6>
 801d084:	9b03      	ldr	r3, [sp, #12]
 801d086:	1d19      	adds	r1, r3, #4
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	9103      	str	r1, [sp, #12]
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	bfbb      	ittet	lt
 801d090:	425b      	neglt	r3, r3
 801d092:	f042 0202 	orrlt.w	r2, r2, #2
 801d096:	9307      	strge	r3, [sp, #28]
 801d098:	9307      	strlt	r3, [sp, #28]
 801d09a:	bfb8      	it	lt
 801d09c:	9204      	strlt	r2, [sp, #16]
 801d09e:	7823      	ldrb	r3, [r4, #0]
 801d0a0:	2b2e      	cmp	r3, #46	@ 0x2e
 801d0a2:	d10a      	bne.n	801d0ba <_vfiprintf_r+0x156>
 801d0a4:	7863      	ldrb	r3, [r4, #1]
 801d0a6:	2b2a      	cmp	r3, #42	@ 0x2a
 801d0a8:	d132      	bne.n	801d110 <_vfiprintf_r+0x1ac>
 801d0aa:	9b03      	ldr	r3, [sp, #12]
 801d0ac:	1d1a      	adds	r2, r3, #4
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	9203      	str	r2, [sp, #12]
 801d0b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d0b6:	3402      	adds	r4, #2
 801d0b8:	9305      	str	r3, [sp, #20]
 801d0ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d190 <_vfiprintf_r+0x22c>
 801d0be:	7821      	ldrb	r1, [r4, #0]
 801d0c0:	2203      	movs	r2, #3
 801d0c2:	4650      	mov	r0, sl
 801d0c4:	f7e3 f934 	bl	8000330 <memchr>
 801d0c8:	b138      	cbz	r0, 801d0da <_vfiprintf_r+0x176>
 801d0ca:	9b04      	ldr	r3, [sp, #16]
 801d0cc:	eba0 000a 	sub.w	r0, r0, sl
 801d0d0:	2240      	movs	r2, #64	@ 0x40
 801d0d2:	4082      	lsls	r2, r0
 801d0d4:	4313      	orrs	r3, r2
 801d0d6:	3401      	adds	r4, #1
 801d0d8:	9304      	str	r3, [sp, #16]
 801d0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d0de:	4829      	ldr	r0, [pc, #164]	@ (801d184 <_vfiprintf_r+0x220>)
 801d0e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d0e4:	2206      	movs	r2, #6
 801d0e6:	f7e3 f923 	bl	8000330 <memchr>
 801d0ea:	2800      	cmp	r0, #0
 801d0ec:	d03f      	beq.n	801d16e <_vfiprintf_r+0x20a>
 801d0ee:	4b26      	ldr	r3, [pc, #152]	@ (801d188 <_vfiprintf_r+0x224>)
 801d0f0:	bb1b      	cbnz	r3, 801d13a <_vfiprintf_r+0x1d6>
 801d0f2:	9b03      	ldr	r3, [sp, #12]
 801d0f4:	3307      	adds	r3, #7
 801d0f6:	f023 0307 	bic.w	r3, r3, #7
 801d0fa:	3308      	adds	r3, #8
 801d0fc:	9303      	str	r3, [sp, #12]
 801d0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d100:	443b      	add	r3, r7
 801d102:	9309      	str	r3, [sp, #36]	@ 0x24
 801d104:	e76a      	b.n	801cfdc <_vfiprintf_r+0x78>
 801d106:	fb0c 3202 	mla	r2, ip, r2, r3
 801d10a:	460c      	mov	r4, r1
 801d10c:	2001      	movs	r0, #1
 801d10e:	e7a8      	b.n	801d062 <_vfiprintf_r+0xfe>
 801d110:	2300      	movs	r3, #0
 801d112:	3401      	adds	r4, #1
 801d114:	9305      	str	r3, [sp, #20]
 801d116:	4619      	mov	r1, r3
 801d118:	f04f 0c0a 	mov.w	ip, #10
 801d11c:	4620      	mov	r0, r4
 801d11e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d122:	3a30      	subs	r2, #48	@ 0x30
 801d124:	2a09      	cmp	r2, #9
 801d126:	d903      	bls.n	801d130 <_vfiprintf_r+0x1cc>
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d0c6      	beq.n	801d0ba <_vfiprintf_r+0x156>
 801d12c:	9105      	str	r1, [sp, #20]
 801d12e:	e7c4      	b.n	801d0ba <_vfiprintf_r+0x156>
 801d130:	fb0c 2101 	mla	r1, ip, r1, r2
 801d134:	4604      	mov	r4, r0
 801d136:	2301      	movs	r3, #1
 801d138:	e7f0      	b.n	801d11c <_vfiprintf_r+0x1b8>
 801d13a:	ab03      	add	r3, sp, #12
 801d13c:	9300      	str	r3, [sp, #0]
 801d13e:	462a      	mov	r2, r5
 801d140:	4b12      	ldr	r3, [pc, #72]	@ (801d18c <_vfiprintf_r+0x228>)
 801d142:	a904      	add	r1, sp, #16
 801d144:	4630      	mov	r0, r6
 801d146:	f7fc ffcb 	bl	801a0e0 <_printf_float>
 801d14a:	4607      	mov	r7, r0
 801d14c:	1c78      	adds	r0, r7, #1
 801d14e:	d1d6      	bne.n	801d0fe <_vfiprintf_r+0x19a>
 801d150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d152:	07d9      	lsls	r1, r3, #31
 801d154:	d405      	bmi.n	801d162 <_vfiprintf_r+0x1fe>
 801d156:	89ab      	ldrh	r3, [r5, #12]
 801d158:	059a      	lsls	r2, r3, #22
 801d15a:	d402      	bmi.n	801d162 <_vfiprintf_r+0x1fe>
 801d15c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d15e:	f7fd fd29 	bl	801abb4 <__retarget_lock_release_recursive>
 801d162:	89ab      	ldrh	r3, [r5, #12]
 801d164:	065b      	lsls	r3, r3, #25
 801d166:	f53f af1f 	bmi.w	801cfa8 <_vfiprintf_r+0x44>
 801d16a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d16c:	e71e      	b.n	801cfac <_vfiprintf_r+0x48>
 801d16e:	ab03      	add	r3, sp, #12
 801d170:	9300      	str	r3, [sp, #0]
 801d172:	462a      	mov	r2, r5
 801d174:	4b05      	ldr	r3, [pc, #20]	@ (801d18c <_vfiprintf_r+0x228>)
 801d176:	a904      	add	r1, sp, #16
 801d178:	4630      	mov	r0, r6
 801d17a:	f7fd fa39 	bl	801a5f0 <_printf_i>
 801d17e:	e7e4      	b.n	801d14a <_vfiprintf_r+0x1e6>
 801d180:	0801f2e8 	.word	0x0801f2e8
 801d184:	0801f2f2 	.word	0x0801f2f2
 801d188:	0801a0e1 	.word	0x0801a0e1
 801d18c:	0801cf41 	.word	0x0801cf41
 801d190:	0801f2ee 	.word	0x0801f2ee

0801d194 <__swbuf_r>:
 801d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d196:	460e      	mov	r6, r1
 801d198:	4614      	mov	r4, r2
 801d19a:	4605      	mov	r5, r0
 801d19c:	b118      	cbz	r0, 801d1a6 <__swbuf_r+0x12>
 801d19e:	6a03      	ldr	r3, [r0, #32]
 801d1a0:	b90b      	cbnz	r3, 801d1a6 <__swbuf_r+0x12>
 801d1a2:	f7fd fbd1 	bl	801a948 <__sinit>
 801d1a6:	69a3      	ldr	r3, [r4, #24]
 801d1a8:	60a3      	str	r3, [r4, #8]
 801d1aa:	89a3      	ldrh	r3, [r4, #12]
 801d1ac:	071a      	lsls	r2, r3, #28
 801d1ae:	d501      	bpl.n	801d1b4 <__swbuf_r+0x20>
 801d1b0:	6923      	ldr	r3, [r4, #16]
 801d1b2:	b943      	cbnz	r3, 801d1c6 <__swbuf_r+0x32>
 801d1b4:	4621      	mov	r1, r4
 801d1b6:	4628      	mov	r0, r5
 801d1b8:	f000 f82a 	bl	801d210 <__swsetup_r>
 801d1bc:	b118      	cbz	r0, 801d1c6 <__swbuf_r+0x32>
 801d1be:	f04f 37ff 	mov.w	r7, #4294967295
 801d1c2:	4638      	mov	r0, r7
 801d1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1c6:	6823      	ldr	r3, [r4, #0]
 801d1c8:	6922      	ldr	r2, [r4, #16]
 801d1ca:	1a98      	subs	r0, r3, r2
 801d1cc:	6963      	ldr	r3, [r4, #20]
 801d1ce:	b2f6      	uxtb	r6, r6
 801d1d0:	4283      	cmp	r3, r0
 801d1d2:	4637      	mov	r7, r6
 801d1d4:	dc05      	bgt.n	801d1e2 <__swbuf_r+0x4e>
 801d1d6:	4621      	mov	r1, r4
 801d1d8:	4628      	mov	r0, r5
 801d1da:	f7ff fdc7 	bl	801cd6c <_fflush_r>
 801d1de:	2800      	cmp	r0, #0
 801d1e0:	d1ed      	bne.n	801d1be <__swbuf_r+0x2a>
 801d1e2:	68a3      	ldr	r3, [r4, #8]
 801d1e4:	3b01      	subs	r3, #1
 801d1e6:	60a3      	str	r3, [r4, #8]
 801d1e8:	6823      	ldr	r3, [r4, #0]
 801d1ea:	1c5a      	adds	r2, r3, #1
 801d1ec:	6022      	str	r2, [r4, #0]
 801d1ee:	701e      	strb	r6, [r3, #0]
 801d1f0:	6962      	ldr	r2, [r4, #20]
 801d1f2:	1c43      	adds	r3, r0, #1
 801d1f4:	429a      	cmp	r2, r3
 801d1f6:	d004      	beq.n	801d202 <__swbuf_r+0x6e>
 801d1f8:	89a3      	ldrh	r3, [r4, #12]
 801d1fa:	07db      	lsls	r3, r3, #31
 801d1fc:	d5e1      	bpl.n	801d1c2 <__swbuf_r+0x2e>
 801d1fe:	2e0a      	cmp	r6, #10
 801d200:	d1df      	bne.n	801d1c2 <__swbuf_r+0x2e>
 801d202:	4621      	mov	r1, r4
 801d204:	4628      	mov	r0, r5
 801d206:	f7ff fdb1 	bl	801cd6c <_fflush_r>
 801d20a:	2800      	cmp	r0, #0
 801d20c:	d0d9      	beq.n	801d1c2 <__swbuf_r+0x2e>
 801d20e:	e7d6      	b.n	801d1be <__swbuf_r+0x2a>

0801d210 <__swsetup_r>:
 801d210:	b538      	push	{r3, r4, r5, lr}
 801d212:	4b29      	ldr	r3, [pc, #164]	@ (801d2b8 <__swsetup_r+0xa8>)
 801d214:	4605      	mov	r5, r0
 801d216:	6818      	ldr	r0, [r3, #0]
 801d218:	460c      	mov	r4, r1
 801d21a:	b118      	cbz	r0, 801d224 <__swsetup_r+0x14>
 801d21c:	6a03      	ldr	r3, [r0, #32]
 801d21e:	b90b      	cbnz	r3, 801d224 <__swsetup_r+0x14>
 801d220:	f7fd fb92 	bl	801a948 <__sinit>
 801d224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d228:	0719      	lsls	r1, r3, #28
 801d22a:	d422      	bmi.n	801d272 <__swsetup_r+0x62>
 801d22c:	06da      	lsls	r2, r3, #27
 801d22e:	d407      	bmi.n	801d240 <__swsetup_r+0x30>
 801d230:	2209      	movs	r2, #9
 801d232:	602a      	str	r2, [r5, #0]
 801d234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d238:	81a3      	strh	r3, [r4, #12]
 801d23a:	f04f 30ff 	mov.w	r0, #4294967295
 801d23e:	e033      	b.n	801d2a8 <__swsetup_r+0x98>
 801d240:	0758      	lsls	r0, r3, #29
 801d242:	d512      	bpl.n	801d26a <__swsetup_r+0x5a>
 801d244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d246:	b141      	cbz	r1, 801d25a <__swsetup_r+0x4a>
 801d248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d24c:	4299      	cmp	r1, r3
 801d24e:	d002      	beq.n	801d256 <__swsetup_r+0x46>
 801d250:	4628      	mov	r0, r5
 801d252:	f7fe faa7 	bl	801b7a4 <_free_r>
 801d256:	2300      	movs	r3, #0
 801d258:	6363      	str	r3, [r4, #52]	@ 0x34
 801d25a:	89a3      	ldrh	r3, [r4, #12]
 801d25c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d260:	81a3      	strh	r3, [r4, #12]
 801d262:	2300      	movs	r3, #0
 801d264:	6063      	str	r3, [r4, #4]
 801d266:	6923      	ldr	r3, [r4, #16]
 801d268:	6023      	str	r3, [r4, #0]
 801d26a:	89a3      	ldrh	r3, [r4, #12]
 801d26c:	f043 0308 	orr.w	r3, r3, #8
 801d270:	81a3      	strh	r3, [r4, #12]
 801d272:	6923      	ldr	r3, [r4, #16]
 801d274:	b94b      	cbnz	r3, 801d28a <__swsetup_r+0x7a>
 801d276:	89a3      	ldrh	r3, [r4, #12]
 801d278:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d27c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d280:	d003      	beq.n	801d28a <__swsetup_r+0x7a>
 801d282:	4621      	mov	r1, r4
 801d284:	4628      	mov	r0, r5
 801d286:	f000 f883 	bl	801d390 <__smakebuf_r>
 801d28a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d28e:	f013 0201 	ands.w	r2, r3, #1
 801d292:	d00a      	beq.n	801d2aa <__swsetup_r+0x9a>
 801d294:	2200      	movs	r2, #0
 801d296:	60a2      	str	r2, [r4, #8]
 801d298:	6962      	ldr	r2, [r4, #20]
 801d29a:	4252      	negs	r2, r2
 801d29c:	61a2      	str	r2, [r4, #24]
 801d29e:	6922      	ldr	r2, [r4, #16]
 801d2a0:	b942      	cbnz	r2, 801d2b4 <__swsetup_r+0xa4>
 801d2a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d2a6:	d1c5      	bne.n	801d234 <__swsetup_r+0x24>
 801d2a8:	bd38      	pop	{r3, r4, r5, pc}
 801d2aa:	0799      	lsls	r1, r3, #30
 801d2ac:	bf58      	it	pl
 801d2ae:	6962      	ldrpl	r2, [r4, #20]
 801d2b0:	60a2      	str	r2, [r4, #8]
 801d2b2:	e7f4      	b.n	801d29e <__swsetup_r+0x8e>
 801d2b4:	2000      	movs	r0, #0
 801d2b6:	e7f7      	b.n	801d2a8 <__swsetup_r+0x98>
 801d2b8:	240002ac 	.word	0x240002ac

0801d2bc <_raise_r>:
 801d2bc:	291f      	cmp	r1, #31
 801d2be:	b538      	push	{r3, r4, r5, lr}
 801d2c0:	4605      	mov	r5, r0
 801d2c2:	460c      	mov	r4, r1
 801d2c4:	d904      	bls.n	801d2d0 <_raise_r+0x14>
 801d2c6:	2316      	movs	r3, #22
 801d2c8:	6003      	str	r3, [r0, #0]
 801d2ca:	f04f 30ff 	mov.w	r0, #4294967295
 801d2ce:	bd38      	pop	{r3, r4, r5, pc}
 801d2d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d2d2:	b112      	cbz	r2, 801d2da <_raise_r+0x1e>
 801d2d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d2d8:	b94b      	cbnz	r3, 801d2ee <_raise_r+0x32>
 801d2da:	4628      	mov	r0, r5
 801d2dc:	f000 f830 	bl	801d340 <_getpid_r>
 801d2e0:	4622      	mov	r2, r4
 801d2e2:	4601      	mov	r1, r0
 801d2e4:	4628      	mov	r0, r5
 801d2e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d2ea:	f000 b817 	b.w	801d31c <_kill_r>
 801d2ee:	2b01      	cmp	r3, #1
 801d2f0:	d00a      	beq.n	801d308 <_raise_r+0x4c>
 801d2f2:	1c59      	adds	r1, r3, #1
 801d2f4:	d103      	bne.n	801d2fe <_raise_r+0x42>
 801d2f6:	2316      	movs	r3, #22
 801d2f8:	6003      	str	r3, [r0, #0]
 801d2fa:	2001      	movs	r0, #1
 801d2fc:	e7e7      	b.n	801d2ce <_raise_r+0x12>
 801d2fe:	2100      	movs	r1, #0
 801d300:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d304:	4620      	mov	r0, r4
 801d306:	4798      	blx	r3
 801d308:	2000      	movs	r0, #0
 801d30a:	e7e0      	b.n	801d2ce <_raise_r+0x12>

0801d30c <raise>:
 801d30c:	4b02      	ldr	r3, [pc, #8]	@ (801d318 <raise+0xc>)
 801d30e:	4601      	mov	r1, r0
 801d310:	6818      	ldr	r0, [r3, #0]
 801d312:	f7ff bfd3 	b.w	801d2bc <_raise_r>
 801d316:	bf00      	nop
 801d318:	240002ac 	.word	0x240002ac

0801d31c <_kill_r>:
 801d31c:	b538      	push	{r3, r4, r5, lr}
 801d31e:	4d07      	ldr	r5, [pc, #28]	@ (801d33c <_kill_r+0x20>)
 801d320:	2300      	movs	r3, #0
 801d322:	4604      	mov	r4, r0
 801d324:	4608      	mov	r0, r1
 801d326:	4611      	mov	r1, r2
 801d328:	602b      	str	r3, [r5, #0]
 801d32a:	f7e5 fd1b 	bl	8002d64 <_kill>
 801d32e:	1c43      	adds	r3, r0, #1
 801d330:	d102      	bne.n	801d338 <_kill_r+0x1c>
 801d332:	682b      	ldr	r3, [r5, #0]
 801d334:	b103      	cbz	r3, 801d338 <_kill_r+0x1c>
 801d336:	6023      	str	r3, [r4, #0]
 801d338:	bd38      	pop	{r3, r4, r5, pc}
 801d33a:	bf00      	nop
 801d33c:	2401da30 	.word	0x2401da30

0801d340 <_getpid_r>:
 801d340:	f7e5 bd08 	b.w	8002d54 <_getpid>

0801d344 <__swhatbuf_r>:
 801d344:	b570      	push	{r4, r5, r6, lr}
 801d346:	460c      	mov	r4, r1
 801d348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d34c:	2900      	cmp	r1, #0
 801d34e:	b096      	sub	sp, #88	@ 0x58
 801d350:	4615      	mov	r5, r2
 801d352:	461e      	mov	r6, r3
 801d354:	da0d      	bge.n	801d372 <__swhatbuf_r+0x2e>
 801d356:	89a3      	ldrh	r3, [r4, #12]
 801d358:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d35c:	f04f 0100 	mov.w	r1, #0
 801d360:	bf14      	ite	ne
 801d362:	2340      	movne	r3, #64	@ 0x40
 801d364:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d368:	2000      	movs	r0, #0
 801d36a:	6031      	str	r1, [r6, #0]
 801d36c:	602b      	str	r3, [r5, #0]
 801d36e:	b016      	add	sp, #88	@ 0x58
 801d370:	bd70      	pop	{r4, r5, r6, pc}
 801d372:	466a      	mov	r2, sp
 801d374:	f000 f848 	bl	801d408 <_fstat_r>
 801d378:	2800      	cmp	r0, #0
 801d37a:	dbec      	blt.n	801d356 <__swhatbuf_r+0x12>
 801d37c:	9901      	ldr	r1, [sp, #4]
 801d37e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d382:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d386:	4259      	negs	r1, r3
 801d388:	4159      	adcs	r1, r3
 801d38a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d38e:	e7eb      	b.n	801d368 <__swhatbuf_r+0x24>

0801d390 <__smakebuf_r>:
 801d390:	898b      	ldrh	r3, [r1, #12]
 801d392:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d394:	079d      	lsls	r5, r3, #30
 801d396:	4606      	mov	r6, r0
 801d398:	460c      	mov	r4, r1
 801d39a:	d507      	bpl.n	801d3ac <__smakebuf_r+0x1c>
 801d39c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d3a0:	6023      	str	r3, [r4, #0]
 801d3a2:	6123      	str	r3, [r4, #16]
 801d3a4:	2301      	movs	r3, #1
 801d3a6:	6163      	str	r3, [r4, #20]
 801d3a8:	b003      	add	sp, #12
 801d3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d3ac:	ab01      	add	r3, sp, #4
 801d3ae:	466a      	mov	r2, sp
 801d3b0:	f7ff ffc8 	bl	801d344 <__swhatbuf_r>
 801d3b4:	9f00      	ldr	r7, [sp, #0]
 801d3b6:	4605      	mov	r5, r0
 801d3b8:	4639      	mov	r1, r7
 801d3ba:	4630      	mov	r0, r6
 801d3bc:	f7fe fda0 	bl	801bf00 <_malloc_r>
 801d3c0:	b948      	cbnz	r0, 801d3d6 <__smakebuf_r+0x46>
 801d3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d3c6:	059a      	lsls	r2, r3, #22
 801d3c8:	d4ee      	bmi.n	801d3a8 <__smakebuf_r+0x18>
 801d3ca:	f023 0303 	bic.w	r3, r3, #3
 801d3ce:	f043 0302 	orr.w	r3, r3, #2
 801d3d2:	81a3      	strh	r3, [r4, #12]
 801d3d4:	e7e2      	b.n	801d39c <__smakebuf_r+0xc>
 801d3d6:	89a3      	ldrh	r3, [r4, #12]
 801d3d8:	6020      	str	r0, [r4, #0]
 801d3da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d3de:	81a3      	strh	r3, [r4, #12]
 801d3e0:	9b01      	ldr	r3, [sp, #4]
 801d3e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d3e6:	b15b      	cbz	r3, 801d400 <__smakebuf_r+0x70>
 801d3e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d3ec:	4630      	mov	r0, r6
 801d3ee:	f000 f81d 	bl	801d42c <_isatty_r>
 801d3f2:	b128      	cbz	r0, 801d400 <__smakebuf_r+0x70>
 801d3f4:	89a3      	ldrh	r3, [r4, #12]
 801d3f6:	f023 0303 	bic.w	r3, r3, #3
 801d3fa:	f043 0301 	orr.w	r3, r3, #1
 801d3fe:	81a3      	strh	r3, [r4, #12]
 801d400:	89a3      	ldrh	r3, [r4, #12]
 801d402:	431d      	orrs	r5, r3
 801d404:	81a5      	strh	r5, [r4, #12]
 801d406:	e7cf      	b.n	801d3a8 <__smakebuf_r+0x18>

0801d408 <_fstat_r>:
 801d408:	b538      	push	{r3, r4, r5, lr}
 801d40a:	4d07      	ldr	r5, [pc, #28]	@ (801d428 <_fstat_r+0x20>)
 801d40c:	2300      	movs	r3, #0
 801d40e:	4604      	mov	r4, r0
 801d410:	4608      	mov	r0, r1
 801d412:	4611      	mov	r1, r2
 801d414:	602b      	str	r3, [r5, #0]
 801d416:	f7e5 fd05 	bl	8002e24 <_fstat>
 801d41a:	1c43      	adds	r3, r0, #1
 801d41c:	d102      	bne.n	801d424 <_fstat_r+0x1c>
 801d41e:	682b      	ldr	r3, [r5, #0]
 801d420:	b103      	cbz	r3, 801d424 <_fstat_r+0x1c>
 801d422:	6023      	str	r3, [r4, #0]
 801d424:	bd38      	pop	{r3, r4, r5, pc}
 801d426:	bf00      	nop
 801d428:	2401da30 	.word	0x2401da30

0801d42c <_isatty_r>:
 801d42c:	b538      	push	{r3, r4, r5, lr}
 801d42e:	4d06      	ldr	r5, [pc, #24]	@ (801d448 <_isatty_r+0x1c>)
 801d430:	2300      	movs	r3, #0
 801d432:	4604      	mov	r4, r0
 801d434:	4608      	mov	r0, r1
 801d436:	602b      	str	r3, [r5, #0]
 801d438:	f7e5 fd04 	bl	8002e44 <_isatty>
 801d43c:	1c43      	adds	r3, r0, #1
 801d43e:	d102      	bne.n	801d446 <_isatty_r+0x1a>
 801d440:	682b      	ldr	r3, [r5, #0]
 801d442:	b103      	cbz	r3, 801d446 <_isatty_r+0x1a>
 801d444:	6023      	str	r3, [r4, #0]
 801d446:	bd38      	pop	{r3, r4, r5, pc}
 801d448:	2401da30 	.word	0x2401da30
 801d44c:	00000000 	.word	0x00000000

0801d450 <sin>:
 801d450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d452:	eeb0 7b40 	vmov.f64	d7, d0
 801d456:	ee17 3a90 	vmov	r3, s15
 801d45a:	4a21      	ldr	r2, [pc, #132]	@ (801d4e0 <sin+0x90>)
 801d45c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d460:	4293      	cmp	r3, r2
 801d462:	d807      	bhi.n	801d474 <sin+0x24>
 801d464:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801d4d8 <sin+0x88>
 801d468:	2000      	movs	r0, #0
 801d46a:	b005      	add	sp, #20
 801d46c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d470:	f000 b986 	b.w	801d780 <__kernel_sin>
 801d474:	4a1b      	ldr	r2, [pc, #108]	@ (801d4e4 <sin+0x94>)
 801d476:	4293      	cmp	r3, r2
 801d478:	d904      	bls.n	801d484 <sin+0x34>
 801d47a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801d47e:	b005      	add	sp, #20
 801d480:	f85d fb04 	ldr.w	pc, [sp], #4
 801d484:	4668      	mov	r0, sp
 801d486:	f000 f9d3 	bl	801d830 <__ieee754_rem_pio2>
 801d48a:	f000 0003 	and.w	r0, r0, #3
 801d48e:	2801      	cmp	r0, #1
 801d490:	d00a      	beq.n	801d4a8 <sin+0x58>
 801d492:	2802      	cmp	r0, #2
 801d494:	d00f      	beq.n	801d4b6 <sin+0x66>
 801d496:	b9c0      	cbnz	r0, 801d4ca <sin+0x7a>
 801d498:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d49c:	ed9d 0b00 	vldr	d0, [sp]
 801d4a0:	2001      	movs	r0, #1
 801d4a2:	f000 f96d 	bl	801d780 <__kernel_sin>
 801d4a6:	e7ea      	b.n	801d47e <sin+0x2e>
 801d4a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d4ac:	ed9d 0b00 	vldr	d0, [sp]
 801d4b0:	f000 f8fe 	bl	801d6b0 <__kernel_cos>
 801d4b4:	e7e3      	b.n	801d47e <sin+0x2e>
 801d4b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d4ba:	ed9d 0b00 	vldr	d0, [sp]
 801d4be:	2001      	movs	r0, #1
 801d4c0:	f000 f95e 	bl	801d780 <__kernel_sin>
 801d4c4:	eeb1 0b40 	vneg.f64	d0, d0
 801d4c8:	e7d9      	b.n	801d47e <sin+0x2e>
 801d4ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d4ce:	ed9d 0b00 	vldr	d0, [sp]
 801d4d2:	f000 f8ed 	bl	801d6b0 <__kernel_cos>
 801d4d6:	e7f5      	b.n	801d4c4 <sin+0x74>
	...
 801d4e0:	3fe921fb 	.word	0x3fe921fb
 801d4e4:	7fefffff 	.word	0x7fefffff

0801d4e8 <sinf_poly>:
 801d4e8:	07cb      	lsls	r3, r1, #31
 801d4ea:	d412      	bmi.n	801d512 <sinf_poly+0x2a>
 801d4ec:	ee21 5b00 	vmul.f64	d5, d1, d0
 801d4f0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801d4f4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801d4f8:	eea6 7b01 	vfma.f64	d7, d6, d1
 801d4fc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801d500:	ee21 1b05 	vmul.f64	d1, d1, d5
 801d504:	eea6 0b05 	vfma.f64	d0, d6, d5
 801d508:	eea7 0b01 	vfma.f64	d0, d7, d1
 801d50c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d510:	4770      	bx	lr
 801d512:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801d516:	ee21 5b01 	vmul.f64	d5, d1, d1
 801d51a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801d51e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801d522:	eea1 7b06 	vfma.f64	d7, d1, d6
 801d526:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801d52a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801d52e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801d532:	ee21 1b05 	vmul.f64	d1, d1, d5
 801d536:	eea5 0b06 	vfma.f64	d0, d5, d6
 801d53a:	e7e5      	b.n	801d508 <sinf_poly+0x20>
 801d53c:	0000      	movs	r0, r0
	...

0801d540 <sinf>:
 801d540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d542:	ee10 4a10 	vmov	r4, s0
 801d546:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801d54a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801d54e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801d552:	eef0 7a40 	vmov.f32	s15, s0
 801d556:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801d55a:	d218      	bcs.n	801d58e <sinf+0x4e>
 801d55c:	ee26 1b06 	vmul.f64	d1, d6, d6
 801d560:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801d564:	d20a      	bcs.n	801d57c <sinf+0x3c>
 801d566:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801d56a:	d103      	bne.n	801d574 <sinf+0x34>
 801d56c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801d570:	ed8d 1a01 	vstr	s2, [sp, #4]
 801d574:	eeb0 0a67 	vmov.f32	s0, s15
 801d578:	b003      	add	sp, #12
 801d57a:	bd30      	pop	{r4, r5, pc}
 801d57c:	483a      	ldr	r0, [pc, #232]	@ (801d668 <sinf+0x128>)
 801d57e:	eeb0 0b46 	vmov.f64	d0, d6
 801d582:	2100      	movs	r1, #0
 801d584:	b003      	add	sp, #12
 801d586:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d58a:	f7ff bfad 	b.w	801d4e8 <sinf_poly>
 801d58e:	f240 422e 	movw	r2, #1070	@ 0x42e
 801d592:	4293      	cmp	r3, r2
 801d594:	d824      	bhi.n	801d5e0 <sinf+0xa0>
 801d596:	4b34      	ldr	r3, [pc, #208]	@ (801d668 <sinf+0x128>)
 801d598:	ed93 7b08 	vldr	d7, [r3, #32]
 801d59c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801d5a0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801d5a4:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801d5a8:	ee17 1a90 	vmov	r1, s15
 801d5ac:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801d5b0:	1609      	asrs	r1, r1, #24
 801d5b2:	ee07 1a90 	vmov	s15, r1
 801d5b6:	f001 0203 	and.w	r2, r1, #3
 801d5ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801d5be:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801d5c2:	ed92 0b00 	vldr	d0, [r2]
 801d5c6:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801d5ca:	f011 0f02 	tst.w	r1, #2
 801d5ce:	eea5 6b47 	vfms.f64	d6, d5, d7
 801d5d2:	bf08      	it	eq
 801d5d4:	4618      	moveq	r0, r3
 801d5d6:	ee26 1b06 	vmul.f64	d1, d6, d6
 801d5da:	ee20 0b06 	vmul.f64	d0, d0, d6
 801d5de:	e7d1      	b.n	801d584 <sinf+0x44>
 801d5e0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801d5e4:	d237      	bcs.n	801d656 <sinf+0x116>
 801d5e6:	4921      	ldr	r1, [pc, #132]	@ (801d66c <sinf+0x12c>)
 801d5e8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801d5ec:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801d5f0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801d5f4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801d5f8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801d5fc:	6a10      	ldr	r0, [r2, #32]
 801d5fe:	6912      	ldr	r2, [r2, #16]
 801d600:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801d604:	40ab      	lsls	r3, r5
 801d606:	fba0 5003 	umull	r5, r0, r0, r3
 801d60a:	4359      	muls	r1, r3
 801d60c:	fbe3 0102 	umlal	r0, r1, r3, r2
 801d610:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801d614:	0f9d      	lsrs	r5, r3, #30
 801d616:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801d61a:	1ac9      	subs	r1, r1, r3
 801d61c:	f7e3 f86e 	bl	80006fc <__aeabi_l2d>
 801d620:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801d624:	4b10      	ldr	r3, [pc, #64]	@ (801d668 <sinf+0x128>)
 801d626:	f004 0203 	and.w	r2, r4, #3
 801d62a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801d62e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801d660 <sinf+0x120>
 801d632:	ed92 0b00 	vldr	d0, [r2]
 801d636:	ec41 0b17 	vmov	d7, r0, r1
 801d63a:	f014 0f02 	tst.w	r4, #2
 801d63e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801d642:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801d646:	4629      	mov	r1, r5
 801d648:	bf08      	it	eq
 801d64a:	4618      	moveq	r0, r3
 801d64c:	ee27 1b07 	vmul.f64	d1, d7, d7
 801d650:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d654:	e796      	b.n	801d584 <sinf+0x44>
 801d656:	b003      	add	sp, #12
 801d658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d65c:	f000 b816 	b.w	801d68c <__math_invalidf>
 801d660:	54442d18 	.word	0x54442d18
 801d664:	3c1921fb 	.word	0x3c1921fb
 801d668:	0801f398 	.word	0x0801f398
 801d66c:	0801f338 	.word	0x0801f338

0801d670 <with_errnof>:
 801d670:	b510      	push	{r4, lr}
 801d672:	ed2d 8b02 	vpush	{d8}
 801d676:	eeb0 8a40 	vmov.f32	s16, s0
 801d67a:	4604      	mov	r4, r0
 801d67c:	f7fd fa6e 	bl	801ab5c <__errno>
 801d680:	eeb0 0a48 	vmov.f32	s0, s16
 801d684:	ecbd 8b02 	vpop	{d8}
 801d688:	6004      	str	r4, [r0, #0]
 801d68a:	bd10      	pop	{r4, pc}

0801d68c <__math_invalidf>:
 801d68c:	eef0 7a40 	vmov.f32	s15, s0
 801d690:	ee30 7a40 	vsub.f32	s14, s0, s0
 801d694:	eef4 7a67 	vcmp.f32	s15, s15
 801d698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d69c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801d6a0:	d602      	bvs.n	801d6a8 <__math_invalidf+0x1c>
 801d6a2:	2021      	movs	r0, #33	@ 0x21
 801d6a4:	f7ff bfe4 	b.w	801d670 <with_errnof>
 801d6a8:	4770      	bx	lr
 801d6aa:	0000      	movs	r0, r0
 801d6ac:	0000      	movs	r0, r0
	...

0801d6b0 <__kernel_cos>:
 801d6b0:	eeb0 5b40 	vmov.f64	d5, d0
 801d6b4:	ee15 1a90 	vmov	r1, s11
 801d6b8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d6bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801d6c0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801d6c4:	d204      	bcs.n	801d6d0 <__kernel_cos+0x20>
 801d6c6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801d6ca:	ee17 3a90 	vmov	r3, s15
 801d6ce:	b343      	cbz	r3, 801d722 <__kernel_cos+0x72>
 801d6d0:	ee25 6b05 	vmul.f64	d6, d5, d5
 801d6d4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801d6d8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801d748 <__kernel_cos+0x98>
 801d6dc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801d750 <__kernel_cos+0xa0>
 801d6e0:	eea6 4b07 	vfma.f64	d4, d6, d7
 801d6e4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801d758 <__kernel_cos+0xa8>
 801d6e8:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d6ec:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801d760 <__kernel_cos+0xb0>
 801d6f0:	eea7 4b06 	vfma.f64	d4, d7, d6
 801d6f4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801d768 <__kernel_cos+0xb8>
 801d6f8:	4b1f      	ldr	r3, [pc, #124]	@ (801d778 <__kernel_cos+0xc8>)
 801d6fa:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d6fe:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801d770 <__kernel_cos+0xc0>
 801d702:	4299      	cmp	r1, r3
 801d704:	eea7 4b06 	vfma.f64	d4, d7, d6
 801d708:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801d70c:	ee24 4b06 	vmul.f64	d4, d4, d6
 801d710:	ee26 7b07 	vmul.f64	d7, d6, d7
 801d714:	eea6 1b04 	vfma.f64	d1, d6, d4
 801d718:	d804      	bhi.n	801d724 <__kernel_cos+0x74>
 801d71a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801d71e:	ee30 0b47 	vsub.f64	d0, d0, d7
 801d722:	4770      	bx	lr
 801d724:	4b15      	ldr	r3, [pc, #84]	@ (801d77c <__kernel_cos+0xcc>)
 801d726:	4299      	cmp	r1, r3
 801d728:	d809      	bhi.n	801d73e <__kernel_cos+0x8e>
 801d72a:	2200      	movs	r2, #0
 801d72c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801d730:	ec43 2b16 	vmov	d6, r2, r3
 801d734:	ee30 0b46 	vsub.f64	d0, d0, d6
 801d738:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d73c:	e7ed      	b.n	801d71a <__kernel_cos+0x6a>
 801d73e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801d742:	e7f7      	b.n	801d734 <__kernel_cos+0x84>
 801d744:	f3af 8000 	nop.w
 801d748:	be8838d4 	.word	0xbe8838d4
 801d74c:	bda8fae9 	.word	0xbda8fae9
 801d750:	bdb4b1c4 	.word	0xbdb4b1c4
 801d754:	3e21ee9e 	.word	0x3e21ee9e
 801d758:	809c52ad 	.word	0x809c52ad
 801d75c:	be927e4f 	.word	0xbe927e4f
 801d760:	19cb1590 	.word	0x19cb1590
 801d764:	3efa01a0 	.word	0x3efa01a0
 801d768:	16c15177 	.word	0x16c15177
 801d76c:	bf56c16c 	.word	0xbf56c16c
 801d770:	5555554c 	.word	0x5555554c
 801d774:	3fa55555 	.word	0x3fa55555
 801d778:	3fd33332 	.word	0x3fd33332
 801d77c:	3fe90000 	.word	0x3fe90000

0801d780 <__kernel_sin>:
 801d780:	ee10 3a90 	vmov	r3, s1
 801d784:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d788:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801d78c:	d204      	bcs.n	801d798 <__kernel_sin+0x18>
 801d78e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801d792:	ee17 3a90 	vmov	r3, s15
 801d796:	b35b      	cbz	r3, 801d7f0 <__kernel_sin+0x70>
 801d798:	ee20 6b00 	vmul.f64	d6, d0, d0
 801d79c:	ee20 5b06 	vmul.f64	d5, d0, d6
 801d7a0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801d7f8 <__kernel_sin+0x78>
 801d7a4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801d800 <__kernel_sin+0x80>
 801d7a8:	eea6 4b07 	vfma.f64	d4, d6, d7
 801d7ac:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801d808 <__kernel_sin+0x88>
 801d7b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d7b4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801d810 <__kernel_sin+0x90>
 801d7b8:	eea7 4b06 	vfma.f64	d4, d7, d6
 801d7bc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801d818 <__kernel_sin+0x98>
 801d7c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d7c4:	b930      	cbnz	r0, 801d7d4 <__kernel_sin+0x54>
 801d7c6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801d820 <__kernel_sin+0xa0>
 801d7ca:	eea6 4b07 	vfma.f64	d4, d6, d7
 801d7ce:	eea4 0b05 	vfma.f64	d0, d4, d5
 801d7d2:	4770      	bx	lr
 801d7d4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801d7d8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801d7dc:	eea1 7b04 	vfma.f64	d7, d1, d4
 801d7e0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801d7e4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801d828 <__kernel_sin+0xa8>
 801d7e8:	eea5 1b07 	vfma.f64	d1, d5, d7
 801d7ec:	ee30 0b41 	vsub.f64	d0, d0, d1
 801d7f0:	4770      	bx	lr
 801d7f2:	bf00      	nop
 801d7f4:	f3af 8000 	nop.w
 801d7f8:	5acfd57c 	.word	0x5acfd57c
 801d7fc:	3de5d93a 	.word	0x3de5d93a
 801d800:	8a2b9ceb 	.word	0x8a2b9ceb
 801d804:	be5ae5e6 	.word	0xbe5ae5e6
 801d808:	57b1fe7d 	.word	0x57b1fe7d
 801d80c:	3ec71de3 	.word	0x3ec71de3
 801d810:	19c161d5 	.word	0x19c161d5
 801d814:	bf2a01a0 	.word	0xbf2a01a0
 801d818:	1110f8a6 	.word	0x1110f8a6
 801d81c:	3f811111 	.word	0x3f811111
 801d820:	55555549 	.word	0x55555549
 801d824:	bfc55555 	.word	0xbfc55555
 801d828:	55555549 	.word	0x55555549
 801d82c:	3fc55555 	.word	0x3fc55555

0801d830 <__ieee754_rem_pio2>:
 801d830:	b570      	push	{r4, r5, r6, lr}
 801d832:	eeb0 7b40 	vmov.f64	d7, d0
 801d836:	ee17 5a90 	vmov	r5, s15
 801d83a:	4b99      	ldr	r3, [pc, #612]	@ (801daa0 <__ieee754_rem_pio2+0x270>)
 801d83c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801d840:	429e      	cmp	r6, r3
 801d842:	b088      	sub	sp, #32
 801d844:	4604      	mov	r4, r0
 801d846:	d807      	bhi.n	801d858 <__ieee754_rem_pio2+0x28>
 801d848:	2200      	movs	r2, #0
 801d84a:	2300      	movs	r3, #0
 801d84c:	ed84 0b00 	vstr	d0, [r4]
 801d850:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801d854:	2000      	movs	r0, #0
 801d856:	e01b      	b.n	801d890 <__ieee754_rem_pio2+0x60>
 801d858:	4b92      	ldr	r3, [pc, #584]	@ (801daa4 <__ieee754_rem_pio2+0x274>)
 801d85a:	429e      	cmp	r6, r3
 801d85c:	d83b      	bhi.n	801d8d6 <__ieee754_rem_pio2+0xa6>
 801d85e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801d862:	2d00      	cmp	r5, #0
 801d864:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801da60 <__ieee754_rem_pio2+0x230>
 801d868:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801d86c:	dd19      	ble.n	801d8a2 <__ieee754_rem_pio2+0x72>
 801d86e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801d872:	429e      	cmp	r6, r3
 801d874:	d00e      	beq.n	801d894 <__ieee754_rem_pio2+0x64>
 801d876:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801da68 <__ieee754_rem_pio2+0x238>
 801d87a:	ee37 6b45 	vsub.f64	d6, d7, d5
 801d87e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d882:	ed84 6b00 	vstr	d6, [r4]
 801d886:	ee37 7b45 	vsub.f64	d7, d7, d5
 801d88a:	ed84 7b02 	vstr	d7, [r4, #8]
 801d88e:	2001      	movs	r0, #1
 801d890:	b008      	add	sp, #32
 801d892:	bd70      	pop	{r4, r5, r6, pc}
 801d894:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801da70 <__ieee754_rem_pio2+0x240>
 801d898:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801da78 <__ieee754_rem_pio2+0x248>
 801d89c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d8a0:	e7eb      	b.n	801d87a <__ieee754_rem_pio2+0x4a>
 801d8a2:	429e      	cmp	r6, r3
 801d8a4:	ee30 7b06 	vadd.f64	d7, d0, d6
 801d8a8:	d00e      	beq.n	801d8c8 <__ieee754_rem_pio2+0x98>
 801d8aa:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801da68 <__ieee754_rem_pio2+0x238>
 801d8ae:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d8b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d8b6:	ed84 6b00 	vstr	d6, [r4]
 801d8ba:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d8be:	f04f 30ff 	mov.w	r0, #4294967295
 801d8c2:	ed84 7b02 	vstr	d7, [r4, #8]
 801d8c6:	e7e3      	b.n	801d890 <__ieee754_rem_pio2+0x60>
 801d8c8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801da70 <__ieee754_rem_pio2+0x240>
 801d8cc:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801da78 <__ieee754_rem_pio2+0x248>
 801d8d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d8d4:	e7eb      	b.n	801d8ae <__ieee754_rem_pio2+0x7e>
 801d8d6:	4b74      	ldr	r3, [pc, #464]	@ (801daa8 <__ieee754_rem_pio2+0x278>)
 801d8d8:	429e      	cmp	r6, r3
 801d8da:	d870      	bhi.n	801d9be <__ieee754_rem_pio2+0x18e>
 801d8dc:	f000 f8ec 	bl	801dab8 <fabs>
 801d8e0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801d8e4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801da80 <__ieee754_rem_pio2+0x250>
 801d8e8:	eea0 7b06 	vfma.f64	d7, d0, d6
 801d8ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801d8f0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801d8f4:	ee17 0a90 	vmov	r0, s15
 801d8f8:	eeb1 4b45 	vneg.f64	d4, d5
 801d8fc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801da60 <__ieee754_rem_pio2+0x230>
 801d900:	eea5 0b47 	vfms.f64	d0, d5, d7
 801d904:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801da68 <__ieee754_rem_pio2+0x238>
 801d908:	281f      	cmp	r0, #31
 801d90a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801d90e:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d912:	dc05      	bgt.n	801d920 <__ieee754_rem_pio2+0xf0>
 801d914:	4b65      	ldr	r3, [pc, #404]	@ (801daac <__ieee754_rem_pio2+0x27c>)
 801d916:	1e42      	subs	r2, r0, #1
 801d918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d91c:	42b3      	cmp	r3, r6
 801d91e:	d109      	bne.n	801d934 <__ieee754_rem_pio2+0x104>
 801d920:	ee16 3a90 	vmov	r3, s13
 801d924:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801d928:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801d92c:	2b10      	cmp	r3, #16
 801d92e:	ea4f 5226 	mov.w	r2, r6, asr #20
 801d932:	dc02      	bgt.n	801d93a <__ieee754_rem_pio2+0x10a>
 801d934:	ed84 6b00 	vstr	d6, [r4]
 801d938:	e01a      	b.n	801d970 <__ieee754_rem_pio2+0x140>
 801d93a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801da70 <__ieee754_rem_pio2+0x240>
 801d93e:	eeb0 6b40 	vmov.f64	d6, d0
 801d942:	eea4 6b03 	vfma.f64	d6, d4, d3
 801d946:	ee30 7b46 	vsub.f64	d7, d0, d6
 801d94a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801d94e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801da78 <__ieee754_rem_pio2+0x248>
 801d952:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801d956:	ee36 3b47 	vsub.f64	d3, d6, d7
 801d95a:	ee13 3a90 	vmov	r3, s7
 801d95e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801d962:	1ad3      	subs	r3, r2, r3
 801d964:	2b31      	cmp	r3, #49	@ 0x31
 801d966:	dc17      	bgt.n	801d998 <__ieee754_rem_pio2+0x168>
 801d968:	eeb0 0b46 	vmov.f64	d0, d6
 801d96c:	ed84 3b00 	vstr	d3, [r4]
 801d970:	ed94 6b00 	vldr	d6, [r4]
 801d974:	2d00      	cmp	r5, #0
 801d976:	ee30 0b46 	vsub.f64	d0, d0, d6
 801d97a:	ee30 0b47 	vsub.f64	d0, d0, d7
 801d97e:	ed84 0b02 	vstr	d0, [r4, #8]
 801d982:	da85      	bge.n	801d890 <__ieee754_rem_pio2+0x60>
 801d984:	eeb1 6b46 	vneg.f64	d6, d6
 801d988:	eeb1 0b40 	vneg.f64	d0, d0
 801d98c:	ed84 6b00 	vstr	d6, [r4]
 801d990:	ed84 0b02 	vstr	d0, [r4, #8]
 801d994:	4240      	negs	r0, r0
 801d996:	e77b      	b.n	801d890 <__ieee754_rem_pio2+0x60>
 801d998:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801da88 <__ieee754_rem_pio2+0x258>
 801d99c:	eeb0 0b46 	vmov.f64	d0, d6
 801d9a0:	eea4 0b07 	vfma.f64	d0, d4, d7
 801d9a4:	ee36 6b40 	vsub.f64	d6, d6, d0
 801d9a8:	eea4 6b07 	vfma.f64	d6, d4, d7
 801d9ac:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801da90 <__ieee754_rem_pio2+0x260>
 801d9b0:	eeb0 7b46 	vmov.f64	d7, d6
 801d9b4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801d9b8:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d9bc:	e7ba      	b.n	801d934 <__ieee754_rem_pio2+0x104>
 801d9be:	4b3c      	ldr	r3, [pc, #240]	@ (801dab0 <__ieee754_rem_pio2+0x280>)
 801d9c0:	429e      	cmp	r6, r3
 801d9c2:	d906      	bls.n	801d9d2 <__ieee754_rem_pio2+0x1a2>
 801d9c4:	ee30 7b40 	vsub.f64	d7, d0, d0
 801d9c8:	ed80 7b02 	vstr	d7, [r0, #8]
 801d9cc:	ed80 7b00 	vstr	d7, [r0]
 801d9d0:	e740      	b.n	801d854 <__ieee754_rem_pio2+0x24>
 801d9d2:	ee10 3a10 	vmov	r3, s0
 801d9d6:	1532      	asrs	r2, r6, #20
 801d9d8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801d9dc:	4618      	mov	r0, r3
 801d9de:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801d9e2:	ec41 0b17 	vmov	d7, r0, r1
 801d9e6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d9ea:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801da98 <__ieee754_rem_pio2+0x268>
 801d9ee:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d9f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d9f6:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d9fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d9fe:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801da02:	a808      	add	r0, sp, #32
 801da04:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801da08:	ee37 7b46 	vsub.f64	d7, d7, d6
 801da0c:	ed8d 6b04 	vstr	d6, [sp, #16]
 801da10:	ee27 7b05 	vmul.f64	d7, d7, d5
 801da14:	ed8d 7b06 	vstr	d7, [sp, #24]
 801da18:	2103      	movs	r1, #3
 801da1a:	ed30 7b02 	vldmdb	r0!, {d7}
 801da1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801da22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da26:	460b      	mov	r3, r1
 801da28:	f101 31ff 	add.w	r1, r1, #4294967295
 801da2c:	d0f5      	beq.n	801da1a <__ieee754_rem_pio2+0x1ea>
 801da2e:	4921      	ldr	r1, [pc, #132]	@ (801dab4 <__ieee754_rem_pio2+0x284>)
 801da30:	9101      	str	r1, [sp, #4]
 801da32:	2102      	movs	r1, #2
 801da34:	9100      	str	r1, [sp, #0]
 801da36:	a802      	add	r0, sp, #8
 801da38:	4621      	mov	r1, r4
 801da3a:	f000 f845 	bl	801dac8 <__kernel_rem_pio2>
 801da3e:	2d00      	cmp	r5, #0
 801da40:	f6bf af26 	bge.w	801d890 <__ieee754_rem_pio2+0x60>
 801da44:	ed94 7b00 	vldr	d7, [r4]
 801da48:	eeb1 7b47 	vneg.f64	d7, d7
 801da4c:	ed84 7b00 	vstr	d7, [r4]
 801da50:	ed94 7b02 	vldr	d7, [r4, #8]
 801da54:	eeb1 7b47 	vneg.f64	d7, d7
 801da58:	ed84 7b02 	vstr	d7, [r4, #8]
 801da5c:	e79a      	b.n	801d994 <__ieee754_rem_pio2+0x164>
 801da5e:	bf00      	nop
 801da60:	54400000 	.word	0x54400000
 801da64:	3ff921fb 	.word	0x3ff921fb
 801da68:	1a626331 	.word	0x1a626331
 801da6c:	3dd0b461 	.word	0x3dd0b461
 801da70:	1a600000 	.word	0x1a600000
 801da74:	3dd0b461 	.word	0x3dd0b461
 801da78:	2e037073 	.word	0x2e037073
 801da7c:	3ba3198a 	.word	0x3ba3198a
 801da80:	6dc9c883 	.word	0x6dc9c883
 801da84:	3fe45f30 	.word	0x3fe45f30
 801da88:	2e000000 	.word	0x2e000000
 801da8c:	3ba3198a 	.word	0x3ba3198a
 801da90:	252049c1 	.word	0x252049c1
 801da94:	397b839a 	.word	0x397b839a
 801da98:	00000000 	.word	0x00000000
 801da9c:	41700000 	.word	0x41700000
 801daa0:	3fe921fb 	.word	0x3fe921fb
 801daa4:	4002d97b 	.word	0x4002d97b
 801daa8:	413921fb 	.word	0x413921fb
 801daac:	0801f478 	.word	0x0801f478
 801dab0:	7fefffff 	.word	0x7fefffff
 801dab4:	0801f4f8 	.word	0x0801f4f8

0801dab8 <fabs>:
 801dab8:	ec51 0b10 	vmov	r0, r1, d0
 801dabc:	4602      	mov	r2, r0
 801dabe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801dac2:	ec43 2b10 	vmov	d0, r2, r3
 801dac6:	4770      	bx	lr

0801dac8 <__kernel_rem_pio2>:
 801dac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dacc:	ed2d 8b06 	vpush	{d8-d10}
 801dad0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801dad4:	469b      	mov	fp, r3
 801dad6:	9001      	str	r0, [sp, #4]
 801dad8:	4bbb      	ldr	r3, [pc, #748]	@ (801ddc8 <__kernel_rem_pio2+0x300>)
 801dada:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801dadc:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801dae0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801dae4:	f112 0f14 	cmn.w	r2, #20
 801dae8:	bfa8      	it	ge
 801daea:	1ed3      	subge	r3, r2, #3
 801daec:	f10b 3aff 	add.w	sl, fp, #4294967295
 801daf0:	bfb8      	it	lt
 801daf2:	2300      	movlt	r3, #0
 801daf4:	f06f 0517 	mvn.w	r5, #23
 801daf8:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801ddb0 <__kernel_rem_pio2+0x2e8>
 801dafc:	bfa4      	itt	ge
 801dafe:	2018      	movge	r0, #24
 801db00:	fb93 f3f0 	sdivge	r3, r3, r0
 801db04:	fb03 5505 	mla	r5, r3, r5, r5
 801db08:	eba3 040a 	sub.w	r4, r3, sl
 801db0c:	4415      	add	r5, r2
 801db0e:	460f      	mov	r7, r1
 801db10:	eb09 060a 	add.w	r6, r9, sl
 801db14:	a81a      	add	r0, sp, #104	@ 0x68
 801db16:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801db1a:	2200      	movs	r2, #0
 801db1c:	42b2      	cmp	r2, r6
 801db1e:	dd0e      	ble.n	801db3e <__kernel_rem_pio2+0x76>
 801db20:	aa1a      	add	r2, sp, #104	@ 0x68
 801db22:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801db26:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801db2a:	2600      	movs	r6, #0
 801db2c:	454e      	cmp	r6, r9
 801db2e:	dc25      	bgt.n	801db7c <__kernel_rem_pio2+0xb4>
 801db30:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801ddb0 <__kernel_rem_pio2+0x2e8>
 801db34:	f8dd c004 	ldr.w	ip, [sp, #4]
 801db38:	4614      	mov	r4, r2
 801db3a:	2000      	movs	r0, #0
 801db3c:	e015      	b.n	801db6a <__kernel_rem_pio2+0xa2>
 801db3e:	42d4      	cmn	r4, r2
 801db40:	d409      	bmi.n	801db56 <__kernel_rem_pio2+0x8e>
 801db42:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801db46:	ee07 1a90 	vmov	s15, r1
 801db4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801db4e:	eca0 7b02 	vstmia	r0!, {d7}
 801db52:	3201      	adds	r2, #1
 801db54:	e7e2      	b.n	801db1c <__kernel_rem_pio2+0x54>
 801db56:	eeb0 7b46 	vmov.f64	d7, d6
 801db5a:	e7f8      	b.n	801db4e <__kernel_rem_pio2+0x86>
 801db5c:	ecbc 5b02 	vldmia	ip!, {d5}
 801db60:	ed94 6b00 	vldr	d6, [r4]
 801db64:	3001      	adds	r0, #1
 801db66:	eea5 7b06 	vfma.f64	d7, d5, d6
 801db6a:	4550      	cmp	r0, sl
 801db6c:	f1a4 0408 	sub.w	r4, r4, #8
 801db70:	ddf4      	ble.n	801db5c <__kernel_rem_pio2+0x94>
 801db72:	ecae 7b02 	vstmia	lr!, {d7}
 801db76:	3601      	adds	r6, #1
 801db78:	3208      	adds	r2, #8
 801db7a:	e7d7      	b.n	801db2c <__kernel_rem_pio2+0x64>
 801db7c:	aa06      	add	r2, sp, #24
 801db7e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801ddb8 <__kernel_rem_pio2+0x2f0>
 801db82:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801ddc0 <__kernel_rem_pio2+0x2f8>
 801db86:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801db8a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801db8e:	9203      	str	r2, [sp, #12]
 801db90:	9302      	str	r3, [sp, #8]
 801db92:	464c      	mov	r4, r9
 801db94:	00e3      	lsls	r3, r4, #3
 801db96:	9304      	str	r3, [sp, #16]
 801db98:	ab92      	add	r3, sp, #584	@ 0x248
 801db9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801db9e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801dba2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801dba4:	ab06      	add	r3, sp, #24
 801dba6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801dbaa:	461e      	mov	r6, r3
 801dbac:	4620      	mov	r0, r4
 801dbae:	2800      	cmp	r0, #0
 801dbb0:	f1a2 0208 	sub.w	r2, r2, #8
 801dbb4:	dc4a      	bgt.n	801dc4c <__kernel_rem_pio2+0x184>
 801dbb6:	4628      	mov	r0, r5
 801dbb8:	9305      	str	r3, [sp, #20]
 801dbba:	f000 fa01 	bl	801dfc0 <scalbn>
 801dbbe:	eeb0 8b40 	vmov.f64	d8, d0
 801dbc2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801dbc6:	ee28 0b00 	vmul.f64	d0, d8, d0
 801dbca:	f000 fa79 	bl	801e0c0 <floor>
 801dbce:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801dbd2:	eea0 8b47 	vfms.f64	d8, d0, d7
 801dbd6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801dbda:	2d00      	cmp	r5, #0
 801dbdc:	ee17 8a90 	vmov	r8, s15
 801dbe0:	9b05      	ldr	r3, [sp, #20]
 801dbe2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801dbe6:	ee38 8b47 	vsub.f64	d8, d8, d7
 801dbea:	dd41      	ble.n	801dc70 <__kernel_rem_pio2+0x1a8>
 801dbec:	1e60      	subs	r0, r4, #1
 801dbee:	aa06      	add	r2, sp, #24
 801dbf0:	f1c5 0c18 	rsb	ip, r5, #24
 801dbf4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801dbf8:	fa46 f20c 	asr.w	r2, r6, ip
 801dbfc:	4490      	add	r8, r2
 801dbfe:	fa02 f20c 	lsl.w	r2, r2, ip
 801dc02:	1ab6      	subs	r6, r6, r2
 801dc04:	aa06      	add	r2, sp, #24
 801dc06:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801dc0a:	f1c5 0217 	rsb	r2, r5, #23
 801dc0e:	4116      	asrs	r6, r2
 801dc10:	2e00      	cmp	r6, #0
 801dc12:	dd3c      	ble.n	801dc8e <__kernel_rem_pio2+0x1c6>
 801dc14:	f04f 0c00 	mov.w	ip, #0
 801dc18:	f108 0801 	add.w	r8, r8, #1
 801dc1c:	4660      	mov	r0, ip
 801dc1e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801dc22:	4564      	cmp	r4, ip
 801dc24:	dc66      	bgt.n	801dcf4 <__kernel_rem_pio2+0x22c>
 801dc26:	2d00      	cmp	r5, #0
 801dc28:	dd03      	ble.n	801dc32 <__kernel_rem_pio2+0x16a>
 801dc2a:	2d01      	cmp	r5, #1
 801dc2c:	d072      	beq.n	801dd14 <__kernel_rem_pio2+0x24c>
 801dc2e:	2d02      	cmp	r5, #2
 801dc30:	d07a      	beq.n	801dd28 <__kernel_rem_pio2+0x260>
 801dc32:	2e02      	cmp	r6, #2
 801dc34:	d12b      	bne.n	801dc8e <__kernel_rem_pio2+0x1c6>
 801dc36:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801dc3a:	ee30 8b48 	vsub.f64	d8, d0, d8
 801dc3e:	b330      	cbz	r0, 801dc8e <__kernel_rem_pio2+0x1c6>
 801dc40:	4628      	mov	r0, r5
 801dc42:	f000 f9bd 	bl	801dfc0 <scalbn>
 801dc46:	ee38 8b40 	vsub.f64	d8, d8, d0
 801dc4a:	e020      	b.n	801dc8e <__kernel_rem_pio2+0x1c6>
 801dc4c:	ee20 7b09 	vmul.f64	d7, d0, d9
 801dc50:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801dc54:	3801      	subs	r0, #1
 801dc56:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801dc5a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801dc5e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801dc62:	eca6 0a01 	vstmia	r6!, {s0}
 801dc66:	ed92 0b00 	vldr	d0, [r2]
 801dc6a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801dc6e:	e79e      	b.n	801dbae <__kernel_rem_pio2+0xe6>
 801dc70:	d105      	bne.n	801dc7e <__kernel_rem_pio2+0x1b6>
 801dc72:	1e62      	subs	r2, r4, #1
 801dc74:	a906      	add	r1, sp, #24
 801dc76:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801dc7a:	15f6      	asrs	r6, r6, #23
 801dc7c:	e7c8      	b.n	801dc10 <__kernel_rem_pio2+0x148>
 801dc7e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801dc82:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801dc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc8a:	da31      	bge.n	801dcf0 <__kernel_rem_pio2+0x228>
 801dc8c:	2600      	movs	r6, #0
 801dc8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801dc92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc96:	f040 809b 	bne.w	801ddd0 <__kernel_rem_pio2+0x308>
 801dc9a:	1e62      	subs	r2, r4, #1
 801dc9c:	2000      	movs	r0, #0
 801dc9e:	454a      	cmp	r2, r9
 801dca0:	da49      	bge.n	801dd36 <__kernel_rem_pio2+0x26e>
 801dca2:	2800      	cmp	r0, #0
 801dca4:	d062      	beq.n	801dd6c <__kernel_rem_pio2+0x2a4>
 801dca6:	3c01      	subs	r4, #1
 801dca8:	ab06      	add	r3, sp, #24
 801dcaa:	3d18      	subs	r5, #24
 801dcac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d0f8      	beq.n	801dca6 <__kernel_rem_pio2+0x1de>
 801dcb4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801dcb8:	4628      	mov	r0, r5
 801dcba:	f000 f981 	bl	801dfc0 <scalbn>
 801dcbe:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801ddb8 <__kernel_rem_pio2+0x2f0>
 801dcc2:	1c62      	adds	r2, r4, #1
 801dcc4:	a96a      	add	r1, sp, #424	@ 0x1a8
 801dcc6:	00d3      	lsls	r3, r2, #3
 801dcc8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801dccc:	4622      	mov	r2, r4
 801dcce:	2a00      	cmp	r2, #0
 801dcd0:	f280 80a8 	bge.w	801de24 <__kernel_rem_pio2+0x35c>
 801dcd4:	4622      	mov	r2, r4
 801dcd6:	2a00      	cmp	r2, #0
 801dcd8:	f2c0 80c6 	blt.w	801de68 <__kernel_rem_pio2+0x3a0>
 801dcdc:	a96a      	add	r1, sp, #424	@ 0x1a8
 801dcde:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801dce2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801ddb0 <__kernel_rem_pio2+0x2e8>
 801dce6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801ddcc <__kernel_rem_pio2+0x304>
 801dcea:	2000      	movs	r0, #0
 801dcec:	1aa1      	subs	r1, r4, r2
 801dcee:	e0b0      	b.n	801de52 <__kernel_rem_pio2+0x38a>
 801dcf0:	2602      	movs	r6, #2
 801dcf2:	e78f      	b.n	801dc14 <__kernel_rem_pio2+0x14c>
 801dcf4:	f853 2b04 	ldr.w	r2, [r3], #4
 801dcf8:	b948      	cbnz	r0, 801dd0e <__kernel_rem_pio2+0x246>
 801dcfa:	b122      	cbz	r2, 801dd06 <__kernel_rem_pio2+0x23e>
 801dcfc:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801dd00:	f843 2c04 	str.w	r2, [r3, #-4]
 801dd04:	2201      	movs	r2, #1
 801dd06:	f10c 0c01 	add.w	ip, ip, #1
 801dd0a:	4610      	mov	r0, r2
 801dd0c:	e789      	b.n	801dc22 <__kernel_rem_pio2+0x15a>
 801dd0e:	ebae 0202 	sub.w	r2, lr, r2
 801dd12:	e7f5      	b.n	801dd00 <__kernel_rem_pio2+0x238>
 801dd14:	1e62      	subs	r2, r4, #1
 801dd16:	ab06      	add	r3, sp, #24
 801dd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dd1c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801dd20:	a906      	add	r1, sp, #24
 801dd22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801dd26:	e784      	b.n	801dc32 <__kernel_rem_pio2+0x16a>
 801dd28:	1e62      	subs	r2, r4, #1
 801dd2a:	ab06      	add	r3, sp, #24
 801dd2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dd30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801dd34:	e7f4      	b.n	801dd20 <__kernel_rem_pio2+0x258>
 801dd36:	ab06      	add	r3, sp, #24
 801dd38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dd3c:	3a01      	subs	r2, #1
 801dd3e:	4318      	orrs	r0, r3
 801dd40:	e7ad      	b.n	801dc9e <__kernel_rem_pio2+0x1d6>
 801dd42:	3301      	adds	r3, #1
 801dd44:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801dd48:	2800      	cmp	r0, #0
 801dd4a:	d0fa      	beq.n	801dd42 <__kernel_rem_pio2+0x27a>
 801dd4c:	9a04      	ldr	r2, [sp, #16]
 801dd4e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801dd52:	446a      	add	r2, sp
 801dd54:	eb04 000b 	add.w	r0, r4, fp
 801dd58:	a91a      	add	r1, sp, #104	@ 0x68
 801dd5a:	1c66      	adds	r6, r4, #1
 801dd5c:	3a98      	subs	r2, #152	@ 0x98
 801dd5e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801dd62:	4423      	add	r3, r4
 801dd64:	42b3      	cmp	r3, r6
 801dd66:	da04      	bge.n	801dd72 <__kernel_rem_pio2+0x2aa>
 801dd68:	461c      	mov	r4, r3
 801dd6a:	e713      	b.n	801db94 <__kernel_rem_pio2+0xcc>
 801dd6c:	9a03      	ldr	r2, [sp, #12]
 801dd6e:	2301      	movs	r3, #1
 801dd70:	e7e8      	b.n	801dd44 <__kernel_rem_pio2+0x27c>
 801dd72:	9902      	ldr	r1, [sp, #8]
 801dd74:	f8dd c004 	ldr.w	ip, [sp, #4]
 801dd78:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801dd7c:	9104      	str	r1, [sp, #16]
 801dd7e:	ee07 1a90 	vmov	s15, r1
 801dd82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801dd86:	2400      	movs	r4, #0
 801dd88:	eca0 7b02 	vstmia	r0!, {d7}
 801dd8c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801ddb0 <__kernel_rem_pio2+0x2e8>
 801dd90:	4686      	mov	lr, r0
 801dd92:	4554      	cmp	r4, sl
 801dd94:	dd03      	ble.n	801dd9e <__kernel_rem_pio2+0x2d6>
 801dd96:	eca2 7b02 	vstmia	r2!, {d7}
 801dd9a:	3601      	adds	r6, #1
 801dd9c:	e7e2      	b.n	801dd64 <__kernel_rem_pio2+0x29c>
 801dd9e:	ecbc 5b02 	vldmia	ip!, {d5}
 801dda2:	ed3e 6b02 	vldmdb	lr!, {d6}
 801dda6:	3401      	adds	r4, #1
 801dda8:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ddac:	e7f1      	b.n	801dd92 <__kernel_rem_pio2+0x2ca>
 801ddae:	bf00      	nop
	...
 801ddbc:	3e700000 	.word	0x3e700000
 801ddc0:	00000000 	.word	0x00000000
 801ddc4:	41700000 	.word	0x41700000
 801ddc8:	0801f640 	.word	0x0801f640
 801ddcc:	0801f600 	.word	0x0801f600
 801ddd0:	4268      	negs	r0, r5
 801ddd2:	eeb0 0b48 	vmov.f64	d0, d8
 801ddd6:	f000 f8f3 	bl	801dfc0 <scalbn>
 801ddda:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801dfa8 <__kernel_rem_pio2+0x4e0>
 801ddde:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801dde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dde6:	db17      	blt.n	801de18 <__kernel_rem_pio2+0x350>
 801dde8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801dfb0 <__kernel_rem_pio2+0x4e8>
 801ddec:	ee20 7b07 	vmul.f64	d7, d0, d7
 801ddf0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801ddf4:	aa06      	add	r2, sp, #24
 801ddf6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801ddfa:	eea5 0b46 	vfms.f64	d0, d5, d6
 801ddfe:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801de02:	3518      	adds	r5, #24
 801de04:	ee10 3a10 	vmov	r3, s0
 801de08:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801de0c:	ee17 3a10 	vmov	r3, s14
 801de10:	3401      	adds	r4, #1
 801de12:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801de16:	e74d      	b.n	801dcb4 <__kernel_rem_pio2+0x1ec>
 801de18:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801de1c:	aa06      	add	r2, sp, #24
 801de1e:	ee10 3a10 	vmov	r3, s0
 801de22:	e7f6      	b.n	801de12 <__kernel_rem_pio2+0x34a>
 801de24:	a806      	add	r0, sp, #24
 801de26:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801de2a:	9001      	str	r0, [sp, #4]
 801de2c:	ee07 0a90 	vmov	s15, r0
 801de30:	3a01      	subs	r2, #1
 801de32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801de36:	ee27 7b00 	vmul.f64	d7, d7, d0
 801de3a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801de3e:	ed21 7b02 	vstmdb	r1!, {d7}
 801de42:	e744      	b.n	801dcce <__kernel_rem_pio2+0x206>
 801de44:	ecbc 5b02 	vldmia	ip!, {d5}
 801de48:	ecb5 6b02 	vldmia	r5!, {d6}
 801de4c:	3001      	adds	r0, #1
 801de4e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801de52:	4548      	cmp	r0, r9
 801de54:	dc01      	bgt.n	801de5a <__kernel_rem_pio2+0x392>
 801de56:	4281      	cmp	r1, r0
 801de58:	daf4      	bge.n	801de44 <__kernel_rem_pio2+0x37c>
 801de5a:	a842      	add	r0, sp, #264	@ 0x108
 801de5c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801de60:	ed81 7b00 	vstr	d7, [r1]
 801de64:	3a01      	subs	r2, #1
 801de66:	e736      	b.n	801dcd6 <__kernel_rem_pio2+0x20e>
 801de68:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801de6a:	2a02      	cmp	r2, #2
 801de6c:	dc0a      	bgt.n	801de84 <__kernel_rem_pio2+0x3bc>
 801de6e:	2a00      	cmp	r2, #0
 801de70:	dc2d      	bgt.n	801dece <__kernel_rem_pio2+0x406>
 801de72:	d046      	beq.n	801df02 <__kernel_rem_pio2+0x43a>
 801de74:	f008 0007 	and.w	r0, r8, #7
 801de78:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801de7c:	ecbd 8b06 	vpop	{d8-d10}
 801de80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de84:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801de86:	2a03      	cmp	r2, #3
 801de88:	d1f4      	bne.n	801de74 <__kernel_rem_pio2+0x3ac>
 801de8a:	a942      	add	r1, sp, #264	@ 0x108
 801de8c:	f1a3 0208 	sub.w	r2, r3, #8
 801de90:	440a      	add	r2, r1
 801de92:	4611      	mov	r1, r2
 801de94:	4620      	mov	r0, r4
 801de96:	2800      	cmp	r0, #0
 801de98:	f1a1 0108 	sub.w	r1, r1, #8
 801de9c:	dc52      	bgt.n	801df44 <__kernel_rem_pio2+0x47c>
 801de9e:	4621      	mov	r1, r4
 801dea0:	2901      	cmp	r1, #1
 801dea2:	f1a2 0208 	sub.w	r2, r2, #8
 801dea6:	dc5d      	bgt.n	801df64 <__kernel_rem_pio2+0x49c>
 801dea8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801dfb8 <__kernel_rem_pio2+0x4f0>
 801deac:	aa42      	add	r2, sp, #264	@ 0x108
 801deae:	4413      	add	r3, r2
 801deb0:	2c01      	cmp	r4, #1
 801deb2:	dc67      	bgt.n	801df84 <__kernel_rem_pio2+0x4bc>
 801deb4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801deb8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801debc:	2e00      	cmp	r6, #0
 801debe:	d167      	bne.n	801df90 <__kernel_rem_pio2+0x4c8>
 801dec0:	ed87 5b00 	vstr	d5, [r7]
 801dec4:	ed87 6b02 	vstr	d6, [r7, #8]
 801dec8:	ed87 7b04 	vstr	d7, [r7, #16]
 801decc:	e7d2      	b.n	801de74 <__kernel_rem_pio2+0x3ac>
 801dece:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801dfb8 <__kernel_rem_pio2+0x4f0>
 801ded2:	aa42      	add	r2, sp, #264	@ 0x108
 801ded4:	4413      	add	r3, r2
 801ded6:	4622      	mov	r2, r4
 801ded8:	2a00      	cmp	r2, #0
 801deda:	da24      	bge.n	801df26 <__kernel_rem_pio2+0x45e>
 801dedc:	b34e      	cbz	r6, 801df32 <__kernel_rem_pio2+0x46a>
 801dede:	eeb1 7b46 	vneg.f64	d7, d6
 801dee2:	ed87 7b00 	vstr	d7, [r7]
 801dee6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801deea:	aa44      	add	r2, sp, #272	@ 0x110
 801deec:	2301      	movs	r3, #1
 801deee:	ee37 7b46 	vsub.f64	d7, d7, d6
 801def2:	429c      	cmp	r4, r3
 801def4:	da20      	bge.n	801df38 <__kernel_rem_pio2+0x470>
 801def6:	b10e      	cbz	r6, 801defc <__kernel_rem_pio2+0x434>
 801def8:	eeb1 7b47 	vneg.f64	d7, d7
 801defc:	ed87 7b02 	vstr	d7, [r7, #8]
 801df00:	e7b8      	b.n	801de74 <__kernel_rem_pio2+0x3ac>
 801df02:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801dfb8 <__kernel_rem_pio2+0x4f0>
 801df06:	aa42      	add	r2, sp, #264	@ 0x108
 801df08:	4413      	add	r3, r2
 801df0a:	2c00      	cmp	r4, #0
 801df0c:	da05      	bge.n	801df1a <__kernel_rem_pio2+0x452>
 801df0e:	b10e      	cbz	r6, 801df14 <__kernel_rem_pio2+0x44c>
 801df10:	eeb1 7b47 	vneg.f64	d7, d7
 801df14:	ed87 7b00 	vstr	d7, [r7]
 801df18:	e7ac      	b.n	801de74 <__kernel_rem_pio2+0x3ac>
 801df1a:	ed33 6b02 	vldmdb	r3!, {d6}
 801df1e:	3c01      	subs	r4, #1
 801df20:	ee37 7b06 	vadd.f64	d7, d7, d6
 801df24:	e7f1      	b.n	801df0a <__kernel_rem_pio2+0x442>
 801df26:	ed33 7b02 	vldmdb	r3!, {d7}
 801df2a:	3a01      	subs	r2, #1
 801df2c:	ee36 6b07 	vadd.f64	d6, d6, d7
 801df30:	e7d2      	b.n	801ded8 <__kernel_rem_pio2+0x410>
 801df32:	eeb0 7b46 	vmov.f64	d7, d6
 801df36:	e7d4      	b.n	801dee2 <__kernel_rem_pio2+0x41a>
 801df38:	ecb2 6b02 	vldmia	r2!, {d6}
 801df3c:	3301      	adds	r3, #1
 801df3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 801df42:	e7d6      	b.n	801def2 <__kernel_rem_pio2+0x42a>
 801df44:	ed91 7b00 	vldr	d7, [r1]
 801df48:	ed91 5b02 	vldr	d5, [r1, #8]
 801df4c:	3801      	subs	r0, #1
 801df4e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801df52:	ee37 7b46 	vsub.f64	d7, d7, d6
 801df56:	ed81 6b00 	vstr	d6, [r1]
 801df5a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801df5e:	ed81 7b02 	vstr	d7, [r1, #8]
 801df62:	e798      	b.n	801de96 <__kernel_rem_pio2+0x3ce>
 801df64:	ed92 7b00 	vldr	d7, [r2]
 801df68:	ed92 5b02 	vldr	d5, [r2, #8]
 801df6c:	3901      	subs	r1, #1
 801df6e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801df72:	ee37 7b46 	vsub.f64	d7, d7, d6
 801df76:	ed82 6b00 	vstr	d6, [r2]
 801df7a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801df7e:	ed82 7b02 	vstr	d7, [r2, #8]
 801df82:	e78d      	b.n	801dea0 <__kernel_rem_pio2+0x3d8>
 801df84:	ed33 6b02 	vldmdb	r3!, {d6}
 801df88:	3c01      	subs	r4, #1
 801df8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801df8e:	e78f      	b.n	801deb0 <__kernel_rem_pio2+0x3e8>
 801df90:	eeb1 5b45 	vneg.f64	d5, d5
 801df94:	eeb1 6b46 	vneg.f64	d6, d6
 801df98:	ed87 5b00 	vstr	d5, [r7]
 801df9c:	eeb1 7b47 	vneg.f64	d7, d7
 801dfa0:	ed87 6b02 	vstr	d6, [r7, #8]
 801dfa4:	e790      	b.n	801dec8 <__kernel_rem_pio2+0x400>
 801dfa6:	bf00      	nop
 801dfa8:	00000000 	.word	0x00000000
 801dfac:	41700000 	.word	0x41700000
 801dfb0:	00000000 	.word	0x00000000
 801dfb4:	3e700000 	.word	0x3e700000
	...

0801dfc0 <scalbn>:
 801dfc0:	ee10 1a90 	vmov	r1, s1
 801dfc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801dfc8:	b98b      	cbnz	r3, 801dfee <scalbn+0x2e>
 801dfca:	ee10 3a10 	vmov	r3, s0
 801dfce:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801dfd2:	4319      	orrs	r1, r3
 801dfd4:	d00a      	beq.n	801dfec <scalbn+0x2c>
 801dfd6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801e088 <scalbn+0xc8>
 801dfda:	4b37      	ldr	r3, [pc, #220]	@ (801e0b8 <scalbn+0xf8>)
 801dfdc:	ee20 0b07 	vmul.f64	d0, d0, d7
 801dfe0:	4298      	cmp	r0, r3
 801dfe2:	da0b      	bge.n	801dffc <scalbn+0x3c>
 801dfe4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801e090 <scalbn+0xd0>
 801dfe8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801dfec:	4770      	bx	lr
 801dfee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801dff2:	4293      	cmp	r3, r2
 801dff4:	d107      	bne.n	801e006 <scalbn+0x46>
 801dff6:	ee30 0b00 	vadd.f64	d0, d0, d0
 801dffa:	4770      	bx	lr
 801dffc:	ee10 1a90 	vmov	r1, s1
 801e000:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e004:	3b36      	subs	r3, #54	@ 0x36
 801e006:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801e00a:	4290      	cmp	r0, r2
 801e00c:	dd0d      	ble.n	801e02a <scalbn+0x6a>
 801e00e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801e098 <scalbn+0xd8>
 801e012:	ee10 3a90 	vmov	r3, s1
 801e016:	eeb0 6b47 	vmov.f64	d6, d7
 801e01a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801e0a0 <scalbn+0xe0>
 801e01e:	2b00      	cmp	r3, #0
 801e020:	fe27 7b05 	vselge.f64	d7, d7, d5
 801e024:	ee27 0b06 	vmul.f64	d0, d7, d6
 801e028:	4770      	bx	lr
 801e02a:	4418      	add	r0, r3
 801e02c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801e030:	4298      	cmp	r0, r3
 801e032:	dcec      	bgt.n	801e00e <scalbn+0x4e>
 801e034:	2800      	cmp	r0, #0
 801e036:	dd0a      	ble.n	801e04e <scalbn+0x8e>
 801e038:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801e03c:	ec53 2b10 	vmov	r2, r3, d0
 801e040:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801e044:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801e048:	ec43 2b10 	vmov	d0, r2, r3
 801e04c:	4770      	bx	lr
 801e04e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801e052:	da09      	bge.n	801e068 <scalbn+0xa8>
 801e054:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801e090 <scalbn+0xd0>
 801e058:	ee10 3a90 	vmov	r3, s1
 801e05c:	eeb0 6b47 	vmov.f64	d6, d7
 801e060:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801e0a8 <scalbn+0xe8>
 801e064:	2b00      	cmp	r3, #0
 801e066:	e7db      	b.n	801e020 <scalbn+0x60>
 801e068:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801e06c:	ec53 2b10 	vmov	r2, r3, d0
 801e070:	3036      	adds	r0, #54	@ 0x36
 801e072:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801e076:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801e07a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801e0b0 <scalbn+0xf0>
 801e07e:	ec43 2b10 	vmov	d0, r2, r3
 801e082:	e7b1      	b.n	801dfe8 <scalbn+0x28>
 801e084:	f3af 8000 	nop.w
 801e088:	00000000 	.word	0x00000000
 801e08c:	43500000 	.word	0x43500000
 801e090:	c2f8f359 	.word	0xc2f8f359
 801e094:	01a56e1f 	.word	0x01a56e1f
 801e098:	8800759c 	.word	0x8800759c
 801e09c:	7e37e43c 	.word	0x7e37e43c
 801e0a0:	8800759c 	.word	0x8800759c
 801e0a4:	fe37e43c 	.word	0xfe37e43c
 801e0a8:	c2f8f359 	.word	0xc2f8f359
 801e0ac:	81a56e1f 	.word	0x81a56e1f
 801e0b0:	00000000 	.word	0x00000000
 801e0b4:	3c900000 	.word	0x3c900000
 801e0b8:	ffff3cb0 	.word	0xffff3cb0
 801e0bc:	00000000 	.word	0x00000000

0801e0c0 <floor>:
 801e0c0:	ee10 3a90 	vmov	r3, s1
 801e0c4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801e0c8:	ee10 2a10 	vmov	r2, s0
 801e0cc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801e0d0:	2913      	cmp	r1, #19
 801e0d2:	b530      	push	{r4, r5, lr}
 801e0d4:	4615      	mov	r5, r2
 801e0d6:	dc33      	bgt.n	801e140 <floor+0x80>
 801e0d8:	2900      	cmp	r1, #0
 801e0da:	da18      	bge.n	801e10e <floor+0x4e>
 801e0dc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801e1a0 <floor+0xe0>
 801e0e0:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e0e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0ec:	dd0a      	ble.n	801e104 <floor+0x44>
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	da50      	bge.n	801e194 <floor+0xd4>
 801e0f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e0f6:	4313      	orrs	r3, r2
 801e0f8:	2200      	movs	r2, #0
 801e0fa:	4293      	cmp	r3, r2
 801e0fc:	4b2a      	ldr	r3, [pc, #168]	@ (801e1a8 <floor+0xe8>)
 801e0fe:	bf08      	it	eq
 801e100:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801e104:	4619      	mov	r1, r3
 801e106:	4610      	mov	r0, r2
 801e108:	ec41 0b10 	vmov	d0, r0, r1
 801e10c:	e01f      	b.n	801e14e <floor+0x8e>
 801e10e:	4827      	ldr	r0, [pc, #156]	@ (801e1ac <floor+0xec>)
 801e110:	4108      	asrs	r0, r1
 801e112:	ea03 0400 	and.w	r4, r3, r0
 801e116:	4314      	orrs	r4, r2
 801e118:	d019      	beq.n	801e14e <floor+0x8e>
 801e11a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801e1a0 <floor+0xe0>
 801e11e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e122:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e12a:	ddeb      	ble.n	801e104 <floor+0x44>
 801e12c:	2b00      	cmp	r3, #0
 801e12e:	bfbe      	ittt	lt
 801e130:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801e134:	410a      	asrlt	r2, r1
 801e136:	189b      	addlt	r3, r3, r2
 801e138:	ea23 0300 	bic.w	r3, r3, r0
 801e13c:	2200      	movs	r2, #0
 801e13e:	e7e1      	b.n	801e104 <floor+0x44>
 801e140:	2933      	cmp	r1, #51	@ 0x33
 801e142:	dd05      	ble.n	801e150 <floor+0x90>
 801e144:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801e148:	d101      	bne.n	801e14e <floor+0x8e>
 801e14a:	ee30 0b00 	vadd.f64	d0, d0, d0
 801e14e:	bd30      	pop	{r4, r5, pc}
 801e150:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801e154:	f04f 30ff 	mov.w	r0, #4294967295
 801e158:	40e0      	lsrs	r0, r4
 801e15a:	4210      	tst	r0, r2
 801e15c:	d0f7      	beq.n	801e14e <floor+0x8e>
 801e15e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801e1a0 <floor+0xe0>
 801e162:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e166:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e16e:	ddc9      	ble.n	801e104 <floor+0x44>
 801e170:	2b00      	cmp	r3, #0
 801e172:	da02      	bge.n	801e17a <floor+0xba>
 801e174:	2914      	cmp	r1, #20
 801e176:	d103      	bne.n	801e180 <floor+0xc0>
 801e178:	3301      	adds	r3, #1
 801e17a:	ea22 0200 	bic.w	r2, r2, r0
 801e17e:	e7c1      	b.n	801e104 <floor+0x44>
 801e180:	2401      	movs	r4, #1
 801e182:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801e186:	fa04 f101 	lsl.w	r1, r4, r1
 801e18a:	440a      	add	r2, r1
 801e18c:	42aa      	cmp	r2, r5
 801e18e:	bf38      	it	cc
 801e190:	191b      	addcc	r3, r3, r4
 801e192:	e7f2      	b.n	801e17a <floor+0xba>
 801e194:	2200      	movs	r2, #0
 801e196:	4613      	mov	r3, r2
 801e198:	e7b4      	b.n	801e104 <floor+0x44>
 801e19a:	bf00      	nop
 801e19c:	f3af 8000 	nop.w
 801e1a0:	8800759c 	.word	0x8800759c
 801e1a4:	7e37e43c 	.word	0x7e37e43c
 801e1a8:	bff00000 	.word	0xbff00000
 801e1ac:	000fffff 	.word	0x000fffff

0801e1b0 <_init>:
 801e1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1b2:	bf00      	nop
 801e1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e1b6:	bc08      	pop	{r3}
 801e1b8:	469e      	mov	lr, r3
 801e1ba:	4770      	bx	lr

0801e1bc <_fini>:
 801e1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1be:	bf00      	nop
 801e1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e1c2:	bc08      	pop	{r3}
 801e1c4:	469e      	mov	lr, r3
 801e1c6:	4770      	bx	lr
