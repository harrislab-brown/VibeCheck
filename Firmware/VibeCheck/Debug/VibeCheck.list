
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001658c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08016860  08016860  00017860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016d98  08016d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016da0  08016da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016da4  08016da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  08016da8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005d64  240002cc  08017074  000182cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006030  08017074  00019030  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000182cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f386  00000000  00000000  000182fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c2c  00000000  00000000  00047680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002478  00000000  00000000  0004d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001c3f  00000000  00000000  0004f728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00009c3f  00000000  00000000  00051367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003718f  00000000  00000000  0005afa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017038b  00000000  00000000  00092135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002024c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000afe8  00000000  00000000  00202504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  0020d4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002cc 	.word	0x240002cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08016844 	.word	0x08016844

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d0 	.word	0x240002d0
 800030c:	08016844 	.word	0x08016844

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000ac2:	f002 f95c 	bl	8002d7e <VibeCheckStrobe_PeriodElapsedUpdate>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	24004290 	.word	0x24004290

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ad8:	f000 fe98 	bl	800180c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f002 fac4 	bl	8003068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f82e 	bl	8000b40 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ae4:	f000 f89c 	bl	8000c20 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae8:	f000 fd86 	bl	80015f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aec:	f000 fd64 	bl	80015b8 <MX_DMA_Init>
  MX_DAC1_Init();
 8000af0:	f000 f9ac 	bl	8000e4c <MX_DAC1_Init>
  MX_I2C2_Init();
 8000af4:	f000 f9dc 	bl	8000eb0 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000af8:	f000 fa1a 	bl	8000f30 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000afc:	f000 fa6e 	bl	8000fdc <MX_SPI3_Init>
  MX_SPI4_Init();
 8000b00:	f000 fac2 	bl	8001088 <MX_SPI4_Init>
  MX_TIM4_Init();
 8000b04:	f000 fc46 	bl	8001394 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000b08:	f000 fbb6 	bl	8001278 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b0c:	f000 fd08 	bl	8001520 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000b10:	f000 fb10 	bl	8001134 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b14:	f000 fb62 	bl	80011dc <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b18:	f000 f8b2 	bl	8000c80 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b1c:	f000 f92c 	bl	8000d78 <MX_ADC2_Init>
  MX_UART7_Init();
 8000b20:	f000 fcb0 	bl	8001484 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000b24:	f011 f954 	bl	8011dd0 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  VibeCheck_Init(&vc, &htim3);
 8000b28:	4903      	ldr	r1, [pc, #12]	@ (8000b38 <main+0x64>)
 8000b2a:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <main+0x68>)
 8000b2c:	f001 fc4c 	bl	80023c8 <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 8000b30:	4802      	ldr	r0, [pc, #8]	@ (8000b3c <main+0x68>)
 8000b32:	f001 fc97 	bl	8002464 <VibeCheck_Loop>
 8000b36:	e7fb      	b.n	8000b30 <main+0x5c>
 8000b38:	240006d8 	.word	0x240006d8
 8000b3c:	24000898 	.word	0x24000898

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b09c      	sub	sp, #112	@ 0x70
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4a:	224c      	movs	r2, #76	@ 0x4c
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f013 f987 	bl	8013e62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2220      	movs	r2, #32
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f013 f981 	bl	8013e62 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b60:	2002      	movs	r0, #2
 8000b62:	f007 fbe9 	bl	8008338 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c1c <SystemClock_Config+0xdc>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8000c1c <SystemClock_Config+0xdc>)
 8000b70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b74:	6193      	str	r3, [r2, #24]
 8000b76:	4b29      	ldr	r3, [pc, #164]	@ (8000c1c <SystemClock_Config+0xdc>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b82:	bf00      	nop
 8000b84:	4b25      	ldr	r3, [pc, #148]	@ (8000c1c <SystemClock_Config+0xdc>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b90:	d1f8      	bne.n	8000b84 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b92:	2321      	movs	r3, #33	@ 0x21
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bac:	2328      	movs	r3, #40	@ 0x28
 8000bae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f007 fbfd 	bl	80083cc <HAL_RCC_OscConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bd8:	f000 fe44 	bl	8001864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	233f      	movs	r3, #63	@ 0x3f
 8000bde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be0:	2303      	movs	r3, #3
 8000be2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000be8:	2308      	movs	r3, #8
 8000bea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bec:	2340      	movs	r3, #64	@ 0x40
 8000bee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bf0:	2340      	movs	r3, #64	@ 0x40
 8000bf2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bfa:	2340      	movs	r3, #64	@ 0x40
 8000bfc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2103      	movs	r1, #3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f007 ffbc 	bl	8008b80 <HAL_RCC_ClockConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c0e:	f000 fe29 	bl	8001864 <Error_Handler>
  }
}
 8000c12:	bf00      	nop
 8000c14:	3770      	adds	r7, #112	@ 0x70
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	58024800 	.word	0x58024800

08000c20 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b0ae      	sub	sp, #184	@ 0xb8
 8000c24:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c26:	463b      	mov	r3, r7
 8000c28:	22b8      	movs	r2, #184	@ 0xb8
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f013 f918 	bl	8013e62 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c32:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c36:	f04f 0300 	mov.w	r3, #0
 8000c3a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000c42:	2310      	movs	r3, #16
 8000c44:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c52:	23c0      	movs	r3, #192	@ 0xc0
 8000c54:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	4618      	mov	r0, r3
 8000c68:	f008 fb16 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000c72:	f000 fdf7 	bl	8001864 <Error_Handler>
  }
}
 8000c76:	bf00      	nop
 8000c78:	37b8      	adds	r7, #184	@ 0xb8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	@ 0x30
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c92:	463b      	mov	r3, r7
 8000c94:	2224      	movs	r2, #36	@ 0x24
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f013 f8e2 	bl	8013e62 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c9e:	4b32      	ldr	r3, [pc, #200]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000ca0:	4a32      	ldr	r2, [pc, #200]	@ (8000d6c <MX_ADC1_Init+0xec>)
 8000ca2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ca4:	4b30      	ldr	r3, [pc, #192]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000ca6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000caa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000cac:	4b2e      	ldr	r3, [pc, #184]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cba:	2204      	movs	r2, #4
 8000cbc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cc4:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cca:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd0:	4b25      	ldr	r3, [pc, #148]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd8:	4b23      	ldr	r3, [pc, #140]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cde:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ce4:	4b20      	ldr	r3, [pc, #128]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d04:	4818      	ldr	r0, [pc, #96]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000d06:	f002 fcab 	bl	8003660 <HAL_ADC_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d10:	f000 fda8 	bl	8001864 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4812      	ldr	r0, [pc, #72]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000d20:	f003 fcea 	bl	80046f8 <HAL_ADCEx_MultiModeConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d2a:	f000 fd9b 	bl	8001864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <MX_ADC1_Init+0xf0>)
 8000d30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d32:	2306      	movs	r3, #6
 8000d34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_ADC1_Init+0xf4>)
 8000d3c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000d52:	f002 fe8d 	bl	8003a70 <HAL_ADC_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000d5c:	f000 fd82 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3730      	adds	r7, #48	@ 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	240002e8 	.word	0x240002e8
 8000d6c:	40022000 	.word	0x40022000
 8000d70:	10c00010 	.word	0x10c00010
 8000d74:	47ff0000 	.word	0x47ff0000

08000d78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2224      	movs	r2, #36	@ 0x24
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f013 f86c 	bl	8013e62 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e40 <MX_ADC2_Init+0xc8>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d90:	4b2a      	ldr	r3, [pc, #168]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000d92:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d96:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d98:	4b28      	ldr	r3, [pc, #160]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d9e:	4b27      	ldr	r3, [pc, #156]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da4:	4b25      	ldr	r3, [pc, #148]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000da6:	2204      	movs	r2, #4
 8000da8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000daa:	4b24      	ldr	r3, [pc, #144]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000db0:	4b22      	ldr	r3, [pc, #136]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000db6:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dca:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000de2:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000dea:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000df0:	4812      	ldr	r0, [pc, #72]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000df2:	f002 fc35 	bl	8003660 <HAL_ADC_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000dfc:	f000 fd32 	bl	8001864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e00:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <MX_ADC2_Init+0xcc>)
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e04:	2306      	movs	r3, #6
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MX_ADC2_Init+0xd0>)
 8000e0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e10:	2304      	movs	r3, #4
 8000e12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000e24:	f002 fe24 	bl	8003a70 <HAL_ADC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000e2e:	f000 fd19 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	@ 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	24000358 	.word	0x24000358
 8000e40:	40022100 	.word	0x40022100
 8000e44:	0c900008 	.word	0x0c900008
 8000e48:	47ff0000 	.word	0x47ff0000

08000e4c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	@ 0x28
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2224      	movs	r2, #36	@ 0x24
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f013 f802 	bl	8013e62 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <MX_DAC1_Init+0x5c>)
 8000e60:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <MX_DAC1_Init+0x60>)
 8000e62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e64:	4810      	ldr	r0, [pc, #64]	@ (8000ea8 <MX_DAC1_Init+0x5c>)
 8000e66:	f003 feb1 	bl	8004bcc <HAL_DAC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e70:	f000 fcf8 	bl	8001864 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000e78:	2306      	movs	r3, #6
 8000e7a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	@ (8000ea8 <MX_DAC1_Init+0x5c>)
 8000e90:	f003 febe 	bl	8004c10 <HAL_DAC_ConfigChannel>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000e9a:	f000 fce3 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	@ 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	240003c8 	.word	0x240003c8
 8000eac:	40007400 	.word	0x40007400

08000eb0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f28 <MX_I2C2_Init+0x78>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f2c <MX_I2C2_Init+0x7c>)
 8000ebe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eea:	480e      	ldr	r0, [pc, #56]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000eec:	f005 fe52 	bl	8006b94 <HAL_I2C_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ef6:	f000 fcb5 	bl	8001864 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4809      	ldr	r0, [pc, #36]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000efe:	f005 fee5 	bl	8006ccc <HAL_I2CEx_ConfigAnalogFilter>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f08:	f000 fcac 	bl	8001864 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000f10:	f005 ff27 	bl	8006d62 <HAL_I2CEx_ConfigDigitalFilter>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f1a:	f000 fca3 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	24000454 	.word	0x24000454
 8000f28:	40005800 	.word	0x40005800
 8000f2c:	307075b1 	.word	0x307075b1

08000f30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f34:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f36:	4a28      	ldr	r2, [pc, #160]	@ (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f3c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f42:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f86:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fac:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000fc0:	f00a fd50 	bl	800ba64 <HAL_SPI_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000fca:	f000 fc4b 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	240004a8 	.word	0x240004a8
 8000fd8:	40003800 	.word	0x40003800

08000fdc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8000fe2:	4a28      	ldr	r2, [pc, #160]	@ (8001084 <MX_SPI3_Init+0xa8>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8000fe8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fee:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001000:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001006:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001008:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800100c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800100e:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001014:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800101a:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <MX_SPI3_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001020:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001022:	2200      	movs	r2, #0
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001028:	2200      	movs	r2, #0
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_SPI3_Init+0xa4>)
 800102e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001032:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001036:	2200      	movs	r2, #0
 8001038:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800103a:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_SPI3_Init+0xa4>)
 800103c:	2200      	movs	r2, #0
 800103e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001042:	2200      	movs	r2, #0
 8001044:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_SPI3_Init+0xa4>)
 800104e:	2200      	movs	r2, #0
 8001050:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_SPI3_Init+0xa4>)
 800105a:	2200      	movs	r2, #0
 800105c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001060:	2200      	movs	r2, #0
 8001062:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001066:	2200      	movs	r2, #0
 8001068:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <MX_SPI3_Init+0xa4>)
 800106c:	f00a fcfa 	bl	800ba64 <HAL_SPI_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8001076:	f000 fbf5 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	24000530 	.word	0x24000530
 8001084:	40003c00 	.word	0x40003c00

08001088 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800108c:	4b27      	ldr	r3, [pc, #156]	@ (800112c <MX_SPI4_Init+0xa4>)
 800108e:	4a28      	ldr	r2, [pc, #160]	@ (8001130 <MX_SPI4_Init+0xa8>)
 8001090:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001092:	4b26      	ldr	r3, [pc, #152]	@ (800112c <MX_SPI4_Init+0xa4>)
 8001094:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001098:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800109a:	4b24      	ldr	r3, [pc, #144]	@ (800112c <MX_SPI4_Init+0xa4>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80010a0:	4b22      	ldr	r3, [pc, #136]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010a2:	2203      	movs	r2, #3
 80010a4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a6:	4b21      	ldr	r3, [pc, #132]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80010b8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80010d2:	4b16      	ldr	r3, [pc, #88]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010de:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <MX_SPI4_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_SPI4_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <MX_SPI4_Init+0xa4>)
 800110c:	2200      	movs	r2, #0
 800110e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_SPI4_Init+0xa4>)
 8001112:	2200      	movs	r2, #0
 8001114:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_SPI4_Init+0xa4>)
 8001118:	f00a fca4 	bl	800ba64 <HAL_SPI_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001122:	f000 fb9f 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	240005b8 	.word	0x240005b8
 8001130:	40013400 	.word	0x40013400

08001134 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001152:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 8001154:	4a20      	ldr	r2, [pc, #128]	@ (80011d8 <MX_TIM1_Init+0xa4>)
 8001156:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 8001166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800116a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116c:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001172:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800117e:	4815      	ldr	r0, [pc, #84]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 8001180:	f00a fdaf 	bl	800bce2 <HAL_TIM_Base_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800118a:	f000 fb6b 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001192:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	4619      	mov	r1, r3
 800119a:	480e      	ldr	r0, [pc, #56]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 800119c:	f00b fac2 	bl	800c724 <HAL_TIM_ConfigClockSource>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011a6:	f000 fb5d 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011aa:	2320      	movs	r3, #32
 80011ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 80011bc:	f00c f81e 	bl	800d1fc <HAL_TIMEx_MasterConfigSynchronization>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011c6:	f000 fb4d 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	3720      	adds	r7, #32
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	24000640 	.word	0x24000640
 80011d8:	40010000 	.word	0x40010000

080011dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <MX_TIM2_Init+0x98>)
 80011fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001200:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001202:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <MX_TIM2_Init+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800120e:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001216:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <MX_TIM2_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001222:	4814      	ldr	r0, [pc, #80]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001224:	f00a fd5d 	bl	800bce2 <HAL_TIM_Base_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800122e:	f000 fb19 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001232:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001236:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4619      	mov	r1, r3
 800123e:	480d      	ldr	r0, [pc, #52]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001240:	f00b fa70 	bl	800c724 <HAL_TIM_ConfigClockSource>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800124a:	f000 fb0b 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800124e:	2320      	movs	r3, #32
 8001250:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	@ (8001274 <MX_TIM2_Init+0x98>)
 800125c:	f00b ffce 	bl	800d1fc <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001266:	f000 fafd 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	3720      	adds	r7, #32
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2400068c 	.word	0x2400068c

08001278 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08e      	sub	sp, #56	@ 0x38
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012aa:	4b38      	ldr	r3, [pc, #224]	@ (800138c <MX_TIM3_Init+0x114>)
 80012ac:	4a38      	ldr	r2, [pc, #224]	@ (8001390 <MX_TIM3_Init+0x118>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012b0:	4b36      	ldr	r3, [pc, #216]	@ (800138c <MX_TIM3_Init+0x114>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b35      	ldr	r3, [pc, #212]	@ (800138c <MX_TIM3_Init+0x114>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012bc:	4b33      	ldr	r3, [pc, #204]	@ (800138c <MX_TIM3_Init+0x114>)
 80012be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b31      	ldr	r3, [pc, #196]	@ (800138c <MX_TIM3_Init+0x114>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b30      	ldr	r3, [pc, #192]	@ (800138c <MX_TIM3_Init+0x114>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012d0:	482e      	ldr	r0, [pc, #184]	@ (800138c <MX_TIM3_Init+0x114>)
 80012d2:	f00a fd06 	bl	800bce2 <HAL_TIM_Base_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012dc:	f000 fac2 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ea:	4619      	mov	r1, r3
 80012ec:	4827      	ldr	r0, [pc, #156]	@ (800138c <MX_TIM3_Init+0x114>)
 80012ee:	f00b fa19 	bl	800c724 <HAL_TIM_ConfigClockSource>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012f8:	f000 fab4 	bl	8001864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012fc:	4823      	ldr	r0, [pc, #140]	@ (800138c <MX_TIM3_Init+0x114>)
 80012fe:	f00a fd47 	bl	800bd90 <HAL_TIM_PWM_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001308:	f000 faac 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	481c      	ldr	r0, [pc, #112]	@ (800138c <MX_TIM3_Init+0x114>)
 800131c:	f00b ff6e 	bl	800d1fc <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001326:	f000 fa9d 	bl	8001864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132a:	2360      	movs	r3, #96	@ 0x60
 800132c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	4619      	mov	r1, r3
 8001340:	4812      	ldr	r0, [pc, #72]	@ (800138c <MX_TIM3_Init+0x114>)
 8001342:	f00b f8db 	bl	800c4fc <HAL_TIM_PWM_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800134c:	f000 fa8a 	bl	8001864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	2204      	movs	r2, #4
 8001354:	4619      	mov	r1, r3
 8001356:	480d      	ldr	r0, [pc, #52]	@ (800138c <MX_TIM3_Init+0x114>)
 8001358:	f00b f8d0 	bl	800c4fc <HAL_TIM_PWM_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001362:	f000 fa7f 	bl	8001864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001366:	463b      	mov	r3, r7
 8001368:	2208      	movs	r2, #8
 800136a:	4619      	mov	r1, r3
 800136c:	4807      	ldr	r0, [pc, #28]	@ (800138c <MX_TIM3_Init+0x114>)
 800136e:	f00b f8c5 	bl	800c4fc <HAL_TIM_PWM_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001378:	f000 fa74 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <MX_TIM3_Init+0x114>)
 800137e:	f000 fd77 	bl	8001e70 <HAL_TIM_MspPostInit>

}
 8001382:	bf00      	nop
 8001384:	3738      	adds	r7, #56	@ 0x38
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	240006d8 	.word	0x240006d8
 8001390:	40000400 	.word	0x40000400

08001394 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08e      	sub	sp, #56	@ 0x38
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b4:	463b      	mov	r3, r7
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
 80013c2:	615a      	str	r2, [r3, #20]
 80013c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013c6:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <MX_TIM4_Init+0xe8>)
 80013c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001480 <MX_TIM4_Init+0xec>)
 80013ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013cc:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <MX_TIM4_Init+0xe8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b2a      	ldr	r3, [pc, #168]	@ (800147c <MX_TIM4_Init+0xe8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013d8:	4b28      	ldr	r3, [pc, #160]	@ (800147c <MX_TIM4_Init+0xe8>)
 80013da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b26      	ldr	r3, [pc, #152]	@ (800147c <MX_TIM4_Init+0xe8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b25      	ldr	r3, [pc, #148]	@ (800147c <MX_TIM4_Init+0xe8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013ec:	4823      	ldr	r0, [pc, #140]	@ (800147c <MX_TIM4_Init+0xe8>)
 80013ee:	f00a fc78 	bl	800bce2 <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80013f8:	f000 fa34 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001402:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001406:	4619      	mov	r1, r3
 8001408:	481c      	ldr	r0, [pc, #112]	@ (800147c <MX_TIM4_Init+0xe8>)
 800140a:	f00b f98b 	bl	800c724 <HAL_TIM_ConfigClockSource>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001414:	f000 fa26 	bl	8001864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001418:	4818      	ldr	r0, [pc, #96]	@ (800147c <MX_TIM4_Init+0xe8>)
 800141a:	f00a fcb9 	bl	800bd90 <HAL_TIM_PWM_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001424:	f000 fa1e 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	4811      	ldr	r0, [pc, #68]	@ (800147c <MX_TIM4_Init+0xe8>)
 8001438:	f00b fee0 	bl	800d1fc <HAL_TIMEx_MasterConfigSynchronization>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001442:	f000 fa0f 	bl	8001864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001446:	2360      	movs	r3, #96	@ 0x60
 8001448:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001456:	463b      	mov	r3, r7
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	4807      	ldr	r0, [pc, #28]	@ (800147c <MX_TIM4_Init+0xe8>)
 800145e:	f00b f84d 	bl	800c4fc <HAL_TIM_PWM_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001468:	f000 f9fc 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800146c:	4803      	ldr	r0, [pc, #12]	@ (800147c <MX_TIM4_Init+0xe8>)
 800146e:	f000 fcff 	bl	8001e70 <HAL_TIM_MspPostInit>

}
 8001472:	bf00      	nop
 8001474:	3738      	adds	r7, #56	@ 0x38
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	24000724 	.word	0x24000724
 8001480:	40000800 	.word	0x40000800

08001484 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001488:	4b23      	ldr	r3, [pc, #140]	@ (8001518 <MX_UART7_Init+0x94>)
 800148a:	4a24      	ldr	r2, [pc, #144]	@ (800151c <MX_UART7_Init+0x98>)
 800148c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800148e:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <MX_UART7_Init+0x94>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <MX_UART7_Init+0x94>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <MX_UART7_Init+0x94>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <MX_UART7_Init+0x94>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <MX_UART7_Init+0x94>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <MX_UART7_Init+0x94>)
 80014b0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014b4:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <MX_UART7_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014bc:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <MX_UART7_Init+0x94>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <MX_UART7_Init+0x94>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <MX_UART7_Init+0x94>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80014ce:	4812      	ldr	r0, [pc, #72]	@ (8001518 <MX_UART7_Init+0x94>)
 80014d0:	f00b ff4e 	bl	800d370 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 80014da:	f000 f9c3 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014de:	2100      	movs	r1, #0
 80014e0:	480d      	ldr	r0, [pc, #52]	@ (8001518 <MX_UART7_Init+0x94>)
 80014e2:	f00d f85a 	bl	800e59a <HAL_UARTEx_SetTxFifoThreshold>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 80014ec:	f000 f9ba 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f0:	2100      	movs	r1, #0
 80014f2:	4809      	ldr	r0, [pc, #36]	@ (8001518 <MX_UART7_Init+0x94>)
 80014f4:	f00d f88f 	bl	800e616 <HAL_UARTEx_SetRxFifoThreshold>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 80014fe:	f000 f9b1 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <MX_UART7_Init+0x94>)
 8001504:	f00d f810 	bl	800e528 <HAL_UARTEx_DisableFifoMode>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 800150e:	f000 f9a9 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	24000770 	.word	0x24000770
 800151c:	40007800 	.word	0x40007800

08001520 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001524:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001526:	4a23      	ldr	r2, [pc, #140]	@ (80015b4 <MX_USART1_UART_Init+0x94>)
 8001528:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153e:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001568:	4811      	ldr	r0, [pc, #68]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800156a:	f00b ff01 	bl	800d370 <HAL_UART_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001574:	f000 f976 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001578:	2100      	movs	r1, #0
 800157a:	480d      	ldr	r0, [pc, #52]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800157c:	f00d f80d 	bl	800e59a <HAL_UARTEx_SetTxFifoThreshold>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001586:	f000 f96d 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158a:	2100      	movs	r1, #0
 800158c:	4808      	ldr	r0, [pc, #32]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800158e:	f00d f842 	bl	800e616 <HAL_UARTEx_SetRxFifoThreshold>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001598:	f000 f964 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800159e:	f00c ffc3 	bl	800e528 <HAL_UARTEx_DisableFifoMode>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015a8:	f000 f95c 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	24000804 	.word	0x24000804
 80015b4:	40011000 	.word	0x40011000

080015b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015be:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <MX_DMA_Init+0x3c>)
 80015c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015c4:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <MX_DMA_Init+0x3c>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_DMA_Init+0x3c>)
 80015d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	200b      	movs	r0, #11
 80015e2:	f003 fa46 	bl	8004a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015e6:	200b      	movs	r0, #11
 80015e8:	f003 fa5d 	bl	8004aa6 <HAL_NVIC_EnableIRQ>

}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	58024400 	.word	0x58024400

080015f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08c      	sub	sp, #48	@ 0x30
 80015fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800160e:	4b79      	ldr	r3, [pc, #484]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001614:	4a77      	ldr	r2, [pc, #476]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001616:	f043 0310 	orr.w	r3, r3, #16
 800161a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800161e:	4b75      	ldr	r3, [pc, #468]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162c:	4b71      	ldr	r3, [pc, #452]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 800162e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001632:	4a70      	ldr	r2, [pc, #448]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800163c:	4b6d      	ldr	r3, [pc, #436]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 800163e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164a:	4b6a      	ldr	r3, [pc, #424]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 800164c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001650:	4a68      	ldr	r2, [pc, #416]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001656:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800165a:	4b66      	ldr	r3, [pc, #408]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 800165c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b62      	ldr	r3, [pc, #392]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 800166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800166e:	4a61      	ldr	r2, [pc, #388]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001678:	4b5e      	ldr	r3, [pc, #376]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4b5b      	ldr	r3, [pc, #364]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168c:	4a59      	ldr	r2, [pc, #356]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 800168e:	f043 0302 	orr.w	r3, r3, #2
 8001692:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001696:	4b57      	ldr	r3, [pc, #348]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a4:	4b53      	ldr	r3, [pc, #332]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016aa:	4a52      	ldr	r2, [pc, #328]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b4:	4b4f      	ldr	r3, [pc, #316]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2110      	movs	r1, #16
 80016c6:	484c      	ldr	r0, [pc, #304]	@ (80017f8 <MX_GPIO_Init+0x200>)
 80016c8:	f005 fa4a 	bl	8006b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2104      	movs	r1, #4
 80016d0:	484a      	ldr	r0, [pc, #296]	@ (80017fc <MX_GPIO_Init+0x204>)
 80016d2:	f005 fa45 	bl	8006b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	210b      	movs	r1, #11
 80016da:	4849      	ldr	r0, [pc, #292]	@ (8001800 <MX_GPIO_Init+0x208>)
 80016dc:	f005 fa40 	bl	8006b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 80016e6:	4847      	ldr	r0, [pc, #284]	@ (8001804 <MX_GPIO_Init+0x20c>)
 80016e8:	f005 fa3a 	bl	8006b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2101      	movs	r1, #1
 80016f0:	4845      	ldr	r0, [pc, #276]	@ (8001808 <MX_GPIO_Init+0x210>)
 80016f2:	f005 fa35 	bl	8006b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_INT1_Pin */
  GPIO_InitStruct.Pin = SPI4_INT1_Pin;
 80016f6:	2308      	movs	r3, #8
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI4_INT1_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	4619      	mov	r1, r3
 8001708:	483b      	ldr	r0, [pc, #236]	@ (80017f8 <MX_GPIO_Init+0x200>)
 800170a:	f005 f881 	bl	8006810 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 800170e:	2310      	movs	r3, #16
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	4834      	ldr	r0, [pc, #208]	@ (80017f8 <MX_GPIO_Init+0x200>)
 8001726:	f005 f873 	bl	8006810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 DAC_EXT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DAC_EXT_Pin;
 800172a:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 800172e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	482f      	ldr	r0, [pc, #188]	@ (80017fc <MX_GPIO_Init+0x204>)
 8001740:	f005 f866 	bl	8006810 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 8001744:	2304      	movs	r3, #4
 8001746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4619      	mov	r1, r3
 800175a:	4828      	ldr	r0, [pc, #160]	@ (80017fc <MX_GPIO_Init+0x204>)
 800175c:	f005 f858 	bl	8006810 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8001760:	230b      	movs	r3, #11
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	4822      	ldr	r0, [pc, #136]	@ (8001800 <MX_GPIO_Init+0x208>)
 8001778:	f005 f84a 	bl	8006810 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 800177c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	481b      	ldr	r0, [pc, #108]	@ (8001800 <MX_GPIO_Init+0x208>)
 8001792:	f005 f83d 	bl	8006810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_NCS1_Pin RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin;
 8001796:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800179a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4815      	ldr	r0, [pc, #84]	@ (8001804 <MX_GPIO_Init+0x20c>)
 80017b0:	f005 f82e 	bl	8006810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin SPI3_INT1_Pin SPI3_INT2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|SPI3_INT1_Pin|SPI3_INT2_Pin;
 80017b4:	f240 3306 	movw	r3, #774	@ 0x306
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	480f      	ldr	r0, [pc, #60]	@ (8001808 <MX_GPIO_Init+0x210>)
 80017ca:	f005 f821 	bl	8006810 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	4808      	ldr	r0, [pc, #32]	@ (8001808 <MX_GPIO_Init+0x210>)
 80017e6:	f005 f813 	bl	8006810 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ea:	bf00      	nop
 80017ec:	3730      	adds	r7, #48	@ 0x30
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	58024400 	.word	0x58024400
 80017f8:	58021000 	.word	0x58021000
 80017fc:	58020800 	.word	0x58020800
 8001800:	58020000 	.word	0x58020000
 8001804:	58020400 	.word	0x58020400
 8001808:	58020c00 	.word	0x58020c00

0800180c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001812:	463b      	mov	r3, r7
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800181e:	f003 f95d 	bl	8004adc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001822:	2301      	movs	r3, #1
 8001824:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001826:	2300      	movs	r3, #0
 8001828:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800182e:	231f      	movs	r3, #31
 8001830:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001832:	2387      	movs	r3, #135	@ 0x87
 8001834:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001836:	2300      	movs	r3, #0
 8001838:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800183a:	2300      	movs	r3, #0
 800183c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800183e:	2301      	movs	r3, #1
 8001840:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001842:	2301      	movs	r3, #1
 8001844:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800184e:	463b      	mov	r3, r7
 8001850:	4618      	mov	r0, r3
 8001852:	f003 f97b 	bl	8004b4c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001856:	2004      	movs	r0, #4
 8001858:	f003 f958 	bl	8004b0c <HAL_MPU_Enable>

}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <Error_Handler+0x8>

08001870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <HAL_MspInit+0x30>)
 8001878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800187c:	4a08      	ldr	r2, [pc, #32]	@ (80018a0 <HAL_MspInit+0x30>)
 800187e:	f043 0302 	orr.w	r3, r3, #2
 8001882:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001886:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_MspInit+0x30>)
 8001888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	58024400 	.word	0x58024400

080018a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	@ 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a39      	ldr	r2, [pc, #228]	@ (80019a8 <HAL_ADC_MspInit+0x104>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d133      	bne.n	800192e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018c6:	4b39      	ldr	r3, [pc, #228]	@ (80019ac <HAL_ADC_MspInit+0x108>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	4a37      	ldr	r2, [pc, #220]	@ (80019ac <HAL_ADC_MspInit+0x108>)
 80018ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018d0:	4b36      	ldr	r3, [pc, #216]	@ (80019ac <HAL_ADC_MspInit+0x108>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d10e      	bne.n	80018f6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018d8:	4b35      	ldr	r3, [pc, #212]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 80018da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018de:	4a34      	ldr	r2, [pc, #208]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 80018e0:	f043 0320 	orr.w	r3, r3, #32
 80018e4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80018e8:	4b31      	ldr	r3, [pc, #196]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 80018ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f6:	4b2e      	ldr	r3, [pc, #184]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 80018f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018fc:	4a2c      	ldr	r2, [pc, #176]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001906:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001914:	2330      	movs	r3, #48	@ 0x30
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001918:	2303      	movs	r3, #3
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	4823      	ldr	r0, [pc, #140]	@ (80019b4 <HAL_ADC_MspInit+0x110>)
 8001928:	f004 ff72 	bl	8006810 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800192c:	e037      	b.n	800199e <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a21      	ldr	r2, [pc, #132]	@ (80019b8 <HAL_ADC_MspInit+0x114>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d132      	bne.n	800199e <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001938:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <HAL_ADC_MspInit+0x108>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	4a1b      	ldr	r2, [pc, #108]	@ (80019ac <HAL_ADC_MspInit+0x108>)
 8001940:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001942:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <HAL_ADC_MspInit+0x108>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d10e      	bne.n	8001968 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800194a:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 800194c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001950:	4a17      	ldr	r2, [pc, #92]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 8001952:	f043 0320 	orr.w	r3, r3, #32
 8001956:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 800195c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 800196a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196e:	4a10      	ldr	r2, [pc, #64]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001978:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 800197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001986:	23c0      	movs	r3, #192	@ 0xc0
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198a:	2303      	movs	r3, #3
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	4808      	ldr	r0, [pc, #32]	@ (80019bc <HAL_ADC_MspInit+0x118>)
 800199a:	f004 ff39 	bl	8006810 <HAL_GPIO_Init>
}
 800199e:	bf00      	nop
 80019a0:	3730      	adds	r7, #48	@ 0x30
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000
 80019ac:	240042b0 	.word	0x240042b0
 80019b0:	58024400 	.word	0x58024400
 80019b4:	58020800 	.word	0x58020800
 80019b8:	40022100 	.word	0x40022100
 80019bc:	58020000 	.word	0x58020000

080019c0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	@ 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a30      	ldr	r2, [pc, #192]	@ (8001aa0 <HAL_DAC_MspInit+0xe0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d159      	bne.n	8001a96 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80019e2:	4b30      	ldr	r3, [pc, #192]	@ (8001aa4 <HAL_DAC_MspInit+0xe4>)
 80019e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019e8:	4a2e      	ldr	r2, [pc, #184]	@ (8001aa4 <HAL_DAC_MspInit+0xe4>)
 80019ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80019ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019f2:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa4 <HAL_DAC_MspInit+0xe4>)
 80019f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <HAL_DAC_MspInit+0xe4>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a06:	4a27      	ldr	r2, [pc, #156]	@ (8001aa4 <HAL_DAC_MspInit+0xe4>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a10:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_DAC_MspInit+0xe4>)
 8001a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a1e:	2310      	movs	r3, #16
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a22:	2303      	movs	r3, #3
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	481d      	ldr	r0, [pc, #116]	@ (8001aa8 <HAL_DAC_MspInit+0xe8>)
 8001a32:	f004 feed 	bl	8006810 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a38:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab0 <HAL_DAC_MspInit+0xf0>)
 8001a3a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a3e:	2243      	movs	r2, #67	@ 0x43
 8001a40:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a44:	2240      	movs	r2, #64	@ 0x40
 8001a46:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a54:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a5c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a64:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a6c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a74:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001a7a:	480c      	ldr	r0, [pc, #48]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a7c:	f003 fa0a 	bl	8004e94 <HAL_DMA_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001a86:	f7ff feed 	bl	8001864 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	4a06      	ldr	r2, [pc, #24]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	@ 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40007400 	.word	0x40007400
 8001aa4:	58024400 	.word	0x58024400
 8001aa8:	58020000 	.word	0x58020000
 8001aac:	240003dc 	.word	0x240003dc
 8001ab0:	40020010 	.word	0x40020010

08001ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b0b8      	sub	sp, #224	@ 0xe0
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	22b8      	movs	r2, #184	@ 0xb8
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f012 f9c4 	bl	8013e62 <memset>
  if(hi2c->Instance==I2C2)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a27      	ldr	r2, [pc, #156]	@ (8001b7c <HAL_I2C_MspInit+0xc8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d146      	bne.n	8001b72 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ae4:	f04f 0208 	mov.w	r2, #8
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	4618      	mov	r0, r3
 8001afc:	f007 fbcc 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001b06:	f7ff fead 	bl	8001864 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <HAL_I2C_MspInit+0xcc>)
 8001b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b10:	4a1b      	ldr	r2, [pc, #108]	@ (8001b80 <HAL_I2C_MspInit+0xcc>)
 8001b12:	f043 0302 	orr.w	r3, r3, #2
 8001b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <HAL_I2C_MspInit+0xcc>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b28:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b30:	2312      	movs	r3, #18
 8001b32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b42:	2304      	movs	r3, #4
 8001b44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <HAL_I2C_MspInit+0xd0>)
 8001b50:	f004 fe5e 	bl	8006810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b54:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <HAL_I2C_MspInit+0xcc>)
 8001b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b5a:	4a09      	ldr	r2, [pc, #36]	@ (8001b80 <HAL_I2C_MspInit+0xcc>)
 8001b5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_I2C_MspInit+0xcc>)
 8001b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001b72:	bf00      	nop
 8001b74:	37e0      	adds	r7, #224	@ 0xe0
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40005800 	.word	0x40005800
 8001b80:	58024400 	.word	0x58024400
 8001b84:	58020400 	.word	0x58020400

08001b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0bc      	sub	sp, #240	@ 0xf0
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba0:	f107 0320 	add.w	r3, r7, #32
 8001ba4:	22b8      	movs	r2, #184	@ 0xb8
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f012 f95a 	bl	8013e62 <memset>
  if(hspi->Instance==SPI2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a72      	ldr	r2, [pc, #456]	@ (8001d7c <HAL_SPI_MspInit+0x1f4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d146      	bne.n	8001c46 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001bb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc8:	f107 0320 	add.w	r3, r7, #32
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f007 fb63 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001bd8:	f7ff fe44 	bl	8001864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bdc:	4b68      	ldr	r3, [pc, #416]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001be2:	4a67      	ldr	r2, [pc, #412]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bec:	4b64      	ldr	r3, [pc, #400]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001bee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	4b61      	ldr	r3, [pc, #388]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c00:	4a5f      	ldr	r2, [pc, #380]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8001c18:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001c1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c32:	2305      	movs	r3, #5
 8001c34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c38:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4851      	ldr	r0, [pc, #324]	@ (8001d84 <HAL_SPI_MspInit+0x1fc>)
 8001c40:	f004 fde6 	bl	8006810 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001c44:	e096      	b.n	8001d74 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a4f      	ldr	r2, [pc, #316]	@ (8001d88 <HAL_SPI_MspInit+0x200>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d146      	bne.n	8001cde <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001c50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c60:	f107 0320 	add.w	r3, r7, #32
 8001c64:	4618      	mov	r0, r3
 8001c66:	f007 fb17 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8001c70:	f7ff fdf8 	bl	8001864 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c74:	4b42      	ldr	r3, [pc, #264]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001c76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c7a:	4a41      	ldr	r2, [pc, #260]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001c7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c84:	4b3e      	ldr	r3, [pc, #248]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c92:	4b3b      	ldr	r3, [pc, #236]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c98:	4a39      	ldr	r2, [pc, #228]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ca2:	4b37      	ldr	r3, [pc, #220]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001cb0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001cb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cca:	2306      	movs	r3, #6
 8001ccc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	482d      	ldr	r0, [pc, #180]	@ (8001d8c <HAL_SPI_MspInit+0x204>)
 8001cd8:	f004 fd9a 	bl	8006810 <HAL_GPIO_Init>
}
 8001cdc:	e04a      	b.n	8001d74 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8001d90 <HAL_SPI_MspInit+0x208>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d145      	bne.n	8001d74 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001ce8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfa:	f107 0320 	add.w	r3, r7, #32
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f007 faca 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_SPI_MspInit+0x186>
      Error_Handler();
 8001d0a:	f7ff fdab 	bl	8001864 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d14:	4a1a      	ldr	r2, [pc, #104]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001d16:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d1e:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d2c:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d32:	4a13      	ldr	r2, [pc, #76]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001d34:	f043 0310 	orr.w	r3, r3, #16
 8001d38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d3c:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d4a:	2364      	movs	r3, #100	@ 0x64
 8001d4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001d62:	2305      	movs	r3, #5
 8001d64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d68:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4809      	ldr	r0, [pc, #36]	@ (8001d94 <HAL_SPI_MspInit+0x20c>)
 8001d70:	f004 fd4e 	bl	8006810 <HAL_GPIO_Init>
}
 8001d74:	bf00      	nop
 8001d76:	37f0      	adds	r7, #240	@ 0xf0
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40003800 	.word	0x40003800
 8001d80:	58024400 	.word	0x58024400
 8001d84:	58020400 	.word	0x58020400
 8001d88:	40003c00 	.word	0x40003c00
 8001d8c:	58020800 	.word	0x58020800
 8001d90:	40013400 	.word	0x40013400
 8001d94:	58021000 	.word	0x58021000

08001d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a2e      	ldr	r2, [pc, #184]	@ (8001e60 <HAL_TIM_Base_MspInit+0xc8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d10f      	bne.n	8001dca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001daa:	4b2e      	ldr	r3, [pc, #184]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001db0:	4a2c      	ldr	r2, [pc, #176]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dba:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dc8:	e045      	b.n	8001e56 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd2:	d10f      	bne.n	8001df4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd4:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dda:	4a22      	ldr	r2, [pc, #136]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001de4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
}
 8001df2:	e030      	b.n	8001e56 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM3)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e68 <HAL_TIM_Base_MspInit+0xd0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d117      	bne.n	8001e2e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dfe:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e04:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	201d      	movs	r0, #29
 8001e22:	f002 fe26 	bl	8004a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e26:	201d      	movs	r0, #29
 8001e28:	f002 fe3d 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
}
 8001e2c:	e013      	b.n	8001e56 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM4)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a0e      	ldr	r2, [pc, #56]	@ (8001e6c <HAL_TIM_Base_MspInit+0xd4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d10e      	bne.n	8001e56 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e3e:	4a09      	ldr	r2, [pc, #36]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40010000 	.word	0x40010000
 8001e64:	58024400 	.word	0x58024400
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40000800 	.word	0x40000800

08001e70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	@ 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a26      	ldr	r2, [pc, #152]	@ (8001f28 <HAL_TIM_MspPostInit+0xb8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d120      	bne.n	8001ed4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e92:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <HAL_TIM_MspPostInit+0xbc>)
 8001e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e98:	4a24      	ldr	r2, [pc, #144]	@ (8001f2c <HAL_TIM_MspPostInit+0xbc>)
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea2:	4b22      	ldr	r3, [pc, #136]	@ (8001f2c <HAL_TIM_MspPostInit+0xbc>)
 8001ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8001eb0:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4818      	ldr	r0, [pc, #96]	@ (8001f30 <HAL_TIM_MspPostInit+0xc0>)
 8001ece:	f004 fc9f 	bl	8006810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ed2:	e024      	b.n	8001f1e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a16      	ldr	r2, [pc, #88]	@ (8001f34 <HAL_TIM_MspPostInit+0xc4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d11f      	bne.n	8001f1e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <HAL_TIM_MspPostInit+0xbc>)
 8001ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee4:	4a11      	ldr	r2, [pc, #68]	@ (8001f2c <HAL_TIM_MspPostInit+0xbc>)
 8001ee6:	f043 0308 	orr.w	r3, r3, #8
 8001eea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eee:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <HAL_TIM_MspPostInit+0xbc>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8001efc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4619      	mov	r1, r3
 8001f18:	4807      	ldr	r0, [pc, #28]	@ (8001f38 <HAL_TIM_MspPostInit+0xc8>)
 8001f1a:	f004 fc79 	bl	8006810 <HAL_GPIO_Init>
}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	@ 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	58020800 	.word	0x58020800
 8001f34:	40000800 	.word	0x40000800
 8001f38:	58020c00 	.word	0x58020c00

08001f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0ba      	sub	sp, #232	@ 0xe8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f54:	f107 0318 	add.w	r3, r7, #24
 8001f58:	22b8      	movs	r2, #184	@ 0xb8
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f011 ff80 	bl	8013e62 <memset>
  if(huart->Instance==UART7)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a4d      	ldr	r2, [pc, #308]	@ (800209c <HAL_UART_MspInit+0x160>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d147      	bne.n	8001ffc <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001f6c:	f04f 0202 	mov.w	r2, #2
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7e:	f107 0318 	add.w	r3, r7, #24
 8001f82:	4618      	mov	r0, r3
 8001f84:	f007 f988 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001f8e:	f7ff fc69 	bl	8001864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001f92:	4b43      	ldr	r3, [pc, #268]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8001f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f98:	4a41      	ldr	r2, [pc, #260]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8001f9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8001fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fa8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8001fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb6:	4a3a      	ldr	r2, [pc, #232]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8001fb8:	f043 0310 	orr.w	r3, r3, #16
 8001fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fc0:	4b37      	ldr	r3, [pc, #220]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8001fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001fce:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001fe8:	2307      	movs	r3, #7
 8001fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	482b      	ldr	r0, [pc, #172]	@ (80020a4 <HAL_UART_MspInit+0x168>)
 8001ff6:	f004 fc0b 	bl	8006810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ffa:	e04a      	b.n	8002092 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a29      	ldr	r2, [pc, #164]	@ (80020a8 <HAL_UART_MspInit+0x16c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d145      	bne.n	8002092 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002006:	f04f 0201 	mov.w	r2, #1
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	4618      	mov	r0, r3
 800201e:	f007 f93b 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002028:	f7ff fc1c 	bl	8001864 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800202c:	4b1c      	ldr	r3, [pc, #112]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 800202e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002032:	4a1b      	ldr	r2, [pc, #108]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8002034:	f043 0310 	orr.w	r3, r3, #16
 8002038:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800203c:	4b18      	ldr	r3, [pc, #96]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 800203e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 800204c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002050:	4a13      	ldr	r2, [pc, #76]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800205a:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 800205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002068:	23c0      	movs	r3, #192	@ 0xc0
 800206a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002080:	2307      	movs	r3, #7
 8002082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800208a:	4619      	mov	r1, r3
 800208c:	4807      	ldr	r0, [pc, #28]	@ (80020ac <HAL_UART_MspInit+0x170>)
 800208e:	f004 fbbf 	bl	8006810 <HAL_GPIO_Init>
}
 8002092:	bf00      	nop
 8002094:	37e8      	adds	r7, #232	@ 0xe8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40007800 	.word	0x40007800
 80020a0:	58024400 	.word	0x58024400
 80020a4:	58021000 	.word	0x58021000
 80020a8:	40011000 	.word	0x40011000
 80020ac:	58020400 	.word	0x58020400

080020b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <NMI_Handler+0x4>

080020b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <HardFault_Handler+0x4>

080020c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <MemManage_Handler+0x4>

080020c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <BusFault_Handler+0x4>

080020d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <UsageFault_Handler+0x4>

080020d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002106:	f001 f821 	bl	800314c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002114:	4802      	ldr	r0, [pc, #8]	@ (8002120 <DMA1_Stream0_IRQHandler+0x10>)
 8002116:	f003 fa15 	bl	8005544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	240003dc 	.word	0x240003dc

08002124 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <TIM3_IRQHandler+0x10>)
 800212a:	f00a f8df 	bl	800c2ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	240006d8 	.word	0x240006d8

08002138 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800213c:	4802      	ldr	r0, [pc, #8]	@ (8002148 <OTG_HS_IRQHandler+0x10>)
 800213e:	f004 ff9d 	bl	800707c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	240057e0 	.word	0x240057e0

0800214c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return 1;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_kill>:

int _kill(int pid, int sig)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002166:	f011 feed 	bl	8013f44 <__errno>
 800216a:	4603      	mov	r3, r0
 800216c:	2216      	movs	r2, #22
 800216e:	601a      	str	r2, [r3, #0]
  return -1;
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_exit>:

void _exit (int status)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ffe7 	bl	800215c <_kill>
  while (1) {}    /* Make sure we hang here */
 800218e:	bf00      	nop
 8002190:	e7fd      	b.n	800218e <_exit+0x12>

08002192 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e00a      	b.n	80021ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021a4:	f3af 8000 	nop.w
 80021a8:	4601      	mov	r1, r0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	60ba      	str	r2, [r7, #8]
 80021b0:	b2ca      	uxtb	r2, r1
 80021b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3301      	adds	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	429a      	cmp	r2, r3
 80021c0:	dbf0      	blt.n	80021a4 <_read+0x12>
  }

  return len;
 80021c2:	687b      	ldr	r3, [r7, #4]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e009      	b.n	80021f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	60ba      	str	r2, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3301      	adds	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	dbf1      	blt.n	80021de <_write+0x12>
  }
  return len;
 80021fa:	687b      	ldr	r3, [r7, #4]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_close>:

int _close(int file)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800220c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800222c:	605a      	str	r2, [r3, #4]
  return 0;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_isatty>:

int _isatty(int file)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002244:	2301      	movs	r3, #1
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002274:	4a14      	ldr	r2, [pc, #80]	@ (80022c8 <_sbrk+0x5c>)
 8002276:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <_sbrk+0x60>)
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002280:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <_sbrk+0x64>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d102      	bne.n	800228e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002288:	4b11      	ldr	r3, [pc, #68]	@ (80022d0 <_sbrk+0x64>)
 800228a:	4a12      	ldr	r2, [pc, #72]	@ (80022d4 <_sbrk+0x68>)
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800228e:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	429a      	cmp	r2, r3
 800229a:	d207      	bcs.n	80022ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800229c:	f011 fe52 	bl	8013f44 <__errno>
 80022a0:	4603      	mov	r3, r0
 80022a2:	220c      	movs	r2, #12
 80022a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	e009      	b.n	80022c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022ac:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022b2:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <_sbrk+0x64>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	4a05      	ldr	r2, [pc, #20]	@ (80022d0 <_sbrk+0x64>)
 80022bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022be:	68fb      	ldr	r3, [r7, #12]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	24050000 	.word	0x24050000
 80022cc:	00000400 	.word	0x00000400
 80022d0:	240042b4 	.word	0x240042b4
 80022d4:	24006030 	.word	0x24006030

080022d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022dc:	4b32      	ldr	r3, [pc, #200]	@ (80023a8 <SystemInit+0xd0>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	4a31      	ldr	r2, [pc, #196]	@ (80023a8 <SystemInit+0xd0>)
 80022e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022ec:	4b2f      	ldr	r3, [pc, #188]	@ (80023ac <SystemInit+0xd4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	2b06      	cmp	r3, #6
 80022f6:	d807      	bhi.n	8002308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022f8:	4b2c      	ldr	r3, [pc, #176]	@ (80023ac <SystemInit+0xd4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 030f 	bic.w	r3, r3, #15
 8002300:	4a2a      	ldr	r2, [pc, #168]	@ (80023ac <SystemInit+0xd4>)
 8002302:	f043 0307 	orr.w	r3, r3, #7
 8002306:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002308:	4b29      	ldr	r3, [pc, #164]	@ (80023b0 <SystemInit+0xd8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a28      	ldr	r2, [pc, #160]	@ (80023b0 <SystemInit+0xd8>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002314:	4b26      	ldr	r3, [pc, #152]	@ (80023b0 <SystemInit+0xd8>)
 8002316:	2200      	movs	r2, #0
 8002318:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800231a:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <SystemInit+0xd8>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4924      	ldr	r1, [pc, #144]	@ (80023b0 <SystemInit+0xd8>)
 8002320:	4b24      	ldr	r3, [pc, #144]	@ (80023b4 <SystemInit+0xdc>)
 8002322:	4013      	ands	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002326:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <SystemInit+0xd4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002332:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <SystemInit+0xd4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 030f 	bic.w	r3, r3, #15
 800233a:	4a1c      	ldr	r2, [pc, #112]	@ (80023ac <SystemInit+0xd4>)
 800233c:	f043 0307 	orr.w	r3, r3, #7
 8002340:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002342:	4b1b      	ldr	r3, [pc, #108]	@ (80023b0 <SystemInit+0xd8>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002348:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <SystemInit+0xd8>)
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800234e:	4b18      	ldr	r3, [pc, #96]	@ (80023b0 <SystemInit+0xd8>)
 8002350:	2200      	movs	r2, #0
 8002352:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002354:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <SystemInit+0xd8>)
 8002356:	4a18      	ldr	r2, [pc, #96]	@ (80023b8 <SystemInit+0xe0>)
 8002358:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800235a:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <SystemInit+0xd8>)
 800235c:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <SystemInit+0xe4>)
 800235e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002360:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <SystemInit+0xd8>)
 8002362:	4a17      	ldr	r2, [pc, #92]	@ (80023c0 <SystemInit+0xe8>)
 8002364:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002366:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <SystemInit+0xd8>)
 8002368:	2200      	movs	r2, #0
 800236a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800236c:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <SystemInit+0xd8>)
 800236e:	4a14      	ldr	r2, [pc, #80]	@ (80023c0 <SystemInit+0xe8>)
 8002370:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002372:	4b0f      	ldr	r3, [pc, #60]	@ (80023b0 <SystemInit+0xd8>)
 8002374:	2200      	movs	r2, #0
 8002376:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002378:	4b0d      	ldr	r3, [pc, #52]	@ (80023b0 <SystemInit+0xd8>)
 800237a:	4a11      	ldr	r2, [pc, #68]	@ (80023c0 <SystemInit+0xe8>)
 800237c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800237e:	4b0c      	ldr	r3, [pc, #48]	@ (80023b0 <SystemInit+0xd8>)
 8002380:	2200      	movs	r2, #0
 8002382:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002384:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <SystemInit+0xd8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a09      	ldr	r2, [pc, #36]	@ (80023b0 <SystemInit+0xd8>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800238e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002390:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <SystemInit+0xd8>)
 8002392:	2200      	movs	r2, #0
 8002394:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002396:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <SystemInit+0xec>)
 8002398:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800239c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00
 80023ac:	52002000 	.word	0x52002000
 80023b0:	58024400 	.word	0x58024400
 80023b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80023b8:	02020200 	.word	0x02020200
 80023bc:	01ff0000 	.word	0x01ff0000
 80023c0:	01010280 	.word	0x01010280
 80023c4:	52004000 	.word	0x52004000

080023c8 <VibeCheck_Init>:


#include "vibecheck.h"

void VibeCheck_Init(VibeCheck* vc, TIM_HandleTypeDef* htim_strobe)
{
 80023c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ca:	b0a5      	sub	sp, #148	@ 0x94
 80023cc:	af10      	add	r7, sp, #64	@ 0x40
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
	VibeCheckShell_Init(&vc->shell);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f98b 	bl	80026f0 <VibeCheckShell_Init>

	VibeCheckShell_CMD strobe_cmd = {
 80023da:	4a20      	ldr	r2, [pc, #128]	@ (800245c <VibeCheck_Init+0x94>)
 80023dc:	f107 0308 	add.w	r3, r7, #8
 80023e0:	6810      	ldr	r0, [r2, #0]
 80023e2:	6018      	str	r0, [r3, #0]
 80023e4:	8891      	ldrh	r1, [r2, #4]
 80023e6:	7992      	ldrb	r2, [r2, #6]
 80023e8:	8099      	strh	r1, [r3, #4]
 80023ea:	719a      	strb	r2, [r3, #6]
 80023ec:	f107 030f 	add.w	r3, r7, #15
 80023f0:	2239      	movs	r2, #57	@ 0x39
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f011 fd34 	bl	8013e62 <memset>
 80023fa:	4b19      	ldr	r3, [pc, #100]	@ (8002460 <VibeCheck_Init+0x98>)
 80023fc:	64bb      	str	r3, [r7, #72]	@ 0x48
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	f643 13f8 	movw	r3, #14840	@ 0x39f8
 8002404:	4413      	add	r3, r2
	VibeCheckShell_CMD strobe_cmd = {
 8002406:	64fb      	str	r3, [r7, #76]	@ 0x4c
	};

	VibeCheckShell_RegisterCommand(&vc->shell, strobe_cmd);
 8002408:	687e      	ldr	r6, [r7, #4]
 800240a:	466d      	mov	r5, sp
 800240c:	f107 0414 	add.w	r4, r7, #20
 8002410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800241c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002420:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002424:	f107 0308 	add.w	r3, r7, #8
 8002428:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242a:	4630      	mov	r0, r6
 800242c:	f000 f979 	bl	8002722 <VibeCheckShell_RegisterCommand>


	VibeCheckUSB_Init(&vc->usb, &vc->shell);
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	f642 230c 	movw	r3, #10764	@ 0x2a0c
 8002436:	4413      	add	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f821 	bl	8002484 <VibeCheckUSB_Init>
	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	f643 13f8 	movw	r3, #14840	@ 0x39f8
 8002448:	4413      	add	r3, r2
 800244a:	6839      	ldr	r1, [r7, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fae9 	bl	8002a24 <VibeCheckStrobe_Init>
}
 8002452:	bf00      	nop
 8002454:	3754      	adds	r7, #84	@ 0x54
 8002456:	46bd      	mov	sp, r7
 8002458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800245a:	bf00      	nop
 800245c:	08016860 	.word	0x08016860
 8002460:	08002dcd 	.word	0x08002dcd

08002464 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	VibeCheckUSB_Update(&vc->usb);
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	f642 230c 	movw	r3, #10764	@ 0x2a0c
 8002472:	4413      	add	r3, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f000 f82d 	bl	80024d4 <VibeCheckUSB_Update>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <VibeCheckUSB_Init>:

uint8_t usb_rx_buf[64];  /* see USB_DEVICE -> App -> usbd_cdc_if.c for implementation */
uint8_t usb_rx_ready = 0;  /* flag when USB data has been received */

void VibeCheckUSB_Init(VibeCheckUSB* usb, VibeCheckShell* shell)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
	usb->shell = shell;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	601a      	str	r2, [r3, #0]

	usb->rx_buf = usb_rx_buf;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a0d      	ldr	r2, [pc, #52]	@ (80024cc <VibeCheckUSB_Init+0x48>)
 8002498:	605a      	str	r2, [r3, #4]
	usb->rx_ready = &usb_rx_ready;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a0c      	ldr	r2, [pc, #48]	@ (80024d0 <VibeCheckUSB_Init+0x4c>)
 800249e:	609a      	str	r2, [r3, #8]

	usb->data_buf_head = 0;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f8c3 27dc 	str.w	r2, [r3, #2012]	@ 0x7dc
	usb->data_buf_tail = 0;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0
	usb->data_buf_count = 0;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f8c3 27e4 	str.w	r2, [r3, #2020]	@ 0x7e4

	usb->data_str_ind = 0;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f8c3 2fe8 	str.w	r2, [r3, #4072]	@ 0xfe8
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	240042b8 	.word	0x240042b8
 80024d0:	240042f8 	.word	0x240042f8

080024d4 <VibeCheckUSB_Update>:

void VibeCheckUSB_Update(VibeCheckUSB* usb)  /* single function to call in main loop to update the USB class */
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

	/* process any commands that we have received from the host */
	VibeCheckUSB_ProcessCommand(usb);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f807 	bl	80024f0 <VibeCheckUSB_ProcessCommand>

	/* encode any data in the data buffer, send to the host if the data packet is full */
	VibeCheckUSB_ProcessData(usb);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f82e 	bl	8002544 <VibeCheckUSB_ProcessData>

}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <VibeCheckUSB_ProcessCommand>:

uint32_t VibeCheckUSB_ProcessCommand(VibeCheckUSB* usb)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	/* return true if we have successfully processed a command */
	if (*usb->rx_ready)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d01b      	beq.n	800253a <VibeCheckUSB_ProcessCommand+0x4a>
	{
		*usb->rx_ready = 0;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]

		/* have the shell process the command */
		char* output;
		uint32_t output_len;
		if (VibeCheckShell_ProcessInput(usb->shell, (char*)usb->rx_buf, &output, &output_len))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6859      	ldr	r1, [r3, #4]
 8002512:	f107 0308 	add.w	r3, r7, #8
 8002516:	f107 020c 	add.w	r2, r7, #12
 800251a:	f000 f933 	bl	8002784 <VibeCheckShell_ProcessInput>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <VibeCheckUSB_ProcessCommand+0x4a>
		{
			if (output_len)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <VibeCheckUSB_ProcessCommand+0x46>
				VibeCheckUSB_Send_BlockUntilStarted((uint8_t*)output, output_len);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f000 f8c9 	bl	80026c8 <VibeCheckUSB_Send_BlockUntilStarted>
			return 1;
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <VibeCheckUSB_ProcessCommand+0x4c>
		}
	}

	return 0;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <VibeCheckUSB_ProcessData>:
		usb->data_buf_head = 0;

}

void VibeCheckUSB_ProcessData(VibeCheckUSB* usb)
{
 8002544:	b5b0      	push	{r4, r5, r7, lr}
 8002546:	b08e      	sub	sp, #56	@ 0x38
 8002548:	af06      	add	r7, sp, #24
 800254a:	6078      	str	r0, [r7, #4]
	/* encode all of the elements in the data buffer and put them in the data string to send to the host */
	while (usb->data_buf_head != usb->data_buf_tail && usb->data_buf_count < VC_USB_DATA_BUF_LEN)  /* TODO: this breaks if the data buffer is full so don't let that happen */
 800254c:	e04e      	b.n	80025ec <VibeCheckUSB_ProcessData+0xa8>
	{
		VibeCheckUSBData data_to_encode = usb->data_buf[usb->data_buf_tail];
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f8d3 27e0 	ldr.w	r2, [r3, #2016]	@ 0x7e0
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	3308      	adds	r3, #8
 8002562:	f107 040c 	add.w	r4, r7, #12
 8002566:	1d1d      	adds	r5, r3, #4
 8002568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800256a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800256c:	682b      	ldr	r3, [r5, #0]
 800256e:	6023      	str	r3, [r4, #0]

		/* encode the data here and add it to the data string */
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f503 62fd 	add.w	r2, r3, #2024	@ 0x7e8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	@ 0xfe8
 800257c:	18d0      	adds	r0, r2, r3
				data_to_encode.id,
 800257e:	7b3b      	ldrb	r3, [r7, #12]
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 8002580:	461a      	mov	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
				data_to_encode.time,
				data_to_encode.x,
 8002584:	edd7 7a05 	vldr	s15, [r7, #20]
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 8002588:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				data_to_encode.y,
 800258c:	edd7 6a06 	vldr	s13, [r7, #24]
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 8002590:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
				data_to_encode.z);
 8002594:	edd7 5a07 	vldr	s11, [r7, #28]
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 8002598:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800259c:	ed8d 5b04 	vstr	d5, [sp, #16]
 80025a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80025a4:	ed8d 7b00 	vstr	d7, [sp]
 80025a8:	4944      	ldr	r1, [pc, #272]	@ (80026bc <VibeCheckUSB_ProcessData+0x178>)
 80025aa:	f011 fbf7 	bl	8013d9c <siprintf>
 80025ae:	4602      	mov	r2, r0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	@ 0xfe8
 80025b6:	441a      	add	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f8c3 2fe8 	str.w	r2, [r3, #4072]	@ 0xfe8

		usb->data_buf_count++;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8d3 37e4 	ldr.w	r3, [r3, #2020]	@ 0x7e4
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f8c3 27e4 	str.w	r2, [r3, #2020]	@ 0x7e4
		if (++usb->data_buf_tail == VC_USB_DATA_BUF_LEN)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 80025e0:	2b64      	cmp	r3, #100	@ 0x64
 80025e2:	d103      	bne.n	80025ec <VibeCheckUSB_ProcessData+0xa8>
			usb->data_buf_tail = 0;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0
	while (usb->data_buf_head != usb->data_buf_tail && usb->data_buf_count < VC_USB_DATA_BUF_LEN)  /* TODO: this breaks if the data buffer is full so don't let that happen */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8d3 27dc 	ldr.w	r2, [r3, #2012]	@ 0x7dc
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d004      	beq.n	8002606 <VibeCheckUSB_ProcessData+0xc2>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8d3 37e4 	ldr.w	r3, [r3, #2020]	@ 0x7e4
 8002602:	2b63      	cmp	r3, #99	@ 0x63
 8002604:	d9a3      	bls.n	800254e <VibeCheckUSB_ProcessData+0xa>
	}

	if (usb->data_buf_count == VC_USB_DATA_PER_PACKET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f8d3 37e4 	ldr.w	r3, [r3, #2020]	@ 0x7e4
 800260c:	2b02      	cmp	r3, #2
 800260e:	d150      	bne.n	80026b2 <VibeCheckUSB_ProcessData+0x16e>
	{
		/* we have a full data packet so send it */

		/* add a newline */
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind - 1, "\r\n");
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f503 62fd 	add.w	r2, r3, #2024	@ 0x7e8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	@ 0xfe8
 800261c:	3b01      	subs	r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	4927      	ldr	r1, [pc, #156]	@ (80026c0 <VibeCheckUSB_ProcessData+0x17c>)
 8002622:	4618      	mov	r0, r3
 8002624:	f011 fbba 	bl	8013d9c <siprintf>
 8002628:	4602      	mov	r2, r0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	@ 0xfe8
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8c3 2fe8 	str.w	r2, [r3, #4072]	@ 0xfe8

		if (usb->data_str_ind < VC_USB_DATA_STR_LEN / 2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	@ 0xfe8
 800263e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002642:	d20f      	bcs.n	8002664 <VibeCheckUSB_ProcessData+0x120>
		{
			/* send the first half buffer and prepare to fill the second half */
			VibeCheckUSB_Send_BlockUntilStarted((uint8_t*)&usb->data_str[0], usb->data_str_ind);  /* !!! blocking until the transmission starts successfully !!! */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f503 62fd 	add.w	r2, r3, #2024	@ 0x7e8
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	@ 0xfe8
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f000 f838 	bl	80026c8 <VibeCheckUSB_Send_BlockUntilStarted>
			usb->data_str_ind = VC_USB_DATA_STR_LEN / 2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800265e:	f8c3 2fe8 	str.w	r2, [r3, #4072]	@ 0xfe8
 8002662:	e00f      	b.n	8002684 <VibeCheckUSB_ProcessData+0x140>
		}
		else
		{
			/* send the second half buffer and prepare to fill the first half */
			VibeCheckUSB_Send_BlockUntilStarted((uint8_t*)&usb->data_str[VC_USB_DATA_STR_LEN / 2], usb->data_str_ind - VC_USB_DATA_STR_LEN / 2);  /* !!! blocking until the transmission starts successfully !!! */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f603 32e8 	addw	r2, r3, #3048	@ 0xbe8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	@ 0xfe8
 8002670:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002674:	4619      	mov	r1, r3
 8002676:	4610      	mov	r0, r2
 8002678:	f000 f826 	bl	80026c8 <VibeCheckUSB_Send_BlockUntilStarted>
			usb->data_str_ind = 0;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f8c3 2fe8 	str.w	r2, [r3, #4072]	@ 0xfe8
		}

		/* prepare the next data packet */
		usb->data_buf_count = 0;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f8c3 27e4 	str.w	r2, [r3, #2020]	@ 0x7e4

		/* write the header */
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, VC_USB_DATA_HEADER);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f503 62fd 	add.w	r2, r3, #2024	@ 0x7e8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	@ 0xfe8
 8002698:	4413      	add	r3, r2
 800269a:	490a      	ldr	r1, [pc, #40]	@ (80026c4 <VibeCheckUSB_ProcessData+0x180>)
 800269c:	4618      	mov	r0, r3
 800269e:	f011 fb7d 	bl	8013d9c <siprintf>
 80026a2:	4602      	mov	r2, r0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	@ 0xfe8
 80026aa:	441a      	add	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8c3 2fe8 	str.w	r2, [r3, #4072]	@ 0xfe8
	}
}
 80026b2:	bf00      	nop
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bdb0      	pop	{r4, r5, r7, pc}
 80026ba:	bf00      	nop
 80026bc:	08016868 	.word	0x08016868
 80026c0:	08016884 	.word	0x08016884
 80026c4:	08016888 	.word	0x08016888

080026c8 <VibeCheckUSB_Send_BlockUntilStarted>:
	return CDC_Transmit_HS(data, len) == USBD_OK;
}

/* TODO: lifetime issue with the data pointer */
void VibeCheckUSB_Send_BlockUntilStarted(uint8_t* data, uint32_t len)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
	/* returns true if transmission started successfully */
	while(CDC_Transmit_HS(data, len) != USBD_OK);
 80026d2:	bf00      	nop
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f00f fc52 	bl	8011f84 <CDC_Transmit_HS>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f6      	bne.n	80026d4 <VibeCheckUSB_Send_BlockUntilStarted+0xc>
}
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	shell->input_pos = 0;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
	shell->output_pos = 0;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
	shell->cmd_count = 0;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800270e:	461a      	mov	r2, r3
 8002710:	2300      	movs	r3, #0
 8002712:	f8c2 3a08 	str.w	r3, [r2, #2568]	@ 0xa08
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <VibeCheckShell_RegisterCommand>:

void VibeCheckShell_RegisterCommand(VibeCheckShell* shell, VibeCheckShell_CMD cmd)
{
 8002722:	b084      	sub	sp, #16
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	f107 0014 	add.w	r0, r7, #20
 8002730:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->cmd_count < VC_SHELL_MAX_NUM_CMDS)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800273a:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	@ 0xa08
 800273e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002740:	d819      	bhi.n	8002776 <VibeCheckShell_RegisterCommand+0x54>
	{
		shell->commands[shell->cmd_count++] = cmd;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002748:	f8d3 2a08 	ldr.w	r2, [r3, #2568]	@ 0xa08
 800274c:	1c53      	adds	r3, r2, #1
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002754:	f8c1 3a08 	str.w	r3, [r1, #2568]	@ 0xa08
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	440b      	add	r3, r1
 8002764:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 8002768:	4618      	mov	r0, r3
 800276a:	f107 0314 	add.w	r3, r7, #20
 800276e:	2248      	movs	r2, #72	@ 0x48
 8002770:	4619      	mov	r1, r3
 8002772:	f011 fc1c 	bl	8013fae <memcpy>
	}
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002780:	b004      	add	sp, #16
 8002782:	4770      	bx	lr

08002784 <VibeCheckShell_ProcessInput>:

uint32_t VibeCheckShell_ProcessInput(VibeCheckShell* shell, char* input, char** output, uint32_t* output_len)  /* returns the output string as a result of running the command */
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b089      	sub	sp, #36	@ 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]

	strcpy(shell->input, input);  /* TODO: revisit safety of copying strings once it works */
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	4618      	mov	r0, r3
 8002798:	f011 fc01 	bl	8013f9e <strcpy>
	shell->input_pos = 0;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
	shell->output_pos = 0;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

	uint32_t ret = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]

	char* cmd_name;
	VibeCheckShell_GetNextString(shell, &cmd_name);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f848 	bl	800284c <VibeCheckShell_GetNextString>

	for (uint32_t i = 0; i < shell->cmd_count; i++)
 80027bc:	2300      	movs	r3, #0
 80027be:	61bb      	str	r3, [r7, #24]
 80027c0:	e02c      	b.n	800281c <VibeCheckShell_ProcessInput+0x98>
	{
		if (!strcmp(shell->commands[i].name, cmd_name))
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4613      	mov	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd fd99 	bl	8000310 <strcmp>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d118      	bne.n	8002816 <VibeCheckShell_ProcessInput+0x92>
		{
			ret = shell->commands[i].execute(shell->commands[i].obj, shell);
 80027e4:	68f9      	ldr	r1, [r7, #12]
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 63c9 	add.w	r3, r3, #1608	@ 0x648
 80027f6:	681c      	ldr	r4, [r3, #0]
 80027f8:	68f9      	ldr	r1, [r7, #12]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	f203 634c 	addw	r3, r3, #1612	@ 0x64c
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68f9      	ldr	r1, [r7, #12]
 800280e:	4618      	mov	r0, r3
 8002810:	47a0      	blx	r4
 8002812:	61f8      	str	r0, [r7, #28]
			break;
 8002814:	e00a      	b.n	800282c <VibeCheckShell_ProcessInput+0xa8>
	for (uint32_t i = 0; i < shell->cmd_count; i++)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	3301      	adds	r3, #1
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002822:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	@ 0xa08
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	429a      	cmp	r2, r3
 800282a:	d3ca      	bcc.n	80027c2 <VibeCheckShell_ProcessInput+0x3e>
		}
	}

	*output = shell->output;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f503 7200 	add.w	r2, r3, #512	@ 0x200
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	601a      	str	r2, [r3, #0]
	*output_len = shell->output_pos;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	601a      	str	r2, [r3, #0]
	return ret;
 8002840:	69fb      	ldr	r3, [r7, #28]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	@ 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd90      	pop	{r4, r7, pc}
	...

0800284c <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char** next)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
	/* delimiters could be spaces or commas */
	/* turn to all lower case letters */
	/* the next token will be stored in the shell struct, return a pointer to the token char array */

	char separator[] = " ,";
 8002856:	4a26      	ldr	r2, [pc, #152]	@ (80028f0 <VibeCheckShell_GetNextString+0xa4>)
 8002858:	f107 0308 	add.w	r3, r7, #8
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	4611      	mov	r1, r2
 8002860:	8019      	strh	r1, [r3, #0]
 8002862:	3302      	adds	r3, #2
 8002864:	0c12      	lsrs	r2, r2, #16
 8002866:	701a      	strb	r2, [r3, #0]
	char* token = shell->token;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800286e:	60fb      	str	r3, [r7, #12]
	while (shell->input[shell->input_pos] && shell->input_pos < VC_SHELL_STR_LEN)
 8002870:	e02c      	b.n	80028cc <VibeCheckShell_GetNextString+0x80>
	{
		if (strchr(separator, shell->input[shell->input_pos]) == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	461a      	mov	r2, r3
 800287e:	f107 0308 	add.w	r3, r7, #8
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f011 faf4 	bl	8013e72 <strchr>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d109      	bne.n	80028a4 <VibeCheckShell_GetNextString+0x58>
		{
			/* this is a character */
			*(token++) = shell->input[shell->input_pos];
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1c59      	adds	r1, r3, #1
 800289a:	60f9      	str	r1, [r7, #12]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	5c8a      	ldrb	r2, [r1, r2]
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e00c      	b.n	80028be <VibeCheckShell_GetNextString+0x72>
		}
		else
		{
			/* this is a separator */
			if (token != shell->token) /* we have something in the token and have found a separator */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d006      	beq.n	80028be <VibeCheckShell_GetNextString+0x72>
			{
				*next = shell->token;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f503 6281 	add.w	r2, r3, #1032	@ 0x408
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	601a      	str	r2, [r3, #0]
				return 1;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e014      	b.n	80028e8 <VibeCheckShell_GetNextString+0x9c>
			}
		}
		shell->input_pos++;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
	while (shell->input[shell->input_pos] && shell->input_pos < VC_SHELL_STR_LEN)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	5cd3      	ldrb	r3, [r2, r3]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <VibeCheckShell_GetNextString+0x9a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80028e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028e4:	d3c5      	bcc.n	8002872 <VibeCheckShell_GetNextString+0x26>
	}

	return 0;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	08016890 	.word	0x08016890

080028f4 <VibeCheckShell_GetNextFloat>:

	return 0;
}

uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b089      	sub	sp, #36	@ 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
	char* str;
	if (VibeCheckShell_GetNextString(shell, &str))
 80028fe:	f107 0318 	add.w	r3, r7, #24
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ffa1 	bl	800284c <VibeCheckShell_GetNextString>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d030      	beq.n	8002972 <VibeCheckShell_GetNextFloat+0x7e>
	{
		char valid[] = ".-0123456789";
 8002910:	4b1a      	ldr	r3, [pc, #104]	@ (800297c <VibeCheckShell_GetNextFloat+0x88>)
 8002912:	f107 0408 	add.w	r4, r7, #8
 8002916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002918:	c407      	stmia	r4!, {r0, r1, r2}
 800291a:	7023      	strb	r3, [r4, #0]
		for (uint32_t i = 0; i < strlen(str); i++)
 800291c:	2300      	movs	r3, #0
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	e012      	b.n	8002948 <VibeCheckShell_GetNextFloat+0x54>
			if (strchr(valid, str[i]) == NULL)
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	f107 0308 	add.w	r3, r7, #8
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f011 fa9d 	bl	8013e72 <strchr>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <VibeCheckShell_GetNextFloat+0x4e>
				return 0;  /* next token contains non-numeric characters */
 800293e:	2300      	movs	r3, #0
 8002940:	e018      	b.n	8002974 <VibeCheckShell_GetNextFloat+0x80>
		for (uint32_t i = 0; i < strlen(str); i++)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3301      	adds	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd fd40 	bl	80003d0 <strlen>
 8002950:	4602      	mov	r2, r0
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	4293      	cmp	r3, r2
 8002956:	d3e4      	bcc.n	8002922 <VibeCheckShell_GetNextFloat+0x2e>
		*next = atof(str);
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	4618      	mov	r0, r3
 800295c:	f00f ff66 	bl	801282c <atof>
 8002960:	eeb0 7b40 	vmov.f64	d7, d0
 8002964:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	edc3 7a00 	vstr	s15, [r3]
		return 1;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <VibeCheckShell_GetNextFloat+0x80>
	}

	return 0;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3724      	adds	r7, #36	@ 0x24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd90      	pop	{r4, r7, pc}
 800297c:	080168a0 	.word	0x080168a0

08002980 <VibeCheckShell_PutString>:


/* add things to the output */
void VibeCheckShell_PutString(VibeCheckShell* shell, char* str)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
	shell->output_pos += sprintf(shell->output + shell->output_pos, "%s ", str);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f503 7200 	add.w	r2, r3, #512	@ 0x200
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002996:	4413      	add	r3, r2
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	4908      	ldr	r1, [pc, #32]	@ (80029bc <VibeCheckShell_PutString+0x3c>)
 800299c:	4618      	mov	r0, r3
 800299e:	f011 f9fd 	bl	8013d9c <siprintf>
 80029a2:	4602      	mov	r2, r0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80029aa:	441a      	add	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	080168b0 	.word	0x080168b0

080029c0 <VibeCheckShell_PutFloat>:
{
	shell->output_pos += sprintf(shell->output + shell->output_pos, "%ld ", val);
}

void VibeCheckShell_PutFloat(VibeCheckShell* shell, float val)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	ed87 0a00 	vstr	s0, [r7]
	shell->output_pos += sprintf(shell->output + shell->output_pos, "%f ", val);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f503 7200 	add.w	r2, r3, #512	@ 0x200
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80029d8:	18d0      	adds	r0, r2, r3
 80029da:	edd7 7a00 	vldr	s15, [r7]
 80029de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029e2:	ec53 2b17 	vmov	r2, r3, d7
 80029e6:	4907      	ldr	r1, [pc, #28]	@ (8002a04 <VibeCheckShell_PutFloat+0x44>)
 80029e8:	f011 f9d8 	bl	8013d9c <siprintf>
 80029ec:	4602      	mov	r2, r0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80029f4:	441a      	add	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	080168bc 	.word	0x080168bc

08002a08 <VibeCheckShell_Ack>:

void VibeCheckShell_Ack(VibeCheckShell* shell)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutString(shell, "ack");
 8002a10:	4903      	ldr	r1, [pc, #12]	@ (8002a20 <VibeCheckShell_Ack+0x18>)
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ffb4 	bl	8002980 <VibeCheckShell_PutString>
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	080168c0 	.word	0x080168c0

08002a24 <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a3a:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a42:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f640 125f 	movw	r2, #2399	@ 0x95f
 8002a56:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f840 	bl	8002ae8 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f91e 	bl	8002cb4 <VibeCheckStrobe_SetExposure>

}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_PWM_Start_IT(strobe->htim, TIM_CHANNEL_1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f009 f9e0 	bl	800be54 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(strobe->htim, TIM_CHANNEL_2);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2104      	movs	r1, #4
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f009 f9da 	bl	800be54 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(strobe->htim, TIM_CHANNEL_3);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2108      	movs	r1, #8
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f009 f9d4 	bl	800be54 <HAL_TIM_PWM_Start_IT>
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_IT(strobe->htim, TIM_CHANNEL_1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f009 fb2e 	bl	800c124 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(strobe->htim, TIM_CHANNEL_2);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2104      	movs	r1, #4
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f009 fb28 	bl	800c124 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(strobe->htim, TIM_CHANNEL_3);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2108      	movs	r1, #8
 8002ada:	4618      	mov	r0, r3
 8002adc:	f009 fb22 	bl	800c124 <HAL_TIM_PWM_Stop_IT>
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 8002af4:	edd7 7a00 	vldr	s15, [r7]
 8002af8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b04:	d502      	bpl.n	8002b0c <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8002b06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b0a:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 8002b0c:	edd7 7a00 	vldr	s15, [r7]
 8002b10:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002b7c <VibeCheckStrobe_SetFrequency+0x94>
 8002b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	dd01      	ble.n	8002b22 <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 8002b1e:	4b18      	ldr	r3, [pc, #96]	@ (8002b80 <VibeCheckStrobe_SetFrequency+0x98>)
 8002b20:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 8002b22:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8002b84 <VibeCheckStrobe_SetFrequency+0x9c>
 8002b26:	ed97 7a00 	vldr	s14, [r7]
 8002b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b3a:	ee17 2a90 	vmov	r2, s15
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b56:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002b84 <VibeCheckStrobe_SetFrequency+0x9c>
 8002b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6912      	ldr	r2, [r2, #16]
 8002b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	447a0000 	.word	0x447a0000
 8002b80:	447a0000 	.word	0x447a0000
 8002b84:	47c35000 	.word	0x47c35000

08002b88 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	ee07 3a90 	vmov	s15, r3
}
 8002b98:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 8002bb4:	edd7 7a00 	vldr	s15, [r7]
 8002bb8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002c80 <VibeCheckStrobe_SetPhase+0xd8>
 8002bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	d501      	bpl.n	8002bca <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 8002bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8002c84 <VibeCheckStrobe_SetPhase+0xdc>)
 8002bc8:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 8002bca:	edd7 7a00 	vldr	s15, [r7]
 8002bce:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002c88 <VibeCheckStrobe_SetPhase+0xe0>
 8002bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bda:	dd01      	ble.n	8002be0 <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8002c8c <VibeCheckStrobe_SetPhase+0xe4>)
 8002bde:	603b      	str	r3, [r7, #0]


	/* TODO: need to test if this works */
	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002be6:	ed97 7a00 	vldr	s14, [r7]
 8002bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bee:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 8002bf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bf6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002c90 <VibeCheckStrobe_SetPhase+0xe8>
 8002bfa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c12:	ee17 3a90 	vmov	r3, s15
 8002c16:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d029      	beq.n	8002c72 <VibeCheckStrobe_SetPhase+0xca>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d125      	bne.n	8002c72 <VibeCheckStrobe_SetPhase+0xca>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d121      	bne.n	8002c72 <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c4a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002c4e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8002c90 <VibeCheckStrobe_SetPhase+0xe8>
 8002c52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	441a      	add	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	619a      	str	r2, [r3, #24]
	}
}
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	c3340000 	.word	0xc3340000
 8002c84:	c3340000 	.word	0xc3340000
 8002c88:	43340000 	.word	0x43340000
 8002c8c:	43340000 	.word	0x43340000
 8002c90:	43b40000 	.word	0x43b40000

08002c94 <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	ee07 3a90 	vmov	s15, r3
}
 8002ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 8002cc0:	edd7 7a00 	vldr	s15, [r7]
 8002cc4:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002d50 <VibeCheckStrobe_SetExposure+0x9c>
 8002cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ccc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002d54 <VibeCheckStrobe_SetExposure+0xa0>
 8002cd0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cd4:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002d58 <VibeCheckStrobe_SetExposure+0xa4>
 8002cd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ce0:	ee17 3a90 	vmov	r3, s15
 8002ce4:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d904      	bls.n	8002cfe <VibeCheckStrobe_SetExposure+0x4a>
		ccr_val = strobe->htim->Instance->ARR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	ee07 3a90 	vmov	s15, r3
 8002d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d08:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002d54 <VibeCheckStrobe_SetExposure+0xa0>
 8002d0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d10:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8002d58 <VibeCheckStrobe_SetExposure+0xa4>
 8002d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d18:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002d5c <VibeCheckStrobe_SetExposure+0xa8>
 8002d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	3a83126f 	.word	0x3a83126f
 8002d54:	4d64e1c0 	.word	0x4d64e1c0
 8002d58:	45160000 	.word	0x45160000
 8002d5c:	447a0000 	.word	0x447a0000

08002d60 <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	ee07 3a90 	vmov	s15, r3
}
 8002d70:	eeb0 0a67 	vmov.f32	s0, s15
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d008      	beq.n	8002da0 <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6912      	ldr	r2, [r2, #16]
 8002d98:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00b      	beq.n	8002dc0 <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6952      	ldr	r2, [r2, #20]
 8002db2:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]
	}
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <VibeCheckStrobeCMD_Execute>:
>>strobe get exposure

*/

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	60fb      	str	r3, [r7, #12]

	char* str;
	if (VibeCheckShell_GetNextString(shell, &str))
 8002dda:	f107 0308 	add.w	r3, r7, #8
 8002dde:	4619      	mov	r1, r3
 8002de0:	6838      	ldr	r0, [r7, #0]
 8002de2:	f7ff fd33 	bl	800284c <VibeCheckShell_GetNextString>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d047      	beq.n	8002e7c <VibeCheckStrobeCMD_Execute+0xb0>
	{
		if (!strcmp(str, "start"))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4926      	ldr	r1, [pc, #152]	@ (8002e88 <VibeCheckStrobeCMD_Execute+0xbc>)
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fa8d 	bl	8000310 <strcmp>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d107      	bne.n	8002e0c <VibeCheckStrobeCMD_Execute+0x40>
		{
			VibeCheckStrobe_Start(strobe);
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f7ff fe3f 	bl	8002a80 <VibeCheckStrobe_Start>
			VibeCheckShell_Ack(shell);
 8002e02:	6838      	ldr	r0, [r7, #0]
 8002e04:	f7ff fe00 	bl	8002a08 <VibeCheckShell_Ack>
			return 1;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e038      	b.n	8002e7e <VibeCheckStrobeCMD_Execute+0xb2>
		}
		else if (!strcmp(str, "stop"))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	491f      	ldr	r1, [pc, #124]	@ (8002e8c <VibeCheckStrobeCMD_Execute+0xc0>)
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fd fa7d 	bl	8000310 <strcmp>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <VibeCheckStrobeCMD_Execute+0x60>
		{
			VibeCheckStrobe_Stop(strobe);
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7ff fe49 	bl	8002ab4 <VibeCheckStrobe_Stop>
			VibeCheckShell_Ack(shell);
 8002e22:	6838      	ldr	r0, [r7, #0]
 8002e24:	f7ff fdf0 	bl	8002a08 <VibeCheckShell_Ack>
			return 1;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e028      	b.n	8002e7e <VibeCheckStrobeCMD_Execute+0xb2>
		}
		else if (!strcmp(str, "set"))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4918      	ldr	r1, [pc, #96]	@ (8002e90 <VibeCheckStrobeCMD_Execute+0xc4>)
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fa6d 	bl	8000310 <strcmp>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <VibeCheckStrobeCMD_Execute+0x88>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 8002e3c:	6839      	ldr	r1, [r7, #0]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f82a 	bl	8002e98 <VibeCheckStrobeCMD_Set>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d018      	beq.n	8002e7c <VibeCheckStrobeCMD_Execute+0xb0>
			{
				VibeCheckShell_Ack(shell);
 8002e4a:	6838      	ldr	r0, [r7, #0]
 8002e4c:	f7ff fddc 	bl	8002a08 <VibeCheckShell_Ack>
				return 1;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e014      	b.n	8002e7e <VibeCheckStrobeCMD_Execute+0xb2>
			}
		}
		else if (!strcmp(str, "get"))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	490f      	ldr	r1, [pc, #60]	@ (8002e94 <VibeCheckStrobeCMD_Execute+0xc8>)
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fa59 	bl	8000310 <strcmp>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10b      	bne.n	8002e7c <VibeCheckStrobeCMD_Execute+0xb0>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 8002e64:	6839      	ldr	r1, [r7, #0]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f87e 	bl	8002f68 <VibeCheckStrobeCMD_Get>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d004      	beq.n	8002e7c <VibeCheckStrobeCMD_Execute+0xb0>
			{
				VibeCheckShell_Ack(shell);
 8002e72:	6838      	ldr	r0, [r7, #0]
 8002e74:	f7ff fdc8 	bl	8002a08 <VibeCheckShell_Ack>
				return 1;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <VibeCheckStrobeCMD_Execute+0xb2>
			}
		}
	}

	return 0;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	080168c4 	.word	0x080168c4
 8002e8c:	080168cc 	.word	0x080168cc
 8002e90:	080168d4 	.word	0x080168d4
 8002e94:	080168d8 	.word	0x080168d8

08002e98 <VibeCheckStrobeCMD_Set>:

uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
	char* str;
	if (VibeCheckShell_GetNextString(shell, &str))
 8002ea2:	f107 0314 	add.w	r3, r7, #20
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6838      	ldr	r0, [r7, #0]
 8002eaa:	f7ff fccf 	bl	800284c <VibeCheckShell_GetNextString>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d04d      	beq.n	8002f50 <VibeCheckStrobeCMD_Set+0xb8>
	{
		if (!strcmp(str, "frequency"))
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	4929      	ldr	r1, [pc, #164]	@ (8002f5c <VibeCheckStrobeCMD_Set+0xc4>)
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fd fa29 	bl	8000310 <strcmp>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d111      	bne.n	8002ee8 <VibeCheckStrobeCMD_Set+0x50>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8002ec4:	f107 0310 	add.w	r3, r7, #16
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6838      	ldr	r0, [r7, #0]
 8002ecc:	f7ff fd12 	bl	80028f4 <VibeCheckShell_GetNextFloat>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d03c      	beq.n	8002f50 <VibeCheckStrobeCMD_Set+0xb8>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 8002ed6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002eda:	eeb0 0a67 	vmov.f32	s0, s15
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff fe02 	bl	8002ae8 <VibeCheckStrobe_SetFrequency>
				return 1;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e034      	b.n	8002f52 <VibeCheckStrobeCMD_Set+0xba>
			}
		}
		else if (!strcmp(str, "phase"))
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	491d      	ldr	r1, [pc, #116]	@ (8002f60 <VibeCheckStrobeCMD_Set+0xc8>)
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fd fa0f 	bl	8000310 <strcmp>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d111      	bne.n	8002f1c <VibeCheckStrobeCMD_Set+0x84>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8002ef8:	f107 030c 	add.w	r3, r7, #12
 8002efc:	4619      	mov	r1, r3
 8002efe:	6838      	ldr	r0, [r7, #0]
 8002f00:	f7ff fcf8 	bl	80028f4 <VibeCheckShell_GetNextFloat>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d022      	beq.n	8002f50 <VibeCheckStrobeCMD_Set+0xb8>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 8002f0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff fe48 	bl	8002ba8 <VibeCheckStrobe_SetPhase>
				return 1;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e01a      	b.n	8002f52 <VibeCheckStrobeCMD_Set+0xba>
			}
		}
		else if (!strcmp(str, "exposure"))
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	4911      	ldr	r1, [pc, #68]	@ (8002f64 <VibeCheckStrobeCMD_Set+0xcc>)
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd f9f5 	bl	8000310 <strcmp>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d111      	bne.n	8002f50 <VibeCheckStrobeCMD_Set+0xb8>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8002f2c:	f107 0308 	add.w	r3, r7, #8
 8002f30:	4619      	mov	r1, r3
 8002f32:	6838      	ldr	r0, [r7, #0]
 8002f34:	f7ff fcde 	bl	80028f4 <VibeCheckShell_GetNextFloat>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <VibeCheckStrobeCMD_Set+0xb8>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 8002f3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f42:	eeb0 0a67 	vmov.f32	s0, s15
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff feb4 	bl	8002cb4 <VibeCheckStrobe_SetExposure>
				return 1;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <VibeCheckStrobeCMD_Set+0xba>
			}
		}
	}

	return 0;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	080168dc 	.word	0x080168dc
 8002f60:	080168e8 	.word	0x080168e8
 8002f64:	080168f0 	.word	0x080168f0

08002f68 <VibeCheckStrobeCMD_Get>:

uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
	char* str;
	if (VibeCheckShell_GetNextString(shell, &str))
 8002f72:	f107 030c 	add.w	r3, r7, #12
 8002f76:	4619      	mov	r1, r3
 8002f78:	6838      	ldr	r0, [r7, #0]
 8002f7a:	f7ff fc67 	bl	800284c <VibeCheckShell_GetNextString>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d03b      	beq.n	8002ffc <VibeCheckStrobeCMD_Get+0x94>
	{
		if (!strcmp(str, "frequency"))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4920      	ldr	r1, [pc, #128]	@ (8003008 <VibeCheckStrobeCMD_Get+0xa0>)
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd f9c1 	bl	8000310 <strcmp>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10b      	bne.n	8002fac <VibeCheckStrobeCMD_Get+0x44>
		{
			VibeCheckShell_PutFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff fdf7 	bl	8002b88 <VibeCheckStrobe_GetFrequency>
 8002f9a:	eef0 7a40 	vmov.f32	s15, s0
 8002f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002fa2:	6838      	ldr	r0, [r7, #0]
 8002fa4:	f7ff fd0c 	bl	80029c0 <VibeCheckShell_PutFloat>
			return 1;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e028      	b.n	8002ffe <VibeCheckStrobeCMD_Get+0x96>
		}
		else if (!strcmp(str, "phase"))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4917      	ldr	r1, [pc, #92]	@ (800300c <VibeCheckStrobeCMD_Get+0xa4>)
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd f9ad 	bl	8000310 <strcmp>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10b      	bne.n	8002fd4 <VibeCheckStrobeCMD_Get+0x6c>
		{
			VibeCheckShell_PutFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff fe69 	bl	8002c94 <VibeCheckStrobe_GetPhase>
 8002fc2:	eef0 7a40 	vmov.f32	s15, s0
 8002fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fca:	6838      	ldr	r0, [r7, #0]
 8002fcc:	f7ff fcf8 	bl	80029c0 <VibeCheckShell_PutFloat>
			return 1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e014      	b.n	8002ffe <VibeCheckStrobeCMD_Get+0x96>
		}
		else if (!strcmp(str, "exposure"))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	490e      	ldr	r1, [pc, #56]	@ (8003010 <VibeCheckStrobeCMD_Get+0xa8>)
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd f999 	bl	8000310 <strcmp>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <VibeCheckStrobeCMD_Get+0x94>
		{
			VibeCheckShell_PutFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff febb 	bl	8002d60 <VibeCheckStrobe_GetExposure>
 8002fea:	eef0 7a40 	vmov.f32	s15, s0
 8002fee:	eeb0 0a67 	vmov.f32	s0, s15
 8002ff2:	6838      	ldr	r0, [r7, #0]
 8002ff4:	f7ff fce4 	bl	80029c0 <VibeCheckShell_PutFloat>
			return 1;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <VibeCheckStrobeCMD_Get+0x96>
		}
	}

	return 0;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	080168dc 	.word	0x080168dc
 800300c:	080168e8 	.word	0x080168e8
 8003010:	080168f0 	.word	0x080168f0

08003014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800304c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003018:	f7ff f95e 	bl	80022d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800301c:	480c      	ldr	r0, [pc, #48]	@ (8003050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800301e:	490d      	ldr	r1, [pc, #52]	@ (8003054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003020:	4a0d      	ldr	r2, [pc, #52]	@ (8003058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003024:	e002      	b.n	800302c <LoopCopyDataInit>

08003026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800302a:	3304      	adds	r3, #4

0800302c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800302c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800302e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003030:	d3f9      	bcc.n	8003026 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003032:	4a0a      	ldr	r2, [pc, #40]	@ (800305c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003034:	4c0a      	ldr	r4, [pc, #40]	@ (8003060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003038:	e001      	b.n	800303e <LoopFillZerobss>

0800303a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800303a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800303c:	3204      	adds	r2, #4

0800303e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800303e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003040:	d3fb      	bcc.n	800303a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003042:	f010 ff85 	bl	8013f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003046:	f7fd fd45 	bl	8000ad4 <main>
  bx  lr
 800304a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800304c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003050:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003054:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 8003058:	08016da8 	.word	0x08016da8
  ldr r2, =_sbss
 800305c:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8003060:	24006030 	.word	0x24006030

08003064 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003064:	e7fe      	b.n	8003064 <ADC3_IRQHandler>
	...

08003068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800306e:	2003      	movs	r0, #3
 8003070:	f001 fcf4 	bl	8004a5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003074:	f005 ff3a 	bl	8008eec <HAL_RCC_GetSysClockFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <HAL_Init+0x68>)
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	4913      	ldr	r1, [pc, #76]	@ (80030d4 <HAL_Init+0x6c>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
 8003090:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003092:	4b0f      	ldr	r3, [pc, #60]	@ (80030d0 <HAL_Init+0x68>)
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	4a0e      	ldr	r2, [pc, #56]	@ (80030d4 <HAL_Init+0x6c>)
 800309c:	5cd3      	ldrb	r3, [r2, r3]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
 80030a8:	4a0b      	ldr	r2, [pc, #44]	@ (80030d8 <HAL_Init+0x70>)
 80030aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030ac:	4a0b      	ldr	r2, [pc, #44]	@ (80030dc <HAL_Init+0x74>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030b2:	200f      	movs	r0, #15
 80030b4:	f000 f814 	bl	80030e0 <HAL_InitTick>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e002      	b.n	80030c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80030c2:	f7fe fbd5 	bl	8001870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	58024400 	.word	0x58024400
 80030d4:	08016930 	.word	0x08016930
 80030d8:	24000004 	.word	0x24000004
 80030dc:	24000000 	.word	0x24000000

080030e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80030e8:	4b15      	ldr	r3, [pc, #84]	@ (8003140 <HAL_InitTick+0x60>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e021      	b.n	8003138 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80030f4:	4b13      	ldr	r3, [pc, #76]	@ (8003144 <HAL_InitTick+0x64>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b11      	ldr	r3, [pc, #68]	@ (8003140 <HAL_InitTick+0x60>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003102:	fbb3 f3f1 	udiv	r3, r3, r1
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	4618      	mov	r0, r3
 800310c:	f001 fcd9 	bl	8004ac2 <HAL_SYSTICK_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e00e      	b.n	8003138 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b0f      	cmp	r3, #15
 800311e:	d80a      	bhi.n	8003136 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003120:	2200      	movs	r2, #0
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	f001 fca3 	bl	8004a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800312c:	4a06      	ldr	r2, [pc, #24]	@ (8003148 <HAL_InitTick+0x68>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e000      	b.n	8003138 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	2400000c 	.word	0x2400000c
 8003144:	24000000 	.word	0x24000000
 8003148:	24000008 	.word	0x24000008

0800314c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003150:	4b06      	ldr	r3, [pc, #24]	@ (800316c <HAL_IncTick+0x20>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <HAL_IncTick+0x24>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4413      	add	r3, r2
 800315c:	4a04      	ldr	r2, [pc, #16]	@ (8003170 <HAL_IncTick+0x24>)
 800315e:	6013      	str	r3, [r2, #0]
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	2400000c 	.word	0x2400000c
 8003170:	240042fc 	.word	0x240042fc

08003174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return uwTick;
 8003178:	4b03      	ldr	r3, [pc, #12]	@ (8003188 <HAL_GetTick+0x14>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	240042fc 	.word	0x240042fc

0800318c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003194:	f7ff ffee 	bl	8003174 <HAL_GetTick>
 8003198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d005      	beq.n	80031b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031a6:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <HAL_Delay+0x44>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031b2:	bf00      	nop
 80031b4:	f7ff ffde 	bl	8003174 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d8f7      	bhi.n	80031b4 <HAL_Delay+0x28>
  {
  }
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	2400000c 	.word	0x2400000c

080031d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	609a      	str	r2, [r3, #8]
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	609a      	str	r2, [r3, #8]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003230:	4618      	mov	r0, r3
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3360      	adds	r3, #96	@ 0x60
 800324e:	461a      	mov	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4a10      	ldr	r2, [pc, #64]	@ (800329c <LL_ADC_SetOffset+0x60>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d10b      	bne.n	8003278 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	4313      	orrs	r3, r2
 800326e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003276:	e00b      	b.n	8003290 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	430b      	orrs	r3, r1
 800328a:	431a      	orrs	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	601a      	str	r2, [r3, #0]
}
 8003290:	bf00      	nop
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	58026000 	.word	0x58026000

080032a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3360      	adds	r3, #96	@ 0x60
 80032ae:	461a      	mov	r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ec:	431a      	orrs	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	611a      	str	r2, [r3, #16]
}
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a0c      	ldr	r2, [pc, #48]	@ (8003340 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00e      	beq.n	8003332 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3360      	adds	r3, #96	@ 0x60
 8003318:	461a      	mov	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	431a      	orrs	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	601a      	str	r2, [r3, #0]
  }
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	58026000 	.word	0x58026000

08003344 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a0c      	ldr	r2, [pc, #48]	@ (8003384 <LL_ADC_SetOffsetSaturation+0x40>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d10e      	bne.n	8003376 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3360      	adds	r3, #96	@ 0x60
 800335c:	461a      	mov	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	431a      	orrs	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	58026000 	.word	0x58026000

08003388 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a0c      	ldr	r2, [pc, #48]	@ (80033c8 <LL_ADC_SetOffsetSign+0x40>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d10e      	bne.n	80033ba <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3360      	adds	r3, #96	@ 0x60
 80033a0:	461a      	mov	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	58026000 	.word	0x58026000

080033cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3360      	adds	r3, #96	@ 0x60
 80033dc:	461a      	mov	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a0c      	ldr	r2, [pc, #48]	@ (800341c <LL_ADC_SetOffsetState+0x50>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d108      	bne.n	8003400 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80033fe:	e007      	b.n	8003410 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	431a      	orrs	r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	601a      	str	r2, [r3, #0]
}
 8003410:	bf00      	nop
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	58026000 	.word	0x58026000

08003420 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3330      	adds	r3, #48	@ 0x30
 8003430:	461a      	mov	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	4413      	add	r3, r2
 800343e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	211f      	movs	r1, #31
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	401a      	ands	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	0e9b      	lsrs	r3, r3, #26
 8003458:	f003 011f 	and.w	r1, r3, #31
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	431a      	orrs	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800346c:	bf00      	nop
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3314      	adds	r3, #20
 8003488:	461a      	mov	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	0e5b      	lsrs	r3, r3, #25
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	4413      	add	r3, r2
 8003496:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	0d1b      	lsrs	r3, r3, #20
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	2107      	movs	r1, #7
 80034a6:	fa01 f303 	lsl.w	r3, r1, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	401a      	ands	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	0d1b      	lsrs	r3, r3, #20
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	431a      	orrs	r2, r3
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034c2:	bf00      	nop
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a1a      	ldr	r2, [pc, #104]	@ (8003548 <LL_ADC_SetChannelSingleDiff+0x78>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d115      	bne.n	8003510 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034f0:	43db      	mvns	r3, r3
 80034f2:	401a      	ands	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f003 0318 	and.w	r3, r3, #24
 80034fa:	4914      	ldr	r1, [pc, #80]	@ (800354c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80034fc:	40d9      	lsrs	r1, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	400b      	ands	r3, r1
 8003502:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003506:	431a      	orrs	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800350e:	e014      	b.n	800353a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800351c:	43db      	mvns	r3, r3
 800351e:	401a      	ands	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f003 0318 	and.w	r3, r3, #24
 8003526:	4909      	ldr	r1, [pc, #36]	@ (800354c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003528:	40d9      	lsrs	r1, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	400b      	ands	r3, r1
 800352e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003532:	431a      	orrs	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	58026000 	.word	0x58026000
 800354c:	000fffff 	.word	0x000fffff

08003550 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	4b04      	ldr	r3, [pc, #16]	@ (8003570 <LL_ADC_DisableDeepPowerDown+0x20>)
 800355e:	4013      	ands	r3, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6093      	str	r3, [r2, #8]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	5fffffc0 	.word	0x5fffffc0

08003574 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003588:	d101      	bne.n	800358e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	6fffffc0 	.word	0x6fffffc0

080035c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035d8:	d101      	bne.n	80035de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <LL_ADC_IsEnabled+0x18>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <LL_ADC_IsEnabled+0x1a>
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b04      	cmp	r3, #4
 8003624:	d101      	bne.n	800362a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b08      	cmp	r3, #8
 800364a:	d101      	bne.n	8003650 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003660:	b590      	push	{r4, r7, lr}
 8003662:	b089      	sub	sp, #36	@ 0x24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e1ee      	b.n	8003a58 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fe f90b 	bl	80018a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff67 	bl	8003574 <LL_ADC_IsDeepPowerDownEnabled>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff4d 	bl	8003550 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff ff82 	bl	80035c4 <LL_ADC_IsInternalRegulatorEnabled>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d114      	bne.n	80036f0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff ff66 	bl	800359c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036d0:	4b8e      	ldr	r3, [pc, #568]	@ (800390c <HAL_ADC_Init+0x2ac>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	4a8e      	ldr	r2, [pc, #568]	@ (8003910 <HAL_ADC_Init+0x2b0>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	099b      	lsrs	r3, r3, #6
 80036de:	3301      	adds	r3, #1
 80036e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036e2:	e002      	b.n	80036ea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f9      	bne.n	80036e4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff65 	bl	80035c4 <LL_ADC_IsInternalRegulatorEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10d      	bne.n	800371c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003704:	f043 0210 	orr.w	r2, r3, #16
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003710:	f043 0201 	orr.w	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ff76 	bl	8003612 <LL_ADC_REG_IsConversionOngoing>
 8003726:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b00      	cmp	r3, #0
 8003732:	f040 8188 	bne.w	8003a46 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f040 8184 	bne.w	8003a46 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003742:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003746:	f043 0202 	orr.w	r2, r3, #2
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff ff4a 	bl	80035ec <LL_ADC_IsEnabled>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d136      	bne.n	80037cc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a6c      	ldr	r2, [pc, #432]	@ (8003914 <HAL_ADC_Init+0x2b4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d004      	beq.n	8003772 <HAL_ADC_Init+0x112>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6a      	ldr	r2, [pc, #424]	@ (8003918 <HAL_ADC_Init+0x2b8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d10e      	bne.n	8003790 <HAL_ADC_Init+0x130>
 8003772:	4868      	ldr	r0, [pc, #416]	@ (8003914 <HAL_ADC_Init+0x2b4>)
 8003774:	f7ff ff3a 	bl	80035ec <LL_ADC_IsEnabled>
 8003778:	4604      	mov	r4, r0
 800377a:	4867      	ldr	r0, [pc, #412]	@ (8003918 <HAL_ADC_Init+0x2b8>)
 800377c:	f7ff ff36 	bl	80035ec <LL_ADC_IsEnabled>
 8003780:	4603      	mov	r3, r0
 8003782:	4323      	orrs	r3, r4
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e008      	b.n	80037a2 <HAL_ADC_Init+0x142>
 8003790:	4862      	ldr	r0, [pc, #392]	@ (800391c <HAL_ADC_Init+0x2bc>)
 8003792:	f7ff ff2b 	bl	80035ec <LL_ADC_IsEnabled>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d012      	beq.n	80037cc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a5a      	ldr	r2, [pc, #360]	@ (8003914 <HAL_ADC_Init+0x2b4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d004      	beq.n	80037ba <HAL_ADC_Init+0x15a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a58      	ldr	r2, [pc, #352]	@ (8003918 <HAL_ADC_Init+0x2b8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <HAL_ADC_Init+0x15e>
 80037ba:	4a59      	ldr	r2, [pc, #356]	@ (8003920 <HAL_ADC_Init+0x2c0>)
 80037bc:	e000      	b.n	80037c0 <HAL_ADC_Init+0x160>
 80037be:	4a59      	ldr	r2, [pc, #356]	@ (8003924 <HAL_ADC_Init+0x2c4>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f7ff fd04 	bl	80031d4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a52      	ldr	r2, [pc, #328]	@ (800391c <HAL_ADC_Init+0x2bc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d129      	bne.n	800382a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7e5b      	ldrb	r3, [r3, #25]
 80037da:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80037e0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80037e6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d013      	beq.n	8003818 <HAL_ADC_Init+0x1b8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b0c      	cmp	r3, #12
 80037f6:	d00d      	beq.n	8003814 <HAL_ADC_Init+0x1b4>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b1c      	cmp	r3, #28
 80037fe:	d007      	beq.n	8003810 <HAL_ADC_Init+0x1b0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b18      	cmp	r3, #24
 8003806:	d101      	bne.n	800380c <HAL_ADC_Init+0x1ac>
 8003808:	2318      	movs	r3, #24
 800380a:	e006      	b.n	800381a <HAL_ADC_Init+0x1ba>
 800380c:	2300      	movs	r3, #0
 800380e:	e004      	b.n	800381a <HAL_ADC_Init+0x1ba>
 8003810:	2310      	movs	r3, #16
 8003812:	e002      	b.n	800381a <HAL_ADC_Init+0x1ba>
 8003814:	2308      	movs	r3, #8
 8003816:	e000      	b.n	800381a <HAL_ADC_Init+0x1ba>
 8003818:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800381a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003822:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e00e      	b.n	8003848 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7e5b      	ldrb	r3, [r3, #25]
 800382e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003834:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800383a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003842:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d106      	bne.n	8003860 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	3b01      	subs	r3, #1
 8003858:	045b      	lsls	r3, r3, #17
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4313      	orrs	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d009      	beq.n	800387c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003874:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a26      	ldr	r2, [pc, #152]	@ (800391c <HAL_ADC_Init+0x2bc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d115      	bne.n	80038b2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	4b26      	ldr	r3, [pc, #152]	@ (8003928 <HAL_ADC_Init+0x2c8>)
 800388e:	4013      	ands	r3, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	69b9      	ldr	r1, [r7, #24]
 8003896:	430b      	orrs	r3, r1
 8003898:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	611a      	str	r2, [r3, #16]
 80038b0:	e009      	b.n	80038c6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	4b1c      	ldr	r3, [pc, #112]	@ (800392c <HAL_ADC_Init+0x2cc>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	69b9      	ldr	r1, [r7, #24]
 80038c2:	430b      	orrs	r3, r1
 80038c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fea1 	bl	8003612 <LL_ADC_REG_IsConversionOngoing>
 80038d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff feae 	bl	8003638 <LL_ADC_INJ_IsConversionOngoing>
 80038dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 808e 	bne.w	8003a02 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f040 808a 	bne.w	8003a02 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a0a      	ldr	r2, [pc, #40]	@ (800391c <HAL_ADC_Init+0x2bc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d11b      	bne.n	8003930 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	7e1b      	ldrb	r3, [r3, #24]
 80038fc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003904:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	e018      	b.n	800393e <HAL_ADC_Init+0x2de>
 800390c:	24000000 	.word	0x24000000
 8003910:	053e2d63 	.word	0x053e2d63
 8003914:	40022000 	.word	0x40022000
 8003918:	40022100 	.word	0x40022100
 800391c:	58026000 	.word	0x58026000
 8003920:	40022300 	.word	0x40022300
 8003924:	58026300 	.word	0x58026300
 8003928:	fff04007 	.word	0xfff04007
 800392c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7e1b      	ldrb	r3, [r3, #24]
 8003934:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	4b46      	ldr	r3, [pc, #280]	@ (8003a60 <HAL_ADC_Init+0x400>)
 8003946:	4013      	ands	r3, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	69b9      	ldr	r1, [r7, #24]
 800394e:	430b      	orrs	r3, r1
 8003950:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003958:	2b01      	cmp	r3, #1
 800395a:	d137      	bne.n	80039cc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003960:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a3f      	ldr	r2, [pc, #252]	@ (8003a64 <HAL_ADC_Init+0x404>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d116      	bne.n	800399a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	4b3d      	ldr	r3, [pc, #244]	@ (8003a68 <HAL_ADC_Init+0x408>)
 8003974:	4013      	ands	r3, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800397e:	4311      	orrs	r1, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003984:	4311      	orrs	r1, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800398a:	430a      	orrs	r2, r1
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	611a      	str	r2, [r3, #16]
 8003998:	e020      	b.n	80039dc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	4b32      	ldr	r3, [pc, #200]	@ (8003a6c <HAL_ADC_Init+0x40c>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80039a8:	3a01      	subs	r2, #1
 80039aa:	0411      	lsls	r1, r2, #16
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80039b0:	4311      	orrs	r1, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039b6:	4311      	orrs	r1, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80039bc:	430a      	orrs	r2, r1
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0201 	orr.w	r2, r2, #1
 80039c8:	611a      	str	r2, [r3, #16]
 80039ca:	e007      	b.n	80039dc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a64 <HAL_ADC_Init+0x404>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d002      	beq.n	8003a02 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fd67 	bl	80044d0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d10c      	bne.n	8003a24 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	f023 010f 	bic.w	r1, r3, #15
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	1e5a      	subs	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a22:	e007      	b.n	8003a34 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 020f 	bic.w	r2, r2, #15
 8003a32:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a38:	f023 0303 	bic.w	r3, r3, #3
 8003a3c:	f043 0201 	orr.w	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a44:	e007      	b.n	8003a56 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4a:	f043 0210 	orr.w	r2, r3, #16
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3724      	adds	r7, #36	@ 0x24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd90      	pop	{r4, r7, pc}
 8003a60:	ffffbffc 	.word	0xffffbffc
 8003a64:	58026000 	.word	0x58026000
 8003a68:	fc00f81f 	.word	0xfc00f81f
 8003a6c:	fc00f81e 	.word	0xfc00f81e

08003a70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b0b9      	sub	sp, #228	@ 0xe4
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a8a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4aab      	ldr	r2, [pc, #684]	@ (8003d40 <HAL_ADC_ConfigChannel+0x2d0>)
 8003a92:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d102      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x34>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	f000 bcfe 	b.w	80044a0 <HAL_ADC_ConfigChannel+0xa30>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fdae 	bl	8003612 <LL_ADC_REG_IsConversionOngoing>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f040 84e2 	bne.w	8004482 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	db38      	blt.n	8003b38 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a9e      	ldr	r2, [pc, #632]	@ (8003d44 <HAL_ADC_ConfigChannel+0x2d4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d033      	beq.n	8003b38 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d108      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x7e>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0e9b      	lsrs	r3, r3, #26
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	e01d      	b.n	8003b2a <HAL_ADC_ConfigChannel+0xba>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003b12:	2320      	movs	r3, #32
 8003b14:	e004      	b.n	8003b20 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003b16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	2201      	movs	r2, #1
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	69d1      	ldr	r1, [r2, #28]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	430b      	orrs	r3, r1
 8003b36:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	f7ff fc6b 	bl	8003420 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fd5f 	bl	8003612 <LL_ADC_REG_IsConversionOngoing>
 8003b54:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fd6b 	bl	8003638 <LL_ADC_INJ_IsConversionOngoing>
 8003b62:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 8270 	bne.w	8004050 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f040 826b 	bne.w	8004050 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6819      	ldr	r1, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f7ff fc76 	bl	8003478 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6c      	ldr	r2, [pc, #432]	@ (8003d44 <HAL_ADC_ConfigChannel+0x2d4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d10d      	bne.n	8003bb2 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	08db      	lsrs	r3, r3, #3
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bb0:	e032      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003bb2:	4b65      	ldr	r3, [pc, #404]	@ (8003d48 <HAL_ADC_ConfigChannel+0x2d8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003bba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x168>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	089b      	lsrs	r3, r3, #2
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	e01d      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x1a4>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x18e>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	089b      	lsrs	r3, r3, #2
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	e00a      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x1a4>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d048      	beq.n	8003cb2 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6919      	ldr	r1, [r3, #16]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c30:	f7ff fb04 	bl	800323c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a42      	ldr	r2, [pc, #264]	@ (8003d44 <HAL_ADC_ConfigChannel+0x2d4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d119      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6919      	ldr	r1, [r3, #16]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f7ff fb9c 	bl	8003388 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	6919      	ldr	r1, [r3, #16]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d102      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x1f8>
 8003c62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c66:	e000      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1fa>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f7ff fb6a 	bl	8003344 <LL_ADC_SetOffsetSaturation>
 8003c70:	e1ee      	b.n	8004050 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6919      	ldr	r1, [r3, #16]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d102      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0x21a>
 8003c84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003c88:	e000      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x21c>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f7ff fb37 	bl	8003300 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6919      	ldr	r1, [r3, #16]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	7e1b      	ldrb	r3, [r3, #24]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d102      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x238>
 8003ca2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ca6:	e000      	b.n	8003caa <HAL_ADC_ConfigChannel+0x23a>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	461a      	mov	r2, r3
 8003cac:	f7ff fb0e 	bl	80032cc <LL_ADC_SetDataRightShift>
 8003cb0:	e1ce      	b.n	8004050 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a23      	ldr	r2, [pc, #140]	@ (8003d44 <HAL_ADC_ConfigChannel+0x2d4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	f040 8181 	bne.w	8003fc0 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff faeb 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x27a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fae0 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	0e9b      	lsrs	r3, r3, #26
 8003ce4:	f003 021f 	and.w	r2, r3, #31
 8003ce8:	e01e      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x2b8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fad5 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d00:	fa93 f3a3 	rbit	r3, r3
 8003d04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003d08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003d10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003d18:	2320      	movs	r3, #32
 8003d1a:	e004      	b.n	8003d26 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003d1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10b      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x2dc>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	0e9b      	lsrs	r3, r3, #26
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	e01e      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x30e>
 8003d40:	47ff0000 	.word	0x47ff0000
 8003d44:	58026000 	.word	0x58026000
 8003d48:	5c001000 	.word	0x5c001000
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d58:	fa93 f3a3 	rbit	r3, r3
 8003d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003d60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003d68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003d70:	2320      	movs	r3, #32
 8003d72:	e004      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003d74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d78:	fab3 f383 	clz	r3, r3
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d106      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2200      	movs	r2, #0
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fb1e 	bl	80033cc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2101      	movs	r1, #1
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fa82 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x34c>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2101      	movs	r1, #1
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fa77 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003db2:	4603      	mov	r3, r0
 8003db4:	0e9b      	lsrs	r3, r3, #26
 8003db6:	f003 021f 	and.w	r2, r3, #31
 8003dba:	e01e      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x38a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fa6c 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dd2:	fa93 f3a3 	rbit	r3, r3
 8003dd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003dda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003de2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003dea:	2320      	movs	r3, #32
 8003dec:	e004      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d105      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x3a2>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	0e9b      	lsrs	r3, r3, #26
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	e018      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x3d4>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e1e:	fa93 f3a3 	rbit	r3, r3
 8003e22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e2a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003e2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003e36:	2320      	movs	r3, #32
 8003e38:	e004      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003e3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e3e:	fab3 f383 	clz	r3, r3
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d106      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2101      	movs	r1, #1
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fabb 	bl	80033cc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff fa1f 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x412>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2102      	movs	r1, #2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fa14 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	0e9b      	lsrs	r3, r3, #26
 8003e7c:	f003 021f 	and.w	r2, r3, #31
 8003e80:	e01e      	b.n	8003ec0 <HAL_ADC_ConfigChannel+0x450>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2102      	movs	r1, #2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fa09 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e98:	fa93 f3a3 	rbit	r3, r3
 8003e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ea4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003eb0:	2320      	movs	r3, #32
 8003eb2:	e004      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eb8:	fab3 f383 	clz	r3, r3
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x468>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	0e9b      	lsrs	r3, r3, #26
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	e014      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x492>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ee0:	fa93 f3a3 	rbit	r3, r3
 8003ee4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003ee6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ee8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003eec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003ef4:	2320      	movs	r3, #32
 8003ef6:	e004      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003ef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d106      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2102      	movs	r1, #2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff fa5c 	bl	80033cc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2103      	movs	r1, #3
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff f9c0 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x4d0>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2103      	movs	r1, #3
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff f9b5 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003f36:	4603      	mov	r3, r0
 8003f38:	0e9b      	lsrs	r3, r3, #26
 8003f3a:	f003 021f 	and.w	r2, r3, #31
 8003f3e:	e017      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x500>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2103      	movs	r1, #3
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff f9aa 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f5a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003f5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003f62:	2320      	movs	r3, #32
 8003f64:	e003      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003f66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f68:	fab3 f383 	clz	r3, r3
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x518>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	0e9b      	lsrs	r3, r3, #26
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	e011      	b.n	8003fac <HAL_ADC_ConfigChannel+0x53c>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003f96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f98:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003f9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	e003      	b.n	8003fac <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003fa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d14f      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2103      	movs	r1, #3
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fa07 	bl	80033cc <LL_ADC_SetOffsetState>
 8003fbe:	e047      	b.n	8004050 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	069b      	lsls	r3, r3, #26
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d107      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fe2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	069b      	lsls	r3, r3, #26
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d107      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004006:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800400e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	069b      	lsls	r3, r3, #26
 8004018:	429a      	cmp	r2, r3
 800401a:	d107      	bne.n	800402c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800402a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004032:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	069b      	lsls	r3, r3, #26
 800403c:	429a      	cmp	r2, r3
 800403e:	d107      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800404e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fac9 	bl	80035ec <LL_ADC_IsEnabled>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	f040 8219 	bne.w	8004494 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6819      	ldr	r1, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	461a      	mov	r2, r3
 8004070:	f7ff fa2e 	bl	80034d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4aa1      	ldr	r2, [pc, #644]	@ (8004300 <HAL_ADC_ConfigChannel+0x890>)
 800407a:	4293      	cmp	r3, r2
 800407c:	f040 812e 	bne.w	80042dc <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10b      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x638>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	0e9b      	lsrs	r3, r3, #26
 8004096:	3301      	adds	r3, #1
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	2b09      	cmp	r3, #9
 800409e:	bf94      	ite	ls
 80040a0:	2301      	movls	r3, #1
 80040a2:	2300      	movhi	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	e019      	b.n	80040dc <HAL_ADC_ConfigChannel+0x66c>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80040b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80040ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80040c0:	2320      	movs	r3, #32
 80040c2:	e003      	b.n	80040cc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80040c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	3301      	adds	r3, #1
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	2b09      	cmp	r3, #9
 80040d4:	bf94      	ite	ls
 80040d6:	2301      	movls	r3, #1
 80040d8:	2300      	movhi	r3, #0
 80040da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d079      	beq.n	80041d4 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d107      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x68c>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	0e9b      	lsrs	r3, r3, #26
 80040f2:	3301      	adds	r3, #1
 80040f4:	069b      	lsls	r3, r3, #26
 80040f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040fa:	e015      	b.n	8004128 <HAL_ADC_ConfigChannel+0x6b8>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004104:	fa93 f3a3 	rbit	r3, r3
 8004108:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800410a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800410c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800410e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004114:	2320      	movs	r3, #32
 8004116:	e003      	b.n	8004120 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800411a:	fab3 f383 	clz	r3, r3
 800411e:	b2db      	uxtb	r3, r3
 8004120:	3301      	adds	r3, #1
 8004122:	069b      	lsls	r3, r3, #26
 8004124:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x6d8>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0e9b      	lsrs	r3, r3, #26
 800413a:	3301      	adds	r3, #1
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	e017      	b.n	8004178 <HAL_ADC_ConfigChannel+0x708>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004150:	fa93 f3a3 	rbit	r3, r3
 8004154:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004158:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800415a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004160:	2320      	movs	r3, #32
 8004162:	e003      	b.n	800416c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	3301      	adds	r3, #1
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	2101      	movs	r1, #1
 8004174:	fa01 f303 	lsl.w	r3, r1, r3
 8004178:	ea42 0103 	orr.w	r1, r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <HAL_ADC_ConfigChannel+0x72e>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	0e9b      	lsrs	r3, r3, #26
 800418e:	3301      	adds	r3, #1
 8004190:	f003 021f 	and.w	r2, r3, #31
 8004194:	4613      	mov	r3, r2
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	4413      	add	r3, r2
 800419a:	051b      	lsls	r3, r3, #20
 800419c:	e018      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x760>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80041ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80041b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e003      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80041ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	3301      	adds	r3, #1
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4613      	mov	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041d0:	430b      	orrs	r3, r1
 80041d2:	e07e      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d107      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x780>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	0e9b      	lsrs	r3, r3, #26
 80041e6:	3301      	adds	r3, #1
 80041e8:	069b      	lsls	r3, r3, #26
 80041ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041ee:	e015      	b.n	800421c <HAL_ADC_ConfigChannel+0x7ac>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8004208:	2320      	movs	r3, #32
 800420a:	e003      	b.n	8004214 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800420c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	3301      	adds	r3, #1
 8004216:	069b      	lsls	r3, r3, #26
 8004218:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <HAL_ADC_ConfigChannel+0x7cc>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0e9b      	lsrs	r3, r3, #26
 800422e:	3301      	adds	r3, #1
 8004230:	f003 031f 	and.w	r3, r3, #31
 8004234:	2101      	movs	r1, #1
 8004236:	fa01 f303 	lsl.w	r3, r1, r3
 800423a:	e017      	b.n	800426c <HAL_ADC_ConfigChannel+0x7fc>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	fa93 f3a3 	rbit	r3, r3
 8004248:	61bb      	str	r3, [r7, #24]
  return result;
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004254:	2320      	movs	r3, #32
 8004256:	e003      	b.n	8004260 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	3301      	adds	r3, #1
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	2101      	movs	r1, #1
 8004268:	fa01 f303 	lsl.w	r3, r1, r3
 800426c:	ea42 0103 	orr.w	r1, r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10d      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x828>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	0e9b      	lsrs	r3, r3, #26
 8004282:	3301      	adds	r3, #1
 8004284:	f003 021f 	and.w	r2, r3, #31
 8004288:	4613      	mov	r3, r2
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	4413      	add	r3, r2
 800428e:	3b1e      	subs	r3, #30
 8004290:	051b      	lsls	r3, r3, #20
 8004292:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004296:	e01b      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x860>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	fa93 f3a3 	rbit	r3, r3
 80042a4:	60fb      	str	r3, [r7, #12]
  return result;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80042b0:	2320      	movs	r3, #32
 80042b2:	e003      	b.n	80042bc <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3301      	adds	r3, #1
 80042be:	f003 021f 	and.w	r2, r3, #31
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	3b1e      	subs	r3, #30
 80042ca:	051b      	lsls	r3, r3, #20
 80042cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042d0:	430b      	orrs	r3, r1
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	6892      	ldr	r2, [r2, #8]
 80042d6:	4619      	mov	r1, r3
 80042d8:	f7ff f8ce 	bl	8003478 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f280 80d7 	bge.w	8004494 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a06      	ldr	r2, [pc, #24]	@ (8004304 <HAL_ADC_ConfigChannel+0x894>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_ADC_ConfigChannel+0x88a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a04      	ldr	r2, [pc, #16]	@ (8004308 <HAL_ADC_ConfigChannel+0x898>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d10a      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x8a0>
 80042fa:	4b04      	ldr	r3, [pc, #16]	@ (800430c <HAL_ADC_ConfigChannel+0x89c>)
 80042fc:	e009      	b.n	8004312 <HAL_ADC_ConfigChannel+0x8a2>
 80042fe:	bf00      	nop
 8004300:	47ff0000 	.word	0x47ff0000
 8004304:	40022000 	.word	0x40022000
 8004308:	40022100 	.word	0x40022100
 800430c:	40022300 	.word	0x40022300
 8004310:	4b65      	ldr	r3, [pc, #404]	@ (80044a8 <HAL_ADC_ConfigChannel+0xa38>)
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe ff84 	bl	8003220 <LL_ADC_GetCommonPathInternalCh>
 8004318:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a62      	ldr	r2, [pc, #392]	@ (80044ac <HAL_ADC_ConfigChannel+0xa3c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d004      	beq.n	8004330 <HAL_ADC_ConfigChannel+0x8c0>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a61      	ldr	r2, [pc, #388]	@ (80044b0 <HAL_ADC_ConfigChannel+0xa40>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d10e      	bne.n	800434e <HAL_ADC_ConfigChannel+0x8de>
 8004330:	485e      	ldr	r0, [pc, #376]	@ (80044ac <HAL_ADC_ConfigChannel+0xa3c>)
 8004332:	f7ff f95b 	bl	80035ec <LL_ADC_IsEnabled>
 8004336:	4604      	mov	r4, r0
 8004338:	485d      	ldr	r0, [pc, #372]	@ (80044b0 <HAL_ADC_ConfigChannel+0xa40>)
 800433a:	f7ff f957 	bl	80035ec <LL_ADC_IsEnabled>
 800433e:	4603      	mov	r3, r0
 8004340:	4323      	orrs	r3, r4
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf0c      	ite	eq
 8004346:	2301      	moveq	r3, #1
 8004348:	2300      	movne	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	e008      	b.n	8004360 <HAL_ADC_ConfigChannel+0x8f0>
 800434e:	4859      	ldr	r0, [pc, #356]	@ (80044b4 <HAL_ADC_ConfigChannel+0xa44>)
 8004350:	f7ff f94c 	bl	80035ec <LL_ADC_IsEnabled>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	bf0c      	ite	eq
 800435a:	2301      	moveq	r3, #1
 800435c:	2300      	movne	r3, #0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8084 	beq.w	800446e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a53      	ldr	r2, [pc, #332]	@ (80044b8 <HAL_ADC_ConfigChannel+0xa48>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d132      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x966>
 8004370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004374:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d12c      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a4c      	ldr	r2, [pc, #304]	@ (80044b4 <HAL_ADC_ConfigChannel+0xa44>)
 8004382:	4293      	cmp	r3, r2
 8004384:	f040 8086 	bne.w	8004494 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a47      	ldr	r2, [pc, #284]	@ (80044ac <HAL_ADC_ConfigChannel+0xa3c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_ADC_ConfigChannel+0x92c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a46      	ldr	r2, [pc, #280]	@ (80044b0 <HAL_ADC_ConfigChannel+0xa40>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d101      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x930>
 800439c:	4a47      	ldr	r2, [pc, #284]	@ (80044bc <HAL_ADC_ConfigChannel+0xa4c>)
 800439e:	e000      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x932>
 80043a0:	4a41      	ldr	r2, [pc, #260]	@ (80044a8 <HAL_ADC_ConfigChannel+0xa38>)
 80043a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043aa:	4619      	mov	r1, r3
 80043ac:	4610      	mov	r0, r2
 80043ae:	f7fe ff24 	bl	80031fa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043b2:	4b43      	ldr	r3, [pc, #268]	@ (80044c0 <HAL_ADC_ConfigChannel+0xa50>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	4a42      	ldr	r2, [pc, #264]	@ (80044c4 <HAL_ADC_ConfigChannel+0xa54>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	099b      	lsrs	r3, r3, #6
 80043c0:	3301      	adds	r3, #1
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043c6:	e002      	b.n	80043ce <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f9      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043d4:	e05e      	b.n	8004494 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a3b      	ldr	r2, [pc, #236]	@ (80044c8 <HAL_ADC_ConfigChannel+0xa58>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d120      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x9b2>
 80043e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d11a      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a30      	ldr	r2, [pc, #192]	@ (80044b4 <HAL_ADC_ConfigChannel+0xa44>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d14e      	bne.n	8004494 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a2c      	ldr	r2, [pc, #176]	@ (80044ac <HAL_ADC_ConfigChannel+0xa3c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d004      	beq.n	800440a <HAL_ADC_ConfigChannel+0x99a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a2a      	ldr	r2, [pc, #168]	@ (80044b0 <HAL_ADC_ConfigChannel+0xa40>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d101      	bne.n	800440e <HAL_ADC_ConfigChannel+0x99e>
 800440a:	4a2c      	ldr	r2, [pc, #176]	@ (80044bc <HAL_ADC_ConfigChannel+0xa4c>)
 800440c:	e000      	b.n	8004410 <HAL_ADC_ConfigChannel+0x9a0>
 800440e:	4a26      	ldr	r2, [pc, #152]	@ (80044a8 <HAL_ADC_ConfigChannel+0xa38>)
 8004410:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004418:	4619      	mov	r1, r3
 800441a:	4610      	mov	r0, r2
 800441c:	f7fe feed 	bl	80031fa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004420:	e038      	b.n	8004494 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a29      	ldr	r2, [pc, #164]	@ (80044cc <HAL_ADC_ConfigChannel+0xa5c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d133      	bne.n	8004494 <HAL_ADC_ConfigChannel+0xa24>
 800442c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d12d      	bne.n	8004494 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1d      	ldr	r2, [pc, #116]	@ (80044b4 <HAL_ADC_ConfigChannel+0xa44>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d128      	bne.n	8004494 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a19      	ldr	r2, [pc, #100]	@ (80044ac <HAL_ADC_ConfigChannel+0xa3c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d004      	beq.n	8004456 <HAL_ADC_ConfigChannel+0x9e6>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a17      	ldr	r2, [pc, #92]	@ (80044b0 <HAL_ADC_ConfigChannel+0xa40>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <HAL_ADC_ConfigChannel+0x9ea>
 8004456:	4a19      	ldr	r2, [pc, #100]	@ (80044bc <HAL_ADC_ConfigChannel+0xa4c>)
 8004458:	e000      	b.n	800445c <HAL_ADC_ConfigChannel+0x9ec>
 800445a:	4a13      	ldr	r2, [pc, #76]	@ (80044a8 <HAL_ADC_ConfigChannel+0xa38>)
 800445c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004460:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f7fe fec7 	bl	80031fa <LL_ADC_SetCommonPathInternalCh>
 800446c:	e012      	b.n	8004494 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004472:	f043 0220 	orr.w	r2, r3, #32
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004480:	e008      	b.n	8004494 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800449c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	37e4      	adds	r7, #228	@ 0xe4
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd90      	pop	{r4, r7, pc}
 80044a8:	58026300 	.word	0x58026300
 80044ac:	40022000 	.word	0x40022000
 80044b0:	40022100 	.word	0x40022100
 80044b4:	58026000 	.word	0x58026000
 80044b8:	c7520000 	.word	0xc7520000
 80044bc:	40022300 	.word	0x40022300
 80044c0:	24000000 	.word	0x24000000
 80044c4:	053e2d63 	.word	0x053e2d63
 80044c8:	c3210000 	.word	0xc3210000
 80044cc:	cb840000 	.word	0xcb840000

080044d0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a6c      	ldr	r2, [pc, #432]	@ (8004690 <ADC_ConfigureBoostMode+0x1c0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <ADC_ConfigureBoostMode+0x1c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a6b      	ldr	r2, [pc, #428]	@ (8004694 <ADC_ConfigureBoostMode+0x1c4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d109      	bne.n	8004500 <ADC_ConfigureBoostMode+0x30>
 80044ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004698 <ADC_ConfigureBoostMode+0x1c8>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf14      	ite	ne
 80044f8:	2301      	movne	r3, #1
 80044fa:	2300      	moveq	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	e008      	b.n	8004512 <ADC_ConfigureBoostMode+0x42>
 8004500:	4b66      	ldr	r3, [pc, #408]	@ (800469c <ADC_ConfigureBoostMode+0x1cc>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004508:	2b00      	cmp	r3, #0
 800450a:	bf14      	ite	ne
 800450c:	2301      	movne	r3, #1
 800450e:	2300      	moveq	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d01c      	beq.n	8004550 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004516:	f004 fe63 	bl	80091e0 <HAL_RCC_GetHCLKFreq>
 800451a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004524:	d010      	beq.n	8004548 <ADC_ConfigureBoostMode+0x78>
 8004526:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800452a:	d873      	bhi.n	8004614 <ADC_ConfigureBoostMode+0x144>
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004530:	d002      	beq.n	8004538 <ADC_ConfigureBoostMode+0x68>
 8004532:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004536:	d16d      	bne.n	8004614 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	60fb      	str	r3, [r7, #12]
        break;
 8004546:	e068      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	089b      	lsrs	r3, r3, #2
 800454c:	60fb      	str	r3, [r7, #12]
        break;
 800454e:	e064      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004550:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004554:	f04f 0100 	mov.w	r1, #0
 8004558:	f006 f83e 	bl	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800455c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004566:	d051      	beq.n	800460c <ADC_ConfigureBoostMode+0x13c>
 8004568:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800456c:	d854      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 800456e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004572:	d047      	beq.n	8004604 <ADC_ConfigureBoostMode+0x134>
 8004574:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004578:	d84e      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 800457a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800457e:	d03d      	beq.n	80045fc <ADC_ConfigureBoostMode+0x12c>
 8004580:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004584:	d848      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 8004586:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800458a:	d033      	beq.n	80045f4 <ADC_ConfigureBoostMode+0x124>
 800458c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004590:	d842      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 8004592:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004596:	d029      	beq.n	80045ec <ADC_ConfigureBoostMode+0x11c>
 8004598:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800459c:	d83c      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 800459e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80045a2:	d01a      	beq.n	80045da <ADC_ConfigureBoostMode+0x10a>
 80045a4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80045a8:	d836      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 80045aa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80045ae:	d014      	beq.n	80045da <ADC_ConfigureBoostMode+0x10a>
 80045b0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80045b4:	d830      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 80045b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045ba:	d00e      	beq.n	80045da <ADC_ConfigureBoostMode+0x10a>
 80045bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045c0:	d82a      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 80045c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80045c6:	d008      	beq.n	80045da <ADC_ConfigureBoostMode+0x10a>
 80045c8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80045cc:	d824      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 80045ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045d2:	d002      	beq.n	80045da <ADC_ConfigureBoostMode+0x10a>
 80045d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80045d8:	d11e      	bne.n	8004618 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	0c9b      	lsrs	r3, r3, #18
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	60fb      	str	r3, [r7, #12]
        break;
 80045ea:	e016      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	60fb      	str	r3, [r7, #12]
        break;
 80045f2:	e012      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	60fb      	str	r3, [r7, #12]
        break;
 80045fa:	e00e      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	099b      	lsrs	r3, r3, #6
 8004600:	60fb      	str	r3, [r7, #12]
        break;
 8004602:	e00a      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	09db      	lsrs	r3, r3, #7
 8004608:	60fb      	str	r3, [r7, #12]
        break;
 800460a:	e006      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	0a1b      	lsrs	r3, r3, #8
 8004610:	60fb      	str	r3, [r7, #12]
        break;
 8004612:	e002      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004614:	bf00      	nop
 8004616:	e000      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004618:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	085b      	lsrs	r3, r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4a1f      	ldr	r2, [pc, #124]	@ (80046a0 <ADC_ConfigureBoostMode+0x1d0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d808      	bhi.n	800463a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004636:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004638:	e025      	b.n	8004686 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4a19      	ldr	r2, [pc, #100]	@ (80046a4 <ADC_ConfigureBoostMode+0x1d4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d80a      	bhi.n	8004658 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004654:	609a      	str	r2, [r3, #8]
}
 8004656:	e016      	b.n	8004686 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4a13      	ldr	r2, [pc, #76]	@ (80046a8 <ADC_ConfigureBoostMode+0x1d8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d80a      	bhi.n	8004676 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004672:	609a      	str	r2, [r3, #8]
}
 8004674:	e007      	b.n	8004686 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004684:	609a      	str	r2, [r3, #8]
}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40022000 	.word	0x40022000
 8004694:	40022100 	.word	0x40022100
 8004698:	40022300 	.word	0x40022300
 800469c:	58026300 	.word	0x58026300
 80046a0:	005f5e10 	.word	0x005f5e10
 80046a4:	00bebc20 	.word	0x00bebc20
 80046a8:	017d7840 	.word	0x017d7840

080046ac <LL_ADC_IsEnabled>:
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <LL_ADC_IsEnabled+0x18>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <LL_ADC_IsEnabled+0x1a>
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d101      	bne.n	80046ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80046f8:	b590      	push	{r4, r7, lr}
 80046fa:	b0a3      	sub	sp, #140	@ 0x8c
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004712:	2302      	movs	r3, #2
 8004714:	e0c1      	b.n	800489a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800471e:	2300      	movs	r3, #0
 8004720:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004722:	2300      	movs	r3, #0
 8004724:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a5e      	ldr	r2, [pc, #376]	@ (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d102      	bne.n	8004736 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004730:	4b5d      	ldr	r3, [pc, #372]	@ (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	e001      	b.n	800473a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10b      	bne.n	8004758 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0a0      	b.n	800489a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff ffb9 	bl	80046d2 <LL_ADC_REG_IsConversionOngoing>
 8004760:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff ffb2 	bl	80046d2 <LL_ADC_REG_IsConversionOngoing>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	f040 8081 	bne.w	8004878 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004776:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800477a:	2b00      	cmp	r3, #0
 800477c:	d17c      	bne.n	8004878 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a48      	ldr	r2, [pc, #288]	@ (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a46      	ldr	r2, [pc, #280]	@ (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d101      	bne.n	8004796 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004792:	4b46      	ldr	r3, [pc, #280]	@ (80048ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004794:	e000      	b.n	8004798 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004796:	4b46      	ldr	r3, [pc, #280]	@ (80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004798:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d039      	beq.n	8004816 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80047a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3a      	ldr	r2, [pc, #232]	@ (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a39      	ldr	r2, [pc, #228]	@ (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d10e      	bne.n	80047e6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80047c8:	4836      	ldr	r0, [pc, #216]	@ (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047ca:	f7ff ff6f 	bl	80046ac <LL_ADC_IsEnabled>
 80047ce:	4604      	mov	r4, r0
 80047d0:	4835      	ldr	r0, [pc, #212]	@ (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047d2:	f7ff ff6b 	bl	80046ac <LL_ADC_IsEnabled>
 80047d6:	4603      	mov	r3, r0
 80047d8:	4323      	orrs	r3, r4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bf0c      	ite	eq
 80047de:	2301      	moveq	r3, #1
 80047e0:	2300      	movne	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	e008      	b.n	80047f8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80047e6:	4833      	ldr	r0, [pc, #204]	@ (80048b4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80047e8:	f7ff ff60 	bl	80046ac <LL_ADC_IsEnabled>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	bf0c      	ite	eq
 80047f2:	2301      	moveq	r3, #1
 80047f4:	2300      	movne	r3, #0
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d047      	beq.n	800488c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	4b2d      	ldr	r3, [pc, #180]	@ (80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004802:	4013      	ands	r3, r2
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	6811      	ldr	r1, [r2, #0]
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	6892      	ldr	r2, [r2, #8]
 800480c:	430a      	orrs	r2, r1
 800480e:	431a      	orrs	r2, r3
 8004810:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004812:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004814:	e03a      	b.n	800488c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004816:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800481e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004820:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1f      	ldr	r2, [pc, #124]	@ (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d004      	beq.n	8004836 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1d      	ldr	r2, [pc, #116]	@ (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d10e      	bne.n	8004854 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004836:	481b      	ldr	r0, [pc, #108]	@ (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004838:	f7ff ff38 	bl	80046ac <LL_ADC_IsEnabled>
 800483c:	4604      	mov	r4, r0
 800483e:	481a      	ldr	r0, [pc, #104]	@ (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004840:	f7ff ff34 	bl	80046ac <LL_ADC_IsEnabled>
 8004844:	4603      	mov	r3, r0
 8004846:	4323      	orrs	r3, r4
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf0c      	ite	eq
 800484c:	2301      	moveq	r3, #1
 800484e:	2300      	movne	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e008      	b.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004854:	4817      	ldr	r0, [pc, #92]	@ (80048b4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004856:	f7ff ff29 	bl	80046ac <LL_ADC_IsEnabled>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d010      	beq.n	800488c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800486a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	4b12      	ldr	r3, [pc, #72]	@ (80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004870:	4013      	ands	r3, r2
 8004872:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004874:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004876:	e009      	b.n	800488c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800487c:	f043 0220 	orr.w	r2, r3, #32
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800488a:	e000      	b.n	800488e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800488c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004896:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800489a:	4618      	mov	r0, r3
 800489c:	378c      	adds	r7, #140	@ 0x8c
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd90      	pop	{r4, r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40022000 	.word	0x40022000
 80048a8:	40022100 	.word	0x40022100
 80048ac:	40022300 	.word	0x40022300
 80048b0:	58026300 	.word	0x58026300
 80048b4:	58026000 	.word	0x58026000
 80048b8:	fffff0e0 	.word	0xfffff0e0

080048bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048cc:	4b0b      	ldr	r3, [pc, #44]	@ (80048fc <__NVIC_SetPriorityGrouping+0x40>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048d8:	4013      	ands	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80048e4:	4b06      	ldr	r3, [pc, #24]	@ (8004900 <__NVIC_SetPriorityGrouping+0x44>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ea:	4a04      	ldr	r2, [pc, #16]	@ (80048fc <__NVIC_SetPriorityGrouping+0x40>)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	60d3      	str	r3, [r2, #12]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	e000ed00 	.word	0xe000ed00
 8004900:	05fa0000 	.word	0x05fa0000

08004904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004908:	4b04      	ldr	r3, [pc, #16]	@ (800491c <__NVIC_GetPriorityGrouping+0x18>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	f003 0307 	and.w	r3, r3, #7
}
 8004912:	4618      	mov	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	e000ed00 	.word	0xe000ed00

08004920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800492a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800492e:	2b00      	cmp	r3, #0
 8004930:	db0b      	blt.n	800494a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	f003 021f 	and.w	r2, r3, #31
 8004938:	4907      	ldr	r1, [pc, #28]	@ (8004958 <__NVIC_EnableIRQ+0x38>)
 800493a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2001      	movs	r0, #1
 8004942:	fa00 f202 	lsl.w	r2, r0, r2
 8004946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	e000e100 	.word	0xe000e100

0800495c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	6039      	str	r1, [r7, #0]
 8004966:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800496c:	2b00      	cmp	r3, #0
 800496e:	db0a      	blt.n	8004986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	b2da      	uxtb	r2, r3
 8004974:	490c      	ldr	r1, [pc, #48]	@ (80049a8 <__NVIC_SetPriority+0x4c>)
 8004976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800497a:	0112      	lsls	r2, r2, #4
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	440b      	add	r3, r1
 8004980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004984:	e00a      	b.n	800499c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	4908      	ldr	r1, [pc, #32]	@ (80049ac <__NVIC_SetPriority+0x50>)
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	3b04      	subs	r3, #4
 8004994:	0112      	lsls	r2, r2, #4
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	440b      	add	r3, r1
 800499a:	761a      	strb	r2, [r3, #24]
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	e000e100 	.word	0xe000e100
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b089      	sub	sp, #36	@ 0x24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f1c3 0307 	rsb	r3, r3, #7
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	bf28      	it	cs
 80049ce:	2304      	movcs	r3, #4
 80049d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3304      	adds	r3, #4
 80049d6:	2b06      	cmp	r3, #6
 80049d8:	d902      	bls.n	80049e0 <NVIC_EncodePriority+0x30>
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3b03      	subs	r3, #3
 80049de:	e000      	b.n	80049e2 <NVIC_EncodePriority+0x32>
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e4:	f04f 32ff 	mov.w	r2, #4294967295
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43da      	mvns	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	401a      	ands	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049f8:	f04f 31ff 	mov.w	r1, #4294967295
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004a02:	43d9      	mvns	r1, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a08:	4313      	orrs	r3, r2
         );
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3724      	adds	r7, #36	@ 0x24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a28:	d301      	bcc.n	8004a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e00f      	b.n	8004a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a58 <SysTick_Config+0x40>)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a36:	210f      	movs	r1, #15
 8004a38:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3c:	f7ff ff8e 	bl	800495c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a40:	4b05      	ldr	r3, [pc, #20]	@ (8004a58 <SysTick_Config+0x40>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a46:	4b04      	ldr	r3, [pc, #16]	@ (8004a58 <SysTick_Config+0x40>)
 8004a48:	2207      	movs	r2, #7
 8004a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	e000e010 	.word	0xe000e010

08004a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff ff29 	bl	80048bc <__NVIC_SetPriorityGrouping>
}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b086      	sub	sp, #24
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	4603      	mov	r3, r0
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	607a      	str	r2, [r7, #4]
 8004a7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a80:	f7ff ff40 	bl	8004904 <__NVIC_GetPriorityGrouping>
 8004a84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	6978      	ldr	r0, [r7, #20]
 8004a8c:	f7ff ff90 	bl	80049b0 <NVIC_EncodePriority>
 8004a90:	4602      	mov	r2, r0
 8004a92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a96:	4611      	mov	r1, r2
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff ff5f 	bl	800495c <__NVIC_SetPriority>
}
 8004a9e:	bf00      	nop
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	4603      	mov	r3, r0
 8004aae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff ff33 	bl	8004920 <__NVIC_EnableIRQ>
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff ffa4 	bl	8004a18 <SysTick_Config>
 8004ad0:	4603      	mov	r3, r0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004ae0:	f3bf 8f5f 	dmb	sy
}
 8004ae4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004ae6:	4b07      	ldr	r3, [pc, #28]	@ (8004b04 <HAL_MPU_Disable+0x28>)
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	4a06      	ldr	r2, [pc, #24]	@ (8004b04 <HAL_MPU_Disable+0x28>)
 8004aec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004af0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004af2:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <HAL_MPU_Disable+0x2c>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	605a      	str	r2, [r3, #4]
}
 8004af8:	bf00      	nop
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	e000ed00 	.word	0xe000ed00
 8004b08:	e000ed90 	.word	0xe000ed90

08004b0c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004b14:	4a0b      	ldr	r2, [pc, #44]	@ (8004b44 <HAL_MPU_Enable+0x38>)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b48 <HAL_MPU_Enable+0x3c>)
 8004b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b22:	4a09      	ldr	r2, [pc, #36]	@ (8004b48 <HAL_MPU_Enable+0x3c>)
 8004b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b28:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004b2a:	f3bf 8f4f 	dsb	sy
}
 8004b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b30:	f3bf 8f6f 	isb	sy
}
 8004b34:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	e000ed90 	.word	0xe000ed90
 8004b48:	e000ed00 	.word	0xe000ed00

08004b4c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	785a      	ldrb	r2, [r3, #1]
 8004b58:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc8 <HAL_MPU_ConfigRegion+0x7c>)
 8004b5a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004bc8 <HAL_MPU_ConfigRegion+0x7c>)
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	4a19      	ldr	r2, [pc, #100]	@ (8004bc8 <HAL_MPU_ConfigRegion+0x7c>)
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004b68:	4a17      	ldr	r2, [pc, #92]	@ (8004bc8 <HAL_MPU_ConfigRegion+0x7c>)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	7b1b      	ldrb	r3, [r3, #12]
 8004b74:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	7adb      	ldrb	r3, [r3, #11]
 8004b7a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	7a9b      	ldrb	r3, [r3, #10]
 8004b82:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004b84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	7b5b      	ldrb	r3, [r3, #13]
 8004b8a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004b8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	7b9b      	ldrb	r3, [r3, #14]
 8004b92:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004b94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	7bdb      	ldrb	r3, [r3, #15]
 8004b9a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004b9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	7a5b      	ldrb	r3, [r3, #9]
 8004ba2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004ba4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	7a1b      	ldrb	r3, [r3, #8]
 8004baa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004bac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	7812      	ldrb	r2, [r2, #0]
 8004bb2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bb4:	4a04      	ldr	r2, [pc, #16]	@ (8004bc8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004bb6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bb8:	6113      	str	r3, [r2, #16]
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	e000ed90 	.word	0xe000ed90

08004bcc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e014      	b.n	8004c08 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	791b      	ldrb	r3, [r3, #4]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc fee6 	bl	80019c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08a      	sub	sp, #40	@ 0x28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_DAC_ConfigChannel+0x1e>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e12a      	b.n	8004e88 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	795b      	ldrb	r3, [r3, #5]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_DAC_ConfigChannel+0x2e>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e124      	b.n	8004e88 <HAL_DAC_ConfigChannel+0x278>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2202      	movs	r2, #2
 8004c48:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d17a      	bne.n	8004d48 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004c52:	f7fe fa8f 	bl	8003174 <HAL_GetTick>
 8004c56:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d13d      	bne.n	8004cda <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c5e:	e018      	b.n	8004c92 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c60:	f7fe fa88 	bl	8003174 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d911      	bls.n	8004c92 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c74:	4b86      	ldr	r3, [pc, #536]	@ (8004e90 <HAL_DAC_ConfigChannel+0x280>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f043 0208 	orr.w	r2, r3, #8
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e0fa      	b.n	8004e88 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c98:	4b7d      	ldr	r3, [pc, #500]	@ (8004e90 <HAL_DAC_ConfigChannel+0x280>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1df      	bne.n	8004c60 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	6992      	ldr	r2, [r2, #24]
 8004ca8:	641a      	str	r2, [r3, #64]	@ 0x40
 8004caa:	e020      	b.n	8004cee <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004cac:	f7fe fa62 	bl	8003174 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d90f      	bls.n	8004cda <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	da0a      	bge.n	8004cda <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f043 0208 	orr.w	r2, r3, #8
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2203      	movs	r2, #3
 8004cd4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e0d6      	b.n	8004e88 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	dbe3      	blt.n	8004cac <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	6992      	ldr	r2, [r2, #24]
 8004cec:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	ea02 0103 	and.w	r1, r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	409a      	lsls	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	21ff      	movs	r1, #255	@ 0xff
 8004d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	ea02 0103 	and.w	r1, r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	6a1a      	ldr	r2, [r3, #32]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	409a      	lsls	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d11d      	bne.n	8004d8c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d56:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	221f      	movs	r2, #31
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	43db      	mvns	r3, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d92:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2207      	movs	r2, #7
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43db      	mvns	r3, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4013      	ands	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d102      	bne.n	8004db6 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004db4:	e00f      	b.n	8004dd6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d102      	bne.n	8004dc4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dc2:	e008      	b.n	8004dd6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dd0:	e001      	b.n	8004dd6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6819      	ldr	r1, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	43da      	mvns	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	400a      	ands	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f003 0310 	and.w	r3, r3, #16
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6819      	ldr	r1, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	22c0      	movs	r2, #192	@ 0xc0
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43da      	mvns	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	400a      	ands	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004e84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3728      	adds	r7, #40	@ 0x28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20008000 	.word	0x20008000

08004e94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004e9c:	f7fe f96a 	bl	8003174 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e312      	b.n	80054d2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a66      	ldr	r2, [pc, #408]	@ (800504c <HAL_DMA_Init+0x1b8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d04a      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a65      	ldr	r2, [pc, #404]	@ (8005050 <HAL_DMA_Init+0x1bc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d045      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a63      	ldr	r2, [pc, #396]	@ (8005054 <HAL_DMA_Init+0x1c0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d040      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a62      	ldr	r2, [pc, #392]	@ (8005058 <HAL_DMA_Init+0x1c4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d03b      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a60      	ldr	r2, [pc, #384]	@ (800505c <HAL_DMA_Init+0x1c8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d036      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a5f      	ldr	r2, [pc, #380]	@ (8005060 <HAL_DMA_Init+0x1cc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d031      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a5d      	ldr	r2, [pc, #372]	@ (8005064 <HAL_DMA_Init+0x1d0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d02c      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a5c      	ldr	r2, [pc, #368]	@ (8005068 <HAL_DMA_Init+0x1d4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d027      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a5a      	ldr	r2, [pc, #360]	@ (800506c <HAL_DMA_Init+0x1d8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d022      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a59      	ldr	r2, [pc, #356]	@ (8005070 <HAL_DMA_Init+0x1dc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d01d      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a57      	ldr	r2, [pc, #348]	@ (8005074 <HAL_DMA_Init+0x1e0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d018      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a56      	ldr	r2, [pc, #344]	@ (8005078 <HAL_DMA_Init+0x1e4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d013      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a54      	ldr	r2, [pc, #336]	@ (800507c <HAL_DMA_Init+0x1e8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00e      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a53      	ldr	r2, [pc, #332]	@ (8005080 <HAL_DMA_Init+0x1ec>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d009      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a51      	ldr	r2, [pc, #324]	@ (8005084 <HAL_DMA_Init+0x1f0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <HAL_DMA_Init+0xb8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a50      	ldr	r2, [pc, #320]	@ (8005088 <HAL_DMA_Init+0x1f4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d101      	bne.n	8004f50 <HAL_DMA_Init+0xbc>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <HAL_DMA_Init+0xbe>
 8004f50:	2300      	movs	r3, #0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 813c 	beq.w	80051d0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a37      	ldr	r2, [pc, #220]	@ (800504c <HAL_DMA_Init+0x1b8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d04a      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a36      	ldr	r2, [pc, #216]	@ (8005050 <HAL_DMA_Init+0x1bc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d045      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a34      	ldr	r2, [pc, #208]	@ (8005054 <HAL_DMA_Init+0x1c0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d040      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a33      	ldr	r2, [pc, #204]	@ (8005058 <HAL_DMA_Init+0x1c4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d03b      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a31      	ldr	r2, [pc, #196]	@ (800505c <HAL_DMA_Init+0x1c8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d036      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a30      	ldr	r2, [pc, #192]	@ (8005060 <HAL_DMA_Init+0x1cc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d031      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8005064 <HAL_DMA_Init+0x1d0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d02c      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8005068 <HAL_DMA_Init+0x1d4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d027      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800506c <HAL_DMA_Init+0x1d8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d022      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8005070 <HAL_DMA_Init+0x1dc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d01d      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a28      	ldr	r2, [pc, #160]	@ (8005074 <HAL_DMA_Init+0x1e0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d018      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a27      	ldr	r2, [pc, #156]	@ (8005078 <HAL_DMA_Init+0x1e4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d013      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a25      	ldr	r2, [pc, #148]	@ (800507c <HAL_DMA_Init+0x1e8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00e      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a24      	ldr	r2, [pc, #144]	@ (8005080 <HAL_DMA_Init+0x1ec>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d009      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a22      	ldr	r2, [pc, #136]	@ (8005084 <HAL_DMA_Init+0x1f0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_DMA_Init+0x174>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a21      	ldr	r2, [pc, #132]	@ (8005088 <HAL_DMA_Init+0x1f4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d108      	bne.n	800501a <HAL_DMA_Init+0x186>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0201 	bic.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e007      	b.n	800502a <HAL_DMA_Init+0x196>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0201 	bic.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800502a:	e02f      	b.n	800508c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800502c:	f7fe f8a2 	bl	8003174 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b05      	cmp	r3, #5
 8005038:	d928      	bls.n	800508c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2203      	movs	r2, #3
 8005044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e242      	b.n	80054d2 <HAL_DMA_Init+0x63e>
 800504c:	40020010 	.word	0x40020010
 8005050:	40020028 	.word	0x40020028
 8005054:	40020040 	.word	0x40020040
 8005058:	40020058 	.word	0x40020058
 800505c:	40020070 	.word	0x40020070
 8005060:	40020088 	.word	0x40020088
 8005064:	400200a0 	.word	0x400200a0
 8005068:	400200b8 	.word	0x400200b8
 800506c:	40020410 	.word	0x40020410
 8005070:	40020428 	.word	0x40020428
 8005074:	40020440 	.word	0x40020440
 8005078:	40020458 	.word	0x40020458
 800507c:	40020470 	.word	0x40020470
 8005080:	40020488 	.word	0x40020488
 8005084:	400204a0 	.word	0x400204a0
 8005088:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1c8      	bne.n	800502c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4b83      	ldr	r3, [pc, #524]	@ (80052b4 <HAL_DMA_Init+0x420>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80050b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d107      	bne.n	80050f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e8:	4313      	orrs	r3, r2
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b28      	cmp	r3, #40	@ 0x28
 80050f6:	d903      	bls.n	8005100 <HAL_DMA_Init+0x26c>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80050fe:	d91f      	bls.n	8005140 <HAL_DMA_Init+0x2ac>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b3e      	cmp	r3, #62	@ 0x3e
 8005106:	d903      	bls.n	8005110 <HAL_DMA_Init+0x27c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b42      	cmp	r3, #66	@ 0x42
 800510e:	d917      	bls.n	8005140 <HAL_DMA_Init+0x2ac>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b46      	cmp	r3, #70	@ 0x46
 8005116:	d903      	bls.n	8005120 <HAL_DMA_Init+0x28c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b48      	cmp	r3, #72	@ 0x48
 800511e:	d90f      	bls.n	8005140 <HAL_DMA_Init+0x2ac>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b4e      	cmp	r3, #78	@ 0x4e
 8005126:	d903      	bls.n	8005130 <HAL_DMA_Init+0x29c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b52      	cmp	r3, #82	@ 0x52
 800512e:	d907      	bls.n	8005140 <HAL_DMA_Init+0x2ac>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b73      	cmp	r3, #115	@ 0x73
 8005136:	d905      	bls.n	8005144 <HAL_DMA_Init+0x2b0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b77      	cmp	r3, #119	@ 0x77
 800513e:	d801      	bhi.n	8005144 <HAL_DMA_Init+0x2b0>
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <HAL_DMA_Init+0x2b2>
 8005144:	2300      	movs	r3, #0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005150:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f023 0307 	bic.w	r3, r3, #7
 8005168:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005178:	2b04      	cmp	r3, #4
 800517a:	d117      	bne.n	80051ac <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00e      	beq.n	80051ac <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f001 f9b4 	bl	80064fc <DMA_CheckFifoParam>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d008      	beq.n	80051ac <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2240      	movs	r2, #64	@ 0x40
 800519e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e192      	b.n	80054d2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f001 f8ef 	bl	8006398 <DMA_CalcBaseAndBitshift>
 80051ba:	4603      	mov	r3, r0
 80051bc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c2:	f003 031f 	and.w	r3, r3, #31
 80051c6:	223f      	movs	r2, #63	@ 0x3f
 80051c8:	409a      	lsls	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	609a      	str	r2, [r3, #8]
 80051ce:	e0c8      	b.n	8005362 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a38      	ldr	r2, [pc, #224]	@ (80052b8 <HAL_DMA_Init+0x424>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d022      	beq.n	8005220 <HAL_DMA_Init+0x38c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a37      	ldr	r2, [pc, #220]	@ (80052bc <HAL_DMA_Init+0x428>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d01d      	beq.n	8005220 <HAL_DMA_Init+0x38c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a35      	ldr	r2, [pc, #212]	@ (80052c0 <HAL_DMA_Init+0x42c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d018      	beq.n	8005220 <HAL_DMA_Init+0x38c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a34      	ldr	r2, [pc, #208]	@ (80052c4 <HAL_DMA_Init+0x430>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <HAL_DMA_Init+0x38c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a32      	ldr	r2, [pc, #200]	@ (80052c8 <HAL_DMA_Init+0x434>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00e      	beq.n	8005220 <HAL_DMA_Init+0x38c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a31      	ldr	r2, [pc, #196]	@ (80052cc <HAL_DMA_Init+0x438>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d009      	beq.n	8005220 <HAL_DMA_Init+0x38c>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a2f      	ldr	r2, [pc, #188]	@ (80052d0 <HAL_DMA_Init+0x43c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_DMA_Init+0x38c>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2e      	ldr	r2, [pc, #184]	@ (80052d4 <HAL_DMA_Init+0x440>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d101      	bne.n	8005224 <HAL_DMA_Init+0x390>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <HAL_DMA_Init+0x392>
 8005224:	2300      	movs	r3, #0
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 8092 	beq.w	8005350 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a21      	ldr	r2, [pc, #132]	@ (80052b8 <HAL_DMA_Init+0x424>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d021      	beq.n	800527a <HAL_DMA_Init+0x3e6>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a20      	ldr	r2, [pc, #128]	@ (80052bc <HAL_DMA_Init+0x428>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d01c      	beq.n	800527a <HAL_DMA_Init+0x3e6>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1e      	ldr	r2, [pc, #120]	@ (80052c0 <HAL_DMA_Init+0x42c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d017      	beq.n	800527a <HAL_DMA_Init+0x3e6>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1d      	ldr	r2, [pc, #116]	@ (80052c4 <HAL_DMA_Init+0x430>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d012      	beq.n	800527a <HAL_DMA_Init+0x3e6>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1b      	ldr	r2, [pc, #108]	@ (80052c8 <HAL_DMA_Init+0x434>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00d      	beq.n	800527a <HAL_DMA_Init+0x3e6>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1a      	ldr	r2, [pc, #104]	@ (80052cc <HAL_DMA_Init+0x438>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d008      	beq.n	800527a <HAL_DMA_Init+0x3e6>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a18      	ldr	r2, [pc, #96]	@ (80052d0 <HAL_DMA_Init+0x43c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <HAL_DMA_Init+0x3e6>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a17      	ldr	r2, [pc, #92]	@ (80052d4 <HAL_DMA_Init+0x440>)
 8005278:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4b10      	ldr	r3, [pc, #64]	@ (80052d8 <HAL_DMA_Init+0x444>)
 8005296:	4013      	ands	r3, r2
 8005298:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	2b40      	cmp	r3, #64	@ 0x40
 80052a0:	d01c      	beq.n	80052dc <HAL_DMA_Init+0x448>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b80      	cmp	r3, #128	@ 0x80
 80052a8:	d102      	bne.n	80052b0 <HAL_DMA_Init+0x41c>
 80052aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052ae:	e016      	b.n	80052de <HAL_DMA_Init+0x44a>
 80052b0:	2300      	movs	r3, #0
 80052b2:	e014      	b.n	80052de <HAL_DMA_Init+0x44a>
 80052b4:	fe10803f 	.word	0xfe10803f
 80052b8:	58025408 	.word	0x58025408
 80052bc:	5802541c 	.word	0x5802541c
 80052c0:	58025430 	.word	0x58025430
 80052c4:	58025444 	.word	0x58025444
 80052c8:	58025458 	.word	0x58025458
 80052cc:	5802546c 	.word	0x5802546c
 80052d0:	58025480 	.word	0x58025480
 80052d4:	58025494 	.word	0x58025494
 80052d8:	fffe000f 	.word	0xfffe000f
 80052dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68d2      	ldr	r2, [r2, #12]
 80052e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80052ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80052f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005304:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800530c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	4b6e      	ldr	r3, [pc, #440]	@ (80054dc <HAL_DMA_Init+0x648>)
 8005324:	4413      	add	r3, r2
 8005326:	4a6e      	ldr	r2, [pc, #440]	@ (80054e0 <HAL_DMA_Init+0x64c>)
 8005328:	fba2 2303 	umull	r2, r3, r2, r3
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	009a      	lsls	r2, r3, #2
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f001 f82f 	bl	8006398 <DMA_CalcBaseAndBitshift>
 800533a:	4603      	mov	r3, r0
 800533c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	2201      	movs	r2, #1
 8005348:	409a      	lsls	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	605a      	str	r2, [r3, #4]
 800534e:	e008      	b.n	8005362 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2240      	movs	r2, #64	@ 0x40
 8005354:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2203      	movs	r2, #3
 800535a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e0b7      	b.n	80054d2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a5f      	ldr	r2, [pc, #380]	@ (80054e4 <HAL_DMA_Init+0x650>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d072      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a5d      	ldr	r2, [pc, #372]	@ (80054e8 <HAL_DMA_Init+0x654>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d06d      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a5c      	ldr	r2, [pc, #368]	@ (80054ec <HAL_DMA_Init+0x658>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d068      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a5a      	ldr	r2, [pc, #360]	@ (80054f0 <HAL_DMA_Init+0x65c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d063      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a59      	ldr	r2, [pc, #356]	@ (80054f4 <HAL_DMA_Init+0x660>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d05e      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a57      	ldr	r2, [pc, #348]	@ (80054f8 <HAL_DMA_Init+0x664>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d059      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a56      	ldr	r2, [pc, #344]	@ (80054fc <HAL_DMA_Init+0x668>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d054      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a54      	ldr	r2, [pc, #336]	@ (8005500 <HAL_DMA_Init+0x66c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d04f      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a53      	ldr	r2, [pc, #332]	@ (8005504 <HAL_DMA_Init+0x670>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d04a      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a51      	ldr	r2, [pc, #324]	@ (8005508 <HAL_DMA_Init+0x674>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d045      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a50      	ldr	r2, [pc, #320]	@ (800550c <HAL_DMA_Init+0x678>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d040      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a4e      	ldr	r2, [pc, #312]	@ (8005510 <HAL_DMA_Init+0x67c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d03b      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a4d      	ldr	r2, [pc, #308]	@ (8005514 <HAL_DMA_Init+0x680>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d036      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a4b      	ldr	r2, [pc, #300]	@ (8005518 <HAL_DMA_Init+0x684>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d031      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a4a      	ldr	r2, [pc, #296]	@ (800551c <HAL_DMA_Init+0x688>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d02c      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a48      	ldr	r2, [pc, #288]	@ (8005520 <HAL_DMA_Init+0x68c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d027      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a47      	ldr	r2, [pc, #284]	@ (8005524 <HAL_DMA_Init+0x690>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d022      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a45      	ldr	r2, [pc, #276]	@ (8005528 <HAL_DMA_Init+0x694>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d01d      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a44      	ldr	r2, [pc, #272]	@ (800552c <HAL_DMA_Init+0x698>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d018      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a42      	ldr	r2, [pc, #264]	@ (8005530 <HAL_DMA_Init+0x69c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a41      	ldr	r2, [pc, #260]	@ (8005534 <HAL_DMA_Init+0x6a0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a3f      	ldr	r2, [pc, #252]	@ (8005538 <HAL_DMA_Init+0x6a4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a3e      	ldr	r2, [pc, #248]	@ (800553c <HAL_DMA_Init+0x6a8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_DMA_Init+0x5be>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a3c      	ldr	r2, [pc, #240]	@ (8005540 <HAL_DMA_Init+0x6ac>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d101      	bne.n	8005456 <HAL_DMA_Init+0x5c2>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <HAL_DMA_Init+0x5c4>
 8005456:	2300      	movs	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d032      	beq.n	80054c2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f001 f8c9 	bl	80065f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2b80      	cmp	r3, #128	@ 0x80
 8005468:	d102      	bne.n	8005470 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005484:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d010      	beq.n	80054b0 <HAL_DMA_Init+0x61c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b08      	cmp	r3, #8
 8005494:	d80c      	bhi.n	80054b0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f001 f946 	bl	8006728 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80054ac:	605a      	str	r2, [r3, #4]
 80054ae:	e008      	b.n	80054c2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	a7fdabf8 	.word	0xa7fdabf8
 80054e0:	cccccccd 	.word	0xcccccccd
 80054e4:	40020010 	.word	0x40020010
 80054e8:	40020028 	.word	0x40020028
 80054ec:	40020040 	.word	0x40020040
 80054f0:	40020058 	.word	0x40020058
 80054f4:	40020070 	.word	0x40020070
 80054f8:	40020088 	.word	0x40020088
 80054fc:	400200a0 	.word	0x400200a0
 8005500:	400200b8 	.word	0x400200b8
 8005504:	40020410 	.word	0x40020410
 8005508:	40020428 	.word	0x40020428
 800550c:	40020440 	.word	0x40020440
 8005510:	40020458 	.word	0x40020458
 8005514:	40020470 	.word	0x40020470
 8005518:	40020488 	.word	0x40020488
 800551c:	400204a0 	.word	0x400204a0
 8005520:	400204b8 	.word	0x400204b8
 8005524:	58025408 	.word	0x58025408
 8005528:	5802541c 	.word	0x5802541c
 800552c:	58025430 	.word	0x58025430
 8005530:	58025444 	.word	0x58025444
 8005534:	58025458 	.word	0x58025458
 8005538:	5802546c 	.word	0x5802546c
 800553c:	58025480 	.word	0x58025480
 8005540:	58025494 	.word	0x58025494

08005544 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08a      	sub	sp, #40	@ 0x28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005550:	4b67      	ldr	r3, [pc, #412]	@ (80056f0 <HAL_DMA_IRQHandler+0x1ac>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a67      	ldr	r2, [pc, #412]	@ (80056f4 <HAL_DMA_IRQHandler+0x1b0>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	0a9b      	lsrs	r3, r3, #10
 800555c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005562:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005568:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a5f      	ldr	r2, [pc, #380]	@ (80056f8 <HAL_DMA_IRQHandler+0x1b4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d04a      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a5d      	ldr	r2, [pc, #372]	@ (80056fc <HAL_DMA_IRQHandler+0x1b8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d045      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a5c      	ldr	r2, [pc, #368]	@ (8005700 <HAL_DMA_IRQHandler+0x1bc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d040      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a5a      	ldr	r2, [pc, #360]	@ (8005704 <HAL_DMA_IRQHandler+0x1c0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d03b      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a59      	ldr	r2, [pc, #356]	@ (8005708 <HAL_DMA_IRQHandler+0x1c4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d036      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a57      	ldr	r2, [pc, #348]	@ (800570c <HAL_DMA_IRQHandler+0x1c8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d031      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a56      	ldr	r2, [pc, #344]	@ (8005710 <HAL_DMA_IRQHandler+0x1cc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d02c      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a54      	ldr	r2, [pc, #336]	@ (8005714 <HAL_DMA_IRQHandler+0x1d0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d027      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a53      	ldr	r2, [pc, #332]	@ (8005718 <HAL_DMA_IRQHandler+0x1d4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d022      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a51      	ldr	r2, [pc, #324]	@ (800571c <HAL_DMA_IRQHandler+0x1d8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d01d      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a50      	ldr	r2, [pc, #320]	@ (8005720 <HAL_DMA_IRQHandler+0x1dc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d018      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a4e      	ldr	r2, [pc, #312]	@ (8005724 <HAL_DMA_IRQHandler+0x1e0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a4d      	ldr	r2, [pc, #308]	@ (8005728 <HAL_DMA_IRQHandler+0x1e4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00e      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a4b      	ldr	r2, [pc, #300]	@ (800572c <HAL_DMA_IRQHandler+0x1e8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d009      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a4a      	ldr	r2, [pc, #296]	@ (8005730 <HAL_DMA_IRQHandler+0x1ec>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d004      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a48      	ldr	r2, [pc, #288]	@ (8005734 <HAL_DMA_IRQHandler+0x1f0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d101      	bne.n	800561a <HAL_DMA_IRQHandler+0xd6>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <HAL_DMA_IRQHandler+0xd8>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 842b 	beq.w	8005e78 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	2208      	movs	r2, #8
 800562c:	409a      	lsls	r2, r3
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80a2 	beq.w	800577c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a2e      	ldr	r2, [pc, #184]	@ (80056f8 <HAL_DMA_IRQHandler+0x1b4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d04a      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a2d      	ldr	r2, [pc, #180]	@ (80056fc <HAL_DMA_IRQHandler+0x1b8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d045      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a2b      	ldr	r2, [pc, #172]	@ (8005700 <HAL_DMA_IRQHandler+0x1bc>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d040      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a2a      	ldr	r2, [pc, #168]	@ (8005704 <HAL_DMA_IRQHandler+0x1c0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d03b      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a28      	ldr	r2, [pc, #160]	@ (8005708 <HAL_DMA_IRQHandler+0x1c4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d036      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a27      	ldr	r2, [pc, #156]	@ (800570c <HAL_DMA_IRQHandler+0x1c8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d031      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a25      	ldr	r2, [pc, #148]	@ (8005710 <HAL_DMA_IRQHandler+0x1cc>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d02c      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a24      	ldr	r2, [pc, #144]	@ (8005714 <HAL_DMA_IRQHandler+0x1d0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d027      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a22      	ldr	r2, [pc, #136]	@ (8005718 <HAL_DMA_IRQHandler+0x1d4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d022      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a21      	ldr	r2, [pc, #132]	@ (800571c <HAL_DMA_IRQHandler+0x1d8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d01d      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005720 <HAL_DMA_IRQHandler+0x1dc>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d018      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005724 <HAL_DMA_IRQHandler+0x1e0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d013      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005728 <HAL_DMA_IRQHandler+0x1e4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00e      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1b      	ldr	r2, [pc, #108]	@ (800572c <HAL_DMA_IRQHandler+0x1e8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d009      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a19      	ldr	r2, [pc, #100]	@ (8005730 <HAL_DMA_IRQHandler+0x1ec>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d004      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a18      	ldr	r2, [pc, #96]	@ (8005734 <HAL_DMA_IRQHandler+0x1f0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d12f      	bne.n	8005738 <HAL_DMA_IRQHandler+0x1f4>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	bf14      	ite	ne
 80056e6:	2301      	movne	r3, #1
 80056e8:	2300      	moveq	r3, #0
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	e02e      	b.n	800574c <HAL_DMA_IRQHandler+0x208>
 80056ee:	bf00      	nop
 80056f0:	24000000 	.word	0x24000000
 80056f4:	1b4e81b5 	.word	0x1b4e81b5
 80056f8:	40020010 	.word	0x40020010
 80056fc:	40020028 	.word	0x40020028
 8005700:	40020040 	.word	0x40020040
 8005704:	40020058 	.word	0x40020058
 8005708:	40020070 	.word	0x40020070
 800570c:	40020088 	.word	0x40020088
 8005710:	400200a0 	.word	0x400200a0
 8005714:	400200b8 	.word	0x400200b8
 8005718:	40020410 	.word	0x40020410
 800571c:	40020428 	.word	0x40020428
 8005720:	40020440 	.word	0x40020440
 8005724:	40020458 	.word	0x40020458
 8005728:	40020470 	.word	0x40020470
 800572c:	40020488 	.word	0x40020488
 8005730:	400204a0 	.word	0x400204a0
 8005734:	400204b8 	.word	0x400204b8
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	bf14      	ite	ne
 8005746:	2301      	movne	r3, #1
 8005748:	2300      	moveq	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d015      	beq.n	800577c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0204 	bic.w	r2, r2, #4
 800575e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	2208      	movs	r2, #8
 800576a:	409a      	lsls	r2, r3
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005774:	f043 0201 	orr.w	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	fa22 f303 	lsr.w	r3, r2, r3
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d06e      	beq.n	8005870 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a69      	ldr	r2, [pc, #420]	@ (800593c <HAL_DMA_IRQHandler+0x3f8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d04a      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a67      	ldr	r2, [pc, #412]	@ (8005940 <HAL_DMA_IRQHandler+0x3fc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d045      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a66      	ldr	r2, [pc, #408]	@ (8005944 <HAL_DMA_IRQHandler+0x400>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d040      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a64      	ldr	r2, [pc, #400]	@ (8005948 <HAL_DMA_IRQHandler+0x404>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d03b      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a63      	ldr	r2, [pc, #396]	@ (800594c <HAL_DMA_IRQHandler+0x408>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d036      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a61      	ldr	r2, [pc, #388]	@ (8005950 <HAL_DMA_IRQHandler+0x40c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d031      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a60      	ldr	r2, [pc, #384]	@ (8005954 <HAL_DMA_IRQHandler+0x410>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d02c      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a5e      	ldr	r2, [pc, #376]	@ (8005958 <HAL_DMA_IRQHandler+0x414>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d027      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a5d      	ldr	r2, [pc, #372]	@ (800595c <HAL_DMA_IRQHandler+0x418>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d022      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a5b      	ldr	r2, [pc, #364]	@ (8005960 <HAL_DMA_IRQHandler+0x41c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d01d      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a5a      	ldr	r2, [pc, #360]	@ (8005964 <HAL_DMA_IRQHandler+0x420>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d018      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a58      	ldr	r2, [pc, #352]	@ (8005968 <HAL_DMA_IRQHandler+0x424>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a57      	ldr	r2, [pc, #348]	@ (800596c <HAL_DMA_IRQHandler+0x428>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00e      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a55      	ldr	r2, [pc, #340]	@ (8005970 <HAL_DMA_IRQHandler+0x42c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d009      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a54      	ldr	r2, [pc, #336]	@ (8005974 <HAL_DMA_IRQHandler+0x430>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d004      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a52      	ldr	r2, [pc, #328]	@ (8005978 <HAL_DMA_IRQHandler+0x434>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d10a      	bne.n	8005848 <HAL_DMA_IRQHandler+0x304>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800583c:	2b00      	cmp	r3, #0
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	e003      	b.n	8005850 <HAL_DMA_IRQHandler+0x30c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2300      	movs	r3, #0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00d      	beq.n	8005870 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	2201      	movs	r2, #1
 800585e:	409a      	lsls	r2, r3
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005868:	f043 0202 	orr.w	r2, r3, #2
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005874:	f003 031f 	and.w	r3, r3, #31
 8005878:	2204      	movs	r2, #4
 800587a:	409a      	lsls	r2, r3
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	4013      	ands	r3, r2
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 808f 	beq.w	80059a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a2c      	ldr	r2, [pc, #176]	@ (800593c <HAL_DMA_IRQHandler+0x3f8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d04a      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a2a      	ldr	r2, [pc, #168]	@ (8005940 <HAL_DMA_IRQHandler+0x3fc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d045      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a29      	ldr	r2, [pc, #164]	@ (8005944 <HAL_DMA_IRQHandler+0x400>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d040      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a27      	ldr	r2, [pc, #156]	@ (8005948 <HAL_DMA_IRQHandler+0x404>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d03b      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a26      	ldr	r2, [pc, #152]	@ (800594c <HAL_DMA_IRQHandler+0x408>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d036      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a24      	ldr	r2, [pc, #144]	@ (8005950 <HAL_DMA_IRQHandler+0x40c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d031      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a23      	ldr	r2, [pc, #140]	@ (8005954 <HAL_DMA_IRQHandler+0x410>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d02c      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a21      	ldr	r2, [pc, #132]	@ (8005958 <HAL_DMA_IRQHandler+0x414>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d027      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a20      	ldr	r2, [pc, #128]	@ (800595c <HAL_DMA_IRQHandler+0x418>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d022      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005960 <HAL_DMA_IRQHandler+0x41c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01d      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005964 <HAL_DMA_IRQHandler+0x420>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d018      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005968 <HAL_DMA_IRQHandler+0x424>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1a      	ldr	r2, [pc, #104]	@ (800596c <HAL_DMA_IRQHandler+0x428>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a18      	ldr	r2, [pc, #96]	@ (8005970 <HAL_DMA_IRQHandler+0x42c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a17      	ldr	r2, [pc, #92]	@ (8005974 <HAL_DMA_IRQHandler+0x430>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a15      	ldr	r2, [pc, #84]	@ (8005978 <HAL_DMA_IRQHandler+0x434>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d12a      	bne.n	800597c <HAL_DMA_IRQHandler+0x438>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	bf14      	ite	ne
 8005934:	2301      	movne	r3, #1
 8005936:	2300      	moveq	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	e023      	b.n	8005984 <HAL_DMA_IRQHandler+0x440>
 800593c:	40020010 	.word	0x40020010
 8005940:	40020028 	.word	0x40020028
 8005944:	40020040 	.word	0x40020040
 8005948:	40020058 	.word	0x40020058
 800594c:	40020070 	.word	0x40020070
 8005950:	40020088 	.word	0x40020088
 8005954:	400200a0 	.word	0x400200a0
 8005958:	400200b8 	.word	0x400200b8
 800595c:	40020410 	.word	0x40020410
 8005960:	40020428 	.word	0x40020428
 8005964:	40020440 	.word	0x40020440
 8005968:	40020458 	.word	0x40020458
 800596c:	40020470 	.word	0x40020470
 8005970:	40020488 	.word	0x40020488
 8005974:	400204a0 	.word	0x400204a0
 8005978:	400204b8 	.word	0x400204b8
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00d      	beq.n	80059a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800598c:	f003 031f 	and.w	r3, r3, #31
 8005990:	2204      	movs	r2, #4
 8005992:	409a      	lsls	r2, r3
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800599c:	f043 0204 	orr.w	r2, r3, #4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a8:	f003 031f 	and.w	r3, r3, #31
 80059ac:	2210      	movs	r2, #16
 80059ae:	409a      	lsls	r2, r3
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80a6 	beq.w	8005b06 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a85      	ldr	r2, [pc, #532]	@ (8005bd4 <HAL_DMA_IRQHandler+0x690>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d04a      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a83      	ldr	r2, [pc, #524]	@ (8005bd8 <HAL_DMA_IRQHandler+0x694>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d045      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a82      	ldr	r2, [pc, #520]	@ (8005bdc <HAL_DMA_IRQHandler+0x698>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d040      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a80      	ldr	r2, [pc, #512]	@ (8005be0 <HAL_DMA_IRQHandler+0x69c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d03b      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a7f      	ldr	r2, [pc, #508]	@ (8005be4 <HAL_DMA_IRQHandler+0x6a0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d036      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a7d      	ldr	r2, [pc, #500]	@ (8005be8 <HAL_DMA_IRQHandler+0x6a4>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d031      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a7c      	ldr	r2, [pc, #496]	@ (8005bec <HAL_DMA_IRQHandler+0x6a8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d02c      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a7a      	ldr	r2, [pc, #488]	@ (8005bf0 <HAL_DMA_IRQHandler+0x6ac>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d027      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a79      	ldr	r2, [pc, #484]	@ (8005bf4 <HAL_DMA_IRQHandler+0x6b0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d022      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a77      	ldr	r2, [pc, #476]	@ (8005bf8 <HAL_DMA_IRQHandler+0x6b4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01d      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a76      	ldr	r2, [pc, #472]	@ (8005bfc <HAL_DMA_IRQHandler+0x6b8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d018      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a74      	ldr	r2, [pc, #464]	@ (8005c00 <HAL_DMA_IRQHandler+0x6bc>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d013      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a73      	ldr	r2, [pc, #460]	@ (8005c04 <HAL_DMA_IRQHandler+0x6c0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00e      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a71      	ldr	r2, [pc, #452]	@ (8005c08 <HAL_DMA_IRQHandler+0x6c4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d009      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a70      	ldr	r2, [pc, #448]	@ (8005c0c <HAL_DMA_IRQHandler+0x6c8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d004      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a6e      	ldr	r2, [pc, #440]	@ (8005c10 <HAL_DMA_IRQHandler+0x6cc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d10a      	bne.n	8005a70 <HAL_DMA_IRQHandler+0x52c>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bf14      	ite	ne
 8005a68:	2301      	movne	r3, #1
 8005a6a:	2300      	moveq	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	e009      	b.n	8005a84 <HAL_DMA_IRQHandler+0x540>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	bf14      	ite	ne
 8005a7e:	2301      	movne	r3, #1
 8005a80:	2300      	moveq	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d03e      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	2210      	movs	r2, #16
 8005a92:	409a      	lsls	r2, r3
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d018      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d108      	bne.n	8005ac6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d024      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	4798      	blx	r3
 8005ac4:	e01f      	b.n	8005b06 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01b      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	4798      	blx	r3
 8005ad6:	e016      	b.n	8005b06 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d107      	bne.n	8005af6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0208 	bic.w	r2, r2, #8
 8005af4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	2220      	movs	r2, #32
 8005b10:	409a      	lsls	r2, r3
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	4013      	ands	r3, r2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 8110 	beq.w	8005d3c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a2c      	ldr	r2, [pc, #176]	@ (8005bd4 <HAL_DMA_IRQHandler+0x690>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d04a      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a2b      	ldr	r2, [pc, #172]	@ (8005bd8 <HAL_DMA_IRQHandler+0x694>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d045      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a29      	ldr	r2, [pc, #164]	@ (8005bdc <HAL_DMA_IRQHandler+0x698>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d040      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a28      	ldr	r2, [pc, #160]	@ (8005be0 <HAL_DMA_IRQHandler+0x69c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d03b      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a26      	ldr	r2, [pc, #152]	@ (8005be4 <HAL_DMA_IRQHandler+0x6a0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d036      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a25      	ldr	r2, [pc, #148]	@ (8005be8 <HAL_DMA_IRQHandler+0x6a4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d031      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a23      	ldr	r2, [pc, #140]	@ (8005bec <HAL_DMA_IRQHandler+0x6a8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d02c      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a22      	ldr	r2, [pc, #136]	@ (8005bf0 <HAL_DMA_IRQHandler+0x6ac>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d027      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a20      	ldr	r2, [pc, #128]	@ (8005bf4 <HAL_DMA_IRQHandler+0x6b0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d022      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8005bf8 <HAL_DMA_IRQHandler+0x6b4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d01d      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a1d      	ldr	r2, [pc, #116]	@ (8005bfc <HAL_DMA_IRQHandler+0x6b8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d018      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8005c00 <HAL_DMA_IRQHandler+0x6bc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d013      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1a      	ldr	r2, [pc, #104]	@ (8005c04 <HAL_DMA_IRQHandler+0x6c0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00e      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a19      	ldr	r2, [pc, #100]	@ (8005c08 <HAL_DMA_IRQHandler+0x6c4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d009      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a17      	ldr	r2, [pc, #92]	@ (8005c0c <HAL_DMA_IRQHandler+0x6c8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d004      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a16      	ldr	r2, [pc, #88]	@ (8005c10 <HAL_DMA_IRQHandler+0x6cc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d12b      	bne.n	8005c14 <HAL_DMA_IRQHandler+0x6d0>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0310 	and.w	r3, r3, #16
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	bf14      	ite	ne
 8005bca:	2301      	movne	r3, #1
 8005bcc:	2300      	moveq	r3, #0
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	e02a      	b.n	8005c28 <HAL_DMA_IRQHandler+0x6e4>
 8005bd2:	bf00      	nop
 8005bd4:	40020010 	.word	0x40020010
 8005bd8:	40020028 	.word	0x40020028
 8005bdc:	40020040 	.word	0x40020040
 8005be0:	40020058 	.word	0x40020058
 8005be4:	40020070 	.word	0x40020070
 8005be8:	40020088 	.word	0x40020088
 8005bec:	400200a0 	.word	0x400200a0
 8005bf0:	400200b8 	.word	0x400200b8
 8005bf4:	40020410 	.word	0x40020410
 8005bf8:	40020428 	.word	0x40020428
 8005bfc:	40020440 	.word	0x40020440
 8005c00:	40020458 	.word	0x40020458
 8005c04:	40020470 	.word	0x40020470
 8005c08:	40020488 	.word	0x40020488
 8005c0c:	400204a0 	.word	0x400204a0
 8005c10:	400204b8 	.word	0x400204b8
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	bf14      	ite	ne
 8005c22:	2301      	movne	r3, #1
 8005c24:	2300      	moveq	r3, #0
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 8087 	beq.w	8005d3c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	2220      	movs	r2, #32
 8005c38:	409a      	lsls	r2, r3
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d139      	bne.n	8005cbe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0216 	bic.w	r2, r2, #22
 8005c58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695a      	ldr	r2, [r3, #20]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <HAL_DMA_IRQHandler+0x736>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0208 	bic.w	r2, r2, #8
 8005c88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	223f      	movs	r2, #63	@ 0x3f
 8005c94:	409a      	lsls	r2, r3
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 834a 	beq.w	8006348 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	4798      	blx	r3
          }
          return;
 8005cbc:	e344      	b.n	8006348 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d018      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d108      	bne.n	8005cec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d02c      	beq.n	8005d3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	4798      	blx	r3
 8005cea:	e027      	b.n	8005d3c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d023      	beq.n	8005d3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	4798      	blx	r3
 8005cfc:	e01e      	b.n	8005d3c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10f      	bne.n	8005d2c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0210 	bic.w	r2, r2, #16
 8005d1a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 8306 	beq.w	8006352 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8088 	beq.w	8005e64 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2204      	movs	r2, #4
 8005d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a7a      	ldr	r2, [pc, #488]	@ (8005f4c <HAL_DMA_IRQHandler+0xa08>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d04a      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a79      	ldr	r2, [pc, #484]	@ (8005f50 <HAL_DMA_IRQHandler+0xa0c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d045      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a77      	ldr	r2, [pc, #476]	@ (8005f54 <HAL_DMA_IRQHandler+0xa10>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d040      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a76      	ldr	r2, [pc, #472]	@ (8005f58 <HAL_DMA_IRQHandler+0xa14>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d03b      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a74      	ldr	r2, [pc, #464]	@ (8005f5c <HAL_DMA_IRQHandler+0xa18>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d036      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a73      	ldr	r2, [pc, #460]	@ (8005f60 <HAL_DMA_IRQHandler+0xa1c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d031      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a71      	ldr	r2, [pc, #452]	@ (8005f64 <HAL_DMA_IRQHandler+0xa20>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d02c      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a70      	ldr	r2, [pc, #448]	@ (8005f68 <HAL_DMA_IRQHandler+0xa24>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d027      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a6e      	ldr	r2, [pc, #440]	@ (8005f6c <HAL_DMA_IRQHandler+0xa28>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d022      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a6d      	ldr	r2, [pc, #436]	@ (8005f70 <HAL_DMA_IRQHandler+0xa2c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d01d      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a6b      	ldr	r2, [pc, #428]	@ (8005f74 <HAL_DMA_IRQHandler+0xa30>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a6a      	ldr	r2, [pc, #424]	@ (8005f78 <HAL_DMA_IRQHandler+0xa34>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a68      	ldr	r2, [pc, #416]	@ (8005f7c <HAL_DMA_IRQHandler+0xa38>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00e      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a67      	ldr	r2, [pc, #412]	@ (8005f80 <HAL_DMA_IRQHandler+0xa3c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a65      	ldr	r2, [pc, #404]	@ (8005f84 <HAL_DMA_IRQHandler+0xa40>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a64      	ldr	r2, [pc, #400]	@ (8005f88 <HAL_DMA_IRQHandler+0xa44>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d108      	bne.n	8005e0e <HAL_DMA_IRQHandler+0x8ca>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0201 	bic.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	e007      	b.n	8005e1e <HAL_DMA_IRQHandler+0x8da>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0201 	bic.w	r2, r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d307      	bcc.n	8005e3a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1f2      	bne.n	8005e1e <HAL_DMA_IRQHandler+0x8da>
 8005e38:	e000      	b.n	8005e3c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005e3a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d004      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2203      	movs	r2, #3
 8005e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005e52:	e003      	b.n	8005e5c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 8272 	beq.w	8006352 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3
 8005e76:	e26c      	b.n	8006352 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a43      	ldr	r2, [pc, #268]	@ (8005f8c <HAL_DMA_IRQHandler+0xa48>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d022      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x984>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a42      	ldr	r2, [pc, #264]	@ (8005f90 <HAL_DMA_IRQHandler+0xa4c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d01d      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x984>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a40      	ldr	r2, [pc, #256]	@ (8005f94 <HAL_DMA_IRQHandler+0xa50>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d018      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x984>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a3f      	ldr	r2, [pc, #252]	@ (8005f98 <HAL_DMA_IRQHandler+0xa54>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d013      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x984>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a3d      	ldr	r2, [pc, #244]	@ (8005f9c <HAL_DMA_IRQHandler+0xa58>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00e      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x984>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a3c      	ldr	r2, [pc, #240]	@ (8005fa0 <HAL_DMA_IRQHandler+0xa5c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d009      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x984>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a3a      	ldr	r2, [pc, #232]	@ (8005fa4 <HAL_DMA_IRQHandler+0xa60>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d004      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x984>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a39      	ldr	r2, [pc, #228]	@ (8005fa8 <HAL_DMA_IRQHandler+0xa64>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d101      	bne.n	8005ecc <HAL_DMA_IRQHandler+0x988>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <HAL_DMA_IRQHandler+0x98a>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 823f 	beq.w	8006352 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	2204      	movs	r2, #4
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80cd 	beq.w	800608c <HAL_DMA_IRQHandler+0xb48>
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80c7 	beq.w	800608c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	2204      	movs	r2, #4
 8005f08:	409a      	lsls	r2, r3
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d049      	beq.n	8005fac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 8210 	beq.w	800634c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f34:	e20a      	b.n	800634c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 8206 	beq.w	800634c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f48:	e200      	b.n	800634c <HAL_DMA_IRQHandler+0xe08>
 8005f4a:	bf00      	nop
 8005f4c:	40020010 	.word	0x40020010
 8005f50:	40020028 	.word	0x40020028
 8005f54:	40020040 	.word	0x40020040
 8005f58:	40020058 	.word	0x40020058
 8005f5c:	40020070 	.word	0x40020070
 8005f60:	40020088 	.word	0x40020088
 8005f64:	400200a0 	.word	0x400200a0
 8005f68:	400200b8 	.word	0x400200b8
 8005f6c:	40020410 	.word	0x40020410
 8005f70:	40020428 	.word	0x40020428
 8005f74:	40020440 	.word	0x40020440
 8005f78:	40020458 	.word	0x40020458
 8005f7c:	40020470 	.word	0x40020470
 8005f80:	40020488 	.word	0x40020488
 8005f84:	400204a0 	.word	0x400204a0
 8005f88:	400204b8 	.word	0x400204b8
 8005f8c:	58025408 	.word	0x58025408
 8005f90:	5802541c 	.word	0x5802541c
 8005f94:	58025430 	.word	0x58025430
 8005f98:	58025444 	.word	0x58025444
 8005f9c:	58025458 	.word	0x58025458
 8005fa0:	5802546c 	.word	0x5802546c
 8005fa4:	58025480 	.word	0x58025480
 8005fa8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d160      	bne.n	8006078 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a7f      	ldr	r2, [pc, #508]	@ (80061b8 <HAL_DMA_IRQHandler+0xc74>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d04a      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a7d      	ldr	r2, [pc, #500]	@ (80061bc <HAL_DMA_IRQHandler+0xc78>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d045      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a7c      	ldr	r2, [pc, #496]	@ (80061c0 <HAL_DMA_IRQHandler+0xc7c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d040      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a7a      	ldr	r2, [pc, #488]	@ (80061c4 <HAL_DMA_IRQHandler+0xc80>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d03b      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a79      	ldr	r2, [pc, #484]	@ (80061c8 <HAL_DMA_IRQHandler+0xc84>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d036      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a77      	ldr	r2, [pc, #476]	@ (80061cc <HAL_DMA_IRQHandler+0xc88>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d031      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a76      	ldr	r2, [pc, #472]	@ (80061d0 <HAL_DMA_IRQHandler+0xc8c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d02c      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a74      	ldr	r2, [pc, #464]	@ (80061d4 <HAL_DMA_IRQHandler+0xc90>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d027      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a73      	ldr	r2, [pc, #460]	@ (80061d8 <HAL_DMA_IRQHandler+0xc94>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d022      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a71      	ldr	r2, [pc, #452]	@ (80061dc <HAL_DMA_IRQHandler+0xc98>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01d      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a70      	ldr	r2, [pc, #448]	@ (80061e0 <HAL_DMA_IRQHandler+0xc9c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d018      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a6e      	ldr	r2, [pc, #440]	@ (80061e4 <HAL_DMA_IRQHandler+0xca0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a6d      	ldr	r2, [pc, #436]	@ (80061e8 <HAL_DMA_IRQHandler+0xca4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00e      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a6b      	ldr	r2, [pc, #428]	@ (80061ec <HAL_DMA_IRQHandler+0xca8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d009      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a6a      	ldr	r2, [pc, #424]	@ (80061f0 <HAL_DMA_IRQHandler+0xcac>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d004      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a68      	ldr	r2, [pc, #416]	@ (80061f4 <HAL_DMA_IRQHandler+0xcb0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d108      	bne.n	8006068 <HAL_DMA_IRQHandler+0xb24>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0208 	bic.w	r2, r2, #8
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	e007      	b.n	8006078 <HAL_DMA_IRQHandler+0xb34>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0204 	bic.w	r2, r2, #4
 8006076:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8165 	beq.w	800634c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800608a:	e15f      	b.n	800634c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	2202      	movs	r2, #2
 8006096:	409a      	lsls	r2, r3
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	4013      	ands	r3, r2
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80c5 	beq.w	800622c <HAL_DMA_IRQHandler+0xce8>
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80bf 	beq.w	800622c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b2:	f003 031f 	and.w	r3, r3, #31
 80060b6:	2202      	movs	r2, #2
 80060b8:	409a      	lsls	r2, r3
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d018      	beq.n	80060fa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 813a 	beq.w	8006350 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060e4:	e134      	b.n	8006350 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 8130 	beq.w	8006350 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060f8:	e12a      	b.n	8006350 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b00      	cmp	r3, #0
 8006102:	f040 8089 	bne.w	8006218 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a2b      	ldr	r2, [pc, #172]	@ (80061b8 <HAL_DMA_IRQHandler+0xc74>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d04a      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a29      	ldr	r2, [pc, #164]	@ (80061bc <HAL_DMA_IRQHandler+0xc78>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d045      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a28      	ldr	r2, [pc, #160]	@ (80061c0 <HAL_DMA_IRQHandler+0xc7c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d040      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a26      	ldr	r2, [pc, #152]	@ (80061c4 <HAL_DMA_IRQHandler+0xc80>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d03b      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a25      	ldr	r2, [pc, #148]	@ (80061c8 <HAL_DMA_IRQHandler+0xc84>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d036      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a23      	ldr	r2, [pc, #140]	@ (80061cc <HAL_DMA_IRQHandler+0xc88>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d031      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a22      	ldr	r2, [pc, #136]	@ (80061d0 <HAL_DMA_IRQHandler+0xc8c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d02c      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a20      	ldr	r2, [pc, #128]	@ (80061d4 <HAL_DMA_IRQHandler+0xc90>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d027      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a1f      	ldr	r2, [pc, #124]	@ (80061d8 <HAL_DMA_IRQHandler+0xc94>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d022      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1d      	ldr	r2, [pc, #116]	@ (80061dc <HAL_DMA_IRQHandler+0xc98>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d01d      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1c      	ldr	r2, [pc, #112]	@ (80061e0 <HAL_DMA_IRQHandler+0xc9c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d018      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1a      	ldr	r2, [pc, #104]	@ (80061e4 <HAL_DMA_IRQHandler+0xca0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a19      	ldr	r2, [pc, #100]	@ (80061e8 <HAL_DMA_IRQHandler+0xca4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00e      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a17      	ldr	r2, [pc, #92]	@ (80061ec <HAL_DMA_IRQHandler+0xca8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d009      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a16      	ldr	r2, [pc, #88]	@ (80061f0 <HAL_DMA_IRQHandler+0xcac>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d004      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a14      	ldr	r2, [pc, #80]	@ (80061f4 <HAL_DMA_IRQHandler+0xcb0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d128      	bne.n	80061f8 <HAL_DMA_IRQHandler+0xcb4>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0214 	bic.w	r2, r2, #20
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	e027      	b.n	8006208 <HAL_DMA_IRQHandler+0xcc4>
 80061b8:	40020010 	.word	0x40020010
 80061bc:	40020028 	.word	0x40020028
 80061c0:	40020040 	.word	0x40020040
 80061c4:	40020058 	.word	0x40020058
 80061c8:	40020070 	.word	0x40020070
 80061cc:	40020088 	.word	0x40020088
 80061d0:	400200a0 	.word	0x400200a0
 80061d4:	400200b8 	.word	0x400200b8
 80061d8:	40020410 	.word	0x40020410
 80061dc:	40020428 	.word	0x40020428
 80061e0:	40020440 	.word	0x40020440
 80061e4:	40020458 	.word	0x40020458
 80061e8:	40020470 	.word	0x40020470
 80061ec:	40020488 	.word	0x40020488
 80061f0:	400204a0 	.word	0x400204a0
 80061f4:	400204b8 	.word	0x400204b8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 020a 	bic.w	r2, r2, #10
 8006206:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 8097 	beq.w	8006350 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800622a:	e091      	b.n	8006350 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006230:	f003 031f 	and.w	r3, r3, #31
 8006234:	2208      	movs	r2, #8
 8006236:	409a      	lsls	r2, r3
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 8088 	beq.w	8006352 <HAL_DMA_IRQHandler+0xe0e>
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 8082 	beq.w	8006352 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a41      	ldr	r2, [pc, #260]	@ (8006358 <HAL_DMA_IRQHandler+0xe14>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d04a      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a3f      	ldr	r2, [pc, #252]	@ (800635c <HAL_DMA_IRQHandler+0xe18>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d045      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a3e      	ldr	r2, [pc, #248]	@ (8006360 <HAL_DMA_IRQHandler+0xe1c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d040      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a3c      	ldr	r2, [pc, #240]	@ (8006364 <HAL_DMA_IRQHandler+0xe20>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d03b      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a3b      	ldr	r2, [pc, #236]	@ (8006368 <HAL_DMA_IRQHandler+0xe24>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d036      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a39      	ldr	r2, [pc, #228]	@ (800636c <HAL_DMA_IRQHandler+0xe28>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d031      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a38      	ldr	r2, [pc, #224]	@ (8006370 <HAL_DMA_IRQHandler+0xe2c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d02c      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a36      	ldr	r2, [pc, #216]	@ (8006374 <HAL_DMA_IRQHandler+0xe30>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d027      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a35      	ldr	r2, [pc, #212]	@ (8006378 <HAL_DMA_IRQHandler+0xe34>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d022      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a33      	ldr	r2, [pc, #204]	@ (800637c <HAL_DMA_IRQHandler+0xe38>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d01d      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a32      	ldr	r2, [pc, #200]	@ (8006380 <HAL_DMA_IRQHandler+0xe3c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d018      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a30      	ldr	r2, [pc, #192]	@ (8006384 <HAL_DMA_IRQHandler+0xe40>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d013      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a2f      	ldr	r2, [pc, #188]	@ (8006388 <HAL_DMA_IRQHandler+0xe44>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00e      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a2d      	ldr	r2, [pc, #180]	@ (800638c <HAL_DMA_IRQHandler+0xe48>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d009      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2c      	ldr	r2, [pc, #176]	@ (8006390 <HAL_DMA_IRQHandler+0xe4c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006394 <HAL_DMA_IRQHandler+0xe50>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d108      	bne.n	8006300 <HAL_DMA_IRQHandler+0xdbc>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 021c 	bic.w	r2, r2, #28
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	e007      	b.n	8006310 <HAL_DMA_IRQHandler+0xdcc>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 020e 	bic.w	r2, r2, #14
 800630e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	2201      	movs	r2, #1
 800631a:	409a      	lsls	r2, r3
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	4798      	blx	r3
 8006346:	e004      	b.n	8006352 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006348:	bf00      	nop
 800634a:	e002      	b.n	8006352 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800634c:	bf00      	nop
 800634e:	e000      	b.n	8006352 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006350:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006352:	3728      	adds	r7, #40	@ 0x28
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40020010 	.word	0x40020010
 800635c:	40020028 	.word	0x40020028
 8006360:	40020040 	.word	0x40020040
 8006364:	40020058 	.word	0x40020058
 8006368:	40020070 	.word	0x40020070
 800636c:	40020088 	.word	0x40020088
 8006370:	400200a0 	.word	0x400200a0
 8006374:	400200b8 	.word	0x400200b8
 8006378:	40020410 	.word	0x40020410
 800637c:	40020428 	.word	0x40020428
 8006380:	40020440 	.word	0x40020440
 8006384:	40020458 	.word	0x40020458
 8006388:	40020470 	.word	0x40020470
 800638c:	40020488 	.word	0x40020488
 8006390:	400204a0 	.word	0x400204a0
 8006394:	400204b8 	.word	0x400204b8

08006398 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a42      	ldr	r2, [pc, #264]	@ (80064b0 <DMA_CalcBaseAndBitshift+0x118>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d04a      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a41      	ldr	r2, [pc, #260]	@ (80064b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d045      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a3f      	ldr	r2, [pc, #252]	@ (80064b8 <DMA_CalcBaseAndBitshift+0x120>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d040      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a3e      	ldr	r2, [pc, #248]	@ (80064bc <DMA_CalcBaseAndBitshift+0x124>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d03b      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a3c      	ldr	r2, [pc, #240]	@ (80064c0 <DMA_CalcBaseAndBitshift+0x128>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d036      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a3b      	ldr	r2, [pc, #236]	@ (80064c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d031      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a39      	ldr	r2, [pc, #228]	@ (80064c8 <DMA_CalcBaseAndBitshift+0x130>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d02c      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a38      	ldr	r2, [pc, #224]	@ (80064cc <DMA_CalcBaseAndBitshift+0x134>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d027      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a36      	ldr	r2, [pc, #216]	@ (80064d0 <DMA_CalcBaseAndBitshift+0x138>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d022      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a35      	ldr	r2, [pc, #212]	@ (80064d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d01d      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a33      	ldr	r2, [pc, #204]	@ (80064d8 <DMA_CalcBaseAndBitshift+0x140>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d018      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a32      	ldr	r2, [pc, #200]	@ (80064dc <DMA_CalcBaseAndBitshift+0x144>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d013      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a30      	ldr	r2, [pc, #192]	@ (80064e0 <DMA_CalcBaseAndBitshift+0x148>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00e      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a2f      	ldr	r2, [pc, #188]	@ (80064e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d009      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a2d      	ldr	r2, [pc, #180]	@ (80064e8 <DMA_CalcBaseAndBitshift+0x150>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <DMA_CalcBaseAndBitshift+0xa8>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a2c      	ldr	r2, [pc, #176]	@ (80064ec <DMA_CalcBaseAndBitshift+0x154>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d101      	bne.n	8006444 <DMA_CalcBaseAndBitshift+0xac>
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <DMA_CalcBaseAndBitshift+0xae>
 8006444:	2300      	movs	r3, #0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d024      	beq.n	8006494 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	b2db      	uxtb	r3, r3
 8006450:	3b10      	subs	r3, #16
 8006452:	4a27      	ldr	r2, [pc, #156]	@ (80064f0 <DMA_CalcBaseAndBitshift+0x158>)
 8006454:	fba2 2303 	umull	r2, r3, r2, r3
 8006458:	091b      	lsrs	r3, r3, #4
 800645a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	4a24      	ldr	r2, [pc, #144]	@ (80064f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006464:	5cd3      	ldrb	r3, [r2, r3]
 8006466:	461a      	mov	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b03      	cmp	r3, #3
 8006470:	d908      	bls.n	8006484 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	4b1f      	ldr	r3, [pc, #124]	@ (80064f8 <DMA_CalcBaseAndBitshift+0x160>)
 800647a:	4013      	ands	r3, r2
 800647c:	1d1a      	adds	r2, r3, #4
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	659a      	str	r2, [r3, #88]	@ 0x58
 8006482:	e00d      	b.n	80064a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	461a      	mov	r2, r3
 800648a:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <DMA_CalcBaseAndBitshift+0x160>)
 800648c:	4013      	ands	r3, r2
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6593      	str	r3, [r2, #88]	@ 0x58
 8006492:	e005      	b.n	80064a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	40020010 	.word	0x40020010
 80064b4:	40020028 	.word	0x40020028
 80064b8:	40020040 	.word	0x40020040
 80064bc:	40020058 	.word	0x40020058
 80064c0:	40020070 	.word	0x40020070
 80064c4:	40020088 	.word	0x40020088
 80064c8:	400200a0 	.word	0x400200a0
 80064cc:	400200b8 	.word	0x400200b8
 80064d0:	40020410 	.word	0x40020410
 80064d4:	40020428 	.word	0x40020428
 80064d8:	40020440 	.word	0x40020440
 80064dc:	40020458 	.word	0x40020458
 80064e0:	40020470 	.word	0x40020470
 80064e4:	40020488 	.word	0x40020488
 80064e8:	400204a0 	.word	0x400204a0
 80064ec:	400204b8 	.word	0x400204b8
 80064f0:	aaaaaaab 	.word	0xaaaaaaab
 80064f4:	08016940 	.word	0x08016940
 80064f8:	fffffc00 	.word	0xfffffc00

080064fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d120      	bne.n	8006552 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006514:	2b03      	cmp	r3, #3
 8006516:	d858      	bhi.n	80065ca <DMA_CheckFifoParam+0xce>
 8006518:	a201      	add	r2, pc, #4	@ (adr r2, 8006520 <DMA_CheckFifoParam+0x24>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	08006531 	.word	0x08006531
 8006524:	08006543 	.word	0x08006543
 8006528:	08006531 	.word	0x08006531
 800652c:	080065cb 	.word	0x080065cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006534:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d048      	beq.n	80065ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006540:	e045      	b.n	80065ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006546:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800654a:	d142      	bne.n	80065d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006550:	e03f      	b.n	80065d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800655a:	d123      	bne.n	80065a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006560:	2b03      	cmp	r3, #3
 8006562:	d838      	bhi.n	80065d6 <DMA_CheckFifoParam+0xda>
 8006564:	a201      	add	r2, pc, #4	@ (adr r2, 800656c <DMA_CheckFifoParam+0x70>)
 8006566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656a:	bf00      	nop
 800656c:	0800657d 	.word	0x0800657d
 8006570:	08006583 	.word	0x08006583
 8006574:	0800657d 	.word	0x0800657d
 8006578:	08006595 	.word	0x08006595
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
        break;
 8006580:	e030      	b.n	80065e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006586:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d025      	beq.n	80065da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006592:	e022      	b.n	80065da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006598:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800659c:	d11f      	bne.n	80065de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065a2:	e01c      	b.n	80065de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d902      	bls.n	80065b2 <DMA_CheckFifoParam+0xb6>
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d003      	beq.n	80065b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80065b0:	e018      	b.n	80065e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	73fb      	strb	r3, [r7, #15]
        break;
 80065b6:	e015      	b.n	80065e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00e      	beq.n	80065e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	73fb      	strb	r3, [r7, #15]
    break;
 80065c8:	e00b      	b.n	80065e2 <DMA_CheckFifoParam+0xe6>
        break;
 80065ca:	bf00      	nop
 80065cc:	e00a      	b.n	80065e4 <DMA_CheckFifoParam+0xe8>
        break;
 80065ce:	bf00      	nop
 80065d0:	e008      	b.n	80065e4 <DMA_CheckFifoParam+0xe8>
        break;
 80065d2:	bf00      	nop
 80065d4:	e006      	b.n	80065e4 <DMA_CheckFifoParam+0xe8>
        break;
 80065d6:	bf00      	nop
 80065d8:	e004      	b.n	80065e4 <DMA_CheckFifoParam+0xe8>
        break;
 80065da:	bf00      	nop
 80065dc:	e002      	b.n	80065e4 <DMA_CheckFifoParam+0xe8>
        break;
 80065de:	bf00      	nop
 80065e0:	e000      	b.n	80065e4 <DMA_CheckFifoParam+0xe8>
    break;
 80065e2:	bf00      	nop
    }
  }

  return status;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop

080065f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a38      	ldr	r2, [pc, #224]	@ (80066e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d022      	beq.n	8006652 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a36      	ldr	r2, [pc, #216]	@ (80066ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d01d      	beq.n	8006652 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a35      	ldr	r2, [pc, #212]	@ (80066f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d018      	beq.n	8006652 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a33      	ldr	r2, [pc, #204]	@ (80066f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a32      	ldr	r2, [pc, #200]	@ (80066f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00e      	beq.n	8006652 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a30      	ldr	r2, [pc, #192]	@ (80066fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d009      	beq.n	8006652 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a2f      	ldr	r2, [pc, #188]	@ (8006700 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d004      	beq.n	8006652 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a2d      	ldr	r2, [pc, #180]	@ (8006704 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d101      	bne.n	8006656 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006656:	2300      	movs	r3, #0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01a      	beq.n	8006692 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	3b08      	subs	r3, #8
 8006664:	4a28      	ldr	r2, [pc, #160]	@ (8006708 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006666:	fba2 2303 	umull	r2, r3, r2, r3
 800666a:	091b      	lsrs	r3, r3, #4
 800666c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4b26      	ldr	r3, [pc, #152]	@ (800670c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	461a      	mov	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a24      	ldr	r2, [pc, #144]	@ (8006710 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006680:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f003 031f 	and.w	r3, r3, #31
 8006688:	2201      	movs	r2, #1
 800668a:	409a      	lsls	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006690:	e024      	b.n	80066dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	3b10      	subs	r3, #16
 800669a:	4a1e      	ldr	r2, [pc, #120]	@ (8006714 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800669c:	fba2 2303 	umull	r2, r3, r2, r3
 80066a0:	091b      	lsrs	r3, r3, #4
 80066a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006718 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d806      	bhi.n	80066ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4a1b      	ldr	r2, [pc, #108]	@ (800671c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d902      	bls.n	80066ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3308      	adds	r3, #8
 80066b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4b18      	ldr	r3, [pc, #96]	@ (8006720 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	461a      	mov	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a16      	ldr	r2, [pc, #88]	@ (8006724 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80066cc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	2201      	movs	r2, #1
 80066d6:	409a      	lsls	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80066dc:	bf00      	nop
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	58025408 	.word	0x58025408
 80066ec:	5802541c 	.word	0x5802541c
 80066f0:	58025430 	.word	0x58025430
 80066f4:	58025444 	.word	0x58025444
 80066f8:	58025458 	.word	0x58025458
 80066fc:	5802546c 	.word	0x5802546c
 8006700:	58025480 	.word	0x58025480
 8006704:	58025494 	.word	0x58025494
 8006708:	cccccccd 	.word	0xcccccccd
 800670c:	16009600 	.word	0x16009600
 8006710:	58025880 	.word	0x58025880
 8006714:	aaaaaaab 	.word	0xaaaaaaab
 8006718:	400204b8 	.word	0x400204b8
 800671c:	4002040f 	.word	0x4002040f
 8006720:	10008200 	.word	0x10008200
 8006724:	40020880 	.word	0x40020880

08006728 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d04a      	beq.n	80067d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d847      	bhi.n	80067d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a25      	ldr	r2, [pc, #148]	@ (80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d022      	beq.n	8006794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a24      	ldr	r2, [pc, #144]	@ (80067e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d01d      	beq.n	8006794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a22      	ldr	r2, [pc, #136]	@ (80067e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d018      	beq.n	8006794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a21      	ldr	r2, [pc, #132]	@ (80067ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d013      	beq.n	8006794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1f      	ldr	r2, [pc, #124]	@ (80067f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d00e      	beq.n	8006794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1e      	ldr	r2, [pc, #120]	@ (80067f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d009      	beq.n	8006794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1c      	ldr	r2, [pc, #112]	@ (80067f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d004      	beq.n	8006794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1b      	ldr	r2, [pc, #108]	@ (80067fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d101      	bne.n	8006798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006794:	2301      	movs	r3, #1
 8006796:	e000      	b.n	800679a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006798:	2300      	movs	r3, #0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4b17      	ldr	r3, [pc, #92]	@ (8006800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	461a      	mov	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a15      	ldr	r2, [pc, #84]	@ (8006804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80067b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80067b2:	e009      	b.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4b14      	ldr	r3, [pc, #80]	@ (8006808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	461a      	mov	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a11      	ldr	r2, [pc, #68]	@ (800680c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80067c6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	2201      	movs	r2, #1
 80067ce:	409a      	lsls	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80067d4:	bf00      	nop
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	58025408 	.word	0x58025408
 80067e4:	5802541c 	.word	0x5802541c
 80067e8:	58025430 	.word	0x58025430
 80067ec:	58025444 	.word	0x58025444
 80067f0:	58025458 	.word	0x58025458
 80067f4:	5802546c 	.word	0x5802546c
 80067f8:	58025480 	.word	0x58025480
 80067fc:	58025494 	.word	0x58025494
 8006800:	1600963f 	.word	0x1600963f
 8006804:	58025940 	.word	0x58025940
 8006808:	1000823f 	.word	0x1000823f
 800680c:	40020940 	.word	0x40020940

08006810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006810:	b480      	push	{r7}
 8006812:	b089      	sub	sp, #36	@ 0x24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800681a:	2300      	movs	r3, #0
 800681c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800681e:	4b86      	ldr	r3, [pc, #536]	@ (8006a38 <HAL_GPIO_Init+0x228>)
 8006820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006822:	e18c      	b.n	8006b3e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	2101      	movs	r1, #1
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	fa01 f303 	lsl.w	r3, r1, r3
 8006830:	4013      	ands	r3, r2
 8006832:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 817e 	beq.w	8006b38 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f003 0303 	and.w	r3, r3, #3
 8006844:	2b01      	cmp	r3, #1
 8006846:	d005      	beq.n	8006854 <HAL_GPIO_Init+0x44>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f003 0303 	and.w	r3, r3, #3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d130      	bne.n	80068b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	2203      	movs	r2, #3
 8006860:	fa02 f303 	lsl.w	r3, r2, r3
 8006864:	43db      	mvns	r3, r3
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	4013      	ands	r3, r2
 800686a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	fa02 f303 	lsl.w	r3, r2, r3
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	4313      	orrs	r3, r2
 800687c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800688a:	2201      	movs	r2, #1
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	fa02 f303 	lsl.w	r3, r2, r3
 8006892:	43db      	mvns	r3, r3
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	4013      	ands	r3, r2
 8006898:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	091b      	lsrs	r3, r3, #4
 80068a0:	f003 0201 	and.w	r2, r3, #1
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	fa02 f303 	lsl.w	r3, r2, r3
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d017      	beq.n	80068f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	2203      	movs	r2, #3
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	43db      	mvns	r3, r3
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	4013      	ands	r3, r2
 80068d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	fa02 f303 	lsl.w	r3, r2, r3
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d123      	bne.n	8006946 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	08da      	lsrs	r2, r3, #3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3208      	adds	r2, #8
 8006906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	f003 0307 	and.w	r3, r3, #7
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	220f      	movs	r2, #15
 8006916:	fa02 f303 	lsl.w	r3, r2, r3
 800691a:	43db      	mvns	r3, r3
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	4013      	ands	r3, r2
 8006920:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	fa02 f303 	lsl.w	r3, r2, r3
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	4313      	orrs	r3, r2
 8006936:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	08da      	lsrs	r2, r3, #3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3208      	adds	r2, #8
 8006940:	69b9      	ldr	r1, [r7, #24]
 8006942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	2203      	movs	r2, #3
 8006952:	fa02 f303 	lsl.w	r3, r2, r3
 8006956:	43db      	mvns	r3, r3
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	4013      	ands	r3, r2
 800695c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f003 0203 	and.w	r2, r3, #3
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	4313      	orrs	r3, r2
 8006972:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 80d8 	beq.w	8006b38 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006988:	4b2c      	ldr	r3, [pc, #176]	@ (8006a3c <HAL_GPIO_Init+0x22c>)
 800698a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800698e:	4a2b      	ldr	r2, [pc, #172]	@ (8006a3c <HAL_GPIO_Init+0x22c>)
 8006990:	f043 0302 	orr.w	r3, r3, #2
 8006994:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006998:	4b28      	ldr	r3, [pc, #160]	@ (8006a3c <HAL_GPIO_Init+0x22c>)
 800699a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069a6:	4a26      	ldr	r2, [pc, #152]	@ (8006a40 <HAL_GPIO_Init+0x230>)
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	089b      	lsrs	r3, r3, #2
 80069ac:	3302      	adds	r3, #2
 80069ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	220f      	movs	r2, #15
 80069be:	fa02 f303 	lsl.w	r3, r2, r3
 80069c2:	43db      	mvns	r3, r3
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	4013      	ands	r3, r2
 80069c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006a44 <HAL_GPIO_Init+0x234>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d04a      	beq.n	8006a68 <HAL_GPIO_Init+0x258>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a48 <HAL_GPIO_Init+0x238>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d02b      	beq.n	8006a32 <HAL_GPIO_Init+0x222>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a1b      	ldr	r2, [pc, #108]	@ (8006a4c <HAL_GPIO_Init+0x23c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d025      	beq.n	8006a2e <HAL_GPIO_Init+0x21e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006a50 <HAL_GPIO_Init+0x240>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d01f      	beq.n	8006a2a <HAL_GPIO_Init+0x21a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a19      	ldr	r2, [pc, #100]	@ (8006a54 <HAL_GPIO_Init+0x244>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d019      	beq.n	8006a26 <HAL_GPIO_Init+0x216>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a18      	ldr	r2, [pc, #96]	@ (8006a58 <HAL_GPIO_Init+0x248>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d013      	beq.n	8006a22 <HAL_GPIO_Init+0x212>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a17      	ldr	r2, [pc, #92]	@ (8006a5c <HAL_GPIO_Init+0x24c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00d      	beq.n	8006a1e <HAL_GPIO_Init+0x20e>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a16      	ldr	r2, [pc, #88]	@ (8006a60 <HAL_GPIO_Init+0x250>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d007      	beq.n	8006a1a <HAL_GPIO_Init+0x20a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a15      	ldr	r2, [pc, #84]	@ (8006a64 <HAL_GPIO_Init+0x254>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d101      	bne.n	8006a16 <HAL_GPIO_Init+0x206>
 8006a12:	2309      	movs	r3, #9
 8006a14:	e029      	b.n	8006a6a <HAL_GPIO_Init+0x25a>
 8006a16:	230a      	movs	r3, #10
 8006a18:	e027      	b.n	8006a6a <HAL_GPIO_Init+0x25a>
 8006a1a:	2307      	movs	r3, #7
 8006a1c:	e025      	b.n	8006a6a <HAL_GPIO_Init+0x25a>
 8006a1e:	2306      	movs	r3, #6
 8006a20:	e023      	b.n	8006a6a <HAL_GPIO_Init+0x25a>
 8006a22:	2305      	movs	r3, #5
 8006a24:	e021      	b.n	8006a6a <HAL_GPIO_Init+0x25a>
 8006a26:	2304      	movs	r3, #4
 8006a28:	e01f      	b.n	8006a6a <HAL_GPIO_Init+0x25a>
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e01d      	b.n	8006a6a <HAL_GPIO_Init+0x25a>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e01b      	b.n	8006a6a <HAL_GPIO_Init+0x25a>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e019      	b.n	8006a6a <HAL_GPIO_Init+0x25a>
 8006a36:	bf00      	nop
 8006a38:	58000080 	.word	0x58000080
 8006a3c:	58024400 	.word	0x58024400
 8006a40:	58000400 	.word	0x58000400
 8006a44:	58020000 	.word	0x58020000
 8006a48:	58020400 	.word	0x58020400
 8006a4c:	58020800 	.word	0x58020800
 8006a50:	58020c00 	.word	0x58020c00
 8006a54:	58021000 	.word	0x58021000
 8006a58:	58021400 	.word	0x58021400
 8006a5c:	58021800 	.word	0x58021800
 8006a60:	58021c00 	.word	0x58021c00
 8006a64:	58022400 	.word	0x58022400
 8006a68:	2300      	movs	r3, #0
 8006a6a:	69fa      	ldr	r2, [r7, #28]
 8006a6c:	f002 0203 	and.w	r2, r2, #3
 8006a70:	0092      	lsls	r2, r2, #2
 8006a72:	4093      	lsls	r3, r2
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a7a:	4938      	ldr	r1, [pc, #224]	@ (8006b5c <HAL_GPIO_Init+0x34c>)
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	089b      	lsrs	r3, r3, #2
 8006a80:	3302      	adds	r3, #2
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	43db      	mvns	r3, r3
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	4013      	ands	r3, r2
 8006a98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006aae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	43db      	mvns	r3, r3
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006adc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	43db      	mvns	r3, r3
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	4013      	ands	r3, r2
 8006af2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	43db      	mvns	r3, r3
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	fa22 f303 	lsr.w	r3, r2, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f47f ae6b 	bne.w	8006824 <HAL_GPIO_Init+0x14>
  }
}
 8006b4e:	bf00      	nop
 8006b50:	bf00      	nop
 8006b52:	3724      	adds	r7, #36	@ 0x24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	58000400 	.word	0x58000400

08006b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	807b      	strh	r3, [r7, #2]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b70:	787b      	ldrb	r3, [r7, #1]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b76:	887a      	ldrh	r2, [r7, #2]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006b7c:	e003      	b.n	8006b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006b7e:	887b      	ldrh	r3, [r7, #2]
 8006b80:	041a      	lsls	r2, r3, #16
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	619a      	str	r2, [r3, #24]
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
	...

08006b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e08b      	b.n	8006cbe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d106      	bne.n	8006bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7fa ff7a 	bl	8001ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2224      	movs	r2, #36	@ 0x24
 8006bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0201 	bic.w	r2, r2, #1
 8006bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006be4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bf4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d107      	bne.n	8006c0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c0a:	609a      	str	r2, [r3, #8]
 8006c0c:	e006      	b.n	8006c1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006c1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d108      	bne.n	8006c36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c32:	605a      	str	r2, [r3, #4]
 8006c34:	e007      	b.n	8006c46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6859      	ldr	r1, [r3, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	4b1d      	ldr	r3, [pc, #116]	@ (8006cc8 <HAL_I2C_Init+0x134>)
 8006c52:	430b      	orrs	r3, r1
 8006c54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691a      	ldr	r2, [r3, #16]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	69d9      	ldr	r1, [r3, #28]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1a      	ldr	r2, [r3, #32]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	02008000 	.word	0x02008000

08006ccc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d138      	bne.n	8006d54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e032      	b.n	8006d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2224      	movs	r2, #36	@ 0x24
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0201 	bic.w	r2, r2, #1
 8006d0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6819      	ldr	r1, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0201 	orr.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	e000      	b.n	8006d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d54:	2302      	movs	r3, #2
  }
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b085      	sub	sp, #20
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b20      	cmp	r3, #32
 8006d76:	d139      	bne.n	8006dec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e033      	b.n	8006dee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2224      	movs	r2, #36	@ 0x24
 8006d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0201 	bic.w	r2, r2, #1
 8006da4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006db4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	e000      	b.n	8006dee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006dec:	2302      	movs	r3, #2
  }
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af02      	add	r7, sp, #8
 8006e00:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e0fe      	b.n	800700a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d106      	bne.n	8006e26 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f00b f9f7 	bl	8012214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2203      	movs	r2, #3
 8006e2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f007 fda1 	bl	800e97a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	7c1a      	ldrb	r2, [r3, #16]
 8006e40:	f88d 2000 	strb.w	r2, [sp]
 8006e44:	3304      	adds	r3, #4
 8006e46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e48:	f007 fc72 	bl	800e730 <USB_CoreInit>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2202      	movs	r2, #2
 8006e56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e0d5      	b.n	800700a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2100      	movs	r1, #0
 8006e64:	4618      	mov	r0, r3
 8006e66:	f007 fd99 	bl	800e99c <USB_SetCurrentMode>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e0c6      	b.n	800700a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73fb      	strb	r3, [r7, #15]
 8006e80:	e04a      	b.n	8006f18 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e82:	7bfa      	ldrb	r2, [r7, #15]
 8006e84:	6879      	ldr	r1, [r7, #4]
 8006e86:	4613      	mov	r3, r2
 8006e88:	00db      	lsls	r3, r3, #3
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	440b      	add	r3, r1
 8006e90:	3315      	adds	r3, #21
 8006e92:	2201      	movs	r2, #1
 8006e94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006e96:	7bfa      	ldrb	r2, [r7, #15]
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	3314      	adds	r3, #20
 8006ea6:	7bfa      	ldrb	r2, [r7, #15]
 8006ea8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006eaa:	7bfa      	ldrb	r2, [r7, #15]
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	b298      	uxth	r0, r3
 8006eb0:	6879      	ldr	r1, [r7, #4]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	00db      	lsls	r3, r3, #3
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	440b      	add	r3, r1
 8006ebc:	332e      	adds	r3, #46	@ 0x2e
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006ec2:	7bfa      	ldrb	r2, [r7, #15]
 8006ec4:	6879      	ldr	r1, [r7, #4]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	00db      	lsls	r3, r3, #3
 8006eca:	4413      	add	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	440b      	add	r3, r1
 8006ed0:	3318      	adds	r3, #24
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006ed6:	7bfa      	ldrb	r2, [r7, #15]
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	4613      	mov	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	331c      	adds	r3, #28
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006eea:	7bfa      	ldrb	r2, [r7, #15]
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	4413      	add	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	3320      	adds	r3, #32
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006efe:	7bfa      	ldrb	r2, [r7, #15]
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	3324      	adds	r3, #36	@ 0x24
 8006f0e:	2200      	movs	r2, #0
 8006f10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	3301      	adds	r3, #1
 8006f16:	73fb      	strb	r3, [r7, #15]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	791b      	ldrb	r3, [r3, #4]
 8006f1c:	7bfa      	ldrb	r2, [r7, #15]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d3af      	bcc.n	8006e82 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]
 8006f26:	e044      	b.n	8006fb2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006f28:	7bfa      	ldrb	r2, [r7, #15]
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006f3e:	7bfa      	ldrb	r2, [r7, #15]
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006f50:	7bfa      	ldrb	r2, [r7, #15]
 8006f52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006f54:	7bfa      	ldrb	r2, [r7, #15]
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006f6a:	7bfa      	ldrb	r2, [r7, #15]
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f80:	7bfa      	ldrb	r2, [r7, #15]
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	4613      	mov	r3, r2
 8006f86:	00db      	lsls	r3, r3, #3
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	440b      	add	r3, r1
 8006f8e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f96:	7bfa      	ldrb	r2, [r7, #15]
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	440b      	add	r3, r1
 8006fa4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	73fb      	strb	r3, [r7, #15]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	791b      	ldrb	r3, [r3, #4]
 8006fb6:	7bfa      	ldrb	r2, [r7, #15]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d3b5      	bcc.n	8006f28 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6818      	ldr	r0, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	7c1a      	ldrb	r2, [r3, #16]
 8006fc4:	f88d 2000 	strb.w	r2, [sp]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fcc:	f007 fd32 	bl	800ea34 <USB_DevInit>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e013      	b.n	800700a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	7b1b      	ldrb	r3, [r3, #12]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d102      	bne.n	8006ffe <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 f96d 	bl	80082d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f008 fd71 	bl	800faea <USB_DevDisconnect>

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_PCD_Start+0x1c>
 800702a:	2302      	movs	r3, #2
 800702c:	e022      	b.n	8007074 <HAL_PCD_Start+0x62>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d009      	beq.n	8007056 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007046:	2b01      	cmp	r3, #1
 8007048:	d105      	bne.n	8007056 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4618      	mov	r0, r3
 800705c:	f007 fc7c 	bl	800e958 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4618      	mov	r0, r3
 8007066:	f008 fd1f 	bl	800faa8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800707c:	b590      	push	{r4, r7, lr}
 800707e:	b08d      	sub	sp, #52	@ 0x34
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f008 fddd 	bl	800fc52 <USB_GetMode>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	f040 84b9 	bne.w	8007a12 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f008 fd41 	bl	800fb2c <USB_ReadInterrupts>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 84af 	beq.w	8007a10 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	0a1b      	lsrs	r3, r3, #8
 80070bc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f008 fd2e 	bl	800fb2c <USB_ReadInterrupts>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d107      	bne.n	80070ea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	695a      	ldr	r2, [r3, #20]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f002 0202 	and.w	r2, r2, #2
 80070e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f008 fd1c 	bl	800fb2c <USB_ReadInterrupts>
 80070f4:	4603      	mov	r3, r0
 80070f6:	f003 0310 	and.w	r3, r3, #16
 80070fa:	2b10      	cmp	r3, #16
 80070fc:	d161      	bne.n	80071c2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	699a      	ldr	r2, [r3, #24]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0210 	bic.w	r2, r2, #16
 800710c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	f003 020f 	and.w	r2, r3, #15
 800711a:	4613      	mov	r3, r2
 800711c:	00db      	lsls	r3, r3, #3
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4413      	add	r3, r2
 800712a:	3304      	adds	r3, #4
 800712c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	0c5b      	lsrs	r3, r3, #17
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	2b02      	cmp	r3, #2
 8007138:	d124      	bne.n	8007184 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007140:	4013      	ands	r3, r2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d035      	beq.n	80071b2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	091b      	lsrs	r3, r3, #4
 800714e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007154:	b29b      	uxth	r3, r3
 8007156:	461a      	mov	r2, r3
 8007158:	6a38      	ldr	r0, [r7, #32]
 800715a:	f008 fb53 	bl	800f804 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	091b      	lsrs	r3, r3, #4
 8007166:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800716a:	441a      	add	r2, r3
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	695a      	ldr	r2, [r3, #20]
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	091b      	lsrs	r3, r3, #4
 8007178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800717c:	441a      	add	r2, r3
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	615a      	str	r2, [r3, #20]
 8007182:	e016      	b.n	80071b2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	0c5b      	lsrs	r3, r3, #17
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	2b06      	cmp	r3, #6
 800718e:	d110      	bne.n	80071b2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007196:	2208      	movs	r2, #8
 8007198:	4619      	mov	r1, r3
 800719a:	6a38      	ldr	r0, [r7, #32]
 800719c:	f008 fb32 	bl	800f804 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	695a      	ldr	r2, [r3, #20]
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	091b      	lsrs	r3, r3, #4
 80071a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071ac:	441a      	add	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699a      	ldr	r2, [r3, #24]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f042 0210 	orr.w	r2, r2, #16
 80071c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f008 fcb0 	bl	800fb2c <USB_ReadInterrupts>
 80071cc:	4603      	mov	r3, r0
 80071ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80071d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80071d6:	f040 80a7 	bne.w	8007328 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f008 fcb5 	bl	800fb52 <USB_ReadDevAllOutEpInterrupt>
 80071e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80071ea:	e099      	b.n	8007320 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80071ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 808e 	beq.w	8007314 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	4611      	mov	r1, r2
 8007202:	4618      	mov	r0, r3
 8007204:	f008 fcd9 	bl	800fbba <USB_ReadDevOutEPInterrupt>
 8007208:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00c      	beq.n	800722e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007220:	461a      	mov	r2, r3
 8007222:	2301      	movs	r3, #1
 8007224:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007226:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fecf 	bl	8007fcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00c      	beq.n	8007252 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007244:	461a      	mov	r2, r3
 8007246:	2308      	movs	r3, #8
 8007248:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800724a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 ffa5 	bl	800819c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b00      	cmp	r3, #0
 800725a:	d008      	beq.n	800726e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007268:	461a      	mov	r2, r3
 800726a:	2310      	movs	r3, #16
 800726c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d030      	beq.n	80072da <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007280:	2b80      	cmp	r3, #128	@ 0x80
 8007282:	d109      	bne.n	8007298 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007296:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800729a:	4613      	mov	r3, r2
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	4413      	add	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	4413      	add	r3, r2
 80072aa:	3304      	adds	r3, #4
 80072ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	78db      	ldrb	r3, [r3, #3]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d108      	bne.n	80072c8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2200      	movs	r2, #0
 80072ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f00b f89e 	bl	8012404 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80072c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d4:	461a      	mov	r2, r3
 80072d6:	2302      	movs	r3, #2
 80072d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f003 0320 	and.w	r3, r3, #32
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d008      	beq.n	80072f6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f0:	461a      	mov	r2, r3
 80072f2:	2320      	movs	r3, #32
 80072f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d009      	beq.n	8007314 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800730c:	461a      	mov	r2, r3
 800730e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007312:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007316:	3301      	adds	r3, #1
 8007318:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800731a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731c:	085b      	lsrs	r3, r3, #1
 800731e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007322:	2b00      	cmp	r3, #0
 8007324:	f47f af62 	bne.w	80071ec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f008 fbfd 	bl	800fb2c <USB_ReadInterrupts>
 8007332:	4603      	mov	r3, r0
 8007334:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007338:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800733c:	f040 80db 	bne.w	80074f6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4618      	mov	r0, r3
 8007346:	f008 fc1e 	bl	800fb86 <USB_ReadDevAllInEpInterrupt>
 800734a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007350:	e0cd      	b.n	80074ee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 80c2 	beq.w	80074e2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	4611      	mov	r1, r2
 8007368:	4618      	mov	r0, r3
 800736a:	f008 fc44 	bl	800fbf6 <USB_ReadDevInEPInterrupt>
 800736e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d057      	beq.n	800742a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	2201      	movs	r2, #1
 8007382:	fa02 f303 	lsl.w	r3, r2, r3
 8007386:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800738e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	43db      	mvns	r3, r3
 8007394:	69f9      	ldr	r1, [r7, #28]
 8007396:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800739a:	4013      	ands	r3, r2
 800739c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073aa:	461a      	mov	r2, r3
 80073ac:	2301      	movs	r3, #1
 80073ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	799b      	ldrb	r3, [r3, #6]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d132      	bne.n	800741e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80073b8:	6879      	ldr	r1, [r7, #4]
 80073ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073bc:	4613      	mov	r3, r2
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	440b      	add	r3, r1
 80073c6:	3320      	adds	r3, #32
 80073c8:	6819      	ldr	r1, [r3, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073ce:	4613      	mov	r3, r2
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	4413      	add	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4403      	add	r3, r0
 80073d8:	331c      	adds	r3, #28
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4419      	add	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e2:	4613      	mov	r3, r2
 80073e4:	00db      	lsls	r3, r3, #3
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4403      	add	r3, r0
 80073ec:	3320      	adds	r3, #32
 80073ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d113      	bne.n	800741e <HAL_PCD_IRQHandler+0x3a2>
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073fa:	4613      	mov	r3, r2
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	440b      	add	r3, r1
 8007404:	3324      	adds	r3, #36	@ 0x24
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d108      	bne.n	800741e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007416:	461a      	mov	r2, r3
 8007418:	2101      	movs	r1, #1
 800741a:	f008 fc4d 	bl	800fcb8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007420:	b2db      	uxtb	r3, r3
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f00a ff68 	bl	80122fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f003 0308 	and.w	r3, r3, #8
 8007430:	2b00      	cmp	r3, #0
 8007432:	d008      	beq.n	8007446 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007440:	461a      	mov	r2, r3
 8007442:	2308      	movs	r3, #8
 8007444:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800745c:	461a      	mov	r2, r3
 800745e:	2310      	movs	r3, #16
 8007460:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007478:	461a      	mov	r2, r3
 800747a:	2340      	movs	r3, #64	@ 0x40
 800747c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d023      	beq.n	80074d0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007488:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800748a:	6a38      	ldr	r0, [r7, #32]
 800748c:	f007 fc30 	bl	800ecf0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007492:	4613      	mov	r3, r2
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	3310      	adds	r3, #16
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	4413      	add	r3, r2
 80074a0:	3304      	adds	r3, #4
 80074a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	78db      	ldrb	r3, [r3, #3]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d108      	bne.n	80074be <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2200      	movs	r2, #0
 80074b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80074b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f00a ffb5 	bl	8012428 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ca:	461a      	mov	r2, r3
 80074cc:	2302      	movs	r3, #2
 80074ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80074da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fce8 	bl	8007eb2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80074e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e4:	3301      	adds	r3, #1
 80074e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80074e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80074ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f47f af2e 	bne.w	8007352 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f008 fb16 	bl	800fb2c <USB_ReadInterrupts>
 8007500:	4603      	mov	r3, r0
 8007502:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007506:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800750a:	d122      	bne.n	8007552 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800751a:	f023 0301 	bic.w	r3, r3, #1
 800751e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007526:	2b01      	cmp	r3, #1
 8007528:	d108      	bne.n	800753c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007532:	2100      	movs	r1, #0
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fef3 	bl	8008320 <HAL_PCDEx_LPM_Callback>
 800753a:	e002      	b.n	8007542 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f00a ff53 	bl	80123e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	695a      	ldr	r2, [r3, #20]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007550:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4618      	mov	r0, r3
 8007558:	f008 fae8 	bl	800fb2c <USB_ReadInterrupts>
 800755c:	4603      	mov	r3, r0
 800755e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007566:	d112      	bne.n	800758e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b01      	cmp	r3, #1
 8007576:	d102      	bne.n	800757e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f00a ff0f 	bl	801239c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695a      	ldr	r2, [r3, #20]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800758c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4618      	mov	r0, r3
 8007594:	f008 faca 	bl	800fb2c <USB_ReadInterrupts>
 8007598:	4603      	mov	r3, r0
 800759a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800759e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075a2:	d121      	bne.n	80075e8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695a      	ldr	r2, [r3, #20]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80075b2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d111      	bne.n	80075e2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075cc:	089b      	lsrs	r3, r3, #2
 80075ce:	f003 020f 	and.w	r2, r3, #15
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80075d8:	2101      	movs	r1, #1
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fea0 	bl	8008320 <HAL_PCDEx_LPM_Callback>
 80075e0:	e002      	b.n	80075e8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f00a feda 	bl	801239c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f008 fa9d 	bl	800fb2c <USB_ReadInterrupts>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075fc:	f040 80b7 	bne.w	800776e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	69fa      	ldr	r2, [r7, #28]
 800760a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800760e:	f023 0301 	bic.w	r3, r3, #1
 8007612:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2110      	movs	r1, #16
 800761a:	4618      	mov	r0, r3
 800761c:	f007 fb68 	bl	800ecf0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007620:	2300      	movs	r3, #0
 8007622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007624:	e046      	b.n	80076b4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007632:	461a      	mov	r2, r3
 8007634:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007638:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800763a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800764a:	0151      	lsls	r1, r2, #5
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	440a      	add	r2, r1
 8007650:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007654:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007658:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800765a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007666:	461a      	mov	r2, r3
 8007668:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800766c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800766e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800767e:	0151      	lsls	r1, r2, #5
 8007680:	69fa      	ldr	r2, [r7, #28]
 8007682:	440a      	add	r2, r1
 8007684:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007688:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800768c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800768e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800769e:	0151      	lsls	r1, r2, #5
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	440a      	add	r2, r1
 80076a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80076ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b0:	3301      	adds	r3, #1
 80076b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	791b      	ldrb	r3, [r3, #4]
 80076b8:	461a      	mov	r2, r3
 80076ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076bc:	4293      	cmp	r3, r2
 80076be:	d3b2      	bcc.n	8007626 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	69fa      	ldr	r2, [r7, #28]
 80076ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076ce:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80076d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	7bdb      	ldrb	r3, [r3, #15]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d016      	beq.n	800770a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076ec:	f043 030b 	orr.w	r3, r3, #11
 80076f0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076fc:	69fa      	ldr	r2, [r7, #28]
 80076fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007702:	f043 030b 	orr.w	r3, r3, #11
 8007706:	6453      	str	r3, [r2, #68]	@ 0x44
 8007708:	e015      	b.n	8007736 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007710:	695a      	ldr	r2, [r3, #20]
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007718:	4619      	mov	r1, r3
 800771a:	f242 032b 	movw	r3, #8235	@ 0x202b
 800771e:	4313      	orrs	r3, r2
 8007720:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007730:	f043 030b 	orr.w	r3, r3, #11
 8007734:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007744:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007748:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6818      	ldr	r0, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007758:	461a      	mov	r2, r3
 800775a:	f008 faad 	bl	800fcb8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695a      	ldr	r2, [r3, #20]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800776c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4618      	mov	r0, r3
 8007774:	f008 f9da 	bl	800fb2c <USB_ReadInterrupts>
 8007778:	4603      	mov	r3, r0
 800777a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800777e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007782:	d123      	bne.n	80077cc <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f008 fa71 	bl	800fc70 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f007 fb25 	bl	800ede2 <USB_GetDevSpeed>
 8007798:	4603      	mov	r3, r0
 800779a:	461a      	mov	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681c      	ldr	r4, [r3, #0]
 80077a4:	f001 fd1c 	bl	80091e0 <HAL_RCC_GetHCLKFreq>
 80077a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80077ae:	461a      	mov	r2, r3
 80077b0:	4620      	mov	r0, r4
 80077b2:	f007 f82f 	bl	800e814 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f00a fdc7 	bl	801234a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	695a      	ldr	r2, [r3, #20]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80077ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f008 f9ab 	bl	800fb2c <USB_ReadInterrupts>
 80077d6:	4603      	mov	r3, r0
 80077d8:	f003 0308 	and.w	r3, r3, #8
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d10a      	bne.n	80077f6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f00a fda4 	bl	801232e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	695a      	ldr	r2, [r3, #20]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f002 0208 	and.w	r2, r2, #8
 80077f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f008 f996 	bl	800fb2c <USB_ReadInterrupts>
 8007800:	4603      	mov	r3, r0
 8007802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007806:	2b80      	cmp	r3, #128	@ 0x80
 8007808:	d123      	bne.n	8007852 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007816:	2301      	movs	r3, #1
 8007818:	627b      	str	r3, [r7, #36]	@ 0x24
 800781a:	e014      	b.n	8007846 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800781c:	6879      	ldr	r1, [r7, #4]
 800781e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007820:	4613      	mov	r3, r2
 8007822:	00db      	lsls	r3, r3, #3
 8007824:	4413      	add	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	440b      	add	r3, r1
 800782a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d105      	bne.n	8007840 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007836:	b2db      	uxtb	r3, r3
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fb08 	bl	8007e50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	3301      	adds	r3, #1
 8007844:	627b      	str	r3, [r7, #36]	@ 0x24
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	791b      	ldrb	r3, [r3, #4]
 800784a:	461a      	mov	r2, r3
 800784c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784e:	4293      	cmp	r3, r2
 8007850:	d3e4      	bcc.n	800781c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4618      	mov	r0, r3
 8007858:	f008 f968 	bl	800fb2c <USB_ReadInterrupts>
 800785c:	4603      	mov	r3, r0
 800785e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007866:	d13c      	bne.n	80078e2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007868:	2301      	movs	r3, #1
 800786a:	627b      	str	r3, [r7, #36]	@ 0x24
 800786c:	e02b      	b.n	80078c6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800786e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	4413      	add	r3, r2
 8007876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800787e:	6879      	ldr	r1, [r7, #4]
 8007880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007882:	4613      	mov	r3, r2
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	4413      	add	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	440b      	add	r3, r1
 800788c:	3318      	adds	r3, #24
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d115      	bne.n	80078c0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007894:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007896:	2b00      	cmp	r3, #0
 8007898:	da12      	bge.n	80078c0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800789a:	6879      	ldr	r1, [r7, #4]
 800789c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800789e:	4613      	mov	r3, r2
 80078a0:	00db      	lsls	r3, r3, #3
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	440b      	add	r3, r1
 80078a8:	3317      	adds	r3, #23
 80078aa:	2201      	movs	r2, #1
 80078ac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80078ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fac8 	bl	8007e50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c2:	3301      	adds	r3, #1
 80078c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	791b      	ldrb	r3, [r3, #4]
 80078ca:	461a      	mov	r2, r3
 80078cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d3cd      	bcc.n	800786e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695a      	ldr	r2, [r3, #20]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80078e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f008 f920 	bl	800fb2c <USB_ReadInterrupts>
 80078ec:	4603      	mov	r3, r0
 80078ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80078f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078f6:	d156      	bne.n	80079a6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078f8:	2301      	movs	r3, #1
 80078fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80078fc:	e045      	b.n	800798a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800790e:	6879      	ldr	r1, [r7, #4]
 8007910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007912:	4613      	mov	r3, r2
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	440b      	add	r3, r1
 800791c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d12e      	bne.n	8007984 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007926:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007928:	2b00      	cmp	r3, #0
 800792a:	da2b      	bge.n	8007984 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007938:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800793c:	429a      	cmp	r2, r3
 800793e:	d121      	bne.n	8007984 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007944:	4613      	mov	r3, r2
 8007946:	00db      	lsls	r3, r3, #3
 8007948:	4413      	add	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	440b      	add	r3, r1
 800794e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007952:	2201      	movs	r2, #1
 8007954:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800797c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007980:	6053      	str	r3, [r2, #4]
            break;
 8007982:	e008      	b.n	8007996 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007986:	3301      	adds	r3, #1
 8007988:	627b      	str	r3, [r7, #36]	@ 0x24
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	791b      	ldrb	r3, [r3, #4]
 800798e:	461a      	mov	r2, r3
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007992:	4293      	cmp	r3, r2
 8007994:	d3b3      	bcc.n	80078fe <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	695a      	ldr	r2, [r3, #20]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80079a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f008 f8be 	bl	800fb2c <USB_ReadInterrupts>
 80079b0:	4603      	mov	r3, r0
 80079b2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80079b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ba:	d10a      	bne.n	80079d2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f00a fd45 	bl	801244c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695a      	ldr	r2, [r3, #20]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80079d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f008 f8a8 	bl	800fb2c <USB_ReadInterrupts>
 80079dc:	4603      	mov	r3, r0
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d115      	bne.n	8007a12 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f00a fd35 	bl	8012468 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6859      	ldr	r1, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
 8007a0e:	e000      	b.n	8007a12 <HAL_PCD_IRQHandler+0x996>
      return;
 8007a10:	bf00      	nop
    }
  }
}
 8007a12:	3734      	adds	r7, #52	@ 0x34
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd90      	pop	{r4, r7, pc}

08007a18 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d101      	bne.n	8007a32 <HAL_PCD_SetAddress+0x1a>
 8007a2e:	2302      	movs	r3, #2
 8007a30:	e012      	b.n	8007a58 <HAL_PCD_SetAddress+0x40>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	78fa      	ldrb	r2, [r7, #3]
 8007a3e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	78fa      	ldrb	r2, [r7, #3]
 8007a46:	4611      	mov	r1, r2
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f008 f807 	bl	800fa5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	4608      	mov	r0, r1
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	4603      	mov	r3, r0
 8007a70:	70fb      	strb	r3, [r7, #3]
 8007a72:	460b      	mov	r3, r1
 8007a74:	803b      	strh	r3, [r7, #0]
 8007a76:	4613      	mov	r3, r2
 8007a78:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	da0f      	bge.n	8007aa6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	f003 020f 	and.w	r2, r3, #15
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	3310      	adds	r3, #16
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	4413      	add	r3, r2
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	705a      	strb	r2, [r3, #1]
 8007aa4:	e00f      	b.n	8007ac6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007aa6:	78fb      	ldrb	r3, [r7, #3]
 8007aa8:	f003 020f 	and.w	r2, r3, #15
 8007aac:	4613      	mov	r3, r2
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	4413      	add	r3, r2
 8007abc:	3304      	adds	r3, #4
 8007abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	f003 030f 	and.w	r3, r3, #15
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007ad2:	883a      	ldrh	r2, [r7, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	78ba      	ldrb	r2, [r7, #2]
 8007adc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	785b      	ldrb	r3, [r3, #1]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d004      	beq.n	8007af0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007af0:	78bb      	ldrb	r3, [r7, #2]
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d102      	bne.n	8007afc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d101      	bne.n	8007b0a <HAL_PCD_EP_Open+0xaa>
 8007b06:	2302      	movs	r3, #2
 8007b08:	e00e      	b.n	8007b28 <HAL_PCD_EP_Open+0xc8>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68f9      	ldr	r1, [r7, #12]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f007 f987 	bl	800ee2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007b26:	7afb      	ldrb	r3, [r7, #11]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	da0f      	bge.n	8007b64 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	f003 020f 	and.w	r2, r3, #15
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	3310      	adds	r3, #16
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	4413      	add	r3, r2
 8007b58:	3304      	adds	r3, #4
 8007b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	705a      	strb	r2, [r3, #1]
 8007b62:	e00f      	b.n	8007b84 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	f003 020f 	and.w	r2, r3, #15
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	00db      	lsls	r3, r3, #3
 8007b6e:	4413      	add	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	4413      	add	r3, r2
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	f003 030f 	and.w	r3, r3, #15
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d101      	bne.n	8007b9e <HAL_PCD_EP_Close+0x6e>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e00e      	b.n	8007bbc <HAL_PCD_EP_Close+0x8c>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68f9      	ldr	r1, [r7, #12]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f007 f9c5 	bl	800ef3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	607a      	str	r2, [r7, #4]
 8007bce:	603b      	str	r3, [r7, #0]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	f003 020f 	and.w	r2, r3, #15
 8007bda:	4613      	mov	r3, r2
 8007bdc:	00db      	lsls	r3, r3, #3
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4413      	add	r3, r2
 8007bea:	3304      	adds	r3, #4
 8007bec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2200      	movs	r2, #0
 8007c04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c06:	7afb      	ldrb	r3, [r7, #11]
 8007c08:	f003 030f 	and.w	r3, r3, #15
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	799b      	ldrb	r3, [r3, #6]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d102      	bne.n	8007c20 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	799b      	ldrb	r3, [r3, #6]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	6979      	ldr	r1, [r7, #20]
 8007c2c:	f007 fa62 	bl	800f0f4 <USB_EPStartXfer>

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	460b      	mov	r3, r1
 8007c44:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	f003 020f 	and.w	r2, r3, #15
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007c5c:	681b      	ldr	r3, [r3, #0]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b086      	sub	sp, #24
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	603b      	str	r3, [r7, #0]
 8007c76:	460b      	mov	r3, r1
 8007c78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c7a:	7afb      	ldrb	r3, [r7, #11]
 8007c7c:	f003 020f 	and.w	r2, r3, #15
 8007c80:	4613      	mov	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	3310      	adds	r3, #16
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	3304      	adds	r3, #4
 8007c90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007caa:	7afb      	ldrb	r3, [r7, #11]
 8007cac:	f003 030f 	and.w	r3, r3, #15
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	799b      	ldrb	r3, [r3, #6]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d102      	bne.n	8007cc4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6818      	ldr	r0, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	799b      	ldrb	r3, [r3, #6]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6979      	ldr	r1, [r7, #20]
 8007cd0:	f007 fa10 	bl	800f0f4 <USB_EPStartXfer>

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007cea:	78fb      	ldrb	r3, [r7, #3]
 8007cec:	f003 030f 	and.w	r3, r3, #15
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	7912      	ldrb	r2, [r2, #4]
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d901      	bls.n	8007cfc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e04f      	b.n	8007d9c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	da0f      	bge.n	8007d24 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	f003 020f 	and.w	r2, r3, #15
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	3310      	adds	r3, #16
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	4413      	add	r3, r2
 8007d18:	3304      	adds	r3, #4
 8007d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	705a      	strb	r2, [r3, #1]
 8007d22:	e00d      	b.n	8007d40 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007d24:	78fa      	ldrb	r2, [r7, #3]
 8007d26:	4613      	mov	r3, r2
 8007d28:	00db      	lsls	r3, r3, #3
 8007d2a:	4413      	add	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	4413      	add	r3, r2
 8007d36:	3304      	adds	r3, #4
 8007d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d101      	bne.n	8007d60 <HAL_PCD_EP_SetStall+0x82>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e01d      	b.n	8007d9c <HAL_PCD_EP_SetStall+0xbe>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68f9      	ldr	r1, [r7, #12]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f007 fda0 	bl	800f8b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	f003 030f 	and.w	r3, r3, #15
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d109      	bne.n	8007d92 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6818      	ldr	r0, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	7999      	ldrb	r1, [r3, #6]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	f007 ff93 	bl	800fcb8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	7912      	ldrb	r2, [r2, #4]
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d901      	bls.n	8007dc2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e042      	b.n	8007e48 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	da0f      	bge.n	8007dea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	f003 020f 	and.w	r2, r3, #15
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	3310      	adds	r3, #16
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	4413      	add	r3, r2
 8007dde:	3304      	adds	r3, #4
 8007de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	705a      	strb	r2, [r3, #1]
 8007de8:	e00f      	b.n	8007e0a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dea:	78fb      	ldrb	r3, [r7, #3]
 8007dec:	f003 020f 	and.w	r2, r3, #15
 8007df0:	4613      	mov	r3, r2
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	4413      	add	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	4413      	add	r3, r2
 8007e00:	3304      	adds	r3, #4
 8007e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	f003 030f 	and.w	r3, r3, #15
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d101      	bne.n	8007e2a <HAL_PCD_EP_ClrStall+0x86>
 8007e26:	2302      	movs	r3, #2
 8007e28:	e00e      	b.n	8007e48 <HAL_PCD_EP_ClrStall+0xa4>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68f9      	ldr	r1, [r7, #12]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f007 fda9 	bl	800f990 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007e5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	da0c      	bge.n	8007e7e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e64:	78fb      	ldrb	r3, [r7, #3]
 8007e66:	f003 020f 	and.w	r2, r3, #15
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	00db      	lsls	r3, r3, #3
 8007e6e:	4413      	add	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	3310      	adds	r3, #16
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	4413      	add	r3, r2
 8007e78:	3304      	adds	r3, #4
 8007e7a:	60fb      	str	r3, [r7, #12]
 8007e7c:	e00c      	b.n	8007e98 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e7e:	78fb      	ldrb	r3, [r7, #3]
 8007e80:	f003 020f 	and.w	r2, r3, #15
 8007e84:	4613      	mov	r3, r2
 8007e86:	00db      	lsls	r3, r3, #3
 8007e88:	4413      	add	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	4413      	add	r3, r2
 8007e94:	3304      	adds	r3, #4
 8007e96:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68f9      	ldr	r1, [r7, #12]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f007 fbc8 	bl	800f634 <USB_EPStopXfer>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007ea8:	7afb      	ldrb	r3, [r7, #11]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b08a      	sub	sp, #40	@ 0x28
 8007eb6:	af02      	add	r7, sp, #8
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	4413      	add	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	3310      	adds	r3, #16
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	695a      	ldr	r2, [r3, #20]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d901      	bls.n	8007eea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e06b      	b.n	8007fc2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	691a      	ldr	r2, [r3, #16]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	69fa      	ldr	r2, [r7, #28]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d902      	bls.n	8007f06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	3303      	adds	r3, #3
 8007f0a:	089b      	lsrs	r3, r3, #2
 8007f0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f0e:	e02a      	b.n	8007f66 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	691a      	ldr	r2, [r3, #16]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	69fa      	ldr	r2, [r7, #28]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d902      	bls.n	8007f2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	3303      	adds	r3, #3
 8007f30:	089b      	lsrs	r3, r3, #2
 8007f32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	68d9      	ldr	r1, [r3, #12]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	4603      	mov	r3, r0
 8007f48:	6978      	ldr	r0, [r7, #20]
 8007f4a:	f007 fc1d 	bl	800f788 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	441a      	add	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	695a      	ldr	r2, [r3, #20]
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	441a      	add	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d809      	bhi.n	8007f90 <PCD_WriteEmptyTxFifo+0xde>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	695a      	ldr	r2, [r3, #20]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d203      	bcs.n	8007f90 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1bf      	bne.n	8007f10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d811      	bhi.n	8007fc0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	f003 030f 	and.w	r3, r3, #15
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	43db      	mvns	r3, r3
 8007fb6:	6939      	ldr	r1, [r7, #16]
 8007fb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3720      	adds	r7, #32
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b088      	sub	sp, #32
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	333c      	adds	r3, #60	@ 0x3c
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	799b      	ldrb	r3, [r3, #6]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d17b      	bne.n	80080fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f003 0308 	and.w	r3, r3, #8
 8008008:	2b00      	cmp	r3, #0
 800800a:	d015      	beq.n	8008038 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	4a61      	ldr	r2, [pc, #388]	@ (8008194 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	f240 80b9 	bls.w	8008188 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 80b3 	beq.w	8008188 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800802e:	461a      	mov	r2, r3
 8008030:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008034:	6093      	str	r3, [r2, #8]
 8008036:	e0a7      	b.n	8008188 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	f003 0320 	and.w	r3, r3, #32
 800803e:	2b00      	cmp	r3, #0
 8008040:	d009      	beq.n	8008056 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	4413      	add	r3, r2
 800804a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800804e:	461a      	mov	r2, r3
 8008050:	2320      	movs	r3, #32
 8008052:	6093      	str	r3, [r2, #8]
 8008054:	e098      	b.n	8008188 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800805c:	2b00      	cmp	r3, #0
 800805e:	f040 8093 	bne.w	8008188 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	4a4b      	ldr	r2, [pc, #300]	@ (8008194 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d90f      	bls.n	800808a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00a      	beq.n	800808a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	4413      	add	r3, r2
 800807c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008080:	461a      	mov	r2, r3
 8008082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008086:	6093      	str	r3, [r2, #8]
 8008088:	e07e      	b.n	8008188 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	4613      	mov	r3, r2
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	4413      	add	r3, r2
 800809c:	3304      	adds	r3, #4
 800809e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6a1a      	ldr	r2, [r3, #32]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	0159      	lsls	r1, r3, #5
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	440b      	add	r3, r1
 80080ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080b6:	1ad2      	subs	r2, r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d114      	bne.n	80080ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d109      	bne.n	80080de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80080d4:	461a      	mov	r2, r3
 80080d6:	2101      	movs	r1, #1
 80080d8:	f007 fdee 	bl	800fcb8 <USB_EP0_OutStart>
 80080dc:	e006      	b.n	80080ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	68da      	ldr	r2, [r3, #12]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	441a      	add	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f00a f8e6 	bl	80122c4 <HAL_PCD_DataOutStageCallback>
 80080f8:	e046      	b.n	8008188 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	4a26      	ldr	r2, [pc, #152]	@ (8008198 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d124      	bne.n	800814c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008118:	461a      	mov	r2, r3
 800811a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800811e:	6093      	str	r3, [r2, #8]
 8008120:	e032      	b.n	8008188 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f003 0320 	and.w	r3, r3, #32
 8008128:	2b00      	cmp	r3, #0
 800812a:	d008      	beq.n	800813e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008138:	461a      	mov	r2, r3
 800813a:	2320      	movs	r3, #32
 800813c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	b2db      	uxtb	r3, r3
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f00a f8bd 	bl	80122c4 <HAL_PCD_DataOutStageCallback>
 800814a:	e01d      	b.n	8008188 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d114      	bne.n	800817c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	4613      	mov	r3, r2
 8008158:	00db      	lsls	r3, r3, #3
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d108      	bne.n	800817c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6818      	ldr	r0, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008174:	461a      	mov	r2, r3
 8008176:	2100      	movs	r1, #0
 8008178:	f007 fd9e 	bl	800fcb8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	b2db      	uxtb	r3, r3
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f00a f89e 	bl	80122c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3720      	adds	r7, #32
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	4f54300a 	.word	0x4f54300a
 8008198:	4f54310a 	.word	0x4f54310a

0800819c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	333c      	adds	r3, #60	@ 0x3c
 80081b4:	3304      	adds	r3, #4
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4a15      	ldr	r2, [pc, #84]	@ (8008224 <PCD_EP_OutSetupPacket_int+0x88>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d90e      	bls.n	80081f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d009      	beq.n	80081f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081e8:	461a      	mov	r2, r3
 80081ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f00a f855 	bl	80122a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4a0a      	ldr	r2, [pc, #40]	@ (8008224 <PCD_EP_OutSetupPacket_int+0x88>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d90c      	bls.n	8008218 <PCD_EP_OutSetupPacket_int+0x7c>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	799b      	ldrb	r3, [r3, #6]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d108      	bne.n	8008218 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008210:	461a      	mov	r2, r3
 8008212:	2101      	movs	r1, #1
 8008214:	f007 fd50 	bl	800fcb8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	4f54300a 	.word	0x4f54300a

08008228 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
 8008234:	4613      	mov	r3, r2
 8008236:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800823e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d107      	bne.n	8008256 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008246:	883b      	ldrh	r3, [r7, #0]
 8008248:	0419      	lsls	r1, r3, #16
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	430a      	orrs	r2, r1
 8008252:	629a      	str	r2, [r3, #40]	@ 0x28
 8008254:	e028      	b.n	80082a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800825c:	0c1b      	lsrs	r3, r3, #16
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	4413      	add	r3, r2
 8008262:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008264:	2300      	movs	r3, #0
 8008266:	73fb      	strb	r3, [r7, #15]
 8008268:	e00d      	b.n	8008286 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	3340      	adds	r3, #64	@ 0x40
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	0c1b      	lsrs	r3, r3, #16
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	4413      	add	r3, r2
 800827e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008280:	7bfb      	ldrb	r3, [r7, #15]
 8008282:	3301      	adds	r3, #1
 8008284:	73fb      	strb	r3, [r7, #15]
 8008286:	7bfa      	ldrb	r2, [r7, #15]
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	3b01      	subs	r3, #1
 800828c:	429a      	cmp	r2, r3
 800828e:	d3ec      	bcc.n	800826a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008290:	883b      	ldrh	r3, [r7, #0]
 8008292:	0418      	lsls	r0, r3, #16
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6819      	ldr	r1, [r3, #0]
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	3b01      	subs	r3, #1
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	4302      	orrs	r2, r0
 80082a0:	3340      	adds	r3, #64	@ 0x40
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	440b      	add	r3, r1
 80082a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	460b      	mov	r3, r1
 80082c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	887a      	ldrh	r2, [r7, #2]
 80082c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008306:	4b05      	ldr	r3, [pc, #20]	@ (800831c <HAL_PCDEx_ActivateLPM+0x44>)
 8008308:	4313      	orrs	r3, r2
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	10000003 	.word	0x10000003

08008320 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008340:	4b19      	ldr	r3, [pc, #100]	@ (80083a8 <HAL_PWREx_ConfigSupply+0x70>)
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b04      	cmp	r3, #4
 800834a:	d00a      	beq.n	8008362 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800834c:	4b16      	ldr	r3, [pc, #88]	@ (80083a8 <HAL_PWREx_ConfigSupply+0x70>)
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f003 0307 	and.w	r3, r3, #7
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	429a      	cmp	r2, r3
 8008358:	d001      	beq.n	800835e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e01f      	b.n	800839e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800835e:	2300      	movs	r3, #0
 8008360:	e01d      	b.n	800839e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008362:	4b11      	ldr	r3, [pc, #68]	@ (80083a8 <HAL_PWREx_ConfigSupply+0x70>)
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f023 0207 	bic.w	r2, r3, #7
 800836a:	490f      	ldr	r1, [pc, #60]	@ (80083a8 <HAL_PWREx_ConfigSupply+0x70>)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4313      	orrs	r3, r2
 8008370:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008372:	f7fa feff 	bl	8003174 <HAL_GetTick>
 8008376:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008378:	e009      	b.n	800838e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800837a:	f7fa fefb 	bl	8003174 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008388:	d901      	bls.n	800838e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e007      	b.n	800839e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800838e:	4b06      	ldr	r3, [pc, #24]	@ (80083a8 <HAL_PWREx_ConfigSupply+0x70>)
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800839a:	d1ee      	bne.n	800837a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	58024800 	.word	0x58024800

080083ac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80083b0:	4b05      	ldr	r3, [pc, #20]	@ (80083c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	4a04      	ldr	r2, [pc, #16]	@ (80083c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80083b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083ba:	60d3      	str	r3, [r2, #12]
}
 80083bc:	bf00      	nop
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	58024800 	.word	0x58024800

080083cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08c      	sub	sp, #48	@ 0x30
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e3c8      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 8087 	beq.w	80084fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083ec:	4b88      	ldr	r3, [pc, #544]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083f6:	4b86      	ldr	r3, [pc, #536]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 80083f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80083fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fe:	2b10      	cmp	r3, #16
 8008400:	d007      	beq.n	8008412 <HAL_RCC_OscConfig+0x46>
 8008402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008404:	2b18      	cmp	r3, #24
 8008406:	d110      	bne.n	800842a <HAL_RCC_OscConfig+0x5e>
 8008408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	2b02      	cmp	r3, #2
 8008410:	d10b      	bne.n	800842a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008412:	4b7f      	ldr	r3, [pc, #508]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d06c      	beq.n	80084f8 <HAL_RCC_OscConfig+0x12c>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d168      	bne.n	80084f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e3a2      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008432:	d106      	bne.n	8008442 <HAL_RCC_OscConfig+0x76>
 8008434:	4b76      	ldr	r3, [pc, #472]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a75      	ldr	r2, [pc, #468]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 800843a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	e02e      	b.n	80084a0 <HAL_RCC_OscConfig+0xd4>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10c      	bne.n	8008464 <HAL_RCC_OscConfig+0x98>
 800844a:	4b71      	ldr	r3, [pc, #452]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a70      	ldr	r2, [pc, #448]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 8008450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	4b6e      	ldr	r3, [pc, #440]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a6d      	ldr	r2, [pc, #436]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 800845c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	e01d      	b.n	80084a0 <HAL_RCC_OscConfig+0xd4>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800846c:	d10c      	bne.n	8008488 <HAL_RCC_OscConfig+0xbc>
 800846e:	4b68      	ldr	r3, [pc, #416]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a67      	ldr	r2, [pc, #412]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 8008474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	4b65      	ldr	r3, [pc, #404]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a64      	ldr	r2, [pc, #400]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 8008480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008484:	6013      	str	r3, [r2, #0]
 8008486:	e00b      	b.n	80084a0 <HAL_RCC_OscConfig+0xd4>
 8008488:	4b61      	ldr	r3, [pc, #388]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a60      	ldr	r2, [pc, #384]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 800848e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	4b5e      	ldr	r3, [pc, #376]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a5d      	ldr	r2, [pc, #372]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 800849a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800849e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d013      	beq.n	80084d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a8:	f7fa fe64 	bl	8003174 <HAL_GetTick>
 80084ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084ae:	e008      	b.n	80084c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084b0:	f7fa fe60 	bl	8003174 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b64      	cmp	r3, #100	@ 0x64
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e356      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084c2:	4b53      	ldr	r3, [pc, #332]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0f0      	beq.n	80084b0 <HAL_RCC_OscConfig+0xe4>
 80084ce:	e014      	b.n	80084fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d0:	f7fa fe50 	bl	8003174 <HAL_GetTick>
 80084d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084d6:	e008      	b.n	80084ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084d8:	f7fa fe4c 	bl	8003174 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b64      	cmp	r3, #100	@ 0x64
 80084e4:	d901      	bls.n	80084ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e342      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084ea:	4b49      	ldr	r3, [pc, #292]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1f0      	bne.n	80084d8 <HAL_RCC_OscConfig+0x10c>
 80084f6:	e000      	b.n	80084fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 808c 	beq.w	8008620 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008508:	4b41      	ldr	r3, [pc, #260]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008510:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008512:	4b3f      	ldr	r3, [pc, #252]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 8008514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008516:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d007      	beq.n	800852e <HAL_RCC_OscConfig+0x162>
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	2b18      	cmp	r3, #24
 8008522:	d137      	bne.n	8008594 <HAL_RCC_OscConfig+0x1c8>
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	f003 0303 	and.w	r3, r3, #3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d132      	bne.n	8008594 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800852e:	4b38      	ldr	r3, [pc, #224]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0304 	and.w	r3, r3, #4
 8008536:	2b00      	cmp	r3, #0
 8008538:	d005      	beq.n	8008546 <HAL_RCC_OscConfig+0x17a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e314      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008546:	4b32      	ldr	r3, [pc, #200]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f023 0219 	bic.w	r2, r3, #25
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	492f      	ldr	r1, [pc, #188]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 8008554:	4313      	orrs	r3, r2
 8008556:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008558:	f7fa fe0c 	bl	8003174 <HAL_GetTick>
 800855c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800855e:	e008      	b.n	8008572 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008560:	f7fa fe08 	bl	8003174 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b02      	cmp	r3, #2
 800856c:	d901      	bls.n	8008572 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e2fe      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008572:	4b27      	ldr	r3, [pc, #156]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0304 	and.w	r3, r3, #4
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0f0      	beq.n	8008560 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800857e:	4b24      	ldr	r3, [pc, #144]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	061b      	lsls	r3, r3, #24
 800858c:	4920      	ldr	r1, [pc, #128]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 800858e:	4313      	orrs	r3, r2
 8008590:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008592:	e045      	b.n	8008620 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d026      	beq.n	80085ea <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800859c:	4b1c      	ldr	r3, [pc, #112]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f023 0219 	bic.w	r2, r3, #25
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	4919      	ldr	r1, [pc, #100]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ae:	f7fa fde1 	bl	8003174 <HAL_GetTick>
 80085b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085b4:	e008      	b.n	80085c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085b6:	f7fa fddd 	bl	8003174 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d901      	bls.n	80085c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e2d3      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085c8:	4b11      	ldr	r3, [pc, #68]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0f0      	beq.n	80085b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	061b      	lsls	r3, r3, #24
 80085e2:	490b      	ldr	r1, [pc, #44]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	604b      	str	r3, [r1, #4]
 80085e8:	e01a      	b.n	8008620 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085ea:	4b09      	ldr	r3, [pc, #36]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a08      	ldr	r2, [pc, #32]	@ (8008610 <HAL_RCC_OscConfig+0x244>)
 80085f0:	f023 0301 	bic.w	r3, r3, #1
 80085f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f6:	f7fa fdbd 	bl	8003174 <HAL_GetTick>
 80085fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085fc:	e00a      	b.n	8008614 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085fe:	f7fa fdb9 	bl	8003174 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	2b02      	cmp	r3, #2
 800860a:	d903      	bls.n	8008614 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e2af      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
 8008610:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008614:	4b96      	ldr	r3, [pc, #600]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1ee      	bne.n	80085fe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0310 	and.w	r3, r3, #16
 8008628:	2b00      	cmp	r3, #0
 800862a:	d06a      	beq.n	8008702 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800862c:	4b90      	ldr	r3, [pc, #576]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008634:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008636:	4b8e      	ldr	r3, [pc, #568]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 8008638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800863a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	2b08      	cmp	r3, #8
 8008640:	d007      	beq.n	8008652 <HAL_RCC_OscConfig+0x286>
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	2b18      	cmp	r3, #24
 8008646:	d11b      	bne.n	8008680 <HAL_RCC_OscConfig+0x2b4>
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	2b01      	cmp	r3, #1
 8008650:	d116      	bne.n	8008680 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008652:	4b87      	ldr	r3, [pc, #540]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800865a:	2b00      	cmp	r3, #0
 800865c:	d005      	beq.n	800866a <HAL_RCC_OscConfig+0x29e>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	2b80      	cmp	r3, #128	@ 0x80
 8008664:	d001      	beq.n	800866a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e282      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800866a:	4b81      	ldr	r3, [pc, #516]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	061b      	lsls	r3, r3, #24
 8008678:	497d      	ldr	r1, [pc, #500]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 800867a:	4313      	orrs	r3, r2
 800867c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800867e:	e040      	b.n	8008702 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d023      	beq.n	80086d0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008688:	4b79      	ldr	r3, [pc, #484]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a78      	ldr	r2, [pc, #480]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 800868e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008694:	f7fa fd6e 	bl	8003174 <HAL_GetTick>
 8008698:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800869a:	e008      	b.n	80086ae <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800869c:	f7fa fd6a 	bl	8003174 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e260      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086ae:	4b70      	ldr	r3, [pc, #448]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0f0      	beq.n	800869c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086ba:	4b6d      	ldr	r3, [pc, #436]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	061b      	lsls	r3, r3, #24
 80086c8:	4969      	ldr	r1, [pc, #420]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60cb      	str	r3, [r1, #12]
 80086ce:	e018      	b.n	8008702 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80086d0:	4b67      	ldr	r3, [pc, #412]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a66      	ldr	r2, [pc, #408]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 80086d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086dc:	f7fa fd4a 	bl	8003174 <HAL_GetTick>
 80086e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086e2:	e008      	b.n	80086f6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80086e4:	f7fa fd46 	bl	8003174 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e23c      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086f6:	4b5e      	ldr	r3, [pc, #376]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1f0      	bne.n	80086e4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0308 	and.w	r3, r3, #8
 800870a:	2b00      	cmp	r3, #0
 800870c:	d036      	beq.n	800877c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d019      	beq.n	800874a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008716:	4b56      	ldr	r3, [pc, #344]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 8008718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800871a:	4a55      	ldr	r2, [pc, #340]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 800871c:	f043 0301 	orr.w	r3, r3, #1
 8008720:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008722:	f7fa fd27 	bl	8003174 <HAL_GetTick>
 8008726:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008728:	e008      	b.n	800873c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800872a:	f7fa fd23 	bl	8003174 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b02      	cmp	r3, #2
 8008736:	d901      	bls.n	800873c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e219      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800873c:	4b4c      	ldr	r3, [pc, #304]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 800873e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d0f0      	beq.n	800872a <HAL_RCC_OscConfig+0x35e>
 8008748:	e018      	b.n	800877c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800874a:	4b49      	ldr	r3, [pc, #292]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 800874c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800874e:	4a48      	ldr	r2, [pc, #288]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 8008750:	f023 0301 	bic.w	r3, r3, #1
 8008754:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008756:	f7fa fd0d 	bl	8003174 <HAL_GetTick>
 800875a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800875c:	e008      	b.n	8008770 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800875e:	f7fa fd09 	bl	8003174 <HAL_GetTick>
 8008762:	4602      	mov	r2, r0
 8008764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	2b02      	cmp	r3, #2
 800876a:	d901      	bls.n	8008770 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e1ff      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008770:	4b3f      	ldr	r3, [pc, #252]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 8008772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1f0      	bne.n	800875e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0320 	and.w	r3, r3, #32
 8008784:	2b00      	cmp	r3, #0
 8008786:	d036      	beq.n	80087f6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d019      	beq.n	80087c4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008790:	4b37      	ldr	r3, [pc, #220]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a36      	ldr	r2, [pc, #216]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 8008796:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800879a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800879c:	f7fa fcea 	bl	8003174 <HAL_GetTick>
 80087a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087a2:	e008      	b.n	80087b6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087a4:	f7fa fce6 	bl	8003174 <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d901      	bls.n	80087b6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e1dc      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087b6:	4b2e      	ldr	r3, [pc, #184]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0f0      	beq.n	80087a4 <HAL_RCC_OscConfig+0x3d8>
 80087c2:	e018      	b.n	80087f6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80087c4:	4b2a      	ldr	r3, [pc, #168]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a29      	ldr	r2, [pc, #164]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 80087ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087d0:	f7fa fcd0 	bl	8003174 <HAL_GetTick>
 80087d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087d6:	e008      	b.n	80087ea <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087d8:	f7fa fccc 	bl	8003174 <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d901      	bls.n	80087ea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e1c2      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087ea:	4b21      	ldr	r3, [pc, #132]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1f0      	bne.n	80087d8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0304 	and.w	r3, r3, #4
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 8086 	beq.w	8008910 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008804:	4b1b      	ldr	r3, [pc, #108]	@ (8008874 <HAL_RCC_OscConfig+0x4a8>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a1a      	ldr	r2, [pc, #104]	@ (8008874 <HAL_RCC_OscConfig+0x4a8>)
 800880a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800880e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008810:	f7fa fcb0 	bl	8003174 <HAL_GetTick>
 8008814:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008816:	e008      	b.n	800882a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008818:	f7fa fcac 	bl	8003174 <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b64      	cmp	r3, #100	@ 0x64
 8008824:	d901      	bls.n	800882a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e1a2      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800882a:	4b12      	ldr	r3, [pc, #72]	@ (8008874 <HAL_RCC_OscConfig+0x4a8>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0f0      	beq.n	8008818 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d106      	bne.n	800884c <HAL_RCC_OscConfig+0x480>
 800883e:	4b0c      	ldr	r3, [pc, #48]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 8008840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008842:	4a0b      	ldr	r2, [pc, #44]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 8008844:	f043 0301 	orr.w	r3, r3, #1
 8008848:	6713      	str	r3, [r2, #112]	@ 0x70
 800884a:	e032      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e6>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d111      	bne.n	8008878 <HAL_RCC_OscConfig+0x4ac>
 8008854:	4b06      	ldr	r3, [pc, #24]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 8008856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008858:	4a05      	ldr	r2, [pc, #20]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 800885a:	f023 0301 	bic.w	r3, r3, #1
 800885e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008860:	4b03      	ldr	r3, [pc, #12]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 8008862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008864:	4a02      	ldr	r2, [pc, #8]	@ (8008870 <HAL_RCC_OscConfig+0x4a4>)
 8008866:	f023 0304 	bic.w	r3, r3, #4
 800886a:	6713      	str	r3, [r2, #112]	@ 0x70
 800886c:	e021      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e6>
 800886e:	bf00      	nop
 8008870:	58024400 	.word	0x58024400
 8008874:	58024800 	.word	0x58024800
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	2b05      	cmp	r3, #5
 800887e:	d10c      	bne.n	800889a <HAL_RCC_OscConfig+0x4ce>
 8008880:	4b83      	ldr	r3, [pc, #524]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008884:	4a82      	ldr	r2, [pc, #520]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008886:	f043 0304 	orr.w	r3, r3, #4
 800888a:	6713      	str	r3, [r2, #112]	@ 0x70
 800888c:	4b80      	ldr	r3, [pc, #512]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 800888e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008890:	4a7f      	ldr	r2, [pc, #508]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008892:	f043 0301 	orr.w	r3, r3, #1
 8008896:	6713      	str	r3, [r2, #112]	@ 0x70
 8008898:	e00b      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e6>
 800889a:	4b7d      	ldr	r3, [pc, #500]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 800889c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800889e:	4a7c      	ldr	r2, [pc, #496]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80088a0:	f023 0301 	bic.w	r3, r3, #1
 80088a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80088a6:	4b7a      	ldr	r3, [pc, #488]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80088a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088aa:	4a79      	ldr	r2, [pc, #484]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80088ac:	f023 0304 	bic.w	r3, r3, #4
 80088b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d015      	beq.n	80088e6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088ba:	f7fa fc5b 	bl	8003174 <HAL_GetTick>
 80088be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088c0:	e00a      	b.n	80088d8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088c2:	f7fa fc57 	bl	8003174 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d901      	bls.n	80088d8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e14b      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088d8:	4b6d      	ldr	r3, [pc, #436]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80088da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088dc:	f003 0302 	and.w	r3, r3, #2
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d0ee      	beq.n	80088c2 <HAL_RCC_OscConfig+0x4f6>
 80088e4:	e014      	b.n	8008910 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e6:	f7fa fc45 	bl	8003174 <HAL_GetTick>
 80088ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088ec:	e00a      	b.n	8008904 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088ee:	f7fa fc41 	bl	8003174 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d901      	bls.n	8008904 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e135      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008904:	4b62      	ldr	r3, [pc, #392]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1ee      	bne.n	80088ee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 812a 	beq.w	8008b6e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800891a:	4b5d      	ldr	r3, [pc, #372]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008922:	2b18      	cmp	r3, #24
 8008924:	f000 80ba 	beq.w	8008a9c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800892c:	2b02      	cmp	r3, #2
 800892e:	f040 8095 	bne.w	8008a5c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008932:	4b57      	ldr	r3, [pc, #348]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a56      	ldr	r2, [pc, #344]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008938:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800893c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800893e:	f7fa fc19 	bl	8003174 <HAL_GetTick>
 8008942:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008944:	e008      	b.n	8008958 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008946:	f7fa fc15 	bl	8003174 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	2b02      	cmp	r3, #2
 8008952:	d901      	bls.n	8008958 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	e10b      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008958:	4b4d      	ldr	r3, [pc, #308]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1f0      	bne.n	8008946 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008964:	4b4a      	ldr	r3, [pc, #296]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008966:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008968:	4b4a      	ldr	r3, [pc, #296]	@ (8008a94 <HAL_RCC_OscConfig+0x6c8>)
 800896a:	4013      	ands	r3, r2
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008974:	0112      	lsls	r2, r2, #4
 8008976:	430a      	orrs	r2, r1
 8008978:	4945      	ldr	r1, [pc, #276]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 800897a:	4313      	orrs	r3, r2
 800897c:	628b      	str	r3, [r1, #40]	@ 0x28
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008982:	3b01      	subs	r3, #1
 8008984:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800898c:	3b01      	subs	r3, #1
 800898e:	025b      	lsls	r3, r3, #9
 8008990:	b29b      	uxth	r3, r3
 8008992:	431a      	orrs	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008998:	3b01      	subs	r3, #1
 800899a:	041b      	lsls	r3, r3, #16
 800899c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80089a0:	431a      	orrs	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a6:	3b01      	subs	r3, #1
 80089a8:	061b      	lsls	r3, r3, #24
 80089aa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80089ae:	4938      	ldr	r1, [pc, #224]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80089b4:	4b36      	ldr	r3, [pc, #216]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80089b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b8:	4a35      	ldr	r2, [pc, #212]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80089ba:	f023 0301 	bic.w	r3, r3, #1
 80089be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80089c0:	4b33      	ldr	r3, [pc, #204]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80089c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089c4:	4b34      	ldr	r3, [pc, #208]	@ (8008a98 <HAL_RCC_OscConfig+0x6cc>)
 80089c6:	4013      	ands	r3, r2
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80089cc:	00d2      	lsls	r2, r2, #3
 80089ce:	4930      	ldr	r1, [pc, #192]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80089d4:	4b2e      	ldr	r3, [pc, #184]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80089d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d8:	f023 020c 	bic.w	r2, r3, #12
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e0:	492b      	ldr	r1, [pc, #172]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80089e6:	4b2a      	ldr	r3, [pc, #168]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80089e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ea:	f023 0202 	bic.w	r2, r3, #2
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089f2:	4927      	ldr	r1, [pc, #156]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80089f8:	4b25      	ldr	r3, [pc, #148]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80089fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fc:	4a24      	ldr	r2, [pc, #144]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 80089fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a04:	4b22      	ldr	r3, [pc, #136]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a08:	4a21      	ldr	r2, [pc, #132]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a10:	4b1f      	ldr	r3, [pc, #124]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a14:	4a1e      	ldr	r2, [pc, #120]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008a16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a20:	4a1b      	ldr	r2, [pc, #108]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008a22:	f043 0301 	orr.w	r3, r3, #1
 8008a26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a28:	4b19      	ldr	r3, [pc, #100]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a18      	ldr	r2, [pc, #96]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a34:	f7fa fb9e 	bl	8003174 <HAL_GetTick>
 8008a38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a3a:	e008      	b.n	8008a4e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a3c:	f7fa fb9a 	bl	8003174 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d901      	bls.n	8008a4e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e090      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a4e:	4b10      	ldr	r3, [pc, #64]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d0f0      	beq.n	8008a3c <HAL_RCC_OscConfig+0x670>
 8008a5a:	e088      	b.n	8008b6e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a0b      	ldr	r2, [pc, #44]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008a62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a68:	f7fa fb84 	bl	8003174 <HAL_GetTick>
 8008a6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a6e:	e008      	b.n	8008a82 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a70:	f7fa fb80 	bl	8003174 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d901      	bls.n	8008a82 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e076      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a82:	4b03      	ldr	r3, [pc, #12]	@ (8008a90 <HAL_RCC_OscConfig+0x6c4>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1f0      	bne.n	8008a70 <HAL_RCC_OscConfig+0x6a4>
 8008a8e:	e06e      	b.n	8008b6e <HAL_RCC_OscConfig+0x7a2>
 8008a90:	58024400 	.word	0x58024400
 8008a94:	fffffc0c 	.word	0xfffffc0c
 8008a98:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008a9c:	4b36      	ldr	r3, [pc, #216]	@ (8008b78 <HAL_RCC_OscConfig+0x7ac>)
 8008a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008aa2:	4b35      	ldr	r3, [pc, #212]	@ (8008b78 <HAL_RCC_OscConfig+0x7ac>)
 8008aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aa6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d031      	beq.n	8008b14 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f003 0203 	and.w	r2, r3, #3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d12a      	bne.n	8008b14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	091b      	lsrs	r3, r3, #4
 8008ac2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d122      	bne.n	8008b14 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ad8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d11a      	bne.n	8008b14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	0a5b      	lsrs	r3, r3, #9
 8008ae2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d111      	bne.n	8008b14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	0c1b      	lsrs	r3, r3, #16
 8008af4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008afc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d108      	bne.n	8008b14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	0e1b      	lsrs	r3, r3, #24
 8008b06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b0e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d001      	beq.n	8008b18 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e02b      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008b18:	4b17      	ldr	r3, [pc, #92]	@ (8008b78 <HAL_RCC_OscConfig+0x7ac>)
 8008b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b1c:	08db      	lsrs	r3, r3, #3
 8008b1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b22:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d01f      	beq.n	8008b6e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008b2e:	4b12      	ldr	r3, [pc, #72]	@ (8008b78 <HAL_RCC_OscConfig+0x7ac>)
 8008b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b32:	4a11      	ldr	r2, [pc, #68]	@ (8008b78 <HAL_RCC_OscConfig+0x7ac>)
 8008b34:	f023 0301 	bic.w	r3, r3, #1
 8008b38:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b3a:	f7fa fb1b 	bl	8003174 <HAL_GetTick>
 8008b3e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008b40:	bf00      	nop
 8008b42:	f7fa fb17 	bl	8003174 <HAL_GetTick>
 8008b46:	4602      	mov	r2, r0
 8008b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d0f9      	beq.n	8008b42 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b78 <HAL_RCC_OscConfig+0x7ac>)
 8008b50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b52:	4b0a      	ldr	r3, [pc, #40]	@ (8008b7c <HAL_RCC_OscConfig+0x7b0>)
 8008b54:	4013      	ands	r3, r2
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008b5a:	00d2      	lsls	r2, r2, #3
 8008b5c:	4906      	ldr	r1, [pc, #24]	@ (8008b78 <HAL_RCC_OscConfig+0x7ac>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008b62:	4b05      	ldr	r3, [pc, #20]	@ (8008b78 <HAL_RCC_OscConfig+0x7ac>)
 8008b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b66:	4a04      	ldr	r2, [pc, #16]	@ (8008b78 <HAL_RCC_OscConfig+0x7ac>)
 8008b68:	f043 0301 	orr.w	r3, r3, #1
 8008b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3730      	adds	r7, #48	@ 0x30
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	58024400 	.word	0x58024400
 8008b7c:	ffff0007 	.word	0xffff0007

08008b80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e19c      	b.n	8008ece <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b94:	4b8a      	ldr	r3, [pc, #552]	@ (8008dc0 <HAL_RCC_ClockConfig+0x240>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 030f 	and.w	r3, r3, #15
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d910      	bls.n	8008bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ba2:	4b87      	ldr	r3, [pc, #540]	@ (8008dc0 <HAL_RCC_ClockConfig+0x240>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f023 020f 	bic.w	r2, r3, #15
 8008baa:	4985      	ldr	r1, [pc, #532]	@ (8008dc0 <HAL_RCC_ClockConfig+0x240>)
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bb2:	4b83      	ldr	r3, [pc, #524]	@ (8008dc0 <HAL_RCC_ClockConfig+0x240>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 030f 	and.w	r3, r3, #15
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d001      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e184      	b.n	8008ece <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d010      	beq.n	8008bf2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	691a      	ldr	r2, [r3, #16]
 8008bd4:	4b7b      	ldr	r3, [pc, #492]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d908      	bls.n	8008bf2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008be0:	4b78      	ldr	r3, [pc, #480]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	4975      	ldr	r1, [pc, #468]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0308 	and.w	r3, r3, #8
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d010      	beq.n	8008c20 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	695a      	ldr	r2, [r3, #20]
 8008c02:	4b70      	ldr	r3, [pc, #448]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d908      	bls.n	8008c20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	496a      	ldr	r1, [pc, #424]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0310 	and.w	r3, r3, #16
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d010      	beq.n	8008c4e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	699a      	ldr	r2, [r3, #24]
 8008c30:	4b64      	ldr	r3, [pc, #400]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008c32:	69db      	ldr	r3, [r3, #28]
 8008c34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d908      	bls.n	8008c4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c3c:	4b61      	ldr	r3, [pc, #388]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	495e      	ldr	r1, [pc, #376]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d010      	beq.n	8008c7c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	69da      	ldr	r2, [r3, #28]
 8008c5e:	4b59      	ldr	r3, [pc, #356]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d908      	bls.n	8008c7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008c6a:	4b56      	ldr	r3, [pc, #344]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	4953      	ldr	r1, [pc, #332]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0302 	and.w	r3, r3, #2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d010      	beq.n	8008caa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	f003 030f 	and.w	r3, r3, #15
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d908      	bls.n	8008caa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c98:	4b4a      	ldr	r3, [pc, #296]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	f023 020f 	bic.w	r2, r3, #15
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	4947      	ldr	r1, [pc, #284]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d055      	beq.n	8008d62 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008cb6:	4b43      	ldr	r3, [pc, #268]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	4940      	ldr	r1, [pc, #256]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d107      	bne.n	8008ce0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cd0:	4b3c      	ldr	r3, [pc, #240]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d121      	bne.n	8008d20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e0f6      	b.n	8008ece <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d107      	bne.n	8008cf8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ce8:	4b36      	ldr	r3, [pc, #216]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d115      	bne.n	8008d20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e0ea      	b.n	8008ece <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d107      	bne.n	8008d10 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d00:	4b30      	ldr	r3, [pc, #192]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d109      	bne.n	8008d20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e0de      	b.n	8008ece <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d10:	4b2c      	ldr	r3, [pc, #176]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 0304 	and.w	r3, r3, #4
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e0d6      	b.n	8008ece <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d20:	4b28      	ldr	r3, [pc, #160]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	f023 0207 	bic.w	r2, r3, #7
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	4925      	ldr	r1, [pc, #148]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d32:	f7fa fa1f 	bl	8003174 <HAL_GetTick>
 8008d36:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d38:	e00a      	b.n	8008d50 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d3a:	f7fa fa1b 	bl	8003174 <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d901      	bls.n	8008d50 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e0be      	b.n	8008ece <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d50:	4b1c      	ldr	r3, [pc, #112]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	00db      	lsls	r3, r3, #3
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d1eb      	bne.n	8008d3a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d010      	beq.n	8008d90 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68da      	ldr	r2, [r3, #12]
 8008d72:	4b14      	ldr	r3, [pc, #80]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	f003 030f 	and.w	r3, r3, #15
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d208      	bcs.n	8008d90 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d7e:	4b11      	ldr	r3, [pc, #68]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	f023 020f 	bic.w	r2, r3, #15
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	490e      	ldr	r1, [pc, #56]	@ (8008dc4 <HAL_RCC_ClockConfig+0x244>)
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d90:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc0 <HAL_RCC_ClockConfig+0x240>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 030f 	and.w	r3, r3, #15
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d214      	bcs.n	8008dc8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d9e:	4b08      	ldr	r3, [pc, #32]	@ (8008dc0 <HAL_RCC_ClockConfig+0x240>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f023 020f 	bic.w	r2, r3, #15
 8008da6:	4906      	ldr	r1, [pc, #24]	@ (8008dc0 <HAL_RCC_ClockConfig+0x240>)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dae:	4b04      	ldr	r3, [pc, #16]	@ (8008dc0 <HAL_RCC_ClockConfig+0x240>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 030f 	and.w	r3, r3, #15
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d005      	beq.n	8008dc8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e086      	b.n	8008ece <HAL_RCC_ClockConfig+0x34e>
 8008dc0:	52002000 	.word	0x52002000
 8008dc4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0304 	and.w	r3, r3, #4
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d010      	beq.n	8008df6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	691a      	ldr	r2, [r3, #16]
 8008dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8008ed8 <HAL_RCC_ClockConfig+0x358>)
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d208      	bcs.n	8008df6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008de4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ed8 <HAL_RCC_ClockConfig+0x358>)
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	4939      	ldr	r1, [pc, #228]	@ (8008ed8 <HAL_RCC_ClockConfig+0x358>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 0308 	and.w	r3, r3, #8
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d010      	beq.n	8008e24 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	695a      	ldr	r2, [r3, #20]
 8008e06:	4b34      	ldr	r3, [pc, #208]	@ (8008ed8 <HAL_RCC_ClockConfig+0x358>)
 8008e08:	69db      	ldr	r3, [r3, #28]
 8008e0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d208      	bcs.n	8008e24 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e12:	4b31      	ldr	r3, [pc, #196]	@ (8008ed8 <HAL_RCC_ClockConfig+0x358>)
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	492e      	ldr	r1, [pc, #184]	@ (8008ed8 <HAL_RCC_ClockConfig+0x358>)
 8008e20:	4313      	orrs	r3, r2
 8008e22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 0310 	and.w	r3, r3, #16
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d010      	beq.n	8008e52 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	699a      	ldr	r2, [r3, #24]
 8008e34:	4b28      	ldr	r3, [pc, #160]	@ (8008ed8 <HAL_RCC_ClockConfig+0x358>)
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d208      	bcs.n	8008e52 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e40:	4b25      	ldr	r3, [pc, #148]	@ (8008ed8 <HAL_RCC_ClockConfig+0x358>)
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	4922      	ldr	r1, [pc, #136]	@ (8008ed8 <HAL_RCC_ClockConfig+0x358>)
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0320 	and.w	r3, r3, #32
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d010      	beq.n	8008e80 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	69da      	ldr	r2, [r3, #28]
 8008e62:	4b1d      	ldr	r3, [pc, #116]	@ (8008ed8 <HAL_RCC_ClockConfig+0x358>)
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d208      	bcs.n	8008e80 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ed8 <HAL_RCC_ClockConfig+0x358>)
 8008e70:	6a1b      	ldr	r3, [r3, #32]
 8008e72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	4917      	ldr	r1, [pc, #92]	@ (8008ed8 <HAL_RCC_ClockConfig+0x358>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e80:	f000 f834 	bl	8008eec <HAL_RCC_GetSysClockFreq>
 8008e84:	4602      	mov	r2, r0
 8008e86:	4b14      	ldr	r3, [pc, #80]	@ (8008ed8 <HAL_RCC_ClockConfig+0x358>)
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	0a1b      	lsrs	r3, r3, #8
 8008e8c:	f003 030f 	and.w	r3, r3, #15
 8008e90:	4912      	ldr	r1, [pc, #72]	@ (8008edc <HAL_RCC_ClockConfig+0x35c>)
 8008e92:	5ccb      	ldrb	r3, [r1, r3]
 8008e94:	f003 031f 	and.w	r3, r3, #31
 8008e98:	fa22 f303 	lsr.w	r3, r2, r3
 8008e9c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed8 <HAL_RCC_ClockConfig+0x358>)
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	f003 030f 	and.w	r3, r3, #15
 8008ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8008edc <HAL_RCC_ClockConfig+0x35c>)
 8008ea8:	5cd3      	ldrb	r3, [r2, r3]
 8008eaa:	f003 031f 	and.w	r3, r3, #31
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8008ee0 <HAL_RCC_ClockConfig+0x360>)
 8008eb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8008ee4 <HAL_RCC_ClockConfig+0x364>)
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee8 <HAL_RCC_ClockConfig+0x368>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fa f90c 	bl	80030e0 <HAL_InitTick>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	58024400 	.word	0x58024400
 8008edc:	08016930 	.word	0x08016930
 8008ee0:	24000004 	.word	0x24000004
 8008ee4:	24000000 	.word	0x24000000
 8008ee8:	24000008 	.word	0x24000008

08008eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b089      	sub	sp, #36	@ 0x24
 8008ef0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ef2:	4bb3      	ldr	r3, [pc, #716]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008efa:	2b18      	cmp	r3, #24
 8008efc:	f200 8155 	bhi.w	80091aa <HAL_RCC_GetSysClockFreq+0x2be>
 8008f00:	a201      	add	r2, pc, #4	@ (adr r2, 8008f08 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f06:	bf00      	nop
 8008f08:	08008f6d 	.word	0x08008f6d
 8008f0c:	080091ab 	.word	0x080091ab
 8008f10:	080091ab 	.word	0x080091ab
 8008f14:	080091ab 	.word	0x080091ab
 8008f18:	080091ab 	.word	0x080091ab
 8008f1c:	080091ab 	.word	0x080091ab
 8008f20:	080091ab 	.word	0x080091ab
 8008f24:	080091ab 	.word	0x080091ab
 8008f28:	08008f93 	.word	0x08008f93
 8008f2c:	080091ab 	.word	0x080091ab
 8008f30:	080091ab 	.word	0x080091ab
 8008f34:	080091ab 	.word	0x080091ab
 8008f38:	080091ab 	.word	0x080091ab
 8008f3c:	080091ab 	.word	0x080091ab
 8008f40:	080091ab 	.word	0x080091ab
 8008f44:	080091ab 	.word	0x080091ab
 8008f48:	08008f99 	.word	0x08008f99
 8008f4c:	080091ab 	.word	0x080091ab
 8008f50:	080091ab 	.word	0x080091ab
 8008f54:	080091ab 	.word	0x080091ab
 8008f58:	080091ab 	.word	0x080091ab
 8008f5c:	080091ab 	.word	0x080091ab
 8008f60:	080091ab 	.word	0x080091ab
 8008f64:	080091ab 	.word	0x080091ab
 8008f68:	08008f9f 	.word	0x08008f9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f6c:	4b94      	ldr	r3, [pc, #592]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0320 	and.w	r3, r3, #32
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d009      	beq.n	8008f8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f78:	4b91      	ldr	r3, [pc, #580]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	08db      	lsrs	r3, r3, #3
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	4a90      	ldr	r2, [pc, #576]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f84:	fa22 f303 	lsr.w	r3, r2, r3
 8008f88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008f8a:	e111      	b.n	80091b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008f8c:	4b8d      	ldr	r3, [pc, #564]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f8e:	61bb      	str	r3, [r7, #24]
      break;
 8008f90:	e10e      	b.n	80091b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008f92:	4b8d      	ldr	r3, [pc, #564]	@ (80091c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f94:	61bb      	str	r3, [r7, #24]
      break;
 8008f96:	e10b      	b.n	80091b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008f98:	4b8c      	ldr	r3, [pc, #560]	@ (80091cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008f9a:	61bb      	str	r3, [r7, #24]
      break;
 8008f9c:	e108      	b.n	80091b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f9e:	4b88      	ldr	r3, [pc, #544]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008fa8:	4b85      	ldr	r3, [pc, #532]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fac:	091b      	lsrs	r3, r3, #4
 8008fae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fb2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008fb4:	4b82      	ldr	r3, [pc, #520]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008fbe:	4b80      	ldr	r3, [pc, #512]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc2:	08db      	lsrs	r3, r3, #3
 8008fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	fb02 f303 	mul.w	r3, r2, r3
 8008fce:	ee07 3a90 	vmov	s15, r3
 8008fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 80e1 	beq.w	80091a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	f000 8083 	beq.w	80090f0 <HAL_RCC_GetSysClockFreq+0x204>
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	f200 80a1 	bhi.w	8009134 <HAL_RCC_GetSysClockFreq+0x248>
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d003      	beq.n	8009000 <HAL_RCC_GetSysClockFreq+0x114>
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d056      	beq.n	80090ac <HAL_RCC_GetSysClockFreq+0x1c0>
 8008ffe:	e099      	b.n	8009134 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009000:	4b6f      	ldr	r3, [pc, #444]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0320 	and.w	r3, r3, #32
 8009008:	2b00      	cmp	r3, #0
 800900a:	d02d      	beq.n	8009068 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800900c:	4b6c      	ldr	r3, [pc, #432]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	08db      	lsrs	r3, r3, #3
 8009012:	f003 0303 	and.w	r3, r3, #3
 8009016:	4a6b      	ldr	r2, [pc, #428]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009018:	fa22 f303 	lsr.w	r3, r2, r3
 800901c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	ee07 3a90 	vmov	s15, r3
 8009024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009036:	4b62      	ldr	r3, [pc, #392]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800903a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800903e:	ee07 3a90 	vmov	s15, r3
 8009042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009046:	ed97 6a02 	vldr	s12, [r7, #8]
 800904a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80091d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800904e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800905a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800905e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009062:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009066:	e087      	b.n	8009178 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	ee07 3a90 	vmov	s15, r3
 800906e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009072:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80091d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800907a:	4b51      	ldr	r3, [pc, #324]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800907e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800908a:	ed97 6a02 	vldr	s12, [r7, #8]
 800908e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80091d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800909a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800909e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80090aa:	e065      	b.n	8009178 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	ee07 3a90 	vmov	s15, r3
 80090b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80091d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80090ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090be:	4b40      	ldr	r3, [pc, #256]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80090d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80091d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80090ee:	e043      	b.n	8009178 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80091dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80090fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009102:	4b2f      	ldr	r3, [pc, #188]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009112:	ed97 6a02 	vldr	s12, [r7, #8]
 8009116:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80091d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800911a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800911e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800912e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009132:	e021      	b.n	8009178 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800913e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80091d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009146:	4b1e      	ldr	r3, [pc, #120]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009156:	ed97 6a02 	vldr	s12, [r7, #8]
 800915a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80091d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800915e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800916a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800916e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009172:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009176:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009178:	4b11      	ldr	r3, [pc, #68]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800917a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800917c:	0a5b      	lsrs	r3, r3, #9
 800917e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009182:	3301      	adds	r3, #1
 8009184:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	ee07 3a90 	vmov	s15, r3
 800918c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009190:	edd7 6a07 	vldr	s13, [r7, #28]
 8009194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800919c:	ee17 3a90 	vmov	r3, s15
 80091a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80091a2:	e005      	b.n	80091b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	61bb      	str	r3, [r7, #24]
      break;
 80091a8:	e002      	b.n	80091b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80091aa:	4b07      	ldr	r3, [pc, #28]	@ (80091c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80091ac:	61bb      	str	r3, [r7, #24]
      break;
 80091ae:	bf00      	nop
  }

  return sysclockfreq;
 80091b0:	69bb      	ldr	r3, [r7, #24]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3724      	adds	r7, #36	@ 0x24
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	58024400 	.word	0x58024400
 80091c4:	03d09000 	.word	0x03d09000
 80091c8:	003d0900 	.word	0x003d0900
 80091cc:	016e3600 	.word	0x016e3600
 80091d0:	46000000 	.word	0x46000000
 80091d4:	4c742400 	.word	0x4c742400
 80091d8:	4a742400 	.word	0x4a742400
 80091dc:	4bb71b00 	.word	0x4bb71b00

080091e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80091e6:	f7ff fe81 	bl	8008eec <HAL_RCC_GetSysClockFreq>
 80091ea:	4602      	mov	r2, r0
 80091ec:	4b10      	ldr	r3, [pc, #64]	@ (8009230 <HAL_RCC_GetHCLKFreq+0x50>)
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	0a1b      	lsrs	r3, r3, #8
 80091f2:	f003 030f 	and.w	r3, r3, #15
 80091f6:	490f      	ldr	r1, [pc, #60]	@ (8009234 <HAL_RCC_GetHCLKFreq+0x54>)
 80091f8:	5ccb      	ldrb	r3, [r1, r3]
 80091fa:	f003 031f 	and.w	r3, r3, #31
 80091fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009202:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009204:	4b0a      	ldr	r3, [pc, #40]	@ (8009230 <HAL_RCC_GetHCLKFreq+0x50>)
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	f003 030f 	and.w	r3, r3, #15
 800920c:	4a09      	ldr	r2, [pc, #36]	@ (8009234 <HAL_RCC_GetHCLKFreq+0x54>)
 800920e:	5cd3      	ldrb	r3, [r2, r3]
 8009210:	f003 031f 	and.w	r3, r3, #31
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	fa22 f303 	lsr.w	r3, r2, r3
 800921a:	4a07      	ldr	r2, [pc, #28]	@ (8009238 <HAL_RCC_GetHCLKFreq+0x58>)
 800921c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800921e:	4a07      	ldr	r2, [pc, #28]	@ (800923c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009224:	4b04      	ldr	r3, [pc, #16]	@ (8009238 <HAL_RCC_GetHCLKFreq+0x58>)
 8009226:	681b      	ldr	r3, [r3, #0]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	58024400 	.word	0x58024400
 8009234:	08016930 	.word	0x08016930
 8009238:	24000004 	.word	0x24000004
 800923c:	24000000 	.word	0x24000000

08009240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009244:	f7ff ffcc 	bl	80091e0 <HAL_RCC_GetHCLKFreq>
 8009248:	4602      	mov	r2, r0
 800924a:	4b06      	ldr	r3, [pc, #24]	@ (8009264 <HAL_RCC_GetPCLK1Freq+0x24>)
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	091b      	lsrs	r3, r3, #4
 8009250:	f003 0307 	and.w	r3, r3, #7
 8009254:	4904      	ldr	r1, [pc, #16]	@ (8009268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009256:	5ccb      	ldrb	r3, [r1, r3]
 8009258:	f003 031f 	and.w	r3, r3, #31
 800925c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009260:	4618      	mov	r0, r3
 8009262:	bd80      	pop	{r7, pc}
 8009264:	58024400 	.word	0x58024400
 8009268:	08016930 	.word	0x08016930

0800926c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009270:	f7ff ffb6 	bl	80091e0 <HAL_RCC_GetHCLKFreq>
 8009274:	4602      	mov	r2, r0
 8009276:	4b06      	ldr	r3, [pc, #24]	@ (8009290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	0a1b      	lsrs	r3, r3, #8
 800927c:	f003 0307 	and.w	r3, r3, #7
 8009280:	4904      	ldr	r1, [pc, #16]	@ (8009294 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009282:	5ccb      	ldrb	r3, [r1, r3]
 8009284:	f003 031f 	and.w	r3, r3, #31
 8009288:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800928c:	4618      	mov	r0, r3
 800928e:	bd80      	pop	{r7, pc}
 8009290:	58024400 	.word	0x58024400
 8009294:	08016930 	.word	0x08016930

08009298 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800929c:	b0c6      	sub	sp, #280	@ 0x118
 800929e:	af00      	add	r7, sp, #0
 80092a0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092a4:	2300      	movs	r3, #0
 80092a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092aa:	2300      	movs	r3, #0
 80092ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80092bc:	2500      	movs	r5, #0
 80092be:	ea54 0305 	orrs.w	r3, r4, r5
 80092c2:	d049      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80092c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80092ce:	d02f      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80092d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80092d4:	d828      	bhi.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80092d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092da:	d01a      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80092dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092e0:	d822      	bhi.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d003      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80092e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092ea:	d007      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80092ec:	e01c      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ee:	4bab      	ldr	r3, [pc, #684]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80092f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f2:	4aaa      	ldr	r2, [pc, #680]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80092f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80092fa:	e01a      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009300:	3308      	adds	r3, #8
 8009302:	2102      	movs	r1, #2
 8009304:	4618      	mov	r0, r3
 8009306:	f002 fa49 	bl	800b79c <RCCEx_PLL2_Config>
 800930a:	4603      	mov	r3, r0
 800930c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009310:	e00f      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009316:	3328      	adds	r3, #40	@ 0x28
 8009318:	2102      	movs	r1, #2
 800931a:	4618      	mov	r0, r3
 800931c:	f002 faf0 	bl	800b900 <RCCEx_PLL3_Config>
 8009320:	4603      	mov	r3, r0
 8009322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009326:	e004      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800932e:	e000      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009332:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10a      	bne.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800933a:	4b98      	ldr	r3, [pc, #608]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800933c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800933e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009348:	4a94      	ldr	r2, [pc, #592]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800934a:	430b      	orrs	r3, r1
 800934c:	6513      	str	r3, [r2, #80]	@ 0x50
 800934e:	e003      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009354:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009364:	f04f 0900 	mov.w	r9, #0
 8009368:	ea58 0309 	orrs.w	r3, r8, r9
 800936c:	d047      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800936e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009374:	2b04      	cmp	r3, #4
 8009376:	d82a      	bhi.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009378:	a201      	add	r2, pc, #4	@ (adr r2, 8009380 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800937a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937e:	bf00      	nop
 8009380:	08009395 	.word	0x08009395
 8009384:	080093a3 	.word	0x080093a3
 8009388:	080093b9 	.word	0x080093b9
 800938c:	080093d7 	.word	0x080093d7
 8009390:	080093d7 	.word	0x080093d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009394:	4b81      	ldr	r3, [pc, #516]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009398:	4a80      	ldr	r2, [pc, #512]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800939a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800939e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093a0:	e01a      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093a6:	3308      	adds	r3, #8
 80093a8:	2100      	movs	r1, #0
 80093aa:	4618      	mov	r0, r3
 80093ac:	f002 f9f6 	bl	800b79c <RCCEx_PLL2_Config>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093b6:	e00f      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093bc:	3328      	adds	r3, #40	@ 0x28
 80093be:	2100      	movs	r1, #0
 80093c0:	4618      	mov	r0, r3
 80093c2:	f002 fa9d 	bl	800b900 <RCCEx_PLL3_Config>
 80093c6:	4603      	mov	r3, r0
 80093c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093cc:	e004      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093d4:	e000      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80093d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10a      	bne.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093e0:	4b6e      	ldr	r3, [pc, #440]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80093e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e4:	f023 0107 	bic.w	r1, r3, #7
 80093e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ee:	4a6b      	ldr	r2, [pc, #428]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80093f0:	430b      	orrs	r3, r1
 80093f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80093f4:	e003      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80093fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800940a:	f04f 0b00 	mov.w	fp, #0
 800940e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009412:	d05b      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009418:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800941c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009420:	d03b      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009422:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009426:	d834      	bhi.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009428:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800942c:	d037      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800942e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009432:	d82e      	bhi.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009434:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009438:	d033      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800943a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800943e:	d828      	bhi.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009440:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009444:	d01a      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009446:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800944a:	d822      	bhi.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800944c:	2b00      	cmp	r3, #0
 800944e:	d003      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009450:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009454:	d007      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009456:	e01c      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009458:	4b50      	ldr	r3, [pc, #320]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800945a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945c:	4a4f      	ldr	r2, [pc, #316]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800945e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009464:	e01e      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800946a:	3308      	adds	r3, #8
 800946c:	2100      	movs	r1, #0
 800946e:	4618      	mov	r0, r3
 8009470:	f002 f994 	bl	800b79c <RCCEx_PLL2_Config>
 8009474:	4603      	mov	r3, r0
 8009476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800947a:	e013      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800947c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009480:	3328      	adds	r3, #40	@ 0x28
 8009482:	2100      	movs	r1, #0
 8009484:	4618      	mov	r0, r3
 8009486:	f002 fa3b 	bl	800b900 <RCCEx_PLL3_Config>
 800948a:	4603      	mov	r3, r0
 800948c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009490:	e008      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009498:	e004      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800949a:	bf00      	nop
 800949c:	e002      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800949e:	bf00      	nop
 80094a0:	e000      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80094a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10b      	bne.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80094ac:	4b3b      	ldr	r3, [pc, #236]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094b0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80094b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80094bc:	4a37      	ldr	r2, [pc, #220]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094be:	430b      	orrs	r3, r1
 80094c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80094c2:	e003      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80094cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80094d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80094dc:	2300      	movs	r3, #0
 80094de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80094e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80094e6:	460b      	mov	r3, r1
 80094e8:	4313      	orrs	r3, r2
 80094ea:	d05d      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80094ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80094f4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80094f8:	d03b      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80094fa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80094fe:	d834      	bhi.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009500:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009504:	d037      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009506:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800950a:	d82e      	bhi.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800950c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009510:	d033      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009512:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009516:	d828      	bhi.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009518:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800951c:	d01a      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800951e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009522:	d822      	bhi.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009524:	2b00      	cmp	r3, #0
 8009526:	d003      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800952c:	d007      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800952e:	e01c      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009530:	4b1a      	ldr	r3, [pc, #104]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009534:	4a19      	ldr	r2, [pc, #100]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800953a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800953c:	e01e      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800953e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009542:	3308      	adds	r3, #8
 8009544:	2100      	movs	r1, #0
 8009546:	4618      	mov	r0, r3
 8009548:	f002 f928 	bl	800b79c <RCCEx_PLL2_Config>
 800954c:	4603      	mov	r3, r0
 800954e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009552:	e013      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009558:	3328      	adds	r3, #40	@ 0x28
 800955a:	2100      	movs	r1, #0
 800955c:	4618      	mov	r0, r3
 800955e:	f002 f9cf 	bl	800b900 <RCCEx_PLL3_Config>
 8009562:	4603      	mov	r3, r0
 8009564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009568:	e008      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009570:	e004      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009572:	bf00      	nop
 8009574:	e002      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009576:	bf00      	nop
 8009578:	e000      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800957a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800957c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10d      	bne.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009584:	4b05      	ldr	r3, [pc, #20]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009588:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800958c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009590:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009594:	4a01      	ldr	r2, [pc, #4]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009596:	430b      	orrs	r3, r1
 8009598:	6593      	str	r3, [r2, #88]	@ 0x58
 800959a:	e005      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800959c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80095a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80095b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80095b8:	2300      	movs	r3, #0
 80095ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80095be:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4313      	orrs	r3, r2
 80095c6:	d03a      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80095c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095ce:	2b30      	cmp	r3, #48	@ 0x30
 80095d0:	d01f      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80095d2:	2b30      	cmp	r3, #48	@ 0x30
 80095d4:	d819      	bhi.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80095d6:	2b20      	cmp	r3, #32
 80095d8:	d00c      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80095da:	2b20      	cmp	r3, #32
 80095dc:	d815      	bhi.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d019      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80095e2:	2b10      	cmp	r3, #16
 80095e4:	d111      	bne.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095e6:	4baa      	ldr	r3, [pc, #680]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80095e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ea:	4aa9      	ldr	r2, [pc, #676]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80095ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80095f2:	e011      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095f8:	3308      	adds	r3, #8
 80095fa:	2102      	movs	r1, #2
 80095fc:	4618      	mov	r0, r3
 80095fe:	f002 f8cd 	bl	800b79c <RCCEx_PLL2_Config>
 8009602:	4603      	mov	r3, r0
 8009604:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009608:	e006      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009610:	e002      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009612:	bf00      	nop
 8009614:	e000      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10a      	bne.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009620:	4b9b      	ldr	r3, [pc, #620]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009624:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800962c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800962e:	4a98      	ldr	r2, [pc, #608]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009630:	430b      	orrs	r3, r1
 8009632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009634:	e003      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009636:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800963a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800963e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800964a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800964e:	2300      	movs	r3, #0
 8009650:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009654:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009658:	460b      	mov	r3, r1
 800965a:	4313      	orrs	r3, r2
 800965c:	d051      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800965e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009664:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009668:	d035      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800966a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800966e:	d82e      	bhi.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009670:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009674:	d031      	beq.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009676:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800967a:	d828      	bhi.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 800967c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009680:	d01a      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009686:	d822      	bhi.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009688:	2b00      	cmp	r3, #0
 800968a:	d003      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800968c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009690:	d007      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009692:	e01c      	b.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009694:	4b7e      	ldr	r3, [pc, #504]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009698:	4a7d      	ldr	r2, [pc, #500]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800969a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800969e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80096a0:	e01c      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a6:	3308      	adds	r3, #8
 80096a8:	2100      	movs	r1, #0
 80096aa:	4618      	mov	r0, r3
 80096ac:	f002 f876 	bl	800b79c <RCCEx_PLL2_Config>
 80096b0:	4603      	mov	r3, r0
 80096b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80096b6:	e011      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096bc:	3328      	adds	r3, #40	@ 0x28
 80096be:	2100      	movs	r1, #0
 80096c0:	4618      	mov	r0, r3
 80096c2:	f002 f91d 	bl	800b900 <RCCEx_PLL3_Config>
 80096c6:	4603      	mov	r3, r0
 80096c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80096cc:	e006      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80096d4:	e002      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80096d6:	bf00      	nop
 80096d8:	e000      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80096da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10a      	bne.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096e4:	4b6a      	ldr	r3, [pc, #424]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80096ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096f2:	4a67      	ldr	r2, [pc, #412]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096f4:	430b      	orrs	r3, r1
 80096f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80096f8:	e003      	b.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800970e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009712:	2300      	movs	r3, #0
 8009714:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009718:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800971c:	460b      	mov	r3, r1
 800971e:	4313      	orrs	r3, r2
 8009720:	d053      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800972c:	d033      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800972e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009732:	d82c      	bhi.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009734:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009738:	d02f      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800973a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800973e:	d826      	bhi.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009740:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009744:	d02b      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009746:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800974a:	d820      	bhi.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800974c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009750:	d012      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009756:	d81a      	bhi.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009758:	2b00      	cmp	r3, #0
 800975a:	d022      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800975c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009760:	d115      	bne.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009766:	3308      	adds	r3, #8
 8009768:	2101      	movs	r1, #1
 800976a:	4618      	mov	r0, r3
 800976c:	f002 f816 	bl	800b79c <RCCEx_PLL2_Config>
 8009770:	4603      	mov	r3, r0
 8009772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009776:	e015      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800977c:	3328      	adds	r3, #40	@ 0x28
 800977e:	2101      	movs	r1, #1
 8009780:	4618      	mov	r0, r3
 8009782:	f002 f8bd 	bl	800b900 <RCCEx_PLL3_Config>
 8009786:	4603      	mov	r3, r0
 8009788:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800978c:	e00a      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009794:	e006      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009796:	bf00      	nop
 8009798:	e004      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800979a:	bf00      	nop
 800979c:	e002      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800979e:	bf00      	nop
 80097a0:	e000      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80097a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10a      	bne.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80097ac:	4b38      	ldr	r3, [pc, #224]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80097b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097ba:	4a35      	ldr	r2, [pc, #212]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097bc:	430b      	orrs	r3, r1
 80097be:	6513      	str	r3, [r2, #80]	@ 0x50
 80097c0:	e003      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80097ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80097d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80097da:	2300      	movs	r3, #0
 80097dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80097e0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80097e4:	460b      	mov	r3, r1
 80097e6:	4313      	orrs	r3, r2
 80097e8:	d058      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80097ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80097f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097f6:	d033      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80097f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097fc:	d82c      	bhi.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80097fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009802:	d02f      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009808:	d826      	bhi.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800980a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800980e:	d02b      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009810:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009814:	d820      	bhi.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009816:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800981a:	d012      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800981c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009820:	d81a      	bhi.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009822:	2b00      	cmp	r3, #0
 8009824:	d022      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009826:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800982a:	d115      	bne.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800982c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009830:	3308      	adds	r3, #8
 8009832:	2101      	movs	r1, #1
 8009834:	4618      	mov	r0, r3
 8009836:	f001 ffb1 	bl	800b79c <RCCEx_PLL2_Config>
 800983a:	4603      	mov	r3, r0
 800983c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009840:	e015      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009846:	3328      	adds	r3, #40	@ 0x28
 8009848:	2101      	movs	r1, #1
 800984a:	4618      	mov	r0, r3
 800984c:	f002 f858 	bl	800b900 <RCCEx_PLL3_Config>
 8009850:	4603      	mov	r3, r0
 8009852:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009856:	e00a      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800985e:	e006      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009860:	bf00      	nop
 8009862:	e004      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009864:	bf00      	nop
 8009866:	e002      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009868:	bf00      	nop
 800986a:	e000      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800986c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800986e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10e      	bne.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009876:	4b06      	ldr	r3, [pc, #24]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800987a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800987e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009882:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009886:	4a02      	ldr	r2, [pc, #8]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009888:	430b      	orrs	r3, r1
 800988a:	6593      	str	r3, [r2, #88]	@ 0x58
 800988c:	e006      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800988e:	bf00      	nop
 8009890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009894:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009898:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800989c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80098a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098ac:	2300      	movs	r3, #0
 80098ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80098b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80098b6:	460b      	mov	r3, r1
 80098b8:	4313      	orrs	r3, r2
 80098ba:	d037      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80098bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098c6:	d00e      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80098c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098cc:	d816      	bhi.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d018      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80098d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098d6:	d111      	bne.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098d8:	4bc4      	ldr	r3, [pc, #784]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098dc:	4ac3      	ldr	r2, [pc, #780]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80098e4:	e00f      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ea:	3308      	adds	r3, #8
 80098ec:	2101      	movs	r1, #1
 80098ee:	4618      	mov	r0, r3
 80098f0:	f001 ff54 	bl	800b79c <RCCEx_PLL2_Config>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80098fa:	e004      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009902:	e000      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009906:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10a      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800990e:	4bb7      	ldr	r3, [pc, #732]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009912:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800991a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800991c:	4ab3      	ldr	r2, [pc, #716]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800991e:	430b      	orrs	r3, r1
 8009920:	6513      	str	r3, [r2, #80]	@ 0x50
 8009922:	e003      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009928:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800992c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009938:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800993c:	2300      	movs	r3, #0
 800993e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009942:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009946:	460b      	mov	r3, r1
 8009948:	4313      	orrs	r3, r2
 800994a:	d039      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800994c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009952:	2b03      	cmp	r3, #3
 8009954:	d81c      	bhi.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009956:	a201      	add	r2, pc, #4	@ (adr r2, 800995c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995c:	08009999 	.word	0x08009999
 8009960:	0800996d 	.word	0x0800996d
 8009964:	0800997b 	.word	0x0800997b
 8009968:	08009999 	.word	0x08009999
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800996c:	4b9f      	ldr	r3, [pc, #636]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800996e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009970:	4a9e      	ldr	r2, [pc, #632]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009978:	e00f      	b.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800997a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800997e:	3308      	adds	r3, #8
 8009980:	2102      	movs	r1, #2
 8009982:	4618      	mov	r0, r3
 8009984:	f001 ff0a 	bl	800b79c <RCCEx_PLL2_Config>
 8009988:	4603      	mov	r3, r0
 800998a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800998e:	e004      	b.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009996:	e000      	b.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800999a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10a      	bne.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80099a2:	4b92      	ldr	r3, [pc, #584]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099a6:	f023 0103 	bic.w	r1, r3, #3
 80099aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099b0:	4a8e      	ldr	r2, [pc, #568]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099b2:	430b      	orrs	r3, r1
 80099b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80099b6:	e003      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80099c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80099cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099d0:	2300      	movs	r3, #0
 80099d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80099d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80099da:	460b      	mov	r3, r1
 80099dc:	4313      	orrs	r3, r2
 80099de:	f000 8099 	beq.w	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80099e2:	4b83      	ldr	r3, [pc, #524]	@ (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a82      	ldr	r2, [pc, #520]	@ (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80099e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099ee:	f7f9 fbc1 	bl	8003174 <HAL_GetTick>
 80099f2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099f6:	e00b      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099f8:	f7f9 fbbc 	bl	8003174 <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	2b64      	cmp	r3, #100	@ 0x64
 8009a06:	d903      	bls.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a0e:	e005      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a10:	4b77      	ldr	r3, [pc, #476]	@ (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d0ed      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d173      	bne.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009a24:	4b71      	ldr	r3, [pc, #452]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009a30:	4053      	eors	r3, r2
 8009a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d015      	beq.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a3a:	4b6c      	ldr	r3, [pc, #432]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a42:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a46:	4b69      	ldr	r3, [pc, #420]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a4a:	4a68      	ldr	r2, [pc, #416]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a50:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a52:	4b66      	ldr	r3, [pc, #408]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a56:	4a65      	ldr	r2, [pc, #404]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a5c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009a5e:	4a63      	ldr	r2, [pc, #396]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a64:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a72:	d118      	bne.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a74:	f7f9 fb7e 	bl	8003174 <HAL_GetTick>
 8009a78:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a7c:	e00d      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a7e:	f7f9 fb79 	bl	8003174 <HAL_GetTick>
 8009a82:	4602      	mov	r2, r0
 8009a84:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009a88:	1ad2      	subs	r2, r2, r3
 8009a8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d903      	bls.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009a98:	e005      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a9a:	4b54      	ldr	r3, [pc, #336]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a9e:	f003 0302 	and.w	r3, r3, #2
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0eb      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009aa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d129      	bne.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009ab6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009aba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009abe:	d10e      	bne.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009ac0:	4b4a      	ldr	r3, [pc, #296]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009acc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009ad0:	091a      	lsrs	r2, r3, #4
 8009ad2:	4b48      	ldr	r3, [pc, #288]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	4a45      	ldr	r2, [pc, #276]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ad8:	430b      	orrs	r3, r1
 8009ada:	6113      	str	r3, [r2, #16]
 8009adc:	e005      	b.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009ade:	4b43      	ldr	r3, [pc, #268]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	4a42      	ldr	r2, [pc, #264]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ae4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009ae8:	6113      	str	r3, [r2, #16]
 8009aea:	4b40      	ldr	r3, [pc, #256]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009aec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009afa:	4a3c      	ldr	r2, [pc, #240]	@ (8009bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009afc:	430b      	orrs	r3, r1
 8009afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b00:	e008      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009b0a:	e003      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	f002 0301 	and.w	r3, r2, #1
 8009b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b24:	2300      	movs	r3, #0
 8009b26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009b2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4313      	orrs	r3, r2
 8009b32:	f000 808f 	beq.w	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b3c:	2b28      	cmp	r3, #40	@ 0x28
 8009b3e:	d871      	bhi.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009b40:	a201      	add	r2, pc, #4	@ (adr r2, 8009b48 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b46:	bf00      	nop
 8009b48:	08009c2d 	.word	0x08009c2d
 8009b4c:	08009c25 	.word	0x08009c25
 8009b50:	08009c25 	.word	0x08009c25
 8009b54:	08009c25 	.word	0x08009c25
 8009b58:	08009c25 	.word	0x08009c25
 8009b5c:	08009c25 	.word	0x08009c25
 8009b60:	08009c25 	.word	0x08009c25
 8009b64:	08009c25 	.word	0x08009c25
 8009b68:	08009bf9 	.word	0x08009bf9
 8009b6c:	08009c25 	.word	0x08009c25
 8009b70:	08009c25 	.word	0x08009c25
 8009b74:	08009c25 	.word	0x08009c25
 8009b78:	08009c25 	.word	0x08009c25
 8009b7c:	08009c25 	.word	0x08009c25
 8009b80:	08009c25 	.word	0x08009c25
 8009b84:	08009c25 	.word	0x08009c25
 8009b88:	08009c0f 	.word	0x08009c0f
 8009b8c:	08009c25 	.word	0x08009c25
 8009b90:	08009c25 	.word	0x08009c25
 8009b94:	08009c25 	.word	0x08009c25
 8009b98:	08009c25 	.word	0x08009c25
 8009b9c:	08009c25 	.word	0x08009c25
 8009ba0:	08009c25 	.word	0x08009c25
 8009ba4:	08009c25 	.word	0x08009c25
 8009ba8:	08009c2d 	.word	0x08009c2d
 8009bac:	08009c25 	.word	0x08009c25
 8009bb0:	08009c25 	.word	0x08009c25
 8009bb4:	08009c25 	.word	0x08009c25
 8009bb8:	08009c25 	.word	0x08009c25
 8009bbc:	08009c25 	.word	0x08009c25
 8009bc0:	08009c25 	.word	0x08009c25
 8009bc4:	08009c25 	.word	0x08009c25
 8009bc8:	08009c2d 	.word	0x08009c2d
 8009bcc:	08009c25 	.word	0x08009c25
 8009bd0:	08009c25 	.word	0x08009c25
 8009bd4:	08009c25 	.word	0x08009c25
 8009bd8:	08009c25 	.word	0x08009c25
 8009bdc:	08009c25 	.word	0x08009c25
 8009be0:	08009c25 	.word	0x08009c25
 8009be4:	08009c25 	.word	0x08009c25
 8009be8:	08009c2d 	.word	0x08009c2d
 8009bec:	58024400 	.word	0x58024400
 8009bf0:	58024800 	.word	0x58024800
 8009bf4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	2101      	movs	r1, #1
 8009c00:	4618      	mov	r0, r3
 8009c02:	f001 fdcb 	bl	800b79c <RCCEx_PLL2_Config>
 8009c06:	4603      	mov	r3, r0
 8009c08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009c0c:	e00f      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c12:	3328      	adds	r3, #40	@ 0x28
 8009c14:	2101      	movs	r1, #1
 8009c16:	4618      	mov	r0, r3
 8009c18:	f001 fe72 	bl	800b900 <RCCEx_PLL3_Config>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009c22:	e004      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c2a:	e000      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10a      	bne.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009c36:	4bbf      	ldr	r3, [pc, #764]	@ (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c44:	4abb      	ldr	r2, [pc, #748]	@ (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009c46:	430b      	orrs	r3, r1
 8009c48:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c4a:	e003      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	f002 0302 	and.w	r3, r2, #2
 8009c60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c64:	2300      	movs	r3, #0
 8009c66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009c6e:	460b      	mov	r3, r1
 8009c70:	4313      	orrs	r3, r2
 8009c72:	d041      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c7a:	2b05      	cmp	r3, #5
 8009c7c:	d824      	bhi.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c84 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c84:	08009cd1 	.word	0x08009cd1
 8009c88:	08009c9d 	.word	0x08009c9d
 8009c8c:	08009cb3 	.word	0x08009cb3
 8009c90:	08009cd1 	.word	0x08009cd1
 8009c94:	08009cd1 	.word	0x08009cd1
 8009c98:	08009cd1 	.word	0x08009cd1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca0:	3308      	adds	r3, #8
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f001 fd79 	bl	800b79c <RCCEx_PLL2_Config>
 8009caa:	4603      	mov	r3, r0
 8009cac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009cb0:	e00f      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb6:	3328      	adds	r3, #40	@ 0x28
 8009cb8:	2101      	movs	r1, #1
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f001 fe20 	bl	800b900 <RCCEx_PLL3_Config>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009cc6:	e004      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009cce:	e000      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10a      	bne.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009cda:	4b96      	ldr	r3, [pc, #600]	@ (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cde:	f023 0107 	bic.w	r1, r3, #7
 8009ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ce8:	4a92      	ldr	r2, [pc, #584]	@ (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009cea:	430b      	orrs	r3, r1
 8009cec:	6553      	str	r3, [r2, #84]	@ 0x54
 8009cee:	e003      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f002 0304 	and.w	r3, r2, #4
 8009d04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d0e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d12:	460b      	mov	r3, r1
 8009d14:	4313      	orrs	r3, r2
 8009d16:	d044      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d20:	2b05      	cmp	r3, #5
 8009d22:	d825      	bhi.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009d24:	a201      	add	r2, pc, #4	@ (adr r2, 8009d2c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2a:	bf00      	nop
 8009d2c:	08009d79 	.word	0x08009d79
 8009d30:	08009d45 	.word	0x08009d45
 8009d34:	08009d5b 	.word	0x08009d5b
 8009d38:	08009d79 	.word	0x08009d79
 8009d3c:	08009d79 	.word	0x08009d79
 8009d40:	08009d79 	.word	0x08009d79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d48:	3308      	adds	r3, #8
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f001 fd25 	bl	800b79c <RCCEx_PLL2_Config>
 8009d52:	4603      	mov	r3, r0
 8009d54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009d58:	e00f      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d5e:	3328      	adds	r3, #40	@ 0x28
 8009d60:	2101      	movs	r1, #1
 8009d62:	4618      	mov	r0, r3
 8009d64:	f001 fdcc 	bl	800b900 <RCCEx_PLL3_Config>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009d6e:	e004      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d76:	e000      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10b      	bne.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d82:	4b6c      	ldr	r3, [pc, #432]	@ (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d86:	f023 0107 	bic.w	r1, r3, #7
 8009d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d92:	4a68      	ldr	r2, [pc, #416]	@ (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009d94:	430b      	orrs	r3, r1
 8009d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d98:	e003      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	f002 0320 	and.w	r3, r2, #32
 8009dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009db2:	2300      	movs	r3, #0
 8009db4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009db8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	d055      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009dce:	d033      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009dd4:	d82c      	bhi.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dda:	d02f      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009de0:	d826      	bhi.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009de2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009de6:	d02b      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009de8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009dec:	d820      	bhi.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009df2:	d012      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009df8:	d81a      	bhi.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d022      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009dfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e02:	d115      	bne.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e08:	3308      	adds	r3, #8
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f001 fcc5 	bl	800b79c <RCCEx_PLL2_Config>
 8009e12:	4603      	mov	r3, r0
 8009e14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009e18:	e015      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e1e:	3328      	adds	r3, #40	@ 0x28
 8009e20:	2102      	movs	r1, #2
 8009e22:	4618      	mov	r0, r3
 8009e24:	f001 fd6c 	bl	800b900 <RCCEx_PLL3_Config>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009e2e:	e00a      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e36:	e006      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009e38:	bf00      	nop
 8009e3a:	e004      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009e3c:	bf00      	nop
 8009e3e:	e002      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009e40:	bf00      	nop
 8009e42:	e000      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10b      	bne.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e4e:	4b39      	ldr	r3, [pc, #228]	@ (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e52:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e5e:	4a35      	ldr	r2, [pc, #212]	@ (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009e60:	430b      	orrs	r3, r1
 8009e62:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e64:	e003      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009e7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e84:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009e88:	460b      	mov	r3, r1
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	d058      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e96:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009e9a:	d033      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009e9c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009ea0:	d82c      	bhi.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ea6:	d02f      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009eac:	d826      	bhi.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009eae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009eb2:	d02b      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009eb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009eb8:	d820      	bhi.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009eba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ebe:	d012      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ec4:	d81a      	bhi.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d022      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ece:	d115      	bne.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed4:	3308      	adds	r3, #8
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f001 fc5f 	bl	800b79c <RCCEx_PLL2_Config>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ee4:	e015      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eea:	3328      	adds	r3, #40	@ 0x28
 8009eec:	2102      	movs	r1, #2
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f001 fd06 	bl	800b900 <RCCEx_PLL3_Config>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009efa:	e00a      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f02:	e006      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009f04:	bf00      	nop
 8009f06:	e004      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009f08:	bf00      	nop
 8009f0a:	e002      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009f0c:	bf00      	nop
 8009f0e:	e000      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10e      	bne.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f1a:	4b06      	ldr	r3, [pc, #24]	@ (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f1e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f2a:	4a02      	ldr	r2, [pc, #8]	@ (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f2c:	430b      	orrs	r3, r1
 8009f2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f30:	e006      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009f32:	bf00      	nop
 8009f34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009f4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f50:	2300      	movs	r3, #0
 8009f52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	d055      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f68:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009f6c:	d033      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009f6e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009f72:	d82c      	bhi.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f78:	d02f      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009f7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f7e:	d826      	bhi.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009f80:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009f84:	d02b      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009f86:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009f8a:	d820      	bhi.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009f8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f90:	d012      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009f92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f96:	d81a      	bhi.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d022      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009f9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fa0:	d115      	bne.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa6:	3308      	adds	r3, #8
 8009fa8:	2100      	movs	r1, #0
 8009faa:	4618      	mov	r0, r3
 8009fac:	f001 fbf6 	bl	800b79c <RCCEx_PLL2_Config>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009fb6:	e015      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fbc:	3328      	adds	r3, #40	@ 0x28
 8009fbe:	2102      	movs	r1, #2
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f001 fc9d 	bl	800b900 <RCCEx_PLL3_Config>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009fcc:	e00a      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009fd4:	e006      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009fd6:	bf00      	nop
 8009fd8:	e004      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009fda:	bf00      	nop
 8009fdc:	e002      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009fde:	bf00      	nop
 8009fe0:	e000      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fe4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10b      	bne.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009fec:	4ba0      	ldr	r3, [pc, #640]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ff0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ffc:	4a9c      	ldr	r2, [pc, #624]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ffe:	430b      	orrs	r3, r1
 800a000:	6593      	str	r3, [r2, #88]	@ 0x58
 800a002:	e003      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a004:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a008:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a00c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	f002 0308 	and.w	r3, r2, #8
 800a018:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a01c:	2300      	movs	r3, #0
 800a01e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a022:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a026:	460b      	mov	r3, r1
 800a028:	4313      	orrs	r3, r2
 800a02a:	d01e      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a038:	d10c      	bne.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a03e:	3328      	adds	r3, #40	@ 0x28
 800a040:	2102      	movs	r1, #2
 800a042:	4618      	mov	r0, r3
 800a044:	f001 fc5c 	bl	800b900 <RCCEx_PLL3_Config>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d002      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a054:	4b86      	ldr	r3, [pc, #536]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a058:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a064:	4a82      	ldr	r2, [pc, #520]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a066:	430b      	orrs	r3, r1
 800a068:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f002 0310 	and.w	r3, r2, #16
 800a076:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a07a:	2300      	movs	r3, #0
 800a07c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a080:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a084:	460b      	mov	r3, r1
 800a086:	4313      	orrs	r3, r2
 800a088:	d01e      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a08e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a096:	d10c      	bne.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a09c:	3328      	adds	r3, #40	@ 0x28
 800a09e:	2102      	movs	r1, #2
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f001 fc2d 	bl	800b900 <RCCEx_PLL3_Config>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a0b2:	4b6f      	ldr	r3, [pc, #444]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a0b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a0c2:	4a6b      	ldr	r2, [pc, #428]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a0c4:	430b      	orrs	r3, r1
 800a0c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a0d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a0da:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	d03e      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a0ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0f0:	d022      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a0f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0f6:	d81b      	bhi.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d003      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a0fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a100:	d00b      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a102:	e015      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a108:	3308      	adds	r3, #8
 800a10a:	2100      	movs	r1, #0
 800a10c:	4618      	mov	r0, r3
 800a10e:	f001 fb45 	bl	800b79c <RCCEx_PLL2_Config>
 800a112:	4603      	mov	r3, r0
 800a114:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a118:	e00f      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a11e:	3328      	adds	r3, #40	@ 0x28
 800a120:	2102      	movs	r1, #2
 800a122:	4618      	mov	r0, r3
 800a124:	f001 fbec 	bl	800b900 <RCCEx_PLL3_Config>
 800a128:	4603      	mov	r3, r0
 800a12a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a12e:	e004      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a136:	e000      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a13a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10b      	bne.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a142:	4b4b      	ldr	r3, [pc, #300]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a146:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a14e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a152:	4a47      	ldr	r2, [pc, #284]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a154:	430b      	orrs	r3, r1
 800a156:	6593      	str	r3, [r2, #88]	@ 0x58
 800a158:	e003      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a15a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a15e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a16e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a170:	2300      	movs	r3, #0
 800a172:	677b      	str	r3, [r7, #116]	@ 0x74
 800a174:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a178:	460b      	mov	r3, r1
 800a17a:	4313      	orrs	r3, r2
 800a17c:	d03b      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a186:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a18a:	d01f      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a18c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a190:	d818      	bhi.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a192:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a196:	d003      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a198:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a19c:	d007      	beq.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a19e:	e011      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1a0:	4b33      	ldr	r3, [pc, #204]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a4:	4a32      	ldr	r2, [pc, #200]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a1ac:	e00f      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b2:	3328      	adds	r3, #40	@ 0x28
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f001 fba2 	bl	800b900 <RCCEx_PLL3_Config>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a1c2:	e004      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1ca:	e000      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a1cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10b      	bne.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a1d6:	4b26      	ldr	r3, [pc, #152]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1e6:	4a22      	ldr	r2, [pc, #136]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1e8:	430b      	orrs	r3, r1
 800a1ea:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1ec:	e003      	b.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a1f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a202:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a204:	2300      	movs	r3, #0
 800a206:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a208:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a20c:	460b      	mov	r3, r1
 800a20e:	4313      	orrs	r3, r2
 800a210:	d034      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d003      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a21c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a220:	d007      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a222:	e011      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a224:	4b12      	ldr	r3, [pc, #72]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a228:	4a11      	ldr	r2, [pc, #68]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a22a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a22e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a230:	e00e      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a236:	3308      	adds	r3, #8
 800a238:	2102      	movs	r1, #2
 800a23a:	4618      	mov	r0, r3
 800a23c:	f001 faae 	bl	800b79c <RCCEx_PLL2_Config>
 800a240:	4603      	mov	r3, r0
 800a242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a246:	e003      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a24e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a250:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10d      	bne.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a258:	4b05      	ldr	r3, [pc, #20]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a25a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a25c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a266:	4a02      	ldr	r2, [pc, #8]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a268:	430b      	orrs	r3, r1
 800a26a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a26c:	e006      	b.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a26e:	bf00      	nop
 800a270:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a274:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a278:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a288:	663b      	str	r3, [r7, #96]	@ 0x60
 800a28a:	2300      	movs	r3, #0
 800a28c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a28e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a292:	460b      	mov	r3, r1
 800a294:	4313      	orrs	r3, r2
 800a296:	d00c      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a29c:	3328      	adds	r3, #40	@ 0x28
 800a29e:	2102      	movs	r1, #2
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f001 fb2d 	bl	800b900 <RCCEx_PLL3_Config>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a2be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2c4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	d036      	beq.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2d8:	d018      	beq.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a2da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2de:	d811      	bhi.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a2e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2e4:	d014      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a2e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2ea:	d80b      	bhi.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d011      	beq.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a2f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2f4:	d106      	bne.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2f6:	4bb7      	ldr	r3, [pc, #732]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2fa:	4ab6      	ldr	r2, [pc, #728]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a2fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a300:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a302:	e008      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a30a:	e004      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a30c:	bf00      	nop
 800a30e:	e002      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a310:	bf00      	nop
 800a312:	e000      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a314:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a316:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10a      	bne.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a31e:	4bad      	ldr	r3, [pc, #692]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a322:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a32a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a32c:	4aa9      	ldr	r2, [pc, #676]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a32e:	430b      	orrs	r3, r1
 800a330:	6553      	str	r3, [r2, #84]	@ 0x54
 800a332:	e003      	b.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a334:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a338:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a33c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a344:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a348:	653b      	str	r3, [r7, #80]	@ 0x50
 800a34a:	2300      	movs	r3, #0
 800a34c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a34e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a352:	460b      	mov	r3, r1
 800a354:	4313      	orrs	r3, r2
 800a356:	d009      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a358:	4b9e      	ldr	r3, [pc, #632]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a35a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a35c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a366:	4a9b      	ldr	r2, [pc, #620]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a368:	430b      	orrs	r3, r1
 800a36a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a37a:	2300      	movs	r3, #0
 800a37c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a37e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a382:	460b      	mov	r3, r1
 800a384:	4313      	orrs	r3, r2
 800a386:	d009      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a388:	4b92      	ldr	r3, [pc, #584]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a38a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a38c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a396:	4a8f      	ldr	r2, [pc, #572]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a398:	430b      	orrs	r3, r1
 800a39a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a3a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	d00e      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a3b8:	4b86      	ldr	r3, [pc, #536]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	4a85      	ldr	r2, [pc, #532]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a3c2:	6113      	str	r3, [r2, #16]
 800a3c4:	4b83      	ldr	r3, [pc, #524]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3c6:	6919      	ldr	r1, [r3, #16]
 800a3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a3d0:	4a80      	ldr	r2, [pc, #512]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3d2:	430b      	orrs	r3, r1
 800a3d4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a3e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	d009      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a3f2:	4b78      	ldr	r3, [pc, #480]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a400:	4a74      	ldr	r2, [pc, #464]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a402:	430b      	orrs	r3, r1
 800a404:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a412:	633b      	str	r3, [r7, #48]	@ 0x30
 800a414:	2300      	movs	r3, #0
 800a416:	637b      	str	r3, [r7, #52]	@ 0x34
 800a418:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a41c:	460b      	mov	r3, r1
 800a41e:	4313      	orrs	r3, r2
 800a420:	d00a      	beq.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a422:	4b6c      	ldr	r3, [pc, #432]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a426:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a432:	4a68      	ldr	r2, [pc, #416]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a434:	430b      	orrs	r3, r1
 800a436:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a440:	2100      	movs	r1, #0
 800a442:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a444:	f003 0301 	and.w	r3, r3, #1
 800a448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a44a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a44e:	460b      	mov	r3, r1
 800a450:	4313      	orrs	r3, r2
 800a452:	d011      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a458:	3308      	adds	r3, #8
 800a45a:	2100      	movs	r1, #0
 800a45c:	4618      	mov	r0, r3
 800a45e:	f001 f99d 	bl	800b79c <RCCEx_PLL2_Config>
 800a462:	4603      	mov	r3, r0
 800a464:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a468:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d003      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a470:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a474:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a480:	2100      	movs	r1, #0
 800a482:	6239      	str	r1, [r7, #32]
 800a484:	f003 0302 	and.w	r3, r3, #2
 800a488:	627b      	str	r3, [r7, #36]	@ 0x24
 800a48a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a48e:	460b      	mov	r3, r1
 800a490:	4313      	orrs	r3, r2
 800a492:	d011      	beq.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a498:	3308      	adds	r3, #8
 800a49a:	2101      	movs	r1, #1
 800a49c:	4618      	mov	r0, r3
 800a49e:	f001 f97d 	bl	800b79c <RCCEx_PLL2_Config>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a4a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d003      	beq.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	61b9      	str	r1, [r7, #24]
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	61fb      	str	r3, [r7, #28]
 800a4ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	d011      	beq.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4d8:	3308      	adds	r3, #8
 800a4da:	2102      	movs	r1, #2
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f001 f95d 	bl	800b79c <RCCEx_PLL2_Config>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a4e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d003      	beq.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a500:	2100      	movs	r1, #0
 800a502:	6139      	str	r1, [r7, #16]
 800a504:	f003 0308 	and.w	r3, r3, #8
 800a508:	617b      	str	r3, [r7, #20]
 800a50a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a50e:	460b      	mov	r3, r1
 800a510:	4313      	orrs	r3, r2
 800a512:	d011      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a518:	3328      	adds	r3, #40	@ 0x28
 800a51a:	2100      	movs	r1, #0
 800a51c:	4618      	mov	r0, r3
 800a51e:	f001 f9ef 	bl	800b900 <RCCEx_PLL3_Config>
 800a522:	4603      	mov	r3, r0
 800a524:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a528:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d003      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a530:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a534:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	2100      	movs	r1, #0
 800a542:	60b9      	str	r1, [r7, #8]
 800a544:	f003 0310 	and.w	r3, r3, #16
 800a548:	60fb      	str	r3, [r7, #12]
 800a54a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a54e:	460b      	mov	r3, r1
 800a550:	4313      	orrs	r3, r2
 800a552:	d011      	beq.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a558:	3328      	adds	r3, #40	@ 0x28
 800a55a:	2101      	movs	r1, #1
 800a55c:	4618      	mov	r0, r3
 800a55e:	f001 f9cf 	bl	800b900 <RCCEx_PLL3_Config>
 800a562:	4603      	mov	r3, r0
 800a564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a568:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d003      	beq.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a570:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a574:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a580:	2100      	movs	r1, #0
 800a582:	6039      	str	r1, [r7, #0]
 800a584:	f003 0320 	and.w	r3, r3, #32
 800a588:	607b      	str	r3, [r7, #4]
 800a58a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a58e:	460b      	mov	r3, r1
 800a590:	4313      	orrs	r3, r2
 800a592:	d011      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a598:	3328      	adds	r3, #40	@ 0x28
 800a59a:	2102      	movs	r1, #2
 800a59c:	4618      	mov	r0, r3
 800a59e:	f001 f9af 	bl	800b900 <RCCEx_PLL3_Config>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a5a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d003      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a5b8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d101      	bne.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	e000      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5d2:	bf00      	nop
 800a5d4:	58024400 	.word	0x58024400

0800a5d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b090      	sub	sp, #64	@ 0x40
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a5e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5e6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a5ea:	430b      	orrs	r3, r1
 800a5ec:	f040 8094 	bne.w	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a5f0:	4b9b      	ldr	r3, [pc, #620]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a5f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5f4:	f003 0307 	and.w	r3, r3, #7
 800a5f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fc:	2b04      	cmp	r3, #4
 800a5fe:	f200 8087 	bhi.w	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a602:	a201      	add	r2, pc, #4	@ (adr r2, 800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a608:	0800a61d 	.word	0x0800a61d
 800a60c:	0800a645 	.word	0x0800a645
 800a610:	0800a66d 	.word	0x0800a66d
 800a614:	0800a709 	.word	0x0800a709
 800a618:	0800a695 	.word	0x0800a695
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a61c:	4b90      	ldr	r3, [pc, #576]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a628:	d108      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a62a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 ff62 	bl	800b4f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a638:	f000 bc93 	b.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a640:	f000 bc8f 	b.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a644:	4b86      	ldr	r3, [pc, #536]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a64c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a650:	d108      	bne.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a652:	f107 0318 	add.w	r3, r7, #24
 800a656:	4618      	mov	r0, r3
 800a658:	f000 fca6 	bl	800afa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a660:	f000 bc7f 	b.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a664:	2300      	movs	r3, #0
 800a666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a668:	f000 bc7b 	b.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a66c:	4b7c      	ldr	r3, [pc, #496]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a678:	d108      	bne.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a67a:	f107 030c 	add.w	r3, r7, #12
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 fde6 	bl	800b250 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a688:	f000 bc6b 	b.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a68c:	2300      	movs	r3, #0
 800a68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a690:	f000 bc67 	b.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a694:	4b72      	ldr	r3, [pc, #456]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a698:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a69c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a69e:	4b70      	ldr	r3, [pc, #448]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 0304 	and.w	r3, r3, #4
 800a6a6:	2b04      	cmp	r3, #4
 800a6a8:	d10c      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a6aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d109      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6b0:	4b6b      	ldr	r3, [pc, #428]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	08db      	lsrs	r3, r3, #3
 800a6b6:	f003 0303 	and.w	r3, r3, #3
 800a6ba:	4a6a      	ldr	r2, [pc, #424]	@ (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6c2:	e01f      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6c4:	4b66      	ldr	r3, [pc, #408]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6d0:	d106      	bne.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a6d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6d8:	d102      	bne.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6da:	4b63      	ldr	r3, [pc, #396]	@ (800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6de:	e011      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6e0:	4b5f      	ldr	r3, [pc, #380]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6ec:	d106      	bne.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a6ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6f4:	d102      	bne.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6f6:	4b5d      	ldr	r3, [pc, #372]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6fa:	e003      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a700:	f000 bc2f 	b.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a704:	f000 bc2d 	b.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a708:	4b59      	ldr	r3, [pc, #356]	@ (800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a70c:	f000 bc29 	b.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a710:	2300      	movs	r3, #0
 800a712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a714:	f000 bc25 	b.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a71c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a720:	430b      	orrs	r3, r1
 800a722:	f040 80a7 	bne.w	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a726:	4b4e      	ldr	r3, [pc, #312]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a72a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a72e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a732:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a736:	d054      	beq.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a73e:	f200 808b 	bhi.w	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a744:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a748:	f000 8083 	beq.w	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a752:	f200 8081 	bhi.w	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a758:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a75c:	d02f      	beq.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a764:	d878      	bhi.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d004      	beq.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a772:	d012      	beq.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a774:	e070      	b.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a776:	4b3a      	ldr	r3, [pc, #232]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a77e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a782:	d107      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 feb5 	bl	800b4f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a792:	e3e6      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a794:	2300      	movs	r3, #0
 800a796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a798:	e3e3      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a79a:	4b31      	ldr	r3, [pc, #196]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7a6:	d107      	bne.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7a8:	f107 0318 	add.w	r3, r7, #24
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 fbfb 	bl	800afa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b6:	e3d4      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7bc:	e3d1      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7be:	4b28      	ldr	r3, [pc, #160]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ca:	d107      	bne.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7cc:	f107 030c 	add.w	r3, r7, #12
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 fd3d 	bl	800b250 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7da:	e3c2      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e0:	e3bf      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7e2:	4b1f      	ldr	r3, [pc, #124]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7ec:	4b1c      	ldr	r3, [pc, #112]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0304 	and.w	r3, r3, #4
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	d10c      	bne.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a7f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d109      	bne.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7fe:	4b18      	ldr	r3, [pc, #96]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	08db      	lsrs	r3, r3, #3
 800a804:	f003 0303 	and.w	r3, r3, #3
 800a808:	4a16      	ldr	r2, [pc, #88]	@ (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a80a:	fa22 f303 	lsr.w	r3, r2, r3
 800a80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a810:	e01e      	b.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a812:	4b13      	ldr	r3, [pc, #76]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a81a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a81e:	d106      	bne.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a822:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a826:	d102      	bne.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a828:	4b0f      	ldr	r3, [pc, #60]	@ (800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a82c:	e010      	b.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a82e:	4b0c      	ldr	r3, [pc, #48]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a836:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a83a:	d106      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a83e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a842:	d102      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a844:	4b09      	ldr	r3, [pc, #36]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a846:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a848:	e002      	b.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a84a:	2300      	movs	r3, #0
 800a84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a84e:	e388      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a850:	e387      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a852:	4b07      	ldr	r3, [pc, #28]	@ (800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a856:	e384      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a85c:	e381      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a85e:	bf00      	nop
 800a860:	58024400 	.word	0x58024400
 800a864:	03d09000 	.word	0x03d09000
 800a868:	003d0900 	.word	0x003d0900
 800a86c:	016e3600 	.word	0x016e3600
 800a870:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a874:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a878:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a87c:	430b      	orrs	r3, r1
 800a87e:	f040 809c 	bne.w	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a882:	4b9e      	ldr	r3, [pc, #632]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a886:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a88a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a892:	d054      	beq.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a896:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a89a:	f200 808b 	bhi.w	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8a4:	f000 8083 	beq.w	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8ae:	f200 8081 	bhi.w	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8b8:	d02f      	beq.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8c0:	d878      	bhi.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d004      	beq.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8ce:	d012      	beq.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a8d0:	e070      	b.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8d2:	4b8a      	ldr	r3, [pc, #552]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8de:	d107      	bne.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 fe07 	bl	800b4f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ee:	e338      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f4:	e335      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8f6:	4b81      	ldr	r3, [pc, #516]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a902:	d107      	bne.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a904:	f107 0318 	add.w	r3, r7, #24
 800a908:	4618      	mov	r0, r3
 800a90a:	f000 fb4d 	bl	800afa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a912:	e326      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a918:	e323      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a91a:	4b78      	ldr	r3, [pc, #480]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a926:	d107      	bne.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a928:	f107 030c 	add.w	r3, r7, #12
 800a92c:	4618      	mov	r0, r3
 800a92e:	f000 fc8f 	bl	800b250 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a936:	e314      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a93c:	e311      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a93e:	4b6f      	ldr	r3, [pc, #444]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a942:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a946:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a948:	4b6c      	ldr	r3, [pc, #432]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 0304 	and.w	r3, r3, #4
 800a950:	2b04      	cmp	r3, #4
 800a952:	d10c      	bne.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a956:	2b00      	cmp	r3, #0
 800a958:	d109      	bne.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a95a:	4b68      	ldr	r3, [pc, #416]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	08db      	lsrs	r3, r3, #3
 800a960:	f003 0303 	and.w	r3, r3, #3
 800a964:	4a66      	ldr	r2, [pc, #408]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a966:	fa22 f303 	lsr.w	r3, r2, r3
 800a96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a96c:	e01e      	b.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a96e:	4b63      	ldr	r3, [pc, #396]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a97a:	d106      	bne.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a97e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a982:	d102      	bne.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a984:	4b5f      	ldr	r3, [pc, #380]	@ (800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a988:	e010      	b.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a98a:	4b5c      	ldr	r3, [pc, #368]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a996:	d106      	bne.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a99a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a99e:	d102      	bne.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9a0:	4b59      	ldr	r3, [pc, #356]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9a4:	e002      	b.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a9aa:	e2da      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a9ac:	e2d9      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a9ae:	4b57      	ldr	r3, [pc, #348]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b2:	e2d6      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b8:	e2d3      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a9ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9be:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a9c2:	430b      	orrs	r3, r1
 800a9c4:	f040 80a7 	bne.w	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a9c8:	4b4c      	ldr	r3, [pc, #304]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a9ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9cc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a9d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9d8:	d055      	beq.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9e0:	f200 8096 	bhi.w	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a9ea:	f000 8084 	beq.w	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a9f4:	f200 808c 	bhi.w	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9fe:	d030      	beq.n	800aa62 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800aa00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa06:	f200 8083 	bhi.w	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800aa0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d004      	beq.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800aa10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa16:	d012      	beq.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800aa18:	e07a      	b.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa1a:	4b38      	ldr	r3, [pc, #224]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa26:	d107      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 fd63 	bl	800b4f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa36:	e294      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa3c:	e291      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa3e:	4b2f      	ldr	r3, [pc, #188]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa4a:	d107      	bne.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa4c:	f107 0318 	add.w	r3, r7, #24
 800aa50:	4618      	mov	r0, r3
 800aa52:	f000 faa9 	bl	800afa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa5a:	e282      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa60:	e27f      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa62:	4b26      	ldr	r3, [pc, #152]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa6e:	d107      	bne.n	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa70:	f107 030c 	add.w	r3, r7, #12
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 fbeb 	bl	800b250 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa7e:	e270      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa80:	2300      	movs	r3, #0
 800aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa84:	e26d      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa86:	4b1d      	ldr	r3, [pc, #116]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa8e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa90:	4b1a      	ldr	r3, [pc, #104]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 0304 	and.w	r3, r3, #4
 800aa98:	2b04      	cmp	r3, #4
 800aa9a:	d10c      	bne.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800aa9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d109      	bne.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaa2:	4b16      	ldr	r3, [pc, #88]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	08db      	lsrs	r3, r3, #3
 800aaa8:	f003 0303 	and.w	r3, r3, #3
 800aaac:	4a14      	ldr	r2, [pc, #80]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800aaae:	fa22 f303 	lsr.w	r3, r2, r3
 800aab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aab4:	e01e      	b.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aab6:	4b11      	ldr	r3, [pc, #68]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aabe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aac2:	d106      	bne.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800aac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aaca:	d102      	bne.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aacc:	4b0d      	ldr	r3, [pc, #52]	@ (800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800aace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aad0:	e010      	b.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aad2:	4b0a      	ldr	r3, [pc, #40]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aada:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aade:	d106      	bne.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800aae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aae6:	d102      	bne.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aae8:	4b07      	ldr	r3, [pc, #28]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aaea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaec:	e002      	b.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aaf2:	e236      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aaf4:	e235      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aaf6:	4b05      	ldr	r3, [pc, #20]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aaf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aafa:	e232      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aafc:	58024400 	.word	0x58024400
 800ab00:	03d09000 	.word	0x03d09000
 800ab04:	003d0900 	.word	0x003d0900
 800ab08:	016e3600 	.word	0x016e3600
 800ab0c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab14:	e225      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ab16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab1a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ab1e:	430b      	orrs	r3, r1
 800ab20:	f040 8085 	bne.w	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ab24:	4b9c      	ldr	r3, [pc, #624]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab28:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ab2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ab2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab34:	d06b      	beq.n	800ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ab36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab3c:	d874      	bhi.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ab3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab44:	d056      	beq.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800ab46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab4c:	d86c      	bhi.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ab4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab54:	d03b      	beq.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800ab56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab5c:	d864      	bhi.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ab5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab64:	d021      	beq.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ab66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab6c:	d85c      	bhi.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ab6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d004      	beq.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800ab74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab7a:	d004      	beq.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800ab7c:	e054      	b.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ab7e:	f7fe fb5f 	bl	8009240 <HAL_RCC_GetPCLK1Freq>
 800ab82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab84:	e1ed      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab86:	4b84      	ldr	r3, [pc, #528]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab92:	d107      	bne.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab94:	f107 0318 	add.w	r3, r7, #24
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f000 fa05 	bl	800afa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aba2:	e1de      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aba8:	e1db      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abaa:	4b7b      	ldr	r3, [pc, #492]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abb6:	d107      	bne.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abb8:	f107 030c 	add.w	r3, r7, #12
 800abbc:	4618      	mov	r0, r3
 800abbe:	f000 fb47 	bl	800b250 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abc6:	e1cc      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abc8:	2300      	movs	r3, #0
 800abca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abcc:	e1c9      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abce:	4b72      	ldr	r3, [pc, #456]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f003 0304 	and.w	r3, r3, #4
 800abd6:	2b04      	cmp	r3, #4
 800abd8:	d109      	bne.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abda:	4b6f      	ldr	r3, [pc, #444]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	08db      	lsrs	r3, r3, #3
 800abe0:	f003 0303 	and.w	r3, r3, #3
 800abe4:	4a6d      	ldr	r2, [pc, #436]	@ (800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800abe6:	fa22 f303 	lsr.w	r3, r2, r3
 800abea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abec:	e1b9      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abee:	2300      	movs	r3, #0
 800abf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf2:	e1b6      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800abf4:	4b68      	ldr	r3, [pc, #416]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac00:	d102      	bne.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800ac02:	4b67      	ldr	r3, [pc, #412]	@ (800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ac04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac06:	e1ac      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac0c:	e1a9      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac0e:	4b62      	ldr	r3, [pc, #392]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac1a:	d102      	bne.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800ac1c:	4b61      	ldr	r3, [pc, #388]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ac1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac20:	e19f      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac22:	2300      	movs	r3, #0
 800ac24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac26:	e19c      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac2c:	e199      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ac2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac32:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ac36:	430b      	orrs	r3, r1
 800ac38:	d173      	bne.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ac3a:	4b57      	ldr	r3, [pc, #348]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ac42:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac4a:	d02f      	beq.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800ac4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac52:	d863      	bhi.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800ac54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d004      	beq.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800ac5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac60:	d012      	beq.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800ac62:	e05b      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac64:	4b4c      	ldr	r3, [pc, #304]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac70:	d107      	bne.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac72:	f107 0318 	add.w	r3, r7, #24
 800ac76:	4618      	mov	r0, r3
 800ac78:	f000 f996 	bl	800afa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac80:	e16f      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac82:	2300      	movs	r3, #0
 800ac84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac86:	e16c      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac88:	4b43      	ldr	r3, [pc, #268]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac94:	d107      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac96:	f107 030c 	add.w	r3, r7, #12
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f000 fad8 	bl	800b250 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aca4:	e15d      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acaa:	e15a      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acac:	4b3a      	ldr	r3, [pc, #232]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800acae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800acb4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acb6:	4b38      	ldr	r3, [pc, #224]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 0304 	and.w	r3, r3, #4
 800acbe:	2b04      	cmp	r3, #4
 800acc0:	d10c      	bne.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800acc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d109      	bne.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acc8:	4b33      	ldr	r3, [pc, #204]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	08db      	lsrs	r3, r3, #3
 800acce:	f003 0303 	and.w	r3, r3, #3
 800acd2:	4a32      	ldr	r2, [pc, #200]	@ (800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800acd4:	fa22 f303 	lsr.w	r3, r2, r3
 800acd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acda:	e01e      	b.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acdc:	4b2e      	ldr	r3, [pc, #184]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ace4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ace8:	d106      	bne.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800acea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acf0:	d102      	bne.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acf2:	4b2b      	ldr	r3, [pc, #172]	@ (800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800acf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acf6:	e010      	b.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acf8:	4b27      	ldr	r3, [pc, #156]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad04:	d106      	bne.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800ad06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad0c:	d102      	bne.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad0e:	4b25      	ldr	r3, [pc, #148]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ad10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad12:	e002      	b.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad14:	2300      	movs	r3, #0
 800ad16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad18:	e123      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad1a:	e122      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad20:	e11f      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ad22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad26:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ad2a:	430b      	orrs	r3, r1
 800ad2c:	d13c      	bne.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ad2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad36:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d004      	beq.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad44:	d012      	beq.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800ad46:	e023      	b.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad48:	4b13      	ldr	r3, [pc, #76]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad54:	d107      	bne.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 fbcc 	bl	800b4f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad64:	e0fd      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad6a:	e0fa      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad78:	d107      	bne.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad7a:	f107 0318 	add.w	r3, r7, #24
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 f912 	bl	800afa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ad84:	6a3b      	ldr	r3, [r7, #32]
 800ad86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad88:	e0eb      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad8e:	e0e8      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad94:	e0e5      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad96:	bf00      	nop
 800ad98:	58024400 	.word	0x58024400
 800ad9c:	03d09000 	.word	0x03d09000
 800ada0:	003d0900 	.word	0x003d0900
 800ada4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ada8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adac:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800adb0:	430b      	orrs	r3, r1
 800adb2:	f040 8085 	bne.w	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800adb6:	4b6d      	ldr	r3, [pc, #436]	@ (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800adbe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800adc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adc6:	d06b      	beq.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800adc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adce:	d874      	bhi.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800add0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800add6:	d056      	beq.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800add8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adde:	d86c      	bhi.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ade0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ade6:	d03b      	beq.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800ade8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adee:	d864      	bhi.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800adf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adf6:	d021      	beq.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800adf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adfe:	d85c      	bhi.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ae00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d004      	beq.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800ae06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae0c:	d004      	beq.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ae0e:	e054      	b.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ae10:	f000 f8b4 	bl	800af7c <HAL_RCCEx_GetD3PCLK1Freq>
 800ae14:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae16:	e0a4      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae18:	4b54      	ldr	r3, [pc, #336]	@ (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae24:	d107      	bne.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae26:	f107 0318 	add.w	r3, r7, #24
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f000 f8bc 	bl	800afa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae34:	e095      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae3a:	e092      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae3c:	4b4b      	ldr	r3, [pc, #300]	@ (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae48:	d107      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae4a:	f107 030c 	add.w	r3, r7, #12
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 f9fe 	bl	800b250 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae58:	e083      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae5e:	e080      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae60:	4b42      	ldr	r3, [pc, #264]	@ (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 0304 	and.w	r3, r3, #4
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d109      	bne.n	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae6c:	4b3f      	ldr	r3, [pc, #252]	@ (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	08db      	lsrs	r3, r3, #3
 800ae72:	f003 0303 	and.w	r3, r3, #3
 800ae76:	4a3e      	ldr	r2, [pc, #248]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ae78:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae7e:	e070      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae80:	2300      	movs	r3, #0
 800ae82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae84:	e06d      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae86:	4b39      	ldr	r3, [pc, #228]	@ (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae92:	d102      	bne.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800ae94:	4b37      	ldr	r3, [pc, #220]	@ (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ae96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae98:	e063      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae9e:	e060      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aea0:	4b32      	ldr	r3, [pc, #200]	@ (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aea8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeac:	d102      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800aeae:	4b32      	ldr	r3, [pc, #200]	@ (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aeb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeb2:	e056      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeb8:	e053      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aebe:	e050      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aec4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800aec8:	430b      	orrs	r3, r1
 800aeca:	d148      	bne.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aecc:	4b27      	ldr	r3, [pc, #156]	@ (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aed0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aed4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aedc:	d02a      	beq.n	800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800aede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aee4:	d838      	bhi.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800aee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d004      	beq.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800aeec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aef2:	d00d      	beq.n	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800aef4:	e030      	b.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aef6:	4b1d      	ldr	r3, [pc, #116]	@ (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aefe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af02:	d102      	bne.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800af04:	4b1c      	ldr	r3, [pc, #112]	@ (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800af06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af08:	e02b      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af0e:	e028      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af10:	4b16      	ldr	r3, [pc, #88]	@ (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af1c:	d107      	bne.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af22:	4618      	mov	r0, r3
 800af24:	f000 fae8 	bl	800b4f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af2c:	e019      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af32:	e016      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af34:	4b0d      	ldr	r3, [pc, #52]	@ (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af40:	d107      	bne.n	800af52 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af42:	f107 0318 	add.w	r3, r7, #24
 800af46:	4618      	mov	r0, r3
 800af48:	f000 f82e 	bl	800afa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af50:	e007      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af56:	e004      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800af58:	2300      	movs	r3, #0
 800af5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af5c:	e001      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800af62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800af64:	4618      	mov	r0, r3
 800af66:	3740      	adds	r7, #64	@ 0x40
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	58024400 	.word	0x58024400
 800af70:	03d09000 	.word	0x03d09000
 800af74:	003d0900 	.word	0x003d0900
 800af78:	016e3600 	.word	0x016e3600

0800af7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800af80:	f7fe f92e 	bl	80091e0 <HAL_RCC_GetHCLKFreq>
 800af84:	4602      	mov	r2, r0
 800af86:	4b06      	ldr	r3, [pc, #24]	@ (800afa0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	091b      	lsrs	r3, r3, #4
 800af8c:	f003 0307 	and.w	r3, r3, #7
 800af90:	4904      	ldr	r1, [pc, #16]	@ (800afa4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800af92:	5ccb      	ldrb	r3, [r1, r3]
 800af94:	f003 031f 	and.w	r3, r3, #31
 800af98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	58024400 	.word	0x58024400
 800afa4:	08016930 	.word	0x08016930

0800afa8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b089      	sub	sp, #36	@ 0x24
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afb0:	4ba1      	ldr	r3, [pc, #644]	@ (800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb4:	f003 0303 	and.w	r3, r3, #3
 800afb8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800afba:	4b9f      	ldr	r3, [pc, #636]	@ (800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afbe:	0b1b      	lsrs	r3, r3, #12
 800afc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800afc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800afc6:	4b9c      	ldr	r3, [pc, #624]	@ (800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afca:	091b      	lsrs	r3, r3, #4
 800afcc:	f003 0301 	and.w	r3, r3, #1
 800afd0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800afd2:	4b99      	ldr	r3, [pc, #612]	@ (800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afd6:	08db      	lsrs	r3, r3, #3
 800afd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afdc:	693a      	ldr	r2, [r7, #16]
 800afde:	fb02 f303 	mul.w	r3, r2, r3
 800afe2:	ee07 3a90 	vmov	s15, r3
 800afe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f000 8111 	beq.w	800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	2b02      	cmp	r3, #2
 800affa:	f000 8083 	beq.w	800b104 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	2b02      	cmp	r3, #2
 800b002:	f200 80a1 	bhi.w	800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d003      	beq.n	800b014 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d056      	beq.n	800b0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b012:	e099      	b.n	800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b014:	4b88      	ldr	r3, [pc, #544]	@ (800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 0320 	and.w	r3, r3, #32
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d02d      	beq.n	800b07c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b020:	4b85      	ldr	r3, [pc, #532]	@ (800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	08db      	lsrs	r3, r3, #3
 800b026:	f003 0303 	and.w	r3, r3, #3
 800b02a:	4a84      	ldr	r2, [pc, #528]	@ (800b23c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b02c:	fa22 f303 	lsr.w	r3, r2, r3
 800b030:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	ee07 3a90 	vmov	s15, r3
 800b038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	ee07 3a90 	vmov	s15, r3
 800b042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b04a:	4b7b      	ldr	r3, [pc, #492]	@ (800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b04c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b052:	ee07 3a90 	vmov	s15, r3
 800b056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b05a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b05e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b240 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b06a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b076:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b07a:	e087      	b.n	800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	ee07 3a90 	vmov	s15, r3
 800b082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b086:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b08a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b08e:	4b6a      	ldr	r3, [pc, #424]	@ (800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b096:	ee07 3a90 	vmov	s15, r3
 800b09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b09e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b240 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0be:	e065      	b.n	800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	ee07 3a90 	vmov	s15, r3
 800b0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b248 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0d2:	4b59      	ldr	r3, [pc, #356]	@ (800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0da:	ee07 3a90 	vmov	s15, r3
 800b0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b240 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b102:	e043      	b.n	800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b10e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b116:	4b48      	ldr	r3, [pc, #288]	@ (800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b11e:	ee07 3a90 	vmov	s15, r3
 800b122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b126:	ed97 6a03 	vldr	s12, [r7, #12]
 800b12a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b240 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b12e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b13a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b13e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b146:	e021      	b.n	800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	ee07 3a90 	vmov	s15, r3
 800b14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b152:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b248 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b15a:	4b37      	ldr	r3, [pc, #220]	@ (800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b15c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b15e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b162:	ee07 3a90 	vmov	s15, r3
 800b166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b16a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b16e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b240 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b17a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b17e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b182:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b18a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b18c:	4b2a      	ldr	r3, [pc, #168]	@ (800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b18e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b190:	0a5b      	lsrs	r3, r3, #9
 800b192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b196:	ee07 3a90 	vmov	s15, r3
 800b19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b19e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1b2:	ee17 2a90 	vmov	r2, s15
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b1ba:	4b1f      	ldr	r3, [pc, #124]	@ (800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1be:	0c1b      	lsrs	r3, r3, #16
 800b1c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1c4:	ee07 3a90 	vmov	s15, r3
 800b1c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1e0:	ee17 2a90 	vmov	r2, s15
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b1e8:	4b13      	ldr	r3, [pc, #76]	@ (800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ec:	0e1b      	lsrs	r3, r3, #24
 800b1ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1f2:	ee07 3a90 	vmov	s15, r3
 800b1f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b202:	edd7 6a07 	vldr	s13, [r7, #28]
 800b206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b20a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b20e:	ee17 2a90 	vmov	r2, s15
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b216:	e008      	b.n	800b22a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	609a      	str	r2, [r3, #8]
}
 800b22a:	bf00      	nop
 800b22c:	3724      	adds	r7, #36	@ 0x24
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	58024400 	.word	0x58024400
 800b23c:	03d09000 	.word	0x03d09000
 800b240:	46000000 	.word	0x46000000
 800b244:	4c742400 	.word	0x4c742400
 800b248:	4a742400 	.word	0x4a742400
 800b24c:	4bb71b00 	.word	0x4bb71b00

0800b250 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b250:	b480      	push	{r7}
 800b252:	b089      	sub	sp, #36	@ 0x24
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b258:	4ba1      	ldr	r3, [pc, #644]	@ (800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b25a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b25c:	f003 0303 	and.w	r3, r3, #3
 800b260:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b262:	4b9f      	ldr	r3, [pc, #636]	@ (800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b266:	0d1b      	lsrs	r3, r3, #20
 800b268:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b26c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b26e:	4b9c      	ldr	r3, [pc, #624]	@ (800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b272:	0a1b      	lsrs	r3, r3, #8
 800b274:	f003 0301 	and.w	r3, r3, #1
 800b278:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b27a:	4b99      	ldr	r3, [pc, #612]	@ (800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b27c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b27e:	08db      	lsrs	r3, r3, #3
 800b280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	fb02 f303 	mul.w	r3, r2, r3
 800b28a:	ee07 3a90 	vmov	s15, r3
 800b28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b292:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 8111 	beq.w	800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	f000 8083 	beq.w	800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	f200 80a1 	bhi.w	800b3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d003      	beq.n	800b2bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d056      	beq.n	800b368 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b2ba:	e099      	b.n	800b3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2bc:	4b88      	ldr	r3, [pc, #544]	@ (800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 0320 	and.w	r3, r3, #32
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d02d      	beq.n	800b324 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2c8:	4b85      	ldr	r3, [pc, #532]	@ (800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	08db      	lsrs	r3, r3, #3
 800b2ce:	f003 0303 	and.w	r3, r3, #3
 800b2d2:	4a84      	ldr	r2, [pc, #528]	@ (800b4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b2d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	ee07 3a90 	vmov	s15, r3
 800b2e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	ee07 3a90 	vmov	s15, r3
 800b2ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2f2:	4b7b      	ldr	r3, [pc, #492]	@ (800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2fa:	ee07 3a90 	vmov	s15, r3
 800b2fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b302:	ed97 6a03 	vldr	s12, [r7, #12]
 800b306:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b30a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b30e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b31a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b31e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b322:	e087      	b.n	800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	ee07 3a90 	vmov	s15, r3
 800b32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b32e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b336:	4b6a      	ldr	r3, [pc, #424]	@ (800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b33e:	ee07 3a90 	vmov	s15, r3
 800b342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b346:	ed97 6a03 	vldr	s12, [r7, #12]
 800b34a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b34e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b366:	e065      	b.n	800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	ee07 3a90 	vmov	s15, r3
 800b36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b372:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b37a:	4b59      	ldr	r3, [pc, #356]	@ (800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b37c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b382:	ee07 3a90 	vmov	s15, r3
 800b386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b38a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b38e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b39a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b39e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3aa:	e043      	b.n	800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	ee07 3a90 	vmov	s15, r3
 800b3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b3ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3be:	4b48      	ldr	r3, [pc, #288]	@ (800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3c6:	ee07 3a90 	vmov	s15, r3
 800b3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3ee:	e021      	b.n	800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	ee07 3a90 	vmov	s15, r3
 800b3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b402:	4b37      	ldr	r3, [pc, #220]	@ (800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b40a:	ee07 3a90 	vmov	s15, r3
 800b40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b412:	ed97 6a03 	vldr	s12, [r7, #12]
 800b416:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b42e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b432:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b434:	4b2a      	ldr	r3, [pc, #168]	@ (800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b438:	0a5b      	lsrs	r3, r3, #9
 800b43a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b43e:	ee07 3a90 	vmov	s15, r3
 800b442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b446:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b44a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b44e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b45a:	ee17 2a90 	vmov	r2, s15
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b462:	4b1f      	ldr	r3, [pc, #124]	@ (800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b466:	0c1b      	lsrs	r3, r3, #16
 800b468:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b46c:	ee07 3a90 	vmov	s15, r3
 800b470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b474:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b478:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b47c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b480:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b488:	ee17 2a90 	vmov	r2, s15
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b490:	4b13      	ldr	r3, [pc, #76]	@ (800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b494:	0e1b      	lsrs	r3, r3, #24
 800b496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b49a:	ee07 3a90 	vmov	s15, r3
 800b49e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4b6:	ee17 2a90 	vmov	r2, s15
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b4be:	e008      	b.n	800b4d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	609a      	str	r2, [r3, #8]
}
 800b4d2:	bf00      	nop
 800b4d4:	3724      	adds	r7, #36	@ 0x24
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	58024400 	.word	0x58024400
 800b4e4:	03d09000 	.word	0x03d09000
 800b4e8:	46000000 	.word	0x46000000
 800b4ec:	4c742400 	.word	0x4c742400
 800b4f0:	4a742400 	.word	0x4a742400
 800b4f4:	4bb71b00 	.word	0x4bb71b00

0800b4f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b089      	sub	sp, #36	@ 0x24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b500:	4ba0      	ldr	r3, [pc, #640]	@ (800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b504:	f003 0303 	and.w	r3, r3, #3
 800b508:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b50a:	4b9e      	ldr	r3, [pc, #632]	@ (800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b50c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b50e:	091b      	lsrs	r3, r3, #4
 800b510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b514:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b516:	4b9b      	ldr	r3, [pc, #620]	@ (800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b51a:	f003 0301 	and.w	r3, r3, #1
 800b51e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b520:	4b98      	ldr	r3, [pc, #608]	@ (800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b524:	08db      	lsrs	r3, r3, #3
 800b526:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b52a:	693a      	ldr	r2, [r7, #16]
 800b52c:	fb02 f303 	mul.w	r3, r2, r3
 800b530:	ee07 3a90 	vmov	s15, r3
 800b534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b538:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f000 8111 	beq.w	800b766 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	2b02      	cmp	r3, #2
 800b548:	f000 8083 	beq.w	800b652 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	2b02      	cmp	r3, #2
 800b550:	f200 80a1 	bhi.w	800b696 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d003      	beq.n	800b562 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d056      	beq.n	800b60e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b560:	e099      	b.n	800b696 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b562:	4b88      	ldr	r3, [pc, #544]	@ (800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 0320 	and.w	r3, r3, #32
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d02d      	beq.n	800b5ca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b56e:	4b85      	ldr	r3, [pc, #532]	@ (800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	08db      	lsrs	r3, r3, #3
 800b574:	f003 0303 	and.w	r3, r3, #3
 800b578:	4a83      	ldr	r2, [pc, #524]	@ (800b788 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b57a:	fa22 f303 	lsr.w	r3, r2, r3
 800b57e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	ee07 3a90 	vmov	s15, r3
 800b586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	ee07 3a90 	vmov	s15, r3
 800b590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b598:	4b7a      	ldr	r3, [pc, #488]	@ (800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b59a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b59c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5a0:	ee07 3a90 	vmov	s15, r3
 800b5a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ac:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b78c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5c4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b5c8:	e087      	b.n	800b6da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	ee07 3a90 	vmov	s15, r3
 800b5d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5dc:	4b69      	ldr	r3, [pc, #420]	@ (800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5e4:	ee07 3a90 	vmov	s15, r3
 800b5e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5f0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b78c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b604:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b608:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b60c:	e065      	b.n	800b6da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	ee07 3a90 	vmov	s15, r3
 800b614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b618:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b794 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b61c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b620:	4b58      	ldr	r3, [pc, #352]	@ (800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b628:	ee07 3a90 	vmov	s15, r3
 800b62c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b630:	ed97 6a03 	vldr	s12, [r7, #12]
 800b634:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b78c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b63c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b640:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b64c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b650:	e043      	b.n	800b6da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	ee07 3a90 	vmov	s15, r3
 800b658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b65c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b664:	4b47      	ldr	r3, [pc, #284]	@ (800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b66c:	ee07 3a90 	vmov	s15, r3
 800b670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b674:	ed97 6a03 	vldr	s12, [r7, #12]
 800b678:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b78c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b67c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b684:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b68c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b690:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b694:	e021      	b.n	800b6da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	ee07 3a90 	vmov	s15, r3
 800b69c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b6a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6a8:	4b36      	ldr	r3, [pc, #216]	@ (800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6b0:	ee07 3a90 	vmov	s15, r3
 800b6b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6bc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b78c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6d8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b6da:	4b2a      	ldr	r3, [pc, #168]	@ (800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6de:	0a5b      	lsrs	r3, r3, #9
 800b6e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6e4:	ee07 3a90 	vmov	s15, r3
 800b6e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b700:	ee17 2a90 	vmov	r2, s15
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b708:	4b1e      	ldr	r3, [pc, #120]	@ (800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b70a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b70c:	0c1b      	lsrs	r3, r3, #16
 800b70e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b712:	ee07 3a90 	vmov	s15, r3
 800b716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b71a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b71e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b722:	edd7 6a07 	vldr	s13, [r7, #28]
 800b726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b72a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b72e:	ee17 2a90 	vmov	r2, s15
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b736:	4b13      	ldr	r3, [pc, #76]	@ (800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b73a:	0e1b      	lsrs	r3, r3, #24
 800b73c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b740:	ee07 3a90 	vmov	s15, r3
 800b744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b748:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b74c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b750:	edd7 6a07 	vldr	s13, [r7, #28]
 800b754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b75c:	ee17 2a90 	vmov	r2, s15
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b764:	e008      	b.n	800b778 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	609a      	str	r2, [r3, #8]
}
 800b778:	bf00      	nop
 800b77a:	3724      	adds	r7, #36	@ 0x24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr
 800b784:	58024400 	.word	0x58024400
 800b788:	03d09000 	.word	0x03d09000
 800b78c:	46000000 	.word	0x46000000
 800b790:	4c742400 	.word	0x4c742400
 800b794:	4a742400 	.word	0x4a742400
 800b798:	4bb71b00 	.word	0x4bb71b00

0800b79c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b7aa:	4b53      	ldr	r3, [pc, #332]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b7ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ae:	f003 0303 	and.w	r3, r3, #3
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d101      	bne.n	800b7ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e099      	b.n	800b8ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b7ba:	4b4f      	ldr	r3, [pc, #316]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a4e      	ldr	r2, [pc, #312]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b7c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b7c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7c6:	f7f7 fcd5 	bl	8003174 <HAL_GetTick>
 800b7ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7cc:	e008      	b.n	800b7e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b7ce:	f7f7 fcd1 	bl	8003174 <HAL_GetTick>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d901      	bls.n	800b7e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e086      	b.n	800b8ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7e0:	4b45      	ldr	r3, [pc, #276]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1f0      	bne.n	800b7ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b7ec:	4b42      	ldr	r3, [pc, #264]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7f0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	031b      	lsls	r3, r3, #12
 800b7fa:	493f      	ldr	r1, [pc, #252]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	628b      	str	r3, [r1, #40]	@ 0x28
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	3b01      	subs	r3, #1
 800b806:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	3b01      	subs	r3, #1
 800b810:	025b      	lsls	r3, r3, #9
 800b812:	b29b      	uxth	r3, r3
 800b814:	431a      	orrs	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	041b      	lsls	r3, r3, #16
 800b81e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b822:	431a      	orrs	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	3b01      	subs	r3, #1
 800b82a:	061b      	lsls	r3, r3, #24
 800b82c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b830:	4931      	ldr	r1, [pc, #196]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b832:	4313      	orrs	r3, r2
 800b834:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b836:	4b30      	ldr	r3, [pc, #192]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b83a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	492d      	ldr	r1, [pc, #180]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b844:	4313      	orrs	r3, r2
 800b846:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b848:	4b2b      	ldr	r3, [pc, #172]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b84c:	f023 0220 	bic.w	r2, r3, #32
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	4928      	ldr	r1, [pc, #160]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b856:	4313      	orrs	r3, r2
 800b858:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b85a:	4b27      	ldr	r3, [pc, #156]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85e:	4a26      	ldr	r2, [pc, #152]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b860:	f023 0310 	bic.w	r3, r3, #16
 800b864:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b866:	4b24      	ldr	r3, [pc, #144]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b868:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b86a:	4b24      	ldr	r3, [pc, #144]	@ (800b8fc <RCCEx_PLL2_Config+0x160>)
 800b86c:	4013      	ands	r3, r2
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	69d2      	ldr	r2, [r2, #28]
 800b872:	00d2      	lsls	r2, r2, #3
 800b874:	4920      	ldr	r1, [pc, #128]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b876:	4313      	orrs	r3, r2
 800b878:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b87a:	4b1f      	ldr	r3, [pc, #124]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87e:	4a1e      	ldr	r2, [pc, #120]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b880:	f043 0310 	orr.w	r3, r3, #16
 800b884:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d106      	bne.n	800b89a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b88c:	4b1a      	ldr	r3, [pc, #104]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b890:	4a19      	ldr	r2, [pc, #100]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b892:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b896:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b898:	e00f      	b.n	800b8ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d106      	bne.n	800b8ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b8a0:	4b15      	ldr	r3, [pc, #84]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a4:	4a14      	ldr	r2, [pc, #80]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b8a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b8aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b8ac:	e005      	b.n	800b8ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b8ae:	4b12      	ldr	r3, [pc, #72]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b8b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8b2:	4a11      	ldr	r2, [pc, #68]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b8b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b8b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b8ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a0e      	ldr	r2, [pc, #56]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b8c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b8c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8c6:	f7f7 fc55 	bl	8003174 <HAL_GetTick>
 800b8ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8cc:	e008      	b.n	800b8e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b8ce:	f7f7 fc51 	bl	8003174 <HAL_GetTick>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d901      	bls.n	800b8e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e006      	b.n	800b8ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8e0:	4b05      	ldr	r3, [pc, #20]	@ (800b8f8 <RCCEx_PLL2_Config+0x15c>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d0f0      	beq.n	800b8ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	58024400 	.word	0x58024400
 800b8fc:	ffff0007 	.word	0xffff0007

0800b900 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b90a:	2300      	movs	r3, #0
 800b90c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b90e:	4b53      	ldr	r3, [pc, #332]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b912:	f003 0303 	and.w	r3, r3, #3
 800b916:	2b03      	cmp	r3, #3
 800b918:	d101      	bne.n	800b91e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e099      	b.n	800ba52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b91e:	4b4f      	ldr	r3, [pc, #316]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a4e      	ldr	r2, [pc, #312]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b924:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b928:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b92a:	f7f7 fc23 	bl	8003174 <HAL_GetTick>
 800b92e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b930:	e008      	b.n	800b944 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b932:	f7f7 fc1f 	bl	8003174 <HAL_GetTick>
 800b936:	4602      	mov	r2, r0
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	2b02      	cmp	r3, #2
 800b93e:	d901      	bls.n	800b944 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b940:	2303      	movs	r3, #3
 800b942:	e086      	b.n	800ba52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b944:	4b45      	ldr	r3, [pc, #276]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1f0      	bne.n	800b932 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b950:	4b42      	ldr	r3, [pc, #264]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b954:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	051b      	lsls	r3, r3, #20
 800b95e:	493f      	ldr	r1, [pc, #252]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b960:	4313      	orrs	r3, r2
 800b962:	628b      	str	r3, [r1, #40]	@ 0x28
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	3b01      	subs	r3, #1
 800b96a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	3b01      	subs	r3, #1
 800b974:	025b      	lsls	r3, r3, #9
 800b976:	b29b      	uxth	r3, r3
 800b978:	431a      	orrs	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	3b01      	subs	r3, #1
 800b980:	041b      	lsls	r3, r3, #16
 800b982:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b986:	431a      	orrs	r2, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	3b01      	subs	r3, #1
 800b98e:	061b      	lsls	r3, r3, #24
 800b990:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b994:	4931      	ldr	r1, [pc, #196]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b996:	4313      	orrs	r3, r2
 800b998:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b99a:	4b30      	ldr	r3, [pc, #192]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b99c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b99e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	492d      	ldr	r1, [pc, #180]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b9ac:	4b2b      	ldr	r3, [pc, #172]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	699b      	ldr	r3, [r3, #24]
 800b9b8:	4928      	ldr	r1, [pc, #160]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b9be:	4b27      	ldr	r3, [pc, #156]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c2:	4a26      	ldr	r2, [pc, #152]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b9c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b9ca:	4b24      	ldr	r3, [pc, #144]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b9cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b9ce:	4b24      	ldr	r3, [pc, #144]	@ (800ba60 <RCCEx_PLL3_Config+0x160>)
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	69d2      	ldr	r2, [r2, #28]
 800b9d6:	00d2      	lsls	r2, r2, #3
 800b9d8:	4920      	ldr	r1, [pc, #128]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b9de:	4b1f      	ldr	r3, [pc, #124]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b9e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e2:	4a1e      	ldr	r2, [pc, #120]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b9e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b9e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d106      	bne.n	800b9fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b9f0:	4b1a      	ldr	r3, [pc, #104]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b9f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f4:	4a19      	ldr	r2, [pc, #100]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800b9f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b9fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9fc:	e00f      	b.n	800ba1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d106      	bne.n	800ba12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ba04:	4b15      	ldr	r3, [pc, #84]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800ba06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba08:	4a14      	ldr	r2, [pc, #80]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800ba0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ba0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba10:	e005      	b.n	800ba1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ba12:	4b12      	ldr	r3, [pc, #72]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800ba14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba16:	4a11      	ldr	r2, [pc, #68]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800ba18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ba1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ba1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a0e      	ldr	r2, [pc, #56]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800ba24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba2a:	f7f7 fba3 	bl	8003174 <HAL_GetTick>
 800ba2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba30:	e008      	b.n	800ba44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba32:	f7f7 fb9f 	bl	8003174 <HAL_GetTick>
 800ba36:	4602      	mov	r2, r0
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	1ad3      	subs	r3, r2, r3
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	d901      	bls.n	800ba44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba40:	2303      	movs	r3, #3
 800ba42:	e006      	b.n	800ba52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba44:	4b05      	ldr	r3, [pc, #20]	@ (800ba5c <RCCEx_PLL3_Config+0x15c>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d0f0      	beq.n	800ba32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ba50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	58024400 	.word	0x58024400
 800ba60:	ffff0007 	.word	0xffff0007

0800ba64 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e10f      	b.n	800bc96 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a87      	ldr	r2, [pc, #540]	@ (800bca0 <HAL_SPI_Init+0x23c>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d00f      	beq.n	800baa6 <HAL_SPI_Init+0x42>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a86      	ldr	r2, [pc, #536]	@ (800bca4 <HAL_SPI_Init+0x240>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d00a      	beq.n	800baa6 <HAL_SPI_Init+0x42>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a84      	ldr	r2, [pc, #528]	@ (800bca8 <HAL_SPI_Init+0x244>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d005      	beq.n	800baa6 <HAL_SPI_Init+0x42>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	2b0f      	cmp	r3, #15
 800baa0:	d901      	bls.n	800baa6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e0f7      	b.n	800bc96 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 f900 	bl	800bcac <SPI_GetPacketSize>
 800baac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a7b      	ldr	r2, [pc, #492]	@ (800bca0 <HAL_SPI_Init+0x23c>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d00c      	beq.n	800bad2 <HAL_SPI_Init+0x6e>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a79      	ldr	r2, [pc, #484]	@ (800bca4 <HAL_SPI_Init+0x240>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d007      	beq.n	800bad2 <HAL_SPI_Init+0x6e>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a78      	ldr	r2, [pc, #480]	@ (800bca8 <HAL_SPI_Init+0x244>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d002      	beq.n	800bad2 <HAL_SPI_Init+0x6e>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2b08      	cmp	r3, #8
 800bad0:	d811      	bhi.n	800baf6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bad6:	4a72      	ldr	r2, [pc, #456]	@ (800bca0 <HAL_SPI_Init+0x23c>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d009      	beq.n	800baf0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a70      	ldr	r2, [pc, #448]	@ (800bca4 <HAL_SPI_Init+0x240>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d004      	beq.n	800baf0 <HAL_SPI_Init+0x8c>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a6f      	ldr	r2, [pc, #444]	@ (800bca8 <HAL_SPI_Init+0x244>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d104      	bne.n	800bafa <HAL_SPI_Init+0x96>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2b10      	cmp	r3, #16
 800baf4:	d901      	bls.n	800bafa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800baf6:	2301      	movs	r3, #1
 800baf8:	e0cd      	b.n	800bc96 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d106      	bne.n	800bb14 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7f6 f83a 	bl	8001b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2202      	movs	r2, #2
 800bb18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f022 0201 	bic.w	r2, r2, #1
 800bb2a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bb36:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	699b      	ldr	r3, [r3, #24]
 800bb3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bb40:	d119      	bne.n	800bb76 <HAL_SPI_Init+0x112>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb4a:	d103      	bne.n	800bb54 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d008      	beq.n	800bb66 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10c      	bne.n	800bb76 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bb60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb64:	d107      	bne.n	800bb76 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bb74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00f      	beq.n	800bba2 <HAL_SPI_Init+0x13e>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	2b06      	cmp	r3, #6
 800bb88:	d90b      	bls.n	800bba2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	430a      	orrs	r2, r1
 800bb9e:	601a      	str	r2, [r3, #0]
 800bba0:	e007      	b.n	800bbb2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bbb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	69da      	ldr	r2, [r3, #28]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbba:	431a      	orrs	r2, r3
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	431a      	orrs	r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbc4:	ea42 0103 	orr.w	r1, r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	68da      	ldr	r2, [r3, #12]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	430a      	orrs	r2, r1
 800bbd2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbdc:	431a      	orrs	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe2:	431a      	orrs	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	699b      	ldr	r3, [r3, #24]
 800bbe8:	431a      	orrs	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	431a      	orrs	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	695b      	ldr	r3, [r3, #20]
 800bbf4:	431a      	orrs	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a1b      	ldr	r3, [r3, #32]
 800bbfa:	431a      	orrs	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	431a      	orrs	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc06:	431a      	orrs	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	431a      	orrs	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc12:	ea42 0103 	orr.w	r1, r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	430a      	orrs	r2, r1
 800bc20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d113      	bne.n	800bc52 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bc50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f022 0201 	bic.w	r2, r2, #1
 800bc60:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00a      	beq.n	800bc84 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	430a      	orrs	r2, r1
 800bc82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	40013000 	.word	0x40013000
 800bca4:	40003800 	.word	0x40003800
 800bca8:	40003c00 	.word	0x40003c00

0800bcac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcb8:	095b      	lsrs	r3, r3, #5
 800bcba:	3301      	adds	r3, #1
 800bcbc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	3307      	adds	r3, #7
 800bcca:	08db      	lsrs	r3, r3, #3
 800bccc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	fb02 f303 	mul.w	r3, r2, r3
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3714      	adds	r7, #20
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b082      	sub	sp, #8
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e049      	b.n	800bd88 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d106      	bne.n	800bd0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f7f6 f845 	bl	8001d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2202      	movs	r2, #2
 800bd12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	4619      	mov	r1, r3
 800bd20:	4610      	mov	r0, r2
 800bd22:	f000 fe1f 	bl	800c964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2201      	movs	r2, #1
 800bd2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2201      	movs	r2, #1
 800bd32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2201      	movs	r2, #1
 800bd42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2201      	movs	r2, #1
 800bd52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2201      	movs	r2, #1
 800bd62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2201      	movs	r2, #1
 800bd72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2201      	movs	r2, #1
 800bd82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e049      	b.n	800be36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d106      	bne.n	800bdbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 f841 	bl	800be3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	3304      	adds	r3, #4
 800bdcc:	4619      	mov	r1, r3
 800bdce:	4610      	mov	r0, r2
 800bdd0:	f000 fdc8 	bl	800c964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2201      	movs	r2, #1
 800be08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2201      	movs	r2, #1
 800be28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2201      	movs	r2, #1
 800be30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	3708      	adds	r7, #8
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be3e:	b480      	push	{r7}
 800be40:	b083      	sub	sp, #12
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be46:	bf00      	nop
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr
	...

0800be54 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d109      	bne.n	800be7c <HAL_TIM_PWM_Start_IT+0x28>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2b01      	cmp	r3, #1
 800be72:	bf14      	ite	ne
 800be74:	2301      	movne	r3, #1
 800be76:	2300      	moveq	r3, #0
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	e03c      	b.n	800bef6 <HAL_TIM_PWM_Start_IT+0xa2>
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	2b04      	cmp	r3, #4
 800be80:	d109      	bne.n	800be96 <HAL_TIM_PWM_Start_IT+0x42>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	bf14      	ite	ne
 800be8e:	2301      	movne	r3, #1
 800be90:	2300      	moveq	r3, #0
 800be92:	b2db      	uxtb	r3, r3
 800be94:	e02f      	b.n	800bef6 <HAL_TIM_PWM_Start_IT+0xa2>
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	2b08      	cmp	r3, #8
 800be9a:	d109      	bne.n	800beb0 <HAL_TIM_PWM_Start_IT+0x5c>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	bf14      	ite	ne
 800bea8:	2301      	movne	r3, #1
 800beaa:	2300      	moveq	r3, #0
 800beac:	b2db      	uxtb	r3, r3
 800beae:	e022      	b.n	800bef6 <HAL_TIM_PWM_Start_IT+0xa2>
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	2b0c      	cmp	r3, #12
 800beb4:	d109      	bne.n	800beca <HAL_TIM_PWM_Start_IT+0x76>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	bf14      	ite	ne
 800bec2:	2301      	movne	r3, #1
 800bec4:	2300      	moveq	r3, #0
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	e015      	b.n	800bef6 <HAL_TIM_PWM_Start_IT+0xa2>
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2b10      	cmp	r3, #16
 800bece:	d109      	bne.n	800bee4 <HAL_TIM_PWM_Start_IT+0x90>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	2b01      	cmp	r3, #1
 800beda:	bf14      	ite	ne
 800bedc:	2301      	movne	r3, #1
 800bede:	2300      	moveq	r3, #0
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	e008      	b.n	800bef6 <HAL_TIM_PWM_Start_IT+0xa2>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800beea:	b2db      	uxtb	r3, r3
 800beec:	2b01      	cmp	r3, #1
 800beee:	bf14      	ite	ne
 800bef0:	2301      	movne	r3, #1
 800bef2:	2300      	moveq	r3, #0
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d001      	beq.n	800befe <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	e0f6      	b.n	800c0ec <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d104      	bne.n	800bf0e <HAL_TIM_PWM_Start_IT+0xba>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2202      	movs	r2, #2
 800bf08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bf0c:	e023      	b.n	800bf56 <HAL_TIM_PWM_Start_IT+0x102>
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	2b04      	cmp	r3, #4
 800bf12:	d104      	bne.n	800bf1e <HAL_TIM_PWM_Start_IT+0xca>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2202      	movs	r2, #2
 800bf18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bf1c:	e01b      	b.n	800bf56 <HAL_TIM_PWM_Start_IT+0x102>
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2b08      	cmp	r3, #8
 800bf22:	d104      	bne.n	800bf2e <HAL_TIM_PWM_Start_IT+0xda>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2202      	movs	r2, #2
 800bf28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bf2c:	e013      	b.n	800bf56 <HAL_TIM_PWM_Start_IT+0x102>
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2b0c      	cmp	r3, #12
 800bf32:	d104      	bne.n	800bf3e <HAL_TIM_PWM_Start_IT+0xea>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2202      	movs	r2, #2
 800bf38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bf3c:	e00b      	b.n	800bf56 <HAL_TIM_PWM_Start_IT+0x102>
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	2b10      	cmp	r3, #16
 800bf42:	d104      	bne.n	800bf4e <HAL_TIM_PWM_Start_IT+0xfa>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2202      	movs	r2, #2
 800bf48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf4c:	e003      	b.n	800bf56 <HAL_TIM_PWM_Start_IT+0x102>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2202      	movs	r2, #2
 800bf52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	2b0c      	cmp	r3, #12
 800bf5a:	d841      	bhi.n	800bfe0 <HAL_TIM_PWM_Start_IT+0x18c>
 800bf5c:	a201      	add	r2, pc, #4	@ (adr r2, 800bf64 <HAL_TIM_PWM_Start_IT+0x110>)
 800bf5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf62:	bf00      	nop
 800bf64:	0800bf99 	.word	0x0800bf99
 800bf68:	0800bfe1 	.word	0x0800bfe1
 800bf6c:	0800bfe1 	.word	0x0800bfe1
 800bf70:	0800bfe1 	.word	0x0800bfe1
 800bf74:	0800bfab 	.word	0x0800bfab
 800bf78:	0800bfe1 	.word	0x0800bfe1
 800bf7c:	0800bfe1 	.word	0x0800bfe1
 800bf80:	0800bfe1 	.word	0x0800bfe1
 800bf84:	0800bfbd 	.word	0x0800bfbd
 800bf88:	0800bfe1 	.word	0x0800bfe1
 800bf8c:	0800bfe1 	.word	0x0800bfe1
 800bf90:	0800bfe1 	.word	0x0800bfe1
 800bf94:	0800bfcf 	.word	0x0800bfcf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	68da      	ldr	r2, [r3, #12]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f042 0202 	orr.w	r2, r2, #2
 800bfa6:	60da      	str	r2, [r3, #12]
      break;
 800bfa8:	e01d      	b.n	800bfe6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	68da      	ldr	r2, [r3, #12]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f042 0204 	orr.w	r2, r2, #4
 800bfb8:	60da      	str	r2, [r3, #12]
      break;
 800bfba:	e014      	b.n	800bfe6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	68da      	ldr	r2, [r3, #12]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f042 0208 	orr.w	r2, r2, #8
 800bfca:	60da      	str	r2, [r3, #12]
      break;
 800bfcc:	e00b      	b.n	800bfe6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68da      	ldr	r2, [r3, #12]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f042 0210 	orr.w	r2, r2, #16
 800bfdc:	60da      	str	r2, [r3, #12]
      break;
 800bfde:	e002      	b.n	800bfe6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	73fb      	strb	r3, [r7, #15]
      break;
 800bfe4:	bf00      	nop
  }

  if (status == HAL_OK)
 800bfe6:	7bfb      	ldrb	r3, [r7, #15]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d17e      	bne.n	800c0ea <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2201      	movs	r2, #1
 800bff2:	6839      	ldr	r1, [r7, #0]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f001 f8db 	bl	800d1b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a3d      	ldr	r2, [pc, #244]	@ (800c0f4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d013      	beq.n	800c02c <HAL_TIM_PWM_Start_IT+0x1d8>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a3b      	ldr	r2, [pc, #236]	@ (800c0f8 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d00e      	beq.n	800c02c <HAL_TIM_PWM_Start_IT+0x1d8>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4a3a      	ldr	r2, [pc, #232]	@ (800c0fc <HAL_TIM_PWM_Start_IT+0x2a8>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d009      	beq.n	800c02c <HAL_TIM_PWM_Start_IT+0x1d8>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a38      	ldr	r2, [pc, #224]	@ (800c100 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d004      	beq.n	800c02c <HAL_TIM_PWM_Start_IT+0x1d8>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a37      	ldr	r2, [pc, #220]	@ (800c104 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d101      	bne.n	800c030 <HAL_TIM_PWM_Start_IT+0x1dc>
 800c02c:	2301      	movs	r3, #1
 800c02e:	e000      	b.n	800c032 <HAL_TIM_PWM_Start_IT+0x1de>
 800c030:	2300      	movs	r3, #0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d007      	beq.n	800c046 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a2a      	ldr	r2, [pc, #168]	@ (800c0f4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d02c      	beq.n	800c0aa <HAL_TIM_PWM_Start_IT+0x256>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c058:	d027      	beq.n	800c0aa <HAL_TIM_PWM_Start_IT+0x256>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a2a      	ldr	r2, [pc, #168]	@ (800c108 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d022      	beq.n	800c0aa <HAL_TIM_PWM_Start_IT+0x256>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a28      	ldr	r2, [pc, #160]	@ (800c10c <HAL_TIM_PWM_Start_IT+0x2b8>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d01d      	beq.n	800c0aa <HAL_TIM_PWM_Start_IT+0x256>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a27      	ldr	r2, [pc, #156]	@ (800c110 <HAL_TIM_PWM_Start_IT+0x2bc>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d018      	beq.n	800c0aa <HAL_TIM_PWM_Start_IT+0x256>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a1e      	ldr	r2, [pc, #120]	@ (800c0f8 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d013      	beq.n	800c0aa <HAL_TIM_PWM_Start_IT+0x256>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a23      	ldr	r2, [pc, #140]	@ (800c114 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d00e      	beq.n	800c0aa <HAL_TIM_PWM_Start_IT+0x256>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a1a      	ldr	r2, [pc, #104]	@ (800c0fc <HAL_TIM_PWM_Start_IT+0x2a8>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d009      	beq.n	800c0aa <HAL_TIM_PWM_Start_IT+0x256>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a1f      	ldr	r2, [pc, #124]	@ (800c118 <HAL_TIM_PWM_Start_IT+0x2c4>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d004      	beq.n	800c0aa <HAL_TIM_PWM_Start_IT+0x256>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a1d      	ldr	r2, [pc, #116]	@ (800c11c <HAL_TIM_PWM_Start_IT+0x2c8>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d115      	bne.n	800c0d6 <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	689a      	ldr	r2, [r3, #8]
 800c0b0:	4b1b      	ldr	r3, [pc, #108]	@ (800c120 <HAL_TIM_PWM_Start_IT+0x2cc>)
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	2b06      	cmp	r3, #6
 800c0ba:	d015      	beq.n	800c0e8 <HAL_TIM_PWM_Start_IT+0x294>
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0c2:	d011      	beq.n	800c0e8 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f042 0201 	orr.w	r2, r2, #1
 800c0d2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0d4:	e008      	b.n	800c0e8 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f042 0201 	orr.w	r2, r2, #1
 800c0e4:	601a      	str	r2, [r3, #0]
 800c0e6:	e000      	b.n	800c0ea <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0e8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	40010000 	.word	0x40010000
 800c0f8:	40010400 	.word	0x40010400
 800c0fc:	40014000 	.word	0x40014000
 800c100:	40014400 	.word	0x40014400
 800c104:	40014800 	.word	0x40014800
 800c108:	40000400 	.word	0x40000400
 800c10c:	40000800 	.word	0x40000800
 800c110:	40000c00 	.word	0x40000c00
 800c114:	40001800 	.word	0x40001800
 800c118:	4000e000 	.word	0x4000e000
 800c11c:	4000e400 	.word	0x4000e400
 800c120:	00010007 	.word	0x00010007

0800c124 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c12e:	2300      	movs	r3, #0
 800c130:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	2b0c      	cmp	r3, #12
 800c136:	d841      	bhi.n	800c1bc <HAL_TIM_PWM_Stop_IT+0x98>
 800c138:	a201      	add	r2, pc, #4	@ (adr r2, 800c140 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800c13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13e:	bf00      	nop
 800c140:	0800c175 	.word	0x0800c175
 800c144:	0800c1bd 	.word	0x0800c1bd
 800c148:	0800c1bd 	.word	0x0800c1bd
 800c14c:	0800c1bd 	.word	0x0800c1bd
 800c150:	0800c187 	.word	0x0800c187
 800c154:	0800c1bd 	.word	0x0800c1bd
 800c158:	0800c1bd 	.word	0x0800c1bd
 800c15c:	0800c1bd 	.word	0x0800c1bd
 800c160:	0800c199 	.word	0x0800c199
 800c164:	0800c1bd 	.word	0x0800c1bd
 800c168:	0800c1bd 	.word	0x0800c1bd
 800c16c:	0800c1bd 	.word	0x0800c1bd
 800c170:	0800c1ab 	.word	0x0800c1ab
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68da      	ldr	r2, [r3, #12]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f022 0202 	bic.w	r2, r2, #2
 800c182:	60da      	str	r2, [r3, #12]
      break;
 800c184:	e01d      	b.n	800c1c2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68da      	ldr	r2, [r3, #12]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f022 0204 	bic.w	r2, r2, #4
 800c194:	60da      	str	r2, [r3, #12]
      break;
 800c196:	e014      	b.n	800c1c2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	68da      	ldr	r2, [r3, #12]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f022 0208 	bic.w	r2, r2, #8
 800c1a6:	60da      	str	r2, [r3, #12]
      break;
 800c1a8:	e00b      	b.n	800c1c2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	68da      	ldr	r2, [r3, #12]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f022 0210 	bic.w	r2, r2, #16
 800c1b8:	60da      	str	r2, [r3, #12]
      break;
 800c1ba:	e002      	b.n	800c1c2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	73fb      	strb	r3, [r7, #15]
      break;
 800c1c0:	bf00      	nop
  }

  if (status == HAL_OK)
 800c1c2:	7bfb      	ldrb	r3, [r7, #15]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f040 8081 	bne.w	800c2cc <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	6839      	ldr	r1, [r7, #0]
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f000 ffec 	bl	800d1b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a3e      	ldr	r2, [pc, #248]	@ (800c2d8 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d013      	beq.n	800c20a <HAL_TIM_PWM_Stop_IT+0xe6>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a3d      	ldr	r2, [pc, #244]	@ (800c2dc <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d00e      	beq.n	800c20a <HAL_TIM_PWM_Stop_IT+0xe6>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a3b      	ldr	r2, [pc, #236]	@ (800c2e0 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d009      	beq.n	800c20a <HAL_TIM_PWM_Stop_IT+0xe6>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a3a      	ldr	r2, [pc, #232]	@ (800c2e4 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d004      	beq.n	800c20a <HAL_TIM_PWM_Stop_IT+0xe6>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a38      	ldr	r2, [pc, #224]	@ (800c2e8 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d101      	bne.n	800c20e <HAL_TIM_PWM_Stop_IT+0xea>
 800c20a:	2301      	movs	r3, #1
 800c20c:	e000      	b.n	800c210 <HAL_TIM_PWM_Stop_IT+0xec>
 800c20e:	2300      	movs	r3, #0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d017      	beq.n	800c244 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6a1a      	ldr	r2, [r3, #32]
 800c21a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c21e:	4013      	ands	r3, r2
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10f      	bne.n	800c244 <HAL_TIM_PWM_Stop_IT+0x120>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	6a1a      	ldr	r2, [r3, #32]
 800c22a:	f240 4344 	movw	r3, #1092	@ 0x444
 800c22e:	4013      	ands	r3, r2
 800c230:	2b00      	cmp	r3, #0
 800c232:	d107      	bne.n	800c244 <HAL_TIM_PWM_Stop_IT+0x120>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c242:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6a1a      	ldr	r2, [r3, #32]
 800c24a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c24e:	4013      	ands	r3, r2
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10f      	bne.n	800c274 <HAL_TIM_PWM_Stop_IT+0x150>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	6a1a      	ldr	r2, [r3, #32]
 800c25a:	f240 4344 	movw	r3, #1092	@ 0x444
 800c25e:	4013      	ands	r3, r2
 800c260:	2b00      	cmp	r3, #0
 800c262:	d107      	bne.n	800c274 <HAL_TIM_PWM_Stop_IT+0x150>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f022 0201 	bic.w	r2, r2, #1
 800c272:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d104      	bne.n	800c284 <HAL_TIM_PWM_Stop_IT+0x160>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c282:	e023      	b.n	800c2cc <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	2b04      	cmp	r3, #4
 800c288:	d104      	bne.n	800c294 <HAL_TIM_PWM_Stop_IT+0x170>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c292:	e01b      	b.n	800c2cc <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	2b08      	cmp	r3, #8
 800c298:	d104      	bne.n	800c2a4 <HAL_TIM_PWM_Stop_IT+0x180>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2201      	movs	r2, #1
 800c29e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c2a2:	e013      	b.n	800c2cc <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	2b0c      	cmp	r3, #12
 800c2a8:	d104      	bne.n	800c2b4 <HAL_TIM_PWM_Stop_IT+0x190>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c2b2:	e00b      	b.n	800c2cc <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	2b10      	cmp	r3, #16
 800c2b8:	d104      	bne.n	800c2c4 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2201      	movs	r2, #1
 800c2be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c2c2:	e003      	b.n	800c2cc <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	40010000 	.word	0x40010000
 800c2dc:	40010400 	.word	0x40010400
 800c2e0:	40014000 	.word	0x40014000
 800c2e4:	40014400 	.word	0x40014400
 800c2e8:	40014800 	.word	0x40014800

0800c2ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	f003 0302 	and.w	r3, r3, #2
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d020      	beq.n	800c350 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f003 0302 	and.w	r3, r3, #2
 800c314:	2b00      	cmp	r3, #0
 800c316:	d01b      	beq.n	800c350 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f06f 0202 	mvn.w	r2, #2
 800c320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2201      	movs	r2, #1
 800c326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	699b      	ldr	r3, [r3, #24]
 800c32e:	f003 0303 	and.w	r3, r3, #3
 800c332:	2b00      	cmp	r3, #0
 800c334:	d003      	beq.n	800c33e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 faf6 	bl	800c928 <HAL_TIM_IC_CaptureCallback>
 800c33c:	e005      	b.n	800c34a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 fae8 	bl	800c914 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 faf9 	bl	800c93c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	f003 0304 	and.w	r3, r3, #4
 800c356:	2b00      	cmp	r3, #0
 800c358:	d020      	beq.n	800c39c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f003 0304 	and.w	r3, r3, #4
 800c360:	2b00      	cmp	r3, #0
 800c362:	d01b      	beq.n	800c39c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f06f 0204 	mvn.w	r2, #4
 800c36c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2202      	movs	r2, #2
 800c372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	699b      	ldr	r3, [r3, #24]
 800c37a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d003      	beq.n	800c38a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fad0 	bl	800c928 <HAL_TIM_IC_CaptureCallback>
 800c388:	e005      	b.n	800c396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fac2 	bl	800c914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fad3 	bl	800c93c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	f003 0308 	and.w	r3, r3, #8
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d020      	beq.n	800c3e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f003 0308 	and.w	r3, r3, #8
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d01b      	beq.n	800c3e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f06f 0208 	mvn.w	r2, #8
 800c3b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2204      	movs	r2, #4
 800c3be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	69db      	ldr	r3, [r3, #28]
 800c3c6:	f003 0303 	and.w	r3, r3, #3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d003      	beq.n	800c3d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 faaa 	bl	800c928 <HAL_TIM_IC_CaptureCallback>
 800c3d4:	e005      	b.n	800c3e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fa9c 	bl	800c914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 faad 	bl	800c93c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	f003 0310 	and.w	r3, r3, #16
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d020      	beq.n	800c434 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f003 0310 	and.w	r3, r3, #16
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d01b      	beq.n	800c434 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f06f 0210 	mvn.w	r2, #16
 800c404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2208      	movs	r2, #8
 800c40a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	69db      	ldr	r3, [r3, #28]
 800c412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c416:	2b00      	cmp	r3, #0
 800c418:	d003      	beq.n	800c422 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fa84 	bl	800c928 <HAL_TIM_IC_CaptureCallback>
 800c420:	e005      	b.n	800c42e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fa76 	bl	800c914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f000 fa87 	bl	800c93c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	f003 0301 	and.w	r3, r3, #1
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00c      	beq.n	800c458 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f003 0301 	and.w	r3, r3, #1
 800c444:	2b00      	cmp	r3, #0
 800c446:	d007      	beq.n	800c458 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f06f 0201 	mvn.w	r2, #1
 800c450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f7f4 fb30 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d104      	bne.n	800c46c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00c      	beq.n	800c486 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c472:	2b00      	cmp	r3, #0
 800c474:	d007      	beq.n	800c486 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c47e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 ff61 	bl	800d348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00c      	beq.n	800c4aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c496:	2b00      	cmp	r3, #0
 800c498:	d007      	beq.n	800c4aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c4a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 ff59 	bl	800d35c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00c      	beq.n	800c4ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d007      	beq.n	800c4ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c4c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 fa41 	bl	800c950 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	f003 0320 	and.w	r3, r3, #32
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00c      	beq.n	800c4f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f003 0320 	and.w	r3, r3, #32
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d007      	beq.n	800c4f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f06f 0220 	mvn.w	r2, #32
 800c4ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 ff21 	bl	800d334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c4f2:	bf00      	nop
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
	...

0800c4fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c508:	2300      	movs	r3, #0
 800c50a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c512:	2b01      	cmp	r3, #1
 800c514:	d101      	bne.n	800c51a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c516:	2302      	movs	r3, #2
 800c518:	e0ff      	b.n	800c71a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2201      	movs	r2, #1
 800c51e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2b14      	cmp	r3, #20
 800c526:	f200 80f0 	bhi.w	800c70a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c52a:	a201      	add	r2, pc, #4	@ (adr r2, 800c530 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c530:	0800c585 	.word	0x0800c585
 800c534:	0800c70b 	.word	0x0800c70b
 800c538:	0800c70b 	.word	0x0800c70b
 800c53c:	0800c70b 	.word	0x0800c70b
 800c540:	0800c5c5 	.word	0x0800c5c5
 800c544:	0800c70b 	.word	0x0800c70b
 800c548:	0800c70b 	.word	0x0800c70b
 800c54c:	0800c70b 	.word	0x0800c70b
 800c550:	0800c607 	.word	0x0800c607
 800c554:	0800c70b 	.word	0x0800c70b
 800c558:	0800c70b 	.word	0x0800c70b
 800c55c:	0800c70b 	.word	0x0800c70b
 800c560:	0800c647 	.word	0x0800c647
 800c564:	0800c70b 	.word	0x0800c70b
 800c568:	0800c70b 	.word	0x0800c70b
 800c56c:	0800c70b 	.word	0x0800c70b
 800c570:	0800c689 	.word	0x0800c689
 800c574:	0800c70b 	.word	0x0800c70b
 800c578:	0800c70b 	.word	0x0800c70b
 800c57c:	0800c70b 	.word	0x0800c70b
 800c580:	0800c6c9 	.word	0x0800c6c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	68b9      	ldr	r1, [r7, #8]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f000 fa9c 	bl	800cac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	699a      	ldr	r2, [r3, #24]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f042 0208 	orr.w	r2, r2, #8
 800c59e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	699a      	ldr	r2, [r3, #24]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f022 0204 	bic.w	r2, r2, #4
 800c5ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	6999      	ldr	r1, [r3, #24]
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	691a      	ldr	r2, [r3, #16]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	430a      	orrs	r2, r1
 800c5c0:	619a      	str	r2, [r3, #24]
      break;
 800c5c2:	e0a5      	b.n	800c710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	68b9      	ldr	r1, [r7, #8]
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f000 fb0c 	bl	800cbe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	699a      	ldr	r2, [r3, #24]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	699a      	ldr	r2, [r3, #24]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c5ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	6999      	ldr	r1, [r3, #24]
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	021a      	lsls	r2, r3, #8
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	430a      	orrs	r2, r1
 800c602:	619a      	str	r2, [r3, #24]
      break;
 800c604:	e084      	b.n	800c710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68b9      	ldr	r1, [r7, #8]
 800c60c:	4618      	mov	r0, r3
 800c60e:	f000 fb75 	bl	800ccfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	69da      	ldr	r2, [r3, #28]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f042 0208 	orr.w	r2, r2, #8
 800c620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	69da      	ldr	r2, [r3, #28]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f022 0204 	bic.w	r2, r2, #4
 800c630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	69d9      	ldr	r1, [r3, #28]
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	691a      	ldr	r2, [r3, #16]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	430a      	orrs	r2, r1
 800c642:	61da      	str	r2, [r3, #28]
      break;
 800c644:	e064      	b.n	800c710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	68b9      	ldr	r1, [r7, #8]
 800c64c:	4618      	mov	r0, r3
 800c64e:	f000 fbdd 	bl	800ce0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	69da      	ldr	r2, [r3, #28]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	69da      	ldr	r2, [r3, #28]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	69d9      	ldr	r1, [r3, #28]
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	691b      	ldr	r3, [r3, #16]
 800c67c:	021a      	lsls	r2, r3, #8
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	430a      	orrs	r2, r1
 800c684:	61da      	str	r2, [r3, #28]
      break;
 800c686:	e043      	b.n	800c710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	68b9      	ldr	r1, [r7, #8]
 800c68e:	4618      	mov	r0, r3
 800c690:	f000 fc26 	bl	800cee0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f042 0208 	orr.w	r2, r2, #8
 800c6a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f022 0204 	bic.w	r2, r2, #4
 800c6b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	691a      	ldr	r2, [r3, #16]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c6c6:	e023      	b.n	800c710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68b9      	ldr	r1, [r7, #8]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 fc6a 	bl	800cfa8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c6e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c6f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	691b      	ldr	r3, [r3, #16]
 800c6fe:	021a      	lsls	r2, r3, #8
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	430a      	orrs	r2, r1
 800c706:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c708:	e002      	b.n	800c710 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	75fb      	strb	r3, [r7, #23]
      break;
 800c70e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c718:	7dfb      	ldrb	r3, [r7, #23]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3718      	adds	r7, #24
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop

0800c724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c72e:	2300      	movs	r3, #0
 800c730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d101      	bne.n	800c740 <HAL_TIM_ConfigClockSource+0x1c>
 800c73c:	2302      	movs	r3, #2
 800c73e:	e0dc      	b.n	800c8fa <HAL_TIM_ConfigClockSource+0x1d6>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2201      	movs	r2, #1
 800c744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2202      	movs	r2, #2
 800c74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	689b      	ldr	r3, [r3, #8]
 800c756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	4b6a      	ldr	r3, [pc, #424]	@ (800c904 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c75c:	4013      	ands	r3, r2
 800c75e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a64      	ldr	r2, [pc, #400]	@ (800c908 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c776:	4293      	cmp	r3, r2
 800c778:	f000 80a9 	beq.w	800c8ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c77c:	4a62      	ldr	r2, [pc, #392]	@ (800c908 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	f200 80ae 	bhi.w	800c8e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c784:	4a61      	ldr	r2, [pc, #388]	@ (800c90c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c786:	4293      	cmp	r3, r2
 800c788:	f000 80a1 	beq.w	800c8ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c78c:	4a5f      	ldr	r2, [pc, #380]	@ (800c90c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	f200 80a6 	bhi.w	800c8e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c794:	4a5e      	ldr	r2, [pc, #376]	@ (800c910 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c796:	4293      	cmp	r3, r2
 800c798:	f000 8099 	beq.w	800c8ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c79c:	4a5c      	ldr	r2, [pc, #368]	@ (800c910 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	f200 809e 	bhi.w	800c8e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c7a8:	f000 8091 	beq.w	800c8ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c7ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c7b0:	f200 8096 	bhi.w	800c8e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7b8:	f000 8089 	beq.w	800c8ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c7bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7c0:	f200 808e 	bhi.w	800c8e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7c8:	d03e      	beq.n	800c848 <HAL_TIM_ConfigClockSource+0x124>
 800c7ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7ce:	f200 8087 	bhi.w	800c8e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7d6:	f000 8086 	beq.w	800c8e6 <HAL_TIM_ConfigClockSource+0x1c2>
 800c7da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7de:	d87f      	bhi.n	800c8e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7e0:	2b70      	cmp	r3, #112	@ 0x70
 800c7e2:	d01a      	beq.n	800c81a <HAL_TIM_ConfigClockSource+0xf6>
 800c7e4:	2b70      	cmp	r3, #112	@ 0x70
 800c7e6:	d87b      	bhi.n	800c8e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7e8:	2b60      	cmp	r3, #96	@ 0x60
 800c7ea:	d050      	beq.n	800c88e <HAL_TIM_ConfigClockSource+0x16a>
 800c7ec:	2b60      	cmp	r3, #96	@ 0x60
 800c7ee:	d877      	bhi.n	800c8e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7f0:	2b50      	cmp	r3, #80	@ 0x50
 800c7f2:	d03c      	beq.n	800c86e <HAL_TIM_ConfigClockSource+0x14a>
 800c7f4:	2b50      	cmp	r3, #80	@ 0x50
 800c7f6:	d873      	bhi.n	800c8e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7f8:	2b40      	cmp	r3, #64	@ 0x40
 800c7fa:	d058      	beq.n	800c8ae <HAL_TIM_ConfigClockSource+0x18a>
 800c7fc:	2b40      	cmp	r3, #64	@ 0x40
 800c7fe:	d86f      	bhi.n	800c8e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c800:	2b30      	cmp	r3, #48	@ 0x30
 800c802:	d064      	beq.n	800c8ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c804:	2b30      	cmp	r3, #48	@ 0x30
 800c806:	d86b      	bhi.n	800c8e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c808:	2b20      	cmp	r3, #32
 800c80a:	d060      	beq.n	800c8ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c80c:	2b20      	cmp	r3, #32
 800c80e:	d867      	bhi.n	800c8e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c810:	2b00      	cmp	r3, #0
 800c812:	d05c      	beq.n	800c8ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c814:	2b10      	cmp	r3, #16
 800c816:	d05a      	beq.n	800c8ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c818:	e062      	b.n	800c8e0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c82a:	f000 fca1 	bl	800d170 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c83c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68ba      	ldr	r2, [r7, #8]
 800c844:	609a      	str	r2, [r3, #8]
      break;
 800c846:	e04f      	b.n	800c8e8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c858:	f000 fc8a 	bl	800d170 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	689a      	ldr	r2, [r3, #8]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c86a:	609a      	str	r2, [r3, #8]
      break;
 800c86c:	e03c      	b.n	800c8e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c87a:	461a      	mov	r2, r3
 800c87c:	f000 fbfa 	bl	800d074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2150      	movs	r1, #80	@ 0x50
 800c886:	4618      	mov	r0, r3
 800c888:	f000 fc54 	bl	800d134 <TIM_ITRx_SetConfig>
      break;
 800c88c:	e02c      	b.n	800c8e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c89a:	461a      	mov	r2, r3
 800c89c:	f000 fc19 	bl	800d0d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2160      	movs	r1, #96	@ 0x60
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f000 fc44 	bl	800d134 <TIM_ITRx_SetConfig>
      break;
 800c8ac:	e01c      	b.n	800c8e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	f000 fbda 	bl	800d074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	2140      	movs	r1, #64	@ 0x40
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f000 fc34 	bl	800d134 <TIM_ITRx_SetConfig>
      break;
 800c8cc:	e00c      	b.n	800c8e8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	4610      	mov	r0, r2
 800c8da:	f000 fc2b 	bl	800d134 <TIM_ITRx_SetConfig>
      break;
 800c8de:	e003      	b.n	800c8e8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c8e4:	e000      	b.n	800c8e8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c8e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	ffceff88 	.word	0xffceff88
 800c908:	00100040 	.word	0x00100040
 800c90c:	00100030 	.word	0x00100030
 800c910:	00100020 	.word	0x00100020

0800c914 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c91c:	bf00      	nop
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c930:	bf00      	nop
 800c932:	370c      	adds	r7, #12
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c944:	bf00      	nop
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c958:	bf00      	nop
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	4a4a      	ldr	r2, [pc, #296]	@ (800caa0 <TIM_Base_SetConfig+0x13c>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d013      	beq.n	800c9a4 <TIM_Base_SetConfig+0x40>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c982:	d00f      	beq.n	800c9a4 <TIM_Base_SetConfig+0x40>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	4a47      	ldr	r2, [pc, #284]	@ (800caa4 <TIM_Base_SetConfig+0x140>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d00b      	beq.n	800c9a4 <TIM_Base_SetConfig+0x40>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	4a46      	ldr	r2, [pc, #280]	@ (800caa8 <TIM_Base_SetConfig+0x144>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d007      	beq.n	800c9a4 <TIM_Base_SetConfig+0x40>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	4a45      	ldr	r2, [pc, #276]	@ (800caac <TIM_Base_SetConfig+0x148>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d003      	beq.n	800c9a4 <TIM_Base_SetConfig+0x40>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4a44      	ldr	r2, [pc, #272]	@ (800cab0 <TIM_Base_SetConfig+0x14c>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d108      	bne.n	800c9b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4a39      	ldr	r2, [pc, #228]	@ (800caa0 <TIM_Base_SetConfig+0x13c>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d027      	beq.n	800ca0e <TIM_Base_SetConfig+0xaa>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9c4:	d023      	beq.n	800ca0e <TIM_Base_SetConfig+0xaa>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	4a36      	ldr	r2, [pc, #216]	@ (800caa4 <TIM_Base_SetConfig+0x140>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d01f      	beq.n	800ca0e <TIM_Base_SetConfig+0xaa>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	4a35      	ldr	r2, [pc, #212]	@ (800caa8 <TIM_Base_SetConfig+0x144>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d01b      	beq.n	800ca0e <TIM_Base_SetConfig+0xaa>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	4a34      	ldr	r2, [pc, #208]	@ (800caac <TIM_Base_SetConfig+0x148>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d017      	beq.n	800ca0e <TIM_Base_SetConfig+0xaa>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4a33      	ldr	r2, [pc, #204]	@ (800cab0 <TIM_Base_SetConfig+0x14c>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d013      	beq.n	800ca0e <TIM_Base_SetConfig+0xaa>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4a32      	ldr	r2, [pc, #200]	@ (800cab4 <TIM_Base_SetConfig+0x150>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d00f      	beq.n	800ca0e <TIM_Base_SetConfig+0xaa>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	4a31      	ldr	r2, [pc, #196]	@ (800cab8 <TIM_Base_SetConfig+0x154>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d00b      	beq.n	800ca0e <TIM_Base_SetConfig+0xaa>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a30      	ldr	r2, [pc, #192]	@ (800cabc <TIM_Base_SetConfig+0x158>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d007      	beq.n	800ca0e <TIM_Base_SetConfig+0xaa>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	4a2f      	ldr	r2, [pc, #188]	@ (800cac0 <TIM_Base_SetConfig+0x15c>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d003      	beq.n	800ca0e <TIM_Base_SetConfig+0xaa>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4a2e      	ldr	r2, [pc, #184]	@ (800cac4 <TIM_Base_SetConfig+0x160>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d108      	bne.n	800ca20 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	68fa      	ldr	r2, [r7, #12]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	695b      	ldr	r3, [r3, #20]
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	68fa      	ldr	r2, [r7, #12]
 800ca32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	689a      	ldr	r2, [r3, #8]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a16      	ldr	r2, [pc, #88]	@ (800caa0 <TIM_Base_SetConfig+0x13c>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d00f      	beq.n	800ca6c <TIM_Base_SetConfig+0x108>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4a18      	ldr	r2, [pc, #96]	@ (800cab0 <TIM_Base_SetConfig+0x14c>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d00b      	beq.n	800ca6c <TIM_Base_SetConfig+0x108>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4a17      	ldr	r2, [pc, #92]	@ (800cab4 <TIM_Base_SetConfig+0x150>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d007      	beq.n	800ca6c <TIM_Base_SetConfig+0x108>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	4a16      	ldr	r2, [pc, #88]	@ (800cab8 <TIM_Base_SetConfig+0x154>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d003      	beq.n	800ca6c <TIM_Base_SetConfig+0x108>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4a15      	ldr	r2, [pc, #84]	@ (800cabc <TIM_Base_SetConfig+0x158>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d103      	bne.n	800ca74 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	691a      	ldr	r2, [r3, #16]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	691b      	ldr	r3, [r3, #16]
 800ca7e:	f003 0301 	and.w	r3, r3, #1
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d105      	bne.n	800ca92 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	f023 0201 	bic.w	r2, r3, #1
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	611a      	str	r2, [r3, #16]
  }
}
 800ca92:	bf00      	nop
 800ca94:	3714      	adds	r7, #20
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	40010000 	.word	0x40010000
 800caa4:	40000400 	.word	0x40000400
 800caa8:	40000800 	.word	0x40000800
 800caac:	40000c00 	.word	0x40000c00
 800cab0:	40010400 	.word	0x40010400
 800cab4:	40014000 	.word	0x40014000
 800cab8:	40014400 	.word	0x40014400
 800cabc:	40014800 	.word	0x40014800
 800cac0:	4000e000 	.word	0x4000e000
 800cac4:	4000e400 	.word	0x4000e400

0800cac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cac8:	b480      	push	{r7}
 800caca:	b087      	sub	sp, #28
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6a1b      	ldr	r3, [r3, #32]
 800cad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6a1b      	ldr	r3, [r3, #32]
 800cadc:	f023 0201 	bic.w	r2, r3, #1
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	4b37      	ldr	r3, [pc, #220]	@ (800cbd0 <TIM_OC1_SetConfig+0x108>)
 800caf4:	4013      	ands	r3, r2
 800caf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f023 0303 	bic.w	r3, r3, #3
 800cafe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	4313      	orrs	r3, r2
 800cb08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	f023 0302 	bic.w	r3, r3, #2
 800cb10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	689b      	ldr	r3, [r3, #8]
 800cb16:	697a      	ldr	r2, [r7, #20]
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a2d      	ldr	r2, [pc, #180]	@ (800cbd4 <TIM_OC1_SetConfig+0x10c>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d00f      	beq.n	800cb44 <TIM_OC1_SetConfig+0x7c>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a2c      	ldr	r2, [pc, #176]	@ (800cbd8 <TIM_OC1_SetConfig+0x110>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d00b      	beq.n	800cb44 <TIM_OC1_SetConfig+0x7c>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a2b      	ldr	r2, [pc, #172]	@ (800cbdc <TIM_OC1_SetConfig+0x114>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d007      	beq.n	800cb44 <TIM_OC1_SetConfig+0x7c>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a2a      	ldr	r2, [pc, #168]	@ (800cbe0 <TIM_OC1_SetConfig+0x118>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d003      	beq.n	800cb44 <TIM_OC1_SetConfig+0x7c>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a29      	ldr	r2, [pc, #164]	@ (800cbe4 <TIM_OC1_SetConfig+0x11c>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d10c      	bne.n	800cb5e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	f023 0308 	bic.w	r3, r3, #8
 800cb4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	697a      	ldr	r2, [r7, #20]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	f023 0304 	bic.w	r3, r3, #4
 800cb5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a1c      	ldr	r2, [pc, #112]	@ (800cbd4 <TIM_OC1_SetConfig+0x10c>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d00f      	beq.n	800cb86 <TIM_OC1_SetConfig+0xbe>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4a1b      	ldr	r2, [pc, #108]	@ (800cbd8 <TIM_OC1_SetConfig+0x110>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d00b      	beq.n	800cb86 <TIM_OC1_SetConfig+0xbe>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4a1a      	ldr	r2, [pc, #104]	@ (800cbdc <TIM_OC1_SetConfig+0x114>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d007      	beq.n	800cb86 <TIM_OC1_SetConfig+0xbe>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a19      	ldr	r2, [pc, #100]	@ (800cbe0 <TIM_OC1_SetConfig+0x118>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d003      	beq.n	800cb86 <TIM_OC1_SetConfig+0xbe>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a18      	ldr	r2, [pc, #96]	@ (800cbe4 <TIM_OC1_SetConfig+0x11c>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d111      	bne.n	800cbaa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cb94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	695b      	ldr	r3, [r3, #20]
 800cb9a:	693a      	ldr	r2, [r7, #16]
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	699b      	ldr	r3, [r3, #24]
 800cba4:	693a      	ldr	r2, [r7, #16]
 800cba6:	4313      	orrs	r3, r2
 800cba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	693a      	ldr	r2, [r7, #16]
 800cbae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	685a      	ldr	r2, [r3, #4]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	697a      	ldr	r2, [r7, #20]
 800cbc2:	621a      	str	r2, [r3, #32]
}
 800cbc4:	bf00      	nop
 800cbc6:	371c      	adds	r7, #28
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr
 800cbd0:	fffeff8f 	.word	0xfffeff8f
 800cbd4:	40010000 	.word	0x40010000
 800cbd8:	40010400 	.word	0x40010400
 800cbdc:	40014000 	.word	0x40014000
 800cbe0:	40014400 	.word	0x40014400
 800cbe4:	40014800 	.word	0x40014800

0800cbe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b087      	sub	sp, #28
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6a1b      	ldr	r3, [r3, #32]
 800cbf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6a1b      	ldr	r3, [r3, #32]
 800cbfc:	f023 0210 	bic.w	r2, r3, #16
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	699b      	ldr	r3, [r3, #24]
 800cc0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	4b34      	ldr	r3, [pc, #208]	@ (800cce4 <TIM_OC2_SetConfig+0xfc>)
 800cc14:	4013      	ands	r3, r2
 800cc16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cc1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	021b      	lsls	r3, r3, #8
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	f023 0320 	bic.w	r3, r3, #32
 800cc32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	011b      	lsls	r3, r3, #4
 800cc3a:	697a      	ldr	r2, [r7, #20]
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4a29      	ldr	r2, [pc, #164]	@ (800cce8 <TIM_OC2_SetConfig+0x100>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d003      	beq.n	800cc50 <TIM_OC2_SetConfig+0x68>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4a28      	ldr	r2, [pc, #160]	@ (800ccec <TIM_OC2_SetConfig+0x104>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d10d      	bne.n	800cc6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	011b      	lsls	r3, r3, #4
 800cc5e:	697a      	ldr	r2, [r7, #20]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4a1e      	ldr	r2, [pc, #120]	@ (800cce8 <TIM_OC2_SetConfig+0x100>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d00f      	beq.n	800cc94 <TIM_OC2_SetConfig+0xac>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4a1d      	ldr	r2, [pc, #116]	@ (800ccec <TIM_OC2_SetConfig+0x104>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d00b      	beq.n	800cc94 <TIM_OC2_SetConfig+0xac>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4a1c      	ldr	r2, [pc, #112]	@ (800ccf0 <TIM_OC2_SetConfig+0x108>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d007      	beq.n	800cc94 <TIM_OC2_SetConfig+0xac>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a1b      	ldr	r2, [pc, #108]	@ (800ccf4 <TIM_OC2_SetConfig+0x10c>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d003      	beq.n	800cc94 <TIM_OC2_SetConfig+0xac>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4a1a      	ldr	r2, [pc, #104]	@ (800ccf8 <TIM_OC2_SetConfig+0x110>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d113      	bne.n	800ccbc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cc9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cca2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	695b      	ldr	r3, [r3, #20]
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	693a      	ldr	r2, [r7, #16]
 800ccac:	4313      	orrs	r3, r2
 800ccae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	699b      	ldr	r3, [r3, #24]
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	693a      	ldr	r2, [r7, #16]
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	693a      	ldr	r2, [r7, #16]
 800ccc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	697a      	ldr	r2, [r7, #20]
 800ccd4:	621a      	str	r2, [r3, #32]
}
 800ccd6:	bf00      	nop
 800ccd8:	371c      	adds	r7, #28
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr
 800cce2:	bf00      	nop
 800cce4:	feff8fff 	.word	0xfeff8fff
 800cce8:	40010000 	.word	0x40010000
 800ccec:	40010400 	.word	0x40010400
 800ccf0:	40014000 	.word	0x40014000
 800ccf4:	40014400 	.word	0x40014400
 800ccf8:	40014800 	.word	0x40014800

0800ccfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a1b      	ldr	r3, [r3, #32]
 800cd10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	69db      	ldr	r3, [r3, #28]
 800cd22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	4b33      	ldr	r3, [pc, #204]	@ (800cdf4 <TIM_OC3_SetConfig+0xf8>)
 800cd28:	4013      	ands	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f023 0303 	bic.w	r3, r3, #3
 800cd32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cd44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	021b      	lsls	r3, r3, #8
 800cd4c:	697a      	ldr	r2, [r7, #20]
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	4a28      	ldr	r2, [pc, #160]	@ (800cdf8 <TIM_OC3_SetConfig+0xfc>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d003      	beq.n	800cd62 <TIM_OC3_SetConfig+0x66>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4a27      	ldr	r2, [pc, #156]	@ (800cdfc <TIM_OC3_SetConfig+0x100>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d10d      	bne.n	800cd7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cd68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	021b      	lsls	r3, r3, #8
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	4313      	orrs	r3, r2
 800cd74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cd7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	4a1d      	ldr	r2, [pc, #116]	@ (800cdf8 <TIM_OC3_SetConfig+0xfc>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d00f      	beq.n	800cda6 <TIM_OC3_SetConfig+0xaa>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	4a1c      	ldr	r2, [pc, #112]	@ (800cdfc <TIM_OC3_SetConfig+0x100>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d00b      	beq.n	800cda6 <TIM_OC3_SetConfig+0xaa>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4a1b      	ldr	r2, [pc, #108]	@ (800ce00 <TIM_OC3_SetConfig+0x104>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d007      	beq.n	800cda6 <TIM_OC3_SetConfig+0xaa>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	4a1a      	ldr	r2, [pc, #104]	@ (800ce04 <TIM_OC3_SetConfig+0x108>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d003      	beq.n	800cda6 <TIM_OC3_SetConfig+0xaa>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	4a19      	ldr	r2, [pc, #100]	@ (800ce08 <TIM_OC3_SetConfig+0x10c>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d113      	bne.n	800cdce <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cdac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cdb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	695b      	ldr	r3, [r3, #20]
 800cdba:	011b      	lsls	r3, r3, #4
 800cdbc:	693a      	ldr	r2, [r7, #16]
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	699b      	ldr	r3, [r3, #24]
 800cdc6:	011b      	lsls	r3, r3, #4
 800cdc8:	693a      	ldr	r2, [r7, #16]
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	693a      	ldr	r2, [r7, #16]
 800cdd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	685a      	ldr	r2, [r3, #4]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	697a      	ldr	r2, [r7, #20]
 800cde6:	621a      	str	r2, [r3, #32]
}
 800cde8:	bf00      	nop
 800cdea:	371c      	adds	r7, #28
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	fffeff8f 	.word	0xfffeff8f
 800cdf8:	40010000 	.word	0x40010000
 800cdfc:	40010400 	.word	0x40010400
 800ce00:	40014000 	.word	0x40014000
 800ce04:	40014400 	.word	0x40014400
 800ce08:	40014800 	.word	0x40014800

0800ce0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6a1b      	ldr	r3, [r3, #32]
 800ce20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	69db      	ldr	r3, [r3, #28]
 800ce32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	4b24      	ldr	r3, [pc, #144]	@ (800cec8 <TIM_OC4_SetConfig+0xbc>)
 800ce38:	4013      	ands	r3, r2
 800ce3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	021b      	lsls	r3, r3, #8
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ce56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	031b      	lsls	r3, r3, #12
 800ce5e:	693a      	ldr	r2, [r7, #16]
 800ce60:	4313      	orrs	r3, r2
 800ce62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	4a19      	ldr	r2, [pc, #100]	@ (800cecc <TIM_OC4_SetConfig+0xc0>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d00f      	beq.n	800ce8c <TIM_OC4_SetConfig+0x80>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	4a18      	ldr	r2, [pc, #96]	@ (800ced0 <TIM_OC4_SetConfig+0xc4>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d00b      	beq.n	800ce8c <TIM_OC4_SetConfig+0x80>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	4a17      	ldr	r2, [pc, #92]	@ (800ced4 <TIM_OC4_SetConfig+0xc8>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d007      	beq.n	800ce8c <TIM_OC4_SetConfig+0x80>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	4a16      	ldr	r2, [pc, #88]	@ (800ced8 <TIM_OC4_SetConfig+0xcc>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d003      	beq.n	800ce8c <TIM_OC4_SetConfig+0x80>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	4a15      	ldr	r2, [pc, #84]	@ (800cedc <TIM_OC4_SetConfig+0xd0>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d109      	bne.n	800cea0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	695b      	ldr	r3, [r3, #20]
 800ce98:	019b      	lsls	r3, r3, #6
 800ce9a:	697a      	ldr	r2, [r7, #20]
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	697a      	ldr	r2, [r7, #20]
 800cea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	685a      	ldr	r2, [r3, #4]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	693a      	ldr	r2, [r7, #16]
 800ceb8:	621a      	str	r2, [r3, #32]
}
 800ceba:	bf00      	nop
 800cebc:	371c      	adds	r7, #28
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop
 800cec8:	feff8fff 	.word	0xfeff8fff
 800cecc:	40010000 	.word	0x40010000
 800ced0:	40010400 	.word	0x40010400
 800ced4:	40014000 	.word	0x40014000
 800ced8:	40014400 	.word	0x40014400
 800cedc:	40014800 	.word	0x40014800

0800cee0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b087      	sub	sp, #28
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6a1b      	ldr	r3, [r3, #32]
 800ceee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a1b      	ldr	r3, [r3, #32]
 800cef4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	4b21      	ldr	r3, [pc, #132]	@ (800cf90 <TIM_OC5_SetConfig+0xb0>)
 800cf0c:	4013      	ands	r3, r2
 800cf0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	4313      	orrs	r3, r2
 800cf18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cf20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	041b      	lsls	r3, r3, #16
 800cf28:	693a      	ldr	r2, [r7, #16]
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4a18      	ldr	r2, [pc, #96]	@ (800cf94 <TIM_OC5_SetConfig+0xb4>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d00f      	beq.n	800cf56 <TIM_OC5_SetConfig+0x76>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	4a17      	ldr	r2, [pc, #92]	@ (800cf98 <TIM_OC5_SetConfig+0xb8>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d00b      	beq.n	800cf56 <TIM_OC5_SetConfig+0x76>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	4a16      	ldr	r2, [pc, #88]	@ (800cf9c <TIM_OC5_SetConfig+0xbc>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d007      	beq.n	800cf56 <TIM_OC5_SetConfig+0x76>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	4a15      	ldr	r2, [pc, #84]	@ (800cfa0 <TIM_OC5_SetConfig+0xc0>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d003      	beq.n	800cf56 <TIM_OC5_SetConfig+0x76>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4a14      	ldr	r2, [pc, #80]	@ (800cfa4 <TIM_OC5_SetConfig+0xc4>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d109      	bne.n	800cf6a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cf5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	695b      	ldr	r3, [r3, #20]
 800cf62:	021b      	lsls	r3, r3, #8
 800cf64:	697a      	ldr	r2, [r7, #20]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	697a      	ldr	r2, [r7, #20]
 800cf6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	685a      	ldr	r2, [r3, #4]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	693a      	ldr	r2, [r7, #16]
 800cf82:	621a      	str	r2, [r3, #32]
}
 800cf84:	bf00      	nop
 800cf86:	371c      	adds	r7, #28
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr
 800cf90:	fffeff8f 	.word	0xfffeff8f
 800cf94:	40010000 	.word	0x40010000
 800cf98:	40010400 	.word	0x40010400
 800cf9c:	40014000 	.word	0x40014000
 800cfa0:	40014400 	.word	0x40014400
 800cfa4:	40014800 	.word	0x40014800

0800cfa8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b087      	sub	sp, #28
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6a1b      	ldr	r3, [r3, #32]
 800cfb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6a1b      	ldr	r3, [r3, #32]
 800cfbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	4b22      	ldr	r3, [pc, #136]	@ (800d05c <TIM_OC6_SetConfig+0xb4>)
 800cfd4:	4013      	ands	r3, r2
 800cfd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	021b      	lsls	r3, r3, #8
 800cfde:	68fa      	ldr	r2, [r7, #12]
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cfea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	051b      	lsls	r3, r3, #20
 800cff2:	693a      	ldr	r2, [r7, #16]
 800cff4:	4313      	orrs	r3, r2
 800cff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4a19      	ldr	r2, [pc, #100]	@ (800d060 <TIM_OC6_SetConfig+0xb8>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d00f      	beq.n	800d020 <TIM_OC6_SetConfig+0x78>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4a18      	ldr	r2, [pc, #96]	@ (800d064 <TIM_OC6_SetConfig+0xbc>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d00b      	beq.n	800d020 <TIM_OC6_SetConfig+0x78>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a17      	ldr	r2, [pc, #92]	@ (800d068 <TIM_OC6_SetConfig+0xc0>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d007      	beq.n	800d020 <TIM_OC6_SetConfig+0x78>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a16      	ldr	r2, [pc, #88]	@ (800d06c <TIM_OC6_SetConfig+0xc4>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d003      	beq.n	800d020 <TIM_OC6_SetConfig+0x78>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a15      	ldr	r2, [pc, #84]	@ (800d070 <TIM_OC6_SetConfig+0xc8>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d109      	bne.n	800d034 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d026:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	695b      	ldr	r3, [r3, #20]
 800d02c:	029b      	lsls	r3, r3, #10
 800d02e:	697a      	ldr	r2, [r7, #20]
 800d030:	4313      	orrs	r3, r2
 800d032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	697a      	ldr	r2, [r7, #20]
 800d038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	685a      	ldr	r2, [r3, #4]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	693a      	ldr	r2, [r7, #16]
 800d04c:	621a      	str	r2, [r3, #32]
}
 800d04e:	bf00      	nop
 800d050:	371c      	adds	r7, #28
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	feff8fff 	.word	0xfeff8fff
 800d060:	40010000 	.word	0x40010000
 800d064:	40010400 	.word	0x40010400
 800d068:	40014000 	.word	0x40014000
 800d06c:	40014400 	.word	0x40014400
 800d070:	40014800 	.word	0x40014800

0800d074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d074:	b480      	push	{r7}
 800d076:	b087      	sub	sp, #28
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6a1b      	ldr	r3, [r3, #32]
 800d084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6a1b      	ldr	r3, [r3, #32]
 800d08a:	f023 0201 	bic.w	r2, r3, #1
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	699b      	ldr	r3, [r3, #24]
 800d096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d09e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	011b      	lsls	r3, r3, #4
 800d0a4:	693a      	ldr	r2, [r7, #16]
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	f023 030a 	bic.w	r3, r3, #10
 800d0b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d0b2:	697a      	ldr	r2, [r7, #20]
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	693a      	ldr	r2, [r7, #16]
 800d0be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	697a      	ldr	r2, [r7, #20]
 800d0c4:	621a      	str	r2, [r3, #32]
}
 800d0c6:	bf00      	nop
 800d0c8:	371c      	adds	r7, #28
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr

0800d0d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d0d2:	b480      	push	{r7}
 800d0d4:	b087      	sub	sp, #28
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	60f8      	str	r0, [r7, #12]
 800d0da:	60b9      	str	r1, [r7, #8]
 800d0dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6a1b      	ldr	r3, [r3, #32]
 800d0e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	6a1b      	ldr	r3, [r3, #32]
 800d0e8:	f023 0210 	bic.w	r2, r3, #16
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	699b      	ldr	r3, [r3, #24]
 800d0f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d0fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	031b      	lsls	r3, r3, #12
 800d102:	693a      	ldr	r2, [r7, #16]
 800d104:	4313      	orrs	r3, r2
 800d106:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d10e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	011b      	lsls	r3, r3, #4
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	4313      	orrs	r3, r2
 800d118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	693a      	ldr	r2, [r7, #16]
 800d11e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	697a      	ldr	r2, [r7, #20]
 800d124:	621a      	str	r2, [r3, #32]
}
 800d126:	bf00      	nop
 800d128:	371c      	adds	r7, #28
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
	...

0800d134 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	4b09      	ldr	r3, [pc, #36]	@ (800d16c <TIM_ITRx_SetConfig+0x38>)
 800d148:	4013      	ands	r3, r2
 800d14a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d14c:	683a      	ldr	r2, [r7, #0]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	4313      	orrs	r3, r2
 800d152:	f043 0307 	orr.w	r3, r3, #7
 800d156:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	609a      	str	r2, [r3, #8]
}
 800d15e:	bf00      	nop
 800d160:	3714      	adds	r7, #20
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop
 800d16c:	ffcfff8f 	.word	0xffcfff8f

0800d170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d170:	b480      	push	{r7}
 800d172:	b087      	sub	sp, #28
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
 800d17c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d18a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	021a      	lsls	r2, r3, #8
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	431a      	orrs	r2, r3
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	4313      	orrs	r3, r2
 800d198:	697a      	ldr	r2, [r7, #20]
 800d19a:	4313      	orrs	r3, r2
 800d19c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	697a      	ldr	r2, [r7, #20]
 800d1a2:	609a      	str	r2, [r3, #8]
}
 800d1a4:	bf00      	nop
 800d1a6:	371c      	adds	r7, #28
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b087      	sub	sp, #28
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	f003 031f 	and.w	r3, r3, #31
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6a1a      	ldr	r2, [r3, #32]
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	43db      	mvns	r3, r3
 800d1d2:	401a      	ands	r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6a1a      	ldr	r2, [r3, #32]
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	f003 031f 	and.w	r3, r3, #31
 800d1e2:	6879      	ldr	r1, [r7, #4]
 800d1e4:	fa01 f303 	lsl.w	r3, r1, r3
 800d1e8:	431a      	orrs	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	621a      	str	r2, [r3, #32]
}
 800d1ee:	bf00      	nop
 800d1f0:	371c      	adds	r7, #28
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr
	...

0800d1fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d101      	bne.n	800d214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d210:	2302      	movs	r3, #2
 800d212:	e077      	b.n	800d304 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2201      	movs	r2, #1
 800d218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2202      	movs	r2, #2
 800d220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	689b      	ldr	r3, [r3, #8]
 800d232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a35      	ldr	r2, [pc, #212]	@ (800d310 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d004      	beq.n	800d248 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4a34      	ldr	r2, [pc, #208]	@ (800d314 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d108      	bne.n	800d25a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d24e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	4313      	orrs	r3, r2
 800d258:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	68fa      	ldr	r2, [r7, #12]
 800d268:	4313      	orrs	r3, r2
 800d26a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a25      	ldr	r2, [pc, #148]	@ (800d310 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d02c      	beq.n	800d2d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d286:	d027      	beq.n	800d2d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4a22      	ldr	r2, [pc, #136]	@ (800d318 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d022      	beq.n	800d2d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a21      	ldr	r2, [pc, #132]	@ (800d31c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d01d      	beq.n	800d2d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a1f      	ldr	r2, [pc, #124]	@ (800d320 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d018      	beq.n	800d2d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4a1a      	ldr	r2, [pc, #104]	@ (800d314 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d013      	beq.n	800d2d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a1b      	ldr	r2, [pc, #108]	@ (800d324 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d00e      	beq.n	800d2d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4a1a      	ldr	r2, [pc, #104]	@ (800d328 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d009      	beq.n	800d2d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a18      	ldr	r2, [pc, #96]	@ (800d32c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d004      	beq.n	800d2d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a17      	ldr	r2, [pc, #92]	@ (800d330 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d10c      	bne.n	800d2f2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d2de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	68ba      	ldr	r2, [r7, #8]
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68ba      	ldr	r2, [r7, #8]
 800d2f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3714      	adds	r7, #20
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr
 800d310:	40010000 	.word	0x40010000
 800d314:	40010400 	.word	0x40010400
 800d318:	40000400 	.word	0x40000400
 800d31c:	40000800 	.word	0x40000800
 800d320:	40000c00 	.word	0x40000c00
 800d324:	40001800 	.word	0x40001800
 800d328:	40014000 	.word	0x40014000
 800d32c:	4000e000 	.word	0x4000e000
 800d330:	4000e400 	.word	0x4000e400

0800d334 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d33c:	bf00      	nop
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d364:	bf00      	nop
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d101      	bne.n	800d382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d37e:	2301      	movs	r3, #1
 800d380:	e042      	b.n	800d408 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d106      	bne.n	800d39a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7f4 fdd1 	bl	8001f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2224      	movs	r2, #36	@ 0x24
 800d39e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f022 0201 	bic.w	r2, r2, #1
 800d3b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d002      	beq.n	800d3c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 fe94 	bl	800e0e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 f825 	bl	800d410 <UART_SetConfig>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d101      	bne.n	800d3d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e01b      	b.n	800d408 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	685a      	ldr	r2, [r3, #4]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d3de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	689a      	ldr	r2, [r3, #8]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d3ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f042 0201 	orr.w	r2, r2, #1
 800d3fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 ff13 	bl	800e22c <UART_CheckIdleState>
 800d406:	4603      	mov	r3, r0
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d414:	b092      	sub	sp, #72	@ 0x48
 800d416:	af00      	add	r7, sp, #0
 800d418:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d41a:	2300      	movs	r3, #0
 800d41c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	689a      	ldr	r2, [r3, #8]
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	431a      	orrs	r2, r3
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	695b      	ldr	r3, [r3, #20]
 800d42e:	431a      	orrs	r2, r3
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	69db      	ldr	r3, [r3, #28]
 800d434:	4313      	orrs	r3, r2
 800d436:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	4bbe      	ldr	r3, [pc, #760]	@ (800d738 <UART_SetConfig+0x328>)
 800d440:	4013      	ands	r3, r2
 800d442:	697a      	ldr	r2, [r7, #20]
 800d444:	6812      	ldr	r2, [r2, #0]
 800d446:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d448:	430b      	orrs	r3, r1
 800d44a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	68da      	ldr	r2, [r3, #12]
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	430a      	orrs	r2, r1
 800d460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	699b      	ldr	r3, [r3, #24]
 800d466:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4ab3      	ldr	r2, [pc, #716]	@ (800d73c <UART_SetConfig+0x32c>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d004      	beq.n	800d47c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	6a1b      	ldr	r3, [r3, #32]
 800d476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d478:	4313      	orrs	r3, r2
 800d47a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	689a      	ldr	r2, [r3, #8]
 800d482:	4baf      	ldr	r3, [pc, #700]	@ (800d740 <UART_SetConfig+0x330>)
 800d484:	4013      	ands	r3, r2
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	6812      	ldr	r2, [r2, #0]
 800d48a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d48c:	430b      	orrs	r3, r1
 800d48e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d496:	f023 010f 	bic.w	r1, r3, #15
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	430a      	orrs	r2, r1
 800d4a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4aa6      	ldr	r2, [pc, #664]	@ (800d744 <UART_SetConfig+0x334>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d177      	bne.n	800d5a0 <UART_SetConfig+0x190>
 800d4b0:	4ba5      	ldr	r3, [pc, #660]	@ (800d748 <UART_SetConfig+0x338>)
 800d4b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d4b8:	2b28      	cmp	r3, #40	@ 0x28
 800d4ba:	d86d      	bhi.n	800d598 <UART_SetConfig+0x188>
 800d4bc:	a201      	add	r2, pc, #4	@ (adr r2, 800d4c4 <UART_SetConfig+0xb4>)
 800d4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c2:	bf00      	nop
 800d4c4:	0800d569 	.word	0x0800d569
 800d4c8:	0800d599 	.word	0x0800d599
 800d4cc:	0800d599 	.word	0x0800d599
 800d4d0:	0800d599 	.word	0x0800d599
 800d4d4:	0800d599 	.word	0x0800d599
 800d4d8:	0800d599 	.word	0x0800d599
 800d4dc:	0800d599 	.word	0x0800d599
 800d4e0:	0800d599 	.word	0x0800d599
 800d4e4:	0800d571 	.word	0x0800d571
 800d4e8:	0800d599 	.word	0x0800d599
 800d4ec:	0800d599 	.word	0x0800d599
 800d4f0:	0800d599 	.word	0x0800d599
 800d4f4:	0800d599 	.word	0x0800d599
 800d4f8:	0800d599 	.word	0x0800d599
 800d4fc:	0800d599 	.word	0x0800d599
 800d500:	0800d599 	.word	0x0800d599
 800d504:	0800d579 	.word	0x0800d579
 800d508:	0800d599 	.word	0x0800d599
 800d50c:	0800d599 	.word	0x0800d599
 800d510:	0800d599 	.word	0x0800d599
 800d514:	0800d599 	.word	0x0800d599
 800d518:	0800d599 	.word	0x0800d599
 800d51c:	0800d599 	.word	0x0800d599
 800d520:	0800d599 	.word	0x0800d599
 800d524:	0800d581 	.word	0x0800d581
 800d528:	0800d599 	.word	0x0800d599
 800d52c:	0800d599 	.word	0x0800d599
 800d530:	0800d599 	.word	0x0800d599
 800d534:	0800d599 	.word	0x0800d599
 800d538:	0800d599 	.word	0x0800d599
 800d53c:	0800d599 	.word	0x0800d599
 800d540:	0800d599 	.word	0x0800d599
 800d544:	0800d589 	.word	0x0800d589
 800d548:	0800d599 	.word	0x0800d599
 800d54c:	0800d599 	.word	0x0800d599
 800d550:	0800d599 	.word	0x0800d599
 800d554:	0800d599 	.word	0x0800d599
 800d558:	0800d599 	.word	0x0800d599
 800d55c:	0800d599 	.word	0x0800d599
 800d560:	0800d599 	.word	0x0800d599
 800d564:	0800d591 	.word	0x0800d591
 800d568:	2301      	movs	r3, #1
 800d56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d56e:	e326      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d570:	2304      	movs	r3, #4
 800d572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d576:	e322      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d578:	2308      	movs	r3, #8
 800d57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d57e:	e31e      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d580:	2310      	movs	r3, #16
 800d582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d586:	e31a      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d588:	2320      	movs	r3, #32
 800d58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d58e:	e316      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d590:	2340      	movs	r3, #64	@ 0x40
 800d592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d596:	e312      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d598:	2380      	movs	r3, #128	@ 0x80
 800d59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d59e:	e30e      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a69      	ldr	r2, [pc, #420]	@ (800d74c <UART_SetConfig+0x33c>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d130      	bne.n	800d60c <UART_SetConfig+0x1fc>
 800d5aa:	4b67      	ldr	r3, [pc, #412]	@ (800d748 <UART_SetConfig+0x338>)
 800d5ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5ae:	f003 0307 	and.w	r3, r3, #7
 800d5b2:	2b05      	cmp	r3, #5
 800d5b4:	d826      	bhi.n	800d604 <UART_SetConfig+0x1f4>
 800d5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d5bc <UART_SetConfig+0x1ac>)
 800d5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5bc:	0800d5d5 	.word	0x0800d5d5
 800d5c0:	0800d5dd 	.word	0x0800d5dd
 800d5c4:	0800d5e5 	.word	0x0800d5e5
 800d5c8:	0800d5ed 	.word	0x0800d5ed
 800d5cc:	0800d5f5 	.word	0x0800d5f5
 800d5d0:	0800d5fd 	.word	0x0800d5fd
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5da:	e2f0      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d5dc:	2304      	movs	r3, #4
 800d5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5e2:	e2ec      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d5e4:	2308      	movs	r3, #8
 800d5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ea:	e2e8      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d5ec:	2310      	movs	r3, #16
 800d5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5f2:	e2e4      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d5f4:	2320      	movs	r3, #32
 800d5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5fa:	e2e0      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d5fc:	2340      	movs	r3, #64	@ 0x40
 800d5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d602:	e2dc      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d604:	2380      	movs	r3, #128	@ 0x80
 800d606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d60a:	e2d8      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a4f      	ldr	r2, [pc, #316]	@ (800d750 <UART_SetConfig+0x340>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d130      	bne.n	800d678 <UART_SetConfig+0x268>
 800d616:	4b4c      	ldr	r3, [pc, #304]	@ (800d748 <UART_SetConfig+0x338>)
 800d618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d61a:	f003 0307 	and.w	r3, r3, #7
 800d61e:	2b05      	cmp	r3, #5
 800d620:	d826      	bhi.n	800d670 <UART_SetConfig+0x260>
 800d622:	a201      	add	r2, pc, #4	@ (adr r2, 800d628 <UART_SetConfig+0x218>)
 800d624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d628:	0800d641 	.word	0x0800d641
 800d62c:	0800d649 	.word	0x0800d649
 800d630:	0800d651 	.word	0x0800d651
 800d634:	0800d659 	.word	0x0800d659
 800d638:	0800d661 	.word	0x0800d661
 800d63c:	0800d669 	.word	0x0800d669
 800d640:	2300      	movs	r3, #0
 800d642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d646:	e2ba      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d648:	2304      	movs	r3, #4
 800d64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d64e:	e2b6      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d650:	2308      	movs	r3, #8
 800d652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d656:	e2b2      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d658:	2310      	movs	r3, #16
 800d65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d65e:	e2ae      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d660:	2320      	movs	r3, #32
 800d662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d666:	e2aa      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d668:	2340      	movs	r3, #64	@ 0x40
 800d66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d66e:	e2a6      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d670:	2380      	movs	r3, #128	@ 0x80
 800d672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d676:	e2a2      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a35      	ldr	r2, [pc, #212]	@ (800d754 <UART_SetConfig+0x344>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d130      	bne.n	800d6e4 <UART_SetConfig+0x2d4>
 800d682:	4b31      	ldr	r3, [pc, #196]	@ (800d748 <UART_SetConfig+0x338>)
 800d684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d686:	f003 0307 	and.w	r3, r3, #7
 800d68a:	2b05      	cmp	r3, #5
 800d68c:	d826      	bhi.n	800d6dc <UART_SetConfig+0x2cc>
 800d68e:	a201      	add	r2, pc, #4	@ (adr r2, 800d694 <UART_SetConfig+0x284>)
 800d690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d694:	0800d6ad 	.word	0x0800d6ad
 800d698:	0800d6b5 	.word	0x0800d6b5
 800d69c:	0800d6bd 	.word	0x0800d6bd
 800d6a0:	0800d6c5 	.word	0x0800d6c5
 800d6a4:	0800d6cd 	.word	0x0800d6cd
 800d6a8:	0800d6d5 	.word	0x0800d6d5
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6b2:	e284      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d6b4:	2304      	movs	r3, #4
 800d6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ba:	e280      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d6bc:	2308      	movs	r3, #8
 800d6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6c2:	e27c      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d6c4:	2310      	movs	r3, #16
 800d6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ca:	e278      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d6cc:	2320      	movs	r3, #32
 800d6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6d2:	e274      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d6d4:	2340      	movs	r3, #64	@ 0x40
 800d6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6da:	e270      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d6dc:	2380      	movs	r3, #128	@ 0x80
 800d6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6e2:	e26c      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4a1b      	ldr	r2, [pc, #108]	@ (800d758 <UART_SetConfig+0x348>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d142      	bne.n	800d774 <UART_SetConfig+0x364>
 800d6ee:	4b16      	ldr	r3, [pc, #88]	@ (800d748 <UART_SetConfig+0x338>)
 800d6f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6f2:	f003 0307 	and.w	r3, r3, #7
 800d6f6:	2b05      	cmp	r3, #5
 800d6f8:	d838      	bhi.n	800d76c <UART_SetConfig+0x35c>
 800d6fa:	a201      	add	r2, pc, #4	@ (adr r2, 800d700 <UART_SetConfig+0x2f0>)
 800d6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d700:	0800d719 	.word	0x0800d719
 800d704:	0800d721 	.word	0x0800d721
 800d708:	0800d729 	.word	0x0800d729
 800d70c:	0800d731 	.word	0x0800d731
 800d710:	0800d75d 	.word	0x0800d75d
 800d714:	0800d765 	.word	0x0800d765
 800d718:	2300      	movs	r3, #0
 800d71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d71e:	e24e      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d720:	2304      	movs	r3, #4
 800d722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d726:	e24a      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d728:	2308      	movs	r3, #8
 800d72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d72e:	e246      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d730:	2310      	movs	r3, #16
 800d732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d736:	e242      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d738:	cfff69f3 	.word	0xcfff69f3
 800d73c:	58000c00 	.word	0x58000c00
 800d740:	11fff4ff 	.word	0x11fff4ff
 800d744:	40011000 	.word	0x40011000
 800d748:	58024400 	.word	0x58024400
 800d74c:	40004400 	.word	0x40004400
 800d750:	40004800 	.word	0x40004800
 800d754:	40004c00 	.word	0x40004c00
 800d758:	40005000 	.word	0x40005000
 800d75c:	2320      	movs	r3, #32
 800d75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d762:	e22c      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d764:	2340      	movs	r3, #64	@ 0x40
 800d766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d76a:	e228      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d76c:	2380      	movs	r3, #128	@ 0x80
 800d76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d772:	e224      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4ab1      	ldr	r2, [pc, #708]	@ (800da40 <UART_SetConfig+0x630>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d176      	bne.n	800d86c <UART_SetConfig+0x45c>
 800d77e:	4bb1      	ldr	r3, [pc, #708]	@ (800da44 <UART_SetConfig+0x634>)
 800d780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d782:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d786:	2b28      	cmp	r3, #40	@ 0x28
 800d788:	d86c      	bhi.n	800d864 <UART_SetConfig+0x454>
 800d78a:	a201      	add	r2, pc, #4	@ (adr r2, 800d790 <UART_SetConfig+0x380>)
 800d78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d790:	0800d835 	.word	0x0800d835
 800d794:	0800d865 	.word	0x0800d865
 800d798:	0800d865 	.word	0x0800d865
 800d79c:	0800d865 	.word	0x0800d865
 800d7a0:	0800d865 	.word	0x0800d865
 800d7a4:	0800d865 	.word	0x0800d865
 800d7a8:	0800d865 	.word	0x0800d865
 800d7ac:	0800d865 	.word	0x0800d865
 800d7b0:	0800d83d 	.word	0x0800d83d
 800d7b4:	0800d865 	.word	0x0800d865
 800d7b8:	0800d865 	.word	0x0800d865
 800d7bc:	0800d865 	.word	0x0800d865
 800d7c0:	0800d865 	.word	0x0800d865
 800d7c4:	0800d865 	.word	0x0800d865
 800d7c8:	0800d865 	.word	0x0800d865
 800d7cc:	0800d865 	.word	0x0800d865
 800d7d0:	0800d845 	.word	0x0800d845
 800d7d4:	0800d865 	.word	0x0800d865
 800d7d8:	0800d865 	.word	0x0800d865
 800d7dc:	0800d865 	.word	0x0800d865
 800d7e0:	0800d865 	.word	0x0800d865
 800d7e4:	0800d865 	.word	0x0800d865
 800d7e8:	0800d865 	.word	0x0800d865
 800d7ec:	0800d865 	.word	0x0800d865
 800d7f0:	0800d84d 	.word	0x0800d84d
 800d7f4:	0800d865 	.word	0x0800d865
 800d7f8:	0800d865 	.word	0x0800d865
 800d7fc:	0800d865 	.word	0x0800d865
 800d800:	0800d865 	.word	0x0800d865
 800d804:	0800d865 	.word	0x0800d865
 800d808:	0800d865 	.word	0x0800d865
 800d80c:	0800d865 	.word	0x0800d865
 800d810:	0800d855 	.word	0x0800d855
 800d814:	0800d865 	.word	0x0800d865
 800d818:	0800d865 	.word	0x0800d865
 800d81c:	0800d865 	.word	0x0800d865
 800d820:	0800d865 	.word	0x0800d865
 800d824:	0800d865 	.word	0x0800d865
 800d828:	0800d865 	.word	0x0800d865
 800d82c:	0800d865 	.word	0x0800d865
 800d830:	0800d85d 	.word	0x0800d85d
 800d834:	2301      	movs	r3, #1
 800d836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d83a:	e1c0      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d83c:	2304      	movs	r3, #4
 800d83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d842:	e1bc      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d844:	2308      	movs	r3, #8
 800d846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d84a:	e1b8      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d84c:	2310      	movs	r3, #16
 800d84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d852:	e1b4      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d854:	2320      	movs	r3, #32
 800d856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d85a:	e1b0      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d85c:	2340      	movs	r3, #64	@ 0x40
 800d85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d862:	e1ac      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d864:	2380      	movs	r3, #128	@ 0x80
 800d866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d86a:	e1a8      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4a75      	ldr	r2, [pc, #468]	@ (800da48 <UART_SetConfig+0x638>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d130      	bne.n	800d8d8 <UART_SetConfig+0x4c8>
 800d876:	4b73      	ldr	r3, [pc, #460]	@ (800da44 <UART_SetConfig+0x634>)
 800d878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d87a:	f003 0307 	and.w	r3, r3, #7
 800d87e:	2b05      	cmp	r3, #5
 800d880:	d826      	bhi.n	800d8d0 <UART_SetConfig+0x4c0>
 800d882:	a201      	add	r2, pc, #4	@ (adr r2, 800d888 <UART_SetConfig+0x478>)
 800d884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d888:	0800d8a1 	.word	0x0800d8a1
 800d88c:	0800d8a9 	.word	0x0800d8a9
 800d890:	0800d8b1 	.word	0x0800d8b1
 800d894:	0800d8b9 	.word	0x0800d8b9
 800d898:	0800d8c1 	.word	0x0800d8c1
 800d89c:	0800d8c9 	.word	0x0800d8c9
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8a6:	e18a      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d8a8:	2304      	movs	r3, #4
 800d8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ae:	e186      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d8b0:	2308      	movs	r3, #8
 800d8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8b6:	e182      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d8b8:	2310      	movs	r3, #16
 800d8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8be:	e17e      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d8c0:	2320      	movs	r3, #32
 800d8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8c6:	e17a      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d8c8:	2340      	movs	r3, #64	@ 0x40
 800d8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ce:	e176      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d8d0:	2380      	movs	r3, #128	@ 0x80
 800d8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8d6:	e172      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a5b      	ldr	r2, [pc, #364]	@ (800da4c <UART_SetConfig+0x63c>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d130      	bne.n	800d944 <UART_SetConfig+0x534>
 800d8e2:	4b58      	ldr	r3, [pc, #352]	@ (800da44 <UART_SetConfig+0x634>)
 800d8e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8e6:	f003 0307 	and.w	r3, r3, #7
 800d8ea:	2b05      	cmp	r3, #5
 800d8ec:	d826      	bhi.n	800d93c <UART_SetConfig+0x52c>
 800d8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800d8f4 <UART_SetConfig+0x4e4>)
 800d8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f4:	0800d90d 	.word	0x0800d90d
 800d8f8:	0800d915 	.word	0x0800d915
 800d8fc:	0800d91d 	.word	0x0800d91d
 800d900:	0800d925 	.word	0x0800d925
 800d904:	0800d92d 	.word	0x0800d92d
 800d908:	0800d935 	.word	0x0800d935
 800d90c:	2300      	movs	r3, #0
 800d90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d912:	e154      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d914:	2304      	movs	r3, #4
 800d916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d91a:	e150      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d91c:	2308      	movs	r3, #8
 800d91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d922:	e14c      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d924:	2310      	movs	r3, #16
 800d926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d92a:	e148      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d92c:	2320      	movs	r3, #32
 800d92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d932:	e144      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d934:	2340      	movs	r3, #64	@ 0x40
 800d936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d93a:	e140      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d93c:	2380      	movs	r3, #128	@ 0x80
 800d93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d942:	e13c      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4a41      	ldr	r2, [pc, #260]	@ (800da50 <UART_SetConfig+0x640>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	f040 8082 	bne.w	800da54 <UART_SetConfig+0x644>
 800d950:	4b3c      	ldr	r3, [pc, #240]	@ (800da44 <UART_SetConfig+0x634>)
 800d952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d954:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d958:	2b28      	cmp	r3, #40	@ 0x28
 800d95a:	d86d      	bhi.n	800da38 <UART_SetConfig+0x628>
 800d95c:	a201      	add	r2, pc, #4	@ (adr r2, 800d964 <UART_SetConfig+0x554>)
 800d95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d962:	bf00      	nop
 800d964:	0800da09 	.word	0x0800da09
 800d968:	0800da39 	.word	0x0800da39
 800d96c:	0800da39 	.word	0x0800da39
 800d970:	0800da39 	.word	0x0800da39
 800d974:	0800da39 	.word	0x0800da39
 800d978:	0800da39 	.word	0x0800da39
 800d97c:	0800da39 	.word	0x0800da39
 800d980:	0800da39 	.word	0x0800da39
 800d984:	0800da11 	.word	0x0800da11
 800d988:	0800da39 	.word	0x0800da39
 800d98c:	0800da39 	.word	0x0800da39
 800d990:	0800da39 	.word	0x0800da39
 800d994:	0800da39 	.word	0x0800da39
 800d998:	0800da39 	.word	0x0800da39
 800d99c:	0800da39 	.word	0x0800da39
 800d9a0:	0800da39 	.word	0x0800da39
 800d9a4:	0800da19 	.word	0x0800da19
 800d9a8:	0800da39 	.word	0x0800da39
 800d9ac:	0800da39 	.word	0x0800da39
 800d9b0:	0800da39 	.word	0x0800da39
 800d9b4:	0800da39 	.word	0x0800da39
 800d9b8:	0800da39 	.word	0x0800da39
 800d9bc:	0800da39 	.word	0x0800da39
 800d9c0:	0800da39 	.word	0x0800da39
 800d9c4:	0800da21 	.word	0x0800da21
 800d9c8:	0800da39 	.word	0x0800da39
 800d9cc:	0800da39 	.word	0x0800da39
 800d9d0:	0800da39 	.word	0x0800da39
 800d9d4:	0800da39 	.word	0x0800da39
 800d9d8:	0800da39 	.word	0x0800da39
 800d9dc:	0800da39 	.word	0x0800da39
 800d9e0:	0800da39 	.word	0x0800da39
 800d9e4:	0800da29 	.word	0x0800da29
 800d9e8:	0800da39 	.word	0x0800da39
 800d9ec:	0800da39 	.word	0x0800da39
 800d9f0:	0800da39 	.word	0x0800da39
 800d9f4:	0800da39 	.word	0x0800da39
 800d9f8:	0800da39 	.word	0x0800da39
 800d9fc:	0800da39 	.word	0x0800da39
 800da00:	0800da39 	.word	0x0800da39
 800da04:	0800da31 	.word	0x0800da31
 800da08:	2301      	movs	r3, #1
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da0e:	e0d6      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800da10:	2304      	movs	r3, #4
 800da12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da16:	e0d2      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800da18:	2308      	movs	r3, #8
 800da1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da1e:	e0ce      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800da20:	2310      	movs	r3, #16
 800da22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da26:	e0ca      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800da28:	2320      	movs	r3, #32
 800da2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da2e:	e0c6      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800da30:	2340      	movs	r3, #64	@ 0x40
 800da32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da36:	e0c2      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800da38:	2380      	movs	r3, #128	@ 0x80
 800da3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da3e:	e0be      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800da40:	40011400 	.word	0x40011400
 800da44:	58024400 	.word	0x58024400
 800da48:	40007800 	.word	0x40007800
 800da4c:	40007c00 	.word	0x40007c00
 800da50:	40011800 	.word	0x40011800
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4aad      	ldr	r2, [pc, #692]	@ (800dd10 <UART_SetConfig+0x900>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d176      	bne.n	800db4c <UART_SetConfig+0x73c>
 800da5e:	4bad      	ldr	r3, [pc, #692]	@ (800dd14 <UART_SetConfig+0x904>)
 800da60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800da66:	2b28      	cmp	r3, #40	@ 0x28
 800da68:	d86c      	bhi.n	800db44 <UART_SetConfig+0x734>
 800da6a:	a201      	add	r2, pc, #4	@ (adr r2, 800da70 <UART_SetConfig+0x660>)
 800da6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da70:	0800db15 	.word	0x0800db15
 800da74:	0800db45 	.word	0x0800db45
 800da78:	0800db45 	.word	0x0800db45
 800da7c:	0800db45 	.word	0x0800db45
 800da80:	0800db45 	.word	0x0800db45
 800da84:	0800db45 	.word	0x0800db45
 800da88:	0800db45 	.word	0x0800db45
 800da8c:	0800db45 	.word	0x0800db45
 800da90:	0800db1d 	.word	0x0800db1d
 800da94:	0800db45 	.word	0x0800db45
 800da98:	0800db45 	.word	0x0800db45
 800da9c:	0800db45 	.word	0x0800db45
 800daa0:	0800db45 	.word	0x0800db45
 800daa4:	0800db45 	.word	0x0800db45
 800daa8:	0800db45 	.word	0x0800db45
 800daac:	0800db45 	.word	0x0800db45
 800dab0:	0800db25 	.word	0x0800db25
 800dab4:	0800db45 	.word	0x0800db45
 800dab8:	0800db45 	.word	0x0800db45
 800dabc:	0800db45 	.word	0x0800db45
 800dac0:	0800db45 	.word	0x0800db45
 800dac4:	0800db45 	.word	0x0800db45
 800dac8:	0800db45 	.word	0x0800db45
 800dacc:	0800db45 	.word	0x0800db45
 800dad0:	0800db2d 	.word	0x0800db2d
 800dad4:	0800db45 	.word	0x0800db45
 800dad8:	0800db45 	.word	0x0800db45
 800dadc:	0800db45 	.word	0x0800db45
 800dae0:	0800db45 	.word	0x0800db45
 800dae4:	0800db45 	.word	0x0800db45
 800dae8:	0800db45 	.word	0x0800db45
 800daec:	0800db45 	.word	0x0800db45
 800daf0:	0800db35 	.word	0x0800db35
 800daf4:	0800db45 	.word	0x0800db45
 800daf8:	0800db45 	.word	0x0800db45
 800dafc:	0800db45 	.word	0x0800db45
 800db00:	0800db45 	.word	0x0800db45
 800db04:	0800db45 	.word	0x0800db45
 800db08:	0800db45 	.word	0x0800db45
 800db0c:	0800db45 	.word	0x0800db45
 800db10:	0800db3d 	.word	0x0800db3d
 800db14:	2301      	movs	r3, #1
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db1a:	e050      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800db1c:	2304      	movs	r3, #4
 800db1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db22:	e04c      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800db24:	2308      	movs	r3, #8
 800db26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db2a:	e048      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800db2c:	2310      	movs	r3, #16
 800db2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db32:	e044      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800db34:	2320      	movs	r3, #32
 800db36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db3a:	e040      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800db3c:	2340      	movs	r3, #64	@ 0x40
 800db3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db42:	e03c      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800db44:	2380      	movs	r3, #128	@ 0x80
 800db46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db4a:	e038      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4a71      	ldr	r2, [pc, #452]	@ (800dd18 <UART_SetConfig+0x908>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d130      	bne.n	800dbb8 <UART_SetConfig+0x7a8>
 800db56:	4b6f      	ldr	r3, [pc, #444]	@ (800dd14 <UART_SetConfig+0x904>)
 800db58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db5a:	f003 0307 	and.w	r3, r3, #7
 800db5e:	2b05      	cmp	r3, #5
 800db60:	d826      	bhi.n	800dbb0 <UART_SetConfig+0x7a0>
 800db62:	a201      	add	r2, pc, #4	@ (adr r2, 800db68 <UART_SetConfig+0x758>)
 800db64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db68:	0800db81 	.word	0x0800db81
 800db6c:	0800db89 	.word	0x0800db89
 800db70:	0800db91 	.word	0x0800db91
 800db74:	0800db99 	.word	0x0800db99
 800db78:	0800dba1 	.word	0x0800dba1
 800db7c:	0800dba9 	.word	0x0800dba9
 800db80:	2302      	movs	r3, #2
 800db82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db86:	e01a      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800db88:	2304      	movs	r3, #4
 800db8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db8e:	e016      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800db90:	2308      	movs	r3, #8
 800db92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db96:	e012      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800db98:	2310      	movs	r3, #16
 800db9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db9e:	e00e      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800dba0:	2320      	movs	r3, #32
 800dba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dba6:	e00a      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800dba8:	2340      	movs	r3, #64	@ 0x40
 800dbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbae:	e006      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800dbb0:	2380      	movs	r3, #128	@ 0x80
 800dbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbb6:	e002      	b.n	800dbbe <UART_SetConfig+0x7ae>
 800dbb8:	2380      	movs	r3, #128	@ 0x80
 800dbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4a55      	ldr	r2, [pc, #340]	@ (800dd18 <UART_SetConfig+0x908>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	f040 80f8 	bne.w	800ddba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dbca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dbce:	2b20      	cmp	r3, #32
 800dbd0:	dc46      	bgt.n	800dc60 <UART_SetConfig+0x850>
 800dbd2:	2b02      	cmp	r3, #2
 800dbd4:	db75      	blt.n	800dcc2 <UART_SetConfig+0x8b2>
 800dbd6:	3b02      	subs	r3, #2
 800dbd8:	2b1e      	cmp	r3, #30
 800dbda:	d872      	bhi.n	800dcc2 <UART_SetConfig+0x8b2>
 800dbdc:	a201      	add	r2, pc, #4	@ (adr r2, 800dbe4 <UART_SetConfig+0x7d4>)
 800dbde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe2:	bf00      	nop
 800dbe4:	0800dc67 	.word	0x0800dc67
 800dbe8:	0800dcc3 	.word	0x0800dcc3
 800dbec:	0800dc6f 	.word	0x0800dc6f
 800dbf0:	0800dcc3 	.word	0x0800dcc3
 800dbf4:	0800dcc3 	.word	0x0800dcc3
 800dbf8:	0800dcc3 	.word	0x0800dcc3
 800dbfc:	0800dc7f 	.word	0x0800dc7f
 800dc00:	0800dcc3 	.word	0x0800dcc3
 800dc04:	0800dcc3 	.word	0x0800dcc3
 800dc08:	0800dcc3 	.word	0x0800dcc3
 800dc0c:	0800dcc3 	.word	0x0800dcc3
 800dc10:	0800dcc3 	.word	0x0800dcc3
 800dc14:	0800dcc3 	.word	0x0800dcc3
 800dc18:	0800dcc3 	.word	0x0800dcc3
 800dc1c:	0800dc8f 	.word	0x0800dc8f
 800dc20:	0800dcc3 	.word	0x0800dcc3
 800dc24:	0800dcc3 	.word	0x0800dcc3
 800dc28:	0800dcc3 	.word	0x0800dcc3
 800dc2c:	0800dcc3 	.word	0x0800dcc3
 800dc30:	0800dcc3 	.word	0x0800dcc3
 800dc34:	0800dcc3 	.word	0x0800dcc3
 800dc38:	0800dcc3 	.word	0x0800dcc3
 800dc3c:	0800dcc3 	.word	0x0800dcc3
 800dc40:	0800dcc3 	.word	0x0800dcc3
 800dc44:	0800dcc3 	.word	0x0800dcc3
 800dc48:	0800dcc3 	.word	0x0800dcc3
 800dc4c:	0800dcc3 	.word	0x0800dcc3
 800dc50:	0800dcc3 	.word	0x0800dcc3
 800dc54:	0800dcc3 	.word	0x0800dcc3
 800dc58:	0800dcc3 	.word	0x0800dcc3
 800dc5c:	0800dcb5 	.word	0x0800dcb5
 800dc60:	2b40      	cmp	r3, #64	@ 0x40
 800dc62:	d02a      	beq.n	800dcba <UART_SetConfig+0x8aa>
 800dc64:	e02d      	b.n	800dcc2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dc66:	f7fd f989 	bl	800af7c <HAL_RCCEx_GetD3PCLK1Freq>
 800dc6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc6c:	e02f      	b.n	800dcce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fd f998 	bl	800afa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc7c:	e027      	b.n	800dcce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc7e:	f107 0318 	add.w	r3, r7, #24
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7fd fae4 	bl	800b250 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc8c:	e01f      	b.n	800dcce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc8e:	4b21      	ldr	r3, [pc, #132]	@ (800dd14 <UART_SetConfig+0x904>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f003 0320 	and.w	r3, r3, #32
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d009      	beq.n	800dcae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc9a:	4b1e      	ldr	r3, [pc, #120]	@ (800dd14 <UART_SetConfig+0x904>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	08db      	lsrs	r3, r3, #3
 800dca0:	f003 0303 	and.w	r3, r3, #3
 800dca4:	4a1d      	ldr	r2, [pc, #116]	@ (800dd1c <UART_SetConfig+0x90c>)
 800dca6:	fa22 f303 	lsr.w	r3, r2, r3
 800dcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dcac:	e00f      	b.n	800dcce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dcae:	4b1b      	ldr	r3, [pc, #108]	@ (800dd1c <UART_SetConfig+0x90c>)
 800dcb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcb2:	e00c      	b.n	800dcce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dcb4:	4b1a      	ldr	r3, [pc, #104]	@ (800dd20 <UART_SetConfig+0x910>)
 800dcb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcb8:	e009      	b.n	800dcce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dcba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dcbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcc0:	e005      	b.n	800dcce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dccc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dcce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	f000 81ee 	beq.w	800e0b2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcda:	4a12      	ldr	r2, [pc, #72]	@ (800dd24 <UART_SetConfig+0x914>)
 800dcdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dce0:	461a      	mov	r2, r3
 800dce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dce4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dce8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	685a      	ldr	r2, [r3, #4]
 800dcee:	4613      	mov	r3, r2
 800dcf0:	005b      	lsls	r3, r3, #1
 800dcf2:	4413      	add	r3, r2
 800dcf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d305      	bcc.n	800dd06 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dd00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d910      	bls.n	800dd28 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800dd06:	2301      	movs	r3, #1
 800dd08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dd0c:	e1d1      	b.n	800e0b2 <UART_SetConfig+0xca2>
 800dd0e:	bf00      	nop
 800dd10:	40011c00 	.word	0x40011c00
 800dd14:	58024400 	.word	0x58024400
 800dd18:	58000c00 	.word	0x58000c00
 800dd1c:	03d09000 	.word	0x03d09000
 800dd20:	003d0900 	.word	0x003d0900
 800dd24:	08016948 	.word	0x08016948
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	60bb      	str	r3, [r7, #8]
 800dd2e:	60fa      	str	r2, [r7, #12]
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd34:	4ac0      	ldr	r2, [pc, #768]	@ (800e038 <UART_SetConfig+0xc28>)
 800dd36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd3a:	b29b      	uxth	r3, r3
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	603b      	str	r3, [r7, #0]
 800dd40:	607a      	str	r2, [r7, #4]
 800dd42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dd4a:	f7f2 fd05 	bl	8000758 <__aeabi_uldivmod>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
 800dd52:	4610      	mov	r0, r2
 800dd54:	4619      	mov	r1, r3
 800dd56:	f04f 0200 	mov.w	r2, #0
 800dd5a:	f04f 0300 	mov.w	r3, #0
 800dd5e:	020b      	lsls	r3, r1, #8
 800dd60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dd64:	0202      	lsls	r2, r0, #8
 800dd66:	6979      	ldr	r1, [r7, #20]
 800dd68:	6849      	ldr	r1, [r1, #4]
 800dd6a:	0849      	lsrs	r1, r1, #1
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	460c      	mov	r4, r1
 800dd70:	4605      	mov	r5, r0
 800dd72:	eb12 0804 	adds.w	r8, r2, r4
 800dd76:	eb43 0905 	adc.w	r9, r3, r5
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	469a      	mov	sl, r3
 800dd82:	4693      	mov	fp, r2
 800dd84:	4652      	mov	r2, sl
 800dd86:	465b      	mov	r3, fp
 800dd88:	4640      	mov	r0, r8
 800dd8a:	4649      	mov	r1, r9
 800dd8c:	f7f2 fce4 	bl	8000758 <__aeabi_uldivmod>
 800dd90:	4602      	mov	r2, r0
 800dd92:	460b      	mov	r3, r1
 800dd94:	4613      	mov	r3, r2
 800dd96:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dd98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dd9e:	d308      	bcc.n	800ddb2 <UART_SetConfig+0x9a2>
 800dda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dda2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dda6:	d204      	bcs.n	800ddb2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ddae:	60da      	str	r2, [r3, #12]
 800ddb0:	e17f      	b.n	800e0b2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ddb8:	e17b      	b.n	800e0b2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	69db      	ldr	r3, [r3, #28]
 800ddbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ddc2:	f040 80bd 	bne.w	800df40 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ddc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ddca:	2b20      	cmp	r3, #32
 800ddcc:	dc48      	bgt.n	800de60 <UART_SetConfig+0xa50>
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	db7b      	blt.n	800deca <UART_SetConfig+0xaba>
 800ddd2:	2b20      	cmp	r3, #32
 800ddd4:	d879      	bhi.n	800deca <UART_SetConfig+0xaba>
 800ddd6:	a201      	add	r2, pc, #4	@ (adr r2, 800dddc <UART_SetConfig+0x9cc>)
 800ddd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dddc:	0800de67 	.word	0x0800de67
 800dde0:	0800de6f 	.word	0x0800de6f
 800dde4:	0800decb 	.word	0x0800decb
 800dde8:	0800decb 	.word	0x0800decb
 800ddec:	0800de77 	.word	0x0800de77
 800ddf0:	0800decb 	.word	0x0800decb
 800ddf4:	0800decb 	.word	0x0800decb
 800ddf8:	0800decb 	.word	0x0800decb
 800ddfc:	0800de87 	.word	0x0800de87
 800de00:	0800decb 	.word	0x0800decb
 800de04:	0800decb 	.word	0x0800decb
 800de08:	0800decb 	.word	0x0800decb
 800de0c:	0800decb 	.word	0x0800decb
 800de10:	0800decb 	.word	0x0800decb
 800de14:	0800decb 	.word	0x0800decb
 800de18:	0800decb 	.word	0x0800decb
 800de1c:	0800de97 	.word	0x0800de97
 800de20:	0800decb 	.word	0x0800decb
 800de24:	0800decb 	.word	0x0800decb
 800de28:	0800decb 	.word	0x0800decb
 800de2c:	0800decb 	.word	0x0800decb
 800de30:	0800decb 	.word	0x0800decb
 800de34:	0800decb 	.word	0x0800decb
 800de38:	0800decb 	.word	0x0800decb
 800de3c:	0800decb 	.word	0x0800decb
 800de40:	0800decb 	.word	0x0800decb
 800de44:	0800decb 	.word	0x0800decb
 800de48:	0800decb 	.word	0x0800decb
 800de4c:	0800decb 	.word	0x0800decb
 800de50:	0800decb 	.word	0x0800decb
 800de54:	0800decb 	.word	0x0800decb
 800de58:	0800decb 	.word	0x0800decb
 800de5c:	0800debd 	.word	0x0800debd
 800de60:	2b40      	cmp	r3, #64	@ 0x40
 800de62:	d02e      	beq.n	800dec2 <UART_SetConfig+0xab2>
 800de64:	e031      	b.n	800deca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de66:	f7fb f9eb 	bl	8009240 <HAL_RCC_GetPCLK1Freq>
 800de6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800de6c:	e033      	b.n	800ded6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de6e:	f7fb f9fd 	bl	800926c <HAL_RCC_GetPCLK2Freq>
 800de72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800de74:	e02f      	b.n	800ded6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fd f894 	bl	800afa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de84:	e027      	b.n	800ded6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de86:	f107 0318 	add.w	r3, r7, #24
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fd f9e0 	bl	800b250 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de94:	e01f      	b.n	800ded6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de96:	4b69      	ldr	r3, [pc, #420]	@ (800e03c <UART_SetConfig+0xc2c>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f003 0320 	and.w	r3, r3, #32
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d009      	beq.n	800deb6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dea2:	4b66      	ldr	r3, [pc, #408]	@ (800e03c <UART_SetConfig+0xc2c>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	08db      	lsrs	r3, r3, #3
 800dea8:	f003 0303 	and.w	r3, r3, #3
 800deac:	4a64      	ldr	r2, [pc, #400]	@ (800e040 <UART_SetConfig+0xc30>)
 800deae:	fa22 f303 	lsr.w	r3, r2, r3
 800deb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800deb4:	e00f      	b.n	800ded6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800deb6:	4b62      	ldr	r3, [pc, #392]	@ (800e040 <UART_SetConfig+0xc30>)
 800deb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800deba:	e00c      	b.n	800ded6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800debc:	4b61      	ldr	r3, [pc, #388]	@ (800e044 <UART_SetConfig+0xc34>)
 800debe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dec0:	e009      	b.n	800ded6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dec8:	e005      	b.n	800ded6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800deca:	2300      	movs	r3, #0
 800decc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dece:	2301      	movs	r3, #1
 800ded0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ded4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ded6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ded8:	2b00      	cmp	r3, #0
 800deda:	f000 80ea 	beq.w	800e0b2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dee2:	4a55      	ldr	r2, [pc, #340]	@ (800e038 <UART_SetConfig+0xc28>)
 800dee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dee8:	461a      	mov	r2, r3
 800deea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deec:	fbb3 f3f2 	udiv	r3, r3, r2
 800def0:	005a      	lsls	r2, r3, #1
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	085b      	lsrs	r3, r3, #1
 800def8:	441a      	add	r2, r3
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	fbb2 f3f3 	udiv	r3, r2, r3
 800df02:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df06:	2b0f      	cmp	r3, #15
 800df08:	d916      	bls.n	800df38 <UART_SetConfig+0xb28>
 800df0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df10:	d212      	bcs.n	800df38 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800df12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df14:	b29b      	uxth	r3, r3
 800df16:	f023 030f 	bic.w	r3, r3, #15
 800df1a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800df1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df1e:	085b      	lsrs	r3, r3, #1
 800df20:	b29b      	uxth	r3, r3
 800df22:	f003 0307 	and.w	r3, r3, #7
 800df26:	b29a      	uxth	r2, r3
 800df28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800df2a:	4313      	orrs	r3, r2
 800df2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800df34:	60da      	str	r2, [r3, #12]
 800df36:	e0bc      	b.n	800e0b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800df38:	2301      	movs	r3, #1
 800df3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800df3e:	e0b8      	b.n	800e0b2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800df40:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800df44:	2b20      	cmp	r3, #32
 800df46:	dc4b      	bgt.n	800dfe0 <UART_SetConfig+0xbd0>
 800df48:	2b00      	cmp	r3, #0
 800df4a:	f2c0 8087 	blt.w	800e05c <UART_SetConfig+0xc4c>
 800df4e:	2b20      	cmp	r3, #32
 800df50:	f200 8084 	bhi.w	800e05c <UART_SetConfig+0xc4c>
 800df54:	a201      	add	r2, pc, #4	@ (adr r2, 800df5c <UART_SetConfig+0xb4c>)
 800df56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df5a:	bf00      	nop
 800df5c:	0800dfe7 	.word	0x0800dfe7
 800df60:	0800dfef 	.word	0x0800dfef
 800df64:	0800e05d 	.word	0x0800e05d
 800df68:	0800e05d 	.word	0x0800e05d
 800df6c:	0800dff7 	.word	0x0800dff7
 800df70:	0800e05d 	.word	0x0800e05d
 800df74:	0800e05d 	.word	0x0800e05d
 800df78:	0800e05d 	.word	0x0800e05d
 800df7c:	0800e007 	.word	0x0800e007
 800df80:	0800e05d 	.word	0x0800e05d
 800df84:	0800e05d 	.word	0x0800e05d
 800df88:	0800e05d 	.word	0x0800e05d
 800df8c:	0800e05d 	.word	0x0800e05d
 800df90:	0800e05d 	.word	0x0800e05d
 800df94:	0800e05d 	.word	0x0800e05d
 800df98:	0800e05d 	.word	0x0800e05d
 800df9c:	0800e017 	.word	0x0800e017
 800dfa0:	0800e05d 	.word	0x0800e05d
 800dfa4:	0800e05d 	.word	0x0800e05d
 800dfa8:	0800e05d 	.word	0x0800e05d
 800dfac:	0800e05d 	.word	0x0800e05d
 800dfb0:	0800e05d 	.word	0x0800e05d
 800dfb4:	0800e05d 	.word	0x0800e05d
 800dfb8:	0800e05d 	.word	0x0800e05d
 800dfbc:	0800e05d 	.word	0x0800e05d
 800dfc0:	0800e05d 	.word	0x0800e05d
 800dfc4:	0800e05d 	.word	0x0800e05d
 800dfc8:	0800e05d 	.word	0x0800e05d
 800dfcc:	0800e05d 	.word	0x0800e05d
 800dfd0:	0800e05d 	.word	0x0800e05d
 800dfd4:	0800e05d 	.word	0x0800e05d
 800dfd8:	0800e05d 	.word	0x0800e05d
 800dfdc:	0800e04f 	.word	0x0800e04f
 800dfe0:	2b40      	cmp	r3, #64	@ 0x40
 800dfe2:	d037      	beq.n	800e054 <UART_SetConfig+0xc44>
 800dfe4:	e03a      	b.n	800e05c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dfe6:	f7fb f92b 	bl	8009240 <HAL_RCC_GetPCLK1Freq>
 800dfea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dfec:	e03c      	b.n	800e068 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dfee:	f7fb f93d 	bl	800926c <HAL_RCC_GetPCLK2Freq>
 800dff2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dff4:	e038      	b.n	800e068 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fc ffd4 	bl	800afa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e004:	e030      	b.n	800e068 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e006:	f107 0318 	add.w	r3, r7, #24
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fd f920 	bl	800b250 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e014:	e028      	b.n	800e068 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e016:	4b09      	ldr	r3, [pc, #36]	@ (800e03c <UART_SetConfig+0xc2c>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f003 0320 	and.w	r3, r3, #32
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d012      	beq.n	800e048 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e022:	4b06      	ldr	r3, [pc, #24]	@ (800e03c <UART_SetConfig+0xc2c>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	08db      	lsrs	r3, r3, #3
 800e028:	f003 0303 	and.w	r3, r3, #3
 800e02c:	4a04      	ldr	r2, [pc, #16]	@ (800e040 <UART_SetConfig+0xc30>)
 800e02e:	fa22 f303 	lsr.w	r3, r2, r3
 800e032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e034:	e018      	b.n	800e068 <UART_SetConfig+0xc58>
 800e036:	bf00      	nop
 800e038:	08016948 	.word	0x08016948
 800e03c:	58024400 	.word	0x58024400
 800e040:	03d09000 	.word	0x03d09000
 800e044:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e048:	4b24      	ldr	r3, [pc, #144]	@ (800e0dc <UART_SetConfig+0xccc>)
 800e04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e04c:	e00c      	b.n	800e068 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e04e:	4b24      	ldr	r3, [pc, #144]	@ (800e0e0 <UART_SetConfig+0xcd0>)
 800e050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e052:	e009      	b.n	800e068 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e054:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e05a:	e005      	b.n	800e068 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e05c:	2300      	movs	r3, #0
 800e05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e060:	2301      	movs	r3, #1
 800e062:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e066:	bf00      	nop
    }

    if (pclk != 0U)
 800e068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d021      	beq.n	800e0b2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e072:	4a1c      	ldr	r2, [pc, #112]	@ (800e0e4 <UART_SetConfig+0xcd4>)
 800e074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e078:	461a      	mov	r2, r3
 800e07a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e07c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	085b      	lsrs	r3, r3, #1
 800e086:	441a      	add	r2, r3
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e090:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e094:	2b0f      	cmp	r3, #15
 800e096:	d909      	bls.n	800e0ac <UART_SetConfig+0xc9c>
 800e098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e09a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e09e:	d205      	bcs.n	800e0ac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a2:	b29a      	uxth	r2, r3
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	60da      	str	r2, [r3, #12]
 800e0aa:	e002      	b.n	800e0b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	2201      	movs	r2, #1
 800e0be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e0ce:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3748      	adds	r7, #72	@ 0x48
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e0dc:	03d09000 	.word	0x03d09000
 800e0e0:	003d0900 	.word	0x003d0900
 800e0e4:	08016948 	.word	0x08016948

0800e0e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0f4:	f003 0308 	and.w	r3, r3, #8
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d00a      	beq.n	800e112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	430a      	orrs	r2, r1
 800e110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e116:	f003 0301 	and.w	r3, r3, #1
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d00a      	beq.n	800e134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	430a      	orrs	r2, r1
 800e132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e138:	f003 0302 	and.w	r3, r3, #2
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d00a      	beq.n	800e156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	430a      	orrs	r2, r1
 800e154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e15a:	f003 0304 	and.w	r3, r3, #4
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00a      	beq.n	800e178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	430a      	orrs	r2, r1
 800e176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e17c:	f003 0310 	and.w	r3, r3, #16
 800e180:	2b00      	cmp	r3, #0
 800e182:	d00a      	beq.n	800e19a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	689b      	ldr	r3, [r3, #8]
 800e18a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	430a      	orrs	r2, r1
 800e198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e19e:	f003 0320 	and.w	r3, r3, #32
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d00a      	beq.n	800e1bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	430a      	orrs	r2, r1
 800e1ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d01a      	beq.n	800e1fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	430a      	orrs	r2, r1
 800e1dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e1e6:	d10a      	bne.n	800e1fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	430a      	orrs	r2, r1
 800e1fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e206:	2b00      	cmp	r3, #0
 800e208:	d00a      	beq.n	800e220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	430a      	orrs	r2, r1
 800e21e:	605a      	str	r2, [r3, #4]
  }
}
 800e220:	bf00      	nop
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b098      	sub	sp, #96	@ 0x60
 800e230:	af02      	add	r7, sp, #8
 800e232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2200      	movs	r2, #0
 800e238:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e23c:	f7f4 ff9a 	bl	8003174 <HAL_GetTick>
 800e240:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f003 0308 	and.w	r3, r3, #8
 800e24c:	2b08      	cmp	r3, #8
 800e24e:	d12f      	bne.n	800e2b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e250:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e254:	9300      	str	r3, [sp, #0]
 800e256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e258:	2200      	movs	r2, #0
 800e25a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 f88e 	bl	800e380 <UART_WaitOnFlagUntilTimeout>
 800e264:	4603      	mov	r3, r0
 800e266:	2b00      	cmp	r3, #0
 800e268:	d022      	beq.n	800e2b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e272:	e853 3f00 	ldrex	r3, [r3]
 800e276:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e27a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e27e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	461a      	mov	r2, r3
 800e286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e288:	647b      	str	r3, [r7, #68]	@ 0x44
 800e28a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e28c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e28e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e290:	e841 2300 	strex	r3, r2, [r1]
 800e294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d1e6      	bne.n	800e26a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2220      	movs	r2, #32
 800e2a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e2ac:	2303      	movs	r3, #3
 800e2ae:	e063      	b.n	800e378 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f003 0304 	and.w	r3, r3, #4
 800e2ba:	2b04      	cmp	r3, #4
 800e2bc:	d149      	bne.n	800e352 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e2be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e2c2:	9300      	str	r3, [sp, #0]
 800e2c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 f857 	bl	800e380 <UART_WaitOnFlagUntilTimeout>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d03c      	beq.n	800e352 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e0:	e853 3f00 	ldrex	r3, [r3]
 800e2e4:	623b      	str	r3, [r7, #32]
   return(result);
 800e2e6:	6a3b      	ldr	r3, [r7, #32]
 800e2e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e2ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e2fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2fe:	e841 2300 	strex	r3, r2, [r1]
 800e302:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1e6      	bne.n	800e2d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	3308      	adds	r3, #8
 800e310:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	e853 3f00 	ldrex	r3, [r3]
 800e318:	60fb      	str	r3, [r7, #12]
   return(result);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f023 0301 	bic.w	r3, r3, #1
 800e320:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	3308      	adds	r3, #8
 800e328:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e32a:	61fa      	str	r2, [r7, #28]
 800e32c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e32e:	69b9      	ldr	r1, [r7, #24]
 800e330:	69fa      	ldr	r2, [r7, #28]
 800e332:	e841 2300 	strex	r3, r2, [r1]
 800e336:	617b      	str	r3, [r7, #20]
   return(result);
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d1e5      	bne.n	800e30a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2220      	movs	r2, #32
 800e342:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e34e:	2303      	movs	r3, #3
 800e350:	e012      	b.n	800e378 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2220      	movs	r2, #32
 800e356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2220      	movs	r2, #32
 800e35e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2200      	movs	r2, #0
 800e366:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2200      	movs	r2, #0
 800e36c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2200      	movs	r2, #0
 800e372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3758      	adds	r7, #88	@ 0x58
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	603b      	str	r3, [r7, #0]
 800e38c:	4613      	mov	r3, r2
 800e38e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e390:	e04f      	b.n	800e432 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e392:	69bb      	ldr	r3, [r7, #24]
 800e394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e398:	d04b      	beq.n	800e432 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e39a:	f7f4 feeb 	bl	8003174 <HAL_GetTick>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	1ad3      	subs	r3, r2, r3
 800e3a4:	69ba      	ldr	r2, [r7, #24]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d302      	bcc.n	800e3b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d101      	bne.n	800e3b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e3b0:	2303      	movs	r3, #3
 800e3b2:	e04e      	b.n	800e452 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f003 0304 	and.w	r3, r3, #4
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d037      	beq.n	800e432 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	2b80      	cmp	r3, #128	@ 0x80
 800e3c6:	d034      	beq.n	800e432 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	2b40      	cmp	r3, #64	@ 0x40
 800e3cc:	d031      	beq.n	800e432 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	69db      	ldr	r3, [r3, #28]
 800e3d4:	f003 0308 	and.w	r3, r3, #8
 800e3d8:	2b08      	cmp	r3, #8
 800e3da:	d110      	bne.n	800e3fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2208      	movs	r2, #8
 800e3e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e3e4:	68f8      	ldr	r0, [r7, #12]
 800e3e6:	f000 f839 	bl	800e45c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2208      	movs	r2, #8
 800e3ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e029      	b.n	800e452 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	69db      	ldr	r3, [r3, #28]
 800e404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e408:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e40c:	d111      	bne.n	800e432 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e418:	68f8      	ldr	r0, [r7, #12]
 800e41a:	f000 f81f 	bl	800e45c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2220      	movs	r2, #32
 800e422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2200      	movs	r2, #0
 800e42a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e42e:	2303      	movs	r3, #3
 800e430:	e00f      	b.n	800e452 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	69da      	ldr	r2, [r3, #28]
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	4013      	ands	r3, r2
 800e43c:	68ba      	ldr	r2, [r7, #8]
 800e43e:	429a      	cmp	r2, r3
 800e440:	bf0c      	ite	eq
 800e442:	2301      	moveq	r3, #1
 800e444:	2300      	movne	r3, #0
 800e446:	b2db      	uxtb	r3, r3
 800e448:	461a      	mov	r2, r3
 800e44a:	79fb      	ldrb	r3, [r7, #7]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d0a0      	beq.n	800e392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e450:	2300      	movs	r3, #0
}
 800e452:	4618      	mov	r0, r3
 800e454:	3710      	adds	r7, #16
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
	...

0800e45c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b095      	sub	sp, #84	@ 0x54
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e46a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e46c:	e853 3f00 	ldrex	r3, [r3]
 800e470:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e474:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	461a      	mov	r2, r3
 800e480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e482:	643b      	str	r3, [r7, #64]	@ 0x40
 800e484:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e486:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e488:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e48a:	e841 2300 	strex	r3, r2, [r1]
 800e48e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e492:	2b00      	cmp	r3, #0
 800e494:	d1e6      	bne.n	800e464 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	3308      	adds	r3, #8
 800e49c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e49e:	6a3b      	ldr	r3, [r7, #32]
 800e4a0:	e853 3f00 	ldrex	r3, [r3]
 800e4a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4a6:	69fa      	ldr	r2, [r7, #28]
 800e4a8:	4b1e      	ldr	r3, [pc, #120]	@ (800e524 <UART_EndRxTransfer+0xc8>)
 800e4aa:	4013      	ands	r3, r2
 800e4ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	3308      	adds	r3, #8
 800e4b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e4b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e4bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e4be:	e841 2300 	strex	r3, r2, [r1]
 800e4c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d1e5      	bne.n	800e496 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d118      	bne.n	800e504 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	e853 3f00 	ldrex	r3, [r3]
 800e4de:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	f023 0310 	bic.w	r3, r3, #16
 800e4e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4f0:	61bb      	str	r3, [r7, #24]
 800e4f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f4:	6979      	ldr	r1, [r7, #20]
 800e4f6:	69ba      	ldr	r2, [r7, #24]
 800e4f8:	e841 2300 	strex	r3, r2, [r1]
 800e4fc:	613b      	str	r3, [r7, #16]
   return(result);
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d1e6      	bne.n	800e4d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2220      	movs	r2, #32
 800e508:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e518:	bf00      	nop
 800e51a:	3754      	adds	r7, #84	@ 0x54
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr
 800e524:	effffffe 	.word	0xeffffffe

0800e528 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e536:	2b01      	cmp	r3, #1
 800e538:	d101      	bne.n	800e53e <HAL_UARTEx_DisableFifoMode+0x16>
 800e53a:	2302      	movs	r3, #2
 800e53c:	e027      	b.n	800e58e <HAL_UARTEx_DisableFifoMode+0x66>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2201      	movs	r2, #1
 800e542:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2224      	movs	r2, #36	@ 0x24
 800e54a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f022 0201 	bic.w	r2, r2, #1
 800e564:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e56c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2200      	movs	r2, #0
 800e572:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	68fa      	ldr	r2, [r7, #12]
 800e57a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2220      	movs	r2, #32
 800e580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e58c:	2300      	movs	r3, #0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3714      	adds	r7, #20
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr

0800e59a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e59a:	b580      	push	{r7, lr}
 800e59c:	b084      	sub	sp, #16
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	6078      	str	r0, [r7, #4]
 800e5a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d101      	bne.n	800e5b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e5ae:	2302      	movs	r3, #2
 800e5b0:	e02d      	b.n	800e60e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2224      	movs	r2, #36	@ 0x24
 800e5be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f022 0201 	bic.w	r2, r2, #1
 800e5d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	689b      	ldr	r3, [r3, #8]
 800e5e0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	683a      	ldr	r2, [r7, #0]
 800e5ea:	430a      	orrs	r2, r1
 800e5ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 f850 	bl	800e694 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68fa      	ldr	r2, [r7, #12]
 800e5fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2220      	movs	r2, #32
 800e600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e60c:	2300      	movs	r3, #0
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3710      	adds	r7, #16
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}

0800e616 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e616:	b580      	push	{r7, lr}
 800e618:	b084      	sub	sp, #16
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
 800e61e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e626:	2b01      	cmp	r3, #1
 800e628:	d101      	bne.n	800e62e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e62a:	2302      	movs	r3, #2
 800e62c:	e02d      	b.n	800e68a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2201      	movs	r2, #1
 800e632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2224      	movs	r2, #36	@ 0x24
 800e63a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f022 0201 	bic.w	r2, r2, #1
 800e654:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	689b      	ldr	r3, [r3, #8]
 800e65c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	683a      	ldr	r2, [r7, #0]
 800e666:	430a      	orrs	r2, r1
 800e668:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 f812 	bl	800e694 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	68fa      	ldr	r2, [r7, #12]
 800e676:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2220      	movs	r2, #32
 800e67c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2200      	movs	r2, #0
 800e684:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e688:	2300      	movs	r3, #0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
	...

0800e694 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e694:	b480      	push	{r7}
 800e696:	b085      	sub	sp, #20
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d108      	bne.n	800e6b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e6b4:	e031      	b.n	800e71a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e6b6:	2310      	movs	r3, #16
 800e6b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e6ba:	2310      	movs	r3, #16
 800e6bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	689b      	ldr	r3, [r3, #8]
 800e6c4:	0e5b      	lsrs	r3, r3, #25
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	f003 0307 	and.w	r3, r3, #7
 800e6cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	0f5b      	lsrs	r3, r3, #29
 800e6d6:	b2db      	uxtb	r3, r3
 800e6d8:	f003 0307 	and.w	r3, r3, #7
 800e6dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e6de:	7bbb      	ldrb	r3, [r7, #14]
 800e6e0:	7b3a      	ldrb	r2, [r7, #12]
 800e6e2:	4911      	ldr	r1, [pc, #68]	@ (800e728 <UARTEx_SetNbDataToProcess+0x94>)
 800e6e4:	5c8a      	ldrb	r2, [r1, r2]
 800e6e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e6ea:	7b3a      	ldrb	r2, [r7, #12]
 800e6ec:	490f      	ldr	r1, [pc, #60]	@ (800e72c <UARTEx_SetNbDataToProcess+0x98>)
 800e6ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e6f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e6fc:	7bfb      	ldrb	r3, [r7, #15]
 800e6fe:	7b7a      	ldrb	r2, [r7, #13]
 800e700:	4909      	ldr	r1, [pc, #36]	@ (800e728 <UARTEx_SetNbDataToProcess+0x94>)
 800e702:	5c8a      	ldrb	r2, [r1, r2]
 800e704:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e708:	7b7a      	ldrb	r2, [r7, #13]
 800e70a:	4908      	ldr	r1, [pc, #32]	@ (800e72c <UARTEx_SetNbDataToProcess+0x98>)
 800e70c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e70e:	fb93 f3f2 	sdiv	r3, r3, r2
 800e712:	b29a      	uxth	r2, r3
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e71a:	bf00      	nop
 800e71c:	3714      	adds	r7, #20
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	08016960 	.word	0x08016960
 800e72c:	08016968 	.word	0x08016968

0800e730 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e730:	b084      	sub	sp, #16
 800e732:	b580      	push	{r7, lr}
 800e734:	b084      	sub	sp, #16
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
 800e73a:	f107 001c 	add.w	r0, r7, #28
 800e73e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e742:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e746:	2b01      	cmp	r3, #1
 800e748:	d121      	bne.n	800e78e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e74e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	68da      	ldr	r2, [r3, #12]
 800e75a:	4b2c      	ldr	r3, [pc, #176]	@ (800e80c <USB_CoreInit+0xdc>)
 800e75c:	4013      	ands	r3, r2
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e76e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e772:	2b01      	cmp	r3, #1
 800e774:	d105      	bne.n	800e782 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	68db      	ldr	r3, [r3, #12]
 800e77a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f001 faf6 	bl	800fd74 <USB_CoreReset>
 800e788:	4603      	mov	r3, r0
 800e78a:	73fb      	strb	r3, [r7, #15]
 800e78c:	e01b      	b.n	800e7c6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f001 faea 	bl	800fd74 <USB_CoreReset>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e7a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d106      	bne.n	800e7ba <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	639a      	str	r2, [r3, #56]	@ 0x38
 800e7b8:	e005      	b.n	800e7c6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e7c6:	7fbb      	ldrb	r3, [r7, #30]
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	d116      	bne.n	800e7fa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e7da:	4b0d      	ldr	r3, [pc, #52]	@ (800e810 <USB_CoreInit+0xe0>)
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	f043 0206 	orr.w	r2, r3, #6
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	f043 0220 	orr.w	r2, r3, #32
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e7fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3710      	adds	r7, #16
 800e800:	46bd      	mov	sp, r7
 800e802:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e806:	b004      	add	sp, #16
 800e808:	4770      	bx	lr
 800e80a:	bf00      	nop
 800e80c:	ffbdffbf 	.word	0xffbdffbf
 800e810:	03ee0000 	.word	0x03ee0000

0800e814 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e814:	b480      	push	{r7}
 800e816:	b087      	sub	sp, #28
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	4613      	mov	r3, r2
 800e820:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e822:	79fb      	ldrb	r3, [r7, #7]
 800e824:	2b02      	cmp	r3, #2
 800e826:	d165      	bne.n	800e8f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	4a41      	ldr	r2, [pc, #260]	@ (800e930 <USB_SetTurnaroundTime+0x11c>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d906      	bls.n	800e83e <USB_SetTurnaroundTime+0x2a>
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	4a40      	ldr	r2, [pc, #256]	@ (800e934 <USB_SetTurnaroundTime+0x120>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d202      	bcs.n	800e83e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e838:	230f      	movs	r3, #15
 800e83a:	617b      	str	r3, [r7, #20]
 800e83c:	e062      	b.n	800e904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	4a3c      	ldr	r2, [pc, #240]	@ (800e934 <USB_SetTurnaroundTime+0x120>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d306      	bcc.n	800e854 <USB_SetTurnaroundTime+0x40>
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	4a3b      	ldr	r2, [pc, #236]	@ (800e938 <USB_SetTurnaroundTime+0x124>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d202      	bcs.n	800e854 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e84e:	230e      	movs	r3, #14
 800e850:	617b      	str	r3, [r7, #20]
 800e852:	e057      	b.n	800e904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	4a38      	ldr	r2, [pc, #224]	@ (800e938 <USB_SetTurnaroundTime+0x124>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d306      	bcc.n	800e86a <USB_SetTurnaroundTime+0x56>
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	4a37      	ldr	r2, [pc, #220]	@ (800e93c <USB_SetTurnaroundTime+0x128>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d202      	bcs.n	800e86a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e864:	230d      	movs	r3, #13
 800e866:	617b      	str	r3, [r7, #20]
 800e868:	e04c      	b.n	800e904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	4a33      	ldr	r2, [pc, #204]	@ (800e93c <USB_SetTurnaroundTime+0x128>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d306      	bcc.n	800e880 <USB_SetTurnaroundTime+0x6c>
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	4a32      	ldr	r2, [pc, #200]	@ (800e940 <USB_SetTurnaroundTime+0x12c>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d802      	bhi.n	800e880 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e87a:	230c      	movs	r3, #12
 800e87c:	617b      	str	r3, [r7, #20]
 800e87e:	e041      	b.n	800e904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	4a2f      	ldr	r2, [pc, #188]	@ (800e940 <USB_SetTurnaroundTime+0x12c>)
 800e884:	4293      	cmp	r3, r2
 800e886:	d906      	bls.n	800e896 <USB_SetTurnaroundTime+0x82>
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	4a2e      	ldr	r2, [pc, #184]	@ (800e944 <USB_SetTurnaroundTime+0x130>)
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d802      	bhi.n	800e896 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e890:	230b      	movs	r3, #11
 800e892:	617b      	str	r3, [r7, #20]
 800e894:	e036      	b.n	800e904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	4a2a      	ldr	r2, [pc, #168]	@ (800e944 <USB_SetTurnaroundTime+0x130>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d906      	bls.n	800e8ac <USB_SetTurnaroundTime+0x98>
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	4a29      	ldr	r2, [pc, #164]	@ (800e948 <USB_SetTurnaroundTime+0x134>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d802      	bhi.n	800e8ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e8a6:	230a      	movs	r3, #10
 800e8a8:	617b      	str	r3, [r7, #20]
 800e8aa:	e02b      	b.n	800e904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	4a26      	ldr	r2, [pc, #152]	@ (800e948 <USB_SetTurnaroundTime+0x134>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d906      	bls.n	800e8c2 <USB_SetTurnaroundTime+0xae>
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	4a25      	ldr	r2, [pc, #148]	@ (800e94c <USB_SetTurnaroundTime+0x138>)
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d202      	bcs.n	800e8c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e8bc:	2309      	movs	r3, #9
 800e8be:	617b      	str	r3, [r7, #20]
 800e8c0:	e020      	b.n	800e904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	4a21      	ldr	r2, [pc, #132]	@ (800e94c <USB_SetTurnaroundTime+0x138>)
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d306      	bcc.n	800e8d8 <USB_SetTurnaroundTime+0xc4>
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	4a20      	ldr	r2, [pc, #128]	@ (800e950 <USB_SetTurnaroundTime+0x13c>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d802      	bhi.n	800e8d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e8d2:	2308      	movs	r3, #8
 800e8d4:	617b      	str	r3, [r7, #20]
 800e8d6:	e015      	b.n	800e904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	4a1d      	ldr	r2, [pc, #116]	@ (800e950 <USB_SetTurnaroundTime+0x13c>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d906      	bls.n	800e8ee <USB_SetTurnaroundTime+0xda>
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	4a1c      	ldr	r2, [pc, #112]	@ (800e954 <USB_SetTurnaroundTime+0x140>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d202      	bcs.n	800e8ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e8e8:	2307      	movs	r3, #7
 800e8ea:	617b      	str	r3, [r7, #20]
 800e8ec:	e00a      	b.n	800e904 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e8ee:	2306      	movs	r3, #6
 800e8f0:	617b      	str	r3, [r7, #20]
 800e8f2:	e007      	b.n	800e904 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e8f4:	79fb      	ldrb	r3, [r7, #7]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d102      	bne.n	800e900 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e8fa:	2309      	movs	r3, #9
 800e8fc:	617b      	str	r3, [r7, #20]
 800e8fe:	e001      	b.n	800e904 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e900:	2309      	movs	r3, #9
 800e902:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	68da      	ldr	r2, [r3, #12]
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	029b      	lsls	r3, r3, #10
 800e918:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e91c:	431a      	orrs	r2, r3
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e922:	2300      	movs	r3, #0
}
 800e924:	4618      	mov	r0, r3
 800e926:	371c      	adds	r7, #28
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr
 800e930:	00d8acbf 	.word	0x00d8acbf
 800e934:	00e4e1c0 	.word	0x00e4e1c0
 800e938:	00f42400 	.word	0x00f42400
 800e93c:	01067380 	.word	0x01067380
 800e940:	011a499f 	.word	0x011a499f
 800e944:	01312cff 	.word	0x01312cff
 800e948:	014ca43f 	.word	0x014ca43f
 800e94c:	016e3600 	.word	0x016e3600
 800e950:	01a6ab1f 	.word	0x01a6ab1f
 800e954:	01e84800 	.word	0x01e84800

0800e958 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	689b      	ldr	r3, [r3, #8]
 800e964:	f043 0201 	orr.w	r2, r3, #1
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	370c      	adds	r7, #12
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr

0800e97a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e97a:	b480      	push	{r7}
 800e97c:	b083      	sub	sp, #12
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	689b      	ldr	r3, [r3, #8]
 800e986:	f023 0201 	bic.w	r2, r3, #1
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e98e:	2300      	movs	r3, #0
}
 800e990:	4618      	mov	r0, r3
 800e992:	370c      	adds	r7, #12
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e9b8:	78fb      	ldrb	r3, [r7, #3]
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d115      	bne.n	800e9ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	68db      	ldr	r3, [r3, #12]
 800e9c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e9ca:	200a      	movs	r0, #10
 800e9cc:	f7f4 fbde 	bl	800318c <HAL_Delay>
      ms += 10U;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	330a      	adds	r3, #10
 800e9d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f001 f93b 	bl	800fc52 <USB_GetMode>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d01e      	beq.n	800ea20 <USB_SetCurrentMode+0x84>
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2bc7      	cmp	r3, #199	@ 0xc7
 800e9e6:	d9f0      	bls.n	800e9ca <USB_SetCurrentMode+0x2e>
 800e9e8:	e01a      	b.n	800ea20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e9ea:	78fb      	ldrb	r3, [r7, #3]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d115      	bne.n	800ea1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e9fc:	200a      	movs	r0, #10
 800e9fe:	f7f4 fbc5 	bl	800318c <HAL_Delay>
      ms += 10U;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	330a      	adds	r3, #10
 800ea06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f001 f922 	bl	800fc52 <USB_GetMode>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d005      	beq.n	800ea20 <USB_SetCurrentMode+0x84>
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2bc7      	cmp	r3, #199	@ 0xc7
 800ea18:	d9f0      	bls.n	800e9fc <USB_SetCurrentMode+0x60>
 800ea1a:	e001      	b.n	800ea20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	e005      	b.n	800ea2c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2bc8      	cmp	r3, #200	@ 0xc8
 800ea24:	d101      	bne.n	800ea2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ea26:	2301      	movs	r3, #1
 800ea28:	e000      	b.n	800ea2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ea2a:	2300      	movs	r3, #0
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3710      	adds	r7, #16
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ea34:	b084      	sub	sp, #16
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b086      	sub	sp, #24
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ea42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ea46:	2300      	movs	r3, #0
 800ea48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ea4e:	2300      	movs	r3, #0
 800ea50:	613b      	str	r3, [r7, #16]
 800ea52:	e009      	b.n	800ea68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	3340      	adds	r3, #64	@ 0x40
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	4413      	add	r3, r2
 800ea5e:	2200      	movs	r2, #0
 800ea60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	3301      	adds	r3, #1
 800ea66:	613b      	str	r3, [r7, #16]
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	2b0e      	cmp	r3, #14
 800ea6c:	d9f2      	bls.n	800ea54 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ea6e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d11c      	bne.n	800eab0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	68fa      	ldr	r2, [r7, #12]
 800ea80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ea84:	f043 0302 	orr.w	r3, r3, #2
 800ea88:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea8e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	601a      	str	r2, [r3, #0]
 800eaae:	e005      	b.n	800eabc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eab4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eac2:	461a      	mov	r2, r3
 800eac4:	2300      	movs	r3, #0
 800eac6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eac8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d10d      	bne.n	800eaec <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ead0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d104      	bne.n	800eae2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ead8:	2100      	movs	r1, #0
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 f968 	bl	800edb0 <USB_SetDevSpeed>
 800eae0:	e008      	b.n	800eaf4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eae2:	2101      	movs	r1, #1
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 f963 	bl	800edb0 <USB_SetDevSpeed>
 800eaea:	e003      	b.n	800eaf4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eaec:	2103      	movs	r1, #3
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 f95e 	bl	800edb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eaf4:	2110      	movs	r1, #16
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 f8fa 	bl	800ecf0 <USB_FlushTxFifo>
 800eafc:	4603      	mov	r3, r0
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d001      	beq.n	800eb06 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800eb02:	2301      	movs	r3, #1
 800eb04:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 f924 	bl	800ed54 <USB_FlushRxFifo>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d001      	beq.n	800eb16 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800eb12:	2301      	movs	r3, #1
 800eb14:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	2300      	movs	r3, #0
 800eb20:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb28:	461a      	mov	r2, r3
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb34:	461a      	mov	r2, r3
 800eb36:	2300      	movs	r3, #0
 800eb38:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	613b      	str	r3, [r7, #16]
 800eb3e:	e043      	b.n	800ebc8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	015a      	lsls	r2, r3, #5
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	4413      	add	r3, r2
 800eb48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eb52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eb56:	d118      	bne.n	800eb8a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d10a      	bne.n	800eb74 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	015a      	lsls	r2, r3, #5
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	4413      	add	r3, r2
 800eb66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800eb70:	6013      	str	r3, [r2, #0]
 800eb72:	e013      	b.n	800eb9c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	015a      	lsls	r2, r3, #5
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb80:	461a      	mov	r2, r3
 800eb82:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800eb86:	6013      	str	r3, [r2, #0]
 800eb88:	e008      	b.n	800eb9c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	015a      	lsls	r2, r3, #5
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	4413      	add	r3, r2
 800eb92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb96:	461a      	mov	r2, r3
 800eb98:	2300      	movs	r3, #0
 800eb9a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	015a      	lsls	r2, r3, #5
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	4413      	add	r3, r2
 800eba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eba8:	461a      	mov	r2, r3
 800ebaa:	2300      	movs	r3, #0
 800ebac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	015a      	lsls	r2, r3, #5
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebba:	461a      	mov	r2, r3
 800ebbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ebc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	613b      	str	r3, [r7, #16]
 800ebc8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ebcc:	461a      	mov	r2, r3
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d3b5      	bcc.n	800eb40 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	613b      	str	r3, [r7, #16]
 800ebd8:	e043      	b.n	800ec62 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	015a      	lsls	r2, r3, #5
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ebec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ebf0:	d118      	bne.n	800ec24 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d10a      	bne.n	800ec0e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	015a      	lsls	r2, r3, #5
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	4413      	add	r3, r2
 800ec00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec04:	461a      	mov	r2, r3
 800ec06:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ec0a:	6013      	str	r3, [r2, #0]
 800ec0c:	e013      	b.n	800ec36 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	015a      	lsls	r2, r3, #5
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	4413      	add	r3, r2
 800ec16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ec20:	6013      	str	r3, [r2, #0]
 800ec22:	e008      	b.n	800ec36 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	015a      	lsls	r2, r3, #5
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	4413      	add	r3, r2
 800ec2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec30:	461a      	mov	r2, r3
 800ec32:	2300      	movs	r3, #0
 800ec34:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	015a      	lsls	r2, r3, #5
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec42:	461a      	mov	r2, r3
 800ec44:	2300      	movs	r3, #0
 800ec46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	015a      	lsls	r2, r3, #5
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	4413      	add	r3, r2
 800ec50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec54:	461a      	mov	r2, r3
 800ec56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ec5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	613b      	str	r3, [r7, #16]
 800ec62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ec66:	461a      	mov	r2, r3
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d3b5      	bcc.n	800ebda <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec74:	691b      	ldr	r3, [r3, #16]
 800ec76:	68fa      	ldr	r2, [r7, #12]
 800ec78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ec7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec80:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2200      	movs	r2, #0
 800ec86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ec8e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ec90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d105      	bne.n	800eca4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	699b      	ldr	r3, [r3, #24]
 800ec9c:	f043 0210 	orr.w	r2, r3, #16
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	699a      	ldr	r2, [r3, #24]
 800eca8:	4b0f      	ldr	r3, [pc, #60]	@ (800ece8 <USB_DevInit+0x2b4>)
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ecb0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d005      	beq.n	800ecc4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	699b      	ldr	r3, [r3, #24]
 800ecbc:	f043 0208 	orr.w	r2, r3, #8
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ecc4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d105      	bne.n	800ecd8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	699a      	ldr	r2, [r3, #24]
 800ecd0:	4b06      	ldr	r3, [pc, #24]	@ (800ecec <USB_DevInit+0x2b8>)
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ecd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3718      	adds	r7, #24
 800ecde:	46bd      	mov	sp, r7
 800ece0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ece4:	b004      	add	sp, #16
 800ece6:	4770      	bx	lr
 800ece8:	803c3800 	.word	0x803c3800
 800ecec:	40000004 	.word	0x40000004

0800ecf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b085      	sub	sp, #20
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	3301      	adds	r3, #1
 800ed02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ed0a:	d901      	bls.n	800ed10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ed0c:	2303      	movs	r3, #3
 800ed0e:	e01b      	b.n	800ed48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	691b      	ldr	r3, [r3, #16]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	daf2      	bge.n	800ecfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	019b      	lsls	r3, r3, #6
 800ed20:	f043 0220 	orr.w	r2, r3, #32
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ed34:	d901      	bls.n	800ed3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ed36:	2303      	movs	r3, #3
 800ed38:	e006      	b.n	800ed48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	691b      	ldr	r3, [r3, #16]
 800ed3e:	f003 0320 	and.w	r3, r3, #32
 800ed42:	2b20      	cmp	r3, #32
 800ed44:	d0f0      	beq.n	800ed28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ed46:	2300      	movs	r3, #0
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3714      	adds	r7, #20
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr

0800ed54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ed54:	b480      	push	{r7}
 800ed56:	b085      	sub	sp, #20
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	3301      	adds	r3, #1
 800ed64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ed6c:	d901      	bls.n	800ed72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ed6e:	2303      	movs	r3, #3
 800ed70:	e018      	b.n	800eda4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	691b      	ldr	r3, [r3, #16]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	daf2      	bge.n	800ed60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2210      	movs	r2, #16
 800ed82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	3301      	adds	r3, #1
 800ed88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ed90:	d901      	bls.n	800ed96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ed92:	2303      	movs	r3, #3
 800ed94:	e006      	b.n	800eda4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	691b      	ldr	r3, [r3, #16]
 800ed9a:	f003 0310 	and.w	r3, r3, #16
 800ed9e:	2b10      	cmp	r3, #16
 800eda0:	d0f0      	beq.n	800ed84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800eda2:	2300      	movs	r3, #0
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3714      	adds	r7, #20
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b085      	sub	sp, #20
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	460b      	mov	r3, r1
 800edba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	78fb      	ldrb	r3, [r7, #3]
 800edca:	68f9      	ldr	r1, [r7, #12]
 800edcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800edd0:	4313      	orrs	r3, r2
 800edd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3714      	adds	r7, #20
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr

0800ede2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ede2:	b480      	push	{r7}
 800ede4:	b087      	sub	sp, #28
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	f003 0306 	and.w	r3, r3, #6
 800edfa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d102      	bne.n	800ee08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ee02:	2300      	movs	r3, #0
 800ee04:	75fb      	strb	r3, [r7, #23]
 800ee06:	e00a      	b.n	800ee1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2b02      	cmp	r3, #2
 800ee0c:	d002      	beq.n	800ee14 <USB_GetDevSpeed+0x32>
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2b06      	cmp	r3, #6
 800ee12:	d102      	bne.n	800ee1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ee14:	2302      	movs	r3, #2
 800ee16:	75fb      	strb	r3, [r7, #23]
 800ee18:	e001      	b.n	800ee1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ee1a:	230f      	movs	r3, #15
 800ee1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ee1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	371c      	adds	r7, #28
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr

0800ee2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b085      	sub	sp, #20
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	785b      	ldrb	r3, [r3, #1]
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d139      	bne.n	800eebc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee4e:	69da      	ldr	r2, [r3, #28]
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	f003 030f 	and.w	r3, r3, #15
 800ee58:	2101      	movs	r1, #1
 800ee5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	68f9      	ldr	r1, [r7, #12]
 800ee62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ee66:	4313      	orrs	r3, r2
 800ee68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	015a      	lsls	r2, r3, #5
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	4413      	add	r3, r2
 800ee72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d153      	bne.n	800ef28 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	015a      	lsls	r2, r3, #5
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	4413      	add	r3, r2
 800ee88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	791b      	ldrb	r3, [r3, #4]
 800ee9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	059b      	lsls	r3, r3, #22
 800eea2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eea4:	431a      	orrs	r2, r3
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	0159      	lsls	r1, r3, #5
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	440b      	add	r3, r1
 800eeae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	4b20      	ldr	r3, [pc, #128]	@ (800ef38 <USB_ActivateEndpoint+0x10c>)
 800eeb6:	4313      	orrs	r3, r2
 800eeb8:	600b      	str	r3, [r1, #0]
 800eeba:	e035      	b.n	800ef28 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eec2:	69da      	ldr	r2, [r3, #28]
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	781b      	ldrb	r3, [r3, #0]
 800eec8:	f003 030f 	and.w	r3, r3, #15
 800eecc:	2101      	movs	r1, #1
 800eece:	fa01 f303 	lsl.w	r3, r1, r3
 800eed2:	041b      	lsls	r3, r3, #16
 800eed4:	68f9      	ldr	r1, [r7, #12]
 800eed6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eeda:	4313      	orrs	r3, r2
 800eedc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	015a      	lsls	r2, r3, #5
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	4413      	add	r3, r2
 800eee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d119      	bne.n	800ef28 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	015a      	lsls	r2, r3, #5
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	4413      	add	r3, r2
 800eefc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef00:	681a      	ldr	r2, [r3, #0]
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	791b      	ldrb	r3, [r3, #4]
 800ef0e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ef10:	430b      	orrs	r3, r1
 800ef12:	431a      	orrs	r2, r3
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	0159      	lsls	r1, r3, #5
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	440b      	add	r3, r1
 800ef1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef20:	4619      	mov	r1, r3
 800ef22:	4b05      	ldr	r3, [pc, #20]	@ (800ef38 <USB_ActivateEndpoint+0x10c>)
 800ef24:	4313      	orrs	r3, r2
 800ef26:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ef28:	2300      	movs	r3, #0
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3714      	adds	r7, #20
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr
 800ef36:	bf00      	nop
 800ef38:	10008000 	.word	0x10008000

0800ef3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b085      	sub	sp, #20
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	785b      	ldrb	r3, [r3, #1]
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d161      	bne.n	800f01c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	015a      	lsls	r2, r3, #5
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	4413      	add	r3, r2
 800ef60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ef6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ef6e:	d11f      	bne.n	800efb0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	015a      	lsls	r2, r3, #5
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	4413      	add	r3, r2
 800ef78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	68ba      	ldr	r2, [r7, #8]
 800ef80:	0151      	lsls	r1, r2, #5
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	440a      	add	r2, r1
 800ef86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ef8e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	015a      	lsls	r2, r3, #5
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	4413      	add	r3, r2
 800ef98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	68ba      	ldr	r2, [r7, #8]
 800efa0:	0151      	lsls	r1, r2, #5
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	440a      	add	r2, r1
 800efa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efaa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800efae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800efb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	f003 030f 	and.w	r3, r3, #15
 800efc0:	2101      	movs	r1, #1
 800efc2:	fa01 f303 	lsl.w	r3, r1, r3
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	43db      	mvns	r3, r3
 800efca:	68f9      	ldr	r1, [r7, #12]
 800efcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800efd0:	4013      	ands	r3, r2
 800efd2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800efda:	69da      	ldr	r2, [r3, #28]
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	f003 030f 	and.w	r3, r3, #15
 800efe4:	2101      	movs	r1, #1
 800efe6:	fa01 f303 	lsl.w	r3, r1, r3
 800efea:	b29b      	uxth	r3, r3
 800efec:	43db      	mvns	r3, r3
 800efee:	68f9      	ldr	r1, [r7, #12]
 800eff0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eff4:	4013      	ands	r3, r2
 800eff6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	015a      	lsls	r2, r3, #5
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	4413      	add	r3, r2
 800f000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	0159      	lsls	r1, r3, #5
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	440b      	add	r3, r1
 800f00e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f012:	4619      	mov	r1, r3
 800f014:	4b35      	ldr	r3, [pc, #212]	@ (800f0ec <USB_DeactivateEndpoint+0x1b0>)
 800f016:	4013      	ands	r3, r2
 800f018:	600b      	str	r3, [r1, #0]
 800f01a:	e060      	b.n	800f0de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	015a      	lsls	r2, r3, #5
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	4413      	add	r3, r2
 800f024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f02e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f032:	d11f      	bne.n	800f074 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	015a      	lsls	r2, r3, #5
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	4413      	add	r3, r2
 800f03c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	68ba      	ldr	r2, [r7, #8]
 800f044:	0151      	lsls	r1, r2, #5
 800f046:	68fa      	ldr	r2, [r7, #12]
 800f048:	440a      	add	r2, r1
 800f04a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f04e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f052:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	015a      	lsls	r2, r3, #5
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	4413      	add	r3, r2
 800f05c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	0151      	lsls	r1, r2, #5
 800f066:	68fa      	ldr	r2, [r7, #12]
 800f068:	440a      	add	r2, r1
 800f06a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f06e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f072:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f07a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	f003 030f 	and.w	r3, r3, #15
 800f084:	2101      	movs	r1, #1
 800f086:	fa01 f303 	lsl.w	r3, r1, r3
 800f08a:	041b      	lsls	r3, r3, #16
 800f08c:	43db      	mvns	r3, r3
 800f08e:	68f9      	ldr	r1, [r7, #12]
 800f090:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f094:	4013      	ands	r3, r2
 800f096:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f09e:	69da      	ldr	r2, [r3, #28]
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	f003 030f 	and.w	r3, r3, #15
 800f0a8:	2101      	movs	r1, #1
 800f0aa:	fa01 f303 	lsl.w	r3, r1, r3
 800f0ae:	041b      	lsls	r3, r3, #16
 800f0b0:	43db      	mvns	r3, r3
 800f0b2:	68f9      	ldr	r1, [r7, #12]
 800f0b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f0b8:	4013      	ands	r3, r2
 800f0ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	015a      	lsls	r2, r3, #5
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0c8:	681a      	ldr	r2, [r3, #0]
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	0159      	lsls	r1, r3, #5
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	440b      	add	r3, r1
 800f0d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	4b05      	ldr	r3, [pc, #20]	@ (800f0f0 <USB_DeactivateEndpoint+0x1b4>)
 800f0da:	4013      	ands	r3, r2
 800f0dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3714      	adds	r7, #20
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr
 800f0ec:	ec337800 	.word	0xec337800
 800f0f0:	eff37800 	.word	0xeff37800

0800f0f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b08a      	sub	sp, #40	@ 0x28
 800f0f8:	af02      	add	r7, sp, #8
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	4613      	mov	r3, r2
 800f100:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	785b      	ldrb	r3, [r3, #1]
 800f110:	2b01      	cmp	r3, #1
 800f112:	f040 8181 	bne.w	800f418 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	691b      	ldr	r3, [r3, #16]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d132      	bne.n	800f184 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f11e:	69bb      	ldr	r3, [r7, #24]
 800f120:	015a      	lsls	r2, r3, #5
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	4413      	add	r3, r2
 800f126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f12a:	691a      	ldr	r2, [r3, #16]
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	0159      	lsls	r1, r3, #5
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	440b      	add	r3, r1
 800f134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f138:	4619      	mov	r1, r3
 800f13a:	4ba5      	ldr	r3, [pc, #660]	@ (800f3d0 <USB_EPStartXfer+0x2dc>)
 800f13c:	4013      	ands	r3, r2
 800f13e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f140:	69bb      	ldr	r3, [r7, #24]
 800f142:	015a      	lsls	r2, r3, #5
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	4413      	add	r3, r2
 800f148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f14c:	691b      	ldr	r3, [r3, #16]
 800f14e:	69ba      	ldr	r2, [r7, #24]
 800f150:	0151      	lsls	r1, r2, #5
 800f152:	69fa      	ldr	r2, [r7, #28]
 800f154:	440a      	add	r2, r1
 800f156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f15a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f15e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f160:	69bb      	ldr	r3, [r7, #24]
 800f162:	015a      	lsls	r2, r3, #5
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	4413      	add	r3, r2
 800f168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f16c:	691a      	ldr	r2, [r3, #16]
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	0159      	lsls	r1, r3, #5
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	440b      	add	r3, r1
 800f176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f17a:	4619      	mov	r1, r3
 800f17c:	4b95      	ldr	r3, [pc, #596]	@ (800f3d4 <USB_EPStartXfer+0x2e0>)
 800f17e:	4013      	ands	r3, r2
 800f180:	610b      	str	r3, [r1, #16]
 800f182:	e092      	b.n	800f2aa <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f184:	69bb      	ldr	r3, [r7, #24]
 800f186:	015a      	lsls	r2, r3, #5
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	4413      	add	r3, r2
 800f18c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f190:	691a      	ldr	r2, [r3, #16]
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	0159      	lsls	r1, r3, #5
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	440b      	add	r3, r1
 800f19a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f19e:	4619      	mov	r1, r3
 800f1a0:	4b8c      	ldr	r3, [pc, #560]	@ (800f3d4 <USB_EPStartXfer+0x2e0>)
 800f1a2:	4013      	ands	r3, r2
 800f1a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f1a6:	69bb      	ldr	r3, [r7, #24]
 800f1a8:	015a      	lsls	r2, r3, #5
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1b2:	691a      	ldr	r2, [r3, #16]
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	0159      	lsls	r1, r3, #5
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	440b      	add	r3, r1
 800f1bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	4b83      	ldr	r3, [pc, #524]	@ (800f3d0 <USB_EPStartXfer+0x2dc>)
 800f1c4:	4013      	ands	r3, r2
 800f1c6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800f1c8:	69bb      	ldr	r3, [r7, #24]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d11a      	bne.n	800f204 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	691a      	ldr	r2, [r3, #16]
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	689b      	ldr	r3, [r3, #8]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d903      	bls.n	800f1e2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	689a      	ldr	r2, [r3, #8]
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	015a      	lsls	r2, r3, #5
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	4413      	add	r3, r2
 800f1ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1ee:	691b      	ldr	r3, [r3, #16]
 800f1f0:	69ba      	ldr	r2, [r7, #24]
 800f1f2:	0151      	lsls	r1, r2, #5
 800f1f4:	69fa      	ldr	r2, [r7, #28]
 800f1f6:	440a      	add	r2, r1
 800f1f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f1fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f200:	6113      	str	r3, [r2, #16]
 800f202:	e01b      	b.n	800f23c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f204:	69bb      	ldr	r3, [r7, #24]
 800f206:	015a      	lsls	r2, r3, #5
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	4413      	add	r3, r2
 800f20c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f210:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	6919      	ldr	r1, [r3, #16]
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	440b      	add	r3, r1
 800f21c:	1e59      	subs	r1, r3, #1
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	689b      	ldr	r3, [r3, #8]
 800f222:	fbb1 f3f3 	udiv	r3, r1, r3
 800f226:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f228:	4b6b      	ldr	r3, [pc, #428]	@ (800f3d8 <USB_EPStartXfer+0x2e4>)
 800f22a:	400b      	ands	r3, r1
 800f22c:	69b9      	ldr	r1, [r7, #24]
 800f22e:	0148      	lsls	r0, r1, #5
 800f230:	69f9      	ldr	r1, [r7, #28]
 800f232:	4401      	add	r1, r0
 800f234:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f238:	4313      	orrs	r3, r2
 800f23a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	015a      	lsls	r2, r3, #5
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	4413      	add	r3, r2
 800f244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f248:	691a      	ldr	r2, [r3, #16]
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	691b      	ldr	r3, [r3, #16]
 800f24e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f252:	69b9      	ldr	r1, [r7, #24]
 800f254:	0148      	lsls	r0, r1, #5
 800f256:	69f9      	ldr	r1, [r7, #28]
 800f258:	4401      	add	r1, r0
 800f25a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f25e:	4313      	orrs	r3, r2
 800f260:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	791b      	ldrb	r3, [r3, #4]
 800f266:	2b01      	cmp	r3, #1
 800f268:	d11f      	bne.n	800f2aa <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f26a:	69bb      	ldr	r3, [r7, #24]
 800f26c:	015a      	lsls	r2, r3, #5
 800f26e:	69fb      	ldr	r3, [r7, #28]
 800f270:	4413      	add	r3, r2
 800f272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f276:	691b      	ldr	r3, [r3, #16]
 800f278:	69ba      	ldr	r2, [r7, #24]
 800f27a:	0151      	lsls	r1, r2, #5
 800f27c:	69fa      	ldr	r2, [r7, #28]
 800f27e:	440a      	add	r2, r1
 800f280:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f284:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800f288:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	015a      	lsls	r2, r3, #5
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	4413      	add	r3, r2
 800f292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f296:	691b      	ldr	r3, [r3, #16]
 800f298:	69ba      	ldr	r2, [r7, #24]
 800f29a:	0151      	lsls	r1, r2, #5
 800f29c:	69fa      	ldr	r2, [r7, #28]
 800f29e:	440a      	add	r2, r1
 800f2a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f2a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f2a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f2aa:	79fb      	ldrb	r3, [r7, #7]
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d14b      	bne.n	800f348 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	69db      	ldr	r3, [r3, #28]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d009      	beq.n	800f2cc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f2b8:	69bb      	ldr	r3, [r7, #24]
 800f2ba:	015a      	lsls	r2, r3, #5
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	4413      	add	r3, r2
 800f2c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	69db      	ldr	r3, [r3, #28]
 800f2ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	791b      	ldrb	r3, [r3, #4]
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	d128      	bne.n	800f326 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2da:	689b      	ldr	r3, [r3, #8]
 800f2dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d110      	bne.n	800f306 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f2e4:	69bb      	ldr	r3, [r7, #24]
 800f2e6:	015a      	lsls	r2, r3, #5
 800f2e8:	69fb      	ldr	r3, [r7, #28]
 800f2ea:	4413      	add	r3, r2
 800f2ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	69ba      	ldr	r2, [r7, #24]
 800f2f4:	0151      	lsls	r1, r2, #5
 800f2f6:	69fa      	ldr	r2, [r7, #28]
 800f2f8:	440a      	add	r2, r1
 800f2fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f2fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f302:	6013      	str	r3, [r2, #0]
 800f304:	e00f      	b.n	800f326 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f306:	69bb      	ldr	r3, [r7, #24]
 800f308:	015a      	lsls	r2, r3, #5
 800f30a:	69fb      	ldr	r3, [r7, #28]
 800f30c:	4413      	add	r3, r2
 800f30e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	69ba      	ldr	r2, [r7, #24]
 800f316:	0151      	lsls	r1, r2, #5
 800f318:	69fa      	ldr	r2, [r7, #28]
 800f31a:	440a      	add	r2, r1
 800f31c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f324:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	015a      	lsls	r2, r3, #5
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	4413      	add	r3, r2
 800f32e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	69ba      	ldr	r2, [r7, #24]
 800f336:	0151      	lsls	r1, r2, #5
 800f338:	69fa      	ldr	r2, [r7, #28]
 800f33a:	440a      	add	r2, r1
 800f33c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f340:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f344:	6013      	str	r3, [r2, #0]
 800f346:	e16a      	b.n	800f61e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f348:	69bb      	ldr	r3, [r7, #24]
 800f34a:	015a      	lsls	r2, r3, #5
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	4413      	add	r3, r2
 800f350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	69ba      	ldr	r2, [r7, #24]
 800f358:	0151      	lsls	r1, r2, #5
 800f35a:	69fa      	ldr	r2, [r7, #28]
 800f35c:	440a      	add	r2, r1
 800f35e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f362:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f366:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	791b      	ldrb	r3, [r3, #4]
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d015      	beq.n	800f39c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	691b      	ldr	r3, [r3, #16]
 800f374:	2b00      	cmp	r3, #0
 800f376:	f000 8152 	beq.w	800f61e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f37a:	69fb      	ldr	r3, [r7, #28]
 800f37c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	f003 030f 	and.w	r3, r3, #15
 800f38a:	2101      	movs	r1, #1
 800f38c:	fa01 f303 	lsl.w	r3, r1, r3
 800f390:	69f9      	ldr	r1, [r7, #28]
 800f392:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f396:	4313      	orrs	r3, r2
 800f398:	634b      	str	r3, [r1, #52]	@ 0x34
 800f39a:	e140      	b.n	800f61e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f39c:	69fb      	ldr	r3, [r7, #28]
 800f39e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f3a2:	689b      	ldr	r3, [r3, #8]
 800f3a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d117      	bne.n	800f3dc <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	015a      	lsls	r2, r3, #5
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	4413      	add	r3, r2
 800f3b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	69ba      	ldr	r2, [r7, #24]
 800f3bc:	0151      	lsls	r1, r2, #5
 800f3be:	69fa      	ldr	r2, [r7, #28]
 800f3c0:	440a      	add	r2, r1
 800f3c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f3c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f3ca:	6013      	str	r3, [r2, #0]
 800f3cc:	e016      	b.n	800f3fc <USB_EPStartXfer+0x308>
 800f3ce:	bf00      	nop
 800f3d0:	e007ffff 	.word	0xe007ffff
 800f3d4:	fff80000 	.word	0xfff80000
 800f3d8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f3dc:	69bb      	ldr	r3, [r7, #24]
 800f3de:	015a      	lsls	r2, r3, #5
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	4413      	add	r3, r2
 800f3e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	69ba      	ldr	r2, [r7, #24]
 800f3ec:	0151      	lsls	r1, r2, #5
 800f3ee:	69fa      	ldr	r2, [r7, #28]
 800f3f0:	440a      	add	r2, r1
 800f3f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f3f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f3fa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	68d9      	ldr	r1, [r3, #12]
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	781a      	ldrb	r2, [r3, #0]
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	b298      	uxth	r0, r3
 800f40a:	79fb      	ldrb	r3, [r7, #7]
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	4603      	mov	r3, r0
 800f410:	68f8      	ldr	r0, [r7, #12]
 800f412:	f000 f9b9 	bl	800f788 <USB_WritePacket>
 800f416:	e102      	b.n	800f61e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f418:	69bb      	ldr	r3, [r7, #24]
 800f41a:	015a      	lsls	r2, r3, #5
 800f41c:	69fb      	ldr	r3, [r7, #28]
 800f41e:	4413      	add	r3, r2
 800f420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f424:	691a      	ldr	r2, [r3, #16]
 800f426:	69bb      	ldr	r3, [r7, #24]
 800f428:	0159      	lsls	r1, r3, #5
 800f42a:	69fb      	ldr	r3, [r7, #28]
 800f42c:	440b      	add	r3, r1
 800f42e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f432:	4619      	mov	r1, r3
 800f434:	4b7c      	ldr	r3, [pc, #496]	@ (800f628 <USB_EPStartXfer+0x534>)
 800f436:	4013      	ands	r3, r2
 800f438:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	015a      	lsls	r2, r3, #5
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	4413      	add	r3, r2
 800f442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f446:	691a      	ldr	r2, [r3, #16]
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	0159      	lsls	r1, r3, #5
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	440b      	add	r3, r1
 800f450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f454:	4619      	mov	r1, r3
 800f456:	4b75      	ldr	r3, [pc, #468]	@ (800f62c <USB_EPStartXfer+0x538>)
 800f458:	4013      	ands	r3, r2
 800f45a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800f45c:	69bb      	ldr	r3, [r7, #24]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d12f      	bne.n	800f4c2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	691b      	ldr	r3, [r3, #16]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d003      	beq.n	800f472 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	689a      	ldr	r2, [r3, #8]
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	689a      	ldr	r2, [r3, #8]
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f47a:	69bb      	ldr	r3, [r7, #24]
 800f47c:	015a      	lsls	r2, r3, #5
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	4413      	add	r3, r2
 800f482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f486:	691a      	ldr	r2, [r3, #16]
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	6a1b      	ldr	r3, [r3, #32]
 800f48c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f490:	69b9      	ldr	r1, [r7, #24]
 800f492:	0148      	lsls	r0, r1, #5
 800f494:	69f9      	ldr	r1, [r7, #28]
 800f496:	4401      	add	r1, r0
 800f498:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f49c:	4313      	orrs	r3, r2
 800f49e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f4a0:	69bb      	ldr	r3, [r7, #24]
 800f4a2:	015a      	lsls	r2, r3, #5
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	4413      	add	r3, r2
 800f4a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4ac:	691b      	ldr	r3, [r3, #16]
 800f4ae:	69ba      	ldr	r2, [r7, #24]
 800f4b0:	0151      	lsls	r1, r2, #5
 800f4b2:	69fa      	ldr	r2, [r7, #28]
 800f4b4:	440a      	add	r2, r1
 800f4b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f4ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f4be:	6113      	str	r3, [r2, #16]
 800f4c0:	e05f      	b.n	800f582 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	691b      	ldr	r3, [r3, #16]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d123      	bne.n	800f512 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	015a      	lsls	r2, r3, #5
 800f4ce:	69fb      	ldr	r3, [r7, #28]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4d6:	691a      	ldr	r2, [r3, #16]
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	689b      	ldr	r3, [r3, #8]
 800f4dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f4e0:	69b9      	ldr	r1, [r7, #24]
 800f4e2:	0148      	lsls	r0, r1, #5
 800f4e4:	69f9      	ldr	r1, [r7, #28]
 800f4e6:	4401      	add	r1, r0
 800f4e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	015a      	lsls	r2, r3, #5
 800f4f4:	69fb      	ldr	r3, [r7, #28]
 800f4f6:	4413      	add	r3, r2
 800f4f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4fc:	691b      	ldr	r3, [r3, #16]
 800f4fe:	69ba      	ldr	r2, [r7, #24]
 800f500:	0151      	lsls	r1, r2, #5
 800f502:	69fa      	ldr	r2, [r7, #28]
 800f504:	440a      	add	r2, r1
 800f506:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f50a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f50e:	6113      	str	r3, [r2, #16]
 800f510:	e037      	b.n	800f582 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	691a      	ldr	r2, [r3, #16]
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	689b      	ldr	r3, [r3, #8]
 800f51a:	4413      	add	r3, r2
 800f51c:	1e5a      	subs	r2, r3, #1
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	689b      	ldr	r3, [r3, #8]
 800f522:	fbb2 f3f3 	udiv	r3, r2, r3
 800f526:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	8afa      	ldrh	r2, [r7, #22]
 800f52e:	fb03 f202 	mul.w	r2, r3, r2
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	015a      	lsls	r2, r3, #5
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	4413      	add	r3, r2
 800f53e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f542:	691a      	ldr	r2, [r3, #16]
 800f544:	8afb      	ldrh	r3, [r7, #22]
 800f546:	04d9      	lsls	r1, r3, #19
 800f548:	4b39      	ldr	r3, [pc, #228]	@ (800f630 <USB_EPStartXfer+0x53c>)
 800f54a:	400b      	ands	r3, r1
 800f54c:	69b9      	ldr	r1, [r7, #24]
 800f54e:	0148      	lsls	r0, r1, #5
 800f550:	69f9      	ldr	r1, [r7, #28]
 800f552:	4401      	add	r1, r0
 800f554:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f558:	4313      	orrs	r3, r2
 800f55a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f55c:	69bb      	ldr	r3, [r7, #24]
 800f55e:	015a      	lsls	r2, r3, #5
 800f560:	69fb      	ldr	r3, [r7, #28]
 800f562:	4413      	add	r3, r2
 800f564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f568:	691a      	ldr	r2, [r3, #16]
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	6a1b      	ldr	r3, [r3, #32]
 800f56e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f572:	69b9      	ldr	r1, [r7, #24]
 800f574:	0148      	lsls	r0, r1, #5
 800f576:	69f9      	ldr	r1, [r7, #28]
 800f578:	4401      	add	r1, r0
 800f57a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f57e:	4313      	orrs	r3, r2
 800f580:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800f582:	79fb      	ldrb	r3, [r7, #7]
 800f584:	2b01      	cmp	r3, #1
 800f586:	d10d      	bne.n	800f5a4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d009      	beq.n	800f5a4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	68d9      	ldr	r1, [r3, #12]
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	015a      	lsls	r2, r3, #5
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	4413      	add	r3, r2
 800f59c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5a0:	460a      	mov	r2, r1
 800f5a2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	791b      	ldrb	r3, [r3, #4]
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	d128      	bne.n	800f5fe <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f5b2:	689b      	ldr	r3, [r3, #8]
 800f5b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d110      	bne.n	800f5de <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f5bc:	69bb      	ldr	r3, [r7, #24]
 800f5be:	015a      	lsls	r2, r3, #5
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	4413      	add	r3, r2
 800f5c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	69ba      	ldr	r2, [r7, #24]
 800f5cc:	0151      	lsls	r1, r2, #5
 800f5ce:	69fa      	ldr	r2, [r7, #28]
 800f5d0:	440a      	add	r2, r1
 800f5d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f5d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f5da:	6013      	str	r3, [r2, #0]
 800f5dc:	e00f      	b.n	800f5fe <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f5de:	69bb      	ldr	r3, [r7, #24]
 800f5e0:	015a      	lsls	r2, r3, #5
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	69ba      	ldr	r2, [r7, #24]
 800f5ee:	0151      	lsls	r1, r2, #5
 800f5f0:	69fa      	ldr	r2, [r7, #28]
 800f5f2:	440a      	add	r2, r1
 800f5f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f5f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f5fc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	015a      	lsls	r2, r3, #5
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	4413      	add	r3, r2
 800f606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	69ba      	ldr	r2, [r7, #24]
 800f60e:	0151      	lsls	r1, r2, #5
 800f610:	69fa      	ldr	r2, [r7, #28]
 800f612:	440a      	add	r2, r1
 800f614:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f618:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f61c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f61e:	2300      	movs	r3, #0
}
 800f620:	4618      	mov	r0, r3
 800f622:	3720      	adds	r7, #32
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	fff80000 	.word	0xfff80000
 800f62c:	e007ffff 	.word	0xe007ffff
 800f630:	1ff80000 	.word	0x1ff80000

0800f634 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f634:	b480      	push	{r7}
 800f636:	b087      	sub	sp, #28
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f63e:	2300      	movs	r3, #0
 800f640:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f642:	2300      	movs	r3, #0
 800f644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	785b      	ldrb	r3, [r3, #1]
 800f64e:	2b01      	cmp	r3, #1
 800f650:	d14a      	bne.n	800f6e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	015a      	lsls	r2, r3, #5
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	4413      	add	r3, r2
 800f65c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f66a:	f040 8086 	bne.w	800f77a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	015a      	lsls	r2, r3, #5
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	4413      	add	r3, r2
 800f678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	683a      	ldr	r2, [r7, #0]
 800f680:	7812      	ldrb	r2, [r2, #0]
 800f682:	0151      	lsls	r1, r2, #5
 800f684:	693a      	ldr	r2, [r7, #16]
 800f686:	440a      	add	r2, r1
 800f688:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f68c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f690:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	015a      	lsls	r2, r3, #5
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	4413      	add	r3, r2
 800f69c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	683a      	ldr	r2, [r7, #0]
 800f6a4:	7812      	ldrb	r2, [r2, #0]
 800f6a6:	0151      	lsls	r1, r2, #5
 800f6a8:	693a      	ldr	r2, [r7, #16]
 800f6aa:	440a      	add	r2, r1
 800f6ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f6b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f6b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d902      	bls.n	800f6cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	75fb      	strb	r3, [r7, #23]
          break;
 800f6ca:	e056      	b.n	800f77a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	015a      	lsls	r2, r3, #5
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	4413      	add	r3, r2
 800f6d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f6e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f6e4:	d0e7      	beq.n	800f6b6 <USB_EPStopXfer+0x82>
 800f6e6:	e048      	b.n	800f77a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	015a      	lsls	r2, r3, #5
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f6fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f700:	d13b      	bne.n	800f77a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	015a      	lsls	r2, r3, #5
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	4413      	add	r3, r2
 800f70c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	683a      	ldr	r2, [r7, #0]
 800f714:	7812      	ldrb	r2, [r2, #0]
 800f716:	0151      	lsls	r1, r2, #5
 800f718:	693a      	ldr	r2, [r7, #16]
 800f71a:	440a      	add	r2, r1
 800f71c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f720:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f724:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	015a      	lsls	r2, r3, #5
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	4413      	add	r3, r2
 800f730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	683a      	ldr	r2, [r7, #0]
 800f738:	7812      	ldrb	r2, [r2, #0]
 800f73a:	0151      	lsls	r1, r2, #5
 800f73c:	693a      	ldr	r2, [r7, #16]
 800f73e:	440a      	add	r2, r1
 800f740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f744:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f748:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	3301      	adds	r3, #1
 800f74e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f756:	4293      	cmp	r3, r2
 800f758:	d902      	bls.n	800f760 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f75a:	2301      	movs	r3, #1
 800f75c:	75fb      	strb	r3, [r7, #23]
          break;
 800f75e:	e00c      	b.n	800f77a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	015a      	lsls	r2, r3, #5
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	4413      	add	r3, r2
 800f76a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f774:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f778:	d0e7      	beq.n	800f74a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f77a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	371c      	adds	r7, #28
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr

0800f788 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f788:	b480      	push	{r7}
 800f78a:	b089      	sub	sp, #36	@ 0x24
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	60f8      	str	r0, [r7, #12]
 800f790:	60b9      	str	r1, [r7, #8]
 800f792:	4611      	mov	r1, r2
 800f794:	461a      	mov	r2, r3
 800f796:	460b      	mov	r3, r1
 800f798:	71fb      	strb	r3, [r7, #7]
 800f79a:	4613      	mov	r3, r2
 800f79c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f7a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d123      	bne.n	800f7f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f7ae:	88bb      	ldrh	r3, [r7, #4]
 800f7b0:	3303      	adds	r3, #3
 800f7b2:	089b      	lsrs	r3, r3, #2
 800f7b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	61bb      	str	r3, [r7, #24]
 800f7ba:	e018      	b.n	800f7ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f7bc:	79fb      	ldrb	r3, [r7, #7]
 800f7be:	031a      	lsls	r2, r3, #12
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	4413      	add	r3, r2
 800f7c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f7d0:	69fb      	ldr	r3, [r7, #28]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	3301      	adds	r3, #1
 800f7da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f7dc:	69fb      	ldr	r3, [r7, #28]
 800f7de:	3301      	adds	r3, #1
 800f7e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f7e8:	69bb      	ldr	r3, [r7, #24]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	61bb      	str	r3, [r7, #24]
 800f7ee:	69ba      	ldr	r2, [r7, #24]
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d3e2      	bcc.n	800f7bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f7f6:	2300      	movs	r3, #0
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3724      	adds	r7, #36	@ 0x24
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f804:	b480      	push	{r7}
 800f806:	b08b      	sub	sp, #44	@ 0x2c
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	4613      	mov	r3, r2
 800f810:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f81a:	88fb      	ldrh	r3, [r7, #6]
 800f81c:	089b      	lsrs	r3, r3, #2
 800f81e:	b29b      	uxth	r3, r3
 800f820:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f822:	88fb      	ldrh	r3, [r7, #6]
 800f824:	f003 0303 	and.w	r3, r3, #3
 800f828:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f82a:	2300      	movs	r3, #0
 800f82c:	623b      	str	r3, [r7, #32]
 800f82e:	e014      	b.n	800f85a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f830:	69bb      	ldr	r3, [r7, #24]
 800f832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f836:	681a      	ldr	r2, [r3, #0]
 800f838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f83a:	601a      	str	r2, [r3, #0]
    pDest++;
 800f83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f83e:	3301      	adds	r3, #1
 800f840:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f844:	3301      	adds	r3, #1
 800f846:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f84a:	3301      	adds	r3, #1
 800f84c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f850:	3301      	adds	r3, #1
 800f852:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800f854:	6a3b      	ldr	r3, [r7, #32]
 800f856:	3301      	adds	r3, #1
 800f858:	623b      	str	r3, [r7, #32]
 800f85a:	6a3a      	ldr	r2, [r7, #32]
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d3e6      	bcc.n	800f830 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f862:	8bfb      	ldrh	r3, [r7, #30]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d01e      	beq.n	800f8a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f868:	2300      	movs	r3, #0
 800f86a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f86c:	69bb      	ldr	r3, [r7, #24]
 800f86e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f872:	461a      	mov	r2, r3
 800f874:	f107 0310 	add.w	r3, r7, #16
 800f878:	6812      	ldr	r2, [r2, #0]
 800f87a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f87c:	693a      	ldr	r2, [r7, #16]
 800f87e:	6a3b      	ldr	r3, [r7, #32]
 800f880:	b2db      	uxtb	r3, r3
 800f882:	00db      	lsls	r3, r3, #3
 800f884:	fa22 f303 	lsr.w	r3, r2, r3
 800f888:	b2da      	uxtb	r2, r3
 800f88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f88c:	701a      	strb	r2, [r3, #0]
      i++;
 800f88e:	6a3b      	ldr	r3, [r7, #32]
 800f890:	3301      	adds	r3, #1
 800f892:	623b      	str	r3, [r7, #32]
      pDest++;
 800f894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f896:	3301      	adds	r3, #1
 800f898:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800f89a:	8bfb      	ldrh	r3, [r7, #30]
 800f89c:	3b01      	subs	r3, #1
 800f89e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f8a0:	8bfb      	ldrh	r3, [r7, #30]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d1ea      	bne.n	800f87c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	372c      	adds	r7, #44	@ 0x2c
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b2:	4770      	bx	lr

0800f8b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b085      	sub	sp, #20
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	785b      	ldrb	r3, [r3, #1]
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d12c      	bne.n	800f92a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	015a      	lsls	r2, r3, #5
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	4413      	add	r3, r2
 800f8d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	db12      	blt.n	800f908 <USB_EPSetStall+0x54>
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d00f      	beq.n	800f908 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	015a      	lsls	r2, r3, #5
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	68ba      	ldr	r2, [r7, #8]
 800f8f8:	0151      	lsls	r1, r2, #5
 800f8fa:	68fa      	ldr	r2, [r7, #12]
 800f8fc:	440a      	add	r2, r1
 800f8fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f902:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f906:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	015a      	lsls	r2, r3, #5
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	4413      	add	r3, r2
 800f910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	68ba      	ldr	r2, [r7, #8]
 800f918:	0151      	lsls	r1, r2, #5
 800f91a:	68fa      	ldr	r2, [r7, #12]
 800f91c:	440a      	add	r2, r1
 800f91e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f922:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f926:	6013      	str	r3, [r2, #0]
 800f928:	e02b      	b.n	800f982 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	015a      	lsls	r2, r3, #5
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	4413      	add	r3, r2
 800f932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	db12      	blt.n	800f962 <USB_EPSetStall+0xae>
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00f      	beq.n	800f962 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	015a      	lsls	r2, r3, #5
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	4413      	add	r3, r2
 800f94a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	68ba      	ldr	r2, [r7, #8]
 800f952:	0151      	lsls	r1, r2, #5
 800f954:	68fa      	ldr	r2, [r7, #12]
 800f956:	440a      	add	r2, r1
 800f958:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f95c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f960:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	015a      	lsls	r2, r3, #5
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	4413      	add	r3, r2
 800f96a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	68ba      	ldr	r2, [r7, #8]
 800f972:	0151      	lsls	r1, r2, #5
 800f974:	68fa      	ldr	r2, [r7, #12]
 800f976:	440a      	add	r2, r1
 800f978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f97c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f980:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f982:	2300      	movs	r3, #0
}
 800f984:	4618      	mov	r0, r3
 800f986:	3714      	adds	r7, #20
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f990:	b480      	push	{r7}
 800f992:	b085      	sub	sp, #20
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	785b      	ldrb	r3, [r3, #1]
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d128      	bne.n	800f9fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	015a      	lsls	r2, r3, #5
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	4413      	add	r3, r2
 800f9b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	68ba      	ldr	r2, [r7, #8]
 800f9bc:	0151      	lsls	r1, r2, #5
 800f9be:	68fa      	ldr	r2, [r7, #12]
 800f9c0:	440a      	add	r2, r1
 800f9c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f9c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f9ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	791b      	ldrb	r3, [r3, #4]
 800f9d0:	2b03      	cmp	r3, #3
 800f9d2:	d003      	beq.n	800f9dc <USB_EPClearStall+0x4c>
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	791b      	ldrb	r3, [r3, #4]
 800f9d8:	2b02      	cmp	r3, #2
 800f9da:	d138      	bne.n	800fa4e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	015a      	lsls	r2, r3, #5
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	4413      	add	r3, r2
 800f9e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	68ba      	ldr	r2, [r7, #8]
 800f9ec:	0151      	lsls	r1, r2, #5
 800f9ee:	68fa      	ldr	r2, [r7, #12]
 800f9f0:	440a      	add	r2, r1
 800f9f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f9f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f9fa:	6013      	str	r3, [r2, #0]
 800f9fc:	e027      	b.n	800fa4e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	015a      	lsls	r2, r3, #5
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	4413      	add	r3, r2
 800fa06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	68ba      	ldr	r2, [r7, #8]
 800fa0e:	0151      	lsls	r1, r2, #5
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	440a      	add	r2, r1
 800fa14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fa18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fa1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	791b      	ldrb	r3, [r3, #4]
 800fa22:	2b03      	cmp	r3, #3
 800fa24:	d003      	beq.n	800fa2e <USB_EPClearStall+0x9e>
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	791b      	ldrb	r3, [r3, #4]
 800fa2a:	2b02      	cmp	r3, #2
 800fa2c:	d10f      	bne.n	800fa4e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	015a      	lsls	r2, r3, #5
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	4413      	add	r3, r2
 800fa36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	68ba      	ldr	r2, [r7, #8]
 800fa3e:	0151      	lsls	r1, r2, #5
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	440a      	add	r2, r1
 800fa44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fa48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fa4c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fa4e:	2300      	movs	r3, #0
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3714      	adds	r7, #20
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr

0800fa5c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b085      	sub	sp, #20
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	460b      	mov	r3, r1
 800fa66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fa7a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800fa7e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa86:	681a      	ldr	r2, [r3, #0]
 800fa88:	78fb      	ldrb	r3, [r7, #3]
 800fa8a:	011b      	lsls	r3, r3, #4
 800fa8c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800fa90:	68f9      	ldr	r1, [r7, #12]
 800fa92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fa96:	4313      	orrs	r3, r2
 800fa98:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fa9a:	2300      	movs	r3, #0
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3714      	adds	r7, #20
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr

0800faa8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	68fa      	ldr	r2, [r7, #12]
 800fabe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fac2:	f023 0303 	bic.w	r3, r3, #3
 800fac6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800face:	685b      	ldr	r3, [r3, #4]
 800fad0:	68fa      	ldr	r2, [r7, #12]
 800fad2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fad6:	f023 0302 	bic.w	r3, r3, #2
 800fada:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fadc:	2300      	movs	r3, #0
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3714      	adds	r7, #20
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr

0800faea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800faea:	b480      	push	{r7}
 800faec:	b085      	sub	sp, #20
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fb04:	f023 0303 	bic.w	r3, r3, #3
 800fb08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	68fa      	ldr	r2, [r7, #12]
 800fb14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fb18:	f043 0302 	orr.w	r3, r3, #2
 800fb1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fb1e:	2300      	movs	r3, #0
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3714      	adds	r7, #20
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr

0800fb2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b085      	sub	sp, #20
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	695b      	ldr	r3, [r3, #20]
 800fb38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	699b      	ldr	r3, [r3, #24]
 800fb3e:	68fa      	ldr	r2, [r7, #12]
 800fb40:	4013      	ands	r3, r2
 800fb42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fb44:	68fb      	ldr	r3, [r7, #12]
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3714      	adds	r7, #20
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr

0800fb52 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800fb52:	b480      	push	{r7}
 800fb54:	b085      	sub	sp, #20
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb64:	699b      	ldr	r3, [r3, #24]
 800fb66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb6e:	69db      	ldr	r3, [r3, #28]
 800fb70:	68ba      	ldr	r2, [r7, #8]
 800fb72:	4013      	ands	r3, r2
 800fb74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	0c1b      	lsrs	r3, r3, #16
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3714      	adds	r7, #20
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr

0800fb86 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800fb86:	b480      	push	{r7}
 800fb88:	b085      	sub	sp, #20
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb98:	699b      	ldr	r3, [r3, #24]
 800fb9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fba2:	69db      	ldr	r3, [r3, #28]
 800fba4:	68ba      	ldr	r2, [r7, #8]
 800fba6:	4013      	ands	r3, r2
 800fba8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	b29b      	uxth	r3, r3
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3714      	adds	r7, #20
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr

0800fbba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fbba:	b480      	push	{r7}
 800fbbc:	b085      	sub	sp, #20
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fbca:	78fb      	ldrb	r3, [r7, #3]
 800fbcc:	015a      	lsls	r2, r3, #5
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	4413      	add	r3, r2
 800fbd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fbd6:	689b      	ldr	r3, [r3, #8]
 800fbd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fbe0:	695b      	ldr	r3, [r3, #20]
 800fbe2:	68ba      	ldr	r2, [r7, #8]
 800fbe4:	4013      	ands	r3, r2
 800fbe6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fbe8:	68bb      	ldr	r3, [r7, #8]
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3714      	adds	r7, #20
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf4:	4770      	bx	lr

0800fbf6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fbf6:	b480      	push	{r7}
 800fbf8:	b087      	sub	sp, #28
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
 800fbfe:	460b      	mov	r3, r1
 800fc00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc0c:	691b      	ldr	r3, [r3, #16]
 800fc0e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc18:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fc1a:	78fb      	ldrb	r3, [r7, #3]
 800fc1c:	f003 030f 	and.w	r3, r3, #15
 800fc20:	68fa      	ldr	r2, [r7, #12]
 800fc22:	fa22 f303 	lsr.w	r3, r2, r3
 800fc26:	01db      	lsls	r3, r3, #7
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	693a      	ldr	r2, [r7, #16]
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fc30:	78fb      	ldrb	r3, [r7, #3]
 800fc32:	015a      	lsls	r2, r3, #5
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	4413      	add	r3, r2
 800fc38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc3c:	689b      	ldr	r3, [r3, #8]
 800fc3e:	693a      	ldr	r2, [r7, #16]
 800fc40:	4013      	ands	r3, r2
 800fc42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fc44:	68bb      	ldr	r3, [r7, #8]
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	371c      	adds	r7, #28
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr

0800fc52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800fc52:	b480      	push	{r7}
 800fc54:	b083      	sub	sp, #12
 800fc56:	af00      	add	r7, sp, #0
 800fc58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	695b      	ldr	r3, [r3, #20]
 800fc5e:	f003 0301 	and.w	r3, r3, #1
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	370c      	adds	r7, #12
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr
	...

0800fc70 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b085      	sub	sp, #20
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	4b09      	ldr	r3, [pc, #36]	@ (800fcb4 <USB_ActivateSetup+0x44>)
 800fc8e:	4013      	ands	r3, r2
 800fc90:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	68fa      	ldr	r2, [r7, #12]
 800fc9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fca4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fca6:	2300      	movs	r3, #0
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3714      	adds	r7, #20
 800fcac:	46bd      	mov	sp, r7
 800fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb2:	4770      	bx	lr
 800fcb4:	fffff800 	.word	0xfffff800

0800fcb8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b087      	sub	sp, #28
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	607a      	str	r2, [r7, #4]
 800fcc4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	333c      	adds	r3, #60	@ 0x3c
 800fcce:	3304      	adds	r3, #4
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	4a26      	ldr	r2, [pc, #152]	@ (800fd70 <USB_EP0_OutStart+0xb8>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d90a      	bls.n	800fcf2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fce8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fcec:	d101      	bne.n	800fcf2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	e037      	b.n	800fd62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd04:	691b      	ldr	r3, [r3, #16]
 800fd06:	697a      	ldr	r2, [r7, #20]
 800fd08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fd10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fd12:	697b      	ldr	r3, [r7, #20]
 800fd14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd18:	691b      	ldr	r3, [r3, #16]
 800fd1a:	697a      	ldr	r2, [r7, #20]
 800fd1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd20:	f043 0318 	orr.w	r3, r3, #24
 800fd24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd2c:	691b      	ldr	r3, [r3, #16]
 800fd2e:	697a      	ldr	r2, [r7, #20]
 800fd30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd34:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800fd38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fd3a:	7afb      	ldrb	r3, [r7, #11]
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d10f      	bne.n	800fd60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd46:	461a      	mov	r2, r3
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	697a      	ldr	r2, [r7, #20]
 800fd56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd5a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800fd5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fd60:	2300      	movs	r3, #0
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	371c      	adds	r7, #28
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr
 800fd6e:	bf00      	nop
 800fd70:	4f54300a 	.word	0x4f54300a

0800fd74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b085      	sub	sp, #20
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	3301      	adds	r3, #1
 800fd84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fd8c:	d901      	bls.n	800fd92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fd8e:	2303      	movs	r3, #3
 800fd90:	e01b      	b.n	800fdca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	691b      	ldr	r3, [r3, #16]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	daf2      	bge.n	800fd80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	691b      	ldr	r3, [r3, #16]
 800fda2:	f043 0201 	orr.w	r2, r3, #1
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	3301      	adds	r3, #1
 800fdae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fdb6:	d901      	bls.n	800fdbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fdb8:	2303      	movs	r3, #3
 800fdba:	e006      	b.n	800fdca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	691b      	ldr	r3, [r3, #16]
 800fdc0:	f003 0301 	and.w	r3, r3, #1
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d0f0      	beq.n	800fdaa <USB_CoreReset+0x36>

  return HAL_OK;
 800fdc8:	2300      	movs	r3, #0
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3714      	adds	r7, #20
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd4:	4770      	bx	lr
	...

0800fdd8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b084      	sub	sp, #16
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	460b      	mov	r3, r1
 800fde2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fde4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800fde8:	f002 fcdc 	bl	80127a4 <USBD_static_malloc>
 800fdec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d109      	bne.n	800fe08 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	32b0      	adds	r2, #176	@ 0xb0
 800fdfe:	2100      	movs	r1, #0
 800fe00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fe04:	2302      	movs	r3, #2
 800fe06:	e0d4      	b.n	800ffb2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fe08:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800fe0c:	2100      	movs	r1, #0
 800fe0e:	68f8      	ldr	r0, [r7, #12]
 800fe10:	f004 f827 	bl	8013e62 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	32b0      	adds	r2, #176	@ 0xb0
 800fe1e:	68f9      	ldr	r1, [r7, #12]
 800fe20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	32b0      	adds	r2, #176	@ 0xb0
 800fe2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	7c1b      	ldrb	r3, [r3, #16]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d138      	bne.n	800feb2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fe40:	4b5e      	ldr	r3, [pc, #376]	@ (800ffbc <USBD_CDC_Init+0x1e4>)
 800fe42:	7819      	ldrb	r1, [r3, #0]
 800fe44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe48:	2202      	movs	r2, #2
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f002 fb87 	bl	801255e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fe50:	4b5a      	ldr	r3, [pc, #360]	@ (800ffbc <USBD_CDC_Init+0x1e4>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	f003 020f 	and.w	r2, r3, #15
 800fe58:	6879      	ldr	r1, [r7, #4]
 800fe5a:	4613      	mov	r3, r2
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	4413      	add	r3, r2
 800fe60:	009b      	lsls	r3, r3, #2
 800fe62:	440b      	add	r3, r1
 800fe64:	3324      	adds	r3, #36	@ 0x24
 800fe66:	2201      	movs	r2, #1
 800fe68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fe6a:	4b55      	ldr	r3, [pc, #340]	@ (800ffc0 <USBD_CDC_Init+0x1e8>)
 800fe6c:	7819      	ldrb	r1, [r3, #0]
 800fe6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe72:	2202      	movs	r2, #2
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f002 fb72 	bl	801255e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fe7a:	4b51      	ldr	r3, [pc, #324]	@ (800ffc0 <USBD_CDC_Init+0x1e8>)
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	f003 020f 	and.w	r2, r3, #15
 800fe82:	6879      	ldr	r1, [r7, #4]
 800fe84:	4613      	mov	r3, r2
 800fe86:	009b      	lsls	r3, r3, #2
 800fe88:	4413      	add	r3, r2
 800fe8a:	009b      	lsls	r3, r3, #2
 800fe8c:	440b      	add	r3, r1
 800fe8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fe92:	2201      	movs	r2, #1
 800fe94:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fe96:	4b4b      	ldr	r3, [pc, #300]	@ (800ffc4 <USBD_CDC_Init+0x1ec>)
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	f003 020f 	and.w	r2, r3, #15
 800fe9e:	6879      	ldr	r1, [r7, #4]
 800fea0:	4613      	mov	r3, r2
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	4413      	add	r3, r2
 800fea6:	009b      	lsls	r3, r3, #2
 800fea8:	440b      	add	r3, r1
 800feaa:	3326      	adds	r3, #38	@ 0x26
 800feac:	2210      	movs	r2, #16
 800feae:	801a      	strh	r2, [r3, #0]
 800feb0:	e035      	b.n	800ff1e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800feb2:	4b42      	ldr	r3, [pc, #264]	@ (800ffbc <USBD_CDC_Init+0x1e4>)
 800feb4:	7819      	ldrb	r1, [r3, #0]
 800feb6:	2340      	movs	r3, #64	@ 0x40
 800feb8:	2202      	movs	r2, #2
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f002 fb4f 	bl	801255e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fec0:	4b3e      	ldr	r3, [pc, #248]	@ (800ffbc <USBD_CDC_Init+0x1e4>)
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	f003 020f 	and.w	r2, r3, #15
 800fec8:	6879      	ldr	r1, [r7, #4]
 800feca:	4613      	mov	r3, r2
 800fecc:	009b      	lsls	r3, r3, #2
 800fece:	4413      	add	r3, r2
 800fed0:	009b      	lsls	r3, r3, #2
 800fed2:	440b      	add	r3, r1
 800fed4:	3324      	adds	r3, #36	@ 0x24
 800fed6:	2201      	movs	r2, #1
 800fed8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800feda:	4b39      	ldr	r3, [pc, #228]	@ (800ffc0 <USBD_CDC_Init+0x1e8>)
 800fedc:	7819      	ldrb	r1, [r3, #0]
 800fede:	2340      	movs	r3, #64	@ 0x40
 800fee0:	2202      	movs	r2, #2
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f002 fb3b 	bl	801255e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fee8:	4b35      	ldr	r3, [pc, #212]	@ (800ffc0 <USBD_CDC_Init+0x1e8>)
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	f003 020f 	and.w	r2, r3, #15
 800fef0:	6879      	ldr	r1, [r7, #4]
 800fef2:	4613      	mov	r3, r2
 800fef4:	009b      	lsls	r3, r3, #2
 800fef6:	4413      	add	r3, r2
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	440b      	add	r3, r1
 800fefc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ff00:	2201      	movs	r2, #1
 800ff02:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ff04:	4b2f      	ldr	r3, [pc, #188]	@ (800ffc4 <USBD_CDC_Init+0x1ec>)
 800ff06:	781b      	ldrb	r3, [r3, #0]
 800ff08:	f003 020f 	and.w	r2, r3, #15
 800ff0c:	6879      	ldr	r1, [r7, #4]
 800ff0e:	4613      	mov	r3, r2
 800ff10:	009b      	lsls	r3, r3, #2
 800ff12:	4413      	add	r3, r2
 800ff14:	009b      	lsls	r3, r3, #2
 800ff16:	440b      	add	r3, r1
 800ff18:	3326      	adds	r3, #38	@ 0x26
 800ff1a:	2210      	movs	r2, #16
 800ff1c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ff1e:	4b29      	ldr	r3, [pc, #164]	@ (800ffc4 <USBD_CDC_Init+0x1ec>)
 800ff20:	7819      	ldrb	r1, [r3, #0]
 800ff22:	2308      	movs	r3, #8
 800ff24:	2203      	movs	r2, #3
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f002 fb19 	bl	801255e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ff2c:	4b25      	ldr	r3, [pc, #148]	@ (800ffc4 <USBD_CDC_Init+0x1ec>)
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	f003 020f 	and.w	r2, r3, #15
 800ff34:	6879      	ldr	r1, [r7, #4]
 800ff36:	4613      	mov	r3, r2
 800ff38:	009b      	lsls	r3, r3, #2
 800ff3a:	4413      	add	r3, r2
 800ff3c:	009b      	lsls	r3, r3, #2
 800ff3e:	440b      	add	r3, r1
 800ff40:	3324      	adds	r3, #36	@ 0x24
 800ff42:	2201      	movs	r2, #1
 800ff44:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff54:	687a      	ldr	r2, [r7, #4]
 800ff56:	33b0      	adds	r3, #176	@ 0xb0
 800ff58:	009b      	lsls	r3, r3, #2
 800ff5a:	4413      	add	r3, r2
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2200      	movs	r2, #0
 800ff66:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d101      	bne.n	800ff80 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ff7c:	2302      	movs	r3, #2
 800ff7e:	e018      	b.n	800ffb2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	7c1b      	ldrb	r3, [r3, #16]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d10a      	bne.n	800ff9e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ff88:	4b0d      	ldr	r3, [pc, #52]	@ (800ffc0 <USBD_CDC_Init+0x1e8>)
 800ff8a:	7819      	ldrb	r1, [r3, #0]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ff92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f002 fbd0 	bl	801273c <USBD_LL_PrepareReceive>
 800ff9c:	e008      	b.n	800ffb0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ff9e:	4b08      	ldr	r3, [pc, #32]	@ (800ffc0 <USBD_CDC_Init+0x1e8>)
 800ffa0:	7819      	ldrb	r1, [r3, #0]
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ffa8:	2340      	movs	r3, #64	@ 0x40
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f002 fbc6 	bl	801273c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ffb0:	2300      	movs	r3, #0
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop
 800ffbc:	24000097 	.word	0x24000097
 800ffc0:	24000098 	.word	0x24000098
 800ffc4:	24000099 	.word	0x24000099

0800ffc8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	460b      	mov	r3, r1
 800ffd2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ffd4:	4b3a      	ldr	r3, [pc, #232]	@ (80100c0 <USBD_CDC_DeInit+0xf8>)
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	4619      	mov	r1, r3
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f002 fae5 	bl	80125aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ffe0:	4b37      	ldr	r3, [pc, #220]	@ (80100c0 <USBD_CDC_DeInit+0xf8>)
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	f003 020f 	and.w	r2, r3, #15
 800ffe8:	6879      	ldr	r1, [r7, #4]
 800ffea:	4613      	mov	r3, r2
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	4413      	add	r3, r2
 800fff0:	009b      	lsls	r3, r3, #2
 800fff2:	440b      	add	r3, r1
 800fff4:	3324      	adds	r3, #36	@ 0x24
 800fff6:	2200      	movs	r2, #0
 800fff8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fffa:	4b32      	ldr	r3, [pc, #200]	@ (80100c4 <USBD_CDC_DeInit+0xfc>)
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	4619      	mov	r1, r3
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f002 fad2 	bl	80125aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010006:	4b2f      	ldr	r3, [pc, #188]	@ (80100c4 <USBD_CDC_DeInit+0xfc>)
 8010008:	781b      	ldrb	r3, [r3, #0]
 801000a:	f003 020f 	and.w	r2, r3, #15
 801000e:	6879      	ldr	r1, [r7, #4]
 8010010:	4613      	mov	r3, r2
 8010012:	009b      	lsls	r3, r3, #2
 8010014:	4413      	add	r3, r2
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	440b      	add	r3, r1
 801001a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801001e:	2200      	movs	r2, #0
 8010020:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010022:	4b29      	ldr	r3, [pc, #164]	@ (80100c8 <USBD_CDC_DeInit+0x100>)
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	4619      	mov	r1, r3
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f002 fabe 	bl	80125aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801002e:	4b26      	ldr	r3, [pc, #152]	@ (80100c8 <USBD_CDC_DeInit+0x100>)
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	f003 020f 	and.w	r2, r3, #15
 8010036:	6879      	ldr	r1, [r7, #4]
 8010038:	4613      	mov	r3, r2
 801003a:	009b      	lsls	r3, r3, #2
 801003c:	4413      	add	r3, r2
 801003e:	009b      	lsls	r3, r3, #2
 8010040:	440b      	add	r3, r1
 8010042:	3324      	adds	r3, #36	@ 0x24
 8010044:	2200      	movs	r2, #0
 8010046:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010048:	4b1f      	ldr	r3, [pc, #124]	@ (80100c8 <USBD_CDC_DeInit+0x100>)
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	f003 020f 	and.w	r2, r3, #15
 8010050:	6879      	ldr	r1, [r7, #4]
 8010052:	4613      	mov	r3, r2
 8010054:	009b      	lsls	r3, r3, #2
 8010056:	4413      	add	r3, r2
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	440b      	add	r3, r1
 801005c:	3326      	adds	r3, #38	@ 0x26
 801005e:	2200      	movs	r2, #0
 8010060:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	32b0      	adds	r2, #176	@ 0xb0
 801006c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d01f      	beq.n	80100b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801007a:	687a      	ldr	r2, [r7, #4]
 801007c:	33b0      	adds	r3, #176	@ 0xb0
 801007e:	009b      	lsls	r3, r3, #2
 8010080:	4413      	add	r3, r2
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	685b      	ldr	r3, [r3, #4]
 8010086:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	32b0      	adds	r2, #176	@ 0xb0
 8010092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010096:	4618      	mov	r0, r3
 8010098:	f002 fb92 	bl	80127c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	32b0      	adds	r2, #176	@ 0xb0
 80100a6:	2100      	movs	r1, #0
 80100a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2200      	movs	r2, #0
 80100b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80100b4:	2300      	movs	r3, #0
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3708      	adds	r7, #8
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	24000097 	.word	0x24000097
 80100c4:	24000098 	.word	0x24000098
 80100c8:	24000099 	.word	0x24000099

080100cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b086      	sub	sp, #24
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	32b0      	adds	r2, #176	@ 0xb0
 80100e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80100e6:	2300      	movs	r3, #0
 80100e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80100ea:	2300      	movs	r3, #0
 80100ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80100ee:	2300      	movs	r3, #0
 80100f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d101      	bne.n	80100fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80100f8:	2303      	movs	r3, #3
 80100fa:	e0bf      	b.n	801027c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010104:	2b00      	cmp	r3, #0
 8010106:	d050      	beq.n	80101aa <USBD_CDC_Setup+0xde>
 8010108:	2b20      	cmp	r3, #32
 801010a:	f040 80af 	bne.w	801026c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	88db      	ldrh	r3, [r3, #6]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d03a      	beq.n	801018c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	b25b      	sxtb	r3, r3
 801011c:	2b00      	cmp	r3, #0
 801011e:	da1b      	bge.n	8010158 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010126:	687a      	ldr	r2, [r7, #4]
 8010128:	33b0      	adds	r3, #176	@ 0xb0
 801012a:	009b      	lsls	r3, r3, #2
 801012c:	4413      	add	r3, r2
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	689b      	ldr	r3, [r3, #8]
 8010132:	683a      	ldr	r2, [r7, #0]
 8010134:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010136:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010138:	683a      	ldr	r2, [r7, #0]
 801013a:	88d2      	ldrh	r2, [r2, #6]
 801013c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	88db      	ldrh	r3, [r3, #6]
 8010142:	2b07      	cmp	r3, #7
 8010144:	bf28      	it	cs
 8010146:	2307      	movcs	r3, #7
 8010148:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	89fa      	ldrh	r2, [r7, #14]
 801014e:	4619      	mov	r1, r3
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f001 fdbd 	bl	8011cd0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010156:	e090      	b.n	801027a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	785a      	ldrb	r2, [r3, #1]
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	88db      	ldrh	r3, [r3, #6]
 8010166:	2b3f      	cmp	r3, #63	@ 0x3f
 8010168:	d803      	bhi.n	8010172 <USBD_CDC_Setup+0xa6>
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	88db      	ldrh	r3, [r3, #6]
 801016e:	b2da      	uxtb	r2, r3
 8010170:	e000      	b.n	8010174 <USBD_CDC_Setup+0xa8>
 8010172:	2240      	movs	r2, #64	@ 0x40
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801017a:	6939      	ldr	r1, [r7, #16]
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010182:	461a      	mov	r2, r3
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f001 fdcf 	bl	8011d28 <USBD_CtlPrepareRx>
      break;
 801018a:	e076      	b.n	801027a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010192:	687a      	ldr	r2, [r7, #4]
 8010194:	33b0      	adds	r3, #176	@ 0xb0
 8010196:	009b      	lsls	r3, r3, #2
 8010198:	4413      	add	r3, r2
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	689b      	ldr	r3, [r3, #8]
 801019e:	683a      	ldr	r2, [r7, #0]
 80101a0:	7850      	ldrb	r0, [r2, #1]
 80101a2:	2200      	movs	r2, #0
 80101a4:	6839      	ldr	r1, [r7, #0]
 80101a6:	4798      	blx	r3
      break;
 80101a8:	e067      	b.n	801027a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	785b      	ldrb	r3, [r3, #1]
 80101ae:	2b0b      	cmp	r3, #11
 80101b0:	d851      	bhi.n	8010256 <USBD_CDC_Setup+0x18a>
 80101b2:	a201      	add	r2, pc, #4	@ (adr r2, 80101b8 <USBD_CDC_Setup+0xec>)
 80101b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b8:	080101e9 	.word	0x080101e9
 80101bc:	08010265 	.word	0x08010265
 80101c0:	08010257 	.word	0x08010257
 80101c4:	08010257 	.word	0x08010257
 80101c8:	08010257 	.word	0x08010257
 80101cc:	08010257 	.word	0x08010257
 80101d0:	08010257 	.word	0x08010257
 80101d4:	08010257 	.word	0x08010257
 80101d8:	08010257 	.word	0x08010257
 80101dc:	08010257 	.word	0x08010257
 80101e0:	08010213 	.word	0x08010213
 80101e4:	0801023d 	.word	0x0801023d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	2b03      	cmp	r3, #3
 80101f2:	d107      	bne.n	8010204 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80101f4:	f107 030a 	add.w	r3, r7, #10
 80101f8:	2202      	movs	r2, #2
 80101fa:	4619      	mov	r1, r3
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	f001 fd67 	bl	8011cd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010202:	e032      	b.n	801026a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010204:	6839      	ldr	r1, [r7, #0]
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f001 fce5 	bl	8011bd6 <USBD_CtlError>
            ret = USBD_FAIL;
 801020c:	2303      	movs	r3, #3
 801020e:	75fb      	strb	r3, [r7, #23]
          break;
 8010210:	e02b      	b.n	801026a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010218:	b2db      	uxtb	r3, r3
 801021a:	2b03      	cmp	r3, #3
 801021c:	d107      	bne.n	801022e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801021e:	f107 030d 	add.w	r3, r7, #13
 8010222:	2201      	movs	r2, #1
 8010224:	4619      	mov	r1, r3
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f001 fd52 	bl	8011cd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801022c:	e01d      	b.n	801026a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801022e:	6839      	ldr	r1, [r7, #0]
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f001 fcd0 	bl	8011bd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010236:	2303      	movs	r3, #3
 8010238:	75fb      	strb	r3, [r7, #23]
          break;
 801023a:	e016      	b.n	801026a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010242:	b2db      	uxtb	r3, r3
 8010244:	2b03      	cmp	r3, #3
 8010246:	d00f      	beq.n	8010268 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010248:	6839      	ldr	r1, [r7, #0]
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f001 fcc3 	bl	8011bd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010250:	2303      	movs	r3, #3
 8010252:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010254:	e008      	b.n	8010268 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010256:	6839      	ldr	r1, [r7, #0]
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f001 fcbc 	bl	8011bd6 <USBD_CtlError>
          ret = USBD_FAIL;
 801025e:	2303      	movs	r3, #3
 8010260:	75fb      	strb	r3, [r7, #23]
          break;
 8010262:	e002      	b.n	801026a <USBD_CDC_Setup+0x19e>
          break;
 8010264:	bf00      	nop
 8010266:	e008      	b.n	801027a <USBD_CDC_Setup+0x1ae>
          break;
 8010268:	bf00      	nop
      }
      break;
 801026a:	e006      	b.n	801027a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801026c:	6839      	ldr	r1, [r7, #0]
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f001 fcb1 	bl	8011bd6 <USBD_CtlError>
      ret = USBD_FAIL;
 8010274:	2303      	movs	r3, #3
 8010276:	75fb      	strb	r3, [r7, #23]
      break;
 8010278:	bf00      	nop
  }

  return (uint8_t)ret;
 801027a:	7dfb      	ldrb	r3, [r7, #23]
}
 801027c:	4618      	mov	r0, r3
 801027e:	3718      	adds	r7, #24
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	460b      	mov	r3, r1
 801028e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010296:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	32b0      	adds	r2, #176	@ 0xb0
 80102a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d101      	bne.n	80102ae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80102aa:	2303      	movs	r3, #3
 80102ac:	e065      	b.n	801037a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	32b0      	adds	r2, #176	@ 0xb0
 80102b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80102be:	78fb      	ldrb	r3, [r7, #3]
 80102c0:	f003 020f 	and.w	r2, r3, #15
 80102c4:	6879      	ldr	r1, [r7, #4]
 80102c6:	4613      	mov	r3, r2
 80102c8:	009b      	lsls	r3, r3, #2
 80102ca:	4413      	add	r3, r2
 80102cc:	009b      	lsls	r3, r3, #2
 80102ce:	440b      	add	r3, r1
 80102d0:	3318      	adds	r3, #24
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d02f      	beq.n	8010338 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80102d8:	78fb      	ldrb	r3, [r7, #3]
 80102da:	f003 020f 	and.w	r2, r3, #15
 80102de:	6879      	ldr	r1, [r7, #4]
 80102e0:	4613      	mov	r3, r2
 80102e2:	009b      	lsls	r3, r3, #2
 80102e4:	4413      	add	r3, r2
 80102e6:	009b      	lsls	r3, r3, #2
 80102e8:	440b      	add	r3, r1
 80102ea:	3318      	adds	r3, #24
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	78fb      	ldrb	r3, [r7, #3]
 80102f0:	f003 010f 	and.w	r1, r3, #15
 80102f4:	68f8      	ldr	r0, [r7, #12]
 80102f6:	460b      	mov	r3, r1
 80102f8:	00db      	lsls	r3, r3, #3
 80102fa:	440b      	add	r3, r1
 80102fc:	009b      	lsls	r3, r3, #2
 80102fe:	4403      	add	r3, r0
 8010300:	331c      	adds	r3, #28
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	fbb2 f1f3 	udiv	r1, r2, r3
 8010308:	fb01 f303 	mul.w	r3, r1, r3
 801030c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801030e:	2b00      	cmp	r3, #0
 8010310:	d112      	bne.n	8010338 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010312:	78fb      	ldrb	r3, [r7, #3]
 8010314:	f003 020f 	and.w	r2, r3, #15
 8010318:	6879      	ldr	r1, [r7, #4]
 801031a:	4613      	mov	r3, r2
 801031c:	009b      	lsls	r3, r3, #2
 801031e:	4413      	add	r3, r2
 8010320:	009b      	lsls	r3, r3, #2
 8010322:	440b      	add	r3, r1
 8010324:	3318      	adds	r3, #24
 8010326:	2200      	movs	r2, #0
 8010328:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801032a:	78f9      	ldrb	r1, [r7, #3]
 801032c:	2300      	movs	r3, #0
 801032e:	2200      	movs	r2, #0
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f002 f9e2 	bl	80126fa <USBD_LL_Transmit>
 8010336:	e01f      	b.n	8010378 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	2200      	movs	r2, #0
 801033c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010346:	687a      	ldr	r2, [r7, #4]
 8010348:	33b0      	adds	r3, #176	@ 0xb0
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	4413      	add	r3, r2
 801034e:	685b      	ldr	r3, [r3, #4]
 8010350:	691b      	ldr	r3, [r3, #16]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d010      	beq.n	8010378 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801035c:	687a      	ldr	r2, [r7, #4]
 801035e:	33b0      	adds	r3, #176	@ 0xb0
 8010360:	009b      	lsls	r3, r3, #2
 8010362:	4413      	add	r3, r2
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	691b      	ldr	r3, [r3, #16]
 8010368:	68ba      	ldr	r2, [r7, #8]
 801036a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801036e:	68ba      	ldr	r2, [r7, #8]
 8010370:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010374:	78fa      	ldrb	r2, [r7, #3]
 8010376:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010378:	2300      	movs	r3, #0
}
 801037a:	4618      	mov	r0, r3
 801037c:	3710      	adds	r7, #16
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}

08010382 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010382:	b580      	push	{r7, lr}
 8010384:	b084      	sub	sp, #16
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
 801038a:	460b      	mov	r3, r1
 801038c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	32b0      	adds	r2, #176	@ 0xb0
 8010398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801039c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	32b0      	adds	r2, #176	@ 0xb0
 80103a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d101      	bne.n	80103b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80103b0:	2303      	movs	r3, #3
 80103b2:	e01a      	b.n	80103ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80103b4:	78fb      	ldrb	r3, [r7, #3]
 80103b6:	4619      	mov	r1, r3
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f002 f9e0 	bl	801277e <USBD_LL_GetRxDataSize>
 80103be:	4602      	mov	r2, r0
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80103cc:	687a      	ldr	r2, [r7, #4]
 80103ce:	33b0      	adds	r3, #176	@ 0xb0
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	4413      	add	r3, r2
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	68db      	ldr	r3, [r3, #12]
 80103d8:	68fa      	ldr	r2, [r7, #12]
 80103da:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80103de:	68fa      	ldr	r2, [r7, #12]
 80103e0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80103e4:	4611      	mov	r1, r2
 80103e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80103e8:	2300      	movs	r3, #0
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3710      	adds	r7, #16
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}

080103f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80103f2:	b580      	push	{r7, lr}
 80103f4:	b084      	sub	sp, #16
 80103f6:	af00      	add	r7, sp, #0
 80103f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	32b0      	adds	r2, #176	@ 0xb0
 8010404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010408:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d101      	bne.n	8010414 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010410:	2303      	movs	r3, #3
 8010412:	e024      	b.n	801045e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801041a:	687a      	ldr	r2, [r7, #4]
 801041c:	33b0      	adds	r3, #176	@ 0xb0
 801041e:	009b      	lsls	r3, r3, #2
 8010420:	4413      	add	r3, r2
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d019      	beq.n	801045c <USBD_CDC_EP0_RxReady+0x6a>
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801042e:	2bff      	cmp	r3, #255	@ 0xff
 8010430:	d014      	beq.n	801045c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	33b0      	adds	r3, #176	@ 0xb0
 801043c:	009b      	lsls	r3, r3, #2
 801043e:	4413      	add	r3, r2
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	689b      	ldr	r3, [r3, #8]
 8010444:	68fa      	ldr	r2, [r7, #12]
 8010446:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801044a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801044c:	68fa      	ldr	r2, [r7, #12]
 801044e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010452:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	22ff      	movs	r2, #255	@ 0xff
 8010458:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801045c:	2300      	movs	r3, #0
}
 801045e:	4618      	mov	r0, r3
 8010460:	3710      	adds	r7, #16
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
	...

08010468 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b086      	sub	sp, #24
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010470:	2182      	movs	r1, #130	@ 0x82
 8010472:	4818      	ldr	r0, [pc, #96]	@ (80104d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010474:	f000 fd4f 	bl	8010f16 <USBD_GetEpDesc>
 8010478:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801047a:	2101      	movs	r1, #1
 801047c:	4815      	ldr	r0, [pc, #84]	@ (80104d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801047e:	f000 fd4a 	bl	8010f16 <USBD_GetEpDesc>
 8010482:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010484:	2181      	movs	r1, #129	@ 0x81
 8010486:	4813      	ldr	r0, [pc, #76]	@ (80104d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010488:	f000 fd45 	bl	8010f16 <USBD_GetEpDesc>
 801048c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801048e:	697b      	ldr	r3, [r7, #20]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d002      	beq.n	801049a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	2210      	movs	r2, #16
 8010498:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d006      	beq.n	80104ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	2200      	movs	r2, #0
 80104a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80104a8:	711a      	strb	r2, [r3, #4]
 80104aa:	2200      	movs	r2, #0
 80104ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d006      	beq.n	80104c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	2200      	movs	r2, #0
 80104b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80104bc:	711a      	strb	r2, [r3, #4]
 80104be:	2200      	movs	r2, #0
 80104c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2243      	movs	r2, #67	@ 0x43
 80104c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80104c8:	4b02      	ldr	r3, [pc, #8]	@ (80104d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3718      	adds	r7, #24
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	24000054 	.word	0x24000054

080104d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b086      	sub	sp, #24
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80104e0:	2182      	movs	r1, #130	@ 0x82
 80104e2:	4818      	ldr	r0, [pc, #96]	@ (8010544 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80104e4:	f000 fd17 	bl	8010f16 <USBD_GetEpDesc>
 80104e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80104ea:	2101      	movs	r1, #1
 80104ec:	4815      	ldr	r0, [pc, #84]	@ (8010544 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80104ee:	f000 fd12 	bl	8010f16 <USBD_GetEpDesc>
 80104f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80104f4:	2181      	movs	r1, #129	@ 0x81
 80104f6:	4813      	ldr	r0, [pc, #76]	@ (8010544 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80104f8:	f000 fd0d 	bl	8010f16 <USBD_GetEpDesc>
 80104fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d002      	beq.n	801050a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	2210      	movs	r2, #16
 8010508:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d006      	beq.n	801051e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	2200      	movs	r2, #0
 8010514:	711a      	strb	r2, [r3, #4]
 8010516:	2200      	movs	r2, #0
 8010518:	f042 0202 	orr.w	r2, r2, #2
 801051c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d006      	beq.n	8010532 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	2200      	movs	r2, #0
 8010528:	711a      	strb	r2, [r3, #4]
 801052a:	2200      	movs	r2, #0
 801052c:	f042 0202 	orr.w	r2, r2, #2
 8010530:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2243      	movs	r2, #67	@ 0x43
 8010536:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010538:	4b02      	ldr	r3, [pc, #8]	@ (8010544 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801053a:	4618      	mov	r0, r3
 801053c:	3718      	adds	r7, #24
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	24000054 	.word	0x24000054

08010548 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b086      	sub	sp, #24
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010550:	2182      	movs	r1, #130	@ 0x82
 8010552:	4818      	ldr	r0, [pc, #96]	@ (80105b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010554:	f000 fcdf 	bl	8010f16 <USBD_GetEpDesc>
 8010558:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801055a:	2101      	movs	r1, #1
 801055c:	4815      	ldr	r0, [pc, #84]	@ (80105b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801055e:	f000 fcda 	bl	8010f16 <USBD_GetEpDesc>
 8010562:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010564:	2181      	movs	r1, #129	@ 0x81
 8010566:	4813      	ldr	r0, [pc, #76]	@ (80105b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010568:	f000 fcd5 	bl	8010f16 <USBD_GetEpDesc>
 801056c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d002      	beq.n	801057a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	2210      	movs	r2, #16
 8010578:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d006      	beq.n	801058e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	2200      	movs	r2, #0
 8010584:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010588:	711a      	strb	r2, [r3, #4]
 801058a:	2200      	movs	r2, #0
 801058c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d006      	beq.n	80105a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2200      	movs	r2, #0
 8010598:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801059c:	711a      	strb	r2, [r3, #4]
 801059e:	2200      	movs	r2, #0
 80105a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2243      	movs	r2, #67	@ 0x43
 80105a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80105a8:	4b02      	ldr	r3, [pc, #8]	@ (80105b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3718      	adds	r7, #24
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}
 80105b2:	bf00      	nop
 80105b4:	24000054 	.word	0x24000054

080105b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80105b8:	b480      	push	{r7}
 80105ba:	b083      	sub	sp, #12
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	220a      	movs	r2, #10
 80105c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80105c6:	4b03      	ldr	r3, [pc, #12]	@ (80105d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	370c      	adds	r7, #12
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr
 80105d4:	24000010 	.word	0x24000010

080105d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80105d8:	b480      	push	{r7}
 80105da:	b083      	sub	sp, #12
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d101      	bne.n	80105ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80105e8:	2303      	movs	r3, #3
 80105ea:	e009      	b.n	8010600 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80105f2:	687a      	ldr	r2, [r7, #4]
 80105f4:	33b0      	adds	r3, #176	@ 0xb0
 80105f6:	009b      	lsls	r3, r3, #2
 80105f8:	4413      	add	r3, r2
 80105fa:	683a      	ldr	r2, [r7, #0]
 80105fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80105fe:	2300      	movs	r3, #0
}
 8010600:	4618      	mov	r0, r3
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801060c:	b480      	push	{r7}
 801060e:	b087      	sub	sp, #28
 8010610:	af00      	add	r7, sp, #0
 8010612:	60f8      	str	r0, [r7, #12]
 8010614:	60b9      	str	r1, [r7, #8]
 8010616:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	32b0      	adds	r2, #176	@ 0xb0
 8010622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010626:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d101      	bne.n	8010632 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801062e:	2303      	movs	r3, #3
 8010630:	e008      	b.n	8010644 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	68ba      	ldr	r2, [r7, #8]
 8010636:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	687a      	ldr	r2, [r7, #4]
 801063e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010642:	2300      	movs	r3, #0
}
 8010644:	4618      	mov	r0, r3
 8010646:	371c      	adds	r7, #28
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr

08010650 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010650:	b480      	push	{r7}
 8010652:	b085      	sub	sp, #20
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	32b0      	adds	r2, #176	@ 0xb0
 8010664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010668:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d101      	bne.n	8010674 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010670:	2303      	movs	r3, #3
 8010672:	e004      	b.n	801067e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	683a      	ldr	r2, [r7, #0]
 8010678:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801067c:	2300      	movs	r3, #0
}
 801067e:	4618      	mov	r0, r3
 8010680:	3714      	adds	r7, #20
 8010682:	46bd      	mov	sp, r7
 8010684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010688:	4770      	bx	lr
	...

0801068c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b084      	sub	sp, #16
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	32b0      	adds	r2, #176	@ 0xb0
 801069e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106a2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80106a4:	2301      	movs	r3, #1
 80106a6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d101      	bne.n	80106b2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80106ae:	2303      	movs	r3, #3
 80106b0:	e025      	b.n	80106fe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d11f      	bne.n	80106fc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	2201      	movs	r2, #1
 80106c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80106c4:	4b10      	ldr	r3, [pc, #64]	@ (8010708 <USBD_CDC_TransmitPacket+0x7c>)
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	f003 020f 	and.w	r2, r3, #15
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	4613      	mov	r3, r2
 80106d6:	009b      	lsls	r3, r3, #2
 80106d8:	4413      	add	r3, r2
 80106da:	009b      	lsls	r3, r3, #2
 80106dc:	4403      	add	r3, r0
 80106de:	3318      	adds	r3, #24
 80106e0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80106e2:	4b09      	ldr	r3, [pc, #36]	@ (8010708 <USBD_CDC_TransmitPacket+0x7c>)
 80106e4:	7819      	ldrb	r1, [r3, #0]
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f002 f801 	bl	80126fa <USBD_LL_Transmit>

    ret = USBD_OK;
 80106f8:	2300      	movs	r3, #0
 80106fa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80106fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3710      	adds	r7, #16
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	24000097 	.word	0x24000097

0801070c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	32b0      	adds	r2, #176	@ 0xb0
 801071e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010722:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	32b0      	adds	r2, #176	@ 0xb0
 801072e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d101      	bne.n	801073a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010736:	2303      	movs	r3, #3
 8010738:	e018      	b.n	801076c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	7c1b      	ldrb	r3, [r3, #16]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d10a      	bne.n	8010758 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010742:	4b0c      	ldr	r3, [pc, #48]	@ (8010774 <USBD_CDC_ReceivePacket+0x68>)
 8010744:	7819      	ldrb	r1, [r3, #0]
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801074c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f001 fff3 	bl	801273c <USBD_LL_PrepareReceive>
 8010756:	e008      	b.n	801076a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010758:	4b06      	ldr	r3, [pc, #24]	@ (8010774 <USBD_CDC_ReceivePacket+0x68>)
 801075a:	7819      	ldrb	r1, [r3, #0]
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010762:	2340      	movs	r3, #64	@ 0x40
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f001 ffe9 	bl	801273c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801076a:	2300      	movs	r3, #0
}
 801076c:	4618      	mov	r0, r3
 801076e:	3710      	adds	r7, #16
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}
 8010774:	24000098 	.word	0x24000098

08010778 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b086      	sub	sp, #24
 801077c:	af00      	add	r7, sp, #0
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	4613      	mov	r3, r2
 8010784:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d101      	bne.n	8010790 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801078c:	2303      	movs	r3, #3
 801078e:	e01f      	b.n	80107d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2200      	movs	r2, #0
 8010794:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2200      	movs	r2, #0
 801079c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	2200      	movs	r2, #0
 80107a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d003      	beq.n	80107b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	68ba      	ldr	r2, [r7, #8]
 80107b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2201      	movs	r2, #1
 80107ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	79fa      	ldrb	r2, [r7, #7]
 80107c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80107c4:	68f8      	ldr	r0, [r7, #12]
 80107c6:	f001 fe5d 	bl	8012484 <USBD_LL_Init>
 80107ca:	4603      	mov	r3, r0
 80107cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80107ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	3718      	adds	r7, #24
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}

080107d8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b084      	sub	sp, #16
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80107e2:	2300      	movs	r3, #0
 80107e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d101      	bne.n	80107f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80107ec:	2303      	movs	r3, #3
 80107ee:	e025      	b.n	801083c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	683a      	ldr	r2, [r7, #0]
 80107f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	32ae      	adds	r2, #174	@ 0xae
 8010802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010808:	2b00      	cmp	r3, #0
 801080a:	d00f      	beq.n	801082c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	32ae      	adds	r2, #174	@ 0xae
 8010816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801081a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801081c:	f107 020e 	add.w	r2, r7, #14
 8010820:	4610      	mov	r0, r2
 8010822:	4798      	blx	r3
 8010824:	4602      	mov	r2, r0
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010832:	1c5a      	adds	r2, r3, #1
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801083a:	2300      	movs	r3, #0
}
 801083c:	4618      	mov	r0, r3
 801083e:	3710      	adds	r7, #16
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f001 fe6b 	bl	8012528 <USBD_LL_Start>
 8010852:	4603      	mov	r3, r0
}
 8010854:	4618      	mov	r0, r3
 8010856:	3708      	adds	r7, #8
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801085c:	b480      	push	{r7}
 801085e:	b083      	sub	sp, #12
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010864:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010866:	4618      	mov	r0, r3
 8010868:	370c      	adds	r7, #12
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr

08010872 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010872:	b580      	push	{r7, lr}
 8010874:	b084      	sub	sp, #16
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
 801087a:	460b      	mov	r3, r1
 801087c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801087e:	2300      	movs	r3, #0
 8010880:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010888:	2b00      	cmp	r3, #0
 801088a:	d009      	beq.n	80108a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	78fa      	ldrb	r2, [r7, #3]
 8010896:	4611      	mov	r1, r2
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	4798      	blx	r3
 801089c:	4603      	mov	r3, r0
 801089e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80108a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3710      	adds	r7, #16
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}

080108aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80108aa:	b580      	push	{r7, lr}
 80108ac:	b084      	sub	sp, #16
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
 80108b2:	460b      	mov	r3, r1
 80108b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80108b6:	2300      	movs	r3, #0
 80108b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108c0:	685b      	ldr	r3, [r3, #4]
 80108c2:	78fa      	ldrb	r2, [r7, #3]
 80108c4:	4611      	mov	r1, r2
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	4798      	blx	r3
 80108ca:	4603      	mov	r3, r0
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d001      	beq.n	80108d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80108d0:	2303      	movs	r3, #3
 80108d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80108d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}

080108de <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80108de:	b580      	push	{r7, lr}
 80108e0:	b084      	sub	sp, #16
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
 80108e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80108ee:	6839      	ldr	r1, [r7, #0]
 80108f0:	4618      	mov	r0, r3
 80108f2:	f001 f936 	bl	8011b62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2201      	movs	r2, #1
 80108fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010904:	461a      	mov	r2, r3
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010912:	f003 031f 	and.w	r3, r3, #31
 8010916:	2b02      	cmp	r3, #2
 8010918:	d01a      	beq.n	8010950 <USBD_LL_SetupStage+0x72>
 801091a:	2b02      	cmp	r3, #2
 801091c:	d822      	bhi.n	8010964 <USBD_LL_SetupStage+0x86>
 801091e:	2b00      	cmp	r3, #0
 8010920:	d002      	beq.n	8010928 <USBD_LL_SetupStage+0x4a>
 8010922:	2b01      	cmp	r3, #1
 8010924:	d00a      	beq.n	801093c <USBD_LL_SetupStage+0x5e>
 8010926:	e01d      	b.n	8010964 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801092e:	4619      	mov	r1, r3
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f000 fb63 	bl	8010ffc <USBD_StdDevReq>
 8010936:	4603      	mov	r3, r0
 8010938:	73fb      	strb	r3, [r7, #15]
      break;
 801093a:	e020      	b.n	801097e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010942:	4619      	mov	r1, r3
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f000 fbcb 	bl	80110e0 <USBD_StdItfReq>
 801094a:	4603      	mov	r3, r0
 801094c:	73fb      	strb	r3, [r7, #15]
      break;
 801094e:	e016      	b.n	801097e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010956:	4619      	mov	r1, r3
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f000 fc2d 	bl	80111b8 <USBD_StdEPReq>
 801095e:	4603      	mov	r3, r0
 8010960:	73fb      	strb	r3, [r7, #15]
      break;
 8010962:	e00c      	b.n	801097e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801096a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801096e:	b2db      	uxtb	r3, r3
 8010970:	4619      	mov	r1, r3
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f001 fe38 	bl	80125e8 <USBD_LL_StallEP>
 8010978:	4603      	mov	r3, r0
 801097a:	73fb      	strb	r3, [r7, #15]
      break;
 801097c:	bf00      	nop
  }

  return ret;
 801097e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010980:	4618      	mov	r0, r3
 8010982:	3710      	adds	r7, #16
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b086      	sub	sp, #24
 801098c:	af00      	add	r7, sp, #0
 801098e:	60f8      	str	r0, [r7, #12]
 8010990:	460b      	mov	r3, r1
 8010992:	607a      	str	r2, [r7, #4]
 8010994:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010996:	2300      	movs	r3, #0
 8010998:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801099a:	7afb      	ldrb	r3, [r7, #11]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d16e      	bne.n	8010a7e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80109a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80109ae:	2b03      	cmp	r3, #3
 80109b0:	f040 8098 	bne.w	8010ae4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	689a      	ldr	r2, [r3, #8]
 80109b8:	693b      	ldr	r3, [r7, #16]
 80109ba:	68db      	ldr	r3, [r3, #12]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d913      	bls.n	80109e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	689a      	ldr	r2, [r3, #8]
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	68db      	ldr	r3, [r3, #12]
 80109c8:	1ad2      	subs	r2, r2, r3
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	68da      	ldr	r2, [r3, #12]
 80109d2:	693b      	ldr	r3, [r7, #16]
 80109d4:	689b      	ldr	r3, [r3, #8]
 80109d6:	4293      	cmp	r3, r2
 80109d8:	bf28      	it	cs
 80109da:	4613      	movcs	r3, r2
 80109dc:	461a      	mov	r2, r3
 80109de:	6879      	ldr	r1, [r7, #4]
 80109e0:	68f8      	ldr	r0, [r7, #12]
 80109e2:	f001 f9be 	bl	8011d62 <USBD_CtlContinueRx>
 80109e6:	e07d      	b.n	8010ae4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80109ee:	f003 031f 	and.w	r3, r3, #31
 80109f2:	2b02      	cmp	r3, #2
 80109f4:	d014      	beq.n	8010a20 <USBD_LL_DataOutStage+0x98>
 80109f6:	2b02      	cmp	r3, #2
 80109f8:	d81d      	bhi.n	8010a36 <USBD_LL_DataOutStage+0xae>
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d002      	beq.n	8010a04 <USBD_LL_DataOutStage+0x7c>
 80109fe:	2b01      	cmp	r3, #1
 8010a00:	d003      	beq.n	8010a0a <USBD_LL_DataOutStage+0x82>
 8010a02:	e018      	b.n	8010a36 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010a04:	2300      	movs	r3, #0
 8010a06:	75bb      	strb	r3, [r7, #22]
            break;
 8010a08:	e018      	b.n	8010a3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010a10:	b2db      	uxtb	r3, r3
 8010a12:	4619      	mov	r1, r3
 8010a14:	68f8      	ldr	r0, [r7, #12]
 8010a16:	f000 fa64 	bl	8010ee2 <USBD_CoreFindIF>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	75bb      	strb	r3, [r7, #22]
            break;
 8010a1e:	e00d      	b.n	8010a3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	4619      	mov	r1, r3
 8010a2a:	68f8      	ldr	r0, [r7, #12]
 8010a2c:	f000 fa66 	bl	8010efc <USBD_CoreFindEP>
 8010a30:	4603      	mov	r3, r0
 8010a32:	75bb      	strb	r3, [r7, #22]
            break;
 8010a34:	e002      	b.n	8010a3c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010a36:	2300      	movs	r3, #0
 8010a38:	75bb      	strb	r3, [r7, #22]
            break;
 8010a3a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010a3c:	7dbb      	ldrb	r3, [r7, #22]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d119      	bne.n	8010a76 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	2b03      	cmp	r3, #3
 8010a4c:	d113      	bne.n	8010a76 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010a4e:	7dba      	ldrb	r2, [r7, #22]
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	32ae      	adds	r2, #174	@ 0xae
 8010a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a58:	691b      	ldr	r3, [r3, #16]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d00b      	beq.n	8010a76 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010a5e:	7dba      	ldrb	r2, [r7, #22]
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010a66:	7dba      	ldrb	r2, [r7, #22]
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	32ae      	adds	r2, #174	@ 0xae
 8010a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a70:	691b      	ldr	r3, [r3, #16]
 8010a72:	68f8      	ldr	r0, [r7, #12]
 8010a74:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010a76:	68f8      	ldr	r0, [r7, #12]
 8010a78:	f001 f984 	bl	8011d84 <USBD_CtlSendStatus>
 8010a7c:	e032      	b.n	8010ae4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010a7e:	7afb      	ldrb	r3, [r7, #11]
 8010a80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	4619      	mov	r1, r3
 8010a88:	68f8      	ldr	r0, [r7, #12]
 8010a8a:	f000 fa37 	bl	8010efc <USBD_CoreFindEP>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010a92:	7dbb      	ldrb	r3, [r7, #22]
 8010a94:	2bff      	cmp	r3, #255	@ 0xff
 8010a96:	d025      	beq.n	8010ae4 <USBD_LL_DataOutStage+0x15c>
 8010a98:	7dbb      	ldrb	r3, [r7, #22]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d122      	bne.n	8010ae4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010aa4:	b2db      	uxtb	r3, r3
 8010aa6:	2b03      	cmp	r3, #3
 8010aa8:	d117      	bne.n	8010ada <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010aaa:	7dba      	ldrb	r2, [r7, #22]
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	32ae      	adds	r2, #174	@ 0xae
 8010ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ab4:	699b      	ldr	r3, [r3, #24]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00f      	beq.n	8010ada <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010aba:	7dba      	ldrb	r2, [r7, #22]
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010ac2:	7dba      	ldrb	r2, [r7, #22]
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	32ae      	adds	r2, #174	@ 0xae
 8010ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010acc:	699b      	ldr	r3, [r3, #24]
 8010ace:	7afa      	ldrb	r2, [r7, #11]
 8010ad0:	4611      	mov	r1, r2
 8010ad2:	68f8      	ldr	r0, [r7, #12]
 8010ad4:	4798      	blx	r3
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010ada:	7dfb      	ldrb	r3, [r7, #23]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d001      	beq.n	8010ae4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010ae0:	7dfb      	ldrb	r3, [r7, #23]
 8010ae2:	e000      	b.n	8010ae6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010ae4:	2300      	movs	r3, #0
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3718      	adds	r7, #24
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}

08010aee <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010aee:	b580      	push	{r7, lr}
 8010af0:	b086      	sub	sp, #24
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	60f8      	str	r0, [r7, #12]
 8010af6:	460b      	mov	r3, r1
 8010af8:	607a      	str	r2, [r7, #4]
 8010afa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010afc:	7afb      	ldrb	r3, [r7, #11]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d16f      	bne.n	8010be2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	3314      	adds	r3, #20
 8010b06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010b0e:	2b02      	cmp	r3, #2
 8010b10:	d15a      	bne.n	8010bc8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	689a      	ldr	r2, [r3, #8]
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d914      	bls.n	8010b48 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	689a      	ldr	r2, [r3, #8]
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	68db      	ldr	r3, [r3, #12]
 8010b26:	1ad2      	subs	r2, r2, r3
 8010b28:	693b      	ldr	r3, [r7, #16]
 8010b2a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010b2c:	693b      	ldr	r3, [r7, #16]
 8010b2e:	689b      	ldr	r3, [r3, #8]
 8010b30:	461a      	mov	r2, r3
 8010b32:	6879      	ldr	r1, [r7, #4]
 8010b34:	68f8      	ldr	r0, [r7, #12]
 8010b36:	f001 f8e6 	bl	8011d06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	2100      	movs	r1, #0
 8010b40:	68f8      	ldr	r0, [r7, #12]
 8010b42:	f001 fdfb 	bl	801273c <USBD_LL_PrepareReceive>
 8010b46:	e03f      	b.n	8010bc8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	68da      	ldr	r2, [r3, #12]
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	689b      	ldr	r3, [r3, #8]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d11c      	bne.n	8010b8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	685a      	ldr	r2, [r3, #4]
 8010b58:	693b      	ldr	r3, [r7, #16]
 8010b5a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d316      	bcc.n	8010b8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	685a      	ldr	r2, [r3, #4]
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d20f      	bcs.n	8010b8e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010b6e:	2200      	movs	r2, #0
 8010b70:	2100      	movs	r1, #0
 8010b72:	68f8      	ldr	r0, [r7, #12]
 8010b74:	f001 f8c7 	bl	8011d06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010b80:	2300      	movs	r3, #0
 8010b82:	2200      	movs	r2, #0
 8010b84:	2100      	movs	r1, #0
 8010b86:	68f8      	ldr	r0, [r7, #12]
 8010b88:	f001 fdd8 	bl	801273c <USBD_LL_PrepareReceive>
 8010b8c:	e01c      	b.n	8010bc8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b94:	b2db      	uxtb	r3, r3
 8010b96:	2b03      	cmp	r3, #3
 8010b98:	d10f      	bne.n	8010bba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ba0:	68db      	ldr	r3, [r3, #12]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d009      	beq.n	8010bba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2200      	movs	r2, #0
 8010baa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010bb4:	68db      	ldr	r3, [r3, #12]
 8010bb6:	68f8      	ldr	r0, [r7, #12]
 8010bb8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010bba:	2180      	movs	r1, #128	@ 0x80
 8010bbc:	68f8      	ldr	r0, [r7, #12]
 8010bbe:	f001 fd13 	bl	80125e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010bc2:	68f8      	ldr	r0, [r7, #12]
 8010bc4:	f001 f8f1 	bl	8011daa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d03a      	beq.n	8010c48 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010bd2:	68f8      	ldr	r0, [r7, #12]
 8010bd4:	f7ff fe42 	bl	801085c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010be0:	e032      	b.n	8010c48 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010be2:	7afb      	ldrb	r3, [r7, #11]
 8010be4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	4619      	mov	r1, r3
 8010bec:	68f8      	ldr	r0, [r7, #12]
 8010bee:	f000 f985 	bl	8010efc <USBD_CoreFindEP>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010bf6:	7dfb      	ldrb	r3, [r7, #23]
 8010bf8:	2bff      	cmp	r3, #255	@ 0xff
 8010bfa:	d025      	beq.n	8010c48 <USBD_LL_DataInStage+0x15a>
 8010bfc:	7dfb      	ldrb	r3, [r7, #23]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d122      	bne.n	8010c48 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c08:	b2db      	uxtb	r3, r3
 8010c0a:	2b03      	cmp	r3, #3
 8010c0c:	d11c      	bne.n	8010c48 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010c0e:	7dfa      	ldrb	r2, [r7, #23]
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	32ae      	adds	r2, #174	@ 0xae
 8010c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c18:	695b      	ldr	r3, [r3, #20]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d014      	beq.n	8010c48 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010c1e:	7dfa      	ldrb	r2, [r7, #23]
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010c26:	7dfa      	ldrb	r2, [r7, #23]
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	32ae      	adds	r2, #174	@ 0xae
 8010c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c30:	695b      	ldr	r3, [r3, #20]
 8010c32:	7afa      	ldrb	r2, [r7, #11]
 8010c34:	4611      	mov	r1, r2
 8010c36:	68f8      	ldr	r0, [r7, #12]
 8010c38:	4798      	blx	r3
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010c3e:	7dbb      	ldrb	r3, [r7, #22]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d001      	beq.n	8010c48 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010c44:	7dbb      	ldrb	r3, [r7, #22]
 8010c46:	e000      	b.n	8010c4a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010c48:	2300      	movs	r3, #0
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3718      	adds	r7, #24
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}

08010c52 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010c52:	b580      	push	{r7, lr}
 8010c54:	b084      	sub	sp, #16
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2201      	movs	r2, #1
 8010c62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2200      	movs	r2, #0
 8010c72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2200      	movs	r2, #0
 8010c78:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2200      	movs	r2, #0
 8010c80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d014      	beq.n	8010cb8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d00e      	beq.n	8010cb8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	687a      	ldr	r2, [r7, #4]
 8010ca4:	6852      	ldr	r2, [r2, #4]
 8010ca6:	b2d2      	uxtb	r2, r2
 8010ca8:	4611      	mov	r1, r2
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	4798      	blx	r3
 8010cae:	4603      	mov	r3, r0
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d001      	beq.n	8010cb8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010cb4:	2303      	movs	r3, #3
 8010cb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010cb8:	2340      	movs	r3, #64	@ 0x40
 8010cba:	2200      	movs	r2, #0
 8010cbc:	2100      	movs	r1, #0
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f001 fc4d 	bl	801255e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2240      	movs	r2, #64	@ 0x40
 8010cd0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010cd4:	2340      	movs	r3, #64	@ 0x40
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	2180      	movs	r1, #128	@ 0x80
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f001 fc3f 	bl	801255e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2240      	movs	r2, #64	@ 0x40
 8010cea:	621a      	str	r2, [r3, #32]

  return ret;
 8010cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3710      	adds	r7, #16
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}

08010cf6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010cf6:	b480      	push	{r7}
 8010cf8:	b083      	sub	sp, #12
 8010cfa:	af00      	add	r7, sp, #0
 8010cfc:	6078      	str	r0, [r7, #4]
 8010cfe:	460b      	mov	r3, r1
 8010d00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	78fa      	ldrb	r2, [r7, #3]
 8010d06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010d08:	2300      	movs	r3, #0
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	370c      	adds	r7, #12
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d14:	4770      	bx	lr

08010d16 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010d16:	b480      	push	{r7}
 8010d18:	b083      	sub	sp, #12
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d24:	b2db      	uxtb	r3, r3
 8010d26:	2b04      	cmp	r3, #4
 8010d28:	d006      	beq.n	8010d38 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d30:	b2da      	uxtb	r2, r3
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2204      	movs	r2, #4
 8010d3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010d40:	2300      	movs	r3, #0
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	370c      	adds	r7, #12
 8010d46:	46bd      	mov	sp, r7
 8010d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4c:	4770      	bx	lr

08010d4e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010d4e:	b480      	push	{r7}
 8010d50:	b083      	sub	sp, #12
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d5c:	b2db      	uxtb	r3, r3
 8010d5e:	2b04      	cmp	r3, #4
 8010d60:	d106      	bne.n	8010d70 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010d68:	b2da      	uxtb	r2, r3
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010d70:	2300      	movs	r3, #0
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	370c      	adds	r7, #12
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr

08010d7e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010d7e:	b580      	push	{r7, lr}
 8010d80:	b082      	sub	sp, #8
 8010d82:	af00      	add	r7, sp, #0
 8010d84:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d8c:	b2db      	uxtb	r3, r3
 8010d8e:	2b03      	cmp	r3, #3
 8010d90:	d110      	bne.n	8010db4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d00b      	beq.n	8010db4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010da2:	69db      	ldr	r3, [r3, #28]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d005      	beq.n	8010db4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010dae:	69db      	ldr	r3, [r3, #28]
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010db4:	2300      	movs	r3, #0
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3708      	adds	r7, #8
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}

08010dbe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010dbe:	b580      	push	{r7, lr}
 8010dc0:	b082      	sub	sp, #8
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]
 8010dc6:	460b      	mov	r3, r1
 8010dc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	32ae      	adds	r2, #174	@ 0xae
 8010dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d101      	bne.n	8010de0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010ddc:	2303      	movs	r3, #3
 8010dde:	e01c      	b.n	8010e1a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010de6:	b2db      	uxtb	r3, r3
 8010de8:	2b03      	cmp	r3, #3
 8010dea:	d115      	bne.n	8010e18 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	32ae      	adds	r2, #174	@ 0xae
 8010df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dfa:	6a1b      	ldr	r3, [r3, #32]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d00b      	beq.n	8010e18 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	32ae      	adds	r2, #174	@ 0xae
 8010e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e0e:	6a1b      	ldr	r3, [r3, #32]
 8010e10:	78fa      	ldrb	r2, [r7, #3]
 8010e12:	4611      	mov	r1, r2
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010e18:	2300      	movs	r3, #0
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}

08010e22 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010e22:	b580      	push	{r7, lr}
 8010e24:	b082      	sub	sp, #8
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	6078      	str	r0, [r7, #4]
 8010e2a:	460b      	mov	r3, r1
 8010e2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	32ae      	adds	r2, #174	@ 0xae
 8010e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d101      	bne.n	8010e44 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010e40:	2303      	movs	r3, #3
 8010e42:	e01c      	b.n	8010e7e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e4a:	b2db      	uxtb	r3, r3
 8010e4c:	2b03      	cmp	r3, #3
 8010e4e:	d115      	bne.n	8010e7c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	32ae      	adds	r2, #174	@ 0xae
 8010e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d00b      	beq.n	8010e7c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	32ae      	adds	r2, #174	@ 0xae
 8010e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e74:	78fa      	ldrb	r2, [r7, #3]
 8010e76:	4611      	mov	r1, r2
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010e7c:	2300      	movs	r3, #0
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3708      	adds	r7, #8
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}

08010e86 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010e86:	b480      	push	{r7}
 8010e88:	b083      	sub	sp, #12
 8010e8a:	af00      	add	r7, sp, #0
 8010e8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010e8e:	2300      	movs	r3, #0
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	370c      	adds	r7, #12
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr

08010e9c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2201      	movs	r2, #1
 8010eac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00e      	beq.n	8010ed8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	6852      	ldr	r2, [r2, #4]
 8010ec6:	b2d2      	uxtb	r2, r2
 8010ec8:	4611      	mov	r1, r2
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	4798      	blx	r3
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d001      	beq.n	8010ed8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010ed4:	2303      	movs	r3, #3
 8010ed6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3710      	adds	r7, #16
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}

08010ee2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010ee2:	b480      	push	{r7}
 8010ee4:	b083      	sub	sp, #12
 8010ee6:	af00      	add	r7, sp, #0
 8010ee8:	6078      	str	r0, [r7, #4]
 8010eea:	460b      	mov	r3, r1
 8010eec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010eee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	370c      	adds	r7, #12
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efa:	4770      	bx	lr

08010efc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
 8010f04:	460b      	mov	r3, r1
 8010f06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010f08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	370c      	adds	r7, #12
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr

08010f16 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010f16:	b580      	push	{r7, lr}
 8010f18:	b086      	sub	sp, #24
 8010f1a:	af00      	add	r7, sp, #0
 8010f1c:	6078      	str	r0, [r7, #4]
 8010f1e:	460b      	mov	r3, r1
 8010f20:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	885b      	ldrh	r3, [r3, #2]
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	68fa      	ldr	r2, [r7, #12]
 8010f36:	7812      	ldrb	r2, [r2, #0]
 8010f38:	4293      	cmp	r3, r2
 8010f3a:	d91f      	bls.n	8010f7c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010f42:	e013      	b.n	8010f6c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010f44:	f107 030a 	add.w	r3, r7, #10
 8010f48:	4619      	mov	r1, r3
 8010f4a:	6978      	ldr	r0, [r7, #20]
 8010f4c:	f000 f81b 	bl	8010f86 <USBD_GetNextDesc>
 8010f50:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	785b      	ldrb	r3, [r3, #1]
 8010f56:	2b05      	cmp	r3, #5
 8010f58:	d108      	bne.n	8010f6c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	789b      	ldrb	r3, [r3, #2]
 8010f62:	78fa      	ldrb	r2, [r7, #3]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d008      	beq.n	8010f7a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	885b      	ldrh	r3, [r3, #2]
 8010f70:	b29a      	uxth	r2, r3
 8010f72:	897b      	ldrh	r3, [r7, #10]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d8e5      	bhi.n	8010f44 <USBD_GetEpDesc+0x2e>
 8010f78:	e000      	b.n	8010f7c <USBD_GetEpDesc+0x66>
          break;
 8010f7a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010f7c:	693b      	ldr	r3, [r7, #16]
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3718      	adds	r7, #24
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}

08010f86 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010f86:	b480      	push	{r7}
 8010f88:	b085      	sub	sp, #20
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]
 8010f8e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	881b      	ldrh	r3, [r3, #0]
 8010f98:	68fa      	ldr	r2, [r7, #12]
 8010f9a:	7812      	ldrb	r2, [r2, #0]
 8010f9c:	4413      	add	r3, r2
 8010f9e:	b29a      	uxth	r2, r3
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	461a      	mov	r2, r3
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	4413      	add	r3, r2
 8010fae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3714      	adds	r7, #20
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbc:	4770      	bx	lr

08010fbe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010fbe:	b480      	push	{r7}
 8010fc0:	b087      	sub	sp, #28
 8010fc2:	af00      	add	r7, sp, #0
 8010fc4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010fca:	697b      	ldr	r3, [r7, #20]
 8010fcc:	781b      	ldrb	r3, [r3, #0]
 8010fce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010fdc:	8a3b      	ldrh	r3, [r7, #16]
 8010fde:	021b      	lsls	r3, r3, #8
 8010fe0:	b21a      	sxth	r2, r3
 8010fe2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	b21b      	sxth	r3, r3
 8010fea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010fec:	89fb      	ldrh	r3, [r7, #14]
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	371c      	adds	r7, #28
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr
	...

08010ffc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b084      	sub	sp, #16
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011006:	2300      	movs	r3, #0
 8011008:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011012:	2b40      	cmp	r3, #64	@ 0x40
 8011014:	d005      	beq.n	8011022 <USBD_StdDevReq+0x26>
 8011016:	2b40      	cmp	r3, #64	@ 0x40
 8011018:	d857      	bhi.n	80110ca <USBD_StdDevReq+0xce>
 801101a:	2b00      	cmp	r3, #0
 801101c:	d00f      	beq.n	801103e <USBD_StdDevReq+0x42>
 801101e:	2b20      	cmp	r3, #32
 8011020:	d153      	bne.n	80110ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	32ae      	adds	r2, #174	@ 0xae
 801102c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011030:	689b      	ldr	r3, [r3, #8]
 8011032:	6839      	ldr	r1, [r7, #0]
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	4798      	blx	r3
 8011038:	4603      	mov	r3, r0
 801103a:	73fb      	strb	r3, [r7, #15]
      break;
 801103c:	e04a      	b.n	80110d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	785b      	ldrb	r3, [r3, #1]
 8011042:	2b09      	cmp	r3, #9
 8011044:	d83b      	bhi.n	80110be <USBD_StdDevReq+0xc2>
 8011046:	a201      	add	r2, pc, #4	@ (adr r2, 801104c <USBD_StdDevReq+0x50>)
 8011048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801104c:	080110a1 	.word	0x080110a1
 8011050:	080110b5 	.word	0x080110b5
 8011054:	080110bf 	.word	0x080110bf
 8011058:	080110ab 	.word	0x080110ab
 801105c:	080110bf 	.word	0x080110bf
 8011060:	0801107f 	.word	0x0801107f
 8011064:	08011075 	.word	0x08011075
 8011068:	080110bf 	.word	0x080110bf
 801106c:	08011097 	.word	0x08011097
 8011070:	08011089 	.word	0x08011089
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011074:	6839      	ldr	r1, [r7, #0]
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f000 fa3c 	bl	80114f4 <USBD_GetDescriptor>
          break;
 801107c:	e024      	b.n	80110c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801107e:	6839      	ldr	r1, [r7, #0]
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f000 fbcb 	bl	801181c <USBD_SetAddress>
          break;
 8011086:	e01f      	b.n	80110c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011088:	6839      	ldr	r1, [r7, #0]
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f000 fc0a 	bl	80118a4 <USBD_SetConfig>
 8011090:	4603      	mov	r3, r0
 8011092:	73fb      	strb	r3, [r7, #15]
          break;
 8011094:	e018      	b.n	80110c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011096:	6839      	ldr	r1, [r7, #0]
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f000 fcad 	bl	80119f8 <USBD_GetConfig>
          break;
 801109e:	e013      	b.n	80110c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80110a0:	6839      	ldr	r1, [r7, #0]
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f000 fcde 	bl	8011a64 <USBD_GetStatus>
          break;
 80110a8:	e00e      	b.n	80110c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80110aa:	6839      	ldr	r1, [r7, #0]
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f000 fd0d 	bl	8011acc <USBD_SetFeature>
          break;
 80110b2:	e009      	b.n	80110c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80110b4:	6839      	ldr	r1, [r7, #0]
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f000 fd31 	bl	8011b1e <USBD_ClrFeature>
          break;
 80110bc:	e004      	b.n	80110c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80110be:	6839      	ldr	r1, [r7, #0]
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f000 fd88 	bl	8011bd6 <USBD_CtlError>
          break;
 80110c6:	bf00      	nop
      }
      break;
 80110c8:	e004      	b.n	80110d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80110ca:	6839      	ldr	r1, [r7, #0]
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f000 fd82 	bl	8011bd6 <USBD_CtlError>
      break;
 80110d2:	bf00      	nop
  }

  return ret;
 80110d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3710      	adds	r7, #16
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop

080110e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b084      	sub	sp, #16
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80110ea:	2300      	movs	r3, #0
 80110ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80110f6:	2b40      	cmp	r3, #64	@ 0x40
 80110f8:	d005      	beq.n	8011106 <USBD_StdItfReq+0x26>
 80110fa:	2b40      	cmp	r3, #64	@ 0x40
 80110fc:	d852      	bhi.n	80111a4 <USBD_StdItfReq+0xc4>
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d001      	beq.n	8011106 <USBD_StdItfReq+0x26>
 8011102:	2b20      	cmp	r3, #32
 8011104:	d14e      	bne.n	80111a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801110c:	b2db      	uxtb	r3, r3
 801110e:	3b01      	subs	r3, #1
 8011110:	2b02      	cmp	r3, #2
 8011112:	d840      	bhi.n	8011196 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	889b      	ldrh	r3, [r3, #4]
 8011118:	b2db      	uxtb	r3, r3
 801111a:	2b01      	cmp	r3, #1
 801111c:	d836      	bhi.n	801118c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	889b      	ldrh	r3, [r3, #4]
 8011122:	b2db      	uxtb	r3, r3
 8011124:	4619      	mov	r1, r3
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f7ff fedb 	bl	8010ee2 <USBD_CoreFindIF>
 801112c:	4603      	mov	r3, r0
 801112e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011130:	7bbb      	ldrb	r3, [r7, #14]
 8011132:	2bff      	cmp	r3, #255	@ 0xff
 8011134:	d01d      	beq.n	8011172 <USBD_StdItfReq+0x92>
 8011136:	7bbb      	ldrb	r3, [r7, #14]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d11a      	bne.n	8011172 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801113c:	7bba      	ldrb	r2, [r7, #14]
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	32ae      	adds	r2, #174	@ 0xae
 8011142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011146:	689b      	ldr	r3, [r3, #8]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d00f      	beq.n	801116c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801114c:	7bba      	ldrb	r2, [r7, #14]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011154:	7bba      	ldrb	r2, [r7, #14]
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	32ae      	adds	r2, #174	@ 0xae
 801115a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801115e:	689b      	ldr	r3, [r3, #8]
 8011160:	6839      	ldr	r1, [r7, #0]
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	4798      	blx	r3
 8011166:	4603      	mov	r3, r0
 8011168:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801116a:	e004      	b.n	8011176 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801116c:	2303      	movs	r3, #3
 801116e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011170:	e001      	b.n	8011176 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011172:	2303      	movs	r3, #3
 8011174:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	88db      	ldrh	r3, [r3, #6]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d110      	bne.n	80111a0 <USBD_StdItfReq+0xc0>
 801117e:	7bfb      	ldrb	r3, [r7, #15]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d10d      	bne.n	80111a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f000 fdfd 	bl	8011d84 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801118a:	e009      	b.n	80111a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801118c:	6839      	ldr	r1, [r7, #0]
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f000 fd21 	bl	8011bd6 <USBD_CtlError>
          break;
 8011194:	e004      	b.n	80111a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011196:	6839      	ldr	r1, [r7, #0]
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f000 fd1c 	bl	8011bd6 <USBD_CtlError>
          break;
 801119e:	e000      	b.n	80111a2 <USBD_StdItfReq+0xc2>
          break;
 80111a0:	bf00      	nop
      }
      break;
 80111a2:	e004      	b.n	80111ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80111a4:	6839      	ldr	r1, [r7, #0]
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f000 fd15 	bl	8011bd6 <USBD_CtlError>
      break;
 80111ac:	bf00      	nop
  }

  return ret;
 80111ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3710      	adds	r7, #16
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80111c2:	2300      	movs	r3, #0
 80111c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	889b      	ldrh	r3, [r3, #4]
 80111ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	781b      	ldrb	r3, [r3, #0]
 80111d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80111d4:	2b40      	cmp	r3, #64	@ 0x40
 80111d6:	d007      	beq.n	80111e8 <USBD_StdEPReq+0x30>
 80111d8:	2b40      	cmp	r3, #64	@ 0x40
 80111da:	f200 817f 	bhi.w	80114dc <USBD_StdEPReq+0x324>
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d02a      	beq.n	8011238 <USBD_StdEPReq+0x80>
 80111e2:	2b20      	cmp	r3, #32
 80111e4:	f040 817a 	bne.w	80114dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80111e8:	7bbb      	ldrb	r3, [r7, #14]
 80111ea:	4619      	mov	r1, r3
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f7ff fe85 	bl	8010efc <USBD_CoreFindEP>
 80111f2:	4603      	mov	r3, r0
 80111f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80111f6:	7b7b      	ldrb	r3, [r7, #13]
 80111f8:	2bff      	cmp	r3, #255	@ 0xff
 80111fa:	f000 8174 	beq.w	80114e6 <USBD_StdEPReq+0x32e>
 80111fe:	7b7b      	ldrb	r3, [r7, #13]
 8011200:	2b00      	cmp	r3, #0
 8011202:	f040 8170 	bne.w	80114e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011206:	7b7a      	ldrb	r2, [r7, #13]
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801120e:	7b7a      	ldrb	r2, [r7, #13]
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	32ae      	adds	r2, #174	@ 0xae
 8011214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011218:	689b      	ldr	r3, [r3, #8]
 801121a:	2b00      	cmp	r3, #0
 801121c:	f000 8163 	beq.w	80114e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011220:	7b7a      	ldrb	r2, [r7, #13]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	32ae      	adds	r2, #174	@ 0xae
 8011226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801122a:	689b      	ldr	r3, [r3, #8]
 801122c:	6839      	ldr	r1, [r7, #0]
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	4798      	blx	r3
 8011232:	4603      	mov	r3, r0
 8011234:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011236:	e156      	b.n	80114e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	785b      	ldrb	r3, [r3, #1]
 801123c:	2b03      	cmp	r3, #3
 801123e:	d008      	beq.n	8011252 <USBD_StdEPReq+0x9a>
 8011240:	2b03      	cmp	r3, #3
 8011242:	f300 8145 	bgt.w	80114d0 <USBD_StdEPReq+0x318>
 8011246:	2b00      	cmp	r3, #0
 8011248:	f000 809b 	beq.w	8011382 <USBD_StdEPReq+0x1ca>
 801124c:	2b01      	cmp	r3, #1
 801124e:	d03c      	beq.n	80112ca <USBD_StdEPReq+0x112>
 8011250:	e13e      	b.n	80114d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011258:	b2db      	uxtb	r3, r3
 801125a:	2b02      	cmp	r3, #2
 801125c:	d002      	beq.n	8011264 <USBD_StdEPReq+0xac>
 801125e:	2b03      	cmp	r3, #3
 8011260:	d016      	beq.n	8011290 <USBD_StdEPReq+0xd8>
 8011262:	e02c      	b.n	80112be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011264:	7bbb      	ldrb	r3, [r7, #14]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d00d      	beq.n	8011286 <USBD_StdEPReq+0xce>
 801126a:	7bbb      	ldrb	r3, [r7, #14]
 801126c:	2b80      	cmp	r3, #128	@ 0x80
 801126e:	d00a      	beq.n	8011286 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011270:	7bbb      	ldrb	r3, [r7, #14]
 8011272:	4619      	mov	r1, r3
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f001 f9b7 	bl	80125e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801127a:	2180      	movs	r1, #128	@ 0x80
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f001 f9b3 	bl	80125e8 <USBD_LL_StallEP>
 8011282:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011284:	e020      	b.n	80112c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011286:	6839      	ldr	r1, [r7, #0]
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f000 fca4 	bl	8011bd6 <USBD_CtlError>
              break;
 801128e:	e01b      	b.n	80112c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	885b      	ldrh	r3, [r3, #2]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d10e      	bne.n	80112b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011298:	7bbb      	ldrb	r3, [r7, #14]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d00b      	beq.n	80112b6 <USBD_StdEPReq+0xfe>
 801129e:	7bbb      	ldrb	r3, [r7, #14]
 80112a0:	2b80      	cmp	r3, #128	@ 0x80
 80112a2:	d008      	beq.n	80112b6 <USBD_StdEPReq+0xfe>
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	88db      	ldrh	r3, [r3, #6]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d104      	bne.n	80112b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80112ac:	7bbb      	ldrb	r3, [r7, #14]
 80112ae:	4619      	mov	r1, r3
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f001 f999 	bl	80125e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f000 fd64 	bl	8011d84 <USBD_CtlSendStatus>

              break;
 80112bc:	e004      	b.n	80112c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80112be:	6839      	ldr	r1, [r7, #0]
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f000 fc88 	bl	8011bd6 <USBD_CtlError>
              break;
 80112c6:	bf00      	nop
          }
          break;
 80112c8:	e107      	b.n	80114da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80112d0:	b2db      	uxtb	r3, r3
 80112d2:	2b02      	cmp	r3, #2
 80112d4:	d002      	beq.n	80112dc <USBD_StdEPReq+0x124>
 80112d6:	2b03      	cmp	r3, #3
 80112d8:	d016      	beq.n	8011308 <USBD_StdEPReq+0x150>
 80112da:	e04b      	b.n	8011374 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80112dc:	7bbb      	ldrb	r3, [r7, #14]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d00d      	beq.n	80112fe <USBD_StdEPReq+0x146>
 80112e2:	7bbb      	ldrb	r3, [r7, #14]
 80112e4:	2b80      	cmp	r3, #128	@ 0x80
 80112e6:	d00a      	beq.n	80112fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80112e8:	7bbb      	ldrb	r3, [r7, #14]
 80112ea:	4619      	mov	r1, r3
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f001 f97b 	bl	80125e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80112f2:	2180      	movs	r1, #128	@ 0x80
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	f001 f977 	bl	80125e8 <USBD_LL_StallEP>
 80112fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80112fc:	e040      	b.n	8011380 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80112fe:	6839      	ldr	r1, [r7, #0]
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f000 fc68 	bl	8011bd6 <USBD_CtlError>
              break;
 8011306:	e03b      	b.n	8011380 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	885b      	ldrh	r3, [r3, #2]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d136      	bne.n	801137e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011310:	7bbb      	ldrb	r3, [r7, #14]
 8011312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011316:	2b00      	cmp	r3, #0
 8011318:	d004      	beq.n	8011324 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801131a:	7bbb      	ldrb	r3, [r7, #14]
 801131c:	4619      	mov	r1, r3
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f001 f981 	bl	8012626 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f000 fd2d 	bl	8011d84 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801132a:	7bbb      	ldrb	r3, [r7, #14]
 801132c:	4619      	mov	r1, r3
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f7ff fde4 	bl	8010efc <USBD_CoreFindEP>
 8011334:	4603      	mov	r3, r0
 8011336:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011338:	7b7b      	ldrb	r3, [r7, #13]
 801133a:	2bff      	cmp	r3, #255	@ 0xff
 801133c:	d01f      	beq.n	801137e <USBD_StdEPReq+0x1c6>
 801133e:	7b7b      	ldrb	r3, [r7, #13]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d11c      	bne.n	801137e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011344:	7b7a      	ldrb	r2, [r7, #13]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801134c:	7b7a      	ldrb	r2, [r7, #13]
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	32ae      	adds	r2, #174	@ 0xae
 8011352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011356:	689b      	ldr	r3, [r3, #8]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d010      	beq.n	801137e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801135c:	7b7a      	ldrb	r2, [r7, #13]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	32ae      	adds	r2, #174	@ 0xae
 8011362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011366:	689b      	ldr	r3, [r3, #8]
 8011368:	6839      	ldr	r1, [r7, #0]
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	4798      	blx	r3
 801136e:	4603      	mov	r3, r0
 8011370:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011372:	e004      	b.n	801137e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011374:	6839      	ldr	r1, [r7, #0]
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f000 fc2d 	bl	8011bd6 <USBD_CtlError>
              break;
 801137c:	e000      	b.n	8011380 <USBD_StdEPReq+0x1c8>
              break;
 801137e:	bf00      	nop
          }
          break;
 8011380:	e0ab      	b.n	80114da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011388:	b2db      	uxtb	r3, r3
 801138a:	2b02      	cmp	r3, #2
 801138c:	d002      	beq.n	8011394 <USBD_StdEPReq+0x1dc>
 801138e:	2b03      	cmp	r3, #3
 8011390:	d032      	beq.n	80113f8 <USBD_StdEPReq+0x240>
 8011392:	e097      	b.n	80114c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011394:	7bbb      	ldrb	r3, [r7, #14]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d007      	beq.n	80113aa <USBD_StdEPReq+0x1f2>
 801139a:	7bbb      	ldrb	r3, [r7, #14]
 801139c:	2b80      	cmp	r3, #128	@ 0x80
 801139e:	d004      	beq.n	80113aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80113a0:	6839      	ldr	r1, [r7, #0]
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f000 fc17 	bl	8011bd6 <USBD_CtlError>
                break;
 80113a8:	e091      	b.n	80114ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80113aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	da0b      	bge.n	80113ca <USBD_StdEPReq+0x212>
 80113b2:	7bbb      	ldrb	r3, [r7, #14]
 80113b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80113b8:	4613      	mov	r3, r2
 80113ba:	009b      	lsls	r3, r3, #2
 80113bc:	4413      	add	r3, r2
 80113be:	009b      	lsls	r3, r3, #2
 80113c0:	3310      	adds	r3, #16
 80113c2:	687a      	ldr	r2, [r7, #4]
 80113c4:	4413      	add	r3, r2
 80113c6:	3304      	adds	r3, #4
 80113c8:	e00b      	b.n	80113e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80113ca:	7bbb      	ldrb	r3, [r7, #14]
 80113cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80113d0:	4613      	mov	r3, r2
 80113d2:	009b      	lsls	r3, r3, #2
 80113d4:	4413      	add	r3, r2
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80113dc:	687a      	ldr	r2, [r7, #4]
 80113de:	4413      	add	r3, r2
 80113e0:	3304      	adds	r3, #4
 80113e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	2200      	movs	r2, #0
 80113e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	2202      	movs	r2, #2
 80113ee:	4619      	mov	r1, r3
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f000 fc6d 	bl	8011cd0 <USBD_CtlSendData>
              break;
 80113f6:	e06a      	b.n	80114ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80113f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	da11      	bge.n	8011424 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011400:	7bbb      	ldrb	r3, [r7, #14]
 8011402:	f003 020f 	and.w	r2, r3, #15
 8011406:	6879      	ldr	r1, [r7, #4]
 8011408:	4613      	mov	r3, r2
 801140a:	009b      	lsls	r3, r3, #2
 801140c:	4413      	add	r3, r2
 801140e:	009b      	lsls	r3, r3, #2
 8011410:	440b      	add	r3, r1
 8011412:	3324      	adds	r3, #36	@ 0x24
 8011414:	881b      	ldrh	r3, [r3, #0]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d117      	bne.n	801144a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801141a:	6839      	ldr	r1, [r7, #0]
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f000 fbda 	bl	8011bd6 <USBD_CtlError>
                  break;
 8011422:	e054      	b.n	80114ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011424:	7bbb      	ldrb	r3, [r7, #14]
 8011426:	f003 020f 	and.w	r2, r3, #15
 801142a:	6879      	ldr	r1, [r7, #4]
 801142c:	4613      	mov	r3, r2
 801142e:	009b      	lsls	r3, r3, #2
 8011430:	4413      	add	r3, r2
 8011432:	009b      	lsls	r3, r3, #2
 8011434:	440b      	add	r3, r1
 8011436:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801143a:	881b      	ldrh	r3, [r3, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d104      	bne.n	801144a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011440:	6839      	ldr	r1, [r7, #0]
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f000 fbc7 	bl	8011bd6 <USBD_CtlError>
                  break;
 8011448:	e041      	b.n	80114ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801144a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801144e:	2b00      	cmp	r3, #0
 8011450:	da0b      	bge.n	801146a <USBD_StdEPReq+0x2b2>
 8011452:	7bbb      	ldrb	r3, [r7, #14]
 8011454:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011458:	4613      	mov	r3, r2
 801145a:	009b      	lsls	r3, r3, #2
 801145c:	4413      	add	r3, r2
 801145e:	009b      	lsls	r3, r3, #2
 8011460:	3310      	adds	r3, #16
 8011462:	687a      	ldr	r2, [r7, #4]
 8011464:	4413      	add	r3, r2
 8011466:	3304      	adds	r3, #4
 8011468:	e00b      	b.n	8011482 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801146a:	7bbb      	ldrb	r3, [r7, #14]
 801146c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011470:	4613      	mov	r3, r2
 8011472:	009b      	lsls	r3, r3, #2
 8011474:	4413      	add	r3, r2
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801147c:	687a      	ldr	r2, [r7, #4]
 801147e:	4413      	add	r3, r2
 8011480:	3304      	adds	r3, #4
 8011482:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011484:	7bbb      	ldrb	r3, [r7, #14]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d002      	beq.n	8011490 <USBD_StdEPReq+0x2d8>
 801148a:	7bbb      	ldrb	r3, [r7, #14]
 801148c:	2b80      	cmp	r3, #128	@ 0x80
 801148e:	d103      	bne.n	8011498 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	2200      	movs	r2, #0
 8011494:	601a      	str	r2, [r3, #0]
 8011496:	e00e      	b.n	80114b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011498:	7bbb      	ldrb	r3, [r7, #14]
 801149a:	4619      	mov	r1, r3
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	f001 f8e1 	bl	8012664 <USBD_LL_IsStallEP>
 80114a2:	4603      	mov	r3, r0
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d003      	beq.n	80114b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	2201      	movs	r2, #1
 80114ac:	601a      	str	r2, [r3, #0]
 80114ae:	e002      	b.n	80114b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	2200      	movs	r2, #0
 80114b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	2202      	movs	r2, #2
 80114ba:	4619      	mov	r1, r3
 80114bc:	6878      	ldr	r0, [r7, #4]
 80114be:	f000 fc07 	bl	8011cd0 <USBD_CtlSendData>
              break;
 80114c2:	e004      	b.n	80114ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80114c4:	6839      	ldr	r1, [r7, #0]
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f000 fb85 	bl	8011bd6 <USBD_CtlError>
              break;
 80114cc:	bf00      	nop
          }
          break;
 80114ce:	e004      	b.n	80114da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80114d0:	6839      	ldr	r1, [r7, #0]
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f000 fb7f 	bl	8011bd6 <USBD_CtlError>
          break;
 80114d8:	bf00      	nop
      }
      break;
 80114da:	e005      	b.n	80114e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80114dc:	6839      	ldr	r1, [r7, #0]
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f000 fb79 	bl	8011bd6 <USBD_CtlError>
      break;
 80114e4:	e000      	b.n	80114e8 <USBD_StdEPReq+0x330>
      break;
 80114e6:	bf00      	nop
  }

  return ret;
 80114e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3710      	adds	r7, #16
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
	...

080114f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b084      	sub	sp, #16
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80114fe:	2300      	movs	r3, #0
 8011500:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011502:	2300      	movs	r3, #0
 8011504:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011506:	2300      	movs	r3, #0
 8011508:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	885b      	ldrh	r3, [r3, #2]
 801150e:	0a1b      	lsrs	r3, r3, #8
 8011510:	b29b      	uxth	r3, r3
 8011512:	3b01      	subs	r3, #1
 8011514:	2b0e      	cmp	r3, #14
 8011516:	f200 8152 	bhi.w	80117be <USBD_GetDescriptor+0x2ca>
 801151a:	a201      	add	r2, pc, #4	@ (adr r2, 8011520 <USBD_GetDescriptor+0x2c>)
 801151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011520:	08011591 	.word	0x08011591
 8011524:	080115a9 	.word	0x080115a9
 8011528:	080115e9 	.word	0x080115e9
 801152c:	080117bf 	.word	0x080117bf
 8011530:	080117bf 	.word	0x080117bf
 8011534:	0801175f 	.word	0x0801175f
 8011538:	0801178b 	.word	0x0801178b
 801153c:	080117bf 	.word	0x080117bf
 8011540:	080117bf 	.word	0x080117bf
 8011544:	080117bf 	.word	0x080117bf
 8011548:	080117bf 	.word	0x080117bf
 801154c:	080117bf 	.word	0x080117bf
 8011550:	080117bf 	.word	0x080117bf
 8011554:	080117bf 	.word	0x080117bf
 8011558:	0801155d 	.word	0x0801155d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011562:	69db      	ldr	r3, [r3, #28]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d00b      	beq.n	8011580 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801156e:	69db      	ldr	r3, [r3, #28]
 8011570:	687a      	ldr	r2, [r7, #4]
 8011572:	7c12      	ldrb	r2, [r2, #16]
 8011574:	f107 0108 	add.w	r1, r7, #8
 8011578:	4610      	mov	r0, r2
 801157a:	4798      	blx	r3
 801157c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801157e:	e126      	b.n	80117ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011580:	6839      	ldr	r1, [r7, #0]
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f000 fb27 	bl	8011bd6 <USBD_CtlError>
        err++;
 8011588:	7afb      	ldrb	r3, [r7, #11]
 801158a:	3301      	adds	r3, #1
 801158c:	72fb      	strb	r3, [r7, #11]
      break;
 801158e:	e11e      	b.n	80117ce <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	687a      	ldr	r2, [r7, #4]
 801159a:	7c12      	ldrb	r2, [r2, #16]
 801159c:	f107 0108 	add.w	r1, r7, #8
 80115a0:	4610      	mov	r0, r2
 80115a2:	4798      	blx	r3
 80115a4:	60f8      	str	r0, [r7, #12]
      break;
 80115a6:	e112      	b.n	80117ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	7c1b      	ldrb	r3, [r3, #16]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d10d      	bne.n	80115cc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115b8:	f107 0208 	add.w	r2, r7, #8
 80115bc:	4610      	mov	r0, r2
 80115be:	4798      	blx	r3
 80115c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	3301      	adds	r3, #1
 80115c6:	2202      	movs	r2, #2
 80115c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80115ca:	e100      	b.n	80117ce <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115d4:	f107 0208 	add.w	r2, r7, #8
 80115d8:	4610      	mov	r0, r2
 80115da:	4798      	blx	r3
 80115dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	3301      	adds	r3, #1
 80115e2:	2202      	movs	r2, #2
 80115e4:	701a      	strb	r2, [r3, #0]
      break;
 80115e6:	e0f2      	b.n	80117ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	885b      	ldrh	r3, [r3, #2]
 80115ec:	b2db      	uxtb	r3, r3
 80115ee:	2b05      	cmp	r3, #5
 80115f0:	f200 80ac 	bhi.w	801174c <USBD_GetDescriptor+0x258>
 80115f4:	a201      	add	r2, pc, #4	@ (adr r2, 80115fc <USBD_GetDescriptor+0x108>)
 80115f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115fa:	bf00      	nop
 80115fc:	08011615 	.word	0x08011615
 8011600:	08011649 	.word	0x08011649
 8011604:	0801167d 	.word	0x0801167d
 8011608:	080116b1 	.word	0x080116b1
 801160c:	080116e5 	.word	0x080116e5
 8011610:	08011719 	.word	0x08011719
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801161a:	685b      	ldr	r3, [r3, #4]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d00b      	beq.n	8011638 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011626:	685b      	ldr	r3, [r3, #4]
 8011628:	687a      	ldr	r2, [r7, #4]
 801162a:	7c12      	ldrb	r2, [r2, #16]
 801162c:	f107 0108 	add.w	r1, r7, #8
 8011630:	4610      	mov	r0, r2
 8011632:	4798      	blx	r3
 8011634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011636:	e091      	b.n	801175c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011638:	6839      	ldr	r1, [r7, #0]
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f000 facb 	bl	8011bd6 <USBD_CtlError>
            err++;
 8011640:	7afb      	ldrb	r3, [r7, #11]
 8011642:	3301      	adds	r3, #1
 8011644:	72fb      	strb	r3, [r7, #11]
          break;
 8011646:	e089      	b.n	801175c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801164e:	689b      	ldr	r3, [r3, #8]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d00b      	beq.n	801166c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801165a:	689b      	ldr	r3, [r3, #8]
 801165c:	687a      	ldr	r2, [r7, #4]
 801165e:	7c12      	ldrb	r2, [r2, #16]
 8011660:	f107 0108 	add.w	r1, r7, #8
 8011664:	4610      	mov	r0, r2
 8011666:	4798      	blx	r3
 8011668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801166a:	e077      	b.n	801175c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801166c:	6839      	ldr	r1, [r7, #0]
 801166e:	6878      	ldr	r0, [r7, #4]
 8011670:	f000 fab1 	bl	8011bd6 <USBD_CtlError>
            err++;
 8011674:	7afb      	ldrb	r3, [r7, #11]
 8011676:	3301      	adds	r3, #1
 8011678:	72fb      	strb	r3, [r7, #11]
          break;
 801167a:	e06f      	b.n	801175c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011682:	68db      	ldr	r3, [r3, #12]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d00b      	beq.n	80116a0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801168e:	68db      	ldr	r3, [r3, #12]
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	7c12      	ldrb	r2, [r2, #16]
 8011694:	f107 0108 	add.w	r1, r7, #8
 8011698:	4610      	mov	r0, r2
 801169a:	4798      	blx	r3
 801169c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801169e:	e05d      	b.n	801175c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80116a0:	6839      	ldr	r1, [r7, #0]
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f000 fa97 	bl	8011bd6 <USBD_CtlError>
            err++;
 80116a8:	7afb      	ldrb	r3, [r7, #11]
 80116aa:	3301      	adds	r3, #1
 80116ac:	72fb      	strb	r3, [r7, #11]
          break;
 80116ae:	e055      	b.n	801175c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116b6:	691b      	ldr	r3, [r3, #16]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00b      	beq.n	80116d4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116c2:	691b      	ldr	r3, [r3, #16]
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	7c12      	ldrb	r2, [r2, #16]
 80116c8:	f107 0108 	add.w	r1, r7, #8
 80116cc:	4610      	mov	r0, r2
 80116ce:	4798      	blx	r3
 80116d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80116d2:	e043      	b.n	801175c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80116d4:	6839      	ldr	r1, [r7, #0]
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f000 fa7d 	bl	8011bd6 <USBD_CtlError>
            err++;
 80116dc:	7afb      	ldrb	r3, [r7, #11]
 80116de:	3301      	adds	r3, #1
 80116e0:	72fb      	strb	r3, [r7, #11]
          break;
 80116e2:	e03b      	b.n	801175c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116ea:	695b      	ldr	r3, [r3, #20]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d00b      	beq.n	8011708 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116f6:	695b      	ldr	r3, [r3, #20]
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	7c12      	ldrb	r2, [r2, #16]
 80116fc:	f107 0108 	add.w	r1, r7, #8
 8011700:	4610      	mov	r0, r2
 8011702:	4798      	blx	r3
 8011704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011706:	e029      	b.n	801175c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011708:	6839      	ldr	r1, [r7, #0]
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f000 fa63 	bl	8011bd6 <USBD_CtlError>
            err++;
 8011710:	7afb      	ldrb	r3, [r7, #11]
 8011712:	3301      	adds	r3, #1
 8011714:	72fb      	strb	r3, [r7, #11]
          break;
 8011716:	e021      	b.n	801175c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801171e:	699b      	ldr	r3, [r3, #24]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d00b      	beq.n	801173c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801172a:	699b      	ldr	r3, [r3, #24]
 801172c:	687a      	ldr	r2, [r7, #4]
 801172e:	7c12      	ldrb	r2, [r2, #16]
 8011730:	f107 0108 	add.w	r1, r7, #8
 8011734:	4610      	mov	r0, r2
 8011736:	4798      	blx	r3
 8011738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801173a:	e00f      	b.n	801175c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801173c:	6839      	ldr	r1, [r7, #0]
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f000 fa49 	bl	8011bd6 <USBD_CtlError>
            err++;
 8011744:	7afb      	ldrb	r3, [r7, #11]
 8011746:	3301      	adds	r3, #1
 8011748:	72fb      	strb	r3, [r7, #11]
          break;
 801174a:	e007      	b.n	801175c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801174c:	6839      	ldr	r1, [r7, #0]
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f000 fa41 	bl	8011bd6 <USBD_CtlError>
          err++;
 8011754:	7afb      	ldrb	r3, [r7, #11]
 8011756:	3301      	adds	r3, #1
 8011758:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801175a:	bf00      	nop
      }
      break;
 801175c:	e037      	b.n	80117ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	7c1b      	ldrb	r3, [r3, #16]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d109      	bne.n	801177a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801176c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801176e:	f107 0208 	add.w	r2, r7, #8
 8011772:	4610      	mov	r0, r2
 8011774:	4798      	blx	r3
 8011776:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011778:	e029      	b.n	80117ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801177a:	6839      	ldr	r1, [r7, #0]
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f000 fa2a 	bl	8011bd6 <USBD_CtlError>
        err++;
 8011782:	7afb      	ldrb	r3, [r7, #11]
 8011784:	3301      	adds	r3, #1
 8011786:	72fb      	strb	r3, [r7, #11]
      break;
 8011788:	e021      	b.n	80117ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	7c1b      	ldrb	r3, [r3, #16]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d10d      	bne.n	80117ae <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801179a:	f107 0208 	add.w	r2, r7, #8
 801179e:	4610      	mov	r0, r2
 80117a0:	4798      	blx	r3
 80117a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	3301      	adds	r3, #1
 80117a8:	2207      	movs	r2, #7
 80117aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80117ac:	e00f      	b.n	80117ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80117ae:	6839      	ldr	r1, [r7, #0]
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f000 fa10 	bl	8011bd6 <USBD_CtlError>
        err++;
 80117b6:	7afb      	ldrb	r3, [r7, #11]
 80117b8:	3301      	adds	r3, #1
 80117ba:	72fb      	strb	r3, [r7, #11]
      break;
 80117bc:	e007      	b.n	80117ce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80117be:	6839      	ldr	r1, [r7, #0]
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f000 fa08 	bl	8011bd6 <USBD_CtlError>
      err++;
 80117c6:	7afb      	ldrb	r3, [r7, #11]
 80117c8:	3301      	adds	r3, #1
 80117ca:	72fb      	strb	r3, [r7, #11]
      break;
 80117cc:	bf00      	nop
  }

  if (err != 0U)
 80117ce:	7afb      	ldrb	r3, [r7, #11]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d11e      	bne.n	8011812 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	88db      	ldrh	r3, [r3, #6]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d016      	beq.n	801180a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80117dc:	893b      	ldrh	r3, [r7, #8]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d00e      	beq.n	8011800 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	88da      	ldrh	r2, [r3, #6]
 80117e6:	893b      	ldrh	r3, [r7, #8]
 80117e8:	4293      	cmp	r3, r2
 80117ea:	bf28      	it	cs
 80117ec:	4613      	movcs	r3, r2
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80117f2:	893b      	ldrh	r3, [r7, #8]
 80117f4:	461a      	mov	r2, r3
 80117f6:	68f9      	ldr	r1, [r7, #12]
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f000 fa69 	bl	8011cd0 <USBD_CtlSendData>
 80117fe:	e009      	b.n	8011814 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011800:	6839      	ldr	r1, [r7, #0]
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f000 f9e7 	bl	8011bd6 <USBD_CtlError>
 8011808:	e004      	b.n	8011814 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f000 faba 	bl	8011d84 <USBD_CtlSendStatus>
 8011810:	e000      	b.n	8011814 <USBD_GetDescriptor+0x320>
    return;
 8011812:	bf00      	nop
  }
}
 8011814:	3710      	adds	r7, #16
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop

0801181c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	889b      	ldrh	r3, [r3, #4]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d131      	bne.n	8011892 <USBD_SetAddress+0x76>
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	88db      	ldrh	r3, [r3, #6]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d12d      	bne.n	8011892 <USBD_SetAddress+0x76>
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	885b      	ldrh	r3, [r3, #2]
 801183a:	2b7f      	cmp	r3, #127	@ 0x7f
 801183c:	d829      	bhi.n	8011892 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	885b      	ldrh	r3, [r3, #2]
 8011842:	b2db      	uxtb	r3, r3
 8011844:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011848:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011850:	b2db      	uxtb	r3, r3
 8011852:	2b03      	cmp	r3, #3
 8011854:	d104      	bne.n	8011860 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011856:	6839      	ldr	r1, [r7, #0]
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f000 f9bc 	bl	8011bd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801185e:	e01d      	b.n	801189c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	7bfa      	ldrb	r2, [r7, #15]
 8011864:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011868:	7bfb      	ldrb	r3, [r7, #15]
 801186a:	4619      	mov	r1, r3
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f000 ff25 	bl	80126bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f000 fa86 	bl	8011d84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011878:	7bfb      	ldrb	r3, [r7, #15]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d004      	beq.n	8011888 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2202      	movs	r2, #2
 8011882:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011886:	e009      	b.n	801189c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2201      	movs	r2, #1
 801188c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011890:	e004      	b.n	801189c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011892:	6839      	ldr	r1, [r7, #0]
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f000 f99e 	bl	8011bd6 <USBD_CtlError>
  }
}
 801189a:	bf00      	nop
 801189c:	bf00      	nop
 801189e:	3710      	adds	r7, #16
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b084      	sub	sp, #16
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
 80118ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80118ae:	2300      	movs	r3, #0
 80118b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	885b      	ldrh	r3, [r3, #2]
 80118b6:	b2da      	uxtb	r2, r3
 80118b8:	4b4e      	ldr	r3, [pc, #312]	@ (80119f4 <USBD_SetConfig+0x150>)
 80118ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80118bc:	4b4d      	ldr	r3, [pc, #308]	@ (80119f4 <USBD_SetConfig+0x150>)
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	2b01      	cmp	r3, #1
 80118c2:	d905      	bls.n	80118d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80118c4:	6839      	ldr	r1, [r7, #0]
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f000 f985 	bl	8011bd6 <USBD_CtlError>
    return USBD_FAIL;
 80118cc:	2303      	movs	r3, #3
 80118ce:	e08c      	b.n	80119ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80118d6:	b2db      	uxtb	r3, r3
 80118d8:	2b02      	cmp	r3, #2
 80118da:	d002      	beq.n	80118e2 <USBD_SetConfig+0x3e>
 80118dc:	2b03      	cmp	r3, #3
 80118de:	d029      	beq.n	8011934 <USBD_SetConfig+0x90>
 80118e0:	e075      	b.n	80119ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80118e2:	4b44      	ldr	r3, [pc, #272]	@ (80119f4 <USBD_SetConfig+0x150>)
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d020      	beq.n	801192c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80118ea:	4b42      	ldr	r3, [pc, #264]	@ (80119f4 <USBD_SetConfig+0x150>)
 80118ec:	781b      	ldrb	r3, [r3, #0]
 80118ee:	461a      	mov	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80118f4:	4b3f      	ldr	r3, [pc, #252]	@ (80119f4 <USBD_SetConfig+0x150>)
 80118f6:	781b      	ldrb	r3, [r3, #0]
 80118f8:	4619      	mov	r1, r3
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	f7fe ffb9 	bl	8010872 <USBD_SetClassConfig>
 8011900:	4603      	mov	r3, r0
 8011902:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011904:	7bfb      	ldrb	r3, [r7, #15]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d008      	beq.n	801191c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801190a:	6839      	ldr	r1, [r7, #0]
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f000 f962 	bl	8011bd6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2202      	movs	r2, #2
 8011916:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801191a:	e065      	b.n	80119e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801191c:	6878      	ldr	r0, [r7, #4]
 801191e:	f000 fa31 	bl	8011d84 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2203      	movs	r2, #3
 8011926:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801192a:	e05d      	b.n	80119e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f000 fa29 	bl	8011d84 <USBD_CtlSendStatus>
      break;
 8011932:	e059      	b.n	80119e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011934:	4b2f      	ldr	r3, [pc, #188]	@ (80119f4 <USBD_SetConfig+0x150>)
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d112      	bne.n	8011962 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2202      	movs	r2, #2
 8011940:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011944:	4b2b      	ldr	r3, [pc, #172]	@ (80119f4 <USBD_SetConfig+0x150>)
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	461a      	mov	r2, r3
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801194e:	4b29      	ldr	r3, [pc, #164]	@ (80119f4 <USBD_SetConfig+0x150>)
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	4619      	mov	r1, r3
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f7fe ffa8 	bl	80108aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f000 fa12 	bl	8011d84 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011960:	e042      	b.n	80119e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011962:	4b24      	ldr	r3, [pc, #144]	@ (80119f4 <USBD_SetConfig+0x150>)
 8011964:	781b      	ldrb	r3, [r3, #0]
 8011966:	461a      	mov	r2, r3
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	685b      	ldr	r3, [r3, #4]
 801196c:	429a      	cmp	r2, r3
 801196e:	d02a      	beq.n	80119c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	685b      	ldr	r3, [r3, #4]
 8011974:	b2db      	uxtb	r3, r3
 8011976:	4619      	mov	r1, r3
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f7fe ff96 	bl	80108aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801197e:	4b1d      	ldr	r3, [pc, #116]	@ (80119f4 <USBD_SetConfig+0x150>)
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	461a      	mov	r2, r3
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011988:	4b1a      	ldr	r3, [pc, #104]	@ (80119f4 <USBD_SetConfig+0x150>)
 801198a:	781b      	ldrb	r3, [r3, #0]
 801198c:	4619      	mov	r1, r3
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f7fe ff6f 	bl	8010872 <USBD_SetClassConfig>
 8011994:	4603      	mov	r3, r0
 8011996:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011998:	7bfb      	ldrb	r3, [r7, #15]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d00f      	beq.n	80119be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801199e:	6839      	ldr	r1, [r7, #0]
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f000 f918 	bl	8011bd6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	685b      	ldr	r3, [r3, #4]
 80119aa:	b2db      	uxtb	r3, r3
 80119ac:	4619      	mov	r1, r3
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f7fe ff7b 	bl	80108aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2202      	movs	r2, #2
 80119b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80119bc:	e014      	b.n	80119e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f000 f9e0 	bl	8011d84 <USBD_CtlSendStatus>
      break;
 80119c4:	e010      	b.n	80119e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f000 f9dc 	bl	8011d84 <USBD_CtlSendStatus>
      break;
 80119cc:	e00c      	b.n	80119e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80119ce:	6839      	ldr	r1, [r7, #0]
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f000 f900 	bl	8011bd6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80119d6:	4b07      	ldr	r3, [pc, #28]	@ (80119f4 <USBD_SetConfig+0x150>)
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	4619      	mov	r1, r3
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f7fe ff64 	bl	80108aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80119e2:	2303      	movs	r3, #3
 80119e4:	73fb      	strb	r3, [r7, #15]
      break;
 80119e6:	bf00      	nop
  }

  return ret;
 80119e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3710      	adds	r7, #16
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
 80119f2:	bf00      	nop
 80119f4:	24004300 	.word	0x24004300

080119f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	88db      	ldrh	r3, [r3, #6]
 8011a06:	2b01      	cmp	r3, #1
 8011a08:	d004      	beq.n	8011a14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011a0a:	6839      	ldr	r1, [r7, #0]
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f000 f8e2 	bl	8011bd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011a12:	e023      	b.n	8011a5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a1a:	b2db      	uxtb	r3, r3
 8011a1c:	2b02      	cmp	r3, #2
 8011a1e:	dc02      	bgt.n	8011a26 <USBD_GetConfig+0x2e>
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	dc03      	bgt.n	8011a2c <USBD_GetConfig+0x34>
 8011a24:	e015      	b.n	8011a52 <USBD_GetConfig+0x5a>
 8011a26:	2b03      	cmp	r3, #3
 8011a28:	d00b      	beq.n	8011a42 <USBD_GetConfig+0x4a>
 8011a2a:	e012      	b.n	8011a52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	3308      	adds	r3, #8
 8011a36:	2201      	movs	r2, #1
 8011a38:	4619      	mov	r1, r3
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	f000 f948 	bl	8011cd0 <USBD_CtlSendData>
        break;
 8011a40:	e00c      	b.n	8011a5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	3304      	adds	r3, #4
 8011a46:	2201      	movs	r2, #1
 8011a48:	4619      	mov	r1, r3
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f000 f940 	bl	8011cd0 <USBD_CtlSendData>
        break;
 8011a50:	e004      	b.n	8011a5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011a52:	6839      	ldr	r1, [r7, #0]
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f000 f8be 	bl	8011bd6 <USBD_CtlError>
        break;
 8011a5a:	bf00      	nop
}
 8011a5c:	bf00      	nop
 8011a5e:	3708      	adds	r7, #8
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a74:	b2db      	uxtb	r3, r3
 8011a76:	3b01      	subs	r3, #1
 8011a78:	2b02      	cmp	r3, #2
 8011a7a:	d81e      	bhi.n	8011aba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	88db      	ldrh	r3, [r3, #6]
 8011a80:	2b02      	cmp	r3, #2
 8011a82:	d004      	beq.n	8011a8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011a84:	6839      	ldr	r1, [r7, #0]
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f000 f8a5 	bl	8011bd6 <USBD_CtlError>
        break;
 8011a8c:	e01a      	b.n	8011ac4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2201      	movs	r2, #1
 8011a92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d005      	beq.n	8011aaa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	68db      	ldr	r3, [r3, #12]
 8011aa2:	f043 0202 	orr.w	r2, r3, #2
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	330c      	adds	r3, #12
 8011aae:	2202      	movs	r2, #2
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f000 f90c 	bl	8011cd0 <USBD_CtlSendData>
      break;
 8011ab8:	e004      	b.n	8011ac4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011aba:	6839      	ldr	r1, [r7, #0]
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f000 f88a 	bl	8011bd6 <USBD_CtlError>
      break;
 8011ac2:	bf00      	nop
  }
}
 8011ac4:	bf00      	nop
 8011ac6:	3708      	adds	r7, #8
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}

08011acc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b082      	sub	sp, #8
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	885b      	ldrh	r3, [r3, #2]
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d107      	bne.n	8011aee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f000 f94c 	bl	8011d84 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011aec:	e013      	b.n	8011b16 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	885b      	ldrh	r3, [r3, #2]
 8011af2:	2b02      	cmp	r3, #2
 8011af4:	d10b      	bne.n	8011b0e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	889b      	ldrh	r3, [r3, #4]
 8011afa:	0a1b      	lsrs	r3, r3, #8
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	b2da      	uxtb	r2, r3
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	f000 f93c 	bl	8011d84 <USBD_CtlSendStatus>
}
 8011b0c:	e003      	b.n	8011b16 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011b0e:	6839      	ldr	r1, [r7, #0]
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f000 f860 	bl	8011bd6 <USBD_CtlError>
}
 8011b16:	bf00      	nop
 8011b18:	3708      	adds	r7, #8
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}

08011b1e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b1e:	b580      	push	{r7, lr}
 8011b20:	b082      	sub	sp, #8
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
 8011b26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b2e:	b2db      	uxtb	r3, r3
 8011b30:	3b01      	subs	r3, #1
 8011b32:	2b02      	cmp	r3, #2
 8011b34:	d80b      	bhi.n	8011b4e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	885b      	ldrh	r3, [r3, #2]
 8011b3a:	2b01      	cmp	r3, #1
 8011b3c:	d10c      	bne.n	8011b58 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2200      	movs	r2, #0
 8011b42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011b46:	6878      	ldr	r0, [r7, #4]
 8011b48:	f000 f91c 	bl	8011d84 <USBD_CtlSendStatus>
      }
      break;
 8011b4c:	e004      	b.n	8011b58 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011b4e:	6839      	ldr	r1, [r7, #0]
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f000 f840 	bl	8011bd6 <USBD_CtlError>
      break;
 8011b56:	e000      	b.n	8011b5a <USBD_ClrFeature+0x3c>
      break;
 8011b58:	bf00      	nop
  }
}
 8011b5a:	bf00      	nop
 8011b5c:	3708      	adds	r7, #8
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}

08011b62 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011b62:	b580      	push	{r7, lr}
 8011b64:	b084      	sub	sp, #16
 8011b66:	af00      	add	r7, sp, #0
 8011b68:	6078      	str	r0, [r7, #4]
 8011b6a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	781a      	ldrb	r2, [r3, #0]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	3301      	adds	r3, #1
 8011b7c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	781a      	ldrb	r2, [r3, #0]
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	3301      	adds	r3, #1
 8011b8a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011b8c:	68f8      	ldr	r0, [r7, #12]
 8011b8e:	f7ff fa16 	bl	8010fbe <SWAPBYTE>
 8011b92:	4603      	mov	r3, r0
 8011b94:	461a      	mov	r2, r3
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011ba6:	68f8      	ldr	r0, [r7, #12]
 8011ba8:	f7ff fa09 	bl	8010fbe <SWAPBYTE>
 8011bac:	4603      	mov	r3, r0
 8011bae:	461a      	mov	r2, r3
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	3301      	adds	r3, #1
 8011bb8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011bc0:	68f8      	ldr	r0, [r7, #12]
 8011bc2:	f7ff f9fc 	bl	8010fbe <SWAPBYTE>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	461a      	mov	r2, r3
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	80da      	strh	r2, [r3, #6]
}
 8011bce:	bf00      	nop
 8011bd0:	3710      	adds	r7, #16
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}

08011bd6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bd6:	b580      	push	{r7, lr}
 8011bd8:	b082      	sub	sp, #8
 8011bda:	af00      	add	r7, sp, #0
 8011bdc:	6078      	str	r0, [r7, #4]
 8011bde:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011be0:	2180      	movs	r1, #128	@ 0x80
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f000 fd00 	bl	80125e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011be8:	2100      	movs	r1, #0
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f000 fcfc 	bl	80125e8 <USBD_LL_StallEP>
}
 8011bf0:	bf00      	nop
 8011bf2:	3708      	adds	r7, #8
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}

08011bf8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b086      	sub	sp, #24
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	60f8      	str	r0, [r7, #12]
 8011c00:	60b9      	str	r1, [r7, #8]
 8011c02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011c04:	2300      	movs	r3, #0
 8011c06:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d042      	beq.n	8011c94 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8011c12:	6938      	ldr	r0, [r7, #16]
 8011c14:	f000 f842 	bl	8011c9c <USBD_GetLen>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	3301      	adds	r3, #1
 8011c1c:	005b      	lsls	r3, r3, #1
 8011c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c22:	d808      	bhi.n	8011c36 <USBD_GetString+0x3e>
 8011c24:	6938      	ldr	r0, [r7, #16]
 8011c26:	f000 f839 	bl	8011c9c <USBD_GetLen>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	b29b      	uxth	r3, r3
 8011c30:	005b      	lsls	r3, r3, #1
 8011c32:	b29a      	uxth	r2, r3
 8011c34:	e001      	b.n	8011c3a <USBD_GetString+0x42>
 8011c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011c3e:	7dfb      	ldrb	r3, [r7, #23]
 8011c40:	68ba      	ldr	r2, [r7, #8]
 8011c42:	4413      	add	r3, r2
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	7812      	ldrb	r2, [r2, #0]
 8011c48:	701a      	strb	r2, [r3, #0]
  idx++;
 8011c4a:	7dfb      	ldrb	r3, [r7, #23]
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011c50:	7dfb      	ldrb	r3, [r7, #23]
 8011c52:	68ba      	ldr	r2, [r7, #8]
 8011c54:	4413      	add	r3, r2
 8011c56:	2203      	movs	r2, #3
 8011c58:	701a      	strb	r2, [r3, #0]
  idx++;
 8011c5a:	7dfb      	ldrb	r3, [r7, #23]
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011c60:	e013      	b.n	8011c8a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8011c62:	7dfb      	ldrb	r3, [r7, #23]
 8011c64:	68ba      	ldr	r2, [r7, #8]
 8011c66:	4413      	add	r3, r2
 8011c68:	693a      	ldr	r2, [r7, #16]
 8011c6a:	7812      	ldrb	r2, [r2, #0]
 8011c6c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011c6e:	693b      	ldr	r3, [r7, #16]
 8011c70:	3301      	adds	r3, #1
 8011c72:	613b      	str	r3, [r7, #16]
    idx++;
 8011c74:	7dfb      	ldrb	r3, [r7, #23]
 8011c76:	3301      	adds	r3, #1
 8011c78:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011c7a:	7dfb      	ldrb	r3, [r7, #23]
 8011c7c:	68ba      	ldr	r2, [r7, #8]
 8011c7e:	4413      	add	r3, r2
 8011c80:	2200      	movs	r2, #0
 8011c82:	701a      	strb	r2, [r3, #0]
    idx++;
 8011c84:	7dfb      	ldrb	r3, [r7, #23]
 8011c86:	3301      	adds	r3, #1
 8011c88:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d1e7      	bne.n	8011c62 <USBD_GetString+0x6a>
 8011c92:	e000      	b.n	8011c96 <USBD_GetString+0x9e>
    return;
 8011c94:	bf00      	nop
  }
}
 8011c96:	3718      	adds	r7, #24
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}

08011c9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	b085      	sub	sp, #20
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011cac:	e005      	b.n	8011cba <USBD_GetLen+0x1e>
  {
    len++;
 8011cae:	7bfb      	ldrb	r3, [r7, #15]
 8011cb0:	3301      	adds	r3, #1
 8011cb2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	3301      	adds	r3, #1
 8011cb8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	781b      	ldrb	r3, [r3, #0]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d1f5      	bne.n	8011cae <USBD_GetLen+0x12>
  }

  return len;
 8011cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3714      	adds	r7, #20
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cce:	4770      	bx	lr

08011cd0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b084      	sub	sp, #16
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	60f8      	str	r0, [r7, #12]
 8011cd8:	60b9      	str	r1, [r7, #8]
 8011cda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	2202      	movs	r2, #2
 8011ce0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	687a      	ldr	r2, [r7, #4]
 8011ce8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	687a      	ldr	r2, [r7, #4]
 8011cee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	68ba      	ldr	r2, [r7, #8]
 8011cf4:	2100      	movs	r1, #0
 8011cf6:	68f8      	ldr	r0, [r7, #12]
 8011cf8:	f000 fcff 	bl	80126fa <USBD_LL_Transmit>

  return USBD_OK;
 8011cfc:	2300      	movs	r3, #0
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	3710      	adds	r7, #16
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}

08011d06 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011d06:	b580      	push	{r7, lr}
 8011d08:	b084      	sub	sp, #16
 8011d0a:	af00      	add	r7, sp, #0
 8011d0c:	60f8      	str	r0, [r7, #12]
 8011d0e:	60b9      	str	r1, [r7, #8]
 8011d10:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	68ba      	ldr	r2, [r7, #8]
 8011d16:	2100      	movs	r1, #0
 8011d18:	68f8      	ldr	r0, [r7, #12]
 8011d1a:	f000 fcee 	bl	80126fa <USBD_LL_Transmit>

  return USBD_OK;
 8011d1e:	2300      	movs	r3, #0
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	3710      	adds	r7, #16
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	60f8      	str	r0, [r7, #12]
 8011d30:	60b9      	str	r1, [r7, #8]
 8011d32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2203      	movs	r2, #3
 8011d38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	687a      	ldr	r2, [r7, #4]
 8011d40:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	687a      	ldr	r2, [r7, #4]
 8011d48:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	68ba      	ldr	r2, [r7, #8]
 8011d50:	2100      	movs	r1, #0
 8011d52:	68f8      	ldr	r0, [r7, #12]
 8011d54:	f000 fcf2 	bl	801273c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011d58:	2300      	movs	r3, #0
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3710      	adds	r7, #16
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}

08011d62 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011d62:	b580      	push	{r7, lr}
 8011d64:	b084      	sub	sp, #16
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	60f8      	str	r0, [r7, #12]
 8011d6a:	60b9      	str	r1, [r7, #8]
 8011d6c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	68ba      	ldr	r2, [r7, #8]
 8011d72:	2100      	movs	r1, #0
 8011d74:	68f8      	ldr	r0, [r7, #12]
 8011d76:	f000 fce1 	bl	801273c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011d7a:	2300      	movs	r3, #0
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3710      	adds	r7, #16
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2204      	movs	r2, #4
 8011d90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011d94:	2300      	movs	r3, #0
 8011d96:	2200      	movs	r2, #0
 8011d98:	2100      	movs	r1, #0
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f000 fcad 	bl	80126fa <USBD_LL_Transmit>

  return USBD_OK;
 8011da0:	2300      	movs	r3, #0
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3708      	adds	r7, #8
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}

08011daa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011daa:	b580      	push	{r7, lr}
 8011dac:	b082      	sub	sp, #8
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2205      	movs	r2, #5
 8011db6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011dba:	2300      	movs	r3, #0
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	2100      	movs	r1, #0
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f000 fcbb 	bl	801273c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011dc6:	2300      	movs	r3, #0
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3708      	adds	r7, #8
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8011dd4:	2201      	movs	r2, #1
 8011dd6:	4913      	ldr	r1, [pc, #76]	@ (8011e24 <MX_USB_DEVICE_Init+0x54>)
 8011dd8:	4813      	ldr	r0, [pc, #76]	@ (8011e28 <MX_USB_DEVICE_Init+0x58>)
 8011dda:	f7fe fccd 	bl	8010778 <USBD_Init>
 8011dde:	4603      	mov	r3, r0
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d001      	beq.n	8011de8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011de4:	f7ef fd3e 	bl	8001864 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8011de8:	4910      	ldr	r1, [pc, #64]	@ (8011e2c <MX_USB_DEVICE_Init+0x5c>)
 8011dea:	480f      	ldr	r0, [pc, #60]	@ (8011e28 <MX_USB_DEVICE_Init+0x58>)
 8011dec:	f7fe fcf4 	bl	80107d8 <USBD_RegisterClass>
 8011df0:	4603      	mov	r3, r0
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d001      	beq.n	8011dfa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011df6:	f7ef fd35 	bl	8001864 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8011dfa:	490d      	ldr	r1, [pc, #52]	@ (8011e30 <MX_USB_DEVICE_Init+0x60>)
 8011dfc:	480a      	ldr	r0, [pc, #40]	@ (8011e28 <MX_USB_DEVICE_Init+0x58>)
 8011dfe:	f7fe fbeb 	bl	80105d8 <USBD_CDC_RegisterInterface>
 8011e02:	4603      	mov	r3, r0
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d001      	beq.n	8011e0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011e08:	f7ef fd2c 	bl	8001864 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8011e0c:	4806      	ldr	r0, [pc, #24]	@ (8011e28 <MX_USB_DEVICE_Init+0x58>)
 8011e0e:	f7fe fd19 	bl	8010844 <USBD_Start>
 8011e12:	4603      	mov	r3, r0
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d001      	beq.n	8011e1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011e18:	f7ef fd24 	bl	8001864 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011e1c:	f7f6 fac6 	bl	80083ac <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011e20:	bf00      	nop
 8011e22:	bd80      	pop	{r7, pc}
 8011e24:	240000b0 	.word	0x240000b0
 8011e28:	24004304 	.word	0x24004304
 8011e2c:	2400001c 	.word	0x2400001c
 8011e30:	2400009c 	.word	0x2400009c

08011e34 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8011e38:	2200      	movs	r2, #0
 8011e3a:	4905      	ldr	r1, [pc, #20]	@ (8011e50 <CDC_Init_HS+0x1c>)
 8011e3c:	4805      	ldr	r0, [pc, #20]	@ (8011e54 <CDC_Init_HS+0x20>)
 8011e3e:	f7fe fbe5 	bl	801060c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8011e42:	4905      	ldr	r1, [pc, #20]	@ (8011e58 <CDC_Init_HS+0x24>)
 8011e44:	4803      	ldr	r0, [pc, #12]	@ (8011e54 <CDC_Init_HS+0x20>)
 8011e46:	f7fe fc03 	bl	8010650 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011e4a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	bd80      	pop	{r7, pc}
 8011e50:	24004de0 	.word	0x24004de0
 8011e54:	24004304 	.word	0x24004304
 8011e58:	240045e0 	.word	0x240045e0

08011e5c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8011e5c:	b480      	push	{r7}
 8011e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8011e60:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	46bd      	mov	sp, r7
 8011e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6a:	4770      	bx	lr

08011e6c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b083      	sub	sp, #12
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	4603      	mov	r3, r0
 8011e74:	6039      	str	r1, [r7, #0]
 8011e76:	71fb      	strb	r3, [r7, #7]
 8011e78:	4613      	mov	r3, r2
 8011e7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8011e7c:	79fb      	ldrb	r3, [r7, #7]
 8011e7e:	2b23      	cmp	r3, #35	@ 0x23
 8011e80:	d84a      	bhi.n	8011f18 <CDC_Control_HS+0xac>
 8011e82:	a201      	add	r2, pc, #4	@ (adr r2, 8011e88 <CDC_Control_HS+0x1c>)
 8011e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e88:	08011f19 	.word	0x08011f19
 8011e8c:	08011f19 	.word	0x08011f19
 8011e90:	08011f19 	.word	0x08011f19
 8011e94:	08011f19 	.word	0x08011f19
 8011e98:	08011f19 	.word	0x08011f19
 8011e9c:	08011f19 	.word	0x08011f19
 8011ea0:	08011f19 	.word	0x08011f19
 8011ea4:	08011f19 	.word	0x08011f19
 8011ea8:	08011f19 	.word	0x08011f19
 8011eac:	08011f19 	.word	0x08011f19
 8011eb0:	08011f19 	.word	0x08011f19
 8011eb4:	08011f19 	.word	0x08011f19
 8011eb8:	08011f19 	.word	0x08011f19
 8011ebc:	08011f19 	.word	0x08011f19
 8011ec0:	08011f19 	.word	0x08011f19
 8011ec4:	08011f19 	.word	0x08011f19
 8011ec8:	08011f19 	.word	0x08011f19
 8011ecc:	08011f19 	.word	0x08011f19
 8011ed0:	08011f19 	.word	0x08011f19
 8011ed4:	08011f19 	.word	0x08011f19
 8011ed8:	08011f19 	.word	0x08011f19
 8011edc:	08011f19 	.word	0x08011f19
 8011ee0:	08011f19 	.word	0x08011f19
 8011ee4:	08011f19 	.word	0x08011f19
 8011ee8:	08011f19 	.word	0x08011f19
 8011eec:	08011f19 	.word	0x08011f19
 8011ef0:	08011f19 	.word	0x08011f19
 8011ef4:	08011f19 	.word	0x08011f19
 8011ef8:	08011f19 	.word	0x08011f19
 8011efc:	08011f19 	.word	0x08011f19
 8011f00:	08011f19 	.word	0x08011f19
 8011f04:	08011f19 	.word	0x08011f19
 8011f08:	08011f19 	.word	0x08011f19
 8011f0c:	08011f19 	.word	0x08011f19
 8011f10:	08011f19 	.word	0x08011f19
 8011f14:	08011f19 	.word	0x08011f19
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011f18:	bf00      	nop
  }

  return (USBD_OK);
 8011f1a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	370c      	adds	r7, #12
 8011f20:	46bd      	mov	sp, r7
 8011f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f26:	4770      	bx	lr

08011f28 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8011f32:	6879      	ldr	r1, [r7, #4]
 8011f34:	4810      	ldr	r0, [pc, #64]	@ (8011f78 <CDC_Receive_HS+0x50>)
 8011f36:	f7fe fb8b 	bl	8010650 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8011f3a:	480f      	ldr	r0, [pc, #60]	@ (8011f78 <CDC_Receive_HS+0x50>)
 8011f3c:	f7fe fbe6 	bl	801070c <USBD_CDC_ReceivePacket>

	memset(usb_rx_buf, '\0', 64);  /* clear the serial data rx buffer */
 8011f40:	2240      	movs	r2, #64	@ 0x40
 8011f42:	2100      	movs	r1, #0
 8011f44:	480d      	ldr	r0, [pc, #52]	@ (8011f7c <CDC_Receive_HS+0x54>)
 8011f46:	f001 ff8c 	bl	8013e62 <memset>
	uint8_t len = (uint8_t) *Len;
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	73fb      	strb	r3, [r7, #15]
	memcpy(usb_rx_buf, Buf, len);  /* copy the incoming data to the buffer */
 8011f50:	7bfb      	ldrb	r3, [r7, #15]
 8011f52:	461a      	mov	r2, r3
 8011f54:	6879      	ldr	r1, [r7, #4]
 8011f56:	4809      	ldr	r0, [pc, #36]	@ (8011f7c <CDC_Receive_HS+0x54>)
 8011f58:	f002 f829 	bl	8013fae <memcpy>
	memset(Buf, '\0', len);   /* clear Buf also */
 8011f5c:	7bfb      	ldrb	r3, [r7, #15]
 8011f5e:	461a      	mov	r2, r3
 8011f60:	2100      	movs	r1, #0
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f001 ff7d 	bl	8013e62 <memset>
	usb_rx_ready = 1;  /* set the serial data rx ready flag */
 8011f68:	4b05      	ldr	r3, [pc, #20]	@ (8011f80 <CDC_Receive_HS+0x58>)
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 8011f6e:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	3710      	adds	r7, #16
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}
 8011f78:	24004304 	.word	0x24004304
 8011f7c:	240042b8 	.word	0x240042b8
 8011f80:	240042f8 	.word	0x240042f8

08011f84 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b084      	sub	sp, #16
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
 8011f8c:	460b      	mov	r3, r1
 8011f8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011f90:	2300      	movs	r3, #0
 8011f92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8011f94:	4b0d      	ldr	r3, [pc, #52]	@ (8011fcc <CDC_Transmit_HS+0x48>)
 8011f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011f9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d001      	beq.n	8011faa <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	e00b      	b.n	8011fc2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8011faa:	887b      	ldrh	r3, [r7, #2]
 8011fac:	461a      	mov	r2, r3
 8011fae:	6879      	ldr	r1, [r7, #4]
 8011fb0:	4806      	ldr	r0, [pc, #24]	@ (8011fcc <CDC_Transmit_HS+0x48>)
 8011fb2:	f7fe fb2b 	bl	801060c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8011fb6:	4805      	ldr	r0, [pc, #20]	@ (8011fcc <CDC_Transmit_HS+0x48>)
 8011fb8:	f7fe fb68 	bl	801068c <USBD_CDC_TransmitPacket>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8011fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3710      	adds	r7, #16
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	24004304 	.word	0x24004304

08011fd0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b087      	sub	sp, #28
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	60f8      	str	r0, [r7, #12]
 8011fd8:	60b9      	str	r1, [r7, #8]
 8011fda:	4613      	mov	r3, r2
 8011fdc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8011fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	371c      	adds	r7, #28
 8011fea:	46bd      	mov	sp, r7
 8011fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff0:	4770      	bx	lr
	...

08011ff4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b083      	sub	sp, #12
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	6039      	str	r1, [r7, #0]
 8011ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	2212      	movs	r2, #18
 8012004:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8012006:	4b03      	ldr	r3, [pc, #12]	@ (8012014 <USBD_HS_DeviceDescriptor+0x20>)
}
 8012008:	4618      	mov	r0, r3
 801200a:	370c      	adds	r7, #12
 801200c:	46bd      	mov	sp, r7
 801200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012012:	4770      	bx	lr
 8012014:	240000d0 	.word	0x240000d0

08012018 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012018:	b480      	push	{r7}
 801201a:	b083      	sub	sp, #12
 801201c:	af00      	add	r7, sp, #0
 801201e:	4603      	mov	r3, r0
 8012020:	6039      	str	r1, [r7, #0]
 8012022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	2204      	movs	r2, #4
 8012028:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801202a:	4b03      	ldr	r3, [pc, #12]	@ (8012038 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801202c:	4618      	mov	r0, r3
 801202e:	370c      	adds	r7, #12
 8012030:	46bd      	mov	sp, r7
 8012032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012036:	4770      	bx	lr
 8012038:	240000e4 	.word	0x240000e4

0801203c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	4603      	mov	r3, r0
 8012044:	6039      	str	r1, [r7, #0]
 8012046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012048:	79fb      	ldrb	r3, [r7, #7]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d105      	bne.n	801205a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801204e:	683a      	ldr	r2, [r7, #0]
 8012050:	4907      	ldr	r1, [pc, #28]	@ (8012070 <USBD_HS_ProductStrDescriptor+0x34>)
 8012052:	4808      	ldr	r0, [pc, #32]	@ (8012074 <USBD_HS_ProductStrDescriptor+0x38>)
 8012054:	f7ff fdd0 	bl	8011bf8 <USBD_GetString>
 8012058:	e004      	b.n	8012064 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801205a:	683a      	ldr	r2, [r7, #0]
 801205c:	4904      	ldr	r1, [pc, #16]	@ (8012070 <USBD_HS_ProductStrDescriptor+0x34>)
 801205e:	4805      	ldr	r0, [pc, #20]	@ (8012074 <USBD_HS_ProductStrDescriptor+0x38>)
 8012060:	f7ff fdca 	bl	8011bf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012064:	4b02      	ldr	r3, [pc, #8]	@ (8012070 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8012066:	4618      	mov	r0, r3
 8012068:	3708      	adds	r7, #8
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}
 801206e:	bf00      	nop
 8012070:	240055e0 	.word	0x240055e0
 8012074:	080168fc 	.word	0x080168fc

08012078 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	4603      	mov	r3, r0
 8012080:	6039      	str	r1, [r7, #0]
 8012082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012084:	683a      	ldr	r2, [r7, #0]
 8012086:	4904      	ldr	r1, [pc, #16]	@ (8012098 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8012088:	4804      	ldr	r0, [pc, #16]	@ (801209c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801208a:	f7ff fdb5 	bl	8011bf8 <USBD_GetString>
  return USBD_StrDesc;
 801208e:	4b02      	ldr	r3, [pc, #8]	@ (8012098 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8012090:	4618      	mov	r0, r3
 8012092:	3708      	adds	r7, #8
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	240055e0 	.word	0x240055e0
 801209c:	08016908 	.word	0x08016908

080120a0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	4603      	mov	r3, r0
 80120a8:	6039      	str	r1, [r7, #0]
 80120aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	221a      	movs	r2, #26
 80120b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80120b2:	f000 f843 	bl	801213c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80120b6:	4b02      	ldr	r3, [pc, #8]	@ (80120c0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80120b8:	4618      	mov	r0, r3
 80120ba:	3708      	adds	r7, #8
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}
 80120c0:	240000e8 	.word	0x240000e8

080120c4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	4603      	mov	r3, r0
 80120cc:	6039      	str	r1, [r7, #0]
 80120ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80120d0:	79fb      	ldrb	r3, [r7, #7]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d105      	bne.n	80120e2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80120d6:	683a      	ldr	r2, [r7, #0]
 80120d8:	4907      	ldr	r1, [pc, #28]	@ (80120f8 <USBD_HS_ConfigStrDescriptor+0x34>)
 80120da:	4808      	ldr	r0, [pc, #32]	@ (80120fc <USBD_HS_ConfigStrDescriptor+0x38>)
 80120dc:	f7ff fd8c 	bl	8011bf8 <USBD_GetString>
 80120e0:	e004      	b.n	80120ec <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80120e2:	683a      	ldr	r2, [r7, #0]
 80120e4:	4904      	ldr	r1, [pc, #16]	@ (80120f8 <USBD_HS_ConfigStrDescriptor+0x34>)
 80120e6:	4805      	ldr	r0, [pc, #20]	@ (80120fc <USBD_HS_ConfigStrDescriptor+0x38>)
 80120e8:	f7ff fd86 	bl	8011bf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80120ec:	4b02      	ldr	r3, [pc, #8]	@ (80120f8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3708      	adds	r7, #8
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	240055e0 	.word	0x240055e0
 80120fc:	08016914 	.word	0x08016914

08012100 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b082      	sub	sp, #8
 8012104:	af00      	add	r7, sp, #0
 8012106:	4603      	mov	r3, r0
 8012108:	6039      	str	r1, [r7, #0]
 801210a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801210c:	79fb      	ldrb	r3, [r7, #7]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d105      	bne.n	801211e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012112:	683a      	ldr	r2, [r7, #0]
 8012114:	4907      	ldr	r1, [pc, #28]	@ (8012134 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012116:	4808      	ldr	r0, [pc, #32]	@ (8012138 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012118:	f7ff fd6e 	bl	8011bf8 <USBD_GetString>
 801211c:	e004      	b.n	8012128 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801211e:	683a      	ldr	r2, [r7, #0]
 8012120:	4904      	ldr	r1, [pc, #16]	@ (8012134 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012122:	4805      	ldr	r0, [pc, #20]	@ (8012138 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012124:	f7ff fd68 	bl	8011bf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012128:	4b02      	ldr	r3, [pc, #8]	@ (8012134 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801212a:	4618      	mov	r0, r3
 801212c:	3708      	adds	r7, #8
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}
 8012132:	bf00      	nop
 8012134:	240055e0 	.word	0x240055e0
 8012138:	08016920 	.word	0x08016920

0801213c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b084      	sub	sp, #16
 8012140:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012142:	4b0f      	ldr	r3, [pc, #60]	@ (8012180 <Get_SerialNum+0x44>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012148:	4b0e      	ldr	r3, [pc, #56]	@ (8012184 <Get_SerialNum+0x48>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801214e:	4b0e      	ldr	r3, [pc, #56]	@ (8012188 <Get_SerialNum+0x4c>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012154:	68fa      	ldr	r2, [r7, #12]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	4413      	add	r3, r2
 801215a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d009      	beq.n	8012176 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012162:	2208      	movs	r2, #8
 8012164:	4909      	ldr	r1, [pc, #36]	@ (801218c <Get_SerialNum+0x50>)
 8012166:	68f8      	ldr	r0, [r7, #12]
 8012168:	f000 f814 	bl	8012194 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801216c:	2204      	movs	r2, #4
 801216e:	4908      	ldr	r1, [pc, #32]	@ (8012190 <Get_SerialNum+0x54>)
 8012170:	68b8      	ldr	r0, [r7, #8]
 8012172:	f000 f80f 	bl	8012194 <IntToUnicode>
  }
}
 8012176:	bf00      	nop
 8012178:	3710      	adds	r7, #16
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}
 801217e:	bf00      	nop
 8012180:	1ff1e800 	.word	0x1ff1e800
 8012184:	1ff1e804 	.word	0x1ff1e804
 8012188:	1ff1e808 	.word	0x1ff1e808
 801218c:	240000ea 	.word	0x240000ea
 8012190:	240000fa 	.word	0x240000fa

08012194 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012194:	b480      	push	{r7}
 8012196:	b087      	sub	sp, #28
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	4613      	mov	r3, r2
 80121a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80121a2:	2300      	movs	r3, #0
 80121a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80121a6:	2300      	movs	r3, #0
 80121a8:	75fb      	strb	r3, [r7, #23]
 80121aa:	e027      	b.n	80121fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	0f1b      	lsrs	r3, r3, #28
 80121b0:	2b09      	cmp	r3, #9
 80121b2:	d80b      	bhi.n	80121cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	0f1b      	lsrs	r3, r3, #28
 80121b8:	b2da      	uxtb	r2, r3
 80121ba:	7dfb      	ldrb	r3, [r7, #23]
 80121bc:	005b      	lsls	r3, r3, #1
 80121be:	4619      	mov	r1, r3
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	440b      	add	r3, r1
 80121c4:	3230      	adds	r2, #48	@ 0x30
 80121c6:	b2d2      	uxtb	r2, r2
 80121c8:	701a      	strb	r2, [r3, #0]
 80121ca:	e00a      	b.n	80121e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	0f1b      	lsrs	r3, r3, #28
 80121d0:	b2da      	uxtb	r2, r3
 80121d2:	7dfb      	ldrb	r3, [r7, #23]
 80121d4:	005b      	lsls	r3, r3, #1
 80121d6:	4619      	mov	r1, r3
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	440b      	add	r3, r1
 80121dc:	3237      	adds	r2, #55	@ 0x37
 80121de:	b2d2      	uxtb	r2, r2
 80121e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	011b      	lsls	r3, r3, #4
 80121e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80121e8:	7dfb      	ldrb	r3, [r7, #23]
 80121ea:	005b      	lsls	r3, r3, #1
 80121ec:	3301      	adds	r3, #1
 80121ee:	68ba      	ldr	r2, [r7, #8]
 80121f0:	4413      	add	r3, r2
 80121f2:	2200      	movs	r2, #0
 80121f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80121f6:	7dfb      	ldrb	r3, [r7, #23]
 80121f8:	3301      	adds	r3, #1
 80121fa:	75fb      	strb	r3, [r7, #23]
 80121fc:	7dfa      	ldrb	r2, [r7, #23]
 80121fe:	79fb      	ldrb	r3, [r7, #7]
 8012200:	429a      	cmp	r2, r3
 8012202:	d3d3      	bcc.n	80121ac <IntToUnicode+0x18>
  }
}
 8012204:	bf00      	nop
 8012206:	bf00      	nop
 8012208:	371c      	adds	r7, #28
 801220a:	46bd      	mov	sp, r7
 801220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012210:	4770      	bx	lr
	...

08012214 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b0b2      	sub	sp, #200	@ 0xc8
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801221c:	f107 0310 	add.w	r3, r7, #16
 8012220:	22b8      	movs	r2, #184	@ 0xb8
 8012222:	2100      	movs	r1, #0
 8012224:	4618      	mov	r0, r3
 8012226:	f001 fe1c 	bl	8013e62 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	4a1a      	ldr	r2, [pc, #104]	@ (8012298 <HAL_PCD_MspInit+0x84>)
 8012230:	4293      	cmp	r3, r2
 8012232:	d12c      	bne.n	801228e <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012234:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8012238:	f04f 0300 	mov.w	r3, #0
 801223c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012240:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8012244:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012248:	f107 0310 	add.w	r3, r7, #16
 801224c:	4618      	mov	r0, r3
 801224e:	f7f7 f823 	bl	8009298 <HAL_RCCEx_PeriphCLKConfig>
 8012252:	4603      	mov	r3, r0
 8012254:	2b00      	cmp	r3, #0
 8012256:	d001      	beq.n	801225c <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8012258:	f7ef fb04 	bl	8001864 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801225c:	f7f6 f8a6 	bl	80083ac <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8012260:	4b0e      	ldr	r3, [pc, #56]	@ (801229c <HAL_PCD_MspInit+0x88>)
 8012262:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012266:	4a0d      	ldr	r2, [pc, #52]	@ (801229c <HAL_PCD_MspInit+0x88>)
 8012268:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801226c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8012270:	4b0a      	ldr	r3, [pc, #40]	@ (801229c <HAL_PCD_MspInit+0x88>)
 8012272:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801227a:	60fb      	str	r3, [r7, #12]
 801227c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801227e:	2200      	movs	r2, #0
 8012280:	2100      	movs	r1, #0
 8012282:	204d      	movs	r0, #77	@ 0x4d
 8012284:	f7f2 fbf5 	bl	8004a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8012288:	204d      	movs	r0, #77	@ 0x4d
 801228a:	f7f2 fc0c 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801228e:	bf00      	nop
 8012290:	37c8      	adds	r7, #200	@ 0xc8
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}
 8012296:	bf00      	nop
 8012298:	40040000 	.word	0x40040000
 801229c:	58024400 	.word	0x58024400

080122a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80122b4:	4619      	mov	r1, r3
 80122b6:	4610      	mov	r0, r2
 80122b8:	f7fe fb11 	bl	80108de <USBD_LL_SetupStage>
}
 80122bc:	bf00      	nop
 80122be:	3708      	adds	r7, #8
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b082      	sub	sp, #8
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	460b      	mov	r3, r1
 80122ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80122d6:	78fa      	ldrb	r2, [r7, #3]
 80122d8:	6879      	ldr	r1, [r7, #4]
 80122da:	4613      	mov	r3, r2
 80122dc:	00db      	lsls	r3, r3, #3
 80122de:	4413      	add	r3, r2
 80122e0:	009b      	lsls	r3, r3, #2
 80122e2:	440b      	add	r3, r1
 80122e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80122e8:	681a      	ldr	r2, [r3, #0]
 80122ea:	78fb      	ldrb	r3, [r7, #3]
 80122ec:	4619      	mov	r1, r3
 80122ee:	f7fe fb4b 	bl	8010988 <USBD_LL_DataOutStage>
}
 80122f2:	bf00      	nop
 80122f4:	3708      	adds	r7, #8
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}

080122fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122fa:	b580      	push	{r7, lr}
 80122fc:	b082      	sub	sp, #8
 80122fe:	af00      	add	r7, sp, #0
 8012300:	6078      	str	r0, [r7, #4]
 8012302:	460b      	mov	r3, r1
 8012304:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801230c:	78fa      	ldrb	r2, [r7, #3]
 801230e:	6879      	ldr	r1, [r7, #4]
 8012310:	4613      	mov	r3, r2
 8012312:	00db      	lsls	r3, r3, #3
 8012314:	4413      	add	r3, r2
 8012316:	009b      	lsls	r3, r3, #2
 8012318:	440b      	add	r3, r1
 801231a:	3320      	adds	r3, #32
 801231c:	681a      	ldr	r2, [r3, #0]
 801231e:	78fb      	ldrb	r3, [r7, #3]
 8012320:	4619      	mov	r1, r3
 8012322:	f7fe fbe4 	bl	8010aee <USBD_LL_DataInStage>
}
 8012326:	bf00      	nop
 8012328:	3708      	adds	r7, #8
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}

0801232e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801232e:	b580      	push	{r7, lr}
 8012330:	b082      	sub	sp, #8
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801233c:	4618      	mov	r0, r3
 801233e:	f7fe fd1e 	bl	8010d7e <USBD_LL_SOF>
}
 8012342:	bf00      	nop
 8012344:	3708      	adds	r7, #8
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}

0801234a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801234a:	b580      	push	{r7, lr}
 801234c:	b084      	sub	sp, #16
 801234e:	af00      	add	r7, sp, #0
 8012350:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012352:	2301      	movs	r3, #1
 8012354:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	79db      	ldrb	r3, [r3, #7]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d102      	bne.n	8012364 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801235e:	2300      	movs	r3, #0
 8012360:	73fb      	strb	r3, [r7, #15]
 8012362:	e008      	b.n	8012376 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	79db      	ldrb	r3, [r3, #7]
 8012368:	2b02      	cmp	r3, #2
 801236a:	d102      	bne.n	8012372 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801236c:	2301      	movs	r3, #1
 801236e:	73fb      	strb	r3, [r7, #15]
 8012370:	e001      	b.n	8012376 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012372:	f7ef fa77 	bl	8001864 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801237c:	7bfa      	ldrb	r2, [r7, #15]
 801237e:	4611      	mov	r1, r2
 8012380:	4618      	mov	r0, r3
 8012382:	f7fe fcb8 	bl	8010cf6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801238c:	4618      	mov	r0, r3
 801238e:	f7fe fc60 	bl	8010c52 <USBD_LL_Reset>
}
 8012392:	bf00      	nop
 8012394:	3710      	adds	r7, #16
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
	...

0801239c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7fe fcb3 	bl	8010d16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	687a      	ldr	r2, [r7, #4]
 80123bc:	6812      	ldr	r2, [r2, #0]
 80123be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80123c2:	f043 0301 	orr.w	r3, r3, #1
 80123c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	7adb      	ldrb	r3, [r3, #11]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d005      	beq.n	80123dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80123d0:	4b04      	ldr	r3, [pc, #16]	@ (80123e4 <HAL_PCD_SuspendCallback+0x48>)
 80123d2:	691b      	ldr	r3, [r3, #16]
 80123d4:	4a03      	ldr	r2, [pc, #12]	@ (80123e4 <HAL_PCD_SuspendCallback+0x48>)
 80123d6:	f043 0306 	orr.w	r3, r3, #6
 80123da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80123dc:	bf00      	nop
 80123de:	3708      	adds	r7, #8
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}
 80123e4:	e000ed00 	.word	0xe000ed00

080123e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7fe fca9 	bl	8010d4e <USBD_LL_Resume>
}
 80123fc:	bf00      	nop
 80123fe:	3708      	adds	r7, #8
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b082      	sub	sp, #8
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
 801240c:	460b      	mov	r3, r1
 801240e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012416:	78fa      	ldrb	r2, [r7, #3]
 8012418:	4611      	mov	r1, r2
 801241a:	4618      	mov	r0, r3
 801241c:	f7fe fd01 	bl	8010e22 <USBD_LL_IsoOUTIncomplete>
}
 8012420:	bf00      	nop
 8012422:	3708      	adds	r7, #8
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	460b      	mov	r3, r1
 8012432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801243a:	78fa      	ldrb	r2, [r7, #3]
 801243c:	4611      	mov	r1, r2
 801243e:	4618      	mov	r0, r3
 8012440:	f7fe fcbd 	bl	8010dbe <USBD_LL_IsoINIncomplete>
}
 8012444:	bf00      	nop
 8012446:	3708      	adds	r7, #8
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}

0801244c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801245a:	4618      	mov	r0, r3
 801245c:	f7fe fd13 	bl	8010e86 <USBD_LL_DevConnected>
}
 8012460:	bf00      	nop
 8012462:	3708      	adds	r7, #8
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}

08012468 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b082      	sub	sp, #8
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012476:	4618      	mov	r0, r3
 8012478:	f7fe fd10 	bl	8010e9c <USBD_LL_DevDisconnected>
}
 801247c:	bf00      	nop
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	2b01      	cmp	r3, #1
 8012492:	d140      	bne.n	8012516 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8012494:	4a22      	ldr	r2, [pc, #136]	@ (8012520 <USBD_LL_Init+0x9c>)
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	4a20      	ldr	r2, [pc, #128]	@ (8012520 <USBD_LL_Init+0x9c>)
 80124a0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80124a4:	4b1e      	ldr	r3, [pc, #120]	@ (8012520 <USBD_LL_Init+0x9c>)
 80124a6:	4a1f      	ldr	r2, [pc, #124]	@ (8012524 <USBD_LL_Init+0xa0>)
 80124a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80124aa:	4b1d      	ldr	r3, [pc, #116]	@ (8012520 <USBD_LL_Init+0x9c>)
 80124ac:	2209      	movs	r2, #9
 80124ae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80124b0:	4b1b      	ldr	r3, [pc, #108]	@ (8012520 <USBD_LL_Init+0x9c>)
 80124b2:	2202      	movs	r2, #2
 80124b4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80124b6:	4b1a      	ldr	r3, [pc, #104]	@ (8012520 <USBD_LL_Init+0x9c>)
 80124b8:	2200      	movs	r2, #0
 80124ba:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80124bc:	4b18      	ldr	r3, [pc, #96]	@ (8012520 <USBD_LL_Init+0x9c>)
 80124be:	2202      	movs	r2, #2
 80124c0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80124c2:	4b17      	ldr	r3, [pc, #92]	@ (8012520 <USBD_LL_Init+0x9c>)
 80124c4:	2200      	movs	r2, #0
 80124c6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80124c8:	4b15      	ldr	r3, [pc, #84]	@ (8012520 <USBD_LL_Init+0x9c>)
 80124ca:	2200      	movs	r2, #0
 80124cc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80124ce:	4b14      	ldr	r3, [pc, #80]	@ (8012520 <USBD_LL_Init+0x9c>)
 80124d0:	2200      	movs	r2, #0
 80124d2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80124d4:	4b12      	ldr	r3, [pc, #72]	@ (8012520 <USBD_LL_Init+0x9c>)
 80124d6:	2200      	movs	r2, #0
 80124d8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80124da:	4b11      	ldr	r3, [pc, #68]	@ (8012520 <USBD_LL_Init+0x9c>)
 80124dc:	2200      	movs	r2, #0
 80124de:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80124e0:	4b0f      	ldr	r3, [pc, #60]	@ (8012520 <USBD_LL_Init+0x9c>)
 80124e2:	2200      	movs	r2, #0
 80124e4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80124e6:	480e      	ldr	r0, [pc, #56]	@ (8012520 <USBD_LL_Init+0x9c>)
 80124e8:	f7f4 fc87 	bl	8006dfa <HAL_PCD_Init>
 80124ec:	4603      	mov	r3, r0
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d001      	beq.n	80124f6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80124f2:	f7ef f9b7 	bl	8001864 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80124f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80124fa:	4809      	ldr	r0, [pc, #36]	@ (8012520 <USBD_LL_Init+0x9c>)
 80124fc:	f7f5 fedb 	bl	80082b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8012500:	2280      	movs	r2, #128	@ 0x80
 8012502:	2100      	movs	r1, #0
 8012504:	4806      	ldr	r0, [pc, #24]	@ (8012520 <USBD_LL_Init+0x9c>)
 8012506:	f7f5 fe8f 	bl	8008228 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801250a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 801250e:	2101      	movs	r1, #1
 8012510:	4803      	ldr	r0, [pc, #12]	@ (8012520 <USBD_LL_Init+0x9c>)
 8012512:	f7f5 fe89 	bl	8008228 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8012516:	2300      	movs	r3, #0
}
 8012518:	4618      	mov	r0, r3
 801251a:	3708      	adds	r7, #8
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}
 8012520:	240057e0 	.word	0x240057e0
 8012524:	40040000 	.word	0x40040000

08012528 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b084      	sub	sp, #16
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012530:	2300      	movs	r3, #0
 8012532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012534:	2300      	movs	r3, #0
 8012536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801253e:	4618      	mov	r0, r3
 8012540:	f7f4 fd67 	bl	8007012 <HAL_PCD_Start>
 8012544:	4603      	mov	r3, r0
 8012546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012548:	7bfb      	ldrb	r3, [r7, #15]
 801254a:	4618      	mov	r0, r3
 801254c:	f000 f942 	bl	80127d4 <USBD_Get_USB_Status>
 8012550:	4603      	mov	r3, r0
 8012552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012554:	7bbb      	ldrb	r3, [r7, #14]
}
 8012556:	4618      	mov	r0, r3
 8012558:	3710      	adds	r7, #16
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}

0801255e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801255e:	b580      	push	{r7, lr}
 8012560:	b084      	sub	sp, #16
 8012562:	af00      	add	r7, sp, #0
 8012564:	6078      	str	r0, [r7, #4]
 8012566:	4608      	mov	r0, r1
 8012568:	4611      	mov	r1, r2
 801256a:	461a      	mov	r2, r3
 801256c:	4603      	mov	r3, r0
 801256e:	70fb      	strb	r3, [r7, #3]
 8012570:	460b      	mov	r3, r1
 8012572:	70bb      	strb	r3, [r7, #2]
 8012574:	4613      	mov	r3, r2
 8012576:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012578:	2300      	movs	r3, #0
 801257a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801257c:	2300      	movs	r3, #0
 801257e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012586:	78bb      	ldrb	r3, [r7, #2]
 8012588:	883a      	ldrh	r2, [r7, #0]
 801258a:	78f9      	ldrb	r1, [r7, #3]
 801258c:	f7f5 fa68 	bl	8007a60 <HAL_PCD_EP_Open>
 8012590:	4603      	mov	r3, r0
 8012592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012594:	7bfb      	ldrb	r3, [r7, #15]
 8012596:	4618      	mov	r0, r3
 8012598:	f000 f91c 	bl	80127d4 <USBD_Get_USB_Status>
 801259c:	4603      	mov	r3, r0
 801259e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3710      	adds	r7, #16
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}

080125aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125aa:	b580      	push	{r7, lr}
 80125ac:	b084      	sub	sp, #16
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	6078      	str	r0, [r7, #4]
 80125b2:	460b      	mov	r3, r1
 80125b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125b6:	2300      	movs	r3, #0
 80125b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125ba:	2300      	movs	r3, #0
 80125bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80125c4:	78fa      	ldrb	r2, [r7, #3]
 80125c6:	4611      	mov	r1, r2
 80125c8:	4618      	mov	r0, r3
 80125ca:	f7f5 fab1 	bl	8007b30 <HAL_PCD_EP_Close>
 80125ce:	4603      	mov	r3, r0
 80125d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125d2:	7bfb      	ldrb	r3, [r7, #15]
 80125d4:	4618      	mov	r0, r3
 80125d6:	f000 f8fd 	bl	80127d4 <USBD_Get_USB_Status>
 80125da:	4603      	mov	r3, r0
 80125dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125de:	7bbb      	ldrb	r3, [r7, #14]
}
 80125e0:	4618      	mov	r0, r3
 80125e2:	3710      	adds	r7, #16
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}

080125e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b084      	sub	sp, #16
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	460b      	mov	r3, r1
 80125f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125f4:	2300      	movs	r3, #0
 80125f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125f8:	2300      	movs	r3, #0
 80125fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012602:	78fa      	ldrb	r2, [r7, #3]
 8012604:	4611      	mov	r1, r2
 8012606:	4618      	mov	r0, r3
 8012608:	f7f5 fb69 	bl	8007cde <HAL_PCD_EP_SetStall>
 801260c:	4603      	mov	r3, r0
 801260e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012610:	7bfb      	ldrb	r3, [r7, #15]
 8012612:	4618      	mov	r0, r3
 8012614:	f000 f8de 	bl	80127d4 <USBD_Get_USB_Status>
 8012618:	4603      	mov	r3, r0
 801261a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801261c:	7bbb      	ldrb	r3, [r7, #14]
}
 801261e:	4618      	mov	r0, r3
 8012620:	3710      	adds	r7, #16
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}

08012626 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012626:	b580      	push	{r7, lr}
 8012628:	b084      	sub	sp, #16
 801262a:	af00      	add	r7, sp, #0
 801262c:	6078      	str	r0, [r7, #4]
 801262e:	460b      	mov	r3, r1
 8012630:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012632:	2300      	movs	r3, #0
 8012634:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012636:	2300      	movs	r3, #0
 8012638:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012640:	78fa      	ldrb	r2, [r7, #3]
 8012642:	4611      	mov	r1, r2
 8012644:	4618      	mov	r0, r3
 8012646:	f7f5 fbad 	bl	8007da4 <HAL_PCD_EP_ClrStall>
 801264a:	4603      	mov	r3, r0
 801264c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801264e:	7bfb      	ldrb	r3, [r7, #15]
 8012650:	4618      	mov	r0, r3
 8012652:	f000 f8bf 	bl	80127d4 <USBD_Get_USB_Status>
 8012656:	4603      	mov	r3, r0
 8012658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801265a:	7bbb      	ldrb	r3, [r7, #14]
}
 801265c:	4618      	mov	r0, r3
 801265e:	3710      	adds	r7, #16
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}

08012664 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012664:	b480      	push	{r7}
 8012666:	b085      	sub	sp, #20
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	460b      	mov	r3, r1
 801266e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012676:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012678:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801267c:	2b00      	cmp	r3, #0
 801267e:	da0b      	bge.n	8012698 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012680:	78fb      	ldrb	r3, [r7, #3]
 8012682:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012686:	68f9      	ldr	r1, [r7, #12]
 8012688:	4613      	mov	r3, r2
 801268a:	00db      	lsls	r3, r3, #3
 801268c:	4413      	add	r3, r2
 801268e:	009b      	lsls	r3, r3, #2
 8012690:	440b      	add	r3, r1
 8012692:	3316      	adds	r3, #22
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	e00b      	b.n	80126b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012698:	78fb      	ldrb	r3, [r7, #3]
 801269a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801269e:	68f9      	ldr	r1, [r7, #12]
 80126a0:	4613      	mov	r3, r2
 80126a2:	00db      	lsls	r3, r3, #3
 80126a4:	4413      	add	r3, r2
 80126a6:	009b      	lsls	r3, r3, #2
 80126a8:	440b      	add	r3, r1
 80126aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80126ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3714      	adds	r7, #20
 80126b4:	46bd      	mov	sp, r7
 80126b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ba:	4770      	bx	lr

080126bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b084      	sub	sp, #16
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	460b      	mov	r3, r1
 80126c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126c8:	2300      	movs	r3, #0
 80126ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126cc:	2300      	movs	r3, #0
 80126ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80126d6:	78fa      	ldrb	r2, [r7, #3]
 80126d8:	4611      	mov	r1, r2
 80126da:	4618      	mov	r0, r3
 80126dc:	f7f5 f99c 	bl	8007a18 <HAL_PCD_SetAddress>
 80126e0:	4603      	mov	r3, r0
 80126e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126e4:	7bfb      	ldrb	r3, [r7, #15]
 80126e6:	4618      	mov	r0, r3
 80126e8:	f000 f874 	bl	80127d4 <USBD_Get_USB_Status>
 80126ec:	4603      	mov	r3, r0
 80126ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3710      	adds	r7, #16
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}

080126fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80126fa:	b580      	push	{r7, lr}
 80126fc:	b086      	sub	sp, #24
 80126fe:	af00      	add	r7, sp, #0
 8012700:	60f8      	str	r0, [r7, #12]
 8012702:	607a      	str	r2, [r7, #4]
 8012704:	603b      	str	r3, [r7, #0]
 8012706:	460b      	mov	r3, r1
 8012708:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801270a:	2300      	movs	r3, #0
 801270c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801270e:	2300      	movs	r3, #0
 8012710:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012718:	7af9      	ldrb	r1, [r7, #11]
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	687a      	ldr	r2, [r7, #4]
 801271e:	f7f5 faa4 	bl	8007c6a <HAL_PCD_EP_Transmit>
 8012722:	4603      	mov	r3, r0
 8012724:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012726:	7dfb      	ldrb	r3, [r7, #23]
 8012728:	4618      	mov	r0, r3
 801272a:	f000 f853 	bl	80127d4 <USBD_Get_USB_Status>
 801272e:	4603      	mov	r3, r0
 8012730:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012732:	7dbb      	ldrb	r3, [r7, #22]
}
 8012734:	4618      	mov	r0, r3
 8012736:	3718      	adds	r7, #24
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}

0801273c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b086      	sub	sp, #24
 8012740:	af00      	add	r7, sp, #0
 8012742:	60f8      	str	r0, [r7, #12]
 8012744:	607a      	str	r2, [r7, #4]
 8012746:	603b      	str	r3, [r7, #0]
 8012748:	460b      	mov	r3, r1
 801274a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801274c:	2300      	movs	r3, #0
 801274e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012750:	2300      	movs	r3, #0
 8012752:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801275a:	7af9      	ldrb	r1, [r7, #11]
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	687a      	ldr	r2, [r7, #4]
 8012760:	f7f5 fa30 	bl	8007bc4 <HAL_PCD_EP_Receive>
 8012764:	4603      	mov	r3, r0
 8012766:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012768:	7dfb      	ldrb	r3, [r7, #23]
 801276a:	4618      	mov	r0, r3
 801276c:	f000 f832 	bl	80127d4 <USBD_Get_USB_Status>
 8012770:	4603      	mov	r3, r0
 8012772:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012774:	7dbb      	ldrb	r3, [r7, #22]
}
 8012776:	4618      	mov	r0, r3
 8012778:	3718      	adds	r7, #24
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}

0801277e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801277e:	b580      	push	{r7, lr}
 8012780:	b082      	sub	sp, #8
 8012782:	af00      	add	r7, sp, #0
 8012784:	6078      	str	r0, [r7, #4]
 8012786:	460b      	mov	r3, r1
 8012788:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012790:	78fa      	ldrb	r2, [r7, #3]
 8012792:	4611      	mov	r1, r2
 8012794:	4618      	mov	r0, r3
 8012796:	f7f5 fa50 	bl	8007c3a <HAL_PCD_EP_GetRxCount>
 801279a:	4603      	mov	r3, r0
}
 801279c:	4618      	mov	r0, r3
 801279e:	3708      	adds	r7, #8
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}

080127a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80127ac:	4b03      	ldr	r3, [pc, #12]	@ (80127bc <USBD_static_malloc+0x18>)
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	370c      	adds	r7, #12
 80127b2:	46bd      	mov	sp, r7
 80127b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop
 80127bc:	24005cc4 	.word	0x24005cc4

080127c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80127c0:	b480      	push	{r7}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80127c8:	bf00      	nop
 80127ca:	370c      	adds	r7, #12
 80127cc:	46bd      	mov	sp, r7
 80127ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d2:	4770      	bx	lr

080127d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80127d4:	b480      	push	{r7}
 80127d6:	b085      	sub	sp, #20
 80127d8:	af00      	add	r7, sp, #0
 80127da:	4603      	mov	r3, r0
 80127dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127de:	2300      	movs	r3, #0
 80127e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80127e2:	79fb      	ldrb	r3, [r7, #7]
 80127e4:	2b03      	cmp	r3, #3
 80127e6:	d817      	bhi.n	8012818 <USBD_Get_USB_Status+0x44>
 80127e8:	a201      	add	r2, pc, #4	@ (adr r2, 80127f0 <USBD_Get_USB_Status+0x1c>)
 80127ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127ee:	bf00      	nop
 80127f0:	08012801 	.word	0x08012801
 80127f4:	08012807 	.word	0x08012807
 80127f8:	0801280d 	.word	0x0801280d
 80127fc:	08012813 	.word	0x08012813
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012800:	2300      	movs	r3, #0
 8012802:	73fb      	strb	r3, [r7, #15]
    break;
 8012804:	e00b      	b.n	801281e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012806:	2303      	movs	r3, #3
 8012808:	73fb      	strb	r3, [r7, #15]
    break;
 801280a:	e008      	b.n	801281e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801280c:	2301      	movs	r3, #1
 801280e:	73fb      	strb	r3, [r7, #15]
    break;
 8012810:	e005      	b.n	801281e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012812:	2303      	movs	r3, #3
 8012814:	73fb      	strb	r3, [r7, #15]
    break;
 8012816:	e002      	b.n	801281e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012818:	2303      	movs	r3, #3
 801281a:	73fb      	strb	r3, [r7, #15]
    break;
 801281c:	bf00      	nop
  }
  return usb_status;
 801281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012820:	4618      	mov	r0, r3
 8012822:	3714      	adds	r7, #20
 8012824:	46bd      	mov	sp, r7
 8012826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282a:	4770      	bx	lr

0801282c <atof>:
 801282c:	2100      	movs	r1, #0
 801282e:	f000 bdb1 	b.w	8013394 <strtod>

08012832 <sulp>:
 8012832:	b570      	push	{r4, r5, r6, lr}
 8012834:	4604      	mov	r4, r0
 8012836:	460d      	mov	r5, r1
 8012838:	4616      	mov	r6, r2
 801283a:	ec45 4b10 	vmov	d0, r4, r5
 801283e:	f003 f96d 	bl	8015b1c <__ulp>
 8012842:	b17e      	cbz	r6, 8012864 <sulp+0x32>
 8012844:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012848:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801284c:	2b00      	cmp	r3, #0
 801284e:	dd09      	ble.n	8012864 <sulp+0x32>
 8012850:	051b      	lsls	r3, r3, #20
 8012852:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8012856:	2000      	movs	r0, #0
 8012858:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801285c:	ec41 0b17 	vmov	d7, r0, r1
 8012860:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012864:	bd70      	pop	{r4, r5, r6, pc}
	...

08012868 <_strtod_l>:
 8012868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801286c:	ed2d 8b0a 	vpush	{d8-d12}
 8012870:	b097      	sub	sp, #92	@ 0x5c
 8012872:	4688      	mov	r8, r1
 8012874:	920e      	str	r2, [sp, #56]	@ 0x38
 8012876:	2200      	movs	r2, #0
 8012878:	9212      	str	r2, [sp, #72]	@ 0x48
 801287a:	9005      	str	r0, [sp, #20]
 801287c:	f04f 0a00 	mov.w	sl, #0
 8012880:	f04f 0b00 	mov.w	fp, #0
 8012884:	460a      	mov	r2, r1
 8012886:	9211      	str	r2, [sp, #68]	@ 0x44
 8012888:	7811      	ldrb	r1, [r2, #0]
 801288a:	292b      	cmp	r1, #43	@ 0x2b
 801288c:	d04c      	beq.n	8012928 <_strtod_l+0xc0>
 801288e:	d839      	bhi.n	8012904 <_strtod_l+0x9c>
 8012890:	290d      	cmp	r1, #13
 8012892:	d833      	bhi.n	80128fc <_strtod_l+0x94>
 8012894:	2908      	cmp	r1, #8
 8012896:	d833      	bhi.n	8012900 <_strtod_l+0x98>
 8012898:	2900      	cmp	r1, #0
 801289a:	d03c      	beq.n	8012916 <_strtod_l+0xae>
 801289c:	2200      	movs	r2, #0
 801289e:	9208      	str	r2, [sp, #32]
 80128a0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80128a2:	782a      	ldrb	r2, [r5, #0]
 80128a4:	2a30      	cmp	r2, #48	@ 0x30
 80128a6:	f040 80b5 	bne.w	8012a14 <_strtod_l+0x1ac>
 80128aa:	786a      	ldrb	r2, [r5, #1]
 80128ac:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80128b0:	2a58      	cmp	r2, #88	@ 0x58
 80128b2:	d170      	bne.n	8012996 <_strtod_l+0x12e>
 80128b4:	9302      	str	r3, [sp, #8]
 80128b6:	9b08      	ldr	r3, [sp, #32]
 80128b8:	9301      	str	r3, [sp, #4]
 80128ba:	ab12      	add	r3, sp, #72	@ 0x48
 80128bc:	9300      	str	r3, [sp, #0]
 80128be:	4a8b      	ldr	r2, [pc, #556]	@ (8012aec <_strtod_l+0x284>)
 80128c0:	9805      	ldr	r0, [sp, #20]
 80128c2:	ab13      	add	r3, sp, #76	@ 0x4c
 80128c4:	a911      	add	r1, sp, #68	@ 0x44
 80128c6:	f002 fa1b 	bl	8014d00 <__gethex>
 80128ca:	f010 060f 	ands.w	r6, r0, #15
 80128ce:	4604      	mov	r4, r0
 80128d0:	d005      	beq.n	80128de <_strtod_l+0x76>
 80128d2:	2e06      	cmp	r6, #6
 80128d4:	d12a      	bne.n	801292c <_strtod_l+0xc4>
 80128d6:	3501      	adds	r5, #1
 80128d8:	2300      	movs	r3, #0
 80128da:	9511      	str	r5, [sp, #68]	@ 0x44
 80128dc:	9308      	str	r3, [sp, #32]
 80128de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	f040 852f 	bne.w	8013344 <_strtod_l+0xadc>
 80128e6:	9b08      	ldr	r3, [sp, #32]
 80128e8:	ec4b ab10 	vmov	d0, sl, fp
 80128ec:	b1cb      	cbz	r3, 8012922 <_strtod_l+0xba>
 80128ee:	eeb1 0b40 	vneg.f64	d0, d0
 80128f2:	b017      	add	sp, #92	@ 0x5c
 80128f4:	ecbd 8b0a 	vpop	{d8-d12}
 80128f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128fc:	2920      	cmp	r1, #32
 80128fe:	d1cd      	bne.n	801289c <_strtod_l+0x34>
 8012900:	3201      	adds	r2, #1
 8012902:	e7c0      	b.n	8012886 <_strtod_l+0x1e>
 8012904:	292d      	cmp	r1, #45	@ 0x2d
 8012906:	d1c9      	bne.n	801289c <_strtod_l+0x34>
 8012908:	2101      	movs	r1, #1
 801290a:	9108      	str	r1, [sp, #32]
 801290c:	1c51      	adds	r1, r2, #1
 801290e:	9111      	str	r1, [sp, #68]	@ 0x44
 8012910:	7852      	ldrb	r2, [r2, #1]
 8012912:	2a00      	cmp	r2, #0
 8012914:	d1c4      	bne.n	80128a0 <_strtod_l+0x38>
 8012916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012918:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801291c:	2b00      	cmp	r3, #0
 801291e:	f040 850f 	bne.w	8013340 <_strtod_l+0xad8>
 8012922:	ec4b ab10 	vmov	d0, sl, fp
 8012926:	e7e4      	b.n	80128f2 <_strtod_l+0x8a>
 8012928:	2100      	movs	r1, #0
 801292a:	e7ee      	b.n	801290a <_strtod_l+0xa2>
 801292c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801292e:	b13a      	cbz	r2, 8012940 <_strtod_l+0xd8>
 8012930:	2135      	movs	r1, #53	@ 0x35
 8012932:	a814      	add	r0, sp, #80	@ 0x50
 8012934:	f003 f9e9 	bl	8015d0a <__copybits>
 8012938:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801293a:	9805      	ldr	r0, [sp, #20]
 801293c:	f002 fdba 	bl	80154b4 <_Bfree>
 8012940:	1e73      	subs	r3, r6, #1
 8012942:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012944:	2b04      	cmp	r3, #4
 8012946:	d806      	bhi.n	8012956 <_strtod_l+0xee>
 8012948:	e8df f003 	tbb	[pc, r3]
 801294c:	201d0314 	.word	0x201d0314
 8012950:	14          	.byte	0x14
 8012951:	00          	.byte	0x00
 8012952:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8012956:	05e3      	lsls	r3, r4, #23
 8012958:	bf48      	it	mi
 801295a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801295e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012962:	0d1b      	lsrs	r3, r3, #20
 8012964:	051b      	lsls	r3, r3, #20
 8012966:	2b00      	cmp	r3, #0
 8012968:	d1b9      	bne.n	80128de <_strtod_l+0x76>
 801296a:	f001 faeb 	bl	8013f44 <__errno>
 801296e:	2322      	movs	r3, #34	@ 0x22
 8012970:	6003      	str	r3, [r0, #0]
 8012972:	e7b4      	b.n	80128de <_strtod_l+0x76>
 8012974:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8012978:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801297c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012980:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012984:	e7e7      	b.n	8012956 <_strtod_l+0xee>
 8012986:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8012af4 <_strtod_l+0x28c>
 801298a:	e7e4      	b.n	8012956 <_strtod_l+0xee>
 801298c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012990:	f04f 3aff 	mov.w	sl, #4294967295
 8012994:	e7df      	b.n	8012956 <_strtod_l+0xee>
 8012996:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012998:	1c5a      	adds	r2, r3, #1
 801299a:	9211      	str	r2, [sp, #68]	@ 0x44
 801299c:	785b      	ldrb	r3, [r3, #1]
 801299e:	2b30      	cmp	r3, #48	@ 0x30
 80129a0:	d0f9      	beq.n	8012996 <_strtod_l+0x12e>
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d09b      	beq.n	80128de <_strtod_l+0x76>
 80129a6:	2301      	movs	r3, #1
 80129a8:	2600      	movs	r6, #0
 80129aa:	9307      	str	r3, [sp, #28]
 80129ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80129ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80129b0:	46b1      	mov	r9, r6
 80129b2:	4635      	mov	r5, r6
 80129b4:	220a      	movs	r2, #10
 80129b6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80129b8:	7804      	ldrb	r4, [r0, #0]
 80129ba:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80129be:	b2d9      	uxtb	r1, r3
 80129c0:	2909      	cmp	r1, #9
 80129c2:	d929      	bls.n	8012a18 <_strtod_l+0x1b0>
 80129c4:	494a      	ldr	r1, [pc, #296]	@ (8012af0 <_strtod_l+0x288>)
 80129c6:	2201      	movs	r2, #1
 80129c8:	f001 fa60 	bl	8013e8c <strncmp>
 80129cc:	b378      	cbz	r0, 8012a2e <_strtod_l+0x1c6>
 80129ce:	2000      	movs	r0, #0
 80129d0:	4622      	mov	r2, r4
 80129d2:	462b      	mov	r3, r5
 80129d4:	4607      	mov	r7, r0
 80129d6:	9006      	str	r0, [sp, #24]
 80129d8:	2a65      	cmp	r2, #101	@ 0x65
 80129da:	d001      	beq.n	80129e0 <_strtod_l+0x178>
 80129dc:	2a45      	cmp	r2, #69	@ 0x45
 80129de:	d117      	bne.n	8012a10 <_strtod_l+0x1a8>
 80129e0:	b91b      	cbnz	r3, 80129ea <_strtod_l+0x182>
 80129e2:	9b07      	ldr	r3, [sp, #28]
 80129e4:	4303      	orrs	r3, r0
 80129e6:	d096      	beq.n	8012916 <_strtod_l+0xae>
 80129e8:	2300      	movs	r3, #0
 80129ea:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80129ee:	f108 0201 	add.w	r2, r8, #1
 80129f2:	9211      	str	r2, [sp, #68]	@ 0x44
 80129f4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80129f8:	2a2b      	cmp	r2, #43	@ 0x2b
 80129fa:	d06b      	beq.n	8012ad4 <_strtod_l+0x26c>
 80129fc:	2a2d      	cmp	r2, #45	@ 0x2d
 80129fe:	d071      	beq.n	8012ae4 <_strtod_l+0x27c>
 8012a00:	f04f 0e00 	mov.w	lr, #0
 8012a04:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8012a08:	2c09      	cmp	r4, #9
 8012a0a:	d979      	bls.n	8012b00 <_strtod_l+0x298>
 8012a0c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012a10:	2400      	movs	r4, #0
 8012a12:	e094      	b.n	8012b3e <_strtod_l+0x2d6>
 8012a14:	2300      	movs	r3, #0
 8012a16:	e7c7      	b.n	80129a8 <_strtod_l+0x140>
 8012a18:	2d08      	cmp	r5, #8
 8012a1a:	f100 0001 	add.w	r0, r0, #1
 8012a1e:	bfd4      	ite	le
 8012a20:	fb02 3909 	mlale	r9, r2, r9, r3
 8012a24:	fb02 3606 	mlagt	r6, r2, r6, r3
 8012a28:	3501      	adds	r5, #1
 8012a2a:	9011      	str	r0, [sp, #68]	@ 0x44
 8012a2c:	e7c3      	b.n	80129b6 <_strtod_l+0x14e>
 8012a2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012a30:	1c5a      	adds	r2, r3, #1
 8012a32:	9211      	str	r2, [sp, #68]	@ 0x44
 8012a34:	785a      	ldrb	r2, [r3, #1]
 8012a36:	b375      	cbz	r5, 8012a96 <_strtod_l+0x22e>
 8012a38:	4607      	mov	r7, r0
 8012a3a:	462b      	mov	r3, r5
 8012a3c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012a40:	2909      	cmp	r1, #9
 8012a42:	d913      	bls.n	8012a6c <_strtod_l+0x204>
 8012a44:	2101      	movs	r1, #1
 8012a46:	9106      	str	r1, [sp, #24]
 8012a48:	e7c6      	b.n	80129d8 <_strtod_l+0x170>
 8012a4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012a4c:	1c5a      	adds	r2, r3, #1
 8012a4e:	9211      	str	r2, [sp, #68]	@ 0x44
 8012a50:	785a      	ldrb	r2, [r3, #1]
 8012a52:	3001      	adds	r0, #1
 8012a54:	2a30      	cmp	r2, #48	@ 0x30
 8012a56:	d0f8      	beq.n	8012a4a <_strtod_l+0x1e2>
 8012a58:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8012a5c:	2b08      	cmp	r3, #8
 8012a5e:	f200 8476 	bhi.w	801334e <_strtod_l+0xae6>
 8012a62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012a64:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a66:	4607      	mov	r7, r0
 8012a68:	2000      	movs	r0, #0
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	3a30      	subs	r2, #48	@ 0x30
 8012a6e:	f100 0101 	add.w	r1, r0, #1
 8012a72:	d023      	beq.n	8012abc <_strtod_l+0x254>
 8012a74:	440f      	add	r7, r1
 8012a76:	eb00 0c03 	add.w	ip, r0, r3
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	240a      	movs	r4, #10
 8012a7e:	4561      	cmp	r1, ip
 8012a80:	d10b      	bne.n	8012a9a <_strtod_l+0x232>
 8012a82:	1c5c      	adds	r4, r3, #1
 8012a84:	4403      	add	r3, r0
 8012a86:	2b08      	cmp	r3, #8
 8012a88:	4404      	add	r4, r0
 8012a8a:	dc11      	bgt.n	8012ab0 <_strtod_l+0x248>
 8012a8c:	230a      	movs	r3, #10
 8012a8e:	fb03 2909 	mla	r9, r3, r9, r2
 8012a92:	2100      	movs	r1, #0
 8012a94:	e013      	b.n	8012abe <_strtod_l+0x256>
 8012a96:	4628      	mov	r0, r5
 8012a98:	e7dc      	b.n	8012a54 <_strtod_l+0x1ec>
 8012a9a:	2908      	cmp	r1, #8
 8012a9c:	f101 0101 	add.w	r1, r1, #1
 8012aa0:	dc02      	bgt.n	8012aa8 <_strtod_l+0x240>
 8012aa2:	fb04 f909 	mul.w	r9, r4, r9
 8012aa6:	e7ea      	b.n	8012a7e <_strtod_l+0x216>
 8012aa8:	2910      	cmp	r1, #16
 8012aaa:	bfd8      	it	le
 8012aac:	4366      	mulle	r6, r4
 8012aae:	e7e6      	b.n	8012a7e <_strtod_l+0x216>
 8012ab0:	2b0f      	cmp	r3, #15
 8012ab2:	dcee      	bgt.n	8012a92 <_strtod_l+0x22a>
 8012ab4:	230a      	movs	r3, #10
 8012ab6:	fb03 2606 	mla	r6, r3, r6, r2
 8012aba:	e7ea      	b.n	8012a92 <_strtod_l+0x22a>
 8012abc:	461c      	mov	r4, r3
 8012abe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012ac0:	1c5a      	adds	r2, r3, #1
 8012ac2:	9211      	str	r2, [sp, #68]	@ 0x44
 8012ac4:	785a      	ldrb	r2, [r3, #1]
 8012ac6:	4608      	mov	r0, r1
 8012ac8:	4623      	mov	r3, r4
 8012aca:	e7b7      	b.n	8012a3c <_strtod_l+0x1d4>
 8012acc:	2301      	movs	r3, #1
 8012ace:	2700      	movs	r7, #0
 8012ad0:	9306      	str	r3, [sp, #24]
 8012ad2:	e786      	b.n	80129e2 <_strtod_l+0x17a>
 8012ad4:	f04f 0e00 	mov.w	lr, #0
 8012ad8:	f108 0202 	add.w	r2, r8, #2
 8012adc:	9211      	str	r2, [sp, #68]	@ 0x44
 8012ade:	f898 2002 	ldrb.w	r2, [r8, #2]
 8012ae2:	e78f      	b.n	8012a04 <_strtod_l+0x19c>
 8012ae4:	f04f 0e01 	mov.w	lr, #1
 8012ae8:	e7f6      	b.n	8012ad8 <_strtod_l+0x270>
 8012aea:	bf00      	nop
 8012aec:	08016988 	.word	0x08016988
 8012af0:	08016970 	.word	0x08016970
 8012af4:	7ff00000 	.word	0x7ff00000
 8012af8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012afa:	1c54      	adds	r4, r2, #1
 8012afc:	9411      	str	r4, [sp, #68]	@ 0x44
 8012afe:	7852      	ldrb	r2, [r2, #1]
 8012b00:	2a30      	cmp	r2, #48	@ 0x30
 8012b02:	d0f9      	beq.n	8012af8 <_strtod_l+0x290>
 8012b04:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8012b08:	2c08      	cmp	r4, #8
 8012b0a:	d881      	bhi.n	8012a10 <_strtod_l+0x1a8>
 8012b0c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8012b10:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8012b14:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012b16:	1c51      	adds	r1, r2, #1
 8012b18:	9111      	str	r1, [sp, #68]	@ 0x44
 8012b1a:	7852      	ldrb	r2, [r2, #1]
 8012b1c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8012b20:	2c09      	cmp	r4, #9
 8012b22:	d938      	bls.n	8012b96 <_strtod_l+0x32e>
 8012b24:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012b26:	1b0c      	subs	r4, r1, r4
 8012b28:	2c08      	cmp	r4, #8
 8012b2a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8012b2e:	dc02      	bgt.n	8012b36 <_strtod_l+0x2ce>
 8012b30:	4564      	cmp	r4, ip
 8012b32:	bfa8      	it	ge
 8012b34:	4664      	movge	r4, ip
 8012b36:	f1be 0f00 	cmp.w	lr, #0
 8012b3a:	d000      	beq.n	8012b3e <_strtod_l+0x2d6>
 8012b3c:	4264      	negs	r4, r4
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d14e      	bne.n	8012be0 <_strtod_l+0x378>
 8012b42:	9b07      	ldr	r3, [sp, #28]
 8012b44:	4318      	orrs	r0, r3
 8012b46:	f47f aeca 	bne.w	80128de <_strtod_l+0x76>
 8012b4a:	9b06      	ldr	r3, [sp, #24]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	f47f aee2 	bne.w	8012916 <_strtod_l+0xae>
 8012b52:	2a69      	cmp	r2, #105	@ 0x69
 8012b54:	d027      	beq.n	8012ba6 <_strtod_l+0x33e>
 8012b56:	dc24      	bgt.n	8012ba2 <_strtod_l+0x33a>
 8012b58:	2a49      	cmp	r2, #73	@ 0x49
 8012b5a:	d024      	beq.n	8012ba6 <_strtod_l+0x33e>
 8012b5c:	2a4e      	cmp	r2, #78	@ 0x4e
 8012b5e:	f47f aeda 	bne.w	8012916 <_strtod_l+0xae>
 8012b62:	4997      	ldr	r1, [pc, #604]	@ (8012dc0 <_strtod_l+0x558>)
 8012b64:	a811      	add	r0, sp, #68	@ 0x44
 8012b66:	f002 faed 	bl	8015144 <__match>
 8012b6a:	2800      	cmp	r0, #0
 8012b6c:	f43f aed3 	beq.w	8012916 <_strtod_l+0xae>
 8012b70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	2b28      	cmp	r3, #40	@ 0x28
 8012b76:	d12d      	bne.n	8012bd4 <_strtod_l+0x36c>
 8012b78:	4992      	ldr	r1, [pc, #584]	@ (8012dc4 <_strtod_l+0x55c>)
 8012b7a:	aa14      	add	r2, sp, #80	@ 0x50
 8012b7c:	a811      	add	r0, sp, #68	@ 0x44
 8012b7e:	f002 faf5 	bl	801516c <__hexnan>
 8012b82:	2805      	cmp	r0, #5
 8012b84:	d126      	bne.n	8012bd4 <_strtod_l+0x36c>
 8012b86:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012b88:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8012b8c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012b90:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8012b94:	e6a3      	b.n	80128de <_strtod_l+0x76>
 8012b96:	240a      	movs	r4, #10
 8012b98:	fb04 2c0c 	mla	ip, r4, ip, r2
 8012b9c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8012ba0:	e7b8      	b.n	8012b14 <_strtod_l+0x2ac>
 8012ba2:	2a6e      	cmp	r2, #110	@ 0x6e
 8012ba4:	e7db      	b.n	8012b5e <_strtod_l+0x2f6>
 8012ba6:	4988      	ldr	r1, [pc, #544]	@ (8012dc8 <_strtod_l+0x560>)
 8012ba8:	a811      	add	r0, sp, #68	@ 0x44
 8012baa:	f002 facb 	bl	8015144 <__match>
 8012bae:	2800      	cmp	r0, #0
 8012bb0:	f43f aeb1 	beq.w	8012916 <_strtod_l+0xae>
 8012bb4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012bb6:	4985      	ldr	r1, [pc, #532]	@ (8012dcc <_strtod_l+0x564>)
 8012bb8:	3b01      	subs	r3, #1
 8012bba:	a811      	add	r0, sp, #68	@ 0x44
 8012bbc:	9311      	str	r3, [sp, #68]	@ 0x44
 8012bbe:	f002 fac1 	bl	8015144 <__match>
 8012bc2:	b910      	cbnz	r0, 8012bca <_strtod_l+0x362>
 8012bc4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	9311      	str	r3, [sp, #68]	@ 0x44
 8012bca:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8012de0 <_strtod_l+0x578>
 8012bce:	f04f 0a00 	mov.w	sl, #0
 8012bd2:	e684      	b.n	80128de <_strtod_l+0x76>
 8012bd4:	487e      	ldr	r0, [pc, #504]	@ (8012dd0 <_strtod_l+0x568>)
 8012bd6:	f001 f9fb 	bl	8013fd0 <nan>
 8012bda:	ec5b ab10 	vmov	sl, fp, d0
 8012bde:	e67e      	b.n	80128de <_strtod_l+0x76>
 8012be0:	ee07 9a90 	vmov	s15, r9
 8012be4:	1be2      	subs	r2, r4, r7
 8012be6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012bea:	2d00      	cmp	r5, #0
 8012bec:	bf08      	it	eq
 8012bee:	461d      	moveq	r5, r3
 8012bf0:	2b10      	cmp	r3, #16
 8012bf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8012bf4:	461a      	mov	r2, r3
 8012bf6:	bfa8      	it	ge
 8012bf8:	2210      	movge	r2, #16
 8012bfa:	2b09      	cmp	r3, #9
 8012bfc:	ec5b ab17 	vmov	sl, fp, d7
 8012c00:	dc15      	bgt.n	8012c2e <_strtod_l+0x3c6>
 8012c02:	1be1      	subs	r1, r4, r7
 8012c04:	2900      	cmp	r1, #0
 8012c06:	f43f ae6a 	beq.w	80128de <_strtod_l+0x76>
 8012c0a:	eba4 0107 	sub.w	r1, r4, r7
 8012c0e:	dd72      	ble.n	8012cf6 <_strtod_l+0x48e>
 8012c10:	2916      	cmp	r1, #22
 8012c12:	dc59      	bgt.n	8012cc8 <_strtod_l+0x460>
 8012c14:	4b6f      	ldr	r3, [pc, #444]	@ (8012dd4 <_strtod_l+0x56c>)
 8012c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c1c:	ed93 7b00 	vldr	d7, [r3]
 8012c20:	ec4b ab16 	vmov	d6, sl, fp
 8012c24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012c28:	ec5b ab17 	vmov	sl, fp, d7
 8012c2c:	e657      	b.n	80128de <_strtod_l+0x76>
 8012c2e:	4969      	ldr	r1, [pc, #420]	@ (8012dd4 <_strtod_l+0x56c>)
 8012c30:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012c34:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8012c38:	ee06 6a90 	vmov	s13, r6
 8012c3c:	2b0f      	cmp	r3, #15
 8012c3e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8012c42:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012c46:	ec5b ab16 	vmov	sl, fp, d6
 8012c4a:	ddda      	ble.n	8012c02 <_strtod_l+0x39a>
 8012c4c:	1a9a      	subs	r2, r3, r2
 8012c4e:	1be1      	subs	r1, r4, r7
 8012c50:	440a      	add	r2, r1
 8012c52:	2a00      	cmp	r2, #0
 8012c54:	f340 8094 	ble.w	8012d80 <_strtod_l+0x518>
 8012c58:	f012 000f 	ands.w	r0, r2, #15
 8012c5c:	d00a      	beq.n	8012c74 <_strtod_l+0x40c>
 8012c5e:	495d      	ldr	r1, [pc, #372]	@ (8012dd4 <_strtod_l+0x56c>)
 8012c60:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012c64:	ed91 7b00 	vldr	d7, [r1]
 8012c68:	ec4b ab16 	vmov	d6, sl, fp
 8012c6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012c70:	ec5b ab17 	vmov	sl, fp, d7
 8012c74:	f032 020f 	bics.w	r2, r2, #15
 8012c78:	d073      	beq.n	8012d62 <_strtod_l+0x4fa>
 8012c7a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8012c7e:	dd47      	ble.n	8012d10 <_strtod_l+0x4a8>
 8012c80:	2400      	movs	r4, #0
 8012c82:	4625      	mov	r5, r4
 8012c84:	9407      	str	r4, [sp, #28]
 8012c86:	4626      	mov	r6, r4
 8012c88:	9a05      	ldr	r2, [sp, #20]
 8012c8a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8012de0 <_strtod_l+0x578>
 8012c8e:	2322      	movs	r3, #34	@ 0x22
 8012c90:	6013      	str	r3, [r2, #0]
 8012c92:	f04f 0a00 	mov.w	sl, #0
 8012c96:	9b07      	ldr	r3, [sp, #28]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	f43f ae20 	beq.w	80128de <_strtod_l+0x76>
 8012c9e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012ca0:	9805      	ldr	r0, [sp, #20]
 8012ca2:	f002 fc07 	bl	80154b4 <_Bfree>
 8012ca6:	9805      	ldr	r0, [sp, #20]
 8012ca8:	4631      	mov	r1, r6
 8012caa:	f002 fc03 	bl	80154b4 <_Bfree>
 8012cae:	9805      	ldr	r0, [sp, #20]
 8012cb0:	4629      	mov	r1, r5
 8012cb2:	f002 fbff 	bl	80154b4 <_Bfree>
 8012cb6:	9907      	ldr	r1, [sp, #28]
 8012cb8:	9805      	ldr	r0, [sp, #20]
 8012cba:	f002 fbfb 	bl	80154b4 <_Bfree>
 8012cbe:	9805      	ldr	r0, [sp, #20]
 8012cc0:	4621      	mov	r1, r4
 8012cc2:	f002 fbf7 	bl	80154b4 <_Bfree>
 8012cc6:	e60a      	b.n	80128de <_strtod_l+0x76>
 8012cc8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8012ccc:	1be0      	subs	r0, r4, r7
 8012cce:	4281      	cmp	r1, r0
 8012cd0:	dbbc      	blt.n	8012c4c <_strtod_l+0x3e4>
 8012cd2:	4a40      	ldr	r2, [pc, #256]	@ (8012dd4 <_strtod_l+0x56c>)
 8012cd4:	f1c3 030f 	rsb	r3, r3, #15
 8012cd8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8012cdc:	ed91 7b00 	vldr	d7, [r1]
 8012ce0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012ce2:	ec4b ab16 	vmov	d6, sl, fp
 8012ce6:	1acb      	subs	r3, r1, r3
 8012ce8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012cec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012cf0:	ed92 6b00 	vldr	d6, [r2]
 8012cf4:	e796      	b.n	8012c24 <_strtod_l+0x3bc>
 8012cf6:	3116      	adds	r1, #22
 8012cf8:	dba8      	blt.n	8012c4c <_strtod_l+0x3e4>
 8012cfa:	4b36      	ldr	r3, [pc, #216]	@ (8012dd4 <_strtod_l+0x56c>)
 8012cfc:	1b3c      	subs	r4, r7, r4
 8012cfe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012d02:	ed94 7b00 	vldr	d7, [r4]
 8012d06:	ec4b ab16 	vmov	d6, sl, fp
 8012d0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012d0e:	e78b      	b.n	8012c28 <_strtod_l+0x3c0>
 8012d10:	2000      	movs	r0, #0
 8012d12:	ec4b ab17 	vmov	d7, sl, fp
 8012d16:	4e30      	ldr	r6, [pc, #192]	@ (8012dd8 <_strtod_l+0x570>)
 8012d18:	1112      	asrs	r2, r2, #4
 8012d1a:	4601      	mov	r1, r0
 8012d1c:	2a01      	cmp	r2, #1
 8012d1e:	dc23      	bgt.n	8012d68 <_strtod_l+0x500>
 8012d20:	b108      	cbz	r0, 8012d26 <_strtod_l+0x4be>
 8012d22:	ec5b ab17 	vmov	sl, fp, d7
 8012d26:	4a2c      	ldr	r2, [pc, #176]	@ (8012dd8 <_strtod_l+0x570>)
 8012d28:	482c      	ldr	r0, [pc, #176]	@ (8012ddc <_strtod_l+0x574>)
 8012d2a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012d2e:	ed92 7b00 	vldr	d7, [r2]
 8012d32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8012d36:	ec4b ab16 	vmov	d6, sl, fp
 8012d3a:	4a29      	ldr	r2, [pc, #164]	@ (8012de0 <_strtod_l+0x578>)
 8012d3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012d40:	ee17 1a90 	vmov	r1, s15
 8012d44:	400a      	ands	r2, r1
 8012d46:	4282      	cmp	r2, r0
 8012d48:	ec5b ab17 	vmov	sl, fp, d7
 8012d4c:	d898      	bhi.n	8012c80 <_strtod_l+0x418>
 8012d4e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8012d52:	4282      	cmp	r2, r0
 8012d54:	bf86      	itte	hi
 8012d56:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8012de4 <_strtod_l+0x57c>
 8012d5a:	f04f 3aff 	movhi.w	sl, #4294967295
 8012d5e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8012d62:	2200      	movs	r2, #0
 8012d64:	9206      	str	r2, [sp, #24]
 8012d66:	e076      	b.n	8012e56 <_strtod_l+0x5ee>
 8012d68:	f012 0f01 	tst.w	r2, #1
 8012d6c:	d004      	beq.n	8012d78 <_strtod_l+0x510>
 8012d6e:	ed96 6b00 	vldr	d6, [r6]
 8012d72:	2001      	movs	r0, #1
 8012d74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012d78:	3101      	adds	r1, #1
 8012d7a:	1052      	asrs	r2, r2, #1
 8012d7c:	3608      	adds	r6, #8
 8012d7e:	e7cd      	b.n	8012d1c <_strtod_l+0x4b4>
 8012d80:	d0ef      	beq.n	8012d62 <_strtod_l+0x4fa>
 8012d82:	4252      	negs	r2, r2
 8012d84:	f012 000f 	ands.w	r0, r2, #15
 8012d88:	d00a      	beq.n	8012da0 <_strtod_l+0x538>
 8012d8a:	4912      	ldr	r1, [pc, #72]	@ (8012dd4 <_strtod_l+0x56c>)
 8012d8c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012d90:	ed91 7b00 	vldr	d7, [r1]
 8012d94:	ec4b ab16 	vmov	d6, sl, fp
 8012d98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012d9c:	ec5b ab17 	vmov	sl, fp, d7
 8012da0:	1112      	asrs	r2, r2, #4
 8012da2:	d0de      	beq.n	8012d62 <_strtod_l+0x4fa>
 8012da4:	2a1f      	cmp	r2, #31
 8012da6:	dd1f      	ble.n	8012de8 <_strtod_l+0x580>
 8012da8:	2400      	movs	r4, #0
 8012daa:	4625      	mov	r5, r4
 8012dac:	9407      	str	r4, [sp, #28]
 8012dae:	4626      	mov	r6, r4
 8012db0:	9a05      	ldr	r2, [sp, #20]
 8012db2:	2322      	movs	r3, #34	@ 0x22
 8012db4:	f04f 0a00 	mov.w	sl, #0
 8012db8:	f04f 0b00 	mov.w	fp, #0
 8012dbc:	6013      	str	r3, [r2, #0]
 8012dbe:	e76a      	b.n	8012c96 <_strtod_l+0x42e>
 8012dc0:	08016ad6 	.word	0x08016ad6
 8012dc4:	08016974 	.word	0x08016974
 8012dc8:	08016ace 	.word	0x08016ace
 8012dcc:	08016b08 	.word	0x08016b08
 8012dd0:	08016d94 	.word	0x08016d94
 8012dd4:	08016c80 	.word	0x08016c80
 8012dd8:	08016c58 	.word	0x08016c58
 8012ddc:	7ca00000 	.word	0x7ca00000
 8012de0:	7ff00000 	.word	0x7ff00000
 8012de4:	7fefffff 	.word	0x7fefffff
 8012de8:	f012 0110 	ands.w	r1, r2, #16
 8012dec:	bf18      	it	ne
 8012dee:	216a      	movne	r1, #106	@ 0x6a
 8012df0:	9106      	str	r1, [sp, #24]
 8012df2:	ec4b ab17 	vmov	d7, sl, fp
 8012df6:	49b0      	ldr	r1, [pc, #704]	@ (80130b8 <_strtod_l+0x850>)
 8012df8:	2000      	movs	r0, #0
 8012dfa:	07d6      	lsls	r6, r2, #31
 8012dfc:	d504      	bpl.n	8012e08 <_strtod_l+0x5a0>
 8012dfe:	ed91 6b00 	vldr	d6, [r1]
 8012e02:	2001      	movs	r0, #1
 8012e04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e08:	1052      	asrs	r2, r2, #1
 8012e0a:	f101 0108 	add.w	r1, r1, #8
 8012e0e:	d1f4      	bne.n	8012dfa <_strtod_l+0x592>
 8012e10:	b108      	cbz	r0, 8012e16 <_strtod_l+0x5ae>
 8012e12:	ec5b ab17 	vmov	sl, fp, d7
 8012e16:	9a06      	ldr	r2, [sp, #24]
 8012e18:	b1b2      	cbz	r2, 8012e48 <_strtod_l+0x5e0>
 8012e1a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8012e1e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8012e22:	2a00      	cmp	r2, #0
 8012e24:	4658      	mov	r0, fp
 8012e26:	dd0f      	ble.n	8012e48 <_strtod_l+0x5e0>
 8012e28:	2a1f      	cmp	r2, #31
 8012e2a:	dd55      	ble.n	8012ed8 <_strtod_l+0x670>
 8012e2c:	2a34      	cmp	r2, #52	@ 0x34
 8012e2e:	bfde      	ittt	le
 8012e30:	f04f 32ff 	movle.w	r2, #4294967295
 8012e34:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8012e38:	408a      	lslle	r2, r1
 8012e3a:	f04f 0a00 	mov.w	sl, #0
 8012e3e:	bfcc      	ite	gt
 8012e40:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012e44:	ea02 0b00 	andle.w	fp, r2, r0
 8012e48:	ec4b ab17 	vmov	d7, sl, fp
 8012e4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e54:	d0a8      	beq.n	8012da8 <_strtod_l+0x540>
 8012e56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012e58:	9805      	ldr	r0, [sp, #20]
 8012e5a:	f8cd 9000 	str.w	r9, [sp]
 8012e5e:	462a      	mov	r2, r5
 8012e60:	f002 fb90 	bl	8015584 <__s2b>
 8012e64:	9007      	str	r0, [sp, #28]
 8012e66:	2800      	cmp	r0, #0
 8012e68:	f43f af0a 	beq.w	8012c80 <_strtod_l+0x418>
 8012e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e6e:	1b3f      	subs	r7, r7, r4
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	bfb4      	ite	lt
 8012e74:	463b      	movlt	r3, r7
 8012e76:	2300      	movge	r3, #0
 8012e78:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e7c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80130a8 <_strtod_l+0x840>
 8012e80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012e84:	2400      	movs	r4, #0
 8012e86:	930d      	str	r3, [sp, #52]	@ 0x34
 8012e88:	4625      	mov	r5, r4
 8012e8a:	9b07      	ldr	r3, [sp, #28]
 8012e8c:	9805      	ldr	r0, [sp, #20]
 8012e8e:	6859      	ldr	r1, [r3, #4]
 8012e90:	f002 fad0 	bl	8015434 <_Balloc>
 8012e94:	4606      	mov	r6, r0
 8012e96:	2800      	cmp	r0, #0
 8012e98:	f43f aef6 	beq.w	8012c88 <_strtod_l+0x420>
 8012e9c:	9b07      	ldr	r3, [sp, #28]
 8012e9e:	691a      	ldr	r2, [r3, #16]
 8012ea0:	ec4b ab19 	vmov	d9, sl, fp
 8012ea4:	3202      	adds	r2, #2
 8012ea6:	f103 010c 	add.w	r1, r3, #12
 8012eaa:	0092      	lsls	r2, r2, #2
 8012eac:	300c      	adds	r0, #12
 8012eae:	f001 f87e 	bl	8013fae <memcpy>
 8012eb2:	eeb0 0b49 	vmov.f64	d0, d9
 8012eb6:	9805      	ldr	r0, [sp, #20]
 8012eb8:	aa14      	add	r2, sp, #80	@ 0x50
 8012eba:	a913      	add	r1, sp, #76	@ 0x4c
 8012ebc:	f002 fe9e 	bl	8015bfc <__d2b>
 8012ec0:	9012      	str	r0, [sp, #72]	@ 0x48
 8012ec2:	2800      	cmp	r0, #0
 8012ec4:	f43f aee0 	beq.w	8012c88 <_strtod_l+0x420>
 8012ec8:	9805      	ldr	r0, [sp, #20]
 8012eca:	2101      	movs	r1, #1
 8012ecc:	f002 fbf0 	bl	80156b0 <__i2b>
 8012ed0:	4605      	mov	r5, r0
 8012ed2:	b940      	cbnz	r0, 8012ee6 <_strtod_l+0x67e>
 8012ed4:	2500      	movs	r5, #0
 8012ed6:	e6d7      	b.n	8012c88 <_strtod_l+0x420>
 8012ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8012edc:	fa01 f202 	lsl.w	r2, r1, r2
 8012ee0:	ea02 0a0a 	and.w	sl, r2, sl
 8012ee4:	e7b0      	b.n	8012e48 <_strtod_l+0x5e0>
 8012ee6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8012ee8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012eea:	2f00      	cmp	r7, #0
 8012eec:	bfab      	itete	ge
 8012eee:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8012ef0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8012ef2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8012ef6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8012efa:	bfac      	ite	ge
 8012efc:	eb07 0903 	addge.w	r9, r7, r3
 8012f00:	eba3 0807 	sublt.w	r8, r3, r7
 8012f04:	9b06      	ldr	r3, [sp, #24]
 8012f06:	1aff      	subs	r7, r7, r3
 8012f08:	4417      	add	r7, r2
 8012f0a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8012f0e:	4a6b      	ldr	r2, [pc, #428]	@ (80130bc <_strtod_l+0x854>)
 8012f10:	3f01      	subs	r7, #1
 8012f12:	4297      	cmp	r7, r2
 8012f14:	da51      	bge.n	8012fba <_strtod_l+0x752>
 8012f16:	1bd1      	subs	r1, r2, r7
 8012f18:	291f      	cmp	r1, #31
 8012f1a:	eba3 0301 	sub.w	r3, r3, r1
 8012f1e:	f04f 0201 	mov.w	r2, #1
 8012f22:	dc3e      	bgt.n	8012fa2 <_strtod_l+0x73a>
 8012f24:	408a      	lsls	r2, r1
 8012f26:	920c      	str	r2, [sp, #48]	@ 0x30
 8012f28:	2200      	movs	r2, #0
 8012f2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012f2c:	eb09 0703 	add.w	r7, r9, r3
 8012f30:	4498      	add	r8, r3
 8012f32:	9b06      	ldr	r3, [sp, #24]
 8012f34:	45b9      	cmp	r9, r7
 8012f36:	4498      	add	r8, r3
 8012f38:	464b      	mov	r3, r9
 8012f3a:	bfa8      	it	ge
 8012f3c:	463b      	movge	r3, r7
 8012f3e:	4543      	cmp	r3, r8
 8012f40:	bfa8      	it	ge
 8012f42:	4643      	movge	r3, r8
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	bfc2      	ittt	gt
 8012f48:	1aff      	subgt	r7, r7, r3
 8012f4a:	eba8 0803 	subgt.w	r8, r8, r3
 8012f4e:	eba9 0903 	subgt.w	r9, r9, r3
 8012f52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	dd16      	ble.n	8012f86 <_strtod_l+0x71e>
 8012f58:	4629      	mov	r1, r5
 8012f5a:	9805      	ldr	r0, [sp, #20]
 8012f5c:	461a      	mov	r2, r3
 8012f5e:	f002 fc67 	bl	8015830 <__pow5mult>
 8012f62:	4605      	mov	r5, r0
 8012f64:	2800      	cmp	r0, #0
 8012f66:	d0b5      	beq.n	8012ed4 <_strtod_l+0x66c>
 8012f68:	4601      	mov	r1, r0
 8012f6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012f6c:	9805      	ldr	r0, [sp, #20]
 8012f6e:	f002 fbb5 	bl	80156dc <__multiply>
 8012f72:	900f      	str	r0, [sp, #60]	@ 0x3c
 8012f74:	2800      	cmp	r0, #0
 8012f76:	f43f ae87 	beq.w	8012c88 <_strtod_l+0x420>
 8012f7a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012f7c:	9805      	ldr	r0, [sp, #20]
 8012f7e:	f002 fa99 	bl	80154b4 <_Bfree>
 8012f82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f84:	9312      	str	r3, [sp, #72]	@ 0x48
 8012f86:	2f00      	cmp	r7, #0
 8012f88:	dc1b      	bgt.n	8012fc2 <_strtod_l+0x75a>
 8012f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	dd21      	ble.n	8012fd4 <_strtod_l+0x76c>
 8012f90:	4631      	mov	r1, r6
 8012f92:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012f94:	9805      	ldr	r0, [sp, #20]
 8012f96:	f002 fc4b 	bl	8015830 <__pow5mult>
 8012f9a:	4606      	mov	r6, r0
 8012f9c:	b9d0      	cbnz	r0, 8012fd4 <_strtod_l+0x76c>
 8012f9e:	2600      	movs	r6, #0
 8012fa0:	e672      	b.n	8012c88 <_strtod_l+0x420>
 8012fa2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8012fa6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8012faa:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8012fae:	37e2      	adds	r7, #226	@ 0xe2
 8012fb0:	fa02 f107 	lsl.w	r1, r2, r7
 8012fb4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012fb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8012fb8:	e7b8      	b.n	8012f2c <_strtod_l+0x6c4>
 8012fba:	2200      	movs	r2, #0
 8012fbc:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012fbe:	2201      	movs	r2, #1
 8012fc0:	e7f9      	b.n	8012fb6 <_strtod_l+0x74e>
 8012fc2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012fc4:	9805      	ldr	r0, [sp, #20]
 8012fc6:	463a      	mov	r2, r7
 8012fc8:	f002 fc8c 	bl	80158e4 <__lshift>
 8012fcc:	9012      	str	r0, [sp, #72]	@ 0x48
 8012fce:	2800      	cmp	r0, #0
 8012fd0:	d1db      	bne.n	8012f8a <_strtod_l+0x722>
 8012fd2:	e659      	b.n	8012c88 <_strtod_l+0x420>
 8012fd4:	f1b8 0f00 	cmp.w	r8, #0
 8012fd8:	dd07      	ble.n	8012fea <_strtod_l+0x782>
 8012fda:	4631      	mov	r1, r6
 8012fdc:	9805      	ldr	r0, [sp, #20]
 8012fde:	4642      	mov	r2, r8
 8012fe0:	f002 fc80 	bl	80158e4 <__lshift>
 8012fe4:	4606      	mov	r6, r0
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	d0d9      	beq.n	8012f9e <_strtod_l+0x736>
 8012fea:	f1b9 0f00 	cmp.w	r9, #0
 8012fee:	dd08      	ble.n	8013002 <_strtod_l+0x79a>
 8012ff0:	4629      	mov	r1, r5
 8012ff2:	9805      	ldr	r0, [sp, #20]
 8012ff4:	464a      	mov	r2, r9
 8012ff6:	f002 fc75 	bl	80158e4 <__lshift>
 8012ffa:	4605      	mov	r5, r0
 8012ffc:	2800      	cmp	r0, #0
 8012ffe:	f43f ae43 	beq.w	8012c88 <_strtod_l+0x420>
 8013002:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013004:	9805      	ldr	r0, [sp, #20]
 8013006:	4632      	mov	r2, r6
 8013008:	f002 fcf4 	bl	80159f4 <__mdiff>
 801300c:	4604      	mov	r4, r0
 801300e:	2800      	cmp	r0, #0
 8013010:	f43f ae3a 	beq.w	8012c88 <_strtod_l+0x420>
 8013014:	2300      	movs	r3, #0
 8013016:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801301a:	60c3      	str	r3, [r0, #12]
 801301c:	4629      	mov	r1, r5
 801301e:	f002 fccd 	bl	80159bc <__mcmp>
 8013022:	2800      	cmp	r0, #0
 8013024:	da4e      	bge.n	80130c4 <_strtod_l+0x85c>
 8013026:	ea58 080a 	orrs.w	r8, r8, sl
 801302a:	d174      	bne.n	8013116 <_strtod_l+0x8ae>
 801302c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013030:	2b00      	cmp	r3, #0
 8013032:	d170      	bne.n	8013116 <_strtod_l+0x8ae>
 8013034:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013038:	0d1b      	lsrs	r3, r3, #20
 801303a:	051b      	lsls	r3, r3, #20
 801303c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013040:	d969      	bls.n	8013116 <_strtod_l+0x8ae>
 8013042:	6963      	ldr	r3, [r4, #20]
 8013044:	b913      	cbnz	r3, 801304c <_strtod_l+0x7e4>
 8013046:	6923      	ldr	r3, [r4, #16]
 8013048:	2b01      	cmp	r3, #1
 801304a:	dd64      	ble.n	8013116 <_strtod_l+0x8ae>
 801304c:	4621      	mov	r1, r4
 801304e:	2201      	movs	r2, #1
 8013050:	9805      	ldr	r0, [sp, #20]
 8013052:	f002 fc47 	bl	80158e4 <__lshift>
 8013056:	4629      	mov	r1, r5
 8013058:	4604      	mov	r4, r0
 801305a:	f002 fcaf 	bl	80159bc <__mcmp>
 801305e:	2800      	cmp	r0, #0
 8013060:	dd59      	ble.n	8013116 <_strtod_l+0x8ae>
 8013062:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013066:	9a06      	ldr	r2, [sp, #24]
 8013068:	0d1b      	lsrs	r3, r3, #20
 801306a:	051b      	lsls	r3, r3, #20
 801306c:	2a00      	cmp	r2, #0
 801306e:	d070      	beq.n	8013152 <_strtod_l+0x8ea>
 8013070:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013074:	d86d      	bhi.n	8013152 <_strtod_l+0x8ea>
 8013076:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801307a:	f67f ae99 	bls.w	8012db0 <_strtod_l+0x548>
 801307e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80130b0 <_strtod_l+0x848>
 8013082:	ec4b ab16 	vmov	d6, sl, fp
 8013086:	4b0e      	ldr	r3, [pc, #56]	@ (80130c0 <_strtod_l+0x858>)
 8013088:	ee26 7b07 	vmul.f64	d7, d6, d7
 801308c:	ee17 2a90 	vmov	r2, s15
 8013090:	4013      	ands	r3, r2
 8013092:	ec5b ab17 	vmov	sl, fp, d7
 8013096:	2b00      	cmp	r3, #0
 8013098:	f47f ae01 	bne.w	8012c9e <_strtod_l+0x436>
 801309c:	9a05      	ldr	r2, [sp, #20]
 801309e:	2322      	movs	r3, #34	@ 0x22
 80130a0:	6013      	str	r3, [r2, #0]
 80130a2:	e5fc      	b.n	8012c9e <_strtod_l+0x436>
 80130a4:	f3af 8000 	nop.w
 80130a8:	ffc00000 	.word	0xffc00000
 80130ac:	41dfffff 	.word	0x41dfffff
 80130b0:	00000000 	.word	0x00000000
 80130b4:	39500000 	.word	0x39500000
 80130b8:	080169a0 	.word	0x080169a0
 80130bc:	fffffc02 	.word	0xfffffc02
 80130c0:	7ff00000 	.word	0x7ff00000
 80130c4:	46d9      	mov	r9, fp
 80130c6:	d15d      	bne.n	8013184 <_strtod_l+0x91c>
 80130c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80130cc:	f1b8 0f00 	cmp.w	r8, #0
 80130d0:	d02a      	beq.n	8013128 <_strtod_l+0x8c0>
 80130d2:	4aab      	ldr	r2, [pc, #684]	@ (8013380 <_strtod_l+0xb18>)
 80130d4:	4293      	cmp	r3, r2
 80130d6:	d12a      	bne.n	801312e <_strtod_l+0x8c6>
 80130d8:	9b06      	ldr	r3, [sp, #24]
 80130da:	4652      	mov	r2, sl
 80130dc:	b1fb      	cbz	r3, 801311e <_strtod_l+0x8b6>
 80130de:	4ba9      	ldr	r3, [pc, #676]	@ (8013384 <_strtod_l+0xb1c>)
 80130e0:	ea0b 0303 	and.w	r3, fp, r3
 80130e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80130e8:	f04f 31ff 	mov.w	r1, #4294967295
 80130ec:	d81a      	bhi.n	8013124 <_strtod_l+0x8bc>
 80130ee:	0d1b      	lsrs	r3, r3, #20
 80130f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80130f4:	fa01 f303 	lsl.w	r3, r1, r3
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d118      	bne.n	801312e <_strtod_l+0x8c6>
 80130fc:	4ba2      	ldr	r3, [pc, #648]	@ (8013388 <_strtod_l+0xb20>)
 80130fe:	4599      	cmp	r9, r3
 8013100:	d102      	bne.n	8013108 <_strtod_l+0x8a0>
 8013102:	3201      	adds	r2, #1
 8013104:	f43f adc0 	beq.w	8012c88 <_strtod_l+0x420>
 8013108:	4b9e      	ldr	r3, [pc, #632]	@ (8013384 <_strtod_l+0xb1c>)
 801310a:	ea09 0303 	and.w	r3, r9, r3
 801310e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8013112:	f04f 0a00 	mov.w	sl, #0
 8013116:	9b06      	ldr	r3, [sp, #24]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d1b0      	bne.n	801307e <_strtod_l+0x816>
 801311c:	e5bf      	b.n	8012c9e <_strtod_l+0x436>
 801311e:	f04f 33ff 	mov.w	r3, #4294967295
 8013122:	e7e9      	b.n	80130f8 <_strtod_l+0x890>
 8013124:	460b      	mov	r3, r1
 8013126:	e7e7      	b.n	80130f8 <_strtod_l+0x890>
 8013128:	ea53 030a 	orrs.w	r3, r3, sl
 801312c:	d099      	beq.n	8013062 <_strtod_l+0x7fa>
 801312e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013130:	b1c3      	cbz	r3, 8013164 <_strtod_l+0x8fc>
 8013132:	ea13 0f09 	tst.w	r3, r9
 8013136:	d0ee      	beq.n	8013116 <_strtod_l+0x8ae>
 8013138:	9a06      	ldr	r2, [sp, #24]
 801313a:	4650      	mov	r0, sl
 801313c:	4659      	mov	r1, fp
 801313e:	f1b8 0f00 	cmp.w	r8, #0
 8013142:	d013      	beq.n	801316c <_strtod_l+0x904>
 8013144:	f7ff fb75 	bl	8012832 <sulp>
 8013148:	ee39 7b00 	vadd.f64	d7, d9, d0
 801314c:	ec5b ab17 	vmov	sl, fp, d7
 8013150:	e7e1      	b.n	8013116 <_strtod_l+0x8ae>
 8013152:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013156:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801315a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801315e:	f04f 3aff 	mov.w	sl, #4294967295
 8013162:	e7d8      	b.n	8013116 <_strtod_l+0x8ae>
 8013164:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013166:	ea13 0f0a 	tst.w	r3, sl
 801316a:	e7e4      	b.n	8013136 <_strtod_l+0x8ce>
 801316c:	f7ff fb61 	bl	8012832 <sulp>
 8013170:	ee39 0b40 	vsub.f64	d0, d9, d0
 8013174:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801317c:	ec5b ab10 	vmov	sl, fp, d0
 8013180:	d1c9      	bne.n	8013116 <_strtod_l+0x8ae>
 8013182:	e615      	b.n	8012db0 <_strtod_l+0x548>
 8013184:	4629      	mov	r1, r5
 8013186:	4620      	mov	r0, r4
 8013188:	f002 fd90 	bl	8015cac <__ratio>
 801318c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8013190:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013198:	d85d      	bhi.n	8013256 <_strtod_l+0x9ee>
 801319a:	f1b8 0f00 	cmp.w	r8, #0
 801319e:	d164      	bne.n	801326a <_strtod_l+0xa02>
 80131a0:	f1ba 0f00 	cmp.w	sl, #0
 80131a4:	d14b      	bne.n	801323e <_strtod_l+0x9d6>
 80131a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80131aa:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d160      	bne.n	8013274 <_strtod_l+0xa0c>
 80131b2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80131b6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80131ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131be:	d401      	bmi.n	80131c4 <_strtod_l+0x95c>
 80131c0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80131c4:	eeb1 ab48 	vneg.f64	d10, d8
 80131c8:	486e      	ldr	r0, [pc, #440]	@ (8013384 <_strtod_l+0xb1c>)
 80131ca:	4970      	ldr	r1, [pc, #448]	@ (801338c <_strtod_l+0xb24>)
 80131cc:	ea09 0700 	and.w	r7, r9, r0
 80131d0:	428f      	cmp	r7, r1
 80131d2:	ec53 2b1a 	vmov	r2, r3, d10
 80131d6:	d17d      	bne.n	80132d4 <_strtod_l+0xa6c>
 80131d8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80131dc:	ec4b ab1c 	vmov	d12, sl, fp
 80131e0:	eeb0 0b4c 	vmov.f64	d0, d12
 80131e4:	f002 fc9a 	bl	8015b1c <__ulp>
 80131e8:	4866      	ldr	r0, [pc, #408]	@ (8013384 <_strtod_l+0xb1c>)
 80131ea:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80131ee:	ee1c 3a90 	vmov	r3, s25
 80131f2:	4a67      	ldr	r2, [pc, #412]	@ (8013390 <_strtod_l+0xb28>)
 80131f4:	ea03 0100 	and.w	r1, r3, r0
 80131f8:	4291      	cmp	r1, r2
 80131fa:	ec5b ab1c 	vmov	sl, fp, d12
 80131fe:	d93c      	bls.n	801327a <_strtod_l+0xa12>
 8013200:	ee19 2a90 	vmov	r2, s19
 8013204:	4b60      	ldr	r3, [pc, #384]	@ (8013388 <_strtod_l+0xb20>)
 8013206:	429a      	cmp	r2, r3
 8013208:	d104      	bne.n	8013214 <_strtod_l+0x9ac>
 801320a:	ee19 3a10 	vmov	r3, s18
 801320e:	3301      	adds	r3, #1
 8013210:	f43f ad3a 	beq.w	8012c88 <_strtod_l+0x420>
 8013214:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8013388 <_strtod_l+0xb20>
 8013218:	f04f 3aff 	mov.w	sl, #4294967295
 801321c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801321e:	9805      	ldr	r0, [sp, #20]
 8013220:	f002 f948 	bl	80154b4 <_Bfree>
 8013224:	9805      	ldr	r0, [sp, #20]
 8013226:	4631      	mov	r1, r6
 8013228:	f002 f944 	bl	80154b4 <_Bfree>
 801322c:	9805      	ldr	r0, [sp, #20]
 801322e:	4629      	mov	r1, r5
 8013230:	f002 f940 	bl	80154b4 <_Bfree>
 8013234:	9805      	ldr	r0, [sp, #20]
 8013236:	4621      	mov	r1, r4
 8013238:	f002 f93c 	bl	80154b4 <_Bfree>
 801323c:	e625      	b.n	8012e8a <_strtod_l+0x622>
 801323e:	f1ba 0f01 	cmp.w	sl, #1
 8013242:	d103      	bne.n	801324c <_strtod_l+0x9e4>
 8013244:	f1bb 0f00 	cmp.w	fp, #0
 8013248:	f43f adb2 	beq.w	8012db0 <_strtod_l+0x548>
 801324c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013250:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8013254:	e7b8      	b.n	80131c8 <_strtod_l+0x960>
 8013256:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801325a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801325e:	f1b8 0f00 	cmp.w	r8, #0
 8013262:	d0af      	beq.n	80131c4 <_strtod_l+0x95c>
 8013264:	eeb0 ab48 	vmov.f64	d10, d8
 8013268:	e7ae      	b.n	80131c8 <_strtod_l+0x960>
 801326a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801326e:	eeb0 8b4a 	vmov.f64	d8, d10
 8013272:	e7a9      	b.n	80131c8 <_strtod_l+0x960>
 8013274:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013278:	e7a6      	b.n	80131c8 <_strtod_l+0x960>
 801327a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801327e:	9b06      	ldr	r3, [sp, #24]
 8013280:	46d9      	mov	r9, fp
 8013282:	2b00      	cmp	r3, #0
 8013284:	d1ca      	bne.n	801321c <_strtod_l+0x9b4>
 8013286:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801328a:	0d1b      	lsrs	r3, r3, #20
 801328c:	051b      	lsls	r3, r3, #20
 801328e:	429f      	cmp	r7, r3
 8013290:	d1c4      	bne.n	801321c <_strtod_l+0x9b4>
 8013292:	ec51 0b18 	vmov	r0, r1, d8
 8013296:	f7ed fa77 	bl	8000788 <__aeabi_d2lz>
 801329a:	f7ed fa2f 	bl	80006fc <__aeabi_l2d>
 801329e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80132a2:	ec41 0b17 	vmov	d7, r0, r1
 80132a6:	ea49 090a 	orr.w	r9, r9, sl
 80132aa:	ea59 0908 	orrs.w	r9, r9, r8
 80132ae:	ee38 8b47 	vsub.f64	d8, d8, d7
 80132b2:	d03c      	beq.n	801332e <_strtod_l+0xac6>
 80132b4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8013368 <_strtod_l+0xb00>
 80132b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80132bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132c0:	f53f aced 	bmi.w	8012c9e <_strtod_l+0x436>
 80132c4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8013370 <_strtod_l+0xb08>
 80132c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80132cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d0:	dda4      	ble.n	801321c <_strtod_l+0x9b4>
 80132d2:	e4e4      	b.n	8012c9e <_strtod_l+0x436>
 80132d4:	9906      	ldr	r1, [sp, #24]
 80132d6:	b1e1      	cbz	r1, 8013312 <_strtod_l+0xaaa>
 80132d8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80132dc:	d819      	bhi.n	8013312 <_strtod_l+0xaaa>
 80132de:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80132e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e6:	d811      	bhi.n	801330c <_strtod_l+0xaa4>
 80132e8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80132ec:	ee18 3a10 	vmov	r3, s16
 80132f0:	2b01      	cmp	r3, #1
 80132f2:	bf38      	it	cc
 80132f4:	2301      	movcc	r3, #1
 80132f6:	ee08 3a10 	vmov	s16, r3
 80132fa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80132fe:	f1b8 0f00 	cmp.w	r8, #0
 8013302:	d111      	bne.n	8013328 <_strtod_l+0xac0>
 8013304:	eeb1 7b48 	vneg.f64	d7, d8
 8013308:	ec53 2b17 	vmov	r2, r3, d7
 801330c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8013310:	1bcb      	subs	r3, r1, r7
 8013312:	eeb0 0b49 	vmov.f64	d0, d9
 8013316:	ec43 2b1a 	vmov	d10, r2, r3
 801331a:	f002 fbff 	bl	8015b1c <__ulp>
 801331e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8013322:	ec5b ab19 	vmov	sl, fp, d9
 8013326:	e7aa      	b.n	801327e <_strtod_l+0xa16>
 8013328:	eeb0 7b48 	vmov.f64	d7, d8
 801332c:	e7ec      	b.n	8013308 <_strtod_l+0xaa0>
 801332e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8013378 <_strtod_l+0xb10>
 8013332:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801333a:	f57f af6f 	bpl.w	801321c <_strtod_l+0x9b4>
 801333e:	e4ae      	b.n	8012c9e <_strtod_l+0x436>
 8013340:	2300      	movs	r3, #0
 8013342:	9308      	str	r3, [sp, #32]
 8013344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013346:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013348:	6013      	str	r3, [r2, #0]
 801334a:	f7ff bacc 	b.w	80128e6 <_strtod_l+0x7e>
 801334e:	2a65      	cmp	r2, #101	@ 0x65
 8013350:	f43f abbc 	beq.w	8012acc <_strtod_l+0x264>
 8013354:	2a45      	cmp	r2, #69	@ 0x45
 8013356:	f43f abb9 	beq.w	8012acc <_strtod_l+0x264>
 801335a:	2301      	movs	r3, #1
 801335c:	9306      	str	r3, [sp, #24]
 801335e:	f7ff bbf0 	b.w	8012b42 <_strtod_l+0x2da>
 8013362:	bf00      	nop
 8013364:	f3af 8000 	nop.w
 8013368:	94a03595 	.word	0x94a03595
 801336c:	3fdfffff 	.word	0x3fdfffff
 8013370:	35afe535 	.word	0x35afe535
 8013374:	3fe00000 	.word	0x3fe00000
 8013378:	94a03595 	.word	0x94a03595
 801337c:	3fcfffff 	.word	0x3fcfffff
 8013380:	000fffff 	.word	0x000fffff
 8013384:	7ff00000 	.word	0x7ff00000
 8013388:	7fefffff 	.word	0x7fefffff
 801338c:	7fe00000 	.word	0x7fe00000
 8013390:	7c9fffff 	.word	0x7c9fffff

08013394 <strtod>:
 8013394:	460a      	mov	r2, r1
 8013396:	4601      	mov	r1, r0
 8013398:	4802      	ldr	r0, [pc, #8]	@ (80133a4 <strtod+0x10>)
 801339a:	4b03      	ldr	r3, [pc, #12]	@ (80133a8 <strtod+0x14>)
 801339c:	6800      	ldr	r0, [r0, #0]
 801339e:	f7ff ba63 	b.w	8012868 <_strtod_l>
 80133a2:	bf00      	nop
 80133a4:	2400027c 	.word	0x2400027c
 80133a8:	24000110 	.word	0x24000110

080133ac <__cvt>:
 80133ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133ae:	ed2d 8b02 	vpush	{d8}
 80133b2:	eeb0 8b40 	vmov.f64	d8, d0
 80133b6:	b085      	sub	sp, #20
 80133b8:	4617      	mov	r7, r2
 80133ba:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80133bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80133be:	ee18 2a90 	vmov	r2, s17
 80133c2:	f025 0520 	bic.w	r5, r5, #32
 80133c6:	2a00      	cmp	r2, #0
 80133c8:	bfb6      	itet	lt
 80133ca:	222d      	movlt	r2, #45	@ 0x2d
 80133cc:	2200      	movge	r2, #0
 80133ce:	eeb1 8b40 	vneglt.f64	d8, d0
 80133d2:	2d46      	cmp	r5, #70	@ 0x46
 80133d4:	460c      	mov	r4, r1
 80133d6:	701a      	strb	r2, [r3, #0]
 80133d8:	d004      	beq.n	80133e4 <__cvt+0x38>
 80133da:	2d45      	cmp	r5, #69	@ 0x45
 80133dc:	d100      	bne.n	80133e0 <__cvt+0x34>
 80133de:	3401      	adds	r4, #1
 80133e0:	2102      	movs	r1, #2
 80133e2:	e000      	b.n	80133e6 <__cvt+0x3a>
 80133e4:	2103      	movs	r1, #3
 80133e6:	ab03      	add	r3, sp, #12
 80133e8:	9301      	str	r3, [sp, #4]
 80133ea:	ab02      	add	r3, sp, #8
 80133ec:	9300      	str	r3, [sp, #0]
 80133ee:	4622      	mov	r2, r4
 80133f0:	4633      	mov	r3, r6
 80133f2:	eeb0 0b48 	vmov.f64	d0, d8
 80133f6:	f000 fe7b 	bl	80140f0 <_dtoa_r>
 80133fa:	2d47      	cmp	r5, #71	@ 0x47
 80133fc:	d114      	bne.n	8013428 <__cvt+0x7c>
 80133fe:	07fb      	lsls	r3, r7, #31
 8013400:	d50a      	bpl.n	8013418 <__cvt+0x6c>
 8013402:	1902      	adds	r2, r0, r4
 8013404:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801340c:	bf08      	it	eq
 801340e:	9203      	streq	r2, [sp, #12]
 8013410:	2130      	movs	r1, #48	@ 0x30
 8013412:	9b03      	ldr	r3, [sp, #12]
 8013414:	4293      	cmp	r3, r2
 8013416:	d319      	bcc.n	801344c <__cvt+0xa0>
 8013418:	9b03      	ldr	r3, [sp, #12]
 801341a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801341c:	1a1b      	subs	r3, r3, r0
 801341e:	6013      	str	r3, [r2, #0]
 8013420:	b005      	add	sp, #20
 8013422:	ecbd 8b02 	vpop	{d8}
 8013426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013428:	2d46      	cmp	r5, #70	@ 0x46
 801342a:	eb00 0204 	add.w	r2, r0, r4
 801342e:	d1e9      	bne.n	8013404 <__cvt+0x58>
 8013430:	7803      	ldrb	r3, [r0, #0]
 8013432:	2b30      	cmp	r3, #48	@ 0x30
 8013434:	d107      	bne.n	8013446 <__cvt+0x9a>
 8013436:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801343e:	bf1c      	itt	ne
 8013440:	f1c4 0401 	rsbne	r4, r4, #1
 8013444:	6034      	strne	r4, [r6, #0]
 8013446:	6833      	ldr	r3, [r6, #0]
 8013448:	441a      	add	r2, r3
 801344a:	e7db      	b.n	8013404 <__cvt+0x58>
 801344c:	1c5c      	adds	r4, r3, #1
 801344e:	9403      	str	r4, [sp, #12]
 8013450:	7019      	strb	r1, [r3, #0]
 8013452:	e7de      	b.n	8013412 <__cvt+0x66>

08013454 <__exponent>:
 8013454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013456:	2900      	cmp	r1, #0
 8013458:	bfba      	itte	lt
 801345a:	4249      	neglt	r1, r1
 801345c:	232d      	movlt	r3, #45	@ 0x2d
 801345e:	232b      	movge	r3, #43	@ 0x2b
 8013460:	2909      	cmp	r1, #9
 8013462:	7002      	strb	r2, [r0, #0]
 8013464:	7043      	strb	r3, [r0, #1]
 8013466:	dd29      	ble.n	80134bc <__exponent+0x68>
 8013468:	f10d 0307 	add.w	r3, sp, #7
 801346c:	461d      	mov	r5, r3
 801346e:	270a      	movs	r7, #10
 8013470:	461a      	mov	r2, r3
 8013472:	fbb1 f6f7 	udiv	r6, r1, r7
 8013476:	fb07 1416 	mls	r4, r7, r6, r1
 801347a:	3430      	adds	r4, #48	@ 0x30
 801347c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013480:	460c      	mov	r4, r1
 8013482:	2c63      	cmp	r4, #99	@ 0x63
 8013484:	f103 33ff 	add.w	r3, r3, #4294967295
 8013488:	4631      	mov	r1, r6
 801348a:	dcf1      	bgt.n	8013470 <__exponent+0x1c>
 801348c:	3130      	adds	r1, #48	@ 0x30
 801348e:	1e94      	subs	r4, r2, #2
 8013490:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013494:	1c41      	adds	r1, r0, #1
 8013496:	4623      	mov	r3, r4
 8013498:	42ab      	cmp	r3, r5
 801349a:	d30a      	bcc.n	80134b2 <__exponent+0x5e>
 801349c:	f10d 0309 	add.w	r3, sp, #9
 80134a0:	1a9b      	subs	r3, r3, r2
 80134a2:	42ac      	cmp	r4, r5
 80134a4:	bf88      	it	hi
 80134a6:	2300      	movhi	r3, #0
 80134a8:	3302      	adds	r3, #2
 80134aa:	4403      	add	r3, r0
 80134ac:	1a18      	subs	r0, r3, r0
 80134ae:	b003      	add	sp, #12
 80134b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80134b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80134ba:	e7ed      	b.n	8013498 <__exponent+0x44>
 80134bc:	2330      	movs	r3, #48	@ 0x30
 80134be:	3130      	adds	r1, #48	@ 0x30
 80134c0:	7083      	strb	r3, [r0, #2]
 80134c2:	70c1      	strb	r1, [r0, #3]
 80134c4:	1d03      	adds	r3, r0, #4
 80134c6:	e7f1      	b.n	80134ac <__exponent+0x58>

080134c8 <_printf_float>:
 80134c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134cc:	b08d      	sub	sp, #52	@ 0x34
 80134ce:	460c      	mov	r4, r1
 80134d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80134d4:	4616      	mov	r6, r2
 80134d6:	461f      	mov	r7, r3
 80134d8:	4605      	mov	r5, r0
 80134da:	f000 fce9 	bl	8013eb0 <_localeconv_r>
 80134de:	f8d0 b000 	ldr.w	fp, [r0]
 80134e2:	4658      	mov	r0, fp
 80134e4:	f7ec ff74 	bl	80003d0 <strlen>
 80134e8:	2300      	movs	r3, #0
 80134ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80134ec:	f8d8 3000 	ldr.w	r3, [r8]
 80134f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80134f4:	6822      	ldr	r2, [r4, #0]
 80134f6:	9005      	str	r0, [sp, #20]
 80134f8:	3307      	adds	r3, #7
 80134fa:	f023 0307 	bic.w	r3, r3, #7
 80134fe:	f103 0108 	add.w	r1, r3, #8
 8013502:	f8c8 1000 	str.w	r1, [r8]
 8013506:	ed93 0b00 	vldr	d0, [r3]
 801350a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8013768 <_printf_float+0x2a0>
 801350e:	eeb0 7bc0 	vabs.f64	d7, d0
 8013512:	eeb4 7b46 	vcmp.f64	d7, d6
 8013516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801351a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801351e:	dd24      	ble.n	801356a <_printf_float+0xa2>
 8013520:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013528:	d502      	bpl.n	8013530 <_printf_float+0x68>
 801352a:	232d      	movs	r3, #45	@ 0x2d
 801352c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013530:	498f      	ldr	r1, [pc, #572]	@ (8013770 <_printf_float+0x2a8>)
 8013532:	4b90      	ldr	r3, [pc, #576]	@ (8013774 <_printf_float+0x2ac>)
 8013534:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8013538:	bf94      	ite	ls
 801353a:	4688      	movls	r8, r1
 801353c:	4698      	movhi	r8, r3
 801353e:	f022 0204 	bic.w	r2, r2, #4
 8013542:	2303      	movs	r3, #3
 8013544:	6123      	str	r3, [r4, #16]
 8013546:	6022      	str	r2, [r4, #0]
 8013548:	f04f 0a00 	mov.w	sl, #0
 801354c:	9700      	str	r7, [sp, #0]
 801354e:	4633      	mov	r3, r6
 8013550:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013552:	4621      	mov	r1, r4
 8013554:	4628      	mov	r0, r5
 8013556:	f000 f9d1 	bl	80138fc <_printf_common>
 801355a:	3001      	adds	r0, #1
 801355c:	f040 8089 	bne.w	8013672 <_printf_float+0x1aa>
 8013560:	f04f 30ff 	mov.w	r0, #4294967295
 8013564:	b00d      	add	sp, #52	@ 0x34
 8013566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801356a:	eeb4 0b40 	vcmp.f64	d0, d0
 801356e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013572:	d709      	bvc.n	8013588 <_printf_float+0xc0>
 8013574:	ee10 3a90 	vmov	r3, s1
 8013578:	2b00      	cmp	r3, #0
 801357a:	bfbc      	itt	lt
 801357c:	232d      	movlt	r3, #45	@ 0x2d
 801357e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013582:	497d      	ldr	r1, [pc, #500]	@ (8013778 <_printf_float+0x2b0>)
 8013584:	4b7d      	ldr	r3, [pc, #500]	@ (801377c <_printf_float+0x2b4>)
 8013586:	e7d5      	b.n	8013534 <_printf_float+0x6c>
 8013588:	6863      	ldr	r3, [r4, #4]
 801358a:	1c59      	adds	r1, r3, #1
 801358c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8013590:	d139      	bne.n	8013606 <_printf_float+0x13e>
 8013592:	2306      	movs	r3, #6
 8013594:	6063      	str	r3, [r4, #4]
 8013596:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801359a:	2300      	movs	r3, #0
 801359c:	6022      	str	r2, [r4, #0]
 801359e:	9303      	str	r3, [sp, #12]
 80135a0:	ab0a      	add	r3, sp, #40	@ 0x28
 80135a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80135a6:	ab09      	add	r3, sp, #36	@ 0x24
 80135a8:	9300      	str	r3, [sp, #0]
 80135aa:	6861      	ldr	r1, [r4, #4]
 80135ac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80135b0:	4628      	mov	r0, r5
 80135b2:	f7ff fefb 	bl	80133ac <__cvt>
 80135b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80135ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80135bc:	4680      	mov	r8, r0
 80135be:	d129      	bne.n	8013614 <_printf_float+0x14c>
 80135c0:	1cc8      	adds	r0, r1, #3
 80135c2:	db02      	blt.n	80135ca <_printf_float+0x102>
 80135c4:	6863      	ldr	r3, [r4, #4]
 80135c6:	4299      	cmp	r1, r3
 80135c8:	dd41      	ble.n	801364e <_printf_float+0x186>
 80135ca:	f1a9 0902 	sub.w	r9, r9, #2
 80135ce:	fa5f f989 	uxtb.w	r9, r9
 80135d2:	3901      	subs	r1, #1
 80135d4:	464a      	mov	r2, r9
 80135d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80135da:	9109      	str	r1, [sp, #36]	@ 0x24
 80135dc:	f7ff ff3a 	bl	8013454 <__exponent>
 80135e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80135e2:	1813      	adds	r3, r2, r0
 80135e4:	2a01      	cmp	r2, #1
 80135e6:	4682      	mov	sl, r0
 80135e8:	6123      	str	r3, [r4, #16]
 80135ea:	dc02      	bgt.n	80135f2 <_printf_float+0x12a>
 80135ec:	6822      	ldr	r2, [r4, #0]
 80135ee:	07d2      	lsls	r2, r2, #31
 80135f0:	d501      	bpl.n	80135f6 <_printf_float+0x12e>
 80135f2:	3301      	adds	r3, #1
 80135f4:	6123      	str	r3, [r4, #16]
 80135f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d0a6      	beq.n	801354c <_printf_float+0x84>
 80135fe:	232d      	movs	r3, #45	@ 0x2d
 8013600:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013604:	e7a2      	b.n	801354c <_printf_float+0x84>
 8013606:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801360a:	d1c4      	bne.n	8013596 <_printf_float+0xce>
 801360c:	2b00      	cmp	r3, #0
 801360e:	d1c2      	bne.n	8013596 <_printf_float+0xce>
 8013610:	2301      	movs	r3, #1
 8013612:	e7bf      	b.n	8013594 <_printf_float+0xcc>
 8013614:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013618:	d9db      	bls.n	80135d2 <_printf_float+0x10a>
 801361a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801361e:	d118      	bne.n	8013652 <_printf_float+0x18a>
 8013620:	2900      	cmp	r1, #0
 8013622:	6863      	ldr	r3, [r4, #4]
 8013624:	dd0b      	ble.n	801363e <_printf_float+0x176>
 8013626:	6121      	str	r1, [r4, #16]
 8013628:	b913      	cbnz	r3, 8013630 <_printf_float+0x168>
 801362a:	6822      	ldr	r2, [r4, #0]
 801362c:	07d0      	lsls	r0, r2, #31
 801362e:	d502      	bpl.n	8013636 <_printf_float+0x16e>
 8013630:	3301      	adds	r3, #1
 8013632:	440b      	add	r3, r1
 8013634:	6123      	str	r3, [r4, #16]
 8013636:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013638:	f04f 0a00 	mov.w	sl, #0
 801363c:	e7db      	b.n	80135f6 <_printf_float+0x12e>
 801363e:	b913      	cbnz	r3, 8013646 <_printf_float+0x17e>
 8013640:	6822      	ldr	r2, [r4, #0]
 8013642:	07d2      	lsls	r2, r2, #31
 8013644:	d501      	bpl.n	801364a <_printf_float+0x182>
 8013646:	3302      	adds	r3, #2
 8013648:	e7f4      	b.n	8013634 <_printf_float+0x16c>
 801364a:	2301      	movs	r3, #1
 801364c:	e7f2      	b.n	8013634 <_printf_float+0x16c>
 801364e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8013652:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013654:	4299      	cmp	r1, r3
 8013656:	db05      	blt.n	8013664 <_printf_float+0x19c>
 8013658:	6823      	ldr	r3, [r4, #0]
 801365a:	6121      	str	r1, [r4, #16]
 801365c:	07d8      	lsls	r0, r3, #31
 801365e:	d5ea      	bpl.n	8013636 <_printf_float+0x16e>
 8013660:	1c4b      	adds	r3, r1, #1
 8013662:	e7e7      	b.n	8013634 <_printf_float+0x16c>
 8013664:	2900      	cmp	r1, #0
 8013666:	bfd4      	ite	le
 8013668:	f1c1 0202 	rsble	r2, r1, #2
 801366c:	2201      	movgt	r2, #1
 801366e:	4413      	add	r3, r2
 8013670:	e7e0      	b.n	8013634 <_printf_float+0x16c>
 8013672:	6823      	ldr	r3, [r4, #0]
 8013674:	055a      	lsls	r2, r3, #21
 8013676:	d407      	bmi.n	8013688 <_printf_float+0x1c0>
 8013678:	6923      	ldr	r3, [r4, #16]
 801367a:	4642      	mov	r2, r8
 801367c:	4631      	mov	r1, r6
 801367e:	4628      	mov	r0, r5
 8013680:	47b8      	blx	r7
 8013682:	3001      	adds	r0, #1
 8013684:	d12a      	bne.n	80136dc <_printf_float+0x214>
 8013686:	e76b      	b.n	8013560 <_printf_float+0x98>
 8013688:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801368c:	f240 80e0 	bls.w	8013850 <_printf_float+0x388>
 8013690:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8013694:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801369c:	d133      	bne.n	8013706 <_printf_float+0x23e>
 801369e:	4a38      	ldr	r2, [pc, #224]	@ (8013780 <_printf_float+0x2b8>)
 80136a0:	2301      	movs	r3, #1
 80136a2:	4631      	mov	r1, r6
 80136a4:	4628      	mov	r0, r5
 80136a6:	47b8      	blx	r7
 80136a8:	3001      	adds	r0, #1
 80136aa:	f43f af59 	beq.w	8013560 <_printf_float+0x98>
 80136ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80136b2:	4543      	cmp	r3, r8
 80136b4:	db02      	blt.n	80136bc <_printf_float+0x1f4>
 80136b6:	6823      	ldr	r3, [r4, #0]
 80136b8:	07d8      	lsls	r0, r3, #31
 80136ba:	d50f      	bpl.n	80136dc <_printf_float+0x214>
 80136bc:	9b05      	ldr	r3, [sp, #20]
 80136be:	465a      	mov	r2, fp
 80136c0:	4631      	mov	r1, r6
 80136c2:	4628      	mov	r0, r5
 80136c4:	47b8      	blx	r7
 80136c6:	3001      	adds	r0, #1
 80136c8:	f43f af4a 	beq.w	8013560 <_printf_float+0x98>
 80136cc:	f04f 0900 	mov.w	r9, #0
 80136d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80136d4:	f104 0a1a 	add.w	sl, r4, #26
 80136d8:	45c8      	cmp	r8, r9
 80136da:	dc09      	bgt.n	80136f0 <_printf_float+0x228>
 80136dc:	6823      	ldr	r3, [r4, #0]
 80136de:	079b      	lsls	r3, r3, #30
 80136e0:	f100 8107 	bmi.w	80138f2 <_printf_float+0x42a>
 80136e4:	68e0      	ldr	r0, [r4, #12]
 80136e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80136e8:	4298      	cmp	r0, r3
 80136ea:	bfb8      	it	lt
 80136ec:	4618      	movlt	r0, r3
 80136ee:	e739      	b.n	8013564 <_printf_float+0x9c>
 80136f0:	2301      	movs	r3, #1
 80136f2:	4652      	mov	r2, sl
 80136f4:	4631      	mov	r1, r6
 80136f6:	4628      	mov	r0, r5
 80136f8:	47b8      	blx	r7
 80136fa:	3001      	adds	r0, #1
 80136fc:	f43f af30 	beq.w	8013560 <_printf_float+0x98>
 8013700:	f109 0901 	add.w	r9, r9, #1
 8013704:	e7e8      	b.n	80136d8 <_printf_float+0x210>
 8013706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013708:	2b00      	cmp	r3, #0
 801370a:	dc3b      	bgt.n	8013784 <_printf_float+0x2bc>
 801370c:	4a1c      	ldr	r2, [pc, #112]	@ (8013780 <_printf_float+0x2b8>)
 801370e:	2301      	movs	r3, #1
 8013710:	4631      	mov	r1, r6
 8013712:	4628      	mov	r0, r5
 8013714:	47b8      	blx	r7
 8013716:	3001      	adds	r0, #1
 8013718:	f43f af22 	beq.w	8013560 <_printf_float+0x98>
 801371c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013720:	ea59 0303 	orrs.w	r3, r9, r3
 8013724:	d102      	bne.n	801372c <_printf_float+0x264>
 8013726:	6823      	ldr	r3, [r4, #0]
 8013728:	07d9      	lsls	r1, r3, #31
 801372a:	d5d7      	bpl.n	80136dc <_printf_float+0x214>
 801372c:	9b05      	ldr	r3, [sp, #20]
 801372e:	465a      	mov	r2, fp
 8013730:	4631      	mov	r1, r6
 8013732:	4628      	mov	r0, r5
 8013734:	47b8      	blx	r7
 8013736:	3001      	adds	r0, #1
 8013738:	f43f af12 	beq.w	8013560 <_printf_float+0x98>
 801373c:	f04f 0a00 	mov.w	sl, #0
 8013740:	f104 0b1a 	add.w	fp, r4, #26
 8013744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013746:	425b      	negs	r3, r3
 8013748:	4553      	cmp	r3, sl
 801374a:	dc01      	bgt.n	8013750 <_printf_float+0x288>
 801374c:	464b      	mov	r3, r9
 801374e:	e794      	b.n	801367a <_printf_float+0x1b2>
 8013750:	2301      	movs	r3, #1
 8013752:	465a      	mov	r2, fp
 8013754:	4631      	mov	r1, r6
 8013756:	4628      	mov	r0, r5
 8013758:	47b8      	blx	r7
 801375a:	3001      	adds	r0, #1
 801375c:	f43f af00 	beq.w	8013560 <_printf_float+0x98>
 8013760:	f10a 0a01 	add.w	sl, sl, #1
 8013764:	e7ee      	b.n	8013744 <_printf_float+0x27c>
 8013766:	bf00      	nop
 8013768:	ffffffff 	.word	0xffffffff
 801376c:	7fefffff 	.word	0x7fefffff
 8013770:	08016ac9 	.word	0x08016ac9
 8013774:	08016acd 	.word	0x08016acd
 8013778:	08016ad1 	.word	0x08016ad1
 801377c:	08016ad5 	.word	0x08016ad5
 8013780:	08016ad9 	.word	0x08016ad9
 8013784:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013786:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801378a:	4553      	cmp	r3, sl
 801378c:	bfa8      	it	ge
 801378e:	4653      	movge	r3, sl
 8013790:	2b00      	cmp	r3, #0
 8013792:	4699      	mov	r9, r3
 8013794:	dc37      	bgt.n	8013806 <_printf_float+0x33e>
 8013796:	2300      	movs	r3, #0
 8013798:	9307      	str	r3, [sp, #28]
 801379a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801379e:	f104 021a 	add.w	r2, r4, #26
 80137a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80137a4:	9907      	ldr	r1, [sp, #28]
 80137a6:	9306      	str	r3, [sp, #24]
 80137a8:	eba3 0309 	sub.w	r3, r3, r9
 80137ac:	428b      	cmp	r3, r1
 80137ae:	dc31      	bgt.n	8013814 <_printf_float+0x34c>
 80137b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137b2:	459a      	cmp	sl, r3
 80137b4:	dc3b      	bgt.n	801382e <_printf_float+0x366>
 80137b6:	6823      	ldr	r3, [r4, #0]
 80137b8:	07da      	lsls	r2, r3, #31
 80137ba:	d438      	bmi.n	801382e <_printf_float+0x366>
 80137bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137be:	ebaa 0903 	sub.w	r9, sl, r3
 80137c2:	9b06      	ldr	r3, [sp, #24]
 80137c4:	ebaa 0303 	sub.w	r3, sl, r3
 80137c8:	4599      	cmp	r9, r3
 80137ca:	bfa8      	it	ge
 80137cc:	4699      	movge	r9, r3
 80137ce:	f1b9 0f00 	cmp.w	r9, #0
 80137d2:	dc34      	bgt.n	801383e <_printf_float+0x376>
 80137d4:	f04f 0800 	mov.w	r8, #0
 80137d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137dc:	f104 0b1a 	add.w	fp, r4, #26
 80137e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137e2:	ebaa 0303 	sub.w	r3, sl, r3
 80137e6:	eba3 0309 	sub.w	r3, r3, r9
 80137ea:	4543      	cmp	r3, r8
 80137ec:	f77f af76 	ble.w	80136dc <_printf_float+0x214>
 80137f0:	2301      	movs	r3, #1
 80137f2:	465a      	mov	r2, fp
 80137f4:	4631      	mov	r1, r6
 80137f6:	4628      	mov	r0, r5
 80137f8:	47b8      	blx	r7
 80137fa:	3001      	adds	r0, #1
 80137fc:	f43f aeb0 	beq.w	8013560 <_printf_float+0x98>
 8013800:	f108 0801 	add.w	r8, r8, #1
 8013804:	e7ec      	b.n	80137e0 <_printf_float+0x318>
 8013806:	4642      	mov	r2, r8
 8013808:	4631      	mov	r1, r6
 801380a:	4628      	mov	r0, r5
 801380c:	47b8      	blx	r7
 801380e:	3001      	adds	r0, #1
 8013810:	d1c1      	bne.n	8013796 <_printf_float+0x2ce>
 8013812:	e6a5      	b.n	8013560 <_printf_float+0x98>
 8013814:	2301      	movs	r3, #1
 8013816:	4631      	mov	r1, r6
 8013818:	4628      	mov	r0, r5
 801381a:	9206      	str	r2, [sp, #24]
 801381c:	47b8      	blx	r7
 801381e:	3001      	adds	r0, #1
 8013820:	f43f ae9e 	beq.w	8013560 <_printf_float+0x98>
 8013824:	9b07      	ldr	r3, [sp, #28]
 8013826:	9a06      	ldr	r2, [sp, #24]
 8013828:	3301      	adds	r3, #1
 801382a:	9307      	str	r3, [sp, #28]
 801382c:	e7b9      	b.n	80137a2 <_printf_float+0x2da>
 801382e:	9b05      	ldr	r3, [sp, #20]
 8013830:	465a      	mov	r2, fp
 8013832:	4631      	mov	r1, r6
 8013834:	4628      	mov	r0, r5
 8013836:	47b8      	blx	r7
 8013838:	3001      	adds	r0, #1
 801383a:	d1bf      	bne.n	80137bc <_printf_float+0x2f4>
 801383c:	e690      	b.n	8013560 <_printf_float+0x98>
 801383e:	9a06      	ldr	r2, [sp, #24]
 8013840:	464b      	mov	r3, r9
 8013842:	4442      	add	r2, r8
 8013844:	4631      	mov	r1, r6
 8013846:	4628      	mov	r0, r5
 8013848:	47b8      	blx	r7
 801384a:	3001      	adds	r0, #1
 801384c:	d1c2      	bne.n	80137d4 <_printf_float+0x30c>
 801384e:	e687      	b.n	8013560 <_printf_float+0x98>
 8013850:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8013854:	f1b9 0f01 	cmp.w	r9, #1
 8013858:	dc01      	bgt.n	801385e <_printf_float+0x396>
 801385a:	07db      	lsls	r3, r3, #31
 801385c:	d536      	bpl.n	80138cc <_printf_float+0x404>
 801385e:	2301      	movs	r3, #1
 8013860:	4642      	mov	r2, r8
 8013862:	4631      	mov	r1, r6
 8013864:	4628      	mov	r0, r5
 8013866:	47b8      	blx	r7
 8013868:	3001      	adds	r0, #1
 801386a:	f43f ae79 	beq.w	8013560 <_printf_float+0x98>
 801386e:	9b05      	ldr	r3, [sp, #20]
 8013870:	465a      	mov	r2, fp
 8013872:	4631      	mov	r1, r6
 8013874:	4628      	mov	r0, r5
 8013876:	47b8      	blx	r7
 8013878:	3001      	adds	r0, #1
 801387a:	f43f ae71 	beq.w	8013560 <_printf_float+0x98>
 801387e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8013882:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801388a:	f109 39ff 	add.w	r9, r9, #4294967295
 801388e:	d018      	beq.n	80138c2 <_printf_float+0x3fa>
 8013890:	464b      	mov	r3, r9
 8013892:	f108 0201 	add.w	r2, r8, #1
 8013896:	4631      	mov	r1, r6
 8013898:	4628      	mov	r0, r5
 801389a:	47b8      	blx	r7
 801389c:	3001      	adds	r0, #1
 801389e:	d10c      	bne.n	80138ba <_printf_float+0x3f2>
 80138a0:	e65e      	b.n	8013560 <_printf_float+0x98>
 80138a2:	2301      	movs	r3, #1
 80138a4:	465a      	mov	r2, fp
 80138a6:	4631      	mov	r1, r6
 80138a8:	4628      	mov	r0, r5
 80138aa:	47b8      	blx	r7
 80138ac:	3001      	adds	r0, #1
 80138ae:	f43f ae57 	beq.w	8013560 <_printf_float+0x98>
 80138b2:	f108 0801 	add.w	r8, r8, #1
 80138b6:	45c8      	cmp	r8, r9
 80138b8:	dbf3      	blt.n	80138a2 <_printf_float+0x3da>
 80138ba:	4653      	mov	r3, sl
 80138bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80138c0:	e6dc      	b.n	801367c <_printf_float+0x1b4>
 80138c2:	f04f 0800 	mov.w	r8, #0
 80138c6:	f104 0b1a 	add.w	fp, r4, #26
 80138ca:	e7f4      	b.n	80138b6 <_printf_float+0x3ee>
 80138cc:	2301      	movs	r3, #1
 80138ce:	4642      	mov	r2, r8
 80138d0:	e7e1      	b.n	8013896 <_printf_float+0x3ce>
 80138d2:	2301      	movs	r3, #1
 80138d4:	464a      	mov	r2, r9
 80138d6:	4631      	mov	r1, r6
 80138d8:	4628      	mov	r0, r5
 80138da:	47b8      	blx	r7
 80138dc:	3001      	adds	r0, #1
 80138de:	f43f ae3f 	beq.w	8013560 <_printf_float+0x98>
 80138e2:	f108 0801 	add.w	r8, r8, #1
 80138e6:	68e3      	ldr	r3, [r4, #12]
 80138e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80138ea:	1a5b      	subs	r3, r3, r1
 80138ec:	4543      	cmp	r3, r8
 80138ee:	dcf0      	bgt.n	80138d2 <_printf_float+0x40a>
 80138f0:	e6f8      	b.n	80136e4 <_printf_float+0x21c>
 80138f2:	f04f 0800 	mov.w	r8, #0
 80138f6:	f104 0919 	add.w	r9, r4, #25
 80138fa:	e7f4      	b.n	80138e6 <_printf_float+0x41e>

080138fc <_printf_common>:
 80138fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013900:	4616      	mov	r6, r2
 8013902:	4698      	mov	r8, r3
 8013904:	688a      	ldr	r2, [r1, #8]
 8013906:	690b      	ldr	r3, [r1, #16]
 8013908:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801390c:	4293      	cmp	r3, r2
 801390e:	bfb8      	it	lt
 8013910:	4613      	movlt	r3, r2
 8013912:	6033      	str	r3, [r6, #0]
 8013914:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013918:	4607      	mov	r7, r0
 801391a:	460c      	mov	r4, r1
 801391c:	b10a      	cbz	r2, 8013922 <_printf_common+0x26>
 801391e:	3301      	adds	r3, #1
 8013920:	6033      	str	r3, [r6, #0]
 8013922:	6823      	ldr	r3, [r4, #0]
 8013924:	0699      	lsls	r1, r3, #26
 8013926:	bf42      	ittt	mi
 8013928:	6833      	ldrmi	r3, [r6, #0]
 801392a:	3302      	addmi	r3, #2
 801392c:	6033      	strmi	r3, [r6, #0]
 801392e:	6825      	ldr	r5, [r4, #0]
 8013930:	f015 0506 	ands.w	r5, r5, #6
 8013934:	d106      	bne.n	8013944 <_printf_common+0x48>
 8013936:	f104 0a19 	add.w	sl, r4, #25
 801393a:	68e3      	ldr	r3, [r4, #12]
 801393c:	6832      	ldr	r2, [r6, #0]
 801393e:	1a9b      	subs	r3, r3, r2
 8013940:	42ab      	cmp	r3, r5
 8013942:	dc26      	bgt.n	8013992 <_printf_common+0x96>
 8013944:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013948:	6822      	ldr	r2, [r4, #0]
 801394a:	3b00      	subs	r3, #0
 801394c:	bf18      	it	ne
 801394e:	2301      	movne	r3, #1
 8013950:	0692      	lsls	r2, r2, #26
 8013952:	d42b      	bmi.n	80139ac <_printf_common+0xb0>
 8013954:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013958:	4641      	mov	r1, r8
 801395a:	4638      	mov	r0, r7
 801395c:	47c8      	blx	r9
 801395e:	3001      	adds	r0, #1
 8013960:	d01e      	beq.n	80139a0 <_printf_common+0xa4>
 8013962:	6823      	ldr	r3, [r4, #0]
 8013964:	6922      	ldr	r2, [r4, #16]
 8013966:	f003 0306 	and.w	r3, r3, #6
 801396a:	2b04      	cmp	r3, #4
 801396c:	bf02      	ittt	eq
 801396e:	68e5      	ldreq	r5, [r4, #12]
 8013970:	6833      	ldreq	r3, [r6, #0]
 8013972:	1aed      	subeq	r5, r5, r3
 8013974:	68a3      	ldr	r3, [r4, #8]
 8013976:	bf0c      	ite	eq
 8013978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801397c:	2500      	movne	r5, #0
 801397e:	4293      	cmp	r3, r2
 8013980:	bfc4      	itt	gt
 8013982:	1a9b      	subgt	r3, r3, r2
 8013984:	18ed      	addgt	r5, r5, r3
 8013986:	2600      	movs	r6, #0
 8013988:	341a      	adds	r4, #26
 801398a:	42b5      	cmp	r5, r6
 801398c:	d11a      	bne.n	80139c4 <_printf_common+0xc8>
 801398e:	2000      	movs	r0, #0
 8013990:	e008      	b.n	80139a4 <_printf_common+0xa8>
 8013992:	2301      	movs	r3, #1
 8013994:	4652      	mov	r2, sl
 8013996:	4641      	mov	r1, r8
 8013998:	4638      	mov	r0, r7
 801399a:	47c8      	blx	r9
 801399c:	3001      	adds	r0, #1
 801399e:	d103      	bne.n	80139a8 <_printf_common+0xac>
 80139a0:	f04f 30ff 	mov.w	r0, #4294967295
 80139a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139a8:	3501      	adds	r5, #1
 80139aa:	e7c6      	b.n	801393a <_printf_common+0x3e>
 80139ac:	18e1      	adds	r1, r4, r3
 80139ae:	1c5a      	adds	r2, r3, #1
 80139b0:	2030      	movs	r0, #48	@ 0x30
 80139b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80139b6:	4422      	add	r2, r4
 80139b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80139bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80139c0:	3302      	adds	r3, #2
 80139c2:	e7c7      	b.n	8013954 <_printf_common+0x58>
 80139c4:	2301      	movs	r3, #1
 80139c6:	4622      	mov	r2, r4
 80139c8:	4641      	mov	r1, r8
 80139ca:	4638      	mov	r0, r7
 80139cc:	47c8      	blx	r9
 80139ce:	3001      	adds	r0, #1
 80139d0:	d0e6      	beq.n	80139a0 <_printf_common+0xa4>
 80139d2:	3601      	adds	r6, #1
 80139d4:	e7d9      	b.n	801398a <_printf_common+0x8e>
	...

080139d8 <_printf_i>:
 80139d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139dc:	7e0f      	ldrb	r7, [r1, #24]
 80139de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80139e0:	2f78      	cmp	r7, #120	@ 0x78
 80139e2:	4691      	mov	r9, r2
 80139e4:	4680      	mov	r8, r0
 80139e6:	460c      	mov	r4, r1
 80139e8:	469a      	mov	sl, r3
 80139ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80139ee:	d807      	bhi.n	8013a00 <_printf_i+0x28>
 80139f0:	2f62      	cmp	r7, #98	@ 0x62
 80139f2:	d80a      	bhi.n	8013a0a <_printf_i+0x32>
 80139f4:	2f00      	cmp	r7, #0
 80139f6:	f000 80d2 	beq.w	8013b9e <_printf_i+0x1c6>
 80139fa:	2f58      	cmp	r7, #88	@ 0x58
 80139fc:	f000 80b9 	beq.w	8013b72 <_printf_i+0x19a>
 8013a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013a08:	e03a      	b.n	8013a80 <_printf_i+0xa8>
 8013a0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013a0e:	2b15      	cmp	r3, #21
 8013a10:	d8f6      	bhi.n	8013a00 <_printf_i+0x28>
 8013a12:	a101      	add	r1, pc, #4	@ (adr r1, 8013a18 <_printf_i+0x40>)
 8013a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a18:	08013a71 	.word	0x08013a71
 8013a1c:	08013a85 	.word	0x08013a85
 8013a20:	08013a01 	.word	0x08013a01
 8013a24:	08013a01 	.word	0x08013a01
 8013a28:	08013a01 	.word	0x08013a01
 8013a2c:	08013a01 	.word	0x08013a01
 8013a30:	08013a85 	.word	0x08013a85
 8013a34:	08013a01 	.word	0x08013a01
 8013a38:	08013a01 	.word	0x08013a01
 8013a3c:	08013a01 	.word	0x08013a01
 8013a40:	08013a01 	.word	0x08013a01
 8013a44:	08013b85 	.word	0x08013b85
 8013a48:	08013aaf 	.word	0x08013aaf
 8013a4c:	08013b3f 	.word	0x08013b3f
 8013a50:	08013a01 	.word	0x08013a01
 8013a54:	08013a01 	.word	0x08013a01
 8013a58:	08013ba7 	.word	0x08013ba7
 8013a5c:	08013a01 	.word	0x08013a01
 8013a60:	08013aaf 	.word	0x08013aaf
 8013a64:	08013a01 	.word	0x08013a01
 8013a68:	08013a01 	.word	0x08013a01
 8013a6c:	08013b47 	.word	0x08013b47
 8013a70:	6833      	ldr	r3, [r6, #0]
 8013a72:	1d1a      	adds	r2, r3, #4
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	6032      	str	r2, [r6, #0]
 8013a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013a80:	2301      	movs	r3, #1
 8013a82:	e09d      	b.n	8013bc0 <_printf_i+0x1e8>
 8013a84:	6833      	ldr	r3, [r6, #0]
 8013a86:	6820      	ldr	r0, [r4, #0]
 8013a88:	1d19      	adds	r1, r3, #4
 8013a8a:	6031      	str	r1, [r6, #0]
 8013a8c:	0606      	lsls	r6, r0, #24
 8013a8e:	d501      	bpl.n	8013a94 <_printf_i+0xbc>
 8013a90:	681d      	ldr	r5, [r3, #0]
 8013a92:	e003      	b.n	8013a9c <_printf_i+0xc4>
 8013a94:	0645      	lsls	r5, r0, #25
 8013a96:	d5fb      	bpl.n	8013a90 <_printf_i+0xb8>
 8013a98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013a9c:	2d00      	cmp	r5, #0
 8013a9e:	da03      	bge.n	8013aa8 <_printf_i+0xd0>
 8013aa0:	232d      	movs	r3, #45	@ 0x2d
 8013aa2:	426d      	negs	r5, r5
 8013aa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013aa8:	4859      	ldr	r0, [pc, #356]	@ (8013c10 <_printf_i+0x238>)
 8013aaa:	230a      	movs	r3, #10
 8013aac:	e011      	b.n	8013ad2 <_printf_i+0xfa>
 8013aae:	6821      	ldr	r1, [r4, #0]
 8013ab0:	6833      	ldr	r3, [r6, #0]
 8013ab2:	0608      	lsls	r0, r1, #24
 8013ab4:	f853 5b04 	ldr.w	r5, [r3], #4
 8013ab8:	d402      	bmi.n	8013ac0 <_printf_i+0xe8>
 8013aba:	0649      	lsls	r1, r1, #25
 8013abc:	bf48      	it	mi
 8013abe:	b2ad      	uxthmi	r5, r5
 8013ac0:	2f6f      	cmp	r7, #111	@ 0x6f
 8013ac2:	4853      	ldr	r0, [pc, #332]	@ (8013c10 <_printf_i+0x238>)
 8013ac4:	6033      	str	r3, [r6, #0]
 8013ac6:	bf14      	ite	ne
 8013ac8:	230a      	movne	r3, #10
 8013aca:	2308      	moveq	r3, #8
 8013acc:	2100      	movs	r1, #0
 8013ace:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013ad2:	6866      	ldr	r6, [r4, #4]
 8013ad4:	60a6      	str	r6, [r4, #8]
 8013ad6:	2e00      	cmp	r6, #0
 8013ad8:	bfa2      	ittt	ge
 8013ada:	6821      	ldrge	r1, [r4, #0]
 8013adc:	f021 0104 	bicge.w	r1, r1, #4
 8013ae0:	6021      	strge	r1, [r4, #0]
 8013ae2:	b90d      	cbnz	r5, 8013ae8 <_printf_i+0x110>
 8013ae4:	2e00      	cmp	r6, #0
 8013ae6:	d04b      	beq.n	8013b80 <_printf_i+0x1a8>
 8013ae8:	4616      	mov	r6, r2
 8013aea:	fbb5 f1f3 	udiv	r1, r5, r3
 8013aee:	fb03 5711 	mls	r7, r3, r1, r5
 8013af2:	5dc7      	ldrb	r7, [r0, r7]
 8013af4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013af8:	462f      	mov	r7, r5
 8013afa:	42bb      	cmp	r3, r7
 8013afc:	460d      	mov	r5, r1
 8013afe:	d9f4      	bls.n	8013aea <_printf_i+0x112>
 8013b00:	2b08      	cmp	r3, #8
 8013b02:	d10b      	bne.n	8013b1c <_printf_i+0x144>
 8013b04:	6823      	ldr	r3, [r4, #0]
 8013b06:	07df      	lsls	r7, r3, #31
 8013b08:	d508      	bpl.n	8013b1c <_printf_i+0x144>
 8013b0a:	6923      	ldr	r3, [r4, #16]
 8013b0c:	6861      	ldr	r1, [r4, #4]
 8013b0e:	4299      	cmp	r1, r3
 8013b10:	bfde      	ittt	le
 8013b12:	2330      	movle	r3, #48	@ 0x30
 8013b14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013b18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013b1c:	1b92      	subs	r2, r2, r6
 8013b1e:	6122      	str	r2, [r4, #16]
 8013b20:	f8cd a000 	str.w	sl, [sp]
 8013b24:	464b      	mov	r3, r9
 8013b26:	aa03      	add	r2, sp, #12
 8013b28:	4621      	mov	r1, r4
 8013b2a:	4640      	mov	r0, r8
 8013b2c:	f7ff fee6 	bl	80138fc <_printf_common>
 8013b30:	3001      	adds	r0, #1
 8013b32:	d14a      	bne.n	8013bca <_printf_i+0x1f2>
 8013b34:	f04f 30ff 	mov.w	r0, #4294967295
 8013b38:	b004      	add	sp, #16
 8013b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b3e:	6823      	ldr	r3, [r4, #0]
 8013b40:	f043 0320 	orr.w	r3, r3, #32
 8013b44:	6023      	str	r3, [r4, #0]
 8013b46:	4833      	ldr	r0, [pc, #204]	@ (8013c14 <_printf_i+0x23c>)
 8013b48:	2778      	movs	r7, #120	@ 0x78
 8013b4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013b4e:	6823      	ldr	r3, [r4, #0]
 8013b50:	6831      	ldr	r1, [r6, #0]
 8013b52:	061f      	lsls	r7, r3, #24
 8013b54:	f851 5b04 	ldr.w	r5, [r1], #4
 8013b58:	d402      	bmi.n	8013b60 <_printf_i+0x188>
 8013b5a:	065f      	lsls	r7, r3, #25
 8013b5c:	bf48      	it	mi
 8013b5e:	b2ad      	uxthmi	r5, r5
 8013b60:	6031      	str	r1, [r6, #0]
 8013b62:	07d9      	lsls	r1, r3, #31
 8013b64:	bf44      	itt	mi
 8013b66:	f043 0320 	orrmi.w	r3, r3, #32
 8013b6a:	6023      	strmi	r3, [r4, #0]
 8013b6c:	b11d      	cbz	r5, 8013b76 <_printf_i+0x19e>
 8013b6e:	2310      	movs	r3, #16
 8013b70:	e7ac      	b.n	8013acc <_printf_i+0xf4>
 8013b72:	4827      	ldr	r0, [pc, #156]	@ (8013c10 <_printf_i+0x238>)
 8013b74:	e7e9      	b.n	8013b4a <_printf_i+0x172>
 8013b76:	6823      	ldr	r3, [r4, #0]
 8013b78:	f023 0320 	bic.w	r3, r3, #32
 8013b7c:	6023      	str	r3, [r4, #0]
 8013b7e:	e7f6      	b.n	8013b6e <_printf_i+0x196>
 8013b80:	4616      	mov	r6, r2
 8013b82:	e7bd      	b.n	8013b00 <_printf_i+0x128>
 8013b84:	6833      	ldr	r3, [r6, #0]
 8013b86:	6825      	ldr	r5, [r4, #0]
 8013b88:	6961      	ldr	r1, [r4, #20]
 8013b8a:	1d18      	adds	r0, r3, #4
 8013b8c:	6030      	str	r0, [r6, #0]
 8013b8e:	062e      	lsls	r6, r5, #24
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	d501      	bpl.n	8013b98 <_printf_i+0x1c0>
 8013b94:	6019      	str	r1, [r3, #0]
 8013b96:	e002      	b.n	8013b9e <_printf_i+0x1c6>
 8013b98:	0668      	lsls	r0, r5, #25
 8013b9a:	d5fb      	bpl.n	8013b94 <_printf_i+0x1bc>
 8013b9c:	8019      	strh	r1, [r3, #0]
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	6123      	str	r3, [r4, #16]
 8013ba2:	4616      	mov	r6, r2
 8013ba4:	e7bc      	b.n	8013b20 <_printf_i+0x148>
 8013ba6:	6833      	ldr	r3, [r6, #0]
 8013ba8:	1d1a      	adds	r2, r3, #4
 8013baa:	6032      	str	r2, [r6, #0]
 8013bac:	681e      	ldr	r6, [r3, #0]
 8013bae:	6862      	ldr	r2, [r4, #4]
 8013bb0:	2100      	movs	r1, #0
 8013bb2:	4630      	mov	r0, r6
 8013bb4:	f7ec fbbc 	bl	8000330 <memchr>
 8013bb8:	b108      	cbz	r0, 8013bbe <_printf_i+0x1e6>
 8013bba:	1b80      	subs	r0, r0, r6
 8013bbc:	6060      	str	r0, [r4, #4]
 8013bbe:	6863      	ldr	r3, [r4, #4]
 8013bc0:	6123      	str	r3, [r4, #16]
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013bc8:	e7aa      	b.n	8013b20 <_printf_i+0x148>
 8013bca:	6923      	ldr	r3, [r4, #16]
 8013bcc:	4632      	mov	r2, r6
 8013bce:	4649      	mov	r1, r9
 8013bd0:	4640      	mov	r0, r8
 8013bd2:	47d0      	blx	sl
 8013bd4:	3001      	adds	r0, #1
 8013bd6:	d0ad      	beq.n	8013b34 <_printf_i+0x15c>
 8013bd8:	6823      	ldr	r3, [r4, #0]
 8013bda:	079b      	lsls	r3, r3, #30
 8013bdc:	d413      	bmi.n	8013c06 <_printf_i+0x22e>
 8013bde:	68e0      	ldr	r0, [r4, #12]
 8013be0:	9b03      	ldr	r3, [sp, #12]
 8013be2:	4298      	cmp	r0, r3
 8013be4:	bfb8      	it	lt
 8013be6:	4618      	movlt	r0, r3
 8013be8:	e7a6      	b.n	8013b38 <_printf_i+0x160>
 8013bea:	2301      	movs	r3, #1
 8013bec:	4632      	mov	r2, r6
 8013bee:	4649      	mov	r1, r9
 8013bf0:	4640      	mov	r0, r8
 8013bf2:	47d0      	blx	sl
 8013bf4:	3001      	adds	r0, #1
 8013bf6:	d09d      	beq.n	8013b34 <_printf_i+0x15c>
 8013bf8:	3501      	adds	r5, #1
 8013bfa:	68e3      	ldr	r3, [r4, #12]
 8013bfc:	9903      	ldr	r1, [sp, #12]
 8013bfe:	1a5b      	subs	r3, r3, r1
 8013c00:	42ab      	cmp	r3, r5
 8013c02:	dcf2      	bgt.n	8013bea <_printf_i+0x212>
 8013c04:	e7eb      	b.n	8013bde <_printf_i+0x206>
 8013c06:	2500      	movs	r5, #0
 8013c08:	f104 0619 	add.w	r6, r4, #25
 8013c0c:	e7f5      	b.n	8013bfa <_printf_i+0x222>
 8013c0e:	bf00      	nop
 8013c10:	08016adb 	.word	0x08016adb
 8013c14:	08016aec 	.word	0x08016aec

08013c18 <std>:
 8013c18:	2300      	movs	r3, #0
 8013c1a:	b510      	push	{r4, lr}
 8013c1c:	4604      	mov	r4, r0
 8013c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8013c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c26:	6083      	str	r3, [r0, #8]
 8013c28:	8181      	strh	r1, [r0, #12]
 8013c2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8013c2c:	81c2      	strh	r2, [r0, #14]
 8013c2e:	6183      	str	r3, [r0, #24]
 8013c30:	4619      	mov	r1, r3
 8013c32:	2208      	movs	r2, #8
 8013c34:	305c      	adds	r0, #92	@ 0x5c
 8013c36:	f000 f914 	bl	8013e62 <memset>
 8013c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8013c70 <std+0x58>)
 8013c3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8013c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8013c74 <std+0x5c>)
 8013c40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013c42:	4b0d      	ldr	r3, [pc, #52]	@ (8013c78 <std+0x60>)
 8013c44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013c46:	4b0d      	ldr	r3, [pc, #52]	@ (8013c7c <std+0x64>)
 8013c48:	6323      	str	r3, [r4, #48]	@ 0x30
 8013c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8013c80 <std+0x68>)
 8013c4c:	6224      	str	r4, [r4, #32]
 8013c4e:	429c      	cmp	r4, r3
 8013c50:	d006      	beq.n	8013c60 <std+0x48>
 8013c52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013c56:	4294      	cmp	r4, r2
 8013c58:	d002      	beq.n	8013c60 <std+0x48>
 8013c5a:	33d0      	adds	r3, #208	@ 0xd0
 8013c5c:	429c      	cmp	r4, r3
 8013c5e:	d105      	bne.n	8013c6c <std+0x54>
 8013c60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c68:	f000 b996 	b.w	8013f98 <__retarget_lock_init_recursive>
 8013c6c:	bd10      	pop	{r4, pc}
 8013c6e:	bf00      	nop
 8013c70:	08013ddd 	.word	0x08013ddd
 8013c74:	08013dff 	.word	0x08013dff
 8013c78:	08013e37 	.word	0x08013e37
 8013c7c:	08013e5b 	.word	0x08013e5b
 8013c80:	24005ee4 	.word	0x24005ee4

08013c84 <stdio_exit_handler>:
 8013c84:	4a02      	ldr	r2, [pc, #8]	@ (8013c90 <stdio_exit_handler+0xc>)
 8013c86:	4903      	ldr	r1, [pc, #12]	@ (8013c94 <stdio_exit_handler+0x10>)
 8013c88:	4803      	ldr	r0, [pc, #12]	@ (8013c98 <stdio_exit_handler+0x14>)
 8013c8a:	f000 b869 	b.w	8013d60 <_fwalk_sglue>
 8013c8e:	bf00      	nop
 8013c90:	24000104 	.word	0x24000104
 8013c94:	08016165 	.word	0x08016165
 8013c98:	24000280 	.word	0x24000280

08013c9c <cleanup_stdio>:
 8013c9c:	6841      	ldr	r1, [r0, #4]
 8013c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8013cd0 <cleanup_stdio+0x34>)
 8013ca0:	4299      	cmp	r1, r3
 8013ca2:	b510      	push	{r4, lr}
 8013ca4:	4604      	mov	r4, r0
 8013ca6:	d001      	beq.n	8013cac <cleanup_stdio+0x10>
 8013ca8:	f002 fa5c 	bl	8016164 <_fflush_r>
 8013cac:	68a1      	ldr	r1, [r4, #8]
 8013cae:	4b09      	ldr	r3, [pc, #36]	@ (8013cd4 <cleanup_stdio+0x38>)
 8013cb0:	4299      	cmp	r1, r3
 8013cb2:	d002      	beq.n	8013cba <cleanup_stdio+0x1e>
 8013cb4:	4620      	mov	r0, r4
 8013cb6:	f002 fa55 	bl	8016164 <_fflush_r>
 8013cba:	68e1      	ldr	r1, [r4, #12]
 8013cbc:	4b06      	ldr	r3, [pc, #24]	@ (8013cd8 <cleanup_stdio+0x3c>)
 8013cbe:	4299      	cmp	r1, r3
 8013cc0:	d004      	beq.n	8013ccc <cleanup_stdio+0x30>
 8013cc2:	4620      	mov	r0, r4
 8013cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cc8:	f002 ba4c 	b.w	8016164 <_fflush_r>
 8013ccc:	bd10      	pop	{r4, pc}
 8013cce:	bf00      	nop
 8013cd0:	24005ee4 	.word	0x24005ee4
 8013cd4:	24005f4c 	.word	0x24005f4c
 8013cd8:	24005fb4 	.word	0x24005fb4

08013cdc <global_stdio_init.part.0>:
 8013cdc:	b510      	push	{r4, lr}
 8013cde:	4b0b      	ldr	r3, [pc, #44]	@ (8013d0c <global_stdio_init.part.0+0x30>)
 8013ce0:	4c0b      	ldr	r4, [pc, #44]	@ (8013d10 <global_stdio_init.part.0+0x34>)
 8013ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8013d14 <global_stdio_init.part.0+0x38>)
 8013ce4:	601a      	str	r2, [r3, #0]
 8013ce6:	4620      	mov	r0, r4
 8013ce8:	2200      	movs	r2, #0
 8013cea:	2104      	movs	r1, #4
 8013cec:	f7ff ff94 	bl	8013c18 <std>
 8013cf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013cf4:	2201      	movs	r2, #1
 8013cf6:	2109      	movs	r1, #9
 8013cf8:	f7ff ff8e 	bl	8013c18 <std>
 8013cfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013d00:	2202      	movs	r2, #2
 8013d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d06:	2112      	movs	r1, #18
 8013d08:	f7ff bf86 	b.w	8013c18 <std>
 8013d0c:	2400601c 	.word	0x2400601c
 8013d10:	24005ee4 	.word	0x24005ee4
 8013d14:	08013c85 	.word	0x08013c85

08013d18 <__sfp_lock_acquire>:
 8013d18:	4801      	ldr	r0, [pc, #4]	@ (8013d20 <__sfp_lock_acquire+0x8>)
 8013d1a:	f000 b93e 	b.w	8013f9a <__retarget_lock_acquire_recursive>
 8013d1e:	bf00      	nop
 8013d20:	24006025 	.word	0x24006025

08013d24 <__sfp_lock_release>:
 8013d24:	4801      	ldr	r0, [pc, #4]	@ (8013d2c <__sfp_lock_release+0x8>)
 8013d26:	f000 b939 	b.w	8013f9c <__retarget_lock_release_recursive>
 8013d2a:	bf00      	nop
 8013d2c:	24006025 	.word	0x24006025

08013d30 <__sinit>:
 8013d30:	b510      	push	{r4, lr}
 8013d32:	4604      	mov	r4, r0
 8013d34:	f7ff fff0 	bl	8013d18 <__sfp_lock_acquire>
 8013d38:	6a23      	ldr	r3, [r4, #32]
 8013d3a:	b11b      	cbz	r3, 8013d44 <__sinit+0x14>
 8013d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d40:	f7ff bff0 	b.w	8013d24 <__sfp_lock_release>
 8013d44:	4b04      	ldr	r3, [pc, #16]	@ (8013d58 <__sinit+0x28>)
 8013d46:	6223      	str	r3, [r4, #32]
 8013d48:	4b04      	ldr	r3, [pc, #16]	@ (8013d5c <__sinit+0x2c>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d1f5      	bne.n	8013d3c <__sinit+0xc>
 8013d50:	f7ff ffc4 	bl	8013cdc <global_stdio_init.part.0>
 8013d54:	e7f2      	b.n	8013d3c <__sinit+0xc>
 8013d56:	bf00      	nop
 8013d58:	08013c9d 	.word	0x08013c9d
 8013d5c:	2400601c 	.word	0x2400601c

08013d60 <_fwalk_sglue>:
 8013d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d64:	4607      	mov	r7, r0
 8013d66:	4688      	mov	r8, r1
 8013d68:	4614      	mov	r4, r2
 8013d6a:	2600      	movs	r6, #0
 8013d6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013d70:	f1b9 0901 	subs.w	r9, r9, #1
 8013d74:	d505      	bpl.n	8013d82 <_fwalk_sglue+0x22>
 8013d76:	6824      	ldr	r4, [r4, #0]
 8013d78:	2c00      	cmp	r4, #0
 8013d7a:	d1f7      	bne.n	8013d6c <_fwalk_sglue+0xc>
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d82:	89ab      	ldrh	r3, [r5, #12]
 8013d84:	2b01      	cmp	r3, #1
 8013d86:	d907      	bls.n	8013d98 <_fwalk_sglue+0x38>
 8013d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d8c:	3301      	adds	r3, #1
 8013d8e:	d003      	beq.n	8013d98 <_fwalk_sglue+0x38>
 8013d90:	4629      	mov	r1, r5
 8013d92:	4638      	mov	r0, r7
 8013d94:	47c0      	blx	r8
 8013d96:	4306      	orrs	r6, r0
 8013d98:	3568      	adds	r5, #104	@ 0x68
 8013d9a:	e7e9      	b.n	8013d70 <_fwalk_sglue+0x10>

08013d9c <siprintf>:
 8013d9c:	b40e      	push	{r1, r2, r3}
 8013d9e:	b500      	push	{lr}
 8013da0:	b09c      	sub	sp, #112	@ 0x70
 8013da2:	ab1d      	add	r3, sp, #116	@ 0x74
 8013da4:	9002      	str	r0, [sp, #8]
 8013da6:	9006      	str	r0, [sp, #24]
 8013da8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013dac:	4809      	ldr	r0, [pc, #36]	@ (8013dd4 <siprintf+0x38>)
 8013dae:	9107      	str	r1, [sp, #28]
 8013db0:	9104      	str	r1, [sp, #16]
 8013db2:	4909      	ldr	r1, [pc, #36]	@ (8013dd8 <siprintf+0x3c>)
 8013db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8013db8:	9105      	str	r1, [sp, #20]
 8013dba:	6800      	ldr	r0, [r0, #0]
 8013dbc:	9301      	str	r3, [sp, #4]
 8013dbe:	a902      	add	r1, sp, #8
 8013dc0:	f002 f850 	bl	8015e64 <_svfiprintf_r>
 8013dc4:	9b02      	ldr	r3, [sp, #8]
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	701a      	strb	r2, [r3, #0]
 8013dca:	b01c      	add	sp, #112	@ 0x70
 8013dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013dd0:	b003      	add	sp, #12
 8013dd2:	4770      	bx	lr
 8013dd4:	2400027c 	.word	0x2400027c
 8013dd8:	ffff0208 	.word	0xffff0208

08013ddc <__sread>:
 8013ddc:	b510      	push	{r4, lr}
 8013dde:	460c      	mov	r4, r1
 8013de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013de4:	f000 f88a 	bl	8013efc <_read_r>
 8013de8:	2800      	cmp	r0, #0
 8013dea:	bfab      	itete	ge
 8013dec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013dee:	89a3      	ldrhlt	r3, [r4, #12]
 8013df0:	181b      	addge	r3, r3, r0
 8013df2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013df6:	bfac      	ite	ge
 8013df8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013dfa:	81a3      	strhlt	r3, [r4, #12]
 8013dfc:	bd10      	pop	{r4, pc}

08013dfe <__swrite>:
 8013dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e02:	461f      	mov	r7, r3
 8013e04:	898b      	ldrh	r3, [r1, #12]
 8013e06:	05db      	lsls	r3, r3, #23
 8013e08:	4605      	mov	r5, r0
 8013e0a:	460c      	mov	r4, r1
 8013e0c:	4616      	mov	r6, r2
 8013e0e:	d505      	bpl.n	8013e1c <__swrite+0x1e>
 8013e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e14:	2302      	movs	r3, #2
 8013e16:	2200      	movs	r2, #0
 8013e18:	f000 f85e 	bl	8013ed8 <_lseek_r>
 8013e1c:	89a3      	ldrh	r3, [r4, #12]
 8013e1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013e26:	81a3      	strh	r3, [r4, #12]
 8013e28:	4632      	mov	r2, r6
 8013e2a:	463b      	mov	r3, r7
 8013e2c:	4628      	mov	r0, r5
 8013e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e32:	f000 b875 	b.w	8013f20 <_write_r>

08013e36 <__sseek>:
 8013e36:	b510      	push	{r4, lr}
 8013e38:	460c      	mov	r4, r1
 8013e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e3e:	f000 f84b 	bl	8013ed8 <_lseek_r>
 8013e42:	1c43      	adds	r3, r0, #1
 8013e44:	89a3      	ldrh	r3, [r4, #12]
 8013e46:	bf15      	itete	ne
 8013e48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013e4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013e4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013e52:	81a3      	strheq	r3, [r4, #12]
 8013e54:	bf18      	it	ne
 8013e56:	81a3      	strhne	r3, [r4, #12]
 8013e58:	bd10      	pop	{r4, pc}

08013e5a <__sclose>:
 8013e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e5e:	f000 b82b 	b.w	8013eb8 <_close_r>

08013e62 <memset>:
 8013e62:	4402      	add	r2, r0
 8013e64:	4603      	mov	r3, r0
 8013e66:	4293      	cmp	r3, r2
 8013e68:	d100      	bne.n	8013e6c <memset+0xa>
 8013e6a:	4770      	bx	lr
 8013e6c:	f803 1b01 	strb.w	r1, [r3], #1
 8013e70:	e7f9      	b.n	8013e66 <memset+0x4>

08013e72 <strchr>:
 8013e72:	b2c9      	uxtb	r1, r1
 8013e74:	4603      	mov	r3, r0
 8013e76:	4618      	mov	r0, r3
 8013e78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e7c:	b112      	cbz	r2, 8013e84 <strchr+0x12>
 8013e7e:	428a      	cmp	r2, r1
 8013e80:	d1f9      	bne.n	8013e76 <strchr+0x4>
 8013e82:	4770      	bx	lr
 8013e84:	2900      	cmp	r1, #0
 8013e86:	bf18      	it	ne
 8013e88:	2000      	movne	r0, #0
 8013e8a:	4770      	bx	lr

08013e8c <strncmp>:
 8013e8c:	b510      	push	{r4, lr}
 8013e8e:	b16a      	cbz	r2, 8013eac <strncmp+0x20>
 8013e90:	3901      	subs	r1, #1
 8013e92:	1884      	adds	r4, r0, r2
 8013e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	d103      	bne.n	8013ea8 <strncmp+0x1c>
 8013ea0:	42a0      	cmp	r0, r4
 8013ea2:	d001      	beq.n	8013ea8 <strncmp+0x1c>
 8013ea4:	2a00      	cmp	r2, #0
 8013ea6:	d1f5      	bne.n	8013e94 <strncmp+0x8>
 8013ea8:	1ad0      	subs	r0, r2, r3
 8013eaa:	bd10      	pop	{r4, pc}
 8013eac:	4610      	mov	r0, r2
 8013eae:	e7fc      	b.n	8013eaa <strncmp+0x1e>

08013eb0 <_localeconv_r>:
 8013eb0:	4800      	ldr	r0, [pc, #0]	@ (8013eb4 <_localeconv_r+0x4>)
 8013eb2:	4770      	bx	lr
 8013eb4:	24000200 	.word	0x24000200

08013eb8 <_close_r>:
 8013eb8:	b538      	push	{r3, r4, r5, lr}
 8013eba:	4d06      	ldr	r5, [pc, #24]	@ (8013ed4 <_close_r+0x1c>)
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	4604      	mov	r4, r0
 8013ec0:	4608      	mov	r0, r1
 8013ec2:	602b      	str	r3, [r5, #0]
 8013ec4:	f7ee f99e 	bl	8002204 <_close>
 8013ec8:	1c43      	adds	r3, r0, #1
 8013eca:	d102      	bne.n	8013ed2 <_close_r+0x1a>
 8013ecc:	682b      	ldr	r3, [r5, #0]
 8013ece:	b103      	cbz	r3, 8013ed2 <_close_r+0x1a>
 8013ed0:	6023      	str	r3, [r4, #0]
 8013ed2:	bd38      	pop	{r3, r4, r5, pc}
 8013ed4:	24006020 	.word	0x24006020

08013ed8 <_lseek_r>:
 8013ed8:	b538      	push	{r3, r4, r5, lr}
 8013eda:	4d07      	ldr	r5, [pc, #28]	@ (8013ef8 <_lseek_r+0x20>)
 8013edc:	4604      	mov	r4, r0
 8013ede:	4608      	mov	r0, r1
 8013ee0:	4611      	mov	r1, r2
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	602a      	str	r2, [r5, #0]
 8013ee6:	461a      	mov	r2, r3
 8013ee8:	f7ee f9b3 	bl	8002252 <_lseek>
 8013eec:	1c43      	adds	r3, r0, #1
 8013eee:	d102      	bne.n	8013ef6 <_lseek_r+0x1e>
 8013ef0:	682b      	ldr	r3, [r5, #0]
 8013ef2:	b103      	cbz	r3, 8013ef6 <_lseek_r+0x1e>
 8013ef4:	6023      	str	r3, [r4, #0]
 8013ef6:	bd38      	pop	{r3, r4, r5, pc}
 8013ef8:	24006020 	.word	0x24006020

08013efc <_read_r>:
 8013efc:	b538      	push	{r3, r4, r5, lr}
 8013efe:	4d07      	ldr	r5, [pc, #28]	@ (8013f1c <_read_r+0x20>)
 8013f00:	4604      	mov	r4, r0
 8013f02:	4608      	mov	r0, r1
 8013f04:	4611      	mov	r1, r2
 8013f06:	2200      	movs	r2, #0
 8013f08:	602a      	str	r2, [r5, #0]
 8013f0a:	461a      	mov	r2, r3
 8013f0c:	f7ee f941 	bl	8002192 <_read>
 8013f10:	1c43      	adds	r3, r0, #1
 8013f12:	d102      	bne.n	8013f1a <_read_r+0x1e>
 8013f14:	682b      	ldr	r3, [r5, #0]
 8013f16:	b103      	cbz	r3, 8013f1a <_read_r+0x1e>
 8013f18:	6023      	str	r3, [r4, #0]
 8013f1a:	bd38      	pop	{r3, r4, r5, pc}
 8013f1c:	24006020 	.word	0x24006020

08013f20 <_write_r>:
 8013f20:	b538      	push	{r3, r4, r5, lr}
 8013f22:	4d07      	ldr	r5, [pc, #28]	@ (8013f40 <_write_r+0x20>)
 8013f24:	4604      	mov	r4, r0
 8013f26:	4608      	mov	r0, r1
 8013f28:	4611      	mov	r1, r2
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	602a      	str	r2, [r5, #0]
 8013f2e:	461a      	mov	r2, r3
 8013f30:	f7ee f94c 	bl	80021cc <_write>
 8013f34:	1c43      	adds	r3, r0, #1
 8013f36:	d102      	bne.n	8013f3e <_write_r+0x1e>
 8013f38:	682b      	ldr	r3, [r5, #0]
 8013f3a:	b103      	cbz	r3, 8013f3e <_write_r+0x1e>
 8013f3c:	6023      	str	r3, [r4, #0]
 8013f3e:	bd38      	pop	{r3, r4, r5, pc}
 8013f40:	24006020 	.word	0x24006020

08013f44 <__errno>:
 8013f44:	4b01      	ldr	r3, [pc, #4]	@ (8013f4c <__errno+0x8>)
 8013f46:	6818      	ldr	r0, [r3, #0]
 8013f48:	4770      	bx	lr
 8013f4a:	bf00      	nop
 8013f4c:	2400027c 	.word	0x2400027c

08013f50 <__libc_init_array>:
 8013f50:	b570      	push	{r4, r5, r6, lr}
 8013f52:	4d0d      	ldr	r5, [pc, #52]	@ (8013f88 <__libc_init_array+0x38>)
 8013f54:	4c0d      	ldr	r4, [pc, #52]	@ (8013f8c <__libc_init_array+0x3c>)
 8013f56:	1b64      	subs	r4, r4, r5
 8013f58:	10a4      	asrs	r4, r4, #2
 8013f5a:	2600      	movs	r6, #0
 8013f5c:	42a6      	cmp	r6, r4
 8013f5e:	d109      	bne.n	8013f74 <__libc_init_array+0x24>
 8013f60:	4d0b      	ldr	r5, [pc, #44]	@ (8013f90 <__libc_init_array+0x40>)
 8013f62:	4c0c      	ldr	r4, [pc, #48]	@ (8013f94 <__libc_init_array+0x44>)
 8013f64:	f002 fc6e 	bl	8016844 <_init>
 8013f68:	1b64      	subs	r4, r4, r5
 8013f6a:	10a4      	asrs	r4, r4, #2
 8013f6c:	2600      	movs	r6, #0
 8013f6e:	42a6      	cmp	r6, r4
 8013f70:	d105      	bne.n	8013f7e <__libc_init_array+0x2e>
 8013f72:	bd70      	pop	{r4, r5, r6, pc}
 8013f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f78:	4798      	blx	r3
 8013f7a:	3601      	adds	r6, #1
 8013f7c:	e7ee      	b.n	8013f5c <__libc_init_array+0xc>
 8013f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f82:	4798      	blx	r3
 8013f84:	3601      	adds	r6, #1
 8013f86:	e7f2      	b.n	8013f6e <__libc_init_array+0x1e>
 8013f88:	08016da0 	.word	0x08016da0
 8013f8c:	08016da0 	.word	0x08016da0
 8013f90:	08016da0 	.word	0x08016da0
 8013f94:	08016da4 	.word	0x08016da4

08013f98 <__retarget_lock_init_recursive>:
 8013f98:	4770      	bx	lr

08013f9a <__retarget_lock_acquire_recursive>:
 8013f9a:	4770      	bx	lr

08013f9c <__retarget_lock_release_recursive>:
 8013f9c:	4770      	bx	lr

08013f9e <strcpy>:
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013fa4:	f803 2b01 	strb.w	r2, [r3], #1
 8013fa8:	2a00      	cmp	r2, #0
 8013faa:	d1f9      	bne.n	8013fa0 <strcpy+0x2>
 8013fac:	4770      	bx	lr

08013fae <memcpy>:
 8013fae:	440a      	add	r2, r1
 8013fb0:	4291      	cmp	r1, r2
 8013fb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8013fb6:	d100      	bne.n	8013fba <memcpy+0xc>
 8013fb8:	4770      	bx	lr
 8013fba:	b510      	push	{r4, lr}
 8013fbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013fc4:	4291      	cmp	r1, r2
 8013fc6:	d1f9      	bne.n	8013fbc <memcpy+0xe>
 8013fc8:	bd10      	pop	{r4, pc}
 8013fca:	0000      	movs	r0, r0
 8013fcc:	0000      	movs	r0, r0
	...

08013fd0 <nan>:
 8013fd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013fd8 <nan+0x8>
 8013fd4:	4770      	bx	lr
 8013fd6:	bf00      	nop
 8013fd8:	00000000 	.word	0x00000000
 8013fdc:	7ff80000 	.word	0x7ff80000

08013fe0 <quorem>:
 8013fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe4:	6903      	ldr	r3, [r0, #16]
 8013fe6:	690c      	ldr	r4, [r1, #16]
 8013fe8:	42a3      	cmp	r3, r4
 8013fea:	4607      	mov	r7, r0
 8013fec:	db7e      	blt.n	80140ec <quorem+0x10c>
 8013fee:	3c01      	subs	r4, #1
 8013ff0:	f101 0814 	add.w	r8, r1, #20
 8013ff4:	00a3      	lsls	r3, r4, #2
 8013ff6:	f100 0514 	add.w	r5, r0, #20
 8013ffa:	9300      	str	r3, [sp, #0]
 8013ffc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014000:	9301      	str	r3, [sp, #4]
 8014002:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014006:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801400a:	3301      	adds	r3, #1
 801400c:	429a      	cmp	r2, r3
 801400e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014012:	fbb2 f6f3 	udiv	r6, r2, r3
 8014016:	d32e      	bcc.n	8014076 <quorem+0x96>
 8014018:	f04f 0a00 	mov.w	sl, #0
 801401c:	46c4      	mov	ip, r8
 801401e:	46ae      	mov	lr, r5
 8014020:	46d3      	mov	fp, sl
 8014022:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014026:	b298      	uxth	r0, r3
 8014028:	fb06 a000 	mla	r0, r6, r0, sl
 801402c:	0c02      	lsrs	r2, r0, #16
 801402e:	0c1b      	lsrs	r3, r3, #16
 8014030:	fb06 2303 	mla	r3, r6, r3, r2
 8014034:	f8de 2000 	ldr.w	r2, [lr]
 8014038:	b280      	uxth	r0, r0
 801403a:	b292      	uxth	r2, r2
 801403c:	1a12      	subs	r2, r2, r0
 801403e:	445a      	add	r2, fp
 8014040:	f8de 0000 	ldr.w	r0, [lr]
 8014044:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014048:	b29b      	uxth	r3, r3
 801404a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801404e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014052:	b292      	uxth	r2, r2
 8014054:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014058:	45e1      	cmp	r9, ip
 801405a:	f84e 2b04 	str.w	r2, [lr], #4
 801405e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014062:	d2de      	bcs.n	8014022 <quorem+0x42>
 8014064:	9b00      	ldr	r3, [sp, #0]
 8014066:	58eb      	ldr	r3, [r5, r3]
 8014068:	b92b      	cbnz	r3, 8014076 <quorem+0x96>
 801406a:	9b01      	ldr	r3, [sp, #4]
 801406c:	3b04      	subs	r3, #4
 801406e:	429d      	cmp	r5, r3
 8014070:	461a      	mov	r2, r3
 8014072:	d32f      	bcc.n	80140d4 <quorem+0xf4>
 8014074:	613c      	str	r4, [r7, #16]
 8014076:	4638      	mov	r0, r7
 8014078:	f001 fca0 	bl	80159bc <__mcmp>
 801407c:	2800      	cmp	r0, #0
 801407e:	db25      	blt.n	80140cc <quorem+0xec>
 8014080:	4629      	mov	r1, r5
 8014082:	2000      	movs	r0, #0
 8014084:	f858 2b04 	ldr.w	r2, [r8], #4
 8014088:	f8d1 c000 	ldr.w	ip, [r1]
 801408c:	fa1f fe82 	uxth.w	lr, r2
 8014090:	fa1f f38c 	uxth.w	r3, ip
 8014094:	eba3 030e 	sub.w	r3, r3, lr
 8014098:	4403      	add	r3, r0
 801409a:	0c12      	lsrs	r2, r2, #16
 801409c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80140a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80140a4:	b29b      	uxth	r3, r3
 80140a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80140aa:	45c1      	cmp	r9, r8
 80140ac:	f841 3b04 	str.w	r3, [r1], #4
 80140b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80140b4:	d2e6      	bcs.n	8014084 <quorem+0xa4>
 80140b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80140ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80140be:	b922      	cbnz	r2, 80140ca <quorem+0xea>
 80140c0:	3b04      	subs	r3, #4
 80140c2:	429d      	cmp	r5, r3
 80140c4:	461a      	mov	r2, r3
 80140c6:	d30b      	bcc.n	80140e0 <quorem+0x100>
 80140c8:	613c      	str	r4, [r7, #16]
 80140ca:	3601      	adds	r6, #1
 80140cc:	4630      	mov	r0, r6
 80140ce:	b003      	add	sp, #12
 80140d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140d4:	6812      	ldr	r2, [r2, #0]
 80140d6:	3b04      	subs	r3, #4
 80140d8:	2a00      	cmp	r2, #0
 80140da:	d1cb      	bne.n	8014074 <quorem+0x94>
 80140dc:	3c01      	subs	r4, #1
 80140de:	e7c6      	b.n	801406e <quorem+0x8e>
 80140e0:	6812      	ldr	r2, [r2, #0]
 80140e2:	3b04      	subs	r3, #4
 80140e4:	2a00      	cmp	r2, #0
 80140e6:	d1ef      	bne.n	80140c8 <quorem+0xe8>
 80140e8:	3c01      	subs	r4, #1
 80140ea:	e7ea      	b.n	80140c2 <quorem+0xe2>
 80140ec:	2000      	movs	r0, #0
 80140ee:	e7ee      	b.n	80140ce <quorem+0xee>

080140f0 <_dtoa_r>:
 80140f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140f4:	ed2d 8b02 	vpush	{d8}
 80140f8:	69c7      	ldr	r7, [r0, #28]
 80140fa:	b091      	sub	sp, #68	@ 0x44
 80140fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014100:	ec55 4b10 	vmov	r4, r5, d0
 8014104:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8014106:	9107      	str	r1, [sp, #28]
 8014108:	4681      	mov	r9, r0
 801410a:	9209      	str	r2, [sp, #36]	@ 0x24
 801410c:	930d      	str	r3, [sp, #52]	@ 0x34
 801410e:	b97f      	cbnz	r7, 8014130 <_dtoa_r+0x40>
 8014110:	2010      	movs	r0, #16
 8014112:	f001 f8c7 	bl	80152a4 <malloc>
 8014116:	4602      	mov	r2, r0
 8014118:	f8c9 001c 	str.w	r0, [r9, #28]
 801411c:	b920      	cbnz	r0, 8014128 <_dtoa_r+0x38>
 801411e:	4ba0      	ldr	r3, [pc, #640]	@ (80143a0 <_dtoa_r+0x2b0>)
 8014120:	21ef      	movs	r1, #239	@ 0xef
 8014122:	48a0      	ldr	r0, [pc, #640]	@ (80143a4 <_dtoa_r+0x2b4>)
 8014124:	f002 f870 	bl	8016208 <__assert_func>
 8014128:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801412c:	6007      	str	r7, [r0, #0]
 801412e:	60c7      	str	r7, [r0, #12]
 8014130:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014134:	6819      	ldr	r1, [r3, #0]
 8014136:	b159      	cbz	r1, 8014150 <_dtoa_r+0x60>
 8014138:	685a      	ldr	r2, [r3, #4]
 801413a:	604a      	str	r2, [r1, #4]
 801413c:	2301      	movs	r3, #1
 801413e:	4093      	lsls	r3, r2
 8014140:	608b      	str	r3, [r1, #8]
 8014142:	4648      	mov	r0, r9
 8014144:	f001 f9b6 	bl	80154b4 <_Bfree>
 8014148:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801414c:	2200      	movs	r2, #0
 801414e:	601a      	str	r2, [r3, #0]
 8014150:	1e2b      	subs	r3, r5, #0
 8014152:	bfbb      	ittet	lt
 8014154:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014158:	9303      	strlt	r3, [sp, #12]
 801415a:	2300      	movge	r3, #0
 801415c:	2201      	movlt	r2, #1
 801415e:	bfac      	ite	ge
 8014160:	6033      	strge	r3, [r6, #0]
 8014162:	6032      	strlt	r2, [r6, #0]
 8014164:	4b90      	ldr	r3, [pc, #576]	@ (80143a8 <_dtoa_r+0x2b8>)
 8014166:	9e03      	ldr	r6, [sp, #12]
 8014168:	43b3      	bics	r3, r6
 801416a:	d110      	bne.n	801418e <_dtoa_r+0x9e>
 801416c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801416e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014172:	6013      	str	r3, [r2, #0]
 8014174:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8014178:	4323      	orrs	r3, r4
 801417a:	f000 84de 	beq.w	8014b3a <_dtoa_r+0xa4a>
 801417e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014180:	4f8a      	ldr	r7, [pc, #552]	@ (80143ac <_dtoa_r+0x2bc>)
 8014182:	2b00      	cmp	r3, #0
 8014184:	f000 84e0 	beq.w	8014b48 <_dtoa_r+0xa58>
 8014188:	1cfb      	adds	r3, r7, #3
 801418a:	f000 bcdb 	b.w	8014b44 <_dtoa_r+0xa54>
 801418e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8014192:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801419a:	d10a      	bne.n	80141b2 <_dtoa_r+0xc2>
 801419c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801419e:	2301      	movs	r3, #1
 80141a0:	6013      	str	r3, [r2, #0]
 80141a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80141a4:	b113      	cbz	r3, 80141ac <_dtoa_r+0xbc>
 80141a6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80141a8:	4b81      	ldr	r3, [pc, #516]	@ (80143b0 <_dtoa_r+0x2c0>)
 80141aa:	6013      	str	r3, [r2, #0]
 80141ac:	4f81      	ldr	r7, [pc, #516]	@ (80143b4 <_dtoa_r+0x2c4>)
 80141ae:	f000 bccb 	b.w	8014b48 <_dtoa_r+0xa58>
 80141b2:	aa0e      	add	r2, sp, #56	@ 0x38
 80141b4:	a90f      	add	r1, sp, #60	@ 0x3c
 80141b6:	4648      	mov	r0, r9
 80141b8:	eeb0 0b48 	vmov.f64	d0, d8
 80141bc:	f001 fd1e 	bl	8015bfc <__d2b>
 80141c0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80141c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80141c6:	9001      	str	r0, [sp, #4]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d045      	beq.n	8014258 <_dtoa_r+0x168>
 80141cc:	eeb0 7b48 	vmov.f64	d7, d8
 80141d0:	ee18 1a90 	vmov	r1, s17
 80141d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80141d8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80141dc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80141e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80141e4:	2500      	movs	r5, #0
 80141e6:	ee07 1a90 	vmov	s15, r1
 80141ea:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80141ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8014388 <_dtoa_r+0x298>
 80141f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80141f6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8014390 <_dtoa_r+0x2a0>
 80141fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80141fe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8014398 <_dtoa_r+0x2a8>
 8014202:	ee07 3a90 	vmov	s15, r3
 8014206:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801420a:	eeb0 7b46 	vmov.f64	d7, d6
 801420e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014212:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014216:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801421a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801421e:	ee16 8a90 	vmov	r8, s13
 8014222:	d508      	bpl.n	8014236 <_dtoa_r+0x146>
 8014224:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014228:	eeb4 6b47 	vcmp.f64	d6, d7
 801422c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014230:	bf18      	it	ne
 8014232:	f108 38ff 	addne.w	r8, r8, #4294967295
 8014236:	f1b8 0f16 	cmp.w	r8, #22
 801423a:	d82b      	bhi.n	8014294 <_dtoa_r+0x1a4>
 801423c:	495e      	ldr	r1, [pc, #376]	@ (80143b8 <_dtoa_r+0x2c8>)
 801423e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8014242:	ed91 7b00 	vldr	d7, [r1]
 8014246:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801424e:	d501      	bpl.n	8014254 <_dtoa_r+0x164>
 8014250:	f108 38ff 	add.w	r8, r8, #4294967295
 8014254:	2100      	movs	r1, #0
 8014256:	e01e      	b.n	8014296 <_dtoa_r+0x1a6>
 8014258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801425a:	4413      	add	r3, r2
 801425c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8014260:	2920      	cmp	r1, #32
 8014262:	bfc1      	itttt	gt
 8014264:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8014268:	408e      	lslgt	r6, r1
 801426a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801426e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8014272:	bfd6      	itet	le
 8014274:	f1c1 0120 	rsble	r1, r1, #32
 8014278:	4331      	orrgt	r1, r6
 801427a:	fa04 f101 	lslle.w	r1, r4, r1
 801427e:	ee07 1a90 	vmov	s15, r1
 8014282:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014286:	3b01      	subs	r3, #1
 8014288:	ee17 1a90 	vmov	r1, s15
 801428c:	2501      	movs	r5, #1
 801428e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8014292:	e7a8      	b.n	80141e6 <_dtoa_r+0xf6>
 8014294:	2101      	movs	r1, #1
 8014296:	1ad2      	subs	r2, r2, r3
 8014298:	1e53      	subs	r3, r2, #1
 801429a:	9306      	str	r3, [sp, #24]
 801429c:	bf45      	ittet	mi
 801429e:	f1c2 0301 	rsbmi	r3, r2, #1
 80142a2:	9305      	strmi	r3, [sp, #20]
 80142a4:	2300      	movpl	r3, #0
 80142a6:	2300      	movmi	r3, #0
 80142a8:	bf4c      	ite	mi
 80142aa:	9306      	strmi	r3, [sp, #24]
 80142ac:	9305      	strpl	r3, [sp, #20]
 80142ae:	f1b8 0f00 	cmp.w	r8, #0
 80142b2:	910c      	str	r1, [sp, #48]	@ 0x30
 80142b4:	db18      	blt.n	80142e8 <_dtoa_r+0x1f8>
 80142b6:	9b06      	ldr	r3, [sp, #24]
 80142b8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80142bc:	4443      	add	r3, r8
 80142be:	9306      	str	r3, [sp, #24]
 80142c0:	2300      	movs	r3, #0
 80142c2:	9a07      	ldr	r2, [sp, #28]
 80142c4:	2a09      	cmp	r2, #9
 80142c6:	d849      	bhi.n	801435c <_dtoa_r+0x26c>
 80142c8:	2a05      	cmp	r2, #5
 80142ca:	bfc4      	itt	gt
 80142cc:	3a04      	subgt	r2, #4
 80142ce:	9207      	strgt	r2, [sp, #28]
 80142d0:	9a07      	ldr	r2, [sp, #28]
 80142d2:	f1a2 0202 	sub.w	r2, r2, #2
 80142d6:	bfcc      	ite	gt
 80142d8:	2400      	movgt	r4, #0
 80142da:	2401      	movle	r4, #1
 80142dc:	2a03      	cmp	r2, #3
 80142de:	d848      	bhi.n	8014372 <_dtoa_r+0x282>
 80142e0:	e8df f002 	tbb	[pc, r2]
 80142e4:	3a2c2e0b 	.word	0x3a2c2e0b
 80142e8:	9b05      	ldr	r3, [sp, #20]
 80142ea:	2200      	movs	r2, #0
 80142ec:	eba3 0308 	sub.w	r3, r3, r8
 80142f0:	9305      	str	r3, [sp, #20]
 80142f2:	920a      	str	r2, [sp, #40]	@ 0x28
 80142f4:	f1c8 0300 	rsb	r3, r8, #0
 80142f8:	e7e3      	b.n	80142c2 <_dtoa_r+0x1d2>
 80142fa:	2200      	movs	r2, #0
 80142fc:	9208      	str	r2, [sp, #32]
 80142fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014300:	2a00      	cmp	r2, #0
 8014302:	dc39      	bgt.n	8014378 <_dtoa_r+0x288>
 8014304:	f04f 0b01 	mov.w	fp, #1
 8014308:	46da      	mov	sl, fp
 801430a:	465a      	mov	r2, fp
 801430c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014310:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8014314:	2100      	movs	r1, #0
 8014316:	2004      	movs	r0, #4
 8014318:	f100 0614 	add.w	r6, r0, #20
 801431c:	4296      	cmp	r6, r2
 801431e:	d930      	bls.n	8014382 <_dtoa_r+0x292>
 8014320:	6079      	str	r1, [r7, #4]
 8014322:	4648      	mov	r0, r9
 8014324:	9304      	str	r3, [sp, #16]
 8014326:	f001 f885 	bl	8015434 <_Balloc>
 801432a:	9b04      	ldr	r3, [sp, #16]
 801432c:	4607      	mov	r7, r0
 801432e:	2800      	cmp	r0, #0
 8014330:	d146      	bne.n	80143c0 <_dtoa_r+0x2d0>
 8014332:	4b22      	ldr	r3, [pc, #136]	@ (80143bc <_dtoa_r+0x2cc>)
 8014334:	4602      	mov	r2, r0
 8014336:	f240 11af 	movw	r1, #431	@ 0x1af
 801433a:	e6f2      	b.n	8014122 <_dtoa_r+0x32>
 801433c:	2201      	movs	r2, #1
 801433e:	e7dd      	b.n	80142fc <_dtoa_r+0x20c>
 8014340:	2200      	movs	r2, #0
 8014342:	9208      	str	r2, [sp, #32]
 8014344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014346:	eb08 0b02 	add.w	fp, r8, r2
 801434a:	f10b 0a01 	add.w	sl, fp, #1
 801434e:	4652      	mov	r2, sl
 8014350:	2a01      	cmp	r2, #1
 8014352:	bfb8      	it	lt
 8014354:	2201      	movlt	r2, #1
 8014356:	e7db      	b.n	8014310 <_dtoa_r+0x220>
 8014358:	2201      	movs	r2, #1
 801435a:	e7f2      	b.n	8014342 <_dtoa_r+0x252>
 801435c:	2401      	movs	r4, #1
 801435e:	2200      	movs	r2, #0
 8014360:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8014364:	f04f 3bff 	mov.w	fp, #4294967295
 8014368:	2100      	movs	r1, #0
 801436a:	46da      	mov	sl, fp
 801436c:	2212      	movs	r2, #18
 801436e:	9109      	str	r1, [sp, #36]	@ 0x24
 8014370:	e7ce      	b.n	8014310 <_dtoa_r+0x220>
 8014372:	2201      	movs	r2, #1
 8014374:	9208      	str	r2, [sp, #32]
 8014376:	e7f5      	b.n	8014364 <_dtoa_r+0x274>
 8014378:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801437c:	46da      	mov	sl, fp
 801437e:	465a      	mov	r2, fp
 8014380:	e7c6      	b.n	8014310 <_dtoa_r+0x220>
 8014382:	3101      	adds	r1, #1
 8014384:	0040      	lsls	r0, r0, #1
 8014386:	e7c7      	b.n	8014318 <_dtoa_r+0x228>
 8014388:	636f4361 	.word	0x636f4361
 801438c:	3fd287a7 	.word	0x3fd287a7
 8014390:	8b60c8b3 	.word	0x8b60c8b3
 8014394:	3fc68a28 	.word	0x3fc68a28
 8014398:	509f79fb 	.word	0x509f79fb
 801439c:	3fd34413 	.word	0x3fd34413
 80143a0:	08016b12 	.word	0x08016b12
 80143a4:	08016b29 	.word	0x08016b29
 80143a8:	7ff00000 	.word	0x7ff00000
 80143ac:	08016b0e 	.word	0x08016b0e
 80143b0:	08016ada 	.word	0x08016ada
 80143b4:	08016ad9 	.word	0x08016ad9
 80143b8:	08016c80 	.word	0x08016c80
 80143bc:	08016b81 	.word	0x08016b81
 80143c0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80143c4:	f1ba 0f0e 	cmp.w	sl, #14
 80143c8:	6010      	str	r0, [r2, #0]
 80143ca:	d86f      	bhi.n	80144ac <_dtoa_r+0x3bc>
 80143cc:	2c00      	cmp	r4, #0
 80143ce:	d06d      	beq.n	80144ac <_dtoa_r+0x3bc>
 80143d0:	f1b8 0f00 	cmp.w	r8, #0
 80143d4:	f340 80c2 	ble.w	801455c <_dtoa_r+0x46c>
 80143d8:	4aca      	ldr	r2, [pc, #808]	@ (8014704 <_dtoa_r+0x614>)
 80143da:	f008 010f 	and.w	r1, r8, #15
 80143de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80143e2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80143e6:	ed92 7b00 	vldr	d7, [r2]
 80143ea:	ea4f 1128 	mov.w	r1, r8, asr #4
 80143ee:	f000 80a9 	beq.w	8014544 <_dtoa_r+0x454>
 80143f2:	4ac5      	ldr	r2, [pc, #788]	@ (8014708 <_dtoa_r+0x618>)
 80143f4:	ed92 6b08 	vldr	d6, [r2, #32]
 80143f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80143fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014400:	f001 010f 	and.w	r1, r1, #15
 8014404:	2203      	movs	r2, #3
 8014406:	48c0      	ldr	r0, [pc, #768]	@ (8014708 <_dtoa_r+0x618>)
 8014408:	2900      	cmp	r1, #0
 801440a:	f040 809d 	bne.w	8014548 <_dtoa_r+0x458>
 801440e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014412:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014416:	ed8d 7b02 	vstr	d7, [sp, #8]
 801441a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801441c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014420:	2900      	cmp	r1, #0
 8014422:	f000 80c1 	beq.w	80145a8 <_dtoa_r+0x4b8>
 8014426:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801442a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801442e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014432:	f140 80b9 	bpl.w	80145a8 <_dtoa_r+0x4b8>
 8014436:	f1ba 0f00 	cmp.w	sl, #0
 801443a:	f000 80b5 	beq.w	80145a8 <_dtoa_r+0x4b8>
 801443e:	f1bb 0f00 	cmp.w	fp, #0
 8014442:	dd31      	ble.n	80144a8 <_dtoa_r+0x3b8>
 8014444:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8014448:	ee27 7b06 	vmul.f64	d7, d7, d6
 801444c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014450:	f108 31ff 	add.w	r1, r8, #4294967295
 8014454:	9104      	str	r1, [sp, #16]
 8014456:	3201      	adds	r2, #1
 8014458:	465c      	mov	r4, fp
 801445a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801445e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8014462:	ee07 2a90 	vmov	s15, r2
 8014466:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801446a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801446e:	ee15 2a90 	vmov	r2, s11
 8014472:	ec51 0b15 	vmov	r0, r1, d5
 8014476:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801447a:	2c00      	cmp	r4, #0
 801447c:	f040 8098 	bne.w	80145b0 <_dtoa_r+0x4c0>
 8014480:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8014484:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014488:	ec41 0b17 	vmov	d7, r0, r1
 801448c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014494:	f300 8261 	bgt.w	801495a <_dtoa_r+0x86a>
 8014498:	eeb1 7b47 	vneg.f64	d7, d7
 801449c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80144a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144a4:	f100 80f5 	bmi.w	8014692 <_dtoa_r+0x5a2>
 80144a8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80144ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80144ae:	2a00      	cmp	r2, #0
 80144b0:	f2c0 812c 	blt.w	801470c <_dtoa_r+0x61c>
 80144b4:	f1b8 0f0e 	cmp.w	r8, #14
 80144b8:	f300 8128 	bgt.w	801470c <_dtoa_r+0x61c>
 80144bc:	4b91      	ldr	r3, [pc, #580]	@ (8014704 <_dtoa_r+0x614>)
 80144be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80144c2:	ed93 6b00 	vldr	d6, [r3]
 80144c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	da03      	bge.n	80144d4 <_dtoa_r+0x3e4>
 80144cc:	f1ba 0f00 	cmp.w	sl, #0
 80144d0:	f340 80d2 	ble.w	8014678 <_dtoa_r+0x588>
 80144d4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80144d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80144dc:	463e      	mov	r6, r7
 80144de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80144e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80144e6:	ee15 3a10 	vmov	r3, s10
 80144ea:	3330      	adds	r3, #48	@ 0x30
 80144ec:	f806 3b01 	strb.w	r3, [r6], #1
 80144f0:	1bf3      	subs	r3, r6, r7
 80144f2:	459a      	cmp	sl, r3
 80144f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80144f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80144fc:	f040 80f8 	bne.w	80146f0 <_dtoa_r+0x600>
 8014500:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014504:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801450c:	f300 80dd 	bgt.w	80146ca <_dtoa_r+0x5da>
 8014510:	eeb4 7b46 	vcmp.f64	d7, d6
 8014514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014518:	d104      	bne.n	8014524 <_dtoa_r+0x434>
 801451a:	ee15 3a10 	vmov	r3, s10
 801451e:	07db      	lsls	r3, r3, #31
 8014520:	f100 80d3 	bmi.w	80146ca <_dtoa_r+0x5da>
 8014524:	9901      	ldr	r1, [sp, #4]
 8014526:	4648      	mov	r0, r9
 8014528:	f000 ffc4 	bl	80154b4 <_Bfree>
 801452c:	2300      	movs	r3, #0
 801452e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014530:	7033      	strb	r3, [r6, #0]
 8014532:	f108 0301 	add.w	r3, r8, #1
 8014536:	6013      	str	r3, [r2, #0]
 8014538:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801453a:	2b00      	cmp	r3, #0
 801453c:	f000 8304 	beq.w	8014b48 <_dtoa_r+0xa58>
 8014540:	601e      	str	r6, [r3, #0]
 8014542:	e301      	b.n	8014b48 <_dtoa_r+0xa58>
 8014544:	2202      	movs	r2, #2
 8014546:	e75e      	b.n	8014406 <_dtoa_r+0x316>
 8014548:	07cc      	lsls	r4, r1, #31
 801454a:	d504      	bpl.n	8014556 <_dtoa_r+0x466>
 801454c:	ed90 6b00 	vldr	d6, [r0]
 8014550:	3201      	adds	r2, #1
 8014552:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014556:	1049      	asrs	r1, r1, #1
 8014558:	3008      	adds	r0, #8
 801455a:	e755      	b.n	8014408 <_dtoa_r+0x318>
 801455c:	d022      	beq.n	80145a4 <_dtoa_r+0x4b4>
 801455e:	f1c8 0100 	rsb	r1, r8, #0
 8014562:	4a68      	ldr	r2, [pc, #416]	@ (8014704 <_dtoa_r+0x614>)
 8014564:	f001 000f 	and.w	r0, r1, #15
 8014568:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801456c:	ed92 7b00 	vldr	d7, [r2]
 8014570:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014574:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014578:	4863      	ldr	r0, [pc, #396]	@ (8014708 <_dtoa_r+0x618>)
 801457a:	1109      	asrs	r1, r1, #4
 801457c:	2400      	movs	r4, #0
 801457e:	2202      	movs	r2, #2
 8014580:	b929      	cbnz	r1, 801458e <_dtoa_r+0x49e>
 8014582:	2c00      	cmp	r4, #0
 8014584:	f43f af49 	beq.w	801441a <_dtoa_r+0x32a>
 8014588:	ed8d 7b02 	vstr	d7, [sp, #8]
 801458c:	e745      	b.n	801441a <_dtoa_r+0x32a>
 801458e:	07ce      	lsls	r6, r1, #31
 8014590:	d505      	bpl.n	801459e <_dtoa_r+0x4ae>
 8014592:	ed90 6b00 	vldr	d6, [r0]
 8014596:	3201      	adds	r2, #1
 8014598:	2401      	movs	r4, #1
 801459a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801459e:	1049      	asrs	r1, r1, #1
 80145a0:	3008      	adds	r0, #8
 80145a2:	e7ed      	b.n	8014580 <_dtoa_r+0x490>
 80145a4:	2202      	movs	r2, #2
 80145a6:	e738      	b.n	801441a <_dtoa_r+0x32a>
 80145a8:	f8cd 8010 	str.w	r8, [sp, #16]
 80145ac:	4654      	mov	r4, sl
 80145ae:	e754      	b.n	801445a <_dtoa_r+0x36a>
 80145b0:	4a54      	ldr	r2, [pc, #336]	@ (8014704 <_dtoa_r+0x614>)
 80145b2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80145b6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80145ba:	9a08      	ldr	r2, [sp, #32]
 80145bc:	ec41 0b17 	vmov	d7, r0, r1
 80145c0:	443c      	add	r4, r7
 80145c2:	b34a      	cbz	r2, 8014618 <_dtoa_r+0x528>
 80145c4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80145c8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80145cc:	463e      	mov	r6, r7
 80145ce:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80145d2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80145d6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80145da:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80145de:	ee14 2a90 	vmov	r2, s9
 80145e2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80145e6:	3230      	adds	r2, #48	@ 0x30
 80145e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80145ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80145f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145f4:	f806 2b01 	strb.w	r2, [r6], #1
 80145f8:	d438      	bmi.n	801466c <_dtoa_r+0x57c>
 80145fa:	ee32 5b46 	vsub.f64	d5, d2, d6
 80145fe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8014602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014606:	d462      	bmi.n	80146ce <_dtoa_r+0x5de>
 8014608:	42a6      	cmp	r6, r4
 801460a:	f43f af4d 	beq.w	80144a8 <_dtoa_r+0x3b8>
 801460e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8014612:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014616:	e7e0      	b.n	80145da <_dtoa_r+0x4ea>
 8014618:	4621      	mov	r1, r4
 801461a:	463e      	mov	r6, r7
 801461c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014620:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8014624:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014628:	ee14 2a90 	vmov	r2, s9
 801462c:	3230      	adds	r2, #48	@ 0x30
 801462e:	f806 2b01 	strb.w	r2, [r6], #1
 8014632:	42a6      	cmp	r6, r4
 8014634:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014638:	ee36 6b45 	vsub.f64	d6, d6, d5
 801463c:	d119      	bne.n	8014672 <_dtoa_r+0x582>
 801463e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8014642:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014646:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801464e:	dc3e      	bgt.n	80146ce <_dtoa_r+0x5de>
 8014650:	ee35 5b47 	vsub.f64	d5, d5, d7
 8014654:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801465c:	f57f af24 	bpl.w	80144a8 <_dtoa_r+0x3b8>
 8014660:	460e      	mov	r6, r1
 8014662:	3901      	subs	r1, #1
 8014664:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014668:	2b30      	cmp	r3, #48	@ 0x30
 801466a:	d0f9      	beq.n	8014660 <_dtoa_r+0x570>
 801466c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014670:	e758      	b.n	8014524 <_dtoa_r+0x434>
 8014672:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014676:	e7d5      	b.n	8014624 <_dtoa_r+0x534>
 8014678:	d10b      	bne.n	8014692 <_dtoa_r+0x5a2>
 801467a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801467e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014682:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014686:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801468a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801468e:	f2c0 8161 	blt.w	8014954 <_dtoa_r+0x864>
 8014692:	2400      	movs	r4, #0
 8014694:	4625      	mov	r5, r4
 8014696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014698:	43db      	mvns	r3, r3
 801469a:	9304      	str	r3, [sp, #16]
 801469c:	463e      	mov	r6, r7
 801469e:	f04f 0800 	mov.w	r8, #0
 80146a2:	4621      	mov	r1, r4
 80146a4:	4648      	mov	r0, r9
 80146a6:	f000 ff05 	bl	80154b4 <_Bfree>
 80146aa:	2d00      	cmp	r5, #0
 80146ac:	d0de      	beq.n	801466c <_dtoa_r+0x57c>
 80146ae:	f1b8 0f00 	cmp.w	r8, #0
 80146b2:	d005      	beq.n	80146c0 <_dtoa_r+0x5d0>
 80146b4:	45a8      	cmp	r8, r5
 80146b6:	d003      	beq.n	80146c0 <_dtoa_r+0x5d0>
 80146b8:	4641      	mov	r1, r8
 80146ba:	4648      	mov	r0, r9
 80146bc:	f000 fefa 	bl	80154b4 <_Bfree>
 80146c0:	4629      	mov	r1, r5
 80146c2:	4648      	mov	r0, r9
 80146c4:	f000 fef6 	bl	80154b4 <_Bfree>
 80146c8:	e7d0      	b.n	801466c <_dtoa_r+0x57c>
 80146ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80146ce:	4633      	mov	r3, r6
 80146d0:	461e      	mov	r6, r3
 80146d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80146d6:	2a39      	cmp	r2, #57	@ 0x39
 80146d8:	d106      	bne.n	80146e8 <_dtoa_r+0x5f8>
 80146da:	429f      	cmp	r7, r3
 80146dc:	d1f8      	bne.n	80146d0 <_dtoa_r+0x5e0>
 80146de:	9a04      	ldr	r2, [sp, #16]
 80146e0:	3201      	adds	r2, #1
 80146e2:	9204      	str	r2, [sp, #16]
 80146e4:	2230      	movs	r2, #48	@ 0x30
 80146e6:	703a      	strb	r2, [r7, #0]
 80146e8:	781a      	ldrb	r2, [r3, #0]
 80146ea:	3201      	adds	r2, #1
 80146ec:	701a      	strb	r2, [r3, #0]
 80146ee:	e7bd      	b.n	801466c <_dtoa_r+0x57c>
 80146f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80146f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80146f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146fc:	f47f aeef 	bne.w	80144de <_dtoa_r+0x3ee>
 8014700:	e710      	b.n	8014524 <_dtoa_r+0x434>
 8014702:	bf00      	nop
 8014704:	08016c80 	.word	0x08016c80
 8014708:	08016c58 	.word	0x08016c58
 801470c:	9908      	ldr	r1, [sp, #32]
 801470e:	2900      	cmp	r1, #0
 8014710:	f000 80e3 	beq.w	80148da <_dtoa_r+0x7ea>
 8014714:	9907      	ldr	r1, [sp, #28]
 8014716:	2901      	cmp	r1, #1
 8014718:	f300 80c8 	bgt.w	80148ac <_dtoa_r+0x7bc>
 801471c:	2d00      	cmp	r5, #0
 801471e:	f000 80c1 	beq.w	80148a4 <_dtoa_r+0x7b4>
 8014722:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8014726:	9e05      	ldr	r6, [sp, #20]
 8014728:	461c      	mov	r4, r3
 801472a:	9304      	str	r3, [sp, #16]
 801472c:	9b05      	ldr	r3, [sp, #20]
 801472e:	4413      	add	r3, r2
 8014730:	9305      	str	r3, [sp, #20]
 8014732:	9b06      	ldr	r3, [sp, #24]
 8014734:	2101      	movs	r1, #1
 8014736:	4413      	add	r3, r2
 8014738:	4648      	mov	r0, r9
 801473a:	9306      	str	r3, [sp, #24]
 801473c:	f000 ffb8 	bl	80156b0 <__i2b>
 8014740:	9b04      	ldr	r3, [sp, #16]
 8014742:	4605      	mov	r5, r0
 8014744:	b166      	cbz	r6, 8014760 <_dtoa_r+0x670>
 8014746:	9a06      	ldr	r2, [sp, #24]
 8014748:	2a00      	cmp	r2, #0
 801474a:	dd09      	ble.n	8014760 <_dtoa_r+0x670>
 801474c:	42b2      	cmp	r2, r6
 801474e:	9905      	ldr	r1, [sp, #20]
 8014750:	bfa8      	it	ge
 8014752:	4632      	movge	r2, r6
 8014754:	1a89      	subs	r1, r1, r2
 8014756:	9105      	str	r1, [sp, #20]
 8014758:	9906      	ldr	r1, [sp, #24]
 801475a:	1ab6      	subs	r6, r6, r2
 801475c:	1a8a      	subs	r2, r1, r2
 801475e:	9206      	str	r2, [sp, #24]
 8014760:	b1fb      	cbz	r3, 80147a2 <_dtoa_r+0x6b2>
 8014762:	9a08      	ldr	r2, [sp, #32]
 8014764:	2a00      	cmp	r2, #0
 8014766:	f000 80bc 	beq.w	80148e2 <_dtoa_r+0x7f2>
 801476a:	b19c      	cbz	r4, 8014794 <_dtoa_r+0x6a4>
 801476c:	4629      	mov	r1, r5
 801476e:	4622      	mov	r2, r4
 8014770:	4648      	mov	r0, r9
 8014772:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014774:	f001 f85c 	bl	8015830 <__pow5mult>
 8014778:	9a01      	ldr	r2, [sp, #4]
 801477a:	4601      	mov	r1, r0
 801477c:	4605      	mov	r5, r0
 801477e:	4648      	mov	r0, r9
 8014780:	f000 ffac 	bl	80156dc <__multiply>
 8014784:	9901      	ldr	r1, [sp, #4]
 8014786:	9004      	str	r0, [sp, #16]
 8014788:	4648      	mov	r0, r9
 801478a:	f000 fe93 	bl	80154b4 <_Bfree>
 801478e:	9a04      	ldr	r2, [sp, #16]
 8014790:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014792:	9201      	str	r2, [sp, #4]
 8014794:	1b1a      	subs	r2, r3, r4
 8014796:	d004      	beq.n	80147a2 <_dtoa_r+0x6b2>
 8014798:	9901      	ldr	r1, [sp, #4]
 801479a:	4648      	mov	r0, r9
 801479c:	f001 f848 	bl	8015830 <__pow5mult>
 80147a0:	9001      	str	r0, [sp, #4]
 80147a2:	2101      	movs	r1, #1
 80147a4:	4648      	mov	r0, r9
 80147a6:	f000 ff83 	bl	80156b0 <__i2b>
 80147aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80147ac:	4604      	mov	r4, r0
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	f000 81d0 	beq.w	8014b54 <_dtoa_r+0xa64>
 80147b4:	461a      	mov	r2, r3
 80147b6:	4601      	mov	r1, r0
 80147b8:	4648      	mov	r0, r9
 80147ba:	f001 f839 	bl	8015830 <__pow5mult>
 80147be:	9b07      	ldr	r3, [sp, #28]
 80147c0:	2b01      	cmp	r3, #1
 80147c2:	4604      	mov	r4, r0
 80147c4:	f300 8095 	bgt.w	80148f2 <_dtoa_r+0x802>
 80147c8:	9b02      	ldr	r3, [sp, #8]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	f040 808b 	bne.w	80148e6 <_dtoa_r+0x7f6>
 80147d0:	9b03      	ldr	r3, [sp, #12]
 80147d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80147d6:	2a00      	cmp	r2, #0
 80147d8:	f040 8087 	bne.w	80148ea <_dtoa_r+0x7fa>
 80147dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80147e0:	0d12      	lsrs	r2, r2, #20
 80147e2:	0512      	lsls	r2, r2, #20
 80147e4:	2a00      	cmp	r2, #0
 80147e6:	f000 8082 	beq.w	80148ee <_dtoa_r+0x7fe>
 80147ea:	9b05      	ldr	r3, [sp, #20]
 80147ec:	3301      	adds	r3, #1
 80147ee:	9305      	str	r3, [sp, #20]
 80147f0:	9b06      	ldr	r3, [sp, #24]
 80147f2:	3301      	adds	r3, #1
 80147f4:	9306      	str	r3, [sp, #24]
 80147f6:	2301      	movs	r3, #1
 80147f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80147fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	f000 81af 	beq.w	8014b60 <_dtoa_r+0xa70>
 8014802:	6922      	ldr	r2, [r4, #16]
 8014804:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014808:	6910      	ldr	r0, [r2, #16]
 801480a:	f000 ff05 	bl	8015618 <__hi0bits>
 801480e:	f1c0 0020 	rsb	r0, r0, #32
 8014812:	9b06      	ldr	r3, [sp, #24]
 8014814:	4418      	add	r0, r3
 8014816:	f010 001f 	ands.w	r0, r0, #31
 801481a:	d076      	beq.n	801490a <_dtoa_r+0x81a>
 801481c:	f1c0 0220 	rsb	r2, r0, #32
 8014820:	2a04      	cmp	r2, #4
 8014822:	dd69      	ble.n	80148f8 <_dtoa_r+0x808>
 8014824:	9b05      	ldr	r3, [sp, #20]
 8014826:	f1c0 001c 	rsb	r0, r0, #28
 801482a:	4403      	add	r3, r0
 801482c:	9305      	str	r3, [sp, #20]
 801482e:	9b06      	ldr	r3, [sp, #24]
 8014830:	4406      	add	r6, r0
 8014832:	4403      	add	r3, r0
 8014834:	9306      	str	r3, [sp, #24]
 8014836:	9b05      	ldr	r3, [sp, #20]
 8014838:	2b00      	cmp	r3, #0
 801483a:	dd05      	ble.n	8014848 <_dtoa_r+0x758>
 801483c:	9901      	ldr	r1, [sp, #4]
 801483e:	461a      	mov	r2, r3
 8014840:	4648      	mov	r0, r9
 8014842:	f001 f84f 	bl	80158e4 <__lshift>
 8014846:	9001      	str	r0, [sp, #4]
 8014848:	9b06      	ldr	r3, [sp, #24]
 801484a:	2b00      	cmp	r3, #0
 801484c:	dd05      	ble.n	801485a <_dtoa_r+0x76a>
 801484e:	4621      	mov	r1, r4
 8014850:	461a      	mov	r2, r3
 8014852:	4648      	mov	r0, r9
 8014854:	f001 f846 	bl	80158e4 <__lshift>
 8014858:	4604      	mov	r4, r0
 801485a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801485c:	2b00      	cmp	r3, #0
 801485e:	d056      	beq.n	801490e <_dtoa_r+0x81e>
 8014860:	9801      	ldr	r0, [sp, #4]
 8014862:	4621      	mov	r1, r4
 8014864:	f001 f8aa 	bl	80159bc <__mcmp>
 8014868:	2800      	cmp	r0, #0
 801486a:	da50      	bge.n	801490e <_dtoa_r+0x81e>
 801486c:	f108 33ff 	add.w	r3, r8, #4294967295
 8014870:	9304      	str	r3, [sp, #16]
 8014872:	9901      	ldr	r1, [sp, #4]
 8014874:	2300      	movs	r3, #0
 8014876:	220a      	movs	r2, #10
 8014878:	4648      	mov	r0, r9
 801487a:	f000 fe3d 	bl	80154f8 <__multadd>
 801487e:	9b08      	ldr	r3, [sp, #32]
 8014880:	9001      	str	r0, [sp, #4]
 8014882:	2b00      	cmp	r3, #0
 8014884:	f000 816e 	beq.w	8014b64 <_dtoa_r+0xa74>
 8014888:	4629      	mov	r1, r5
 801488a:	2300      	movs	r3, #0
 801488c:	220a      	movs	r2, #10
 801488e:	4648      	mov	r0, r9
 8014890:	f000 fe32 	bl	80154f8 <__multadd>
 8014894:	f1bb 0f00 	cmp.w	fp, #0
 8014898:	4605      	mov	r5, r0
 801489a:	dc64      	bgt.n	8014966 <_dtoa_r+0x876>
 801489c:	9b07      	ldr	r3, [sp, #28]
 801489e:	2b02      	cmp	r3, #2
 80148a0:	dc3e      	bgt.n	8014920 <_dtoa_r+0x830>
 80148a2:	e060      	b.n	8014966 <_dtoa_r+0x876>
 80148a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80148a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80148aa:	e73c      	b.n	8014726 <_dtoa_r+0x636>
 80148ac:	f10a 34ff 	add.w	r4, sl, #4294967295
 80148b0:	42a3      	cmp	r3, r4
 80148b2:	bfbf      	itttt	lt
 80148b4:	1ae2      	sublt	r2, r4, r3
 80148b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80148b8:	189b      	addlt	r3, r3, r2
 80148ba:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80148bc:	bfae      	itee	ge
 80148be:	1b1c      	subge	r4, r3, r4
 80148c0:	4623      	movlt	r3, r4
 80148c2:	2400      	movlt	r4, #0
 80148c4:	f1ba 0f00 	cmp.w	sl, #0
 80148c8:	bfb5      	itete	lt
 80148ca:	9a05      	ldrlt	r2, [sp, #20]
 80148cc:	9e05      	ldrge	r6, [sp, #20]
 80148ce:	eba2 060a 	sublt.w	r6, r2, sl
 80148d2:	4652      	movge	r2, sl
 80148d4:	bfb8      	it	lt
 80148d6:	2200      	movlt	r2, #0
 80148d8:	e727      	b.n	801472a <_dtoa_r+0x63a>
 80148da:	9e05      	ldr	r6, [sp, #20]
 80148dc:	9d08      	ldr	r5, [sp, #32]
 80148de:	461c      	mov	r4, r3
 80148e0:	e730      	b.n	8014744 <_dtoa_r+0x654>
 80148e2:	461a      	mov	r2, r3
 80148e4:	e758      	b.n	8014798 <_dtoa_r+0x6a8>
 80148e6:	2300      	movs	r3, #0
 80148e8:	e786      	b.n	80147f8 <_dtoa_r+0x708>
 80148ea:	9b02      	ldr	r3, [sp, #8]
 80148ec:	e784      	b.n	80147f8 <_dtoa_r+0x708>
 80148ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 80148f0:	e783      	b.n	80147fa <_dtoa_r+0x70a>
 80148f2:	2300      	movs	r3, #0
 80148f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80148f6:	e784      	b.n	8014802 <_dtoa_r+0x712>
 80148f8:	d09d      	beq.n	8014836 <_dtoa_r+0x746>
 80148fa:	9b05      	ldr	r3, [sp, #20]
 80148fc:	321c      	adds	r2, #28
 80148fe:	4413      	add	r3, r2
 8014900:	9305      	str	r3, [sp, #20]
 8014902:	9b06      	ldr	r3, [sp, #24]
 8014904:	4416      	add	r6, r2
 8014906:	4413      	add	r3, r2
 8014908:	e794      	b.n	8014834 <_dtoa_r+0x744>
 801490a:	4602      	mov	r2, r0
 801490c:	e7f5      	b.n	80148fa <_dtoa_r+0x80a>
 801490e:	f1ba 0f00 	cmp.w	sl, #0
 8014912:	f8cd 8010 	str.w	r8, [sp, #16]
 8014916:	46d3      	mov	fp, sl
 8014918:	dc21      	bgt.n	801495e <_dtoa_r+0x86e>
 801491a:	9b07      	ldr	r3, [sp, #28]
 801491c:	2b02      	cmp	r3, #2
 801491e:	dd1e      	ble.n	801495e <_dtoa_r+0x86e>
 8014920:	f1bb 0f00 	cmp.w	fp, #0
 8014924:	f47f aeb7 	bne.w	8014696 <_dtoa_r+0x5a6>
 8014928:	4621      	mov	r1, r4
 801492a:	465b      	mov	r3, fp
 801492c:	2205      	movs	r2, #5
 801492e:	4648      	mov	r0, r9
 8014930:	f000 fde2 	bl	80154f8 <__multadd>
 8014934:	4601      	mov	r1, r0
 8014936:	4604      	mov	r4, r0
 8014938:	9801      	ldr	r0, [sp, #4]
 801493a:	f001 f83f 	bl	80159bc <__mcmp>
 801493e:	2800      	cmp	r0, #0
 8014940:	f77f aea9 	ble.w	8014696 <_dtoa_r+0x5a6>
 8014944:	463e      	mov	r6, r7
 8014946:	2331      	movs	r3, #49	@ 0x31
 8014948:	f806 3b01 	strb.w	r3, [r6], #1
 801494c:	9b04      	ldr	r3, [sp, #16]
 801494e:	3301      	adds	r3, #1
 8014950:	9304      	str	r3, [sp, #16]
 8014952:	e6a4      	b.n	801469e <_dtoa_r+0x5ae>
 8014954:	f8cd 8010 	str.w	r8, [sp, #16]
 8014958:	4654      	mov	r4, sl
 801495a:	4625      	mov	r5, r4
 801495c:	e7f2      	b.n	8014944 <_dtoa_r+0x854>
 801495e:	9b08      	ldr	r3, [sp, #32]
 8014960:	2b00      	cmp	r3, #0
 8014962:	f000 8103 	beq.w	8014b6c <_dtoa_r+0xa7c>
 8014966:	2e00      	cmp	r6, #0
 8014968:	dd05      	ble.n	8014976 <_dtoa_r+0x886>
 801496a:	4629      	mov	r1, r5
 801496c:	4632      	mov	r2, r6
 801496e:	4648      	mov	r0, r9
 8014970:	f000 ffb8 	bl	80158e4 <__lshift>
 8014974:	4605      	mov	r5, r0
 8014976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014978:	2b00      	cmp	r3, #0
 801497a:	d058      	beq.n	8014a2e <_dtoa_r+0x93e>
 801497c:	6869      	ldr	r1, [r5, #4]
 801497e:	4648      	mov	r0, r9
 8014980:	f000 fd58 	bl	8015434 <_Balloc>
 8014984:	4606      	mov	r6, r0
 8014986:	b928      	cbnz	r0, 8014994 <_dtoa_r+0x8a4>
 8014988:	4b82      	ldr	r3, [pc, #520]	@ (8014b94 <_dtoa_r+0xaa4>)
 801498a:	4602      	mov	r2, r0
 801498c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014990:	f7ff bbc7 	b.w	8014122 <_dtoa_r+0x32>
 8014994:	692a      	ldr	r2, [r5, #16]
 8014996:	3202      	adds	r2, #2
 8014998:	0092      	lsls	r2, r2, #2
 801499a:	f105 010c 	add.w	r1, r5, #12
 801499e:	300c      	adds	r0, #12
 80149a0:	f7ff fb05 	bl	8013fae <memcpy>
 80149a4:	2201      	movs	r2, #1
 80149a6:	4631      	mov	r1, r6
 80149a8:	4648      	mov	r0, r9
 80149aa:	f000 ff9b 	bl	80158e4 <__lshift>
 80149ae:	1c7b      	adds	r3, r7, #1
 80149b0:	9305      	str	r3, [sp, #20]
 80149b2:	eb07 030b 	add.w	r3, r7, fp
 80149b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80149b8:	9b02      	ldr	r3, [sp, #8]
 80149ba:	f003 0301 	and.w	r3, r3, #1
 80149be:	46a8      	mov	r8, r5
 80149c0:	9308      	str	r3, [sp, #32]
 80149c2:	4605      	mov	r5, r0
 80149c4:	9b05      	ldr	r3, [sp, #20]
 80149c6:	9801      	ldr	r0, [sp, #4]
 80149c8:	4621      	mov	r1, r4
 80149ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80149ce:	f7ff fb07 	bl	8013fe0 <quorem>
 80149d2:	4641      	mov	r1, r8
 80149d4:	9002      	str	r0, [sp, #8]
 80149d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80149da:	9801      	ldr	r0, [sp, #4]
 80149dc:	f000 ffee 	bl	80159bc <__mcmp>
 80149e0:	462a      	mov	r2, r5
 80149e2:	9006      	str	r0, [sp, #24]
 80149e4:	4621      	mov	r1, r4
 80149e6:	4648      	mov	r0, r9
 80149e8:	f001 f804 	bl	80159f4 <__mdiff>
 80149ec:	68c2      	ldr	r2, [r0, #12]
 80149ee:	4606      	mov	r6, r0
 80149f0:	b9fa      	cbnz	r2, 8014a32 <_dtoa_r+0x942>
 80149f2:	4601      	mov	r1, r0
 80149f4:	9801      	ldr	r0, [sp, #4]
 80149f6:	f000 ffe1 	bl	80159bc <__mcmp>
 80149fa:	4602      	mov	r2, r0
 80149fc:	4631      	mov	r1, r6
 80149fe:	4648      	mov	r0, r9
 8014a00:	920a      	str	r2, [sp, #40]	@ 0x28
 8014a02:	f000 fd57 	bl	80154b4 <_Bfree>
 8014a06:	9b07      	ldr	r3, [sp, #28]
 8014a08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014a0a:	9e05      	ldr	r6, [sp, #20]
 8014a0c:	ea43 0102 	orr.w	r1, r3, r2
 8014a10:	9b08      	ldr	r3, [sp, #32]
 8014a12:	4319      	orrs	r1, r3
 8014a14:	d10f      	bne.n	8014a36 <_dtoa_r+0x946>
 8014a16:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014a1a:	d028      	beq.n	8014a6e <_dtoa_r+0x97e>
 8014a1c:	9b06      	ldr	r3, [sp, #24]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	dd02      	ble.n	8014a28 <_dtoa_r+0x938>
 8014a22:	9b02      	ldr	r3, [sp, #8]
 8014a24:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8014a28:	f88b a000 	strb.w	sl, [fp]
 8014a2c:	e639      	b.n	80146a2 <_dtoa_r+0x5b2>
 8014a2e:	4628      	mov	r0, r5
 8014a30:	e7bd      	b.n	80149ae <_dtoa_r+0x8be>
 8014a32:	2201      	movs	r2, #1
 8014a34:	e7e2      	b.n	80149fc <_dtoa_r+0x90c>
 8014a36:	9b06      	ldr	r3, [sp, #24]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	db04      	blt.n	8014a46 <_dtoa_r+0x956>
 8014a3c:	9907      	ldr	r1, [sp, #28]
 8014a3e:	430b      	orrs	r3, r1
 8014a40:	9908      	ldr	r1, [sp, #32]
 8014a42:	430b      	orrs	r3, r1
 8014a44:	d120      	bne.n	8014a88 <_dtoa_r+0x998>
 8014a46:	2a00      	cmp	r2, #0
 8014a48:	ddee      	ble.n	8014a28 <_dtoa_r+0x938>
 8014a4a:	9901      	ldr	r1, [sp, #4]
 8014a4c:	2201      	movs	r2, #1
 8014a4e:	4648      	mov	r0, r9
 8014a50:	f000 ff48 	bl	80158e4 <__lshift>
 8014a54:	4621      	mov	r1, r4
 8014a56:	9001      	str	r0, [sp, #4]
 8014a58:	f000 ffb0 	bl	80159bc <__mcmp>
 8014a5c:	2800      	cmp	r0, #0
 8014a5e:	dc03      	bgt.n	8014a68 <_dtoa_r+0x978>
 8014a60:	d1e2      	bne.n	8014a28 <_dtoa_r+0x938>
 8014a62:	f01a 0f01 	tst.w	sl, #1
 8014a66:	d0df      	beq.n	8014a28 <_dtoa_r+0x938>
 8014a68:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014a6c:	d1d9      	bne.n	8014a22 <_dtoa_r+0x932>
 8014a6e:	2339      	movs	r3, #57	@ 0x39
 8014a70:	f88b 3000 	strb.w	r3, [fp]
 8014a74:	4633      	mov	r3, r6
 8014a76:	461e      	mov	r6, r3
 8014a78:	3b01      	subs	r3, #1
 8014a7a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014a7e:	2a39      	cmp	r2, #57	@ 0x39
 8014a80:	d053      	beq.n	8014b2a <_dtoa_r+0xa3a>
 8014a82:	3201      	adds	r2, #1
 8014a84:	701a      	strb	r2, [r3, #0]
 8014a86:	e60c      	b.n	80146a2 <_dtoa_r+0x5b2>
 8014a88:	2a00      	cmp	r2, #0
 8014a8a:	dd07      	ble.n	8014a9c <_dtoa_r+0x9ac>
 8014a8c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014a90:	d0ed      	beq.n	8014a6e <_dtoa_r+0x97e>
 8014a92:	f10a 0301 	add.w	r3, sl, #1
 8014a96:	f88b 3000 	strb.w	r3, [fp]
 8014a9a:	e602      	b.n	80146a2 <_dtoa_r+0x5b2>
 8014a9c:	9b05      	ldr	r3, [sp, #20]
 8014a9e:	9a05      	ldr	r2, [sp, #20]
 8014aa0:	f803 ac01 	strb.w	sl, [r3, #-1]
 8014aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014aa6:	4293      	cmp	r3, r2
 8014aa8:	d029      	beq.n	8014afe <_dtoa_r+0xa0e>
 8014aaa:	9901      	ldr	r1, [sp, #4]
 8014aac:	2300      	movs	r3, #0
 8014aae:	220a      	movs	r2, #10
 8014ab0:	4648      	mov	r0, r9
 8014ab2:	f000 fd21 	bl	80154f8 <__multadd>
 8014ab6:	45a8      	cmp	r8, r5
 8014ab8:	9001      	str	r0, [sp, #4]
 8014aba:	f04f 0300 	mov.w	r3, #0
 8014abe:	f04f 020a 	mov.w	r2, #10
 8014ac2:	4641      	mov	r1, r8
 8014ac4:	4648      	mov	r0, r9
 8014ac6:	d107      	bne.n	8014ad8 <_dtoa_r+0x9e8>
 8014ac8:	f000 fd16 	bl	80154f8 <__multadd>
 8014acc:	4680      	mov	r8, r0
 8014ace:	4605      	mov	r5, r0
 8014ad0:	9b05      	ldr	r3, [sp, #20]
 8014ad2:	3301      	adds	r3, #1
 8014ad4:	9305      	str	r3, [sp, #20]
 8014ad6:	e775      	b.n	80149c4 <_dtoa_r+0x8d4>
 8014ad8:	f000 fd0e 	bl	80154f8 <__multadd>
 8014adc:	4629      	mov	r1, r5
 8014ade:	4680      	mov	r8, r0
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	220a      	movs	r2, #10
 8014ae4:	4648      	mov	r0, r9
 8014ae6:	f000 fd07 	bl	80154f8 <__multadd>
 8014aea:	4605      	mov	r5, r0
 8014aec:	e7f0      	b.n	8014ad0 <_dtoa_r+0x9e0>
 8014aee:	f1bb 0f00 	cmp.w	fp, #0
 8014af2:	bfcc      	ite	gt
 8014af4:	465e      	movgt	r6, fp
 8014af6:	2601      	movle	r6, #1
 8014af8:	443e      	add	r6, r7
 8014afa:	f04f 0800 	mov.w	r8, #0
 8014afe:	9901      	ldr	r1, [sp, #4]
 8014b00:	2201      	movs	r2, #1
 8014b02:	4648      	mov	r0, r9
 8014b04:	f000 feee 	bl	80158e4 <__lshift>
 8014b08:	4621      	mov	r1, r4
 8014b0a:	9001      	str	r0, [sp, #4]
 8014b0c:	f000 ff56 	bl	80159bc <__mcmp>
 8014b10:	2800      	cmp	r0, #0
 8014b12:	dcaf      	bgt.n	8014a74 <_dtoa_r+0x984>
 8014b14:	d102      	bne.n	8014b1c <_dtoa_r+0xa2c>
 8014b16:	f01a 0f01 	tst.w	sl, #1
 8014b1a:	d1ab      	bne.n	8014a74 <_dtoa_r+0x984>
 8014b1c:	4633      	mov	r3, r6
 8014b1e:	461e      	mov	r6, r3
 8014b20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014b24:	2a30      	cmp	r2, #48	@ 0x30
 8014b26:	d0fa      	beq.n	8014b1e <_dtoa_r+0xa2e>
 8014b28:	e5bb      	b.n	80146a2 <_dtoa_r+0x5b2>
 8014b2a:	429f      	cmp	r7, r3
 8014b2c:	d1a3      	bne.n	8014a76 <_dtoa_r+0x986>
 8014b2e:	9b04      	ldr	r3, [sp, #16]
 8014b30:	3301      	adds	r3, #1
 8014b32:	9304      	str	r3, [sp, #16]
 8014b34:	2331      	movs	r3, #49	@ 0x31
 8014b36:	703b      	strb	r3, [r7, #0]
 8014b38:	e5b3      	b.n	80146a2 <_dtoa_r+0x5b2>
 8014b3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014b3c:	4f16      	ldr	r7, [pc, #88]	@ (8014b98 <_dtoa_r+0xaa8>)
 8014b3e:	b11b      	cbz	r3, 8014b48 <_dtoa_r+0xa58>
 8014b40:	f107 0308 	add.w	r3, r7, #8
 8014b44:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014b46:	6013      	str	r3, [r2, #0]
 8014b48:	4638      	mov	r0, r7
 8014b4a:	b011      	add	sp, #68	@ 0x44
 8014b4c:	ecbd 8b02 	vpop	{d8}
 8014b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b54:	9b07      	ldr	r3, [sp, #28]
 8014b56:	2b01      	cmp	r3, #1
 8014b58:	f77f ae36 	ble.w	80147c8 <_dtoa_r+0x6d8>
 8014b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014b5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014b60:	2001      	movs	r0, #1
 8014b62:	e656      	b.n	8014812 <_dtoa_r+0x722>
 8014b64:	f1bb 0f00 	cmp.w	fp, #0
 8014b68:	f77f aed7 	ble.w	801491a <_dtoa_r+0x82a>
 8014b6c:	463e      	mov	r6, r7
 8014b6e:	9801      	ldr	r0, [sp, #4]
 8014b70:	4621      	mov	r1, r4
 8014b72:	f7ff fa35 	bl	8013fe0 <quorem>
 8014b76:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8014b7a:	f806 ab01 	strb.w	sl, [r6], #1
 8014b7e:	1bf2      	subs	r2, r6, r7
 8014b80:	4593      	cmp	fp, r2
 8014b82:	ddb4      	ble.n	8014aee <_dtoa_r+0x9fe>
 8014b84:	9901      	ldr	r1, [sp, #4]
 8014b86:	2300      	movs	r3, #0
 8014b88:	220a      	movs	r2, #10
 8014b8a:	4648      	mov	r0, r9
 8014b8c:	f000 fcb4 	bl	80154f8 <__multadd>
 8014b90:	9001      	str	r0, [sp, #4]
 8014b92:	e7ec      	b.n	8014b6e <_dtoa_r+0xa7e>
 8014b94:	08016b81 	.word	0x08016b81
 8014b98:	08016b05 	.word	0x08016b05

08014b9c <_free_r>:
 8014b9c:	b538      	push	{r3, r4, r5, lr}
 8014b9e:	4605      	mov	r5, r0
 8014ba0:	2900      	cmp	r1, #0
 8014ba2:	d041      	beq.n	8014c28 <_free_r+0x8c>
 8014ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ba8:	1f0c      	subs	r4, r1, #4
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	bfb8      	it	lt
 8014bae:	18e4      	addlt	r4, r4, r3
 8014bb0:	f000 fc34 	bl	801541c <__malloc_lock>
 8014bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8014c2c <_free_r+0x90>)
 8014bb6:	6813      	ldr	r3, [r2, #0]
 8014bb8:	b933      	cbnz	r3, 8014bc8 <_free_r+0x2c>
 8014bba:	6063      	str	r3, [r4, #4]
 8014bbc:	6014      	str	r4, [r2, #0]
 8014bbe:	4628      	mov	r0, r5
 8014bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bc4:	f000 bc30 	b.w	8015428 <__malloc_unlock>
 8014bc8:	42a3      	cmp	r3, r4
 8014bca:	d908      	bls.n	8014bde <_free_r+0x42>
 8014bcc:	6820      	ldr	r0, [r4, #0]
 8014bce:	1821      	adds	r1, r4, r0
 8014bd0:	428b      	cmp	r3, r1
 8014bd2:	bf01      	itttt	eq
 8014bd4:	6819      	ldreq	r1, [r3, #0]
 8014bd6:	685b      	ldreq	r3, [r3, #4]
 8014bd8:	1809      	addeq	r1, r1, r0
 8014bda:	6021      	streq	r1, [r4, #0]
 8014bdc:	e7ed      	b.n	8014bba <_free_r+0x1e>
 8014bde:	461a      	mov	r2, r3
 8014be0:	685b      	ldr	r3, [r3, #4]
 8014be2:	b10b      	cbz	r3, 8014be8 <_free_r+0x4c>
 8014be4:	42a3      	cmp	r3, r4
 8014be6:	d9fa      	bls.n	8014bde <_free_r+0x42>
 8014be8:	6811      	ldr	r1, [r2, #0]
 8014bea:	1850      	adds	r0, r2, r1
 8014bec:	42a0      	cmp	r0, r4
 8014bee:	d10b      	bne.n	8014c08 <_free_r+0x6c>
 8014bf0:	6820      	ldr	r0, [r4, #0]
 8014bf2:	4401      	add	r1, r0
 8014bf4:	1850      	adds	r0, r2, r1
 8014bf6:	4283      	cmp	r3, r0
 8014bf8:	6011      	str	r1, [r2, #0]
 8014bfa:	d1e0      	bne.n	8014bbe <_free_r+0x22>
 8014bfc:	6818      	ldr	r0, [r3, #0]
 8014bfe:	685b      	ldr	r3, [r3, #4]
 8014c00:	6053      	str	r3, [r2, #4]
 8014c02:	4408      	add	r0, r1
 8014c04:	6010      	str	r0, [r2, #0]
 8014c06:	e7da      	b.n	8014bbe <_free_r+0x22>
 8014c08:	d902      	bls.n	8014c10 <_free_r+0x74>
 8014c0a:	230c      	movs	r3, #12
 8014c0c:	602b      	str	r3, [r5, #0]
 8014c0e:	e7d6      	b.n	8014bbe <_free_r+0x22>
 8014c10:	6820      	ldr	r0, [r4, #0]
 8014c12:	1821      	adds	r1, r4, r0
 8014c14:	428b      	cmp	r3, r1
 8014c16:	bf04      	itt	eq
 8014c18:	6819      	ldreq	r1, [r3, #0]
 8014c1a:	685b      	ldreq	r3, [r3, #4]
 8014c1c:	6063      	str	r3, [r4, #4]
 8014c1e:	bf04      	itt	eq
 8014c20:	1809      	addeq	r1, r1, r0
 8014c22:	6021      	streq	r1, [r4, #0]
 8014c24:	6054      	str	r4, [r2, #4]
 8014c26:	e7ca      	b.n	8014bbe <_free_r+0x22>
 8014c28:	bd38      	pop	{r3, r4, r5, pc}
 8014c2a:	bf00      	nop
 8014c2c:	2400602c 	.word	0x2400602c

08014c30 <rshift>:
 8014c30:	6903      	ldr	r3, [r0, #16]
 8014c32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014c36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c3a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014c3e:	f100 0414 	add.w	r4, r0, #20
 8014c42:	dd45      	ble.n	8014cd0 <rshift+0xa0>
 8014c44:	f011 011f 	ands.w	r1, r1, #31
 8014c48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014c4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014c50:	d10c      	bne.n	8014c6c <rshift+0x3c>
 8014c52:	f100 0710 	add.w	r7, r0, #16
 8014c56:	4629      	mov	r1, r5
 8014c58:	42b1      	cmp	r1, r6
 8014c5a:	d334      	bcc.n	8014cc6 <rshift+0x96>
 8014c5c:	1a9b      	subs	r3, r3, r2
 8014c5e:	009b      	lsls	r3, r3, #2
 8014c60:	1eea      	subs	r2, r5, #3
 8014c62:	4296      	cmp	r6, r2
 8014c64:	bf38      	it	cc
 8014c66:	2300      	movcc	r3, #0
 8014c68:	4423      	add	r3, r4
 8014c6a:	e015      	b.n	8014c98 <rshift+0x68>
 8014c6c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014c70:	f1c1 0820 	rsb	r8, r1, #32
 8014c74:	40cf      	lsrs	r7, r1
 8014c76:	f105 0e04 	add.w	lr, r5, #4
 8014c7a:	46a1      	mov	r9, r4
 8014c7c:	4576      	cmp	r6, lr
 8014c7e:	46f4      	mov	ip, lr
 8014c80:	d815      	bhi.n	8014cae <rshift+0x7e>
 8014c82:	1a9a      	subs	r2, r3, r2
 8014c84:	0092      	lsls	r2, r2, #2
 8014c86:	3a04      	subs	r2, #4
 8014c88:	3501      	adds	r5, #1
 8014c8a:	42ae      	cmp	r6, r5
 8014c8c:	bf38      	it	cc
 8014c8e:	2200      	movcc	r2, #0
 8014c90:	18a3      	adds	r3, r4, r2
 8014c92:	50a7      	str	r7, [r4, r2]
 8014c94:	b107      	cbz	r7, 8014c98 <rshift+0x68>
 8014c96:	3304      	adds	r3, #4
 8014c98:	1b1a      	subs	r2, r3, r4
 8014c9a:	42a3      	cmp	r3, r4
 8014c9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014ca0:	bf08      	it	eq
 8014ca2:	2300      	moveq	r3, #0
 8014ca4:	6102      	str	r2, [r0, #16]
 8014ca6:	bf08      	it	eq
 8014ca8:	6143      	streq	r3, [r0, #20]
 8014caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014cae:	f8dc c000 	ldr.w	ip, [ip]
 8014cb2:	fa0c fc08 	lsl.w	ip, ip, r8
 8014cb6:	ea4c 0707 	orr.w	r7, ip, r7
 8014cba:	f849 7b04 	str.w	r7, [r9], #4
 8014cbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014cc2:	40cf      	lsrs	r7, r1
 8014cc4:	e7da      	b.n	8014c7c <rshift+0x4c>
 8014cc6:	f851 cb04 	ldr.w	ip, [r1], #4
 8014cca:	f847 cf04 	str.w	ip, [r7, #4]!
 8014cce:	e7c3      	b.n	8014c58 <rshift+0x28>
 8014cd0:	4623      	mov	r3, r4
 8014cd2:	e7e1      	b.n	8014c98 <rshift+0x68>

08014cd4 <__hexdig_fun>:
 8014cd4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014cd8:	2b09      	cmp	r3, #9
 8014cda:	d802      	bhi.n	8014ce2 <__hexdig_fun+0xe>
 8014cdc:	3820      	subs	r0, #32
 8014cde:	b2c0      	uxtb	r0, r0
 8014ce0:	4770      	bx	lr
 8014ce2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014ce6:	2b05      	cmp	r3, #5
 8014ce8:	d801      	bhi.n	8014cee <__hexdig_fun+0x1a>
 8014cea:	3847      	subs	r0, #71	@ 0x47
 8014cec:	e7f7      	b.n	8014cde <__hexdig_fun+0xa>
 8014cee:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014cf2:	2b05      	cmp	r3, #5
 8014cf4:	d801      	bhi.n	8014cfa <__hexdig_fun+0x26>
 8014cf6:	3827      	subs	r0, #39	@ 0x27
 8014cf8:	e7f1      	b.n	8014cde <__hexdig_fun+0xa>
 8014cfa:	2000      	movs	r0, #0
 8014cfc:	4770      	bx	lr
	...

08014d00 <__gethex>:
 8014d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d04:	b085      	sub	sp, #20
 8014d06:	468a      	mov	sl, r1
 8014d08:	9302      	str	r3, [sp, #8]
 8014d0a:	680b      	ldr	r3, [r1, #0]
 8014d0c:	9001      	str	r0, [sp, #4]
 8014d0e:	4690      	mov	r8, r2
 8014d10:	1c9c      	adds	r4, r3, #2
 8014d12:	46a1      	mov	r9, r4
 8014d14:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014d18:	2830      	cmp	r0, #48	@ 0x30
 8014d1a:	d0fa      	beq.n	8014d12 <__gethex+0x12>
 8014d1c:	eba9 0303 	sub.w	r3, r9, r3
 8014d20:	f1a3 0b02 	sub.w	fp, r3, #2
 8014d24:	f7ff ffd6 	bl	8014cd4 <__hexdig_fun>
 8014d28:	4605      	mov	r5, r0
 8014d2a:	2800      	cmp	r0, #0
 8014d2c:	d168      	bne.n	8014e00 <__gethex+0x100>
 8014d2e:	49a0      	ldr	r1, [pc, #640]	@ (8014fb0 <__gethex+0x2b0>)
 8014d30:	2201      	movs	r2, #1
 8014d32:	4648      	mov	r0, r9
 8014d34:	f7ff f8aa 	bl	8013e8c <strncmp>
 8014d38:	4607      	mov	r7, r0
 8014d3a:	2800      	cmp	r0, #0
 8014d3c:	d167      	bne.n	8014e0e <__gethex+0x10e>
 8014d3e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014d42:	4626      	mov	r6, r4
 8014d44:	f7ff ffc6 	bl	8014cd4 <__hexdig_fun>
 8014d48:	2800      	cmp	r0, #0
 8014d4a:	d062      	beq.n	8014e12 <__gethex+0x112>
 8014d4c:	4623      	mov	r3, r4
 8014d4e:	7818      	ldrb	r0, [r3, #0]
 8014d50:	2830      	cmp	r0, #48	@ 0x30
 8014d52:	4699      	mov	r9, r3
 8014d54:	f103 0301 	add.w	r3, r3, #1
 8014d58:	d0f9      	beq.n	8014d4e <__gethex+0x4e>
 8014d5a:	f7ff ffbb 	bl	8014cd4 <__hexdig_fun>
 8014d5e:	fab0 f580 	clz	r5, r0
 8014d62:	096d      	lsrs	r5, r5, #5
 8014d64:	f04f 0b01 	mov.w	fp, #1
 8014d68:	464a      	mov	r2, r9
 8014d6a:	4616      	mov	r6, r2
 8014d6c:	3201      	adds	r2, #1
 8014d6e:	7830      	ldrb	r0, [r6, #0]
 8014d70:	f7ff ffb0 	bl	8014cd4 <__hexdig_fun>
 8014d74:	2800      	cmp	r0, #0
 8014d76:	d1f8      	bne.n	8014d6a <__gethex+0x6a>
 8014d78:	498d      	ldr	r1, [pc, #564]	@ (8014fb0 <__gethex+0x2b0>)
 8014d7a:	2201      	movs	r2, #1
 8014d7c:	4630      	mov	r0, r6
 8014d7e:	f7ff f885 	bl	8013e8c <strncmp>
 8014d82:	2800      	cmp	r0, #0
 8014d84:	d13f      	bne.n	8014e06 <__gethex+0x106>
 8014d86:	b944      	cbnz	r4, 8014d9a <__gethex+0x9a>
 8014d88:	1c74      	adds	r4, r6, #1
 8014d8a:	4622      	mov	r2, r4
 8014d8c:	4616      	mov	r6, r2
 8014d8e:	3201      	adds	r2, #1
 8014d90:	7830      	ldrb	r0, [r6, #0]
 8014d92:	f7ff ff9f 	bl	8014cd4 <__hexdig_fun>
 8014d96:	2800      	cmp	r0, #0
 8014d98:	d1f8      	bne.n	8014d8c <__gethex+0x8c>
 8014d9a:	1ba4      	subs	r4, r4, r6
 8014d9c:	00a7      	lsls	r7, r4, #2
 8014d9e:	7833      	ldrb	r3, [r6, #0]
 8014da0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014da4:	2b50      	cmp	r3, #80	@ 0x50
 8014da6:	d13e      	bne.n	8014e26 <__gethex+0x126>
 8014da8:	7873      	ldrb	r3, [r6, #1]
 8014daa:	2b2b      	cmp	r3, #43	@ 0x2b
 8014dac:	d033      	beq.n	8014e16 <__gethex+0x116>
 8014dae:	2b2d      	cmp	r3, #45	@ 0x2d
 8014db0:	d034      	beq.n	8014e1c <__gethex+0x11c>
 8014db2:	1c71      	adds	r1, r6, #1
 8014db4:	2400      	movs	r4, #0
 8014db6:	7808      	ldrb	r0, [r1, #0]
 8014db8:	f7ff ff8c 	bl	8014cd4 <__hexdig_fun>
 8014dbc:	1e43      	subs	r3, r0, #1
 8014dbe:	b2db      	uxtb	r3, r3
 8014dc0:	2b18      	cmp	r3, #24
 8014dc2:	d830      	bhi.n	8014e26 <__gethex+0x126>
 8014dc4:	f1a0 0210 	sub.w	r2, r0, #16
 8014dc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014dcc:	f7ff ff82 	bl	8014cd4 <__hexdig_fun>
 8014dd0:	f100 3cff 	add.w	ip, r0, #4294967295
 8014dd4:	fa5f fc8c 	uxtb.w	ip, ip
 8014dd8:	f1bc 0f18 	cmp.w	ip, #24
 8014ddc:	f04f 030a 	mov.w	r3, #10
 8014de0:	d91e      	bls.n	8014e20 <__gethex+0x120>
 8014de2:	b104      	cbz	r4, 8014de6 <__gethex+0xe6>
 8014de4:	4252      	negs	r2, r2
 8014de6:	4417      	add	r7, r2
 8014de8:	f8ca 1000 	str.w	r1, [sl]
 8014dec:	b1ed      	cbz	r5, 8014e2a <__gethex+0x12a>
 8014dee:	f1bb 0f00 	cmp.w	fp, #0
 8014df2:	bf0c      	ite	eq
 8014df4:	2506      	moveq	r5, #6
 8014df6:	2500      	movne	r5, #0
 8014df8:	4628      	mov	r0, r5
 8014dfa:	b005      	add	sp, #20
 8014dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e00:	2500      	movs	r5, #0
 8014e02:	462c      	mov	r4, r5
 8014e04:	e7b0      	b.n	8014d68 <__gethex+0x68>
 8014e06:	2c00      	cmp	r4, #0
 8014e08:	d1c7      	bne.n	8014d9a <__gethex+0x9a>
 8014e0a:	4627      	mov	r7, r4
 8014e0c:	e7c7      	b.n	8014d9e <__gethex+0x9e>
 8014e0e:	464e      	mov	r6, r9
 8014e10:	462f      	mov	r7, r5
 8014e12:	2501      	movs	r5, #1
 8014e14:	e7c3      	b.n	8014d9e <__gethex+0x9e>
 8014e16:	2400      	movs	r4, #0
 8014e18:	1cb1      	adds	r1, r6, #2
 8014e1a:	e7cc      	b.n	8014db6 <__gethex+0xb6>
 8014e1c:	2401      	movs	r4, #1
 8014e1e:	e7fb      	b.n	8014e18 <__gethex+0x118>
 8014e20:	fb03 0002 	mla	r0, r3, r2, r0
 8014e24:	e7ce      	b.n	8014dc4 <__gethex+0xc4>
 8014e26:	4631      	mov	r1, r6
 8014e28:	e7de      	b.n	8014de8 <__gethex+0xe8>
 8014e2a:	eba6 0309 	sub.w	r3, r6, r9
 8014e2e:	3b01      	subs	r3, #1
 8014e30:	4629      	mov	r1, r5
 8014e32:	2b07      	cmp	r3, #7
 8014e34:	dc0a      	bgt.n	8014e4c <__gethex+0x14c>
 8014e36:	9801      	ldr	r0, [sp, #4]
 8014e38:	f000 fafc 	bl	8015434 <_Balloc>
 8014e3c:	4604      	mov	r4, r0
 8014e3e:	b940      	cbnz	r0, 8014e52 <__gethex+0x152>
 8014e40:	4b5c      	ldr	r3, [pc, #368]	@ (8014fb4 <__gethex+0x2b4>)
 8014e42:	4602      	mov	r2, r0
 8014e44:	21e4      	movs	r1, #228	@ 0xe4
 8014e46:	485c      	ldr	r0, [pc, #368]	@ (8014fb8 <__gethex+0x2b8>)
 8014e48:	f001 f9de 	bl	8016208 <__assert_func>
 8014e4c:	3101      	adds	r1, #1
 8014e4e:	105b      	asrs	r3, r3, #1
 8014e50:	e7ef      	b.n	8014e32 <__gethex+0x132>
 8014e52:	f100 0a14 	add.w	sl, r0, #20
 8014e56:	2300      	movs	r3, #0
 8014e58:	4655      	mov	r5, sl
 8014e5a:	469b      	mov	fp, r3
 8014e5c:	45b1      	cmp	r9, r6
 8014e5e:	d337      	bcc.n	8014ed0 <__gethex+0x1d0>
 8014e60:	f845 bb04 	str.w	fp, [r5], #4
 8014e64:	eba5 050a 	sub.w	r5, r5, sl
 8014e68:	10ad      	asrs	r5, r5, #2
 8014e6a:	6125      	str	r5, [r4, #16]
 8014e6c:	4658      	mov	r0, fp
 8014e6e:	f000 fbd3 	bl	8015618 <__hi0bits>
 8014e72:	016d      	lsls	r5, r5, #5
 8014e74:	f8d8 6000 	ldr.w	r6, [r8]
 8014e78:	1a2d      	subs	r5, r5, r0
 8014e7a:	42b5      	cmp	r5, r6
 8014e7c:	dd54      	ble.n	8014f28 <__gethex+0x228>
 8014e7e:	1bad      	subs	r5, r5, r6
 8014e80:	4629      	mov	r1, r5
 8014e82:	4620      	mov	r0, r4
 8014e84:	f000 ff64 	bl	8015d50 <__any_on>
 8014e88:	4681      	mov	r9, r0
 8014e8a:	b178      	cbz	r0, 8014eac <__gethex+0x1ac>
 8014e8c:	1e6b      	subs	r3, r5, #1
 8014e8e:	1159      	asrs	r1, r3, #5
 8014e90:	f003 021f 	and.w	r2, r3, #31
 8014e94:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014e98:	f04f 0901 	mov.w	r9, #1
 8014e9c:	fa09 f202 	lsl.w	r2, r9, r2
 8014ea0:	420a      	tst	r2, r1
 8014ea2:	d003      	beq.n	8014eac <__gethex+0x1ac>
 8014ea4:	454b      	cmp	r3, r9
 8014ea6:	dc36      	bgt.n	8014f16 <__gethex+0x216>
 8014ea8:	f04f 0902 	mov.w	r9, #2
 8014eac:	4629      	mov	r1, r5
 8014eae:	4620      	mov	r0, r4
 8014eb0:	f7ff febe 	bl	8014c30 <rshift>
 8014eb4:	442f      	add	r7, r5
 8014eb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014eba:	42bb      	cmp	r3, r7
 8014ebc:	da42      	bge.n	8014f44 <__gethex+0x244>
 8014ebe:	9801      	ldr	r0, [sp, #4]
 8014ec0:	4621      	mov	r1, r4
 8014ec2:	f000 faf7 	bl	80154b4 <_Bfree>
 8014ec6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014ec8:	2300      	movs	r3, #0
 8014eca:	6013      	str	r3, [r2, #0]
 8014ecc:	25a3      	movs	r5, #163	@ 0xa3
 8014ece:	e793      	b.n	8014df8 <__gethex+0xf8>
 8014ed0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014ed4:	2a2e      	cmp	r2, #46	@ 0x2e
 8014ed6:	d012      	beq.n	8014efe <__gethex+0x1fe>
 8014ed8:	2b20      	cmp	r3, #32
 8014eda:	d104      	bne.n	8014ee6 <__gethex+0x1e6>
 8014edc:	f845 bb04 	str.w	fp, [r5], #4
 8014ee0:	f04f 0b00 	mov.w	fp, #0
 8014ee4:	465b      	mov	r3, fp
 8014ee6:	7830      	ldrb	r0, [r6, #0]
 8014ee8:	9303      	str	r3, [sp, #12]
 8014eea:	f7ff fef3 	bl	8014cd4 <__hexdig_fun>
 8014eee:	9b03      	ldr	r3, [sp, #12]
 8014ef0:	f000 000f 	and.w	r0, r0, #15
 8014ef4:	4098      	lsls	r0, r3
 8014ef6:	ea4b 0b00 	orr.w	fp, fp, r0
 8014efa:	3304      	adds	r3, #4
 8014efc:	e7ae      	b.n	8014e5c <__gethex+0x15c>
 8014efe:	45b1      	cmp	r9, r6
 8014f00:	d8ea      	bhi.n	8014ed8 <__gethex+0x1d8>
 8014f02:	492b      	ldr	r1, [pc, #172]	@ (8014fb0 <__gethex+0x2b0>)
 8014f04:	9303      	str	r3, [sp, #12]
 8014f06:	2201      	movs	r2, #1
 8014f08:	4630      	mov	r0, r6
 8014f0a:	f7fe ffbf 	bl	8013e8c <strncmp>
 8014f0e:	9b03      	ldr	r3, [sp, #12]
 8014f10:	2800      	cmp	r0, #0
 8014f12:	d1e1      	bne.n	8014ed8 <__gethex+0x1d8>
 8014f14:	e7a2      	b.n	8014e5c <__gethex+0x15c>
 8014f16:	1ea9      	subs	r1, r5, #2
 8014f18:	4620      	mov	r0, r4
 8014f1a:	f000 ff19 	bl	8015d50 <__any_on>
 8014f1e:	2800      	cmp	r0, #0
 8014f20:	d0c2      	beq.n	8014ea8 <__gethex+0x1a8>
 8014f22:	f04f 0903 	mov.w	r9, #3
 8014f26:	e7c1      	b.n	8014eac <__gethex+0x1ac>
 8014f28:	da09      	bge.n	8014f3e <__gethex+0x23e>
 8014f2a:	1b75      	subs	r5, r6, r5
 8014f2c:	4621      	mov	r1, r4
 8014f2e:	9801      	ldr	r0, [sp, #4]
 8014f30:	462a      	mov	r2, r5
 8014f32:	f000 fcd7 	bl	80158e4 <__lshift>
 8014f36:	1b7f      	subs	r7, r7, r5
 8014f38:	4604      	mov	r4, r0
 8014f3a:	f100 0a14 	add.w	sl, r0, #20
 8014f3e:	f04f 0900 	mov.w	r9, #0
 8014f42:	e7b8      	b.n	8014eb6 <__gethex+0x1b6>
 8014f44:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014f48:	42bd      	cmp	r5, r7
 8014f4a:	dd6f      	ble.n	801502c <__gethex+0x32c>
 8014f4c:	1bed      	subs	r5, r5, r7
 8014f4e:	42ae      	cmp	r6, r5
 8014f50:	dc34      	bgt.n	8014fbc <__gethex+0x2bc>
 8014f52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014f56:	2b02      	cmp	r3, #2
 8014f58:	d022      	beq.n	8014fa0 <__gethex+0x2a0>
 8014f5a:	2b03      	cmp	r3, #3
 8014f5c:	d024      	beq.n	8014fa8 <__gethex+0x2a8>
 8014f5e:	2b01      	cmp	r3, #1
 8014f60:	d115      	bne.n	8014f8e <__gethex+0x28e>
 8014f62:	42ae      	cmp	r6, r5
 8014f64:	d113      	bne.n	8014f8e <__gethex+0x28e>
 8014f66:	2e01      	cmp	r6, #1
 8014f68:	d10b      	bne.n	8014f82 <__gethex+0x282>
 8014f6a:	9a02      	ldr	r2, [sp, #8]
 8014f6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014f70:	6013      	str	r3, [r2, #0]
 8014f72:	2301      	movs	r3, #1
 8014f74:	6123      	str	r3, [r4, #16]
 8014f76:	f8ca 3000 	str.w	r3, [sl]
 8014f7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f7c:	2562      	movs	r5, #98	@ 0x62
 8014f7e:	601c      	str	r4, [r3, #0]
 8014f80:	e73a      	b.n	8014df8 <__gethex+0xf8>
 8014f82:	1e71      	subs	r1, r6, #1
 8014f84:	4620      	mov	r0, r4
 8014f86:	f000 fee3 	bl	8015d50 <__any_on>
 8014f8a:	2800      	cmp	r0, #0
 8014f8c:	d1ed      	bne.n	8014f6a <__gethex+0x26a>
 8014f8e:	9801      	ldr	r0, [sp, #4]
 8014f90:	4621      	mov	r1, r4
 8014f92:	f000 fa8f 	bl	80154b4 <_Bfree>
 8014f96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014f98:	2300      	movs	r3, #0
 8014f9a:	6013      	str	r3, [r2, #0]
 8014f9c:	2550      	movs	r5, #80	@ 0x50
 8014f9e:	e72b      	b.n	8014df8 <__gethex+0xf8>
 8014fa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d1f3      	bne.n	8014f8e <__gethex+0x28e>
 8014fa6:	e7e0      	b.n	8014f6a <__gethex+0x26a>
 8014fa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d1dd      	bne.n	8014f6a <__gethex+0x26a>
 8014fae:	e7ee      	b.n	8014f8e <__gethex+0x28e>
 8014fb0:	08016970 	.word	0x08016970
 8014fb4:	08016b81 	.word	0x08016b81
 8014fb8:	08016b92 	.word	0x08016b92
 8014fbc:	1e6f      	subs	r7, r5, #1
 8014fbe:	f1b9 0f00 	cmp.w	r9, #0
 8014fc2:	d130      	bne.n	8015026 <__gethex+0x326>
 8014fc4:	b127      	cbz	r7, 8014fd0 <__gethex+0x2d0>
 8014fc6:	4639      	mov	r1, r7
 8014fc8:	4620      	mov	r0, r4
 8014fca:	f000 fec1 	bl	8015d50 <__any_on>
 8014fce:	4681      	mov	r9, r0
 8014fd0:	117a      	asrs	r2, r7, #5
 8014fd2:	2301      	movs	r3, #1
 8014fd4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014fd8:	f007 071f 	and.w	r7, r7, #31
 8014fdc:	40bb      	lsls	r3, r7
 8014fde:	4213      	tst	r3, r2
 8014fe0:	4629      	mov	r1, r5
 8014fe2:	4620      	mov	r0, r4
 8014fe4:	bf18      	it	ne
 8014fe6:	f049 0902 	orrne.w	r9, r9, #2
 8014fea:	f7ff fe21 	bl	8014c30 <rshift>
 8014fee:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014ff2:	1b76      	subs	r6, r6, r5
 8014ff4:	2502      	movs	r5, #2
 8014ff6:	f1b9 0f00 	cmp.w	r9, #0
 8014ffa:	d047      	beq.n	801508c <__gethex+0x38c>
 8014ffc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015000:	2b02      	cmp	r3, #2
 8015002:	d015      	beq.n	8015030 <__gethex+0x330>
 8015004:	2b03      	cmp	r3, #3
 8015006:	d017      	beq.n	8015038 <__gethex+0x338>
 8015008:	2b01      	cmp	r3, #1
 801500a:	d109      	bne.n	8015020 <__gethex+0x320>
 801500c:	f019 0f02 	tst.w	r9, #2
 8015010:	d006      	beq.n	8015020 <__gethex+0x320>
 8015012:	f8da 3000 	ldr.w	r3, [sl]
 8015016:	ea49 0903 	orr.w	r9, r9, r3
 801501a:	f019 0f01 	tst.w	r9, #1
 801501e:	d10e      	bne.n	801503e <__gethex+0x33e>
 8015020:	f045 0510 	orr.w	r5, r5, #16
 8015024:	e032      	b.n	801508c <__gethex+0x38c>
 8015026:	f04f 0901 	mov.w	r9, #1
 801502a:	e7d1      	b.n	8014fd0 <__gethex+0x2d0>
 801502c:	2501      	movs	r5, #1
 801502e:	e7e2      	b.n	8014ff6 <__gethex+0x2f6>
 8015030:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015032:	f1c3 0301 	rsb	r3, r3, #1
 8015036:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801503a:	2b00      	cmp	r3, #0
 801503c:	d0f0      	beq.n	8015020 <__gethex+0x320>
 801503e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015042:	f104 0314 	add.w	r3, r4, #20
 8015046:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801504a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801504e:	f04f 0c00 	mov.w	ip, #0
 8015052:	4618      	mov	r0, r3
 8015054:	f853 2b04 	ldr.w	r2, [r3], #4
 8015058:	f1b2 3fff 	cmp.w	r2, #4294967295
 801505c:	d01b      	beq.n	8015096 <__gethex+0x396>
 801505e:	3201      	adds	r2, #1
 8015060:	6002      	str	r2, [r0, #0]
 8015062:	2d02      	cmp	r5, #2
 8015064:	f104 0314 	add.w	r3, r4, #20
 8015068:	d13c      	bne.n	80150e4 <__gethex+0x3e4>
 801506a:	f8d8 2000 	ldr.w	r2, [r8]
 801506e:	3a01      	subs	r2, #1
 8015070:	42b2      	cmp	r2, r6
 8015072:	d109      	bne.n	8015088 <__gethex+0x388>
 8015074:	1171      	asrs	r1, r6, #5
 8015076:	2201      	movs	r2, #1
 8015078:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801507c:	f006 061f 	and.w	r6, r6, #31
 8015080:	fa02 f606 	lsl.w	r6, r2, r6
 8015084:	421e      	tst	r6, r3
 8015086:	d13a      	bne.n	80150fe <__gethex+0x3fe>
 8015088:	f045 0520 	orr.w	r5, r5, #32
 801508c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801508e:	601c      	str	r4, [r3, #0]
 8015090:	9b02      	ldr	r3, [sp, #8]
 8015092:	601f      	str	r7, [r3, #0]
 8015094:	e6b0      	b.n	8014df8 <__gethex+0xf8>
 8015096:	4299      	cmp	r1, r3
 8015098:	f843 cc04 	str.w	ip, [r3, #-4]
 801509c:	d8d9      	bhi.n	8015052 <__gethex+0x352>
 801509e:	68a3      	ldr	r3, [r4, #8]
 80150a0:	459b      	cmp	fp, r3
 80150a2:	db17      	blt.n	80150d4 <__gethex+0x3d4>
 80150a4:	6861      	ldr	r1, [r4, #4]
 80150a6:	9801      	ldr	r0, [sp, #4]
 80150a8:	3101      	adds	r1, #1
 80150aa:	f000 f9c3 	bl	8015434 <_Balloc>
 80150ae:	4681      	mov	r9, r0
 80150b0:	b918      	cbnz	r0, 80150ba <__gethex+0x3ba>
 80150b2:	4b1a      	ldr	r3, [pc, #104]	@ (801511c <__gethex+0x41c>)
 80150b4:	4602      	mov	r2, r0
 80150b6:	2184      	movs	r1, #132	@ 0x84
 80150b8:	e6c5      	b.n	8014e46 <__gethex+0x146>
 80150ba:	6922      	ldr	r2, [r4, #16]
 80150bc:	3202      	adds	r2, #2
 80150be:	f104 010c 	add.w	r1, r4, #12
 80150c2:	0092      	lsls	r2, r2, #2
 80150c4:	300c      	adds	r0, #12
 80150c6:	f7fe ff72 	bl	8013fae <memcpy>
 80150ca:	4621      	mov	r1, r4
 80150cc:	9801      	ldr	r0, [sp, #4]
 80150ce:	f000 f9f1 	bl	80154b4 <_Bfree>
 80150d2:	464c      	mov	r4, r9
 80150d4:	6923      	ldr	r3, [r4, #16]
 80150d6:	1c5a      	adds	r2, r3, #1
 80150d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80150dc:	6122      	str	r2, [r4, #16]
 80150de:	2201      	movs	r2, #1
 80150e0:	615a      	str	r2, [r3, #20]
 80150e2:	e7be      	b.n	8015062 <__gethex+0x362>
 80150e4:	6922      	ldr	r2, [r4, #16]
 80150e6:	455a      	cmp	r2, fp
 80150e8:	dd0b      	ble.n	8015102 <__gethex+0x402>
 80150ea:	2101      	movs	r1, #1
 80150ec:	4620      	mov	r0, r4
 80150ee:	f7ff fd9f 	bl	8014c30 <rshift>
 80150f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80150f6:	3701      	adds	r7, #1
 80150f8:	42bb      	cmp	r3, r7
 80150fa:	f6ff aee0 	blt.w	8014ebe <__gethex+0x1be>
 80150fe:	2501      	movs	r5, #1
 8015100:	e7c2      	b.n	8015088 <__gethex+0x388>
 8015102:	f016 061f 	ands.w	r6, r6, #31
 8015106:	d0fa      	beq.n	80150fe <__gethex+0x3fe>
 8015108:	4453      	add	r3, sl
 801510a:	f1c6 0620 	rsb	r6, r6, #32
 801510e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015112:	f000 fa81 	bl	8015618 <__hi0bits>
 8015116:	42b0      	cmp	r0, r6
 8015118:	dbe7      	blt.n	80150ea <__gethex+0x3ea>
 801511a:	e7f0      	b.n	80150fe <__gethex+0x3fe>
 801511c:	08016b81 	.word	0x08016b81

08015120 <L_shift>:
 8015120:	f1c2 0208 	rsb	r2, r2, #8
 8015124:	0092      	lsls	r2, r2, #2
 8015126:	b570      	push	{r4, r5, r6, lr}
 8015128:	f1c2 0620 	rsb	r6, r2, #32
 801512c:	6843      	ldr	r3, [r0, #4]
 801512e:	6804      	ldr	r4, [r0, #0]
 8015130:	fa03 f506 	lsl.w	r5, r3, r6
 8015134:	432c      	orrs	r4, r5
 8015136:	40d3      	lsrs	r3, r2
 8015138:	6004      	str	r4, [r0, #0]
 801513a:	f840 3f04 	str.w	r3, [r0, #4]!
 801513e:	4288      	cmp	r0, r1
 8015140:	d3f4      	bcc.n	801512c <L_shift+0xc>
 8015142:	bd70      	pop	{r4, r5, r6, pc}

08015144 <__match>:
 8015144:	b530      	push	{r4, r5, lr}
 8015146:	6803      	ldr	r3, [r0, #0]
 8015148:	3301      	adds	r3, #1
 801514a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801514e:	b914      	cbnz	r4, 8015156 <__match+0x12>
 8015150:	6003      	str	r3, [r0, #0]
 8015152:	2001      	movs	r0, #1
 8015154:	bd30      	pop	{r4, r5, pc}
 8015156:	f813 2b01 	ldrb.w	r2, [r3], #1
 801515a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801515e:	2d19      	cmp	r5, #25
 8015160:	bf98      	it	ls
 8015162:	3220      	addls	r2, #32
 8015164:	42a2      	cmp	r2, r4
 8015166:	d0f0      	beq.n	801514a <__match+0x6>
 8015168:	2000      	movs	r0, #0
 801516a:	e7f3      	b.n	8015154 <__match+0x10>

0801516c <__hexnan>:
 801516c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015170:	680b      	ldr	r3, [r1, #0]
 8015172:	6801      	ldr	r1, [r0, #0]
 8015174:	115e      	asrs	r6, r3, #5
 8015176:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801517a:	f013 031f 	ands.w	r3, r3, #31
 801517e:	b087      	sub	sp, #28
 8015180:	bf18      	it	ne
 8015182:	3604      	addne	r6, #4
 8015184:	2500      	movs	r5, #0
 8015186:	1f37      	subs	r7, r6, #4
 8015188:	4682      	mov	sl, r0
 801518a:	4690      	mov	r8, r2
 801518c:	9301      	str	r3, [sp, #4]
 801518e:	f846 5c04 	str.w	r5, [r6, #-4]
 8015192:	46b9      	mov	r9, r7
 8015194:	463c      	mov	r4, r7
 8015196:	9502      	str	r5, [sp, #8]
 8015198:	46ab      	mov	fp, r5
 801519a:	784a      	ldrb	r2, [r1, #1]
 801519c:	1c4b      	adds	r3, r1, #1
 801519e:	9303      	str	r3, [sp, #12]
 80151a0:	b342      	cbz	r2, 80151f4 <__hexnan+0x88>
 80151a2:	4610      	mov	r0, r2
 80151a4:	9105      	str	r1, [sp, #20]
 80151a6:	9204      	str	r2, [sp, #16]
 80151a8:	f7ff fd94 	bl	8014cd4 <__hexdig_fun>
 80151ac:	2800      	cmp	r0, #0
 80151ae:	d151      	bne.n	8015254 <__hexnan+0xe8>
 80151b0:	9a04      	ldr	r2, [sp, #16]
 80151b2:	9905      	ldr	r1, [sp, #20]
 80151b4:	2a20      	cmp	r2, #32
 80151b6:	d818      	bhi.n	80151ea <__hexnan+0x7e>
 80151b8:	9b02      	ldr	r3, [sp, #8]
 80151ba:	459b      	cmp	fp, r3
 80151bc:	dd13      	ble.n	80151e6 <__hexnan+0x7a>
 80151be:	454c      	cmp	r4, r9
 80151c0:	d206      	bcs.n	80151d0 <__hexnan+0x64>
 80151c2:	2d07      	cmp	r5, #7
 80151c4:	dc04      	bgt.n	80151d0 <__hexnan+0x64>
 80151c6:	462a      	mov	r2, r5
 80151c8:	4649      	mov	r1, r9
 80151ca:	4620      	mov	r0, r4
 80151cc:	f7ff ffa8 	bl	8015120 <L_shift>
 80151d0:	4544      	cmp	r4, r8
 80151d2:	d952      	bls.n	801527a <__hexnan+0x10e>
 80151d4:	2300      	movs	r3, #0
 80151d6:	f1a4 0904 	sub.w	r9, r4, #4
 80151da:	f844 3c04 	str.w	r3, [r4, #-4]
 80151de:	f8cd b008 	str.w	fp, [sp, #8]
 80151e2:	464c      	mov	r4, r9
 80151e4:	461d      	mov	r5, r3
 80151e6:	9903      	ldr	r1, [sp, #12]
 80151e8:	e7d7      	b.n	801519a <__hexnan+0x2e>
 80151ea:	2a29      	cmp	r2, #41	@ 0x29
 80151ec:	d157      	bne.n	801529e <__hexnan+0x132>
 80151ee:	3102      	adds	r1, #2
 80151f0:	f8ca 1000 	str.w	r1, [sl]
 80151f4:	f1bb 0f00 	cmp.w	fp, #0
 80151f8:	d051      	beq.n	801529e <__hexnan+0x132>
 80151fa:	454c      	cmp	r4, r9
 80151fc:	d206      	bcs.n	801520c <__hexnan+0xa0>
 80151fe:	2d07      	cmp	r5, #7
 8015200:	dc04      	bgt.n	801520c <__hexnan+0xa0>
 8015202:	462a      	mov	r2, r5
 8015204:	4649      	mov	r1, r9
 8015206:	4620      	mov	r0, r4
 8015208:	f7ff ff8a 	bl	8015120 <L_shift>
 801520c:	4544      	cmp	r4, r8
 801520e:	d936      	bls.n	801527e <__hexnan+0x112>
 8015210:	f1a8 0204 	sub.w	r2, r8, #4
 8015214:	4623      	mov	r3, r4
 8015216:	f853 1b04 	ldr.w	r1, [r3], #4
 801521a:	f842 1f04 	str.w	r1, [r2, #4]!
 801521e:	429f      	cmp	r7, r3
 8015220:	d2f9      	bcs.n	8015216 <__hexnan+0xaa>
 8015222:	1b3b      	subs	r3, r7, r4
 8015224:	f023 0303 	bic.w	r3, r3, #3
 8015228:	3304      	adds	r3, #4
 801522a:	3401      	adds	r4, #1
 801522c:	3e03      	subs	r6, #3
 801522e:	42b4      	cmp	r4, r6
 8015230:	bf88      	it	hi
 8015232:	2304      	movhi	r3, #4
 8015234:	4443      	add	r3, r8
 8015236:	2200      	movs	r2, #0
 8015238:	f843 2b04 	str.w	r2, [r3], #4
 801523c:	429f      	cmp	r7, r3
 801523e:	d2fb      	bcs.n	8015238 <__hexnan+0xcc>
 8015240:	683b      	ldr	r3, [r7, #0]
 8015242:	b91b      	cbnz	r3, 801524c <__hexnan+0xe0>
 8015244:	4547      	cmp	r7, r8
 8015246:	d128      	bne.n	801529a <__hexnan+0x12e>
 8015248:	2301      	movs	r3, #1
 801524a:	603b      	str	r3, [r7, #0]
 801524c:	2005      	movs	r0, #5
 801524e:	b007      	add	sp, #28
 8015250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015254:	3501      	adds	r5, #1
 8015256:	2d08      	cmp	r5, #8
 8015258:	f10b 0b01 	add.w	fp, fp, #1
 801525c:	dd06      	ble.n	801526c <__hexnan+0x100>
 801525e:	4544      	cmp	r4, r8
 8015260:	d9c1      	bls.n	80151e6 <__hexnan+0x7a>
 8015262:	2300      	movs	r3, #0
 8015264:	f844 3c04 	str.w	r3, [r4, #-4]
 8015268:	2501      	movs	r5, #1
 801526a:	3c04      	subs	r4, #4
 801526c:	6822      	ldr	r2, [r4, #0]
 801526e:	f000 000f 	and.w	r0, r0, #15
 8015272:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015276:	6020      	str	r0, [r4, #0]
 8015278:	e7b5      	b.n	80151e6 <__hexnan+0x7a>
 801527a:	2508      	movs	r5, #8
 801527c:	e7b3      	b.n	80151e6 <__hexnan+0x7a>
 801527e:	9b01      	ldr	r3, [sp, #4]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d0dd      	beq.n	8015240 <__hexnan+0xd4>
 8015284:	f1c3 0320 	rsb	r3, r3, #32
 8015288:	f04f 32ff 	mov.w	r2, #4294967295
 801528c:	40da      	lsrs	r2, r3
 801528e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015292:	4013      	ands	r3, r2
 8015294:	f846 3c04 	str.w	r3, [r6, #-4]
 8015298:	e7d2      	b.n	8015240 <__hexnan+0xd4>
 801529a:	3f04      	subs	r7, #4
 801529c:	e7d0      	b.n	8015240 <__hexnan+0xd4>
 801529e:	2004      	movs	r0, #4
 80152a0:	e7d5      	b.n	801524e <__hexnan+0xe2>
	...

080152a4 <malloc>:
 80152a4:	4b02      	ldr	r3, [pc, #8]	@ (80152b0 <malloc+0xc>)
 80152a6:	4601      	mov	r1, r0
 80152a8:	6818      	ldr	r0, [r3, #0]
 80152aa:	f000 b825 	b.w	80152f8 <_malloc_r>
 80152ae:	bf00      	nop
 80152b0:	2400027c 	.word	0x2400027c

080152b4 <sbrk_aligned>:
 80152b4:	b570      	push	{r4, r5, r6, lr}
 80152b6:	4e0f      	ldr	r6, [pc, #60]	@ (80152f4 <sbrk_aligned+0x40>)
 80152b8:	460c      	mov	r4, r1
 80152ba:	6831      	ldr	r1, [r6, #0]
 80152bc:	4605      	mov	r5, r0
 80152be:	b911      	cbnz	r1, 80152c6 <sbrk_aligned+0x12>
 80152c0:	f000 ff92 	bl	80161e8 <_sbrk_r>
 80152c4:	6030      	str	r0, [r6, #0]
 80152c6:	4621      	mov	r1, r4
 80152c8:	4628      	mov	r0, r5
 80152ca:	f000 ff8d 	bl	80161e8 <_sbrk_r>
 80152ce:	1c43      	adds	r3, r0, #1
 80152d0:	d103      	bne.n	80152da <sbrk_aligned+0x26>
 80152d2:	f04f 34ff 	mov.w	r4, #4294967295
 80152d6:	4620      	mov	r0, r4
 80152d8:	bd70      	pop	{r4, r5, r6, pc}
 80152da:	1cc4      	adds	r4, r0, #3
 80152dc:	f024 0403 	bic.w	r4, r4, #3
 80152e0:	42a0      	cmp	r0, r4
 80152e2:	d0f8      	beq.n	80152d6 <sbrk_aligned+0x22>
 80152e4:	1a21      	subs	r1, r4, r0
 80152e6:	4628      	mov	r0, r5
 80152e8:	f000 ff7e 	bl	80161e8 <_sbrk_r>
 80152ec:	3001      	adds	r0, #1
 80152ee:	d1f2      	bne.n	80152d6 <sbrk_aligned+0x22>
 80152f0:	e7ef      	b.n	80152d2 <sbrk_aligned+0x1e>
 80152f2:	bf00      	nop
 80152f4:	24006028 	.word	0x24006028

080152f8 <_malloc_r>:
 80152f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152fc:	1ccd      	adds	r5, r1, #3
 80152fe:	f025 0503 	bic.w	r5, r5, #3
 8015302:	3508      	adds	r5, #8
 8015304:	2d0c      	cmp	r5, #12
 8015306:	bf38      	it	cc
 8015308:	250c      	movcc	r5, #12
 801530a:	2d00      	cmp	r5, #0
 801530c:	4606      	mov	r6, r0
 801530e:	db01      	blt.n	8015314 <_malloc_r+0x1c>
 8015310:	42a9      	cmp	r1, r5
 8015312:	d904      	bls.n	801531e <_malloc_r+0x26>
 8015314:	230c      	movs	r3, #12
 8015316:	6033      	str	r3, [r6, #0]
 8015318:	2000      	movs	r0, #0
 801531a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801531e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80153f4 <_malloc_r+0xfc>
 8015322:	f000 f87b 	bl	801541c <__malloc_lock>
 8015326:	f8d8 3000 	ldr.w	r3, [r8]
 801532a:	461c      	mov	r4, r3
 801532c:	bb44      	cbnz	r4, 8015380 <_malloc_r+0x88>
 801532e:	4629      	mov	r1, r5
 8015330:	4630      	mov	r0, r6
 8015332:	f7ff ffbf 	bl	80152b4 <sbrk_aligned>
 8015336:	1c43      	adds	r3, r0, #1
 8015338:	4604      	mov	r4, r0
 801533a:	d158      	bne.n	80153ee <_malloc_r+0xf6>
 801533c:	f8d8 4000 	ldr.w	r4, [r8]
 8015340:	4627      	mov	r7, r4
 8015342:	2f00      	cmp	r7, #0
 8015344:	d143      	bne.n	80153ce <_malloc_r+0xd6>
 8015346:	2c00      	cmp	r4, #0
 8015348:	d04b      	beq.n	80153e2 <_malloc_r+0xea>
 801534a:	6823      	ldr	r3, [r4, #0]
 801534c:	4639      	mov	r1, r7
 801534e:	4630      	mov	r0, r6
 8015350:	eb04 0903 	add.w	r9, r4, r3
 8015354:	f000 ff48 	bl	80161e8 <_sbrk_r>
 8015358:	4581      	cmp	r9, r0
 801535a:	d142      	bne.n	80153e2 <_malloc_r+0xea>
 801535c:	6821      	ldr	r1, [r4, #0]
 801535e:	1a6d      	subs	r5, r5, r1
 8015360:	4629      	mov	r1, r5
 8015362:	4630      	mov	r0, r6
 8015364:	f7ff ffa6 	bl	80152b4 <sbrk_aligned>
 8015368:	3001      	adds	r0, #1
 801536a:	d03a      	beq.n	80153e2 <_malloc_r+0xea>
 801536c:	6823      	ldr	r3, [r4, #0]
 801536e:	442b      	add	r3, r5
 8015370:	6023      	str	r3, [r4, #0]
 8015372:	f8d8 3000 	ldr.w	r3, [r8]
 8015376:	685a      	ldr	r2, [r3, #4]
 8015378:	bb62      	cbnz	r2, 80153d4 <_malloc_r+0xdc>
 801537a:	f8c8 7000 	str.w	r7, [r8]
 801537e:	e00f      	b.n	80153a0 <_malloc_r+0xa8>
 8015380:	6822      	ldr	r2, [r4, #0]
 8015382:	1b52      	subs	r2, r2, r5
 8015384:	d420      	bmi.n	80153c8 <_malloc_r+0xd0>
 8015386:	2a0b      	cmp	r2, #11
 8015388:	d917      	bls.n	80153ba <_malloc_r+0xc2>
 801538a:	1961      	adds	r1, r4, r5
 801538c:	42a3      	cmp	r3, r4
 801538e:	6025      	str	r5, [r4, #0]
 8015390:	bf18      	it	ne
 8015392:	6059      	strne	r1, [r3, #4]
 8015394:	6863      	ldr	r3, [r4, #4]
 8015396:	bf08      	it	eq
 8015398:	f8c8 1000 	streq.w	r1, [r8]
 801539c:	5162      	str	r2, [r4, r5]
 801539e:	604b      	str	r3, [r1, #4]
 80153a0:	4630      	mov	r0, r6
 80153a2:	f000 f841 	bl	8015428 <__malloc_unlock>
 80153a6:	f104 000b 	add.w	r0, r4, #11
 80153aa:	1d23      	adds	r3, r4, #4
 80153ac:	f020 0007 	bic.w	r0, r0, #7
 80153b0:	1ac2      	subs	r2, r0, r3
 80153b2:	bf1c      	itt	ne
 80153b4:	1a1b      	subne	r3, r3, r0
 80153b6:	50a3      	strne	r3, [r4, r2]
 80153b8:	e7af      	b.n	801531a <_malloc_r+0x22>
 80153ba:	6862      	ldr	r2, [r4, #4]
 80153bc:	42a3      	cmp	r3, r4
 80153be:	bf0c      	ite	eq
 80153c0:	f8c8 2000 	streq.w	r2, [r8]
 80153c4:	605a      	strne	r2, [r3, #4]
 80153c6:	e7eb      	b.n	80153a0 <_malloc_r+0xa8>
 80153c8:	4623      	mov	r3, r4
 80153ca:	6864      	ldr	r4, [r4, #4]
 80153cc:	e7ae      	b.n	801532c <_malloc_r+0x34>
 80153ce:	463c      	mov	r4, r7
 80153d0:	687f      	ldr	r7, [r7, #4]
 80153d2:	e7b6      	b.n	8015342 <_malloc_r+0x4a>
 80153d4:	461a      	mov	r2, r3
 80153d6:	685b      	ldr	r3, [r3, #4]
 80153d8:	42a3      	cmp	r3, r4
 80153da:	d1fb      	bne.n	80153d4 <_malloc_r+0xdc>
 80153dc:	2300      	movs	r3, #0
 80153de:	6053      	str	r3, [r2, #4]
 80153e0:	e7de      	b.n	80153a0 <_malloc_r+0xa8>
 80153e2:	230c      	movs	r3, #12
 80153e4:	6033      	str	r3, [r6, #0]
 80153e6:	4630      	mov	r0, r6
 80153e8:	f000 f81e 	bl	8015428 <__malloc_unlock>
 80153ec:	e794      	b.n	8015318 <_malloc_r+0x20>
 80153ee:	6005      	str	r5, [r0, #0]
 80153f0:	e7d6      	b.n	80153a0 <_malloc_r+0xa8>
 80153f2:	bf00      	nop
 80153f4:	2400602c 	.word	0x2400602c

080153f8 <__ascii_mbtowc>:
 80153f8:	b082      	sub	sp, #8
 80153fa:	b901      	cbnz	r1, 80153fe <__ascii_mbtowc+0x6>
 80153fc:	a901      	add	r1, sp, #4
 80153fe:	b142      	cbz	r2, 8015412 <__ascii_mbtowc+0x1a>
 8015400:	b14b      	cbz	r3, 8015416 <__ascii_mbtowc+0x1e>
 8015402:	7813      	ldrb	r3, [r2, #0]
 8015404:	600b      	str	r3, [r1, #0]
 8015406:	7812      	ldrb	r2, [r2, #0]
 8015408:	1e10      	subs	r0, r2, #0
 801540a:	bf18      	it	ne
 801540c:	2001      	movne	r0, #1
 801540e:	b002      	add	sp, #8
 8015410:	4770      	bx	lr
 8015412:	4610      	mov	r0, r2
 8015414:	e7fb      	b.n	801540e <__ascii_mbtowc+0x16>
 8015416:	f06f 0001 	mvn.w	r0, #1
 801541a:	e7f8      	b.n	801540e <__ascii_mbtowc+0x16>

0801541c <__malloc_lock>:
 801541c:	4801      	ldr	r0, [pc, #4]	@ (8015424 <__malloc_lock+0x8>)
 801541e:	f7fe bdbc 	b.w	8013f9a <__retarget_lock_acquire_recursive>
 8015422:	bf00      	nop
 8015424:	24006024 	.word	0x24006024

08015428 <__malloc_unlock>:
 8015428:	4801      	ldr	r0, [pc, #4]	@ (8015430 <__malloc_unlock+0x8>)
 801542a:	f7fe bdb7 	b.w	8013f9c <__retarget_lock_release_recursive>
 801542e:	bf00      	nop
 8015430:	24006024 	.word	0x24006024

08015434 <_Balloc>:
 8015434:	b570      	push	{r4, r5, r6, lr}
 8015436:	69c6      	ldr	r6, [r0, #28]
 8015438:	4604      	mov	r4, r0
 801543a:	460d      	mov	r5, r1
 801543c:	b976      	cbnz	r6, 801545c <_Balloc+0x28>
 801543e:	2010      	movs	r0, #16
 8015440:	f7ff ff30 	bl	80152a4 <malloc>
 8015444:	4602      	mov	r2, r0
 8015446:	61e0      	str	r0, [r4, #28]
 8015448:	b920      	cbnz	r0, 8015454 <_Balloc+0x20>
 801544a:	4b18      	ldr	r3, [pc, #96]	@ (80154ac <_Balloc+0x78>)
 801544c:	4818      	ldr	r0, [pc, #96]	@ (80154b0 <_Balloc+0x7c>)
 801544e:	216b      	movs	r1, #107	@ 0x6b
 8015450:	f000 feda 	bl	8016208 <__assert_func>
 8015454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015458:	6006      	str	r6, [r0, #0]
 801545a:	60c6      	str	r6, [r0, #12]
 801545c:	69e6      	ldr	r6, [r4, #28]
 801545e:	68f3      	ldr	r3, [r6, #12]
 8015460:	b183      	cbz	r3, 8015484 <_Balloc+0x50>
 8015462:	69e3      	ldr	r3, [r4, #28]
 8015464:	68db      	ldr	r3, [r3, #12]
 8015466:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801546a:	b9b8      	cbnz	r0, 801549c <_Balloc+0x68>
 801546c:	2101      	movs	r1, #1
 801546e:	fa01 f605 	lsl.w	r6, r1, r5
 8015472:	1d72      	adds	r2, r6, #5
 8015474:	0092      	lsls	r2, r2, #2
 8015476:	4620      	mov	r0, r4
 8015478:	f000 fee4 	bl	8016244 <_calloc_r>
 801547c:	b160      	cbz	r0, 8015498 <_Balloc+0x64>
 801547e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015482:	e00e      	b.n	80154a2 <_Balloc+0x6e>
 8015484:	2221      	movs	r2, #33	@ 0x21
 8015486:	2104      	movs	r1, #4
 8015488:	4620      	mov	r0, r4
 801548a:	f000 fedb 	bl	8016244 <_calloc_r>
 801548e:	69e3      	ldr	r3, [r4, #28]
 8015490:	60f0      	str	r0, [r6, #12]
 8015492:	68db      	ldr	r3, [r3, #12]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d1e4      	bne.n	8015462 <_Balloc+0x2e>
 8015498:	2000      	movs	r0, #0
 801549a:	bd70      	pop	{r4, r5, r6, pc}
 801549c:	6802      	ldr	r2, [r0, #0]
 801549e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80154a2:	2300      	movs	r3, #0
 80154a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80154a8:	e7f7      	b.n	801549a <_Balloc+0x66>
 80154aa:	bf00      	nop
 80154ac:	08016b12 	.word	0x08016b12
 80154b0:	08016bf2 	.word	0x08016bf2

080154b4 <_Bfree>:
 80154b4:	b570      	push	{r4, r5, r6, lr}
 80154b6:	69c6      	ldr	r6, [r0, #28]
 80154b8:	4605      	mov	r5, r0
 80154ba:	460c      	mov	r4, r1
 80154bc:	b976      	cbnz	r6, 80154dc <_Bfree+0x28>
 80154be:	2010      	movs	r0, #16
 80154c0:	f7ff fef0 	bl	80152a4 <malloc>
 80154c4:	4602      	mov	r2, r0
 80154c6:	61e8      	str	r0, [r5, #28]
 80154c8:	b920      	cbnz	r0, 80154d4 <_Bfree+0x20>
 80154ca:	4b09      	ldr	r3, [pc, #36]	@ (80154f0 <_Bfree+0x3c>)
 80154cc:	4809      	ldr	r0, [pc, #36]	@ (80154f4 <_Bfree+0x40>)
 80154ce:	218f      	movs	r1, #143	@ 0x8f
 80154d0:	f000 fe9a 	bl	8016208 <__assert_func>
 80154d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80154d8:	6006      	str	r6, [r0, #0]
 80154da:	60c6      	str	r6, [r0, #12]
 80154dc:	b13c      	cbz	r4, 80154ee <_Bfree+0x3a>
 80154de:	69eb      	ldr	r3, [r5, #28]
 80154e0:	6862      	ldr	r2, [r4, #4]
 80154e2:	68db      	ldr	r3, [r3, #12]
 80154e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80154e8:	6021      	str	r1, [r4, #0]
 80154ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80154ee:	bd70      	pop	{r4, r5, r6, pc}
 80154f0:	08016b12 	.word	0x08016b12
 80154f4:	08016bf2 	.word	0x08016bf2

080154f8 <__multadd>:
 80154f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154fc:	690d      	ldr	r5, [r1, #16]
 80154fe:	4607      	mov	r7, r0
 8015500:	460c      	mov	r4, r1
 8015502:	461e      	mov	r6, r3
 8015504:	f101 0c14 	add.w	ip, r1, #20
 8015508:	2000      	movs	r0, #0
 801550a:	f8dc 3000 	ldr.w	r3, [ip]
 801550e:	b299      	uxth	r1, r3
 8015510:	fb02 6101 	mla	r1, r2, r1, r6
 8015514:	0c1e      	lsrs	r6, r3, #16
 8015516:	0c0b      	lsrs	r3, r1, #16
 8015518:	fb02 3306 	mla	r3, r2, r6, r3
 801551c:	b289      	uxth	r1, r1
 801551e:	3001      	adds	r0, #1
 8015520:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015524:	4285      	cmp	r5, r0
 8015526:	f84c 1b04 	str.w	r1, [ip], #4
 801552a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801552e:	dcec      	bgt.n	801550a <__multadd+0x12>
 8015530:	b30e      	cbz	r6, 8015576 <__multadd+0x7e>
 8015532:	68a3      	ldr	r3, [r4, #8]
 8015534:	42ab      	cmp	r3, r5
 8015536:	dc19      	bgt.n	801556c <__multadd+0x74>
 8015538:	6861      	ldr	r1, [r4, #4]
 801553a:	4638      	mov	r0, r7
 801553c:	3101      	adds	r1, #1
 801553e:	f7ff ff79 	bl	8015434 <_Balloc>
 8015542:	4680      	mov	r8, r0
 8015544:	b928      	cbnz	r0, 8015552 <__multadd+0x5a>
 8015546:	4602      	mov	r2, r0
 8015548:	4b0c      	ldr	r3, [pc, #48]	@ (801557c <__multadd+0x84>)
 801554a:	480d      	ldr	r0, [pc, #52]	@ (8015580 <__multadd+0x88>)
 801554c:	21ba      	movs	r1, #186	@ 0xba
 801554e:	f000 fe5b 	bl	8016208 <__assert_func>
 8015552:	6922      	ldr	r2, [r4, #16]
 8015554:	3202      	adds	r2, #2
 8015556:	f104 010c 	add.w	r1, r4, #12
 801555a:	0092      	lsls	r2, r2, #2
 801555c:	300c      	adds	r0, #12
 801555e:	f7fe fd26 	bl	8013fae <memcpy>
 8015562:	4621      	mov	r1, r4
 8015564:	4638      	mov	r0, r7
 8015566:	f7ff ffa5 	bl	80154b4 <_Bfree>
 801556a:	4644      	mov	r4, r8
 801556c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015570:	3501      	adds	r5, #1
 8015572:	615e      	str	r6, [r3, #20]
 8015574:	6125      	str	r5, [r4, #16]
 8015576:	4620      	mov	r0, r4
 8015578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801557c:	08016b81 	.word	0x08016b81
 8015580:	08016bf2 	.word	0x08016bf2

08015584 <__s2b>:
 8015584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015588:	460c      	mov	r4, r1
 801558a:	4615      	mov	r5, r2
 801558c:	461f      	mov	r7, r3
 801558e:	2209      	movs	r2, #9
 8015590:	3308      	adds	r3, #8
 8015592:	4606      	mov	r6, r0
 8015594:	fb93 f3f2 	sdiv	r3, r3, r2
 8015598:	2100      	movs	r1, #0
 801559a:	2201      	movs	r2, #1
 801559c:	429a      	cmp	r2, r3
 801559e:	db09      	blt.n	80155b4 <__s2b+0x30>
 80155a0:	4630      	mov	r0, r6
 80155a2:	f7ff ff47 	bl	8015434 <_Balloc>
 80155a6:	b940      	cbnz	r0, 80155ba <__s2b+0x36>
 80155a8:	4602      	mov	r2, r0
 80155aa:	4b19      	ldr	r3, [pc, #100]	@ (8015610 <__s2b+0x8c>)
 80155ac:	4819      	ldr	r0, [pc, #100]	@ (8015614 <__s2b+0x90>)
 80155ae:	21d3      	movs	r1, #211	@ 0xd3
 80155b0:	f000 fe2a 	bl	8016208 <__assert_func>
 80155b4:	0052      	lsls	r2, r2, #1
 80155b6:	3101      	adds	r1, #1
 80155b8:	e7f0      	b.n	801559c <__s2b+0x18>
 80155ba:	9b08      	ldr	r3, [sp, #32]
 80155bc:	6143      	str	r3, [r0, #20]
 80155be:	2d09      	cmp	r5, #9
 80155c0:	f04f 0301 	mov.w	r3, #1
 80155c4:	6103      	str	r3, [r0, #16]
 80155c6:	dd16      	ble.n	80155f6 <__s2b+0x72>
 80155c8:	f104 0909 	add.w	r9, r4, #9
 80155cc:	46c8      	mov	r8, r9
 80155ce:	442c      	add	r4, r5
 80155d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80155d4:	4601      	mov	r1, r0
 80155d6:	3b30      	subs	r3, #48	@ 0x30
 80155d8:	220a      	movs	r2, #10
 80155da:	4630      	mov	r0, r6
 80155dc:	f7ff ff8c 	bl	80154f8 <__multadd>
 80155e0:	45a0      	cmp	r8, r4
 80155e2:	d1f5      	bne.n	80155d0 <__s2b+0x4c>
 80155e4:	f1a5 0408 	sub.w	r4, r5, #8
 80155e8:	444c      	add	r4, r9
 80155ea:	1b2d      	subs	r5, r5, r4
 80155ec:	1963      	adds	r3, r4, r5
 80155ee:	42bb      	cmp	r3, r7
 80155f0:	db04      	blt.n	80155fc <__s2b+0x78>
 80155f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155f6:	340a      	adds	r4, #10
 80155f8:	2509      	movs	r5, #9
 80155fa:	e7f6      	b.n	80155ea <__s2b+0x66>
 80155fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015600:	4601      	mov	r1, r0
 8015602:	3b30      	subs	r3, #48	@ 0x30
 8015604:	220a      	movs	r2, #10
 8015606:	4630      	mov	r0, r6
 8015608:	f7ff ff76 	bl	80154f8 <__multadd>
 801560c:	e7ee      	b.n	80155ec <__s2b+0x68>
 801560e:	bf00      	nop
 8015610:	08016b81 	.word	0x08016b81
 8015614:	08016bf2 	.word	0x08016bf2

08015618 <__hi0bits>:
 8015618:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801561c:	4603      	mov	r3, r0
 801561e:	bf36      	itet	cc
 8015620:	0403      	lslcc	r3, r0, #16
 8015622:	2000      	movcs	r0, #0
 8015624:	2010      	movcc	r0, #16
 8015626:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801562a:	bf3c      	itt	cc
 801562c:	021b      	lslcc	r3, r3, #8
 801562e:	3008      	addcc	r0, #8
 8015630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015634:	bf3c      	itt	cc
 8015636:	011b      	lslcc	r3, r3, #4
 8015638:	3004      	addcc	r0, #4
 801563a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801563e:	bf3c      	itt	cc
 8015640:	009b      	lslcc	r3, r3, #2
 8015642:	3002      	addcc	r0, #2
 8015644:	2b00      	cmp	r3, #0
 8015646:	db05      	blt.n	8015654 <__hi0bits+0x3c>
 8015648:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801564c:	f100 0001 	add.w	r0, r0, #1
 8015650:	bf08      	it	eq
 8015652:	2020      	moveq	r0, #32
 8015654:	4770      	bx	lr

08015656 <__lo0bits>:
 8015656:	6803      	ldr	r3, [r0, #0]
 8015658:	4602      	mov	r2, r0
 801565a:	f013 0007 	ands.w	r0, r3, #7
 801565e:	d00b      	beq.n	8015678 <__lo0bits+0x22>
 8015660:	07d9      	lsls	r1, r3, #31
 8015662:	d421      	bmi.n	80156a8 <__lo0bits+0x52>
 8015664:	0798      	lsls	r0, r3, #30
 8015666:	bf49      	itett	mi
 8015668:	085b      	lsrmi	r3, r3, #1
 801566a:	089b      	lsrpl	r3, r3, #2
 801566c:	2001      	movmi	r0, #1
 801566e:	6013      	strmi	r3, [r2, #0]
 8015670:	bf5c      	itt	pl
 8015672:	6013      	strpl	r3, [r2, #0]
 8015674:	2002      	movpl	r0, #2
 8015676:	4770      	bx	lr
 8015678:	b299      	uxth	r1, r3
 801567a:	b909      	cbnz	r1, 8015680 <__lo0bits+0x2a>
 801567c:	0c1b      	lsrs	r3, r3, #16
 801567e:	2010      	movs	r0, #16
 8015680:	b2d9      	uxtb	r1, r3
 8015682:	b909      	cbnz	r1, 8015688 <__lo0bits+0x32>
 8015684:	3008      	adds	r0, #8
 8015686:	0a1b      	lsrs	r3, r3, #8
 8015688:	0719      	lsls	r1, r3, #28
 801568a:	bf04      	itt	eq
 801568c:	091b      	lsreq	r3, r3, #4
 801568e:	3004      	addeq	r0, #4
 8015690:	0799      	lsls	r1, r3, #30
 8015692:	bf04      	itt	eq
 8015694:	089b      	lsreq	r3, r3, #2
 8015696:	3002      	addeq	r0, #2
 8015698:	07d9      	lsls	r1, r3, #31
 801569a:	d403      	bmi.n	80156a4 <__lo0bits+0x4e>
 801569c:	085b      	lsrs	r3, r3, #1
 801569e:	f100 0001 	add.w	r0, r0, #1
 80156a2:	d003      	beq.n	80156ac <__lo0bits+0x56>
 80156a4:	6013      	str	r3, [r2, #0]
 80156a6:	4770      	bx	lr
 80156a8:	2000      	movs	r0, #0
 80156aa:	4770      	bx	lr
 80156ac:	2020      	movs	r0, #32
 80156ae:	4770      	bx	lr

080156b0 <__i2b>:
 80156b0:	b510      	push	{r4, lr}
 80156b2:	460c      	mov	r4, r1
 80156b4:	2101      	movs	r1, #1
 80156b6:	f7ff febd 	bl	8015434 <_Balloc>
 80156ba:	4602      	mov	r2, r0
 80156bc:	b928      	cbnz	r0, 80156ca <__i2b+0x1a>
 80156be:	4b05      	ldr	r3, [pc, #20]	@ (80156d4 <__i2b+0x24>)
 80156c0:	4805      	ldr	r0, [pc, #20]	@ (80156d8 <__i2b+0x28>)
 80156c2:	f240 1145 	movw	r1, #325	@ 0x145
 80156c6:	f000 fd9f 	bl	8016208 <__assert_func>
 80156ca:	2301      	movs	r3, #1
 80156cc:	6144      	str	r4, [r0, #20]
 80156ce:	6103      	str	r3, [r0, #16]
 80156d0:	bd10      	pop	{r4, pc}
 80156d2:	bf00      	nop
 80156d4:	08016b81 	.word	0x08016b81
 80156d8:	08016bf2 	.word	0x08016bf2

080156dc <__multiply>:
 80156dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156e0:	4614      	mov	r4, r2
 80156e2:	690a      	ldr	r2, [r1, #16]
 80156e4:	6923      	ldr	r3, [r4, #16]
 80156e6:	429a      	cmp	r2, r3
 80156e8:	bfa8      	it	ge
 80156ea:	4623      	movge	r3, r4
 80156ec:	460f      	mov	r7, r1
 80156ee:	bfa4      	itt	ge
 80156f0:	460c      	movge	r4, r1
 80156f2:	461f      	movge	r7, r3
 80156f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80156f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80156fc:	68a3      	ldr	r3, [r4, #8]
 80156fe:	6861      	ldr	r1, [r4, #4]
 8015700:	eb0a 0609 	add.w	r6, sl, r9
 8015704:	42b3      	cmp	r3, r6
 8015706:	b085      	sub	sp, #20
 8015708:	bfb8      	it	lt
 801570a:	3101      	addlt	r1, #1
 801570c:	f7ff fe92 	bl	8015434 <_Balloc>
 8015710:	b930      	cbnz	r0, 8015720 <__multiply+0x44>
 8015712:	4602      	mov	r2, r0
 8015714:	4b44      	ldr	r3, [pc, #272]	@ (8015828 <__multiply+0x14c>)
 8015716:	4845      	ldr	r0, [pc, #276]	@ (801582c <__multiply+0x150>)
 8015718:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801571c:	f000 fd74 	bl	8016208 <__assert_func>
 8015720:	f100 0514 	add.w	r5, r0, #20
 8015724:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015728:	462b      	mov	r3, r5
 801572a:	2200      	movs	r2, #0
 801572c:	4543      	cmp	r3, r8
 801572e:	d321      	bcc.n	8015774 <__multiply+0x98>
 8015730:	f107 0114 	add.w	r1, r7, #20
 8015734:	f104 0214 	add.w	r2, r4, #20
 8015738:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801573c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015740:	9302      	str	r3, [sp, #8]
 8015742:	1b13      	subs	r3, r2, r4
 8015744:	3b15      	subs	r3, #21
 8015746:	f023 0303 	bic.w	r3, r3, #3
 801574a:	3304      	adds	r3, #4
 801574c:	f104 0715 	add.w	r7, r4, #21
 8015750:	42ba      	cmp	r2, r7
 8015752:	bf38      	it	cc
 8015754:	2304      	movcc	r3, #4
 8015756:	9301      	str	r3, [sp, #4]
 8015758:	9b02      	ldr	r3, [sp, #8]
 801575a:	9103      	str	r1, [sp, #12]
 801575c:	428b      	cmp	r3, r1
 801575e:	d80c      	bhi.n	801577a <__multiply+0x9e>
 8015760:	2e00      	cmp	r6, #0
 8015762:	dd03      	ble.n	801576c <__multiply+0x90>
 8015764:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015768:	2b00      	cmp	r3, #0
 801576a:	d05b      	beq.n	8015824 <__multiply+0x148>
 801576c:	6106      	str	r6, [r0, #16]
 801576e:	b005      	add	sp, #20
 8015770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015774:	f843 2b04 	str.w	r2, [r3], #4
 8015778:	e7d8      	b.n	801572c <__multiply+0x50>
 801577a:	f8b1 a000 	ldrh.w	sl, [r1]
 801577e:	f1ba 0f00 	cmp.w	sl, #0
 8015782:	d024      	beq.n	80157ce <__multiply+0xf2>
 8015784:	f104 0e14 	add.w	lr, r4, #20
 8015788:	46a9      	mov	r9, r5
 801578a:	f04f 0c00 	mov.w	ip, #0
 801578e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015792:	f8d9 3000 	ldr.w	r3, [r9]
 8015796:	fa1f fb87 	uxth.w	fp, r7
 801579a:	b29b      	uxth	r3, r3
 801579c:	fb0a 330b 	mla	r3, sl, fp, r3
 80157a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80157a4:	f8d9 7000 	ldr.w	r7, [r9]
 80157a8:	4463      	add	r3, ip
 80157aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80157ae:	fb0a c70b 	mla	r7, sl, fp, ip
 80157b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80157bc:	4572      	cmp	r2, lr
 80157be:	f849 3b04 	str.w	r3, [r9], #4
 80157c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80157c6:	d8e2      	bhi.n	801578e <__multiply+0xb2>
 80157c8:	9b01      	ldr	r3, [sp, #4]
 80157ca:	f845 c003 	str.w	ip, [r5, r3]
 80157ce:	9b03      	ldr	r3, [sp, #12]
 80157d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80157d4:	3104      	adds	r1, #4
 80157d6:	f1b9 0f00 	cmp.w	r9, #0
 80157da:	d021      	beq.n	8015820 <__multiply+0x144>
 80157dc:	682b      	ldr	r3, [r5, #0]
 80157de:	f104 0c14 	add.w	ip, r4, #20
 80157e2:	46ae      	mov	lr, r5
 80157e4:	f04f 0a00 	mov.w	sl, #0
 80157e8:	f8bc b000 	ldrh.w	fp, [ip]
 80157ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80157f0:	fb09 770b 	mla	r7, r9, fp, r7
 80157f4:	4457      	add	r7, sl
 80157f6:	b29b      	uxth	r3, r3
 80157f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80157fc:	f84e 3b04 	str.w	r3, [lr], #4
 8015800:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015804:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015808:	f8be 3000 	ldrh.w	r3, [lr]
 801580c:	fb09 330a 	mla	r3, r9, sl, r3
 8015810:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015814:	4562      	cmp	r2, ip
 8015816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801581a:	d8e5      	bhi.n	80157e8 <__multiply+0x10c>
 801581c:	9f01      	ldr	r7, [sp, #4]
 801581e:	51eb      	str	r3, [r5, r7]
 8015820:	3504      	adds	r5, #4
 8015822:	e799      	b.n	8015758 <__multiply+0x7c>
 8015824:	3e01      	subs	r6, #1
 8015826:	e79b      	b.n	8015760 <__multiply+0x84>
 8015828:	08016b81 	.word	0x08016b81
 801582c:	08016bf2 	.word	0x08016bf2

08015830 <__pow5mult>:
 8015830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015834:	4615      	mov	r5, r2
 8015836:	f012 0203 	ands.w	r2, r2, #3
 801583a:	4607      	mov	r7, r0
 801583c:	460e      	mov	r6, r1
 801583e:	d007      	beq.n	8015850 <__pow5mult+0x20>
 8015840:	4c25      	ldr	r4, [pc, #148]	@ (80158d8 <__pow5mult+0xa8>)
 8015842:	3a01      	subs	r2, #1
 8015844:	2300      	movs	r3, #0
 8015846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801584a:	f7ff fe55 	bl	80154f8 <__multadd>
 801584e:	4606      	mov	r6, r0
 8015850:	10ad      	asrs	r5, r5, #2
 8015852:	d03d      	beq.n	80158d0 <__pow5mult+0xa0>
 8015854:	69fc      	ldr	r4, [r7, #28]
 8015856:	b97c      	cbnz	r4, 8015878 <__pow5mult+0x48>
 8015858:	2010      	movs	r0, #16
 801585a:	f7ff fd23 	bl	80152a4 <malloc>
 801585e:	4602      	mov	r2, r0
 8015860:	61f8      	str	r0, [r7, #28]
 8015862:	b928      	cbnz	r0, 8015870 <__pow5mult+0x40>
 8015864:	4b1d      	ldr	r3, [pc, #116]	@ (80158dc <__pow5mult+0xac>)
 8015866:	481e      	ldr	r0, [pc, #120]	@ (80158e0 <__pow5mult+0xb0>)
 8015868:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801586c:	f000 fccc 	bl	8016208 <__assert_func>
 8015870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015874:	6004      	str	r4, [r0, #0]
 8015876:	60c4      	str	r4, [r0, #12]
 8015878:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801587c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015880:	b94c      	cbnz	r4, 8015896 <__pow5mult+0x66>
 8015882:	f240 2171 	movw	r1, #625	@ 0x271
 8015886:	4638      	mov	r0, r7
 8015888:	f7ff ff12 	bl	80156b0 <__i2b>
 801588c:	2300      	movs	r3, #0
 801588e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015892:	4604      	mov	r4, r0
 8015894:	6003      	str	r3, [r0, #0]
 8015896:	f04f 0900 	mov.w	r9, #0
 801589a:	07eb      	lsls	r3, r5, #31
 801589c:	d50a      	bpl.n	80158b4 <__pow5mult+0x84>
 801589e:	4631      	mov	r1, r6
 80158a0:	4622      	mov	r2, r4
 80158a2:	4638      	mov	r0, r7
 80158a4:	f7ff ff1a 	bl	80156dc <__multiply>
 80158a8:	4631      	mov	r1, r6
 80158aa:	4680      	mov	r8, r0
 80158ac:	4638      	mov	r0, r7
 80158ae:	f7ff fe01 	bl	80154b4 <_Bfree>
 80158b2:	4646      	mov	r6, r8
 80158b4:	106d      	asrs	r5, r5, #1
 80158b6:	d00b      	beq.n	80158d0 <__pow5mult+0xa0>
 80158b8:	6820      	ldr	r0, [r4, #0]
 80158ba:	b938      	cbnz	r0, 80158cc <__pow5mult+0x9c>
 80158bc:	4622      	mov	r2, r4
 80158be:	4621      	mov	r1, r4
 80158c0:	4638      	mov	r0, r7
 80158c2:	f7ff ff0b 	bl	80156dc <__multiply>
 80158c6:	6020      	str	r0, [r4, #0]
 80158c8:	f8c0 9000 	str.w	r9, [r0]
 80158cc:	4604      	mov	r4, r0
 80158ce:	e7e4      	b.n	801589a <__pow5mult+0x6a>
 80158d0:	4630      	mov	r0, r6
 80158d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158d6:	bf00      	nop
 80158d8:	08016c4c 	.word	0x08016c4c
 80158dc:	08016b12 	.word	0x08016b12
 80158e0:	08016bf2 	.word	0x08016bf2

080158e4 <__lshift>:
 80158e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158e8:	460c      	mov	r4, r1
 80158ea:	6849      	ldr	r1, [r1, #4]
 80158ec:	6923      	ldr	r3, [r4, #16]
 80158ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80158f2:	68a3      	ldr	r3, [r4, #8]
 80158f4:	4607      	mov	r7, r0
 80158f6:	4691      	mov	r9, r2
 80158f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80158fc:	f108 0601 	add.w	r6, r8, #1
 8015900:	42b3      	cmp	r3, r6
 8015902:	db0b      	blt.n	801591c <__lshift+0x38>
 8015904:	4638      	mov	r0, r7
 8015906:	f7ff fd95 	bl	8015434 <_Balloc>
 801590a:	4605      	mov	r5, r0
 801590c:	b948      	cbnz	r0, 8015922 <__lshift+0x3e>
 801590e:	4602      	mov	r2, r0
 8015910:	4b28      	ldr	r3, [pc, #160]	@ (80159b4 <__lshift+0xd0>)
 8015912:	4829      	ldr	r0, [pc, #164]	@ (80159b8 <__lshift+0xd4>)
 8015914:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015918:	f000 fc76 	bl	8016208 <__assert_func>
 801591c:	3101      	adds	r1, #1
 801591e:	005b      	lsls	r3, r3, #1
 8015920:	e7ee      	b.n	8015900 <__lshift+0x1c>
 8015922:	2300      	movs	r3, #0
 8015924:	f100 0114 	add.w	r1, r0, #20
 8015928:	f100 0210 	add.w	r2, r0, #16
 801592c:	4618      	mov	r0, r3
 801592e:	4553      	cmp	r3, sl
 8015930:	db33      	blt.n	801599a <__lshift+0xb6>
 8015932:	6920      	ldr	r0, [r4, #16]
 8015934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015938:	f104 0314 	add.w	r3, r4, #20
 801593c:	f019 091f 	ands.w	r9, r9, #31
 8015940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015948:	d02b      	beq.n	80159a2 <__lshift+0xbe>
 801594a:	f1c9 0e20 	rsb	lr, r9, #32
 801594e:	468a      	mov	sl, r1
 8015950:	2200      	movs	r2, #0
 8015952:	6818      	ldr	r0, [r3, #0]
 8015954:	fa00 f009 	lsl.w	r0, r0, r9
 8015958:	4310      	orrs	r0, r2
 801595a:	f84a 0b04 	str.w	r0, [sl], #4
 801595e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015962:	459c      	cmp	ip, r3
 8015964:	fa22 f20e 	lsr.w	r2, r2, lr
 8015968:	d8f3      	bhi.n	8015952 <__lshift+0x6e>
 801596a:	ebac 0304 	sub.w	r3, ip, r4
 801596e:	3b15      	subs	r3, #21
 8015970:	f023 0303 	bic.w	r3, r3, #3
 8015974:	3304      	adds	r3, #4
 8015976:	f104 0015 	add.w	r0, r4, #21
 801597a:	4584      	cmp	ip, r0
 801597c:	bf38      	it	cc
 801597e:	2304      	movcc	r3, #4
 8015980:	50ca      	str	r2, [r1, r3]
 8015982:	b10a      	cbz	r2, 8015988 <__lshift+0xa4>
 8015984:	f108 0602 	add.w	r6, r8, #2
 8015988:	3e01      	subs	r6, #1
 801598a:	4638      	mov	r0, r7
 801598c:	612e      	str	r6, [r5, #16]
 801598e:	4621      	mov	r1, r4
 8015990:	f7ff fd90 	bl	80154b4 <_Bfree>
 8015994:	4628      	mov	r0, r5
 8015996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801599a:	f842 0f04 	str.w	r0, [r2, #4]!
 801599e:	3301      	adds	r3, #1
 80159a0:	e7c5      	b.n	801592e <__lshift+0x4a>
 80159a2:	3904      	subs	r1, #4
 80159a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80159a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80159ac:	459c      	cmp	ip, r3
 80159ae:	d8f9      	bhi.n	80159a4 <__lshift+0xc0>
 80159b0:	e7ea      	b.n	8015988 <__lshift+0xa4>
 80159b2:	bf00      	nop
 80159b4:	08016b81 	.word	0x08016b81
 80159b8:	08016bf2 	.word	0x08016bf2

080159bc <__mcmp>:
 80159bc:	690a      	ldr	r2, [r1, #16]
 80159be:	4603      	mov	r3, r0
 80159c0:	6900      	ldr	r0, [r0, #16]
 80159c2:	1a80      	subs	r0, r0, r2
 80159c4:	b530      	push	{r4, r5, lr}
 80159c6:	d10e      	bne.n	80159e6 <__mcmp+0x2a>
 80159c8:	3314      	adds	r3, #20
 80159ca:	3114      	adds	r1, #20
 80159cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80159d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80159d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80159d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80159dc:	4295      	cmp	r5, r2
 80159de:	d003      	beq.n	80159e8 <__mcmp+0x2c>
 80159e0:	d205      	bcs.n	80159ee <__mcmp+0x32>
 80159e2:	f04f 30ff 	mov.w	r0, #4294967295
 80159e6:	bd30      	pop	{r4, r5, pc}
 80159e8:	42a3      	cmp	r3, r4
 80159ea:	d3f3      	bcc.n	80159d4 <__mcmp+0x18>
 80159ec:	e7fb      	b.n	80159e6 <__mcmp+0x2a>
 80159ee:	2001      	movs	r0, #1
 80159f0:	e7f9      	b.n	80159e6 <__mcmp+0x2a>
	...

080159f4 <__mdiff>:
 80159f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159f8:	4689      	mov	r9, r1
 80159fa:	4606      	mov	r6, r0
 80159fc:	4611      	mov	r1, r2
 80159fe:	4648      	mov	r0, r9
 8015a00:	4614      	mov	r4, r2
 8015a02:	f7ff ffdb 	bl	80159bc <__mcmp>
 8015a06:	1e05      	subs	r5, r0, #0
 8015a08:	d112      	bne.n	8015a30 <__mdiff+0x3c>
 8015a0a:	4629      	mov	r1, r5
 8015a0c:	4630      	mov	r0, r6
 8015a0e:	f7ff fd11 	bl	8015434 <_Balloc>
 8015a12:	4602      	mov	r2, r0
 8015a14:	b928      	cbnz	r0, 8015a22 <__mdiff+0x2e>
 8015a16:	4b3f      	ldr	r3, [pc, #252]	@ (8015b14 <__mdiff+0x120>)
 8015a18:	f240 2137 	movw	r1, #567	@ 0x237
 8015a1c:	483e      	ldr	r0, [pc, #248]	@ (8015b18 <__mdiff+0x124>)
 8015a1e:	f000 fbf3 	bl	8016208 <__assert_func>
 8015a22:	2301      	movs	r3, #1
 8015a24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015a28:	4610      	mov	r0, r2
 8015a2a:	b003      	add	sp, #12
 8015a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a30:	bfbc      	itt	lt
 8015a32:	464b      	movlt	r3, r9
 8015a34:	46a1      	movlt	r9, r4
 8015a36:	4630      	mov	r0, r6
 8015a38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015a3c:	bfba      	itte	lt
 8015a3e:	461c      	movlt	r4, r3
 8015a40:	2501      	movlt	r5, #1
 8015a42:	2500      	movge	r5, #0
 8015a44:	f7ff fcf6 	bl	8015434 <_Balloc>
 8015a48:	4602      	mov	r2, r0
 8015a4a:	b918      	cbnz	r0, 8015a54 <__mdiff+0x60>
 8015a4c:	4b31      	ldr	r3, [pc, #196]	@ (8015b14 <__mdiff+0x120>)
 8015a4e:	f240 2145 	movw	r1, #581	@ 0x245
 8015a52:	e7e3      	b.n	8015a1c <__mdiff+0x28>
 8015a54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015a58:	6926      	ldr	r6, [r4, #16]
 8015a5a:	60c5      	str	r5, [r0, #12]
 8015a5c:	f109 0310 	add.w	r3, r9, #16
 8015a60:	f109 0514 	add.w	r5, r9, #20
 8015a64:	f104 0e14 	add.w	lr, r4, #20
 8015a68:	f100 0b14 	add.w	fp, r0, #20
 8015a6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015a70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015a74:	9301      	str	r3, [sp, #4]
 8015a76:	46d9      	mov	r9, fp
 8015a78:	f04f 0c00 	mov.w	ip, #0
 8015a7c:	9b01      	ldr	r3, [sp, #4]
 8015a7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015a82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015a86:	9301      	str	r3, [sp, #4]
 8015a88:	fa1f f38a 	uxth.w	r3, sl
 8015a8c:	4619      	mov	r1, r3
 8015a8e:	b283      	uxth	r3, r0
 8015a90:	1acb      	subs	r3, r1, r3
 8015a92:	0c00      	lsrs	r0, r0, #16
 8015a94:	4463      	add	r3, ip
 8015a96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015a9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015a9e:	b29b      	uxth	r3, r3
 8015aa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015aa4:	4576      	cmp	r6, lr
 8015aa6:	f849 3b04 	str.w	r3, [r9], #4
 8015aaa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015aae:	d8e5      	bhi.n	8015a7c <__mdiff+0x88>
 8015ab0:	1b33      	subs	r3, r6, r4
 8015ab2:	3b15      	subs	r3, #21
 8015ab4:	f023 0303 	bic.w	r3, r3, #3
 8015ab8:	3415      	adds	r4, #21
 8015aba:	3304      	adds	r3, #4
 8015abc:	42a6      	cmp	r6, r4
 8015abe:	bf38      	it	cc
 8015ac0:	2304      	movcc	r3, #4
 8015ac2:	441d      	add	r5, r3
 8015ac4:	445b      	add	r3, fp
 8015ac6:	461e      	mov	r6, r3
 8015ac8:	462c      	mov	r4, r5
 8015aca:	4544      	cmp	r4, r8
 8015acc:	d30e      	bcc.n	8015aec <__mdiff+0xf8>
 8015ace:	f108 0103 	add.w	r1, r8, #3
 8015ad2:	1b49      	subs	r1, r1, r5
 8015ad4:	f021 0103 	bic.w	r1, r1, #3
 8015ad8:	3d03      	subs	r5, #3
 8015ada:	45a8      	cmp	r8, r5
 8015adc:	bf38      	it	cc
 8015ade:	2100      	movcc	r1, #0
 8015ae0:	440b      	add	r3, r1
 8015ae2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015ae6:	b191      	cbz	r1, 8015b0e <__mdiff+0x11a>
 8015ae8:	6117      	str	r7, [r2, #16]
 8015aea:	e79d      	b.n	8015a28 <__mdiff+0x34>
 8015aec:	f854 1b04 	ldr.w	r1, [r4], #4
 8015af0:	46e6      	mov	lr, ip
 8015af2:	0c08      	lsrs	r0, r1, #16
 8015af4:	fa1c fc81 	uxtah	ip, ip, r1
 8015af8:	4471      	add	r1, lr
 8015afa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015afe:	b289      	uxth	r1, r1
 8015b00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015b04:	f846 1b04 	str.w	r1, [r6], #4
 8015b08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015b0c:	e7dd      	b.n	8015aca <__mdiff+0xd6>
 8015b0e:	3f01      	subs	r7, #1
 8015b10:	e7e7      	b.n	8015ae2 <__mdiff+0xee>
 8015b12:	bf00      	nop
 8015b14:	08016b81 	.word	0x08016b81
 8015b18:	08016bf2 	.word	0x08016bf2

08015b1c <__ulp>:
 8015b1c:	b082      	sub	sp, #8
 8015b1e:	ed8d 0b00 	vstr	d0, [sp]
 8015b22:	9a01      	ldr	r2, [sp, #4]
 8015b24:	4b0f      	ldr	r3, [pc, #60]	@ (8015b64 <__ulp+0x48>)
 8015b26:	4013      	ands	r3, r2
 8015b28:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	dc08      	bgt.n	8015b42 <__ulp+0x26>
 8015b30:	425b      	negs	r3, r3
 8015b32:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8015b36:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015b3a:	da04      	bge.n	8015b46 <__ulp+0x2a>
 8015b3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8015b40:	4113      	asrs	r3, r2
 8015b42:	2200      	movs	r2, #0
 8015b44:	e008      	b.n	8015b58 <__ulp+0x3c>
 8015b46:	f1a2 0314 	sub.w	r3, r2, #20
 8015b4a:	2b1e      	cmp	r3, #30
 8015b4c:	bfda      	itte	le
 8015b4e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8015b52:	40da      	lsrle	r2, r3
 8015b54:	2201      	movgt	r2, #1
 8015b56:	2300      	movs	r3, #0
 8015b58:	4619      	mov	r1, r3
 8015b5a:	4610      	mov	r0, r2
 8015b5c:	ec41 0b10 	vmov	d0, r0, r1
 8015b60:	b002      	add	sp, #8
 8015b62:	4770      	bx	lr
 8015b64:	7ff00000 	.word	0x7ff00000

08015b68 <__b2d>:
 8015b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b6c:	6906      	ldr	r6, [r0, #16]
 8015b6e:	f100 0814 	add.w	r8, r0, #20
 8015b72:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015b76:	1f37      	subs	r7, r6, #4
 8015b78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015b7c:	4610      	mov	r0, r2
 8015b7e:	f7ff fd4b 	bl	8015618 <__hi0bits>
 8015b82:	f1c0 0320 	rsb	r3, r0, #32
 8015b86:	280a      	cmp	r0, #10
 8015b88:	600b      	str	r3, [r1, #0]
 8015b8a:	491b      	ldr	r1, [pc, #108]	@ (8015bf8 <__b2d+0x90>)
 8015b8c:	dc15      	bgt.n	8015bba <__b2d+0x52>
 8015b8e:	f1c0 0c0b 	rsb	ip, r0, #11
 8015b92:	fa22 f30c 	lsr.w	r3, r2, ip
 8015b96:	45b8      	cmp	r8, r7
 8015b98:	ea43 0501 	orr.w	r5, r3, r1
 8015b9c:	bf34      	ite	cc
 8015b9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015ba2:	2300      	movcs	r3, #0
 8015ba4:	3015      	adds	r0, #21
 8015ba6:	fa02 f000 	lsl.w	r0, r2, r0
 8015baa:	fa23 f30c 	lsr.w	r3, r3, ip
 8015bae:	4303      	orrs	r3, r0
 8015bb0:	461c      	mov	r4, r3
 8015bb2:	ec45 4b10 	vmov	d0, r4, r5
 8015bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bba:	45b8      	cmp	r8, r7
 8015bbc:	bf3a      	itte	cc
 8015bbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015bc2:	f1a6 0708 	subcc.w	r7, r6, #8
 8015bc6:	2300      	movcs	r3, #0
 8015bc8:	380b      	subs	r0, #11
 8015bca:	d012      	beq.n	8015bf2 <__b2d+0x8a>
 8015bcc:	f1c0 0120 	rsb	r1, r0, #32
 8015bd0:	fa23 f401 	lsr.w	r4, r3, r1
 8015bd4:	4082      	lsls	r2, r0
 8015bd6:	4322      	orrs	r2, r4
 8015bd8:	4547      	cmp	r7, r8
 8015bda:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8015bde:	bf8c      	ite	hi
 8015be0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015be4:	2200      	movls	r2, #0
 8015be6:	4083      	lsls	r3, r0
 8015be8:	40ca      	lsrs	r2, r1
 8015bea:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8015bee:	4313      	orrs	r3, r2
 8015bf0:	e7de      	b.n	8015bb0 <__b2d+0x48>
 8015bf2:	ea42 0501 	orr.w	r5, r2, r1
 8015bf6:	e7db      	b.n	8015bb0 <__b2d+0x48>
 8015bf8:	3ff00000 	.word	0x3ff00000

08015bfc <__d2b>:
 8015bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015c00:	460f      	mov	r7, r1
 8015c02:	2101      	movs	r1, #1
 8015c04:	ec59 8b10 	vmov	r8, r9, d0
 8015c08:	4616      	mov	r6, r2
 8015c0a:	f7ff fc13 	bl	8015434 <_Balloc>
 8015c0e:	4604      	mov	r4, r0
 8015c10:	b930      	cbnz	r0, 8015c20 <__d2b+0x24>
 8015c12:	4602      	mov	r2, r0
 8015c14:	4b23      	ldr	r3, [pc, #140]	@ (8015ca4 <__d2b+0xa8>)
 8015c16:	4824      	ldr	r0, [pc, #144]	@ (8015ca8 <__d2b+0xac>)
 8015c18:	f240 310f 	movw	r1, #783	@ 0x30f
 8015c1c:	f000 faf4 	bl	8016208 <__assert_func>
 8015c20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015c24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015c28:	b10d      	cbz	r5, 8015c2e <__d2b+0x32>
 8015c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015c2e:	9301      	str	r3, [sp, #4]
 8015c30:	f1b8 0300 	subs.w	r3, r8, #0
 8015c34:	d023      	beq.n	8015c7e <__d2b+0x82>
 8015c36:	4668      	mov	r0, sp
 8015c38:	9300      	str	r3, [sp, #0]
 8015c3a:	f7ff fd0c 	bl	8015656 <__lo0bits>
 8015c3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015c42:	b1d0      	cbz	r0, 8015c7a <__d2b+0x7e>
 8015c44:	f1c0 0320 	rsb	r3, r0, #32
 8015c48:	fa02 f303 	lsl.w	r3, r2, r3
 8015c4c:	430b      	orrs	r3, r1
 8015c4e:	40c2      	lsrs	r2, r0
 8015c50:	6163      	str	r3, [r4, #20]
 8015c52:	9201      	str	r2, [sp, #4]
 8015c54:	9b01      	ldr	r3, [sp, #4]
 8015c56:	61a3      	str	r3, [r4, #24]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	bf0c      	ite	eq
 8015c5c:	2201      	moveq	r2, #1
 8015c5e:	2202      	movne	r2, #2
 8015c60:	6122      	str	r2, [r4, #16]
 8015c62:	b1a5      	cbz	r5, 8015c8e <__d2b+0x92>
 8015c64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015c68:	4405      	add	r5, r0
 8015c6a:	603d      	str	r5, [r7, #0]
 8015c6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015c70:	6030      	str	r0, [r6, #0]
 8015c72:	4620      	mov	r0, r4
 8015c74:	b003      	add	sp, #12
 8015c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c7a:	6161      	str	r1, [r4, #20]
 8015c7c:	e7ea      	b.n	8015c54 <__d2b+0x58>
 8015c7e:	a801      	add	r0, sp, #4
 8015c80:	f7ff fce9 	bl	8015656 <__lo0bits>
 8015c84:	9b01      	ldr	r3, [sp, #4]
 8015c86:	6163      	str	r3, [r4, #20]
 8015c88:	3020      	adds	r0, #32
 8015c8a:	2201      	movs	r2, #1
 8015c8c:	e7e8      	b.n	8015c60 <__d2b+0x64>
 8015c8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015c92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015c96:	6038      	str	r0, [r7, #0]
 8015c98:	6918      	ldr	r0, [r3, #16]
 8015c9a:	f7ff fcbd 	bl	8015618 <__hi0bits>
 8015c9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015ca2:	e7e5      	b.n	8015c70 <__d2b+0x74>
 8015ca4:	08016b81 	.word	0x08016b81
 8015ca8:	08016bf2 	.word	0x08016bf2

08015cac <__ratio>:
 8015cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cb0:	4688      	mov	r8, r1
 8015cb2:	4669      	mov	r1, sp
 8015cb4:	4681      	mov	r9, r0
 8015cb6:	f7ff ff57 	bl	8015b68 <__b2d>
 8015cba:	a901      	add	r1, sp, #4
 8015cbc:	4640      	mov	r0, r8
 8015cbe:	ec55 4b10 	vmov	r4, r5, d0
 8015cc2:	f7ff ff51 	bl	8015b68 <__b2d>
 8015cc6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015cca:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015cce:	1ad2      	subs	r2, r2, r3
 8015cd0:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015cd4:	1a5b      	subs	r3, r3, r1
 8015cd6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8015cda:	ec57 6b10 	vmov	r6, r7, d0
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	bfd6      	itet	le
 8015ce2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015ce6:	462a      	movgt	r2, r5
 8015ce8:	463a      	movle	r2, r7
 8015cea:	46ab      	mov	fp, r5
 8015cec:	46a2      	mov	sl, r4
 8015cee:	bfce      	itee	gt
 8015cf0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8015cf4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8015cf8:	ee00 3a90 	vmovle	s1, r3
 8015cfc:	ec4b ab17 	vmov	d7, sl, fp
 8015d00:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8015d04:	b003      	add	sp, #12
 8015d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d0a <__copybits>:
 8015d0a:	3901      	subs	r1, #1
 8015d0c:	b570      	push	{r4, r5, r6, lr}
 8015d0e:	1149      	asrs	r1, r1, #5
 8015d10:	6914      	ldr	r4, [r2, #16]
 8015d12:	3101      	adds	r1, #1
 8015d14:	f102 0314 	add.w	r3, r2, #20
 8015d18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015d1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015d20:	1f05      	subs	r5, r0, #4
 8015d22:	42a3      	cmp	r3, r4
 8015d24:	d30c      	bcc.n	8015d40 <__copybits+0x36>
 8015d26:	1aa3      	subs	r3, r4, r2
 8015d28:	3b11      	subs	r3, #17
 8015d2a:	f023 0303 	bic.w	r3, r3, #3
 8015d2e:	3211      	adds	r2, #17
 8015d30:	42a2      	cmp	r2, r4
 8015d32:	bf88      	it	hi
 8015d34:	2300      	movhi	r3, #0
 8015d36:	4418      	add	r0, r3
 8015d38:	2300      	movs	r3, #0
 8015d3a:	4288      	cmp	r0, r1
 8015d3c:	d305      	bcc.n	8015d4a <__copybits+0x40>
 8015d3e:	bd70      	pop	{r4, r5, r6, pc}
 8015d40:	f853 6b04 	ldr.w	r6, [r3], #4
 8015d44:	f845 6f04 	str.w	r6, [r5, #4]!
 8015d48:	e7eb      	b.n	8015d22 <__copybits+0x18>
 8015d4a:	f840 3b04 	str.w	r3, [r0], #4
 8015d4e:	e7f4      	b.n	8015d3a <__copybits+0x30>

08015d50 <__any_on>:
 8015d50:	f100 0214 	add.w	r2, r0, #20
 8015d54:	6900      	ldr	r0, [r0, #16]
 8015d56:	114b      	asrs	r3, r1, #5
 8015d58:	4298      	cmp	r0, r3
 8015d5a:	b510      	push	{r4, lr}
 8015d5c:	db11      	blt.n	8015d82 <__any_on+0x32>
 8015d5e:	dd0a      	ble.n	8015d76 <__any_on+0x26>
 8015d60:	f011 011f 	ands.w	r1, r1, #31
 8015d64:	d007      	beq.n	8015d76 <__any_on+0x26>
 8015d66:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015d6a:	fa24 f001 	lsr.w	r0, r4, r1
 8015d6e:	fa00 f101 	lsl.w	r1, r0, r1
 8015d72:	428c      	cmp	r4, r1
 8015d74:	d10b      	bne.n	8015d8e <__any_on+0x3e>
 8015d76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015d7a:	4293      	cmp	r3, r2
 8015d7c:	d803      	bhi.n	8015d86 <__any_on+0x36>
 8015d7e:	2000      	movs	r0, #0
 8015d80:	bd10      	pop	{r4, pc}
 8015d82:	4603      	mov	r3, r0
 8015d84:	e7f7      	b.n	8015d76 <__any_on+0x26>
 8015d86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015d8a:	2900      	cmp	r1, #0
 8015d8c:	d0f5      	beq.n	8015d7a <__any_on+0x2a>
 8015d8e:	2001      	movs	r0, #1
 8015d90:	e7f6      	b.n	8015d80 <__any_on+0x30>

08015d92 <__ascii_wctomb>:
 8015d92:	4603      	mov	r3, r0
 8015d94:	4608      	mov	r0, r1
 8015d96:	b141      	cbz	r1, 8015daa <__ascii_wctomb+0x18>
 8015d98:	2aff      	cmp	r2, #255	@ 0xff
 8015d9a:	d904      	bls.n	8015da6 <__ascii_wctomb+0x14>
 8015d9c:	228a      	movs	r2, #138	@ 0x8a
 8015d9e:	601a      	str	r2, [r3, #0]
 8015da0:	f04f 30ff 	mov.w	r0, #4294967295
 8015da4:	4770      	bx	lr
 8015da6:	700a      	strb	r2, [r1, #0]
 8015da8:	2001      	movs	r0, #1
 8015daa:	4770      	bx	lr

08015dac <__ssputs_r>:
 8015dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015db0:	688e      	ldr	r6, [r1, #8]
 8015db2:	461f      	mov	r7, r3
 8015db4:	42be      	cmp	r6, r7
 8015db6:	680b      	ldr	r3, [r1, #0]
 8015db8:	4682      	mov	sl, r0
 8015dba:	460c      	mov	r4, r1
 8015dbc:	4690      	mov	r8, r2
 8015dbe:	d82d      	bhi.n	8015e1c <__ssputs_r+0x70>
 8015dc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015dc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015dc8:	d026      	beq.n	8015e18 <__ssputs_r+0x6c>
 8015dca:	6965      	ldr	r5, [r4, #20]
 8015dcc:	6909      	ldr	r1, [r1, #16]
 8015dce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015dd2:	eba3 0901 	sub.w	r9, r3, r1
 8015dd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015dda:	1c7b      	adds	r3, r7, #1
 8015ddc:	444b      	add	r3, r9
 8015dde:	106d      	asrs	r5, r5, #1
 8015de0:	429d      	cmp	r5, r3
 8015de2:	bf38      	it	cc
 8015de4:	461d      	movcc	r5, r3
 8015de6:	0553      	lsls	r3, r2, #21
 8015de8:	d527      	bpl.n	8015e3a <__ssputs_r+0x8e>
 8015dea:	4629      	mov	r1, r5
 8015dec:	f7ff fa84 	bl	80152f8 <_malloc_r>
 8015df0:	4606      	mov	r6, r0
 8015df2:	b360      	cbz	r0, 8015e4e <__ssputs_r+0xa2>
 8015df4:	6921      	ldr	r1, [r4, #16]
 8015df6:	464a      	mov	r2, r9
 8015df8:	f7fe f8d9 	bl	8013fae <memcpy>
 8015dfc:	89a3      	ldrh	r3, [r4, #12]
 8015dfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015e06:	81a3      	strh	r3, [r4, #12]
 8015e08:	6126      	str	r6, [r4, #16]
 8015e0a:	6165      	str	r5, [r4, #20]
 8015e0c:	444e      	add	r6, r9
 8015e0e:	eba5 0509 	sub.w	r5, r5, r9
 8015e12:	6026      	str	r6, [r4, #0]
 8015e14:	60a5      	str	r5, [r4, #8]
 8015e16:	463e      	mov	r6, r7
 8015e18:	42be      	cmp	r6, r7
 8015e1a:	d900      	bls.n	8015e1e <__ssputs_r+0x72>
 8015e1c:	463e      	mov	r6, r7
 8015e1e:	6820      	ldr	r0, [r4, #0]
 8015e20:	4632      	mov	r2, r6
 8015e22:	4641      	mov	r1, r8
 8015e24:	f000 f9c6 	bl	80161b4 <memmove>
 8015e28:	68a3      	ldr	r3, [r4, #8]
 8015e2a:	1b9b      	subs	r3, r3, r6
 8015e2c:	60a3      	str	r3, [r4, #8]
 8015e2e:	6823      	ldr	r3, [r4, #0]
 8015e30:	4433      	add	r3, r6
 8015e32:	6023      	str	r3, [r4, #0]
 8015e34:	2000      	movs	r0, #0
 8015e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e3a:	462a      	mov	r2, r5
 8015e3c:	f000 fa16 	bl	801626c <_realloc_r>
 8015e40:	4606      	mov	r6, r0
 8015e42:	2800      	cmp	r0, #0
 8015e44:	d1e0      	bne.n	8015e08 <__ssputs_r+0x5c>
 8015e46:	6921      	ldr	r1, [r4, #16]
 8015e48:	4650      	mov	r0, sl
 8015e4a:	f7fe fea7 	bl	8014b9c <_free_r>
 8015e4e:	230c      	movs	r3, #12
 8015e50:	f8ca 3000 	str.w	r3, [sl]
 8015e54:	89a3      	ldrh	r3, [r4, #12]
 8015e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015e5a:	81a3      	strh	r3, [r4, #12]
 8015e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8015e60:	e7e9      	b.n	8015e36 <__ssputs_r+0x8a>
	...

08015e64 <_svfiprintf_r>:
 8015e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e68:	4698      	mov	r8, r3
 8015e6a:	898b      	ldrh	r3, [r1, #12]
 8015e6c:	061b      	lsls	r3, r3, #24
 8015e6e:	b09d      	sub	sp, #116	@ 0x74
 8015e70:	4607      	mov	r7, r0
 8015e72:	460d      	mov	r5, r1
 8015e74:	4614      	mov	r4, r2
 8015e76:	d510      	bpl.n	8015e9a <_svfiprintf_r+0x36>
 8015e78:	690b      	ldr	r3, [r1, #16]
 8015e7a:	b973      	cbnz	r3, 8015e9a <_svfiprintf_r+0x36>
 8015e7c:	2140      	movs	r1, #64	@ 0x40
 8015e7e:	f7ff fa3b 	bl	80152f8 <_malloc_r>
 8015e82:	6028      	str	r0, [r5, #0]
 8015e84:	6128      	str	r0, [r5, #16]
 8015e86:	b930      	cbnz	r0, 8015e96 <_svfiprintf_r+0x32>
 8015e88:	230c      	movs	r3, #12
 8015e8a:	603b      	str	r3, [r7, #0]
 8015e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8015e90:	b01d      	add	sp, #116	@ 0x74
 8015e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e96:	2340      	movs	r3, #64	@ 0x40
 8015e98:	616b      	str	r3, [r5, #20]
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e9e:	2320      	movs	r3, #32
 8015ea0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ea8:	2330      	movs	r3, #48	@ 0x30
 8015eaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016048 <_svfiprintf_r+0x1e4>
 8015eae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015eb2:	f04f 0901 	mov.w	r9, #1
 8015eb6:	4623      	mov	r3, r4
 8015eb8:	469a      	mov	sl, r3
 8015eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ebe:	b10a      	cbz	r2, 8015ec4 <_svfiprintf_r+0x60>
 8015ec0:	2a25      	cmp	r2, #37	@ 0x25
 8015ec2:	d1f9      	bne.n	8015eb8 <_svfiprintf_r+0x54>
 8015ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8015ec8:	d00b      	beq.n	8015ee2 <_svfiprintf_r+0x7e>
 8015eca:	465b      	mov	r3, fp
 8015ecc:	4622      	mov	r2, r4
 8015ece:	4629      	mov	r1, r5
 8015ed0:	4638      	mov	r0, r7
 8015ed2:	f7ff ff6b 	bl	8015dac <__ssputs_r>
 8015ed6:	3001      	adds	r0, #1
 8015ed8:	f000 80a7 	beq.w	801602a <_svfiprintf_r+0x1c6>
 8015edc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015ede:	445a      	add	r2, fp
 8015ee0:	9209      	str	r2, [sp, #36]	@ 0x24
 8015ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	f000 809f 	beq.w	801602a <_svfiprintf_r+0x1c6>
 8015eec:	2300      	movs	r3, #0
 8015eee:	f04f 32ff 	mov.w	r2, #4294967295
 8015ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ef6:	f10a 0a01 	add.w	sl, sl, #1
 8015efa:	9304      	str	r3, [sp, #16]
 8015efc:	9307      	str	r3, [sp, #28]
 8015efe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015f02:	931a      	str	r3, [sp, #104]	@ 0x68
 8015f04:	4654      	mov	r4, sl
 8015f06:	2205      	movs	r2, #5
 8015f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f0c:	484e      	ldr	r0, [pc, #312]	@ (8016048 <_svfiprintf_r+0x1e4>)
 8015f0e:	f7ea fa0f 	bl	8000330 <memchr>
 8015f12:	9a04      	ldr	r2, [sp, #16]
 8015f14:	b9d8      	cbnz	r0, 8015f4e <_svfiprintf_r+0xea>
 8015f16:	06d0      	lsls	r0, r2, #27
 8015f18:	bf44      	itt	mi
 8015f1a:	2320      	movmi	r3, #32
 8015f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015f20:	0711      	lsls	r1, r2, #28
 8015f22:	bf44      	itt	mi
 8015f24:	232b      	movmi	r3, #43	@ 0x2b
 8015f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8015f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015f30:	d015      	beq.n	8015f5e <_svfiprintf_r+0xfa>
 8015f32:	9a07      	ldr	r2, [sp, #28]
 8015f34:	4654      	mov	r4, sl
 8015f36:	2000      	movs	r0, #0
 8015f38:	f04f 0c0a 	mov.w	ip, #10
 8015f3c:	4621      	mov	r1, r4
 8015f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f42:	3b30      	subs	r3, #48	@ 0x30
 8015f44:	2b09      	cmp	r3, #9
 8015f46:	d94b      	bls.n	8015fe0 <_svfiprintf_r+0x17c>
 8015f48:	b1b0      	cbz	r0, 8015f78 <_svfiprintf_r+0x114>
 8015f4a:	9207      	str	r2, [sp, #28]
 8015f4c:	e014      	b.n	8015f78 <_svfiprintf_r+0x114>
 8015f4e:	eba0 0308 	sub.w	r3, r0, r8
 8015f52:	fa09 f303 	lsl.w	r3, r9, r3
 8015f56:	4313      	orrs	r3, r2
 8015f58:	9304      	str	r3, [sp, #16]
 8015f5a:	46a2      	mov	sl, r4
 8015f5c:	e7d2      	b.n	8015f04 <_svfiprintf_r+0xa0>
 8015f5e:	9b03      	ldr	r3, [sp, #12]
 8015f60:	1d19      	adds	r1, r3, #4
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	9103      	str	r1, [sp, #12]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	bfbb      	ittet	lt
 8015f6a:	425b      	neglt	r3, r3
 8015f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8015f70:	9307      	strge	r3, [sp, #28]
 8015f72:	9307      	strlt	r3, [sp, #28]
 8015f74:	bfb8      	it	lt
 8015f76:	9204      	strlt	r2, [sp, #16]
 8015f78:	7823      	ldrb	r3, [r4, #0]
 8015f7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8015f7c:	d10a      	bne.n	8015f94 <_svfiprintf_r+0x130>
 8015f7e:	7863      	ldrb	r3, [r4, #1]
 8015f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8015f82:	d132      	bne.n	8015fea <_svfiprintf_r+0x186>
 8015f84:	9b03      	ldr	r3, [sp, #12]
 8015f86:	1d1a      	adds	r2, r3, #4
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	9203      	str	r2, [sp, #12]
 8015f8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015f90:	3402      	adds	r4, #2
 8015f92:	9305      	str	r3, [sp, #20]
 8015f94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016058 <_svfiprintf_r+0x1f4>
 8015f98:	7821      	ldrb	r1, [r4, #0]
 8015f9a:	2203      	movs	r2, #3
 8015f9c:	4650      	mov	r0, sl
 8015f9e:	f7ea f9c7 	bl	8000330 <memchr>
 8015fa2:	b138      	cbz	r0, 8015fb4 <_svfiprintf_r+0x150>
 8015fa4:	9b04      	ldr	r3, [sp, #16]
 8015fa6:	eba0 000a 	sub.w	r0, r0, sl
 8015faa:	2240      	movs	r2, #64	@ 0x40
 8015fac:	4082      	lsls	r2, r0
 8015fae:	4313      	orrs	r3, r2
 8015fb0:	3401      	adds	r4, #1
 8015fb2:	9304      	str	r3, [sp, #16]
 8015fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fb8:	4824      	ldr	r0, [pc, #144]	@ (801604c <_svfiprintf_r+0x1e8>)
 8015fba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015fbe:	2206      	movs	r2, #6
 8015fc0:	f7ea f9b6 	bl	8000330 <memchr>
 8015fc4:	2800      	cmp	r0, #0
 8015fc6:	d036      	beq.n	8016036 <_svfiprintf_r+0x1d2>
 8015fc8:	4b21      	ldr	r3, [pc, #132]	@ (8016050 <_svfiprintf_r+0x1ec>)
 8015fca:	bb1b      	cbnz	r3, 8016014 <_svfiprintf_r+0x1b0>
 8015fcc:	9b03      	ldr	r3, [sp, #12]
 8015fce:	3307      	adds	r3, #7
 8015fd0:	f023 0307 	bic.w	r3, r3, #7
 8015fd4:	3308      	adds	r3, #8
 8015fd6:	9303      	str	r3, [sp, #12]
 8015fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015fda:	4433      	add	r3, r6
 8015fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8015fde:	e76a      	b.n	8015eb6 <_svfiprintf_r+0x52>
 8015fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8015fe4:	460c      	mov	r4, r1
 8015fe6:	2001      	movs	r0, #1
 8015fe8:	e7a8      	b.n	8015f3c <_svfiprintf_r+0xd8>
 8015fea:	2300      	movs	r3, #0
 8015fec:	3401      	adds	r4, #1
 8015fee:	9305      	str	r3, [sp, #20]
 8015ff0:	4619      	mov	r1, r3
 8015ff2:	f04f 0c0a 	mov.w	ip, #10
 8015ff6:	4620      	mov	r0, r4
 8015ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ffc:	3a30      	subs	r2, #48	@ 0x30
 8015ffe:	2a09      	cmp	r2, #9
 8016000:	d903      	bls.n	801600a <_svfiprintf_r+0x1a6>
 8016002:	2b00      	cmp	r3, #0
 8016004:	d0c6      	beq.n	8015f94 <_svfiprintf_r+0x130>
 8016006:	9105      	str	r1, [sp, #20]
 8016008:	e7c4      	b.n	8015f94 <_svfiprintf_r+0x130>
 801600a:	fb0c 2101 	mla	r1, ip, r1, r2
 801600e:	4604      	mov	r4, r0
 8016010:	2301      	movs	r3, #1
 8016012:	e7f0      	b.n	8015ff6 <_svfiprintf_r+0x192>
 8016014:	ab03      	add	r3, sp, #12
 8016016:	9300      	str	r3, [sp, #0]
 8016018:	462a      	mov	r2, r5
 801601a:	4b0e      	ldr	r3, [pc, #56]	@ (8016054 <_svfiprintf_r+0x1f0>)
 801601c:	a904      	add	r1, sp, #16
 801601e:	4638      	mov	r0, r7
 8016020:	f7fd fa52 	bl	80134c8 <_printf_float>
 8016024:	1c42      	adds	r2, r0, #1
 8016026:	4606      	mov	r6, r0
 8016028:	d1d6      	bne.n	8015fd8 <_svfiprintf_r+0x174>
 801602a:	89ab      	ldrh	r3, [r5, #12]
 801602c:	065b      	lsls	r3, r3, #25
 801602e:	f53f af2d 	bmi.w	8015e8c <_svfiprintf_r+0x28>
 8016032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016034:	e72c      	b.n	8015e90 <_svfiprintf_r+0x2c>
 8016036:	ab03      	add	r3, sp, #12
 8016038:	9300      	str	r3, [sp, #0]
 801603a:	462a      	mov	r2, r5
 801603c:	4b05      	ldr	r3, [pc, #20]	@ (8016054 <_svfiprintf_r+0x1f0>)
 801603e:	a904      	add	r1, sp, #16
 8016040:	4638      	mov	r0, r7
 8016042:	f7fd fcc9 	bl	80139d8 <_printf_i>
 8016046:	e7ed      	b.n	8016024 <_svfiprintf_r+0x1c0>
 8016048:	08016d48 	.word	0x08016d48
 801604c:	08016d52 	.word	0x08016d52
 8016050:	080134c9 	.word	0x080134c9
 8016054:	08015dad 	.word	0x08015dad
 8016058:	08016d4e 	.word	0x08016d4e

0801605c <__sflush_r>:
 801605c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016064:	0716      	lsls	r6, r2, #28
 8016066:	4605      	mov	r5, r0
 8016068:	460c      	mov	r4, r1
 801606a:	d454      	bmi.n	8016116 <__sflush_r+0xba>
 801606c:	684b      	ldr	r3, [r1, #4]
 801606e:	2b00      	cmp	r3, #0
 8016070:	dc02      	bgt.n	8016078 <__sflush_r+0x1c>
 8016072:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016074:	2b00      	cmp	r3, #0
 8016076:	dd48      	ble.n	801610a <__sflush_r+0xae>
 8016078:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801607a:	2e00      	cmp	r6, #0
 801607c:	d045      	beq.n	801610a <__sflush_r+0xae>
 801607e:	2300      	movs	r3, #0
 8016080:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016084:	682f      	ldr	r7, [r5, #0]
 8016086:	6a21      	ldr	r1, [r4, #32]
 8016088:	602b      	str	r3, [r5, #0]
 801608a:	d030      	beq.n	80160ee <__sflush_r+0x92>
 801608c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801608e:	89a3      	ldrh	r3, [r4, #12]
 8016090:	0759      	lsls	r1, r3, #29
 8016092:	d505      	bpl.n	80160a0 <__sflush_r+0x44>
 8016094:	6863      	ldr	r3, [r4, #4]
 8016096:	1ad2      	subs	r2, r2, r3
 8016098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801609a:	b10b      	cbz	r3, 80160a0 <__sflush_r+0x44>
 801609c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801609e:	1ad2      	subs	r2, r2, r3
 80160a0:	2300      	movs	r3, #0
 80160a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80160a4:	6a21      	ldr	r1, [r4, #32]
 80160a6:	4628      	mov	r0, r5
 80160a8:	47b0      	blx	r6
 80160aa:	1c43      	adds	r3, r0, #1
 80160ac:	89a3      	ldrh	r3, [r4, #12]
 80160ae:	d106      	bne.n	80160be <__sflush_r+0x62>
 80160b0:	6829      	ldr	r1, [r5, #0]
 80160b2:	291d      	cmp	r1, #29
 80160b4:	d82b      	bhi.n	801610e <__sflush_r+0xb2>
 80160b6:	4a2a      	ldr	r2, [pc, #168]	@ (8016160 <__sflush_r+0x104>)
 80160b8:	410a      	asrs	r2, r1
 80160ba:	07d6      	lsls	r6, r2, #31
 80160bc:	d427      	bmi.n	801610e <__sflush_r+0xb2>
 80160be:	2200      	movs	r2, #0
 80160c0:	6062      	str	r2, [r4, #4]
 80160c2:	04d9      	lsls	r1, r3, #19
 80160c4:	6922      	ldr	r2, [r4, #16]
 80160c6:	6022      	str	r2, [r4, #0]
 80160c8:	d504      	bpl.n	80160d4 <__sflush_r+0x78>
 80160ca:	1c42      	adds	r2, r0, #1
 80160cc:	d101      	bne.n	80160d2 <__sflush_r+0x76>
 80160ce:	682b      	ldr	r3, [r5, #0]
 80160d0:	b903      	cbnz	r3, 80160d4 <__sflush_r+0x78>
 80160d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80160d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80160d6:	602f      	str	r7, [r5, #0]
 80160d8:	b1b9      	cbz	r1, 801610a <__sflush_r+0xae>
 80160da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80160de:	4299      	cmp	r1, r3
 80160e0:	d002      	beq.n	80160e8 <__sflush_r+0x8c>
 80160e2:	4628      	mov	r0, r5
 80160e4:	f7fe fd5a 	bl	8014b9c <_free_r>
 80160e8:	2300      	movs	r3, #0
 80160ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80160ec:	e00d      	b.n	801610a <__sflush_r+0xae>
 80160ee:	2301      	movs	r3, #1
 80160f0:	4628      	mov	r0, r5
 80160f2:	47b0      	blx	r6
 80160f4:	4602      	mov	r2, r0
 80160f6:	1c50      	adds	r0, r2, #1
 80160f8:	d1c9      	bne.n	801608e <__sflush_r+0x32>
 80160fa:	682b      	ldr	r3, [r5, #0]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d0c6      	beq.n	801608e <__sflush_r+0x32>
 8016100:	2b1d      	cmp	r3, #29
 8016102:	d001      	beq.n	8016108 <__sflush_r+0xac>
 8016104:	2b16      	cmp	r3, #22
 8016106:	d11e      	bne.n	8016146 <__sflush_r+0xea>
 8016108:	602f      	str	r7, [r5, #0]
 801610a:	2000      	movs	r0, #0
 801610c:	e022      	b.n	8016154 <__sflush_r+0xf8>
 801610e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016112:	b21b      	sxth	r3, r3
 8016114:	e01b      	b.n	801614e <__sflush_r+0xf2>
 8016116:	690f      	ldr	r7, [r1, #16]
 8016118:	2f00      	cmp	r7, #0
 801611a:	d0f6      	beq.n	801610a <__sflush_r+0xae>
 801611c:	0793      	lsls	r3, r2, #30
 801611e:	680e      	ldr	r6, [r1, #0]
 8016120:	bf08      	it	eq
 8016122:	694b      	ldreq	r3, [r1, #20]
 8016124:	600f      	str	r7, [r1, #0]
 8016126:	bf18      	it	ne
 8016128:	2300      	movne	r3, #0
 801612a:	eba6 0807 	sub.w	r8, r6, r7
 801612e:	608b      	str	r3, [r1, #8]
 8016130:	f1b8 0f00 	cmp.w	r8, #0
 8016134:	dde9      	ble.n	801610a <__sflush_r+0xae>
 8016136:	6a21      	ldr	r1, [r4, #32]
 8016138:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801613a:	4643      	mov	r3, r8
 801613c:	463a      	mov	r2, r7
 801613e:	4628      	mov	r0, r5
 8016140:	47b0      	blx	r6
 8016142:	2800      	cmp	r0, #0
 8016144:	dc08      	bgt.n	8016158 <__sflush_r+0xfc>
 8016146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801614a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801614e:	81a3      	strh	r3, [r4, #12]
 8016150:	f04f 30ff 	mov.w	r0, #4294967295
 8016154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016158:	4407      	add	r7, r0
 801615a:	eba8 0800 	sub.w	r8, r8, r0
 801615e:	e7e7      	b.n	8016130 <__sflush_r+0xd4>
 8016160:	dfbffffe 	.word	0xdfbffffe

08016164 <_fflush_r>:
 8016164:	b538      	push	{r3, r4, r5, lr}
 8016166:	690b      	ldr	r3, [r1, #16]
 8016168:	4605      	mov	r5, r0
 801616a:	460c      	mov	r4, r1
 801616c:	b913      	cbnz	r3, 8016174 <_fflush_r+0x10>
 801616e:	2500      	movs	r5, #0
 8016170:	4628      	mov	r0, r5
 8016172:	bd38      	pop	{r3, r4, r5, pc}
 8016174:	b118      	cbz	r0, 801617e <_fflush_r+0x1a>
 8016176:	6a03      	ldr	r3, [r0, #32]
 8016178:	b90b      	cbnz	r3, 801617e <_fflush_r+0x1a>
 801617a:	f7fd fdd9 	bl	8013d30 <__sinit>
 801617e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d0f3      	beq.n	801616e <_fflush_r+0xa>
 8016186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016188:	07d0      	lsls	r0, r2, #31
 801618a:	d404      	bmi.n	8016196 <_fflush_r+0x32>
 801618c:	0599      	lsls	r1, r3, #22
 801618e:	d402      	bmi.n	8016196 <_fflush_r+0x32>
 8016190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016192:	f7fd ff02 	bl	8013f9a <__retarget_lock_acquire_recursive>
 8016196:	4628      	mov	r0, r5
 8016198:	4621      	mov	r1, r4
 801619a:	f7ff ff5f 	bl	801605c <__sflush_r>
 801619e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80161a0:	07da      	lsls	r2, r3, #31
 80161a2:	4605      	mov	r5, r0
 80161a4:	d4e4      	bmi.n	8016170 <_fflush_r+0xc>
 80161a6:	89a3      	ldrh	r3, [r4, #12]
 80161a8:	059b      	lsls	r3, r3, #22
 80161aa:	d4e1      	bmi.n	8016170 <_fflush_r+0xc>
 80161ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80161ae:	f7fd fef5 	bl	8013f9c <__retarget_lock_release_recursive>
 80161b2:	e7dd      	b.n	8016170 <_fflush_r+0xc>

080161b4 <memmove>:
 80161b4:	4288      	cmp	r0, r1
 80161b6:	b510      	push	{r4, lr}
 80161b8:	eb01 0402 	add.w	r4, r1, r2
 80161bc:	d902      	bls.n	80161c4 <memmove+0x10>
 80161be:	4284      	cmp	r4, r0
 80161c0:	4623      	mov	r3, r4
 80161c2:	d807      	bhi.n	80161d4 <memmove+0x20>
 80161c4:	1e43      	subs	r3, r0, #1
 80161c6:	42a1      	cmp	r1, r4
 80161c8:	d008      	beq.n	80161dc <memmove+0x28>
 80161ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80161ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80161d2:	e7f8      	b.n	80161c6 <memmove+0x12>
 80161d4:	4402      	add	r2, r0
 80161d6:	4601      	mov	r1, r0
 80161d8:	428a      	cmp	r2, r1
 80161da:	d100      	bne.n	80161de <memmove+0x2a>
 80161dc:	bd10      	pop	{r4, pc}
 80161de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80161e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80161e6:	e7f7      	b.n	80161d8 <memmove+0x24>

080161e8 <_sbrk_r>:
 80161e8:	b538      	push	{r3, r4, r5, lr}
 80161ea:	4d06      	ldr	r5, [pc, #24]	@ (8016204 <_sbrk_r+0x1c>)
 80161ec:	2300      	movs	r3, #0
 80161ee:	4604      	mov	r4, r0
 80161f0:	4608      	mov	r0, r1
 80161f2:	602b      	str	r3, [r5, #0]
 80161f4:	f7ec f83a 	bl	800226c <_sbrk>
 80161f8:	1c43      	adds	r3, r0, #1
 80161fa:	d102      	bne.n	8016202 <_sbrk_r+0x1a>
 80161fc:	682b      	ldr	r3, [r5, #0]
 80161fe:	b103      	cbz	r3, 8016202 <_sbrk_r+0x1a>
 8016200:	6023      	str	r3, [r4, #0]
 8016202:	bd38      	pop	{r3, r4, r5, pc}
 8016204:	24006020 	.word	0x24006020

08016208 <__assert_func>:
 8016208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801620a:	4614      	mov	r4, r2
 801620c:	461a      	mov	r2, r3
 801620e:	4b09      	ldr	r3, [pc, #36]	@ (8016234 <__assert_func+0x2c>)
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	4605      	mov	r5, r0
 8016214:	68d8      	ldr	r0, [r3, #12]
 8016216:	b954      	cbnz	r4, 801622e <__assert_func+0x26>
 8016218:	4b07      	ldr	r3, [pc, #28]	@ (8016238 <__assert_func+0x30>)
 801621a:	461c      	mov	r4, r3
 801621c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016220:	9100      	str	r1, [sp, #0]
 8016222:	462b      	mov	r3, r5
 8016224:	4905      	ldr	r1, [pc, #20]	@ (801623c <__assert_func+0x34>)
 8016226:	f000 f84f 	bl	80162c8 <fiprintf>
 801622a:	f000 f85f 	bl	80162ec <abort>
 801622e:	4b04      	ldr	r3, [pc, #16]	@ (8016240 <__assert_func+0x38>)
 8016230:	e7f4      	b.n	801621c <__assert_func+0x14>
 8016232:	bf00      	nop
 8016234:	2400027c 	.word	0x2400027c
 8016238:	08016d94 	.word	0x08016d94
 801623c:	08016d66 	.word	0x08016d66
 8016240:	08016d59 	.word	0x08016d59

08016244 <_calloc_r>:
 8016244:	b570      	push	{r4, r5, r6, lr}
 8016246:	fba1 5402 	umull	r5, r4, r1, r2
 801624a:	b93c      	cbnz	r4, 801625c <_calloc_r+0x18>
 801624c:	4629      	mov	r1, r5
 801624e:	f7ff f853 	bl	80152f8 <_malloc_r>
 8016252:	4606      	mov	r6, r0
 8016254:	b928      	cbnz	r0, 8016262 <_calloc_r+0x1e>
 8016256:	2600      	movs	r6, #0
 8016258:	4630      	mov	r0, r6
 801625a:	bd70      	pop	{r4, r5, r6, pc}
 801625c:	220c      	movs	r2, #12
 801625e:	6002      	str	r2, [r0, #0]
 8016260:	e7f9      	b.n	8016256 <_calloc_r+0x12>
 8016262:	462a      	mov	r2, r5
 8016264:	4621      	mov	r1, r4
 8016266:	f7fd fdfc 	bl	8013e62 <memset>
 801626a:	e7f5      	b.n	8016258 <_calloc_r+0x14>

0801626c <_realloc_r>:
 801626c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016270:	4680      	mov	r8, r0
 8016272:	4615      	mov	r5, r2
 8016274:	460c      	mov	r4, r1
 8016276:	b921      	cbnz	r1, 8016282 <_realloc_r+0x16>
 8016278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801627c:	4611      	mov	r1, r2
 801627e:	f7ff b83b 	b.w	80152f8 <_malloc_r>
 8016282:	b92a      	cbnz	r2, 8016290 <_realloc_r+0x24>
 8016284:	f7fe fc8a 	bl	8014b9c <_free_r>
 8016288:	2400      	movs	r4, #0
 801628a:	4620      	mov	r0, r4
 801628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016290:	f000 f833 	bl	80162fa <_malloc_usable_size_r>
 8016294:	4285      	cmp	r5, r0
 8016296:	4606      	mov	r6, r0
 8016298:	d802      	bhi.n	80162a0 <_realloc_r+0x34>
 801629a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801629e:	d8f4      	bhi.n	801628a <_realloc_r+0x1e>
 80162a0:	4629      	mov	r1, r5
 80162a2:	4640      	mov	r0, r8
 80162a4:	f7ff f828 	bl	80152f8 <_malloc_r>
 80162a8:	4607      	mov	r7, r0
 80162aa:	2800      	cmp	r0, #0
 80162ac:	d0ec      	beq.n	8016288 <_realloc_r+0x1c>
 80162ae:	42b5      	cmp	r5, r6
 80162b0:	462a      	mov	r2, r5
 80162b2:	4621      	mov	r1, r4
 80162b4:	bf28      	it	cs
 80162b6:	4632      	movcs	r2, r6
 80162b8:	f7fd fe79 	bl	8013fae <memcpy>
 80162bc:	4621      	mov	r1, r4
 80162be:	4640      	mov	r0, r8
 80162c0:	f7fe fc6c 	bl	8014b9c <_free_r>
 80162c4:	463c      	mov	r4, r7
 80162c6:	e7e0      	b.n	801628a <_realloc_r+0x1e>

080162c8 <fiprintf>:
 80162c8:	b40e      	push	{r1, r2, r3}
 80162ca:	b503      	push	{r0, r1, lr}
 80162cc:	4601      	mov	r1, r0
 80162ce:	ab03      	add	r3, sp, #12
 80162d0:	4805      	ldr	r0, [pc, #20]	@ (80162e8 <fiprintf+0x20>)
 80162d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80162d6:	6800      	ldr	r0, [r0, #0]
 80162d8:	9301      	str	r3, [sp, #4]
 80162da:	f000 f83f 	bl	801635c <_vfiprintf_r>
 80162de:	b002      	add	sp, #8
 80162e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80162e4:	b003      	add	sp, #12
 80162e6:	4770      	bx	lr
 80162e8:	2400027c 	.word	0x2400027c

080162ec <abort>:
 80162ec:	b508      	push	{r3, lr}
 80162ee:	2006      	movs	r0, #6
 80162f0:	f000 fa08 	bl	8016704 <raise>
 80162f4:	2001      	movs	r0, #1
 80162f6:	f7eb ff41 	bl	800217c <_exit>

080162fa <_malloc_usable_size_r>:
 80162fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162fe:	1f18      	subs	r0, r3, #4
 8016300:	2b00      	cmp	r3, #0
 8016302:	bfbc      	itt	lt
 8016304:	580b      	ldrlt	r3, [r1, r0]
 8016306:	18c0      	addlt	r0, r0, r3
 8016308:	4770      	bx	lr

0801630a <__sfputc_r>:
 801630a:	6893      	ldr	r3, [r2, #8]
 801630c:	3b01      	subs	r3, #1
 801630e:	2b00      	cmp	r3, #0
 8016310:	b410      	push	{r4}
 8016312:	6093      	str	r3, [r2, #8]
 8016314:	da08      	bge.n	8016328 <__sfputc_r+0x1e>
 8016316:	6994      	ldr	r4, [r2, #24]
 8016318:	42a3      	cmp	r3, r4
 801631a:	db01      	blt.n	8016320 <__sfputc_r+0x16>
 801631c:	290a      	cmp	r1, #10
 801631e:	d103      	bne.n	8016328 <__sfputc_r+0x1e>
 8016320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016324:	f000 b932 	b.w	801658c <__swbuf_r>
 8016328:	6813      	ldr	r3, [r2, #0]
 801632a:	1c58      	adds	r0, r3, #1
 801632c:	6010      	str	r0, [r2, #0]
 801632e:	7019      	strb	r1, [r3, #0]
 8016330:	4608      	mov	r0, r1
 8016332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016336:	4770      	bx	lr

08016338 <__sfputs_r>:
 8016338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801633a:	4606      	mov	r6, r0
 801633c:	460f      	mov	r7, r1
 801633e:	4614      	mov	r4, r2
 8016340:	18d5      	adds	r5, r2, r3
 8016342:	42ac      	cmp	r4, r5
 8016344:	d101      	bne.n	801634a <__sfputs_r+0x12>
 8016346:	2000      	movs	r0, #0
 8016348:	e007      	b.n	801635a <__sfputs_r+0x22>
 801634a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801634e:	463a      	mov	r2, r7
 8016350:	4630      	mov	r0, r6
 8016352:	f7ff ffda 	bl	801630a <__sfputc_r>
 8016356:	1c43      	adds	r3, r0, #1
 8016358:	d1f3      	bne.n	8016342 <__sfputs_r+0xa>
 801635a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801635c <_vfiprintf_r>:
 801635c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016360:	460d      	mov	r5, r1
 8016362:	b09d      	sub	sp, #116	@ 0x74
 8016364:	4614      	mov	r4, r2
 8016366:	4698      	mov	r8, r3
 8016368:	4606      	mov	r6, r0
 801636a:	b118      	cbz	r0, 8016374 <_vfiprintf_r+0x18>
 801636c:	6a03      	ldr	r3, [r0, #32]
 801636e:	b90b      	cbnz	r3, 8016374 <_vfiprintf_r+0x18>
 8016370:	f7fd fcde 	bl	8013d30 <__sinit>
 8016374:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016376:	07d9      	lsls	r1, r3, #31
 8016378:	d405      	bmi.n	8016386 <_vfiprintf_r+0x2a>
 801637a:	89ab      	ldrh	r3, [r5, #12]
 801637c:	059a      	lsls	r2, r3, #22
 801637e:	d402      	bmi.n	8016386 <_vfiprintf_r+0x2a>
 8016380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016382:	f7fd fe0a 	bl	8013f9a <__retarget_lock_acquire_recursive>
 8016386:	89ab      	ldrh	r3, [r5, #12]
 8016388:	071b      	lsls	r3, r3, #28
 801638a:	d501      	bpl.n	8016390 <_vfiprintf_r+0x34>
 801638c:	692b      	ldr	r3, [r5, #16]
 801638e:	b99b      	cbnz	r3, 80163b8 <_vfiprintf_r+0x5c>
 8016390:	4629      	mov	r1, r5
 8016392:	4630      	mov	r0, r6
 8016394:	f000 f938 	bl	8016608 <__swsetup_r>
 8016398:	b170      	cbz	r0, 80163b8 <_vfiprintf_r+0x5c>
 801639a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801639c:	07dc      	lsls	r4, r3, #31
 801639e:	d504      	bpl.n	80163aa <_vfiprintf_r+0x4e>
 80163a0:	f04f 30ff 	mov.w	r0, #4294967295
 80163a4:	b01d      	add	sp, #116	@ 0x74
 80163a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163aa:	89ab      	ldrh	r3, [r5, #12]
 80163ac:	0598      	lsls	r0, r3, #22
 80163ae:	d4f7      	bmi.n	80163a0 <_vfiprintf_r+0x44>
 80163b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80163b2:	f7fd fdf3 	bl	8013f9c <__retarget_lock_release_recursive>
 80163b6:	e7f3      	b.n	80163a0 <_vfiprintf_r+0x44>
 80163b8:	2300      	movs	r3, #0
 80163ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80163bc:	2320      	movs	r3, #32
 80163be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80163c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80163c6:	2330      	movs	r3, #48	@ 0x30
 80163c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016578 <_vfiprintf_r+0x21c>
 80163cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80163d0:	f04f 0901 	mov.w	r9, #1
 80163d4:	4623      	mov	r3, r4
 80163d6:	469a      	mov	sl, r3
 80163d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163dc:	b10a      	cbz	r2, 80163e2 <_vfiprintf_r+0x86>
 80163de:	2a25      	cmp	r2, #37	@ 0x25
 80163e0:	d1f9      	bne.n	80163d6 <_vfiprintf_r+0x7a>
 80163e2:	ebba 0b04 	subs.w	fp, sl, r4
 80163e6:	d00b      	beq.n	8016400 <_vfiprintf_r+0xa4>
 80163e8:	465b      	mov	r3, fp
 80163ea:	4622      	mov	r2, r4
 80163ec:	4629      	mov	r1, r5
 80163ee:	4630      	mov	r0, r6
 80163f0:	f7ff ffa2 	bl	8016338 <__sfputs_r>
 80163f4:	3001      	adds	r0, #1
 80163f6:	f000 80a7 	beq.w	8016548 <_vfiprintf_r+0x1ec>
 80163fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80163fc:	445a      	add	r2, fp
 80163fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8016400:	f89a 3000 	ldrb.w	r3, [sl]
 8016404:	2b00      	cmp	r3, #0
 8016406:	f000 809f 	beq.w	8016548 <_vfiprintf_r+0x1ec>
 801640a:	2300      	movs	r3, #0
 801640c:	f04f 32ff 	mov.w	r2, #4294967295
 8016410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016414:	f10a 0a01 	add.w	sl, sl, #1
 8016418:	9304      	str	r3, [sp, #16]
 801641a:	9307      	str	r3, [sp, #28]
 801641c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016420:	931a      	str	r3, [sp, #104]	@ 0x68
 8016422:	4654      	mov	r4, sl
 8016424:	2205      	movs	r2, #5
 8016426:	f814 1b01 	ldrb.w	r1, [r4], #1
 801642a:	4853      	ldr	r0, [pc, #332]	@ (8016578 <_vfiprintf_r+0x21c>)
 801642c:	f7e9 ff80 	bl	8000330 <memchr>
 8016430:	9a04      	ldr	r2, [sp, #16]
 8016432:	b9d8      	cbnz	r0, 801646c <_vfiprintf_r+0x110>
 8016434:	06d1      	lsls	r1, r2, #27
 8016436:	bf44      	itt	mi
 8016438:	2320      	movmi	r3, #32
 801643a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801643e:	0713      	lsls	r3, r2, #28
 8016440:	bf44      	itt	mi
 8016442:	232b      	movmi	r3, #43	@ 0x2b
 8016444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016448:	f89a 3000 	ldrb.w	r3, [sl]
 801644c:	2b2a      	cmp	r3, #42	@ 0x2a
 801644e:	d015      	beq.n	801647c <_vfiprintf_r+0x120>
 8016450:	9a07      	ldr	r2, [sp, #28]
 8016452:	4654      	mov	r4, sl
 8016454:	2000      	movs	r0, #0
 8016456:	f04f 0c0a 	mov.w	ip, #10
 801645a:	4621      	mov	r1, r4
 801645c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016460:	3b30      	subs	r3, #48	@ 0x30
 8016462:	2b09      	cmp	r3, #9
 8016464:	d94b      	bls.n	80164fe <_vfiprintf_r+0x1a2>
 8016466:	b1b0      	cbz	r0, 8016496 <_vfiprintf_r+0x13a>
 8016468:	9207      	str	r2, [sp, #28]
 801646a:	e014      	b.n	8016496 <_vfiprintf_r+0x13a>
 801646c:	eba0 0308 	sub.w	r3, r0, r8
 8016470:	fa09 f303 	lsl.w	r3, r9, r3
 8016474:	4313      	orrs	r3, r2
 8016476:	9304      	str	r3, [sp, #16]
 8016478:	46a2      	mov	sl, r4
 801647a:	e7d2      	b.n	8016422 <_vfiprintf_r+0xc6>
 801647c:	9b03      	ldr	r3, [sp, #12]
 801647e:	1d19      	adds	r1, r3, #4
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	9103      	str	r1, [sp, #12]
 8016484:	2b00      	cmp	r3, #0
 8016486:	bfbb      	ittet	lt
 8016488:	425b      	neglt	r3, r3
 801648a:	f042 0202 	orrlt.w	r2, r2, #2
 801648e:	9307      	strge	r3, [sp, #28]
 8016490:	9307      	strlt	r3, [sp, #28]
 8016492:	bfb8      	it	lt
 8016494:	9204      	strlt	r2, [sp, #16]
 8016496:	7823      	ldrb	r3, [r4, #0]
 8016498:	2b2e      	cmp	r3, #46	@ 0x2e
 801649a:	d10a      	bne.n	80164b2 <_vfiprintf_r+0x156>
 801649c:	7863      	ldrb	r3, [r4, #1]
 801649e:	2b2a      	cmp	r3, #42	@ 0x2a
 80164a0:	d132      	bne.n	8016508 <_vfiprintf_r+0x1ac>
 80164a2:	9b03      	ldr	r3, [sp, #12]
 80164a4:	1d1a      	adds	r2, r3, #4
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	9203      	str	r2, [sp, #12]
 80164aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80164ae:	3402      	adds	r4, #2
 80164b0:	9305      	str	r3, [sp, #20]
 80164b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016588 <_vfiprintf_r+0x22c>
 80164b6:	7821      	ldrb	r1, [r4, #0]
 80164b8:	2203      	movs	r2, #3
 80164ba:	4650      	mov	r0, sl
 80164bc:	f7e9 ff38 	bl	8000330 <memchr>
 80164c0:	b138      	cbz	r0, 80164d2 <_vfiprintf_r+0x176>
 80164c2:	9b04      	ldr	r3, [sp, #16]
 80164c4:	eba0 000a 	sub.w	r0, r0, sl
 80164c8:	2240      	movs	r2, #64	@ 0x40
 80164ca:	4082      	lsls	r2, r0
 80164cc:	4313      	orrs	r3, r2
 80164ce:	3401      	adds	r4, #1
 80164d0:	9304      	str	r3, [sp, #16]
 80164d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164d6:	4829      	ldr	r0, [pc, #164]	@ (801657c <_vfiprintf_r+0x220>)
 80164d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80164dc:	2206      	movs	r2, #6
 80164de:	f7e9 ff27 	bl	8000330 <memchr>
 80164e2:	2800      	cmp	r0, #0
 80164e4:	d03f      	beq.n	8016566 <_vfiprintf_r+0x20a>
 80164e6:	4b26      	ldr	r3, [pc, #152]	@ (8016580 <_vfiprintf_r+0x224>)
 80164e8:	bb1b      	cbnz	r3, 8016532 <_vfiprintf_r+0x1d6>
 80164ea:	9b03      	ldr	r3, [sp, #12]
 80164ec:	3307      	adds	r3, #7
 80164ee:	f023 0307 	bic.w	r3, r3, #7
 80164f2:	3308      	adds	r3, #8
 80164f4:	9303      	str	r3, [sp, #12]
 80164f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164f8:	443b      	add	r3, r7
 80164fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80164fc:	e76a      	b.n	80163d4 <_vfiprintf_r+0x78>
 80164fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8016502:	460c      	mov	r4, r1
 8016504:	2001      	movs	r0, #1
 8016506:	e7a8      	b.n	801645a <_vfiprintf_r+0xfe>
 8016508:	2300      	movs	r3, #0
 801650a:	3401      	adds	r4, #1
 801650c:	9305      	str	r3, [sp, #20]
 801650e:	4619      	mov	r1, r3
 8016510:	f04f 0c0a 	mov.w	ip, #10
 8016514:	4620      	mov	r0, r4
 8016516:	f810 2b01 	ldrb.w	r2, [r0], #1
 801651a:	3a30      	subs	r2, #48	@ 0x30
 801651c:	2a09      	cmp	r2, #9
 801651e:	d903      	bls.n	8016528 <_vfiprintf_r+0x1cc>
 8016520:	2b00      	cmp	r3, #0
 8016522:	d0c6      	beq.n	80164b2 <_vfiprintf_r+0x156>
 8016524:	9105      	str	r1, [sp, #20]
 8016526:	e7c4      	b.n	80164b2 <_vfiprintf_r+0x156>
 8016528:	fb0c 2101 	mla	r1, ip, r1, r2
 801652c:	4604      	mov	r4, r0
 801652e:	2301      	movs	r3, #1
 8016530:	e7f0      	b.n	8016514 <_vfiprintf_r+0x1b8>
 8016532:	ab03      	add	r3, sp, #12
 8016534:	9300      	str	r3, [sp, #0]
 8016536:	462a      	mov	r2, r5
 8016538:	4b12      	ldr	r3, [pc, #72]	@ (8016584 <_vfiprintf_r+0x228>)
 801653a:	a904      	add	r1, sp, #16
 801653c:	4630      	mov	r0, r6
 801653e:	f7fc ffc3 	bl	80134c8 <_printf_float>
 8016542:	4607      	mov	r7, r0
 8016544:	1c78      	adds	r0, r7, #1
 8016546:	d1d6      	bne.n	80164f6 <_vfiprintf_r+0x19a>
 8016548:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801654a:	07d9      	lsls	r1, r3, #31
 801654c:	d405      	bmi.n	801655a <_vfiprintf_r+0x1fe>
 801654e:	89ab      	ldrh	r3, [r5, #12]
 8016550:	059a      	lsls	r2, r3, #22
 8016552:	d402      	bmi.n	801655a <_vfiprintf_r+0x1fe>
 8016554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016556:	f7fd fd21 	bl	8013f9c <__retarget_lock_release_recursive>
 801655a:	89ab      	ldrh	r3, [r5, #12]
 801655c:	065b      	lsls	r3, r3, #25
 801655e:	f53f af1f 	bmi.w	80163a0 <_vfiprintf_r+0x44>
 8016562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016564:	e71e      	b.n	80163a4 <_vfiprintf_r+0x48>
 8016566:	ab03      	add	r3, sp, #12
 8016568:	9300      	str	r3, [sp, #0]
 801656a:	462a      	mov	r2, r5
 801656c:	4b05      	ldr	r3, [pc, #20]	@ (8016584 <_vfiprintf_r+0x228>)
 801656e:	a904      	add	r1, sp, #16
 8016570:	4630      	mov	r0, r6
 8016572:	f7fd fa31 	bl	80139d8 <_printf_i>
 8016576:	e7e4      	b.n	8016542 <_vfiprintf_r+0x1e6>
 8016578:	08016d48 	.word	0x08016d48
 801657c:	08016d52 	.word	0x08016d52
 8016580:	080134c9 	.word	0x080134c9
 8016584:	08016339 	.word	0x08016339
 8016588:	08016d4e 	.word	0x08016d4e

0801658c <__swbuf_r>:
 801658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801658e:	460e      	mov	r6, r1
 8016590:	4614      	mov	r4, r2
 8016592:	4605      	mov	r5, r0
 8016594:	b118      	cbz	r0, 801659e <__swbuf_r+0x12>
 8016596:	6a03      	ldr	r3, [r0, #32]
 8016598:	b90b      	cbnz	r3, 801659e <__swbuf_r+0x12>
 801659a:	f7fd fbc9 	bl	8013d30 <__sinit>
 801659e:	69a3      	ldr	r3, [r4, #24]
 80165a0:	60a3      	str	r3, [r4, #8]
 80165a2:	89a3      	ldrh	r3, [r4, #12]
 80165a4:	071a      	lsls	r2, r3, #28
 80165a6:	d501      	bpl.n	80165ac <__swbuf_r+0x20>
 80165a8:	6923      	ldr	r3, [r4, #16]
 80165aa:	b943      	cbnz	r3, 80165be <__swbuf_r+0x32>
 80165ac:	4621      	mov	r1, r4
 80165ae:	4628      	mov	r0, r5
 80165b0:	f000 f82a 	bl	8016608 <__swsetup_r>
 80165b4:	b118      	cbz	r0, 80165be <__swbuf_r+0x32>
 80165b6:	f04f 37ff 	mov.w	r7, #4294967295
 80165ba:	4638      	mov	r0, r7
 80165bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165be:	6823      	ldr	r3, [r4, #0]
 80165c0:	6922      	ldr	r2, [r4, #16]
 80165c2:	1a98      	subs	r0, r3, r2
 80165c4:	6963      	ldr	r3, [r4, #20]
 80165c6:	b2f6      	uxtb	r6, r6
 80165c8:	4283      	cmp	r3, r0
 80165ca:	4637      	mov	r7, r6
 80165cc:	dc05      	bgt.n	80165da <__swbuf_r+0x4e>
 80165ce:	4621      	mov	r1, r4
 80165d0:	4628      	mov	r0, r5
 80165d2:	f7ff fdc7 	bl	8016164 <_fflush_r>
 80165d6:	2800      	cmp	r0, #0
 80165d8:	d1ed      	bne.n	80165b6 <__swbuf_r+0x2a>
 80165da:	68a3      	ldr	r3, [r4, #8]
 80165dc:	3b01      	subs	r3, #1
 80165de:	60a3      	str	r3, [r4, #8]
 80165e0:	6823      	ldr	r3, [r4, #0]
 80165e2:	1c5a      	adds	r2, r3, #1
 80165e4:	6022      	str	r2, [r4, #0]
 80165e6:	701e      	strb	r6, [r3, #0]
 80165e8:	6962      	ldr	r2, [r4, #20]
 80165ea:	1c43      	adds	r3, r0, #1
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d004      	beq.n	80165fa <__swbuf_r+0x6e>
 80165f0:	89a3      	ldrh	r3, [r4, #12]
 80165f2:	07db      	lsls	r3, r3, #31
 80165f4:	d5e1      	bpl.n	80165ba <__swbuf_r+0x2e>
 80165f6:	2e0a      	cmp	r6, #10
 80165f8:	d1df      	bne.n	80165ba <__swbuf_r+0x2e>
 80165fa:	4621      	mov	r1, r4
 80165fc:	4628      	mov	r0, r5
 80165fe:	f7ff fdb1 	bl	8016164 <_fflush_r>
 8016602:	2800      	cmp	r0, #0
 8016604:	d0d9      	beq.n	80165ba <__swbuf_r+0x2e>
 8016606:	e7d6      	b.n	80165b6 <__swbuf_r+0x2a>

08016608 <__swsetup_r>:
 8016608:	b538      	push	{r3, r4, r5, lr}
 801660a:	4b29      	ldr	r3, [pc, #164]	@ (80166b0 <__swsetup_r+0xa8>)
 801660c:	4605      	mov	r5, r0
 801660e:	6818      	ldr	r0, [r3, #0]
 8016610:	460c      	mov	r4, r1
 8016612:	b118      	cbz	r0, 801661c <__swsetup_r+0x14>
 8016614:	6a03      	ldr	r3, [r0, #32]
 8016616:	b90b      	cbnz	r3, 801661c <__swsetup_r+0x14>
 8016618:	f7fd fb8a 	bl	8013d30 <__sinit>
 801661c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016620:	0719      	lsls	r1, r3, #28
 8016622:	d422      	bmi.n	801666a <__swsetup_r+0x62>
 8016624:	06da      	lsls	r2, r3, #27
 8016626:	d407      	bmi.n	8016638 <__swsetup_r+0x30>
 8016628:	2209      	movs	r2, #9
 801662a:	602a      	str	r2, [r5, #0]
 801662c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016630:	81a3      	strh	r3, [r4, #12]
 8016632:	f04f 30ff 	mov.w	r0, #4294967295
 8016636:	e033      	b.n	80166a0 <__swsetup_r+0x98>
 8016638:	0758      	lsls	r0, r3, #29
 801663a:	d512      	bpl.n	8016662 <__swsetup_r+0x5a>
 801663c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801663e:	b141      	cbz	r1, 8016652 <__swsetup_r+0x4a>
 8016640:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016644:	4299      	cmp	r1, r3
 8016646:	d002      	beq.n	801664e <__swsetup_r+0x46>
 8016648:	4628      	mov	r0, r5
 801664a:	f7fe faa7 	bl	8014b9c <_free_r>
 801664e:	2300      	movs	r3, #0
 8016650:	6363      	str	r3, [r4, #52]	@ 0x34
 8016652:	89a3      	ldrh	r3, [r4, #12]
 8016654:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016658:	81a3      	strh	r3, [r4, #12]
 801665a:	2300      	movs	r3, #0
 801665c:	6063      	str	r3, [r4, #4]
 801665e:	6923      	ldr	r3, [r4, #16]
 8016660:	6023      	str	r3, [r4, #0]
 8016662:	89a3      	ldrh	r3, [r4, #12]
 8016664:	f043 0308 	orr.w	r3, r3, #8
 8016668:	81a3      	strh	r3, [r4, #12]
 801666a:	6923      	ldr	r3, [r4, #16]
 801666c:	b94b      	cbnz	r3, 8016682 <__swsetup_r+0x7a>
 801666e:	89a3      	ldrh	r3, [r4, #12]
 8016670:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016678:	d003      	beq.n	8016682 <__swsetup_r+0x7a>
 801667a:	4621      	mov	r1, r4
 801667c:	4628      	mov	r0, r5
 801667e:	f000 f883 	bl	8016788 <__smakebuf_r>
 8016682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016686:	f013 0201 	ands.w	r2, r3, #1
 801668a:	d00a      	beq.n	80166a2 <__swsetup_r+0x9a>
 801668c:	2200      	movs	r2, #0
 801668e:	60a2      	str	r2, [r4, #8]
 8016690:	6962      	ldr	r2, [r4, #20]
 8016692:	4252      	negs	r2, r2
 8016694:	61a2      	str	r2, [r4, #24]
 8016696:	6922      	ldr	r2, [r4, #16]
 8016698:	b942      	cbnz	r2, 80166ac <__swsetup_r+0xa4>
 801669a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801669e:	d1c5      	bne.n	801662c <__swsetup_r+0x24>
 80166a0:	bd38      	pop	{r3, r4, r5, pc}
 80166a2:	0799      	lsls	r1, r3, #30
 80166a4:	bf58      	it	pl
 80166a6:	6962      	ldrpl	r2, [r4, #20]
 80166a8:	60a2      	str	r2, [r4, #8]
 80166aa:	e7f4      	b.n	8016696 <__swsetup_r+0x8e>
 80166ac:	2000      	movs	r0, #0
 80166ae:	e7f7      	b.n	80166a0 <__swsetup_r+0x98>
 80166b0:	2400027c 	.word	0x2400027c

080166b4 <_raise_r>:
 80166b4:	291f      	cmp	r1, #31
 80166b6:	b538      	push	{r3, r4, r5, lr}
 80166b8:	4605      	mov	r5, r0
 80166ba:	460c      	mov	r4, r1
 80166bc:	d904      	bls.n	80166c8 <_raise_r+0x14>
 80166be:	2316      	movs	r3, #22
 80166c0:	6003      	str	r3, [r0, #0]
 80166c2:	f04f 30ff 	mov.w	r0, #4294967295
 80166c6:	bd38      	pop	{r3, r4, r5, pc}
 80166c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80166ca:	b112      	cbz	r2, 80166d2 <_raise_r+0x1e>
 80166cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80166d0:	b94b      	cbnz	r3, 80166e6 <_raise_r+0x32>
 80166d2:	4628      	mov	r0, r5
 80166d4:	f000 f830 	bl	8016738 <_getpid_r>
 80166d8:	4622      	mov	r2, r4
 80166da:	4601      	mov	r1, r0
 80166dc:	4628      	mov	r0, r5
 80166de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166e2:	f000 b817 	b.w	8016714 <_kill_r>
 80166e6:	2b01      	cmp	r3, #1
 80166e8:	d00a      	beq.n	8016700 <_raise_r+0x4c>
 80166ea:	1c59      	adds	r1, r3, #1
 80166ec:	d103      	bne.n	80166f6 <_raise_r+0x42>
 80166ee:	2316      	movs	r3, #22
 80166f0:	6003      	str	r3, [r0, #0]
 80166f2:	2001      	movs	r0, #1
 80166f4:	e7e7      	b.n	80166c6 <_raise_r+0x12>
 80166f6:	2100      	movs	r1, #0
 80166f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80166fc:	4620      	mov	r0, r4
 80166fe:	4798      	blx	r3
 8016700:	2000      	movs	r0, #0
 8016702:	e7e0      	b.n	80166c6 <_raise_r+0x12>

08016704 <raise>:
 8016704:	4b02      	ldr	r3, [pc, #8]	@ (8016710 <raise+0xc>)
 8016706:	4601      	mov	r1, r0
 8016708:	6818      	ldr	r0, [r3, #0]
 801670a:	f7ff bfd3 	b.w	80166b4 <_raise_r>
 801670e:	bf00      	nop
 8016710:	2400027c 	.word	0x2400027c

08016714 <_kill_r>:
 8016714:	b538      	push	{r3, r4, r5, lr}
 8016716:	4d07      	ldr	r5, [pc, #28]	@ (8016734 <_kill_r+0x20>)
 8016718:	2300      	movs	r3, #0
 801671a:	4604      	mov	r4, r0
 801671c:	4608      	mov	r0, r1
 801671e:	4611      	mov	r1, r2
 8016720:	602b      	str	r3, [r5, #0]
 8016722:	f7eb fd1b 	bl	800215c <_kill>
 8016726:	1c43      	adds	r3, r0, #1
 8016728:	d102      	bne.n	8016730 <_kill_r+0x1c>
 801672a:	682b      	ldr	r3, [r5, #0]
 801672c:	b103      	cbz	r3, 8016730 <_kill_r+0x1c>
 801672e:	6023      	str	r3, [r4, #0]
 8016730:	bd38      	pop	{r3, r4, r5, pc}
 8016732:	bf00      	nop
 8016734:	24006020 	.word	0x24006020

08016738 <_getpid_r>:
 8016738:	f7eb bd08 	b.w	800214c <_getpid>

0801673c <__swhatbuf_r>:
 801673c:	b570      	push	{r4, r5, r6, lr}
 801673e:	460c      	mov	r4, r1
 8016740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016744:	2900      	cmp	r1, #0
 8016746:	b096      	sub	sp, #88	@ 0x58
 8016748:	4615      	mov	r5, r2
 801674a:	461e      	mov	r6, r3
 801674c:	da0d      	bge.n	801676a <__swhatbuf_r+0x2e>
 801674e:	89a3      	ldrh	r3, [r4, #12]
 8016750:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016754:	f04f 0100 	mov.w	r1, #0
 8016758:	bf14      	ite	ne
 801675a:	2340      	movne	r3, #64	@ 0x40
 801675c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016760:	2000      	movs	r0, #0
 8016762:	6031      	str	r1, [r6, #0]
 8016764:	602b      	str	r3, [r5, #0]
 8016766:	b016      	add	sp, #88	@ 0x58
 8016768:	bd70      	pop	{r4, r5, r6, pc}
 801676a:	466a      	mov	r2, sp
 801676c:	f000 f848 	bl	8016800 <_fstat_r>
 8016770:	2800      	cmp	r0, #0
 8016772:	dbec      	blt.n	801674e <__swhatbuf_r+0x12>
 8016774:	9901      	ldr	r1, [sp, #4]
 8016776:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801677a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801677e:	4259      	negs	r1, r3
 8016780:	4159      	adcs	r1, r3
 8016782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016786:	e7eb      	b.n	8016760 <__swhatbuf_r+0x24>

08016788 <__smakebuf_r>:
 8016788:	898b      	ldrh	r3, [r1, #12]
 801678a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801678c:	079d      	lsls	r5, r3, #30
 801678e:	4606      	mov	r6, r0
 8016790:	460c      	mov	r4, r1
 8016792:	d507      	bpl.n	80167a4 <__smakebuf_r+0x1c>
 8016794:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016798:	6023      	str	r3, [r4, #0]
 801679a:	6123      	str	r3, [r4, #16]
 801679c:	2301      	movs	r3, #1
 801679e:	6163      	str	r3, [r4, #20]
 80167a0:	b003      	add	sp, #12
 80167a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167a4:	ab01      	add	r3, sp, #4
 80167a6:	466a      	mov	r2, sp
 80167a8:	f7ff ffc8 	bl	801673c <__swhatbuf_r>
 80167ac:	9f00      	ldr	r7, [sp, #0]
 80167ae:	4605      	mov	r5, r0
 80167b0:	4639      	mov	r1, r7
 80167b2:	4630      	mov	r0, r6
 80167b4:	f7fe fda0 	bl	80152f8 <_malloc_r>
 80167b8:	b948      	cbnz	r0, 80167ce <__smakebuf_r+0x46>
 80167ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167be:	059a      	lsls	r2, r3, #22
 80167c0:	d4ee      	bmi.n	80167a0 <__smakebuf_r+0x18>
 80167c2:	f023 0303 	bic.w	r3, r3, #3
 80167c6:	f043 0302 	orr.w	r3, r3, #2
 80167ca:	81a3      	strh	r3, [r4, #12]
 80167cc:	e7e2      	b.n	8016794 <__smakebuf_r+0xc>
 80167ce:	89a3      	ldrh	r3, [r4, #12]
 80167d0:	6020      	str	r0, [r4, #0]
 80167d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80167d6:	81a3      	strh	r3, [r4, #12]
 80167d8:	9b01      	ldr	r3, [sp, #4]
 80167da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80167de:	b15b      	cbz	r3, 80167f8 <__smakebuf_r+0x70>
 80167e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80167e4:	4630      	mov	r0, r6
 80167e6:	f000 f81d 	bl	8016824 <_isatty_r>
 80167ea:	b128      	cbz	r0, 80167f8 <__smakebuf_r+0x70>
 80167ec:	89a3      	ldrh	r3, [r4, #12]
 80167ee:	f023 0303 	bic.w	r3, r3, #3
 80167f2:	f043 0301 	orr.w	r3, r3, #1
 80167f6:	81a3      	strh	r3, [r4, #12]
 80167f8:	89a3      	ldrh	r3, [r4, #12]
 80167fa:	431d      	orrs	r5, r3
 80167fc:	81a5      	strh	r5, [r4, #12]
 80167fe:	e7cf      	b.n	80167a0 <__smakebuf_r+0x18>

08016800 <_fstat_r>:
 8016800:	b538      	push	{r3, r4, r5, lr}
 8016802:	4d07      	ldr	r5, [pc, #28]	@ (8016820 <_fstat_r+0x20>)
 8016804:	2300      	movs	r3, #0
 8016806:	4604      	mov	r4, r0
 8016808:	4608      	mov	r0, r1
 801680a:	4611      	mov	r1, r2
 801680c:	602b      	str	r3, [r5, #0]
 801680e:	f7eb fd05 	bl	800221c <_fstat>
 8016812:	1c43      	adds	r3, r0, #1
 8016814:	d102      	bne.n	801681c <_fstat_r+0x1c>
 8016816:	682b      	ldr	r3, [r5, #0]
 8016818:	b103      	cbz	r3, 801681c <_fstat_r+0x1c>
 801681a:	6023      	str	r3, [r4, #0]
 801681c:	bd38      	pop	{r3, r4, r5, pc}
 801681e:	bf00      	nop
 8016820:	24006020 	.word	0x24006020

08016824 <_isatty_r>:
 8016824:	b538      	push	{r3, r4, r5, lr}
 8016826:	4d06      	ldr	r5, [pc, #24]	@ (8016840 <_isatty_r+0x1c>)
 8016828:	2300      	movs	r3, #0
 801682a:	4604      	mov	r4, r0
 801682c:	4608      	mov	r0, r1
 801682e:	602b      	str	r3, [r5, #0]
 8016830:	f7eb fd04 	bl	800223c <_isatty>
 8016834:	1c43      	adds	r3, r0, #1
 8016836:	d102      	bne.n	801683e <_isatty_r+0x1a>
 8016838:	682b      	ldr	r3, [r5, #0]
 801683a:	b103      	cbz	r3, 801683e <_isatty_r+0x1a>
 801683c:	6023      	str	r3, [r4, #0]
 801683e:	bd38      	pop	{r3, r4, r5, pc}
 8016840:	24006020 	.word	0x24006020

08016844 <_init>:
 8016844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016846:	bf00      	nop
 8016848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801684a:	bc08      	pop	{r3}
 801684c:	469e      	mov	lr, r3
 801684e:	4770      	bx	lr

08016850 <_fini>:
 8016850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016852:	bf00      	nop
 8016854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016856:	bc08      	pop	{r3}
 8016858:	469e      	mov	lr, r3
 801685a:	4770      	bx	lr
