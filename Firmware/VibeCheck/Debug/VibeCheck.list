
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000196b0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  08019980  08019980  0001a980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a330  0801a330  0001b330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a338  0801a338  0001b338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a33c  0801a33c  0001b33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  0801a340  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000069ac  240002cc  0801a60c  0001c2cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006c78  0801a60c  0001cc78  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c2cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033e5c  00000000  00000000  0001c2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006771  00000000  00000000  00050156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026b0  00000000  00000000  000568c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001e0c  00000000  00000000  00058f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000ac48  00000000  00000000  0005ad84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003b0e9  00000000  00000000  000659cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171877  00000000  00000000  000a0ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021232c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bb10  00000000  00000000  00212370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  0021de80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002cc 	.word	0x240002cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08019968 	.word	0x08019968

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d0 	.word	0x240002d0
 800030c:	08019968 	.word	0x08019968

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000ac2:	f002 fdd6 	bl	8003672 <VibeCheckStrobe_PeriodElapsedUpdate>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	24002d34 	.word	0x24002d34

08000ad4 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 8000adc:	4803      	ldr	r0, [pc, #12]	@ (8000aec <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 8000ade:	f003 fbd7 	bl	8004290 <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	24002d54 	.word	0x24002d54

08000af0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 8000af8:	4803      	ldr	r0, [pc, #12]	@ (8000b08 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 8000afa:	f003 fbe5 	bl	80042c8 <VibeCheckWaveGen_DMACpltCallback>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	24002d54 	.word	0x24002d54

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b10:	f000 feb4 	bl	800187c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b14:	f003 feb4 	bl	8004880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b18:	f000 f834 	bl	8000b84 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b1c:	f000 f8a2 	bl	8000c64 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b20:	f000 fd9e 	bl	8001660 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b24:	f000 fd74 	bl	8001610 <MX_DMA_Init>
  MX_DAC1_Init();
 8000b28:	f000 f9b2 	bl	8000e90 <MX_DAC1_Init>
  MX_I2C2_Init();
 8000b2c:	f000 f9ec 	bl	8000f08 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000b30:	f000 fa2a 	bl	8000f88 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000b34:	f000 fa7e 	bl	8001034 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000b38:	f000 fad2 	bl	80010e0 <MX_SPI4_Init>
  MX_TIM4_Init();
 8000b3c:	f000 fc56 	bl	80013ec <MX_TIM4_Init>
  MX_TIM3_Init();
 8000b40:	f000 fbc6 	bl	80012d0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b44:	f000 fd18 	bl	8001578 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000b48:	f000 fb20 	bl	800118c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b4c:	f000 fb72 	bl	8001234 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b50:	f000 f8b8 	bl	8000cc4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b54:	f000 f932 	bl	8000dbc <MX_ADC2_Init>
  MX_UART7_Init();
 8000b58:	f000 fcc0 	bl	80014dc <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000b5c:	f013 fb30 	bl	80141c0 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1);
 8000b60:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <main+0x68>)
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <main+0x6c>)
 8000b64:	4905      	ldr	r1, [pc, #20]	@ (8000b7c <main+0x70>)
 8000b66:	4806      	ldr	r0, [pc, #24]	@ (8000b80 <main+0x74>)
 8000b68:	f001 fd3a 	bl	80025e0 <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <main+0x74>)
 8000b6e:	f001 fe0b 	bl	8002788 <VibeCheck_Loop>
 8000b72:	e7fb      	b.n	8000b6c <main+0x60>
 8000b74:	240003c8 	.word	0x240003c8
 8000b78:	240006b8 	.word	0x240006b8
 8000b7c:	24000750 	.word	0x24000750
 8000b80:	24000910 	.word	0x24000910

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b09c      	sub	sp, #112	@ 0x70
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8e:	224c      	movs	r2, #76	@ 0x4c
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f015 fb4d 	bl	8016232 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f015 fb47 	bl	8016232 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f009 fd55 	bl	800a654 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a2b      	ldr	r2, [pc, #172]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bb4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bb8:	6193      	str	r3, [r2, #24]
 8000bba:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bc6:	bf00      	nop
 8000bc8:	4b25      	ldr	r3, [pc, #148]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bd4:	d1f8      	bne.n	8000bc8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bd6:	2321      	movs	r3, #33	@ 0x21
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be4:	2302      	movs	r3, #2
 8000be6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bf0:	2328      	movs	r3, #40	@ 0x28
 8000bf2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c00:	230c      	movs	r3, #12
 8000c02:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c10:	4618      	mov	r0, r3
 8000c12:	f009 fd69 	bl	800a6e8 <HAL_RCC_OscConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c1c:	f000 fe5a 	bl	80018d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c20:	233f      	movs	r3, #63	@ 0x3f
 8000c22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c24:	2303      	movs	r3, #3
 8000c26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c30:	2340      	movs	r3, #64	@ 0x40
 8000c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c34:	2340      	movs	r3, #64	@ 0x40
 8000c36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c3e:	2340      	movs	r3, #64	@ 0x40
 8000c40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2103      	movs	r1, #3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f00a f928 	bl	800ae9c <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c52:	f000 fe3f 	bl	80018d4 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3770      	adds	r7, #112	@ 0x70
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58024800 	.word	0x58024800

08000c64 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0ae      	sub	sp, #184	@ 0xb8
 8000c68:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	22b8      	movs	r2, #184	@ 0xb8
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f015 fade 	bl	8016232 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000c82:	2302      	movs	r3, #2
 8000c84:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000c86:	2310      	movs	r3, #16
 8000c88:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c96:	23c0      	movs	r3, #192	@ 0xc0
 8000c98:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4618      	mov	r0, r3
 8000cac:	f00a fc82 	bl	800b5b4 <HAL_RCCEx_PeriphCLKConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000cb6:	f000 fe0d 	bl	80018d4 <Error_Handler>
  }
}
 8000cba:	bf00      	nop
 8000cbc:	37b8      	adds	r7, #184	@ 0xb8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	@ 0x30
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2224      	movs	r2, #36	@ 0x24
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f015 faa8 	bl	8016232 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ce2:	4b32      	ldr	r3, [pc, #200]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000ce4:	4a32      	ldr	r2, [pc, #200]	@ (8000db0 <MX_ADC1_Init+0xec>)
 8000ce6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ce8:	4b30      	ldr	r3, [pc, #192]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000cea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000cee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000cfe:	2204      	movs	r2, #4
 8000d00:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d02:	4b2a      	ldr	r3, [pc, #168]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d08:	4b28      	ldr	r3, [pc, #160]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d14:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d22:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d28:	4b20      	ldr	r3, [pc, #128]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d48:	4818      	ldr	r0, [pc, #96]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d4a:	f004 f895 	bl	8004e78 <HAL_ADC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d54:	f000 fdbe 	bl	80018d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	4812      	ldr	r0, [pc, #72]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d64:	f005 f8d4 	bl	8005f10 <HAL_ADCEx_MultiModeConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d6e:	f000 fdb1 	bl	80018d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <MX_ADC1_Init+0xf0>)
 8000d74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d76:	2306      	movs	r3, #6
 8000d78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <MX_ADC1_Init+0xf4>)
 8000d80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d82:	2304      	movs	r3, #4
 8000d84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d96:	f004 fa77 	bl	8005288 <HAL_ADC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000da0:	f000 fd98 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3730      	adds	r7, #48	@ 0x30
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	240002e8 	.word	0x240002e8
 8000db0:	40022000 	.word	0x40022000
 8000db4:	10c00010 	.word	0x10c00010
 8000db8:	47ff0000 	.word	0x47ff0000

08000dbc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2224      	movs	r2, #36	@ 0x24
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f015 fa32 	bl	8016232 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dce:	4b2c      	ldr	r3, [pc, #176]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8000e84 <MX_ADC2_Init+0xc8>)
 8000dd2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dd6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000dda:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000ddc:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000de2:	4b27      	ldr	r3, [pc, #156]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de8:	4b25      	ldr	r3, [pc, #148]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dee:	4b24      	ldr	r3, [pc, #144]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000df4:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000e26:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e34:	4812      	ldr	r0, [pc, #72]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e36:	f004 f81f 	bl	8004e78 <HAL_ADC_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000e40:	f000 fd48 	bl	80018d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e44:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <MX_ADC2_Init+0xcc>)
 8000e46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e48:	2306      	movs	r3, #6
 8000e4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <MX_ADC2_Init+0xd0>)
 8000e52:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e54:	2304      	movs	r3, #4
 8000e56:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e68:	f004 fa0e 	bl	8005288 <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000e72:	f000 fd2f 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	24000358 	.word	0x24000358
 8000e84:	40022100 	.word	0x40022100
 8000e88:	0c900008 	.word	0x0c900008
 8000e8c:	47ff0000 	.word	0x47ff0000

08000e90 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	@ 0x28
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2224      	movs	r2, #36	@ 0x24
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f015 f9c8 	bl	8016232 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_DAC1_Init+0x70>)
 8000ea4:	4a17      	ldr	r2, [pc, #92]	@ (8000f04 <MX_DAC1_Init+0x74>)
 8000ea6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ea8:	4815      	ldr	r0, [pc, #84]	@ (8000f00 <MX_DAC1_Init+0x70>)
 8000eaa:	f005 fa9b 	bl	80063e4 <HAL_DAC_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000eb4:	f000 fd0e 	bl	80018d4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480b      	ldr	r0, [pc, #44]	@ (8000f00 <MX_DAC1_Init+0x70>)
 8000ed4:	f005 fb72 	bl	80065bc <HAL_DAC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ede:	f000 fcf9 	bl	80018d4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2210      	movs	r2, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <MX_DAC1_Init+0x70>)
 8000eea:	f005 fb67 	bl	80065bc <HAL_DAC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000ef4:	f000 fcee 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	@ 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	240003c8 	.word	0x240003c8
 8000f04:	40007400 	.word	0x40007400

08000f08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f80 <MX_I2C2_Init+0x78>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f14:	4a1b      	ldr	r2, [pc, #108]	@ (8000f84 <MX_I2C2_Init+0x7c>)
 8000f16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f18:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f36:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f42:	480e      	ldr	r0, [pc, #56]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f44:	f007 ffb4 	bl	8008eb0 <HAL_I2C_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f4e:	f000 fcc1 	bl	80018d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f52:	2100      	movs	r1, #0
 8000f54:	4809      	ldr	r0, [pc, #36]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f56:	f008 f847 	bl	8008fe8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f60:	f000 fcb8 	bl	80018d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f64:	2100      	movs	r1, #0
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f68:	f008 f889 	bl	800907e <HAL_I2CEx_ConfigDigitalFilter>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f72:	f000 fcaf 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	240004cc 	.word	0x240004cc
 8000f80:	40005800 	.word	0x40005800
 8000f84:	307075b1 	.word	0x307075b1

08000f88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f8c:	4b27      	ldr	r3, [pc, #156]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000f8e:	4a28      	ldr	r2, [pc, #160]	@ (8001030 <MX_SPI2_Init+0xa8>)
 8000f90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f92:	4b26      	ldr	r3, [pc, #152]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000f94:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9a:	4b24      	ldr	r3, [pc, #144]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fa0:	4b22      	ldr	r3, [pc, #136]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa6:	4b21      	ldr	r3, [pc, #132]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fb4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fcc:	4b17      	ldr	r3, [pc, #92]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000fd2:	4b16      	ldr	r3, [pc, #88]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fde:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <MX_SPI2_Init+0xa4>)
 8001000:	2200      	movs	r2, #0
 8001002:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <MX_SPI2_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <MX_SPI2_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <MX_SPI2_Init+0xa4>)
 8001012:	2200      	movs	r2, #0
 8001014:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	@ (800102c <MX_SPI2_Init+0xa4>)
 8001018:	f00c feb2 	bl	800dd80 <HAL_SPI_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001022:	f000 fc57 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	24000520 	.word	0x24000520
 8001030:	40003800 	.word	0x40003800

08001034 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001038:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800103a:	4a28      	ldr	r2, [pc, #160]	@ (80010dc <MX_SPI3_Init+0xa8>)
 800103c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800103e:	4b26      	ldr	r3, [pc, #152]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001040:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001044:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001046:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800104c:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800104e:	2203      	movs	r2, #3
 8001050:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001052:	4b21      	ldr	r3, [pc, #132]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001058:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800105e:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001060:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001064:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001078:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001086:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800108a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800109a:	2200      	movs	r2, #0
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010c4:	f00c fe5c 	bl	800dd80 <HAL_SPI_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80010ce:	f000 fc01 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	240005a8 	.word	0x240005a8
 80010dc:	40003c00 	.word	0x40003c00

080010e0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80010e4:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <MX_SPI4_Init+0xa4>)
 80010e6:	4a28      	ldr	r2, [pc, #160]	@ (8001188 <MX_SPI4_Init+0xa8>)
 80010e8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80010ea:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <MX_SPI4_Init+0xa4>)
 80010ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010f0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <MX_SPI4_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80010f8:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <MX_SPI4_Init+0xa4>)
 80010fa:	2203      	movs	r2, #3
 80010fc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fe:	4b21      	ldr	r3, [pc, #132]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800110a:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800110c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001110:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001112:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001118:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800112a:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001132:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001136:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001144:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001146:	2200      	movs	r2, #0
 8001148:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800114c:	2200      	movs	r2, #0
 800114e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001150:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800115e:	2200      	movs	r2, #0
 8001160:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001164:	2200      	movs	r2, #0
 8001166:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800116a:	2200      	movs	r2, #0
 800116c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001170:	f00c fe06 	bl	800dd80 <HAL_SPI_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800117a:	f000 fbab 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	24000630 	.word	0x24000630
 8001188:	40013400 	.word	0x40013400

0800118c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011ac:	4a20      	ldr	r2, [pc, #128]	@ (8001230 <MX_TIM1_Init+0xa4>)
 80011ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ca:	4b18      	ldr	r3, [pc, #96]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011d6:	4815      	ldr	r0, [pc, #84]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011d8:	f00c ff11 	bl	800dffe <HAL_TIM_Base_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011e2:	f000 fb77 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	480e      	ldr	r0, [pc, #56]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011f4:	f00d fc8e 	bl	800eb14 <HAL_TIM_ConfigClockSource>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011fe:	f000 fb69 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001202:	2320      	movs	r3, #32
 8001204:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	@ (800122c <MX_TIM1_Init+0xa0>)
 8001214:	f00e f9ea 	bl	800f5ec <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800121e:	f000 fb59 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	240006b8 	.word	0x240006b8
 8001230:	40010000 	.word	0x40010000

08001234 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001252:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001254:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001258:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800125a:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <MX_TIM2_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001266:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127a:	4814      	ldr	r0, [pc, #80]	@ (80012cc <MX_TIM2_Init+0x98>)
 800127c:	f00c febf 	bl	800dffe <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001286:	f000 fb25 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001298:	f00d fc3c 	bl	800eb14 <HAL_TIM_ConfigClockSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012a2:	f000 fb17 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012a6:	2320      	movs	r3, #32
 80012a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	@ (80012cc <MX_TIM2_Init+0x98>)
 80012b4:	f00e f99a 	bl	800f5ec <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012be:	f000 fb09 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	24000704 	.word	0x24000704

080012d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	@ 0x38
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]
 80012fe:	615a      	str	r2, [r3, #20]
 8001300:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001302:	4b38      	ldr	r3, [pc, #224]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001304:	4a38      	ldr	r2, [pc, #224]	@ (80013e8 <MX_TIM3_Init+0x118>)
 8001306:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001308:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <MX_TIM3_Init+0x114>)
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b35      	ldr	r3, [pc, #212]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001314:	4b33      	ldr	r3, [pc, #204]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001316:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800131a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b31      	ldr	r3, [pc, #196]	@ (80013e4 <MX_TIM3_Init+0x114>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b30      	ldr	r3, [pc, #192]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001328:	482e      	ldr	r0, [pc, #184]	@ (80013e4 <MX_TIM3_Init+0x114>)
 800132a:	f00c fe68 	bl	800dffe <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001334:	f000 face 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001342:	4619      	mov	r1, r3
 8001344:	4827      	ldr	r0, [pc, #156]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001346:	f00d fbe5 	bl	800eb14 <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001350:	f000 fac0 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001354:	4823      	ldr	r0, [pc, #140]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001356:	f00c ffad 	bl	800e2b4 <HAL_TIM_PWM_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001360:	f000 fab8 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	481c      	ldr	r0, [pc, #112]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001374:	f00e f93a 	bl	800f5ec <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800137e:	f000 faa9 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001382:	2360      	movs	r3, #96	@ 0x60
 8001384:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	4619      	mov	r1, r3
 8001398:	4812      	ldr	r0, [pc, #72]	@ (80013e4 <MX_TIM3_Init+0x114>)
 800139a:	f00d faa7 	bl	800e8ec <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80013a4:	f000 fa96 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	2204      	movs	r2, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <MX_TIM3_Init+0x114>)
 80013b0:	f00d fa9c 	bl	800e8ec <HAL_TIM_PWM_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80013ba:	f000 fa8b 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	2208      	movs	r2, #8
 80013c2:	4619      	mov	r1, r3
 80013c4:	4807      	ldr	r0, [pc, #28]	@ (80013e4 <MX_TIM3_Init+0x114>)
 80013c6:	f00d fa91 	bl	800e8ec <HAL_TIM_PWM_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80013d0:	f000 fa80 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013d4:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <MX_TIM3_Init+0x114>)
 80013d6:	f000 fe4d 	bl	8002074 <HAL_TIM_MspPostInit>

}
 80013da:	bf00      	nop
 80013dc:	3738      	adds	r7, #56	@ 0x38
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	24000750 	.word	0x24000750
 80013e8:	40000400 	.word	0x40000400

080013ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	@ 0x38
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140c:	463b      	mov	r3, r7
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800141e:	4b2d      	ldr	r3, [pc, #180]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001420:	4a2d      	ldr	r2, [pc, #180]	@ (80014d8 <MX_TIM4_Init+0xec>)
 8001422:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001424:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001430:	4b28      	ldr	r3, [pc, #160]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001436:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143e:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001444:	4823      	ldr	r0, [pc, #140]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001446:	f00c fdda 	bl	800dffe <HAL_TIM_Base_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001450:	f000 fa40 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001454:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001458:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800145a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145e:	4619      	mov	r1, r3
 8001460:	481c      	ldr	r0, [pc, #112]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001462:	f00d fb57 	bl	800eb14 <HAL_TIM_ConfigClockSource>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800146c:	f000 fa32 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001470:	4818      	ldr	r0, [pc, #96]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001472:	f00c ff1f 	bl	800e2b4 <HAL_TIM_PWM_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800147c:	f000 fa2a 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4811      	ldr	r0, [pc, #68]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001490:	f00e f8ac 	bl	800f5ec <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800149a:	f000 fa1b 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149e:	2360      	movs	r3, #96	@ 0x60
 80014a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ae:	463b      	mov	r3, r7
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4807      	ldr	r0, [pc, #28]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 80014b6:	f00d fa19 	bl	800e8ec <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80014c0:	f000 fa08 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014c4:	4803      	ldr	r0, [pc, #12]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 80014c6:	f000 fdd5 	bl	8002074 <HAL_TIM_MspPostInit>

}
 80014ca:	bf00      	nop
 80014cc:	3738      	adds	r7, #56	@ 0x38
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2400079c 	.word	0x2400079c
 80014d8:	40000800 	.word	0x40000800

080014dc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80014e0:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <MX_UART7_Init+0x94>)
 80014e2:	4a24      	ldr	r2, [pc, #144]	@ (8001574 <MX_UART7_Init+0x98>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80014e6:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <MX_UART7_Init+0x94>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b20      	ldr	r3, [pc, #128]	@ (8001570 <MX_UART7_Init+0x94>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001570 <MX_UART7_Init+0x94>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <MX_UART7_Init+0x94>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <MX_UART7_Init+0x94>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001506:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <MX_UART7_Init+0x94>)
 8001508:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800150c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800150e:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <MX_UART7_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001514:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <MX_UART7_Init+0x94>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <MX_UART7_Init+0x94>)
 800151c:	2200      	movs	r2, #0
 800151e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <MX_UART7_Init+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001526:	4812      	ldr	r0, [pc, #72]	@ (8001570 <MX_UART7_Init+0x94>)
 8001528:	f00e f91a 	bl	800f760 <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001532:	f000 f9cf 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001536:	2100      	movs	r1, #0
 8001538:	480d      	ldr	r0, [pc, #52]	@ (8001570 <MX_UART7_Init+0x94>)
 800153a:	f00f fa26 	bl	801098a <HAL_UARTEx_SetTxFifoThreshold>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001544:	f000 f9c6 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001548:	2100      	movs	r1, #0
 800154a:	4809      	ldr	r0, [pc, #36]	@ (8001570 <MX_UART7_Init+0x94>)
 800154c:	f00f fa5b 	bl	8010a06 <HAL_UARTEx_SetRxFifoThreshold>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001556:	f000 f9bd 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MX_UART7_Init+0x94>)
 800155c:	f00f f9dc 	bl	8010918 <HAL_UARTEx_DisableFifoMode>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001566:	f000 f9b5 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	240007e8 	.word	0x240007e8
 8001574:	40007800 	.word	0x40007800

08001578 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800157c:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 800157e:	4a23      	ldr	r2, [pc, #140]	@ (800160c <MX_USART1_UART_Init+0x94>)
 8001580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001582:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001596:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015c0:	4811      	ldr	r0, [pc, #68]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015c2:	f00e f8cd 	bl	800f760 <HAL_UART_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015cc:	f000 f982 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d0:	2100      	movs	r1, #0
 80015d2:	480d      	ldr	r0, [pc, #52]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015d4:	f00f f9d9 	bl	801098a <HAL_UARTEx_SetTxFifoThreshold>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015de:	f000 f979 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e2:	2100      	movs	r1, #0
 80015e4:	4808      	ldr	r0, [pc, #32]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015e6:	f00f fa0e 	bl	8010a06 <HAL_UARTEx_SetRxFifoThreshold>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015f0:	f000 f970 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015f6:	f00f f98f 	bl	8010918 <HAL_UARTEx_DisableFifoMode>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001600:	f000 f968 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2400087c 	.word	0x2400087c
 800160c:	40011000 	.word	0x40011000

08001610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001616:	4b11      	ldr	r3, [pc, #68]	@ (800165c <MX_DMA_Init+0x4c>)
 8001618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800161c:	4a0f      	ldr	r2, [pc, #60]	@ (800165c <MX_DMA_Init+0x4c>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001626:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <MX_DMA_Init+0x4c>)
 8001628:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	200b      	movs	r0, #11
 800163a:	f004 fe26 	bl	800628a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800163e:	200b      	movs	r0, #11
 8001640:	f004 fe3d 	bl	80062be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	200c      	movs	r0, #12
 800164a:	f004 fe1e 	bl	800628a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800164e:	200c      	movs	r0, #12
 8001650:	f004 fe35 	bl	80062be <HAL_NVIC_EnableIRQ>

}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	58024400 	.word	0x58024400

08001660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	@ 0x30
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001676:	4b7b      	ldr	r3, [pc, #492]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167c:	4a79      	ldr	r2, [pc, #484]	@ (8001864 <MX_GPIO_Init+0x204>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001686:	4b77      	ldr	r3, [pc, #476]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001694:	4b73      	ldr	r3, [pc, #460]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169a:	4a72      	ldr	r2, [pc, #456]	@ (8001864 <MX_GPIO_Init+0x204>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c2:	4b68      	ldr	r3, [pc, #416]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b64      	ldr	r3, [pc, #400]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d6:	4a63      	ldr	r2, [pc, #396]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e0:	4b60      	ldr	r3, [pc, #384]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f4:	4a5b      	ldr	r2, [pc, #364]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fe:	4b59      	ldr	r3, [pc, #356]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170c:	4b55      	ldr	r3, [pc, #340]	@ (8001864 <MX_GPIO_Init+0x204>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001712:	4a54      	ldr	r2, [pc, #336]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171c:	4b51      	ldr	r3, [pc, #324]	@ (8001864 <MX_GPIO_Init+0x204>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2110      	movs	r1, #16
 800172e:	484e      	ldr	r0, [pc, #312]	@ (8001868 <MX_GPIO_Init+0x208>)
 8001730:	f007 fba4 	bl	8008e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2104      	movs	r1, #4
 8001738:	484c      	ldr	r0, [pc, #304]	@ (800186c <MX_GPIO_Init+0x20c>)
 800173a:	f007 fb9f 	bl	8008e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2101      	movs	r1, #1
 8001742:	484b      	ldr	r0, [pc, #300]	@ (8001870 <MX_GPIO_Init+0x210>)
 8001744:	f007 fb9a 	bl	8008e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	210a      	movs	r1, #10
 800174c:	4848      	ldr	r0, [pc, #288]	@ (8001870 <MX_GPIO_Init+0x210>)
 800174e:	f007 fb95 	bl	8008e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 8001758:	4846      	ldr	r0, [pc, #280]	@ (8001874 <MX_GPIO_Init+0x214>)
 800175a:	f007 fb8f 	bl	8008e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2101      	movs	r1, #1
 8001762:	4845      	ldr	r0, [pc, #276]	@ (8001878 <MX_GPIO_Init+0x218>)
 8001764:	f007 fb8a 	bl	8008e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_INT1_Pin */
  GPIO_InitStruct.Pin = SPI4_INT1_Pin;
 8001768:	2308      	movs	r3, #8
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI4_INT1_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	483b      	ldr	r0, [pc, #236]	@ (8001868 <MX_GPIO_Init+0x208>)
 800177c:	f007 f9be 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8001780:	2310      	movs	r3, #16
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4834      	ldr	r0, [pc, #208]	@ (8001868 <MX_GPIO_Init+0x208>)
 8001798:	f007 f9b0 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 DAC_EXT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DAC_EXT_Pin;
 800179c:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80017a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	482e      	ldr	r0, [pc, #184]	@ (800186c <MX_GPIO_Init+0x20c>)
 80017b2:	f007 f9a3 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 80017b6:	2304      	movs	r3, #4
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	4827      	ldr	r0, [pc, #156]	@ (800186c <MX_GPIO_Init+0x20c>)
 80017ce:	f007 f995 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 80017d2:	230b      	movs	r3, #11
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	4821      	ldr	r0, [pc, #132]	@ (8001870 <MX_GPIO_Init+0x210>)
 80017ea:	f007 f987 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 80017ee:	f248 0304 	movw	r3, #32772	@ 0x8004
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	4619      	mov	r1, r3
 8001802:	481b      	ldr	r0, [pc, #108]	@ (8001870 <MX_GPIO_Init+0x210>)
 8001804:	f007 f97a 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_NCS1_Pin RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin;
 8001808:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800180c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	4619      	mov	r1, r3
 8001820:	4814      	ldr	r0, [pc, #80]	@ (8001874 <MX_GPIO_Init+0x214>)
 8001822:	f007 f96b 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin SPI3_INT1_Pin SPI3_INT2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|SPI3_INT1_Pin|SPI3_INT2_Pin;
 8001826:	f240 3306 	movw	r3, #774	@ 0x306
 800182a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	480f      	ldr	r0, [pc, #60]	@ (8001878 <MX_GPIO_Init+0x218>)
 800183c:	f007 f95e 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001840:	2301      	movs	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4619      	mov	r1, r3
 8001856:	4808      	ldr	r0, [pc, #32]	@ (8001878 <MX_GPIO_Init+0x218>)
 8001858:	f007 f950 	bl	8008afc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800185c:	bf00      	nop
 800185e:	3730      	adds	r7, #48	@ 0x30
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	58024400 	.word	0x58024400
 8001868:	58021000 	.word	0x58021000
 800186c:	58020800 	.word	0x58020800
 8001870:	58020000 	.word	0x58020000
 8001874:	58020400 	.word	0x58020400
 8001878:	58020c00 	.word	0x58020c00

0800187c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001882:	463b      	mov	r3, r7
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800188e:	f004 fd31 	bl	80062f4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001892:	2301      	movs	r3, #1
 8001894:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001896:	2300      	movs	r3, #0
 8001898:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800189e:	231f      	movs	r3, #31
 80018a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80018a2:	2387      	movs	r3, #135	@ 0x87
 80018a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80018aa:	2300      	movs	r3, #0
 80018ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80018ae:	2301      	movs	r3, #1
 80018b0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018be:	463b      	mov	r3, r7
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 fd4f 	bl	8006364 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80018c6:	2004      	movs	r0, #4
 80018c8:	f004 fd2c 	bl	8006324 <HAL_MPU_Enable>

}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <Error_Handler+0x8>

080018e0 <Sequencer_Init>:
 */

#include "sequencer.h"

void Sequencer_Init(Sequencer* sequencer)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	sequencer->sequence_time_array = NULL;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = 0;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]
	sequencer->sequence_index = 0;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
	sequencer->time = 0;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]

	sequencer->is_running = 0;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	741a      	strb	r2, [r3, #16]
	sequencer->is_looping = 0;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	745a      	strb	r2, [r3, #17]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <Sequencer_SetSequence>:

void Sequencer_SetSequence(Sequencer* sequencer, const uint32_t* sequence_time_array, const uint32_t sequence_len, uint8_t is_looping)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	70fb      	strb	r3, [r7, #3]
	sequencer->sequence_time_array = sequence_time_array;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = sequence_len;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	605a      	str	r2, [r3, #4]
	sequencer->is_looping = is_looping;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	745a      	strb	r2, [r3, #17]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <Sequencer_Update>:

uint32_t Sequencer_Update(Sequencer* sequencer, uint32_t time, uint32_t* index)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
	/*
	 * each element in the time array says how long to hold that step for
	 */

	if (sequencer->is_running && sequencer->sequence_time_array != NULL)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	7c1b      	ldrb	r3, [r3, #16]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d030      	beq.n	80019ba <Sequencer_Update+0x76>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d02c      	beq.n	80019ba <Sequencer_Update+0x76>
	{
		if (time > sequencer->time)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	429a      	cmp	r2, r3
 8001968:	d927      	bls.n	80019ba <Sequencer_Update+0x76>
		{
			*index = sequencer->sequence_index;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	601a      	str	r2, [r3, #0]
			sequencer->time += sequencer->sequence_time_array[sequencer->sequence_index];
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6819      	ldr	r1, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	441a      	add	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	60da      	str	r2, [r3, #12]
			sequencer->sequence_index++;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	609a      	str	r2, [r3, #8]

			if (sequencer->sequence_index == sequencer->sequence_len)  /* reached the end of the sequence */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	d10a      	bne.n	80019b6 <Sequencer_Update+0x72>
			{
				if (sequencer->is_looping)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	7c5b      	ldrb	r3, [r3, #17]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <Sequencer_Update+0x6c>
					sequencer->sequence_index = 0;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	e002      	b.n	80019b6 <Sequencer_Update+0x72>
				else
					sequencer->is_running = 0;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	741a      	strb	r2, [r3, #16]
			}

			return 1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <Sequencer_Update+0x78>
		}
	}

	return 0;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <Sequencer_Start>:

void Sequencer_Start(Sequencer* sequencer, uint32_t time)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
	sequencer->time = time;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	60da      	str	r2, [r3, #12]
	sequencer->sequence_index = 0;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
	sequencer->is_running = 1;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	741a      	strb	r2, [r3, #16]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <Sequencer_Stop>:

void Sequencer_Stop(Sequencer* sequencer)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	sequencer->is_running = 0;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	741a      	strb	r2, [r3, #16]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <HAL_MspInit+0x30>)
 8001a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a18:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <HAL_MspInit+0x30>)
 8001a1a:	f043 0302 	orr.w	r3, r3, #2
 8001a1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_MspInit+0x30>)
 8001a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	58024400 	.word	0x58024400

08001a40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a39      	ldr	r2, [pc, #228]	@ (8001b44 <HAL_ADC_MspInit+0x104>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d133      	bne.n	8001aca <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a62:	4b39      	ldr	r3, [pc, #228]	@ (8001b48 <HAL_ADC_MspInit+0x108>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	3301      	adds	r3, #1
 8001a68:	4a37      	ldr	r2, [pc, #220]	@ (8001b48 <HAL_ADC_MspInit+0x108>)
 8001a6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a6c:	4b36      	ldr	r3, [pc, #216]	@ (8001b48 <HAL_ADC_MspInit+0x108>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10e      	bne.n	8001a92 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a74:	4b35      	ldr	r3, [pc, #212]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001a76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a7a:	4a34      	ldr	r2, [pc, #208]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001a7c:	f043 0320 	orr.w	r3, r3, #32
 8001a80:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001a84:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001a86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	4b2e      	ldr	r3, [pc, #184]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a98:	4a2c      	ldr	r2, [pc, #176]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ab0:	2330      	movs	r3, #48	@ 0x30
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4823      	ldr	r0, [pc, #140]	@ (8001b50 <HAL_ADC_MspInit+0x110>)
 8001ac4:	f007 f81a 	bl	8008afc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ac8:	e037      	b.n	8001b3a <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a21      	ldr	r2, [pc, #132]	@ (8001b54 <HAL_ADC_MspInit+0x114>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d132      	bne.n	8001b3a <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b48 <HAL_ADC_MspInit+0x108>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	4a1b      	ldr	r2, [pc, #108]	@ (8001b48 <HAL_ADC_MspInit+0x108>)
 8001adc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ade:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <HAL_ADC_MspInit+0x108>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d10e      	bne.n	8001b04 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ae6:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001ae8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001aec:	4a17      	ldr	r2, [pc, #92]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001aee:	f043 0320 	orr.w	r3, r3, #32
 8001af2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001af8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b0a:	4a10      	ldr	r2, [pc, #64]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b14:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b22:	23c0      	movs	r3, #192	@ 0xc0
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b26:	2303      	movs	r3, #3
 8001b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	4808      	ldr	r0, [pc, #32]	@ (8001b58 <HAL_ADC_MspInit+0x118>)
 8001b36:	f006 ffe1 	bl	8008afc <HAL_GPIO_Init>
}
 8001b3a:	bf00      	nop
 8001b3c:	3730      	adds	r7, #48	@ 0x30
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40022000 	.word	0x40022000
 8001b48:	24004f3c 	.word	0x24004f3c
 8001b4c:	58024400 	.word	0x58024400
 8001b50:	58020800 	.word	0x58020800
 8001b54:	40022100 	.word	0x40022100
 8001b58:	58020000 	.word	0x58020000

08001b5c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	@ 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a48      	ldr	r2, [pc, #288]	@ (8001c9c <HAL_DAC_MspInit+0x140>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	f040 808a 	bne.w	8001c94 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001b80:	4b47      	ldr	r3, [pc, #284]	@ (8001ca0 <HAL_DAC_MspInit+0x144>)
 8001b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b86:	4a46      	ldr	r2, [pc, #280]	@ (8001ca0 <HAL_DAC_MspInit+0x144>)
 8001b88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b90:	4b43      	ldr	r3, [pc, #268]	@ (8001ca0 <HAL_DAC_MspInit+0x144>)
 8001b92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b40      	ldr	r3, [pc, #256]	@ (8001ca0 <HAL_DAC_MspInit+0x144>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba4:	4a3e      	ldr	r2, [pc, #248]	@ (8001ca0 <HAL_DAC_MspInit+0x144>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bae:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca0 <HAL_DAC_MspInit+0x144>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001bbc:	2330      	movs	r3, #48	@ 0x30
 8001bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4835      	ldr	r0, [pc, #212]	@ (8001ca4 <HAL_DAC_MspInit+0x148>)
 8001bd0:	f006 ff94 	bl	8008afc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8001bd4:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001bd6:	4a35      	ldr	r2, [pc, #212]	@ (8001cac <HAL_DAC_MspInit+0x150>)
 8001bd8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001bda:	4b33      	ldr	r3, [pc, #204]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001bdc:	2243      	movs	r2, #67	@ 0x43
 8001bde:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001be0:	4b31      	ldr	r3, [pc, #196]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001be2:	2240      	movs	r2, #64	@ 0x40
 8001be4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be6:	4b30      	ldr	r3, [pc, #192]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001bec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001bee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001bf6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bfa:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001bfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c02:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001c04:	4b28      	ldr	r3, [pc, #160]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001c06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c0a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c12:	4b25      	ldr	r3, [pc, #148]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001c18:	4823      	ldr	r0, [pc, #140]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001c1a:	f004 fe9b 	bl	8006954 <HAL_DMA_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8001c24:	f7ff fe56 	bl	80018d4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c36:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb4 <HAL_DAC_MspInit+0x158>)
 8001c38:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c3c:	2244      	movs	r2, #68	@ 0x44
 8001c3e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c42:	2240      	movs	r2, #64	@ 0x40
 8001c44:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c52:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c54:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c5a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c62:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8001c64:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c6a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001c6c:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001c78:	480d      	ldr	r0, [pc, #52]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c7a:	f004 fe6b 	bl	8006954 <HAL_DMA_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8001c84:	f7ff fe26 	bl	80018d4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a09      	ldr	r2, [pc, #36]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	4a08      	ldr	r2, [pc, #32]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001c94:	bf00      	nop
 8001c96:	3728      	adds	r7, #40	@ 0x28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40007400 	.word	0x40007400
 8001ca0:	58024400 	.word	0x58024400
 8001ca4:	58020000 	.word	0x58020000
 8001ca8:	240003dc 	.word	0x240003dc
 8001cac:	40020010 	.word	0x40020010
 8001cb0:	24000454 	.word	0x24000454
 8001cb4:	40020028 	.word	0x40020028

08001cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b0b8      	sub	sp, #224	@ 0xe0
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	22b8      	movs	r2, #184	@ 0xb8
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f014 faaa 	bl	8016232 <memset>
  if(hi2c->Instance==I2C2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a27      	ldr	r2, [pc, #156]	@ (8001d80 <HAL_I2C_MspInit+0xc8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d146      	bne.n	8001d76 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ce8:	f04f 0208 	mov.w	r2, #8
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfa:	f107 0310 	add.w	r3, r7, #16
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f009 fc58 	bl	800b5b4 <HAL_RCCEx_PeriphCLKConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001d0a:	f7ff fde3 	bl	80018d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d14:	4a1b      	ldr	r2, [pc, #108]	@ (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d1e:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d2c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d34:	2312      	movs	r3, #18
 8001d36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d46:	2304      	movs	r3, #4
 8001d48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001d50:	4619      	mov	r1, r3
 8001d52:	480d      	ldr	r0, [pc, #52]	@ (8001d88 <HAL_I2C_MspInit+0xd0>)
 8001d54:	f006 fed2 	bl	8008afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d58:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d5e:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001d76:	bf00      	nop
 8001d78:	37e0      	adds	r7, #224	@ 0xe0
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40005800 	.word	0x40005800
 8001d84:	58024400 	.word	0x58024400
 8001d88:	58020400 	.word	0x58020400

08001d8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b0bc      	sub	sp, #240	@ 0xf0
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	22b8      	movs	r2, #184	@ 0xb8
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f014 fa40 	bl	8016232 <memset>
  if(hspi->Instance==SPI2)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a72      	ldr	r2, [pc, #456]	@ (8001f80 <HAL_SPI_MspInit+0x1f4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d146      	bne.n	8001e4a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001dbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dcc:	f107 0320 	add.w	r3, r7, #32
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f009 fbef 	bl	800b5b4 <HAL_RCCEx_PeriphCLKConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001ddc:	f7ff fd7a 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001de0:	4b68      	ldr	r3, [pc, #416]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001de2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001de6:	4a67      	ldr	r2, [pc, #412]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001df0:	4b64      	ldr	r3, [pc, #400]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001df2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	4b61      	ldr	r3, [pc, #388]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e04:	4a5f      	ldr	r2, [pc, #380]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8001e1c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001e20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e36:	2305      	movs	r3, #5
 8001e38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e40:	4619      	mov	r1, r3
 8001e42:	4851      	ldr	r0, [pc, #324]	@ (8001f88 <HAL_SPI_MspInit+0x1fc>)
 8001e44:	f006 fe5a 	bl	8008afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001e48:	e096      	b.n	8001f78 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a4f      	ldr	r2, [pc, #316]	@ (8001f8c <HAL_SPI_MspInit+0x200>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d146      	bne.n	8001ee2 <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001e54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e64:	f107 0320 	add.w	r3, r7, #32
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f009 fba3 	bl	800b5b4 <HAL_RCCEx_PeriphCLKConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8001e74:	f7ff fd2e 	bl	80018d4 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e78:	4b42      	ldr	r3, [pc, #264]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e7e:	4a41      	ldr	r2, [pc, #260]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e88:	4b3e      	ldr	r3, [pc, #248]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e96:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9c:	4a39      	ldr	r2, [pc, #228]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea6:	4b37      	ldr	r3, [pc, #220]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001eb4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001eb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ece:	2306      	movs	r3, #6
 8001ed0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ed8:	4619      	mov	r1, r3
 8001eda:	482d      	ldr	r0, [pc, #180]	@ (8001f90 <HAL_SPI_MspInit+0x204>)
 8001edc:	f006 fe0e 	bl	8008afc <HAL_GPIO_Init>
}
 8001ee0:	e04a      	b.n	8001f78 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2b      	ldr	r2, [pc, #172]	@ (8001f94 <HAL_SPI_MspInit+0x208>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d145      	bne.n	8001f78 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001eec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001efe:	f107 0320 	add.w	r3, r7, #32
 8001f02:	4618      	mov	r0, r3
 8001f04:	f009 fb56 	bl	800b5b4 <HAL_RCCEx_PeriphCLKConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_SPI_MspInit+0x186>
      Error_Handler();
 8001f0e:	f7ff fce1 	bl	80018d4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f12:	4b1c      	ldr	r3, [pc, #112]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f18:	4a1a      	ldr	r2, [pc, #104]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001f1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f22:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f30:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f36:	4a13      	ldr	r2, [pc, #76]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001f38:	f043 0310 	orr.w	r3, r3, #16
 8001f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f40:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001f4e:	2364      	movs	r3, #100	@ 0x64
 8001f50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001f66:	2305      	movs	r3, #5
 8001f68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f6c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f70:	4619      	mov	r1, r3
 8001f72:	4809      	ldr	r0, [pc, #36]	@ (8001f98 <HAL_SPI_MspInit+0x20c>)
 8001f74:	f006 fdc2 	bl	8008afc <HAL_GPIO_Init>
}
 8001f78:	bf00      	nop
 8001f7a:	37f0      	adds	r7, #240	@ 0xf0
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40003800 	.word	0x40003800
 8001f84:	58024400 	.word	0x58024400
 8001f88:	58020400 	.word	0x58020400
 8001f8c:	40003c00 	.word	0x40003c00
 8001f90:	58020800 	.word	0x58020800
 8001f94:	40013400 	.word	0x40013400
 8001f98:	58021000 	.word	0x58021000

08001f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8002064 <HAL_TIM_Base_MspInit+0xc8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d10f      	bne.n	8001fce <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fae:	4b2e      	ldr	r3, [pc, #184]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8001fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8001fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001fcc:	e045      	b.n	800205a <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fd6:	d10f      	bne.n	8001ff8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fd8:	4b23      	ldr	r3, [pc, #140]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8001fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fde:	4a22      	ldr	r2, [pc, #136]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8001fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
}
 8001ff6:	e030      	b.n	800205a <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM3)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800206c <HAL_TIM_Base_MspInit+0xd0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d117      	bne.n	8002032 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002002:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8002004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002008:	4a17      	ldr	r2, [pc, #92]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002012:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8002014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	201d      	movs	r0, #29
 8002026:	f004 f930 	bl	800628a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800202a:	201d      	movs	r0, #29
 800202c:	f004 f947 	bl	80062be <HAL_NVIC_EnableIRQ>
}
 8002030:	e013      	b.n	800205a <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM4)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a0e      	ldr	r2, [pc, #56]	@ (8002070 <HAL_TIM_Base_MspInit+0xd4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d10e      	bne.n	800205a <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800203c:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 800203e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002042:	4a09      	ldr	r2, [pc, #36]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 800204e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40010000 	.word	0x40010000
 8002068:	58024400 	.word	0x58024400
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800

08002074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	@ 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a26      	ldr	r2, [pc, #152]	@ (800212c <HAL_TIM_MspPostInit+0xb8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d120      	bne.n	80020d8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	4b26      	ldr	r3, [pc, #152]	@ (8002130 <HAL_TIM_MspPostInit+0xbc>)
 8002098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209c:	4a24      	ldr	r2, [pc, #144]	@ (8002130 <HAL_TIM_MspPostInit+0xbc>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020a6:	4b22      	ldr	r3, [pc, #136]	@ (8002130 <HAL_TIM_MspPostInit+0xbc>)
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 80020b4:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020c6:	2302      	movs	r3, #2
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4818      	ldr	r0, [pc, #96]	@ (8002134 <HAL_TIM_MspPostInit+0xc0>)
 80020d2:	f006 fd13 	bl	8008afc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020d6:	e024      	b.n	8002122 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a16      	ldr	r2, [pc, #88]	@ (8002138 <HAL_TIM_MspPostInit+0xc4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d11f      	bne.n	8002122 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e2:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <HAL_TIM_MspPostInit+0xbc>)
 80020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e8:	4a11      	ldr	r2, [pc, #68]	@ (8002130 <HAL_TIM_MspPostInit+0xbc>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002130 <HAL_TIM_MspPostInit+0xbc>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8002100:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002112:	2302      	movs	r3, #2
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	4807      	ldr	r0, [pc, #28]	@ (800213c <HAL_TIM_MspPostInit+0xc8>)
 800211e:	f006 fced 	bl	8008afc <HAL_GPIO_Init>
}
 8002122:	bf00      	nop
 8002124:	3728      	adds	r7, #40	@ 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40000400 	.word	0x40000400
 8002130:	58024400 	.word	0x58024400
 8002134:	58020800 	.word	0x58020800
 8002138:	40000800 	.word	0x40000800
 800213c:	58020c00 	.word	0x58020c00

08002140 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b0ba      	sub	sp, #232	@ 0xe8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002158:	f107 0318 	add.w	r3, r7, #24
 800215c:	22b8      	movs	r2, #184	@ 0xb8
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f014 f866 	bl	8016232 <memset>
  if(huart->Instance==UART7)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a4d      	ldr	r2, [pc, #308]	@ (80022a0 <HAL_UART_MspInit+0x160>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d147      	bne.n	8002200 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002170:	f04f 0202 	mov.w	r2, #2
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800217c:	2300      	movs	r3, #0
 800217e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002182:	f107 0318 	add.w	r3, r7, #24
 8002186:	4618      	mov	r0, r3
 8002188:	f009 fa14 	bl	800b5b4 <HAL_RCCEx_PeriphCLKConfig>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002192:	f7ff fb9f 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002196:	4b43      	ldr	r3, [pc, #268]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 8002198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800219c:	4a41      	ldr	r2, [pc, #260]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 800219e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80021a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021a6:	4b3f      	ldr	r3, [pc, #252]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 80021a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021b4:	4b3b      	ldr	r3, [pc, #236]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 80021b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ba:	4a3a      	ldr	r2, [pc, #232]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 80021bc:	f043 0310 	orr.w	r3, r3, #16
 80021c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021c4:	4b37      	ldr	r3, [pc, #220]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 80021c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80021d2:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80021d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80021ec:	2307      	movs	r3, #7
 80021ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021f6:	4619      	mov	r1, r3
 80021f8:	482b      	ldr	r0, [pc, #172]	@ (80022a8 <HAL_UART_MspInit+0x168>)
 80021fa:	f006 fc7f 	bl	8008afc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021fe:	e04a      	b.n	8002296 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a29      	ldr	r2, [pc, #164]	@ (80022ac <HAL_UART_MspInit+0x16c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d145      	bne.n	8002296 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800220a:	f04f 0201 	mov.w	r2, #1
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800221c:	f107 0318 	add.w	r3, r7, #24
 8002220:	4618      	mov	r0, r3
 8002222:	f009 f9c7 	bl	800b5b4 <HAL_RCCEx_PeriphCLKConfig>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800222c:	f7ff fb52 	bl	80018d4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002230:	4b1c      	ldr	r3, [pc, #112]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 8002232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002236:	4a1b      	ldr	r2, [pc, #108]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 8002238:	f043 0310 	orr.w	r3, r3, #16
 800223c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002240:	4b18      	ldr	r3, [pc, #96]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 8002242:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 8002250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002254:	4a13      	ldr	r2, [pc, #76]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 8002256:	f043 0302 	orr.w	r3, r3, #2
 800225a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800225e:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 8002260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800226c:	23c0      	movs	r3, #192	@ 0xc0
 800226e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002284:	2307      	movs	r3, #7
 8002286:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800228e:	4619      	mov	r1, r3
 8002290:	4807      	ldr	r0, [pc, #28]	@ (80022b0 <HAL_UART_MspInit+0x170>)
 8002292:	f006 fc33 	bl	8008afc <HAL_GPIO_Init>
}
 8002296:	bf00      	nop
 8002298:	37e8      	adds	r7, #232	@ 0xe8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40007800 	.word	0x40007800
 80022a4:	58024400 	.word	0x58024400
 80022a8:	58021000 	.word	0x58021000
 80022ac:	40011000 	.word	0x40011000
 80022b0:	58020400 	.word	0x58020400

080022b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <NMI_Handler+0x4>

080022bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <HardFault_Handler+0x4>

080022c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <MemManage_Handler+0x4>

080022cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <BusFault_Handler+0x4>

080022d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <UsageFault_Handler+0x4>

080022dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800230a:	f002 fb2b 	bl	8004964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002318:	4802      	ldr	r0, [pc, #8]	@ (8002324 <DMA1_Stream0_IRQHandler+0x10>)
 800231a:	f005 f8dd 	bl	80074d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	240003dc 	.word	0x240003dc

08002328 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800232c:	4802      	ldr	r0, [pc, #8]	@ (8002338 <DMA1_Stream1_IRQHandler+0x10>)
 800232e:	f005 f8d3 	bl	80074d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	24000454 	.word	0x24000454

0800233c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <TIM3_IRQHandler+0x10>)
 8002342:	f00c f9cb 	bl	800e6dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	24000750 	.word	0x24000750

08002350 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <OTG_HS_IRQHandler+0x10>)
 8002356:	f007 f81f 	bl	8009398 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	24006428 	.word	0x24006428

08002364 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return 1;
 8002368:	2301      	movs	r3, #1
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_kill>:

int _kill(int pid, int sig)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800237e:	f013 ffc9 	bl	8016314 <__errno>
 8002382:	4603      	mov	r3, r0
 8002384:	2216      	movs	r2, #22
 8002386:	601a      	str	r2, [r3, #0]
  return -1;
 8002388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_exit>:

void _exit (int status)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ffe7 	bl	8002374 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023a6:	bf00      	nop
 80023a8:	e7fd      	b.n	80023a6 <_exit+0x12>

080023aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e00a      	b.n	80023d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023bc:	f3af 8000 	nop.w
 80023c0:	4601      	mov	r1, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	60ba      	str	r2, [r7, #8]
 80023c8:	b2ca      	uxtb	r2, r1
 80023ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3301      	adds	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	dbf0      	blt.n	80023bc <_read+0x12>
  }

  return len;
 80023da:	687b      	ldr	r3, [r7, #4]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	e009      	b.n	800240a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	60ba      	str	r2, [r7, #8]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3301      	adds	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	dbf1      	blt.n	80023f6 <_write+0x12>
  }
  return len;
 8002412:	687b      	ldr	r3, [r7, #4]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_close>:

int _close(int file)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002424:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002444:	605a      	str	r2, [r3, #4]
  return 0;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_isatty>:

int _isatty(int file)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800248c:	4a14      	ldr	r2, [pc, #80]	@ (80024e0 <_sbrk+0x5c>)
 800248e:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <_sbrk+0x60>)
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a0:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <_sbrk+0x64>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	@ (80024ec <_sbrk+0x68>)
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024a6:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d207      	bcs.n	80024c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b4:	f013 ff2e 	bl	8016314 <__errno>
 80024b8:	4603      	mov	r3, r0
 80024ba:	220c      	movs	r2, #12
 80024bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	e009      	b.n	80024d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c4:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ca:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	4a05      	ldr	r2, [pc, #20]	@ (80024e8 <_sbrk+0x64>)
 80024d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	24050000 	.word	0x24050000
 80024e4:	00000400 	.word	0x00000400
 80024e8:	24004f40 	.word	0x24004f40
 80024ec:	24006c78 	.word	0x24006c78

080024f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024f4:	4b32      	ldr	r3, [pc, #200]	@ (80025c0 <SystemInit+0xd0>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fa:	4a31      	ldr	r2, [pc, #196]	@ (80025c0 <SystemInit+0xd0>)
 80024fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002504:	4b2f      	ldr	r3, [pc, #188]	@ (80025c4 <SystemInit+0xd4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	2b06      	cmp	r3, #6
 800250e:	d807      	bhi.n	8002520 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002510:	4b2c      	ldr	r3, [pc, #176]	@ (80025c4 <SystemInit+0xd4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 030f 	bic.w	r3, r3, #15
 8002518:	4a2a      	ldr	r2, [pc, #168]	@ (80025c4 <SystemInit+0xd4>)
 800251a:	f043 0307 	orr.w	r3, r3, #7
 800251e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002520:	4b29      	ldr	r3, [pc, #164]	@ (80025c8 <SystemInit+0xd8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a28      	ldr	r2, [pc, #160]	@ (80025c8 <SystemInit+0xd8>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800252c:	4b26      	ldr	r3, [pc, #152]	@ (80025c8 <SystemInit+0xd8>)
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002532:	4b25      	ldr	r3, [pc, #148]	@ (80025c8 <SystemInit+0xd8>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4924      	ldr	r1, [pc, #144]	@ (80025c8 <SystemInit+0xd8>)
 8002538:	4b24      	ldr	r3, [pc, #144]	@ (80025cc <SystemInit+0xdc>)
 800253a:	4013      	ands	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800253e:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <SystemInit+0xd4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800254a:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <SystemInit+0xd4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 030f 	bic.w	r3, r3, #15
 8002552:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <SystemInit+0xd4>)
 8002554:	f043 0307 	orr.w	r3, r3, #7
 8002558:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800255a:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <SystemInit+0xd8>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002560:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <SystemInit+0xd8>)
 8002562:	2200      	movs	r2, #0
 8002564:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002566:	4b18      	ldr	r3, [pc, #96]	@ (80025c8 <SystemInit+0xd8>)
 8002568:	2200      	movs	r2, #0
 800256a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800256c:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <SystemInit+0xd8>)
 800256e:	4a18      	ldr	r2, [pc, #96]	@ (80025d0 <SystemInit+0xe0>)
 8002570:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <SystemInit+0xd8>)
 8002574:	4a17      	ldr	r2, [pc, #92]	@ (80025d4 <SystemInit+0xe4>)
 8002576:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002578:	4b13      	ldr	r3, [pc, #76]	@ (80025c8 <SystemInit+0xd8>)
 800257a:	4a17      	ldr	r2, [pc, #92]	@ (80025d8 <SystemInit+0xe8>)
 800257c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800257e:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <SystemInit+0xd8>)
 8002580:	2200      	movs	r2, #0
 8002582:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002584:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <SystemInit+0xd8>)
 8002586:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <SystemInit+0xe8>)
 8002588:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800258a:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <SystemInit+0xd8>)
 800258c:	2200      	movs	r2, #0
 800258e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002590:	4b0d      	ldr	r3, [pc, #52]	@ (80025c8 <SystemInit+0xd8>)
 8002592:	4a11      	ldr	r2, [pc, #68]	@ (80025d8 <SystemInit+0xe8>)
 8002594:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002596:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <SystemInit+0xd8>)
 8002598:	2200      	movs	r2, #0
 800259a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800259c:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <SystemInit+0xd8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a09      	ldr	r2, [pc, #36]	@ (80025c8 <SystemInit+0xd8>)
 80025a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80025a8:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <SystemInit+0xd8>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025ae:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <SystemInit+0xec>)
 80025b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80025b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00
 80025c4:	52002000 	.word	0x52002000
 80025c8:	58024400 	.word	0x58024400
 80025cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80025d0:	02020200 	.word	0x02020200
 80025d4:	01ff0000 	.word	0x01ff0000
 80025d8:	01010280 	.word	0x01010280
 80025dc:	52004000 	.word	0x52004000

080025e0 <VibeCheck_Init>:

void VibeCheck_Init(VibeCheck* vc,
		TIM_HandleTypeDef* htim_strobe,
		TIM_HandleTypeDef* htim_wavegen,
		DAC_HandleTypeDef* hdac_wavegen)
{
 80025e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e2:	b0cf      	sub	sp, #316	@ 0x13c
 80025e4:	af10      	add	r7, sp, #64	@ 0x40
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 faf9 	bl	8002be8 <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 80025f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002768 <VibeCheck_Init+0x188>)
 80025f8:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80025fc:	6810      	ldr	r0, [r2, #0]
 80025fe:	6018      	str	r0, [r3, #0]
 8002600:	8891      	ldrh	r1, [r2, #4]
 8002602:	7992      	ldrb	r2, [r2, #6]
 8002604:	8099      	strh	r1, [r3, #4]
 8002606:	719a      	strb	r2, [r3, #6]
 8002608:	f107 03b7 	add.w	r3, r7, #183	@ 0xb7
 800260c:	2239      	movs	r2, #57	@ 0x39
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f013 fe0e 	bl	8016232 <memset>
 8002616:	4b55      	ldr	r3, [pc, #340]	@ (800276c <VibeCheck_Init+0x18c>)
 8002618:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	f242 4324 	movw	r3, #9252	@ 0x2424
 8002622:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 8002624:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 8002628:	4a51      	ldr	r2, [pc, #324]	@ (8002770 <VibeCheck_Init+0x190>)
 800262a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800262e:	6810      	ldr	r0, [r2, #0]
 8002630:	6851      	ldr	r1, [r2, #4]
 8002632:	c303      	stmia	r3!, {r0, r1}
 8002634:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002638:	2238      	movs	r2, #56	@ 0x38
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f013 fdf8 	bl	8016232 <memset>
 8002642:	4b4c      	ldr	r3, [pc, #304]	@ (8002774 <VibeCheck_Init+0x194>)
 8002644:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	f242 4344 	movw	r3, #9284	@ 0x2444
 800264e:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 8002650:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	};

	VibeCheckShell_InputHandler accel_cmd = {
 8002654:	4a48      	ldr	r2, [pc, #288]	@ (8002778 <VibeCheck_Init+0x198>)
 8002656:	f107 0320 	add.w	r3, r7, #32
 800265a:	6810      	ldr	r0, [r2, #0]
 800265c:	6018      	str	r0, [r3, #0]
 800265e:	8892      	ldrh	r2, [r2, #4]
 8002660:	809a      	strh	r2, [r3, #4]
 8002662:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8002666:	223a      	movs	r2, #58	@ 0x3a
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f013 fde1 	bl	8016232 <memset>
 8002670:	4b42      	ldr	r3, [pc, #264]	@ (800277c <VibeCheck_Init+0x19c>)
 8002672:	663b      	str	r3, [r7, #96]	@ 0x60
			.name = "accel",
			.execute = VibeCheckAccelCMD_Execute,
			.obj = &vc->accel
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	f244 438c 	movw	r3, #17548	@ 0x448c
 800267a:	4413      	add	r3, r2
	VibeCheckShell_InputHandler accel_cmd = {
 800267c:	667b      	str	r3, [r7, #100]	@ 0x64
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 800267e:	68fe      	ldr	r6, [r7, #12]
 8002680:	466d      	mov	r5, sp
 8002682:	f107 04bc 	add.w	r4, r7, #188	@ 0xbc
 8002686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800268a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800268c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800268e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002692:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002696:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800269a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800269e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a0:	4630      	mov	r0, r6
 80026a2:	f000 fbcf 	bl	8002e44 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 80026a6:	68fe      	ldr	r6, [r7, #12]
 80026a8:	466d      	mov	r5, sp
 80026aa:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80026ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80026be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80026c2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80026c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026c8:	4630      	mov	r0, r6
 80026ca:	f000 fbbb 	bl	8002e44 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, accel_cmd);
 80026ce:	68fe      	ldr	r6, [r7, #12]
 80026d0:	466d      	mov	r5, sp
 80026d2:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80026d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80026e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80026ea:	f107 0320 	add.w	r3, r7, #32
 80026ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f0:	4630      	mov	r0, r6
 80026f2:	f000 fba7 	bl	8002e44 <VibeCheckShell_RegisterInputHandler>

	VibeCheckShell_OutputHandler wavegen_sender = {
 80026f6:	4b22      	ldr	r3, [pc, #136]	@ (8002780 <VibeCheck_Init+0x1a0>)
 80026f8:	61bb      	str	r3, [r7, #24]
			.execute = VibeCheckWaveGenSender_Execute,
			.obj = &vc->wavegen
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	f242 4344 	movw	r3, #9284	@ 0x2444
 8002700:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler wavegen_sender = {
 8002702:	61fb      	str	r3, [r7, #28]
	};

	VibeCheckShell_OutputHandler accel_sender = {
 8002704:	4b1f      	ldr	r3, [pc, #124]	@ (8002784 <VibeCheck_Init+0x1a4>)
 8002706:	613b      	str	r3, [r7, #16]
			.execute = VibeCheckAccelSender_Execute,
			.obj = &vc->accel
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	f244 438c 	movw	r3, #17548	@ 0x448c
 800270e:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler accel_sender = {
 8002710:	617b      	str	r3, [r7, #20]
	};

	VibeCheckShell_RegisterOutputHandler(&vc->shell, wavegen_sender);
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f107 0318 	add.w	r3, r7, #24
 8002718:	e893 0006 	ldmia.w	r3, {r1, r2}
 800271c:	f000 fbc4 	bl	8002ea8 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, accel_sender);
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f107 0310 	add.w	r3, r7, #16
 8002726:	e893 0006 	ldmia.w	r3, {r1, r2}
 800272a:	f000 fbbd 	bl	8002ea8 <VibeCheckShell_RegisterOutputHandler>

	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	f242 4324 	movw	r3, #9252	@ 0x2424
 8002734:	4413      	add	r3, r2
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fded 	bl	8003318 <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	f242 4344 	movw	r3, #9284	@ 0x2444
 8002744:	4413      	add	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6839      	ldr	r1, [r7, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f001 fb36 	bl	8003dbc <VibeCheckWaveGen_Init>
	VibeCheckAccel_Init(&vc->accel);
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	f244 438c 	movw	r3, #17548	@ 0x448c
 8002756:	4413      	add	r3, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f000 f843 	bl	80027e4 <VibeCheckAccel_Init>
}
 800275e:	bf00      	nop
 8002760:	37fc      	adds	r7, #252	@ 0xfc
 8002762:	46bd      	mov	sp, r7
 8002764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002766:	bf00      	nop
 8002768:	08019980 	.word	0x08019980
 800276c:	080038b9 	.word	0x080038b9
 8002770:	08019988 	.word	0x08019988
 8002774:	08004659 	.word	0x08004659
 8002778:	08019990 	.word	0x08019990
 800277c:	08002a65 	.word	0x08002a65
 8002780:	080047b5 	.word	0x080047b5
 8002784:	08002b1d 	.word	0x08002b1d

08002788 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Update(&vc->wavegen);
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	f242 4344 	movw	r3, #9284	@ 0x2444
 8002796:	4413      	add	r3, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f001 fbab 	bl	8003ef4 <VibeCheckWaveGen_Update>
	VibeCheckAccel_Update(&vc->accel);
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	f244 438c 	movw	r3, #17548	@ 0x448c
 80027a4:	4413      	add	r3, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f836 	bl	8002818 <VibeCheckAccel_Update>

	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fa54 	bl	8002c5c <VibeCheckShell_Update>
 80027b4:	4603      	mov	r3, r0
 80027b6:	617b      	str	r3, [r7, #20]

	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f107 020c 	add.w	r2, r7, #12
 80027be:	f107 0110 	add.w	r1, r7, #16
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fbe6 	bl	8002f94 <VibeCheckShell_GetOutput>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d006      	beq.n	80027dc <VibeCheck_Loop+0x54>
	{
		CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	b292      	uxth	r2, r2
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f011 fdba 	bl	8014350 <CDC_Transmit_HS>
	}
}
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <VibeCheckAccel_Init>:
 */

#include "vibecheck_accel.h"

void VibeCheckAccel_Init(VibeCheckAccel* accel)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	accel->data_ind = 0;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	accel->data_ready = 0;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	accel->time_prev_update = 0;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	accel->generate_fake_data = 0;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <VibeCheckAccel_Update>:

void VibeCheckAccel_Update(VibeCheckAccel* accel)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8002820:	f002 f8b4 	bl	800498c <HAL_GetTick>
 8002824:	6178      	str	r0, [r7, #20]
	if (time - accel->time_prev_update > VC_ACCEL_UPDATE_INTERVAL_MS)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b0a      	cmp	r3, #10
 8002832:	d95e      	bls.n	80028f2 <VibeCheckAccel_Update+0xda>
	{
		/* TODO: check if accelerometers have been plugged/unplugged */

		if (accel->generate_fake_data)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d055      	beq.n	80028ea <VibeCheckAccel_Update+0xd2>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002848:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80028fc <VibeCheckAccel_Update+0xe4>
 800284c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002850:	eeb0 0a67 	vmov.f32	s0, s15
 8002854:	f016 fa50 	bl	8018cf8 <sinf>
 8002858:	ed87 0a04 	vstr	s0, [r7, #16]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002866:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80028fc <VibeCheckAccel_Update+0xe4>
 800286a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002900 <VibeCheckAccel_Update+0xe8>
 8002872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002876:	eeb0 0a67 	vmov.f32	s0, s15
 800287a:	f016 fa3d 	bl	8018cf8 <sinf>
 800287e:	ed87 0a03 	vstr	s0, [r7, #12]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80028fc <VibeCheckAccel_Update+0xe4>
 8002890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002894:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002904 <VibeCheckAccel_Update+0xec>
 8002898:	ee77 7a87 	vadd.f32	s15, s15, s14
 800289c:	eeb0 0a67 	vmov.f32	s0, s15
 80028a0:	f016 fa2a 	bl	8018cf8 <sinf>
 80028a4:	ed87 0a02 	vstr	s0, [r7, #8]

			VibeCheckAccel_AddData(accel, 1, time, val1, val2, val3);
 80028a8:	ed97 1a02 	vldr	s2, [r7, #8]
 80028ac:	edd7 0a03 	vldr	s1, [r7, #12]
 80028b0:	ed97 0a04 	vldr	s0, [r7, #16]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	2101      	movs	r1, #1
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f825 	bl	8002908 <VibeCheckAccel_AddData>
			VibeCheckAccel_AddData(accel, 2, time, val3, val1, val2);
 80028be:	ed97 1a03 	vldr	s2, [r7, #12]
 80028c2:	edd7 0a04 	vldr	s1, [r7, #16]
 80028c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	2102      	movs	r1, #2
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f81a 	bl	8002908 <VibeCheckAccel_AddData>
			VibeCheckAccel_AddData(accel, 3, time, val2, val3, val1);
 80028d4:	ed97 1a04 	vldr	s2, [r7, #16]
 80028d8:	edd7 0a02 	vldr	s1, [r7, #8]
 80028dc:	ed97 0a03 	vldr	s0, [r7, #12]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	2103      	movs	r1, #3
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f80f 	bl	8002908 <VibeCheckAccel_AddData>
		}

		accel->time_prev_update = time;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	}
}
 80028f2:	bf00      	nop
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40c90fd0 	.word	0x40c90fd0
 8002900:	3f860a8b 	.word	0x3f860a8b
 8002904:	40060a8b 	.word	0x40060a8b

08002908 <VibeCheckAccel_AddData>:

void VibeCheckAccel_AddData(VibeCheckAccel* accel, uint8_t id, uint32_t time, float x, float y, float z)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6178      	str	r0, [r7, #20]
 8002910:	460b      	mov	r3, r1
 8002912:	60fa      	str	r2, [r7, #12]
 8002914:	ed87 0a02 	vstr	s0, [r7, #8]
 8002918:	edc7 0a01 	vstr	s1, [r7, #4]
 800291c:	ed87 1a00 	vstr	s2, [r7]
 8002920:	74fb      	strb	r3, [r7, #19]
	accel->data[accel->data_ind].id = id;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002928:	6979      	ldr	r1, [r7, #20]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	7cfa      	ldrb	r2, [r7, #19]
 8002936:	701a      	strb	r2, [r3, #0]
	accel->data[accel->data_ind].time = time;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800293e:	6979      	ldr	r1, [r7, #20]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3304      	adds	r3, #4
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].x = x;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002956:	6979      	ldr	r1, [r7, #20]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3308      	adds	r3, #8
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].y = y;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800296e:	6979      	ldr	r1, [r7, #20]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	330c      	adds	r3, #12
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].z = z;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002986:	6979      	ldr	r1, [r7, #20]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3310      	adds	r3, #16
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	601a      	str	r2, [r3, #0]

	accel->data_ind++;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	if (accel->data_ind == VC_ACCEL_DATA_PER_PACKET)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80029ac:	2b0a      	cmp	r3, #10
 80029ae:	d104      	bne.n	80029ba <VibeCheckAccel_AddData+0xb2>
	{
		accel->data_ready = 1;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	else if (accel->data_ind == 2 * VC_ACCEL_DATA_PER_PACKET)
	{
		accel->data_ind = 0;
		accel->data_ready = 1;
	}
}
 80029b8:	e00c      	b.n	80029d4 <VibeCheckAccel_AddData+0xcc>
	else if (accel->data_ind == 2 * VC_ACCEL_DATA_PER_PACKET)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80029c0:	2b14      	cmp	r3, #20
 80029c2:	d107      	bne.n	80029d4 <VibeCheckAccel_AddData+0xcc>
		accel->data_ind = 0;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
		accel->data_ready = 1;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
}
 80029d4:	bf00      	nop
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <VibeCheckAccel_StartFakeData>:

void VibeCheckAccel_StartFakeData(VibeCheckAccel* accel)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	accel->generate_fake_data = 1;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <VibeCheckAccel_StopFakeData>:

void VibeCheckAccel_StopFakeData(VibeCheckAccel* accel)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	accel->generate_fake_data = 0;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <VibeCheckAccel_GetDataReady>:

uint32_t VibeCheckAccel_GetDataReady(VibeCheckAccel* accel, VibeCheckAccel_Data** data)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
	if (accel->data_ready)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <VibeCheckAccel_GetDataReady+0x3c>
	{
		accel->data_ready = 0;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
		if (accel->data_ind < VC_ACCEL_DATA_PER_PACKET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002a3a:	2b09      	cmp	r3, #9
 8002a3c:	d805      	bhi.n	8002a4a <VibeCheckAccel_GetDataReady+0x32>
		{
			/* ready to send the second half */
			*data = &accel->data[VC_ACCEL_DATA_PER_PACKET];
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	e002      	b.n	8002a50 <VibeCheckAccel_GetDataReady+0x38>
		}
		else
		{
			/* ready to send the first half */
			*data = &accel->data[0];
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	601a      	str	r2, [r3, #0]
		}
		return 1;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <VibeCheckAccel_GetDataReady+0x3e>
	}
	return 0;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <VibeCheckAccelCMD_Execute>:
 */

#include "vibecheck_accel_handler.h"

uint32_t VibeCheckAccelCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b094      	sub	sp, #80	@ 0x50
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8002a72:	f107 030c 	add.w	r3, r7, #12
 8002a76:	2240      	movs	r2, #64	@ 0x40
 8002a78:	4619      	mov	r1, r3
 8002a7a:	6838      	ldr	r0, [r7, #0]
 8002a7c:	f000 fb06 	bl	800308c <VibeCheckShell_GetNextString>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d03c      	beq.n	8002b00 <VibeCheckAccelCMD_Execute+0x9c>
	{
		if (!strcmp(str, "fakedata"))
 8002a86:	f107 030c 	add.w	r3, r7, #12
 8002a8a:	4920      	ldr	r1, [pc, #128]	@ (8002b0c <VibeCheckAccelCMD_Execute+0xa8>)
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fc3f 	bl	8000310 <strcmp>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d133      	bne.n	8002b00 <VibeCheckAccelCMD_Execute+0x9c>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8002a98:	f107 030c 	add.w	r3, r7, #12
 8002a9c:	2240      	movs	r2, #64	@ 0x40
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6838      	ldr	r0, [r7, #0]
 8002aa2:	f000 faf3 	bl	800308c <VibeCheckShell_GetNextString>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d029      	beq.n	8002b00 <VibeCheckAccelCMD_Execute+0x9c>
			{
				if (!strcmp(str, "start"))
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	4917      	ldr	r1, [pc, #92]	@ (8002b10 <VibeCheckAccelCMD_Execute+0xac>)
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd fc2c 	bl	8000310 <strcmp>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10b      	bne.n	8002ad6 <VibeCheckAccelCMD_Execute+0x72>
				{
					VibeCheckAccel_StartFakeData(accel);
 8002abe:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002ac0:	f7ff ff8e 	bl	80029e0 <VibeCheckAccel_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8002ac4:	4913      	ldr	r1, [pc, #76]	@ (8002b14 <VibeCheckAccelCMD_Execute+0xb0>)
 8002ac6:	6838      	ldr	r0, [r7, #0]
 8002ac8:	f000 fb9a 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8002acc:	6838      	ldr	r0, [r7, #0]
 8002ace:	f000 fc15 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e015      	b.n	8002b02 <VibeCheckAccelCMD_Execute+0x9e>
				}
				else if (!strcmp(str, "stop"))
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	490f      	ldr	r1, [pc, #60]	@ (8002b18 <VibeCheckAccelCMD_Execute+0xb4>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fc17 	bl	8000310 <strcmp>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <VibeCheckAccelCMD_Execute+0x9c>
				{
					VibeCheckAccel_StopFakeData(accel);
 8002ae8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002aea:	f7ff ff87 	bl	80029fc <VibeCheckAccel_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8002aee:	4909      	ldr	r1, [pc, #36]	@ (8002b14 <VibeCheckAccelCMD_Execute+0xb0>)
 8002af0:	6838      	ldr	r0, [r7, #0]
 8002af2:	f000 fb85 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8002af6:	6838      	ldr	r0, [r7, #0]
 8002af8:	f000 fc00 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <VibeCheckAccelCMD_Execute+0x9e>
				}
			}
		}
	}

	return 0;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3750      	adds	r7, #80	@ 0x50
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	08019998 	.word	0x08019998
 8002b10:	080199a4 	.word	0x080199a4
 8002b14:	080199ac 	.word	0x080199ac
 8002b18:	080199b0 	.word	0x080199b0

08002b1c <VibeCheckAccelSender_Execute>:


uint32_t VibeCheckAccelSender_Execute(void* obj, VibeCheckShell* shell)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	613b      	str	r3, [r7, #16]

	VibeCheckAccel_Data* data;
	if (VibeCheckAccel_GetDataReady(accel, &data))
 8002b2a:	f107 030c 	add.w	r3, r7, #12
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6938      	ldr	r0, [r7, #16]
 8002b32:	f7ff ff71 	bl	8002a18 <VibeCheckAccel_GetDataReady>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d04e      	beq.n	8002bda <VibeCheckAccelSender_Execute+0xbe>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 8002b3c:	4929      	ldr	r1, [pc, #164]	@ (8002be4 <VibeCheckAccelSender_Execute+0xc8>)
 8002b3e:	6838      	ldr	r0, [r7, #0]
 8002b40:	f000 fb5e 	bl	8003200 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8002b44:	6838      	ldr	r0, [r7, #0]
 8002b46:	f000 fbcb 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, VC_ACCEL_DATA_PER_PACKET);
 8002b4a:	210a      	movs	r1, #10
 8002b4c:	6838      	ldr	r0, [r7, #0]
 8002b4e:	f000 fb91 	bl	8003274 <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
		while (data_written < VC_ACCEL_DATA_PER_PACKET)
 8002b56:	e038      	b.n	8002bca <VibeCheckAccelSender_Execute+0xae>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 8002b58:	6838      	ldr	r0, [r7, #0]
 8002b5a:	f000 fbc1 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	4619      	mov	r1, r3
 8002b64:	6838      	ldr	r0, [r7, #0]
 8002b66:	f000 fb85 	bl	8003274 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8002b6a:	6838      	ldr	r0, [r7, #0]
 8002b6c:	f000 fbb8 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4619      	mov	r1, r3
 8002b76:	6838      	ldr	r0, [r7, #0]
 8002b78:	f000 fb7c 	bl	8003274 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8002b7c:	6838      	ldr	r0, [r7, #0]
 8002b7e:	f000 fbaf 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b88:	eeb0 0a67 	vmov.f32	s0, s15
 8002b8c:	6838      	ldr	r0, [r7, #0]
 8002b8e:	f000 fb89 	bl	80032a4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8002b92:	6838      	ldr	r0, [r7, #0]
 8002b94:	f000 fba4 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba2:	6838      	ldr	r0, [r7, #0]
 8002ba4:	f000 fb7e 	bl	80032a4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8002ba8:	6838      	ldr	r0, [r7, #0]
 8002baa:	f000 fb99 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb8:	6838      	ldr	r0, [r7, #0]
 8002bba:	f000 fb73 	bl	80032a4 <VibeCheckShell_PutOutputFloat>

			data++;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	60fb      	str	r3, [r7, #12]
			data_written++;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
		while (data_written < VC_ACCEL_DATA_PER_PACKET)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b09      	cmp	r3, #9
 8002bce:	d9c3      	bls.n	8002b58 <VibeCheckAccelSender_Execute+0x3c>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8002bd0:	6838      	ldr	r0, [r7, #0]
 8002bd2:	f000 fb93 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <VibeCheckAccelSender_Execute+0xc0>
	}
	else
	{
		return 0;
 8002bda:	2300      	movs	r3, #0
	}
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	080199b8 	.word	0x080199b8

08002be8 <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	shell->input_tail = 0;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
	shell->input_count = 0;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
	shell->input_delimiter_count = 0;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

	shell->output_head = 0;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c16:	461a      	mov	r2, r3
 8002c18:	2300      	movs	r3, #0
 8002c1a:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c22:	461a      	mov	r2, r3
 8002c24:	2300      	movs	r3, #0
 8002c26:	6153      	str	r3, [r2, #20]
	shell->output_count = 0;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2300      	movs	r3, #0
 8002c32:	6193      	str	r3, [r2, #24]

	shell->ih_count = 0;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	shell->oh_count = 0;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b099      	sub	sp, #100	@ 0x64
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 8002c64:	2300      	movs	r3, #0
 8002c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002c6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c72:	d302      	bcc.n	8002c7a <VibeCheckShell_Update+0x1e>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8092 	beq.w	8002daa <VibeCheckShell_Update+0x14e>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 8002c8c:	e08d      	b.n	8002daa <VibeCheckShell_Update+0x14e>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	2240      	movs	r2, #64	@ 0x40
 8002c94:	4619      	mov	r1, r3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f9f8 	bl	800308c <VibeCheckShell_GetNextString>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d04d      	beq.n	8002d3e <VibeCheckShell_Update+0xe2>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ca6:	e041      	b.n	8002d2c <VibeCheckShell_Update+0xd0>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8002ca8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	f241 0218 	movw	r2, #4120	@ 0x1018
 8002cb6:	441a      	add	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	f107 020c 	add.w	r2, r7, #12
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd fb23 	bl	8000310 <strcmp>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d11e      	bne.n	8002d0e <VibeCheckShell_Update+0xb2>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	18ca      	adds	r2, r1, r3
 8002cde:	f241 035c 	movw	r3, #4188	@ 0x105c
 8002ce2:	4413      	add	r3, r2
 8002ce4:	681c      	ldr	r4, [r3, #0]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f503 5383 	add.w	r3, r3, #4192	@ 0x1060
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	47a0      	blx	r4
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d11f      	bne.n	8002d46 <VibeCheckShell_Update+0xea>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8002d06:	2303      	movs	r3, #3
 8002d08:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 8002d0c:	e01b      	b.n	8002d46 <VibeCheckShell_Update+0xea>
				}

				if (i == shell->ih_count - 1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d14:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d102      	bne.n	8002d26 <VibeCheckShell_Update+0xca>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8002d20:	2302      	movs	r3, #2
 8002d22:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8002d26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d28:	3301      	adds	r3, #1
 8002d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d32:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002d36:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d3b5      	bcc.n	8002ca8 <VibeCheckShell_Update+0x4c>
 8002d3c:	e004      	b.n	8002d48 <VibeCheckShell_Update+0xec>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8002d44:	e000      	b.n	8002d48 <VibeCheckShell_Update+0xec>
					break;
 8002d46:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002d5c:	1e5a      	subs	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002d78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d7c:	d103      	bne.n	8002d86 <VibeCheckShell_Update+0x12a>
				shell->input_tail = 0;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 8002d86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	482c      	ldr	r0, [pc, #176]	@ (8002e40 <VibeCheckShell_Update+0x1e4>)
 8002d8e:	f013 fa58 	bl	8016242 <strchr>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d100      	bne.n	8002d9a <VibeCheckShell_Update+0x13e>
		{
 8002d98:	e7d6      	b.n	8002d48 <VibeCheckShell_Update+0xec>
				break;  /* found the delimiter */
 8002d9a:	bf00      	nop
		}


		shell->input_delimiter_count--;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002da2:	1e5a      	subs	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
	while (shell->input_delimiter_count)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f47f af6c 	bne.w	8002c8e <VibeCheckShell_Update+0x32>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dba:	e018      	b.n	8002dee <VibeCheckShell_Update+0x192>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dc0:	f202 4244 	addw	r2, r2, #1092	@ 0x444
 8002dc4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dcc:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	440b      	add	r3, r1
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	4790      	blx	r2
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <VibeCheckShell_Update+0x18c>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8002de8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dea:	3301      	adds	r3, #1
 8002dec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002df4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002df8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d3de      	bcc.n	8002dbc <VibeCheckShell_Update+0x160>
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e0a:	d302      	bcc.n	8002e12 <VibeCheckShell_Update+0x1b6>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 8002e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e14:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e16:	2300      	movs	r3, #0
 8002e18:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8002e1c:	f362 0307 	bfi	r3, r2, #0, #8
 8002e20:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8002e24:	f362 230f 	bfi	r3, r2, #8, #8
 8002e28:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8002e2c:	f362 4317 	bfi	r3, r2, #16, #8
 8002e30:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8002e34:	f362 631f 	bfi	r3, r2, #24, #8
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3764      	adds	r7, #100	@ 0x64
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd90      	pop	{r4, r7, pc}
 8002e40:	080199c0 	.word	0x080199c0

08002e44 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 8002e44:	b084      	sub	sp, #16
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	f107 0014 	add.w	r0, r7, #20
 8002e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e5c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002e60:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e62:	d81a      	bhi.n	8002e9a <VibeCheckShell_RegisterInputHandler+0x56>
		shell->input_handlers[shell->ih_count++] = handler;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002e6e:	1c53      	adds	r3, r2, #1
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002e76:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	18ca      	adds	r2, r1, r3
 8002e86:	f241 0318 	movw	r3, #4120	@ 0x1018
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	f107 0114 	add.w	r1, r7, #20
 8002e92:	2248      	movs	r2, #72	@ 0x48
 8002e94:	4618      	mov	r0, r3
 8002e96:	f013 fa6a 	bl	801636e <memcpy>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ea4:	b004      	add	sp, #16
 8002ea6:	4770      	bx	lr

08002ea8 <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ebc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002ec0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ec2:	d814      	bhi.n	8002eee <VibeCheckShell_RegisterOutputHandler+0x46>
		shell->output_handlers[shell->oh_count++] = handler;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002eca:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68f9      	ldr	r1, [r7, #12]
 8002ed2:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002ed6:	f8c1 2420 	str.w	r2, [r1, #1056]	@ 0x420
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	1d3a      	adds	r2, r7, #4
 8002ee6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002eea:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	e035      	b.n	8002f7a <VibeCheckShell_PutInput+0x7e>
	{
		if (*input)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d036      	beq.n	8002f84 <VibeCheckShell_PutInput+0x88>
		{
			shell->input[shell->input_head++] = *input;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8002f1c:	1c59      	adds	r1, r3, #1
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	f8c2 1800 	str.w	r1, [r2, #2048]	@ 0x800
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	7811      	ldrb	r1, [r2, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8002f32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f36:	d103      	bne.n	8002f40 <VibeCheckShell_PutInput+0x44>
					shell->input_head = 0;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
			shell->input_count++;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	480e      	ldr	r0, [pc, #56]	@ (8002f90 <VibeCheckShell_PutInput+0x94>)
 8002f56:	f013 f974 	bl	8016242 <strchr>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d006      	beq.n	8002f6e <VibeCheckShell_PutInput+0x72>
				shell->input_delimiter_count++;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

			input++;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	3301      	adds	r3, #1
 8002f72:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3301      	adds	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d3c5      	bcc.n	8002f0e <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 8002f82:	e000      	b.n	8002f86 <VibeCheckShell_PutInput+0x8a>
			break;
 8002f84:	bf00      	nop
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	080199c0 	.word	0x080199c0

08002f94 <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	if (shell->output_head == shell->output_tail)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d101      	bne.n	8002fb8 <VibeCheckShell_GetOutput+0x24>
		return 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e062      	b.n	800307e <VibeCheckShell_GetOutput+0xea>

	if (shell->output_head > shell->output_tail)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d930      	bls.n	800302e <VibeCheckShell_GetOutput+0x9a>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[shell->output_tail];
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	441a      	add	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	601a      	str	r2, [r3, #0]
		*len = shell->output_head - shell->output_tail;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	1ad2      	subs	r2, r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	601a      	str	r2, [r3, #0]
		shell->output_count -= shell->output_head - shell->output_tail;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003004:	6959      	ldr	r1, [r3, #20]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	1acb      	subs	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003018:	6193      	str	r3, [r2, #24]
		shell->output_tail = shell->output_head;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003028:	6153      	str	r3, [r2, #20]
		return 1;
 800302a:	2301      	movs	r3, #1
 800302c:	e027      	b.n	800307e <VibeCheckShell_GetOutput+0xea>
	}
	else
	{
		/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
		*output = &shell->output[shell->output_tail];
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	441a      	add	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	601a      	str	r2, [r3, #0]
		*len = VC_SHELL_IO_BUF_LEN - shell->output_tail;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	601a      	str	r2, [r3, #0]
		shell->output_count -= VC_SHELL_IO_BUF_LEN - shell->output_tail;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	4413      	add	r3, r2
 8003064:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800306e:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003076:	461a      	mov	r2, r3
 8003078:	2300      	movs	r3, #0
 800307a:	6153      	str	r3, [r2, #20]
		return 1;
 800307c:	2301      	movs	r3, #1
	}

}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	e057      	b.n	800314e <VibeCheckShell_GetNextString+0xc2>
	{

		char x = shell->input[shell->input_tail];
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	5cd3      	ldrb	r3, [r2, r3]
 80030a8:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 80030aa:	7cfb      	ldrb	r3, [r7, #19]
 80030ac:	4619      	mov	r1, r3
 80030ae:	482c      	ldr	r0, [pc, #176]	@ (8003160 <VibeCheckShell_GetNextString+0xd4>)
 80030b0:	f013 f8c7 	bl	8016242 <strchr>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <VibeCheckShell_GetNextString+0x42>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <VibeCheckShell_GetNextString+0x3e>
			{
				*next = '\0';
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
				return 1;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e046      	b.n	8003158 <VibeCheckShell_GetNextString+0xcc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 80030ca:	2300      	movs	r3, #0
 80030cc:	e044      	b.n	8003158 <VibeCheckShell_GetNextString+0xcc>
		}
		else
		{
			shell->input_count--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80030d4:	1e5a      	subs	r2, r3, #1
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80030f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030f4:	d103      	bne.n	80030fe <VibeCheckShell_GetNextString+0x72>
				shell->input_tail = 0;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	4619      	mov	r1, r3
 8003102:	4818      	ldr	r0, [pc, #96]	@ (8003164 <VibeCheckShell_GetNextString+0xd8>)
 8003104:	f013 f89d 	bl	8016242 <strchr>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <VibeCheckShell_GetNextString+0x92>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01c      	beq.n	800314e <VibeCheckShell_GetNextString+0xc2>
				{
					*next = '\0';
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
					return 1;
 800311a:	2301      	movs	r3, #1
 800311c:	e01c      	b.n	8003158 <VibeCheckShell_GetNextString+0xcc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 800311e:	7cfb      	ldrb	r3, [r7, #19]
 8003120:	74bb      	strb	r3, [r7, #18]
 8003122:	7cbb      	ldrb	r3, [r7, #18]
 8003124:	3301      	adds	r3, #1
 8003126:	4a10      	ldr	r2, [pc, #64]	@ (8003168 <VibeCheckShell_GetNextString+0xdc>)
 8003128:	4413      	add	r3, r2
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b01      	cmp	r3, #1
 8003132:	d103      	bne.n	800313c <VibeCheckShell_GetNextString+0xb0>
 8003134:	7cbb      	ldrb	r3, [r7, #18]
 8003136:	f103 0220 	add.w	r2, r3, #32
 800313a:	e000      	b.n	800313e <VibeCheckShell_GetNextString+0xb2>
 800313c:	7cba      	ldrb	r2, [r7, #18]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1c59      	adds	r1, r3, #1
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]
				i++;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	3301      	adds	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	429a      	cmp	r2, r3
 8003154:	d3a3      	bcc.n	800309e <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	080199c0 	.word	0x080199c0
 8003164:	080199c4 	.word	0x080199c4
 8003168:	08019c48 	.word	0x08019c48

0800316c <VibeCheckShell_GetNextFloat>:
	return 0;
}


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b099      	sub	sp, #100	@ 0x64
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003176:	f107 031c 	add.w	r3, r7, #28
 800317a:	2240      	movs	r2, #64	@ 0x40
 800317c:	4619      	mov	r1, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ff84 	bl	800308c <VibeCheckShell_GetNextString>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d033      	beq.n	80031f2 <VibeCheckShell_GetNextFloat+0x86>
	{
		char valid[] = ".-0123456789";
 800318a:	4b1c      	ldr	r3, [pc, #112]	@ (80031fc <VibeCheckShell_GetNextFloat+0x90>)
 800318c:	f107 040c 	add.w	r4, r7, #12
 8003190:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003192:	c407      	stmia	r4!, {r0, r1, r2}
 8003194:	7023      	strb	r3, [r4, #0]
		for (uint32_t i = 0; i < strlen(str); i++)
 8003196:	2300      	movs	r3, #0
 8003198:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800319a:	e013      	b.n	80031c4 <VibeCheckShell_GetNextFloat+0x58>
			if (strchr(valid, str[i]) == NULL)
 800319c:	f107 021c 	add.w	r2, r7, #28
 80031a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031a2:	4413      	add	r3, r2
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f013 f847 	bl	8016242 <strchr>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <VibeCheckShell_GetNextFloat+0x52>
				return 0;  /* next token contains non-numeric characters */
 80031ba:	2300      	movs	r3, #0
 80031bc:	e01a      	b.n	80031f4 <VibeCheckShell_GetNextFloat+0x88>
		for (uint32_t i = 0; i < strlen(str); i++)
 80031be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031c0:	3301      	adds	r3, #1
 80031c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031c4:	f107 031c 	add.w	r3, r7, #28
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f901 	bl	80003d0 <strlen>
 80031ce:	4602      	mov	r2, r0
 80031d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d3e2      	bcc.n	800319c <VibeCheckShell_GetNextFloat+0x30>
		*next = atof(str);
 80031d6:	f107 031c 	add.w	r3, r7, #28
 80031da:	4618      	mov	r0, r3
 80031dc:	f011 fd0c 	bl	8014bf8 <atof>
 80031e0:	eeb0 7b40 	vmov.f64	d7, d0
 80031e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	edc3 7a00 	vstr	s15, [r3]
		return 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <VibeCheckShell_GetNextFloat+0x88>
	}

	return 0;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3764      	adds	r7, #100	@ 0x64
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd90      	pop	{r4, r7, pc}
 80031fc:	080199d4 	.word	0x080199d4

08003200 <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
	while (*str)
 800320a:	e027      	b.n	800325c <VibeCheckShell_PutOutputString+0x5c>
	{
		shell->output[shell->output_head++] = *(str++);
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	1c53      	adds	r3, r2, #1
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	1c59      	adds	r1, r3, #1
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8003222:	6101      	str	r1, [r0, #16]
 8003224:	7811      	ldrb	r1, [r2, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	460a      	mov	r2, r1
 800322c:	f883 2810 	strb.w	r2, [r3, #2064]	@ 0x810
		shell->output_count++;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	3301      	adds	r3, #1
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003240:	6193      	str	r3, [r2, #24]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800324e:	d105      	bne.n	800325c <VibeCheckShell_PutOutputString+0x5c>
			shell->output_head = 0;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003256:	461a      	mov	r2, r3
 8003258:	2300      	movs	r3, #0
 800325a:	6113      	str	r3, [r2, #16]
	while (*str)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1d3      	bne.n	800320c <VibeCheckShell_PutOutputString+0xc>
	}
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b092      	sub	sp, #72	@ 0x48
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 800327e:	f107 0308 	add.w	r3, r7, #8
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	4906      	ldr	r1, [pc, #24]	@ (80032a0 <VibeCheckShell_PutOutputInt+0x2c>)
 8003286:	4618      	mov	r0, r3
 8003288:	f012 ff70 	bl	801616c <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 800328c:	f107 0308 	add.w	r3, r7, #8
 8003290:	4619      	mov	r1, r3
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ffb4 	bl	8003200 <VibeCheckShell_PutOutputString>
}
 8003298:	bf00      	nop
 800329a:	3748      	adds	r7, #72	@ 0x48
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	080199e4 	.word	0x080199e4

080032a4 <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b092      	sub	sp, #72	@ 0x48
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%f", val);
 80032b0:	edd7 7a00 	vldr	s15, [r7]
 80032b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032b8:	f107 0008 	add.w	r0, r7, #8
 80032bc:	ec53 2b17 	vmov	r2, r3, d7
 80032c0:	4906      	ldr	r1, [pc, #24]	@ (80032dc <VibeCheckShell_PutOutputFloat+0x38>)
 80032c2:	f012 ff53 	bl	801616c <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 80032c6:	f107 0308 	add.w	r3, r7, #8
 80032ca:	4619      	mov	r1, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff97 	bl	8003200 <VibeCheckShell_PutOutputString>
}
 80032d2:	bf00      	nop
 80032d4:	3748      	adds	r7, #72	@ 0x48
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	080199e8 	.word	0x080199e8

080032e0 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 80032e8:	4903      	ldr	r1, [pc, #12]	@ (80032f8 <VibeCheckShell_PutOutputSeparator+0x18>)
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ff88 	bl	8003200 <VibeCheckShell_PutOutputString>
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	080199ec 	.word	0x080199ec

080032fc <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 8003304:	4903      	ldr	r1, [pc, #12]	@ (8003314 <VibeCheckShell_PutOutputDelimiter+0x18>)
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ff7a 	bl	8003200 <VibeCheckShell_PutOutputString>
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	080199c0 	.word	0x080199c0

08003318 <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800332e:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003336:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f640 125f 	movw	r2, #2399	@ 0x95f
 800334a:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003352:	eeb0 0a67 	vmov.f32	s0, s15
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f84a 	bl	80033f0 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003362:	eeb0 0a67 	vmov.f32	s0, s15
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f928 	bl	80035bc <VibeCheckStrobe_SetExposure>

}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_Base_Start_IT(strobe->htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f00a ff11 	bl	800e1a8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f00a fff3 	bl	800e378 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2104      	movs	r1, #4
 8003398:	4618      	mov	r0, r3
 800339a:	f00a ffed 	bl	800e378 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2108      	movs	r1, #8
 80033a4:	4618      	mov	r0, r3
 80033a6:	f00a ffe7 	bl	800e378 <HAL_TIM_PWM_Start>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(strobe->htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f00a fef2 	bl	800e1a8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f00b f8f0 	bl	800e5b0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2104      	movs	r1, #4
 80033d6:	4618      	mov	r0, r3
 80033d8:	f00b f8ea 	bl	800e5b0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2108      	movs	r1, #8
 80033e2:	4618      	mov	r0, r3
 80033e4:	f00b f8e4 	bl	800e5b0 <HAL_TIM_PWM_Stop>
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 80033fc:	edd7 7a00 	vldr	s15, [r7]
 8003400:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340c:	d502      	bpl.n	8003414 <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 800340e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003412:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 8003414:	edd7 7a00 	vldr	s15, [r7]
 8003418:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003484 <VibeCheckStrobe_SetFrequency+0x94>
 800341c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003424:	dd01      	ble.n	800342a <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 8003426:	4b18      	ldr	r3, [pc, #96]	@ (8003488 <VibeCheckStrobe_SetFrequency+0x98>)
 8003428:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 800342a:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800348c <VibeCheckStrobe_SetFrequency+0x9c>
 800342e:	ed97 7a00 	vldr	s14, [r7]
 8003432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003436:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800343a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800343e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003442:	ee17 2a90 	vmov	r2, s15
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800345a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800345e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800348c <VibeCheckStrobe_SetFrequency+0x9c>
 8003462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6912      	ldr	r2, [r2, #16]
 8003476:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	447a0000 	.word	0x447a0000
 8003488:	447a0000 	.word	0x447a0000
 800348c:	47c35000 	.word	0x47c35000

08003490 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	ee07 3a90 	vmov	s15, r3
}
 80034a0:	eeb0 0a67 	vmov.f32	s0, s15
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 80034bc:	edd7 7a00 	vldr	s15, [r7]
 80034c0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8003588 <VibeCheckStrobe_SetPhase+0xd8>
 80034c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034cc:	d501      	bpl.n	80034d2 <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 80034ce:	4b2f      	ldr	r3, [pc, #188]	@ (800358c <VibeCheckStrobe_SetPhase+0xdc>)
 80034d0:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 80034d2:	edd7 7a00 	vldr	s15, [r7]
 80034d6:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003590 <VibeCheckStrobe_SetPhase+0xe0>
 80034da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e2:	dd01      	ble.n	80034e8 <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 80034e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003594 <VibeCheckStrobe_SetPhase+0xe4>)
 80034e6:	603b      	str	r3, [r7, #0]


	/* TODO: need to test if this works */
	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80034ee:	ed97 7a00 	vldr	s14, [r7]
 80034f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f6:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 80034fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80034fe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003598 <VibeCheckStrobe_SetPhase+0xe8>
 8003502:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800351a:	ee17 3a90 	vmov	r3, s15
 800351e:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d029      	beq.n	800357a <VibeCheckStrobe_SetPhase+0xca>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d125      	bne.n	800357a <VibeCheckStrobe_SetPhase+0xca>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d121      	bne.n	800357a <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	ed93 7a03 	vldr	s14, [r3, #12]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003552:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003556:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8003598 <VibeCheckStrobe_SetPhase+0xe8>
 800355a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800355e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	441a      	add	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	619a      	str	r2, [r3, #24]
	}
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	c3340000 	.word	0xc3340000
 800358c:	c3340000 	.word	0xc3340000
 8003590:	43340000 	.word	0x43340000
 8003594:	43340000 	.word	0x43340000
 8003598:	43b40000 	.word	0x43b40000

0800359c <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	ee07 3a90 	vmov	s15, r3
}
 80035ac:	eeb0 0a67 	vmov.f32	s0, s15
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 80035c8:	edd7 7a00 	vldr	s15, [r7]
 80035cc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003648 <VibeCheckStrobe_SetExposure+0x8c>
 80035d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035d4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800364c <VibeCheckStrobe_SetExposure+0x90>
 80035d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035e0:	ee17 3a90 	vmov	r3, s15
 80035e4:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d904      	bls.n	80035fe <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	ee07 3a90 	vmov	s15, r3
 8003604:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003608:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800364c <VibeCheckStrobe_SetExposure+0x90>
 800360c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003610:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003650 <VibeCheckStrobe_SetExposure+0x94>
 8003614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	3a83126f 	.word	0x3a83126f
 800364c:	47c35000 	.word	0x47c35000
 8003650:	447a0000 	.word	0x447a0000

08003654 <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	ee07 3a90 	vmov	s15, r3
}
 8003664:	eeb0 0a67 	vmov.f32	s0, s15
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6912      	ldr	r2, [r2, #16]
 800368c:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6952      	ldr	r2, [r2, #20]
 80036a6:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	619a      	str	r2, [r3, #24]
	}
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b096      	sub	sp, #88	@ 0x58
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80036ca:	f107 0318 	add.w	r3, r7, #24
 80036ce:	2240      	movs	r2, #64	@ 0x40
 80036d0:	4619      	mov	r1, r3
 80036d2:	6838      	ldr	r0, [r7, #0]
 80036d4:	f7ff fcda 	bl	800308c <VibeCheckShell_GetNextString>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d065      	beq.n	80037aa <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 80036de:	f107 0318 	add.w	r3, r7, #24
 80036e2:	4934      	ldr	r1, [pc, #208]	@ (80037b4 <VibeCheckStrobeCMD_Set+0xf4>)
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fc fe13 	bl	8000310 <strcmp>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d118      	bne.n	8003722 <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	4619      	mov	r1, r3
 80036f6:	6838      	ldr	r0, [r7, #0]
 80036f8:	f7ff fd38 	bl	800316c <VibeCheckShell_GetNextFloat>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d053      	beq.n	80037aa <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 8003702:	edd7 7a05 	vldr	s15, [r7, #20]
 8003706:	eeb0 0a67 	vmov.f32	s0, s15
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fe70 	bl	80033f0 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003710:	4929      	ldr	r1, [pc, #164]	@ (80037b8 <VibeCheckStrobeCMD_Set+0xf8>)
 8003712:	6838      	ldr	r0, [r7, #0]
 8003714:	f7ff fd74 	bl	8003200 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003718:	6838      	ldr	r0, [r7, #0]
 800371a:	f7ff fdef 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800371e:	2301      	movs	r3, #1
 8003720:	e044      	b.n	80037ac <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 8003722:	f107 0318 	add.w	r3, r7, #24
 8003726:	4925      	ldr	r1, [pc, #148]	@ (80037bc <VibeCheckStrobeCMD_Set+0xfc>)
 8003728:	4618      	mov	r0, r3
 800372a:	f7fc fdf1 	bl	8000310 <strcmp>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d118      	bne.n	8003766 <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8003734:	f107 0310 	add.w	r3, r7, #16
 8003738:	4619      	mov	r1, r3
 800373a:	6838      	ldr	r0, [r7, #0]
 800373c:	f7ff fd16 	bl	800316c <VibeCheckShell_GetNextFloat>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d031      	beq.n	80037aa <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 8003746:	edd7 7a04 	vldr	s15, [r7, #16]
 800374a:	eeb0 0a67 	vmov.f32	s0, s15
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff feae 	bl	80034b0 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003754:	4918      	ldr	r1, [pc, #96]	@ (80037b8 <VibeCheckStrobeCMD_Set+0xf8>)
 8003756:	6838      	ldr	r0, [r7, #0]
 8003758:	f7ff fd52 	bl	8003200 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 800375c:	6838      	ldr	r0, [r7, #0]
 800375e:	f7ff fdcd 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003762:	2301      	movs	r3, #1
 8003764:	e022      	b.n	80037ac <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 8003766:	f107 0318 	add.w	r3, r7, #24
 800376a:	4915      	ldr	r1, [pc, #84]	@ (80037c0 <VibeCheckStrobeCMD_Set+0x100>)
 800376c:	4618      	mov	r0, r3
 800376e:	f7fc fdcf 	bl	8000310 <strcmp>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d118      	bne.n	80037aa <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	4619      	mov	r1, r3
 800377e:	6838      	ldr	r0, [r7, #0]
 8003780:	f7ff fcf4 	bl	800316c <VibeCheckShell_GetNextFloat>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00f      	beq.n	80037aa <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 800378a:	edd7 7a03 	vldr	s15, [r7, #12]
 800378e:	eeb0 0a67 	vmov.f32	s0, s15
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ff12 	bl	80035bc <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003798:	4907      	ldr	r1, [pc, #28]	@ (80037b8 <VibeCheckStrobeCMD_Set+0xf8>)
 800379a:	6838      	ldr	r0, [r7, #0]
 800379c:	f7ff fd30 	bl	8003200 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80037a0:	6838      	ldr	r0, [r7, #0]
 80037a2:	f7ff fdab 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3758      	adds	r7, #88	@ 0x58
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	080199f0 	.word	0x080199f0
 80037b8:	080199fc 	.word	0x080199fc
 80037bc:	08019a00 	.word	0x08019a00
 80037c0:	08019a08 	.word	0x08019a08

080037c4 <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b092      	sub	sp, #72	@ 0x48
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80037ce:	f107 0308 	add.w	r3, r7, #8
 80037d2:	2240      	movs	r2, #64	@ 0x40
 80037d4:	4619      	mov	r1, r3
 80037d6:	6838      	ldr	r0, [r7, #0]
 80037d8:	f7ff fc58 	bl	800308c <VibeCheckShell_GetNextString>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d05c      	beq.n	800389c <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 80037e2:	f107 0308 	add.w	r3, r7, #8
 80037e6:	4930      	ldr	r1, [pc, #192]	@ (80038a8 <VibeCheckStrobeCMD_Get+0xe4>)
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fc fd91 	bl	8000310 <strcmp>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d115      	bne.n	8003820 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80037f4:	492d      	ldr	r1, [pc, #180]	@ (80038ac <VibeCheckStrobeCMD_Get+0xe8>)
 80037f6:	6838      	ldr	r0, [r7, #0]
 80037f8:	f7ff fd02 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80037fc:	6838      	ldr	r0, [r7, #0]
 80037fe:	f7ff fd6f 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff fe44 	bl	8003490 <VibeCheckStrobe_GetFrequency>
 8003808:	eef0 7a40 	vmov.f32	s15, s0
 800380c:	eeb0 0a67 	vmov.f32	s0, s15
 8003810:	6838      	ldr	r0, [r7, #0]
 8003812:	f7ff fd47 	bl	80032a4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003816:	6838      	ldr	r0, [r7, #0]
 8003818:	f7ff fd70 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800381c:	2301      	movs	r3, #1
 800381e:	e03e      	b.n	800389e <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 8003820:	f107 0308 	add.w	r3, r7, #8
 8003824:	4922      	ldr	r1, [pc, #136]	@ (80038b0 <VibeCheckStrobeCMD_Get+0xec>)
 8003826:	4618      	mov	r0, r3
 8003828:	f7fc fd72 	bl	8000310 <strcmp>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d115      	bne.n	800385e <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8003832:	491e      	ldr	r1, [pc, #120]	@ (80038ac <VibeCheckStrobeCMD_Get+0xe8>)
 8003834:	6838      	ldr	r0, [r7, #0]
 8003836:	f7ff fce3 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800383a:	6838      	ldr	r0, [r7, #0]
 800383c:	f7ff fd50 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff feab 	bl	800359c <VibeCheckStrobe_GetPhase>
 8003846:	eef0 7a40 	vmov.f32	s15, s0
 800384a:	eeb0 0a67 	vmov.f32	s0, s15
 800384e:	6838      	ldr	r0, [r7, #0]
 8003850:	f7ff fd28 	bl	80032a4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003854:	6838      	ldr	r0, [r7, #0]
 8003856:	f7ff fd51 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800385a:	2301      	movs	r3, #1
 800385c:	e01f      	b.n	800389e <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 800385e:	f107 0308 	add.w	r3, r7, #8
 8003862:	4914      	ldr	r1, [pc, #80]	@ (80038b4 <VibeCheckStrobeCMD_Get+0xf0>)
 8003864:	4618      	mov	r0, r3
 8003866:	f7fc fd53 	bl	8000310 <strcmp>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d115      	bne.n	800389c <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8003870:	490e      	ldr	r1, [pc, #56]	@ (80038ac <VibeCheckStrobeCMD_Get+0xe8>)
 8003872:	6838      	ldr	r0, [r7, #0]
 8003874:	f7ff fcc4 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8003878:	6838      	ldr	r0, [r7, #0]
 800387a:	f7ff fd31 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fee8 	bl	8003654 <VibeCheckStrobe_GetExposure>
 8003884:	eef0 7a40 	vmov.f32	s15, s0
 8003888:	eeb0 0a67 	vmov.f32	s0, s15
 800388c:	6838      	ldr	r0, [r7, #0]
 800388e:	f7ff fd09 	bl	80032a4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003892:	6838      	ldr	r0, [r7, #0]
 8003894:	f7ff fd32 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3748      	adds	r7, #72	@ 0x48
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	080199f0 	.word	0x080199f0
 80038ac:	080199fc 	.word	0x080199fc
 80038b0:	08019a00 	.word	0x08019a00
 80038b4:	08019a08 	.word	0x08019a08

080038b8 <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b094      	sub	sp, #80	@ 0x50
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80038c6:	f107 030c 	add.w	r3, r7, #12
 80038ca:	2240      	movs	r2, #64	@ 0x40
 80038cc:	4619      	mov	r1, r3
 80038ce:	6838      	ldr	r0, [r7, #0]
 80038d0:	f7ff fbdc 	bl	800308c <VibeCheckShell_GetNextString>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d04d      	beq.n	8003976 <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 80038da:	f107 030c 	add.w	r3, r7, #12
 80038de:	4928      	ldr	r1, [pc, #160]	@ (8003980 <VibeCheckStrobeCMD_Execute+0xc8>)
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fc fd15 	bl	8000310 <strcmp>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 80038ec:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80038ee:	f7ff fd41 	bl	8003374 <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 80038f2:	4924      	ldr	r1, [pc, #144]	@ (8003984 <VibeCheckStrobeCMD_Execute+0xcc>)
 80038f4:	6838      	ldr	r0, [r7, #0]
 80038f6:	f7ff fc83 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80038fa:	6838      	ldr	r0, [r7, #0]
 80038fc:	f7ff fcfe 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003900:	2301      	movs	r3, #1
 8003902:	e039      	b.n	8003978 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 8003904:	f107 030c 	add.w	r3, r7, #12
 8003908:	491f      	ldr	r1, [pc, #124]	@ (8003988 <VibeCheckStrobeCMD_Execute+0xd0>)
 800390a:	4618      	mov	r0, r3
 800390c:	f7fc fd00 	bl	8000310 <strcmp>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10b      	bne.n	800392e <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 8003916:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003918:	f7ff fd4b 	bl	80033b2 <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 800391c:	4919      	ldr	r1, [pc, #100]	@ (8003984 <VibeCheckStrobeCMD_Execute+0xcc>)
 800391e:	6838      	ldr	r0, [r7, #0]
 8003920:	f7ff fc6e 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003924:	6838      	ldr	r0, [r7, #0]
 8003926:	f7ff fce9 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800392a:	2301      	movs	r3, #1
 800392c:	e024      	b.n	8003978 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	4916      	ldr	r1, [pc, #88]	@ (800398c <VibeCheckStrobeCMD_Execute+0xd4>)
 8003934:	4618      	mov	r0, r3
 8003936:	f7fc fceb 	bl	8000310 <strcmp>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d108      	bne.n	8003952 <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 8003940:	6839      	ldr	r1, [r7, #0]
 8003942:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003944:	f7ff febc 	bl	80036c0 <VibeCheckStrobeCMD_Set>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d013      	beq.n	8003976 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 800394e:	2301      	movs	r3, #1
 8003950:	e012      	b.n	8003978 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 8003952:	f107 030c 	add.w	r3, r7, #12
 8003956:	490e      	ldr	r1, [pc, #56]	@ (8003990 <VibeCheckStrobeCMD_Execute+0xd8>)
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc fcd9 	bl	8000310 <strcmp>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d108      	bne.n	8003976 <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 8003964:	6839      	ldr	r1, [r7, #0]
 8003966:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003968:	f7ff ff2c 	bl	80037c4 <VibeCheckStrobeCMD_Get>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3750      	adds	r7, #80	@ 0x50
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	08019a14 	.word	0x08019a14
 8003984:	080199fc 	.word	0x080199fc
 8003988:	08019a1c 	.word	0x08019a1c
 800398c:	08019a24 	.word	0x08019a24
 8003990:	08019a28 	.word	0x08019a28
 8003994:	00000000 	.word	0x00000000

08003998 <ComputeSineWave>:
static const uint32_t demo_times[] = {400, 200, 200, 200,    200,    200,    400,    200, 200, 200, 200,    200,   400,      400, 200, 200,  200,   200,    200,    200,    200,   200,    200,    200,       400,  400};
static const float demo_freqs[] =    {110, 55,  110, 164.81, 155.56, 146.83, 130.81, 110, 55,  110, 146.83, 73.42, 146.83,    98, 49,  98,  146.83, 138.59, 130.81, 123.47, 61.47, 123.47, 61.74, 123.47,  130.81, 146.83};


static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	ed2d 8b02 	vpush	{d8}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	e032      	b.n	8003a16 <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 80039b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80039b4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80039c6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003a38 <ComputeSineWave+0xa0>
 80039ca:	ee67 6a87 	vmul.f32	s13, s15, s14
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039e0:	eeb0 0b47 	vmov.f64	d0, d7
 80039e4:	f015 f910 	bl	8018c08 <sin>
 80039e8:	eeb0 7b40 	vmov.f64	d7, d0
 80039ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80039f0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80039f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80039f8:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8003a30 <ComputeSineWave+0x98>
 80039fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1d1a      	adds	r2, r3, #4
 8003a04:	60fa      	str	r2, [r7, #12]
 8003a06:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a0a:	ee17 2a90 	vmov	r2, s15
 8003a0e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	3301      	adds	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d3c8      	bcc.n	80039b0 <ComputeSineWave+0x18>
}
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	ecbd 8b02 	vpop	{d8}
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	f3af 8000 	nop.w
 8003a30:	00000000 	.word	0x00000000
 8003a34:	409ffe00 	.word	0x409ffe00
 8003a38:	40490fd0 	.word	0x40490fd0

08003a3c <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e02c      	b.n	8003aaa <ComputeSquareWave+0x6e>
		if (i < len / 2)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d212      	bcs.n	8003a80 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 8003a5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a66:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003ac0 <ComputeSquareWave+0x84>
 8003a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1d1a      	adds	r2, r3, #4
 8003a72:	60fa      	str	r2, [r7, #12]
 8003a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a78:	ee17 2a90 	vmov	r2, s15
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e011      	b.n	8003aa4 <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 8003a80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a84:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a8c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003ac0 <ComputeSquareWave+0x84>
 8003a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1d1a      	adds	r2, r3, #4
 8003a98:	60fa      	str	r2, [r7, #12]
 8003a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a9e:	ee17 2a90 	vmov	r2, s15
 8003aa2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d3ce      	bcc.n	8003a50 <ComputeSquareWave+0x14>
}
 8003ab2:	bf00      	nop
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	44fff000 	.word	0x44fff000

08003ac4 <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	e052      	b.n	8003b7e <ComputeSawWave+0xba>
		if (i < len / 2)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d222      	bcs.n	8003b28 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	ee07 3a90 	vmov	s15, r3
 8003ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003af0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003af4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b0e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003b94 <ComputeSawWave+0xd0>
 8003b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1d1a      	adds	r2, r3, #4
 8003b1a:	60fa      	str	r2, [r7, #12]
 8003b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b20:	ee17 2a90 	vmov	r2, s15
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e027      	b.n	8003b78 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 8003b28:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b42:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003b46:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b4a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	ee07 3a90 	vmov	s15, r3
 8003b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b58:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b60:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003b94 <ComputeSawWave+0xd0>
 8003b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1d1a      	adds	r2, r3, #4
 8003b6c:	60fa      	str	r2, [r7, #12]
 8003b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b72:	ee17 2a90 	vmov	r2, s15
 8003b76:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d3a8      	bcc.n	8003ad8 <ComputeSawWave+0x14>
}
 8003b86:	bf00      	nop
 8003b88:	bf00      	nop
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	44fff000 	.word	0x44fff000

08003b98 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	e082      	b.n	8003cb2 <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d221      	bcs.n	8003bfa <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bc6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003be0:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8003ccc <ComputeTriangleWave+0x134>
 8003be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1d1a      	adds	r2, r3, #4
 8003bec:	60fa      	str	r2, [r7, #12]
 8003bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf2:	ee17 2a90 	vmov	r2, s15
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e058      	b.n	8003cac <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d227      	bcs.n	8003c5a <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 8003c0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c26:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c2a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	ee07 3a90 	vmov	s15, r3
 8003c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c38:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c40:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003ccc <ComputeTriangleWave+0x134>
 8003c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1d1a      	adds	r2, r3, #4
 8003c4c:	60fa      	str	r2, [r7, #12]
 8003c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c52:	ee17 2a90 	vmov	r2, s15
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	e028      	b.n	8003cac <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 8003c5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c5e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8003c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c7e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	ee07 3a90 	vmov	s15, r3
 8003c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c94:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003ccc <ComputeTriangleWave+0x134>
 8003c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1d1a      	adds	r2, r3, #4
 8003ca0:	60fa      	str	r2, [r7, #12]
 8003ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ca6:	ee17 2a90 	vmov	r2, s15
 8003caa:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	f4ff af78 	bcc.w	8003bac <ComputeTriangleWave+0x14>
}
 8003cbc:	bf00      	nop
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	44fff000 	.word	0x44fff000

08003cd0 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e008      	b.n	8003cf2 <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	1d1a      	adds	r2, r3, #4
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003cea:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3f2      	bcc.n	8003ce0 <ComputeNullWave+0x10>
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d044      	beq.n	8003da8 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d24:	7e1b      	ldrb	r3, [r3, #24]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d844      	bhi.n	8003db4 <VibeCheckWaveGen_RecomputeWave+0xac>
 8003d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d30 <VibeCheckWaveGen_RecomputeWave+0x28>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003d41 	.word	0x08003d41
 8003d34:	08003d5b 	.word	0x08003d5b
 8003d38:	08003d75 	.word	0x08003d75
 8003d3c:	08003d8f 	.word	0x08003d8f
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d46:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d52:	6838      	ldr	r0, [r7, #0]
 8003d54:	f7ff fe20 	bl	8003998 <ComputeSineWave>
			break;
 8003d58:	e02c      	b.n	8003db4 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d60:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d64:	eeb0 0a67 	vmov.f32	s0, s15
 8003d68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d6c:	6838      	ldr	r0, [r7, #0]
 8003d6e:	f7ff fe65 	bl	8003a3c <ComputeSquareWave>
			break;
 8003d72:	e01f      	b.n	8003db4 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d7a:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d86:	6838      	ldr	r0, [r7, #0]
 8003d88:	f7ff fe9c 	bl	8003ac4 <ComputeSawWave>
			break;
 8003d8c:	e012      	b.n	8003db4 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d94:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d98:	eeb0 0a67 	vmov.f32	s0, s15
 8003d9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003da0:	6838      	ldr	r0, [r7, #0]
 8003da2:	f7ff fef9 	bl	8003b98 <ComputeTriangleWave>
			break;
 8003da6:	e005      	b.n	8003db4 <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 8003da8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003dac:	6838      	ldr	r0, [r7, #0]
 8003dae:	f7ff ff8f 	bl	8003cd0 <ComputeNullWave>
	}
}
 8003db2:	e7ff      	b.n	8003db4 <VibeCheckWaveGen_RecomputeWave+0xac>
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = 440.0f;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b42      	ldr	r3, [pc, #264]	@ (8003ee8 <VibeCheckWaveGen_Init+0x12c>)
 8003dde:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = 0.001f;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b40      	ldr	r3, [pc, #256]	@ (8003eec <VibeCheckWaveGen_Init+0x130>)
 8003dea:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003df2:	2200      	movs	r2, #0
 8003df4:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2300      	movs	r3, #0
 8003e00:	6253      	str	r3, [r2, #36]	@ 0x24
	wavegen->is_muted = 0;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6293      	str	r3, [r2, #40]	@ 0x28
	wavegen->mute_button_flag = 0;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e14:	461a      	mov	r2, r3
 8003e16:	2300      	movs	r3, #0
 8003e18:	62d3      	str	r3, [r2, #44]	@ 0x2c
	wavegen->time_prev_button_press = 0;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e20:	461a      	mov	r2, r3
 8003e22:	2300      	movs	r3, #0
 8003e24:	6313      	str	r3, [r2, #48]	@ 0x30

	wavegen->wave_ping_compute_pending = 0;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2300      	movs	r3, #0
 8003e30:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e44:	461a      	mov	r2, r3
 8003e46:	2300      	movs	r3, #0
 8003e48:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e50:	461a      	mov	r2, r3
 8003e52:	2300      	movs	r3, #0
 8003e54:	6153      	str	r3, [r2, #20]

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2217      	movs	r2, #23
 8003e5e:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e66:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f914 	bl	800409c <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3308      	adds	r3, #8
 8003e78:	4619      	mov	r1, r3
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff ff44 	bl	8003d08 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	f241 0308 	movw	r3, #4104	@ 0x1008
 8003e86:	4413      	add	r3, r2
 8003e88:	4619      	mov	r1, r3
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7ff ff3c 	bl	8003d08 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6858      	ldr	r0, [r3, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f103 0208 	add.w	r2, r3, #8
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	f002 fac0 	bl	8006428 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6858      	ldr	r0, [r3, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f103 0208 	add.w	r2, r3, #8
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003eba:	2110      	movs	r1, #16
 8003ebc:	f002 fab4 	bl	8006428 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f00a f8f1 	bl	800e0ac <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2108      	movs	r1, #8
 8003ece:	4808      	ldr	r0, [pc, #32]	@ (8003ef0 <VibeCheckWaveGen_Init+0x134>)
 8003ed0:	f004 ffd4 	bl	8008e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	4805      	ldr	r0, [pc, #20]	@ (8003ef0 <VibeCheckWaveGen_Init+0x134>)
 8003eda:	f004 ffcf 	bl	8008e7c <HAL_GPIO_WritePin>
}
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	43dc0000 	.word	0x43dc0000
 8003eec:	3a83126f 	.word	0x3a83126f
 8003ef0:	58020000 	.word	0x58020000

08003ef4 <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	/* check the mute button */
	uint32_t time = HAL_GetTick();
 8003efc:	f000 fd46 	bl	800498c <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]
	if (time - wavegen->time_prev_button_press > VC_WAVE_BUTTON_DEBOUNCE_MS && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2bfa      	cmp	r3, #250	@ 0xfa
 8003f10:	d939      	bls.n	8003f86 <VibeCheckWaveGen_Update+0x92>
 8003f12:	2104      	movs	r1, #4
 8003f14:	483d      	ldr	r0, [pc, #244]	@ (800400c <VibeCheckWaveGen_Update+0x118>)
 8003f16:	f004 ff99 	bl	8008e4c <HAL_GPIO_ReadPin>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d032      	beq.n	8003f86 <VibeCheckWaveGen_Update+0x92>

		/*
		 * the line driver seems to have some kind of slow start built in so no
		 * need to worry about pops when muting via the hardware pin
		 */
		if (wavegen->is_muted)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d010      	beq.n	8003f4e <VibeCheckWaveGen_Update+0x5a>
		{
			wavegen->is_muted = 0;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f32:	461a      	mov	r2, r3
 8003f34:	2300      	movs	r3, #0
 8003f36:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2108      	movs	r1, #8
 8003f3c:	4833      	ldr	r0, [pc, #204]	@ (800400c <VibeCheckWaveGen_Update+0x118>)
 8003f3e:	f004 ff9d 	bl	8008e7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 8003f42:	2200      	movs	r2, #0
 8003f44:	2102      	movs	r1, #2
 8003f46:	4831      	ldr	r0, [pc, #196]	@ (800400c <VibeCheckWaveGen_Update+0x118>)
 8003f48:	f004 ff98 	bl	8008e7c <HAL_GPIO_WritePin>
 8003f4c:	e00f      	b.n	8003f6e <VibeCheckWaveGen_Update+0x7a>
		}
		else
		{
			wavegen->is_muted = 1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f54:	461a      	mov	r2, r3
 8003f56:	2301      	movs	r3, #1
 8003f58:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	2108      	movs	r1, #8
 8003f5e:	482b      	ldr	r0, [pc, #172]	@ (800400c <VibeCheckWaveGen_Update+0x118>)
 8003f60:	f004 ff8c 	bl	8008e7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 8003f64:	2201      	movs	r2, #1
 8003f66:	2102      	movs	r1, #2
 8003f68:	4828      	ldr	r0, [pc, #160]	@ (800400c <VibeCheckWaveGen_Update+0x118>)
 8003f6a:	f004 ff87 	bl	8008e7c <HAL_GPIO_WritePin>
		}

		wavegen->mute_button_flag = 1;  /* can alert the shell via this flag when we press the mute button */
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f74:	461a      	mov	r2, r3
 8003f76:	2301      	movs	r3, #1
 8003f78:	62d3      	str	r3, [r2, #44]	@ 0x2c
		wavegen->time_prev_button_press = time;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f80:	461a      	mov	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <VibeCheckWaveGen_Update+0xb6>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3308      	adds	r3, #8
 8003f96:	4619      	mov	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff feb5 	bl	8003d08 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <VibeCheckWaveGen_Update+0xde>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	f241 0308 	movw	r3, #4104	@ 0x1008
 8003fbc:	4413      	add	r3, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fea1 	bl	8003d08 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2300      	movs	r3, #0
 8003fd0:	6153      	str	r3, [r2, #20]

	/*
	 * update the sequencer
	 */
	uint32_t seq_index;
	if (Sequencer_Update(&wavegen->sequencer, time, &seq_index))
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	f242 0334 	movw	r3, #8244	@ 0x2034
 8003fd8:	4413      	add	r3, r2
 8003fda:	f107 0208 	add.w	r2, r7, #8
 8003fde:	68f9      	ldr	r1, [r7, #12]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fd fcaf 	bl	8001944 <Sequencer_Update>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <VibeCheckWaveGen_Update+0x10e>
	{
		VibeCheckWaveGen_SetFrequency(wavegen, demo_freqs[seq_index]);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4a08      	ldr	r2, [pc, #32]	@ (8004010 <VibeCheckWaveGen_Update+0x11c>)
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	edd3 7a00 	vldr	s15, [r3]
 8003ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f84d 	bl	800409c <VibeCheckWaveGen_SetFrequency>
	}

}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	58020000 	.word	0x58020000
 8004010:	08019b5c 	.word	0x08019b5c

08004014 <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d111      	bne.n	800404c <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800402e:	461a      	mov	r2, r3
 8004030:	2301      	movs	r3, #1
 8004032:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800403a:	461a      	mov	r2, r3
 800403c:	2301      	movs	r3, #1
 800403e:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004046:	461a      	mov	r2, r3
 8004048:	2301      	movs	r3, #1
 800404a:	60d3      	str	r3, [r2, #12]
	}

}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	2b00      	cmp	r3, #0
 800406a:	d011      	beq.n	8004090 <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004072:	461a      	mov	r2, r3
 8004074:	2300      	movs	r3, #0
 8004076:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800407e:	461a      	mov	r2, r3
 8004080:	2301      	movs	r3, #1
 8004082:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800408a:	461a      	mov	r2, r3
 800408c:	2301      	movs	r3, #1
 800408e:	60d3      	str	r3, [r2, #12]
	}
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 80040a8:	edd7 7a00 	vldr	s15, [r7]
 80040ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b4:	d502      	bpl.n	80040bc <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 80040bc:	edd7 7a00 	vldr	s15, [r7]
 80040c0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800413c <VibeCheckWaveGen_SetFrequency+0xa0>
 80040c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040cc:	dd01      	ble.n	80040d2 <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 80040ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004140 <VibeCheckWaveGen_SetFrequency+0xa4>)
 80040d0:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 80040d2:	edd7 7a00 	vldr	s15, [r7]
 80040d6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8004144 <VibeCheckWaveGen_SetFrequency+0xa8>
 80040da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040de:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8004148 <VibeCheckWaveGen_SetFrequency+0xac>
 80040e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f2:	ee17 3a90 	vmov	r3, s15
 80040f6:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004102:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800410a:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8004148 <VibeCheckWaveGen_SetFrequency+0xac>
 800410e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004112:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8004144 <VibeCheckWaveGen_SetFrequency+0xa8>
 8004116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004120:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	45989000 	.word	0x45989000
 8004140:	45989000 	.word	0x45989000
 8004144:	44800000 	.word	0x44800000
 8004148:	4b189680 	.word	0x4b189680

0800414c <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	ee07 3a90 	vmov	s15, r3
}
 8004160:	eeb0 0a67 	vmov.f32	s0, s15
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 800417a:	edd7 7a00 	vldr	s15, [r7]
 800417e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004186:	d502      	bpl.n	800418e <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 800418e:	edd7 7a00 	vldr	s15, [r7]
 8004192:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419e:	dd02      	ble.n	80041a6 <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 80041a0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80041a4:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80041ac:	461a      	mov	r2, r3
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80041b8:	461a      	mov	r2, r3
 80041ba:	2301      	movs	r3, #1
 80041bc:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80041c4:	461a      	mov	r2, r3
 80041c6:	2301      	movs	r3, #1
 80041c8:	60d3      	str	r3, [r2, #12]
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	ee07 3a90 	vmov	s15, r3
}
 80041ea:	eeb0 0a67 	vmov.f32	s0, s15
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800420a:	461a      	mov	r2, r3
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004216:	461a      	mov	r2, r3
 8004218:	2301      	movs	r3, #1
 800421a:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004222:	461a      	mov	r2, r3
 8004224:	2301      	movs	r3, #1
 8004226:	60d3      	str	r3, [r2, #12]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004242:	7e1b      	ldrb	r3, [r3, #24]
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <VibeCheckWaveGen_WasMuteButtonPressed>:

uint32_t VibeCheckWaveGen_WasMuteButtonPressed(VibeCheckWaveGen* wavegen, uint32_t* is_muted)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
	if (wavegen->mute_button_flag)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00d      	beq.n	8004282 <VibeCheckWaveGen_WasMuteButtonPressed+0x32>
	{
		wavegen->mute_button_flag = 0;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800426c:	461a      	mov	r2, r3
 800426e:	2300      	movs	r3, #0
 8004270:	62d3      	str	r3, [r2, #44]	@ 0x2c
		*is_muted = wavegen->is_muted;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004278:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	601a      	str	r2, [r3, #0]
		return 1;
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <VibeCheckWaveGen_WasMuteButtonPressed+0x34>
	}

	return 0;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00b      	beq.n	80042bc <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80042aa:	461a      	mov	r2, r3
 80042ac:	2300      	movs	r3, #0
 80042ae:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80042b6:	461a      	mov	r2, r3
 80042b8:	2301      	movs	r3, #1
 80042ba:	6113      	str	r3, [r2, #16]
	}
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00b      	beq.n	80042f4 <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80042e2:	461a      	mov	r2, r3
 80042e4:	2300      	movs	r3, #0
 80042e6:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80042ee:	461a      	mov	r2, r3
 80042f0:	2301      	movs	r3, #1
 80042f2:	6153      	str	r3, [r2, #20]
	}
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <VibeCheckWaveGen_StartDemo>:



void VibeCheckWaveGen_StartDemo(VibeCheckWaveGen* wavegen)
{
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	Sequencer_Init(&wavegen->sequencer);
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	f242 0334 	movw	r3, #8244	@ 0x2034
 800430e:	4413      	add	r3, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f7fd fae5 	bl	80018e0 <Sequencer_Init>
	Sequencer_SetSequence(&wavegen->sequencer, demo_times, sizeof(demo_times) / sizeof(demo_times[0]), 1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f242 0034 	movw	r0, #8244	@ 0x2034
 800431c:	4418      	add	r0, r3
 800431e:	2301      	movs	r3, #1
 8004320:	221a      	movs	r2, #26
 8004322:	490a      	ldr	r1, [pc, #40]	@ (800434c <VibeCheckWaveGen_StartDemo+0x4c>)
 8004324:	f7fd faf8 	bl	8001918 <Sequencer_SetSequence>
	Sequencer_Start(&wavegen->sequencer, HAL_GetTick());
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f242 0434 	movw	r4, #8244	@ 0x2034
 800432e:	441c      	add	r4, r3
 8004330:	f000 fb2c 	bl	800498c <HAL_GetTick>
 8004334:	4603      	mov	r3, r0
 8004336:	4619      	mov	r1, r3
 8004338:	4620      	mov	r0, r4
 800433a:	f7fd fb45 	bl	80019c8 <Sequencer_Start>
	VibeCheckWaveGen_Start(wavegen);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff fe68 	bl	8004014 <VibeCheckWaveGen_Start>
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bd90      	pop	{r4, r7, pc}
 800434c:	08019af4 	.word	0x08019af4

08004350 <VibeCheckWaveGen_StopDemo>:

void VibeCheckWaveGen_StopDemo(VibeCheckWaveGen* wavegen)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Stop(wavegen);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff fe7d 	bl	8004058 <VibeCheckWaveGen_Stop>
	Sequencer_Stop(&wavegen->sequencer);
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	f242 0334 	movw	r3, #8244	@ 0x2034
 8004364:	4413      	add	r3, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd fb42 	bl	80019f0 <Sequencer_Stop>
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b094      	sub	sp, #80	@ 0x50
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800437e:	f107 0310 	add.w	r3, r7, #16
 8004382:	2240      	movs	r2, #64	@ 0x40
 8004384:	4619      	mov	r1, r3
 8004386:	6838      	ldr	r0, [r7, #0]
 8004388:	f7fe fe80 	bl	800308c <VibeCheckShell_GetNextString>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 80b0 	beq.w	80044f4 <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 8004394:	f107 0310 	add.w	r3, r7, #16
 8004398:	4959      	ldr	r1, [pc, #356]	@ (8004500 <VibeCheckWaveGenCMD_Set+0x18c>)
 800439a:	4618      	mov	r0, r3
 800439c:	f7fb ffb8 	bl	8000310 <strcmp>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d119      	bne.n	80043da <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80043a6:	f107 030c 	add.w	r3, r7, #12
 80043aa:	4619      	mov	r1, r3
 80043ac:	6838      	ldr	r0, [r7, #0]
 80043ae:	f7fe fedd 	bl	800316c <VibeCheckShell_GetNextFloat>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 809d 	beq.w	80044f4 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 80043ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80043be:	eeb0 0a67 	vmov.f32	s0, s15
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff fe6a 	bl	800409c <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 80043c8:	494e      	ldr	r1, [pc, #312]	@ (8004504 <VibeCheckWaveGenCMD_Set+0x190>)
 80043ca:	6838      	ldr	r0, [r7, #0]
 80043cc:	f7fe ff18 	bl	8003200 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80043d0:	6838      	ldr	r0, [r7, #0]
 80043d2:	f7fe ff93 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e08d      	b.n	80044f6 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 80043da:	f107 0310 	add.w	r3, r7, #16
 80043de:	494a      	ldr	r1, [pc, #296]	@ (8004508 <VibeCheckWaveGenCMD_Set+0x194>)
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fb ff95 	bl	8000310 <strcmp>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d118      	bne.n	800441e <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80043ec:	f107 0308 	add.w	r3, r7, #8
 80043f0:	4619      	mov	r1, r3
 80043f2:	6838      	ldr	r0, [r7, #0]
 80043f4:	f7fe feba 	bl	800316c <VibeCheckShell_GetNextFloat>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d07a      	beq.n	80044f4 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 80043fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004402:	eeb0 0a67 	vmov.f32	s0, s15
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff feb1 	bl	800416e <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 800440c:	493d      	ldr	r1, [pc, #244]	@ (8004504 <VibeCheckWaveGenCMD_Set+0x190>)
 800440e:	6838      	ldr	r0, [r7, #0]
 8004410:	f7fe fef6 	bl	8003200 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004414:	6838      	ldr	r0, [r7, #0]
 8004416:	f7fe ff71 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800441a:	2301      	movs	r3, #1
 800441c:	e06b      	b.n	80044f6 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 800441e:	f107 0310 	add.w	r3, r7, #16
 8004422:	493a      	ldr	r1, [pc, #232]	@ (800450c <VibeCheckWaveGenCMD_Set+0x198>)
 8004424:	4618      	mov	r0, r3
 8004426:	f7fb ff73 	bl	8000310 <strcmp>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d161      	bne.n	80044f4 <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004430:	f107 0310 	add.w	r3, r7, #16
 8004434:	2240      	movs	r2, #64	@ 0x40
 8004436:	4619      	mov	r1, r3
 8004438:	6838      	ldr	r0, [r7, #0]
 800443a:	f7fe fe27 	bl	800308c <VibeCheckShell_GetNextString>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d057      	beq.n	80044f4 <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 8004444:	f107 0310 	add.w	r3, r7, #16
 8004448:	4931      	ldr	r1, [pc, #196]	@ (8004510 <VibeCheckWaveGenCMD_Set+0x19c>)
 800444a:	4618      	mov	r0, r3
 800444c:	f7fb ff60 	bl	8000310 <strcmp>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10c      	bne.n	8004470 <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 8004456:	2100      	movs	r1, #0
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff fecd 	bl	80041f8 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 800445e:	4929      	ldr	r1, [pc, #164]	@ (8004504 <VibeCheckWaveGenCMD_Set+0x190>)
 8004460:	6838      	ldr	r0, [r7, #0]
 8004462:	f7fe fecd 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004466:	6838      	ldr	r0, [r7, #0]
 8004468:	f7fe ff48 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800446c:	2301      	movs	r3, #1
 800446e:	e042      	b.n	80044f6 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 8004470:	f107 0310 	add.w	r3, r7, #16
 8004474:	4927      	ldr	r1, [pc, #156]	@ (8004514 <VibeCheckWaveGenCMD_Set+0x1a0>)
 8004476:	4618      	mov	r0, r3
 8004478:	f7fb ff4a 	bl	8000310 <strcmp>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10c      	bne.n	800449c <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 8004482:	2101      	movs	r1, #1
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff feb7 	bl	80041f8 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 800448a:	491e      	ldr	r1, [pc, #120]	@ (8004504 <VibeCheckWaveGenCMD_Set+0x190>)
 800448c:	6838      	ldr	r0, [r7, #0]
 800448e:	f7fe feb7 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004492:	6838      	ldr	r0, [r7, #0]
 8004494:	f7fe ff32 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004498:	2301      	movs	r3, #1
 800449a:	e02c      	b.n	80044f6 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 800449c:	f107 0310 	add.w	r3, r7, #16
 80044a0:	491d      	ldr	r1, [pc, #116]	@ (8004518 <VibeCheckWaveGenCMD_Set+0x1a4>)
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fb ff34 	bl	8000310 <strcmp>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10c      	bne.n	80044c8 <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 80044ae:	2102      	movs	r1, #2
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff fea1 	bl	80041f8 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 80044b6:	4913      	ldr	r1, [pc, #76]	@ (8004504 <VibeCheckWaveGenCMD_Set+0x190>)
 80044b8:	6838      	ldr	r0, [r7, #0]
 80044ba:	f7fe fea1 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80044be:	6838      	ldr	r0, [r7, #0]
 80044c0:	f7fe ff1c 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e016      	b.n	80044f6 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 80044c8:	f107 0310 	add.w	r3, r7, #16
 80044cc:	4913      	ldr	r1, [pc, #76]	@ (800451c <VibeCheckWaveGenCMD_Set+0x1a8>)
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fb ff1e 	bl	8000310 <strcmp>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10c      	bne.n	80044f4 <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 80044da:	2103      	movs	r1, #3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff fe8b 	bl	80041f8 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 80044e2:	4908      	ldr	r1, [pc, #32]	@ (8004504 <VibeCheckWaveGenCMD_Set+0x190>)
 80044e4:	6838      	ldr	r0, [r7, #0]
 80044e6:	f7fe fe8b 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80044ea:	6838      	ldr	r0, [r7, #0]
 80044ec:	f7fe ff06 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3750      	adds	r7, #80	@ 0x50
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	08019a2c 	.word	0x08019a2c
 8004504:	08019a38 	.word	0x08019a38
 8004508:	08019a3c 	.word	0x08019a3c
 800450c:	08019a48 	.word	0x08019a48
 8004510:	08019a54 	.word	0x08019a54
 8004514:	08019a5c 	.word	0x08019a5c
 8004518:	08019a64 	.word	0x08019a64
 800451c:	08019a68 	.word	0x08019a68

08004520 <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b092      	sub	sp, #72	@ 0x48
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800452a:	f107 0308 	add.w	r3, r7, #8
 800452e:	2240      	movs	r2, #64	@ 0x40
 8004530:	4619      	mov	r1, r3
 8004532:	6838      	ldr	r0, [r7, #0]
 8004534:	f7fe fdaa 	bl	800308c <VibeCheckShell_GetNextString>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d077      	beq.n	800462e <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 800453e:	f107 0308 	add.w	r3, r7, #8
 8004542:	493d      	ldr	r1, [pc, #244]	@ (8004638 <VibeCheckWaveGenCMD_Get+0x118>)
 8004544:	4618      	mov	r0, r3
 8004546:	f7fb fee3 	bl	8000310 <strcmp>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d115      	bne.n	800457c <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8004550:	493a      	ldr	r1, [pc, #232]	@ (800463c <VibeCheckWaveGenCMD_Get+0x11c>)
 8004552:	6838      	ldr	r0, [r7, #0]
 8004554:	f7fe fe54 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8004558:	6838      	ldr	r0, [r7, #0]
 800455a:	f7fe fec1 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff fdf4 	bl	800414c <VibeCheckWaveGen_GetFrequency>
 8004564:	eef0 7a40 	vmov.f32	s15, s0
 8004568:	eeb0 0a67 	vmov.f32	s0, s15
 800456c:	6838      	ldr	r0, [r7, #0]
 800456e:	f7fe fe99 	bl	80032a4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004572:	6838      	ldr	r0, [r7, #0]
 8004574:	f7fe fec2 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004578:	2301      	movs	r3, #1
 800457a:	e059      	b.n	8004630 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 800457c:	f107 0308 	add.w	r3, r7, #8
 8004580:	492f      	ldr	r1, [pc, #188]	@ (8004640 <VibeCheckWaveGenCMD_Get+0x120>)
 8004582:	4618      	mov	r0, r3
 8004584:	f7fb fec4 	bl	8000310 <strcmp>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d115      	bne.n	80045ba <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 800458e:	492b      	ldr	r1, [pc, #172]	@ (800463c <VibeCheckWaveGenCMD_Get+0x11c>)
 8004590:	6838      	ldr	r0, [r7, #0]
 8004592:	f7fe fe35 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8004596:	6838      	ldr	r0, [r7, #0]
 8004598:	f7fe fea2 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff fe1a 	bl	80041d6 <VibeCheckWaveGen_GetAmplitude>
 80045a2:	eef0 7a40 	vmov.f32	s15, s0
 80045a6:	eeb0 0a67 	vmov.f32	s0, s15
 80045aa:	6838      	ldr	r0, [r7, #0]
 80045ac:	f7fe fe7a 	bl	80032a4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80045b0:	6838      	ldr	r0, [r7, #0]
 80045b2:	f7fe fea3 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e03a      	b.n	8004630 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 80045ba:	f107 0308 	add.w	r3, r7, #8
 80045be:	4921      	ldr	r1, [pc, #132]	@ (8004644 <VibeCheckWaveGenCMD_Get+0x124>)
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fb fea5 	bl	8000310 <strcmp>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d130      	bne.n	800462e <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80045cc:	491b      	ldr	r1, [pc, #108]	@ (800463c <VibeCheckWaveGenCMD_Get+0x11c>)
 80045ce:	6838      	ldr	r0, [r7, #0]
 80045d0:	f7fe fe16 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80045d4:	6838      	ldr	r0, [r7, #0]
 80045d6:	f7fe fe83 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff fe2a 	bl	8004234 <VibeCheckWaveGen_GetWaveform>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d81e      	bhi.n	8004624 <VibeCheckWaveGenCMD_Get+0x104>
 80045e6:	a201      	add	r2, pc, #4	@ (adr r2, 80045ec <VibeCheckWaveGenCMD_Get+0xcc>)
 80045e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ec:	080045fd 	.word	0x080045fd
 80045f0:	08004607 	.word	0x08004607
 80045f4:	08004611 	.word	0x08004611
 80045f8:	0800461b 	.word	0x0800461b
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 80045fc:	4912      	ldr	r1, [pc, #72]	@ (8004648 <VibeCheckWaveGenCMD_Get+0x128>)
 80045fe:	6838      	ldr	r0, [r7, #0]
 8004600:	f7fe fdfe 	bl	8003200 <VibeCheckShell_PutOutputString>
				break;
 8004604:	e00e      	b.n	8004624 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 8004606:	4911      	ldr	r1, [pc, #68]	@ (800464c <VibeCheckWaveGenCMD_Get+0x12c>)
 8004608:	6838      	ldr	r0, [r7, #0]
 800460a:	f7fe fdf9 	bl	8003200 <VibeCheckShell_PutOutputString>
				break;
 800460e:	e009      	b.n	8004624 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 8004610:	490f      	ldr	r1, [pc, #60]	@ (8004650 <VibeCheckWaveGenCMD_Get+0x130>)
 8004612:	6838      	ldr	r0, [r7, #0]
 8004614:	f7fe fdf4 	bl	8003200 <VibeCheckShell_PutOutputString>
				break;
 8004618:	e004      	b.n	8004624 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 800461a:	490e      	ldr	r1, [pc, #56]	@ (8004654 <VibeCheckWaveGenCMD_Get+0x134>)
 800461c:	6838      	ldr	r0, [r7, #0]
 800461e:	f7fe fdef 	bl	8003200 <VibeCheckShell_PutOutputString>
				break;
 8004622:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 8004624:	6838      	ldr	r0, [r7, #0]
 8004626:	f7fe fe69 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3748      	adds	r7, #72	@ 0x48
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	08019a2c 	.word	0x08019a2c
 800463c:	08019a38 	.word	0x08019a38
 8004640:	08019a3c 	.word	0x08019a3c
 8004644:	08019a48 	.word	0x08019a48
 8004648:	08019a54 	.word	0x08019a54
 800464c:	08019a5c 	.word	0x08019a5c
 8004650:	08019a64 	.word	0x08019a64
 8004654:	08019a68 	.word	0x08019a68

08004658 <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b094      	sub	sp, #80	@ 0x50
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004666:	f107 030c 	add.w	r3, r7, #12
 800466a:	2240      	movs	r2, #64	@ 0x40
 800466c:	4619      	mov	r1, r3
 800466e:	6838      	ldr	r0, [r7, #0]
 8004670:	f7fe fd0c 	bl	800308c <VibeCheckShell_GetNextString>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 808b 	beq.w	8004792 <VibeCheckWaveGenCMD_Execute+0x13a>
	{
		if (!strcmp(str, "start"))
 800467c:	f107 030c 	add.w	r3, r7, #12
 8004680:	4946      	ldr	r1, [pc, #280]	@ (800479c <VibeCheckWaveGenCMD_Execute+0x144>)
 8004682:	4618      	mov	r0, r3
 8004684:	f7fb fe44 	bl	8000310 <strcmp>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10b      	bne.n	80046a6 <VibeCheckWaveGenCMD_Execute+0x4e>
		{
			VibeCheckWaveGen_Start(wavegen);
 800468e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004690:	f7ff fcc0 	bl	8004014 <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8004694:	4942      	ldr	r1, [pc, #264]	@ (80047a0 <VibeCheckWaveGenCMD_Execute+0x148>)
 8004696:	6838      	ldr	r0, [r7, #0]
 8004698:	f7fe fdb2 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 800469c:	6838      	ldr	r0, [r7, #0]
 800469e:	f7fe fe2d 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e076      	b.n	8004794 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "stop"))
 80046a6:	f107 030c 	add.w	r3, r7, #12
 80046aa:	493e      	ldr	r1, [pc, #248]	@ (80047a4 <VibeCheckWaveGenCMD_Execute+0x14c>)
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fb fe2f 	bl	8000310 <strcmp>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10b      	bne.n	80046d0 <VibeCheckWaveGenCMD_Execute+0x78>
		{
			VibeCheckWaveGen_Stop(wavegen);
 80046b8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80046ba:	f7ff fccd 	bl	8004058 <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 80046be:	4938      	ldr	r1, [pc, #224]	@ (80047a0 <VibeCheckWaveGenCMD_Execute+0x148>)
 80046c0:	6838      	ldr	r0, [r7, #0]
 80046c2:	f7fe fd9d 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80046c6:	6838      	ldr	r0, [r7, #0]
 80046c8:	f7fe fe18 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e061      	b.n	8004794 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "set"))
 80046d0:	f107 030c 	add.w	r3, r7, #12
 80046d4:	4934      	ldr	r1, [pc, #208]	@ (80047a8 <VibeCheckWaveGenCMD_Execute+0x150>)
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fb fe1a 	bl	8000310 <strcmp>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d108      	bne.n	80046f4 <VibeCheckWaveGenCMD_Execute+0x9c>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 80046e2:	6839      	ldr	r1, [r7, #0]
 80046e4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80046e6:	f7ff fe45 	bl	8004374 <VibeCheckWaveGenCMD_Set>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d050      	beq.n	8004792 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e04f      	b.n	8004794 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "get"))
 80046f4:	f107 030c 	add.w	r3, r7, #12
 80046f8:	492c      	ldr	r1, [pc, #176]	@ (80047ac <VibeCheckWaveGenCMD_Execute+0x154>)
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fb fe08 	bl	8000310 <strcmp>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d108      	bne.n	8004718 <VibeCheckWaveGenCMD_Execute+0xc0>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 8004706:	6839      	ldr	r1, [r7, #0]
 8004708:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800470a:	f7ff ff09 	bl	8004520 <VibeCheckWaveGenCMD_Get>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d03e      	beq.n	8004792 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8004714:	2301      	movs	r3, #1
 8004716:	e03d      	b.n	8004794 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "demo"))
 8004718:	f107 030c 	add.w	r3, r7, #12
 800471c:	4924      	ldr	r1, [pc, #144]	@ (80047b0 <VibeCheckWaveGenCMD_Execute+0x158>)
 800471e:	4618      	mov	r0, r3
 8004720:	f7fb fdf6 	bl	8000310 <strcmp>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d133      	bne.n	8004792 <VibeCheckWaveGenCMD_Execute+0x13a>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800472a:	f107 030c 	add.w	r3, r7, #12
 800472e:	2240      	movs	r2, #64	@ 0x40
 8004730:	4619      	mov	r1, r3
 8004732:	6838      	ldr	r0, [r7, #0]
 8004734:	f7fe fcaa 	bl	800308c <VibeCheckShell_GetNextString>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d029      	beq.n	8004792 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				if (!strcmp(str, "start"))
 800473e:	f107 030c 	add.w	r3, r7, #12
 8004742:	4916      	ldr	r1, [pc, #88]	@ (800479c <VibeCheckWaveGenCMD_Execute+0x144>)
 8004744:	4618      	mov	r0, r3
 8004746:	f7fb fde3 	bl	8000310 <strcmp>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10b      	bne.n	8004768 <VibeCheckWaveGenCMD_Execute+0x110>
				{
					VibeCheckWaveGen_StartDemo(wavegen);
 8004750:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004752:	f7ff fdd5 	bl	8004300 <VibeCheckWaveGen_StartDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004756:	4912      	ldr	r1, [pc, #72]	@ (80047a0 <VibeCheckWaveGenCMD_Execute+0x148>)
 8004758:	6838      	ldr	r0, [r7, #0]
 800475a:	f7fe fd51 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800475e:	6838      	ldr	r0, [r7, #0]
 8004760:	f7fe fdcc 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004764:	2301      	movs	r3, #1
 8004766:	e015      	b.n	8004794 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
				else if (!strcmp(str, "stop"))
 8004768:	f107 030c 	add.w	r3, r7, #12
 800476c:	490d      	ldr	r1, [pc, #52]	@ (80047a4 <VibeCheckWaveGenCMD_Execute+0x14c>)
 800476e:	4618      	mov	r0, r3
 8004770:	f7fb fdce 	bl	8000310 <strcmp>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10b      	bne.n	8004792 <VibeCheckWaveGenCMD_Execute+0x13a>
				{
					VibeCheckWaveGen_StopDemo(wavegen);
 800477a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800477c:	f7ff fde8 	bl	8004350 <VibeCheckWaveGen_StopDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004780:	4907      	ldr	r1, [pc, #28]	@ (80047a0 <VibeCheckWaveGenCMD_Execute+0x148>)
 8004782:	6838      	ldr	r0, [r7, #0]
 8004784:	f7fe fd3c 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004788:	6838      	ldr	r0, [r7, #0]
 800478a:	f7fe fdb7 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
			}
		}
	}

	return 0;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3750      	adds	r7, #80	@ 0x50
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	08019a74 	.word	0x08019a74
 80047a0:	08019a38 	.word	0x08019a38
 80047a4:	08019a7c 	.word	0x08019a7c
 80047a8:	08019a84 	.word	0x08019a84
 80047ac:	08019a88 	.word	0x08019a88
 80047b0:	08019a8c 	.word	0x08019a8c

080047b4 <VibeCheckWaveGenSender_Execute>:


uint32_t VibeCheckWaveGenSender_Execute(void* obj, VibeCheckShell* shell)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
	/* this will send a message to the host when the mute button is pressed */

	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	60fb      	str	r3, [r7, #12]

	uint32_t is_muted;
	if (VibeCheckWaveGen_WasMuteButtonPressed(wavegen, &is_muted))
 80047c2:	f107 0308 	add.w	r3, r7, #8
 80047c6:	4619      	mov	r1, r3
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7ff fd41 	bl	8004250 <VibeCheckWaveGen_WasMuteButtonPressed>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01e      	beq.n	8004812 <VibeCheckWaveGenSender_Execute+0x5e>
	{
		VibeCheckShell_PutOutputString(shell, "msg");
 80047d4:	4911      	ldr	r1, [pc, #68]	@ (800481c <VibeCheckWaveGenSender_Execute+0x68>)
 80047d6:	6838      	ldr	r0, [r7, #0]
 80047d8:	f7fe fd12 	bl	8003200 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 80047dc:	6838      	ldr	r0, [r7, #0]
 80047de:	f7fe fd7f 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "wavegen");  /* TODO: this name should really be kept in a single place */
 80047e2:	490f      	ldr	r1, [pc, #60]	@ (8004820 <VibeCheckWaveGenSender_Execute+0x6c>)
 80047e4:	6838      	ldr	r0, [r7, #0]
 80047e6:	f7fe fd0b 	bl	8003200 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 80047ea:	6838      	ldr	r0, [r7, #0]
 80047ec:	f7fe fd78 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d004      	beq.n	8004800 <VibeCheckWaveGenSender_Execute+0x4c>
			VibeCheckShell_PutOutputString(shell, "muted");
 80047f6:	490b      	ldr	r1, [pc, #44]	@ (8004824 <VibeCheckWaveGenSender_Execute+0x70>)
 80047f8:	6838      	ldr	r0, [r7, #0]
 80047fa:	f7fe fd01 	bl	8003200 <VibeCheckShell_PutOutputString>
 80047fe:	e003      	b.n	8004808 <VibeCheckWaveGenSender_Execute+0x54>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 8004800:	4909      	ldr	r1, [pc, #36]	@ (8004828 <VibeCheckWaveGenSender_Execute+0x74>)
 8004802:	6838      	ldr	r0, [r7, #0]
 8004804:	f7fe fcfc 	bl	8003200 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8004808:	6838      	ldr	r0, [r7, #0]
 800480a:	f7fe fd77 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>

		return 1;
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <VibeCheckWaveGenSender_Execute+0x60>
	}

	return 0;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	08019a94 	.word	0x08019a94
 8004820:	08019a98 	.word	0x08019a98
 8004824:	08019aa0 	.word	0x08019aa0
 8004828:	08019aa8 	.word	0x08019aa8

0800482c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800482c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004864 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004830:	f7fd fe5e 	bl	80024f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004834:	480c      	ldr	r0, [pc, #48]	@ (8004868 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004836:	490d      	ldr	r1, [pc, #52]	@ (800486c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004838:	4a0d      	ldr	r2, [pc, #52]	@ (8004870 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800483a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800483c:	e002      	b.n	8004844 <LoopCopyDataInit>

0800483e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800483e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004842:	3304      	adds	r3, #4

08004844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004848:	d3f9      	bcc.n	800483e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800484a:	4a0a      	ldr	r2, [pc, #40]	@ (8004874 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800484c:	4c0a      	ldr	r4, [pc, #40]	@ (8004878 <LoopFillZerobss+0x22>)
  movs r3, #0
 800484e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004850:	e001      	b.n	8004856 <LoopFillZerobss>

08004852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004854:	3204      	adds	r2, #4

08004856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004858:	d3fb      	bcc.n	8004852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800485a:	f011 fd61 	bl	8016320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800485e:	f7fc f955 	bl	8000b0c <main>
  bx  lr
 8004862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004864:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004868:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800486c:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 8004870:	0801a340 	.word	0x0801a340
  ldr r2, =_sbss
 8004874:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8004878:	24006c78 	.word	0x24006c78

0800487c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800487c:	e7fe      	b.n	800487c <ADC3_IRQHandler>
	...

08004880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004886:	2003      	movs	r0, #3
 8004888:	f001 fcf4 	bl	8006274 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800488c:	f006 fcbc 	bl	800b208 <HAL_RCC_GetSysClockFreq>
 8004890:	4602      	mov	r2, r0
 8004892:	4b15      	ldr	r3, [pc, #84]	@ (80048e8 <HAL_Init+0x68>)
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	0a1b      	lsrs	r3, r3, #8
 8004898:	f003 030f 	and.w	r3, r3, #15
 800489c:	4913      	ldr	r1, [pc, #76]	@ (80048ec <HAL_Init+0x6c>)
 800489e:	5ccb      	ldrb	r3, [r1, r3]
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
 80048a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048aa:	4b0f      	ldr	r3, [pc, #60]	@ (80048e8 <HAL_Init+0x68>)
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	4a0e      	ldr	r2, [pc, #56]	@ (80048ec <HAL_Init+0x6c>)
 80048b4:	5cd3      	ldrb	r3, [r2, r3]
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
 80048c0:	4a0b      	ldr	r2, [pc, #44]	@ (80048f0 <HAL_Init+0x70>)
 80048c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048c4:	4a0b      	ldr	r2, [pc, #44]	@ (80048f4 <HAL_Init+0x74>)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048ca:	200f      	movs	r0, #15
 80048cc:	f000 f814 	bl	80048f8 <HAL_InitTick>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e002      	b.n	80048e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80048da:	f7fd f897 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	58024400 	.word	0x58024400
 80048ec:	08019ae4 	.word	0x08019ae4
 80048f0:	24000004 	.word	0x24000004
 80048f4:	24000000 	.word	0x24000000

080048f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004900:	4b15      	ldr	r3, [pc, #84]	@ (8004958 <HAL_InitTick+0x60>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e021      	b.n	8004950 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800490c:	4b13      	ldr	r3, [pc, #76]	@ (800495c <HAL_InitTick+0x64>)
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	4b11      	ldr	r3, [pc, #68]	@ (8004958 <HAL_InitTick+0x60>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	4619      	mov	r1, r3
 8004916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800491a:	fbb3 f3f1 	udiv	r3, r3, r1
 800491e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004922:	4618      	mov	r0, r3
 8004924:	f001 fcd9 	bl	80062da <HAL_SYSTICK_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e00e      	b.n	8004950 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b0f      	cmp	r3, #15
 8004936:	d80a      	bhi.n	800494e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004938:	2200      	movs	r2, #0
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	f04f 30ff 	mov.w	r0, #4294967295
 8004940:	f001 fca3 	bl	800628a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004944:	4a06      	ldr	r2, [pc, #24]	@ (8004960 <HAL_InitTick+0x68>)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	e000      	b.n	8004950 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	2400000c 	.word	0x2400000c
 800495c:	24000000 	.word	0x24000000
 8004960:	24000008 	.word	0x24000008

08004964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004968:	4b06      	ldr	r3, [pc, #24]	@ (8004984 <HAL_IncTick+0x20>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	4b06      	ldr	r3, [pc, #24]	@ (8004988 <HAL_IncTick+0x24>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4413      	add	r3, r2
 8004974:	4a04      	ldr	r2, [pc, #16]	@ (8004988 <HAL_IncTick+0x24>)
 8004976:	6013      	str	r3, [r2, #0]
}
 8004978:	bf00      	nop
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	2400000c 	.word	0x2400000c
 8004988:	24004f44 	.word	0x24004f44

0800498c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  return uwTick;
 8004990:	4b03      	ldr	r3, [pc, #12]	@ (80049a0 <HAL_GetTick+0x14>)
 8004992:	681b      	ldr	r3, [r3, #0]
}
 8004994:	4618      	mov	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	24004f44 	.word	0x24004f44

080049a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049ac:	f7ff ffee 	bl	800498c <HAL_GetTick>
 80049b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d005      	beq.n	80049ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049be:	4b0a      	ldr	r3, [pc, #40]	@ (80049e8 <HAL_Delay+0x44>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049ca:	bf00      	nop
 80049cc:	f7ff ffde 	bl	800498c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d8f7      	bhi.n	80049cc <HAL_Delay+0x28>
  {
  }
}
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	2400000c 	.word	0x2400000c

080049ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	609a      	str	r2, [r3, #8]
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	609a      	str	r2, [r3, #8]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3360      	adds	r3, #96	@ 0x60
 8004a66:	461a      	mov	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a10      	ldr	r2, [pc, #64]	@ (8004ab4 <LL_ADC_SetOffset+0x60>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10b      	bne.n	8004a90 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004a8e:	e00b      	b.n	8004aa8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	601a      	str	r2, [r3, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	58026000 	.word	0x58026000

08004ab8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3360      	adds	r3, #96	@ 0x60
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	fa01 f303 	lsl.w	r3, r1, r3
 8004b04:	431a      	orrs	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	611a      	str	r2, [r3, #16]
}
 8004b0a:	bf00      	nop
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4a0c      	ldr	r2, [pc, #48]	@ (8004b58 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00e      	beq.n	8004b4a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3360      	adds	r3, #96	@ 0x60
 8004b30:	461a      	mov	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	431a      	orrs	r2, r3
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	601a      	str	r2, [r3, #0]
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	58026000 	.word	0x58026000

08004b5c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b9c <LL_ADC_SetOffsetSaturation+0x40>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d10e      	bne.n	8004b8e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3360      	adds	r3, #96	@ 0x60
 8004b74:	461a      	mov	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	58026000 	.word	0x58026000

08004ba0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4a0c      	ldr	r2, [pc, #48]	@ (8004be0 <LL_ADC_SetOffsetSign+0x40>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d10e      	bne.n	8004bd2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	3360      	adds	r3, #96	@ 0x60
 8004bb8:	461a      	mov	r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	58026000 	.word	0x58026000

08004be4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3360      	adds	r3, #96	@ 0x60
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4a0c      	ldr	r2, [pc, #48]	@ (8004c34 <LL_ADC_SetOffsetState+0x50>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d108      	bne.n	8004c18 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8004c16:	e007      	b.n	8004c28 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	601a      	str	r2, [r3, #0]
}
 8004c28:	bf00      	nop
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	58026000 	.word	0x58026000

08004c38 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3330      	adds	r3, #48	@ 0x30
 8004c48:	461a      	mov	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	0a1b      	lsrs	r3, r3, #8
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	f003 030c 	and.w	r3, r3, #12
 8004c54:	4413      	add	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	211f      	movs	r1, #31
 8004c64:	fa01 f303 	lsl.w	r3, r1, r3
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	0e9b      	lsrs	r3, r3, #26
 8004c70:	f003 011f 	and.w	r1, r3, #31
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	0e5b      	lsrs	r3, r3, #25
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	4413      	add	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	0d1b      	lsrs	r3, r3, #20
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	2107      	movs	r1, #7
 8004cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	401a      	ands	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	0d1b      	lsrs	r3, r3, #20
 8004cca:	f003 031f 	and.w	r3, r3, #31
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8004d60 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d115      	bne.n	8004d28 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f003 0318 	and.w	r3, r3, #24
 8004d12:	4914      	ldr	r1, [pc, #80]	@ (8004d64 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004d14:	40d9      	lsrs	r1, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	400b      	ands	r3, r1
 8004d1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004d26:	e014      	b.n	8004d52 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d34:	43db      	mvns	r3, r3
 8004d36:	401a      	ands	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f003 0318 	and.w	r3, r3, #24
 8004d3e:	4909      	ldr	r1, [pc, #36]	@ (8004d64 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004d40:	40d9      	lsrs	r1, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	400b      	ands	r3, r1
 8004d46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	58026000 	.word	0x58026000
 8004d64:	000fffff 	.word	0x000fffff

08004d68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	4b04      	ldr	r3, [pc, #16]	@ (8004d88 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6093      	str	r3, [r2, #8]
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	5fffffc0 	.word	0x5fffffc0

08004d8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004da0:	d101      	bne.n	8004da6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <LL_ADC_EnableInternalRegulator+0x24>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	6fffffc0 	.word	0x6fffffc0

08004ddc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004df0:	d101      	bne.n	8004df6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <LL_ADC_IsEnabled+0x18>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <LL_ADC_IsEnabled+0x1a>
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d101      	bne.n	8004e42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d101      	bne.n	8004e68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e78:	b590      	push	{r4, r7, lr}
 8004e7a:	b089      	sub	sp, #36	@ 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e1ee      	b.n	8005270 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d109      	bne.n	8004eb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7fc fdcd 	bl	8001a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff ff67 	bl	8004d8c <LL_ADC_IsDeepPowerDownEnabled>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d004      	beq.n	8004ece <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff ff4d 	bl	8004d68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff ff82 	bl	8004ddc <LL_ADC_IsInternalRegulatorEnabled>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d114      	bne.n	8004f08 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff ff66 	bl	8004db4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ee8:	4b8e      	ldr	r3, [pc, #568]	@ (8005124 <HAL_ADC_Init+0x2ac>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	099b      	lsrs	r3, r3, #6
 8004eee:	4a8e      	ldr	r2, [pc, #568]	@ (8005128 <HAL_ADC_Init+0x2b0>)
 8004ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef4:	099b      	lsrs	r3, r3, #6
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004efa:	e002      	b.n	8004f02 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f9      	bne.n	8004efc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff ff65 	bl	8004ddc <LL_ADC_IsInternalRegulatorEnabled>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10d      	bne.n	8004f34 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f1c:	f043 0210 	orr.w	r2, r3, #16
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f28:	f043 0201 	orr.w	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff ff76 	bl	8004e2a <LL_ADC_REG_IsConversionOngoing>
 8004f3e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f040 8188 	bne.w	800525e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f040 8184 	bne.w	800525e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f5a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004f5e:	f043 0202 	orr.w	r2, r3, #2
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff ff4a 	bl	8004e04 <LL_ADC_IsEnabled>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d136      	bne.n	8004fe4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a6c      	ldr	r2, [pc, #432]	@ (800512c <HAL_ADC_Init+0x2b4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d004      	beq.n	8004f8a <HAL_ADC_Init+0x112>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a6a      	ldr	r2, [pc, #424]	@ (8005130 <HAL_ADC_Init+0x2b8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d10e      	bne.n	8004fa8 <HAL_ADC_Init+0x130>
 8004f8a:	4868      	ldr	r0, [pc, #416]	@ (800512c <HAL_ADC_Init+0x2b4>)
 8004f8c:	f7ff ff3a 	bl	8004e04 <LL_ADC_IsEnabled>
 8004f90:	4604      	mov	r4, r0
 8004f92:	4867      	ldr	r0, [pc, #412]	@ (8005130 <HAL_ADC_Init+0x2b8>)
 8004f94:	f7ff ff36 	bl	8004e04 <LL_ADC_IsEnabled>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	4323      	orrs	r3, r4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf0c      	ite	eq
 8004fa0:	2301      	moveq	r3, #1
 8004fa2:	2300      	movne	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	e008      	b.n	8004fba <HAL_ADC_Init+0x142>
 8004fa8:	4862      	ldr	r0, [pc, #392]	@ (8005134 <HAL_ADC_Init+0x2bc>)
 8004faa:	f7ff ff2b 	bl	8004e04 <LL_ADC_IsEnabled>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d012      	beq.n	8004fe4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a5a      	ldr	r2, [pc, #360]	@ (800512c <HAL_ADC_Init+0x2b4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_ADC_Init+0x15a>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a58      	ldr	r2, [pc, #352]	@ (8005130 <HAL_ADC_Init+0x2b8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d101      	bne.n	8004fd6 <HAL_ADC_Init+0x15e>
 8004fd2:	4a59      	ldr	r2, [pc, #356]	@ (8005138 <HAL_ADC_Init+0x2c0>)
 8004fd4:	e000      	b.n	8004fd8 <HAL_ADC_Init+0x160>
 8004fd6:	4a59      	ldr	r2, [pc, #356]	@ (800513c <HAL_ADC_Init+0x2c4>)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f7ff fd04 	bl	80049ec <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a52      	ldr	r2, [pc, #328]	@ (8005134 <HAL_ADC_Init+0x2bc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d129      	bne.n	8005042 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	7e5b      	ldrb	r3, [r3, #25]
 8004ff2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004ff8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004ffe:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b08      	cmp	r3, #8
 8005006:	d013      	beq.n	8005030 <HAL_ADC_Init+0x1b8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b0c      	cmp	r3, #12
 800500e:	d00d      	beq.n	800502c <HAL_ADC_Init+0x1b4>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b1c      	cmp	r3, #28
 8005016:	d007      	beq.n	8005028 <HAL_ADC_Init+0x1b0>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b18      	cmp	r3, #24
 800501e:	d101      	bne.n	8005024 <HAL_ADC_Init+0x1ac>
 8005020:	2318      	movs	r3, #24
 8005022:	e006      	b.n	8005032 <HAL_ADC_Init+0x1ba>
 8005024:	2300      	movs	r3, #0
 8005026:	e004      	b.n	8005032 <HAL_ADC_Init+0x1ba>
 8005028:	2310      	movs	r3, #16
 800502a:	e002      	b.n	8005032 <HAL_ADC_Init+0x1ba>
 800502c:	2308      	movs	r3, #8
 800502e:	e000      	b.n	8005032 <HAL_ADC_Init+0x1ba>
 8005030:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8005032:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800503a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800503c:	4313      	orrs	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
 8005040:	e00e      	b.n	8005060 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	7e5b      	ldrb	r3, [r3, #25]
 8005046:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800504c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005052:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3020 	ldrb.w	r3, [r3, #32]
 800505a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800505c:	4313      	orrs	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d106      	bne.n	8005078 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506e:	3b01      	subs	r3, #1
 8005070:	045b      	lsls	r3, r3, #17
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	4313      	orrs	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507c:	2b00      	cmp	r3, #0
 800507e:	d009      	beq.n	8005094 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005084:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4313      	orrs	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a26      	ldr	r2, [pc, #152]	@ (8005134 <HAL_ADC_Init+0x2bc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d115      	bne.n	80050ca <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	4b26      	ldr	r3, [pc, #152]	@ (8005140 <HAL_ADC_Init+0x2c8>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	69b9      	ldr	r1, [r7, #24]
 80050ae:	430b      	orrs	r3, r1
 80050b0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	611a      	str	r2, [r3, #16]
 80050c8:	e009      	b.n	80050de <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005144 <HAL_ADC_Init+0x2cc>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	69b9      	ldr	r1, [r7, #24]
 80050da:	430b      	orrs	r3, r1
 80050dc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fea1 	bl	8004e2a <LL_ADC_REG_IsConversionOngoing>
 80050e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff feae 	bl	8004e50 <LL_ADC_INJ_IsConversionOngoing>
 80050f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f040 808e 	bne.w	800521a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f040 808a 	bne.w	800521a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a0a      	ldr	r2, [pc, #40]	@ (8005134 <HAL_ADC_Init+0x2bc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d11b      	bne.n	8005148 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	7e1b      	ldrb	r3, [r3, #24]
 8005114:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800511c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800511e:	4313      	orrs	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	e018      	b.n	8005156 <HAL_ADC_Init+0x2de>
 8005124:	24000000 	.word	0x24000000
 8005128:	053e2d63 	.word	0x053e2d63
 800512c:	40022000 	.word	0x40022000
 8005130:	40022100 	.word	0x40022100
 8005134:	58026000 	.word	0x58026000
 8005138:	40022300 	.word	0x40022300
 800513c:	58026300 	.word	0x58026300
 8005140:	fff04007 	.word	0xfff04007
 8005144:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	7e1b      	ldrb	r3, [r3, #24]
 800514c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8005152:	4313      	orrs	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	4b46      	ldr	r3, [pc, #280]	@ (8005278 <HAL_ADC_Init+0x400>)
 800515e:	4013      	ands	r3, r2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	69b9      	ldr	r1, [r7, #24]
 8005166:	430b      	orrs	r3, r1
 8005168:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005170:	2b01      	cmp	r3, #1
 8005172:	d137      	bne.n	80051e4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005178:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a3f      	ldr	r2, [pc, #252]	@ (800527c <HAL_ADC_Init+0x404>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d116      	bne.n	80051b2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	4b3d      	ldr	r3, [pc, #244]	@ (8005280 <HAL_ADC_Init+0x408>)
 800518c:	4013      	ands	r3, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005196:	4311      	orrs	r1, r2
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800519c:	4311      	orrs	r1, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80051a2:	430a      	orrs	r2, r1
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	611a      	str	r2, [r3, #16]
 80051b0:	e020      	b.n	80051f4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	4b32      	ldr	r3, [pc, #200]	@ (8005284 <HAL_ADC_Init+0x40c>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051c0:	3a01      	subs	r2, #1
 80051c2:	0411      	lsls	r1, r2, #16
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80051c8:	4311      	orrs	r1, r2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051ce:	4311      	orrs	r1, r2
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80051d4:	430a      	orrs	r2, r1
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0201 	orr.w	r2, r2, #1
 80051e0:	611a      	str	r2, [r3, #16]
 80051e2:	e007      	b.n	80051f4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0201 	bic.w	r2, r2, #1
 80051f2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1b      	ldr	r2, [pc, #108]	@ (800527c <HAL_ADC_Init+0x404>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d002      	beq.n	800521a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fd67 	bl	8005ce8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d10c      	bne.n	800523c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005228:	f023 010f 	bic.w	r1, r3, #15
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	1e5a      	subs	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	631a      	str	r2, [r3, #48]	@ 0x30
 800523a:	e007      	b.n	800524c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 020f 	bic.w	r2, r2, #15
 800524a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005250:	f023 0303 	bic.w	r3, r3, #3
 8005254:	f043 0201 	orr.w	r2, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	661a      	str	r2, [r3, #96]	@ 0x60
 800525c:	e007      	b.n	800526e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005262:	f043 0210 	orr.w	r2, r3, #16
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800526e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3724      	adds	r7, #36	@ 0x24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd90      	pop	{r4, r7, pc}
 8005278:	ffffbffc 	.word	0xffffbffc
 800527c:	58026000 	.word	0x58026000
 8005280:	fc00f81f 	.word	0xfc00f81f
 8005284:	fc00f81e 	.word	0xfc00f81e

08005288 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b0b9      	sub	sp, #228	@ 0xe4
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005298:	2300      	movs	r3, #0
 800529a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052a2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	4aab      	ldr	r2, [pc, #684]	@ (8005558 <HAL_ADC_ConfigChannel+0x2d0>)
 80052aa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d102      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x34>
 80052b6:	2302      	movs	r3, #2
 80052b8:	f000 bcfe 	b.w	8005cb8 <HAL_ADC_ConfigChannel+0xa30>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff fdae 	bl	8004e2a <LL_ADC_REG_IsConversionOngoing>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f040 84e2 	bne.w	8005c9a <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	db38      	blt.n	8005350 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a9e      	ldr	r2, [pc, #632]	@ (800555c <HAL_ADC_ConfigChannel+0x2d4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d033      	beq.n	8005350 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d108      	bne.n	8005306 <HAL_ADC_ConfigChannel+0x7e>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	0e9b      	lsrs	r3, r3, #26
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	2201      	movs	r2, #1
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	e01d      	b.n	8005342 <HAL_ADC_ConfigChannel+0xba>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005312:	fa93 f3a3 	rbit	r3, r3
 8005316:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800531a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800531e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 800532a:	2320      	movs	r3, #32
 800532c:	e004      	b.n	8005338 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800532e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005332:	fab3 f383 	clz	r3, r3
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f003 031f 	and.w	r3, r3, #31
 800533c:	2201      	movs	r2, #1
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	69d1      	ldr	r1, [r2, #28]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	430b      	orrs	r3, r1
 800534e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	6859      	ldr	r1, [r3, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	f7ff fc6b 	bl	8004c38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff fd5f 	bl	8004e2a <LL_ADC_REG_IsConversionOngoing>
 800536c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff fd6b 	bl	8004e50 <LL_ADC_INJ_IsConversionOngoing>
 800537a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800537e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005382:	2b00      	cmp	r3, #0
 8005384:	f040 8270 	bne.w	8005868 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005388:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800538c:	2b00      	cmp	r3, #0
 800538e:	f040 826b 	bne.w	8005868 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6819      	ldr	r1, [r3, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	461a      	mov	r2, r3
 80053a0:	f7ff fc76 	bl	8004c90 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a6c      	ldr	r2, [pc, #432]	@ (800555c <HAL_ADC_ConfigChannel+0x2d4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d10d      	bne.n	80053ca <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	08db      	lsrs	r3, r3, #3
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053c8:	e032      	b.n	8005430 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80053ca:	4b65      	ldr	r3, [pc, #404]	@ (8005560 <HAL_ADC_ConfigChannel+0x2d8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80053d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053d6:	d10b      	bne.n	80053f0 <HAL_ADC_ConfigChannel+0x168>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	695a      	ldr	r2, [r3, #20]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	089b      	lsrs	r3, r3, #2
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	e01d      	b.n	800542c <HAL_ADC_ConfigChannel+0x1a4>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <HAL_ADC_ConfigChannel+0x18e>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	089b      	lsrs	r3, r3, #2
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	e00a      	b.n	800542c <HAL_ADC_ConfigChannel+0x1a4>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	089b      	lsrs	r3, r3, #2
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b04      	cmp	r3, #4
 8005436:	d048      	beq.n	80054ca <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	6919      	ldr	r1, [r3, #16]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005448:	f7ff fb04 	bl	8004a54 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a42      	ldr	r2, [pc, #264]	@ (800555c <HAL_ADC_ConfigChannel+0x2d4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d119      	bne.n	800548a <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6919      	ldr	r1, [r3, #16]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	461a      	mov	r2, r3
 8005464:	f7ff fb9c 	bl	8004ba0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6919      	ldr	r1, [r3, #16]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d102      	bne.n	8005480 <HAL_ADC_ConfigChannel+0x1f8>
 800547a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800547e:	e000      	b.n	8005482 <HAL_ADC_ConfigChannel+0x1fa>
 8005480:	2300      	movs	r3, #0
 8005482:	461a      	mov	r2, r3
 8005484:	f7ff fb6a 	bl	8004b5c <LL_ADC_SetOffsetSaturation>
 8005488:	e1ee      	b.n	8005868 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6919      	ldr	r1, [r3, #16]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005498:	2b01      	cmp	r3, #1
 800549a:	d102      	bne.n	80054a2 <HAL_ADC_ConfigChannel+0x21a>
 800549c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80054a0:	e000      	b.n	80054a4 <HAL_ADC_ConfigChannel+0x21c>
 80054a2:	2300      	movs	r3, #0
 80054a4:	461a      	mov	r2, r3
 80054a6:	f7ff fb37 	bl	8004b18 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6818      	ldr	r0, [r3, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	6919      	ldr	r1, [r3, #16]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	7e1b      	ldrb	r3, [r3, #24]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d102      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x238>
 80054ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80054be:	e000      	b.n	80054c2 <HAL_ADC_ConfigChannel+0x23a>
 80054c0:	2300      	movs	r3, #0
 80054c2:	461a      	mov	r2, r3
 80054c4:	f7ff fb0e 	bl	8004ae4 <LL_ADC_SetDataRightShift>
 80054c8:	e1ce      	b.n	8005868 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a23      	ldr	r2, [pc, #140]	@ (800555c <HAL_ADC_ConfigChannel+0x2d4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	f040 8181 	bne.w	80057d8 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2100      	movs	r1, #0
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff faeb 	bl	8004ab8 <LL_ADC_GetOffsetChannel>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <HAL_ADC_ConfigChannel+0x27a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2100      	movs	r1, #0
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff fae0 	bl	8004ab8 <LL_ADC_GetOffsetChannel>
 80054f8:	4603      	mov	r3, r0
 80054fa:	0e9b      	lsrs	r3, r3, #26
 80054fc:	f003 021f 	and.w	r2, r3, #31
 8005500:	e01e      	b.n	8005540 <HAL_ADC_ConfigChannel+0x2b8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2100      	movs	r1, #0
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff fad5 	bl	8004ab8 <LL_ADC_GetOffsetChannel>
 800550e:	4603      	mov	r3, r0
 8005510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005514:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005518:	fa93 f3a3 	rbit	r3, r3
 800551c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8005520:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005524:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8005528:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8005530:	2320      	movs	r3, #32
 8005532:	e004      	b.n	800553e <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8005534:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005538:	fab3 f383 	clz	r3, r3
 800553c:	b2db      	uxtb	r3, r3
 800553e:	461a      	mov	r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10b      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x2dc>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	0e9b      	lsrs	r3, r3, #26
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	e01e      	b.n	8005596 <HAL_ADC_ConfigChannel+0x30e>
 8005558:	47ff0000 	.word	0x47ff0000
 800555c:	58026000 	.word	0x58026000
 8005560:	5c001000 	.word	0x5c001000
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005570:	fa93 f3a3 	rbit	r3, r3
 8005574:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800557c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005580:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8005588:	2320      	movs	r3, #32
 800558a:	e004      	b.n	8005596 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 800558c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005590:	fab3 f383 	clz	r3, r3
 8005594:	b2db      	uxtb	r3, r3
 8005596:	429a      	cmp	r2, r3
 8005598:	d106      	bne.n	80055a8 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2200      	movs	r2, #0
 80055a0:	2100      	movs	r1, #0
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff fb1e 	bl	8004be4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2101      	movs	r1, #1
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff fa82 	bl	8004ab8 <LL_ADC_GetOffsetChannel>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <HAL_ADC_ConfigChannel+0x34c>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2101      	movs	r1, #1
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff fa77 	bl	8004ab8 <LL_ADC_GetOffsetChannel>
 80055ca:	4603      	mov	r3, r0
 80055cc:	0e9b      	lsrs	r3, r3, #26
 80055ce:	f003 021f 	and.w	r2, r3, #31
 80055d2:	e01e      	b.n	8005612 <HAL_ADC_ConfigChannel+0x38a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2101      	movs	r1, #1
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fa6c 	bl	8004ab8 <LL_ADC_GetOffsetChannel>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055ea:	fa93 f3a3 	rbit	r3, r3
 80055ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80055f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80055fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8005602:	2320      	movs	r3, #32
 8005604:	e004      	b.n	8005610 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8005606:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800560a:	fab3 f383 	clz	r3, r3
 800560e:	b2db      	uxtb	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800561a:	2b00      	cmp	r3, #0
 800561c:	d105      	bne.n	800562a <HAL_ADC_ConfigChannel+0x3a2>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	0e9b      	lsrs	r3, r3, #26
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	e018      	b.n	800565c <HAL_ADC_ConfigChannel+0x3d4>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005632:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005636:	fa93 f3a3 	rbit	r3, r3
 800563a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800563e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005642:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005646:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800564e:	2320      	movs	r3, #32
 8005650:	e004      	b.n	800565c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8005652:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005656:	fab3 f383 	clz	r3, r3
 800565a:	b2db      	uxtb	r3, r3
 800565c:	429a      	cmp	r2, r3
 800565e:	d106      	bne.n	800566e <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2200      	movs	r2, #0
 8005666:	2101      	movs	r1, #1
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fabb 	bl	8004be4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2102      	movs	r1, #2
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff fa1f 	bl	8004ab8 <LL_ADC_GetOffsetChannel>
 800567a:	4603      	mov	r3, r0
 800567c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <HAL_ADC_ConfigChannel+0x412>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2102      	movs	r1, #2
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff fa14 	bl	8004ab8 <LL_ADC_GetOffsetChannel>
 8005690:	4603      	mov	r3, r0
 8005692:	0e9b      	lsrs	r3, r3, #26
 8005694:	f003 021f 	and.w	r2, r3, #31
 8005698:	e01e      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x450>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2102      	movs	r1, #2
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fa09 	bl	8004ab8 <LL_ADC_GetOffsetChannel>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056b0:	fa93 f3a3 	rbit	r3, r3
 80056b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80056b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80056c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80056c8:	2320      	movs	r3, #32
 80056ca:	e004      	b.n	80056d6 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80056cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056d0:	fab3 f383 	clz	r3, r3
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <HAL_ADC_ConfigChannel+0x468>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	0e9b      	lsrs	r3, r3, #26
 80056ea:	f003 031f 	and.w	r3, r3, #31
 80056ee:	e014      	b.n	800571a <HAL_ADC_ConfigChannel+0x492>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056f8:	fa93 f3a3 	rbit	r3, r3
 80056fc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80056fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005700:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005704:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800570c:	2320      	movs	r3, #32
 800570e:	e004      	b.n	800571a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8005710:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005714:	fab3 f383 	clz	r3, r3
 8005718:	b2db      	uxtb	r3, r3
 800571a:	429a      	cmp	r2, r3
 800571c:	d106      	bne.n	800572c <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2200      	movs	r2, #0
 8005724:	2102      	movs	r1, #2
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fa5c 	bl	8004be4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2103      	movs	r1, #3
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff f9c0 	bl	8004ab8 <LL_ADC_GetOffsetChannel>
 8005738:	4603      	mov	r3, r0
 800573a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <HAL_ADC_ConfigChannel+0x4d0>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2103      	movs	r1, #3
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff f9b5 	bl	8004ab8 <LL_ADC_GetOffsetChannel>
 800574e:	4603      	mov	r3, r0
 8005750:	0e9b      	lsrs	r3, r3, #26
 8005752:	f003 021f 	and.w	r2, r3, #31
 8005756:	e017      	b.n	8005788 <HAL_ADC_ConfigChannel+0x500>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2103      	movs	r1, #3
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff f9aa 	bl	8004ab8 <LL_ADC_GetOffsetChannel>
 8005764:	4603      	mov	r3, r0
 8005766:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005768:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800576a:	fa93 f3a3 	rbit	r3, r3
 800576e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005772:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005774:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800577a:	2320      	movs	r3, #32
 800577c:	e003      	b.n	8005786 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800577e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005780:	fab3 f383 	clz	r3, r3
 8005784:	b2db      	uxtb	r3, r3
 8005786:	461a      	mov	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005790:	2b00      	cmp	r3, #0
 8005792:	d105      	bne.n	80057a0 <HAL_ADC_ConfigChannel+0x518>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	0e9b      	lsrs	r3, r3, #26
 800579a:	f003 031f 	and.w	r3, r3, #31
 800579e:	e011      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x53c>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057a8:	fa93 f3a3 	rbit	r3, r3
 80057ac:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80057ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80057b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80057b8:	2320      	movs	r3, #32
 80057ba:	e003      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80057bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057be:	fab3 f383 	clz	r3, r3
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d14f      	bne.n	8005868 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2200      	movs	r2, #0
 80057ce:	2103      	movs	r1, #3
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff fa07 	bl	8004be4 <LL_ADC_SetOffsetState>
 80057d6:	e047      	b.n	8005868 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	069b      	lsls	r3, r3, #26
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d107      	bne.n	80057fc <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80057fa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005802:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	069b      	lsls	r3, r3, #26
 800580c:	429a      	cmp	r2, r3
 800580e:	d107      	bne.n	8005820 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800581e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005826:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	069b      	lsls	r3, r3, #26
 8005830:	429a      	cmp	r2, r3
 8005832:	d107      	bne.n	8005844 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005842:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800584a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	069b      	lsls	r3, r3, #26
 8005854:	429a      	cmp	r2, r3
 8005856:	d107      	bne.n	8005868 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005866:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff fac9 	bl	8004e04 <LL_ADC_IsEnabled>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	f040 8219 	bne.w	8005cac <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	6819      	ldr	r1, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	461a      	mov	r2, r3
 8005888:	f7ff fa2e 	bl	8004ce8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	4aa1      	ldr	r2, [pc, #644]	@ (8005b18 <HAL_ADC_ConfigChannel+0x890>)
 8005892:	4293      	cmp	r3, r2
 8005894:	f040 812e 	bne.w	8005af4 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10b      	bne.n	80058c0 <HAL_ADC_ConfigChannel+0x638>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	0e9b      	lsrs	r3, r3, #26
 80058ae:	3301      	adds	r3, #1
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	2b09      	cmp	r3, #9
 80058b6:	bf94      	ite	ls
 80058b8:	2301      	movls	r3, #1
 80058ba:	2300      	movhi	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	e019      	b.n	80058f4 <HAL_ADC_ConfigChannel+0x66c>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058c8:	fa93 f3a3 	rbit	r3, r3
 80058cc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80058ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80058d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80058d8:	2320      	movs	r3, #32
 80058da:	e003      	b.n	80058e4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80058dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058de:	fab3 f383 	clz	r3, r3
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	3301      	adds	r3, #1
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	2b09      	cmp	r3, #9
 80058ec:	bf94      	ite	ls
 80058ee:	2301      	movls	r3, #1
 80058f0:	2300      	movhi	r3, #0
 80058f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d079      	beq.n	80059ec <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005900:	2b00      	cmp	r3, #0
 8005902:	d107      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x68c>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	0e9b      	lsrs	r3, r3, #26
 800590a:	3301      	adds	r3, #1
 800590c:	069b      	lsls	r3, r3, #26
 800590e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005912:	e015      	b.n	8005940 <HAL_ADC_ConfigChannel+0x6b8>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800591c:	fa93 f3a3 	rbit	r3, r3
 8005920:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005924:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 800592c:	2320      	movs	r3, #32
 800592e:	e003      	b.n	8005938 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8005930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005932:	fab3 f383 	clz	r3, r3
 8005936:	b2db      	uxtb	r3, r3
 8005938:	3301      	adds	r3, #1
 800593a:	069b      	lsls	r3, r3, #26
 800593c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005948:	2b00      	cmp	r3, #0
 800594a:	d109      	bne.n	8005960 <HAL_ADC_ConfigChannel+0x6d8>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	0e9b      	lsrs	r3, r3, #26
 8005952:	3301      	adds	r3, #1
 8005954:	f003 031f 	and.w	r3, r3, #31
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	e017      	b.n	8005990 <HAL_ADC_ConfigChannel+0x708>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005968:	fa93 f3a3 	rbit	r3, r3
 800596c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800596e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005970:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8005978:	2320      	movs	r3, #32
 800597a:	e003      	b.n	8005984 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 800597c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800597e:	fab3 f383 	clz	r3, r3
 8005982:	b2db      	uxtb	r3, r3
 8005984:	3301      	adds	r3, #1
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	2101      	movs	r1, #1
 800598c:	fa01 f303 	lsl.w	r3, r1, r3
 8005990:	ea42 0103 	orr.w	r1, r2, r3
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <HAL_ADC_ConfigChannel+0x72e>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	0e9b      	lsrs	r3, r3, #26
 80059a6:	3301      	adds	r3, #1
 80059a8:	f003 021f 	and.w	r2, r3, #31
 80059ac:	4613      	mov	r3, r2
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	4413      	add	r3, r2
 80059b2:	051b      	lsls	r3, r3, #20
 80059b4:	e018      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x760>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059be:	fa93 f3a3 	rbit	r3, r3
 80059c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80059c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80059c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80059ce:	2320      	movs	r3, #32
 80059d0:	e003      	b.n	80059da <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80059d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d4:	fab3 f383 	clz	r3, r3
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	3301      	adds	r3, #1
 80059dc:	f003 021f 	and.w	r2, r3, #31
 80059e0:	4613      	mov	r3, r2
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	4413      	add	r3, r2
 80059e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059e8:	430b      	orrs	r3, r1
 80059ea:	e07e      	b.n	8005aea <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d107      	bne.n	8005a08 <HAL_ADC_ConfigChannel+0x780>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	0e9b      	lsrs	r3, r3, #26
 80059fe:	3301      	adds	r3, #1
 8005a00:	069b      	lsls	r3, r3, #26
 8005a02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a06:	e015      	b.n	8005a34 <HAL_ADC_ConfigChannel+0x7ac>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a10:	fa93 f3a3 	rbit	r3, r3
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8005a20:	2320      	movs	r3, #32
 8005a22:	e003      	b.n	8005a2c <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8005a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a26:	fab3 f383 	clz	r3, r3
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	069b      	lsls	r3, r3, #26
 8005a30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d109      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0x7cc>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	0e9b      	lsrs	r3, r3, #26
 8005a46:	3301      	adds	r3, #1
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a52:	e017      	b.n	8005a84 <HAL_ADC_ConfigChannel+0x7fc>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	fa93 f3a3 	rbit	r3, r3
 8005a60:	61bb      	str	r3, [r7, #24]
  return result;
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	e003      	b.n	8005a78 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	fab3 f383 	clz	r3, r3
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	3301      	adds	r3, #1
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	2101      	movs	r1, #1
 8005a80:	fa01 f303 	lsl.w	r3, r1, r3
 8005a84:	ea42 0103 	orr.w	r1, r2, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10d      	bne.n	8005ab0 <HAL_ADC_ConfigChannel+0x828>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	0e9b      	lsrs	r3, r3, #26
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	f003 021f 	and.w	r2, r3, #31
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3b1e      	subs	r3, #30
 8005aa8:	051b      	lsls	r3, r3, #20
 8005aaa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005aae:	e01b      	b.n	8005ae8 <HAL_ADC_ConfigChannel+0x860>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	fa93 f3a3 	rbit	r3, r3
 8005abc:	60fb      	str	r3, [r7, #12]
  return result;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8005ac8:	2320      	movs	r3, #32
 8005aca:	e003      	b.n	8005ad4 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	fab3 f383 	clz	r3, r3
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	f003 021f 	and.w	r2, r3, #31
 8005ada:	4613      	mov	r3, r2
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	3b1e      	subs	r3, #30
 8005ae2:	051b      	lsls	r3, r3, #20
 8005ae4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	6892      	ldr	r2, [r2, #8]
 8005aee:	4619      	mov	r1, r3
 8005af0:	f7ff f8ce 	bl	8004c90 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f280 80d7 	bge.w	8005cac <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a06      	ldr	r2, [pc, #24]	@ (8005b1c <HAL_ADC_ConfigChannel+0x894>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d004      	beq.n	8005b12 <HAL_ADC_ConfigChannel+0x88a>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a04      	ldr	r2, [pc, #16]	@ (8005b20 <HAL_ADC_ConfigChannel+0x898>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d10a      	bne.n	8005b28 <HAL_ADC_ConfigChannel+0x8a0>
 8005b12:	4b04      	ldr	r3, [pc, #16]	@ (8005b24 <HAL_ADC_ConfigChannel+0x89c>)
 8005b14:	e009      	b.n	8005b2a <HAL_ADC_ConfigChannel+0x8a2>
 8005b16:	bf00      	nop
 8005b18:	47ff0000 	.word	0x47ff0000
 8005b1c:	40022000 	.word	0x40022000
 8005b20:	40022100 	.word	0x40022100
 8005b24:	40022300 	.word	0x40022300
 8005b28:	4b65      	ldr	r3, [pc, #404]	@ (8005cc0 <HAL_ADC_ConfigChannel+0xa38>)
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe ff84 	bl	8004a38 <LL_ADC_GetCommonPathInternalCh>
 8005b30:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a62      	ldr	r2, [pc, #392]	@ (8005cc4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <HAL_ADC_ConfigChannel+0x8c0>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a61      	ldr	r2, [pc, #388]	@ (8005cc8 <HAL_ADC_ConfigChannel+0xa40>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d10e      	bne.n	8005b66 <HAL_ADC_ConfigChannel+0x8de>
 8005b48:	485e      	ldr	r0, [pc, #376]	@ (8005cc4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005b4a:	f7ff f95b 	bl	8004e04 <LL_ADC_IsEnabled>
 8005b4e:	4604      	mov	r4, r0
 8005b50:	485d      	ldr	r0, [pc, #372]	@ (8005cc8 <HAL_ADC_ConfigChannel+0xa40>)
 8005b52:	f7ff f957 	bl	8004e04 <LL_ADC_IsEnabled>
 8005b56:	4603      	mov	r3, r0
 8005b58:	4323      	orrs	r3, r4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	bf0c      	ite	eq
 8005b5e:	2301      	moveq	r3, #1
 8005b60:	2300      	movne	r3, #0
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	e008      	b.n	8005b78 <HAL_ADC_ConfigChannel+0x8f0>
 8005b66:	4859      	ldr	r0, [pc, #356]	@ (8005ccc <HAL_ADC_ConfigChannel+0xa44>)
 8005b68:	f7ff f94c 	bl	8004e04 <LL_ADC_IsEnabled>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bf0c      	ite	eq
 8005b72:	2301      	moveq	r3, #1
 8005b74:	2300      	movne	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8084 	beq.w	8005c86 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a53      	ldr	r2, [pc, #332]	@ (8005cd0 <HAL_ADC_ConfigChannel+0xa48>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d132      	bne.n	8005bee <HAL_ADC_ConfigChannel+0x966>
 8005b88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d12c      	bne.n	8005bee <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a4c      	ldr	r2, [pc, #304]	@ (8005ccc <HAL_ADC_ConfigChannel+0xa44>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	f040 8086 	bne.w	8005cac <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a47      	ldr	r2, [pc, #284]	@ (8005cc4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <HAL_ADC_ConfigChannel+0x92c>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a46      	ldr	r2, [pc, #280]	@ (8005cc8 <HAL_ADC_ConfigChannel+0xa40>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d101      	bne.n	8005bb8 <HAL_ADC_ConfigChannel+0x930>
 8005bb4:	4a47      	ldr	r2, [pc, #284]	@ (8005cd4 <HAL_ADC_ConfigChannel+0xa4c>)
 8005bb6:	e000      	b.n	8005bba <HAL_ADC_ConfigChannel+0x932>
 8005bb8:	4a41      	ldr	r2, [pc, #260]	@ (8005cc0 <HAL_ADC_ConfigChannel+0xa38>)
 8005bba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bbe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	f7fe ff24 	bl	8004a12 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bca:	4b43      	ldr	r3, [pc, #268]	@ (8005cd8 <HAL_ADC_ConfigChannel+0xa50>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	099b      	lsrs	r3, r3, #6
 8005bd0:	4a42      	ldr	r2, [pc, #264]	@ (8005cdc <HAL_ADC_ConfigChannel+0xa54>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	099b      	lsrs	r3, r3, #6
 8005bd8:	3301      	adds	r3, #1
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005bde:	e002      	b.n	8005be6 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f9      	bne.n	8005be0 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005bec:	e05e      	b.n	8005cac <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a3b      	ldr	r2, [pc, #236]	@ (8005ce0 <HAL_ADC_ConfigChannel+0xa58>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d120      	bne.n	8005c3a <HAL_ADC_ConfigChannel+0x9b2>
 8005bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d11a      	bne.n	8005c3a <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a30      	ldr	r2, [pc, #192]	@ (8005ccc <HAL_ADC_ConfigChannel+0xa44>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d14e      	bne.n	8005cac <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <HAL_ADC_ConfigChannel+0x99a>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc8 <HAL_ADC_ConfigChannel+0xa40>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d101      	bne.n	8005c26 <HAL_ADC_ConfigChannel+0x99e>
 8005c22:	4a2c      	ldr	r2, [pc, #176]	@ (8005cd4 <HAL_ADC_ConfigChannel+0xa4c>)
 8005c24:	e000      	b.n	8005c28 <HAL_ADC_ConfigChannel+0x9a0>
 8005c26:	4a26      	ldr	r2, [pc, #152]	@ (8005cc0 <HAL_ADC_ConfigChannel+0xa38>)
 8005c28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f7fe feed 	bl	8004a12 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c38:	e038      	b.n	8005cac <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a29      	ldr	r2, [pc, #164]	@ (8005ce4 <HAL_ADC_ConfigChannel+0xa5c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d133      	bne.n	8005cac <HAL_ADC_ConfigChannel+0xa24>
 8005c44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d12d      	bne.n	8005cac <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a1d      	ldr	r2, [pc, #116]	@ (8005ccc <HAL_ADC_ConfigChannel+0xa44>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d128      	bne.n	8005cac <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a19      	ldr	r2, [pc, #100]	@ (8005cc4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d004      	beq.n	8005c6e <HAL_ADC_ConfigChannel+0x9e6>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a17      	ldr	r2, [pc, #92]	@ (8005cc8 <HAL_ADC_ConfigChannel+0xa40>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d101      	bne.n	8005c72 <HAL_ADC_ConfigChannel+0x9ea>
 8005c6e:	4a19      	ldr	r2, [pc, #100]	@ (8005cd4 <HAL_ADC_ConfigChannel+0xa4c>)
 8005c70:	e000      	b.n	8005c74 <HAL_ADC_ConfigChannel+0x9ec>
 8005c72:	4a13      	ldr	r2, [pc, #76]	@ (8005cc0 <HAL_ADC_ConfigChannel+0xa38>)
 8005c74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f7fe fec7 	bl	8004a12 <LL_ADC_SetCommonPathInternalCh>
 8005c84:	e012      	b.n	8005cac <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c8a:	f043 0220 	orr.w	r2, r3, #32
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005c98:	e008      	b.n	8005cac <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c9e:	f043 0220 	orr.w	r2, r3, #32
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005cb4:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	37e4      	adds	r7, #228	@ 0xe4
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd90      	pop	{r4, r7, pc}
 8005cc0:	58026300 	.word	0x58026300
 8005cc4:	40022000 	.word	0x40022000
 8005cc8:	40022100 	.word	0x40022100
 8005ccc:	58026000 	.word	0x58026000
 8005cd0:	c7520000 	.word	0xc7520000
 8005cd4:	40022300 	.word	0x40022300
 8005cd8:	24000000 	.word	0x24000000
 8005cdc:	053e2d63 	.word	0x053e2d63
 8005ce0:	c3210000 	.word	0xc3210000
 8005ce4:	cb840000 	.word	0xcb840000

08005ce8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a6c      	ldr	r2, [pc, #432]	@ (8005ea8 <ADC_ConfigureBoostMode+0x1c0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <ADC_ConfigureBoostMode+0x1c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a6b      	ldr	r2, [pc, #428]	@ (8005eac <ADC_ConfigureBoostMode+0x1c4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d109      	bne.n	8005d18 <ADC_ConfigureBoostMode+0x30>
 8005d04:	4b6a      	ldr	r3, [pc, #424]	@ (8005eb0 <ADC_ConfigureBoostMode+0x1c8>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	bf14      	ite	ne
 8005d10:	2301      	movne	r3, #1
 8005d12:	2300      	moveq	r3, #0
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	e008      	b.n	8005d2a <ADC_ConfigureBoostMode+0x42>
 8005d18:	4b66      	ldr	r3, [pc, #408]	@ (8005eb4 <ADC_ConfigureBoostMode+0x1cc>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bf14      	ite	ne
 8005d24:	2301      	movne	r3, #1
 8005d26:	2300      	moveq	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01c      	beq.n	8005d68 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005d2e:	f005 fbe5 	bl	800b4fc <HAL_RCC_GetHCLKFreq>
 8005d32:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d3c:	d010      	beq.n	8005d60 <ADC_ConfigureBoostMode+0x78>
 8005d3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d42:	d873      	bhi.n	8005e2c <ADC_ConfigureBoostMode+0x144>
 8005d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d48:	d002      	beq.n	8005d50 <ADC_ConfigureBoostMode+0x68>
 8005d4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d4e:	d16d      	bne.n	8005e2c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	0c1b      	lsrs	r3, r3, #16
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5c:	60fb      	str	r3, [r7, #12]
        break;
 8005d5e:	e068      	b.n	8005e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	60fb      	str	r3, [r7, #12]
        break;
 8005d66:	e064      	b.n	8005e32 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005d68:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005d6c:	f04f 0100 	mov.w	r1, #0
 8005d70:	f006 fdc0 	bl	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d74:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005d7e:	d051      	beq.n	8005e24 <ADC_ConfigureBoostMode+0x13c>
 8005d80:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005d84:	d854      	bhi.n	8005e30 <ADC_ConfigureBoostMode+0x148>
 8005d86:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005d8a:	d047      	beq.n	8005e1c <ADC_ConfigureBoostMode+0x134>
 8005d8c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005d90:	d84e      	bhi.n	8005e30 <ADC_ConfigureBoostMode+0x148>
 8005d92:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005d96:	d03d      	beq.n	8005e14 <ADC_ConfigureBoostMode+0x12c>
 8005d98:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005d9c:	d848      	bhi.n	8005e30 <ADC_ConfigureBoostMode+0x148>
 8005d9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005da2:	d033      	beq.n	8005e0c <ADC_ConfigureBoostMode+0x124>
 8005da4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005da8:	d842      	bhi.n	8005e30 <ADC_ConfigureBoostMode+0x148>
 8005daa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005dae:	d029      	beq.n	8005e04 <ADC_ConfigureBoostMode+0x11c>
 8005db0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005db4:	d83c      	bhi.n	8005e30 <ADC_ConfigureBoostMode+0x148>
 8005db6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005dba:	d01a      	beq.n	8005df2 <ADC_ConfigureBoostMode+0x10a>
 8005dbc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005dc0:	d836      	bhi.n	8005e30 <ADC_ConfigureBoostMode+0x148>
 8005dc2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005dc6:	d014      	beq.n	8005df2 <ADC_ConfigureBoostMode+0x10a>
 8005dc8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005dcc:	d830      	bhi.n	8005e30 <ADC_ConfigureBoostMode+0x148>
 8005dce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dd2:	d00e      	beq.n	8005df2 <ADC_ConfigureBoostMode+0x10a>
 8005dd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dd8:	d82a      	bhi.n	8005e30 <ADC_ConfigureBoostMode+0x148>
 8005dda:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005dde:	d008      	beq.n	8005df2 <ADC_ConfigureBoostMode+0x10a>
 8005de0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005de4:	d824      	bhi.n	8005e30 <ADC_ConfigureBoostMode+0x148>
 8005de6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dea:	d002      	beq.n	8005df2 <ADC_ConfigureBoostMode+0x10a>
 8005dec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005df0:	d11e      	bne.n	8005e30 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	0c9b      	lsrs	r3, r3, #18
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e00:	60fb      	str	r3, [r7, #12]
        break;
 8005e02:	e016      	b.n	8005e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	091b      	lsrs	r3, r3, #4
 8005e08:	60fb      	str	r3, [r7, #12]
        break;
 8005e0a:	e012      	b.n	8005e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	60fb      	str	r3, [r7, #12]
        break;
 8005e12:	e00e      	b.n	8005e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	099b      	lsrs	r3, r3, #6
 8005e18:	60fb      	str	r3, [r7, #12]
        break;
 8005e1a:	e00a      	b.n	8005e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	09db      	lsrs	r3, r3, #7
 8005e20:	60fb      	str	r3, [r7, #12]
        break;
 8005e22:	e006      	b.n	8005e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	0a1b      	lsrs	r3, r3, #8
 8005e28:	60fb      	str	r3, [r7, #12]
        break;
 8005e2a:	e002      	b.n	8005e32 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005e2c:	bf00      	nop
 8005e2e:	e000      	b.n	8005e32 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005e30:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005eb8 <ADC_ConfigureBoostMode+0x1d0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d808      	bhi.n	8005e52 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005e4e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005e50:	e025      	b.n	8005e9e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4a19      	ldr	r2, [pc, #100]	@ (8005ebc <ADC_ConfigureBoostMode+0x1d4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d80a      	bhi.n	8005e70 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e6c:	609a      	str	r2, [r3, #8]
}
 8005e6e:	e016      	b.n	8005e9e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4a13      	ldr	r2, [pc, #76]	@ (8005ec0 <ADC_ConfigureBoostMode+0x1d8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d80a      	bhi.n	8005e8e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e8a:	609a      	str	r2, [r3, #8]
}
 8005e8c:	e007      	b.n	8005e9e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005e9c:	609a      	str	r2, [r3, #8]
}
 8005e9e:	bf00      	nop
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40022000 	.word	0x40022000
 8005eac:	40022100 	.word	0x40022100
 8005eb0:	40022300 	.word	0x40022300
 8005eb4:	58026300 	.word	0x58026300
 8005eb8:	005f5e10 	.word	0x005f5e10
 8005ebc:	00bebc20 	.word	0x00bebc20
 8005ec0:	017d7840 	.word	0x017d7840

08005ec4 <LL_ADC_IsEnabled>:
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <LL_ADC_IsEnabled+0x18>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <LL_ADC_IsEnabled+0x1a>
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <LL_ADC_REG_IsConversionOngoing>:
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d101      	bne.n	8005f02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005f10:	b590      	push	{r4, r7, lr}
 8005f12:	b0a3      	sub	sp, #140	@ 0x8c
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e0c1      	b.n	80060b2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005f36:	2300      	movs	r3, #0
 8005f38:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a5e      	ldr	r2, [pc, #376]	@ (80060bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d102      	bne.n	8005f4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005f48:	4b5d      	ldr	r3, [pc, #372]	@ (80060c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	e001      	b.n	8005f52 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10b      	bne.n	8005f70 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f5c:	f043 0220 	orr.w	r2, r3, #32
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e0a0      	b.n	80060b2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff ffb9 	bl	8005eea <LL_ADC_REG_IsConversionOngoing>
 8005f78:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff ffb2 	bl	8005eea <LL_ADC_REG_IsConversionOngoing>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f040 8081 	bne.w	8006090 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005f8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d17c      	bne.n	8006090 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a48      	ldr	r2, [pc, #288]	@ (80060bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d004      	beq.n	8005faa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a46      	ldr	r2, [pc, #280]	@ (80060c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d101      	bne.n	8005fae <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005faa:	4b46      	ldr	r3, [pc, #280]	@ (80060c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005fac:	e000      	b.n	8005fb0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005fae:	4b46      	ldr	r3, [pc, #280]	@ (80060c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d039      	beq.n	800602e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005fba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a3a      	ldr	r2, [pc, #232]	@ (80060bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a39      	ldr	r2, [pc, #228]	@ (80060c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d10e      	bne.n	8005ffe <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005fe0:	4836      	ldr	r0, [pc, #216]	@ (80060bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005fe2:	f7ff ff6f 	bl	8005ec4 <LL_ADC_IsEnabled>
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4835      	ldr	r0, [pc, #212]	@ (80060c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005fea:	f7ff ff6b 	bl	8005ec4 <LL_ADC_IsEnabled>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	4323      	orrs	r3, r4
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bf0c      	ite	eq
 8005ff6:	2301      	moveq	r3, #1
 8005ff8:	2300      	movne	r3, #0
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	e008      	b.n	8006010 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005ffe:	4833      	ldr	r0, [pc, #204]	@ (80060cc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006000:	f7ff ff60 	bl	8005ec4 <LL_ADC_IsEnabled>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	bf0c      	ite	eq
 800600a:	2301      	moveq	r3, #1
 800600c:	2300      	movne	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d047      	beq.n	80060a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006014:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	4b2d      	ldr	r3, [pc, #180]	@ (80060d0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800601a:	4013      	ands	r3, r2
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	6811      	ldr	r1, [r2, #0]
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	6892      	ldr	r2, [r2, #8]
 8006024:	430a      	orrs	r2, r1
 8006026:	431a      	orrs	r2, r3
 8006028:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800602a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800602c:	e03a      	b.n	80060a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800602e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006036:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006038:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1f      	ldr	r2, [pc, #124]	@ (80060bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d004      	beq.n	800604e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1d      	ldr	r2, [pc, #116]	@ (80060c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d10e      	bne.n	800606c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800604e:	481b      	ldr	r0, [pc, #108]	@ (80060bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006050:	f7ff ff38 	bl	8005ec4 <LL_ADC_IsEnabled>
 8006054:	4604      	mov	r4, r0
 8006056:	481a      	ldr	r0, [pc, #104]	@ (80060c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006058:	f7ff ff34 	bl	8005ec4 <LL_ADC_IsEnabled>
 800605c:	4603      	mov	r3, r0
 800605e:	4323      	orrs	r3, r4
 8006060:	2b00      	cmp	r3, #0
 8006062:	bf0c      	ite	eq
 8006064:	2301      	moveq	r3, #1
 8006066:	2300      	movne	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	e008      	b.n	800607e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800606c:	4817      	ldr	r0, [pc, #92]	@ (80060cc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800606e:	f7ff ff29 	bl	8005ec4 <LL_ADC_IsEnabled>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	bf0c      	ite	eq
 8006078:	2301      	moveq	r3, #1
 800607a:	2300      	movne	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d010      	beq.n	80060a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006082:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	4b12      	ldr	r3, [pc, #72]	@ (80060d0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006088:	4013      	ands	r3, r2
 800608a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800608c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800608e:	e009      	b.n	80060a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006094:	f043 0220 	orr.w	r2, r3, #32
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80060a2:	e000      	b.n	80060a6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80060a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80060ae:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	378c      	adds	r7, #140	@ 0x8c
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd90      	pop	{r4, r7, pc}
 80060ba:	bf00      	nop
 80060bc:	40022000 	.word	0x40022000
 80060c0:	40022100 	.word	0x40022100
 80060c4:	40022300 	.word	0x40022300
 80060c8:	58026300 	.word	0x58026300
 80060cc:	58026000 	.word	0x58026000
 80060d0:	fffff0e0 	.word	0xfffff0e0

080060d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006114 <__NVIC_SetPriorityGrouping+0x40>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80060f0:	4013      	ands	r3, r2
 80060f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80060fc:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <__NVIC_SetPriorityGrouping+0x44>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006102:	4a04      	ldr	r2, [pc, #16]	@ (8006114 <__NVIC_SetPriorityGrouping+0x40>)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	60d3      	str	r3, [r2, #12]
}
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	e000ed00 	.word	0xe000ed00
 8006118:	05fa0000 	.word	0x05fa0000

0800611c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006120:	4b04      	ldr	r3, [pc, #16]	@ (8006134 <__NVIC_GetPriorityGrouping+0x18>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	0a1b      	lsrs	r3, r3, #8
 8006126:	f003 0307 	and.w	r3, r3, #7
}
 800612a:	4618      	mov	r0, r3
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	e000ed00 	.word	0xe000ed00

08006138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	4603      	mov	r3, r0
 8006140:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006146:	2b00      	cmp	r3, #0
 8006148:	db0b      	blt.n	8006162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	f003 021f 	and.w	r2, r3, #31
 8006150:	4907      	ldr	r1, [pc, #28]	@ (8006170 <__NVIC_EnableIRQ+0x38>)
 8006152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	2001      	movs	r0, #1
 800615a:	fa00 f202 	lsl.w	r2, r0, r2
 800615e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	e000e100 	.word	0xe000e100

08006174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	6039      	str	r1, [r7, #0]
 800617e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006180:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006184:	2b00      	cmp	r3, #0
 8006186:	db0a      	blt.n	800619e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	b2da      	uxtb	r2, r3
 800618c:	490c      	ldr	r1, [pc, #48]	@ (80061c0 <__NVIC_SetPriority+0x4c>)
 800618e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006192:	0112      	lsls	r2, r2, #4
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	440b      	add	r3, r1
 8006198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800619c:	e00a      	b.n	80061b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	4908      	ldr	r1, [pc, #32]	@ (80061c4 <__NVIC_SetPriority+0x50>)
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	3b04      	subs	r3, #4
 80061ac:	0112      	lsls	r2, r2, #4
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	440b      	add	r3, r1
 80061b2:	761a      	strb	r2, [r3, #24]
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	e000e100 	.word	0xe000e100
 80061c4:	e000ed00 	.word	0xe000ed00

080061c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b089      	sub	sp, #36	@ 0x24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f1c3 0307 	rsb	r3, r3, #7
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	bf28      	it	cs
 80061e6:	2304      	movcs	r3, #4
 80061e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	3304      	adds	r3, #4
 80061ee:	2b06      	cmp	r3, #6
 80061f0:	d902      	bls.n	80061f8 <NVIC_EncodePriority+0x30>
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	3b03      	subs	r3, #3
 80061f6:	e000      	b.n	80061fa <NVIC_EncodePriority+0x32>
 80061f8:	2300      	movs	r3, #0
 80061fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	fa02 f303 	lsl.w	r3, r2, r3
 8006206:	43da      	mvns	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	401a      	ands	r2, r3
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006210:	f04f 31ff 	mov.w	r1, #4294967295
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	fa01 f303 	lsl.w	r3, r1, r3
 800621a:	43d9      	mvns	r1, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006220:	4313      	orrs	r3, r2
         );
}
 8006222:	4618      	mov	r0, r3
 8006224:	3724      	adds	r7, #36	@ 0x24
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
	...

08006230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3b01      	subs	r3, #1
 800623c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006240:	d301      	bcc.n	8006246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006242:	2301      	movs	r3, #1
 8006244:	e00f      	b.n	8006266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006246:	4a0a      	ldr	r2, [pc, #40]	@ (8006270 <SysTick_Config+0x40>)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3b01      	subs	r3, #1
 800624c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800624e:	210f      	movs	r1, #15
 8006250:	f04f 30ff 	mov.w	r0, #4294967295
 8006254:	f7ff ff8e 	bl	8006174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006258:	4b05      	ldr	r3, [pc, #20]	@ (8006270 <SysTick_Config+0x40>)
 800625a:	2200      	movs	r2, #0
 800625c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800625e:	4b04      	ldr	r3, [pc, #16]	@ (8006270 <SysTick_Config+0x40>)
 8006260:	2207      	movs	r2, #7
 8006262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	e000e010 	.word	0xe000e010

08006274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff ff29 	bl	80060d4 <__NVIC_SetPriorityGrouping>
}
 8006282:	bf00      	nop
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b086      	sub	sp, #24
 800628e:	af00      	add	r7, sp, #0
 8006290:	4603      	mov	r3, r0
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006298:	f7ff ff40 	bl	800611c <__NVIC_GetPriorityGrouping>
 800629c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	6978      	ldr	r0, [r7, #20]
 80062a4:	f7ff ff90 	bl	80061c8 <NVIC_EncodePriority>
 80062a8:	4602      	mov	r2, r0
 80062aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80062ae:	4611      	mov	r1, r2
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7ff ff5f 	bl	8006174 <__NVIC_SetPriority>
}
 80062b6:	bf00      	nop
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	4603      	mov	r3, r0
 80062c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff ff33 	bl	8006138 <__NVIC_EnableIRQ>
}
 80062d2:	bf00      	nop
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b082      	sub	sp, #8
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff ffa4 	bl	8006230 <SysTick_Config>
 80062e8:	4603      	mov	r3, r0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80062f8:	f3bf 8f5f 	dmb	sy
}
 80062fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80062fe:	4b07      	ldr	r3, [pc, #28]	@ (800631c <HAL_MPU_Disable+0x28>)
 8006300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006302:	4a06      	ldr	r2, [pc, #24]	@ (800631c <HAL_MPU_Disable+0x28>)
 8006304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006308:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800630a:	4b05      	ldr	r3, [pc, #20]	@ (8006320 <HAL_MPU_Disable+0x2c>)
 800630c:	2200      	movs	r2, #0
 800630e:	605a      	str	r2, [r3, #4]
}
 8006310:	bf00      	nop
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	e000ed00 	.word	0xe000ed00
 8006320:	e000ed90 	.word	0xe000ed90

08006324 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800632c:	4a0b      	ldr	r2, [pc, #44]	@ (800635c <HAL_MPU_Enable+0x38>)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f043 0301 	orr.w	r3, r3, #1
 8006334:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006336:	4b0a      	ldr	r3, [pc, #40]	@ (8006360 <HAL_MPU_Enable+0x3c>)
 8006338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633a:	4a09      	ldr	r2, [pc, #36]	@ (8006360 <HAL_MPU_Enable+0x3c>)
 800633c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006340:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006342:	f3bf 8f4f 	dsb	sy
}
 8006346:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006348:	f3bf 8f6f 	isb	sy
}
 800634c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	e000ed90 	.word	0xe000ed90
 8006360:	e000ed00 	.word	0xe000ed00

08006364 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	785a      	ldrb	r2, [r3, #1]
 8006370:	4b1b      	ldr	r3, [pc, #108]	@ (80063e0 <HAL_MPU_ConfigRegion+0x7c>)
 8006372:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006374:	4b1a      	ldr	r3, [pc, #104]	@ (80063e0 <HAL_MPU_ConfigRegion+0x7c>)
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	4a19      	ldr	r2, [pc, #100]	@ (80063e0 <HAL_MPU_ConfigRegion+0x7c>)
 800637a:	f023 0301 	bic.w	r3, r3, #1
 800637e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006380:	4a17      	ldr	r2, [pc, #92]	@ (80063e0 <HAL_MPU_ConfigRegion+0x7c>)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	7b1b      	ldrb	r3, [r3, #12]
 800638c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	7adb      	ldrb	r3, [r3, #11]
 8006392:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006394:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	7a9b      	ldrb	r3, [r3, #10]
 800639a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800639c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	7b5b      	ldrb	r3, [r3, #13]
 80063a2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80063a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	7b9b      	ldrb	r3, [r3, #14]
 80063aa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80063ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	7bdb      	ldrb	r3, [r3, #15]
 80063b2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80063b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	7a5b      	ldrb	r3, [r3, #9]
 80063ba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80063bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	7a1b      	ldrb	r3, [r3, #8]
 80063c2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80063c4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	7812      	ldrb	r2, [r2, #0]
 80063ca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80063cc:	4a04      	ldr	r2, [pc, #16]	@ (80063e0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80063ce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80063d0:	6113      	str	r3, [r2, #16]
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	e000ed90 	.word	0xe000ed90

080063e4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e014      	b.n	8006420 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	791b      	ldrb	r3, [r3, #4]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d105      	bne.n	800640c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fb fba8 	bl	8001b5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e0a2      	b.n	8006586 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	795b      	ldrb	r3, [r3, #5]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <HAL_DAC_Start_DMA+0x24>
 8006448:	2302      	movs	r3, #2
 800644a:	e09c      	b.n	8006586 <HAL_DAC_Start_DMA+0x15e>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2202      	movs	r2, #2
 8006456:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d129      	bne.n	80064b2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	4a4b      	ldr	r2, [pc, #300]	@ (8006590 <HAL_DAC_Start_DMA+0x168>)
 8006464:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	4a4a      	ldr	r2, [pc, #296]	@ (8006594 <HAL_DAC_Start_DMA+0x16c>)
 800646c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	4a49      	ldr	r2, [pc, #292]	@ (8006598 <HAL_DAC_Start_DMA+0x170>)
 8006474:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006484:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <HAL_DAC_Start_DMA+0x6c>
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	2b04      	cmp	r3, #4
 8006490:	d005      	beq.n	800649e <HAL_DAC_Start_DMA+0x76>
 8006492:	e009      	b.n	80064a8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3308      	adds	r3, #8
 800649a:	613b      	str	r3, [r7, #16]
        break;
 800649c:	e033      	b.n	8006506 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	330c      	adds	r3, #12
 80064a4:	613b      	str	r3, [r7, #16]
        break;
 80064a6:	e02e      	b.n	8006506 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3310      	adds	r3, #16
 80064ae:	613b      	str	r3, [r7, #16]
        break;
 80064b0:	e029      	b.n	8006506 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	4a39      	ldr	r2, [pc, #228]	@ (800659c <HAL_DAC_Start_DMA+0x174>)
 80064b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	4a38      	ldr	r2, [pc, #224]	@ (80065a0 <HAL_DAC_Start_DMA+0x178>)
 80064c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	4a37      	ldr	r2, [pc, #220]	@ (80065a4 <HAL_DAC_Start_DMA+0x17c>)
 80064c8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80064d8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_DAC_Start_DMA+0xc0>
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d005      	beq.n	80064f2 <HAL_DAC_Start_DMA+0xca>
 80064e6:	e009      	b.n	80064fc <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3314      	adds	r3, #20
 80064ee:	613b      	str	r3, [r7, #16]
        break;
 80064f0:	e009      	b.n	8006506 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3318      	adds	r3, #24
 80064f8:	613b      	str	r3, [r7, #16]
        break;
 80064fa:	e004      	b.n	8006506 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	331c      	adds	r3, #28
 8006502:	613b      	str	r3, [r7, #16]
        break;
 8006504:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d111      	bne.n	8006530 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800651a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6898      	ldr	r0, [r3, #8]
 8006520:	6879      	ldr	r1, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	f000 fd6d 	bl	8007004 <HAL_DMA_Start_IT>
 800652a:	4603      	mov	r3, r0
 800652c:	75fb      	strb	r3, [r7, #23]
 800652e:	e010      	b.n	8006552 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800653e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	68d8      	ldr	r0, [r3, #12]
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	f000 fd5b 	bl	8007004 <HAL_DMA_Start_IT>
 800654e:	4603      	mov	r3, r0
 8006550:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10c      	bne.n	8006578 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6819      	ldr	r1, [r3, #0]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2201      	movs	r2, #1
 800656c:	409a      	lsls	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	e005      	b.n	8006584 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f043 0204 	orr.w	r2, r3, #4
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006584:	7dfb      	ldrb	r3, [r7, #23]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	08006841 	.word	0x08006841
 8006594:	08006863 	.word	0x08006863
 8006598:	0800687f 	.word	0x0800687f
 800659c:	080068e9 	.word	0x080068e9
 80065a0:	0800690b 	.word	0x0800690b
 80065a4:	08006927 	.word	0x08006927

080065a8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08a      	sub	sp, #40	@ 0x28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <HAL_DAC_ConfigChannel+0x1e>
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e12a      	b.n	8006834 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	795b      	ldrb	r3, [r3, #5]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <HAL_DAC_ConfigChannel+0x2e>
 80065e6:	2302      	movs	r3, #2
 80065e8:	e124      	b.n	8006834 <HAL_DAC_ConfigChannel+0x278>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2202      	movs	r2, #2
 80065f4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d17a      	bne.n	80066f4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80065fe:	f7fe f9c5 	bl	800498c <HAL_GetTick>
 8006602:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d13d      	bne.n	8006686 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800660a:	e018      	b.n	800663e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800660c:	f7fe f9be 	bl	800498c <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b01      	cmp	r3, #1
 8006618:	d911      	bls.n	800663e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006620:	4b86      	ldr	r3, [pc, #536]	@ (800683c <HAL_DAC_ConfigChannel+0x280>)
 8006622:	4013      	ands	r3, r2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00a      	beq.n	800663e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f043 0208 	orr.w	r2, r3, #8
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2203      	movs	r2, #3
 8006638:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e0fa      	b.n	8006834 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006644:	4b7d      	ldr	r3, [pc, #500]	@ (800683c <HAL_DAC_ConfigChannel+0x280>)
 8006646:	4013      	ands	r3, r2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1df      	bne.n	800660c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	6992      	ldr	r2, [r2, #24]
 8006654:	641a      	str	r2, [r3, #64]	@ 0x40
 8006656:	e020      	b.n	800669a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006658:	f7fe f998 	bl	800498c <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b01      	cmp	r3, #1
 8006664:	d90f      	bls.n	8006686 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666c:	2b00      	cmp	r3, #0
 800666e:	da0a      	bge.n	8006686 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f043 0208 	orr.w	r2, r3, #8
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2203      	movs	r2, #3
 8006680:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e0d6      	b.n	8006834 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800668c:	2b00      	cmp	r3, #0
 800668e:	dbe3      	blt.n	8006658 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	6992      	ldr	r2, [r2, #24]
 8006698:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f003 0310 	and.w	r3, r3, #16
 80066a6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80066aa:	fa01 f303 	lsl.w	r3, r1, r3
 80066ae:	43db      	mvns	r3, r3
 80066b0:	ea02 0103 	and.w	r1, r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	69da      	ldr	r2, [r3, #28]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	409a      	lsls	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	21ff      	movs	r1, #255	@ 0xff
 80066d6:	fa01 f303 	lsl.w	r3, r1, r3
 80066da:	43db      	mvns	r3, r3
 80066dc:	ea02 0103 	and.w	r1, r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	6a1a      	ldr	r2, [r3, #32]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f003 0310 	and.w	r3, r3, #16
 80066ea:	409a      	lsls	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d11d      	bne.n	8006738 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006702:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	221f      	movs	r2, #31
 800670c:	fa02 f303 	lsl.w	r3, r2, r3
 8006710:	43db      	mvns	r3, r3
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	4013      	ands	r3, r2
 8006716:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f003 0310 	and.w	r3, r3, #16
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	fa02 f303 	lsl.w	r3, r2, r3
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	4313      	orrs	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800673e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	2207      	movs	r2, #7
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	43db      	mvns	r3, r3
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	4013      	ands	r3, r2
 8006752:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d102      	bne.n	8006762 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800675c:	2300      	movs	r3, #0
 800675e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006760:	e00f      	b.n	8006782 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d102      	bne.n	8006770 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800676a:	2301      	movs	r3, #1
 800676c:	627b      	str	r3, [r7, #36]	@ 0x24
 800676e:	e008      	b.n	8006782 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d102      	bne.n	800677e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006778:	2301      	movs	r3, #1
 800677a:	627b      	str	r3, [r7, #36]	@ 0x24
 800677c:	e001      	b.n	8006782 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800677e:	2300      	movs	r3, #0
 8006780:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	4313      	orrs	r3, r2
 800678c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f003 0310 	and.w	r3, r3, #16
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	fa02 f303 	lsl.w	r3, r2, r3
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6819      	ldr	r1, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	43da      	mvns	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	400a      	ands	r2, r1
 80067c8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f003 0310 	and.w	r3, r3, #16
 80067d8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	43db      	mvns	r3, r3
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	4013      	ands	r3, r2
 80067e6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f003 0310 	and.w	r3, r3, #16
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	fa02 f303 	lsl.w	r3, r2, r3
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6819      	ldr	r1, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f003 0310 	and.w	r3, r3, #16
 8006814:	22c0      	movs	r2, #192	@ 0xc0
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	43da      	mvns	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	400a      	ands	r2, r1
 8006822:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006830:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006834:	4618      	mov	r0, r3
 8006836:	3728      	adds	r7, #40	@ 0x28
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	20008000 	.word	0x20008000

08006840 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f7fa f94e 	bl	8000af0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2201      	movs	r2, #1
 8006858:	711a      	strb	r2, [r3, #4]
}
 800685a:	bf00      	nop
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7fa f92f 	bl	8000ad4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006876:	bf00      	nop
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	f043 0204 	orr.w	r2, r3, #4
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f7ff fe85 	bl	80065a8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2201      	movs	r2, #1
 80068a2:	711a      	strb	r2, [r3, #4]
}
 80068a4:	bf00      	nop
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7ff ffd8 	bl	80068ac <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2201      	movs	r2, #1
 8006900:	711a      	strb	r2, [r3, #4]
}
 8006902:	bf00      	nop
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006916:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff ffd1 	bl	80068c0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800691e:	bf00      	nop
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006932:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f043 0204 	orr.w	r2, r3, #4
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f7ff ffc7 	bl	80068d4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	711a      	strb	r2, [r3, #4]
}
 800694c:	bf00      	nop
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800695c:	f7fe f816 	bl	800498c <HAL_GetTick>
 8006960:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e312      	b.n	8006f92 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a66      	ldr	r2, [pc, #408]	@ (8006b0c <HAL_DMA_Init+0x1b8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d04a      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a65      	ldr	r2, [pc, #404]	@ (8006b10 <HAL_DMA_Init+0x1bc>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d045      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a63      	ldr	r2, [pc, #396]	@ (8006b14 <HAL_DMA_Init+0x1c0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d040      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a62      	ldr	r2, [pc, #392]	@ (8006b18 <HAL_DMA_Init+0x1c4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d03b      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a60      	ldr	r2, [pc, #384]	@ (8006b1c <HAL_DMA_Init+0x1c8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d036      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a5f      	ldr	r2, [pc, #380]	@ (8006b20 <HAL_DMA_Init+0x1cc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d031      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a5d      	ldr	r2, [pc, #372]	@ (8006b24 <HAL_DMA_Init+0x1d0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d02c      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a5c      	ldr	r2, [pc, #368]	@ (8006b28 <HAL_DMA_Init+0x1d4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d027      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a5a      	ldr	r2, [pc, #360]	@ (8006b2c <HAL_DMA_Init+0x1d8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d022      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a59      	ldr	r2, [pc, #356]	@ (8006b30 <HAL_DMA_Init+0x1dc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d01d      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a57      	ldr	r2, [pc, #348]	@ (8006b34 <HAL_DMA_Init+0x1e0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d018      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a56      	ldr	r2, [pc, #344]	@ (8006b38 <HAL_DMA_Init+0x1e4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d013      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a54      	ldr	r2, [pc, #336]	@ (8006b3c <HAL_DMA_Init+0x1e8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00e      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a53      	ldr	r2, [pc, #332]	@ (8006b40 <HAL_DMA_Init+0x1ec>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d009      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a51      	ldr	r2, [pc, #324]	@ (8006b44 <HAL_DMA_Init+0x1f0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <HAL_DMA_Init+0xb8>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a50      	ldr	r2, [pc, #320]	@ (8006b48 <HAL_DMA_Init+0x1f4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d101      	bne.n	8006a10 <HAL_DMA_Init+0xbc>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e000      	b.n	8006a12 <HAL_DMA_Init+0xbe>
 8006a10:	2300      	movs	r3, #0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 813c 	beq.w	8006c90 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a37      	ldr	r2, [pc, #220]	@ (8006b0c <HAL_DMA_Init+0x1b8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d04a      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a36      	ldr	r2, [pc, #216]	@ (8006b10 <HAL_DMA_Init+0x1bc>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d045      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a34      	ldr	r2, [pc, #208]	@ (8006b14 <HAL_DMA_Init+0x1c0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d040      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a33      	ldr	r2, [pc, #204]	@ (8006b18 <HAL_DMA_Init+0x1c4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d03b      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a31      	ldr	r2, [pc, #196]	@ (8006b1c <HAL_DMA_Init+0x1c8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d036      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a30      	ldr	r2, [pc, #192]	@ (8006b20 <HAL_DMA_Init+0x1cc>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d031      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a2e      	ldr	r2, [pc, #184]	@ (8006b24 <HAL_DMA_Init+0x1d0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d02c      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a2d      	ldr	r2, [pc, #180]	@ (8006b28 <HAL_DMA_Init+0x1d4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d027      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8006b2c <HAL_DMA_Init+0x1d8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d022      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a2a      	ldr	r2, [pc, #168]	@ (8006b30 <HAL_DMA_Init+0x1dc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d01d      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a28      	ldr	r2, [pc, #160]	@ (8006b34 <HAL_DMA_Init+0x1e0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d018      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a27      	ldr	r2, [pc, #156]	@ (8006b38 <HAL_DMA_Init+0x1e4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d013      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a25      	ldr	r2, [pc, #148]	@ (8006b3c <HAL_DMA_Init+0x1e8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d00e      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a24      	ldr	r2, [pc, #144]	@ (8006b40 <HAL_DMA_Init+0x1ec>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d009      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a22      	ldr	r2, [pc, #136]	@ (8006b44 <HAL_DMA_Init+0x1f0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d004      	beq.n	8006ac8 <HAL_DMA_Init+0x174>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a21      	ldr	r2, [pc, #132]	@ (8006b48 <HAL_DMA_Init+0x1f4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d108      	bne.n	8006ada <HAL_DMA_Init+0x186>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0201 	bic.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	e007      	b.n	8006aea <HAL_DMA_Init+0x196>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0201 	bic.w	r2, r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006aea:	e02f      	b.n	8006b4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006aec:	f7fd ff4e 	bl	800498c <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b05      	cmp	r3, #5
 8006af8:	d928      	bls.n	8006b4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2220      	movs	r2, #32
 8006afe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2203      	movs	r2, #3
 8006b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e242      	b.n	8006f92 <HAL_DMA_Init+0x63e>
 8006b0c:	40020010 	.word	0x40020010
 8006b10:	40020028 	.word	0x40020028
 8006b14:	40020040 	.word	0x40020040
 8006b18:	40020058 	.word	0x40020058
 8006b1c:	40020070 	.word	0x40020070
 8006b20:	40020088 	.word	0x40020088
 8006b24:	400200a0 	.word	0x400200a0
 8006b28:	400200b8 	.word	0x400200b8
 8006b2c:	40020410 	.word	0x40020410
 8006b30:	40020428 	.word	0x40020428
 8006b34:	40020440 	.word	0x40020440
 8006b38:	40020458 	.word	0x40020458
 8006b3c:	40020470 	.word	0x40020470
 8006b40:	40020488 	.word	0x40020488
 8006b44:	400204a0 	.word	0x400204a0
 8006b48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1c8      	bne.n	8006aec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	4b83      	ldr	r3, [pc, #524]	@ (8006d74 <HAL_DMA_Init+0x420>)
 8006b66:	4013      	ands	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006b72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d107      	bne.n	8006bb0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2b28      	cmp	r3, #40	@ 0x28
 8006bb6:	d903      	bls.n	8006bc0 <HAL_DMA_Init+0x26c>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bbe:	d91f      	bls.n	8006c00 <HAL_DMA_Init+0x2ac>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bc6:	d903      	bls.n	8006bd0 <HAL_DMA_Init+0x27c>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	2b42      	cmp	r3, #66	@ 0x42
 8006bce:	d917      	bls.n	8006c00 <HAL_DMA_Init+0x2ac>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	2b46      	cmp	r3, #70	@ 0x46
 8006bd6:	d903      	bls.n	8006be0 <HAL_DMA_Init+0x28c>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2b48      	cmp	r3, #72	@ 0x48
 8006bde:	d90f      	bls.n	8006c00 <HAL_DMA_Init+0x2ac>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b4e      	cmp	r3, #78	@ 0x4e
 8006be6:	d903      	bls.n	8006bf0 <HAL_DMA_Init+0x29c>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b52      	cmp	r3, #82	@ 0x52
 8006bee:	d907      	bls.n	8006c00 <HAL_DMA_Init+0x2ac>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b73      	cmp	r3, #115	@ 0x73
 8006bf6:	d905      	bls.n	8006c04 <HAL_DMA_Init+0x2b0>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	2b77      	cmp	r3, #119	@ 0x77
 8006bfe:	d801      	bhi.n	8006c04 <HAL_DMA_Init+0x2b0>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <HAL_DMA_Init+0x2b2>
 8006c04:	2300      	movs	r3, #0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c10:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f023 0307 	bic.w	r3, r3, #7
 8006c28:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d117      	bne.n	8006c6c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00e      	beq.n	8006c6c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 fdca 	bl	80087e8 <DMA_CheckFifoParam>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d008      	beq.n	8006c6c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2240      	movs	r2, #64	@ 0x40
 8006c5e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e192      	b.n	8006f92 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fd05 	bl	8008684 <DMA_CalcBaseAndBitshift>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	223f      	movs	r2, #63	@ 0x3f
 8006c88:	409a      	lsls	r2, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	609a      	str	r2, [r3, #8]
 8006c8e:	e0c8      	b.n	8006e22 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a38      	ldr	r2, [pc, #224]	@ (8006d78 <HAL_DMA_Init+0x424>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d022      	beq.n	8006ce0 <HAL_DMA_Init+0x38c>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a37      	ldr	r2, [pc, #220]	@ (8006d7c <HAL_DMA_Init+0x428>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d01d      	beq.n	8006ce0 <HAL_DMA_Init+0x38c>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a35      	ldr	r2, [pc, #212]	@ (8006d80 <HAL_DMA_Init+0x42c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d018      	beq.n	8006ce0 <HAL_DMA_Init+0x38c>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a34      	ldr	r2, [pc, #208]	@ (8006d84 <HAL_DMA_Init+0x430>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d013      	beq.n	8006ce0 <HAL_DMA_Init+0x38c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a32      	ldr	r2, [pc, #200]	@ (8006d88 <HAL_DMA_Init+0x434>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00e      	beq.n	8006ce0 <HAL_DMA_Init+0x38c>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a31      	ldr	r2, [pc, #196]	@ (8006d8c <HAL_DMA_Init+0x438>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d009      	beq.n	8006ce0 <HAL_DMA_Init+0x38c>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a2f      	ldr	r2, [pc, #188]	@ (8006d90 <HAL_DMA_Init+0x43c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d004      	beq.n	8006ce0 <HAL_DMA_Init+0x38c>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a2e      	ldr	r2, [pc, #184]	@ (8006d94 <HAL_DMA_Init+0x440>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d101      	bne.n	8006ce4 <HAL_DMA_Init+0x390>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e000      	b.n	8006ce6 <HAL_DMA_Init+0x392>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 8092 	beq.w	8006e10 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a21      	ldr	r2, [pc, #132]	@ (8006d78 <HAL_DMA_Init+0x424>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d021      	beq.n	8006d3a <HAL_DMA_Init+0x3e6>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a20      	ldr	r2, [pc, #128]	@ (8006d7c <HAL_DMA_Init+0x428>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d01c      	beq.n	8006d3a <HAL_DMA_Init+0x3e6>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a1e      	ldr	r2, [pc, #120]	@ (8006d80 <HAL_DMA_Init+0x42c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d017      	beq.n	8006d3a <HAL_DMA_Init+0x3e6>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8006d84 <HAL_DMA_Init+0x430>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d012      	beq.n	8006d3a <HAL_DMA_Init+0x3e6>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a1b      	ldr	r2, [pc, #108]	@ (8006d88 <HAL_DMA_Init+0x434>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d00d      	beq.n	8006d3a <HAL_DMA_Init+0x3e6>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a1a      	ldr	r2, [pc, #104]	@ (8006d8c <HAL_DMA_Init+0x438>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d008      	beq.n	8006d3a <HAL_DMA_Init+0x3e6>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a18      	ldr	r2, [pc, #96]	@ (8006d90 <HAL_DMA_Init+0x43c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d003      	beq.n	8006d3a <HAL_DMA_Init+0x3e6>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a17      	ldr	r2, [pc, #92]	@ (8006d94 <HAL_DMA_Init+0x440>)
 8006d38:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4b10      	ldr	r3, [pc, #64]	@ (8006d98 <HAL_DMA_Init+0x444>)
 8006d56:	4013      	ands	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	2b40      	cmp	r3, #64	@ 0x40
 8006d60:	d01c      	beq.n	8006d9c <HAL_DMA_Init+0x448>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b80      	cmp	r3, #128	@ 0x80
 8006d68:	d102      	bne.n	8006d70 <HAL_DMA_Init+0x41c>
 8006d6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006d6e:	e016      	b.n	8006d9e <HAL_DMA_Init+0x44a>
 8006d70:	2300      	movs	r3, #0
 8006d72:	e014      	b.n	8006d9e <HAL_DMA_Init+0x44a>
 8006d74:	fe10803f 	.word	0xfe10803f
 8006d78:	58025408 	.word	0x58025408
 8006d7c:	5802541c 	.word	0x5802541c
 8006d80:	58025430 	.word	0x58025430
 8006d84:	58025444 	.word	0x58025444
 8006d88:	58025458 	.word	0x58025458
 8006d8c:	5802546c 	.word	0x5802546c
 8006d90:	58025480 	.word	0x58025480
 8006d94:	58025494 	.word	0x58025494
 8006d98:	fffe000f 	.word	0xfffe000f
 8006d9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	68d2      	ldr	r2, [r2, #12]
 8006da2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006da4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006dac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006db4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006dbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006dc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006dcc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	4b6e      	ldr	r3, [pc, #440]	@ (8006f9c <HAL_DMA_Init+0x648>)
 8006de4:	4413      	add	r3, r2
 8006de6:	4a6e      	ldr	r2, [pc, #440]	@ (8006fa0 <HAL_DMA_Init+0x64c>)
 8006de8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dec:	091b      	lsrs	r3, r3, #4
 8006dee:	009a      	lsls	r2, r3, #2
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 fc45 	bl	8008684 <DMA_CalcBaseAndBitshift>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	2201      	movs	r2, #1
 8006e08:	409a      	lsls	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	605a      	str	r2, [r3, #4]
 8006e0e:	e008      	b.n	8006e22 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2240      	movs	r2, #64	@ 0x40
 8006e14:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2203      	movs	r2, #3
 8006e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e0b7      	b.n	8006f92 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a5f      	ldr	r2, [pc, #380]	@ (8006fa4 <HAL_DMA_Init+0x650>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d072      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a5d      	ldr	r2, [pc, #372]	@ (8006fa8 <HAL_DMA_Init+0x654>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d06d      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a5c      	ldr	r2, [pc, #368]	@ (8006fac <HAL_DMA_Init+0x658>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d068      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a5a      	ldr	r2, [pc, #360]	@ (8006fb0 <HAL_DMA_Init+0x65c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d063      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a59      	ldr	r2, [pc, #356]	@ (8006fb4 <HAL_DMA_Init+0x660>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d05e      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a57      	ldr	r2, [pc, #348]	@ (8006fb8 <HAL_DMA_Init+0x664>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d059      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a56      	ldr	r2, [pc, #344]	@ (8006fbc <HAL_DMA_Init+0x668>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d054      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a54      	ldr	r2, [pc, #336]	@ (8006fc0 <HAL_DMA_Init+0x66c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d04f      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a53      	ldr	r2, [pc, #332]	@ (8006fc4 <HAL_DMA_Init+0x670>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d04a      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a51      	ldr	r2, [pc, #324]	@ (8006fc8 <HAL_DMA_Init+0x674>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d045      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a50      	ldr	r2, [pc, #320]	@ (8006fcc <HAL_DMA_Init+0x678>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d040      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a4e      	ldr	r2, [pc, #312]	@ (8006fd0 <HAL_DMA_Init+0x67c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d03b      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a4d      	ldr	r2, [pc, #308]	@ (8006fd4 <HAL_DMA_Init+0x680>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d036      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a4b      	ldr	r2, [pc, #300]	@ (8006fd8 <HAL_DMA_Init+0x684>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d031      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a4a      	ldr	r2, [pc, #296]	@ (8006fdc <HAL_DMA_Init+0x688>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d02c      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a48      	ldr	r2, [pc, #288]	@ (8006fe0 <HAL_DMA_Init+0x68c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d027      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a47      	ldr	r2, [pc, #284]	@ (8006fe4 <HAL_DMA_Init+0x690>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d022      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a45      	ldr	r2, [pc, #276]	@ (8006fe8 <HAL_DMA_Init+0x694>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d01d      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a44      	ldr	r2, [pc, #272]	@ (8006fec <HAL_DMA_Init+0x698>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d018      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a42      	ldr	r2, [pc, #264]	@ (8006ff0 <HAL_DMA_Init+0x69c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d013      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a41      	ldr	r2, [pc, #260]	@ (8006ff4 <HAL_DMA_Init+0x6a0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d00e      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a3f      	ldr	r2, [pc, #252]	@ (8006ff8 <HAL_DMA_Init+0x6a4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d009      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a3e      	ldr	r2, [pc, #248]	@ (8006ffc <HAL_DMA_Init+0x6a8>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d004      	beq.n	8006f12 <HAL_DMA_Init+0x5be>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a3c      	ldr	r2, [pc, #240]	@ (8007000 <HAL_DMA_Init+0x6ac>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d101      	bne.n	8006f16 <HAL_DMA_Init+0x5c2>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <HAL_DMA_Init+0x5c4>
 8006f16:	2300      	movs	r3, #0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d032      	beq.n	8006f82 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 fcdf 	bl	80088e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b80      	cmp	r3, #128	@ 0x80
 8006f28:	d102      	bne.n	8006f30 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f38:	b2d2      	uxtb	r2, r2
 8006f3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006f44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d010      	beq.n	8006f70 <HAL_DMA_Init+0x61c>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2b08      	cmp	r3, #8
 8006f54:	d80c      	bhi.n	8006f70 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 fd5c 	bl	8008a14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006f6c:	605a      	str	r2, [r3, #4]
 8006f6e:	e008      	b.n	8006f82 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	a7fdabf8 	.word	0xa7fdabf8
 8006fa0:	cccccccd 	.word	0xcccccccd
 8006fa4:	40020010 	.word	0x40020010
 8006fa8:	40020028 	.word	0x40020028
 8006fac:	40020040 	.word	0x40020040
 8006fb0:	40020058 	.word	0x40020058
 8006fb4:	40020070 	.word	0x40020070
 8006fb8:	40020088 	.word	0x40020088
 8006fbc:	400200a0 	.word	0x400200a0
 8006fc0:	400200b8 	.word	0x400200b8
 8006fc4:	40020410 	.word	0x40020410
 8006fc8:	40020428 	.word	0x40020428
 8006fcc:	40020440 	.word	0x40020440
 8006fd0:	40020458 	.word	0x40020458
 8006fd4:	40020470 	.word	0x40020470
 8006fd8:	40020488 	.word	0x40020488
 8006fdc:	400204a0 	.word	0x400204a0
 8006fe0:	400204b8 	.word	0x400204b8
 8006fe4:	58025408 	.word	0x58025408
 8006fe8:	5802541c 	.word	0x5802541c
 8006fec:	58025430 	.word	0x58025430
 8006ff0:	58025444 	.word	0x58025444
 8006ff4:	58025458 	.word	0x58025458
 8006ff8:	5802546c 	.word	0x5802546c
 8006ffc:	58025480 	.word	0x58025480
 8007000:	58025494 	.word	0x58025494

08007004 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
 8007010:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e226      	b.n	800746e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_DMA_Start_IT+0x2a>
 800702a:	2302      	movs	r3, #2
 800702c:	e21f      	b.n	800746e <HAL_DMA_Start_IT+0x46a>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b01      	cmp	r3, #1
 8007040:	f040 820a 	bne.w	8007458 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a68      	ldr	r2, [pc, #416]	@ (80071f8 <HAL_DMA_Start_IT+0x1f4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d04a      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a66      	ldr	r2, [pc, #408]	@ (80071fc <HAL_DMA_Start_IT+0x1f8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d045      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a65      	ldr	r2, [pc, #404]	@ (8007200 <HAL_DMA_Start_IT+0x1fc>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d040      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a63      	ldr	r2, [pc, #396]	@ (8007204 <HAL_DMA_Start_IT+0x200>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d03b      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a62      	ldr	r2, [pc, #392]	@ (8007208 <HAL_DMA_Start_IT+0x204>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d036      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a60      	ldr	r2, [pc, #384]	@ (800720c <HAL_DMA_Start_IT+0x208>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d031      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a5f      	ldr	r2, [pc, #380]	@ (8007210 <HAL_DMA_Start_IT+0x20c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d02c      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a5d      	ldr	r2, [pc, #372]	@ (8007214 <HAL_DMA_Start_IT+0x210>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d027      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a5c      	ldr	r2, [pc, #368]	@ (8007218 <HAL_DMA_Start_IT+0x214>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d022      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a5a      	ldr	r2, [pc, #360]	@ (800721c <HAL_DMA_Start_IT+0x218>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d01d      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a59      	ldr	r2, [pc, #356]	@ (8007220 <HAL_DMA_Start_IT+0x21c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d018      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a57      	ldr	r2, [pc, #348]	@ (8007224 <HAL_DMA_Start_IT+0x220>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d013      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a56      	ldr	r2, [pc, #344]	@ (8007228 <HAL_DMA_Start_IT+0x224>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d00e      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a54      	ldr	r2, [pc, #336]	@ (800722c <HAL_DMA_Start_IT+0x228>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d009      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a53      	ldr	r2, [pc, #332]	@ (8007230 <HAL_DMA_Start_IT+0x22c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d004      	beq.n	80070f2 <HAL_DMA_Start_IT+0xee>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a51      	ldr	r2, [pc, #324]	@ (8007234 <HAL_DMA_Start_IT+0x230>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d108      	bne.n	8007104 <HAL_DMA_Start_IT+0x100>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0201 	bic.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	e007      	b.n	8007114 <HAL_DMA_Start_IT+0x110>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0201 	bic.w	r2, r2, #1
 8007112:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f001 f906 	bl	800832c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a34      	ldr	r2, [pc, #208]	@ (80071f8 <HAL_DMA_Start_IT+0x1f4>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d04a      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a33      	ldr	r2, [pc, #204]	@ (80071fc <HAL_DMA_Start_IT+0x1f8>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d045      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a31      	ldr	r2, [pc, #196]	@ (8007200 <HAL_DMA_Start_IT+0x1fc>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d040      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a30      	ldr	r2, [pc, #192]	@ (8007204 <HAL_DMA_Start_IT+0x200>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d03b      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a2e      	ldr	r2, [pc, #184]	@ (8007208 <HAL_DMA_Start_IT+0x204>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d036      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a2d      	ldr	r2, [pc, #180]	@ (800720c <HAL_DMA_Start_IT+0x208>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d031      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a2b      	ldr	r2, [pc, #172]	@ (8007210 <HAL_DMA_Start_IT+0x20c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d02c      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a2a      	ldr	r2, [pc, #168]	@ (8007214 <HAL_DMA_Start_IT+0x210>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d027      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a28      	ldr	r2, [pc, #160]	@ (8007218 <HAL_DMA_Start_IT+0x214>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d022      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a27      	ldr	r2, [pc, #156]	@ (800721c <HAL_DMA_Start_IT+0x218>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d01d      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a25      	ldr	r2, [pc, #148]	@ (8007220 <HAL_DMA_Start_IT+0x21c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d018      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a24      	ldr	r2, [pc, #144]	@ (8007224 <HAL_DMA_Start_IT+0x220>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d013      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a22      	ldr	r2, [pc, #136]	@ (8007228 <HAL_DMA_Start_IT+0x224>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00e      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a21      	ldr	r2, [pc, #132]	@ (800722c <HAL_DMA_Start_IT+0x228>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d009      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007230 <HAL_DMA_Start_IT+0x22c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d004      	beq.n	80071c0 <HAL_DMA_Start_IT+0x1bc>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007234 <HAL_DMA_Start_IT+0x230>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d101      	bne.n	80071c4 <HAL_DMA_Start_IT+0x1c0>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <HAL_DMA_Start_IT+0x1c2>
 80071c4:	2300      	movs	r3, #0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d036      	beq.n	8007238 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f023 021e 	bic.w	r2, r3, #30
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0216 	orr.w	r2, r2, #22
 80071dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d03e      	beq.n	8007264 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0208 	orr.w	r2, r2, #8
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	e035      	b.n	8007264 <HAL_DMA_Start_IT+0x260>
 80071f8:	40020010 	.word	0x40020010
 80071fc:	40020028 	.word	0x40020028
 8007200:	40020040 	.word	0x40020040
 8007204:	40020058 	.word	0x40020058
 8007208:	40020070 	.word	0x40020070
 800720c:	40020088 	.word	0x40020088
 8007210:	400200a0 	.word	0x400200a0
 8007214:	400200b8 	.word	0x400200b8
 8007218:	40020410 	.word	0x40020410
 800721c:	40020428 	.word	0x40020428
 8007220:	40020440 	.word	0x40020440
 8007224:	40020458 	.word	0x40020458
 8007228:	40020470 	.word	0x40020470
 800722c:	40020488 	.word	0x40020488
 8007230:	400204a0 	.word	0x400204a0
 8007234:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f023 020e 	bic.w	r2, r3, #14
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 020a 	orr.w	r2, r2, #10
 800724a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007250:	2b00      	cmp	r3, #0
 8007252:	d007      	beq.n	8007264 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0204 	orr.w	r2, r2, #4
 8007262:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a83      	ldr	r2, [pc, #524]	@ (8007478 <HAL_DMA_Start_IT+0x474>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d072      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a82      	ldr	r2, [pc, #520]	@ (800747c <HAL_DMA_Start_IT+0x478>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d06d      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a80      	ldr	r2, [pc, #512]	@ (8007480 <HAL_DMA_Start_IT+0x47c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d068      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a7f      	ldr	r2, [pc, #508]	@ (8007484 <HAL_DMA_Start_IT+0x480>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d063      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a7d      	ldr	r2, [pc, #500]	@ (8007488 <HAL_DMA_Start_IT+0x484>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d05e      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a7c      	ldr	r2, [pc, #496]	@ (800748c <HAL_DMA_Start_IT+0x488>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d059      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a7a      	ldr	r2, [pc, #488]	@ (8007490 <HAL_DMA_Start_IT+0x48c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d054      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a79      	ldr	r2, [pc, #484]	@ (8007494 <HAL_DMA_Start_IT+0x490>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d04f      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a77      	ldr	r2, [pc, #476]	@ (8007498 <HAL_DMA_Start_IT+0x494>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d04a      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a76      	ldr	r2, [pc, #472]	@ (800749c <HAL_DMA_Start_IT+0x498>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d045      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a74      	ldr	r2, [pc, #464]	@ (80074a0 <HAL_DMA_Start_IT+0x49c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d040      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a73      	ldr	r2, [pc, #460]	@ (80074a4 <HAL_DMA_Start_IT+0x4a0>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d03b      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a71      	ldr	r2, [pc, #452]	@ (80074a8 <HAL_DMA_Start_IT+0x4a4>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d036      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a70      	ldr	r2, [pc, #448]	@ (80074ac <HAL_DMA_Start_IT+0x4a8>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d031      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a6e      	ldr	r2, [pc, #440]	@ (80074b0 <HAL_DMA_Start_IT+0x4ac>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d02c      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a6d      	ldr	r2, [pc, #436]	@ (80074b4 <HAL_DMA_Start_IT+0x4b0>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d027      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a6b      	ldr	r2, [pc, #428]	@ (80074b8 <HAL_DMA_Start_IT+0x4b4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d022      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a6a      	ldr	r2, [pc, #424]	@ (80074bc <HAL_DMA_Start_IT+0x4b8>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d01d      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a68      	ldr	r2, [pc, #416]	@ (80074c0 <HAL_DMA_Start_IT+0x4bc>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d018      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a67      	ldr	r2, [pc, #412]	@ (80074c4 <HAL_DMA_Start_IT+0x4c0>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d013      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a65      	ldr	r2, [pc, #404]	@ (80074c8 <HAL_DMA_Start_IT+0x4c4>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00e      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a64      	ldr	r2, [pc, #400]	@ (80074cc <HAL_DMA_Start_IT+0x4c8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d009      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a62      	ldr	r2, [pc, #392]	@ (80074d0 <HAL_DMA_Start_IT+0x4cc>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d004      	beq.n	8007354 <HAL_DMA_Start_IT+0x350>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a61      	ldr	r2, [pc, #388]	@ (80074d4 <HAL_DMA_Start_IT+0x4d0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d101      	bne.n	8007358 <HAL_DMA_Start_IT+0x354>
 8007354:	2301      	movs	r3, #1
 8007356:	e000      	b.n	800735a <HAL_DMA_Start_IT+0x356>
 8007358:	2300      	movs	r3, #0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d01a      	beq.n	8007394 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d007      	beq.n	800737c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007376:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800737a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007380:	2b00      	cmp	r3, #0
 8007382:	d007      	beq.n	8007394 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800738e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007392:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a37      	ldr	r2, [pc, #220]	@ (8007478 <HAL_DMA_Start_IT+0x474>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d04a      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a36      	ldr	r2, [pc, #216]	@ (800747c <HAL_DMA_Start_IT+0x478>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d045      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a34      	ldr	r2, [pc, #208]	@ (8007480 <HAL_DMA_Start_IT+0x47c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d040      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a33      	ldr	r2, [pc, #204]	@ (8007484 <HAL_DMA_Start_IT+0x480>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d03b      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a31      	ldr	r2, [pc, #196]	@ (8007488 <HAL_DMA_Start_IT+0x484>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d036      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a30      	ldr	r2, [pc, #192]	@ (800748c <HAL_DMA_Start_IT+0x488>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d031      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a2e      	ldr	r2, [pc, #184]	@ (8007490 <HAL_DMA_Start_IT+0x48c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d02c      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a2d      	ldr	r2, [pc, #180]	@ (8007494 <HAL_DMA_Start_IT+0x490>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d027      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a2b      	ldr	r2, [pc, #172]	@ (8007498 <HAL_DMA_Start_IT+0x494>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d022      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a2a      	ldr	r2, [pc, #168]	@ (800749c <HAL_DMA_Start_IT+0x498>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d01d      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a28      	ldr	r2, [pc, #160]	@ (80074a0 <HAL_DMA_Start_IT+0x49c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d018      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a27      	ldr	r2, [pc, #156]	@ (80074a4 <HAL_DMA_Start_IT+0x4a0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d013      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a25      	ldr	r2, [pc, #148]	@ (80074a8 <HAL_DMA_Start_IT+0x4a4>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d00e      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a24      	ldr	r2, [pc, #144]	@ (80074ac <HAL_DMA_Start_IT+0x4a8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d009      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a22      	ldr	r2, [pc, #136]	@ (80074b0 <HAL_DMA_Start_IT+0x4ac>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d004      	beq.n	8007434 <HAL_DMA_Start_IT+0x430>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a21      	ldr	r2, [pc, #132]	@ (80074b4 <HAL_DMA_Start_IT+0x4b0>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d108      	bne.n	8007446 <HAL_DMA_Start_IT+0x442>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	e012      	b.n	800746c <HAL_DMA_Start_IT+0x468>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f042 0201 	orr.w	r2, r2, #1
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	e009      	b.n	800746c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800745e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800746c:	7dfb      	ldrb	r3, [r7, #23]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40020010 	.word	0x40020010
 800747c:	40020028 	.word	0x40020028
 8007480:	40020040 	.word	0x40020040
 8007484:	40020058 	.word	0x40020058
 8007488:	40020070 	.word	0x40020070
 800748c:	40020088 	.word	0x40020088
 8007490:	400200a0 	.word	0x400200a0
 8007494:	400200b8 	.word	0x400200b8
 8007498:	40020410 	.word	0x40020410
 800749c:	40020428 	.word	0x40020428
 80074a0:	40020440 	.word	0x40020440
 80074a4:	40020458 	.word	0x40020458
 80074a8:	40020470 	.word	0x40020470
 80074ac:	40020488 	.word	0x40020488
 80074b0:	400204a0 	.word	0x400204a0
 80074b4:	400204b8 	.word	0x400204b8
 80074b8:	58025408 	.word	0x58025408
 80074bc:	5802541c 	.word	0x5802541c
 80074c0:	58025430 	.word	0x58025430
 80074c4:	58025444 	.word	0x58025444
 80074c8:	58025458 	.word	0x58025458
 80074cc:	5802546c 	.word	0x5802546c
 80074d0:	58025480 	.word	0x58025480
 80074d4:	58025494 	.word	0x58025494

080074d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08a      	sub	sp, #40	@ 0x28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80074e4:	4b67      	ldr	r3, [pc, #412]	@ (8007684 <HAL_DMA_IRQHandler+0x1ac>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a67      	ldr	r2, [pc, #412]	@ (8007688 <HAL_DMA_IRQHandler+0x1b0>)
 80074ea:	fba2 2303 	umull	r2, r3, r2, r3
 80074ee:	0a9b      	lsrs	r3, r3, #10
 80074f0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074f6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074fc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a5f      	ldr	r2, [pc, #380]	@ (800768c <HAL_DMA_IRQHandler+0x1b4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d04a      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a5d      	ldr	r2, [pc, #372]	@ (8007690 <HAL_DMA_IRQHandler+0x1b8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d045      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a5c      	ldr	r2, [pc, #368]	@ (8007694 <HAL_DMA_IRQHandler+0x1bc>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d040      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a5a      	ldr	r2, [pc, #360]	@ (8007698 <HAL_DMA_IRQHandler+0x1c0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d03b      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a59      	ldr	r2, [pc, #356]	@ (800769c <HAL_DMA_IRQHandler+0x1c4>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d036      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a57      	ldr	r2, [pc, #348]	@ (80076a0 <HAL_DMA_IRQHandler+0x1c8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d031      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a56      	ldr	r2, [pc, #344]	@ (80076a4 <HAL_DMA_IRQHandler+0x1cc>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d02c      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a54      	ldr	r2, [pc, #336]	@ (80076a8 <HAL_DMA_IRQHandler+0x1d0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d027      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a53      	ldr	r2, [pc, #332]	@ (80076ac <HAL_DMA_IRQHandler+0x1d4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d022      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a51      	ldr	r2, [pc, #324]	@ (80076b0 <HAL_DMA_IRQHandler+0x1d8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d01d      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a50      	ldr	r2, [pc, #320]	@ (80076b4 <HAL_DMA_IRQHandler+0x1dc>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d018      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a4e      	ldr	r2, [pc, #312]	@ (80076b8 <HAL_DMA_IRQHandler+0x1e0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d013      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a4d      	ldr	r2, [pc, #308]	@ (80076bc <HAL_DMA_IRQHandler+0x1e4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00e      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a4b      	ldr	r2, [pc, #300]	@ (80076c0 <HAL_DMA_IRQHandler+0x1e8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d009      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a4a      	ldr	r2, [pc, #296]	@ (80076c4 <HAL_DMA_IRQHandler+0x1ec>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d004      	beq.n	80075aa <HAL_DMA_IRQHandler+0xd2>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a48      	ldr	r2, [pc, #288]	@ (80076c8 <HAL_DMA_IRQHandler+0x1f0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d101      	bne.n	80075ae <HAL_DMA_IRQHandler+0xd6>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e000      	b.n	80075b0 <HAL_DMA_IRQHandler+0xd8>
 80075ae:	2300      	movs	r3, #0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 842b 	beq.w	8007e0c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075ba:	f003 031f 	and.w	r3, r3, #31
 80075be:	2208      	movs	r2, #8
 80075c0:	409a      	lsls	r2, r3
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	4013      	ands	r3, r2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 80a2 	beq.w	8007710 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a2e      	ldr	r2, [pc, #184]	@ (800768c <HAL_DMA_IRQHandler+0x1b4>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d04a      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a2d      	ldr	r2, [pc, #180]	@ (8007690 <HAL_DMA_IRQHandler+0x1b8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d045      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a2b      	ldr	r2, [pc, #172]	@ (8007694 <HAL_DMA_IRQHandler+0x1bc>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d040      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a2a      	ldr	r2, [pc, #168]	@ (8007698 <HAL_DMA_IRQHandler+0x1c0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d03b      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a28      	ldr	r2, [pc, #160]	@ (800769c <HAL_DMA_IRQHandler+0x1c4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d036      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a27      	ldr	r2, [pc, #156]	@ (80076a0 <HAL_DMA_IRQHandler+0x1c8>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d031      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a25      	ldr	r2, [pc, #148]	@ (80076a4 <HAL_DMA_IRQHandler+0x1cc>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d02c      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a24      	ldr	r2, [pc, #144]	@ (80076a8 <HAL_DMA_IRQHandler+0x1d0>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d027      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a22      	ldr	r2, [pc, #136]	@ (80076ac <HAL_DMA_IRQHandler+0x1d4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d022      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a21      	ldr	r2, [pc, #132]	@ (80076b0 <HAL_DMA_IRQHandler+0x1d8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d01d      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a1f      	ldr	r2, [pc, #124]	@ (80076b4 <HAL_DMA_IRQHandler+0x1dc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d018      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1e      	ldr	r2, [pc, #120]	@ (80076b8 <HAL_DMA_IRQHandler+0x1e0>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d013      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1c      	ldr	r2, [pc, #112]	@ (80076bc <HAL_DMA_IRQHandler+0x1e4>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d00e      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a1b      	ldr	r2, [pc, #108]	@ (80076c0 <HAL_DMA_IRQHandler+0x1e8>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d009      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a19      	ldr	r2, [pc, #100]	@ (80076c4 <HAL_DMA_IRQHandler+0x1ec>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d004      	beq.n	800766c <HAL_DMA_IRQHandler+0x194>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a18      	ldr	r2, [pc, #96]	@ (80076c8 <HAL_DMA_IRQHandler+0x1f0>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d12f      	bne.n	80076cc <HAL_DMA_IRQHandler+0x1f4>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0304 	and.w	r3, r3, #4
 8007676:	2b00      	cmp	r3, #0
 8007678:	bf14      	ite	ne
 800767a:	2301      	movne	r3, #1
 800767c:	2300      	moveq	r3, #0
 800767e:	b2db      	uxtb	r3, r3
 8007680:	e02e      	b.n	80076e0 <HAL_DMA_IRQHandler+0x208>
 8007682:	bf00      	nop
 8007684:	24000000 	.word	0x24000000
 8007688:	1b4e81b5 	.word	0x1b4e81b5
 800768c:	40020010 	.word	0x40020010
 8007690:	40020028 	.word	0x40020028
 8007694:	40020040 	.word	0x40020040
 8007698:	40020058 	.word	0x40020058
 800769c:	40020070 	.word	0x40020070
 80076a0:	40020088 	.word	0x40020088
 80076a4:	400200a0 	.word	0x400200a0
 80076a8:	400200b8 	.word	0x400200b8
 80076ac:	40020410 	.word	0x40020410
 80076b0:	40020428 	.word	0x40020428
 80076b4:	40020440 	.word	0x40020440
 80076b8:	40020458 	.word	0x40020458
 80076bc:	40020470 	.word	0x40020470
 80076c0:	40020488 	.word	0x40020488
 80076c4:	400204a0 	.word	0x400204a0
 80076c8:	400204b8 	.word	0x400204b8
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	bf14      	ite	ne
 80076da:	2301      	movne	r3, #1
 80076dc:	2300      	moveq	r3, #0
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d015      	beq.n	8007710 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f022 0204 	bic.w	r2, r2, #4
 80076f2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076f8:	f003 031f 	and.w	r3, r3, #31
 80076fc:	2208      	movs	r2, #8
 80076fe:	409a      	lsls	r2, r3
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007708:	f043 0201 	orr.w	r2, r3, #1
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007714:	f003 031f 	and.w	r3, r3, #31
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	fa22 f303 	lsr.w	r3, r2, r3
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d06e      	beq.n	8007804 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a69      	ldr	r2, [pc, #420]	@ (80078d0 <HAL_DMA_IRQHandler+0x3f8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d04a      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a67      	ldr	r2, [pc, #412]	@ (80078d4 <HAL_DMA_IRQHandler+0x3fc>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d045      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a66      	ldr	r2, [pc, #408]	@ (80078d8 <HAL_DMA_IRQHandler+0x400>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d040      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a64      	ldr	r2, [pc, #400]	@ (80078dc <HAL_DMA_IRQHandler+0x404>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d03b      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a63      	ldr	r2, [pc, #396]	@ (80078e0 <HAL_DMA_IRQHandler+0x408>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d036      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a61      	ldr	r2, [pc, #388]	@ (80078e4 <HAL_DMA_IRQHandler+0x40c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d031      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a60      	ldr	r2, [pc, #384]	@ (80078e8 <HAL_DMA_IRQHandler+0x410>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d02c      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a5e      	ldr	r2, [pc, #376]	@ (80078ec <HAL_DMA_IRQHandler+0x414>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d027      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a5d      	ldr	r2, [pc, #372]	@ (80078f0 <HAL_DMA_IRQHandler+0x418>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d022      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a5b      	ldr	r2, [pc, #364]	@ (80078f4 <HAL_DMA_IRQHandler+0x41c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d01d      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a5a      	ldr	r2, [pc, #360]	@ (80078f8 <HAL_DMA_IRQHandler+0x420>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d018      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a58      	ldr	r2, [pc, #352]	@ (80078fc <HAL_DMA_IRQHandler+0x424>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d013      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a57      	ldr	r2, [pc, #348]	@ (8007900 <HAL_DMA_IRQHandler+0x428>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00e      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a55      	ldr	r2, [pc, #340]	@ (8007904 <HAL_DMA_IRQHandler+0x42c>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d009      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a54      	ldr	r2, [pc, #336]	@ (8007908 <HAL_DMA_IRQHandler+0x430>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d004      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x2ee>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a52      	ldr	r2, [pc, #328]	@ (800790c <HAL_DMA_IRQHandler+0x434>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d10a      	bne.n	80077dc <HAL_DMA_IRQHandler+0x304>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	bf14      	ite	ne
 80077d4:	2301      	movne	r3, #1
 80077d6:	2300      	moveq	r3, #0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	e003      	b.n	80077e4 <HAL_DMA_IRQHandler+0x30c>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2300      	movs	r3, #0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00d      	beq.n	8007804 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ec:	f003 031f 	and.w	r3, r3, #31
 80077f0:	2201      	movs	r2, #1
 80077f2:	409a      	lsls	r2, r3
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077fc:	f043 0202 	orr.w	r2, r3, #2
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007808:	f003 031f 	and.w	r3, r3, #31
 800780c:	2204      	movs	r2, #4
 800780e:	409a      	lsls	r2, r3
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	4013      	ands	r3, r2
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 808f 	beq.w	8007938 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a2c      	ldr	r2, [pc, #176]	@ (80078d0 <HAL_DMA_IRQHandler+0x3f8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d04a      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a2a      	ldr	r2, [pc, #168]	@ (80078d4 <HAL_DMA_IRQHandler+0x3fc>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d045      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a29      	ldr	r2, [pc, #164]	@ (80078d8 <HAL_DMA_IRQHandler+0x400>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d040      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a27      	ldr	r2, [pc, #156]	@ (80078dc <HAL_DMA_IRQHandler+0x404>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d03b      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a26      	ldr	r2, [pc, #152]	@ (80078e0 <HAL_DMA_IRQHandler+0x408>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d036      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a24      	ldr	r2, [pc, #144]	@ (80078e4 <HAL_DMA_IRQHandler+0x40c>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d031      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a23      	ldr	r2, [pc, #140]	@ (80078e8 <HAL_DMA_IRQHandler+0x410>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d02c      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a21      	ldr	r2, [pc, #132]	@ (80078ec <HAL_DMA_IRQHandler+0x414>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d027      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a20      	ldr	r2, [pc, #128]	@ (80078f0 <HAL_DMA_IRQHandler+0x418>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d022      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a1e      	ldr	r2, [pc, #120]	@ (80078f4 <HAL_DMA_IRQHandler+0x41c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d01d      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a1d      	ldr	r2, [pc, #116]	@ (80078f8 <HAL_DMA_IRQHandler+0x420>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d018      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a1b      	ldr	r2, [pc, #108]	@ (80078fc <HAL_DMA_IRQHandler+0x424>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d013      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a1a      	ldr	r2, [pc, #104]	@ (8007900 <HAL_DMA_IRQHandler+0x428>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d00e      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a18      	ldr	r2, [pc, #96]	@ (8007904 <HAL_DMA_IRQHandler+0x42c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d009      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a17      	ldr	r2, [pc, #92]	@ (8007908 <HAL_DMA_IRQHandler+0x430>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d004      	beq.n	80078ba <HAL_DMA_IRQHandler+0x3e2>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a15      	ldr	r2, [pc, #84]	@ (800790c <HAL_DMA_IRQHandler+0x434>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d12a      	bne.n	8007910 <HAL_DMA_IRQHandler+0x438>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	bf14      	ite	ne
 80078c8:	2301      	movne	r3, #1
 80078ca:	2300      	moveq	r3, #0
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	e023      	b.n	8007918 <HAL_DMA_IRQHandler+0x440>
 80078d0:	40020010 	.word	0x40020010
 80078d4:	40020028 	.word	0x40020028
 80078d8:	40020040 	.word	0x40020040
 80078dc:	40020058 	.word	0x40020058
 80078e0:	40020070 	.word	0x40020070
 80078e4:	40020088 	.word	0x40020088
 80078e8:	400200a0 	.word	0x400200a0
 80078ec:	400200b8 	.word	0x400200b8
 80078f0:	40020410 	.word	0x40020410
 80078f4:	40020428 	.word	0x40020428
 80078f8:	40020440 	.word	0x40020440
 80078fc:	40020458 	.word	0x40020458
 8007900:	40020470 	.word	0x40020470
 8007904:	40020488 	.word	0x40020488
 8007908:	400204a0 	.word	0x400204a0
 800790c:	400204b8 	.word	0x400204b8
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2300      	movs	r3, #0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00d      	beq.n	8007938 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	2204      	movs	r2, #4
 8007926:	409a      	lsls	r2, r3
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007930:	f043 0204 	orr.w	r2, r3, #4
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800793c:	f003 031f 	and.w	r3, r3, #31
 8007940:	2210      	movs	r2, #16
 8007942:	409a      	lsls	r2, r3
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	4013      	ands	r3, r2
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 80a6 	beq.w	8007a9a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a85      	ldr	r2, [pc, #532]	@ (8007b68 <HAL_DMA_IRQHandler+0x690>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d04a      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a83      	ldr	r2, [pc, #524]	@ (8007b6c <HAL_DMA_IRQHandler+0x694>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d045      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a82      	ldr	r2, [pc, #520]	@ (8007b70 <HAL_DMA_IRQHandler+0x698>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d040      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a80      	ldr	r2, [pc, #512]	@ (8007b74 <HAL_DMA_IRQHandler+0x69c>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d03b      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a7f      	ldr	r2, [pc, #508]	@ (8007b78 <HAL_DMA_IRQHandler+0x6a0>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d036      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a7d      	ldr	r2, [pc, #500]	@ (8007b7c <HAL_DMA_IRQHandler+0x6a4>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d031      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a7c      	ldr	r2, [pc, #496]	@ (8007b80 <HAL_DMA_IRQHandler+0x6a8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d02c      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a7a      	ldr	r2, [pc, #488]	@ (8007b84 <HAL_DMA_IRQHandler+0x6ac>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d027      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a79      	ldr	r2, [pc, #484]	@ (8007b88 <HAL_DMA_IRQHandler+0x6b0>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d022      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a77      	ldr	r2, [pc, #476]	@ (8007b8c <HAL_DMA_IRQHandler+0x6b4>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d01d      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a76      	ldr	r2, [pc, #472]	@ (8007b90 <HAL_DMA_IRQHandler+0x6b8>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d018      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a74      	ldr	r2, [pc, #464]	@ (8007b94 <HAL_DMA_IRQHandler+0x6bc>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d013      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a73      	ldr	r2, [pc, #460]	@ (8007b98 <HAL_DMA_IRQHandler+0x6c0>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d00e      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a71      	ldr	r2, [pc, #452]	@ (8007b9c <HAL_DMA_IRQHandler+0x6c4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d009      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a70      	ldr	r2, [pc, #448]	@ (8007ba0 <HAL_DMA_IRQHandler+0x6c8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d004      	beq.n	80079ee <HAL_DMA_IRQHandler+0x516>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a6e      	ldr	r2, [pc, #440]	@ (8007ba4 <HAL_DMA_IRQHandler+0x6cc>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d10a      	bne.n	8007a04 <HAL_DMA_IRQHandler+0x52c>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0308 	and.w	r3, r3, #8
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	bf14      	ite	ne
 80079fc:	2301      	movne	r3, #1
 80079fe:	2300      	moveq	r3, #0
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	e009      	b.n	8007a18 <HAL_DMA_IRQHandler+0x540>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0304 	and.w	r3, r3, #4
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	bf14      	ite	ne
 8007a12:	2301      	movne	r3, #1
 8007a14:	2300      	moveq	r3, #0
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d03e      	beq.n	8007a9a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a20:	f003 031f 	and.w	r3, r3, #31
 8007a24:	2210      	movs	r2, #16
 8007a26:	409a      	lsls	r2, r3
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d018      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d108      	bne.n	8007a5a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d024      	beq.n	8007a9a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	4798      	blx	r3
 8007a58:	e01f      	b.n	8007a9a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d01b      	beq.n	8007a9a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	4798      	blx	r3
 8007a6a:	e016      	b.n	8007a9a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d107      	bne.n	8007a8a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0208 	bic.w	r2, r2, #8
 8007a88:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a9e:	f003 031f 	and.w	r3, r3, #31
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	409a      	lsls	r2, r3
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 8110 	beq.w	8007cd0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a2c      	ldr	r2, [pc, #176]	@ (8007b68 <HAL_DMA_IRQHandler+0x690>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d04a      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a2b      	ldr	r2, [pc, #172]	@ (8007b6c <HAL_DMA_IRQHandler+0x694>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d045      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a29      	ldr	r2, [pc, #164]	@ (8007b70 <HAL_DMA_IRQHandler+0x698>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d040      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a28      	ldr	r2, [pc, #160]	@ (8007b74 <HAL_DMA_IRQHandler+0x69c>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d03b      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a26      	ldr	r2, [pc, #152]	@ (8007b78 <HAL_DMA_IRQHandler+0x6a0>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d036      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a25      	ldr	r2, [pc, #148]	@ (8007b7c <HAL_DMA_IRQHandler+0x6a4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d031      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a23      	ldr	r2, [pc, #140]	@ (8007b80 <HAL_DMA_IRQHandler+0x6a8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d02c      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a22      	ldr	r2, [pc, #136]	@ (8007b84 <HAL_DMA_IRQHandler+0x6ac>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d027      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a20      	ldr	r2, [pc, #128]	@ (8007b88 <HAL_DMA_IRQHandler+0x6b0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d022      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b8c <HAL_DMA_IRQHandler+0x6b4>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d01d      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a1d      	ldr	r2, [pc, #116]	@ (8007b90 <HAL_DMA_IRQHandler+0x6b8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d018      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1c      	ldr	r2, [pc, #112]	@ (8007b94 <HAL_DMA_IRQHandler+0x6bc>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1a      	ldr	r2, [pc, #104]	@ (8007b98 <HAL_DMA_IRQHandler+0x6c0>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00e      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a19      	ldr	r2, [pc, #100]	@ (8007b9c <HAL_DMA_IRQHandler+0x6c4>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d009      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a17      	ldr	r2, [pc, #92]	@ (8007ba0 <HAL_DMA_IRQHandler+0x6c8>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x678>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a16      	ldr	r2, [pc, #88]	@ (8007ba4 <HAL_DMA_IRQHandler+0x6cc>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d12b      	bne.n	8007ba8 <HAL_DMA_IRQHandler+0x6d0>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0310 	and.w	r3, r3, #16
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bf14      	ite	ne
 8007b5e:	2301      	movne	r3, #1
 8007b60:	2300      	moveq	r3, #0
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	e02a      	b.n	8007bbc <HAL_DMA_IRQHandler+0x6e4>
 8007b66:	bf00      	nop
 8007b68:	40020010 	.word	0x40020010
 8007b6c:	40020028 	.word	0x40020028
 8007b70:	40020040 	.word	0x40020040
 8007b74:	40020058 	.word	0x40020058
 8007b78:	40020070 	.word	0x40020070
 8007b7c:	40020088 	.word	0x40020088
 8007b80:	400200a0 	.word	0x400200a0
 8007b84:	400200b8 	.word	0x400200b8
 8007b88:	40020410 	.word	0x40020410
 8007b8c:	40020428 	.word	0x40020428
 8007b90:	40020440 	.word	0x40020440
 8007b94:	40020458 	.word	0x40020458
 8007b98:	40020470 	.word	0x40020470
 8007b9c:	40020488 	.word	0x40020488
 8007ba0:	400204a0 	.word	0x400204a0
 8007ba4:	400204b8 	.word	0x400204b8
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bf14      	ite	ne
 8007bb6:	2301      	movne	r3, #1
 8007bb8:	2300      	moveq	r3, #0
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 8087 	beq.w	8007cd0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bc6:	f003 031f 	and.w	r3, r3, #31
 8007bca:	2220      	movs	r2, #32
 8007bcc:	409a      	lsls	r2, r3
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	d139      	bne.n	8007c52 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0216 	bic.w	r2, r2, #22
 8007bec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	695a      	ldr	r2, [r3, #20]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007bfc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d103      	bne.n	8007c0e <HAL_DMA_IRQHandler+0x736>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d007      	beq.n	8007c1e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 0208 	bic.w	r2, r2, #8
 8007c1c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c22:	f003 031f 	and.w	r3, r3, #31
 8007c26:	223f      	movs	r2, #63	@ 0x3f
 8007c28:	409a      	lsls	r2, r3
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 834a 	beq.w	80082dc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	4798      	blx	r3
          }
          return;
 8007c50:	e344      	b.n	80082dc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d018      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d108      	bne.n	8007c80 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d02c      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	4798      	blx	r3
 8007c7e:	e027      	b.n	8007cd0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d023      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	4798      	blx	r3
 8007c90:	e01e      	b.n	8007cd0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10f      	bne.n	8007cc0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 0210 	bic.w	r2, r2, #16
 8007cae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 8306 	beq.w	80082e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 8088 	beq.w	8007df8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2204      	movs	r2, #4
 8007cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a7a      	ldr	r2, [pc, #488]	@ (8007ee0 <HAL_DMA_IRQHandler+0xa08>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d04a      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a79      	ldr	r2, [pc, #484]	@ (8007ee4 <HAL_DMA_IRQHandler+0xa0c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d045      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a77      	ldr	r2, [pc, #476]	@ (8007ee8 <HAL_DMA_IRQHandler+0xa10>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d040      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a76      	ldr	r2, [pc, #472]	@ (8007eec <HAL_DMA_IRQHandler+0xa14>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d03b      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a74      	ldr	r2, [pc, #464]	@ (8007ef0 <HAL_DMA_IRQHandler+0xa18>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d036      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a73      	ldr	r2, [pc, #460]	@ (8007ef4 <HAL_DMA_IRQHandler+0xa1c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d031      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a71      	ldr	r2, [pc, #452]	@ (8007ef8 <HAL_DMA_IRQHandler+0xa20>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d02c      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a70      	ldr	r2, [pc, #448]	@ (8007efc <HAL_DMA_IRQHandler+0xa24>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d027      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a6e      	ldr	r2, [pc, #440]	@ (8007f00 <HAL_DMA_IRQHandler+0xa28>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d022      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a6d      	ldr	r2, [pc, #436]	@ (8007f04 <HAL_DMA_IRQHandler+0xa2c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d01d      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a6b      	ldr	r2, [pc, #428]	@ (8007f08 <HAL_DMA_IRQHandler+0xa30>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d018      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a6a      	ldr	r2, [pc, #424]	@ (8007f0c <HAL_DMA_IRQHandler+0xa34>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d013      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a68      	ldr	r2, [pc, #416]	@ (8007f10 <HAL_DMA_IRQHandler+0xa38>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d00e      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a67      	ldr	r2, [pc, #412]	@ (8007f14 <HAL_DMA_IRQHandler+0xa3c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d009      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a65      	ldr	r2, [pc, #404]	@ (8007f18 <HAL_DMA_IRQHandler+0xa40>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d004      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x8b8>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a64      	ldr	r2, [pc, #400]	@ (8007f1c <HAL_DMA_IRQHandler+0xa44>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d108      	bne.n	8007da2 <HAL_DMA_IRQHandler+0x8ca>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0201 	bic.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	e007      	b.n	8007db2 <HAL_DMA_IRQHandler+0x8da>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 0201 	bic.w	r2, r2, #1
 8007db0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3301      	adds	r3, #1
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d307      	bcc.n	8007dce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1f2      	bne.n	8007db2 <HAL_DMA_IRQHandler+0x8da>
 8007dcc:	e000      	b.n	8007dd0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007dce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d004      	beq.n	8007de8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2203      	movs	r2, #3
 8007de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007de6:	e003      	b.n	8007df0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8272 	beq.w	80082e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
 8007e0a:	e26c      	b.n	80082e6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a43      	ldr	r2, [pc, #268]	@ (8007f20 <HAL_DMA_IRQHandler+0xa48>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d022      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x984>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a42      	ldr	r2, [pc, #264]	@ (8007f24 <HAL_DMA_IRQHandler+0xa4c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d01d      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x984>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a40      	ldr	r2, [pc, #256]	@ (8007f28 <HAL_DMA_IRQHandler+0xa50>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d018      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x984>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8007f2c <HAL_DMA_IRQHandler+0xa54>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d013      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x984>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a3d      	ldr	r2, [pc, #244]	@ (8007f30 <HAL_DMA_IRQHandler+0xa58>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d00e      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x984>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a3c      	ldr	r2, [pc, #240]	@ (8007f34 <HAL_DMA_IRQHandler+0xa5c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d009      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x984>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a3a      	ldr	r2, [pc, #232]	@ (8007f38 <HAL_DMA_IRQHandler+0xa60>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d004      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x984>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a39      	ldr	r2, [pc, #228]	@ (8007f3c <HAL_DMA_IRQHandler+0xa64>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d101      	bne.n	8007e60 <HAL_DMA_IRQHandler+0x988>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e000      	b.n	8007e62 <HAL_DMA_IRQHandler+0x98a>
 8007e60:	2300      	movs	r3, #0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 823f 	beq.w	80082e6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e74:	f003 031f 	and.w	r3, r3, #31
 8007e78:	2204      	movs	r2, #4
 8007e7a:	409a      	lsls	r2, r3
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 80cd 	beq.w	8008020 <HAL_DMA_IRQHandler+0xb48>
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 80c7 	beq.w	8008020 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e96:	f003 031f 	and.w	r3, r3, #31
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	409a      	lsls	r2, r3
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d049      	beq.n	8007f40 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d109      	bne.n	8007eca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 8210 	beq.w	80082e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ec8:	e20a      	b.n	80082e0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 8206 	beq.w	80082e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007edc:	e200      	b.n	80082e0 <HAL_DMA_IRQHandler+0xe08>
 8007ede:	bf00      	nop
 8007ee0:	40020010 	.word	0x40020010
 8007ee4:	40020028 	.word	0x40020028
 8007ee8:	40020040 	.word	0x40020040
 8007eec:	40020058 	.word	0x40020058
 8007ef0:	40020070 	.word	0x40020070
 8007ef4:	40020088 	.word	0x40020088
 8007ef8:	400200a0 	.word	0x400200a0
 8007efc:	400200b8 	.word	0x400200b8
 8007f00:	40020410 	.word	0x40020410
 8007f04:	40020428 	.word	0x40020428
 8007f08:	40020440 	.word	0x40020440
 8007f0c:	40020458 	.word	0x40020458
 8007f10:	40020470 	.word	0x40020470
 8007f14:	40020488 	.word	0x40020488
 8007f18:	400204a0 	.word	0x400204a0
 8007f1c:	400204b8 	.word	0x400204b8
 8007f20:	58025408 	.word	0x58025408
 8007f24:	5802541c 	.word	0x5802541c
 8007f28:	58025430 	.word	0x58025430
 8007f2c:	58025444 	.word	0x58025444
 8007f30:	58025458 	.word	0x58025458
 8007f34:	5802546c 	.word	0x5802546c
 8007f38:	58025480 	.word	0x58025480
 8007f3c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	f003 0320 	and.w	r3, r3, #32
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d160      	bne.n	800800c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a7f      	ldr	r2, [pc, #508]	@ (800814c <HAL_DMA_IRQHandler+0xc74>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d04a      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a7d      	ldr	r2, [pc, #500]	@ (8008150 <HAL_DMA_IRQHandler+0xc78>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d045      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a7c      	ldr	r2, [pc, #496]	@ (8008154 <HAL_DMA_IRQHandler+0xc7c>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d040      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a7a      	ldr	r2, [pc, #488]	@ (8008158 <HAL_DMA_IRQHandler+0xc80>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d03b      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a79      	ldr	r2, [pc, #484]	@ (800815c <HAL_DMA_IRQHandler+0xc84>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d036      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a77      	ldr	r2, [pc, #476]	@ (8008160 <HAL_DMA_IRQHandler+0xc88>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d031      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a76      	ldr	r2, [pc, #472]	@ (8008164 <HAL_DMA_IRQHandler+0xc8c>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d02c      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a74      	ldr	r2, [pc, #464]	@ (8008168 <HAL_DMA_IRQHandler+0xc90>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d027      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a73      	ldr	r2, [pc, #460]	@ (800816c <HAL_DMA_IRQHandler+0xc94>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d022      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a71      	ldr	r2, [pc, #452]	@ (8008170 <HAL_DMA_IRQHandler+0xc98>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d01d      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a70      	ldr	r2, [pc, #448]	@ (8008174 <HAL_DMA_IRQHandler+0xc9c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d018      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a6e      	ldr	r2, [pc, #440]	@ (8008178 <HAL_DMA_IRQHandler+0xca0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d013      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a6d      	ldr	r2, [pc, #436]	@ (800817c <HAL_DMA_IRQHandler+0xca4>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00e      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a6b      	ldr	r2, [pc, #428]	@ (8008180 <HAL_DMA_IRQHandler+0xca8>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d009      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a6a      	ldr	r2, [pc, #424]	@ (8008184 <HAL_DMA_IRQHandler+0xcac>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d004      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb12>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a68      	ldr	r2, [pc, #416]	@ (8008188 <HAL_DMA_IRQHandler+0xcb0>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d108      	bne.n	8007ffc <HAL_DMA_IRQHandler+0xb24>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0208 	bic.w	r2, r2, #8
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	e007      	b.n	800800c <HAL_DMA_IRQHandler+0xb34>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0204 	bic.w	r2, r2, #4
 800800a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 8165 	beq.w	80082e0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800801e:	e15f      	b.n	80082e0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008024:	f003 031f 	and.w	r3, r3, #31
 8008028:	2202      	movs	r2, #2
 800802a:	409a      	lsls	r2, r3
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	4013      	ands	r3, r2
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 80c5 	beq.w	80081c0 <HAL_DMA_IRQHandler+0xce8>
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 80bf 	beq.w	80081c0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008046:	f003 031f 	and.w	r3, r3, #31
 800804a:	2202      	movs	r2, #2
 800804c:	409a      	lsls	r2, r3
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d018      	beq.n	800808e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d109      	bne.n	800807a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 813a 	beq.w	80082e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008078:	e134      	b.n	80082e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 8130 	beq.w	80082e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800808c:	e12a      	b.n	80082e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	f040 8089 	bne.w	80081ac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a2b      	ldr	r2, [pc, #172]	@ (800814c <HAL_DMA_IRQHandler+0xc74>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d04a      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a29      	ldr	r2, [pc, #164]	@ (8008150 <HAL_DMA_IRQHandler+0xc78>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d045      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a28      	ldr	r2, [pc, #160]	@ (8008154 <HAL_DMA_IRQHandler+0xc7c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d040      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a26      	ldr	r2, [pc, #152]	@ (8008158 <HAL_DMA_IRQHandler+0xc80>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d03b      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a25      	ldr	r2, [pc, #148]	@ (800815c <HAL_DMA_IRQHandler+0xc84>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d036      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a23      	ldr	r2, [pc, #140]	@ (8008160 <HAL_DMA_IRQHandler+0xc88>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d031      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a22      	ldr	r2, [pc, #136]	@ (8008164 <HAL_DMA_IRQHandler+0xc8c>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d02c      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a20      	ldr	r2, [pc, #128]	@ (8008168 <HAL_DMA_IRQHandler+0xc90>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d027      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1f      	ldr	r2, [pc, #124]	@ (800816c <HAL_DMA_IRQHandler+0xc94>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d022      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008170 <HAL_DMA_IRQHandler+0xc98>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d01d      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a1c      	ldr	r2, [pc, #112]	@ (8008174 <HAL_DMA_IRQHandler+0xc9c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d018      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a1a      	ldr	r2, [pc, #104]	@ (8008178 <HAL_DMA_IRQHandler+0xca0>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d013      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a19      	ldr	r2, [pc, #100]	@ (800817c <HAL_DMA_IRQHandler+0xca4>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d00e      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a17      	ldr	r2, [pc, #92]	@ (8008180 <HAL_DMA_IRQHandler+0xca8>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d009      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a16      	ldr	r2, [pc, #88]	@ (8008184 <HAL_DMA_IRQHandler+0xcac>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d004      	beq.n	800813a <HAL_DMA_IRQHandler+0xc62>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a14      	ldr	r2, [pc, #80]	@ (8008188 <HAL_DMA_IRQHandler+0xcb0>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d128      	bne.n	800818c <HAL_DMA_IRQHandler+0xcb4>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 0214 	bic.w	r2, r2, #20
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	e027      	b.n	800819c <HAL_DMA_IRQHandler+0xcc4>
 800814c:	40020010 	.word	0x40020010
 8008150:	40020028 	.word	0x40020028
 8008154:	40020040 	.word	0x40020040
 8008158:	40020058 	.word	0x40020058
 800815c:	40020070 	.word	0x40020070
 8008160:	40020088 	.word	0x40020088
 8008164:	400200a0 	.word	0x400200a0
 8008168:	400200b8 	.word	0x400200b8
 800816c:	40020410 	.word	0x40020410
 8008170:	40020428 	.word	0x40020428
 8008174:	40020440 	.word	0x40020440
 8008178:	40020458 	.word	0x40020458
 800817c:	40020470 	.word	0x40020470
 8008180:	40020488 	.word	0x40020488
 8008184:	400204a0 	.word	0x400204a0
 8008188:	400204b8 	.word	0x400204b8
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 020a 	bic.w	r2, r2, #10
 800819a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 8097 	beq.w	80082e4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081be:	e091      	b.n	80082e4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081c4:	f003 031f 	and.w	r3, r3, #31
 80081c8:	2208      	movs	r2, #8
 80081ca:	409a      	lsls	r2, r3
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	4013      	ands	r3, r2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 8088 	beq.w	80082e6 <HAL_DMA_IRQHandler+0xe0e>
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f003 0308 	and.w	r3, r3, #8
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 8082 	beq.w	80082e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a41      	ldr	r2, [pc, #260]	@ (80082ec <HAL_DMA_IRQHandler+0xe14>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d04a      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a3f      	ldr	r2, [pc, #252]	@ (80082f0 <HAL_DMA_IRQHandler+0xe18>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d045      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a3e      	ldr	r2, [pc, #248]	@ (80082f4 <HAL_DMA_IRQHandler+0xe1c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d040      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a3c      	ldr	r2, [pc, #240]	@ (80082f8 <HAL_DMA_IRQHandler+0xe20>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d03b      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a3b      	ldr	r2, [pc, #236]	@ (80082fc <HAL_DMA_IRQHandler+0xe24>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d036      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a39      	ldr	r2, [pc, #228]	@ (8008300 <HAL_DMA_IRQHandler+0xe28>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d031      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a38      	ldr	r2, [pc, #224]	@ (8008304 <HAL_DMA_IRQHandler+0xe2c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d02c      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a36      	ldr	r2, [pc, #216]	@ (8008308 <HAL_DMA_IRQHandler+0xe30>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d027      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a35      	ldr	r2, [pc, #212]	@ (800830c <HAL_DMA_IRQHandler+0xe34>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d022      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a33      	ldr	r2, [pc, #204]	@ (8008310 <HAL_DMA_IRQHandler+0xe38>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d01d      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a32      	ldr	r2, [pc, #200]	@ (8008314 <HAL_DMA_IRQHandler+0xe3c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d018      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a30      	ldr	r2, [pc, #192]	@ (8008318 <HAL_DMA_IRQHandler+0xe40>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d013      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a2f      	ldr	r2, [pc, #188]	@ (800831c <HAL_DMA_IRQHandler+0xe44>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d00e      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a2d      	ldr	r2, [pc, #180]	@ (8008320 <HAL_DMA_IRQHandler+0xe48>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d009      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a2c      	ldr	r2, [pc, #176]	@ (8008324 <HAL_DMA_IRQHandler+0xe4c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d004      	beq.n	8008282 <HAL_DMA_IRQHandler+0xdaa>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a2a      	ldr	r2, [pc, #168]	@ (8008328 <HAL_DMA_IRQHandler+0xe50>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d108      	bne.n	8008294 <HAL_DMA_IRQHandler+0xdbc>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 021c 	bic.w	r2, r2, #28
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	e007      	b.n	80082a4 <HAL_DMA_IRQHandler+0xdcc>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 020e 	bic.w	r2, r2, #14
 80082a2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082a8:	f003 031f 	and.w	r3, r3, #31
 80082ac:	2201      	movs	r2, #1
 80082ae:	409a      	lsls	r2, r3
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d009      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	4798      	blx	r3
 80082da:	e004      	b.n	80082e6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80082dc:	bf00      	nop
 80082de:	e002      	b.n	80082e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082e0:	bf00      	nop
 80082e2:	e000      	b.n	80082e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082e4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80082e6:	3728      	adds	r7, #40	@ 0x28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	40020010 	.word	0x40020010
 80082f0:	40020028 	.word	0x40020028
 80082f4:	40020040 	.word	0x40020040
 80082f8:	40020058 	.word	0x40020058
 80082fc:	40020070 	.word	0x40020070
 8008300:	40020088 	.word	0x40020088
 8008304:	400200a0 	.word	0x400200a0
 8008308:	400200b8 	.word	0x400200b8
 800830c:	40020410 	.word	0x40020410
 8008310:	40020428 	.word	0x40020428
 8008314:	40020440 	.word	0x40020440
 8008318:	40020458 	.word	0x40020458
 800831c:	40020470 	.word	0x40020470
 8008320:	40020488 	.word	0x40020488
 8008324:	400204a0 	.word	0x400204a0
 8008328:	400204b8 	.word	0x400204b8

0800832c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800833e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008344:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a7f      	ldr	r2, [pc, #508]	@ (8008548 <DMA_SetConfig+0x21c>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d072      	beq.n	8008436 <DMA_SetConfig+0x10a>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a7d      	ldr	r2, [pc, #500]	@ (800854c <DMA_SetConfig+0x220>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d06d      	beq.n	8008436 <DMA_SetConfig+0x10a>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a7c      	ldr	r2, [pc, #496]	@ (8008550 <DMA_SetConfig+0x224>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d068      	beq.n	8008436 <DMA_SetConfig+0x10a>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a7a      	ldr	r2, [pc, #488]	@ (8008554 <DMA_SetConfig+0x228>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d063      	beq.n	8008436 <DMA_SetConfig+0x10a>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a79      	ldr	r2, [pc, #484]	@ (8008558 <DMA_SetConfig+0x22c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d05e      	beq.n	8008436 <DMA_SetConfig+0x10a>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a77      	ldr	r2, [pc, #476]	@ (800855c <DMA_SetConfig+0x230>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d059      	beq.n	8008436 <DMA_SetConfig+0x10a>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a76      	ldr	r2, [pc, #472]	@ (8008560 <DMA_SetConfig+0x234>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d054      	beq.n	8008436 <DMA_SetConfig+0x10a>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a74      	ldr	r2, [pc, #464]	@ (8008564 <DMA_SetConfig+0x238>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d04f      	beq.n	8008436 <DMA_SetConfig+0x10a>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a73      	ldr	r2, [pc, #460]	@ (8008568 <DMA_SetConfig+0x23c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d04a      	beq.n	8008436 <DMA_SetConfig+0x10a>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a71      	ldr	r2, [pc, #452]	@ (800856c <DMA_SetConfig+0x240>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d045      	beq.n	8008436 <DMA_SetConfig+0x10a>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a70      	ldr	r2, [pc, #448]	@ (8008570 <DMA_SetConfig+0x244>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d040      	beq.n	8008436 <DMA_SetConfig+0x10a>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a6e      	ldr	r2, [pc, #440]	@ (8008574 <DMA_SetConfig+0x248>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d03b      	beq.n	8008436 <DMA_SetConfig+0x10a>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a6d      	ldr	r2, [pc, #436]	@ (8008578 <DMA_SetConfig+0x24c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d036      	beq.n	8008436 <DMA_SetConfig+0x10a>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a6b      	ldr	r2, [pc, #428]	@ (800857c <DMA_SetConfig+0x250>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d031      	beq.n	8008436 <DMA_SetConfig+0x10a>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a6a      	ldr	r2, [pc, #424]	@ (8008580 <DMA_SetConfig+0x254>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d02c      	beq.n	8008436 <DMA_SetConfig+0x10a>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a68      	ldr	r2, [pc, #416]	@ (8008584 <DMA_SetConfig+0x258>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d027      	beq.n	8008436 <DMA_SetConfig+0x10a>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a67      	ldr	r2, [pc, #412]	@ (8008588 <DMA_SetConfig+0x25c>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d022      	beq.n	8008436 <DMA_SetConfig+0x10a>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a65      	ldr	r2, [pc, #404]	@ (800858c <DMA_SetConfig+0x260>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d01d      	beq.n	8008436 <DMA_SetConfig+0x10a>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a64      	ldr	r2, [pc, #400]	@ (8008590 <DMA_SetConfig+0x264>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d018      	beq.n	8008436 <DMA_SetConfig+0x10a>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a62      	ldr	r2, [pc, #392]	@ (8008594 <DMA_SetConfig+0x268>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d013      	beq.n	8008436 <DMA_SetConfig+0x10a>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a61      	ldr	r2, [pc, #388]	@ (8008598 <DMA_SetConfig+0x26c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d00e      	beq.n	8008436 <DMA_SetConfig+0x10a>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a5f      	ldr	r2, [pc, #380]	@ (800859c <DMA_SetConfig+0x270>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d009      	beq.n	8008436 <DMA_SetConfig+0x10a>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a5e      	ldr	r2, [pc, #376]	@ (80085a0 <DMA_SetConfig+0x274>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d004      	beq.n	8008436 <DMA_SetConfig+0x10a>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a5c      	ldr	r2, [pc, #368]	@ (80085a4 <DMA_SetConfig+0x278>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d101      	bne.n	800843a <DMA_SetConfig+0x10e>
 8008436:	2301      	movs	r3, #1
 8008438:	e000      	b.n	800843c <DMA_SetConfig+0x110>
 800843a:	2300      	movs	r3, #0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00d      	beq.n	800845c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008448:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800844e:	2b00      	cmp	r3, #0
 8008450:	d004      	beq.n	800845c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800845a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a39      	ldr	r2, [pc, #228]	@ (8008548 <DMA_SetConfig+0x21c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d04a      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a38      	ldr	r2, [pc, #224]	@ (800854c <DMA_SetConfig+0x220>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d045      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a36      	ldr	r2, [pc, #216]	@ (8008550 <DMA_SetConfig+0x224>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d040      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a35      	ldr	r2, [pc, #212]	@ (8008554 <DMA_SetConfig+0x228>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d03b      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a33      	ldr	r2, [pc, #204]	@ (8008558 <DMA_SetConfig+0x22c>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d036      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a32      	ldr	r2, [pc, #200]	@ (800855c <DMA_SetConfig+0x230>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d031      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a30      	ldr	r2, [pc, #192]	@ (8008560 <DMA_SetConfig+0x234>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d02c      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a2f      	ldr	r2, [pc, #188]	@ (8008564 <DMA_SetConfig+0x238>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d027      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008568 <DMA_SetConfig+0x23c>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d022      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a2c      	ldr	r2, [pc, #176]	@ (800856c <DMA_SetConfig+0x240>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d01d      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a2a      	ldr	r2, [pc, #168]	@ (8008570 <DMA_SetConfig+0x244>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d018      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a29      	ldr	r2, [pc, #164]	@ (8008574 <DMA_SetConfig+0x248>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d013      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a27      	ldr	r2, [pc, #156]	@ (8008578 <DMA_SetConfig+0x24c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00e      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a26      	ldr	r2, [pc, #152]	@ (800857c <DMA_SetConfig+0x250>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d009      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a24      	ldr	r2, [pc, #144]	@ (8008580 <DMA_SetConfig+0x254>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d004      	beq.n	80084fc <DMA_SetConfig+0x1d0>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a23      	ldr	r2, [pc, #140]	@ (8008584 <DMA_SetConfig+0x258>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d101      	bne.n	8008500 <DMA_SetConfig+0x1d4>
 80084fc:	2301      	movs	r3, #1
 80084fe:	e000      	b.n	8008502 <DMA_SetConfig+0x1d6>
 8008500:	2300      	movs	r3, #0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d059      	beq.n	80085ba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800850a:	f003 031f 	and.w	r3, r3, #31
 800850e:	223f      	movs	r2, #63	@ 0x3f
 8008510:	409a      	lsls	r2, r3
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008524:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	2b40      	cmp	r3, #64	@ 0x40
 8008534:	d138      	bne.n	80085a8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008546:	e086      	b.n	8008656 <DMA_SetConfig+0x32a>
 8008548:	40020010 	.word	0x40020010
 800854c:	40020028 	.word	0x40020028
 8008550:	40020040 	.word	0x40020040
 8008554:	40020058 	.word	0x40020058
 8008558:	40020070 	.word	0x40020070
 800855c:	40020088 	.word	0x40020088
 8008560:	400200a0 	.word	0x400200a0
 8008564:	400200b8 	.word	0x400200b8
 8008568:	40020410 	.word	0x40020410
 800856c:	40020428 	.word	0x40020428
 8008570:	40020440 	.word	0x40020440
 8008574:	40020458 	.word	0x40020458
 8008578:	40020470 	.word	0x40020470
 800857c:	40020488 	.word	0x40020488
 8008580:	400204a0 	.word	0x400204a0
 8008584:	400204b8 	.word	0x400204b8
 8008588:	58025408 	.word	0x58025408
 800858c:	5802541c 	.word	0x5802541c
 8008590:	58025430 	.word	0x58025430
 8008594:	58025444 	.word	0x58025444
 8008598:	58025458 	.word	0x58025458
 800859c:	5802546c 	.word	0x5802546c
 80085a0:	58025480 	.word	0x58025480
 80085a4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	60da      	str	r2, [r3, #12]
}
 80085b8:	e04d      	b.n	8008656 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a29      	ldr	r2, [pc, #164]	@ (8008664 <DMA_SetConfig+0x338>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d022      	beq.n	800860a <DMA_SetConfig+0x2de>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a27      	ldr	r2, [pc, #156]	@ (8008668 <DMA_SetConfig+0x33c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d01d      	beq.n	800860a <DMA_SetConfig+0x2de>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a26      	ldr	r2, [pc, #152]	@ (800866c <DMA_SetConfig+0x340>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d018      	beq.n	800860a <DMA_SetConfig+0x2de>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a24      	ldr	r2, [pc, #144]	@ (8008670 <DMA_SetConfig+0x344>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d013      	beq.n	800860a <DMA_SetConfig+0x2de>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a23      	ldr	r2, [pc, #140]	@ (8008674 <DMA_SetConfig+0x348>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d00e      	beq.n	800860a <DMA_SetConfig+0x2de>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a21      	ldr	r2, [pc, #132]	@ (8008678 <DMA_SetConfig+0x34c>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d009      	beq.n	800860a <DMA_SetConfig+0x2de>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a20      	ldr	r2, [pc, #128]	@ (800867c <DMA_SetConfig+0x350>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d004      	beq.n	800860a <DMA_SetConfig+0x2de>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a1e      	ldr	r2, [pc, #120]	@ (8008680 <DMA_SetConfig+0x354>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d101      	bne.n	800860e <DMA_SetConfig+0x2e2>
 800860a:	2301      	movs	r3, #1
 800860c:	e000      	b.n	8008610 <DMA_SetConfig+0x2e4>
 800860e:	2300      	movs	r3, #0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d020      	beq.n	8008656 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008618:	f003 031f 	and.w	r3, r3, #31
 800861c:	2201      	movs	r2, #1
 800861e:	409a      	lsls	r2, r3
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	2b40      	cmp	r3, #64	@ 0x40
 8008632:	d108      	bne.n	8008646 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	60da      	str	r2, [r3, #12]
}
 8008644:	e007      	b.n	8008656 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	60da      	str	r2, [r3, #12]
}
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	58025408 	.word	0x58025408
 8008668:	5802541c 	.word	0x5802541c
 800866c:	58025430 	.word	0x58025430
 8008670:	58025444 	.word	0x58025444
 8008674:	58025458 	.word	0x58025458
 8008678:	5802546c 	.word	0x5802546c
 800867c:	58025480 	.word	0x58025480
 8008680:	58025494 	.word	0x58025494

08008684 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a42      	ldr	r2, [pc, #264]	@ (800879c <DMA_CalcBaseAndBitshift+0x118>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d04a      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a41      	ldr	r2, [pc, #260]	@ (80087a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d045      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a3f      	ldr	r2, [pc, #252]	@ (80087a4 <DMA_CalcBaseAndBitshift+0x120>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d040      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a3e      	ldr	r2, [pc, #248]	@ (80087a8 <DMA_CalcBaseAndBitshift+0x124>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d03b      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a3c      	ldr	r2, [pc, #240]	@ (80087ac <DMA_CalcBaseAndBitshift+0x128>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d036      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a3b      	ldr	r2, [pc, #236]	@ (80087b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d031      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a39      	ldr	r2, [pc, #228]	@ (80087b4 <DMA_CalcBaseAndBitshift+0x130>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d02c      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a38      	ldr	r2, [pc, #224]	@ (80087b8 <DMA_CalcBaseAndBitshift+0x134>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d027      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a36      	ldr	r2, [pc, #216]	@ (80087bc <DMA_CalcBaseAndBitshift+0x138>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d022      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a35      	ldr	r2, [pc, #212]	@ (80087c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d01d      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a33      	ldr	r2, [pc, #204]	@ (80087c4 <DMA_CalcBaseAndBitshift+0x140>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d018      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a32      	ldr	r2, [pc, #200]	@ (80087c8 <DMA_CalcBaseAndBitshift+0x144>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d013      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a30      	ldr	r2, [pc, #192]	@ (80087cc <DMA_CalcBaseAndBitshift+0x148>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d00e      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a2f      	ldr	r2, [pc, #188]	@ (80087d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d009      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a2d      	ldr	r2, [pc, #180]	@ (80087d4 <DMA_CalcBaseAndBitshift+0x150>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d004      	beq.n	800872c <DMA_CalcBaseAndBitshift+0xa8>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a2c      	ldr	r2, [pc, #176]	@ (80087d8 <DMA_CalcBaseAndBitshift+0x154>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d101      	bne.n	8008730 <DMA_CalcBaseAndBitshift+0xac>
 800872c:	2301      	movs	r3, #1
 800872e:	e000      	b.n	8008732 <DMA_CalcBaseAndBitshift+0xae>
 8008730:	2300      	movs	r3, #0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d024      	beq.n	8008780 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	b2db      	uxtb	r3, r3
 800873c:	3b10      	subs	r3, #16
 800873e:	4a27      	ldr	r2, [pc, #156]	@ (80087dc <DMA_CalcBaseAndBitshift+0x158>)
 8008740:	fba2 2303 	umull	r2, r3, r2, r3
 8008744:	091b      	lsrs	r3, r3, #4
 8008746:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f003 0307 	and.w	r3, r3, #7
 800874e:	4a24      	ldr	r2, [pc, #144]	@ (80087e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008750:	5cd3      	ldrb	r3, [r2, r3]
 8008752:	461a      	mov	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b03      	cmp	r3, #3
 800875c:	d908      	bls.n	8008770 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	4b1f      	ldr	r3, [pc, #124]	@ (80087e4 <DMA_CalcBaseAndBitshift+0x160>)
 8008766:	4013      	ands	r3, r2
 8008768:	1d1a      	adds	r2, r3, #4
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	659a      	str	r2, [r3, #88]	@ 0x58
 800876e:	e00d      	b.n	800878c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	4b1b      	ldr	r3, [pc, #108]	@ (80087e4 <DMA_CalcBaseAndBitshift+0x160>)
 8008778:	4013      	ands	r3, r2
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	6593      	str	r3, [r2, #88]	@ 0x58
 800877e:	e005      	b.n	800878c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008790:	4618      	mov	r0, r3
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	40020010 	.word	0x40020010
 80087a0:	40020028 	.word	0x40020028
 80087a4:	40020040 	.word	0x40020040
 80087a8:	40020058 	.word	0x40020058
 80087ac:	40020070 	.word	0x40020070
 80087b0:	40020088 	.word	0x40020088
 80087b4:	400200a0 	.word	0x400200a0
 80087b8:	400200b8 	.word	0x400200b8
 80087bc:	40020410 	.word	0x40020410
 80087c0:	40020428 	.word	0x40020428
 80087c4:	40020440 	.word	0x40020440
 80087c8:	40020458 	.word	0x40020458
 80087cc:	40020470 	.word	0x40020470
 80087d0:	40020488 	.word	0x40020488
 80087d4:	400204a0 	.word	0x400204a0
 80087d8:	400204b8 	.word	0x400204b8
 80087dc:	aaaaaaab 	.word	0xaaaaaaab
 80087e0:	08019bc4 	.word	0x08019bc4
 80087e4:	fffffc00 	.word	0xfffffc00

080087e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d120      	bne.n	800883e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008800:	2b03      	cmp	r3, #3
 8008802:	d858      	bhi.n	80088b6 <DMA_CheckFifoParam+0xce>
 8008804:	a201      	add	r2, pc, #4	@ (adr r2, 800880c <DMA_CheckFifoParam+0x24>)
 8008806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880a:	bf00      	nop
 800880c:	0800881d 	.word	0x0800881d
 8008810:	0800882f 	.word	0x0800882f
 8008814:	0800881d 	.word	0x0800881d
 8008818:	080088b7 	.word	0x080088b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d048      	beq.n	80088ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800882c:	e045      	b.n	80088ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008832:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008836:	d142      	bne.n	80088be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800883c:	e03f      	b.n	80088be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008846:	d123      	bne.n	8008890 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884c:	2b03      	cmp	r3, #3
 800884e:	d838      	bhi.n	80088c2 <DMA_CheckFifoParam+0xda>
 8008850:	a201      	add	r2, pc, #4	@ (adr r2, 8008858 <DMA_CheckFifoParam+0x70>)
 8008852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008856:	bf00      	nop
 8008858:	08008869 	.word	0x08008869
 800885c:	0800886f 	.word	0x0800886f
 8008860:	08008869 	.word	0x08008869
 8008864:	08008881 	.word	0x08008881
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	73fb      	strb	r3, [r7, #15]
        break;
 800886c:	e030      	b.n	80088d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008872:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d025      	beq.n	80088c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800887e:	e022      	b.n	80088c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008884:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008888:	d11f      	bne.n	80088ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800888e:	e01c      	b.n	80088ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008894:	2b02      	cmp	r3, #2
 8008896:	d902      	bls.n	800889e <DMA_CheckFifoParam+0xb6>
 8008898:	2b03      	cmp	r3, #3
 800889a:	d003      	beq.n	80088a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800889c:	e018      	b.n	80088d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	73fb      	strb	r3, [r7, #15]
        break;
 80088a2:	e015      	b.n	80088d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00e      	beq.n	80088ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]
    break;
 80088b4:	e00b      	b.n	80088ce <DMA_CheckFifoParam+0xe6>
        break;
 80088b6:	bf00      	nop
 80088b8:	e00a      	b.n	80088d0 <DMA_CheckFifoParam+0xe8>
        break;
 80088ba:	bf00      	nop
 80088bc:	e008      	b.n	80088d0 <DMA_CheckFifoParam+0xe8>
        break;
 80088be:	bf00      	nop
 80088c0:	e006      	b.n	80088d0 <DMA_CheckFifoParam+0xe8>
        break;
 80088c2:	bf00      	nop
 80088c4:	e004      	b.n	80088d0 <DMA_CheckFifoParam+0xe8>
        break;
 80088c6:	bf00      	nop
 80088c8:	e002      	b.n	80088d0 <DMA_CheckFifoParam+0xe8>
        break;
 80088ca:	bf00      	nop
 80088cc:	e000      	b.n	80088d0 <DMA_CheckFifoParam+0xe8>
    break;
 80088ce:	bf00      	nop
    }
  }

  return status;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop

080088e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a38      	ldr	r2, [pc, #224]	@ (80089d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d022      	beq.n	800893e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a36      	ldr	r2, [pc, #216]	@ (80089d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d01d      	beq.n	800893e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a35      	ldr	r2, [pc, #212]	@ (80089dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d018      	beq.n	800893e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a33      	ldr	r2, [pc, #204]	@ (80089e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d013      	beq.n	800893e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a32      	ldr	r2, [pc, #200]	@ (80089e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d00e      	beq.n	800893e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a30      	ldr	r2, [pc, #192]	@ (80089e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d009      	beq.n	800893e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a2f      	ldr	r2, [pc, #188]	@ (80089ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d004      	beq.n	800893e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a2d      	ldr	r2, [pc, #180]	@ (80089f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d101      	bne.n	8008942 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800893e:	2301      	movs	r3, #1
 8008940:	e000      	b.n	8008944 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008942:	2300      	movs	r3, #0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01a      	beq.n	800897e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	3b08      	subs	r3, #8
 8008950:	4a28      	ldr	r2, [pc, #160]	@ (80089f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008952:	fba2 2303 	umull	r2, r3, r2, r3
 8008956:	091b      	lsrs	r3, r3, #4
 8008958:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4b26      	ldr	r3, [pc, #152]	@ (80089f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800895e:	4413      	add	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	461a      	mov	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a24      	ldr	r2, [pc, #144]	@ (80089fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800896c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f003 031f 	and.w	r3, r3, #31
 8008974:	2201      	movs	r2, #1
 8008976:	409a      	lsls	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800897c:	e024      	b.n	80089c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	b2db      	uxtb	r3, r3
 8008984:	3b10      	subs	r3, #16
 8008986:	4a1e      	ldr	r2, [pc, #120]	@ (8008a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008988:	fba2 2303 	umull	r2, r3, r2, r3
 800898c:	091b      	lsrs	r3, r3, #4
 800898e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	4a1c      	ldr	r2, [pc, #112]	@ (8008a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d806      	bhi.n	80089a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4a1b      	ldr	r2, [pc, #108]	@ (8008a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d902      	bls.n	80089a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3308      	adds	r3, #8
 80089a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4b18      	ldr	r3, [pc, #96]	@ (8008a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	461a      	mov	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a16      	ldr	r2, [pc, #88]	@ (8008a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80089b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f003 031f 	and.w	r3, r3, #31
 80089c0:	2201      	movs	r2, #1
 80089c2:	409a      	lsls	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80089c8:	bf00      	nop
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	58025408 	.word	0x58025408
 80089d8:	5802541c 	.word	0x5802541c
 80089dc:	58025430 	.word	0x58025430
 80089e0:	58025444 	.word	0x58025444
 80089e4:	58025458 	.word	0x58025458
 80089e8:	5802546c 	.word	0x5802546c
 80089ec:	58025480 	.word	0x58025480
 80089f0:	58025494 	.word	0x58025494
 80089f4:	cccccccd 	.word	0xcccccccd
 80089f8:	16009600 	.word	0x16009600
 80089fc:	58025880 	.word	0x58025880
 8008a00:	aaaaaaab 	.word	0xaaaaaaab
 8008a04:	400204b8 	.word	0x400204b8
 8008a08:	4002040f 	.word	0x4002040f
 8008a0c:	10008200 	.word	0x10008200
 8008a10:	40020880 	.word	0x40020880

08008a14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d04a      	beq.n	8008ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b08      	cmp	r3, #8
 8008a2e:	d847      	bhi.n	8008ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a25      	ldr	r2, [pc, #148]	@ (8008acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d022      	beq.n	8008a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a24      	ldr	r2, [pc, #144]	@ (8008ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d01d      	beq.n	8008a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a22      	ldr	r2, [pc, #136]	@ (8008ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d018      	beq.n	8008a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a21      	ldr	r2, [pc, #132]	@ (8008ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d013      	beq.n	8008a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8008adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d00e      	beq.n	8008a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a1e      	ldr	r2, [pc, #120]	@ (8008ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d009      	beq.n	8008a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a1c      	ldr	r2, [pc, #112]	@ (8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d004      	beq.n	8008a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d101      	bne.n	8008a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008a80:	2301      	movs	r3, #1
 8008a82:	e000      	b.n	8008a86 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008a84:	2300      	movs	r3, #0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	4b17      	ldr	r3, [pc, #92]	@ (8008aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	461a      	mov	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a15      	ldr	r2, [pc, #84]	@ (8008af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008a9c:	671a      	str	r2, [r3, #112]	@ 0x70
 8008a9e:	e009      	b.n	8008ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	4b14      	ldr	r3, [pc, #80]	@ (8008af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008aa4:	4413      	add	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a11      	ldr	r2, [pc, #68]	@ (8008af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008ab2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	2201      	movs	r2, #1
 8008aba:	409a      	lsls	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008ac0:	bf00      	nop
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	58025408 	.word	0x58025408
 8008ad0:	5802541c 	.word	0x5802541c
 8008ad4:	58025430 	.word	0x58025430
 8008ad8:	58025444 	.word	0x58025444
 8008adc:	58025458 	.word	0x58025458
 8008ae0:	5802546c 	.word	0x5802546c
 8008ae4:	58025480 	.word	0x58025480
 8008ae8:	58025494 	.word	0x58025494
 8008aec:	1600963f 	.word	0x1600963f
 8008af0:	58025940 	.word	0x58025940
 8008af4:	1000823f 	.word	0x1000823f
 8008af8:	40020940 	.word	0x40020940

08008afc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b089      	sub	sp, #36	@ 0x24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008b0a:	4b86      	ldr	r3, [pc, #536]	@ (8008d24 <HAL_GPIO_Init+0x228>)
 8008b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b0e:	e18c      	b.n	8008e2a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	2101      	movs	r1, #1
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	fa01 f303 	lsl.w	r3, r1, r3
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 817e 	beq.w	8008e24 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	f003 0303 	and.w	r3, r3, #3
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d005      	beq.n	8008b40 <HAL_GPIO_Init+0x44>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f003 0303 	and.w	r3, r3, #3
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d130      	bne.n	8008ba2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	2203      	movs	r2, #3
 8008b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b50:	43db      	mvns	r3, r3
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	4013      	ands	r3, r2
 8008b56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	68da      	ldr	r2, [r3, #12]
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	005b      	lsls	r3, r3, #1
 8008b60:	fa02 f303 	lsl.w	r3, r2, r3
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b76:	2201      	movs	r2, #1
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7e:	43db      	mvns	r3, r3
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	4013      	ands	r3, r2
 8008b84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	091b      	lsrs	r3, r3, #4
 8008b8c:	f003 0201 	and.w	r2, r3, #1
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	fa02 f303 	lsl.w	r3, r2, r3
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d017      	beq.n	8008bde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	2203      	movs	r2, #3
 8008bba:	fa02 f303 	lsl.w	r3, r2, r3
 8008bbe:	43db      	mvns	r3, r3
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	689a      	ldr	r2, [r3, #8]
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd2:	69ba      	ldr	r2, [r7, #24]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f003 0303 	and.w	r3, r3, #3
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d123      	bne.n	8008c32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	08da      	lsrs	r2, r3, #3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3208      	adds	r2, #8
 8008bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	f003 0307 	and.w	r3, r3, #7
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	220f      	movs	r2, #15
 8008c02:	fa02 f303 	lsl.w	r3, r2, r3
 8008c06:	43db      	mvns	r3, r3
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	691a      	ldr	r2, [r3, #16]
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	f003 0307 	and.w	r3, r3, #7
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	08da      	lsrs	r2, r3, #3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	3208      	adds	r2, #8
 8008c2c:	69b9      	ldr	r1, [r7, #24]
 8008c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	005b      	lsls	r3, r3, #1
 8008c3c:	2203      	movs	r2, #3
 8008c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c42:	43db      	mvns	r3, r3
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	4013      	ands	r3, r2
 8008c48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f003 0203 	and.w	r2, r3, #3
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 80d8 	beq.w	8008e24 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c74:	4b2c      	ldr	r3, [pc, #176]	@ (8008d28 <HAL_GPIO_Init+0x22c>)
 8008c76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8008d28 <HAL_GPIO_Init+0x22c>)
 8008c7c:	f043 0302 	orr.w	r3, r3, #2
 8008c80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008c84:	4b28      	ldr	r3, [pc, #160]	@ (8008d28 <HAL_GPIO_Init+0x22c>)
 8008c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c8a:	f003 0302 	and.w	r3, r3, #2
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c92:	4a26      	ldr	r2, [pc, #152]	@ (8008d2c <HAL_GPIO_Init+0x230>)
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	089b      	lsrs	r3, r3, #2
 8008c98:	3302      	adds	r3, #2
 8008c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	f003 0303 	and.w	r3, r3, #3
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	220f      	movs	r2, #15
 8008caa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d30 <HAL_GPIO_Init+0x234>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d04a      	beq.n	8008d54 <HAL_GPIO_Init+0x258>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8008d34 <HAL_GPIO_Init+0x238>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d02b      	beq.n	8008d1e <HAL_GPIO_Init+0x222>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8008d38 <HAL_GPIO_Init+0x23c>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d025      	beq.n	8008d1a <HAL_GPIO_Init+0x21e>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8008d3c <HAL_GPIO_Init+0x240>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d01f      	beq.n	8008d16 <HAL_GPIO_Init+0x21a>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a19      	ldr	r2, [pc, #100]	@ (8008d40 <HAL_GPIO_Init+0x244>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d019      	beq.n	8008d12 <HAL_GPIO_Init+0x216>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a18      	ldr	r2, [pc, #96]	@ (8008d44 <HAL_GPIO_Init+0x248>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d013      	beq.n	8008d0e <HAL_GPIO_Init+0x212>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a17      	ldr	r2, [pc, #92]	@ (8008d48 <HAL_GPIO_Init+0x24c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d00d      	beq.n	8008d0a <HAL_GPIO_Init+0x20e>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a16      	ldr	r2, [pc, #88]	@ (8008d4c <HAL_GPIO_Init+0x250>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d007      	beq.n	8008d06 <HAL_GPIO_Init+0x20a>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a15      	ldr	r2, [pc, #84]	@ (8008d50 <HAL_GPIO_Init+0x254>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d101      	bne.n	8008d02 <HAL_GPIO_Init+0x206>
 8008cfe:	2309      	movs	r3, #9
 8008d00:	e029      	b.n	8008d56 <HAL_GPIO_Init+0x25a>
 8008d02:	230a      	movs	r3, #10
 8008d04:	e027      	b.n	8008d56 <HAL_GPIO_Init+0x25a>
 8008d06:	2307      	movs	r3, #7
 8008d08:	e025      	b.n	8008d56 <HAL_GPIO_Init+0x25a>
 8008d0a:	2306      	movs	r3, #6
 8008d0c:	e023      	b.n	8008d56 <HAL_GPIO_Init+0x25a>
 8008d0e:	2305      	movs	r3, #5
 8008d10:	e021      	b.n	8008d56 <HAL_GPIO_Init+0x25a>
 8008d12:	2304      	movs	r3, #4
 8008d14:	e01f      	b.n	8008d56 <HAL_GPIO_Init+0x25a>
 8008d16:	2303      	movs	r3, #3
 8008d18:	e01d      	b.n	8008d56 <HAL_GPIO_Init+0x25a>
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	e01b      	b.n	8008d56 <HAL_GPIO_Init+0x25a>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e019      	b.n	8008d56 <HAL_GPIO_Init+0x25a>
 8008d22:	bf00      	nop
 8008d24:	58000080 	.word	0x58000080
 8008d28:	58024400 	.word	0x58024400
 8008d2c:	58000400 	.word	0x58000400
 8008d30:	58020000 	.word	0x58020000
 8008d34:	58020400 	.word	0x58020400
 8008d38:	58020800 	.word	0x58020800
 8008d3c:	58020c00 	.word	0x58020c00
 8008d40:	58021000 	.word	0x58021000
 8008d44:	58021400 	.word	0x58021400
 8008d48:	58021800 	.word	0x58021800
 8008d4c:	58021c00 	.word	0x58021c00
 8008d50:	58022400 	.word	0x58022400
 8008d54:	2300      	movs	r3, #0
 8008d56:	69fa      	ldr	r2, [r7, #28]
 8008d58:	f002 0203 	and.w	r2, r2, #3
 8008d5c:	0092      	lsls	r2, r2, #2
 8008d5e:	4093      	lsls	r3, r2
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d66:	4938      	ldr	r1, [pc, #224]	@ (8008e48 <HAL_GPIO_Init+0x34c>)
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	089b      	lsrs	r3, r3, #2
 8008d6c:	3302      	adds	r3, #2
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	43db      	mvns	r3, r3
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	4013      	ands	r3, r2
 8008d84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008d9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	43db      	mvns	r3, r3
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	4013      	ands	r3, r2
 8008db2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008dc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	43db      	mvns	r3, r3
 8008dda:	69ba      	ldr	r2, [r7, #24]
 8008ddc:	4013      	ands	r3, r2
 8008dde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008dec:	69ba      	ldr	r2, [r7, #24]
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	43db      	mvns	r3, r3
 8008e04:	69ba      	ldr	r2, [r7, #24]
 8008e06:	4013      	ands	r3, r2
 8008e08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d003      	beq.n	8008e1e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008e16:	69ba      	ldr	r2, [r7, #24]
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	3301      	adds	r3, #1
 8008e28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	fa22 f303 	lsr.w	r3, r2, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f47f ae6b 	bne.w	8008b10 <HAL_GPIO_Init+0x14>
  }
}
 8008e3a:	bf00      	nop
 8008e3c:	bf00      	nop
 8008e3e:	3724      	adds	r7, #36	@ 0x24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	58000400 	.word	0x58000400

08008e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691a      	ldr	r2, [r3, #16]
 8008e5c:	887b      	ldrh	r3, [r7, #2]
 8008e5e:	4013      	ands	r3, r2
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e64:	2301      	movs	r3, #1
 8008e66:	73fb      	strb	r3, [r7, #15]
 8008e68:	e001      	b.n	8008e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	807b      	strh	r3, [r7, #2]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e8c:	787b      	ldrb	r3, [r7, #1]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e92:	887a      	ldrh	r2, [r7, #2]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008e98:	e003      	b.n	8008ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008e9a:	887b      	ldrh	r3, [r7, #2]
 8008e9c:	041a      	lsls	r2, r3, #16
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	619a      	str	r2, [r3, #24]
}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
	...

08008eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d101      	bne.n	8008ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e08b      	b.n	8008fda <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d106      	bne.n	8008edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7f8 feee 	bl	8001cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2224      	movs	r2, #36	@ 0x24
 8008ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0201 	bic.w	r2, r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008f00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689a      	ldr	r2, [r3, #8]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d107      	bne.n	8008f2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689a      	ldr	r2, [r3, #8]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f26:	609a      	str	r2, [r3, #8]
 8008f28:	e006      	b.n	8008f38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008f36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d108      	bne.n	8008f52 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f4e:	605a      	str	r2, [r3, #4]
 8008f50:	e007      	b.n	8008f62 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6859      	ldr	r1, [r3, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8008fe4 <HAL_I2C_Init+0x134>)
 8008f6e:	430b      	orrs	r3, r1
 8008f70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691a      	ldr	r2, [r3, #16]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	69d9      	ldr	r1, [r3, #28]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a1a      	ldr	r2, [r3, #32]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f042 0201 	orr.w	r2, r2, #1
 8008fba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	02008000 	.word	0x02008000

08008fe8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b20      	cmp	r3, #32
 8008ffc:	d138      	bne.n	8009070 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009004:	2b01      	cmp	r3, #1
 8009006:	d101      	bne.n	800900c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009008:	2302      	movs	r3, #2
 800900a:	e032      	b.n	8009072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2224      	movs	r2, #36	@ 0x24
 8009018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f022 0201 	bic.w	r2, r2, #1
 800902a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800903a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6819      	ldr	r1, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f042 0201 	orr.w	r2, r2, #1
 800905a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2220      	movs	r2, #32
 8009060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	e000      	b.n	8009072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009070:	2302      	movs	r3, #2
  }
}
 8009072:	4618      	mov	r0, r3
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800907e:	b480      	push	{r7}
 8009080:	b085      	sub	sp, #20
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b20      	cmp	r3, #32
 8009092:	d139      	bne.n	8009108 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800909a:	2b01      	cmp	r3, #1
 800909c:	d101      	bne.n	80090a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800909e:	2302      	movs	r3, #2
 80090a0:	e033      	b.n	800910a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2224      	movs	r2, #36	@ 0x24
 80090ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0201 	bic.w	r2, r2, #1
 80090c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80090d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	021b      	lsls	r3, r3, #8
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	4313      	orrs	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 0201 	orr.w	r2, r2, #1
 80090f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2220      	movs	r2, #32
 80090f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	e000      	b.n	800910a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009108:	2302      	movs	r3, #2
  }
}
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b086      	sub	sp, #24
 800911a:	af02      	add	r7, sp, #8
 800911c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e0fe      	b.n	8009326 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b00      	cmp	r3, #0
 8009132:	d106      	bne.n	8009142 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f00b fa4f 	bl	80145e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2203      	movs	r2, #3
 8009146:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4618      	mov	r0, r3
 8009150:	f007 fe0b 	bl	8010d6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6818      	ldr	r0, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	7c1a      	ldrb	r2, [r3, #16]
 800915c:	f88d 2000 	strb.w	r2, [sp]
 8009160:	3304      	adds	r3, #4
 8009162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009164:	f007 fcdc 	bl	8010b20 <USB_CoreInit>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d005      	beq.n	800917a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2202      	movs	r2, #2
 8009172:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e0d5      	b.n	8009326 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2100      	movs	r1, #0
 8009180:	4618      	mov	r0, r3
 8009182:	f007 fe03 	bl	8010d8c <USB_SetCurrentMode>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2202      	movs	r2, #2
 8009190:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e0c6      	b.n	8009326 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009198:	2300      	movs	r3, #0
 800919a:	73fb      	strb	r3, [r7, #15]
 800919c:	e04a      	b.n	8009234 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800919e:	7bfa      	ldrb	r2, [r7, #15]
 80091a0:	6879      	ldr	r1, [r7, #4]
 80091a2:	4613      	mov	r3, r2
 80091a4:	00db      	lsls	r3, r3, #3
 80091a6:	4413      	add	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	440b      	add	r3, r1
 80091ac:	3315      	adds	r3, #21
 80091ae:	2201      	movs	r2, #1
 80091b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80091b2:	7bfa      	ldrb	r2, [r7, #15]
 80091b4:	6879      	ldr	r1, [r7, #4]
 80091b6:	4613      	mov	r3, r2
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	4413      	add	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	440b      	add	r3, r1
 80091c0:	3314      	adds	r3, #20
 80091c2:	7bfa      	ldrb	r2, [r7, #15]
 80091c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80091c6:	7bfa      	ldrb	r2, [r7, #15]
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
 80091ca:	b298      	uxth	r0, r3
 80091cc:	6879      	ldr	r1, [r7, #4]
 80091ce:	4613      	mov	r3, r2
 80091d0:	00db      	lsls	r3, r3, #3
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	440b      	add	r3, r1
 80091d8:	332e      	adds	r3, #46	@ 0x2e
 80091da:	4602      	mov	r2, r0
 80091dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80091de:	7bfa      	ldrb	r2, [r7, #15]
 80091e0:	6879      	ldr	r1, [r7, #4]
 80091e2:	4613      	mov	r3, r2
 80091e4:	00db      	lsls	r3, r3, #3
 80091e6:	4413      	add	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	440b      	add	r3, r1
 80091ec:	3318      	adds	r3, #24
 80091ee:	2200      	movs	r2, #0
 80091f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80091f2:	7bfa      	ldrb	r2, [r7, #15]
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	4613      	mov	r3, r2
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	4413      	add	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	440b      	add	r3, r1
 8009200:	331c      	adds	r3, #28
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009206:	7bfa      	ldrb	r2, [r7, #15]
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	4613      	mov	r3, r2
 800920c:	00db      	lsls	r3, r3, #3
 800920e:	4413      	add	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	440b      	add	r3, r1
 8009214:	3320      	adds	r3, #32
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800921a:	7bfa      	ldrb	r2, [r7, #15]
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	4413      	add	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	440b      	add	r3, r1
 8009228:	3324      	adds	r3, #36	@ 0x24
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800922e:	7bfb      	ldrb	r3, [r7, #15]
 8009230:	3301      	adds	r3, #1
 8009232:	73fb      	strb	r3, [r7, #15]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	791b      	ldrb	r3, [r3, #4]
 8009238:	7bfa      	ldrb	r2, [r7, #15]
 800923a:	429a      	cmp	r2, r3
 800923c:	d3af      	bcc.n	800919e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]
 8009242:	e044      	b.n	80092ce <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009244:	7bfa      	ldrb	r2, [r7, #15]
 8009246:	6879      	ldr	r1, [r7, #4]
 8009248:	4613      	mov	r3, r2
 800924a:	00db      	lsls	r3, r3, #3
 800924c:	4413      	add	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	440b      	add	r3, r1
 8009252:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800925a:	7bfa      	ldrb	r2, [r7, #15]
 800925c:	6879      	ldr	r1, [r7, #4]
 800925e:	4613      	mov	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	440b      	add	r3, r1
 8009268:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800926c:	7bfa      	ldrb	r2, [r7, #15]
 800926e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009270:	7bfa      	ldrb	r2, [r7, #15]
 8009272:	6879      	ldr	r1, [r7, #4]
 8009274:	4613      	mov	r3, r2
 8009276:	00db      	lsls	r3, r3, #3
 8009278:	4413      	add	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	440b      	add	r3, r1
 800927e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009282:	2200      	movs	r2, #0
 8009284:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009286:	7bfa      	ldrb	r2, [r7, #15]
 8009288:	6879      	ldr	r1, [r7, #4]
 800928a:	4613      	mov	r3, r2
 800928c:	00db      	lsls	r3, r3, #3
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	440b      	add	r3, r1
 8009294:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009298:	2200      	movs	r2, #0
 800929a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800929c:	7bfa      	ldrb	r2, [r7, #15]
 800929e:	6879      	ldr	r1, [r7, #4]
 80092a0:	4613      	mov	r3, r2
 80092a2:	00db      	lsls	r3, r3, #3
 80092a4:	4413      	add	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	440b      	add	r3, r1
 80092aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80092b2:	7bfa      	ldrb	r2, [r7, #15]
 80092b4:	6879      	ldr	r1, [r7, #4]
 80092b6:	4613      	mov	r3, r2
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	4413      	add	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	440b      	add	r3, r1
 80092c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80092c4:	2200      	movs	r2, #0
 80092c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
 80092ca:	3301      	adds	r3, #1
 80092cc:	73fb      	strb	r3, [r7, #15]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	791b      	ldrb	r3, [r3, #4]
 80092d2:	7bfa      	ldrb	r2, [r7, #15]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d3b5      	bcc.n	8009244 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	7c1a      	ldrb	r2, [r3, #16]
 80092e0:	f88d 2000 	strb.w	r2, [sp]
 80092e4:	3304      	adds	r3, #4
 80092e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092e8:	f007 fd9c 	bl	8010e24 <USB_DevInit>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d005      	beq.n	80092fe <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2202      	movs	r2, #2
 80092f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e013      	b.n	8009326 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	7b1b      	ldrb	r3, [r3, #12]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d102      	bne.n	800931a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f001 f96d 	bl	800a5f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4618      	mov	r0, r3
 8009320:	f008 fddb 	bl	8011eda <USB_DevDisconnect>

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009342:	2b01      	cmp	r3, #1
 8009344:	d101      	bne.n	800934a <HAL_PCD_Start+0x1c>
 8009346:	2302      	movs	r3, #2
 8009348:	e022      	b.n	8009390 <HAL_PCD_Start+0x62>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800935a:	2b00      	cmp	r3, #0
 800935c:	d009      	beq.n	8009372 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009362:	2b01      	cmp	r3, #1
 8009364:	d105      	bne.n	8009372 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4618      	mov	r0, r3
 8009378:	f007 fce6 	bl	8010d48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4618      	mov	r0, r3
 8009382:	f008 fd89 	bl	8011e98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009398:	b590      	push	{r4, r7, lr}
 800939a:	b08d      	sub	sp, #52	@ 0x34
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a6:	6a3b      	ldr	r3, [r7, #32]
 80093a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f008 fe47 	bl	8012042 <USB_GetMode>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f040 84b9 	bne.w	8009d2e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f008 fdab 	bl	8011f1c <USB_ReadInterrupts>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 84af 	beq.w	8009d2c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	0a1b      	lsrs	r3, r3, #8
 80093d8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f008 fd98 	bl	8011f1c <USB_ReadInterrupts>
 80093ec:	4603      	mov	r3, r0
 80093ee:	f003 0302 	and.w	r3, r3, #2
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d107      	bne.n	8009406 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	695a      	ldr	r2, [r3, #20]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f002 0202 	and.w	r2, r2, #2
 8009404:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4618      	mov	r0, r3
 800940c:	f008 fd86 	bl	8011f1c <USB_ReadInterrupts>
 8009410:	4603      	mov	r3, r0
 8009412:	f003 0310 	and.w	r3, r3, #16
 8009416:	2b10      	cmp	r3, #16
 8009418:	d161      	bne.n	80094de <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	699a      	ldr	r2, [r3, #24]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 0210 	bic.w	r2, r2, #16
 8009428:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800942a:	6a3b      	ldr	r3, [r7, #32]
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	f003 020f 	and.w	r2, r3, #15
 8009436:	4613      	mov	r3, r2
 8009438:	00db      	lsls	r3, r3, #3
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4413      	add	r3, r2
 8009446:	3304      	adds	r3, #4
 8009448:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	0c5b      	lsrs	r3, r3, #17
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	2b02      	cmp	r3, #2
 8009454:	d124      	bne.n	80094a0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800945c:	4013      	ands	r3, r2
 800945e:	2b00      	cmp	r3, #0
 8009460:	d035      	beq.n	80094ce <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	091b      	lsrs	r3, r3, #4
 800946a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800946c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009470:	b29b      	uxth	r3, r3
 8009472:	461a      	mov	r2, r3
 8009474:	6a38      	ldr	r0, [r7, #32]
 8009476:	f008 fbbd 	bl	8011bf4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	68da      	ldr	r2, [r3, #12]
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	091b      	lsrs	r3, r3, #4
 8009482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009486:	441a      	add	r2, r3
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	695a      	ldr	r2, [r3, #20]
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	091b      	lsrs	r3, r3, #4
 8009494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009498:	441a      	add	r2, r3
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	615a      	str	r2, [r3, #20]
 800949e:	e016      	b.n	80094ce <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	0c5b      	lsrs	r3, r3, #17
 80094a4:	f003 030f 	and.w	r3, r3, #15
 80094a8:	2b06      	cmp	r3, #6
 80094aa:	d110      	bne.n	80094ce <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80094b2:	2208      	movs	r2, #8
 80094b4:	4619      	mov	r1, r3
 80094b6:	6a38      	ldr	r0, [r7, #32]
 80094b8:	f008 fb9c 	bl	8011bf4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	695a      	ldr	r2, [r3, #20]
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	091b      	lsrs	r3, r3, #4
 80094c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094c8:	441a      	add	r2, r3
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	699a      	ldr	r2, [r3, #24]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f042 0210 	orr.w	r2, r2, #16
 80094dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f008 fd1a 	bl	8011f1c <USB_ReadInterrupts>
 80094e8:	4603      	mov	r3, r0
 80094ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80094ee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80094f2:	f040 80a7 	bne.w	8009644 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4618      	mov	r0, r3
 8009500:	f008 fd1f 	bl	8011f42 <USB_ReadDevAllOutEpInterrupt>
 8009504:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8009506:	e099      	b.n	800963c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 808e 	beq.w	8009630 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800951a:	b2d2      	uxtb	r2, r2
 800951c:	4611      	mov	r1, r2
 800951e:	4618      	mov	r0, r3
 8009520:	f008 fd43 	bl	8011faa <USB_ReadDevOutEPInterrupt>
 8009524:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00c      	beq.n	800954a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009532:	015a      	lsls	r2, r3, #5
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	4413      	add	r3, r2
 8009538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800953c:	461a      	mov	r2, r3
 800953e:	2301      	movs	r3, #1
 8009540:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009542:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fecf 	bl	800a2e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f003 0308 	and.w	r3, r3, #8
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00c      	beq.n	800956e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009560:	461a      	mov	r2, r3
 8009562:	2308      	movs	r3, #8
 8009564:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009566:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 ffa5 	bl	800a4b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f003 0310 	and.w	r3, r3, #16
 8009574:	2b00      	cmp	r3, #0
 8009576:	d008      	beq.n	800958a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009584:	461a      	mov	r2, r3
 8009586:	2310      	movs	r3, #16
 8009588:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b00      	cmp	r3, #0
 8009592:	d030      	beq.n	80095f6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	695b      	ldr	r3, [r3, #20]
 8009598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800959c:	2b80      	cmp	r3, #128	@ 0x80
 800959e:	d109      	bne.n	80095b4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	69fa      	ldr	r2, [r7, #28]
 80095aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80095b2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80095b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095b6:	4613      	mov	r3, r2
 80095b8:	00db      	lsls	r3, r3, #3
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	4413      	add	r3, r2
 80095c6:	3304      	adds	r3, #4
 80095c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	78db      	ldrb	r3, [r3, #3]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d108      	bne.n	80095e4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2200      	movs	r2, #0
 80095d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80095d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	4619      	mov	r1, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f00b f8f6 	bl	80147d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80095e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095f0:	461a      	mov	r2, r3
 80095f2:	2302      	movs	r3, #2
 80095f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	f003 0320 	and.w	r3, r3, #32
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d008      	beq.n	8009612 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009602:	015a      	lsls	r2, r3, #5
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	4413      	add	r3, r2
 8009608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800960c:	461a      	mov	r2, r3
 800960e:	2320      	movs	r3, #32
 8009610:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d009      	beq.n	8009630 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009628:	461a      	mov	r2, r3
 800962a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800962e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009632:	3301      	adds	r3, #1
 8009634:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009638:	085b      	lsrs	r3, r3, #1
 800963a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800963c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963e:	2b00      	cmp	r3, #0
 8009640:	f47f af62 	bne.w	8009508 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4618      	mov	r0, r3
 800964a:	f008 fc67 	bl	8011f1c <USB_ReadInterrupts>
 800964e:	4603      	mov	r3, r0
 8009650:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009654:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009658:	f040 80db 	bne.w	8009812 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4618      	mov	r0, r3
 8009662:	f008 fc88 	bl	8011f76 <USB_ReadDevAllInEpInterrupt>
 8009666:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8009668:	2300      	movs	r3, #0
 800966a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800966c:	e0cd      	b.n	800980a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800966e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 80c2 	beq.w	80097fe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009680:	b2d2      	uxtb	r2, r2
 8009682:	4611      	mov	r1, r2
 8009684:	4618      	mov	r0, r3
 8009686:	f008 fcae 	bl	8011fe6 <USB_ReadDevInEPInterrupt>
 800968a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	d057      	beq.n	8009746 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009698:	f003 030f 	and.w	r3, r3, #15
 800969c:	2201      	movs	r2, #1
 800969e:	fa02 f303 	lsl.w	r3, r2, r3
 80096a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	43db      	mvns	r3, r3
 80096b0:	69f9      	ldr	r1, [r7, #28]
 80096b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096b6:	4013      	ands	r3, r2
 80096b8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80096ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c6:	461a      	mov	r2, r3
 80096c8:	2301      	movs	r3, #1
 80096ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	799b      	ldrb	r3, [r3, #6]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d132      	bne.n	800973a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096d8:	4613      	mov	r3, r2
 80096da:	00db      	lsls	r3, r3, #3
 80096dc:	4413      	add	r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	440b      	add	r3, r1
 80096e2:	3320      	adds	r3, #32
 80096e4:	6819      	ldr	r1, [r3, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096ea:	4613      	mov	r3, r2
 80096ec:	00db      	lsls	r3, r3, #3
 80096ee:	4413      	add	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4403      	add	r3, r0
 80096f4:	331c      	adds	r3, #28
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4419      	add	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096fe:	4613      	mov	r3, r2
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4403      	add	r3, r0
 8009708:	3320      	adds	r3, #32
 800970a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800970c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970e:	2b00      	cmp	r3, #0
 8009710:	d113      	bne.n	800973a <HAL_PCD_IRQHandler+0x3a2>
 8009712:	6879      	ldr	r1, [r7, #4]
 8009714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009716:	4613      	mov	r3, r2
 8009718:	00db      	lsls	r3, r3, #3
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	440b      	add	r3, r1
 8009720:	3324      	adds	r3, #36	@ 0x24
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d108      	bne.n	800973a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009732:	461a      	mov	r2, r3
 8009734:	2101      	movs	r1, #1
 8009736:	f008 fcb7 	bl	80120a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800973a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973c:	b2db      	uxtb	r3, r3
 800973e:	4619      	mov	r1, r3
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f00a ffc0 	bl	80146c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f003 0308 	and.w	r3, r3, #8
 800974c:	2b00      	cmp	r3, #0
 800974e:	d008      	beq.n	8009762 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009752:	015a      	lsls	r2, r3, #5
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	4413      	add	r3, r2
 8009758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800975c:	461a      	mov	r2, r3
 800975e:	2308      	movs	r3, #8
 8009760:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f003 0310 	and.w	r3, r3, #16
 8009768:	2b00      	cmp	r3, #0
 800976a:	d008      	beq.n	800977e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800976c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	4413      	add	r3, r2
 8009774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009778:	461a      	mov	r2, r3
 800977a:	2310      	movs	r3, #16
 800977c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d008      	beq.n	800979a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978a:	015a      	lsls	r2, r3, #5
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	4413      	add	r3, r2
 8009790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009794:	461a      	mov	r2, r3
 8009796:	2340      	movs	r3, #64	@ 0x40
 8009798:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d023      	beq.n	80097ec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80097a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80097a6:	6a38      	ldr	r0, [r7, #32]
 80097a8:	f007 fc9a 	bl	80110e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80097ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097ae:	4613      	mov	r3, r2
 80097b0:	00db      	lsls	r3, r3, #3
 80097b2:	4413      	add	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	3310      	adds	r3, #16
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	4413      	add	r3, r2
 80097bc:	3304      	adds	r3, #4
 80097be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	78db      	ldrb	r3, [r3, #3]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d108      	bne.n	80097da <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	2200      	movs	r2, #0
 80097cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80097ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f00b f80d 	bl	80147f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80097da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097dc:	015a      	lsls	r2, r3, #5
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	4413      	add	r3, r2
 80097e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e6:	461a      	mov	r2, r3
 80097e8:	2302      	movs	r3, #2
 80097ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d003      	beq.n	80097fe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80097f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fce8 	bl	800a1ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80097fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009800:	3301      	adds	r3, #1
 8009802:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009806:	085b      	lsrs	r3, r3, #1
 8009808:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800980a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980c:	2b00      	cmp	r3, #0
 800980e:	f47f af2e 	bne.w	800966e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4618      	mov	r0, r3
 8009818:	f008 fb80 	bl	8011f1c <USB_ReadInterrupts>
 800981c:	4603      	mov	r3, r0
 800981e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009822:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009826:	d122      	bne.n	800986e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	69fa      	ldr	r2, [r7, #28]
 8009832:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009836:	f023 0301 	bic.w	r3, r3, #1
 800983a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8009842:	2b01      	cmp	r3, #1
 8009844:	d108      	bne.n	8009858 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800984e:	2100      	movs	r1, #0
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fef3 	bl	800a63c <HAL_PCDEx_LPM_Callback>
 8009856:	e002      	b.n	800985e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f00a ffab 	bl	80147b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	695a      	ldr	r2, [r3, #20]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800986c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4618      	mov	r0, r3
 8009874:	f008 fb52 	bl	8011f1c <USB_ReadInterrupts>
 8009878:	4603      	mov	r3, r0
 800987a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800987e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009882:	d112      	bne.n	80098aa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b01      	cmp	r3, #1
 8009892:	d102      	bne.n	800989a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f00a ff67 	bl	8014768 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	695a      	ldr	r2, [r3, #20]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80098a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f008 fb34 	bl	8011f1c <USB_ReadInterrupts>
 80098b4:	4603      	mov	r3, r0
 80098b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098be:	d121      	bne.n	8009904 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	695a      	ldr	r2, [r3, #20]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80098ce:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d111      	bne.n	80098fe <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e8:	089b      	lsrs	r3, r3, #2
 80098ea:	f003 020f 	and.w	r2, r3, #15
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80098f4:	2101      	movs	r1, #1
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fea0 	bl	800a63c <HAL_PCDEx_LPM_Callback>
 80098fc:	e002      	b.n	8009904 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f00a ff32 	bl	8014768 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4618      	mov	r0, r3
 800990a:	f008 fb07 	bl	8011f1c <USB_ReadInterrupts>
 800990e:	4603      	mov	r3, r0
 8009910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009918:	f040 80b7 	bne.w	8009a8a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	69fa      	ldr	r2, [r7, #28]
 8009926:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800992a:	f023 0301 	bic.w	r3, r3, #1
 800992e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2110      	movs	r1, #16
 8009936:	4618      	mov	r0, r3
 8009938:	f007 fbd2 	bl	80110e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800993c:	2300      	movs	r3, #0
 800993e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009940:	e046      	b.n	80099d0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800994e:	461a      	mov	r2, r3
 8009950:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009954:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009966:	0151      	lsls	r1, r2, #5
 8009968:	69fa      	ldr	r2, [r7, #28]
 800996a:	440a      	add	r2, r1
 800996c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009970:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009974:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	4413      	add	r3, r2
 800997e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009982:	461a      	mov	r2, r3
 8009984:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009988:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800998a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800998c:	015a      	lsls	r2, r3, #5
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	4413      	add	r3, r2
 8009992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800999a:	0151      	lsls	r1, r2, #5
 800999c:	69fa      	ldr	r2, [r7, #28]
 800999e:	440a      	add	r2, r1
 80099a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80099a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80099aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099ba:	0151      	lsls	r1, r2, #5
 80099bc:	69fa      	ldr	r2, [r7, #28]
 80099be:	440a      	add	r2, r1
 80099c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80099c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099cc:	3301      	adds	r3, #1
 80099ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	791b      	ldrb	r3, [r3, #4]
 80099d4:	461a      	mov	r2, r3
 80099d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d8:	4293      	cmp	r3, r2
 80099da:	d3b2      	bcc.n	8009942 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	69fa      	ldr	r2, [r7, #28]
 80099e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099ea:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80099ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	7bdb      	ldrb	r3, [r3, #15]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d016      	beq.n	8009a26 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a02:	69fa      	ldr	r2, [r7, #28]
 8009a04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a08:	f043 030b 	orr.w	r3, r3, #11
 8009a0c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a18:	69fa      	ldr	r2, [r7, #28]
 8009a1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a1e:	f043 030b 	orr.w	r3, r3, #11
 8009a22:	6453      	str	r3, [r2, #68]	@ 0x44
 8009a24:	e015      	b.n	8009a52 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a2c:	695a      	ldr	r2, [r3, #20]
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a34:	4619      	mov	r1, r3
 8009a36:	f242 032b 	movw	r3, #8235	@ 0x202b
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	69fa      	ldr	r2, [r7, #28]
 8009a48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a4c:	f043 030b 	orr.w	r3, r3, #11
 8009a50:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a60:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009a64:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6818      	ldr	r0, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009a74:	461a      	mov	r2, r3
 8009a76:	f008 fb17 	bl	80120a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	695a      	ldr	r2, [r3, #20]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8009a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f008 fa44 	bl	8011f1c <USB_ReadInterrupts>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a9e:	d123      	bne.n	8009ae8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f008 fadb 	bl	8012060 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f007 fb8f 	bl	80111d2 <USB_GetDevSpeed>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681c      	ldr	r4, [r3, #0]
 8009ac0:	f001 fd1c 	bl	800b4fc <HAL_RCC_GetHCLKFreq>
 8009ac4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009aca:	461a      	mov	r2, r3
 8009acc:	4620      	mov	r0, r4
 8009ace:	f007 f899 	bl	8010c04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f00a fe1f 	bl	8014716 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	695a      	ldr	r2, [r3, #20]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8009ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f008 fa15 	bl	8011f1c <USB_ReadInterrupts>
 8009af2:	4603      	mov	r3, r0
 8009af4:	f003 0308 	and.w	r3, r3, #8
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	d10a      	bne.n	8009b12 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f00a fdfc 	bl	80146fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	695a      	ldr	r2, [r3, #20]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f002 0208 	and.w	r2, r2, #8
 8009b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f008 fa00 	bl	8011f1c <USB_ReadInterrupts>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b22:	2b80      	cmp	r3, #128	@ 0x80
 8009b24:	d123      	bne.n	8009b6e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009b26:	6a3b      	ldr	r3, [r7, #32]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b2e:	6a3b      	ldr	r3, [r7, #32]
 8009b30:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b32:	2301      	movs	r3, #1
 8009b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b36:	e014      	b.n	8009b62 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009b38:	6879      	ldr	r1, [r7, #4]
 8009b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	00db      	lsls	r3, r3, #3
 8009b40:	4413      	add	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	440b      	add	r3, r1
 8009b46:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d105      	bne.n	8009b5c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	4619      	mov	r1, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fb08 	bl	800a16c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5e:	3301      	adds	r3, #1
 8009b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	791b      	ldrb	r3, [r3, #4]
 8009b66:	461a      	mov	r2, r3
 8009b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d3e4      	bcc.n	8009b38 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f008 f9d2 	bl	8011f1c <USB_ReadInterrupts>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b82:	d13c      	bne.n	8009bfe <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b84:	2301      	movs	r3, #1
 8009b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b88:	e02b      	b.n	8009be2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009b9a:	6879      	ldr	r1, [r7, #4]
 8009b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	00db      	lsls	r3, r3, #3
 8009ba2:	4413      	add	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	440b      	add	r3, r1
 8009ba8:	3318      	adds	r3, #24
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d115      	bne.n	8009bdc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009bb0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	da12      	bge.n	8009bdc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009bb6:	6879      	ldr	r1, [r7, #4]
 8009bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bba:	4613      	mov	r3, r2
 8009bbc:	00db      	lsls	r3, r3, #3
 8009bbe:	4413      	add	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	440b      	add	r3, r1
 8009bc4:	3317      	adds	r3, #23
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fac8 	bl	800a16c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bde:	3301      	adds	r3, #1
 8009be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	791b      	ldrb	r3, [r3, #4]
 8009be6:	461a      	mov	r2, r3
 8009be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d3cd      	bcc.n	8009b8a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	695a      	ldr	r2, [r3, #20]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8009bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f008 f98a 	bl	8011f1c <USB_ReadInterrupts>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c12:	d156      	bne.n	8009cc2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c14:	2301      	movs	r3, #1
 8009c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c18:	e045      	b.n	8009ca6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1c:	015a      	lsls	r2, r3, #5
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	4413      	add	r3, r2
 8009c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009c2a:	6879      	ldr	r1, [r7, #4]
 8009c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c2e:	4613      	mov	r3, r2
 8009c30:	00db      	lsls	r3, r3, #3
 8009c32:	4413      	add	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	440b      	add	r3, r1
 8009c38:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d12e      	bne.n	8009ca0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009c42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	da2b      	bge.n	8009ca0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8009c54:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d121      	bne.n	8009ca0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c60:	4613      	mov	r3, r2
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	4413      	add	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	440b      	add	r3, r1
 8009c6a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009c6e:	2201      	movs	r2, #1
 8009c70:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009c72:	6a3b      	ldr	r3, [r7, #32]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009c7a:	6a3b      	ldr	r3, [r7, #32]
 8009c7c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10a      	bne.n	8009ca0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	69fa      	ldr	r2, [r7, #28]
 8009c94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009c9c:	6053      	str	r3, [r2, #4]
            break;
 8009c9e:	e008      	b.n	8009cb2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	791b      	ldrb	r3, [r3, #4]
 8009caa:	461a      	mov	r2, r3
 8009cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d3b3      	bcc.n	8009c1a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	695a      	ldr	r2, [r3, #20]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f008 f928 	bl	8011f1c <USB_ReadInterrupts>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cd6:	d10a      	bne.n	8009cee <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f00a fd9d 	bl	8014818 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	695a      	ldr	r2, [r3, #20]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009cec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f008 f912 	bl	8011f1c <USB_ReadInterrupts>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	f003 0304 	and.w	r3, r3, #4
 8009cfe:	2b04      	cmp	r3, #4
 8009d00:	d115      	bne.n	8009d2e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	f003 0304 	and.w	r3, r3, #4
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f00a fd8d 	bl	8014834 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6859      	ldr	r1, [r3, #4]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	69ba      	ldr	r2, [r7, #24]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	605a      	str	r2, [r3, #4]
 8009d2a:	e000      	b.n	8009d2e <HAL_PCD_IRQHandler+0x996>
      return;
 8009d2c:	bf00      	nop
    }
  }
}
 8009d2e:	3734      	adds	r7, #52	@ 0x34
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd90      	pop	{r4, r7, pc}

08009d34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d101      	bne.n	8009d4e <HAL_PCD_SetAddress+0x1a>
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	e012      	b.n	8009d74 <HAL_PCD_SetAddress+0x40>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	78fa      	ldrb	r2, [r7, #3]
 8009d5a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	78fa      	ldrb	r2, [r7, #3]
 8009d62:	4611      	mov	r1, r2
 8009d64:	4618      	mov	r0, r3
 8009d66:	f008 f871 	bl	8011e4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	4608      	mov	r0, r1
 8009d86:	4611      	mov	r1, r2
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	70fb      	strb	r3, [r7, #3]
 8009d8e:	460b      	mov	r3, r1
 8009d90:	803b      	strh	r3, [r7, #0]
 8009d92:	4613      	mov	r3, r2
 8009d94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	da0f      	bge.n	8009dc2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009da2:	78fb      	ldrb	r3, [r7, #3]
 8009da4:	f003 020f 	and.w	r2, r3, #15
 8009da8:	4613      	mov	r3, r2
 8009daa:	00db      	lsls	r3, r3, #3
 8009dac:	4413      	add	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	3310      	adds	r3, #16
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	4413      	add	r3, r2
 8009db6:	3304      	adds	r3, #4
 8009db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	705a      	strb	r2, [r3, #1]
 8009dc0:	e00f      	b.n	8009de2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009dc2:	78fb      	ldrb	r3, [r7, #3]
 8009dc4:	f003 020f 	and.w	r2, r3, #15
 8009dc8:	4613      	mov	r3, r2
 8009dca:	00db      	lsls	r3, r3, #3
 8009dcc:	4413      	add	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	3304      	adds	r3, #4
 8009dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009de2:	78fb      	ldrb	r3, [r7, #3]
 8009de4:	f003 030f 	and.w	r3, r3, #15
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009dee:	883a      	ldrh	r2, [r7, #0]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	78ba      	ldrb	r2, [r7, #2]
 8009df8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	785b      	ldrb	r3, [r3, #1]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d004      	beq.n	8009e0c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009e0c:	78bb      	ldrb	r3, [r7, #2]
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d102      	bne.n	8009e18 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d101      	bne.n	8009e26 <HAL_PCD_EP_Open+0xaa>
 8009e22:	2302      	movs	r3, #2
 8009e24:	e00e      	b.n	8009e44 <HAL_PCD_EP_Open+0xc8>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68f9      	ldr	r1, [r7, #12]
 8009e34:	4618      	mov	r0, r3
 8009e36:	f007 f9f1 	bl	801121c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8009e42:	7afb      	ldrb	r3, [r7, #11]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	460b      	mov	r3, r1
 8009e56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	da0f      	bge.n	8009e80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e60:	78fb      	ldrb	r3, [r7, #3]
 8009e62:	f003 020f 	and.w	r2, r3, #15
 8009e66:	4613      	mov	r3, r2
 8009e68:	00db      	lsls	r3, r3, #3
 8009e6a:	4413      	add	r3, r2
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	3310      	adds	r3, #16
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	4413      	add	r3, r2
 8009e74:	3304      	adds	r3, #4
 8009e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	705a      	strb	r2, [r3, #1]
 8009e7e:	e00f      	b.n	8009ea0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e80:	78fb      	ldrb	r3, [r7, #3]
 8009e82:	f003 020f 	and.w	r2, r3, #15
 8009e86:	4613      	mov	r3, r2
 8009e88:	00db      	lsls	r3, r3, #3
 8009e8a:	4413      	add	r3, r2
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	4413      	add	r3, r2
 8009e96:	3304      	adds	r3, #4
 8009e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ea0:	78fb      	ldrb	r3, [r7, #3]
 8009ea2:	f003 030f 	and.w	r3, r3, #15
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d101      	bne.n	8009eba <HAL_PCD_EP_Close+0x6e>
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	e00e      	b.n	8009ed8 <HAL_PCD_EP_Close+0x8c>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68f9      	ldr	r1, [r7, #12]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f007 fa2f 	bl	801132c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	607a      	str	r2, [r7, #4]
 8009eea:	603b      	str	r3, [r7, #0]
 8009eec:	460b      	mov	r3, r1
 8009eee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ef0:	7afb      	ldrb	r3, [r7, #11]
 8009ef2:	f003 020f 	and.w	r2, r3, #15
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	00db      	lsls	r3, r3, #3
 8009efa:	4413      	add	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	4413      	add	r3, r2
 8009f06:	3304      	adds	r3, #4
 8009f08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f22:	7afb      	ldrb	r3, [r7, #11]
 8009f24:	f003 030f 	and.w	r3, r3, #15
 8009f28:	b2da      	uxtb	r2, r3
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	799b      	ldrb	r3, [r3, #6]
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d102      	bne.n	8009f3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	799b      	ldrb	r3, [r3, #6]
 8009f44:	461a      	mov	r2, r3
 8009f46:	6979      	ldr	r1, [r7, #20]
 8009f48:	f007 facc 	bl	80114e4 <USB_EPStartXfer>

  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b083      	sub	sp, #12
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	460b      	mov	r3, r1
 8009f60:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009f62:	78fb      	ldrb	r3, [r7, #3]
 8009f64:	f003 020f 	and.w	r2, r3, #15
 8009f68:	6879      	ldr	r1, [r7, #4]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	00db      	lsls	r3, r3, #3
 8009f6e:	4413      	add	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	440b      	add	r3, r1
 8009f74:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8009f78:	681b      	ldr	r3, [r3, #0]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	370c      	adds	r7, #12
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b086      	sub	sp, #24
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	60f8      	str	r0, [r7, #12]
 8009f8e:	607a      	str	r2, [r7, #4]
 8009f90:	603b      	str	r3, [r7, #0]
 8009f92:	460b      	mov	r3, r1
 8009f94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f96:	7afb      	ldrb	r3, [r7, #11]
 8009f98:	f003 020f 	and.w	r2, r3, #15
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	00db      	lsls	r3, r3, #3
 8009fa0:	4413      	add	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	3310      	adds	r3, #16
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	4413      	add	r3, r2
 8009faa:	3304      	adds	r3, #4
 8009fac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009fc6:	7afb      	ldrb	r3, [r7, #11]
 8009fc8:	f003 030f 	and.w	r3, r3, #15
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	799b      	ldrb	r3, [r3, #6]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d102      	bne.n	8009fe0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6818      	ldr	r0, [r3, #0]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	799b      	ldrb	r3, [r3, #6]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	6979      	ldr	r1, [r7, #20]
 8009fec:	f007 fa7a 	bl	80114e4 <USB_EPStartXfer>

  return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3718      	adds	r7, #24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b084      	sub	sp, #16
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	460b      	mov	r3, r1
 800a004:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a006:	78fb      	ldrb	r3, [r7, #3]
 800a008:	f003 030f 	and.w	r3, r3, #15
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	7912      	ldrb	r2, [r2, #4]
 800a010:	4293      	cmp	r3, r2
 800a012:	d901      	bls.n	800a018 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e04f      	b.n	800a0b8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	da0f      	bge.n	800a040 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a020:	78fb      	ldrb	r3, [r7, #3]
 800a022:	f003 020f 	and.w	r2, r3, #15
 800a026:	4613      	mov	r3, r2
 800a028:	00db      	lsls	r3, r3, #3
 800a02a:	4413      	add	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	3310      	adds	r3, #16
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	4413      	add	r3, r2
 800a034:	3304      	adds	r3, #4
 800a036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2201      	movs	r2, #1
 800a03c:	705a      	strb	r2, [r3, #1]
 800a03e:	e00d      	b.n	800a05c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a040:	78fa      	ldrb	r2, [r7, #3]
 800a042:	4613      	mov	r3, r2
 800a044:	00db      	lsls	r3, r3, #3
 800a046:	4413      	add	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	4413      	add	r3, r2
 800a052:	3304      	adds	r3, #4
 800a054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2200      	movs	r2, #0
 800a05a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2201      	movs	r2, #1
 800a060:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a062:	78fb      	ldrb	r3, [r7, #3]
 800a064:	f003 030f 	and.w	r3, r3, #15
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a074:	2b01      	cmp	r3, #1
 800a076:	d101      	bne.n	800a07c <HAL_PCD_EP_SetStall+0x82>
 800a078:	2302      	movs	r3, #2
 800a07a:	e01d      	b.n	800a0b8 <HAL_PCD_EP_SetStall+0xbe>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68f9      	ldr	r1, [r7, #12]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f007 fe0a 	bl	8011ca4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	f003 030f 	and.w	r3, r3, #15
 800a096:	2b00      	cmp	r3, #0
 800a098:	d109      	bne.n	800a0ae <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6818      	ldr	r0, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	7999      	ldrb	r1, [r3, #6]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	f007 fffd 	bl	80120a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a0cc:	78fb      	ldrb	r3, [r7, #3]
 800a0ce:	f003 030f 	and.w	r3, r3, #15
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	7912      	ldrb	r2, [r2, #4]
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d901      	bls.n	800a0de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e042      	b.n	800a164 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a0de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	da0f      	bge.n	800a106 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0e6:	78fb      	ldrb	r3, [r7, #3]
 800a0e8:	f003 020f 	and.w	r2, r3, #15
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	00db      	lsls	r3, r3, #3
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	3310      	adds	r3, #16
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2201      	movs	r2, #1
 800a102:	705a      	strb	r2, [r3, #1]
 800a104:	e00f      	b.n	800a126 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a106:	78fb      	ldrb	r3, [r7, #3]
 800a108:	f003 020f 	and.w	r2, r3, #15
 800a10c:	4613      	mov	r3, r2
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	4413      	add	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	4413      	add	r3, r2
 800a11c:	3304      	adds	r3, #4
 800a11e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a12c:	78fb      	ldrb	r3, [r7, #3]
 800a12e:	f003 030f 	and.w	r3, r3, #15
 800a132:	b2da      	uxtb	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d101      	bne.n	800a146 <HAL_PCD_EP_ClrStall+0x86>
 800a142:	2302      	movs	r3, #2
 800a144:	e00e      	b.n	800a164 <HAL_PCD_EP_ClrStall+0xa4>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68f9      	ldr	r1, [r7, #12]
 800a154:	4618      	mov	r0, r3
 800a156:	f007 fe13 	bl	8011d80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	da0c      	bge.n	800a19a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	f003 020f 	and.w	r2, r3, #15
 800a186:	4613      	mov	r3, r2
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	4413      	add	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	3310      	adds	r3, #16
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	4413      	add	r3, r2
 800a194:	3304      	adds	r3, #4
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	e00c      	b.n	800a1b4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a19a:	78fb      	ldrb	r3, [r7, #3]
 800a19c:	f003 020f 	and.w	r2, r3, #15
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	4413      	add	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68f9      	ldr	r1, [r7, #12]
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f007 fc32 	bl	8011a24 <USB_EPStopXfer>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a1c4:	7afb      	ldrb	r3, [r7, #11]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b08a      	sub	sp, #40	@ 0x28
 800a1d2:	af02      	add	r7, sp, #8
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	00db      	lsls	r3, r3, #3
 800a1e8:	4413      	add	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	3310      	adds	r3, #16
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	695a      	ldr	r2, [r3, #20]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d901      	bls.n	800a206 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e06b      	b.n	800a2de <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	691a      	ldr	r2, [r3, #16]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	69fa      	ldr	r2, [r7, #28]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d902      	bls.n	800a222 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	3303      	adds	r3, #3
 800a226:	089b      	lsrs	r3, r3, #2
 800a228:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a22a:	e02a      	b.n	800a282 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	691a      	ldr	r2, [r3, #16]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	695b      	ldr	r3, [r3, #20]
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	69fa      	ldr	r2, [r7, #28]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d902      	bls.n	800a248 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	3303      	adds	r3, #3
 800a24c:	089b      	lsrs	r3, r3, #2
 800a24e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	68d9      	ldr	r1, [r3, #12]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	b2da      	uxtb	r2, r3
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	4603      	mov	r3, r0
 800a264:	6978      	ldr	r0, [r7, #20]
 800a266:	f007 fc87 	bl	8011b78 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	68da      	ldr	r2, [r3, #12]
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	441a      	add	r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	695a      	ldr	r2, [r3, #20]
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	441a      	add	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	015a      	lsls	r2, r3, #5
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	4413      	add	r3, r2
 800a28a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a292:	69ba      	ldr	r2, [r7, #24]
 800a294:	429a      	cmp	r2, r3
 800a296:	d809      	bhi.n	800a2ac <PCD_WriteEmptyTxFifo+0xde>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	695a      	ldr	r2, [r3, #20]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d203      	bcs.n	800a2ac <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1bf      	bne.n	800a22c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	691a      	ldr	r2, [r3, #16]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	695b      	ldr	r3, [r3, #20]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d811      	bhi.n	800a2dc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	f003 030f 	and.w	r3, r3, #15
 800a2be:	2201      	movs	r2, #1
 800a2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	43db      	mvns	r3, r3
 800a2d2:	6939      	ldr	r1, [r7, #16]
 800a2d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2d8:	4013      	ands	r3, r2
 800a2da:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3720      	adds	r7, #32
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
	...

0800a2e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b088      	sub	sp, #32
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	333c      	adds	r3, #60	@ 0x3c
 800a300:	3304      	adds	r3, #4
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	015a      	lsls	r2, r3, #5
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	4413      	add	r3, r2
 800a30e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	799b      	ldrb	r3, [r3, #6]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d17b      	bne.n	800a416 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f003 0308 	and.w	r3, r3, #8
 800a324:	2b00      	cmp	r3, #0
 800a326:	d015      	beq.n	800a354 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	4a61      	ldr	r2, [pc, #388]	@ (800a4b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	f240 80b9 	bls.w	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f000 80b3 	beq.w	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	015a      	lsls	r2, r3, #5
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	4413      	add	r3, r2
 800a346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a34a:	461a      	mov	r2, r3
 800a34c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a350:	6093      	str	r3, [r2, #8]
 800a352:	e0a7      	b.n	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f003 0320 	and.w	r3, r3, #32
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d009      	beq.n	800a372 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	015a      	lsls	r2, r3, #5
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	4413      	add	r3, r2
 800a366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a36a:	461a      	mov	r2, r3
 800a36c:	2320      	movs	r3, #32
 800a36e:	6093      	str	r3, [r2, #8]
 800a370:	e098      	b.n	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f040 8093 	bne.w	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	4a4b      	ldr	r2, [pc, #300]	@ (800a4b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d90f      	bls.n	800a3a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00a      	beq.n	800a3a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a39c:	461a      	mov	r2, r3
 800a39e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3a2:	6093      	str	r3, [r2, #8]
 800a3a4:	e07e      	b.n	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	00db      	lsls	r3, r3, #3
 800a3ac:	4413      	add	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6a1a      	ldr	r2, [r3, #32]
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	0159      	lsls	r1, r3, #5
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	440b      	add	r3, r1
 800a3c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3d2:	1ad2      	subs	r2, r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d114      	bne.n	800a408 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d109      	bne.n	800a3fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6818      	ldr	r0, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	f007 fe58 	bl	80120a8 <USB_EP0_OutStart>
 800a3f8:	e006      	b.n	800a408 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	68da      	ldr	r2, [r3, #12]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	695b      	ldr	r3, [r3, #20]
 800a402:	441a      	add	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f00a f93e 	bl	8014690 <HAL_PCD_DataOutStageCallback>
 800a414:	e046      	b.n	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	4a26      	ldr	r2, [pc, #152]	@ (800a4b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d124      	bne.n	800a468 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00a      	beq.n	800a43e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	015a      	lsls	r2, r3, #5
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	4413      	add	r3, r2
 800a430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a434:	461a      	mov	r2, r3
 800a436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a43a:	6093      	str	r3, [r2, #8]
 800a43c:	e032      	b.n	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	f003 0320 	and.w	r3, r3, #32
 800a444:	2b00      	cmp	r3, #0
 800a446:	d008      	beq.n	800a45a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	015a      	lsls	r2, r3, #5
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a454:	461a      	mov	r2, r3
 800a456:	2320      	movs	r3, #32
 800a458:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f00a f915 	bl	8014690 <HAL_PCD_DataOutStageCallback>
 800a466:	e01d      	b.n	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d114      	bne.n	800a498 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a46e:	6879      	ldr	r1, [r7, #4]
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	4613      	mov	r3, r2
 800a474:	00db      	lsls	r3, r3, #3
 800a476:	4413      	add	r3, r2
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	440b      	add	r3, r1
 800a47c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d108      	bne.n	800a498 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6818      	ldr	r0, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a490:	461a      	mov	r2, r3
 800a492:	2100      	movs	r1, #0
 800a494:	f007 fe08 	bl	80120a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f00a f8f6 	bl	8014690 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3720      	adds	r7, #32
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	4f54300a 	.word	0x4f54300a
 800a4b4:	4f54310a 	.word	0x4f54310a

0800a4b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	333c      	adds	r3, #60	@ 0x3c
 800a4d0:	3304      	adds	r3, #4
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	4a15      	ldr	r2, [pc, #84]	@ (800a540 <PCD_EP_OutSetupPacket_int+0x88>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d90e      	bls.n	800a50c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d009      	beq.n	800a50c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a504:	461a      	mov	r2, r3
 800a506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a50a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f00a f8ad 	bl	801466c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	4a0a      	ldr	r2, [pc, #40]	@ (800a540 <PCD_EP_OutSetupPacket_int+0x88>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d90c      	bls.n	800a534 <PCD_EP_OutSetupPacket_int+0x7c>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	799b      	ldrb	r3, [r3, #6]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d108      	bne.n	800a534 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6818      	ldr	r0, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a52c:	461a      	mov	r2, r3
 800a52e:	2101      	movs	r1, #1
 800a530:	f007 fdba 	bl	80120a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3718      	adds	r7, #24
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	4f54300a 	.word	0x4f54300a

0800a544 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
 800a550:	4613      	mov	r3, r2
 800a552:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a55a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a55c:	78fb      	ldrb	r3, [r7, #3]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d107      	bne.n	800a572 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a562:	883b      	ldrh	r3, [r7, #0]
 800a564:	0419      	lsls	r1, r3, #16
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a570:	e028      	b.n	800a5c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a578:	0c1b      	lsrs	r3, r3, #16
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	4413      	add	r3, r2
 800a57e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a580:	2300      	movs	r3, #0
 800a582:	73fb      	strb	r3, [r7, #15]
 800a584:	e00d      	b.n	800a5a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	7bfb      	ldrb	r3, [r7, #15]
 800a58c:	3340      	adds	r3, #64	@ 0x40
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	0c1b      	lsrs	r3, r3, #16
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	4413      	add	r3, r2
 800a59a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	73fb      	strb	r3, [r7, #15]
 800a5a2:	7bfa      	ldrb	r2, [r7, #15]
 800a5a4:	78fb      	ldrb	r3, [r7, #3]
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d3ec      	bcc.n	800a586 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a5ac:	883b      	ldrh	r3, [r7, #0]
 800a5ae:	0418      	lsls	r0, r3, #16
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6819      	ldr	r1, [r3, #0]
 800a5b4:	78fb      	ldrb	r3, [r7, #3]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	4302      	orrs	r2, r0
 800a5bc:	3340      	adds	r3, #64	@ 0x40
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	440b      	add	r3, r1
 800a5c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	887a      	ldrh	r2, [r7, #2]
 800a5e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	699b      	ldr	r3, [r3, #24]
 800a616:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a622:	4b05      	ldr	r3, [pc, #20]	@ (800a638 <HAL_PCDEx_ActivateLPM+0x44>)
 800a624:	4313      	orrs	r3, r2
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	10000003 	.word	0x10000003

0800a63c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a65c:	4b19      	ldr	r3, [pc, #100]	@ (800a6c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	f003 0304 	and.w	r3, r3, #4
 800a664:	2b04      	cmp	r3, #4
 800a666:	d00a      	beq.n	800a67e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a668:	4b16      	ldr	r3, [pc, #88]	@ (800a6c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	f003 0307 	and.w	r3, r3, #7
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	429a      	cmp	r2, r3
 800a674:	d001      	beq.n	800a67a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e01f      	b.n	800a6ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	e01d      	b.n	800a6ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a67e:	4b11      	ldr	r3, [pc, #68]	@ (800a6c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	f023 0207 	bic.w	r2, r3, #7
 800a686:	490f      	ldr	r1, [pc, #60]	@ (800a6c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a68e:	f7fa f97d 	bl	800498c <HAL_GetTick>
 800a692:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a694:	e009      	b.n	800a6aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a696:	f7fa f979 	bl	800498c <HAL_GetTick>
 800a69a:	4602      	mov	r2, r0
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a6a4:	d901      	bls.n	800a6aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e007      	b.n	800a6ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a6aa:	4b06      	ldr	r3, [pc, #24]	@ (800a6c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6b6:	d1ee      	bne.n	800a696 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	58024800 	.word	0x58024800

0800a6c8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a6cc:	4b05      	ldr	r3, [pc, #20]	@ (800a6e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	4a04      	ldr	r2, [pc, #16]	@ (800a6e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a6d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a6d6:	60d3      	str	r3, [r2, #12]
}
 800a6d8:	bf00      	nop
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	58024800 	.word	0x58024800

0800a6e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b08c      	sub	sp, #48	@ 0x30
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d101      	bne.n	800a6fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e3c8      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 8087 	beq.w	800a816 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a708:	4b88      	ldr	r3, [pc, #544]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a710:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a712:	4b86      	ldr	r3, [pc, #536]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a716:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a71a:	2b10      	cmp	r3, #16
 800a71c:	d007      	beq.n	800a72e <HAL_RCC_OscConfig+0x46>
 800a71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a720:	2b18      	cmp	r3, #24
 800a722:	d110      	bne.n	800a746 <HAL_RCC_OscConfig+0x5e>
 800a724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a726:	f003 0303 	and.w	r3, r3, #3
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d10b      	bne.n	800a746 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a72e:	4b7f      	ldr	r3, [pc, #508]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a736:	2b00      	cmp	r3, #0
 800a738:	d06c      	beq.n	800a814 <HAL_RCC_OscConfig+0x12c>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d168      	bne.n	800a814 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e3a2      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a74e:	d106      	bne.n	800a75e <HAL_RCC_OscConfig+0x76>
 800a750:	4b76      	ldr	r3, [pc, #472]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a75      	ldr	r2, [pc, #468]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a75a:	6013      	str	r3, [r2, #0]
 800a75c:	e02e      	b.n	800a7bc <HAL_RCC_OscConfig+0xd4>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d10c      	bne.n	800a780 <HAL_RCC_OscConfig+0x98>
 800a766:	4b71      	ldr	r3, [pc, #452]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a70      	ldr	r2, [pc, #448]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a76c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a770:	6013      	str	r3, [r2, #0]
 800a772:	4b6e      	ldr	r3, [pc, #440]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a6d      	ldr	r2, [pc, #436]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a778:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	e01d      	b.n	800a7bc <HAL_RCC_OscConfig+0xd4>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a788:	d10c      	bne.n	800a7a4 <HAL_RCC_OscConfig+0xbc>
 800a78a:	4b68      	ldr	r3, [pc, #416]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a67      	ldr	r2, [pc, #412]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a794:	6013      	str	r3, [r2, #0]
 800a796:	4b65      	ldr	r3, [pc, #404]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a64      	ldr	r2, [pc, #400]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a79c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	e00b      	b.n	800a7bc <HAL_RCC_OscConfig+0xd4>
 800a7a4:	4b61      	ldr	r3, [pc, #388]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a60      	ldr	r2, [pc, #384]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a7aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	4b5e      	ldr	r3, [pc, #376]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a5d      	ldr	r2, [pc, #372]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a7b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a7ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d013      	beq.n	800a7ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7c4:	f7fa f8e2 	bl	800498c <HAL_GetTick>
 800a7c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7ca:	e008      	b.n	800a7de <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7cc:	f7fa f8de 	bl	800498c <HAL_GetTick>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	2b64      	cmp	r3, #100	@ 0x64
 800a7d8:	d901      	bls.n	800a7de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	e356      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7de:	4b53      	ldr	r3, [pc, #332]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d0f0      	beq.n	800a7cc <HAL_RCC_OscConfig+0xe4>
 800a7ea:	e014      	b.n	800a816 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ec:	f7fa f8ce 	bl	800498c <HAL_GetTick>
 800a7f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a7f2:	e008      	b.n	800a806 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7f4:	f7fa f8ca 	bl	800498c <HAL_GetTick>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	2b64      	cmp	r3, #100	@ 0x64
 800a800:	d901      	bls.n	800a806 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	e342      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a806:	4b49      	ldr	r3, [pc, #292]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1f0      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x10c>
 800a812:	e000      	b.n	800a816 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 0302 	and.w	r3, r3, #2
 800a81e:	2b00      	cmp	r3, #0
 800a820:	f000 808c 	beq.w	800a93c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a824:	4b41      	ldr	r3, [pc, #260]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a82c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a82e:	4b3f      	ldr	r3, [pc, #252]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a832:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d007      	beq.n	800a84a <HAL_RCC_OscConfig+0x162>
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	2b18      	cmp	r3, #24
 800a83e:	d137      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x1c8>
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	f003 0303 	and.w	r3, r3, #3
 800a846:	2b00      	cmp	r3, #0
 800a848:	d132      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a84a:	4b38      	ldr	r3, [pc, #224]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f003 0304 	and.w	r3, r3, #4
 800a852:	2b00      	cmp	r3, #0
 800a854:	d005      	beq.n	800a862 <HAL_RCC_OscConfig+0x17a>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d101      	bne.n	800a862 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e314      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a862:	4b32      	ldr	r3, [pc, #200]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f023 0219 	bic.w	r2, r3, #25
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	492f      	ldr	r1, [pc, #188]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a870:	4313      	orrs	r3, r2
 800a872:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a874:	f7fa f88a 	bl	800498c <HAL_GetTick>
 800a878:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a87a:	e008      	b.n	800a88e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a87c:	f7fa f886 	bl	800498c <HAL_GetTick>
 800a880:	4602      	mov	r2, r0
 800a882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	2b02      	cmp	r3, #2
 800a888:	d901      	bls.n	800a88e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a88a:	2303      	movs	r3, #3
 800a88c:	e2fe      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a88e:	4b27      	ldr	r3, [pc, #156]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 0304 	and.w	r3, r3, #4
 800a896:	2b00      	cmp	r3, #0
 800a898:	d0f0      	beq.n	800a87c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a89a:	4b24      	ldr	r3, [pc, #144]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	061b      	lsls	r3, r3, #24
 800a8a8:	4920      	ldr	r1, [pc, #128]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8ae:	e045      	b.n	800a93c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d026      	beq.n	800a906 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a8b8:	4b1c      	ldr	r3, [pc, #112]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f023 0219 	bic.w	r2, r3, #25
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	4919      	ldr	r1, [pc, #100]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ca:	f7fa f85f 	bl	800498c <HAL_GetTick>
 800a8ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8d0:	e008      	b.n	800a8e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8d2:	f7fa f85b 	bl	800498c <HAL_GetTick>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d901      	bls.n	800a8e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	e2d3      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8e4:	4b11      	ldr	r3, [pc, #68]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 0304 	and.w	r3, r3, #4
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d0f0      	beq.n	800a8d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	061b      	lsls	r3, r3, #24
 800a8fe:	490b      	ldr	r1, [pc, #44]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a900:	4313      	orrs	r3, r2
 800a902:	604b      	str	r3, [r1, #4]
 800a904:	e01a      	b.n	800a93c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a906:	4b09      	ldr	r3, [pc, #36]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a08      	ldr	r2, [pc, #32]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a90c:	f023 0301 	bic.w	r3, r3, #1
 800a910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a912:	f7fa f83b 	bl	800498c <HAL_GetTick>
 800a916:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a918:	e00a      	b.n	800a930 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a91a:	f7fa f837 	bl	800498c <HAL_GetTick>
 800a91e:	4602      	mov	r2, r0
 800a920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	2b02      	cmp	r3, #2
 800a926:	d903      	bls.n	800a930 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e2af      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
 800a92c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a930:	4b96      	ldr	r3, [pc, #600]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0304 	and.w	r3, r3, #4
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1ee      	bne.n	800a91a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 0310 	and.w	r3, r3, #16
 800a944:	2b00      	cmp	r3, #0
 800a946:	d06a      	beq.n	800aa1e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a948:	4b90      	ldr	r3, [pc, #576]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a950:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a952:	4b8e      	ldr	r3, [pc, #568]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a956:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	2b08      	cmp	r3, #8
 800a95c:	d007      	beq.n	800a96e <HAL_RCC_OscConfig+0x286>
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b18      	cmp	r3, #24
 800a962:	d11b      	bne.n	800a99c <HAL_RCC_OscConfig+0x2b4>
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f003 0303 	and.w	r3, r3, #3
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d116      	bne.n	800a99c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a96e:	4b87      	ldr	r3, [pc, #540]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a976:	2b00      	cmp	r3, #0
 800a978:	d005      	beq.n	800a986 <HAL_RCC_OscConfig+0x29e>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	2b80      	cmp	r3, #128	@ 0x80
 800a980:	d001      	beq.n	800a986 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	e282      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a986:	4b81      	ldr	r3, [pc, #516]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	061b      	lsls	r3, r3, #24
 800a994:	497d      	ldr	r1, [pc, #500]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a996:	4313      	orrs	r3, r2
 800a998:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a99a:	e040      	b.n	800aa1e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	69db      	ldr	r3, [r3, #28]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d023      	beq.n	800a9ec <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a9a4:	4b79      	ldr	r3, [pc, #484]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a78      	ldr	r2, [pc, #480]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a9aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9b0:	f7f9 ffec 	bl	800498c <HAL_GetTick>
 800a9b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9b6:	e008      	b.n	800a9ca <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a9b8:	f7f9 ffe8 	bl	800498c <HAL_GetTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d901      	bls.n	800a9ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e260      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9ca:	4b70      	ldr	r3, [pc, #448]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d0f0      	beq.n	800a9b8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9d6:	4b6d      	ldr	r3, [pc, #436]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a1b      	ldr	r3, [r3, #32]
 800a9e2:	061b      	lsls	r3, r3, #24
 800a9e4:	4969      	ldr	r1, [pc, #420]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	60cb      	str	r3, [r1, #12]
 800a9ea:	e018      	b.n	800aa1e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a9ec:	4b67      	ldr	r3, [pc, #412]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a66      	ldr	r2, [pc, #408]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a9f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9f8:	f7f9 ffc8 	bl	800498c <HAL_GetTick>
 800a9fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a9fe:	e008      	b.n	800aa12 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aa00:	f7f9 ffc4 	bl	800498c <HAL_GetTick>
 800aa04:	4602      	mov	r2, r0
 800aa06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d901      	bls.n	800aa12 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	e23c      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa12:	4b5e      	ldr	r3, [pc, #376]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1f0      	bne.n	800aa00 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0308 	and.w	r3, r3, #8
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d036      	beq.n	800aa98 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d019      	beq.n	800aa66 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa32:	4b56      	ldr	r3, [pc, #344]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aa34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa36:	4a55      	ldr	r2, [pc, #340]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aa38:	f043 0301 	orr.w	r3, r3, #1
 800aa3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa3e:	f7f9 ffa5 	bl	800498c <HAL_GetTick>
 800aa42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa44:	e008      	b.n	800aa58 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa46:	f7f9 ffa1 	bl	800498c <HAL_GetTick>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d901      	bls.n	800aa58 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800aa54:	2303      	movs	r3, #3
 800aa56:	e219      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa58:	4b4c      	ldr	r3, [pc, #304]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aa5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa5c:	f003 0302 	and.w	r3, r3, #2
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0f0      	beq.n	800aa46 <HAL_RCC_OscConfig+0x35e>
 800aa64:	e018      	b.n	800aa98 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa66:	4b49      	ldr	r3, [pc, #292]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aa68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa6a:	4a48      	ldr	r2, [pc, #288]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aa6c:	f023 0301 	bic.w	r3, r3, #1
 800aa70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa72:	f7f9 ff8b 	bl	800498c <HAL_GetTick>
 800aa76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa78:	e008      	b.n	800aa8c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa7a:	f7f9 ff87 	bl	800498c <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d901      	bls.n	800aa8c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e1ff      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa8c:	4b3f      	ldr	r3, [pc, #252]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aa8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa90:	f003 0302 	and.w	r3, r3, #2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d1f0      	bne.n	800aa7a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0320 	and.w	r3, r3, #32
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d036      	beq.n	800ab12 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d019      	beq.n	800aae0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aaac:	4b37      	ldr	r3, [pc, #220]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a36      	ldr	r2, [pc, #216]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aab2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800aab6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aab8:	f7f9 ff68 	bl	800498c <HAL_GetTick>
 800aabc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aabe:	e008      	b.n	800aad2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aac0:	f7f9 ff64 	bl	800498c <HAL_GetTick>
 800aac4:	4602      	mov	r2, r0
 800aac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d901      	bls.n	800aad2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	e1dc      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aad2:	4b2e      	ldr	r3, [pc, #184]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0f0      	beq.n	800aac0 <HAL_RCC_OscConfig+0x3d8>
 800aade:	e018      	b.n	800ab12 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aae0:	4b2a      	ldr	r3, [pc, #168]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a29      	ldr	r2, [pc, #164]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aae6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aaea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aaec:	f7f9 ff4e 	bl	800498c <HAL_GetTick>
 800aaf0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aaf2:	e008      	b.n	800ab06 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aaf4:	f7f9 ff4a 	bl	800498c <HAL_GetTick>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d901      	bls.n	800ab06 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e1c2      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab06:	4b21      	ldr	r3, [pc, #132]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1f0      	bne.n	800aaf4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0304 	and.w	r3, r3, #4
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f000 8086 	beq.w	800ac2c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab20:	4b1b      	ldr	r3, [pc, #108]	@ (800ab90 <HAL_RCC_OscConfig+0x4a8>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a1a      	ldr	r2, [pc, #104]	@ (800ab90 <HAL_RCC_OscConfig+0x4a8>)
 800ab26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab2c:	f7f9 ff2e 	bl	800498c <HAL_GetTick>
 800ab30:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab32:	e008      	b.n	800ab46 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab34:	f7f9 ff2a 	bl	800498c <HAL_GetTick>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	2b64      	cmp	r3, #100	@ 0x64
 800ab40:	d901      	bls.n	800ab46 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e1a2      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab46:	4b12      	ldr	r3, [pc, #72]	@ (800ab90 <HAL_RCC_OscConfig+0x4a8>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d0f0      	beq.n	800ab34 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d106      	bne.n	800ab68 <HAL_RCC_OscConfig+0x480>
 800ab5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800ab5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab5e:	4a0b      	ldr	r2, [pc, #44]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800ab60:	f043 0301 	orr.w	r3, r3, #1
 800ab64:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab66:	e032      	b.n	800abce <HAL_RCC_OscConfig+0x4e6>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d111      	bne.n	800ab94 <HAL_RCC_OscConfig+0x4ac>
 800ab70:	4b06      	ldr	r3, [pc, #24]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800ab72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab74:	4a05      	ldr	r2, [pc, #20]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800ab76:	f023 0301 	bic.w	r3, r3, #1
 800ab7a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab7c:	4b03      	ldr	r3, [pc, #12]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800ab7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab80:	4a02      	ldr	r2, [pc, #8]	@ (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800ab82:	f023 0304 	bic.w	r3, r3, #4
 800ab86:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab88:	e021      	b.n	800abce <HAL_RCC_OscConfig+0x4e6>
 800ab8a:	bf00      	nop
 800ab8c:	58024400 	.word	0x58024400
 800ab90:	58024800 	.word	0x58024800
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	2b05      	cmp	r3, #5
 800ab9a:	d10c      	bne.n	800abb6 <HAL_RCC_OscConfig+0x4ce>
 800ab9c:	4b83      	ldr	r3, [pc, #524]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ab9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aba0:	4a82      	ldr	r2, [pc, #520]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800aba2:	f043 0304 	orr.w	r3, r3, #4
 800aba6:	6713      	str	r3, [r2, #112]	@ 0x70
 800aba8:	4b80      	ldr	r3, [pc, #512]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800abaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abac:	4a7f      	ldr	r2, [pc, #508]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800abae:	f043 0301 	orr.w	r3, r3, #1
 800abb2:	6713      	str	r3, [r2, #112]	@ 0x70
 800abb4:	e00b      	b.n	800abce <HAL_RCC_OscConfig+0x4e6>
 800abb6:	4b7d      	ldr	r3, [pc, #500]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800abb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abba:	4a7c      	ldr	r2, [pc, #496]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800abbc:	f023 0301 	bic.w	r3, r3, #1
 800abc0:	6713      	str	r3, [r2, #112]	@ 0x70
 800abc2:	4b7a      	ldr	r3, [pc, #488]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800abc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abc6:	4a79      	ldr	r2, [pc, #484]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800abc8:	f023 0304 	bic.w	r3, r3, #4
 800abcc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d015      	beq.n	800ac02 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abd6:	f7f9 fed9 	bl	800498c <HAL_GetTick>
 800abda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abdc:	e00a      	b.n	800abf4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abde:	f7f9 fed5 	bl	800498c <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abec:	4293      	cmp	r3, r2
 800abee:	d901      	bls.n	800abf4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e14b      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abf4:	4b6d      	ldr	r3, [pc, #436]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800abf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abf8:	f003 0302 	and.w	r3, r3, #2
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d0ee      	beq.n	800abde <HAL_RCC_OscConfig+0x4f6>
 800ac00:	e014      	b.n	800ac2c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac02:	f7f9 fec3 	bl	800498c <HAL_GetTick>
 800ac06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac08:	e00a      	b.n	800ac20 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac0a:	f7f9 febf 	bl	800498c <HAL_GetTick>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d901      	bls.n	800ac20 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e135      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac20:	4b62      	ldr	r3, [pc, #392]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ac22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac24:	f003 0302 	and.w	r3, r3, #2
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1ee      	bne.n	800ac0a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f000 812a 	beq.w	800ae8a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ac36:	4b5d      	ldr	r3, [pc, #372]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac3e:	2b18      	cmp	r3, #24
 800ac40:	f000 80ba 	beq.w	800adb8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	f040 8095 	bne.w	800ad78 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac4e:	4b57      	ldr	r3, [pc, #348]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a56      	ldr	r2, [pc, #344]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ac54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac5a:	f7f9 fe97 	bl	800498c <HAL_GetTick>
 800ac5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac60:	e008      	b.n	800ac74 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac62:	f7f9 fe93 	bl	800498c <HAL_GetTick>
 800ac66:	4602      	mov	r2, r0
 800ac68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d901      	bls.n	800ac74 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e10b      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac74:	4b4d      	ldr	r3, [pc, #308]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1f0      	bne.n	800ac62 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac80:	4b4a      	ldr	r3, [pc, #296]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ac82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac84:	4b4a      	ldr	r3, [pc, #296]	@ (800adb0 <HAL_RCC_OscConfig+0x6c8>)
 800ac86:	4013      	ands	r3, r2
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ac90:	0112      	lsls	r2, r2, #4
 800ac92:	430a      	orrs	r2, r1
 800ac94:	4945      	ldr	r1, [pc, #276]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ac96:	4313      	orrs	r3, r2
 800ac98:	628b      	str	r3, [r1, #40]	@ 0x28
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aca8:	3b01      	subs	r3, #1
 800acaa:	025b      	lsls	r3, r3, #9
 800acac:	b29b      	uxth	r3, r3
 800acae:	431a      	orrs	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acb4:	3b01      	subs	r3, #1
 800acb6:	041b      	lsls	r3, r3, #16
 800acb8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800acbc:	431a      	orrs	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acc2:	3b01      	subs	r3, #1
 800acc4:	061b      	lsls	r3, r3, #24
 800acc6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800acca:	4938      	ldr	r1, [pc, #224]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800accc:	4313      	orrs	r3, r2
 800acce:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800acd0:	4b36      	ldr	r3, [pc, #216]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800acd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd4:	4a35      	ldr	r2, [pc, #212]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800acd6:	f023 0301 	bic.w	r3, r3, #1
 800acda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800acdc:	4b33      	ldr	r3, [pc, #204]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800acde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ace0:	4b34      	ldr	r3, [pc, #208]	@ (800adb4 <HAL_RCC_OscConfig+0x6cc>)
 800ace2:	4013      	ands	r3, r2
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ace8:	00d2      	lsls	r2, r2, #3
 800acea:	4930      	ldr	r1, [pc, #192]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800acec:	4313      	orrs	r3, r2
 800acee:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800acf0:	4b2e      	ldr	r3, [pc, #184]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800acf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acf4:	f023 020c 	bic.w	r2, r3, #12
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acfc:	492b      	ldr	r1, [pc, #172]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800acfe:	4313      	orrs	r3, r2
 800ad00:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ad02:	4b2a      	ldr	r3, [pc, #168]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad06:	f023 0202 	bic.w	r2, r3, #2
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad0e:	4927      	ldr	r1, [pc, #156]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad10:	4313      	orrs	r3, r2
 800ad12:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad14:	4b25      	ldr	r3, [pc, #148]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad18:	4a24      	ldr	r2, [pc, #144]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad20:	4b22      	ldr	r3, [pc, #136]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad24:	4a21      	ldr	r2, [pc, #132]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ad2c:	4b1f      	ldr	r3, [pc, #124]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad30:	4a1e      	ldr	r2, [pc, #120]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ad36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ad38:	4b1c      	ldr	r3, [pc, #112]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad3c:	4a1b      	ldr	r2, [pc, #108]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad3e:	f043 0301 	orr.w	r3, r3, #1
 800ad42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad44:	4b19      	ldr	r3, [pc, #100]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a18      	ldr	r2, [pc, #96]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ad4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad50:	f7f9 fe1c 	bl	800498c <HAL_GetTick>
 800ad54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad56:	e008      	b.n	800ad6a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad58:	f7f9 fe18 	bl	800498c <HAL_GetTick>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	d901      	bls.n	800ad6a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ad66:	2303      	movs	r3, #3
 800ad68:	e090      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad6a:	4b10      	ldr	r3, [pc, #64]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d0f0      	beq.n	800ad58 <HAL_RCC_OscConfig+0x670>
 800ad76:	e088      	b.n	800ae8a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad78:	4b0c      	ldr	r3, [pc, #48]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a0b      	ldr	r2, [pc, #44]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ad82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad84:	f7f9 fe02 	bl	800498c <HAL_GetTick>
 800ad88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad8a:	e008      	b.n	800ad9e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad8c:	f7f9 fdfe 	bl	800498c <HAL_GetTick>
 800ad90:	4602      	mov	r2, r0
 800ad92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d901      	bls.n	800ad9e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e076      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad9e:	4b03      	ldr	r3, [pc, #12]	@ (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1f0      	bne.n	800ad8c <HAL_RCC_OscConfig+0x6a4>
 800adaa:	e06e      	b.n	800ae8a <HAL_RCC_OscConfig+0x7a2>
 800adac:	58024400 	.word	0x58024400
 800adb0:	fffffc0c 	.word	0xfffffc0c
 800adb4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800adb8:	4b36      	ldr	r3, [pc, #216]	@ (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800adba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800adbe:	4b35      	ldr	r3, [pc, #212]	@ (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800adc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d031      	beq.n	800ae30 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	f003 0203 	and.w	r2, r3, #3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800add6:	429a      	cmp	r2, r3
 800add8:	d12a      	bne.n	800ae30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	091b      	lsrs	r3, r3, #4
 800adde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d122      	bne.n	800ae30 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adf4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d11a      	bne.n	800ae30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	0a5b      	lsrs	r3, r3, #9
 800adfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae06:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d111      	bne.n	800ae30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	0c1b      	lsrs	r3, r3, #16
 800ae10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae18:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d108      	bne.n	800ae30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	0e1b      	lsrs	r3, r3, #24
 800ae22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d001      	beq.n	800ae34 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e02b      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ae34:	4b17      	ldr	r3, [pc, #92]	@ (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800ae36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae38:	08db      	lsrs	r3, r3, #3
 800ae3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae3e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d01f      	beq.n	800ae8a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ae4a:	4b12      	ldr	r3, [pc, #72]	@ (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800ae4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae4e:	4a11      	ldr	r2, [pc, #68]	@ (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800ae50:	f023 0301 	bic.w	r3, r3, #1
 800ae54:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ae56:	f7f9 fd99 	bl	800498c <HAL_GetTick>
 800ae5a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ae5c:	bf00      	nop
 800ae5e:	f7f9 fd95 	bl	800498c <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d0f9      	beq.n	800ae5e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ae6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800ae6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae98 <HAL_RCC_OscConfig+0x7b0>)
 800ae70:	4013      	ands	r3, r2
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ae76:	00d2      	lsls	r2, r2, #3
 800ae78:	4906      	ldr	r1, [pc, #24]	@ (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ae7e:	4b05      	ldr	r3, [pc, #20]	@ (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800ae80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae82:	4a04      	ldr	r2, [pc, #16]	@ (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800ae84:	f043 0301 	orr.w	r3, r3, #1
 800ae88:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3730      	adds	r7, #48	@ 0x30
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	58024400 	.word	0x58024400
 800ae98:	ffff0007 	.word	0xffff0007

0800ae9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	e19c      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aeb0:	4b8a      	ldr	r3, [pc, #552]	@ (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 030f 	and.w	r3, r3, #15
 800aeb8:	683a      	ldr	r2, [r7, #0]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d910      	bls.n	800aee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aebe:	4b87      	ldr	r3, [pc, #540]	@ (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f023 020f 	bic.w	r2, r3, #15
 800aec6:	4985      	ldr	r1, [pc, #532]	@ (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aece:	4b83      	ldr	r3, [pc, #524]	@ (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 030f 	and.w	r3, r3, #15
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d001      	beq.n	800aee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	e184      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 0304 	and.w	r3, r3, #4
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d010      	beq.n	800af0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	691a      	ldr	r2, [r3, #16]
 800aef0:	4b7b      	ldr	r3, [pc, #492]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d908      	bls.n	800af0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aefc:	4b78      	ldr	r3, [pc, #480]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	4975      	ldr	r1, [pc, #468]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af0a:	4313      	orrs	r3, r2
 800af0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f003 0308 	and.w	r3, r3, #8
 800af16:	2b00      	cmp	r3, #0
 800af18:	d010      	beq.n	800af3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	695a      	ldr	r2, [r3, #20]
 800af1e:	4b70      	ldr	r3, [pc, #448]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af20:	69db      	ldr	r3, [r3, #28]
 800af22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af26:	429a      	cmp	r2, r3
 800af28:	d908      	bls.n	800af3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af2a:	4b6d      	ldr	r3, [pc, #436]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af2c:	69db      	ldr	r3, [r3, #28]
 800af2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	496a      	ldr	r1, [pc, #424]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af38:	4313      	orrs	r3, r2
 800af3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0310 	and.w	r3, r3, #16
 800af44:	2b00      	cmp	r3, #0
 800af46:	d010      	beq.n	800af6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	699a      	ldr	r2, [r3, #24]
 800af4c:	4b64      	ldr	r3, [pc, #400]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af4e:	69db      	ldr	r3, [r3, #28]
 800af50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800af54:	429a      	cmp	r2, r3
 800af56:	d908      	bls.n	800af6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af58:	4b61      	ldr	r3, [pc, #388]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af5a:	69db      	ldr	r3, [r3, #28]
 800af5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	495e      	ldr	r1, [pc, #376]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af66:	4313      	orrs	r3, r2
 800af68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 0320 	and.w	r3, r3, #32
 800af72:	2b00      	cmp	r3, #0
 800af74:	d010      	beq.n	800af98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	69da      	ldr	r2, [r3, #28]
 800af7a:	4b59      	ldr	r3, [pc, #356]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af7c:	6a1b      	ldr	r3, [r3, #32]
 800af7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af82:	429a      	cmp	r2, r3
 800af84:	d908      	bls.n	800af98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800af86:	4b56      	ldr	r3, [pc, #344]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	69db      	ldr	r3, [r3, #28]
 800af92:	4953      	ldr	r1, [pc, #332]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af94:	4313      	orrs	r3, r2
 800af96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 0302 	and.w	r3, r3, #2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d010      	beq.n	800afc6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	68da      	ldr	r2, [r3, #12]
 800afa8:	4b4d      	ldr	r3, [pc, #308]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	f003 030f 	and.w	r3, r3, #15
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d908      	bls.n	800afc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afb4:	4b4a      	ldr	r3, [pc, #296]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800afb6:	699b      	ldr	r3, [r3, #24]
 800afb8:	f023 020f 	bic.w	r2, r3, #15
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	4947      	ldr	r1, [pc, #284]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800afc2:	4313      	orrs	r3, r2
 800afc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f003 0301 	and.w	r3, r3, #1
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d055      	beq.n	800b07e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800afd2:	4b43      	ldr	r3, [pc, #268]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	4940      	ldr	r1, [pc, #256]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800afe0:	4313      	orrs	r3, r2
 800afe2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d107      	bne.n	800affc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800afec:	4b3c      	ldr	r3, [pc, #240]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d121      	bne.n	800b03c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e0f6      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	2b03      	cmp	r3, #3
 800b002:	d107      	bne.n	800b014 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b004:	4b36      	ldr	r3, [pc, #216]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d115      	bne.n	800b03c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e0ea      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d107      	bne.n	800b02c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b01c:	4b30      	ldr	r3, [pc, #192]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b024:	2b00      	cmp	r3, #0
 800b026:	d109      	bne.n	800b03c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	e0de      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b02c:	4b2c      	ldr	r3, [pc, #176]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 0304 	and.w	r3, r3, #4
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e0d6      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b03c:	4b28      	ldr	r3, [pc, #160]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	f023 0207 	bic.w	r2, r3, #7
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	4925      	ldr	r1, [pc, #148]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b04a:	4313      	orrs	r3, r2
 800b04c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b04e:	f7f9 fc9d 	bl	800498c <HAL_GetTick>
 800b052:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b054:	e00a      	b.n	800b06c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b056:	f7f9 fc99 	bl	800498c <HAL_GetTick>
 800b05a:	4602      	mov	r2, r0
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b064:	4293      	cmp	r3, r2
 800b066:	d901      	bls.n	800b06c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b068:	2303      	movs	r3, #3
 800b06a:	e0be      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b06c:	4b1c      	ldr	r3, [pc, #112]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	00db      	lsls	r3, r3, #3
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d1eb      	bne.n	800b056 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f003 0302 	and.w	r3, r3, #2
 800b086:	2b00      	cmp	r3, #0
 800b088:	d010      	beq.n	800b0ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68da      	ldr	r2, [r3, #12]
 800b08e:	4b14      	ldr	r3, [pc, #80]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b090:	699b      	ldr	r3, [r3, #24]
 800b092:	f003 030f 	and.w	r3, r3, #15
 800b096:	429a      	cmp	r2, r3
 800b098:	d208      	bcs.n	800b0ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b09a:	4b11      	ldr	r3, [pc, #68]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	f023 020f 	bic.w	r2, r3, #15
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	490e      	ldr	r1, [pc, #56]	@ (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b0ac:	4b0b      	ldr	r3, [pc, #44]	@ (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 030f 	and.w	r3, r3, #15
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d214      	bcs.n	800b0e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0ba:	4b08      	ldr	r3, [pc, #32]	@ (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f023 020f 	bic.w	r2, r3, #15
 800b0c2:	4906      	ldr	r1, [pc, #24]	@ (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0ca:	4b04      	ldr	r3, [pc, #16]	@ (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 030f 	and.w	r3, r3, #15
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d005      	beq.n	800b0e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e086      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>
 800b0dc:	52002000 	.word	0x52002000
 800b0e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d010      	beq.n	800b112 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	691a      	ldr	r2, [r3, #16]
 800b0f4:	4b3f      	ldr	r3, [pc, #252]	@ (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b0f6:	699b      	ldr	r3, [r3, #24]
 800b0f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d208      	bcs.n	800b112 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b100:	4b3c      	ldr	r3, [pc, #240]	@ (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	691b      	ldr	r3, [r3, #16]
 800b10c:	4939      	ldr	r1, [pc, #228]	@ (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 0308 	and.w	r3, r3, #8
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d010      	beq.n	800b140 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	695a      	ldr	r2, [r3, #20]
 800b122:	4b34      	ldr	r3, [pc, #208]	@ (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b124:	69db      	ldr	r3, [r3, #28]
 800b126:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d208      	bcs.n	800b140 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b12e:	4b31      	ldr	r3, [pc, #196]	@ (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b130:	69db      	ldr	r3, [r3, #28]
 800b132:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	492e      	ldr	r1, [pc, #184]	@ (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b13c:	4313      	orrs	r3, r2
 800b13e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f003 0310 	and.w	r3, r3, #16
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d010      	beq.n	800b16e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	699a      	ldr	r2, [r3, #24]
 800b150:	4b28      	ldr	r3, [pc, #160]	@ (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b152:	69db      	ldr	r3, [r3, #28]
 800b154:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b158:	429a      	cmp	r2, r3
 800b15a:	d208      	bcs.n	800b16e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b15c:	4b25      	ldr	r3, [pc, #148]	@ (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b15e:	69db      	ldr	r3, [r3, #28]
 800b160:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	699b      	ldr	r3, [r3, #24]
 800b168:	4922      	ldr	r1, [pc, #136]	@ (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b16a:	4313      	orrs	r3, r2
 800b16c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0320 	and.w	r3, r3, #32
 800b176:	2b00      	cmp	r3, #0
 800b178:	d010      	beq.n	800b19c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	69da      	ldr	r2, [r3, #28]
 800b17e:	4b1d      	ldr	r3, [pc, #116]	@ (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b180:	6a1b      	ldr	r3, [r3, #32]
 800b182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b186:	429a      	cmp	r2, r3
 800b188:	d208      	bcs.n	800b19c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b18a:	4b1a      	ldr	r3, [pc, #104]	@ (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	4917      	ldr	r1, [pc, #92]	@ (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b198:	4313      	orrs	r3, r2
 800b19a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b19c:	f000 f834 	bl	800b208 <HAL_RCC_GetSysClockFreq>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	4b14      	ldr	r3, [pc, #80]	@ (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	0a1b      	lsrs	r3, r3, #8
 800b1a8:	f003 030f 	and.w	r3, r3, #15
 800b1ac:	4912      	ldr	r1, [pc, #72]	@ (800b1f8 <HAL_RCC_ClockConfig+0x35c>)
 800b1ae:	5ccb      	ldrb	r3, [r1, r3]
 800b1b0:	f003 031f 	and.w	r3, r3, #31
 800b1b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b1ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b1bc:	699b      	ldr	r3, [r3, #24]
 800b1be:	f003 030f 	and.w	r3, r3, #15
 800b1c2:	4a0d      	ldr	r2, [pc, #52]	@ (800b1f8 <HAL_RCC_ClockConfig+0x35c>)
 800b1c4:	5cd3      	ldrb	r3, [r2, r3]
 800b1c6:	f003 031f 	and.w	r3, r3, #31
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b1d0:	4a0a      	ldr	r2, [pc, #40]	@ (800b1fc <HAL_RCC_ClockConfig+0x360>)
 800b1d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b1d4:	4a0a      	ldr	r2, [pc, #40]	@ (800b200 <HAL_RCC_ClockConfig+0x364>)
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b1da:	4b0a      	ldr	r3, [pc, #40]	@ (800b204 <HAL_RCC_ClockConfig+0x368>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7f9 fb8a 	bl	80048f8 <HAL_InitTick>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3718      	adds	r7, #24
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	58024400 	.word	0x58024400
 800b1f8:	08019ae4 	.word	0x08019ae4
 800b1fc:	24000004 	.word	0x24000004
 800b200:	24000000 	.word	0x24000000
 800b204:	24000008 	.word	0x24000008

0800b208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b208:	b480      	push	{r7}
 800b20a:	b089      	sub	sp, #36	@ 0x24
 800b20c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b20e:	4bb3      	ldr	r3, [pc, #716]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b216:	2b18      	cmp	r3, #24
 800b218:	f200 8155 	bhi.w	800b4c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800b21c:	a201      	add	r2, pc, #4	@ (adr r2, 800b224 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b222:	bf00      	nop
 800b224:	0800b289 	.word	0x0800b289
 800b228:	0800b4c7 	.word	0x0800b4c7
 800b22c:	0800b4c7 	.word	0x0800b4c7
 800b230:	0800b4c7 	.word	0x0800b4c7
 800b234:	0800b4c7 	.word	0x0800b4c7
 800b238:	0800b4c7 	.word	0x0800b4c7
 800b23c:	0800b4c7 	.word	0x0800b4c7
 800b240:	0800b4c7 	.word	0x0800b4c7
 800b244:	0800b2af 	.word	0x0800b2af
 800b248:	0800b4c7 	.word	0x0800b4c7
 800b24c:	0800b4c7 	.word	0x0800b4c7
 800b250:	0800b4c7 	.word	0x0800b4c7
 800b254:	0800b4c7 	.word	0x0800b4c7
 800b258:	0800b4c7 	.word	0x0800b4c7
 800b25c:	0800b4c7 	.word	0x0800b4c7
 800b260:	0800b4c7 	.word	0x0800b4c7
 800b264:	0800b2b5 	.word	0x0800b2b5
 800b268:	0800b4c7 	.word	0x0800b4c7
 800b26c:	0800b4c7 	.word	0x0800b4c7
 800b270:	0800b4c7 	.word	0x0800b4c7
 800b274:	0800b4c7 	.word	0x0800b4c7
 800b278:	0800b4c7 	.word	0x0800b4c7
 800b27c:	0800b4c7 	.word	0x0800b4c7
 800b280:	0800b4c7 	.word	0x0800b4c7
 800b284:	0800b2bb 	.word	0x0800b2bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b288:	4b94      	ldr	r3, [pc, #592]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 0320 	and.w	r3, r3, #32
 800b290:	2b00      	cmp	r3, #0
 800b292:	d009      	beq.n	800b2a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b294:	4b91      	ldr	r3, [pc, #580]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	08db      	lsrs	r3, r3, #3
 800b29a:	f003 0303 	and.w	r3, r3, #3
 800b29e:	4a90      	ldr	r2, [pc, #576]	@ (800b4e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b2a6:	e111      	b.n	800b4cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b2a8:	4b8d      	ldr	r3, [pc, #564]	@ (800b4e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2aa:	61bb      	str	r3, [r7, #24]
      break;
 800b2ac:	e10e      	b.n	800b4cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b2ae:	4b8d      	ldr	r3, [pc, #564]	@ (800b4e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b2b0:	61bb      	str	r3, [r7, #24]
      break;
 800b2b2:	e10b      	b.n	800b4cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b2b4:	4b8c      	ldr	r3, [pc, #560]	@ (800b4e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b2b6:	61bb      	str	r3, [r7, #24]
      break;
 800b2b8:	e108      	b.n	800b4cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2ba:	4b88      	ldr	r3, [pc, #544]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2be:	f003 0303 	and.w	r3, r3, #3
 800b2c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b2c4:	4b85      	ldr	r3, [pc, #532]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c8:	091b      	lsrs	r3, r3, #4
 800b2ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b2d0:	4b82      	ldr	r3, [pc, #520]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b2da:	4b80      	ldr	r3, [pc, #512]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2de:	08db      	lsrs	r3, r3, #3
 800b2e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	fb02 f303 	mul.w	r3, r2, r3
 800b2ea:	ee07 3a90 	vmov	s15, r3
 800b2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 80e1 	beq.w	800b4c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	2b02      	cmp	r3, #2
 800b302:	f000 8083 	beq.w	800b40c <HAL_RCC_GetSysClockFreq+0x204>
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	2b02      	cmp	r3, #2
 800b30a:	f200 80a1 	bhi.w	800b450 <HAL_RCC_GetSysClockFreq+0x248>
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d003      	beq.n	800b31c <HAL_RCC_GetSysClockFreq+0x114>
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d056      	beq.n	800b3c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b31a:	e099      	b.n	800b450 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b31c:	4b6f      	ldr	r3, [pc, #444]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 0320 	and.w	r3, r3, #32
 800b324:	2b00      	cmp	r3, #0
 800b326:	d02d      	beq.n	800b384 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b328:	4b6c      	ldr	r3, [pc, #432]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	08db      	lsrs	r3, r3, #3
 800b32e:	f003 0303 	and.w	r3, r3, #3
 800b332:	4a6b      	ldr	r2, [pc, #428]	@ (800b4e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b334:	fa22 f303 	lsr.w	r3, r2, r3
 800b338:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	ee07 3a90 	vmov	s15, r3
 800b340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	ee07 3a90 	vmov	s15, r3
 800b34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b34e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b352:	4b62      	ldr	r3, [pc, #392]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b35a:	ee07 3a90 	vmov	s15, r3
 800b35e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b362:	ed97 6a02 	vldr	s12, [r7, #8]
 800b366:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b4ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800b36a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b36e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b37a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b37e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b382:	e087      	b.n	800b494 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	ee07 3a90 	vmov	s15, r3
 800b38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b38e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b4f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b396:	4b51      	ldr	r3, [pc, #324]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b39e:	ee07 3a90 	vmov	s15, r3
 800b3a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3aa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b4ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b3c6:	e065      	b.n	800b494 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	ee07 3a90 	vmov	s15, r3
 800b3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b4f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b3d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3da:	4b40      	ldr	r3, [pc, #256]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e2:	ee07 3a90 	vmov	s15, r3
 800b3e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3ee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b4ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b406:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b40a:	e043      	b.n	800b494 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	ee07 3a90 	vmov	s15, r3
 800b412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b416:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b4f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b41a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b41e:	4b2f      	ldr	r3, [pc, #188]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b426:	ee07 3a90 	vmov	s15, r3
 800b42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b42e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b432:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b4ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800b436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b43a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b43e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b44a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b44e:	e021      	b.n	800b494 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	ee07 3a90 	vmov	s15, r3
 800b456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b45a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b4f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b45e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b462:	4b1e      	ldr	r3, [pc, #120]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b46a:	ee07 3a90 	vmov	s15, r3
 800b46e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b472:	ed97 6a02 	vldr	s12, [r7, #8]
 800b476:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b4ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800b47a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b47e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b48e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b492:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b494:	4b11      	ldr	r3, [pc, #68]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b498:	0a5b      	lsrs	r3, r3, #9
 800b49a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b49e:	3301      	adds	r3, #1
 800b4a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	ee07 3a90 	vmov	s15, r3
 800b4a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b4ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4b8:	ee17 3a90 	vmov	r3, s15
 800b4bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b4be:	e005      	b.n	800b4cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	61bb      	str	r3, [r7, #24]
      break;
 800b4c4:	e002      	b.n	800b4cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b4c6:	4b07      	ldr	r3, [pc, #28]	@ (800b4e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b4c8:	61bb      	str	r3, [r7, #24]
      break;
 800b4ca:	bf00      	nop
  }

  return sysclockfreq;
 800b4cc:	69bb      	ldr	r3, [r7, #24]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3724      	adds	r7, #36	@ 0x24
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	58024400 	.word	0x58024400
 800b4e0:	03d09000 	.word	0x03d09000
 800b4e4:	003d0900 	.word	0x003d0900
 800b4e8:	016e3600 	.word	0x016e3600
 800b4ec:	46000000 	.word	0x46000000
 800b4f0:	4c742400 	.word	0x4c742400
 800b4f4:	4a742400 	.word	0x4a742400
 800b4f8:	4bb71b00 	.word	0x4bb71b00

0800b4fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b502:	f7ff fe81 	bl	800b208 <HAL_RCC_GetSysClockFreq>
 800b506:	4602      	mov	r2, r0
 800b508:	4b10      	ldr	r3, [pc, #64]	@ (800b54c <HAL_RCC_GetHCLKFreq+0x50>)
 800b50a:	699b      	ldr	r3, [r3, #24]
 800b50c:	0a1b      	lsrs	r3, r3, #8
 800b50e:	f003 030f 	and.w	r3, r3, #15
 800b512:	490f      	ldr	r1, [pc, #60]	@ (800b550 <HAL_RCC_GetHCLKFreq+0x54>)
 800b514:	5ccb      	ldrb	r3, [r1, r3]
 800b516:	f003 031f 	and.w	r3, r3, #31
 800b51a:	fa22 f303 	lsr.w	r3, r2, r3
 800b51e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b520:	4b0a      	ldr	r3, [pc, #40]	@ (800b54c <HAL_RCC_GetHCLKFreq+0x50>)
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	f003 030f 	and.w	r3, r3, #15
 800b528:	4a09      	ldr	r2, [pc, #36]	@ (800b550 <HAL_RCC_GetHCLKFreq+0x54>)
 800b52a:	5cd3      	ldrb	r3, [r2, r3]
 800b52c:	f003 031f 	and.w	r3, r3, #31
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	fa22 f303 	lsr.w	r3, r2, r3
 800b536:	4a07      	ldr	r2, [pc, #28]	@ (800b554 <HAL_RCC_GetHCLKFreq+0x58>)
 800b538:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b53a:	4a07      	ldr	r2, [pc, #28]	@ (800b558 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b540:	4b04      	ldr	r3, [pc, #16]	@ (800b554 <HAL_RCC_GetHCLKFreq+0x58>)
 800b542:	681b      	ldr	r3, [r3, #0]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	58024400 	.word	0x58024400
 800b550:	08019ae4 	.word	0x08019ae4
 800b554:	24000004 	.word	0x24000004
 800b558:	24000000 	.word	0x24000000

0800b55c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b560:	f7ff ffcc 	bl	800b4fc <HAL_RCC_GetHCLKFreq>
 800b564:	4602      	mov	r2, r0
 800b566:	4b06      	ldr	r3, [pc, #24]	@ (800b580 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b568:	69db      	ldr	r3, [r3, #28]
 800b56a:	091b      	lsrs	r3, r3, #4
 800b56c:	f003 0307 	and.w	r3, r3, #7
 800b570:	4904      	ldr	r1, [pc, #16]	@ (800b584 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b572:	5ccb      	ldrb	r3, [r1, r3]
 800b574:	f003 031f 	and.w	r3, r3, #31
 800b578:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	58024400 	.word	0x58024400
 800b584:	08019ae4 	.word	0x08019ae4

0800b588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b58c:	f7ff ffb6 	bl	800b4fc <HAL_RCC_GetHCLKFreq>
 800b590:	4602      	mov	r2, r0
 800b592:	4b06      	ldr	r3, [pc, #24]	@ (800b5ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800b594:	69db      	ldr	r3, [r3, #28]
 800b596:	0a1b      	lsrs	r3, r3, #8
 800b598:	f003 0307 	and.w	r3, r3, #7
 800b59c:	4904      	ldr	r1, [pc, #16]	@ (800b5b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b59e:	5ccb      	ldrb	r3, [r1, r3]
 800b5a0:	f003 031f 	and.w	r3, r3, #31
 800b5a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	58024400 	.word	0x58024400
 800b5b0:	08019ae4 	.word	0x08019ae4

0800b5b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5b8:	b0c6      	sub	sp, #280	@ 0x118
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b5d8:	2500      	movs	r5, #0
 800b5da:	ea54 0305 	orrs.w	r3, r4, r5
 800b5de:	d049      	beq.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b5e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b5ea:	d02f      	beq.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b5ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b5f0:	d828      	bhi.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b5f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b5f6:	d01a      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b5f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b5fc:	d822      	bhi.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b606:	d007      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b608:	e01c      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b60a:	4bab      	ldr	r3, [pc, #684]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b60e:	4aaa      	ldr	r2, [pc, #680]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b614:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b616:	e01a      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b61c:	3308      	adds	r3, #8
 800b61e:	2102      	movs	r1, #2
 800b620:	4618      	mov	r0, r3
 800b622:	f002 fa49 	bl	800dab8 <RCCEx_PLL2_Config>
 800b626:	4603      	mov	r3, r0
 800b628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b62c:	e00f      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b632:	3328      	adds	r3, #40	@ 0x28
 800b634:	2102      	movs	r1, #2
 800b636:	4618      	mov	r0, r3
 800b638:	f002 faf0 	bl	800dc1c <RCCEx_PLL3_Config>
 800b63c:	4603      	mov	r3, r0
 800b63e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b642:	e004      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b64a:	e000      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b64c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b64e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b652:	2b00      	cmp	r3, #0
 800b654:	d10a      	bne.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b656:	4b98      	ldr	r3, [pc, #608]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b65a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b664:	4a94      	ldr	r2, [pc, #592]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b666:	430b      	orrs	r3, r1
 800b668:	6513      	str	r3, [r2, #80]	@ 0x50
 800b66a:	e003      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b66c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b670:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b680:	f04f 0900 	mov.w	r9, #0
 800b684:	ea58 0309 	orrs.w	r3, r8, r9
 800b688:	d047      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b68e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b690:	2b04      	cmp	r3, #4
 800b692:	d82a      	bhi.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b694:	a201      	add	r2, pc, #4	@ (adr r2, 800b69c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b69a:	bf00      	nop
 800b69c:	0800b6b1 	.word	0x0800b6b1
 800b6a0:	0800b6bf 	.word	0x0800b6bf
 800b6a4:	0800b6d5 	.word	0x0800b6d5
 800b6a8:	0800b6f3 	.word	0x0800b6f3
 800b6ac:	0800b6f3 	.word	0x0800b6f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6b0:	4b81      	ldr	r3, [pc, #516]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6b4:	4a80      	ldr	r2, [pc, #512]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6bc:	e01a      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6c2:	3308      	adds	r3, #8
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f002 f9f6 	bl	800dab8 <RCCEx_PLL2_Config>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6d2:	e00f      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6d8:	3328      	adds	r3, #40	@ 0x28
 800b6da:	2100      	movs	r1, #0
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f002 fa9d 	bl	800dc1c <RCCEx_PLL3_Config>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6e8:	e004      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b6f0:	e000      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b6f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10a      	bne.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b6fc:	4b6e      	ldr	r3, [pc, #440]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b700:	f023 0107 	bic.w	r1, r3, #7
 800b704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b70a:	4a6b      	ldr	r2, [pc, #428]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b70c:	430b      	orrs	r3, r1
 800b70e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b710:	e003      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b712:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b716:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800b726:	f04f 0b00 	mov.w	fp, #0
 800b72a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b72e:	d05b      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b734:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b738:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b73c:	d03b      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b73e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b742:	d834      	bhi.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b744:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b748:	d037      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b74a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b74e:	d82e      	bhi.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b750:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b754:	d033      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b756:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b75a:	d828      	bhi.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b75c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b760:	d01a      	beq.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b762:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b766:	d822      	bhi.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d003      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b76c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b770:	d007      	beq.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b772:	e01c      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b774:	4b50      	ldr	r3, [pc, #320]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b778:	4a4f      	ldr	r2, [pc, #316]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b77a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b77e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b780:	e01e      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b786:	3308      	adds	r3, #8
 800b788:	2100      	movs	r1, #0
 800b78a:	4618      	mov	r0, r3
 800b78c:	f002 f994 	bl	800dab8 <RCCEx_PLL2_Config>
 800b790:	4603      	mov	r3, r0
 800b792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b796:	e013      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b79c:	3328      	adds	r3, #40	@ 0x28
 800b79e:	2100      	movs	r1, #0
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f002 fa3b 	bl	800dc1c <RCCEx_PLL3_Config>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7ac:	e008      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b7b4:	e004      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b7b6:	bf00      	nop
 800b7b8:	e002      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b7ba:	bf00      	nop
 800b7bc:	e000      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b7be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10b      	bne.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b7c8:	4b3b      	ldr	r3, [pc, #236]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7cc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800b7d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7d8:	4a37      	ldr	r2, [pc, #220]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7da:	430b      	orrs	r3, r1
 800b7dc:	6593      	str	r3, [r2, #88]	@ 0x58
 800b7de:	e003      	b.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b7f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b7fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b802:	460b      	mov	r3, r1
 800b804:	4313      	orrs	r3, r2
 800b806:	d05d      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b80c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b810:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b814:	d03b      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b816:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b81a:	d834      	bhi.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b81c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b820:	d037      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b822:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b826:	d82e      	bhi.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b828:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b82c:	d033      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b82e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b832:	d828      	bhi.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b834:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b838:	d01a      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b83a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b83e:	d822      	bhi.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b840:	2b00      	cmp	r3, #0
 800b842:	d003      	beq.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b848:	d007      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b84a:	e01c      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b84c:	4b1a      	ldr	r3, [pc, #104]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b84e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b850:	4a19      	ldr	r2, [pc, #100]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b858:	e01e      	b.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b85e:	3308      	adds	r3, #8
 800b860:	2100      	movs	r1, #0
 800b862:	4618      	mov	r0, r3
 800b864:	f002 f928 	bl	800dab8 <RCCEx_PLL2_Config>
 800b868:	4603      	mov	r3, r0
 800b86a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b86e:	e013      	b.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b874:	3328      	adds	r3, #40	@ 0x28
 800b876:	2100      	movs	r1, #0
 800b878:	4618      	mov	r0, r3
 800b87a:	f002 f9cf 	bl	800dc1c <RCCEx_PLL3_Config>
 800b87e:	4603      	mov	r3, r0
 800b880:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b884:	e008      	b.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b88c:	e004      	b.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b88e:	bf00      	nop
 800b890:	e002      	b.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b892:	bf00      	nop
 800b894:	e000      	b.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b896:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b898:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10d      	bne.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b8a0:	4b05      	ldr	r3, [pc, #20]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b8b0:	4a01      	ldr	r2, [pc, #4]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8b2:	430b      	orrs	r3, r1
 800b8b4:	6593      	str	r3, [r2, #88]	@ 0x58
 800b8b6:	e005      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b8b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b8c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b8d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b8da:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	d03a      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8ea:	2b30      	cmp	r3, #48	@ 0x30
 800b8ec:	d01f      	beq.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b8ee:	2b30      	cmp	r3, #48	@ 0x30
 800b8f0:	d819      	bhi.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b8f2:	2b20      	cmp	r3, #32
 800b8f4:	d00c      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b8f6:	2b20      	cmp	r3, #32
 800b8f8:	d815      	bhi.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d019      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b8fe:	2b10      	cmp	r3, #16
 800b900:	d111      	bne.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b902:	4baa      	ldr	r3, [pc, #680]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b906:	4aa9      	ldr	r2, [pc, #676]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b90c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b90e:	e011      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b914:	3308      	adds	r3, #8
 800b916:	2102      	movs	r1, #2
 800b918:	4618      	mov	r0, r3
 800b91a:	f002 f8cd 	bl	800dab8 <RCCEx_PLL2_Config>
 800b91e:	4603      	mov	r3, r0
 800b920:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b924:	e006      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b92c:	e002      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b92e:	bf00      	nop
 800b930:	e000      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b932:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b934:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10a      	bne.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b93c:	4b9b      	ldr	r3, [pc, #620]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b93e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b940:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b94a:	4a98      	ldr	r2, [pc, #608]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b94c:	430b      	orrs	r3, r1
 800b94e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b950:	e003      	b.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b952:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b956:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b966:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b96a:	2300      	movs	r3, #0
 800b96c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b970:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b974:	460b      	mov	r3, r1
 800b976:	4313      	orrs	r3, r2
 800b978:	d051      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b97e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b980:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b984:	d035      	beq.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b986:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b98a:	d82e      	bhi.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b98c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b990:	d031      	beq.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b992:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b996:	d828      	bhi.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b99c:	d01a      	beq.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b99e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9a2:	d822      	bhi.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d003      	beq.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b9a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9ac:	d007      	beq.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b9ae:	e01c      	b.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9b0:	4b7e      	ldr	r3, [pc, #504]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b4:	4a7d      	ldr	r2, [pc, #500]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9bc:	e01c      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f002 f876 	bl	800dab8 <RCCEx_PLL2_Config>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9d2:	e011      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9d8:	3328      	adds	r3, #40	@ 0x28
 800b9da:	2100      	movs	r1, #0
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f002 f91d 	bl	800dc1c <RCCEx_PLL3_Config>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9e8:	e006      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b9f0:	e002      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b9f2:	bf00      	nop
 800b9f4:	e000      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b9f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10a      	bne.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ba00:	4b6a      	ldr	r3, [pc, #424]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba04:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ba08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba0e:	4a67      	ldr	r2, [pc, #412]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba10:	430b      	orrs	r3, r1
 800ba12:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba14:	e003      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ba1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ba2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ba34:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ba38:	460b      	mov	r3, r1
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	d053      	beq.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ba3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba48:	d033      	beq.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ba4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba4e:	d82c      	bhi.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba54:	d02f      	beq.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ba56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba5a:	d826      	bhi.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ba60:	d02b      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ba62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ba66:	d820      	bhi.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba6c:	d012      	beq.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ba6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba72:	d81a      	bhi.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d022      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ba78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba7c:	d115      	bne.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba82:	3308      	adds	r3, #8
 800ba84:	2101      	movs	r1, #1
 800ba86:	4618      	mov	r0, r3
 800ba88:	f002 f816 	bl	800dab8 <RCCEx_PLL2_Config>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ba92:	e015      	b.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba98:	3328      	adds	r3, #40	@ 0x28
 800ba9a:	2101      	movs	r1, #1
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f002 f8bd 	bl	800dc1c <RCCEx_PLL3_Config>
 800baa2:	4603      	mov	r3, r0
 800baa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800baa8:	e00a      	b.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bab0:	e006      	b.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bab2:	bf00      	nop
 800bab4:	e004      	b.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bab6:	bf00      	nop
 800bab8:	e002      	b.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800baba:	bf00      	nop
 800babc:	e000      	b.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800babe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bac0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bac8:	4b38      	ldr	r3, [pc, #224]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800baca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bacc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bad6:	4a35      	ldr	r2, [pc, #212]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bad8:	430b      	orrs	r3, r1
 800bada:	6513      	str	r3, [r2, #80]	@ 0x50
 800badc:	e003      	b.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bade:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bae2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baee:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800baf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800baf6:	2300      	movs	r3, #0
 800baf8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bafc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bb00:	460b      	mov	r3, r1
 800bb02:	4313      	orrs	r3, r2
 800bb04:	d058      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bb06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bb0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb12:	d033      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bb14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb18:	d82c      	bhi.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb1e:	d02f      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bb20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb24:	d826      	bhi.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb2a:	d02b      	beq.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bb2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb30:	d820      	bhi.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb36:	d012      	beq.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bb38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb3c:	d81a      	bhi.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d022      	beq.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bb42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb46:	d115      	bne.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb4c:	3308      	adds	r3, #8
 800bb4e:	2101      	movs	r1, #1
 800bb50:	4618      	mov	r0, r3
 800bb52:	f001 ffb1 	bl	800dab8 <RCCEx_PLL2_Config>
 800bb56:	4603      	mov	r3, r0
 800bb58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb5c:	e015      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb62:	3328      	adds	r3, #40	@ 0x28
 800bb64:	2101      	movs	r1, #1
 800bb66:	4618      	mov	r0, r3
 800bb68:	f002 f858 	bl	800dc1c <RCCEx_PLL3_Config>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb72:	e00a      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb7a:	e006      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb7c:	bf00      	nop
 800bb7e:	e004      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb80:	bf00      	nop
 800bb82:	e002      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb84:	bf00      	nop
 800bb86:	e000      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10e      	bne.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bb92:	4b06      	ldr	r3, [pc, #24]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bb9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bba2:	4a02      	ldr	r2, [pc, #8]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bba4:	430b      	orrs	r3, r1
 800bba6:	6593      	str	r3, [r2, #88]	@ 0x58
 800bba8:	e006      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bbaa:	bf00      	nop
 800bbac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bbc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bbce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	d037      	beq.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bbd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbe2:	d00e      	beq.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bbe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbe8:	d816      	bhi.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d018      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bbee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbf2:	d111      	bne.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbf4:	4bc4      	ldr	r3, [pc, #784]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf8:	4ac3      	ldr	r2, [pc, #780]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc00:	e00f      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc06:	3308      	adds	r3, #8
 800bc08:	2101      	movs	r1, #1
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f001 ff54 	bl	800dab8 <RCCEx_PLL2_Config>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc16:	e004      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc1e:	e000      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bc20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10a      	bne.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bc2a:	4bb7      	ldr	r3, [pc, #732]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc2e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bc32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc38:	4ab3      	ldr	r2, [pc, #716]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc3a:	430b      	orrs	r3, r1
 800bc3c:	6513      	str	r3, [r2, #80]	@ 0x50
 800bc3e:	e003      	b.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bc48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc50:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bc54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bc5e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bc62:	460b      	mov	r3, r1
 800bc64:	4313      	orrs	r3, r2
 800bc66:	d039      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bc68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	d81c      	bhi.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bc72:	a201      	add	r2, pc, #4	@ (adr r2, 800bc78 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc78:	0800bcb5 	.word	0x0800bcb5
 800bc7c:	0800bc89 	.word	0x0800bc89
 800bc80:	0800bc97 	.word	0x0800bc97
 800bc84:	0800bcb5 	.word	0x0800bcb5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc88:	4b9f      	ldr	r3, [pc, #636]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc8c:	4a9e      	ldr	r2, [pc, #632]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bc94:	e00f      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc9a:	3308      	adds	r3, #8
 800bc9c:	2102      	movs	r1, #2
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f001 ff0a 	bl	800dab8 <RCCEx_PLL2_Config>
 800bca4:	4603      	mov	r3, r0
 800bca6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bcaa:	e004      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bcb2:	e000      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bcb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10a      	bne.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bcbe:	4b92      	ldr	r3, [pc, #584]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcc2:	f023 0103 	bic.w	r1, r3, #3
 800bcc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bccc:	4a8e      	ldr	r2, [pc, #568]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcce:	430b      	orrs	r3, r1
 800bcd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bcd2:	e003      	b.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bcdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bce8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bcec:	2300      	movs	r3, #0
 800bcee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bcf2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	f000 8099 	beq.w	800be30 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bcfe:	4b83      	ldr	r3, [pc, #524]	@ (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a82      	ldr	r2, [pc, #520]	@ (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd0a:	f7f8 fe3f 	bl	800498c <HAL_GetTick>
 800bd0e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd12:	e00b      	b.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd14:	f7f8 fe3a 	bl	800498c <HAL_GetTick>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	2b64      	cmp	r3, #100	@ 0x64
 800bd22:	d903      	bls.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bd24:	2303      	movs	r3, #3
 800bd26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd2a:	e005      	b.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd2c:	4b77      	ldr	r3, [pc, #476]	@ (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d0ed      	beq.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bd38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d173      	bne.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bd40:	4b71      	ldr	r3, [pc, #452]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bd44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bd4c:	4053      	eors	r3, r2
 800bd4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d015      	beq.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bd56:	4b6c      	ldr	r3, [pc, #432]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd5e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd62:	4b69      	ldr	r3, [pc, #420]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd66:	4a68      	ldr	r2, [pc, #416]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd6c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd6e:	4b66      	ldr	r3, [pc, #408]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd72:	4a65      	ldr	r2, [pc, #404]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd78:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bd7a:	4a63      	ldr	r2, [pc, #396]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd80:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bd82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bd8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd8e:	d118      	bne.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd90:	f7f8 fdfc 	bl	800498c <HAL_GetTick>
 800bd94:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd98:	e00d      	b.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd9a:	f7f8 fdf7 	bl	800498c <HAL_GetTick>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bda4:	1ad2      	subs	r2, r2, r3
 800bda6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d903      	bls.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bdae:	2303      	movs	r3, #3
 800bdb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800bdb4:	e005      	b.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdb6:	4b54      	ldr	r3, [pc, #336]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdba:	f003 0302 	and.w	r3, r3, #2
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d0eb      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bdc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d129      	bne.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bdca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bdd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bdda:	d10e      	bne.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bddc:	4b4a      	ldr	r3, [pc, #296]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdde:	691b      	ldr	r3, [r3, #16]
 800bde0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bde4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bde8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bdec:	091a      	lsrs	r2, r3, #4
 800bdee:	4b48      	ldr	r3, [pc, #288]	@ (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	4a45      	ldr	r2, [pc, #276]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdf4:	430b      	orrs	r3, r1
 800bdf6:	6113      	str	r3, [r2, #16]
 800bdf8:	e005      	b.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bdfa:	4b43      	ldr	r3, [pc, #268]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	4a42      	ldr	r2, [pc, #264]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800be04:	6113      	str	r3, [r2, #16]
 800be06:	4b40      	ldr	r3, [pc, #256]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be08:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800be0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800be12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be16:	4a3c      	ldr	r2, [pc, #240]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be18:	430b      	orrs	r3, r1
 800be1a:	6713      	str	r3, [r2, #112]	@ 0x70
 800be1c:	e008      	b.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800be26:	e003      	b.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800be30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	f002 0301 	and.w	r3, r2, #1
 800be3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be40:	2300      	movs	r3, #0
 800be42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800be46:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800be4a:	460b      	mov	r3, r1
 800be4c:	4313      	orrs	r3, r2
 800be4e:	f000 808f 	beq.w	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800be52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be58:	2b28      	cmp	r3, #40	@ 0x28
 800be5a:	d871      	bhi.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800be5c:	a201      	add	r2, pc, #4	@ (adr r2, 800be64 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800be5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be62:	bf00      	nop
 800be64:	0800bf49 	.word	0x0800bf49
 800be68:	0800bf41 	.word	0x0800bf41
 800be6c:	0800bf41 	.word	0x0800bf41
 800be70:	0800bf41 	.word	0x0800bf41
 800be74:	0800bf41 	.word	0x0800bf41
 800be78:	0800bf41 	.word	0x0800bf41
 800be7c:	0800bf41 	.word	0x0800bf41
 800be80:	0800bf41 	.word	0x0800bf41
 800be84:	0800bf15 	.word	0x0800bf15
 800be88:	0800bf41 	.word	0x0800bf41
 800be8c:	0800bf41 	.word	0x0800bf41
 800be90:	0800bf41 	.word	0x0800bf41
 800be94:	0800bf41 	.word	0x0800bf41
 800be98:	0800bf41 	.word	0x0800bf41
 800be9c:	0800bf41 	.word	0x0800bf41
 800bea0:	0800bf41 	.word	0x0800bf41
 800bea4:	0800bf2b 	.word	0x0800bf2b
 800bea8:	0800bf41 	.word	0x0800bf41
 800beac:	0800bf41 	.word	0x0800bf41
 800beb0:	0800bf41 	.word	0x0800bf41
 800beb4:	0800bf41 	.word	0x0800bf41
 800beb8:	0800bf41 	.word	0x0800bf41
 800bebc:	0800bf41 	.word	0x0800bf41
 800bec0:	0800bf41 	.word	0x0800bf41
 800bec4:	0800bf49 	.word	0x0800bf49
 800bec8:	0800bf41 	.word	0x0800bf41
 800becc:	0800bf41 	.word	0x0800bf41
 800bed0:	0800bf41 	.word	0x0800bf41
 800bed4:	0800bf41 	.word	0x0800bf41
 800bed8:	0800bf41 	.word	0x0800bf41
 800bedc:	0800bf41 	.word	0x0800bf41
 800bee0:	0800bf41 	.word	0x0800bf41
 800bee4:	0800bf49 	.word	0x0800bf49
 800bee8:	0800bf41 	.word	0x0800bf41
 800beec:	0800bf41 	.word	0x0800bf41
 800bef0:	0800bf41 	.word	0x0800bf41
 800bef4:	0800bf41 	.word	0x0800bf41
 800bef8:	0800bf41 	.word	0x0800bf41
 800befc:	0800bf41 	.word	0x0800bf41
 800bf00:	0800bf41 	.word	0x0800bf41
 800bf04:	0800bf49 	.word	0x0800bf49
 800bf08:	58024400 	.word	0x58024400
 800bf0c:	58024800 	.word	0x58024800
 800bf10:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf18:	3308      	adds	r3, #8
 800bf1a:	2101      	movs	r1, #1
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f001 fdcb 	bl	800dab8 <RCCEx_PLL2_Config>
 800bf22:	4603      	mov	r3, r0
 800bf24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf28:	e00f      	b.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf2e:	3328      	adds	r3, #40	@ 0x28
 800bf30:	2101      	movs	r1, #1
 800bf32:	4618      	mov	r0, r3
 800bf34:	f001 fe72 	bl	800dc1c <RCCEx_PLL3_Config>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf3e:	e004      	b.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf46:	e000      	b.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bf48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d10a      	bne.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bf52:	4bbf      	ldr	r3, [pc, #764]	@ (800c250 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf56:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800bf5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf60:	4abb      	ldr	r2, [pc, #748]	@ (800c250 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf62:	430b      	orrs	r3, r1
 800bf64:	6553      	str	r3, [r2, #84]	@ 0x54
 800bf66:	e003      	b.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bf70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf78:	f002 0302 	and.w	r3, r2, #2
 800bf7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bf80:	2300      	movs	r3, #0
 800bf82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bf86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	d041      	beq.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bf90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf96:	2b05      	cmp	r3, #5
 800bf98:	d824      	bhi.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800bf9a:	a201      	add	r2, pc, #4	@ (adr r2, 800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800bf9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa0:	0800bfed 	.word	0x0800bfed
 800bfa4:	0800bfb9 	.word	0x0800bfb9
 800bfa8:	0800bfcf 	.word	0x0800bfcf
 800bfac:	0800bfed 	.word	0x0800bfed
 800bfb0:	0800bfed 	.word	0x0800bfed
 800bfb4:	0800bfed 	.word	0x0800bfed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfbc:	3308      	adds	r3, #8
 800bfbe:	2101      	movs	r1, #1
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f001 fd79 	bl	800dab8 <RCCEx_PLL2_Config>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bfcc:	e00f      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfd2:	3328      	adds	r3, #40	@ 0x28
 800bfd4:	2101      	movs	r1, #1
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f001 fe20 	bl	800dc1c <RCCEx_PLL3_Config>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bfe2:	e004      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bfea:	e000      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800bfec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d10a      	bne.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bff6:	4b96      	ldr	r3, [pc, #600]	@ (800c250 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bffa:	f023 0107 	bic.w	r1, r3, #7
 800bffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c004:	4a92      	ldr	r2, [pc, #584]	@ (800c250 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c006:	430b      	orrs	r3, r1
 800c008:	6553      	str	r3, [r2, #84]	@ 0x54
 800c00a:	e003      	b.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c00c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c010:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01c:	f002 0304 	and.w	r3, r2, #4
 800c020:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c024:	2300      	movs	r3, #0
 800c026:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c02a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c02e:	460b      	mov	r3, r1
 800c030:	4313      	orrs	r3, r2
 800c032:	d044      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c03c:	2b05      	cmp	r3, #5
 800c03e:	d825      	bhi.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c040:	a201      	add	r2, pc, #4	@ (adr r2, 800c048 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c046:	bf00      	nop
 800c048:	0800c095 	.word	0x0800c095
 800c04c:	0800c061 	.word	0x0800c061
 800c050:	0800c077 	.word	0x0800c077
 800c054:	0800c095 	.word	0x0800c095
 800c058:	0800c095 	.word	0x0800c095
 800c05c:	0800c095 	.word	0x0800c095
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c064:	3308      	adds	r3, #8
 800c066:	2101      	movs	r1, #1
 800c068:	4618      	mov	r0, r3
 800c06a:	f001 fd25 	bl	800dab8 <RCCEx_PLL2_Config>
 800c06e:	4603      	mov	r3, r0
 800c070:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c074:	e00f      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c07a:	3328      	adds	r3, #40	@ 0x28
 800c07c:	2101      	movs	r1, #1
 800c07e:	4618      	mov	r0, r3
 800c080:	f001 fdcc 	bl	800dc1c <RCCEx_PLL3_Config>
 800c084:	4603      	mov	r3, r0
 800c086:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c08a:	e004      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c092:	e000      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c094:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c096:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d10b      	bne.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c09e:	4b6c      	ldr	r3, [pc, #432]	@ (800c250 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c0a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0a2:	f023 0107 	bic.w	r1, r3, #7
 800c0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0ae:	4a68      	ldr	r2, [pc, #416]	@ (800c250 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c0b0:	430b      	orrs	r3, r1
 800c0b2:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0b4:	e003      	b.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c6:	f002 0320 	and.w	r3, r2, #32
 800c0ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c0d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	d055      	beq.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c0de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0ea:	d033      	beq.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c0ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0f0:	d82c      	bhi.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c0f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0f6:	d02f      	beq.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c0f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0fc:	d826      	bhi.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c0fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c102:	d02b      	beq.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c104:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c108:	d820      	bhi.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c10a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c10e:	d012      	beq.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c114:	d81a      	bhi.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c116:	2b00      	cmp	r3, #0
 800c118:	d022      	beq.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c11a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c11e:	d115      	bne.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c124:	3308      	adds	r3, #8
 800c126:	2100      	movs	r1, #0
 800c128:	4618      	mov	r0, r3
 800c12a:	f001 fcc5 	bl	800dab8 <RCCEx_PLL2_Config>
 800c12e:	4603      	mov	r3, r0
 800c130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c134:	e015      	b.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c13a:	3328      	adds	r3, #40	@ 0x28
 800c13c:	2102      	movs	r1, #2
 800c13e:	4618      	mov	r0, r3
 800c140:	f001 fd6c 	bl	800dc1c <RCCEx_PLL3_Config>
 800c144:	4603      	mov	r3, r0
 800c146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c14a:	e00a      	b.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c152:	e006      	b.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c154:	bf00      	nop
 800c156:	e004      	b.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c158:	bf00      	nop
 800c15a:	e002      	b.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c15c:	bf00      	nop
 800c15e:	e000      	b.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c160:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c162:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c166:	2b00      	cmp	r3, #0
 800c168:	d10b      	bne.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c16a:	4b39      	ldr	r3, [pc, #228]	@ (800c250 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c16c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c16e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c176:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c17a:	4a35      	ldr	r2, [pc, #212]	@ (800c250 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c17c:	430b      	orrs	r3, r1
 800c17e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c180:	e003      	b.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c182:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c186:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c192:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c196:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c19a:	2300      	movs	r3, #0
 800c19c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c1a0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	d058      	beq.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c1b2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c1b6:	d033      	beq.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c1b8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c1bc:	d82c      	bhi.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c1be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1c2:	d02f      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c1c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1c8:	d826      	bhi.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c1ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c1ce:	d02b      	beq.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c1d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c1d4:	d820      	bhi.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c1d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1da:	d012      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c1dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1e0:	d81a      	bhi.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d022      	beq.n	800c22c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c1e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1ea:	d115      	bne.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1f0:	3308      	adds	r3, #8
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f001 fc5f 	bl	800dab8 <RCCEx_PLL2_Config>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c200:	e015      	b.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c206:	3328      	adds	r3, #40	@ 0x28
 800c208:	2102      	movs	r1, #2
 800c20a:	4618      	mov	r0, r3
 800c20c:	f001 fd06 	bl	800dc1c <RCCEx_PLL3_Config>
 800c210:	4603      	mov	r3, r0
 800c212:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c216:	e00a      	b.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c218:	2301      	movs	r3, #1
 800c21a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c21e:	e006      	b.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c220:	bf00      	nop
 800c222:	e004      	b.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c224:	bf00      	nop
 800c226:	e002      	b.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c228:	bf00      	nop
 800c22a:	e000      	b.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c22c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c22e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c232:	2b00      	cmp	r3, #0
 800c234:	d10e      	bne.n	800c254 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c236:	4b06      	ldr	r3, [pc, #24]	@ (800c250 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c23a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c242:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c246:	4a02      	ldr	r2, [pc, #8]	@ (800c250 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c248:	430b      	orrs	r3, r1
 800c24a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c24c:	e006      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c24e:	bf00      	nop
 800c250:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c254:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c258:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c264:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c268:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c26c:	2300      	movs	r3, #0
 800c26e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c272:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c276:	460b      	mov	r3, r1
 800c278:	4313      	orrs	r3, r2
 800c27a:	d055      	beq.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c280:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c284:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c288:	d033      	beq.n	800c2f2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c28a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c28e:	d82c      	bhi.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c294:	d02f      	beq.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c29a:	d826      	bhi.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c29c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c2a0:	d02b      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c2a2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c2a6:	d820      	bhi.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c2a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c2ac:	d012      	beq.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c2ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c2b2:	d81a      	bhi.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d022      	beq.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c2b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2bc:	d115      	bne.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2c2:	3308      	adds	r3, #8
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f001 fbf6 	bl	800dab8 <RCCEx_PLL2_Config>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c2d2:	e015      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2d8:	3328      	adds	r3, #40	@ 0x28
 800c2da:	2102      	movs	r1, #2
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f001 fc9d 	bl	800dc1c <RCCEx_PLL3_Config>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c2e8:	e00a      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c2f0:	e006      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c2f2:	bf00      	nop
 800c2f4:	e004      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c2f6:	bf00      	nop
 800c2f8:	e002      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c2fa:	bf00      	nop
 800c2fc:	e000      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c2fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10b      	bne.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c308:	4ba0      	ldr	r3, [pc, #640]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c30a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c30c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c314:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c318:	4a9c      	ldr	r2, [pc, #624]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c31a:	430b      	orrs	r3, r1
 800c31c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c31e:	e003      	b.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c320:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c324:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c330:	f002 0308 	and.w	r3, r2, #8
 800c334:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c338:	2300      	movs	r3, #0
 800c33a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c33e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c342:	460b      	mov	r3, r1
 800c344:	4313      	orrs	r3, r2
 800c346:	d01e      	beq.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c34c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c354:	d10c      	bne.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c35a:	3328      	adds	r3, #40	@ 0x28
 800c35c:	2102      	movs	r1, #2
 800c35e:	4618      	mov	r0, r3
 800c360:	f001 fc5c 	bl	800dc1c <RCCEx_PLL3_Config>
 800c364:	4603      	mov	r3, r0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d002      	beq.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c36a:	2301      	movs	r3, #1
 800c36c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c370:	4b86      	ldr	r3, [pc, #536]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c374:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c380:	4a82      	ldr	r2, [pc, #520]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c382:	430b      	orrs	r3, r1
 800c384:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38e:	f002 0310 	and.w	r3, r2, #16
 800c392:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c396:	2300      	movs	r3, #0
 800c398:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c39c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	d01e      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c3ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3b2:	d10c      	bne.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b8:	3328      	adds	r3, #40	@ 0x28
 800c3ba:	2102      	movs	r1, #2
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f001 fc2d 	bl	800dc1c <RCCEx_PLL3_Config>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c3ce:	4b6f      	ldr	r3, [pc, #444]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c3de:	4a6b      	ldr	r2, [pc, #428]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3e0:	430b      	orrs	r3, r1
 800c3e2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c3f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c3f6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	d03e      	beq.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c404:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c408:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c40c:	d022      	beq.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c40e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c412:	d81b      	bhi.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c414:	2b00      	cmp	r3, #0
 800c416:	d003      	beq.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c41c:	d00b      	beq.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c41e:	e015      	b.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c424:	3308      	adds	r3, #8
 800c426:	2100      	movs	r1, #0
 800c428:	4618      	mov	r0, r3
 800c42a:	f001 fb45 	bl	800dab8 <RCCEx_PLL2_Config>
 800c42e:	4603      	mov	r3, r0
 800c430:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c434:	e00f      	b.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c43a:	3328      	adds	r3, #40	@ 0x28
 800c43c:	2102      	movs	r1, #2
 800c43e:	4618      	mov	r0, r3
 800c440:	f001 fbec 	bl	800dc1c <RCCEx_PLL3_Config>
 800c444:	4603      	mov	r3, r0
 800c446:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c44a:	e004      	b.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c452:	e000      	b.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c454:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c456:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d10b      	bne.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c45e:	4b4b      	ldr	r3, [pc, #300]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c462:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c46a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c46e:	4a47      	ldr	r2, [pc, #284]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c470:	430b      	orrs	r3, r1
 800c472:	6593      	str	r3, [r2, #88]	@ 0x58
 800c474:	e003      	b.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c476:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c47a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c47e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c486:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c48a:	673b      	str	r3, [r7, #112]	@ 0x70
 800c48c:	2300      	movs	r3, #0
 800c48e:	677b      	str	r3, [r7, #116]	@ 0x74
 800c490:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c494:	460b      	mov	r3, r1
 800c496:	4313      	orrs	r3, r2
 800c498:	d03b      	beq.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c49e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c4a6:	d01f      	beq.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c4a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c4ac:	d818      	bhi.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c4ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4b2:	d003      	beq.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c4b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c4b8:	d007      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c4ba:	e011      	b.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4bc:	4b33      	ldr	r3, [pc, #204]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4c0:	4a32      	ldr	r2, [pc, #200]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c4c8:	e00f      	b.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ce:	3328      	adds	r3, #40	@ 0x28
 800c4d0:	2101      	movs	r1, #1
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f001 fba2 	bl	800dc1c <RCCEx_PLL3_Config>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c4de:	e004      	b.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4e6:	e000      	b.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c4e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d10b      	bne.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c4f2:	4b26      	ldr	r3, [pc, #152]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c502:	4a22      	ldr	r2, [pc, #136]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c504:	430b      	orrs	r3, r1
 800c506:	6553      	str	r3, [r2, #84]	@ 0x54
 800c508:	e003      	b.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c50a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c50e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c51e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c520:	2300      	movs	r3, #0
 800c522:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c524:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c528:	460b      	mov	r3, r1
 800c52a:	4313      	orrs	r3, r2
 800c52c:	d034      	beq.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c52e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c534:	2b00      	cmp	r3, #0
 800c536:	d003      	beq.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c53c:	d007      	beq.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c53e:	e011      	b.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c540:	4b12      	ldr	r3, [pc, #72]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c544:	4a11      	ldr	r2, [pc, #68]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c54a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c54c:	e00e      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c54e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c552:	3308      	adds	r3, #8
 800c554:	2102      	movs	r1, #2
 800c556:	4618      	mov	r0, r3
 800c558:	f001 faae 	bl	800dab8 <RCCEx_PLL2_Config>
 800c55c:	4603      	mov	r3, r0
 800c55e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c562:	e003      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c564:	2301      	movs	r3, #1
 800c566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c56a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c56c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c570:	2b00      	cmp	r3, #0
 800c572:	d10d      	bne.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c574:	4b05      	ldr	r3, [pc, #20]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c578:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c582:	4a02      	ldr	r2, [pc, #8]	@ (800c58c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c584:	430b      	orrs	r3, r1
 800c586:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c588:	e006      	b.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c58a:	bf00      	nop
 800c58c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c594:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c5a4:	663b      	str	r3, [r7, #96]	@ 0x60
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	667b      	str	r3, [r7, #100]	@ 0x64
 800c5aa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	d00c      	beq.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5b8:	3328      	adds	r3, #40	@ 0x28
 800c5ba:	2102      	movs	r1, #2
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f001 fb2d 	bl	800dc1c <RCCEx_PLL3_Config>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d002      	beq.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c5da:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c5dc:	2300      	movs	r3, #0
 800c5de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c5e0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	d036      	beq.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c5f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5f4:	d018      	beq.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c5f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5fa:	d811      	bhi.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c5fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c600:	d014      	beq.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c606:	d80b      	bhi.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d011      	beq.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c60c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c610:	d106      	bne.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c612:	4bb7      	ldr	r3, [pc, #732]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c616:	4ab6      	ldr	r2, [pc, #728]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c61c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c61e:	e008      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c620:	2301      	movs	r3, #1
 800c622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c626:	e004      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c628:	bf00      	nop
 800c62a:	e002      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c62c:	bf00      	nop
 800c62e:	e000      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c630:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c632:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c636:	2b00      	cmp	r3, #0
 800c638:	d10a      	bne.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c63a:	4bad      	ldr	r3, [pc, #692]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c63e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c648:	4aa9      	ldr	r2, [pc, #676]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c64a:	430b      	orrs	r3, r1
 800c64c:	6553      	str	r3, [r2, #84]	@ 0x54
 800c64e:	e003      	b.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c650:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c654:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c660:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c664:	653b      	str	r3, [r7, #80]	@ 0x50
 800c666:	2300      	movs	r3, #0
 800c668:	657b      	str	r3, [r7, #84]	@ 0x54
 800c66a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c66e:	460b      	mov	r3, r1
 800c670:	4313      	orrs	r3, r2
 800c672:	d009      	beq.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c674:	4b9e      	ldr	r3, [pc, #632]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c678:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c682:	4a9b      	ldr	r2, [pc, #620]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c684:	430b      	orrs	r3, r1
 800c686:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c690:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c694:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c696:	2300      	movs	r3, #0
 800c698:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c69a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c69e:	460b      	mov	r3, r1
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	d009      	beq.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c6a4:	4b92      	ldr	r3, [pc, #584]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6a8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c6b2:	4a8f      	ldr	r2, [pc, #572]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6b4:	430b      	orrs	r3, r1
 800c6b6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c6c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6ca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	d00e      	beq.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c6d4:	4b86      	ldr	r3, [pc, #536]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	4a85      	ldr	r2, [pc, #532]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c6de:	6113      	str	r3, [r2, #16]
 800c6e0:	4b83      	ldr	r3, [pc, #524]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6e2:	6919      	ldr	r1, [r3, #16]
 800c6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c6ec:	4a80      	ldr	r2, [pc, #512]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6ee:	430b      	orrs	r3, r1
 800c6f0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c6fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c700:	2300      	movs	r3, #0
 800c702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c704:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c708:	460b      	mov	r3, r1
 800c70a:	4313      	orrs	r3, r2
 800c70c:	d009      	beq.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c70e:	4b78      	ldr	r3, [pc, #480]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c712:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c71a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c71c:	4a74      	ldr	r2, [pc, #464]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c71e:	430b      	orrs	r3, r1
 800c720:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c72e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c730:	2300      	movs	r3, #0
 800c732:	637b      	str	r3, [r7, #52]	@ 0x34
 800c734:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c738:	460b      	mov	r3, r1
 800c73a:	4313      	orrs	r3, r2
 800c73c:	d00a      	beq.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c73e:	4b6c      	ldr	r3, [pc, #432]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c742:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c74a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c74e:	4a68      	ldr	r2, [pc, #416]	@ (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c750:	430b      	orrs	r3, r1
 800c752:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	2100      	movs	r1, #0
 800c75e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c760:	f003 0301 	and.w	r3, r3, #1
 800c764:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c766:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c76a:	460b      	mov	r3, r1
 800c76c:	4313      	orrs	r3, r2
 800c76e:	d011      	beq.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c774:	3308      	adds	r3, #8
 800c776:	2100      	movs	r1, #0
 800c778:	4618      	mov	r0, r3
 800c77a:	f001 f99d 	bl	800dab8 <RCCEx_PLL2_Config>
 800c77e:	4603      	mov	r3, r0
 800c780:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c784:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d003      	beq.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c78c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c790:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	2100      	movs	r1, #0
 800c79e:	6239      	str	r1, [r7, #32]
 800c7a0:	f003 0302 	and.w	r3, r3, #2
 800c7a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7a6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	d011      	beq.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7b4:	3308      	adds	r3, #8
 800c7b6:	2101      	movs	r1, #1
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f001 f97d 	bl	800dab8 <RCCEx_PLL2_Config>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c7c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d003      	beq.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	2100      	movs	r1, #0
 800c7de:	61b9      	str	r1, [r7, #24]
 800c7e0:	f003 0304 	and.w	r3, r3, #4
 800c7e4:	61fb      	str	r3, [r7, #28]
 800c7e6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	d011      	beq.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7f4:	3308      	adds	r3, #8
 800c7f6:	2102      	movs	r1, #2
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f001 f95d 	bl	800dab8 <RCCEx_PLL2_Config>
 800c7fe:	4603      	mov	r3, r0
 800c800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d003      	beq.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c80c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c810:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81c:	2100      	movs	r1, #0
 800c81e:	6139      	str	r1, [r7, #16]
 800c820:	f003 0308 	and.w	r3, r3, #8
 800c824:	617b      	str	r3, [r7, #20]
 800c826:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c82a:	460b      	mov	r3, r1
 800c82c:	4313      	orrs	r3, r2
 800c82e:	d011      	beq.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c834:	3328      	adds	r3, #40	@ 0x28
 800c836:	2100      	movs	r1, #0
 800c838:	4618      	mov	r0, r3
 800c83a:	f001 f9ef 	bl	800dc1c <RCCEx_PLL3_Config>
 800c83e:	4603      	mov	r3, r0
 800c840:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800c844:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d003      	beq.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c84c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c850:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85c:	2100      	movs	r1, #0
 800c85e:	60b9      	str	r1, [r7, #8]
 800c860:	f003 0310 	and.w	r3, r3, #16
 800c864:	60fb      	str	r3, [r7, #12]
 800c866:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c86a:	460b      	mov	r3, r1
 800c86c:	4313      	orrs	r3, r2
 800c86e:	d011      	beq.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c874:	3328      	adds	r3, #40	@ 0x28
 800c876:	2101      	movs	r1, #1
 800c878:	4618      	mov	r0, r3
 800c87a:	f001 f9cf 	bl	800dc1c <RCCEx_PLL3_Config>
 800c87e:	4603      	mov	r3, r0
 800c880:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c884:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d003      	beq.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c88c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c890:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89c:	2100      	movs	r1, #0
 800c89e:	6039      	str	r1, [r7, #0]
 800c8a0:	f003 0320 	and.w	r3, r3, #32
 800c8a4:	607b      	str	r3, [r7, #4]
 800c8a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	d011      	beq.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8b4:	3328      	adds	r3, #40	@ 0x28
 800c8b6:	2102      	movs	r1, #2
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f001 f9af 	bl	800dc1c <RCCEx_PLL3_Config>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c8c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d003      	beq.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800c8d4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d101      	bne.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	e000      	b.n	800c8e2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8ee:	bf00      	nop
 800c8f0:	58024400 	.word	0x58024400

0800c8f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b090      	sub	sp, #64	@ 0x40
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c8fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c902:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c906:	430b      	orrs	r3, r1
 800c908:	f040 8094 	bne.w	800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c90c:	4b9b      	ldr	r3, [pc, #620]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c90e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c910:	f003 0307 	and.w	r3, r3, #7
 800c914:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c918:	2b04      	cmp	r3, #4
 800c91a:	f200 8087 	bhi.w	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c91e:	a201      	add	r2, pc, #4	@ (adr r2, 800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c924:	0800c939 	.word	0x0800c939
 800c928:	0800c961 	.word	0x0800c961
 800c92c:	0800c989 	.word	0x0800c989
 800c930:	0800ca25 	.word	0x0800ca25
 800c934:	0800c9b1 	.word	0x0800c9b1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c938:	4b90      	ldr	r3, [pc, #576]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c940:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c944:	d108      	bne.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 ff62 	bl	800d814 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c954:	f000 bc93 	b.w	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c958:	2300      	movs	r3, #0
 800c95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c95c:	f000 bc8f 	b.w	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c960:	4b86      	ldr	r3, [pc, #536]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c96c:	d108      	bne.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c96e:	f107 0318 	add.w	r3, r7, #24
 800c972:	4618      	mov	r0, r3
 800c974:	f000 fca6 	bl	800d2c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c97c:	f000 bc7f 	b.w	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c980:	2300      	movs	r3, #0
 800c982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c984:	f000 bc7b 	b.w	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c988:	4b7c      	ldr	r3, [pc, #496]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c994:	d108      	bne.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c996:	f107 030c 	add.w	r3, r7, #12
 800c99a:	4618      	mov	r0, r3
 800c99c:	f000 fde6 	bl	800d56c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9a4:	f000 bc6b 	b.w	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9ac:	f000 bc67 	b.w	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9b0:	4b72      	ldr	r3, [pc, #456]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c9b8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9ba:	4b70      	ldr	r3, [pc, #448]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f003 0304 	and.w	r3, r3, #4
 800c9c2:	2b04      	cmp	r3, #4
 800c9c4:	d10c      	bne.n	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c9c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d109      	bne.n	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9cc:	4b6b      	ldr	r3, [pc, #428]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	08db      	lsrs	r3, r3, #3
 800c9d2:	f003 0303 	and.w	r3, r3, #3
 800c9d6:	4a6a      	ldr	r2, [pc, #424]	@ (800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c9d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9de:	e01f      	b.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9e0:	4b66      	ldr	r3, [pc, #408]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9ec:	d106      	bne.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c9ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9f4:	d102      	bne.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9f6:	4b63      	ldr	r3, [pc, #396]	@ (800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9fa:	e011      	b.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9fc:	4b5f      	ldr	r3, [pc, #380]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca08:	d106      	bne.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ca0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca10:	d102      	bne.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca12:	4b5d      	ldr	r3, [pc, #372]	@ (800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca16:	e003      	b.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ca1c:	f000 bc2f 	b.w	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca20:	f000 bc2d 	b.w	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca24:	4b59      	ldr	r3, [pc, #356]	@ (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ca26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca28:	f000 bc29 	b.w	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca30:	f000 bc25 	b.w	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ca34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca38:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ca3c:	430b      	orrs	r3, r1
 800ca3e:	f040 80a7 	bne.w	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ca42:	4b4e      	ldr	r3, [pc, #312]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca46:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ca4a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ca52:	d054      	beq.n	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ca54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ca5a:	f200 808b 	bhi.w	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca60:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ca64:	f000 8083 	beq.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ca68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ca6e:	f200 8081 	bhi.w	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ca72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca78:	d02f      	beq.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ca7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca80:	d878      	bhi.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ca82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d004      	beq.n	800ca92 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ca88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ca8e:	d012      	beq.n	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ca90:	e070      	b.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca92:	4b3a      	ldr	r3, [pc, #232]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ca9e:	d107      	bne.n	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800caa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800caa4:	4618      	mov	r0, r3
 800caa6:	f000 feb5 	bl	800d814 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800caaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caae:	e3e6      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cab0:	2300      	movs	r3, #0
 800cab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cab4:	e3e3      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cab6:	4b31      	ldr	r3, [pc, #196]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cabe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cac2:	d107      	bne.n	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cac4:	f107 0318 	add.w	r3, r7, #24
 800cac8:	4618      	mov	r0, r3
 800caca:	f000 fbfb 	bl	800d2c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cad2:	e3d4      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cad4:	2300      	movs	r3, #0
 800cad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cad8:	e3d1      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cada:	4b28      	ldr	r3, [pc, #160]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cae2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cae6:	d107      	bne.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cae8:	f107 030c 	add.w	r3, r7, #12
 800caec:	4618      	mov	r0, r3
 800caee:	f000 fd3d 	bl	800d56c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caf6:	e3c2      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800caf8:	2300      	movs	r3, #0
 800cafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cafc:	e3bf      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cafe:	4b1f      	ldr	r3, [pc, #124]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cb06:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb08:	4b1c      	ldr	r3, [pc, #112]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f003 0304 	and.w	r3, r3, #4
 800cb10:	2b04      	cmp	r3, #4
 800cb12:	d10c      	bne.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800cb14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d109      	bne.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb1a:	4b18      	ldr	r3, [pc, #96]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	08db      	lsrs	r3, r3, #3
 800cb20:	f003 0303 	and.w	r3, r3, #3
 800cb24:	4a16      	ldr	r2, [pc, #88]	@ (800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cb26:	fa22 f303 	lsr.w	r3, r2, r3
 800cb2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb2c:	e01e      	b.n	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb2e:	4b13      	ldr	r3, [pc, #76]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb3a:	d106      	bne.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800cb3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb42:	d102      	bne.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb44:	4b0f      	ldr	r3, [pc, #60]	@ (800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cb46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb48:	e010      	b.n	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb4a:	4b0c      	ldr	r3, [pc, #48]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb56:	d106      	bne.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cb58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb5e:	d102      	bne.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb60:	4b09      	ldr	r3, [pc, #36]	@ (800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cb62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb64:	e002      	b.n	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb66:	2300      	movs	r3, #0
 800cb68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cb6a:	e388      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb6c:	e387      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb6e:	4b07      	ldr	r3, [pc, #28]	@ (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cb70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb72:	e384      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cb74:	2300      	movs	r3, #0
 800cb76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb78:	e381      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb7a:	bf00      	nop
 800cb7c:	58024400 	.word	0x58024400
 800cb80:	03d09000 	.word	0x03d09000
 800cb84:	003d0900 	.word	0x003d0900
 800cb88:	016e3600 	.word	0x016e3600
 800cb8c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cb90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb94:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800cb98:	430b      	orrs	r3, r1
 800cb9a:	f040 809c 	bne.w	800ccd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cb9e:	4b9e      	ldr	r3, [pc, #632]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cba2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800cba6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbaa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cbae:	d054      	beq.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cbb6:	f200 808b 	bhi.w	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cbc0:	f000 8083 	beq.w	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cbca:	f200 8081 	bhi.w	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cbd4:	d02f      	beq.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cbdc:	d878      	bhi.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d004      	beq.n	800cbee <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800cbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cbea:	d012      	beq.n	800cc12 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cbec:	e070      	b.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbee:	4b8a      	ldr	r3, [pc, #552]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cbf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cbfa:	d107      	bne.n	800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc00:	4618      	mov	r0, r3
 800cc02:	f000 fe07 	bl	800d814 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc0a:	e338      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc10:	e335      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc12:	4b81      	ldr	r3, [pc, #516]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc1e:	d107      	bne.n	800cc30 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc20:	f107 0318 	add.w	r3, r7, #24
 800cc24:	4618      	mov	r0, r3
 800cc26:	f000 fb4d 	bl	800d2c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc2e:	e326      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc30:	2300      	movs	r3, #0
 800cc32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc34:	e323      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc36:	4b78      	ldr	r3, [pc, #480]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cc3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc42:	d107      	bne.n	800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc44:	f107 030c 	add.w	r3, r7, #12
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f000 fc8f 	bl	800d56c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc52:	e314      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc54:	2300      	movs	r3, #0
 800cc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc58:	e311      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc5a:	4b6f      	ldr	r3, [pc, #444]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cc62:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc64:	4b6c      	ldr	r3, [pc, #432]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f003 0304 	and.w	r3, r3, #4
 800cc6c:	2b04      	cmp	r3, #4
 800cc6e:	d10c      	bne.n	800cc8a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cc70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d109      	bne.n	800cc8a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc76:	4b68      	ldr	r3, [pc, #416]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	08db      	lsrs	r3, r3, #3
 800cc7c:	f003 0303 	and.w	r3, r3, #3
 800cc80:	4a66      	ldr	r2, [pc, #408]	@ (800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cc82:	fa22 f303 	lsr.w	r3, r2, r3
 800cc86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc88:	e01e      	b.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc8a:	4b63      	ldr	r3, [pc, #396]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc96:	d106      	bne.n	800cca6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800cc98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc9e:	d102      	bne.n	800cca6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cca0:	4b5f      	ldr	r3, [pc, #380]	@ (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cca4:	e010      	b.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cca6:	4b5c      	ldr	r3, [pc, #368]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ccae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ccb2:	d106      	bne.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800ccb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ccba:	d102      	bne.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ccbc:	4b59      	ldr	r3, [pc, #356]	@ (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ccbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccc0:	e002      	b.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ccc6:	e2da      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ccc8:	e2d9      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ccca:	4b57      	ldr	r3, [pc, #348]	@ (800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccce:	e2d6      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccd4:	e2d3      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ccd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccda:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ccde:	430b      	orrs	r3, r1
 800cce0:	f040 80a7 	bne.w	800ce32 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cce4:	4b4c      	ldr	r3, [pc, #304]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cce8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ccec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ccee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ccf4:	d055      	beq.n	800cda2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ccfc:	f200 8096 	bhi.w	800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd06:	f000 8084 	beq.w	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800cd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd10:	f200 808c 	bhi.w	800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd1a:	d030      	beq.n	800cd7e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd22:	f200 8083 	bhi.w	800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d004      	beq.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cd2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd32:	d012      	beq.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cd34:	e07a      	b.n	800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd36:	4b38      	ldr	r3, [pc, #224]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cd42:	d107      	bne.n	800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 fd63 	bl	800d814 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd52:	e294      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd54:	2300      	movs	r3, #0
 800cd56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd58:	e291      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd5a:	4b2f      	ldr	r3, [pc, #188]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd66:	d107      	bne.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd68:	f107 0318 	add.w	r3, r7, #24
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 faa9 	bl	800d2c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd76:	e282      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd7c:	e27f      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd7e:	4b26      	ldr	r3, [pc, #152]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd8a:	d107      	bne.n	800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd8c:	f107 030c 	add.w	r3, r7, #12
 800cd90:	4618      	mov	r0, r3
 800cd92:	f000 fbeb 	bl	800d56c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd9a:	e270      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cda0:	e26d      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cda2:	4b1d      	ldr	r3, [pc, #116]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cda4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cda6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cdaa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cdac:	4b1a      	ldr	r3, [pc, #104]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f003 0304 	and.w	r3, r3, #4
 800cdb4:	2b04      	cmp	r3, #4
 800cdb6:	d10c      	bne.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800cdb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d109      	bne.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdbe:	4b16      	ldr	r3, [pc, #88]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	08db      	lsrs	r3, r3, #3
 800cdc4:	f003 0303 	and.w	r3, r3, #3
 800cdc8:	4a14      	ldr	r2, [pc, #80]	@ (800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cdca:	fa22 f303 	lsr.w	r3, r2, r3
 800cdce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdd0:	e01e      	b.n	800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cdd2:	4b11      	ldr	r3, [pc, #68]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdde:	d106      	bne.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800cde0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cde6:	d102      	bne.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cde8:	4b0d      	ldr	r3, [pc, #52]	@ (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cdea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdec:	e010      	b.n	800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cdee:	4b0a      	ldr	r3, [pc, #40]	@ (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cdfa:	d106      	bne.n	800ce0a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800cdfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce02:	d102      	bne.n	800ce0a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce04:	4b07      	ldr	r3, [pc, #28]	@ (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ce06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce08:	e002      	b.n	800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ce0e:	e236      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce10:	e235      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce12:	4b05      	ldr	r3, [pc, #20]	@ (800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ce14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce16:	e232      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce18:	58024400 	.word	0x58024400
 800ce1c:	03d09000 	.word	0x03d09000
 800ce20:	003d0900 	.word	0x003d0900
 800ce24:	016e3600 	.word	0x016e3600
 800ce28:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce30:	e225      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ce32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce36:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ce3a:	430b      	orrs	r3, r1
 800ce3c:	f040 8085 	bne.w	800cf4a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ce40:	4b9c      	ldr	r3, [pc, #624]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce44:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ce48:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ce4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ce50:	d06b      	beq.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ce52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ce58:	d874      	bhi.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ce5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ce60:	d056      	beq.n	800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800ce62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ce68:	d86c      	bhi.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ce6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ce70:	d03b      	beq.n	800ceea <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800ce72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ce78:	d864      	bhi.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ce7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce80:	d021      	beq.n	800cec6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ce82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce88:	d85c      	bhi.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ce8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d004      	beq.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800ce90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce96:	d004      	beq.n	800cea2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800ce98:	e054      	b.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ce9a:	f7fe fb5f 	bl	800b55c <HAL_RCC_GetPCLK1Freq>
 800ce9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cea0:	e1ed      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cea2:	4b84      	ldr	r3, [pc, #528]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ceaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ceae:	d107      	bne.n	800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ceb0:	f107 0318 	add.w	r3, r7, #24
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f000 fa05 	bl	800d2c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ceba:	69fb      	ldr	r3, [r7, #28]
 800cebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cebe:	e1de      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cec0:	2300      	movs	r3, #0
 800cec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cec4:	e1db      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cec6:	4b7b      	ldr	r3, [pc, #492]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ced2:	d107      	bne.n	800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ced4:	f107 030c 	add.w	r3, r7, #12
 800ced8:	4618      	mov	r0, r3
 800ceda:	f000 fb47 	bl	800d56c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cee2:	e1cc      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cee4:	2300      	movs	r3, #0
 800cee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cee8:	e1c9      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ceea:	4b72      	ldr	r3, [pc, #456]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f003 0304 	and.w	r3, r3, #4
 800cef2:	2b04      	cmp	r3, #4
 800cef4:	d109      	bne.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cef6:	4b6f      	ldr	r3, [pc, #444]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	08db      	lsrs	r3, r3, #3
 800cefc:	f003 0303 	and.w	r3, r3, #3
 800cf00:	4a6d      	ldr	r2, [pc, #436]	@ (800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cf02:	fa22 f303 	lsr.w	r3, r2, r3
 800cf06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf08:	e1b9      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf0e:	e1b6      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cf10:	4b68      	ldr	r3, [pc, #416]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf1c:	d102      	bne.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800cf1e:	4b67      	ldr	r3, [pc, #412]	@ (800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cf20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf22:	e1ac      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf28:	e1a9      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf2a:	4b62      	ldr	r3, [pc, #392]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf36:	d102      	bne.n	800cf3e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800cf38:	4b61      	ldr	r3, [pc, #388]	@ (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cf3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf3c:	e19f      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf42:	e19c      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cf44:	2300      	movs	r3, #0
 800cf46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf48:	e199      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cf4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf4e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800cf52:	430b      	orrs	r3, r1
 800cf54:	d173      	bne.n	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cf56:	4b57      	ldr	r3, [pc, #348]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cf5e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cf60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf66:	d02f      	beq.n	800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800cf68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf6e:	d863      	bhi.n	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800cf70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d004      	beq.n	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800cf76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf7c:	d012      	beq.n	800cfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800cf7e:	e05b      	b.n	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf80:	4b4c      	ldr	r3, [pc, #304]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf8c:	d107      	bne.n	800cf9e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf8e:	f107 0318 	add.w	r3, r7, #24
 800cf92:	4618      	mov	r0, r3
 800cf94:	f000 f996 	bl	800d2c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf9c:	e16f      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfa2:	e16c      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfa4:	4b43      	ldr	r3, [pc, #268]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cfac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfb0:	d107      	bne.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfb2:	f107 030c 	add.w	r3, r7, #12
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f000 fad8 	bl	800d56c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfc0:	e15d      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfc6:	e15a      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cfc8:	4b3a      	ldr	r3, [pc, #232]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfcc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cfd0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cfd2:	4b38      	ldr	r3, [pc, #224]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f003 0304 	and.w	r3, r3, #4
 800cfda:	2b04      	cmp	r3, #4
 800cfdc:	d10c      	bne.n	800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800cfde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d109      	bne.n	800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfe4:	4b33      	ldr	r3, [pc, #204]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	08db      	lsrs	r3, r3, #3
 800cfea:	f003 0303 	and.w	r3, r3, #3
 800cfee:	4a32      	ldr	r2, [pc, #200]	@ (800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cff0:	fa22 f303 	lsr.w	r3, r2, r3
 800cff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cff6:	e01e      	b.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cff8:	4b2e      	ldr	r3, [pc, #184]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d000:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d004:	d106      	bne.n	800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d008:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d00c:	d102      	bne.n	800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d00e:	4b2b      	ldr	r3, [pc, #172]	@ (800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d012:	e010      	b.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d014:	4b27      	ldr	r3, [pc, #156]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d01c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d020:	d106      	bne.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d024:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d028:	d102      	bne.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d02a:	4b25      	ldr	r3, [pc, #148]	@ (800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d02e:	e002      	b.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d030:	2300      	movs	r3, #0
 800d032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d034:	e123      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d036:	e122      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d038:	2300      	movs	r3, #0
 800d03a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d03c:	e11f      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d03e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d042:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d046:	430b      	orrs	r3, r1
 800d048:	d13c      	bne.n	800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d04a:	4b1a      	ldr	r3, [pc, #104]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d04c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d04e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d052:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d056:	2b00      	cmp	r3, #0
 800d058:	d004      	beq.n	800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d05c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d060:	d012      	beq.n	800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d062:	e023      	b.n	800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d064:	4b13      	ldr	r3, [pc, #76]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d06c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d070:	d107      	bne.n	800d082 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d076:	4618      	mov	r0, r3
 800d078:	f000 fbcc 	bl	800d814 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d080:	e0fd      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d082:	2300      	movs	r3, #0
 800d084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d086:	e0fa      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d088:	4b0a      	ldr	r3, [pc, #40]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d094:	d107      	bne.n	800d0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d096:	f107 0318 	add.w	r3, r7, #24
 800d09a:	4618      	mov	r0, r3
 800d09c:	f000 f912 	bl	800d2c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0a4:	e0eb      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0aa:	e0e8      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0b0:	e0e5      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d0b2:	bf00      	nop
 800d0b4:	58024400 	.word	0x58024400
 800d0b8:	03d09000 	.word	0x03d09000
 800d0bc:	003d0900 	.word	0x003d0900
 800d0c0:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d0c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0c8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d0cc:	430b      	orrs	r3, r1
 800d0ce:	f040 8085 	bne.w	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d0d2:	4b6d      	ldr	r3, [pc, #436]	@ (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d0d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0d6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d0da:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d0e2:	d06b      	beq.n	800d1bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d0ea:	d874      	bhi.n	800d1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0f2:	d056      	beq.n	800d1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0fa:	d86c      	bhi.n	800d1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d102:	d03b      	beq.n	800d17c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d106:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d10a:	d864      	bhi.n	800d1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d112:	d021      	beq.n	800d158 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d11a:	d85c      	bhi.n	800d1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d004      	beq.n	800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d124:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d128:	d004      	beq.n	800d134 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d12a:	e054      	b.n	800d1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d12c:	f000 f8b4 	bl	800d298 <HAL_RCCEx_GetD3PCLK1Freq>
 800d130:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d132:	e0a4      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d134:	4b54      	ldr	r3, [pc, #336]	@ (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d13c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d140:	d107      	bne.n	800d152 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d142:	f107 0318 	add.w	r3, r7, #24
 800d146:	4618      	mov	r0, r3
 800d148:	f000 f8bc 	bl	800d2c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d150:	e095      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d152:	2300      	movs	r3, #0
 800d154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d156:	e092      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d158:	4b4b      	ldr	r3, [pc, #300]	@ (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d160:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d164:	d107      	bne.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d166:	f107 030c 	add.w	r3, r7, #12
 800d16a:	4618      	mov	r0, r3
 800d16c:	f000 f9fe 	bl	800d56c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d174:	e083      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d176:	2300      	movs	r3, #0
 800d178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d17a:	e080      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d17c:	4b42      	ldr	r3, [pc, #264]	@ (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f003 0304 	and.w	r3, r3, #4
 800d184:	2b04      	cmp	r3, #4
 800d186:	d109      	bne.n	800d19c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d188:	4b3f      	ldr	r3, [pc, #252]	@ (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	08db      	lsrs	r3, r3, #3
 800d18e:	f003 0303 	and.w	r3, r3, #3
 800d192:	4a3e      	ldr	r2, [pc, #248]	@ (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d194:	fa22 f303 	lsr.w	r3, r2, r3
 800d198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d19a:	e070      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d19c:	2300      	movs	r3, #0
 800d19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1a0:	e06d      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d1a2:	4b39      	ldr	r3, [pc, #228]	@ (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1ae:	d102      	bne.n	800d1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d1b0:	4b37      	ldr	r3, [pc, #220]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1b4:	e063      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1ba:	e060      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d1bc:	4b32      	ldr	r3, [pc, #200]	@ (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1c8:	d102      	bne.n	800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d1ca:	4b32      	ldr	r3, [pc, #200]	@ (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1ce:	e056      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1d4:	e053      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1da:	e050      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d1dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1e0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d1e4:	430b      	orrs	r3, r1
 800d1e6:	d148      	bne.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d1e8:	4b27      	ldr	r3, [pc, #156]	@ (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d1f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1f8:	d02a      	beq.n	800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d200:	d838      	bhi.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d204:	2b00      	cmp	r3, #0
 800d206:	d004      	beq.n	800d212 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d20e:	d00d      	beq.n	800d22c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d210:	e030      	b.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d212:	4b1d      	ldr	r3, [pc, #116]	@ (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d21a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d21e:	d102      	bne.n	800d226 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d220:	4b1c      	ldr	r3, [pc, #112]	@ (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d224:	e02b      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d226:	2300      	movs	r3, #0
 800d228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d22a:	e028      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d22c:	4b16      	ldr	r3, [pc, #88]	@ (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d234:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d238:	d107      	bne.n	800d24a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d23a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 fae8 	bl	800d814 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d248:	e019      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d24e:	e016      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d250:	4b0d      	ldr	r3, [pc, #52]	@ (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d258:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d25c:	d107      	bne.n	800d26e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d25e:	f107 0318 	add.w	r3, r7, #24
 800d262:	4618      	mov	r0, r3
 800d264:	f000 f82e 	bl	800d2c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d26c:	e007      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d26e:	2300      	movs	r3, #0
 800d270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d272:	e004      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d274:	2300      	movs	r3, #0
 800d276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d278:	e001      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d27e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d280:	4618      	mov	r0, r3
 800d282:	3740      	adds	r7, #64	@ 0x40
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	58024400 	.word	0x58024400
 800d28c:	03d09000 	.word	0x03d09000
 800d290:	003d0900 	.word	0x003d0900
 800d294:	016e3600 	.word	0x016e3600

0800d298 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d29c:	f7fe f92e 	bl	800b4fc <HAL_RCC_GetHCLKFreq>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	4b06      	ldr	r3, [pc, #24]	@ (800d2bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d2a4:	6a1b      	ldr	r3, [r3, #32]
 800d2a6:	091b      	lsrs	r3, r3, #4
 800d2a8:	f003 0307 	and.w	r3, r3, #7
 800d2ac:	4904      	ldr	r1, [pc, #16]	@ (800d2c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d2ae:	5ccb      	ldrb	r3, [r1, r3]
 800d2b0:	f003 031f 	and.w	r3, r3, #31
 800d2b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	58024400 	.word	0x58024400
 800d2c0:	08019ae4 	.word	0x08019ae4

0800d2c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b089      	sub	sp, #36	@ 0x24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d2cc:	4ba1      	ldr	r3, [pc, #644]	@ (800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2d0:	f003 0303 	and.w	r3, r3, #3
 800d2d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d2d6:	4b9f      	ldr	r3, [pc, #636]	@ (800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2da:	0b1b      	lsrs	r3, r3, #12
 800d2dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d2e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d2e2:	4b9c      	ldr	r3, [pc, #624]	@ (800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2e6:	091b      	lsrs	r3, r3, #4
 800d2e8:	f003 0301 	and.w	r3, r3, #1
 800d2ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d2ee:	4b99      	ldr	r3, [pc, #612]	@ (800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2f2:	08db      	lsrs	r3, r3, #3
 800d2f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2f8:	693a      	ldr	r2, [r7, #16]
 800d2fa:	fb02 f303 	mul.w	r3, r2, r3
 800d2fe:	ee07 3a90 	vmov	s15, r3
 800d302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d306:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f000 8111 	beq.w	800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	2b02      	cmp	r3, #2
 800d316:	f000 8083 	beq.w	800d420 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d31a:	69bb      	ldr	r3, [r7, #24]
 800d31c:	2b02      	cmp	r3, #2
 800d31e:	f200 80a1 	bhi.w	800d464 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d003      	beq.n	800d330 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d328:	69bb      	ldr	r3, [r7, #24]
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d056      	beq.n	800d3dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d32e:	e099      	b.n	800d464 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d330:	4b88      	ldr	r3, [pc, #544]	@ (800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f003 0320 	and.w	r3, r3, #32
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d02d      	beq.n	800d398 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d33c:	4b85      	ldr	r3, [pc, #532]	@ (800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	08db      	lsrs	r3, r3, #3
 800d342:	f003 0303 	and.w	r3, r3, #3
 800d346:	4a84      	ldr	r2, [pc, #528]	@ (800d558 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d348:	fa22 f303 	lsr.w	r3, r2, r3
 800d34c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	ee07 3a90 	vmov	s15, r3
 800d354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	ee07 3a90 	vmov	s15, r3
 800d35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d366:	4b7b      	ldr	r3, [pc, #492]	@ (800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d36e:	ee07 3a90 	vmov	s15, r3
 800d372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d376:	ed97 6a03 	vldr	s12, [r7, #12]
 800d37a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d55c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d37e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d38a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d392:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d396:	e087      	b.n	800d4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	ee07 3a90 	vmov	s15, r3
 800d39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d560 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d3a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3aa:	4b6a      	ldr	r3, [pc, #424]	@ (800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3b2:	ee07 3a90 	vmov	s15, r3
 800d3b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d55c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d3ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3da:	e065      	b.n	800d4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	ee07 3a90 	vmov	s15, r3
 800d3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d3ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ee:	4b59      	ldr	r3, [pc, #356]	@ (800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3f6:	ee07 3a90 	vmov	s15, r3
 800d3fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800d402:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d55c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d40a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d40e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d41a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d41e:	e043      	b.n	800d4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	ee07 3a90 	vmov	s15, r3
 800d426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d42a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d42e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d432:	4b48      	ldr	r3, [pc, #288]	@ (800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d43a:	ee07 3a90 	vmov	s15, r3
 800d43e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d442:	ed97 6a03 	vldr	s12, [r7, #12]
 800d446:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d55c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d44a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d44e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d45a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d45e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d462:	e021      	b.n	800d4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	ee07 3a90 	vmov	s15, r3
 800d46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d46e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d476:	4b37      	ldr	r3, [pc, #220]	@ (800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d47a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d47e:	ee07 3a90 	vmov	s15, r3
 800d482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d486:	ed97 6a03 	vldr	s12, [r7, #12]
 800d48a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d55c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d48e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d49a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d49e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d4a8:	4b2a      	ldr	r3, [pc, #168]	@ (800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4ac:	0a5b      	lsrs	r3, r3, #9
 800d4ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4b2:	ee07 3a90 	vmov	s15, r3
 800d4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d4be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4ce:	ee17 2a90 	vmov	r2, s15
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d4d6:	4b1f      	ldr	r3, [pc, #124]	@ (800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4da:	0c1b      	lsrs	r3, r3, #16
 800d4dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4e0:	ee07 3a90 	vmov	s15, r3
 800d4e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d4ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4fc:	ee17 2a90 	vmov	r2, s15
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d504:	4b13      	ldr	r3, [pc, #76]	@ (800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d508:	0e1b      	lsrs	r3, r3, #24
 800d50a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d50e:	ee07 3a90 	vmov	s15, r3
 800d512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d516:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d51a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d51e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d52a:	ee17 2a90 	vmov	r2, s15
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d532:	e008      	b.n	800d546 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2200      	movs	r2, #0
 800d544:	609a      	str	r2, [r3, #8]
}
 800d546:	bf00      	nop
 800d548:	3724      	adds	r7, #36	@ 0x24
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr
 800d552:	bf00      	nop
 800d554:	58024400 	.word	0x58024400
 800d558:	03d09000 	.word	0x03d09000
 800d55c:	46000000 	.word	0x46000000
 800d560:	4c742400 	.word	0x4c742400
 800d564:	4a742400 	.word	0x4a742400
 800d568:	4bb71b00 	.word	0x4bb71b00

0800d56c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b089      	sub	sp, #36	@ 0x24
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d574:	4ba1      	ldr	r3, [pc, #644]	@ (800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d578:	f003 0303 	and.w	r3, r3, #3
 800d57c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d57e:	4b9f      	ldr	r3, [pc, #636]	@ (800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d582:	0d1b      	lsrs	r3, r3, #20
 800d584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d588:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d58a:	4b9c      	ldr	r3, [pc, #624]	@ (800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d58e:	0a1b      	lsrs	r3, r3, #8
 800d590:	f003 0301 	and.w	r3, r3, #1
 800d594:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d596:	4b99      	ldr	r3, [pc, #612]	@ (800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d59a:	08db      	lsrs	r3, r3, #3
 800d59c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5a0:	693a      	ldr	r2, [r7, #16]
 800d5a2:	fb02 f303 	mul.w	r3, r2, r3
 800d5a6:	ee07 3a90 	vmov	s15, r3
 800d5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 8111 	beq.w	800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	f000 8083 	beq.w	800d6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	f200 80a1 	bhi.w	800d70c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d003      	beq.n	800d5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d056      	beq.n	800d684 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d5d6:	e099      	b.n	800d70c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5d8:	4b88      	ldr	r3, [pc, #544]	@ (800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f003 0320 	and.w	r3, r3, #32
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d02d      	beq.n	800d640 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5e4:	4b85      	ldr	r3, [pc, #532]	@ (800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	08db      	lsrs	r3, r3, #3
 800d5ea:	f003 0303 	and.w	r3, r3, #3
 800d5ee:	4a84      	ldr	r2, [pc, #528]	@ (800d800 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d5f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d5f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	ee07 3a90 	vmov	s15, r3
 800d5fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	ee07 3a90 	vmov	s15, r3
 800d606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d60a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d60e:	4b7b      	ldr	r3, [pc, #492]	@ (800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d616:	ee07 3a90 	vmov	s15, r3
 800d61a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d61e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d622:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d804 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d62a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d62e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d63a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d63e:	e087      	b.n	800d750 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	ee07 3a90 	vmov	s15, r3
 800d646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d64a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d808 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d64e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d652:	4b6a      	ldr	r3, [pc, #424]	@ (800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d65a:	ee07 3a90 	vmov	s15, r3
 800d65e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d662:	ed97 6a03 	vldr	s12, [r7, #12]
 800d666:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d804 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d66a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d66e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d67a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d67e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d682:	e065      	b.n	800d750 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	ee07 3a90 	vmov	s15, r3
 800d68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d68e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d80c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d696:	4b59      	ldr	r3, [pc, #356]	@ (800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d69a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d69e:	ee07 3a90 	vmov	s15, r3
 800d6a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d804 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6c6:	e043      	b.n	800d750 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	ee07 3a90 	vmov	s15, r3
 800d6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d810 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d6d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6da:	4b48      	ldr	r3, [pc, #288]	@ (800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e2:	ee07 3a90 	vmov	s15, r3
 800d6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d804 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d70a:	e021      	b.n	800d750 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	ee07 3a90 	vmov	s15, r3
 800d712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d716:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d80c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d71e:	4b37      	ldr	r3, [pc, #220]	@ (800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d726:	ee07 3a90 	vmov	s15, r3
 800d72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d72e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d732:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d804 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d73e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d74a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d74e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d750:	4b2a      	ldr	r3, [pc, #168]	@ (800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d754:	0a5b      	lsrs	r3, r3, #9
 800d756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d75a:	ee07 3a90 	vmov	s15, r3
 800d75e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d762:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d76a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d76e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d776:	ee17 2a90 	vmov	r2, s15
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d77e:	4b1f      	ldr	r3, [pc, #124]	@ (800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d782:	0c1b      	lsrs	r3, r3, #16
 800d784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d788:	ee07 3a90 	vmov	s15, r3
 800d78c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d790:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d794:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d798:	edd7 6a07 	vldr	s13, [r7, #28]
 800d79c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7a4:	ee17 2a90 	vmov	r2, s15
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d7ac:	4b13      	ldr	r3, [pc, #76]	@ (800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7b0:	0e1b      	lsrs	r3, r3, #24
 800d7b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7b6:	ee07 3a90 	vmov	s15, r3
 800d7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7d2:	ee17 2a90 	vmov	r2, s15
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d7da:	e008      	b.n	800d7ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	609a      	str	r2, [r3, #8]
}
 800d7ee:	bf00      	nop
 800d7f0:	3724      	adds	r7, #36	@ 0x24
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	58024400 	.word	0x58024400
 800d800:	03d09000 	.word	0x03d09000
 800d804:	46000000 	.word	0x46000000
 800d808:	4c742400 	.word	0x4c742400
 800d80c:	4a742400 	.word	0x4a742400
 800d810:	4bb71b00 	.word	0x4bb71b00

0800d814 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d814:	b480      	push	{r7}
 800d816:	b089      	sub	sp, #36	@ 0x24
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d81c:	4ba0      	ldr	r3, [pc, #640]	@ (800daa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d81e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d820:	f003 0303 	and.w	r3, r3, #3
 800d824:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d826:	4b9e      	ldr	r3, [pc, #632]	@ (800daa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d82a:	091b      	lsrs	r3, r3, #4
 800d82c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d830:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d832:	4b9b      	ldr	r3, [pc, #620]	@ (800daa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d836:	f003 0301 	and.w	r3, r3, #1
 800d83a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d83c:	4b98      	ldr	r3, [pc, #608]	@ (800daa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d83e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d840:	08db      	lsrs	r3, r3, #3
 800d842:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d846:	693a      	ldr	r2, [r7, #16]
 800d848:	fb02 f303 	mul.w	r3, r2, r3
 800d84c:	ee07 3a90 	vmov	s15, r3
 800d850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d854:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	f000 8111 	beq.w	800da82 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	2b02      	cmp	r3, #2
 800d864:	f000 8083 	beq.w	800d96e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d868:	69bb      	ldr	r3, [r7, #24]
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	f200 80a1 	bhi.w	800d9b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d003      	beq.n	800d87e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d876:	69bb      	ldr	r3, [r7, #24]
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d056      	beq.n	800d92a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d87c:	e099      	b.n	800d9b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d87e:	4b88      	ldr	r3, [pc, #544]	@ (800daa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f003 0320 	and.w	r3, r3, #32
 800d886:	2b00      	cmp	r3, #0
 800d888:	d02d      	beq.n	800d8e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d88a:	4b85      	ldr	r3, [pc, #532]	@ (800daa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	08db      	lsrs	r3, r3, #3
 800d890:	f003 0303 	and.w	r3, r3, #3
 800d894:	4a83      	ldr	r2, [pc, #524]	@ (800daa4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d896:	fa22 f303 	lsr.w	r3, r2, r3
 800d89a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	ee07 3a90 	vmov	s15, r3
 800d8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	ee07 3a90 	vmov	s15, r3
 800d8ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8b4:	4b7a      	ldr	r3, [pc, #488]	@ (800daa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8bc:	ee07 3a90 	vmov	s15, r3
 800d8c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8c8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800daa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d8cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d8d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d8e4:	e087      	b.n	800d9f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	ee07 3a90 	vmov	s15, r3
 800d8ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8f0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800daac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d8f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8f8:	4b69      	ldr	r3, [pc, #420]	@ (800daa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d900:	ee07 3a90 	vmov	s15, r3
 800d904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d908:	ed97 6a03 	vldr	s12, [r7, #12]
 800d90c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800daa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d910:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d918:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d91c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d920:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d924:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d928:	e065      	b.n	800d9f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	ee07 3a90 	vmov	s15, r3
 800d930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d934:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800dab0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d93c:	4b58      	ldr	r3, [pc, #352]	@ (800daa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d93e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d944:	ee07 3a90 	vmov	s15, r3
 800d948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d94c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d950:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800daa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d95c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d964:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d968:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d96c:	e043      	b.n	800d9f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	ee07 3a90 	vmov	s15, r3
 800d974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d978:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800dab4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d97c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d980:	4b47      	ldr	r3, [pc, #284]	@ (800daa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d988:	ee07 3a90 	vmov	s15, r3
 800d98c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d990:	ed97 6a03 	vldr	s12, [r7, #12]
 800d994:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800daa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d998:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d99c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9b0:	e021      	b.n	800d9f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	ee07 3a90 	vmov	s15, r3
 800d9b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9bc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800daac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d9c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9c4:	4b36      	ldr	r3, [pc, #216]	@ (800daa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9cc:	ee07 3a90 	vmov	s15, r3
 800d9d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9d8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800daa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d9f6:	4b2a      	ldr	r3, [pc, #168]	@ (800daa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9fa:	0a5b      	lsrs	r3, r3, #9
 800d9fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da00:	ee07 3a90 	vmov	s15, r3
 800da04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da10:	edd7 6a07 	vldr	s13, [r7, #28]
 800da14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da1c:	ee17 2a90 	vmov	r2, s15
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800da24:	4b1e      	ldr	r3, [pc, #120]	@ (800daa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da28:	0c1b      	lsrs	r3, r3, #16
 800da2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da2e:	ee07 3a90 	vmov	s15, r3
 800da32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800da42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da4a:	ee17 2a90 	vmov	r2, s15
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800da52:	4b13      	ldr	r3, [pc, #76]	@ (800daa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da56:	0e1b      	lsrs	r3, r3, #24
 800da58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da5c:	ee07 3a90 	vmov	s15, r3
 800da60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800da70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da78:	ee17 2a90 	vmov	r2, s15
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800da80:	e008      	b.n	800da94 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2200      	movs	r2, #0
 800da86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	609a      	str	r2, [r3, #8]
}
 800da94:	bf00      	nop
 800da96:	3724      	adds	r7, #36	@ 0x24
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr
 800daa0:	58024400 	.word	0x58024400
 800daa4:	03d09000 	.word	0x03d09000
 800daa8:	46000000 	.word	0x46000000
 800daac:	4c742400 	.word	0x4c742400
 800dab0:	4a742400 	.word	0x4a742400
 800dab4:	4bb71b00 	.word	0x4bb71b00

0800dab8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dac2:	2300      	movs	r3, #0
 800dac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dac6:	4b53      	ldr	r3, [pc, #332]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800dac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daca:	f003 0303 	and.w	r3, r3, #3
 800dace:	2b03      	cmp	r3, #3
 800dad0:	d101      	bne.n	800dad6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dad2:	2301      	movs	r3, #1
 800dad4:	e099      	b.n	800dc0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dad6:	4b4f      	ldr	r3, [pc, #316]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4a4e      	ldr	r2, [pc, #312]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800dadc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dae2:	f7f6 ff53 	bl	800498c <HAL_GetTick>
 800dae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dae8:	e008      	b.n	800dafc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800daea:	f7f6 ff4f 	bl	800498c <HAL_GetTick>
 800daee:	4602      	mov	r2, r0
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	1ad3      	subs	r3, r2, r3
 800daf4:	2b02      	cmp	r3, #2
 800daf6:	d901      	bls.n	800dafc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800daf8:	2303      	movs	r3, #3
 800dafa:	e086      	b.n	800dc0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dafc:	4b45      	ldr	r3, [pc, #276]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1f0      	bne.n	800daea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800db08:	4b42      	ldr	r3, [pc, #264]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800db0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db0c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	031b      	lsls	r3, r3, #12
 800db16:	493f      	ldr	r1, [pc, #252]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800db18:	4313      	orrs	r3, r2
 800db1a:	628b      	str	r3, [r1, #40]	@ 0x28
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	3b01      	subs	r3, #1
 800db22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	689b      	ldr	r3, [r3, #8]
 800db2a:	3b01      	subs	r3, #1
 800db2c:	025b      	lsls	r3, r3, #9
 800db2e:	b29b      	uxth	r3, r3
 800db30:	431a      	orrs	r2, r3
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	68db      	ldr	r3, [r3, #12]
 800db36:	3b01      	subs	r3, #1
 800db38:	041b      	lsls	r3, r3, #16
 800db3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800db3e:	431a      	orrs	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	691b      	ldr	r3, [r3, #16]
 800db44:	3b01      	subs	r3, #1
 800db46:	061b      	lsls	r3, r3, #24
 800db48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800db4c:	4931      	ldr	r1, [pc, #196]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800db4e:	4313      	orrs	r3, r2
 800db50:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800db52:	4b30      	ldr	r3, [pc, #192]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800db54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	695b      	ldr	r3, [r3, #20]
 800db5e:	492d      	ldr	r1, [pc, #180]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800db60:	4313      	orrs	r3, r2
 800db62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800db64:	4b2b      	ldr	r3, [pc, #172]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800db66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db68:	f023 0220 	bic.w	r2, r3, #32
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	699b      	ldr	r3, [r3, #24]
 800db70:	4928      	ldr	r1, [pc, #160]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800db72:	4313      	orrs	r3, r2
 800db74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800db76:	4b27      	ldr	r3, [pc, #156]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800db78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db7a:	4a26      	ldr	r2, [pc, #152]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800db7c:	f023 0310 	bic.w	r3, r3, #16
 800db80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800db82:	4b24      	ldr	r3, [pc, #144]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800db84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db86:	4b24      	ldr	r3, [pc, #144]	@ (800dc18 <RCCEx_PLL2_Config+0x160>)
 800db88:	4013      	ands	r3, r2
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	69d2      	ldr	r2, [r2, #28]
 800db8e:	00d2      	lsls	r2, r2, #3
 800db90:	4920      	ldr	r1, [pc, #128]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800db92:	4313      	orrs	r3, r2
 800db94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800db96:	4b1f      	ldr	r3, [pc, #124]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800db98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db9a:	4a1e      	ldr	r2, [pc, #120]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800db9c:	f043 0310 	orr.w	r3, r3, #16
 800dba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d106      	bne.n	800dbb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dba8:	4b1a      	ldr	r3, [pc, #104]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800dbaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbac:	4a19      	ldr	r2, [pc, #100]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800dbae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dbb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dbb4:	e00f      	b.n	800dbd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d106      	bne.n	800dbca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dbbc:	4b15      	ldr	r3, [pc, #84]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800dbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc0:	4a14      	ldr	r2, [pc, #80]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800dbc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dbc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dbc8:	e005      	b.n	800dbd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dbca:	4b12      	ldr	r3, [pc, #72]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800dbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbce:	4a11      	ldr	r2, [pc, #68]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800dbd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dbd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dbd6:	4b0f      	ldr	r3, [pc, #60]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a0e      	ldr	r2, [pc, #56]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800dbdc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dbe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbe2:	f7f6 fed3 	bl	800498c <HAL_GetTick>
 800dbe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dbe8:	e008      	b.n	800dbfc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dbea:	f7f6 fecf 	bl	800498c <HAL_GetTick>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	1ad3      	subs	r3, r2, r3
 800dbf4:	2b02      	cmp	r3, #2
 800dbf6:	d901      	bls.n	800dbfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dbf8:	2303      	movs	r3, #3
 800dbfa:	e006      	b.n	800dc0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dbfc:	4b05      	ldr	r3, [pc, #20]	@ (800dc14 <RCCEx_PLL2_Config+0x15c>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d0f0      	beq.n	800dbea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	58024400 	.word	0x58024400
 800dc18:	ffff0007 	.word	0xffff0007

0800dc1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc26:	2300      	movs	r3, #0
 800dc28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc2a:	4b53      	ldr	r3, [pc, #332]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dc2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc2e:	f003 0303 	and.w	r3, r3, #3
 800dc32:	2b03      	cmp	r3, #3
 800dc34:	d101      	bne.n	800dc3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	e099      	b.n	800dd6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dc3a:	4b4f      	ldr	r3, [pc, #316]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	4a4e      	ldr	r2, [pc, #312]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dc40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dc44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc46:	f7f6 fea1 	bl	800498c <HAL_GetTick>
 800dc4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc4c:	e008      	b.n	800dc60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dc4e:	f7f6 fe9d 	bl	800498c <HAL_GetTick>
 800dc52:	4602      	mov	r2, r0
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	1ad3      	subs	r3, r2, r3
 800dc58:	2b02      	cmp	r3, #2
 800dc5a:	d901      	bls.n	800dc60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dc5c:	2303      	movs	r3, #3
 800dc5e:	e086      	b.n	800dd6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc60:	4b45      	ldr	r3, [pc, #276]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d1f0      	bne.n	800dc4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dc6c:	4b42      	ldr	r3, [pc, #264]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dc6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc70:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	051b      	lsls	r3, r3, #20
 800dc7a:	493f      	ldr	r1, [pc, #252]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	628b      	str	r3, [r1, #40]	@ 0x28
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	3b01      	subs	r3, #1
 800dc86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	3b01      	subs	r3, #1
 800dc90:	025b      	lsls	r3, r3, #9
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	431a      	orrs	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	041b      	lsls	r3, r3, #16
 800dc9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dca2:	431a      	orrs	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	061b      	lsls	r3, r3, #24
 800dcac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800dcb0:	4931      	ldr	r1, [pc, #196]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dcb6:	4b30      	ldr	r3, [pc, #192]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	695b      	ldr	r3, [r3, #20]
 800dcc2:	492d      	ldr	r1, [pc, #180]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dcc8:	4b2b      	ldr	r3, [pc, #172]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dcca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dccc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	699b      	ldr	r3, [r3, #24]
 800dcd4:	4928      	ldr	r1, [pc, #160]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dcda:	4b27      	ldr	r3, [pc, #156]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dcdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcde:	4a26      	ldr	r2, [pc, #152]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dce6:	4b24      	ldr	r3, [pc, #144]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dcea:	4b24      	ldr	r3, [pc, #144]	@ (800dd7c <RCCEx_PLL3_Config+0x160>)
 800dcec:	4013      	ands	r3, r2
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	69d2      	ldr	r2, [r2, #28]
 800dcf2:	00d2      	lsls	r2, r2, #3
 800dcf4:	4920      	ldr	r1, [pc, #128]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dcfa:	4b1f      	ldr	r3, [pc, #124]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dcfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcfe:	4a1e      	ldr	r2, [pc, #120]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dd00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d106      	bne.n	800dd1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dd0c:	4b1a      	ldr	r3, [pc, #104]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd10:	4a19      	ldr	r2, [pc, #100]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dd12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dd16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd18:	e00f      	b.n	800dd3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d106      	bne.n	800dd2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dd20:	4b15      	ldr	r3, [pc, #84]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd24:	4a14      	ldr	r2, [pc, #80]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dd26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dd2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd2c:	e005      	b.n	800dd3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dd2e:	4b12      	ldr	r3, [pc, #72]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dd30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd32:	4a11      	ldr	r2, [pc, #68]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dd34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dd38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dd3a:	4b0f      	ldr	r3, [pc, #60]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	4a0e      	ldr	r2, [pc, #56]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dd40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dd44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd46:	f7f6 fe21 	bl	800498c <HAL_GetTick>
 800dd4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dd4c:	e008      	b.n	800dd60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dd4e:	f7f6 fe1d 	bl	800498c <HAL_GetTick>
 800dd52:	4602      	mov	r2, r0
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	2b02      	cmp	r3, #2
 800dd5a:	d901      	bls.n	800dd60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dd5c:	2303      	movs	r3, #3
 800dd5e:	e006      	b.n	800dd6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dd60:	4b05      	ldr	r3, [pc, #20]	@ (800dd78 <RCCEx_PLL3_Config+0x15c>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d0f0      	beq.n	800dd4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	58024400 	.word	0x58024400
 800dd7c:	ffff0007 	.word	0xffff0007

0800dd80 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d101      	bne.n	800dd92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dd8e:	2301      	movs	r3, #1
 800dd90:	e10f      	b.n	800dfb2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a87      	ldr	r2, [pc, #540]	@ (800dfbc <HAL_SPI_Init+0x23c>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d00f      	beq.n	800ddc2 <HAL_SPI_Init+0x42>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a86      	ldr	r2, [pc, #536]	@ (800dfc0 <HAL_SPI_Init+0x240>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d00a      	beq.n	800ddc2 <HAL_SPI_Init+0x42>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a84      	ldr	r2, [pc, #528]	@ (800dfc4 <HAL_SPI_Init+0x244>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d005      	beq.n	800ddc2 <HAL_SPI_Init+0x42>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	2b0f      	cmp	r3, #15
 800ddbc:	d901      	bls.n	800ddc2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	e0f7      	b.n	800dfb2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 f900 	bl	800dfc8 <SPI_GetPacketSize>
 800ddc8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4a7b      	ldr	r2, [pc, #492]	@ (800dfbc <HAL_SPI_Init+0x23c>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d00c      	beq.n	800ddee <HAL_SPI_Init+0x6e>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a79      	ldr	r2, [pc, #484]	@ (800dfc0 <HAL_SPI_Init+0x240>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d007      	beq.n	800ddee <HAL_SPI_Init+0x6e>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	4a78      	ldr	r2, [pc, #480]	@ (800dfc4 <HAL_SPI_Init+0x244>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d002      	beq.n	800ddee <HAL_SPI_Init+0x6e>
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2b08      	cmp	r3, #8
 800ddec:	d811      	bhi.n	800de12 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ddf2:	4a72      	ldr	r2, [pc, #456]	@ (800dfbc <HAL_SPI_Init+0x23c>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d009      	beq.n	800de0c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a70      	ldr	r2, [pc, #448]	@ (800dfc0 <HAL_SPI_Init+0x240>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d004      	beq.n	800de0c <HAL_SPI_Init+0x8c>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4a6f      	ldr	r2, [pc, #444]	@ (800dfc4 <HAL_SPI_Init+0x244>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d104      	bne.n	800de16 <HAL_SPI_Init+0x96>
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2b10      	cmp	r3, #16
 800de10:	d901      	bls.n	800de16 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	e0cd      	b.n	800dfb2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d106      	bne.n	800de30 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2200      	movs	r2, #0
 800de26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f7f3 ffae 	bl	8001d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2202      	movs	r2, #2
 800de34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	681a      	ldr	r2, [r3, #0]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	f022 0201 	bic.w	r2, r2, #1
 800de46:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800de52:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	699b      	ldr	r3, [r3, #24]
 800de58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800de5c:	d119      	bne.n	800de92 <HAL_SPI_Init+0x112>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800de66:	d103      	bne.n	800de70 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d008      	beq.n	800de82 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800de74:	2b00      	cmp	r3, #0
 800de76:	d10c      	bne.n	800de92 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800de7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de80:	d107      	bne.n	800de92 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	681a      	ldr	r2, [r3, #0]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800de90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00f      	beq.n	800debe <HAL_SPI_Init+0x13e>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	2b06      	cmp	r3, #6
 800dea4:	d90b      	bls.n	800debe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	430a      	orrs	r2, r1
 800deba:	601a      	str	r2, [r3, #0]
 800debc:	e007      	b.n	800dece <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800decc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	69da      	ldr	r2, [r3, #28]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ded6:	431a      	orrs	r2, r3
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	431a      	orrs	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dee0:	ea42 0103 	orr.w	r1, r2, r3
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	68da      	ldr	r2, [r3, #12]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	430a      	orrs	r2, r1
 800deee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800def8:	431a      	orrs	r2, r3
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800defe:	431a      	orrs	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	699b      	ldr	r3, [r3, #24]
 800df04:	431a      	orrs	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	691b      	ldr	r3, [r3, #16]
 800df0a:	431a      	orrs	r2, r3
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	695b      	ldr	r3, [r3, #20]
 800df10:	431a      	orrs	r2, r3
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6a1b      	ldr	r3, [r3, #32]
 800df16:	431a      	orrs	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	431a      	orrs	r2, r3
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df22:	431a      	orrs	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	431a      	orrs	r2, r3
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df2e:	ea42 0103 	orr.w	r1, r2, r3
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	430a      	orrs	r2, r1
 800df3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d113      	bne.n	800df6e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	689b      	ldr	r3, [r3, #8]
 800df4c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800df58:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	689b      	ldr	r3, [r3, #8]
 800df60:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800df6c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f022 0201 	bic.w	r2, r2, #1
 800df7c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800df86:	2b00      	cmp	r3, #0
 800df88:	d00a      	beq.n	800dfa0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	430a      	orrs	r2, r1
 800df9e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2201      	movs	r2, #1
 800dfac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800dfb0:	2300      	movs	r3, #0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	40013000 	.word	0x40013000
 800dfc0:	40003800 	.word	0x40003800
 800dfc4:	40003c00 	.word	0x40003c00

0800dfc8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfd4:	095b      	lsrs	r3, r3, #5
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	68db      	ldr	r3, [r3, #12]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	3307      	adds	r3, #7
 800dfe6:	08db      	lsrs	r3, r3, #3
 800dfe8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	68fa      	ldr	r2, [r7, #12]
 800dfee:	fb02 f303 	mul.w	r3, r2, r3
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3714      	adds	r7, #20
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr

0800dffe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dffe:	b580      	push	{r7, lr}
 800e000:	b082      	sub	sp, #8
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d101      	bne.n	800e010 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e00c:	2301      	movs	r3, #1
 800e00e:	e049      	b.n	800e0a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e016:	b2db      	uxtb	r3, r3
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d106      	bne.n	800e02a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2200      	movs	r2, #0
 800e020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7f3 ffb9 	bl	8001f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2202      	movs	r2, #2
 800e02e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	3304      	adds	r3, #4
 800e03a:	4619      	mov	r1, r3
 800e03c:	4610      	mov	r0, r2
 800e03e:	f000 fe89 	bl	800ed54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2201      	movs	r2, #1
 800e046:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2201      	movs	r2, #1
 800e04e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2201      	movs	r2, #1
 800e066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2201      	movs	r2, #1
 800e06e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2201      	movs	r2, #1
 800e076:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2201      	movs	r2, #1
 800e07e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2201      	movs	r2, #1
 800e086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2201      	movs	r2, #1
 800e08e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2201      	movs	r2, #1
 800e096:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2201      	movs	r2, #1
 800e09e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e0a2:	2300      	movs	r3, #0
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3708      	adds	r7, #8
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b085      	sub	sp, #20
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d001      	beq.n	800e0c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e056      	b.n	800e172 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a2b      	ldr	r2, [pc, #172]	@ (800e180 <HAL_TIM_Base_Start+0xd4>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d02c      	beq.n	800e130 <HAL_TIM_Base_Start+0x84>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0de:	d027      	beq.n	800e130 <HAL_TIM_Base_Start+0x84>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a27      	ldr	r2, [pc, #156]	@ (800e184 <HAL_TIM_Base_Start+0xd8>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d022      	beq.n	800e130 <HAL_TIM_Base_Start+0x84>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4a26      	ldr	r2, [pc, #152]	@ (800e188 <HAL_TIM_Base_Start+0xdc>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d01d      	beq.n	800e130 <HAL_TIM_Base_Start+0x84>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4a24      	ldr	r2, [pc, #144]	@ (800e18c <HAL_TIM_Base_Start+0xe0>)
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d018      	beq.n	800e130 <HAL_TIM_Base_Start+0x84>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	4a23      	ldr	r2, [pc, #140]	@ (800e190 <HAL_TIM_Base_Start+0xe4>)
 800e104:	4293      	cmp	r3, r2
 800e106:	d013      	beq.n	800e130 <HAL_TIM_Base_Start+0x84>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a21      	ldr	r2, [pc, #132]	@ (800e194 <HAL_TIM_Base_Start+0xe8>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d00e      	beq.n	800e130 <HAL_TIM_Base_Start+0x84>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4a20      	ldr	r2, [pc, #128]	@ (800e198 <HAL_TIM_Base_Start+0xec>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d009      	beq.n	800e130 <HAL_TIM_Base_Start+0x84>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4a1e      	ldr	r2, [pc, #120]	@ (800e19c <HAL_TIM_Base_Start+0xf0>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d004      	beq.n	800e130 <HAL_TIM_Base_Start+0x84>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a1d      	ldr	r2, [pc, #116]	@ (800e1a0 <HAL_TIM_Base_Start+0xf4>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d115      	bne.n	800e15c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	689a      	ldr	r2, [r3, #8]
 800e136:	4b1b      	ldr	r3, [pc, #108]	@ (800e1a4 <HAL_TIM_Base_Start+0xf8>)
 800e138:	4013      	ands	r3, r2
 800e13a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2b06      	cmp	r3, #6
 800e140:	d015      	beq.n	800e16e <HAL_TIM_Base_Start+0xc2>
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e148:	d011      	beq.n	800e16e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	681a      	ldr	r2, [r3, #0]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f042 0201 	orr.w	r2, r2, #1
 800e158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e15a:	e008      	b.n	800e16e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f042 0201 	orr.w	r2, r2, #1
 800e16a:	601a      	str	r2, [r3, #0]
 800e16c:	e000      	b.n	800e170 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e16e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e170:	2300      	movs	r3, #0
}
 800e172:	4618      	mov	r0, r3
 800e174:	3714      	adds	r7, #20
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr
 800e17e:	bf00      	nop
 800e180:	40010000 	.word	0x40010000
 800e184:	40000400 	.word	0x40000400
 800e188:	40000800 	.word	0x40000800
 800e18c:	40000c00 	.word	0x40000c00
 800e190:	40010400 	.word	0x40010400
 800e194:	40001800 	.word	0x40001800
 800e198:	40014000 	.word	0x40014000
 800e19c:	4000e000 	.word	0x4000e000
 800e1a0:	4000e400 	.word	0x4000e400
 800e1a4:	00010007 	.word	0x00010007

0800e1a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d001      	beq.n	800e1c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e05e      	b.n	800e27e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2202      	movs	r2, #2
 800e1c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	68da      	ldr	r2, [r3, #12]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f042 0201 	orr.w	r2, r2, #1
 800e1d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4a2b      	ldr	r2, [pc, #172]	@ (800e28c <HAL_TIM_Base_Start_IT+0xe4>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d02c      	beq.n	800e23c <HAL_TIM_Base_Start_IT+0x94>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1ea:	d027      	beq.n	800e23c <HAL_TIM_Base_Start_IT+0x94>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4a27      	ldr	r2, [pc, #156]	@ (800e290 <HAL_TIM_Base_Start_IT+0xe8>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d022      	beq.n	800e23c <HAL_TIM_Base_Start_IT+0x94>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4a26      	ldr	r2, [pc, #152]	@ (800e294 <HAL_TIM_Base_Start_IT+0xec>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d01d      	beq.n	800e23c <HAL_TIM_Base_Start_IT+0x94>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4a24      	ldr	r2, [pc, #144]	@ (800e298 <HAL_TIM_Base_Start_IT+0xf0>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d018      	beq.n	800e23c <HAL_TIM_Base_Start_IT+0x94>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4a23      	ldr	r2, [pc, #140]	@ (800e29c <HAL_TIM_Base_Start_IT+0xf4>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d013      	beq.n	800e23c <HAL_TIM_Base_Start_IT+0x94>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4a21      	ldr	r2, [pc, #132]	@ (800e2a0 <HAL_TIM_Base_Start_IT+0xf8>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d00e      	beq.n	800e23c <HAL_TIM_Base_Start_IT+0x94>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	4a20      	ldr	r2, [pc, #128]	@ (800e2a4 <HAL_TIM_Base_Start_IT+0xfc>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d009      	beq.n	800e23c <HAL_TIM_Base_Start_IT+0x94>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a1e      	ldr	r2, [pc, #120]	@ (800e2a8 <HAL_TIM_Base_Start_IT+0x100>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d004      	beq.n	800e23c <HAL_TIM_Base_Start_IT+0x94>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4a1d      	ldr	r2, [pc, #116]	@ (800e2ac <HAL_TIM_Base_Start_IT+0x104>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d115      	bne.n	800e268 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	689a      	ldr	r2, [r3, #8]
 800e242:	4b1b      	ldr	r3, [pc, #108]	@ (800e2b0 <HAL_TIM_Base_Start_IT+0x108>)
 800e244:	4013      	ands	r3, r2
 800e246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2b06      	cmp	r3, #6
 800e24c:	d015      	beq.n	800e27a <HAL_TIM_Base_Start_IT+0xd2>
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e254:	d011      	beq.n	800e27a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f042 0201 	orr.w	r2, r2, #1
 800e264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e266:	e008      	b.n	800e27a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f042 0201 	orr.w	r2, r2, #1
 800e276:	601a      	str	r2, [r3, #0]
 800e278:	e000      	b.n	800e27c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e27a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e27c:	2300      	movs	r3, #0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3714      	adds	r7, #20
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	40010000 	.word	0x40010000
 800e290:	40000400 	.word	0x40000400
 800e294:	40000800 	.word	0x40000800
 800e298:	40000c00 	.word	0x40000c00
 800e29c:	40010400 	.word	0x40010400
 800e2a0:	40001800 	.word	0x40001800
 800e2a4:	40014000 	.word	0x40014000
 800e2a8:	4000e000 	.word	0x4000e000
 800e2ac:	4000e400 	.word	0x4000e400
 800e2b0:	00010007 	.word	0x00010007

0800e2b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d101      	bne.n	800e2c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	e049      	b.n	800e35a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d106      	bne.n	800e2e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 f841 	bl	800e362 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2202      	movs	r2, #2
 800e2e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	3304      	adds	r3, #4
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	4610      	mov	r0, r2
 800e2f4:	f000 fd2e 	bl	800ed54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2201      	movs	r2, #1
 800e304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2201      	movs	r2, #1
 800e32c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2201      	movs	r2, #1
 800e334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2201      	movs	r2, #1
 800e33c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2201      	movs	r2, #1
 800e344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2201      	movs	r2, #1
 800e34c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e362:	b480      	push	{r7}
 800e364:	b083      	sub	sp, #12
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e36a:	bf00      	nop
 800e36c:	370c      	adds	r7, #12
 800e36e:	46bd      	mov	sp, r7
 800e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e374:	4770      	bx	lr
	...

0800e378 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d109      	bne.n	800e39c <HAL_TIM_PWM_Start+0x24>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	2b01      	cmp	r3, #1
 800e392:	bf14      	ite	ne
 800e394:	2301      	movne	r3, #1
 800e396:	2300      	moveq	r3, #0
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	e03c      	b.n	800e416 <HAL_TIM_PWM_Start+0x9e>
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	2b04      	cmp	r3, #4
 800e3a0:	d109      	bne.n	800e3b6 <HAL_TIM_PWM_Start+0x3e>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	bf14      	ite	ne
 800e3ae:	2301      	movne	r3, #1
 800e3b0:	2300      	moveq	r3, #0
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	e02f      	b.n	800e416 <HAL_TIM_PWM_Start+0x9e>
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	2b08      	cmp	r3, #8
 800e3ba:	d109      	bne.n	800e3d0 <HAL_TIM_PWM_Start+0x58>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	bf14      	ite	ne
 800e3c8:	2301      	movne	r3, #1
 800e3ca:	2300      	moveq	r3, #0
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	e022      	b.n	800e416 <HAL_TIM_PWM_Start+0x9e>
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	2b0c      	cmp	r3, #12
 800e3d4:	d109      	bne.n	800e3ea <HAL_TIM_PWM_Start+0x72>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	bf14      	ite	ne
 800e3e2:	2301      	movne	r3, #1
 800e3e4:	2300      	moveq	r3, #0
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	e015      	b.n	800e416 <HAL_TIM_PWM_Start+0x9e>
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	2b10      	cmp	r3, #16
 800e3ee:	d109      	bne.n	800e404 <HAL_TIM_PWM_Start+0x8c>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	bf14      	ite	ne
 800e3fc:	2301      	movne	r3, #1
 800e3fe:	2300      	moveq	r3, #0
 800e400:	b2db      	uxtb	r3, r3
 800e402:	e008      	b.n	800e416 <HAL_TIM_PWM_Start+0x9e>
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	bf14      	ite	ne
 800e410:	2301      	movne	r3, #1
 800e412:	2300      	moveq	r3, #0
 800e414:	b2db      	uxtb	r3, r3
 800e416:	2b00      	cmp	r3, #0
 800e418:	d001      	beq.n	800e41e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e41a:	2301      	movs	r3, #1
 800e41c:	e0ab      	b.n	800e576 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d104      	bne.n	800e42e <HAL_TIM_PWM_Start+0xb6>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2202      	movs	r2, #2
 800e428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e42c:	e023      	b.n	800e476 <HAL_TIM_PWM_Start+0xfe>
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	2b04      	cmp	r3, #4
 800e432:	d104      	bne.n	800e43e <HAL_TIM_PWM_Start+0xc6>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2202      	movs	r2, #2
 800e438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e43c:	e01b      	b.n	800e476 <HAL_TIM_PWM_Start+0xfe>
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	2b08      	cmp	r3, #8
 800e442:	d104      	bne.n	800e44e <HAL_TIM_PWM_Start+0xd6>
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2202      	movs	r2, #2
 800e448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e44c:	e013      	b.n	800e476 <HAL_TIM_PWM_Start+0xfe>
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	2b0c      	cmp	r3, #12
 800e452:	d104      	bne.n	800e45e <HAL_TIM_PWM_Start+0xe6>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2202      	movs	r2, #2
 800e458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e45c:	e00b      	b.n	800e476 <HAL_TIM_PWM_Start+0xfe>
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	2b10      	cmp	r3, #16
 800e462:	d104      	bne.n	800e46e <HAL_TIM_PWM_Start+0xf6>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2202      	movs	r2, #2
 800e468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e46c:	e003      	b.n	800e476 <HAL_TIM_PWM_Start+0xfe>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2202      	movs	r2, #2
 800e472:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2201      	movs	r2, #1
 800e47c:	6839      	ldr	r1, [r7, #0]
 800e47e:	4618      	mov	r0, r3
 800e480:	f001 f88e 	bl	800f5a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4a3d      	ldr	r2, [pc, #244]	@ (800e580 <HAL_TIM_PWM_Start+0x208>)
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d013      	beq.n	800e4b6 <HAL_TIM_PWM_Start+0x13e>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4a3c      	ldr	r2, [pc, #240]	@ (800e584 <HAL_TIM_PWM_Start+0x20c>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d00e      	beq.n	800e4b6 <HAL_TIM_PWM_Start+0x13e>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	4a3a      	ldr	r2, [pc, #232]	@ (800e588 <HAL_TIM_PWM_Start+0x210>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d009      	beq.n	800e4b6 <HAL_TIM_PWM_Start+0x13e>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4a39      	ldr	r2, [pc, #228]	@ (800e58c <HAL_TIM_PWM_Start+0x214>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d004      	beq.n	800e4b6 <HAL_TIM_PWM_Start+0x13e>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a37      	ldr	r2, [pc, #220]	@ (800e590 <HAL_TIM_PWM_Start+0x218>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d101      	bne.n	800e4ba <HAL_TIM_PWM_Start+0x142>
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e000      	b.n	800e4bc <HAL_TIM_PWM_Start+0x144>
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d007      	beq.n	800e4d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e4ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4a2a      	ldr	r2, [pc, #168]	@ (800e580 <HAL_TIM_PWM_Start+0x208>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d02c      	beq.n	800e534 <HAL_TIM_PWM_Start+0x1bc>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4e2:	d027      	beq.n	800e534 <HAL_TIM_PWM_Start+0x1bc>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4a2a      	ldr	r2, [pc, #168]	@ (800e594 <HAL_TIM_PWM_Start+0x21c>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d022      	beq.n	800e534 <HAL_TIM_PWM_Start+0x1bc>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a29      	ldr	r2, [pc, #164]	@ (800e598 <HAL_TIM_PWM_Start+0x220>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d01d      	beq.n	800e534 <HAL_TIM_PWM_Start+0x1bc>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a27      	ldr	r2, [pc, #156]	@ (800e59c <HAL_TIM_PWM_Start+0x224>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d018      	beq.n	800e534 <HAL_TIM_PWM_Start+0x1bc>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4a1f      	ldr	r2, [pc, #124]	@ (800e584 <HAL_TIM_PWM_Start+0x20c>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d013      	beq.n	800e534 <HAL_TIM_PWM_Start+0x1bc>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a23      	ldr	r2, [pc, #140]	@ (800e5a0 <HAL_TIM_PWM_Start+0x228>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d00e      	beq.n	800e534 <HAL_TIM_PWM_Start+0x1bc>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4a1b      	ldr	r2, [pc, #108]	@ (800e588 <HAL_TIM_PWM_Start+0x210>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d009      	beq.n	800e534 <HAL_TIM_PWM_Start+0x1bc>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4a1f      	ldr	r2, [pc, #124]	@ (800e5a4 <HAL_TIM_PWM_Start+0x22c>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d004      	beq.n	800e534 <HAL_TIM_PWM_Start+0x1bc>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	4a1e      	ldr	r2, [pc, #120]	@ (800e5a8 <HAL_TIM_PWM_Start+0x230>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d115      	bne.n	800e560 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	689a      	ldr	r2, [r3, #8]
 800e53a:	4b1c      	ldr	r3, [pc, #112]	@ (800e5ac <HAL_TIM_PWM_Start+0x234>)
 800e53c:	4013      	ands	r3, r2
 800e53e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2b06      	cmp	r3, #6
 800e544:	d015      	beq.n	800e572 <HAL_TIM_PWM_Start+0x1fa>
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e54c:	d011      	beq.n	800e572 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f042 0201 	orr.w	r2, r2, #1
 800e55c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e55e:	e008      	b.n	800e572 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f042 0201 	orr.w	r2, r2, #1
 800e56e:	601a      	str	r2, [r3, #0]
 800e570:	e000      	b.n	800e574 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e572:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e574:	2300      	movs	r3, #0
}
 800e576:	4618      	mov	r0, r3
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	40010000 	.word	0x40010000
 800e584:	40010400 	.word	0x40010400
 800e588:	40014000 	.word	0x40014000
 800e58c:	40014400 	.word	0x40014400
 800e590:	40014800 	.word	0x40014800
 800e594:	40000400 	.word	0x40000400
 800e598:	40000800 	.word	0x40000800
 800e59c:	40000c00 	.word	0x40000c00
 800e5a0:	40001800 	.word	0x40001800
 800e5a4:	4000e000 	.word	0x4000e000
 800e5a8:	4000e400 	.word	0x4000e400
 800e5ac:	00010007 	.word	0x00010007

0800e5b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	6839      	ldr	r1, [r7, #0]
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f000 ffec 	bl	800f5a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a3e      	ldr	r2, [pc, #248]	@ (800e6c8 <HAL_TIM_PWM_Stop+0x118>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d013      	beq.n	800e5fa <HAL_TIM_PWM_Stop+0x4a>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4a3d      	ldr	r2, [pc, #244]	@ (800e6cc <HAL_TIM_PWM_Stop+0x11c>)
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d00e      	beq.n	800e5fa <HAL_TIM_PWM_Stop+0x4a>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a3b      	ldr	r2, [pc, #236]	@ (800e6d0 <HAL_TIM_PWM_Stop+0x120>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d009      	beq.n	800e5fa <HAL_TIM_PWM_Stop+0x4a>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	4a3a      	ldr	r2, [pc, #232]	@ (800e6d4 <HAL_TIM_PWM_Stop+0x124>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d004      	beq.n	800e5fa <HAL_TIM_PWM_Stop+0x4a>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a38      	ldr	r2, [pc, #224]	@ (800e6d8 <HAL_TIM_PWM_Stop+0x128>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d101      	bne.n	800e5fe <HAL_TIM_PWM_Stop+0x4e>
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e000      	b.n	800e600 <HAL_TIM_PWM_Stop+0x50>
 800e5fe:	2300      	movs	r3, #0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d017      	beq.n	800e634 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	6a1a      	ldr	r2, [r3, #32]
 800e60a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e60e:	4013      	ands	r3, r2
 800e610:	2b00      	cmp	r3, #0
 800e612:	d10f      	bne.n	800e634 <HAL_TIM_PWM_Stop+0x84>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	6a1a      	ldr	r2, [r3, #32]
 800e61a:	f240 4344 	movw	r3, #1092	@ 0x444
 800e61e:	4013      	ands	r3, r2
 800e620:	2b00      	cmp	r3, #0
 800e622:	d107      	bne.n	800e634 <HAL_TIM_PWM_Stop+0x84>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e632:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	6a1a      	ldr	r2, [r3, #32]
 800e63a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e63e:	4013      	ands	r3, r2
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10f      	bne.n	800e664 <HAL_TIM_PWM_Stop+0xb4>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	6a1a      	ldr	r2, [r3, #32]
 800e64a:	f240 4344 	movw	r3, #1092	@ 0x444
 800e64e:	4013      	ands	r3, r2
 800e650:	2b00      	cmp	r3, #0
 800e652:	d107      	bne.n	800e664 <HAL_TIM_PWM_Stop+0xb4>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f022 0201 	bic.w	r2, r2, #1
 800e662:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d104      	bne.n	800e674 <HAL_TIM_PWM_Stop+0xc4>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2201      	movs	r2, #1
 800e66e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e672:	e023      	b.n	800e6bc <HAL_TIM_PWM_Stop+0x10c>
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	2b04      	cmp	r3, #4
 800e678:	d104      	bne.n	800e684 <HAL_TIM_PWM_Stop+0xd4>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2201      	movs	r2, #1
 800e67e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e682:	e01b      	b.n	800e6bc <HAL_TIM_PWM_Stop+0x10c>
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	2b08      	cmp	r3, #8
 800e688:	d104      	bne.n	800e694 <HAL_TIM_PWM_Stop+0xe4>
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2201      	movs	r2, #1
 800e68e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e692:	e013      	b.n	800e6bc <HAL_TIM_PWM_Stop+0x10c>
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	2b0c      	cmp	r3, #12
 800e698:	d104      	bne.n	800e6a4 <HAL_TIM_PWM_Stop+0xf4>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2201      	movs	r2, #1
 800e69e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e6a2:	e00b      	b.n	800e6bc <HAL_TIM_PWM_Stop+0x10c>
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	2b10      	cmp	r3, #16
 800e6a8:	d104      	bne.n	800e6b4 <HAL_TIM_PWM_Stop+0x104>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e6b2:	e003      	b.n	800e6bc <HAL_TIM_PWM_Stop+0x10c>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800e6bc:	2300      	movs	r3, #0
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3708      	adds	r7, #8
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	40010000 	.word	0x40010000
 800e6cc:	40010400 	.word	0x40010400
 800e6d0:	40014000 	.word	0x40014000
 800e6d4:	40014400 	.word	0x40014400
 800e6d8:	40014800 	.word	0x40014800

0800e6dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	68db      	ldr	r3, [r3, #12]
 800e6ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	691b      	ldr	r3, [r3, #16]
 800e6f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	f003 0302 	and.w	r3, r3, #2
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d020      	beq.n	800e740 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f003 0302 	and.w	r3, r3, #2
 800e704:	2b00      	cmp	r3, #0
 800e706:	d01b      	beq.n	800e740 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f06f 0202 	mvn.w	r2, #2
 800e710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2201      	movs	r2, #1
 800e716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	699b      	ldr	r3, [r3, #24]
 800e71e:	f003 0303 	and.w	r3, r3, #3
 800e722:	2b00      	cmp	r3, #0
 800e724:	d003      	beq.n	800e72e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 faf6 	bl	800ed18 <HAL_TIM_IC_CaptureCallback>
 800e72c:	e005      	b.n	800e73a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f000 fae8 	bl	800ed04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f000 faf9 	bl	800ed2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2200      	movs	r2, #0
 800e73e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	f003 0304 	and.w	r3, r3, #4
 800e746:	2b00      	cmp	r3, #0
 800e748:	d020      	beq.n	800e78c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f003 0304 	and.w	r3, r3, #4
 800e750:	2b00      	cmp	r3, #0
 800e752:	d01b      	beq.n	800e78c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f06f 0204 	mvn.w	r2, #4
 800e75c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2202      	movs	r2, #2
 800e762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	699b      	ldr	r3, [r3, #24]
 800e76a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d003      	beq.n	800e77a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 fad0 	bl	800ed18 <HAL_TIM_IC_CaptureCallback>
 800e778:	e005      	b.n	800e786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f000 fac2 	bl	800ed04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 fad3 	bl	800ed2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2200      	movs	r2, #0
 800e78a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	f003 0308 	and.w	r3, r3, #8
 800e792:	2b00      	cmp	r3, #0
 800e794:	d020      	beq.n	800e7d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f003 0308 	and.w	r3, r3, #8
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d01b      	beq.n	800e7d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f06f 0208 	mvn.w	r2, #8
 800e7a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2204      	movs	r2, #4
 800e7ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	69db      	ldr	r3, [r3, #28]
 800e7b6:	f003 0303 	and.w	r3, r3, #3
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d003      	beq.n	800e7c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 faaa 	bl	800ed18 <HAL_TIM_IC_CaptureCallback>
 800e7c4:	e005      	b.n	800e7d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 fa9c 	bl	800ed04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 faad 	bl	800ed2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	f003 0310 	and.w	r3, r3, #16
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d020      	beq.n	800e824 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f003 0310 	and.w	r3, r3, #16
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d01b      	beq.n	800e824 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f06f 0210 	mvn.w	r2, #16
 800e7f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2208      	movs	r2, #8
 800e7fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	69db      	ldr	r3, [r3, #28]
 800e802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e806:	2b00      	cmp	r3, #0
 800e808:	d003      	beq.n	800e812 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 fa84 	bl	800ed18 <HAL_TIM_IC_CaptureCallback>
 800e810:	e005      	b.n	800e81e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f000 fa76 	bl	800ed04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f000 fa87 	bl	800ed2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2200      	movs	r2, #0
 800e822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	f003 0301 	and.w	r3, r3, #1
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00c      	beq.n	800e848 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f003 0301 	and.w	r3, r3, #1
 800e834:	2b00      	cmp	r3, #0
 800e836:	d007      	beq.n	800e848 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f06f 0201 	mvn.w	r2, #1
 800e840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7f2 f938 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d104      	bne.n	800e85c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d00c      	beq.n	800e876 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e862:	2b00      	cmp	r3, #0
 800e864:	d007      	beq.n	800e876 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e86e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 ff61 	bl	800f738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d00c      	beq.n	800e89a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e886:	2b00      	cmp	r3, #0
 800e888:	d007      	beq.n	800e89a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 ff59 	bl	800f74c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d00c      	beq.n	800e8be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d007      	beq.n	800e8be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e8b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f000 fa41 	bl	800ed40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	f003 0320 	and.w	r3, r3, #32
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d00c      	beq.n	800e8e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f003 0320 	and.w	r3, r3, #32
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d007      	beq.n	800e8e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f06f 0220 	mvn.w	r2, #32
 800e8da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 ff21 	bl	800f724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e8e2:	bf00      	nop
 800e8e4:	3710      	adds	r7, #16
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
	...

0800e8ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b086      	sub	sp, #24
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	60b9      	str	r1, [r7, #8]
 800e8f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e902:	2b01      	cmp	r3, #1
 800e904:	d101      	bne.n	800e90a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e906:	2302      	movs	r3, #2
 800e908:	e0ff      	b.n	800eb0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2201      	movs	r2, #1
 800e90e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2b14      	cmp	r3, #20
 800e916:	f200 80f0 	bhi.w	800eafa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e91a:	a201      	add	r2, pc, #4	@ (adr r2, 800e920 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e920:	0800e975 	.word	0x0800e975
 800e924:	0800eafb 	.word	0x0800eafb
 800e928:	0800eafb 	.word	0x0800eafb
 800e92c:	0800eafb 	.word	0x0800eafb
 800e930:	0800e9b5 	.word	0x0800e9b5
 800e934:	0800eafb 	.word	0x0800eafb
 800e938:	0800eafb 	.word	0x0800eafb
 800e93c:	0800eafb 	.word	0x0800eafb
 800e940:	0800e9f7 	.word	0x0800e9f7
 800e944:	0800eafb 	.word	0x0800eafb
 800e948:	0800eafb 	.word	0x0800eafb
 800e94c:	0800eafb 	.word	0x0800eafb
 800e950:	0800ea37 	.word	0x0800ea37
 800e954:	0800eafb 	.word	0x0800eafb
 800e958:	0800eafb 	.word	0x0800eafb
 800e95c:	0800eafb 	.word	0x0800eafb
 800e960:	0800ea79 	.word	0x0800ea79
 800e964:	0800eafb 	.word	0x0800eafb
 800e968:	0800eafb 	.word	0x0800eafb
 800e96c:	0800eafb 	.word	0x0800eafb
 800e970:	0800eab9 	.word	0x0800eab9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	68b9      	ldr	r1, [r7, #8]
 800e97a:	4618      	mov	r0, r3
 800e97c:	f000 fa9c 	bl	800eeb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	699a      	ldr	r2, [r3, #24]
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f042 0208 	orr.w	r2, r2, #8
 800e98e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	699a      	ldr	r2, [r3, #24]
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f022 0204 	bic.w	r2, r2, #4
 800e99e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	6999      	ldr	r1, [r3, #24]
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	691a      	ldr	r2, [r3, #16]
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	430a      	orrs	r2, r1
 800e9b0:	619a      	str	r2, [r3, #24]
      break;
 800e9b2:	e0a5      	b.n	800eb00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	68b9      	ldr	r1, [r7, #8]
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f000 fb0c 	bl	800efd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	699a      	ldr	r2, [r3, #24]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e9ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	699a      	ldr	r2, [r3, #24]
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e9de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	6999      	ldr	r1, [r3, #24]
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	691b      	ldr	r3, [r3, #16]
 800e9ea:	021a      	lsls	r2, r3, #8
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	430a      	orrs	r2, r1
 800e9f2:	619a      	str	r2, [r3, #24]
      break;
 800e9f4:	e084      	b.n	800eb00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	68b9      	ldr	r1, [r7, #8]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f000 fb75 	bl	800f0ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	69da      	ldr	r2, [r3, #28]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f042 0208 	orr.w	r2, r2, #8
 800ea10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	69da      	ldr	r2, [r3, #28]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f022 0204 	bic.w	r2, r2, #4
 800ea20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	69d9      	ldr	r1, [r3, #28]
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	691a      	ldr	r2, [r3, #16]
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	430a      	orrs	r2, r1
 800ea32:	61da      	str	r2, [r3, #28]
      break;
 800ea34:	e064      	b.n	800eb00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	68b9      	ldr	r1, [r7, #8]
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f000 fbdd 	bl	800f1fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	69da      	ldr	r2, [r3, #28]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ea50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	69da      	ldr	r2, [r3, #28]
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	69d9      	ldr	r1, [r3, #28]
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	691b      	ldr	r3, [r3, #16]
 800ea6c:	021a      	lsls	r2, r3, #8
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	430a      	orrs	r2, r1
 800ea74:	61da      	str	r2, [r3, #28]
      break;
 800ea76:	e043      	b.n	800eb00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	68b9      	ldr	r1, [r7, #8]
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f000 fc26 	bl	800f2d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f042 0208 	orr.w	r2, r2, #8
 800ea92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f022 0204 	bic.w	r2, r2, #4
 800eaa2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	691a      	ldr	r2, [r3, #16]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	430a      	orrs	r2, r1
 800eab4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800eab6:	e023      	b.n	800eb00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	68b9      	ldr	r1, [r7, #8]
 800eabe:	4618      	mov	r0, r3
 800eac0:	f000 fc6a 	bl	800f398 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ead2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eae2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	691b      	ldr	r3, [r3, #16]
 800eaee:	021a      	lsls	r2, r3, #8
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	430a      	orrs	r2, r1
 800eaf6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800eaf8:	e002      	b.n	800eb00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	75fb      	strb	r3, [r7, #23]
      break;
 800eafe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2200      	movs	r2, #0
 800eb04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eb08:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3718      	adds	r7, #24
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop

0800eb14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	d101      	bne.n	800eb30 <HAL_TIM_ConfigClockSource+0x1c>
 800eb2c:	2302      	movs	r3, #2
 800eb2e:	e0dc      	b.n	800ecea <HAL_TIM_ConfigClockSource+0x1d6>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2202      	movs	r2, #2
 800eb3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eb48:	68ba      	ldr	r2, [r7, #8]
 800eb4a:	4b6a      	ldr	r3, [pc, #424]	@ (800ecf4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800eb4c:	4013      	ands	r3, r2
 800eb4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eb56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	68ba      	ldr	r2, [r7, #8]
 800eb5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4a64      	ldr	r2, [pc, #400]	@ (800ecf8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800eb66:	4293      	cmp	r3, r2
 800eb68:	f000 80a9 	beq.w	800ecbe <HAL_TIM_ConfigClockSource+0x1aa>
 800eb6c:	4a62      	ldr	r2, [pc, #392]	@ (800ecf8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	f200 80ae 	bhi.w	800ecd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800eb74:	4a61      	ldr	r2, [pc, #388]	@ (800ecfc <HAL_TIM_ConfigClockSource+0x1e8>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	f000 80a1 	beq.w	800ecbe <HAL_TIM_ConfigClockSource+0x1aa>
 800eb7c:	4a5f      	ldr	r2, [pc, #380]	@ (800ecfc <HAL_TIM_ConfigClockSource+0x1e8>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	f200 80a6 	bhi.w	800ecd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800eb84:	4a5e      	ldr	r2, [pc, #376]	@ (800ed00 <HAL_TIM_ConfigClockSource+0x1ec>)
 800eb86:	4293      	cmp	r3, r2
 800eb88:	f000 8099 	beq.w	800ecbe <HAL_TIM_ConfigClockSource+0x1aa>
 800eb8c:	4a5c      	ldr	r2, [pc, #368]	@ (800ed00 <HAL_TIM_ConfigClockSource+0x1ec>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	f200 809e 	bhi.w	800ecd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800eb94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800eb98:	f000 8091 	beq.w	800ecbe <HAL_TIM_ConfigClockSource+0x1aa>
 800eb9c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800eba0:	f200 8096 	bhi.w	800ecd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800eba4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eba8:	f000 8089 	beq.w	800ecbe <HAL_TIM_ConfigClockSource+0x1aa>
 800ebac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ebb0:	f200 808e 	bhi.w	800ecd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ebb8:	d03e      	beq.n	800ec38 <HAL_TIM_ConfigClockSource+0x124>
 800ebba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ebbe:	f200 8087 	bhi.w	800ecd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ebc6:	f000 8086 	beq.w	800ecd6 <HAL_TIM_ConfigClockSource+0x1c2>
 800ebca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ebce:	d87f      	bhi.n	800ecd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebd0:	2b70      	cmp	r3, #112	@ 0x70
 800ebd2:	d01a      	beq.n	800ec0a <HAL_TIM_ConfigClockSource+0xf6>
 800ebd4:	2b70      	cmp	r3, #112	@ 0x70
 800ebd6:	d87b      	bhi.n	800ecd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebd8:	2b60      	cmp	r3, #96	@ 0x60
 800ebda:	d050      	beq.n	800ec7e <HAL_TIM_ConfigClockSource+0x16a>
 800ebdc:	2b60      	cmp	r3, #96	@ 0x60
 800ebde:	d877      	bhi.n	800ecd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebe0:	2b50      	cmp	r3, #80	@ 0x50
 800ebe2:	d03c      	beq.n	800ec5e <HAL_TIM_ConfigClockSource+0x14a>
 800ebe4:	2b50      	cmp	r3, #80	@ 0x50
 800ebe6:	d873      	bhi.n	800ecd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebe8:	2b40      	cmp	r3, #64	@ 0x40
 800ebea:	d058      	beq.n	800ec9e <HAL_TIM_ConfigClockSource+0x18a>
 800ebec:	2b40      	cmp	r3, #64	@ 0x40
 800ebee:	d86f      	bhi.n	800ecd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebf0:	2b30      	cmp	r3, #48	@ 0x30
 800ebf2:	d064      	beq.n	800ecbe <HAL_TIM_ConfigClockSource+0x1aa>
 800ebf4:	2b30      	cmp	r3, #48	@ 0x30
 800ebf6:	d86b      	bhi.n	800ecd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebf8:	2b20      	cmp	r3, #32
 800ebfa:	d060      	beq.n	800ecbe <HAL_TIM_ConfigClockSource+0x1aa>
 800ebfc:	2b20      	cmp	r3, #32
 800ebfe:	d867      	bhi.n	800ecd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d05c      	beq.n	800ecbe <HAL_TIM_ConfigClockSource+0x1aa>
 800ec04:	2b10      	cmp	r3, #16
 800ec06:	d05a      	beq.n	800ecbe <HAL_TIM_ConfigClockSource+0x1aa>
 800ec08:	e062      	b.n	800ecd0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ec1a:	f000 fca1 	bl	800f560 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	689b      	ldr	r3, [r3, #8]
 800ec24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ec2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	68ba      	ldr	r2, [r7, #8]
 800ec34:	609a      	str	r2, [r3, #8]
      break;
 800ec36:	e04f      	b.n	800ecd8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ec48:	f000 fc8a 	bl	800f560 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	689a      	ldr	r2, [r3, #8]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ec5a:	609a      	str	r2, [r3, #8]
      break;
 800ec5c:	e03c      	b.n	800ecd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	f000 fbfa 	bl	800f464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2150      	movs	r1, #80	@ 0x50
 800ec76:	4618      	mov	r0, r3
 800ec78:	f000 fc54 	bl	800f524 <TIM_ITRx_SetConfig>
      break;
 800ec7c:	e02c      	b.n	800ecd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	f000 fc19 	bl	800f4c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	2160      	movs	r1, #96	@ 0x60
 800ec96:	4618      	mov	r0, r3
 800ec98:	f000 fc44 	bl	800f524 <TIM_ITRx_SetConfig>
      break;
 800ec9c:	e01c      	b.n	800ecd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ecaa:	461a      	mov	r2, r3
 800ecac:	f000 fbda 	bl	800f464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2140      	movs	r1, #64	@ 0x40
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f000 fc34 	bl	800f524 <TIM_ITRx_SetConfig>
      break;
 800ecbc:	e00c      	b.n	800ecd8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	4610      	mov	r0, r2
 800ecca:	f000 fc2b 	bl	800f524 <TIM_ITRx_SetConfig>
      break;
 800ecce:	e003      	b.n	800ecd8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	73fb      	strb	r3, [r7, #15]
      break;
 800ecd4:	e000      	b.n	800ecd8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ecd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ece8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3710      	adds	r7, #16
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	ffceff88 	.word	0xffceff88
 800ecf8:	00100040 	.word	0x00100040
 800ecfc:	00100030 	.word	0x00100030
 800ed00:	00100020 	.word	0x00100020

0800ed04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ed0c:	bf00      	nop
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ed20:	bf00      	nop
 800ed22:	370c      	adds	r7, #12
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b083      	sub	sp, #12
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ed34:	bf00      	nop
 800ed36:	370c      	adds	r7, #12
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr

0800ed40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ed48:	bf00      	nop
 800ed4a:	370c      	adds	r7, #12
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr

0800ed54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ed54:	b480      	push	{r7}
 800ed56:	b085      	sub	sp, #20
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	4a4a      	ldr	r2, [pc, #296]	@ (800ee90 <TIM_Base_SetConfig+0x13c>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d013      	beq.n	800ed94 <TIM_Base_SetConfig+0x40>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed72:	d00f      	beq.n	800ed94 <TIM_Base_SetConfig+0x40>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	4a47      	ldr	r2, [pc, #284]	@ (800ee94 <TIM_Base_SetConfig+0x140>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d00b      	beq.n	800ed94 <TIM_Base_SetConfig+0x40>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4a46      	ldr	r2, [pc, #280]	@ (800ee98 <TIM_Base_SetConfig+0x144>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d007      	beq.n	800ed94 <TIM_Base_SetConfig+0x40>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4a45      	ldr	r2, [pc, #276]	@ (800ee9c <TIM_Base_SetConfig+0x148>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d003      	beq.n	800ed94 <TIM_Base_SetConfig+0x40>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	4a44      	ldr	r2, [pc, #272]	@ (800eea0 <TIM_Base_SetConfig+0x14c>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d108      	bne.n	800eda6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	68fa      	ldr	r2, [r7, #12]
 800eda2:	4313      	orrs	r3, r2
 800eda4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	4a39      	ldr	r2, [pc, #228]	@ (800ee90 <TIM_Base_SetConfig+0x13c>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d027      	beq.n	800edfe <TIM_Base_SetConfig+0xaa>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800edb4:	d023      	beq.n	800edfe <TIM_Base_SetConfig+0xaa>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	4a36      	ldr	r2, [pc, #216]	@ (800ee94 <TIM_Base_SetConfig+0x140>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d01f      	beq.n	800edfe <TIM_Base_SetConfig+0xaa>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4a35      	ldr	r2, [pc, #212]	@ (800ee98 <TIM_Base_SetConfig+0x144>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d01b      	beq.n	800edfe <TIM_Base_SetConfig+0xaa>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4a34      	ldr	r2, [pc, #208]	@ (800ee9c <TIM_Base_SetConfig+0x148>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d017      	beq.n	800edfe <TIM_Base_SetConfig+0xaa>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4a33      	ldr	r2, [pc, #204]	@ (800eea0 <TIM_Base_SetConfig+0x14c>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d013      	beq.n	800edfe <TIM_Base_SetConfig+0xaa>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	4a32      	ldr	r2, [pc, #200]	@ (800eea4 <TIM_Base_SetConfig+0x150>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d00f      	beq.n	800edfe <TIM_Base_SetConfig+0xaa>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	4a31      	ldr	r2, [pc, #196]	@ (800eea8 <TIM_Base_SetConfig+0x154>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d00b      	beq.n	800edfe <TIM_Base_SetConfig+0xaa>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4a30      	ldr	r2, [pc, #192]	@ (800eeac <TIM_Base_SetConfig+0x158>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d007      	beq.n	800edfe <TIM_Base_SetConfig+0xaa>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	4a2f      	ldr	r2, [pc, #188]	@ (800eeb0 <TIM_Base_SetConfig+0x15c>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d003      	beq.n	800edfe <TIM_Base_SetConfig+0xaa>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	4a2e      	ldr	r2, [pc, #184]	@ (800eeb4 <TIM_Base_SetConfig+0x160>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d108      	bne.n	800ee10 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ee04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	68fa      	ldr	r2, [r7, #12]
 800ee0c:	4313      	orrs	r3, r2
 800ee0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	695b      	ldr	r3, [r3, #20]
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	68fa      	ldr	r2, [r7, #12]
 800ee22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	689a      	ldr	r2, [r3, #8]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	4a16      	ldr	r2, [pc, #88]	@ (800ee90 <TIM_Base_SetConfig+0x13c>)
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d00f      	beq.n	800ee5c <TIM_Base_SetConfig+0x108>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	4a18      	ldr	r2, [pc, #96]	@ (800eea0 <TIM_Base_SetConfig+0x14c>)
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d00b      	beq.n	800ee5c <TIM_Base_SetConfig+0x108>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4a17      	ldr	r2, [pc, #92]	@ (800eea4 <TIM_Base_SetConfig+0x150>)
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	d007      	beq.n	800ee5c <TIM_Base_SetConfig+0x108>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	4a16      	ldr	r2, [pc, #88]	@ (800eea8 <TIM_Base_SetConfig+0x154>)
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d003      	beq.n	800ee5c <TIM_Base_SetConfig+0x108>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	4a15      	ldr	r2, [pc, #84]	@ (800eeac <TIM_Base_SetConfig+0x158>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d103      	bne.n	800ee64 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	691a      	ldr	r2, [r3, #16]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2201      	movs	r2, #1
 800ee68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	691b      	ldr	r3, [r3, #16]
 800ee6e:	f003 0301 	and.w	r3, r3, #1
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d105      	bne.n	800ee82 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	691b      	ldr	r3, [r3, #16]
 800ee7a:	f023 0201 	bic.w	r2, r3, #1
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	611a      	str	r2, [r3, #16]
  }
}
 800ee82:	bf00      	nop
 800ee84:	3714      	adds	r7, #20
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop
 800ee90:	40010000 	.word	0x40010000
 800ee94:	40000400 	.word	0x40000400
 800ee98:	40000800 	.word	0x40000800
 800ee9c:	40000c00 	.word	0x40000c00
 800eea0:	40010400 	.word	0x40010400
 800eea4:	40014000 	.word	0x40014000
 800eea8:	40014400 	.word	0x40014400
 800eeac:	40014800 	.word	0x40014800
 800eeb0:	4000e000 	.word	0x4000e000
 800eeb4:	4000e400 	.word	0x4000e400

0800eeb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b087      	sub	sp, #28
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6a1b      	ldr	r3, [r3, #32]
 800eec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6a1b      	ldr	r3, [r3, #32]
 800eecc:	f023 0201 	bic.w	r2, r3, #1
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	699b      	ldr	r3, [r3, #24]
 800eede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	4b37      	ldr	r3, [pc, #220]	@ (800efc0 <TIM_OC1_SetConfig+0x108>)
 800eee4:	4013      	ands	r3, r2
 800eee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f023 0303 	bic.w	r3, r3, #3
 800eeee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	68fa      	ldr	r2, [r7, #12]
 800eef6:	4313      	orrs	r3, r2
 800eef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	f023 0302 	bic.w	r3, r3, #2
 800ef00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	697a      	ldr	r2, [r7, #20]
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4a2d      	ldr	r2, [pc, #180]	@ (800efc4 <TIM_OC1_SetConfig+0x10c>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d00f      	beq.n	800ef34 <TIM_OC1_SetConfig+0x7c>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4a2c      	ldr	r2, [pc, #176]	@ (800efc8 <TIM_OC1_SetConfig+0x110>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d00b      	beq.n	800ef34 <TIM_OC1_SetConfig+0x7c>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	4a2b      	ldr	r2, [pc, #172]	@ (800efcc <TIM_OC1_SetConfig+0x114>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d007      	beq.n	800ef34 <TIM_OC1_SetConfig+0x7c>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	4a2a      	ldr	r2, [pc, #168]	@ (800efd0 <TIM_OC1_SetConfig+0x118>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d003      	beq.n	800ef34 <TIM_OC1_SetConfig+0x7c>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	4a29      	ldr	r2, [pc, #164]	@ (800efd4 <TIM_OC1_SetConfig+0x11c>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d10c      	bne.n	800ef4e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	f023 0308 	bic.w	r3, r3, #8
 800ef3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	697a      	ldr	r2, [r7, #20]
 800ef42:	4313      	orrs	r3, r2
 800ef44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	f023 0304 	bic.w	r3, r3, #4
 800ef4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a1c      	ldr	r2, [pc, #112]	@ (800efc4 <TIM_OC1_SetConfig+0x10c>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d00f      	beq.n	800ef76 <TIM_OC1_SetConfig+0xbe>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a1b      	ldr	r2, [pc, #108]	@ (800efc8 <TIM_OC1_SetConfig+0x110>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d00b      	beq.n	800ef76 <TIM_OC1_SetConfig+0xbe>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4a1a      	ldr	r2, [pc, #104]	@ (800efcc <TIM_OC1_SetConfig+0x114>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d007      	beq.n	800ef76 <TIM_OC1_SetConfig+0xbe>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4a19      	ldr	r2, [pc, #100]	@ (800efd0 <TIM_OC1_SetConfig+0x118>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d003      	beq.n	800ef76 <TIM_OC1_SetConfig+0xbe>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	4a18      	ldr	r2, [pc, #96]	@ (800efd4 <TIM_OC1_SetConfig+0x11c>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d111      	bne.n	800ef9a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ef84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	695b      	ldr	r3, [r3, #20]
 800ef8a:	693a      	ldr	r2, [r7, #16]
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	699b      	ldr	r3, [r3, #24]
 800ef94:	693a      	ldr	r2, [r7, #16]
 800ef96:	4313      	orrs	r3, r2
 800ef98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	693a      	ldr	r2, [r7, #16]
 800ef9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	685a      	ldr	r2, [r3, #4]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	697a      	ldr	r2, [r7, #20]
 800efb2:	621a      	str	r2, [r3, #32]
}
 800efb4:	bf00      	nop
 800efb6:	371c      	adds	r7, #28
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr
 800efc0:	fffeff8f 	.word	0xfffeff8f
 800efc4:	40010000 	.word	0x40010000
 800efc8:	40010400 	.word	0x40010400
 800efcc:	40014000 	.word	0x40014000
 800efd0:	40014400 	.word	0x40014400
 800efd4:	40014800 	.word	0x40014800

0800efd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800efd8:	b480      	push	{r7}
 800efda:	b087      	sub	sp, #28
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6a1b      	ldr	r3, [r3, #32]
 800efe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6a1b      	ldr	r3, [r3, #32]
 800efec:	f023 0210 	bic.w	r2, r3, #16
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	699b      	ldr	r3, [r3, #24]
 800effe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f000:	68fa      	ldr	r2, [r7, #12]
 800f002:	4b34      	ldr	r3, [pc, #208]	@ (800f0d4 <TIM_OC2_SetConfig+0xfc>)
 800f004:	4013      	ands	r3, r2
 800f006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f00e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	021b      	lsls	r3, r3, #8
 800f016:	68fa      	ldr	r2, [r7, #12]
 800f018:	4313      	orrs	r3, r2
 800f01a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	f023 0320 	bic.w	r3, r3, #32
 800f022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	689b      	ldr	r3, [r3, #8]
 800f028:	011b      	lsls	r3, r3, #4
 800f02a:	697a      	ldr	r2, [r7, #20]
 800f02c:	4313      	orrs	r3, r2
 800f02e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4a29      	ldr	r2, [pc, #164]	@ (800f0d8 <TIM_OC2_SetConfig+0x100>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d003      	beq.n	800f040 <TIM_OC2_SetConfig+0x68>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4a28      	ldr	r2, [pc, #160]	@ (800f0dc <TIM_OC2_SetConfig+0x104>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d10d      	bne.n	800f05c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	011b      	lsls	r3, r3, #4
 800f04e:	697a      	ldr	r2, [r7, #20]
 800f050:	4313      	orrs	r3, r2
 800f052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f05a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4a1e      	ldr	r2, [pc, #120]	@ (800f0d8 <TIM_OC2_SetConfig+0x100>)
 800f060:	4293      	cmp	r3, r2
 800f062:	d00f      	beq.n	800f084 <TIM_OC2_SetConfig+0xac>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4a1d      	ldr	r2, [pc, #116]	@ (800f0dc <TIM_OC2_SetConfig+0x104>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d00b      	beq.n	800f084 <TIM_OC2_SetConfig+0xac>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4a1c      	ldr	r2, [pc, #112]	@ (800f0e0 <TIM_OC2_SetConfig+0x108>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d007      	beq.n	800f084 <TIM_OC2_SetConfig+0xac>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4a1b      	ldr	r2, [pc, #108]	@ (800f0e4 <TIM_OC2_SetConfig+0x10c>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d003      	beq.n	800f084 <TIM_OC2_SetConfig+0xac>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	4a1a      	ldr	r2, [pc, #104]	@ (800f0e8 <TIM_OC2_SetConfig+0x110>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d113      	bne.n	800f0ac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f08a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	695b      	ldr	r3, [r3, #20]
 800f098:	009b      	lsls	r3, r3, #2
 800f09a:	693a      	ldr	r2, [r7, #16]
 800f09c:	4313      	orrs	r3, r2
 800f09e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	699b      	ldr	r3, [r3, #24]
 800f0a4:	009b      	lsls	r3, r3, #2
 800f0a6:	693a      	ldr	r2, [r7, #16]
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	693a      	ldr	r2, [r7, #16]
 800f0b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	685a      	ldr	r2, [r3, #4]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	697a      	ldr	r2, [r7, #20]
 800f0c4:	621a      	str	r2, [r3, #32]
}
 800f0c6:	bf00      	nop
 800f0c8:	371c      	adds	r7, #28
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr
 800f0d2:	bf00      	nop
 800f0d4:	feff8fff 	.word	0xfeff8fff
 800f0d8:	40010000 	.word	0x40010000
 800f0dc:	40010400 	.word	0x40010400
 800f0e0:	40014000 	.word	0x40014000
 800f0e4:	40014400 	.word	0x40014400
 800f0e8:	40014800 	.word	0x40014800

0800f0ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b087      	sub	sp, #28
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6a1b      	ldr	r3, [r3, #32]
 800f0fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6a1b      	ldr	r3, [r3, #32]
 800f100:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	69db      	ldr	r3, [r3, #28]
 800f112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f114:	68fa      	ldr	r2, [r7, #12]
 800f116:	4b33      	ldr	r3, [pc, #204]	@ (800f1e4 <TIM_OC3_SetConfig+0xf8>)
 800f118:	4013      	ands	r3, r2
 800f11a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f023 0303 	bic.w	r3, r3, #3
 800f122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	68fa      	ldr	r2, [r7, #12]
 800f12a:	4313      	orrs	r3, r2
 800f12c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	689b      	ldr	r3, [r3, #8]
 800f13a:	021b      	lsls	r3, r3, #8
 800f13c:	697a      	ldr	r2, [r7, #20]
 800f13e:	4313      	orrs	r3, r2
 800f140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4a28      	ldr	r2, [pc, #160]	@ (800f1e8 <TIM_OC3_SetConfig+0xfc>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d003      	beq.n	800f152 <TIM_OC3_SetConfig+0x66>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	4a27      	ldr	r2, [pc, #156]	@ (800f1ec <TIM_OC3_SetConfig+0x100>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d10d      	bne.n	800f16e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	021b      	lsls	r3, r3, #8
 800f160:	697a      	ldr	r2, [r7, #20]
 800f162:	4313      	orrs	r3, r2
 800f164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f16c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	4a1d      	ldr	r2, [pc, #116]	@ (800f1e8 <TIM_OC3_SetConfig+0xfc>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d00f      	beq.n	800f196 <TIM_OC3_SetConfig+0xaa>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	4a1c      	ldr	r2, [pc, #112]	@ (800f1ec <TIM_OC3_SetConfig+0x100>)
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d00b      	beq.n	800f196 <TIM_OC3_SetConfig+0xaa>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4a1b      	ldr	r2, [pc, #108]	@ (800f1f0 <TIM_OC3_SetConfig+0x104>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d007      	beq.n	800f196 <TIM_OC3_SetConfig+0xaa>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4a1a      	ldr	r2, [pc, #104]	@ (800f1f4 <TIM_OC3_SetConfig+0x108>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d003      	beq.n	800f196 <TIM_OC3_SetConfig+0xaa>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	4a19      	ldr	r2, [pc, #100]	@ (800f1f8 <TIM_OC3_SetConfig+0x10c>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d113      	bne.n	800f1be <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f19c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f1a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	695b      	ldr	r3, [r3, #20]
 800f1aa:	011b      	lsls	r3, r3, #4
 800f1ac:	693a      	ldr	r2, [r7, #16]
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	699b      	ldr	r3, [r3, #24]
 800f1b6:	011b      	lsls	r3, r3, #4
 800f1b8:	693a      	ldr	r2, [r7, #16]
 800f1ba:	4313      	orrs	r3, r2
 800f1bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	693a      	ldr	r2, [r7, #16]
 800f1c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	68fa      	ldr	r2, [r7, #12]
 800f1c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	685a      	ldr	r2, [r3, #4]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	697a      	ldr	r2, [r7, #20]
 800f1d6:	621a      	str	r2, [r3, #32]
}
 800f1d8:	bf00      	nop
 800f1da:	371c      	adds	r7, #28
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr
 800f1e4:	fffeff8f 	.word	0xfffeff8f
 800f1e8:	40010000 	.word	0x40010000
 800f1ec:	40010400 	.word	0x40010400
 800f1f0:	40014000 	.word	0x40014000
 800f1f4:	40014400 	.word	0x40014400
 800f1f8:	40014800 	.word	0x40014800

0800f1fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b087      	sub	sp, #28
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6a1b      	ldr	r3, [r3, #32]
 800f20a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a1b      	ldr	r3, [r3, #32]
 800f210:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	69db      	ldr	r3, [r3, #28]
 800f222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f224:	68fa      	ldr	r2, [r7, #12]
 800f226:	4b24      	ldr	r3, [pc, #144]	@ (800f2b8 <TIM_OC4_SetConfig+0xbc>)
 800f228:	4013      	ands	r3, r2
 800f22a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	021b      	lsls	r3, r3, #8
 800f23a:	68fa      	ldr	r2, [r7, #12]
 800f23c:	4313      	orrs	r3, r2
 800f23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	689b      	ldr	r3, [r3, #8]
 800f24c:	031b      	lsls	r3, r3, #12
 800f24e:	693a      	ldr	r2, [r7, #16]
 800f250:	4313      	orrs	r3, r2
 800f252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	4a19      	ldr	r2, [pc, #100]	@ (800f2bc <TIM_OC4_SetConfig+0xc0>)
 800f258:	4293      	cmp	r3, r2
 800f25a:	d00f      	beq.n	800f27c <TIM_OC4_SetConfig+0x80>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	4a18      	ldr	r2, [pc, #96]	@ (800f2c0 <TIM_OC4_SetConfig+0xc4>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d00b      	beq.n	800f27c <TIM_OC4_SetConfig+0x80>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4a17      	ldr	r2, [pc, #92]	@ (800f2c4 <TIM_OC4_SetConfig+0xc8>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d007      	beq.n	800f27c <TIM_OC4_SetConfig+0x80>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4a16      	ldr	r2, [pc, #88]	@ (800f2c8 <TIM_OC4_SetConfig+0xcc>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d003      	beq.n	800f27c <TIM_OC4_SetConfig+0x80>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	4a15      	ldr	r2, [pc, #84]	@ (800f2cc <TIM_OC4_SetConfig+0xd0>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d109      	bne.n	800f290 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	695b      	ldr	r3, [r3, #20]
 800f288:	019b      	lsls	r3, r3, #6
 800f28a:	697a      	ldr	r2, [r7, #20]
 800f28c:	4313      	orrs	r3, r2
 800f28e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	697a      	ldr	r2, [r7, #20]
 800f294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	68fa      	ldr	r2, [r7, #12]
 800f29a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	685a      	ldr	r2, [r3, #4]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	693a      	ldr	r2, [r7, #16]
 800f2a8:	621a      	str	r2, [r3, #32]
}
 800f2aa:	bf00      	nop
 800f2ac:	371c      	adds	r7, #28
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	feff8fff 	.word	0xfeff8fff
 800f2bc:	40010000 	.word	0x40010000
 800f2c0:	40010400 	.word	0x40010400
 800f2c4:	40014000 	.word	0x40014000
 800f2c8:	40014400 	.word	0x40014400
 800f2cc:	40014800 	.word	0x40014800

0800f2d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b087      	sub	sp, #28
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6a1b      	ldr	r3, [r3, #32]
 800f2de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6a1b      	ldr	r3, [r3, #32]
 800f2e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f2f8:	68fa      	ldr	r2, [r7, #12]
 800f2fa:	4b21      	ldr	r3, [pc, #132]	@ (800f380 <TIM_OC5_SetConfig+0xb0>)
 800f2fc:	4013      	ands	r3, r2
 800f2fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	68fa      	ldr	r2, [r7, #12]
 800f306:	4313      	orrs	r3, r2
 800f308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f310:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	689b      	ldr	r3, [r3, #8]
 800f316:	041b      	lsls	r3, r3, #16
 800f318:	693a      	ldr	r2, [r7, #16]
 800f31a:	4313      	orrs	r3, r2
 800f31c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4a18      	ldr	r2, [pc, #96]	@ (800f384 <TIM_OC5_SetConfig+0xb4>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d00f      	beq.n	800f346 <TIM_OC5_SetConfig+0x76>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4a17      	ldr	r2, [pc, #92]	@ (800f388 <TIM_OC5_SetConfig+0xb8>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d00b      	beq.n	800f346 <TIM_OC5_SetConfig+0x76>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4a16      	ldr	r2, [pc, #88]	@ (800f38c <TIM_OC5_SetConfig+0xbc>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d007      	beq.n	800f346 <TIM_OC5_SetConfig+0x76>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4a15      	ldr	r2, [pc, #84]	@ (800f390 <TIM_OC5_SetConfig+0xc0>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d003      	beq.n	800f346 <TIM_OC5_SetConfig+0x76>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4a14      	ldr	r2, [pc, #80]	@ (800f394 <TIM_OC5_SetConfig+0xc4>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d109      	bne.n	800f35a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f34c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	695b      	ldr	r3, [r3, #20]
 800f352:	021b      	lsls	r3, r3, #8
 800f354:	697a      	ldr	r2, [r7, #20]
 800f356:	4313      	orrs	r3, r2
 800f358:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	697a      	ldr	r2, [r7, #20]
 800f35e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	68fa      	ldr	r2, [r7, #12]
 800f364:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	685a      	ldr	r2, [r3, #4]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	693a      	ldr	r2, [r7, #16]
 800f372:	621a      	str	r2, [r3, #32]
}
 800f374:	bf00      	nop
 800f376:	371c      	adds	r7, #28
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr
 800f380:	fffeff8f 	.word	0xfffeff8f
 800f384:	40010000 	.word	0x40010000
 800f388:	40010400 	.word	0x40010400
 800f38c:	40014000 	.word	0x40014000
 800f390:	40014400 	.word	0x40014400
 800f394:	40014800 	.word	0x40014800

0800f398 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f398:	b480      	push	{r7}
 800f39a:	b087      	sub	sp, #28
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6a1b      	ldr	r3, [r3, #32]
 800f3a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6a1b      	ldr	r3, [r3, #32]
 800f3ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	4b22      	ldr	r3, [pc, #136]	@ (800f44c <TIM_OC6_SetConfig+0xb4>)
 800f3c4:	4013      	ands	r3, r2
 800f3c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	021b      	lsls	r3, r3, #8
 800f3ce:	68fa      	ldr	r2, [r7, #12]
 800f3d0:	4313      	orrs	r3, r2
 800f3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f3da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	051b      	lsls	r3, r3, #20
 800f3e2:	693a      	ldr	r2, [r7, #16]
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4a19      	ldr	r2, [pc, #100]	@ (800f450 <TIM_OC6_SetConfig+0xb8>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d00f      	beq.n	800f410 <TIM_OC6_SetConfig+0x78>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4a18      	ldr	r2, [pc, #96]	@ (800f454 <TIM_OC6_SetConfig+0xbc>)
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d00b      	beq.n	800f410 <TIM_OC6_SetConfig+0x78>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	4a17      	ldr	r2, [pc, #92]	@ (800f458 <TIM_OC6_SetConfig+0xc0>)
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	d007      	beq.n	800f410 <TIM_OC6_SetConfig+0x78>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	4a16      	ldr	r2, [pc, #88]	@ (800f45c <TIM_OC6_SetConfig+0xc4>)
 800f404:	4293      	cmp	r3, r2
 800f406:	d003      	beq.n	800f410 <TIM_OC6_SetConfig+0x78>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4a15      	ldr	r2, [pc, #84]	@ (800f460 <TIM_OC6_SetConfig+0xc8>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d109      	bne.n	800f424 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f416:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	695b      	ldr	r3, [r3, #20]
 800f41c:	029b      	lsls	r3, r3, #10
 800f41e:	697a      	ldr	r2, [r7, #20]
 800f420:	4313      	orrs	r3, r2
 800f422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	697a      	ldr	r2, [r7, #20]
 800f428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	685a      	ldr	r2, [r3, #4]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	693a      	ldr	r2, [r7, #16]
 800f43c:	621a      	str	r2, [r3, #32]
}
 800f43e:	bf00      	nop
 800f440:	371c      	adds	r7, #28
 800f442:	46bd      	mov	sp, r7
 800f444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f448:	4770      	bx	lr
 800f44a:	bf00      	nop
 800f44c:	feff8fff 	.word	0xfeff8fff
 800f450:	40010000 	.word	0x40010000
 800f454:	40010400 	.word	0x40010400
 800f458:	40014000 	.word	0x40014000
 800f45c:	40014400 	.word	0x40014400
 800f460:	40014800 	.word	0x40014800

0800f464 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f464:	b480      	push	{r7}
 800f466:	b087      	sub	sp, #28
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	6a1b      	ldr	r3, [r3, #32]
 800f474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	6a1b      	ldr	r3, [r3, #32]
 800f47a:	f023 0201 	bic.w	r2, r3, #1
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	699b      	ldr	r3, [r3, #24]
 800f486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f48e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	011b      	lsls	r3, r3, #4
 800f494:	693a      	ldr	r2, [r7, #16]
 800f496:	4313      	orrs	r3, r2
 800f498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	f023 030a 	bic.w	r3, r3, #10
 800f4a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f4a2:	697a      	ldr	r2, [r7, #20]
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	4313      	orrs	r3, r2
 800f4a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	693a      	ldr	r2, [r7, #16]
 800f4ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	697a      	ldr	r2, [r7, #20]
 800f4b4:	621a      	str	r2, [r3, #32]
}
 800f4b6:	bf00      	nop
 800f4b8:	371c      	adds	r7, #28
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c0:	4770      	bx	lr

0800f4c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f4c2:	b480      	push	{r7}
 800f4c4:	b087      	sub	sp, #28
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	60f8      	str	r0, [r7, #12]
 800f4ca:	60b9      	str	r1, [r7, #8]
 800f4cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	6a1b      	ldr	r3, [r3, #32]
 800f4d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6a1b      	ldr	r3, [r3, #32]
 800f4d8:	f023 0210 	bic.w	r2, r3, #16
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	699b      	ldr	r3, [r3, #24]
 800f4e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f4ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	031b      	lsls	r3, r3, #12
 800f4f2:	693a      	ldr	r2, [r7, #16]
 800f4f4:	4313      	orrs	r3, r2
 800f4f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f4fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	011b      	lsls	r3, r3, #4
 800f504:	697a      	ldr	r2, [r7, #20]
 800f506:	4313      	orrs	r3, r2
 800f508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	693a      	ldr	r2, [r7, #16]
 800f50e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	697a      	ldr	r2, [r7, #20]
 800f514:	621a      	str	r2, [r3, #32]
}
 800f516:	bf00      	nop
 800f518:	371c      	adds	r7, #28
 800f51a:	46bd      	mov	sp, r7
 800f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f520:	4770      	bx	lr
	...

0800f524 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f524:	b480      	push	{r7}
 800f526:	b085      	sub	sp, #20
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	689b      	ldr	r3, [r3, #8]
 800f532:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	4b09      	ldr	r3, [pc, #36]	@ (800f55c <TIM_ITRx_SetConfig+0x38>)
 800f538:	4013      	ands	r3, r2
 800f53a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f53c:	683a      	ldr	r2, [r7, #0]
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	4313      	orrs	r3, r2
 800f542:	f043 0307 	orr.w	r3, r3, #7
 800f546:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	68fa      	ldr	r2, [r7, #12]
 800f54c:	609a      	str	r2, [r3, #8]
}
 800f54e:	bf00      	nop
 800f550:	3714      	adds	r7, #20
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	ffcfff8f 	.word	0xffcfff8f

0800f560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f560:	b480      	push	{r7}
 800f562:	b087      	sub	sp, #28
 800f564:	af00      	add	r7, sp, #0
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	607a      	str	r2, [r7, #4]
 800f56c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	689b      	ldr	r3, [r3, #8]
 800f572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f57a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	021a      	lsls	r2, r3, #8
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	431a      	orrs	r2, r3
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	4313      	orrs	r3, r2
 800f588:	697a      	ldr	r2, [r7, #20]
 800f58a:	4313      	orrs	r3, r2
 800f58c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	697a      	ldr	r2, [r7, #20]
 800f592:	609a      	str	r2, [r3, #8]
}
 800f594:	bf00      	nop
 800f596:	371c      	adds	r7, #28
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr

0800f5a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b087      	sub	sp, #28
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	f003 031f 	and.w	r3, r3, #31
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800f5b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	6a1a      	ldr	r2, [r3, #32]
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	43db      	mvns	r3, r3
 800f5c2:	401a      	ands	r2, r3
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	6a1a      	ldr	r2, [r3, #32]
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	f003 031f 	and.w	r3, r3, #31
 800f5d2:	6879      	ldr	r1, [r7, #4]
 800f5d4:	fa01 f303 	lsl.w	r3, r1, r3
 800f5d8:	431a      	orrs	r2, r3
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	621a      	str	r2, [r3, #32]
}
 800f5de:	bf00      	nop
 800f5e0:	371c      	adds	r7, #28
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e8:	4770      	bx	lr
	...

0800f5ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b085      	sub	sp, #20
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d101      	bne.n	800f604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f600:	2302      	movs	r3, #2
 800f602:	e077      	b.n	800f6f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2201      	movs	r2, #1
 800f608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2202      	movs	r2, #2
 800f610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	689b      	ldr	r3, [r3, #8]
 800f622:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4a35      	ldr	r2, [pc, #212]	@ (800f700 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d004      	beq.n	800f638 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	4a34      	ldr	r2, [pc, #208]	@ (800f704 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d108      	bne.n	800f64a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f63e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	68fa      	ldr	r2, [r7, #12]
 800f646:	4313      	orrs	r3, r2
 800f648:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f650:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	68fa      	ldr	r2, [r7, #12]
 800f658:	4313      	orrs	r3, r2
 800f65a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	68fa      	ldr	r2, [r7, #12]
 800f662:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4a25      	ldr	r2, [pc, #148]	@ (800f700 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d02c      	beq.n	800f6c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f676:	d027      	beq.n	800f6c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	4a22      	ldr	r2, [pc, #136]	@ (800f708 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d022      	beq.n	800f6c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	4a21      	ldr	r2, [pc, #132]	@ (800f70c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d01d      	beq.n	800f6c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a1f      	ldr	r2, [pc, #124]	@ (800f710 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d018      	beq.n	800f6c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a1a      	ldr	r2, [pc, #104]	@ (800f704 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d013      	beq.n	800f6c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4a1b      	ldr	r2, [pc, #108]	@ (800f714 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d00e      	beq.n	800f6c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4a1a      	ldr	r2, [pc, #104]	@ (800f718 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d009      	beq.n	800f6c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4a18      	ldr	r2, [pc, #96]	@ (800f71c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d004      	beq.n	800f6c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	4a17      	ldr	r2, [pc, #92]	@ (800f720 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d10c      	bne.n	800f6e2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	689b      	ldr	r3, [r3, #8]
 800f6d4:	68ba      	ldr	r2, [r7, #8]
 800f6d6:	4313      	orrs	r3, r2
 800f6d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	68ba      	ldr	r2, [r7, #8]
 800f6e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2201      	movs	r2, #1
 800f6e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f6f2:	2300      	movs	r3, #0
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3714      	adds	r7, #20
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr
 800f700:	40010000 	.word	0x40010000
 800f704:	40010400 	.word	0x40010400
 800f708:	40000400 	.word	0x40000400
 800f70c:	40000800 	.word	0x40000800
 800f710:	40000c00 	.word	0x40000c00
 800f714:	40001800 	.word	0x40001800
 800f718:	40014000 	.word	0x40014000
 800f71c:	4000e000 	.word	0x4000e000
 800f720:	4000e400 	.word	0x4000e400

0800f724 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f72c:	bf00      	nop
 800f72e:	370c      	adds	r7, #12
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f738:	b480      	push	{r7}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f740:	bf00      	nop
 800f742:	370c      	adds	r7, #12
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f74c:	b480      	push	{r7}
 800f74e:	b083      	sub	sp, #12
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f754:	bf00      	nop
 800f756:	370c      	adds	r7, #12
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr

0800f760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b082      	sub	sp, #8
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d101      	bne.n	800f772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f76e:	2301      	movs	r3, #1
 800f770:	e042      	b.n	800f7f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d106      	bne.n	800f78a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2200      	movs	r2, #0
 800f780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f7f2 fcdb 	bl	8002140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2224      	movs	r2, #36	@ 0x24
 800f78e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	f022 0201 	bic.w	r2, r2, #1
 800f7a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d002      	beq.n	800f7b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f000 fe94 	bl	80104d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f000 f825 	bl	800f800 <UART_SetConfig>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d101      	bne.n	800f7c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	e01b      	b.n	800f7f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	685a      	ldr	r2, [r3, #4]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f7ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	689a      	ldr	r2, [r3, #8]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f7de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	681a      	ldr	r2, [r3, #0]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f042 0201 	orr.w	r2, r2, #1
 800f7ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f000 ff13 	bl	801061c <UART_CheckIdleState>
 800f7f6:	4603      	mov	r3, r0
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f804:	b092      	sub	sp, #72	@ 0x48
 800f806:	af00      	add	r7, sp, #0
 800f808:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f80a:	2300      	movs	r3, #0
 800f80c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	689a      	ldr	r2, [r3, #8]
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	691b      	ldr	r3, [r3, #16]
 800f818:	431a      	orrs	r2, r3
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	695b      	ldr	r3, [r3, #20]
 800f81e:	431a      	orrs	r2, r3
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	69db      	ldr	r3, [r3, #28]
 800f824:	4313      	orrs	r3, r2
 800f826:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	681a      	ldr	r2, [r3, #0]
 800f82e:	4bbe      	ldr	r3, [pc, #760]	@ (800fb28 <UART_SetConfig+0x328>)
 800f830:	4013      	ands	r3, r2
 800f832:	697a      	ldr	r2, [r7, #20]
 800f834:	6812      	ldr	r2, [r2, #0]
 800f836:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f838:	430b      	orrs	r3, r1
 800f83a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	685b      	ldr	r3, [r3, #4]
 800f842:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	68da      	ldr	r2, [r3, #12]
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	430a      	orrs	r2, r1
 800f850:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	699b      	ldr	r3, [r3, #24]
 800f856:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	4ab3      	ldr	r2, [pc, #716]	@ (800fb2c <UART_SetConfig+0x32c>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d004      	beq.n	800f86c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	6a1b      	ldr	r3, [r3, #32]
 800f866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f868:	4313      	orrs	r3, r2
 800f86a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	689a      	ldr	r2, [r3, #8]
 800f872:	4baf      	ldr	r3, [pc, #700]	@ (800fb30 <UART_SetConfig+0x330>)
 800f874:	4013      	ands	r3, r2
 800f876:	697a      	ldr	r2, [r7, #20]
 800f878:	6812      	ldr	r2, [r2, #0]
 800f87a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f87c:	430b      	orrs	r3, r1
 800f87e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f886:	f023 010f 	bic.w	r1, r3, #15
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	430a      	orrs	r2, r1
 800f894:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4aa6      	ldr	r2, [pc, #664]	@ (800fb34 <UART_SetConfig+0x334>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d177      	bne.n	800f990 <UART_SetConfig+0x190>
 800f8a0:	4ba5      	ldr	r3, [pc, #660]	@ (800fb38 <UART_SetConfig+0x338>)
 800f8a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f8a8:	2b28      	cmp	r3, #40	@ 0x28
 800f8aa:	d86d      	bhi.n	800f988 <UART_SetConfig+0x188>
 800f8ac:	a201      	add	r2, pc, #4	@ (adr r2, 800f8b4 <UART_SetConfig+0xb4>)
 800f8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8b2:	bf00      	nop
 800f8b4:	0800f959 	.word	0x0800f959
 800f8b8:	0800f989 	.word	0x0800f989
 800f8bc:	0800f989 	.word	0x0800f989
 800f8c0:	0800f989 	.word	0x0800f989
 800f8c4:	0800f989 	.word	0x0800f989
 800f8c8:	0800f989 	.word	0x0800f989
 800f8cc:	0800f989 	.word	0x0800f989
 800f8d0:	0800f989 	.word	0x0800f989
 800f8d4:	0800f961 	.word	0x0800f961
 800f8d8:	0800f989 	.word	0x0800f989
 800f8dc:	0800f989 	.word	0x0800f989
 800f8e0:	0800f989 	.word	0x0800f989
 800f8e4:	0800f989 	.word	0x0800f989
 800f8e8:	0800f989 	.word	0x0800f989
 800f8ec:	0800f989 	.word	0x0800f989
 800f8f0:	0800f989 	.word	0x0800f989
 800f8f4:	0800f969 	.word	0x0800f969
 800f8f8:	0800f989 	.word	0x0800f989
 800f8fc:	0800f989 	.word	0x0800f989
 800f900:	0800f989 	.word	0x0800f989
 800f904:	0800f989 	.word	0x0800f989
 800f908:	0800f989 	.word	0x0800f989
 800f90c:	0800f989 	.word	0x0800f989
 800f910:	0800f989 	.word	0x0800f989
 800f914:	0800f971 	.word	0x0800f971
 800f918:	0800f989 	.word	0x0800f989
 800f91c:	0800f989 	.word	0x0800f989
 800f920:	0800f989 	.word	0x0800f989
 800f924:	0800f989 	.word	0x0800f989
 800f928:	0800f989 	.word	0x0800f989
 800f92c:	0800f989 	.word	0x0800f989
 800f930:	0800f989 	.word	0x0800f989
 800f934:	0800f979 	.word	0x0800f979
 800f938:	0800f989 	.word	0x0800f989
 800f93c:	0800f989 	.word	0x0800f989
 800f940:	0800f989 	.word	0x0800f989
 800f944:	0800f989 	.word	0x0800f989
 800f948:	0800f989 	.word	0x0800f989
 800f94c:	0800f989 	.word	0x0800f989
 800f950:	0800f989 	.word	0x0800f989
 800f954:	0800f981 	.word	0x0800f981
 800f958:	2301      	movs	r3, #1
 800f95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f95e:	e326      	b.n	800ffae <UART_SetConfig+0x7ae>
 800f960:	2304      	movs	r3, #4
 800f962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f966:	e322      	b.n	800ffae <UART_SetConfig+0x7ae>
 800f968:	2308      	movs	r3, #8
 800f96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f96e:	e31e      	b.n	800ffae <UART_SetConfig+0x7ae>
 800f970:	2310      	movs	r3, #16
 800f972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f976:	e31a      	b.n	800ffae <UART_SetConfig+0x7ae>
 800f978:	2320      	movs	r3, #32
 800f97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f97e:	e316      	b.n	800ffae <UART_SetConfig+0x7ae>
 800f980:	2340      	movs	r3, #64	@ 0x40
 800f982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f986:	e312      	b.n	800ffae <UART_SetConfig+0x7ae>
 800f988:	2380      	movs	r3, #128	@ 0x80
 800f98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f98e:	e30e      	b.n	800ffae <UART_SetConfig+0x7ae>
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	4a69      	ldr	r2, [pc, #420]	@ (800fb3c <UART_SetConfig+0x33c>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d130      	bne.n	800f9fc <UART_SetConfig+0x1fc>
 800f99a:	4b67      	ldr	r3, [pc, #412]	@ (800fb38 <UART_SetConfig+0x338>)
 800f99c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f99e:	f003 0307 	and.w	r3, r3, #7
 800f9a2:	2b05      	cmp	r3, #5
 800f9a4:	d826      	bhi.n	800f9f4 <UART_SetConfig+0x1f4>
 800f9a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f9ac <UART_SetConfig+0x1ac>)
 800f9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ac:	0800f9c5 	.word	0x0800f9c5
 800f9b0:	0800f9cd 	.word	0x0800f9cd
 800f9b4:	0800f9d5 	.word	0x0800f9d5
 800f9b8:	0800f9dd 	.word	0x0800f9dd
 800f9bc:	0800f9e5 	.word	0x0800f9e5
 800f9c0:	0800f9ed 	.word	0x0800f9ed
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ca:	e2f0      	b.n	800ffae <UART_SetConfig+0x7ae>
 800f9cc:	2304      	movs	r3, #4
 800f9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9d2:	e2ec      	b.n	800ffae <UART_SetConfig+0x7ae>
 800f9d4:	2308      	movs	r3, #8
 800f9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9da:	e2e8      	b.n	800ffae <UART_SetConfig+0x7ae>
 800f9dc:	2310      	movs	r3, #16
 800f9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9e2:	e2e4      	b.n	800ffae <UART_SetConfig+0x7ae>
 800f9e4:	2320      	movs	r3, #32
 800f9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ea:	e2e0      	b.n	800ffae <UART_SetConfig+0x7ae>
 800f9ec:	2340      	movs	r3, #64	@ 0x40
 800f9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9f2:	e2dc      	b.n	800ffae <UART_SetConfig+0x7ae>
 800f9f4:	2380      	movs	r3, #128	@ 0x80
 800f9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9fa:	e2d8      	b.n	800ffae <UART_SetConfig+0x7ae>
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4a4f      	ldr	r2, [pc, #316]	@ (800fb40 <UART_SetConfig+0x340>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d130      	bne.n	800fa68 <UART_SetConfig+0x268>
 800fa06:	4b4c      	ldr	r3, [pc, #304]	@ (800fb38 <UART_SetConfig+0x338>)
 800fa08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa0a:	f003 0307 	and.w	r3, r3, #7
 800fa0e:	2b05      	cmp	r3, #5
 800fa10:	d826      	bhi.n	800fa60 <UART_SetConfig+0x260>
 800fa12:	a201      	add	r2, pc, #4	@ (adr r2, 800fa18 <UART_SetConfig+0x218>)
 800fa14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa18:	0800fa31 	.word	0x0800fa31
 800fa1c:	0800fa39 	.word	0x0800fa39
 800fa20:	0800fa41 	.word	0x0800fa41
 800fa24:	0800fa49 	.word	0x0800fa49
 800fa28:	0800fa51 	.word	0x0800fa51
 800fa2c:	0800fa59 	.word	0x0800fa59
 800fa30:	2300      	movs	r3, #0
 800fa32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa36:	e2ba      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fa38:	2304      	movs	r3, #4
 800fa3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa3e:	e2b6      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fa40:	2308      	movs	r3, #8
 800fa42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa46:	e2b2      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fa48:	2310      	movs	r3, #16
 800fa4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa4e:	e2ae      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fa50:	2320      	movs	r3, #32
 800fa52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa56:	e2aa      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fa58:	2340      	movs	r3, #64	@ 0x40
 800fa5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa5e:	e2a6      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fa60:	2380      	movs	r3, #128	@ 0x80
 800fa62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa66:	e2a2      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	4a35      	ldr	r2, [pc, #212]	@ (800fb44 <UART_SetConfig+0x344>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d130      	bne.n	800fad4 <UART_SetConfig+0x2d4>
 800fa72:	4b31      	ldr	r3, [pc, #196]	@ (800fb38 <UART_SetConfig+0x338>)
 800fa74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa76:	f003 0307 	and.w	r3, r3, #7
 800fa7a:	2b05      	cmp	r3, #5
 800fa7c:	d826      	bhi.n	800facc <UART_SetConfig+0x2cc>
 800fa7e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa84 <UART_SetConfig+0x284>)
 800fa80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa84:	0800fa9d 	.word	0x0800fa9d
 800fa88:	0800faa5 	.word	0x0800faa5
 800fa8c:	0800faad 	.word	0x0800faad
 800fa90:	0800fab5 	.word	0x0800fab5
 800fa94:	0800fabd 	.word	0x0800fabd
 800fa98:	0800fac5 	.word	0x0800fac5
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faa2:	e284      	b.n	800ffae <UART_SetConfig+0x7ae>
 800faa4:	2304      	movs	r3, #4
 800faa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faaa:	e280      	b.n	800ffae <UART_SetConfig+0x7ae>
 800faac:	2308      	movs	r3, #8
 800faae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fab2:	e27c      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fab4:	2310      	movs	r3, #16
 800fab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faba:	e278      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fabc:	2320      	movs	r3, #32
 800fabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fac2:	e274      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fac4:	2340      	movs	r3, #64	@ 0x40
 800fac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faca:	e270      	b.n	800ffae <UART_SetConfig+0x7ae>
 800facc:	2380      	movs	r3, #128	@ 0x80
 800face:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fad2:	e26c      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4a1b      	ldr	r2, [pc, #108]	@ (800fb48 <UART_SetConfig+0x348>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d142      	bne.n	800fb64 <UART_SetConfig+0x364>
 800fade:	4b16      	ldr	r3, [pc, #88]	@ (800fb38 <UART_SetConfig+0x338>)
 800fae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fae2:	f003 0307 	and.w	r3, r3, #7
 800fae6:	2b05      	cmp	r3, #5
 800fae8:	d838      	bhi.n	800fb5c <UART_SetConfig+0x35c>
 800faea:	a201      	add	r2, pc, #4	@ (adr r2, 800faf0 <UART_SetConfig+0x2f0>)
 800faec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf0:	0800fb09 	.word	0x0800fb09
 800faf4:	0800fb11 	.word	0x0800fb11
 800faf8:	0800fb19 	.word	0x0800fb19
 800fafc:	0800fb21 	.word	0x0800fb21
 800fb00:	0800fb4d 	.word	0x0800fb4d
 800fb04:	0800fb55 	.word	0x0800fb55
 800fb08:	2300      	movs	r3, #0
 800fb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb0e:	e24e      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fb10:	2304      	movs	r3, #4
 800fb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb16:	e24a      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fb18:	2308      	movs	r3, #8
 800fb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb1e:	e246      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fb20:	2310      	movs	r3, #16
 800fb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb26:	e242      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fb28:	cfff69f3 	.word	0xcfff69f3
 800fb2c:	58000c00 	.word	0x58000c00
 800fb30:	11fff4ff 	.word	0x11fff4ff
 800fb34:	40011000 	.word	0x40011000
 800fb38:	58024400 	.word	0x58024400
 800fb3c:	40004400 	.word	0x40004400
 800fb40:	40004800 	.word	0x40004800
 800fb44:	40004c00 	.word	0x40004c00
 800fb48:	40005000 	.word	0x40005000
 800fb4c:	2320      	movs	r3, #32
 800fb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb52:	e22c      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fb54:	2340      	movs	r3, #64	@ 0x40
 800fb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb5a:	e228      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fb5c:	2380      	movs	r3, #128	@ 0x80
 800fb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb62:	e224      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	4ab1      	ldr	r2, [pc, #708]	@ (800fe30 <UART_SetConfig+0x630>)
 800fb6a:	4293      	cmp	r3, r2
 800fb6c:	d176      	bne.n	800fc5c <UART_SetConfig+0x45c>
 800fb6e:	4bb1      	ldr	r3, [pc, #708]	@ (800fe34 <UART_SetConfig+0x634>)
 800fb70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fb76:	2b28      	cmp	r3, #40	@ 0x28
 800fb78:	d86c      	bhi.n	800fc54 <UART_SetConfig+0x454>
 800fb7a:	a201      	add	r2, pc, #4	@ (adr r2, 800fb80 <UART_SetConfig+0x380>)
 800fb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb80:	0800fc25 	.word	0x0800fc25
 800fb84:	0800fc55 	.word	0x0800fc55
 800fb88:	0800fc55 	.word	0x0800fc55
 800fb8c:	0800fc55 	.word	0x0800fc55
 800fb90:	0800fc55 	.word	0x0800fc55
 800fb94:	0800fc55 	.word	0x0800fc55
 800fb98:	0800fc55 	.word	0x0800fc55
 800fb9c:	0800fc55 	.word	0x0800fc55
 800fba0:	0800fc2d 	.word	0x0800fc2d
 800fba4:	0800fc55 	.word	0x0800fc55
 800fba8:	0800fc55 	.word	0x0800fc55
 800fbac:	0800fc55 	.word	0x0800fc55
 800fbb0:	0800fc55 	.word	0x0800fc55
 800fbb4:	0800fc55 	.word	0x0800fc55
 800fbb8:	0800fc55 	.word	0x0800fc55
 800fbbc:	0800fc55 	.word	0x0800fc55
 800fbc0:	0800fc35 	.word	0x0800fc35
 800fbc4:	0800fc55 	.word	0x0800fc55
 800fbc8:	0800fc55 	.word	0x0800fc55
 800fbcc:	0800fc55 	.word	0x0800fc55
 800fbd0:	0800fc55 	.word	0x0800fc55
 800fbd4:	0800fc55 	.word	0x0800fc55
 800fbd8:	0800fc55 	.word	0x0800fc55
 800fbdc:	0800fc55 	.word	0x0800fc55
 800fbe0:	0800fc3d 	.word	0x0800fc3d
 800fbe4:	0800fc55 	.word	0x0800fc55
 800fbe8:	0800fc55 	.word	0x0800fc55
 800fbec:	0800fc55 	.word	0x0800fc55
 800fbf0:	0800fc55 	.word	0x0800fc55
 800fbf4:	0800fc55 	.word	0x0800fc55
 800fbf8:	0800fc55 	.word	0x0800fc55
 800fbfc:	0800fc55 	.word	0x0800fc55
 800fc00:	0800fc45 	.word	0x0800fc45
 800fc04:	0800fc55 	.word	0x0800fc55
 800fc08:	0800fc55 	.word	0x0800fc55
 800fc0c:	0800fc55 	.word	0x0800fc55
 800fc10:	0800fc55 	.word	0x0800fc55
 800fc14:	0800fc55 	.word	0x0800fc55
 800fc18:	0800fc55 	.word	0x0800fc55
 800fc1c:	0800fc55 	.word	0x0800fc55
 800fc20:	0800fc4d 	.word	0x0800fc4d
 800fc24:	2301      	movs	r3, #1
 800fc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc2a:	e1c0      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fc2c:	2304      	movs	r3, #4
 800fc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc32:	e1bc      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fc34:	2308      	movs	r3, #8
 800fc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc3a:	e1b8      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fc3c:	2310      	movs	r3, #16
 800fc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc42:	e1b4      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fc44:	2320      	movs	r3, #32
 800fc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc4a:	e1b0      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fc4c:	2340      	movs	r3, #64	@ 0x40
 800fc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc52:	e1ac      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fc54:	2380      	movs	r3, #128	@ 0x80
 800fc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc5a:	e1a8      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4a75      	ldr	r2, [pc, #468]	@ (800fe38 <UART_SetConfig+0x638>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d130      	bne.n	800fcc8 <UART_SetConfig+0x4c8>
 800fc66:	4b73      	ldr	r3, [pc, #460]	@ (800fe34 <UART_SetConfig+0x634>)
 800fc68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc6a:	f003 0307 	and.w	r3, r3, #7
 800fc6e:	2b05      	cmp	r3, #5
 800fc70:	d826      	bhi.n	800fcc0 <UART_SetConfig+0x4c0>
 800fc72:	a201      	add	r2, pc, #4	@ (adr r2, 800fc78 <UART_SetConfig+0x478>)
 800fc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc78:	0800fc91 	.word	0x0800fc91
 800fc7c:	0800fc99 	.word	0x0800fc99
 800fc80:	0800fca1 	.word	0x0800fca1
 800fc84:	0800fca9 	.word	0x0800fca9
 800fc88:	0800fcb1 	.word	0x0800fcb1
 800fc8c:	0800fcb9 	.word	0x0800fcb9
 800fc90:	2300      	movs	r3, #0
 800fc92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc96:	e18a      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fc98:	2304      	movs	r3, #4
 800fc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc9e:	e186      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fca0:	2308      	movs	r3, #8
 800fca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fca6:	e182      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fca8:	2310      	movs	r3, #16
 800fcaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcae:	e17e      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fcb0:	2320      	movs	r3, #32
 800fcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcb6:	e17a      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fcb8:	2340      	movs	r3, #64	@ 0x40
 800fcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcbe:	e176      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fcc0:	2380      	movs	r3, #128	@ 0x80
 800fcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcc6:	e172      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a5b      	ldr	r2, [pc, #364]	@ (800fe3c <UART_SetConfig+0x63c>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d130      	bne.n	800fd34 <UART_SetConfig+0x534>
 800fcd2:	4b58      	ldr	r3, [pc, #352]	@ (800fe34 <UART_SetConfig+0x634>)
 800fcd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcd6:	f003 0307 	and.w	r3, r3, #7
 800fcda:	2b05      	cmp	r3, #5
 800fcdc:	d826      	bhi.n	800fd2c <UART_SetConfig+0x52c>
 800fcde:	a201      	add	r2, pc, #4	@ (adr r2, 800fce4 <UART_SetConfig+0x4e4>)
 800fce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fce4:	0800fcfd 	.word	0x0800fcfd
 800fce8:	0800fd05 	.word	0x0800fd05
 800fcec:	0800fd0d 	.word	0x0800fd0d
 800fcf0:	0800fd15 	.word	0x0800fd15
 800fcf4:	0800fd1d 	.word	0x0800fd1d
 800fcf8:	0800fd25 	.word	0x0800fd25
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd02:	e154      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fd04:	2304      	movs	r3, #4
 800fd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd0a:	e150      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fd0c:	2308      	movs	r3, #8
 800fd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd12:	e14c      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fd14:	2310      	movs	r3, #16
 800fd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd1a:	e148      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fd1c:	2320      	movs	r3, #32
 800fd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd22:	e144      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fd24:	2340      	movs	r3, #64	@ 0x40
 800fd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd2a:	e140      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fd2c:	2380      	movs	r3, #128	@ 0x80
 800fd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd32:	e13c      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	4a41      	ldr	r2, [pc, #260]	@ (800fe40 <UART_SetConfig+0x640>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	f040 8082 	bne.w	800fe44 <UART_SetConfig+0x644>
 800fd40:	4b3c      	ldr	r3, [pc, #240]	@ (800fe34 <UART_SetConfig+0x634>)
 800fd42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fd48:	2b28      	cmp	r3, #40	@ 0x28
 800fd4a:	d86d      	bhi.n	800fe28 <UART_SetConfig+0x628>
 800fd4c:	a201      	add	r2, pc, #4	@ (adr r2, 800fd54 <UART_SetConfig+0x554>)
 800fd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd52:	bf00      	nop
 800fd54:	0800fdf9 	.word	0x0800fdf9
 800fd58:	0800fe29 	.word	0x0800fe29
 800fd5c:	0800fe29 	.word	0x0800fe29
 800fd60:	0800fe29 	.word	0x0800fe29
 800fd64:	0800fe29 	.word	0x0800fe29
 800fd68:	0800fe29 	.word	0x0800fe29
 800fd6c:	0800fe29 	.word	0x0800fe29
 800fd70:	0800fe29 	.word	0x0800fe29
 800fd74:	0800fe01 	.word	0x0800fe01
 800fd78:	0800fe29 	.word	0x0800fe29
 800fd7c:	0800fe29 	.word	0x0800fe29
 800fd80:	0800fe29 	.word	0x0800fe29
 800fd84:	0800fe29 	.word	0x0800fe29
 800fd88:	0800fe29 	.word	0x0800fe29
 800fd8c:	0800fe29 	.word	0x0800fe29
 800fd90:	0800fe29 	.word	0x0800fe29
 800fd94:	0800fe09 	.word	0x0800fe09
 800fd98:	0800fe29 	.word	0x0800fe29
 800fd9c:	0800fe29 	.word	0x0800fe29
 800fda0:	0800fe29 	.word	0x0800fe29
 800fda4:	0800fe29 	.word	0x0800fe29
 800fda8:	0800fe29 	.word	0x0800fe29
 800fdac:	0800fe29 	.word	0x0800fe29
 800fdb0:	0800fe29 	.word	0x0800fe29
 800fdb4:	0800fe11 	.word	0x0800fe11
 800fdb8:	0800fe29 	.word	0x0800fe29
 800fdbc:	0800fe29 	.word	0x0800fe29
 800fdc0:	0800fe29 	.word	0x0800fe29
 800fdc4:	0800fe29 	.word	0x0800fe29
 800fdc8:	0800fe29 	.word	0x0800fe29
 800fdcc:	0800fe29 	.word	0x0800fe29
 800fdd0:	0800fe29 	.word	0x0800fe29
 800fdd4:	0800fe19 	.word	0x0800fe19
 800fdd8:	0800fe29 	.word	0x0800fe29
 800fddc:	0800fe29 	.word	0x0800fe29
 800fde0:	0800fe29 	.word	0x0800fe29
 800fde4:	0800fe29 	.word	0x0800fe29
 800fde8:	0800fe29 	.word	0x0800fe29
 800fdec:	0800fe29 	.word	0x0800fe29
 800fdf0:	0800fe29 	.word	0x0800fe29
 800fdf4:	0800fe21 	.word	0x0800fe21
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdfe:	e0d6      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fe00:	2304      	movs	r3, #4
 800fe02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe06:	e0d2      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fe08:	2308      	movs	r3, #8
 800fe0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe0e:	e0ce      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fe10:	2310      	movs	r3, #16
 800fe12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe16:	e0ca      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fe18:	2320      	movs	r3, #32
 800fe1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe1e:	e0c6      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fe20:	2340      	movs	r3, #64	@ 0x40
 800fe22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe26:	e0c2      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fe28:	2380      	movs	r3, #128	@ 0x80
 800fe2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe2e:	e0be      	b.n	800ffae <UART_SetConfig+0x7ae>
 800fe30:	40011400 	.word	0x40011400
 800fe34:	58024400 	.word	0x58024400
 800fe38:	40007800 	.word	0x40007800
 800fe3c:	40007c00 	.word	0x40007c00
 800fe40:	40011800 	.word	0x40011800
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	4aad      	ldr	r2, [pc, #692]	@ (8010100 <UART_SetConfig+0x900>)
 800fe4a:	4293      	cmp	r3, r2
 800fe4c:	d176      	bne.n	800ff3c <UART_SetConfig+0x73c>
 800fe4e:	4bad      	ldr	r3, [pc, #692]	@ (8010104 <UART_SetConfig+0x904>)
 800fe50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fe56:	2b28      	cmp	r3, #40	@ 0x28
 800fe58:	d86c      	bhi.n	800ff34 <UART_SetConfig+0x734>
 800fe5a:	a201      	add	r2, pc, #4	@ (adr r2, 800fe60 <UART_SetConfig+0x660>)
 800fe5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe60:	0800ff05 	.word	0x0800ff05
 800fe64:	0800ff35 	.word	0x0800ff35
 800fe68:	0800ff35 	.word	0x0800ff35
 800fe6c:	0800ff35 	.word	0x0800ff35
 800fe70:	0800ff35 	.word	0x0800ff35
 800fe74:	0800ff35 	.word	0x0800ff35
 800fe78:	0800ff35 	.word	0x0800ff35
 800fe7c:	0800ff35 	.word	0x0800ff35
 800fe80:	0800ff0d 	.word	0x0800ff0d
 800fe84:	0800ff35 	.word	0x0800ff35
 800fe88:	0800ff35 	.word	0x0800ff35
 800fe8c:	0800ff35 	.word	0x0800ff35
 800fe90:	0800ff35 	.word	0x0800ff35
 800fe94:	0800ff35 	.word	0x0800ff35
 800fe98:	0800ff35 	.word	0x0800ff35
 800fe9c:	0800ff35 	.word	0x0800ff35
 800fea0:	0800ff15 	.word	0x0800ff15
 800fea4:	0800ff35 	.word	0x0800ff35
 800fea8:	0800ff35 	.word	0x0800ff35
 800feac:	0800ff35 	.word	0x0800ff35
 800feb0:	0800ff35 	.word	0x0800ff35
 800feb4:	0800ff35 	.word	0x0800ff35
 800feb8:	0800ff35 	.word	0x0800ff35
 800febc:	0800ff35 	.word	0x0800ff35
 800fec0:	0800ff1d 	.word	0x0800ff1d
 800fec4:	0800ff35 	.word	0x0800ff35
 800fec8:	0800ff35 	.word	0x0800ff35
 800fecc:	0800ff35 	.word	0x0800ff35
 800fed0:	0800ff35 	.word	0x0800ff35
 800fed4:	0800ff35 	.word	0x0800ff35
 800fed8:	0800ff35 	.word	0x0800ff35
 800fedc:	0800ff35 	.word	0x0800ff35
 800fee0:	0800ff25 	.word	0x0800ff25
 800fee4:	0800ff35 	.word	0x0800ff35
 800fee8:	0800ff35 	.word	0x0800ff35
 800feec:	0800ff35 	.word	0x0800ff35
 800fef0:	0800ff35 	.word	0x0800ff35
 800fef4:	0800ff35 	.word	0x0800ff35
 800fef8:	0800ff35 	.word	0x0800ff35
 800fefc:	0800ff35 	.word	0x0800ff35
 800ff00:	0800ff2d 	.word	0x0800ff2d
 800ff04:	2301      	movs	r3, #1
 800ff06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff0a:	e050      	b.n	800ffae <UART_SetConfig+0x7ae>
 800ff0c:	2304      	movs	r3, #4
 800ff0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff12:	e04c      	b.n	800ffae <UART_SetConfig+0x7ae>
 800ff14:	2308      	movs	r3, #8
 800ff16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff1a:	e048      	b.n	800ffae <UART_SetConfig+0x7ae>
 800ff1c:	2310      	movs	r3, #16
 800ff1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff22:	e044      	b.n	800ffae <UART_SetConfig+0x7ae>
 800ff24:	2320      	movs	r3, #32
 800ff26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff2a:	e040      	b.n	800ffae <UART_SetConfig+0x7ae>
 800ff2c:	2340      	movs	r3, #64	@ 0x40
 800ff2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff32:	e03c      	b.n	800ffae <UART_SetConfig+0x7ae>
 800ff34:	2380      	movs	r3, #128	@ 0x80
 800ff36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff3a:	e038      	b.n	800ffae <UART_SetConfig+0x7ae>
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	4a71      	ldr	r2, [pc, #452]	@ (8010108 <UART_SetConfig+0x908>)
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d130      	bne.n	800ffa8 <UART_SetConfig+0x7a8>
 800ff46:	4b6f      	ldr	r3, [pc, #444]	@ (8010104 <UART_SetConfig+0x904>)
 800ff48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ff4a:	f003 0307 	and.w	r3, r3, #7
 800ff4e:	2b05      	cmp	r3, #5
 800ff50:	d826      	bhi.n	800ffa0 <UART_SetConfig+0x7a0>
 800ff52:	a201      	add	r2, pc, #4	@ (adr r2, 800ff58 <UART_SetConfig+0x758>)
 800ff54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff58:	0800ff71 	.word	0x0800ff71
 800ff5c:	0800ff79 	.word	0x0800ff79
 800ff60:	0800ff81 	.word	0x0800ff81
 800ff64:	0800ff89 	.word	0x0800ff89
 800ff68:	0800ff91 	.word	0x0800ff91
 800ff6c:	0800ff99 	.word	0x0800ff99
 800ff70:	2302      	movs	r3, #2
 800ff72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff76:	e01a      	b.n	800ffae <UART_SetConfig+0x7ae>
 800ff78:	2304      	movs	r3, #4
 800ff7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff7e:	e016      	b.n	800ffae <UART_SetConfig+0x7ae>
 800ff80:	2308      	movs	r3, #8
 800ff82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff86:	e012      	b.n	800ffae <UART_SetConfig+0x7ae>
 800ff88:	2310      	movs	r3, #16
 800ff8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff8e:	e00e      	b.n	800ffae <UART_SetConfig+0x7ae>
 800ff90:	2320      	movs	r3, #32
 800ff92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff96:	e00a      	b.n	800ffae <UART_SetConfig+0x7ae>
 800ff98:	2340      	movs	r3, #64	@ 0x40
 800ff9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff9e:	e006      	b.n	800ffae <UART_SetConfig+0x7ae>
 800ffa0:	2380      	movs	r3, #128	@ 0x80
 800ffa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffa6:	e002      	b.n	800ffae <UART_SetConfig+0x7ae>
 800ffa8:	2380      	movs	r3, #128	@ 0x80
 800ffaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4a55      	ldr	r2, [pc, #340]	@ (8010108 <UART_SetConfig+0x908>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	f040 80f8 	bne.w	80101aa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ffba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ffbe:	2b20      	cmp	r3, #32
 800ffc0:	dc46      	bgt.n	8010050 <UART_SetConfig+0x850>
 800ffc2:	2b02      	cmp	r3, #2
 800ffc4:	db75      	blt.n	80100b2 <UART_SetConfig+0x8b2>
 800ffc6:	3b02      	subs	r3, #2
 800ffc8:	2b1e      	cmp	r3, #30
 800ffca:	d872      	bhi.n	80100b2 <UART_SetConfig+0x8b2>
 800ffcc:	a201      	add	r2, pc, #4	@ (adr r2, 800ffd4 <UART_SetConfig+0x7d4>)
 800ffce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffd2:	bf00      	nop
 800ffd4:	08010057 	.word	0x08010057
 800ffd8:	080100b3 	.word	0x080100b3
 800ffdc:	0801005f 	.word	0x0801005f
 800ffe0:	080100b3 	.word	0x080100b3
 800ffe4:	080100b3 	.word	0x080100b3
 800ffe8:	080100b3 	.word	0x080100b3
 800ffec:	0801006f 	.word	0x0801006f
 800fff0:	080100b3 	.word	0x080100b3
 800fff4:	080100b3 	.word	0x080100b3
 800fff8:	080100b3 	.word	0x080100b3
 800fffc:	080100b3 	.word	0x080100b3
 8010000:	080100b3 	.word	0x080100b3
 8010004:	080100b3 	.word	0x080100b3
 8010008:	080100b3 	.word	0x080100b3
 801000c:	0801007f 	.word	0x0801007f
 8010010:	080100b3 	.word	0x080100b3
 8010014:	080100b3 	.word	0x080100b3
 8010018:	080100b3 	.word	0x080100b3
 801001c:	080100b3 	.word	0x080100b3
 8010020:	080100b3 	.word	0x080100b3
 8010024:	080100b3 	.word	0x080100b3
 8010028:	080100b3 	.word	0x080100b3
 801002c:	080100b3 	.word	0x080100b3
 8010030:	080100b3 	.word	0x080100b3
 8010034:	080100b3 	.word	0x080100b3
 8010038:	080100b3 	.word	0x080100b3
 801003c:	080100b3 	.word	0x080100b3
 8010040:	080100b3 	.word	0x080100b3
 8010044:	080100b3 	.word	0x080100b3
 8010048:	080100b3 	.word	0x080100b3
 801004c:	080100a5 	.word	0x080100a5
 8010050:	2b40      	cmp	r3, #64	@ 0x40
 8010052:	d02a      	beq.n	80100aa <UART_SetConfig+0x8aa>
 8010054:	e02d      	b.n	80100b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010056:	f7fd f91f 	bl	800d298 <HAL_RCCEx_GetD3PCLK1Freq>
 801005a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801005c:	e02f      	b.n	80100be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801005e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010062:	4618      	mov	r0, r3
 8010064:	f7fd f92e 	bl	800d2c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801006a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801006c:	e027      	b.n	80100be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801006e:	f107 0318 	add.w	r3, r7, #24
 8010072:	4618      	mov	r0, r3
 8010074:	f7fd fa7a 	bl	800d56c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010078:	69fb      	ldr	r3, [r7, #28]
 801007a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801007c:	e01f      	b.n	80100be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801007e:	4b21      	ldr	r3, [pc, #132]	@ (8010104 <UART_SetConfig+0x904>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	f003 0320 	and.w	r3, r3, #32
 8010086:	2b00      	cmp	r3, #0
 8010088:	d009      	beq.n	801009e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801008a:	4b1e      	ldr	r3, [pc, #120]	@ (8010104 <UART_SetConfig+0x904>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	08db      	lsrs	r3, r3, #3
 8010090:	f003 0303 	and.w	r3, r3, #3
 8010094:	4a1d      	ldr	r2, [pc, #116]	@ (801010c <UART_SetConfig+0x90c>)
 8010096:	fa22 f303 	lsr.w	r3, r2, r3
 801009a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801009c:	e00f      	b.n	80100be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801009e:	4b1b      	ldr	r3, [pc, #108]	@ (801010c <UART_SetConfig+0x90c>)
 80100a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100a2:	e00c      	b.n	80100be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80100a4:	4b1a      	ldr	r3, [pc, #104]	@ (8010110 <UART_SetConfig+0x910>)
 80100a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100a8:	e009      	b.n	80100be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80100aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80100ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100b0:	e005      	b.n	80100be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80100b2:	2300      	movs	r3, #0
 80100b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80100b6:	2301      	movs	r3, #1
 80100b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80100bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80100be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	f000 81ee 	beq.w	80104a2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100ca:	4a12      	ldr	r2, [pc, #72]	@ (8010114 <UART_SetConfig+0x914>)
 80100cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100d0:	461a      	mov	r2, r3
 80100d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80100d8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	685a      	ldr	r2, [r3, #4]
 80100de:	4613      	mov	r3, r2
 80100e0:	005b      	lsls	r3, r3, #1
 80100e2:	4413      	add	r3, r2
 80100e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d305      	bcc.n	80100f6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80100f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d910      	bls.n	8010118 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80100f6:	2301      	movs	r3, #1
 80100f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80100fc:	e1d1      	b.n	80104a2 <UART_SetConfig+0xca2>
 80100fe:	bf00      	nop
 8010100:	40011c00 	.word	0x40011c00
 8010104:	58024400 	.word	0x58024400
 8010108:	58000c00 	.word	0x58000c00
 801010c:	03d09000 	.word	0x03d09000
 8010110:	003d0900 	.word	0x003d0900
 8010114:	08019bcc 	.word	0x08019bcc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801011a:	2200      	movs	r2, #0
 801011c:	60bb      	str	r3, [r7, #8]
 801011e:	60fa      	str	r2, [r7, #12]
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010124:	4ac0      	ldr	r2, [pc, #768]	@ (8010428 <UART_SetConfig+0xc28>)
 8010126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801012a:	b29b      	uxth	r3, r3
 801012c:	2200      	movs	r2, #0
 801012e:	603b      	str	r3, [r7, #0]
 8010130:	607a      	str	r2, [r7, #4]
 8010132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010136:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801013a:	f7f0 fb0d 	bl	8000758 <__aeabi_uldivmod>
 801013e:	4602      	mov	r2, r0
 8010140:	460b      	mov	r3, r1
 8010142:	4610      	mov	r0, r2
 8010144:	4619      	mov	r1, r3
 8010146:	f04f 0200 	mov.w	r2, #0
 801014a:	f04f 0300 	mov.w	r3, #0
 801014e:	020b      	lsls	r3, r1, #8
 8010150:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010154:	0202      	lsls	r2, r0, #8
 8010156:	6979      	ldr	r1, [r7, #20]
 8010158:	6849      	ldr	r1, [r1, #4]
 801015a:	0849      	lsrs	r1, r1, #1
 801015c:	2000      	movs	r0, #0
 801015e:	460c      	mov	r4, r1
 8010160:	4605      	mov	r5, r0
 8010162:	eb12 0804 	adds.w	r8, r2, r4
 8010166:	eb43 0905 	adc.w	r9, r3, r5
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	2200      	movs	r2, #0
 8010170:	469a      	mov	sl, r3
 8010172:	4693      	mov	fp, r2
 8010174:	4652      	mov	r2, sl
 8010176:	465b      	mov	r3, fp
 8010178:	4640      	mov	r0, r8
 801017a:	4649      	mov	r1, r9
 801017c:	f7f0 faec 	bl	8000758 <__aeabi_uldivmod>
 8010180:	4602      	mov	r2, r0
 8010182:	460b      	mov	r3, r1
 8010184:	4613      	mov	r3, r2
 8010186:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801018a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801018e:	d308      	bcc.n	80101a2 <UART_SetConfig+0x9a2>
 8010190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010192:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010196:	d204      	bcs.n	80101a2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801019e:	60da      	str	r2, [r3, #12]
 80101a0:	e17f      	b.n	80104a2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80101a2:	2301      	movs	r3, #1
 80101a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80101a8:	e17b      	b.n	80104a2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	69db      	ldr	r3, [r3, #28]
 80101ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80101b2:	f040 80bd 	bne.w	8010330 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80101b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80101ba:	2b20      	cmp	r3, #32
 80101bc:	dc48      	bgt.n	8010250 <UART_SetConfig+0xa50>
 80101be:	2b00      	cmp	r3, #0
 80101c0:	db7b      	blt.n	80102ba <UART_SetConfig+0xaba>
 80101c2:	2b20      	cmp	r3, #32
 80101c4:	d879      	bhi.n	80102ba <UART_SetConfig+0xaba>
 80101c6:	a201      	add	r2, pc, #4	@ (adr r2, 80101cc <UART_SetConfig+0x9cc>)
 80101c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101cc:	08010257 	.word	0x08010257
 80101d0:	0801025f 	.word	0x0801025f
 80101d4:	080102bb 	.word	0x080102bb
 80101d8:	080102bb 	.word	0x080102bb
 80101dc:	08010267 	.word	0x08010267
 80101e0:	080102bb 	.word	0x080102bb
 80101e4:	080102bb 	.word	0x080102bb
 80101e8:	080102bb 	.word	0x080102bb
 80101ec:	08010277 	.word	0x08010277
 80101f0:	080102bb 	.word	0x080102bb
 80101f4:	080102bb 	.word	0x080102bb
 80101f8:	080102bb 	.word	0x080102bb
 80101fc:	080102bb 	.word	0x080102bb
 8010200:	080102bb 	.word	0x080102bb
 8010204:	080102bb 	.word	0x080102bb
 8010208:	080102bb 	.word	0x080102bb
 801020c:	08010287 	.word	0x08010287
 8010210:	080102bb 	.word	0x080102bb
 8010214:	080102bb 	.word	0x080102bb
 8010218:	080102bb 	.word	0x080102bb
 801021c:	080102bb 	.word	0x080102bb
 8010220:	080102bb 	.word	0x080102bb
 8010224:	080102bb 	.word	0x080102bb
 8010228:	080102bb 	.word	0x080102bb
 801022c:	080102bb 	.word	0x080102bb
 8010230:	080102bb 	.word	0x080102bb
 8010234:	080102bb 	.word	0x080102bb
 8010238:	080102bb 	.word	0x080102bb
 801023c:	080102bb 	.word	0x080102bb
 8010240:	080102bb 	.word	0x080102bb
 8010244:	080102bb 	.word	0x080102bb
 8010248:	080102bb 	.word	0x080102bb
 801024c:	080102ad 	.word	0x080102ad
 8010250:	2b40      	cmp	r3, #64	@ 0x40
 8010252:	d02e      	beq.n	80102b2 <UART_SetConfig+0xab2>
 8010254:	e031      	b.n	80102ba <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010256:	f7fb f981 	bl	800b55c <HAL_RCC_GetPCLK1Freq>
 801025a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801025c:	e033      	b.n	80102c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801025e:	f7fb f993 	bl	800b588 <HAL_RCC_GetPCLK2Freq>
 8010262:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010264:	e02f      	b.n	80102c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801026a:	4618      	mov	r0, r3
 801026c:	f7fd f82a 	bl	800d2c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010274:	e027      	b.n	80102c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010276:	f107 0318 	add.w	r3, r7, #24
 801027a:	4618      	mov	r0, r3
 801027c:	f7fd f976 	bl	800d56c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010284:	e01f      	b.n	80102c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010286:	4b69      	ldr	r3, [pc, #420]	@ (801042c <UART_SetConfig+0xc2c>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	f003 0320 	and.w	r3, r3, #32
 801028e:	2b00      	cmp	r3, #0
 8010290:	d009      	beq.n	80102a6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010292:	4b66      	ldr	r3, [pc, #408]	@ (801042c <UART_SetConfig+0xc2c>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	08db      	lsrs	r3, r3, #3
 8010298:	f003 0303 	and.w	r3, r3, #3
 801029c:	4a64      	ldr	r2, [pc, #400]	@ (8010430 <UART_SetConfig+0xc30>)
 801029e:	fa22 f303 	lsr.w	r3, r2, r3
 80102a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80102a4:	e00f      	b.n	80102c6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80102a6:	4b62      	ldr	r3, [pc, #392]	@ (8010430 <UART_SetConfig+0xc30>)
 80102a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102aa:	e00c      	b.n	80102c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80102ac:	4b61      	ldr	r3, [pc, #388]	@ (8010434 <UART_SetConfig+0xc34>)
 80102ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102b0:	e009      	b.n	80102c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80102b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80102b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102b8:	e005      	b.n	80102c6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80102ba:	2300      	movs	r3, #0
 80102bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80102be:	2301      	movs	r3, #1
 80102c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80102c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80102c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	f000 80ea 	beq.w	80104a2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102d2:	4a55      	ldr	r2, [pc, #340]	@ (8010428 <UART_SetConfig+0xc28>)
 80102d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102d8:	461a      	mov	r2, r3
 80102da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80102e0:	005a      	lsls	r2, r3, #1
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	085b      	lsrs	r3, r3, #1
 80102e8:	441a      	add	r2, r3
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	685b      	ldr	r3, [r3, #4]
 80102ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80102f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102f6:	2b0f      	cmp	r3, #15
 80102f8:	d916      	bls.n	8010328 <UART_SetConfig+0xb28>
 80102fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010300:	d212      	bcs.n	8010328 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010304:	b29b      	uxth	r3, r3
 8010306:	f023 030f 	bic.w	r3, r3, #15
 801030a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801030c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801030e:	085b      	lsrs	r3, r3, #1
 8010310:	b29b      	uxth	r3, r3
 8010312:	f003 0307 	and.w	r3, r3, #7
 8010316:	b29a      	uxth	r2, r3
 8010318:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801031a:	4313      	orrs	r3, r2
 801031c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010324:	60da      	str	r2, [r3, #12]
 8010326:	e0bc      	b.n	80104a2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010328:	2301      	movs	r3, #1
 801032a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801032e:	e0b8      	b.n	80104a2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010330:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010334:	2b20      	cmp	r3, #32
 8010336:	dc4b      	bgt.n	80103d0 <UART_SetConfig+0xbd0>
 8010338:	2b00      	cmp	r3, #0
 801033a:	f2c0 8087 	blt.w	801044c <UART_SetConfig+0xc4c>
 801033e:	2b20      	cmp	r3, #32
 8010340:	f200 8084 	bhi.w	801044c <UART_SetConfig+0xc4c>
 8010344:	a201      	add	r2, pc, #4	@ (adr r2, 801034c <UART_SetConfig+0xb4c>)
 8010346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801034a:	bf00      	nop
 801034c:	080103d7 	.word	0x080103d7
 8010350:	080103df 	.word	0x080103df
 8010354:	0801044d 	.word	0x0801044d
 8010358:	0801044d 	.word	0x0801044d
 801035c:	080103e7 	.word	0x080103e7
 8010360:	0801044d 	.word	0x0801044d
 8010364:	0801044d 	.word	0x0801044d
 8010368:	0801044d 	.word	0x0801044d
 801036c:	080103f7 	.word	0x080103f7
 8010370:	0801044d 	.word	0x0801044d
 8010374:	0801044d 	.word	0x0801044d
 8010378:	0801044d 	.word	0x0801044d
 801037c:	0801044d 	.word	0x0801044d
 8010380:	0801044d 	.word	0x0801044d
 8010384:	0801044d 	.word	0x0801044d
 8010388:	0801044d 	.word	0x0801044d
 801038c:	08010407 	.word	0x08010407
 8010390:	0801044d 	.word	0x0801044d
 8010394:	0801044d 	.word	0x0801044d
 8010398:	0801044d 	.word	0x0801044d
 801039c:	0801044d 	.word	0x0801044d
 80103a0:	0801044d 	.word	0x0801044d
 80103a4:	0801044d 	.word	0x0801044d
 80103a8:	0801044d 	.word	0x0801044d
 80103ac:	0801044d 	.word	0x0801044d
 80103b0:	0801044d 	.word	0x0801044d
 80103b4:	0801044d 	.word	0x0801044d
 80103b8:	0801044d 	.word	0x0801044d
 80103bc:	0801044d 	.word	0x0801044d
 80103c0:	0801044d 	.word	0x0801044d
 80103c4:	0801044d 	.word	0x0801044d
 80103c8:	0801044d 	.word	0x0801044d
 80103cc:	0801043f 	.word	0x0801043f
 80103d0:	2b40      	cmp	r3, #64	@ 0x40
 80103d2:	d037      	beq.n	8010444 <UART_SetConfig+0xc44>
 80103d4:	e03a      	b.n	801044c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80103d6:	f7fb f8c1 	bl	800b55c <HAL_RCC_GetPCLK1Freq>
 80103da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80103dc:	e03c      	b.n	8010458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80103de:	f7fb f8d3 	bl	800b588 <HAL_RCC_GetPCLK2Freq>
 80103e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80103e4:	e038      	b.n	8010458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80103e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7fc ff6a 	bl	800d2c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80103f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103f4:	e030      	b.n	8010458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103f6:	f107 0318 	add.w	r3, r7, #24
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7fd f8b6 	bl	800d56c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010400:	69fb      	ldr	r3, [r7, #28]
 8010402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010404:	e028      	b.n	8010458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010406:	4b09      	ldr	r3, [pc, #36]	@ (801042c <UART_SetConfig+0xc2c>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	f003 0320 	and.w	r3, r3, #32
 801040e:	2b00      	cmp	r3, #0
 8010410:	d012      	beq.n	8010438 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010412:	4b06      	ldr	r3, [pc, #24]	@ (801042c <UART_SetConfig+0xc2c>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	08db      	lsrs	r3, r3, #3
 8010418:	f003 0303 	and.w	r3, r3, #3
 801041c:	4a04      	ldr	r2, [pc, #16]	@ (8010430 <UART_SetConfig+0xc30>)
 801041e:	fa22 f303 	lsr.w	r3, r2, r3
 8010422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010424:	e018      	b.n	8010458 <UART_SetConfig+0xc58>
 8010426:	bf00      	nop
 8010428:	08019bcc 	.word	0x08019bcc
 801042c:	58024400 	.word	0x58024400
 8010430:	03d09000 	.word	0x03d09000
 8010434:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8010438:	4b24      	ldr	r3, [pc, #144]	@ (80104cc <UART_SetConfig+0xccc>)
 801043a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801043c:	e00c      	b.n	8010458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801043e:	4b24      	ldr	r3, [pc, #144]	@ (80104d0 <UART_SetConfig+0xcd0>)
 8010440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010442:	e009      	b.n	8010458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801044a:	e005      	b.n	8010458 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801044c:	2300      	movs	r3, #0
 801044e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010450:	2301      	movs	r3, #1
 8010452:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010456:	bf00      	nop
    }

    if (pclk != 0U)
 8010458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801045a:	2b00      	cmp	r3, #0
 801045c:	d021      	beq.n	80104a2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010462:	4a1c      	ldr	r2, [pc, #112]	@ (80104d4 <UART_SetConfig+0xcd4>)
 8010464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010468:	461a      	mov	r2, r3
 801046a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801046c:	fbb3 f2f2 	udiv	r2, r3, r2
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	085b      	lsrs	r3, r3, #1
 8010476:	441a      	add	r2, r3
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010480:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010484:	2b0f      	cmp	r3, #15
 8010486:	d909      	bls.n	801049c <UART_SetConfig+0xc9c>
 8010488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801048a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801048e:	d205      	bcs.n	801049c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010492:	b29a      	uxth	r2, r3
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	60da      	str	r2, [r3, #12]
 801049a:	e002      	b.n	80104a2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801049c:	2301      	movs	r3, #1
 801049e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	2201      	movs	r2, #1
 80104a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	2201      	movs	r2, #1
 80104ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	2200      	movs	r2, #0
 80104b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80104b8:	697b      	ldr	r3, [r7, #20]
 80104ba:	2200      	movs	r2, #0
 80104bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80104be:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	3748      	adds	r7, #72	@ 0x48
 80104c6:	46bd      	mov	sp, r7
 80104c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80104cc:	03d09000 	.word	0x03d09000
 80104d0:	003d0900 	.word	0x003d0900
 80104d4:	08019bcc 	.word	0x08019bcc

080104d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80104d8:	b480      	push	{r7}
 80104da:	b083      	sub	sp, #12
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104e4:	f003 0308 	and.w	r3, r3, #8
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d00a      	beq.n	8010502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	685b      	ldr	r3, [r3, #4]
 80104f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	430a      	orrs	r2, r1
 8010500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010506:	f003 0301 	and.w	r3, r3, #1
 801050a:	2b00      	cmp	r3, #0
 801050c:	d00a      	beq.n	8010524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	430a      	orrs	r2, r1
 8010522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010528:	f003 0302 	and.w	r3, r3, #2
 801052c:	2b00      	cmp	r3, #0
 801052e:	d00a      	beq.n	8010546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	430a      	orrs	r2, r1
 8010544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801054a:	f003 0304 	and.w	r3, r3, #4
 801054e:	2b00      	cmp	r3, #0
 8010550:	d00a      	beq.n	8010568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	430a      	orrs	r2, r1
 8010566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801056c:	f003 0310 	and.w	r3, r3, #16
 8010570:	2b00      	cmp	r3, #0
 8010572:	d00a      	beq.n	801058a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	689b      	ldr	r3, [r3, #8]
 801057a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	430a      	orrs	r2, r1
 8010588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801058e:	f003 0320 	and.w	r3, r3, #32
 8010592:	2b00      	cmp	r3, #0
 8010594:	d00a      	beq.n	80105ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	689b      	ldr	r3, [r3, #8]
 801059c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	430a      	orrs	r2, r1
 80105aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d01a      	beq.n	80105ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	430a      	orrs	r2, r1
 80105cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80105d6:	d10a      	bne.n	80105ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	430a      	orrs	r2, r1
 80105ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d00a      	beq.n	8010610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	430a      	orrs	r2, r1
 801060e:	605a      	str	r2, [r3, #4]
  }
}
 8010610:	bf00      	nop
 8010612:	370c      	adds	r7, #12
 8010614:	46bd      	mov	sp, r7
 8010616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061a:	4770      	bx	lr

0801061c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b098      	sub	sp, #96	@ 0x60
 8010620:	af02      	add	r7, sp, #8
 8010622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2200      	movs	r2, #0
 8010628:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801062c:	f7f4 f9ae 	bl	800498c <HAL_GetTick>
 8010630:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f003 0308 	and.w	r3, r3, #8
 801063c:	2b08      	cmp	r3, #8
 801063e:	d12f      	bne.n	80106a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010640:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010644:	9300      	str	r3, [sp, #0]
 8010646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010648:	2200      	movs	r2, #0
 801064a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f000 f88e 	bl	8010770 <UART_WaitOnFlagUntilTimeout>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	d022      	beq.n	80106a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010662:	e853 3f00 	ldrex	r3, [r3]
 8010666:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801066a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801066e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	461a      	mov	r2, r3
 8010676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010678:	647b      	str	r3, [r7, #68]	@ 0x44
 801067a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801067c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801067e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010680:	e841 2300 	strex	r3, r2, [r1]
 8010684:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1e6      	bne.n	801065a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2220      	movs	r2, #32
 8010690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2200      	movs	r2, #0
 8010698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801069c:	2303      	movs	r3, #3
 801069e:	e063      	b.n	8010768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f003 0304 	and.w	r3, r3, #4
 80106aa:	2b04      	cmp	r3, #4
 80106ac:	d149      	bne.n	8010742 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80106ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80106b2:	9300      	str	r3, [sp, #0]
 80106b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106b6:	2200      	movs	r2, #0
 80106b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f000 f857 	bl	8010770 <UART_WaitOnFlagUntilTimeout>
 80106c2:	4603      	mov	r3, r0
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d03c      	beq.n	8010742 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106d0:	e853 3f00 	ldrex	r3, [r3]
 80106d4:	623b      	str	r3, [r7, #32]
   return(result);
 80106d6:	6a3b      	ldr	r3, [r7, #32]
 80106d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80106dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	461a      	mov	r2, r3
 80106e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80106e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80106ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106ee:	e841 2300 	strex	r3, r2, [r1]
 80106f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80106f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d1e6      	bne.n	80106c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	3308      	adds	r3, #8
 8010700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	e853 3f00 	ldrex	r3, [r3]
 8010708:	60fb      	str	r3, [r7, #12]
   return(result);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	f023 0301 	bic.w	r3, r3, #1
 8010710:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	3308      	adds	r3, #8
 8010718:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801071a:	61fa      	str	r2, [r7, #28]
 801071c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801071e:	69b9      	ldr	r1, [r7, #24]
 8010720:	69fa      	ldr	r2, [r7, #28]
 8010722:	e841 2300 	strex	r3, r2, [r1]
 8010726:	617b      	str	r3, [r7, #20]
   return(result);
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d1e5      	bne.n	80106fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2220      	movs	r2, #32
 8010732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2200      	movs	r2, #0
 801073a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801073e:	2303      	movs	r3, #3
 8010740:	e012      	b.n	8010768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2220      	movs	r2, #32
 8010746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2220      	movs	r2, #32
 801074e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2200      	movs	r2, #0
 8010756:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2200      	movs	r2, #0
 801075c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2200      	movs	r2, #0
 8010762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010766:	2300      	movs	r3, #0
}
 8010768:	4618      	mov	r0, r3
 801076a:	3758      	adds	r7, #88	@ 0x58
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	603b      	str	r3, [r7, #0]
 801077c:	4613      	mov	r3, r2
 801077e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010780:	e04f      	b.n	8010822 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010782:	69bb      	ldr	r3, [r7, #24]
 8010784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010788:	d04b      	beq.n	8010822 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801078a:	f7f4 f8ff 	bl	800498c <HAL_GetTick>
 801078e:	4602      	mov	r2, r0
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	1ad3      	subs	r3, r2, r3
 8010794:	69ba      	ldr	r2, [r7, #24]
 8010796:	429a      	cmp	r2, r3
 8010798:	d302      	bcc.n	80107a0 <UART_WaitOnFlagUntilTimeout+0x30>
 801079a:	69bb      	ldr	r3, [r7, #24]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d101      	bne.n	80107a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80107a0:	2303      	movs	r3, #3
 80107a2:	e04e      	b.n	8010842 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f003 0304 	and.w	r3, r3, #4
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d037      	beq.n	8010822 <UART_WaitOnFlagUntilTimeout+0xb2>
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	2b80      	cmp	r3, #128	@ 0x80
 80107b6:	d034      	beq.n	8010822 <UART_WaitOnFlagUntilTimeout+0xb2>
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	2b40      	cmp	r3, #64	@ 0x40
 80107bc:	d031      	beq.n	8010822 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	69db      	ldr	r3, [r3, #28]
 80107c4:	f003 0308 	and.w	r3, r3, #8
 80107c8:	2b08      	cmp	r3, #8
 80107ca:	d110      	bne.n	80107ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	2208      	movs	r2, #8
 80107d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80107d4:	68f8      	ldr	r0, [r7, #12]
 80107d6:	f000 f839 	bl	801084c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2208      	movs	r2, #8
 80107de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	2200      	movs	r2, #0
 80107e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80107ea:	2301      	movs	r3, #1
 80107ec:	e029      	b.n	8010842 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	69db      	ldr	r3, [r3, #28]
 80107f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80107f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80107fc:	d111      	bne.n	8010822 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010808:	68f8      	ldr	r0, [r7, #12]
 801080a:	f000 f81f 	bl	801084c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	2220      	movs	r2, #32
 8010812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2200      	movs	r2, #0
 801081a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801081e:	2303      	movs	r3, #3
 8010820:	e00f      	b.n	8010842 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	69da      	ldr	r2, [r3, #28]
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	4013      	ands	r3, r2
 801082c:	68ba      	ldr	r2, [r7, #8]
 801082e:	429a      	cmp	r2, r3
 8010830:	bf0c      	ite	eq
 8010832:	2301      	moveq	r3, #1
 8010834:	2300      	movne	r3, #0
 8010836:	b2db      	uxtb	r3, r3
 8010838:	461a      	mov	r2, r3
 801083a:	79fb      	ldrb	r3, [r7, #7]
 801083c:	429a      	cmp	r2, r3
 801083e:	d0a0      	beq.n	8010782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010840:	2300      	movs	r3, #0
}
 8010842:	4618      	mov	r0, r3
 8010844:	3710      	adds	r7, #16
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
	...

0801084c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801084c:	b480      	push	{r7}
 801084e:	b095      	sub	sp, #84	@ 0x54
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801085a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801085c:	e853 3f00 	ldrex	r3, [r3]
 8010860:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010868:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	461a      	mov	r2, r3
 8010870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010872:	643b      	str	r3, [r7, #64]	@ 0x40
 8010874:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010876:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010878:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801087a:	e841 2300 	strex	r3, r2, [r1]
 801087e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010882:	2b00      	cmp	r3, #0
 8010884:	d1e6      	bne.n	8010854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	3308      	adds	r3, #8
 801088c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801088e:	6a3b      	ldr	r3, [r7, #32]
 8010890:	e853 3f00 	ldrex	r3, [r3]
 8010894:	61fb      	str	r3, [r7, #28]
   return(result);
 8010896:	69fa      	ldr	r2, [r7, #28]
 8010898:	4b1e      	ldr	r3, [pc, #120]	@ (8010914 <UART_EndRxTransfer+0xc8>)
 801089a:	4013      	ands	r3, r2
 801089c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	3308      	adds	r3, #8
 80108a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80108a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80108a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80108ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80108ae:	e841 2300 	strex	r3, r2, [r1]
 80108b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80108b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d1e5      	bne.n	8010886 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d118      	bne.n	80108f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	e853 3f00 	ldrex	r3, [r3]
 80108ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80108d0:	68bb      	ldr	r3, [r7, #8]
 80108d2:	f023 0310 	bic.w	r3, r3, #16
 80108d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	461a      	mov	r2, r3
 80108de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108e0:	61bb      	str	r3, [r7, #24]
 80108e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108e4:	6979      	ldr	r1, [r7, #20]
 80108e6:	69ba      	ldr	r2, [r7, #24]
 80108e8:	e841 2300 	strex	r3, r2, [r1]
 80108ec:	613b      	str	r3, [r7, #16]
   return(result);
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d1e6      	bne.n	80108c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2220      	movs	r2, #32
 80108f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2200      	movs	r2, #0
 8010900:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2200      	movs	r2, #0
 8010906:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010908:	bf00      	nop
 801090a:	3754      	adds	r7, #84	@ 0x54
 801090c:	46bd      	mov	sp, r7
 801090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010912:	4770      	bx	lr
 8010914:	effffffe 	.word	0xeffffffe

08010918 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010918:	b480      	push	{r7}
 801091a:	b085      	sub	sp, #20
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010926:	2b01      	cmp	r3, #1
 8010928:	d101      	bne.n	801092e <HAL_UARTEx_DisableFifoMode+0x16>
 801092a:	2302      	movs	r3, #2
 801092c:	e027      	b.n	801097e <HAL_UARTEx_DisableFifoMode+0x66>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2201      	movs	r2, #1
 8010932:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2224      	movs	r2, #36	@ 0x24
 801093a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	681a      	ldr	r2, [r3, #0]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f022 0201 	bic.w	r2, r2, #1
 8010954:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801095c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2200      	movs	r2, #0
 8010962:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	68fa      	ldr	r2, [r7, #12]
 801096a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2220      	movs	r2, #32
 8010970:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2200      	movs	r2, #0
 8010978:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801097c:	2300      	movs	r3, #0
}
 801097e:	4618      	mov	r0, r3
 8010980:	3714      	adds	r7, #20
 8010982:	46bd      	mov	sp, r7
 8010984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010988:	4770      	bx	lr

0801098a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801098a:	b580      	push	{r7, lr}
 801098c:	b084      	sub	sp, #16
 801098e:	af00      	add	r7, sp, #0
 8010990:	6078      	str	r0, [r7, #4]
 8010992:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801099a:	2b01      	cmp	r3, #1
 801099c:	d101      	bne.n	80109a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801099e:	2302      	movs	r3, #2
 80109a0:	e02d      	b.n	80109fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2201      	movs	r2, #1
 80109a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2224      	movs	r2, #36	@ 0x24
 80109ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	f022 0201 	bic.w	r2, r2, #1
 80109c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	689b      	ldr	r3, [r3, #8]
 80109d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	683a      	ldr	r2, [r7, #0]
 80109da:	430a      	orrs	r2, r1
 80109dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f000 f850 	bl	8010a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	68fa      	ldr	r2, [r7, #12]
 80109ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2220      	movs	r2, #32
 80109f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2200      	movs	r2, #0
 80109f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3710      	adds	r7, #16
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}

08010a06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b084      	sub	sp, #16
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
 8010a0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d101      	bne.n	8010a1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010a1a:	2302      	movs	r3, #2
 8010a1c:	e02d      	b.n	8010a7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2201      	movs	r2, #1
 8010a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2224      	movs	r2, #36	@ 0x24
 8010a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	681a      	ldr	r2, [r3, #0]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	f022 0201 	bic.w	r2, r2, #1
 8010a44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	689b      	ldr	r3, [r3, #8]
 8010a4c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	683a      	ldr	r2, [r7, #0]
 8010a56:	430a      	orrs	r2, r1
 8010a58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f000 f812 	bl	8010a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	68fa      	ldr	r2, [r7, #12]
 8010a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2220      	movs	r2, #32
 8010a6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2200      	movs	r2, #0
 8010a74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a78:	2300      	movs	r3, #0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3710      	adds	r7, #16
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
	...

08010a84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b085      	sub	sp, #20
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d108      	bne.n	8010aa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2201      	movs	r2, #1
 8010a98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2201      	movs	r2, #1
 8010aa0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010aa4:	e031      	b.n	8010b0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010aa6:	2310      	movs	r3, #16
 8010aa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010aaa:	2310      	movs	r3, #16
 8010aac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	689b      	ldr	r3, [r3, #8]
 8010ab4:	0e5b      	lsrs	r3, r3, #25
 8010ab6:	b2db      	uxtb	r3, r3
 8010ab8:	f003 0307 	and.w	r3, r3, #7
 8010abc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	689b      	ldr	r3, [r3, #8]
 8010ac4:	0f5b      	lsrs	r3, r3, #29
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	f003 0307 	and.w	r3, r3, #7
 8010acc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ace:	7bbb      	ldrb	r3, [r7, #14]
 8010ad0:	7b3a      	ldrb	r2, [r7, #12]
 8010ad2:	4911      	ldr	r1, [pc, #68]	@ (8010b18 <UARTEx_SetNbDataToProcess+0x94>)
 8010ad4:	5c8a      	ldrb	r2, [r1, r2]
 8010ad6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010ada:	7b3a      	ldrb	r2, [r7, #12]
 8010adc:	490f      	ldr	r1, [pc, #60]	@ (8010b1c <UARTEx_SetNbDataToProcess+0x98>)
 8010ade:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ae0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ae4:	b29a      	uxth	r2, r3
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010aec:	7bfb      	ldrb	r3, [r7, #15]
 8010aee:	7b7a      	ldrb	r2, [r7, #13]
 8010af0:	4909      	ldr	r1, [pc, #36]	@ (8010b18 <UARTEx_SetNbDataToProcess+0x94>)
 8010af2:	5c8a      	ldrb	r2, [r1, r2]
 8010af4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010af8:	7b7a      	ldrb	r2, [r7, #13]
 8010afa:	4908      	ldr	r1, [pc, #32]	@ (8010b1c <UARTEx_SetNbDataToProcess+0x98>)
 8010afc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010afe:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b02:	b29a      	uxth	r2, r3
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010b0a:	bf00      	nop
 8010b0c:	3714      	adds	r7, #20
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr
 8010b16:	bf00      	nop
 8010b18:	08019be4 	.word	0x08019be4
 8010b1c:	08019bec 	.word	0x08019bec

08010b20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010b20:	b084      	sub	sp, #16
 8010b22:	b580      	push	{r7, lr}
 8010b24:	b084      	sub	sp, #16
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
 8010b2a:	f107 001c 	add.w	r0, r7, #28
 8010b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010b32:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010b36:	2b01      	cmp	r3, #1
 8010b38:	d121      	bne.n	8010b7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b3e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	68da      	ldr	r2, [r3, #12]
 8010b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8010bfc <USB_CoreInit+0xdc>)
 8010b4c:	4013      	ands	r3, r2
 8010b4e:	687a      	ldr	r2, [r7, #4]
 8010b50:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	68db      	ldr	r3, [r3, #12]
 8010b56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010b5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d105      	bne.n	8010b72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	68db      	ldr	r3, [r3, #12]
 8010b6a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f001 faf6 	bl	8012164 <USB_CoreReset>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	73fb      	strb	r3, [r7, #15]
 8010b7c:	e01b      	b.n	8010bb6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	68db      	ldr	r3, [r3, #12]
 8010b82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f001 faea 	bl	8012164 <USB_CoreReset>
 8010b90:	4603      	mov	r3, r0
 8010b92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010b94:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d106      	bne.n	8010baa <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ba0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	639a      	str	r2, [r3, #56]	@ 0x38
 8010ba8:	e005      	b.n	8010bb6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010bb6:	7fbb      	ldrb	r3, [r7, #30]
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d116      	bne.n	8010bea <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010bc0:	b29a      	uxth	r2, r3
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010bca:	4b0d      	ldr	r3, [pc, #52]	@ (8010c00 <USB_CoreInit+0xe0>)
 8010bcc:	4313      	orrs	r3, r2
 8010bce:	687a      	ldr	r2, [r7, #4]
 8010bd0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	689b      	ldr	r3, [r3, #8]
 8010bd6:	f043 0206 	orr.w	r2, r3, #6
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	689b      	ldr	r3, [r3, #8]
 8010be2:	f043 0220 	orr.w	r2, r3, #32
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3710      	adds	r7, #16
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010bf6:	b004      	add	sp, #16
 8010bf8:	4770      	bx	lr
 8010bfa:	bf00      	nop
 8010bfc:	ffbdffbf 	.word	0xffbdffbf
 8010c00:	03ee0000 	.word	0x03ee0000

08010c04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010c04:	b480      	push	{r7}
 8010c06:	b087      	sub	sp, #28
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	60f8      	str	r0, [r7, #12]
 8010c0c:	60b9      	str	r1, [r7, #8]
 8010c0e:	4613      	mov	r3, r2
 8010c10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010c12:	79fb      	ldrb	r3, [r7, #7]
 8010c14:	2b02      	cmp	r3, #2
 8010c16:	d165      	bne.n	8010ce4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	4a41      	ldr	r2, [pc, #260]	@ (8010d20 <USB_SetTurnaroundTime+0x11c>)
 8010c1c:	4293      	cmp	r3, r2
 8010c1e:	d906      	bls.n	8010c2e <USB_SetTurnaroundTime+0x2a>
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	4a40      	ldr	r2, [pc, #256]	@ (8010d24 <USB_SetTurnaroundTime+0x120>)
 8010c24:	4293      	cmp	r3, r2
 8010c26:	d202      	bcs.n	8010c2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010c28:	230f      	movs	r3, #15
 8010c2a:	617b      	str	r3, [r7, #20]
 8010c2c:	e062      	b.n	8010cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	4a3c      	ldr	r2, [pc, #240]	@ (8010d24 <USB_SetTurnaroundTime+0x120>)
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d306      	bcc.n	8010c44 <USB_SetTurnaroundTime+0x40>
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	4a3b      	ldr	r2, [pc, #236]	@ (8010d28 <USB_SetTurnaroundTime+0x124>)
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d202      	bcs.n	8010c44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010c3e:	230e      	movs	r3, #14
 8010c40:	617b      	str	r3, [r7, #20]
 8010c42:	e057      	b.n	8010cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	4a38      	ldr	r2, [pc, #224]	@ (8010d28 <USB_SetTurnaroundTime+0x124>)
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	d306      	bcc.n	8010c5a <USB_SetTurnaroundTime+0x56>
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	4a37      	ldr	r2, [pc, #220]	@ (8010d2c <USB_SetTurnaroundTime+0x128>)
 8010c50:	4293      	cmp	r3, r2
 8010c52:	d202      	bcs.n	8010c5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010c54:	230d      	movs	r3, #13
 8010c56:	617b      	str	r3, [r7, #20]
 8010c58:	e04c      	b.n	8010cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	4a33      	ldr	r2, [pc, #204]	@ (8010d2c <USB_SetTurnaroundTime+0x128>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d306      	bcc.n	8010c70 <USB_SetTurnaroundTime+0x6c>
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	4a32      	ldr	r2, [pc, #200]	@ (8010d30 <USB_SetTurnaroundTime+0x12c>)
 8010c66:	4293      	cmp	r3, r2
 8010c68:	d802      	bhi.n	8010c70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010c6a:	230c      	movs	r3, #12
 8010c6c:	617b      	str	r3, [r7, #20]
 8010c6e:	e041      	b.n	8010cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	4a2f      	ldr	r2, [pc, #188]	@ (8010d30 <USB_SetTurnaroundTime+0x12c>)
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d906      	bls.n	8010c86 <USB_SetTurnaroundTime+0x82>
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	4a2e      	ldr	r2, [pc, #184]	@ (8010d34 <USB_SetTurnaroundTime+0x130>)
 8010c7c:	4293      	cmp	r3, r2
 8010c7e:	d802      	bhi.n	8010c86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010c80:	230b      	movs	r3, #11
 8010c82:	617b      	str	r3, [r7, #20]
 8010c84:	e036      	b.n	8010cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	4a2a      	ldr	r2, [pc, #168]	@ (8010d34 <USB_SetTurnaroundTime+0x130>)
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d906      	bls.n	8010c9c <USB_SetTurnaroundTime+0x98>
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	4a29      	ldr	r2, [pc, #164]	@ (8010d38 <USB_SetTurnaroundTime+0x134>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d802      	bhi.n	8010c9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010c96:	230a      	movs	r3, #10
 8010c98:	617b      	str	r3, [r7, #20]
 8010c9a:	e02b      	b.n	8010cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	4a26      	ldr	r2, [pc, #152]	@ (8010d38 <USB_SetTurnaroundTime+0x134>)
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d906      	bls.n	8010cb2 <USB_SetTurnaroundTime+0xae>
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	4a25      	ldr	r2, [pc, #148]	@ (8010d3c <USB_SetTurnaroundTime+0x138>)
 8010ca8:	4293      	cmp	r3, r2
 8010caa:	d202      	bcs.n	8010cb2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010cac:	2309      	movs	r3, #9
 8010cae:	617b      	str	r3, [r7, #20]
 8010cb0:	e020      	b.n	8010cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	4a21      	ldr	r2, [pc, #132]	@ (8010d3c <USB_SetTurnaroundTime+0x138>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d306      	bcc.n	8010cc8 <USB_SetTurnaroundTime+0xc4>
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	4a20      	ldr	r2, [pc, #128]	@ (8010d40 <USB_SetTurnaroundTime+0x13c>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d802      	bhi.n	8010cc8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010cc2:	2308      	movs	r3, #8
 8010cc4:	617b      	str	r3, [r7, #20]
 8010cc6:	e015      	b.n	8010cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	4a1d      	ldr	r2, [pc, #116]	@ (8010d40 <USB_SetTurnaroundTime+0x13c>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d906      	bls.n	8010cde <USB_SetTurnaroundTime+0xda>
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8010d44 <USB_SetTurnaroundTime+0x140>)
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d202      	bcs.n	8010cde <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010cd8:	2307      	movs	r3, #7
 8010cda:	617b      	str	r3, [r7, #20]
 8010cdc:	e00a      	b.n	8010cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010cde:	2306      	movs	r3, #6
 8010ce0:	617b      	str	r3, [r7, #20]
 8010ce2:	e007      	b.n	8010cf4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010ce4:	79fb      	ldrb	r3, [r7, #7]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d102      	bne.n	8010cf0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010cea:	2309      	movs	r3, #9
 8010cec:	617b      	str	r3, [r7, #20]
 8010cee:	e001      	b.n	8010cf4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010cf0:	2309      	movs	r3, #9
 8010cf2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	68da      	ldr	r2, [r3, #12]
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	029b      	lsls	r3, r3, #10
 8010d08:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8010d0c:	431a      	orrs	r2, r3
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010d12:	2300      	movs	r3, #0
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	371c      	adds	r7, #28
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr
 8010d20:	00d8acbf 	.word	0x00d8acbf
 8010d24:	00e4e1c0 	.word	0x00e4e1c0
 8010d28:	00f42400 	.word	0x00f42400
 8010d2c:	01067380 	.word	0x01067380
 8010d30:	011a499f 	.word	0x011a499f
 8010d34:	01312cff 	.word	0x01312cff
 8010d38:	014ca43f 	.word	0x014ca43f
 8010d3c:	016e3600 	.word	0x016e3600
 8010d40:	01a6ab1f 	.word	0x01a6ab1f
 8010d44:	01e84800 	.word	0x01e84800

08010d48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b083      	sub	sp, #12
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	689b      	ldr	r3, [r3, #8]
 8010d54:	f043 0201 	orr.w	r2, r3, #1
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010d5c:	2300      	movs	r3, #0
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	370c      	adds	r7, #12
 8010d62:	46bd      	mov	sp, r7
 8010d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d68:	4770      	bx	lr

08010d6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d6a:	b480      	push	{r7}
 8010d6c:	b083      	sub	sp, #12
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	689b      	ldr	r3, [r3, #8]
 8010d76:	f023 0201 	bic.w	r2, r3, #1
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010d7e:	2300      	movs	r3, #0
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	370c      	adds	r7, #12
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr

08010d8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	460b      	mov	r3, r1
 8010d96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	68db      	ldr	r3, [r3, #12]
 8010da0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010da8:	78fb      	ldrb	r3, [r7, #3]
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d115      	bne.n	8010dda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	68db      	ldr	r3, [r3, #12]
 8010db2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010dba:	200a      	movs	r0, #10
 8010dbc:	f7f3 fdf2 	bl	80049a4 <HAL_Delay>
      ms += 10U;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	330a      	adds	r3, #10
 8010dc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f001 f93b 	bl	8012042 <USB_GetMode>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b01      	cmp	r3, #1
 8010dd0:	d01e      	beq.n	8010e10 <USB_SetCurrentMode+0x84>
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2bc7      	cmp	r3, #199	@ 0xc7
 8010dd6:	d9f0      	bls.n	8010dba <USB_SetCurrentMode+0x2e>
 8010dd8:	e01a      	b.n	8010e10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010dda:	78fb      	ldrb	r3, [r7, #3]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d115      	bne.n	8010e0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	68db      	ldr	r3, [r3, #12]
 8010de4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010dec:	200a      	movs	r0, #10
 8010dee:	f7f3 fdd9 	bl	80049a4 <HAL_Delay>
      ms += 10U;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	330a      	adds	r3, #10
 8010df6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f001 f922 	bl	8012042 <USB_GetMode>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d005      	beq.n	8010e10 <USB_SetCurrentMode+0x84>
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	2bc7      	cmp	r3, #199	@ 0xc7
 8010e08:	d9f0      	bls.n	8010dec <USB_SetCurrentMode+0x60>
 8010e0a:	e001      	b.n	8010e10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	e005      	b.n	8010e1c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	2bc8      	cmp	r3, #200	@ 0xc8
 8010e14:	d101      	bne.n	8010e1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010e16:	2301      	movs	r3, #1
 8010e18:	e000      	b.n	8010e1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010e1a:	2300      	movs	r3, #0
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	3710      	adds	r7, #16
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd80      	pop	{r7, pc}

08010e24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010e24:	b084      	sub	sp, #16
 8010e26:	b580      	push	{r7, lr}
 8010e28:	b086      	sub	sp, #24
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
 8010e2e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010e36:	2300      	movs	r3, #0
 8010e38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010e3e:	2300      	movs	r3, #0
 8010e40:	613b      	str	r3, [r7, #16]
 8010e42:	e009      	b.n	8010e58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	3340      	adds	r3, #64	@ 0x40
 8010e4a:	009b      	lsls	r3, r3, #2
 8010e4c:	4413      	add	r3, r2
 8010e4e:	2200      	movs	r2, #0
 8010e50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	3301      	adds	r3, #1
 8010e56:	613b      	str	r3, [r7, #16]
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	2b0e      	cmp	r3, #14
 8010e5c:	d9f2      	bls.n	8010e44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010e5e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d11c      	bne.n	8010ea0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	68fa      	ldr	r2, [r7, #12]
 8010e70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010e74:	f043 0302 	orr.w	r3, r3, #2
 8010e78:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e7e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	601a      	str	r2, [r3, #0]
 8010e9e:	e005      	b.n	8010eac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ea4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010eb8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010ebc:	2b01      	cmp	r3, #1
 8010ebe:	d10d      	bne.n	8010edc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d104      	bne.n	8010ed2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010ec8:	2100      	movs	r1, #0
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 f968 	bl	80111a0 <USB_SetDevSpeed>
 8010ed0:	e008      	b.n	8010ee4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010ed2:	2101      	movs	r1, #1
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f000 f963 	bl	80111a0 <USB_SetDevSpeed>
 8010eda:	e003      	b.n	8010ee4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010edc:	2103      	movs	r1, #3
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f000 f95e 	bl	80111a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010ee4:	2110      	movs	r1, #16
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f000 f8fa 	bl	80110e0 <USB_FlushTxFifo>
 8010eec:	4603      	mov	r3, r0
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d001      	beq.n	8010ef6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 f924 	bl	8011144 <USB_FlushRxFifo>
 8010efc:	4603      	mov	r3, r0
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d001      	beq.n	8010f06 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8010f02:	2301      	movs	r3, #1
 8010f04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	2300      	movs	r3, #0
 8010f10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f18:	461a      	mov	r2, r3
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f24:	461a      	mov	r2, r3
 8010f26:	2300      	movs	r3, #0
 8010f28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	613b      	str	r3, [r7, #16]
 8010f2e:	e043      	b.n	8010fb8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	015a      	lsls	r2, r3, #5
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	4413      	add	r3, r2
 8010f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010f42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010f46:	d118      	bne.n	8010f7a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d10a      	bne.n	8010f64 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	015a      	lsls	r2, r3, #5
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	4413      	add	r3, r2
 8010f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f5a:	461a      	mov	r2, r3
 8010f5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010f60:	6013      	str	r3, [r2, #0]
 8010f62:	e013      	b.n	8010f8c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010f64:	693b      	ldr	r3, [r7, #16]
 8010f66:	015a      	lsls	r2, r3, #5
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	4413      	add	r3, r2
 8010f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f70:	461a      	mov	r2, r3
 8010f72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010f76:	6013      	str	r3, [r2, #0]
 8010f78:	e008      	b.n	8010f8c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	015a      	lsls	r2, r3, #5
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	4413      	add	r3, r2
 8010f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f86:	461a      	mov	r2, r3
 8010f88:	2300      	movs	r3, #0
 8010f8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	015a      	lsls	r2, r3, #5
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	4413      	add	r3, r2
 8010f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f98:	461a      	mov	r2, r3
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	015a      	lsls	r2, r3, #5
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	4413      	add	r3, r2
 8010fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010faa:	461a      	mov	r2, r3
 8010fac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010fb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	3301      	adds	r3, #1
 8010fb6:	613b      	str	r3, [r7, #16]
 8010fb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010fbc:	461a      	mov	r2, r3
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d3b5      	bcc.n	8010f30 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	613b      	str	r3, [r7, #16]
 8010fc8:	e043      	b.n	8011052 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	015a      	lsls	r2, r3, #5
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010fe0:	d118      	bne.n	8011014 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d10a      	bne.n	8010ffe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	015a      	lsls	r2, r3, #5
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	4413      	add	r3, r2
 8010ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ff4:	461a      	mov	r2, r3
 8010ff6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010ffa:	6013      	str	r3, [r2, #0]
 8010ffc:	e013      	b.n	8011026 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	015a      	lsls	r2, r3, #5
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	4413      	add	r3, r2
 8011006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801100a:	461a      	mov	r2, r3
 801100c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011010:	6013      	str	r3, [r2, #0]
 8011012:	e008      	b.n	8011026 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	015a      	lsls	r2, r3, #5
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	4413      	add	r3, r2
 801101c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011020:	461a      	mov	r2, r3
 8011022:	2300      	movs	r3, #0
 8011024:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	015a      	lsls	r2, r3, #5
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	4413      	add	r3, r2
 801102e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011032:	461a      	mov	r2, r3
 8011034:	2300      	movs	r3, #0
 8011036:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011038:	693b      	ldr	r3, [r7, #16]
 801103a:	015a      	lsls	r2, r3, #5
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	4413      	add	r3, r2
 8011040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011044:	461a      	mov	r2, r3
 8011046:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801104a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	3301      	adds	r3, #1
 8011050:	613b      	str	r3, [r7, #16]
 8011052:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011056:	461a      	mov	r2, r3
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	4293      	cmp	r3, r2
 801105c:	d3b5      	bcc.n	8010fca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011064:	691b      	ldr	r3, [r3, #16]
 8011066:	68fa      	ldr	r2, [r7, #12]
 8011068:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801106c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011070:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2200      	movs	r2, #0
 8011076:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801107e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011080:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011084:	2b00      	cmp	r3, #0
 8011086:	d105      	bne.n	8011094 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	699b      	ldr	r3, [r3, #24]
 801108c:	f043 0210 	orr.w	r2, r3, #16
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	699a      	ldr	r2, [r3, #24]
 8011098:	4b0f      	ldr	r3, [pc, #60]	@ (80110d8 <USB_DevInit+0x2b4>)
 801109a:	4313      	orrs	r3, r2
 801109c:	687a      	ldr	r2, [r7, #4]
 801109e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80110a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d005      	beq.n	80110b4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	699b      	ldr	r3, [r3, #24]
 80110ac:	f043 0208 	orr.w	r2, r3, #8
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80110b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	d105      	bne.n	80110c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	699a      	ldr	r2, [r3, #24]
 80110c0:	4b06      	ldr	r3, [pc, #24]	@ (80110dc <USB_DevInit+0x2b8>)
 80110c2:	4313      	orrs	r3, r2
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80110c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3718      	adds	r7, #24
 80110ce:	46bd      	mov	sp, r7
 80110d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80110d4:	b004      	add	sp, #16
 80110d6:	4770      	bx	lr
 80110d8:	803c3800 	.word	0x803c3800
 80110dc:	40000004 	.word	0x40000004

080110e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80110e0:	b480      	push	{r7}
 80110e2:	b085      	sub	sp, #20
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80110ea:	2300      	movs	r3, #0
 80110ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	3301      	adds	r3, #1
 80110f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80110fa:	d901      	bls.n	8011100 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80110fc:	2303      	movs	r3, #3
 80110fe:	e01b      	b.n	8011138 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	691b      	ldr	r3, [r3, #16]
 8011104:	2b00      	cmp	r3, #0
 8011106:	daf2      	bge.n	80110ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011108:	2300      	movs	r3, #0
 801110a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	019b      	lsls	r3, r3, #6
 8011110:	f043 0220 	orr.w	r2, r3, #32
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	3301      	adds	r3, #1
 801111c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011124:	d901      	bls.n	801112a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011126:	2303      	movs	r3, #3
 8011128:	e006      	b.n	8011138 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	691b      	ldr	r3, [r3, #16]
 801112e:	f003 0320 	and.w	r3, r3, #32
 8011132:	2b20      	cmp	r3, #32
 8011134:	d0f0      	beq.n	8011118 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011136:	2300      	movs	r3, #0
}
 8011138:	4618      	mov	r0, r3
 801113a:	3714      	adds	r7, #20
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011144:	b480      	push	{r7}
 8011146:	b085      	sub	sp, #20
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801114c:	2300      	movs	r3, #0
 801114e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	3301      	adds	r3, #1
 8011154:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801115c:	d901      	bls.n	8011162 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801115e:	2303      	movs	r3, #3
 8011160:	e018      	b.n	8011194 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	691b      	ldr	r3, [r3, #16]
 8011166:	2b00      	cmp	r3, #0
 8011168:	daf2      	bge.n	8011150 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801116a:	2300      	movs	r3, #0
 801116c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2210      	movs	r2, #16
 8011172:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	3301      	adds	r3, #1
 8011178:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011180:	d901      	bls.n	8011186 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011182:	2303      	movs	r3, #3
 8011184:	e006      	b.n	8011194 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	691b      	ldr	r3, [r3, #16]
 801118a:	f003 0310 	and.w	r3, r3, #16
 801118e:	2b10      	cmp	r3, #16
 8011190:	d0f0      	beq.n	8011174 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011192:	2300      	movs	r3, #0
}
 8011194:	4618      	mov	r0, r3
 8011196:	3714      	adds	r7, #20
 8011198:	46bd      	mov	sp, r7
 801119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119e:	4770      	bx	lr

080111a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80111a0:	b480      	push	{r7}
 80111a2:	b085      	sub	sp, #20
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	460b      	mov	r3, r1
 80111aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	78fb      	ldrb	r3, [r7, #3]
 80111ba:	68f9      	ldr	r1, [r7, #12]
 80111bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80111c0:	4313      	orrs	r3, r2
 80111c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80111c4:	2300      	movs	r3, #0
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3714      	adds	r7, #20
 80111ca:	46bd      	mov	sp, r7
 80111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d0:	4770      	bx	lr

080111d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80111d2:	b480      	push	{r7}
 80111d4:	b087      	sub	sp, #28
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111e4:	689b      	ldr	r3, [r3, #8]
 80111e6:	f003 0306 	and.w	r3, r3, #6
 80111ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d102      	bne.n	80111f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80111f2:	2300      	movs	r3, #0
 80111f4:	75fb      	strb	r3, [r7, #23]
 80111f6:	e00a      	b.n	801120e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2b02      	cmp	r3, #2
 80111fc:	d002      	beq.n	8011204 <USB_GetDevSpeed+0x32>
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2b06      	cmp	r3, #6
 8011202:	d102      	bne.n	801120a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011204:	2302      	movs	r3, #2
 8011206:	75fb      	strb	r3, [r7, #23]
 8011208:	e001      	b.n	801120e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801120a:	230f      	movs	r3, #15
 801120c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801120e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011210:	4618      	mov	r0, r3
 8011212:	371c      	adds	r7, #28
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr

0801121c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801121c:	b480      	push	{r7}
 801121e:	b085      	sub	sp, #20
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	785b      	ldrb	r3, [r3, #1]
 8011234:	2b01      	cmp	r3, #1
 8011236:	d139      	bne.n	80112ac <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801123e:	69da      	ldr	r2, [r3, #28]
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	781b      	ldrb	r3, [r3, #0]
 8011244:	f003 030f 	and.w	r3, r3, #15
 8011248:	2101      	movs	r1, #1
 801124a:	fa01 f303 	lsl.w	r3, r1, r3
 801124e:	b29b      	uxth	r3, r3
 8011250:	68f9      	ldr	r1, [r7, #12]
 8011252:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011256:	4313      	orrs	r3, r2
 8011258:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	015a      	lsls	r2, r3, #5
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	4413      	add	r3, r2
 8011262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801126c:	2b00      	cmp	r3, #0
 801126e:	d153      	bne.n	8011318 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	015a      	lsls	r2, r3, #5
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	4413      	add	r3, r2
 8011278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801127c:	681a      	ldr	r2, [r3, #0]
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	689b      	ldr	r3, [r3, #8]
 8011282:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	791b      	ldrb	r3, [r3, #4]
 801128a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801128c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	059b      	lsls	r3, r3, #22
 8011292:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011294:	431a      	orrs	r2, r3
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	0159      	lsls	r1, r3, #5
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	440b      	add	r3, r1
 801129e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112a2:	4619      	mov	r1, r3
 80112a4:	4b20      	ldr	r3, [pc, #128]	@ (8011328 <USB_ActivateEndpoint+0x10c>)
 80112a6:	4313      	orrs	r3, r2
 80112a8:	600b      	str	r3, [r1, #0]
 80112aa:	e035      	b.n	8011318 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80112b2:	69da      	ldr	r2, [r3, #28]
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	f003 030f 	and.w	r3, r3, #15
 80112bc:	2101      	movs	r1, #1
 80112be:	fa01 f303 	lsl.w	r3, r1, r3
 80112c2:	041b      	lsls	r3, r3, #16
 80112c4:	68f9      	ldr	r1, [r7, #12]
 80112c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80112ca:	4313      	orrs	r3, r2
 80112cc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	015a      	lsls	r2, r3, #5
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	4413      	add	r3, r2
 80112d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d119      	bne.n	8011318 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	015a      	lsls	r2, r3, #5
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	4413      	add	r3, r2
 80112ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112f0:	681a      	ldr	r2, [r3, #0]
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	689b      	ldr	r3, [r3, #8]
 80112f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	791b      	ldrb	r3, [r3, #4]
 80112fe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011300:	430b      	orrs	r3, r1
 8011302:	431a      	orrs	r2, r3
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	0159      	lsls	r1, r3, #5
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	440b      	add	r3, r1
 801130c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011310:	4619      	mov	r1, r3
 8011312:	4b05      	ldr	r3, [pc, #20]	@ (8011328 <USB_ActivateEndpoint+0x10c>)
 8011314:	4313      	orrs	r3, r2
 8011316:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011318:	2300      	movs	r3, #0
}
 801131a:	4618      	mov	r0, r3
 801131c:	3714      	adds	r7, #20
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr
 8011326:	bf00      	nop
 8011328:	10008000 	.word	0x10008000

0801132c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801132c:	b480      	push	{r7}
 801132e:	b085      	sub	sp, #20
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	785b      	ldrb	r3, [r3, #1]
 8011344:	2b01      	cmp	r3, #1
 8011346:	d161      	bne.n	801140c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	015a      	lsls	r2, r3, #5
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	4413      	add	r3, r2
 8011350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801135a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801135e:	d11f      	bne.n	80113a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	015a      	lsls	r2, r3, #5
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	4413      	add	r3, r2
 8011368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	68ba      	ldr	r2, [r7, #8]
 8011370:	0151      	lsls	r1, r2, #5
 8011372:	68fa      	ldr	r2, [r7, #12]
 8011374:	440a      	add	r2, r1
 8011376:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801137a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801137e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	015a      	lsls	r2, r3, #5
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	4413      	add	r3, r2
 8011388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	68ba      	ldr	r2, [r7, #8]
 8011390:	0151      	lsls	r1, r2, #5
 8011392:	68fa      	ldr	r2, [r7, #12]
 8011394:	440a      	add	r2, r1
 8011396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801139a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801139e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80113a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	f003 030f 	and.w	r3, r3, #15
 80113b0:	2101      	movs	r1, #1
 80113b2:	fa01 f303 	lsl.w	r3, r1, r3
 80113b6:	b29b      	uxth	r3, r3
 80113b8:	43db      	mvns	r3, r3
 80113ba:	68f9      	ldr	r1, [r7, #12]
 80113bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80113c0:	4013      	ands	r3, r2
 80113c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80113ca:	69da      	ldr	r2, [r3, #28]
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	f003 030f 	and.w	r3, r3, #15
 80113d4:	2101      	movs	r1, #1
 80113d6:	fa01 f303 	lsl.w	r3, r1, r3
 80113da:	b29b      	uxth	r3, r3
 80113dc:	43db      	mvns	r3, r3
 80113de:	68f9      	ldr	r1, [r7, #12]
 80113e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80113e4:	4013      	ands	r3, r2
 80113e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	015a      	lsls	r2, r3, #5
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	4413      	add	r3, r2
 80113f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113f4:	681a      	ldr	r2, [r3, #0]
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	0159      	lsls	r1, r3, #5
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	440b      	add	r3, r1
 80113fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011402:	4619      	mov	r1, r3
 8011404:	4b35      	ldr	r3, [pc, #212]	@ (80114dc <USB_DeactivateEndpoint+0x1b0>)
 8011406:	4013      	ands	r3, r2
 8011408:	600b      	str	r3, [r1, #0]
 801140a:	e060      	b.n	80114ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	015a      	lsls	r2, r3, #5
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	4413      	add	r3, r2
 8011414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801141e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011422:	d11f      	bne.n	8011464 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	015a      	lsls	r2, r3, #5
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	4413      	add	r3, r2
 801142c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	68ba      	ldr	r2, [r7, #8]
 8011434:	0151      	lsls	r1, r2, #5
 8011436:	68fa      	ldr	r2, [r7, #12]
 8011438:	440a      	add	r2, r1
 801143a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801143e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011442:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	015a      	lsls	r2, r3, #5
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	4413      	add	r3, r2
 801144c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	68ba      	ldr	r2, [r7, #8]
 8011454:	0151      	lsls	r1, r2, #5
 8011456:	68fa      	ldr	r2, [r7, #12]
 8011458:	440a      	add	r2, r1
 801145a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801145e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011462:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801146a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	f003 030f 	and.w	r3, r3, #15
 8011474:	2101      	movs	r1, #1
 8011476:	fa01 f303 	lsl.w	r3, r1, r3
 801147a:	041b      	lsls	r3, r3, #16
 801147c:	43db      	mvns	r3, r3
 801147e:	68f9      	ldr	r1, [r7, #12]
 8011480:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011484:	4013      	ands	r3, r2
 8011486:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801148e:	69da      	ldr	r2, [r3, #28]
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	f003 030f 	and.w	r3, r3, #15
 8011498:	2101      	movs	r1, #1
 801149a:	fa01 f303 	lsl.w	r3, r1, r3
 801149e:	041b      	lsls	r3, r3, #16
 80114a0:	43db      	mvns	r3, r3
 80114a2:	68f9      	ldr	r1, [r7, #12]
 80114a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80114a8:	4013      	ands	r3, r2
 80114aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	015a      	lsls	r2, r3, #5
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	4413      	add	r3, r2
 80114b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114b8:	681a      	ldr	r2, [r3, #0]
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	0159      	lsls	r1, r3, #5
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	440b      	add	r3, r1
 80114c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114c6:	4619      	mov	r1, r3
 80114c8:	4b05      	ldr	r3, [pc, #20]	@ (80114e0 <USB_DeactivateEndpoint+0x1b4>)
 80114ca:	4013      	ands	r3, r2
 80114cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80114ce:	2300      	movs	r3, #0
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3714      	adds	r7, #20
 80114d4:	46bd      	mov	sp, r7
 80114d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114da:	4770      	bx	lr
 80114dc:	ec337800 	.word	0xec337800
 80114e0:	eff37800 	.word	0xeff37800

080114e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b08a      	sub	sp, #40	@ 0x28
 80114e8:	af02      	add	r7, sp, #8
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	4613      	mov	r3, r2
 80114f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	785b      	ldrb	r3, [r3, #1]
 8011500:	2b01      	cmp	r3, #1
 8011502:	f040 8181 	bne.w	8011808 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	691b      	ldr	r3, [r3, #16]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d132      	bne.n	8011574 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801150e:	69bb      	ldr	r3, [r7, #24]
 8011510:	015a      	lsls	r2, r3, #5
 8011512:	69fb      	ldr	r3, [r7, #28]
 8011514:	4413      	add	r3, r2
 8011516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801151a:	691a      	ldr	r2, [r3, #16]
 801151c:	69bb      	ldr	r3, [r7, #24]
 801151e:	0159      	lsls	r1, r3, #5
 8011520:	69fb      	ldr	r3, [r7, #28]
 8011522:	440b      	add	r3, r1
 8011524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011528:	4619      	mov	r1, r3
 801152a:	4ba5      	ldr	r3, [pc, #660]	@ (80117c0 <USB_EPStartXfer+0x2dc>)
 801152c:	4013      	ands	r3, r2
 801152e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011530:	69bb      	ldr	r3, [r7, #24]
 8011532:	015a      	lsls	r2, r3, #5
 8011534:	69fb      	ldr	r3, [r7, #28]
 8011536:	4413      	add	r3, r2
 8011538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801153c:	691b      	ldr	r3, [r3, #16]
 801153e:	69ba      	ldr	r2, [r7, #24]
 8011540:	0151      	lsls	r1, r2, #5
 8011542:	69fa      	ldr	r2, [r7, #28]
 8011544:	440a      	add	r2, r1
 8011546:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801154a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801154e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011550:	69bb      	ldr	r3, [r7, #24]
 8011552:	015a      	lsls	r2, r3, #5
 8011554:	69fb      	ldr	r3, [r7, #28]
 8011556:	4413      	add	r3, r2
 8011558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801155c:	691a      	ldr	r2, [r3, #16]
 801155e:	69bb      	ldr	r3, [r7, #24]
 8011560:	0159      	lsls	r1, r3, #5
 8011562:	69fb      	ldr	r3, [r7, #28]
 8011564:	440b      	add	r3, r1
 8011566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801156a:	4619      	mov	r1, r3
 801156c:	4b95      	ldr	r3, [pc, #596]	@ (80117c4 <USB_EPStartXfer+0x2e0>)
 801156e:	4013      	ands	r3, r2
 8011570:	610b      	str	r3, [r1, #16]
 8011572:	e092      	b.n	801169a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011574:	69bb      	ldr	r3, [r7, #24]
 8011576:	015a      	lsls	r2, r3, #5
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	4413      	add	r3, r2
 801157c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011580:	691a      	ldr	r2, [r3, #16]
 8011582:	69bb      	ldr	r3, [r7, #24]
 8011584:	0159      	lsls	r1, r3, #5
 8011586:	69fb      	ldr	r3, [r7, #28]
 8011588:	440b      	add	r3, r1
 801158a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801158e:	4619      	mov	r1, r3
 8011590:	4b8c      	ldr	r3, [pc, #560]	@ (80117c4 <USB_EPStartXfer+0x2e0>)
 8011592:	4013      	ands	r3, r2
 8011594:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011596:	69bb      	ldr	r3, [r7, #24]
 8011598:	015a      	lsls	r2, r3, #5
 801159a:	69fb      	ldr	r3, [r7, #28]
 801159c:	4413      	add	r3, r2
 801159e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115a2:	691a      	ldr	r2, [r3, #16]
 80115a4:	69bb      	ldr	r3, [r7, #24]
 80115a6:	0159      	lsls	r1, r3, #5
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	440b      	add	r3, r1
 80115ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115b0:	4619      	mov	r1, r3
 80115b2:	4b83      	ldr	r3, [pc, #524]	@ (80117c0 <USB_EPStartXfer+0x2dc>)
 80115b4:	4013      	ands	r3, r2
 80115b6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80115b8:	69bb      	ldr	r3, [r7, #24]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d11a      	bne.n	80115f4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	691a      	ldr	r2, [r3, #16]
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	689b      	ldr	r3, [r3, #8]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d903      	bls.n	80115d2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	689a      	ldr	r2, [r3, #8]
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80115d2:	69bb      	ldr	r3, [r7, #24]
 80115d4:	015a      	lsls	r2, r3, #5
 80115d6:	69fb      	ldr	r3, [r7, #28]
 80115d8:	4413      	add	r3, r2
 80115da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115de:	691b      	ldr	r3, [r3, #16]
 80115e0:	69ba      	ldr	r2, [r7, #24]
 80115e2:	0151      	lsls	r1, r2, #5
 80115e4:	69fa      	ldr	r2, [r7, #28]
 80115e6:	440a      	add	r2, r1
 80115e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80115ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80115f0:	6113      	str	r3, [r2, #16]
 80115f2:	e01b      	b.n	801162c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80115f4:	69bb      	ldr	r3, [r7, #24]
 80115f6:	015a      	lsls	r2, r3, #5
 80115f8:	69fb      	ldr	r3, [r7, #28]
 80115fa:	4413      	add	r3, r2
 80115fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011600:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	6919      	ldr	r1, [r3, #16]
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	689b      	ldr	r3, [r3, #8]
 801160a:	440b      	add	r3, r1
 801160c:	1e59      	subs	r1, r3, #1
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	689b      	ldr	r3, [r3, #8]
 8011612:	fbb1 f3f3 	udiv	r3, r1, r3
 8011616:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011618:	4b6b      	ldr	r3, [pc, #428]	@ (80117c8 <USB_EPStartXfer+0x2e4>)
 801161a:	400b      	ands	r3, r1
 801161c:	69b9      	ldr	r1, [r7, #24]
 801161e:	0148      	lsls	r0, r1, #5
 8011620:	69f9      	ldr	r1, [r7, #28]
 8011622:	4401      	add	r1, r0
 8011624:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011628:	4313      	orrs	r3, r2
 801162a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801162c:	69bb      	ldr	r3, [r7, #24]
 801162e:	015a      	lsls	r2, r3, #5
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	4413      	add	r3, r2
 8011634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011638:	691a      	ldr	r2, [r3, #16]
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	691b      	ldr	r3, [r3, #16]
 801163e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011642:	69b9      	ldr	r1, [r7, #24]
 8011644:	0148      	lsls	r0, r1, #5
 8011646:	69f9      	ldr	r1, [r7, #28]
 8011648:	4401      	add	r1, r0
 801164a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801164e:	4313      	orrs	r3, r2
 8011650:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	791b      	ldrb	r3, [r3, #4]
 8011656:	2b01      	cmp	r3, #1
 8011658:	d11f      	bne.n	801169a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801165a:	69bb      	ldr	r3, [r7, #24]
 801165c:	015a      	lsls	r2, r3, #5
 801165e:	69fb      	ldr	r3, [r7, #28]
 8011660:	4413      	add	r3, r2
 8011662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011666:	691b      	ldr	r3, [r3, #16]
 8011668:	69ba      	ldr	r2, [r7, #24]
 801166a:	0151      	lsls	r1, r2, #5
 801166c:	69fa      	ldr	r2, [r7, #28]
 801166e:	440a      	add	r2, r1
 8011670:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011674:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8011678:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801167a:	69bb      	ldr	r3, [r7, #24]
 801167c:	015a      	lsls	r2, r3, #5
 801167e:	69fb      	ldr	r3, [r7, #28]
 8011680:	4413      	add	r3, r2
 8011682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011686:	691b      	ldr	r3, [r3, #16]
 8011688:	69ba      	ldr	r2, [r7, #24]
 801168a:	0151      	lsls	r1, r2, #5
 801168c:	69fa      	ldr	r2, [r7, #28]
 801168e:	440a      	add	r2, r1
 8011690:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011694:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011698:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801169a:	79fb      	ldrb	r3, [r7, #7]
 801169c:	2b01      	cmp	r3, #1
 801169e:	d14b      	bne.n	8011738 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	69db      	ldr	r3, [r3, #28]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d009      	beq.n	80116bc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80116a8:	69bb      	ldr	r3, [r7, #24]
 80116aa:	015a      	lsls	r2, r3, #5
 80116ac:	69fb      	ldr	r3, [r7, #28]
 80116ae:	4413      	add	r3, r2
 80116b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80116b4:	461a      	mov	r2, r3
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	69db      	ldr	r3, [r3, #28]
 80116ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	791b      	ldrb	r3, [r3, #4]
 80116c0:	2b01      	cmp	r3, #1
 80116c2:	d128      	bne.n	8011716 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80116c4:	69fb      	ldr	r3, [r7, #28]
 80116c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116ca:	689b      	ldr	r3, [r3, #8]
 80116cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d110      	bne.n	80116f6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80116d4:	69bb      	ldr	r3, [r7, #24]
 80116d6:	015a      	lsls	r2, r3, #5
 80116d8:	69fb      	ldr	r3, [r7, #28]
 80116da:	4413      	add	r3, r2
 80116dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	69ba      	ldr	r2, [r7, #24]
 80116e4:	0151      	lsls	r1, r2, #5
 80116e6:	69fa      	ldr	r2, [r7, #28]
 80116e8:	440a      	add	r2, r1
 80116ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80116ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80116f2:	6013      	str	r3, [r2, #0]
 80116f4:	e00f      	b.n	8011716 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80116f6:	69bb      	ldr	r3, [r7, #24]
 80116f8:	015a      	lsls	r2, r3, #5
 80116fa:	69fb      	ldr	r3, [r7, #28]
 80116fc:	4413      	add	r3, r2
 80116fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	69ba      	ldr	r2, [r7, #24]
 8011706:	0151      	lsls	r1, r2, #5
 8011708:	69fa      	ldr	r2, [r7, #28]
 801170a:	440a      	add	r2, r1
 801170c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011714:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011716:	69bb      	ldr	r3, [r7, #24]
 8011718:	015a      	lsls	r2, r3, #5
 801171a:	69fb      	ldr	r3, [r7, #28]
 801171c:	4413      	add	r3, r2
 801171e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	69ba      	ldr	r2, [r7, #24]
 8011726:	0151      	lsls	r1, r2, #5
 8011728:	69fa      	ldr	r2, [r7, #28]
 801172a:	440a      	add	r2, r1
 801172c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011730:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011734:	6013      	str	r3, [r2, #0]
 8011736:	e16a      	b.n	8011a0e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011738:	69bb      	ldr	r3, [r7, #24]
 801173a:	015a      	lsls	r2, r3, #5
 801173c:	69fb      	ldr	r3, [r7, #28]
 801173e:	4413      	add	r3, r2
 8011740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	69ba      	ldr	r2, [r7, #24]
 8011748:	0151      	lsls	r1, r2, #5
 801174a:	69fa      	ldr	r2, [r7, #28]
 801174c:	440a      	add	r2, r1
 801174e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011752:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011756:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	791b      	ldrb	r3, [r3, #4]
 801175c:	2b01      	cmp	r3, #1
 801175e:	d015      	beq.n	801178c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011760:	68bb      	ldr	r3, [r7, #8]
 8011762:	691b      	ldr	r3, [r3, #16]
 8011764:	2b00      	cmp	r3, #0
 8011766:	f000 8152 	beq.w	8011a0e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801176a:	69fb      	ldr	r3, [r7, #28]
 801176c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	f003 030f 	and.w	r3, r3, #15
 801177a:	2101      	movs	r1, #1
 801177c:	fa01 f303 	lsl.w	r3, r1, r3
 8011780:	69f9      	ldr	r1, [r7, #28]
 8011782:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011786:	4313      	orrs	r3, r2
 8011788:	634b      	str	r3, [r1, #52]	@ 0x34
 801178a:	e140      	b.n	8011a0e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011792:	689b      	ldr	r3, [r3, #8]
 8011794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011798:	2b00      	cmp	r3, #0
 801179a:	d117      	bne.n	80117cc <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801179c:	69bb      	ldr	r3, [r7, #24]
 801179e:	015a      	lsls	r2, r3, #5
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	4413      	add	r3, r2
 80117a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	69ba      	ldr	r2, [r7, #24]
 80117ac:	0151      	lsls	r1, r2, #5
 80117ae:	69fa      	ldr	r2, [r7, #28]
 80117b0:	440a      	add	r2, r1
 80117b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80117b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80117ba:	6013      	str	r3, [r2, #0]
 80117bc:	e016      	b.n	80117ec <USB_EPStartXfer+0x308>
 80117be:	bf00      	nop
 80117c0:	e007ffff 	.word	0xe007ffff
 80117c4:	fff80000 	.word	0xfff80000
 80117c8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80117cc:	69bb      	ldr	r3, [r7, #24]
 80117ce:	015a      	lsls	r2, r3, #5
 80117d0:	69fb      	ldr	r3, [r7, #28]
 80117d2:	4413      	add	r3, r2
 80117d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	69ba      	ldr	r2, [r7, #24]
 80117dc:	0151      	lsls	r1, r2, #5
 80117de:	69fa      	ldr	r2, [r7, #28]
 80117e0:	440a      	add	r2, r1
 80117e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80117e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80117ea:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	68d9      	ldr	r1, [r3, #12]
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	781a      	ldrb	r2, [r3, #0]
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	691b      	ldr	r3, [r3, #16]
 80117f8:	b298      	uxth	r0, r3
 80117fa:	79fb      	ldrb	r3, [r7, #7]
 80117fc:	9300      	str	r3, [sp, #0]
 80117fe:	4603      	mov	r3, r0
 8011800:	68f8      	ldr	r0, [r7, #12]
 8011802:	f000 f9b9 	bl	8011b78 <USB_WritePacket>
 8011806:	e102      	b.n	8011a0e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011808:	69bb      	ldr	r3, [r7, #24]
 801180a:	015a      	lsls	r2, r3, #5
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	4413      	add	r3, r2
 8011810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011814:	691a      	ldr	r2, [r3, #16]
 8011816:	69bb      	ldr	r3, [r7, #24]
 8011818:	0159      	lsls	r1, r3, #5
 801181a:	69fb      	ldr	r3, [r7, #28]
 801181c:	440b      	add	r3, r1
 801181e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011822:	4619      	mov	r1, r3
 8011824:	4b7c      	ldr	r3, [pc, #496]	@ (8011a18 <USB_EPStartXfer+0x534>)
 8011826:	4013      	ands	r3, r2
 8011828:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801182a:	69bb      	ldr	r3, [r7, #24]
 801182c:	015a      	lsls	r2, r3, #5
 801182e:	69fb      	ldr	r3, [r7, #28]
 8011830:	4413      	add	r3, r2
 8011832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011836:	691a      	ldr	r2, [r3, #16]
 8011838:	69bb      	ldr	r3, [r7, #24]
 801183a:	0159      	lsls	r1, r3, #5
 801183c:	69fb      	ldr	r3, [r7, #28]
 801183e:	440b      	add	r3, r1
 8011840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011844:	4619      	mov	r1, r3
 8011846:	4b75      	ldr	r3, [pc, #468]	@ (8011a1c <USB_EPStartXfer+0x538>)
 8011848:	4013      	ands	r3, r2
 801184a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801184c:	69bb      	ldr	r3, [r7, #24]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d12f      	bne.n	80118b2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	691b      	ldr	r3, [r3, #16]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d003      	beq.n	8011862 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	689a      	ldr	r2, [r3, #8]
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	689a      	ldr	r2, [r3, #8]
 8011866:	68bb      	ldr	r3, [r7, #8]
 8011868:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801186a:	69bb      	ldr	r3, [r7, #24]
 801186c:	015a      	lsls	r2, r3, #5
 801186e:	69fb      	ldr	r3, [r7, #28]
 8011870:	4413      	add	r3, r2
 8011872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011876:	691a      	ldr	r2, [r3, #16]
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	6a1b      	ldr	r3, [r3, #32]
 801187c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011880:	69b9      	ldr	r1, [r7, #24]
 8011882:	0148      	lsls	r0, r1, #5
 8011884:	69f9      	ldr	r1, [r7, #28]
 8011886:	4401      	add	r1, r0
 8011888:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801188c:	4313      	orrs	r3, r2
 801188e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011890:	69bb      	ldr	r3, [r7, #24]
 8011892:	015a      	lsls	r2, r3, #5
 8011894:	69fb      	ldr	r3, [r7, #28]
 8011896:	4413      	add	r3, r2
 8011898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801189c:	691b      	ldr	r3, [r3, #16]
 801189e:	69ba      	ldr	r2, [r7, #24]
 80118a0:	0151      	lsls	r1, r2, #5
 80118a2:	69fa      	ldr	r2, [r7, #28]
 80118a4:	440a      	add	r2, r1
 80118a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80118aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80118ae:	6113      	str	r3, [r2, #16]
 80118b0:	e05f      	b.n	8011972 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	691b      	ldr	r3, [r3, #16]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d123      	bne.n	8011902 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80118ba:	69bb      	ldr	r3, [r7, #24]
 80118bc:	015a      	lsls	r2, r3, #5
 80118be:	69fb      	ldr	r3, [r7, #28]
 80118c0:	4413      	add	r3, r2
 80118c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118c6:	691a      	ldr	r2, [r3, #16]
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	689b      	ldr	r3, [r3, #8]
 80118cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80118d0:	69b9      	ldr	r1, [r7, #24]
 80118d2:	0148      	lsls	r0, r1, #5
 80118d4:	69f9      	ldr	r1, [r7, #28]
 80118d6:	4401      	add	r1, r0
 80118d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80118dc:	4313      	orrs	r3, r2
 80118de:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80118e0:	69bb      	ldr	r3, [r7, #24]
 80118e2:	015a      	lsls	r2, r3, #5
 80118e4:	69fb      	ldr	r3, [r7, #28]
 80118e6:	4413      	add	r3, r2
 80118e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118ec:	691b      	ldr	r3, [r3, #16]
 80118ee:	69ba      	ldr	r2, [r7, #24]
 80118f0:	0151      	lsls	r1, r2, #5
 80118f2:	69fa      	ldr	r2, [r7, #28]
 80118f4:	440a      	add	r2, r1
 80118f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80118fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80118fe:	6113      	str	r3, [r2, #16]
 8011900:	e037      	b.n	8011972 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	691a      	ldr	r2, [r3, #16]
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	689b      	ldr	r3, [r3, #8]
 801190a:	4413      	add	r3, r2
 801190c:	1e5a      	subs	r2, r3, #1
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	689b      	ldr	r3, [r3, #8]
 8011912:	fbb2 f3f3 	udiv	r3, r2, r3
 8011916:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011918:	68bb      	ldr	r3, [r7, #8]
 801191a:	689b      	ldr	r3, [r3, #8]
 801191c:	8afa      	ldrh	r2, [r7, #22]
 801191e:	fb03 f202 	mul.w	r2, r3, r2
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011926:	69bb      	ldr	r3, [r7, #24]
 8011928:	015a      	lsls	r2, r3, #5
 801192a:	69fb      	ldr	r3, [r7, #28]
 801192c:	4413      	add	r3, r2
 801192e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011932:	691a      	ldr	r2, [r3, #16]
 8011934:	8afb      	ldrh	r3, [r7, #22]
 8011936:	04d9      	lsls	r1, r3, #19
 8011938:	4b39      	ldr	r3, [pc, #228]	@ (8011a20 <USB_EPStartXfer+0x53c>)
 801193a:	400b      	ands	r3, r1
 801193c:	69b9      	ldr	r1, [r7, #24]
 801193e:	0148      	lsls	r0, r1, #5
 8011940:	69f9      	ldr	r1, [r7, #28]
 8011942:	4401      	add	r1, r0
 8011944:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011948:	4313      	orrs	r3, r2
 801194a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801194c:	69bb      	ldr	r3, [r7, #24]
 801194e:	015a      	lsls	r2, r3, #5
 8011950:	69fb      	ldr	r3, [r7, #28]
 8011952:	4413      	add	r3, r2
 8011954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011958:	691a      	ldr	r2, [r3, #16]
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	6a1b      	ldr	r3, [r3, #32]
 801195e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011962:	69b9      	ldr	r1, [r7, #24]
 8011964:	0148      	lsls	r0, r1, #5
 8011966:	69f9      	ldr	r1, [r7, #28]
 8011968:	4401      	add	r1, r0
 801196a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801196e:	4313      	orrs	r3, r2
 8011970:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8011972:	79fb      	ldrb	r3, [r7, #7]
 8011974:	2b01      	cmp	r3, #1
 8011976:	d10d      	bne.n	8011994 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	68db      	ldr	r3, [r3, #12]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d009      	beq.n	8011994 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	68d9      	ldr	r1, [r3, #12]
 8011984:	69bb      	ldr	r3, [r7, #24]
 8011986:	015a      	lsls	r2, r3, #5
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	4413      	add	r3, r2
 801198c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011990:	460a      	mov	r2, r1
 8011992:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	791b      	ldrb	r3, [r3, #4]
 8011998:	2b01      	cmp	r3, #1
 801199a:	d128      	bne.n	80119ee <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801199c:	69fb      	ldr	r3, [r7, #28]
 801199e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80119a2:	689b      	ldr	r3, [r3, #8]
 80119a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d110      	bne.n	80119ce <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80119ac:	69bb      	ldr	r3, [r7, #24]
 80119ae:	015a      	lsls	r2, r3, #5
 80119b0:	69fb      	ldr	r3, [r7, #28]
 80119b2:	4413      	add	r3, r2
 80119b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	69ba      	ldr	r2, [r7, #24]
 80119bc:	0151      	lsls	r1, r2, #5
 80119be:	69fa      	ldr	r2, [r7, #28]
 80119c0:	440a      	add	r2, r1
 80119c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80119c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80119ca:	6013      	str	r3, [r2, #0]
 80119cc:	e00f      	b.n	80119ee <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80119ce:	69bb      	ldr	r3, [r7, #24]
 80119d0:	015a      	lsls	r2, r3, #5
 80119d2:	69fb      	ldr	r3, [r7, #28]
 80119d4:	4413      	add	r3, r2
 80119d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	69ba      	ldr	r2, [r7, #24]
 80119de:	0151      	lsls	r1, r2, #5
 80119e0:	69fa      	ldr	r2, [r7, #28]
 80119e2:	440a      	add	r2, r1
 80119e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80119e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80119ec:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80119ee:	69bb      	ldr	r3, [r7, #24]
 80119f0:	015a      	lsls	r2, r3, #5
 80119f2:	69fb      	ldr	r3, [r7, #28]
 80119f4:	4413      	add	r3, r2
 80119f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	69ba      	ldr	r2, [r7, #24]
 80119fe:	0151      	lsls	r1, r2, #5
 8011a00:	69fa      	ldr	r2, [r7, #28]
 8011a02:	440a      	add	r2, r1
 8011a04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a08:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011a0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011a0e:	2300      	movs	r3, #0
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3720      	adds	r7, #32
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}
 8011a18:	fff80000 	.word	0xfff80000
 8011a1c:	e007ffff 	.word	0xe007ffff
 8011a20:	1ff80000 	.word	0x1ff80000

08011a24 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011a24:	b480      	push	{r7}
 8011a26:	b087      	sub	sp, #28
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
 8011a2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011a32:	2300      	movs	r3, #0
 8011a34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	785b      	ldrb	r3, [r3, #1]
 8011a3e:	2b01      	cmp	r3, #1
 8011a40:	d14a      	bne.n	8011ad8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	015a      	lsls	r2, r3, #5
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	4413      	add	r3, r2
 8011a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011a56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011a5a:	f040 8086 	bne.w	8011b6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	781b      	ldrb	r3, [r3, #0]
 8011a62:	015a      	lsls	r2, r3, #5
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	4413      	add	r3, r2
 8011a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	683a      	ldr	r2, [r7, #0]
 8011a70:	7812      	ldrb	r2, [r2, #0]
 8011a72:	0151      	lsls	r1, r2, #5
 8011a74:	693a      	ldr	r2, [r7, #16]
 8011a76:	440a      	add	r2, r1
 8011a78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011a7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011a80:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	781b      	ldrb	r3, [r3, #0]
 8011a86:	015a      	lsls	r2, r3, #5
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	4413      	add	r3, r2
 8011a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	683a      	ldr	r2, [r7, #0]
 8011a94:	7812      	ldrb	r2, [r2, #0]
 8011a96:	0151      	lsls	r1, r2, #5
 8011a98:	693a      	ldr	r2, [r7, #16]
 8011a9a:	440a      	add	r2, r1
 8011a9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011aa0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011aa4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	d902      	bls.n	8011abc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8011aba:	e056      	b.n	8011b6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	015a      	lsls	r2, r3, #5
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	4413      	add	r3, r2
 8011ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011ad4:	d0e7      	beq.n	8011aa6 <USB_EPStopXfer+0x82>
 8011ad6:	e048      	b.n	8011b6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	015a      	lsls	r2, r3, #5
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	4413      	add	r3, r2
 8011ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011aec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011af0:	d13b      	bne.n	8011b6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	781b      	ldrb	r3, [r3, #0]
 8011af6:	015a      	lsls	r2, r3, #5
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	4413      	add	r3, r2
 8011afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	683a      	ldr	r2, [r7, #0]
 8011b04:	7812      	ldrb	r2, [r2, #0]
 8011b06:	0151      	lsls	r1, r2, #5
 8011b08:	693a      	ldr	r2, [r7, #16]
 8011b0a:	440a      	add	r2, r1
 8011b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011b10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011b14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	781b      	ldrb	r3, [r3, #0]
 8011b1a:	015a      	lsls	r2, r3, #5
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	4413      	add	r3, r2
 8011b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	683a      	ldr	r2, [r7, #0]
 8011b28:	7812      	ldrb	r2, [r2, #0]
 8011b2a:	0151      	lsls	r1, r2, #5
 8011b2c:	693a      	ldr	r2, [r7, #16]
 8011b2e:	440a      	add	r2, r1
 8011b30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011b34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011b38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	3301      	adds	r3, #1
 8011b3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011b46:	4293      	cmp	r3, r2
 8011b48:	d902      	bls.n	8011b50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	75fb      	strb	r3, [r7, #23]
          break;
 8011b4e:	e00c      	b.n	8011b6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	015a      	lsls	r2, r3, #5
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	4413      	add	r3, r2
 8011b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011b64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011b68:	d0e7      	beq.n	8011b3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8011b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	371c      	adds	r7, #28
 8011b70:	46bd      	mov	sp, r7
 8011b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b76:	4770      	bx	lr

08011b78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b089      	sub	sp, #36	@ 0x24
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	4611      	mov	r1, r2
 8011b84:	461a      	mov	r2, r3
 8011b86:	460b      	mov	r3, r1
 8011b88:	71fb      	strb	r3, [r7, #7]
 8011b8a:	4613      	mov	r3, r2
 8011b8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011b96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d123      	bne.n	8011be6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011b9e:	88bb      	ldrh	r3, [r7, #4]
 8011ba0:	3303      	adds	r3, #3
 8011ba2:	089b      	lsrs	r3, r3, #2
 8011ba4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	61bb      	str	r3, [r7, #24]
 8011baa:	e018      	b.n	8011bde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011bac:	79fb      	ldrb	r3, [r7, #7]
 8011bae:	031a      	lsls	r2, r3, #12
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	4413      	add	r3, r2
 8011bb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011bb8:	461a      	mov	r2, r3
 8011bba:	69fb      	ldr	r3, [r7, #28]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011bc0:	69fb      	ldr	r3, [r7, #28]
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011bc6:	69fb      	ldr	r3, [r7, #28]
 8011bc8:	3301      	adds	r3, #1
 8011bca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	3301      	adds	r3, #1
 8011bd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011bd2:	69fb      	ldr	r3, [r7, #28]
 8011bd4:	3301      	adds	r3, #1
 8011bd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011bd8:	69bb      	ldr	r3, [r7, #24]
 8011bda:	3301      	adds	r3, #1
 8011bdc:	61bb      	str	r3, [r7, #24]
 8011bde:	69ba      	ldr	r2, [r7, #24]
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d3e2      	bcc.n	8011bac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011be6:	2300      	movs	r3, #0
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3724      	adds	r7, #36	@ 0x24
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr

08011bf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011bf4:	b480      	push	{r7}
 8011bf6:	b08b      	sub	sp, #44	@ 0x2c
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	4613      	mov	r3, r2
 8011c00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011c0a:	88fb      	ldrh	r3, [r7, #6]
 8011c0c:	089b      	lsrs	r3, r3, #2
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011c12:	88fb      	ldrh	r3, [r7, #6]
 8011c14:	f003 0303 	and.w	r3, r3, #3
 8011c18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	623b      	str	r3, [r7, #32]
 8011c1e:	e014      	b.n	8011c4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011c20:	69bb      	ldr	r3, [r7, #24]
 8011c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011c26:	681a      	ldr	r2, [r3, #0]
 8011c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8011c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c2e:	3301      	adds	r3, #1
 8011c30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c34:	3301      	adds	r3, #1
 8011c36:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c40:	3301      	adds	r3, #1
 8011c42:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011c44:	6a3b      	ldr	r3, [r7, #32]
 8011c46:	3301      	adds	r3, #1
 8011c48:	623b      	str	r3, [r7, #32]
 8011c4a:	6a3a      	ldr	r2, [r7, #32]
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d3e6      	bcc.n	8011c20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011c52:	8bfb      	ldrh	r3, [r7, #30]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d01e      	beq.n	8011c96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011c5c:	69bb      	ldr	r3, [r7, #24]
 8011c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011c62:	461a      	mov	r2, r3
 8011c64:	f107 0310 	add.w	r3, r7, #16
 8011c68:	6812      	ldr	r2, [r2, #0]
 8011c6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011c6c:	693a      	ldr	r2, [r7, #16]
 8011c6e:	6a3b      	ldr	r3, [r7, #32]
 8011c70:	b2db      	uxtb	r3, r3
 8011c72:	00db      	lsls	r3, r3, #3
 8011c74:	fa22 f303 	lsr.w	r3, r2, r3
 8011c78:	b2da      	uxtb	r2, r3
 8011c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c7c:	701a      	strb	r2, [r3, #0]
      i++;
 8011c7e:	6a3b      	ldr	r3, [r7, #32]
 8011c80:	3301      	adds	r3, #1
 8011c82:	623b      	str	r3, [r7, #32]
      pDest++;
 8011c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c86:	3301      	adds	r3, #1
 8011c88:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8011c8a:	8bfb      	ldrh	r3, [r7, #30]
 8011c8c:	3b01      	subs	r3, #1
 8011c8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011c90:	8bfb      	ldrh	r3, [r7, #30]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d1ea      	bne.n	8011c6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	372c      	adds	r7, #44	@ 0x2c
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca2:	4770      	bx	lr

08011ca4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	b085      	sub	sp, #20
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	781b      	ldrb	r3, [r3, #0]
 8011cb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	785b      	ldrb	r3, [r3, #1]
 8011cbc:	2b01      	cmp	r3, #1
 8011cbe:	d12c      	bne.n	8011d1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	015a      	lsls	r2, r3, #5
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	4413      	add	r3, r2
 8011cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	db12      	blt.n	8011cf8 <USB_EPSetStall+0x54>
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d00f      	beq.n	8011cf8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	015a      	lsls	r2, r3, #5
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	4413      	add	r3, r2
 8011ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	68ba      	ldr	r2, [r7, #8]
 8011ce8:	0151      	lsls	r1, r2, #5
 8011cea:	68fa      	ldr	r2, [r7, #12]
 8011cec:	440a      	add	r2, r1
 8011cee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011cf2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011cf6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	015a      	lsls	r2, r3, #5
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	4413      	add	r3, r2
 8011d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	68ba      	ldr	r2, [r7, #8]
 8011d08:	0151      	lsls	r1, r2, #5
 8011d0a:	68fa      	ldr	r2, [r7, #12]
 8011d0c:	440a      	add	r2, r1
 8011d0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011d12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011d16:	6013      	str	r3, [r2, #0]
 8011d18:	e02b      	b.n	8011d72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	015a      	lsls	r2, r3, #5
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	4413      	add	r3, r2
 8011d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	db12      	blt.n	8011d52 <USB_EPSetStall+0xae>
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d00f      	beq.n	8011d52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	015a      	lsls	r2, r3, #5
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	4413      	add	r3, r2
 8011d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	68ba      	ldr	r2, [r7, #8]
 8011d42:	0151      	lsls	r1, r2, #5
 8011d44:	68fa      	ldr	r2, [r7, #12]
 8011d46:	440a      	add	r2, r1
 8011d48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011d4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011d50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	015a      	lsls	r2, r3, #5
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	4413      	add	r3, r2
 8011d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	68ba      	ldr	r2, [r7, #8]
 8011d62:	0151      	lsls	r1, r2, #5
 8011d64:	68fa      	ldr	r2, [r7, #12]
 8011d66:	440a      	add	r2, r1
 8011d68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011d6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011d70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011d72:	2300      	movs	r3, #0
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	3714      	adds	r7, #20
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7e:	4770      	bx	lr

08011d80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011d80:	b480      	push	{r7}
 8011d82:	b085      	sub	sp, #20
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	785b      	ldrb	r3, [r3, #1]
 8011d98:	2b01      	cmp	r3, #1
 8011d9a:	d128      	bne.n	8011dee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	015a      	lsls	r2, r3, #5
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	4413      	add	r3, r2
 8011da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	68ba      	ldr	r2, [r7, #8]
 8011dac:	0151      	lsls	r1, r2, #5
 8011dae:	68fa      	ldr	r2, [r7, #12]
 8011db0:	440a      	add	r2, r1
 8011db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011db6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011dba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	791b      	ldrb	r3, [r3, #4]
 8011dc0:	2b03      	cmp	r3, #3
 8011dc2:	d003      	beq.n	8011dcc <USB_EPClearStall+0x4c>
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	791b      	ldrb	r3, [r3, #4]
 8011dc8:	2b02      	cmp	r3, #2
 8011dca:	d138      	bne.n	8011e3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	015a      	lsls	r2, r3, #5
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	4413      	add	r3, r2
 8011dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	68ba      	ldr	r2, [r7, #8]
 8011ddc:	0151      	lsls	r1, r2, #5
 8011dde:	68fa      	ldr	r2, [r7, #12]
 8011de0:	440a      	add	r2, r1
 8011de2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011dea:	6013      	str	r3, [r2, #0]
 8011dec:	e027      	b.n	8011e3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011dee:	68bb      	ldr	r3, [r7, #8]
 8011df0:	015a      	lsls	r2, r3, #5
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	4413      	add	r3, r2
 8011df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	68ba      	ldr	r2, [r7, #8]
 8011dfe:	0151      	lsls	r1, r2, #5
 8011e00:	68fa      	ldr	r2, [r7, #12]
 8011e02:	440a      	add	r2, r1
 8011e04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011e08:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011e0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	791b      	ldrb	r3, [r3, #4]
 8011e12:	2b03      	cmp	r3, #3
 8011e14:	d003      	beq.n	8011e1e <USB_EPClearStall+0x9e>
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	791b      	ldrb	r3, [r3, #4]
 8011e1a:	2b02      	cmp	r3, #2
 8011e1c:	d10f      	bne.n	8011e3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	015a      	lsls	r2, r3, #5
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	4413      	add	r3, r2
 8011e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	68ba      	ldr	r2, [r7, #8]
 8011e2e:	0151      	lsls	r1, r2, #5
 8011e30:	68fa      	ldr	r2, [r7, #12]
 8011e32:	440a      	add	r2, r1
 8011e34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011e3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011e3e:	2300      	movs	r3, #0
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3714      	adds	r7, #20
 8011e44:	46bd      	mov	sp, r7
 8011e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4a:	4770      	bx	lr

08011e4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b085      	sub	sp, #20
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	460b      	mov	r3, r1
 8011e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	68fa      	ldr	r2, [r7, #12]
 8011e66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011e6a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8011e6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011e76:	681a      	ldr	r2, [r3, #0]
 8011e78:	78fb      	ldrb	r3, [r7, #3]
 8011e7a:	011b      	lsls	r3, r3, #4
 8011e7c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8011e80:	68f9      	ldr	r1, [r7, #12]
 8011e82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011e86:	4313      	orrs	r3, r2
 8011e88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011e8a:	2300      	movs	r3, #0
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3714      	adds	r7, #20
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b085      	sub	sp, #20
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	68fa      	ldr	r2, [r7, #12]
 8011eae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011eb2:	f023 0303 	bic.w	r3, r3, #3
 8011eb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ebe:	685b      	ldr	r3, [r3, #4]
 8011ec0:	68fa      	ldr	r2, [r7, #12]
 8011ec2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011ec6:	f023 0302 	bic.w	r3, r3, #2
 8011eca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011ecc:	2300      	movs	r3, #0
}
 8011ece:	4618      	mov	r0, r3
 8011ed0:	3714      	adds	r7, #20
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed8:	4770      	bx	lr

08011eda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011eda:	b480      	push	{r7}
 8011edc:	b085      	sub	sp, #20
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	68fa      	ldr	r2, [r7, #12]
 8011ef0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011ef4:	f023 0303 	bic.w	r3, r3, #3
 8011ef8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	68fa      	ldr	r2, [r7, #12]
 8011f04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011f08:	f043 0302 	orr.w	r3, r3, #2
 8011f0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011f0e:	2300      	movs	r3, #0
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	3714      	adds	r7, #20
 8011f14:	46bd      	mov	sp, r7
 8011f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1a:	4770      	bx	lr

08011f1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b085      	sub	sp, #20
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	695b      	ldr	r3, [r3, #20]
 8011f28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	699b      	ldr	r3, [r3, #24]
 8011f2e:	68fa      	ldr	r2, [r7, #12]
 8011f30:	4013      	ands	r3, r2
 8011f32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011f34:	68fb      	ldr	r3, [r7, #12]
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3714      	adds	r7, #20
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f40:	4770      	bx	lr

08011f42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011f42:	b480      	push	{r7}
 8011f44:	b085      	sub	sp, #20
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f54:	699b      	ldr	r3, [r3, #24]
 8011f56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f5e:	69db      	ldr	r3, [r3, #28]
 8011f60:	68ba      	ldr	r2, [r7, #8]
 8011f62:	4013      	ands	r3, r2
 8011f64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	0c1b      	lsrs	r3, r3, #16
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3714      	adds	r7, #20
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f74:	4770      	bx	lr

08011f76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011f76:	b480      	push	{r7}
 8011f78:	b085      	sub	sp, #20
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f88:	699b      	ldr	r3, [r3, #24]
 8011f8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f92:	69db      	ldr	r3, [r3, #28]
 8011f94:	68ba      	ldr	r2, [r7, #8]
 8011f96:	4013      	ands	r3, r2
 8011f98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	b29b      	uxth	r3, r3
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3714      	adds	r7, #20
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr

08011faa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011faa:	b480      	push	{r7}
 8011fac:	b085      	sub	sp, #20
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
 8011fb2:	460b      	mov	r3, r1
 8011fb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011fba:	78fb      	ldrb	r3, [r7, #3]
 8011fbc:	015a      	lsls	r2, r3, #5
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	4413      	add	r3, r2
 8011fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011fc6:	689b      	ldr	r3, [r3, #8]
 8011fc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011fd0:	695b      	ldr	r3, [r3, #20]
 8011fd2:	68ba      	ldr	r2, [r7, #8]
 8011fd4:	4013      	ands	r3, r2
 8011fd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011fd8:	68bb      	ldr	r3, [r7, #8]
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3714      	adds	r7, #20
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr

08011fe6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011fe6:	b480      	push	{r7}
 8011fe8:	b087      	sub	sp, #28
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]
 8011fee:	460b      	mov	r3, r1
 8011ff0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ffc:	691b      	ldr	r3, [r3, #16]
 8011ffe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012008:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801200a:	78fb      	ldrb	r3, [r7, #3]
 801200c:	f003 030f 	and.w	r3, r3, #15
 8012010:	68fa      	ldr	r2, [r7, #12]
 8012012:	fa22 f303 	lsr.w	r3, r2, r3
 8012016:	01db      	lsls	r3, r3, #7
 8012018:	b2db      	uxtb	r3, r3
 801201a:	693a      	ldr	r2, [r7, #16]
 801201c:	4313      	orrs	r3, r2
 801201e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012020:	78fb      	ldrb	r3, [r7, #3]
 8012022:	015a      	lsls	r2, r3, #5
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	4413      	add	r3, r2
 8012028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801202c:	689b      	ldr	r3, [r3, #8]
 801202e:	693a      	ldr	r2, [r7, #16]
 8012030:	4013      	ands	r3, r2
 8012032:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012034:	68bb      	ldr	r3, [r7, #8]
}
 8012036:	4618      	mov	r0, r3
 8012038:	371c      	adds	r7, #28
 801203a:	46bd      	mov	sp, r7
 801203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012040:	4770      	bx	lr

08012042 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8012042:	b480      	push	{r7}
 8012044:	b083      	sub	sp, #12
 8012046:	af00      	add	r7, sp, #0
 8012048:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	695b      	ldr	r3, [r3, #20]
 801204e:	f003 0301 	and.w	r3, r3, #1
}
 8012052:	4618      	mov	r0, r3
 8012054:	370c      	adds	r7, #12
 8012056:	46bd      	mov	sp, r7
 8012058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205c:	4770      	bx	lr
	...

08012060 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8012060:	b480      	push	{r7}
 8012062:	b085      	sub	sp, #20
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801207a:	4619      	mov	r1, r3
 801207c:	4b09      	ldr	r3, [pc, #36]	@ (80120a4 <USB_ActivateSetup+0x44>)
 801207e:	4013      	ands	r3, r2
 8012080:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	68fa      	ldr	r2, [r7, #12]
 801208c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012094:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012096:	2300      	movs	r3, #0
}
 8012098:	4618      	mov	r0, r3
 801209a:	3714      	adds	r7, #20
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr
 80120a4:	fffff800 	.word	0xfffff800

080120a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80120a8:	b480      	push	{r7}
 80120aa:	b087      	sub	sp, #28
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	460b      	mov	r3, r1
 80120b2:	607a      	str	r2, [r7, #4]
 80120b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	333c      	adds	r3, #60	@ 0x3c
 80120be:	3304      	adds	r3, #4
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80120c4:	693b      	ldr	r3, [r7, #16]
 80120c6:	4a26      	ldr	r2, [pc, #152]	@ (8012160 <USB_EP0_OutStart+0xb8>)
 80120c8:	4293      	cmp	r3, r2
 80120ca:	d90a      	bls.n	80120e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80120d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80120dc:	d101      	bne.n	80120e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80120de:	2300      	movs	r3, #0
 80120e0:	e037      	b.n	8012152 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120e8:	461a      	mov	r2, r3
 80120ea:	2300      	movs	r3, #0
 80120ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120f4:	691b      	ldr	r3, [r3, #16]
 80120f6:	697a      	ldr	r2, [r7, #20]
 80120f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80120fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012100:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012108:	691b      	ldr	r3, [r3, #16]
 801210a:	697a      	ldr	r2, [r7, #20]
 801210c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012110:	f043 0318 	orr.w	r3, r3, #24
 8012114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801211c:	691b      	ldr	r3, [r3, #16]
 801211e:	697a      	ldr	r2, [r7, #20]
 8012120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012124:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8012128:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801212a:	7afb      	ldrb	r3, [r7, #11]
 801212c:	2b01      	cmp	r3, #1
 801212e:	d10f      	bne.n	8012150 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012136:	461a      	mov	r2, r3
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	697a      	ldr	r2, [r7, #20]
 8012146:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801214a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801214e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012150:	2300      	movs	r3, #0
}
 8012152:	4618      	mov	r0, r3
 8012154:	371c      	adds	r7, #28
 8012156:	46bd      	mov	sp, r7
 8012158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215c:	4770      	bx	lr
 801215e:	bf00      	nop
 8012160:	4f54300a 	.word	0x4f54300a

08012164 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012164:	b480      	push	{r7}
 8012166:	b085      	sub	sp, #20
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801216c:	2300      	movs	r3, #0
 801216e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	3301      	adds	r3, #1
 8012174:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801217c:	d901      	bls.n	8012182 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801217e:	2303      	movs	r3, #3
 8012180:	e01b      	b.n	80121ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	691b      	ldr	r3, [r3, #16]
 8012186:	2b00      	cmp	r3, #0
 8012188:	daf2      	bge.n	8012170 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801218a:	2300      	movs	r3, #0
 801218c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	691b      	ldr	r3, [r3, #16]
 8012192:	f043 0201 	orr.w	r2, r3, #1
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	3301      	adds	r3, #1
 801219e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80121a6:	d901      	bls.n	80121ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80121a8:	2303      	movs	r3, #3
 80121aa:	e006      	b.n	80121ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	691b      	ldr	r3, [r3, #16]
 80121b0:	f003 0301 	and.w	r3, r3, #1
 80121b4:	2b01      	cmp	r3, #1
 80121b6:	d0f0      	beq.n	801219a <USB_CoreReset+0x36>

  return HAL_OK;
 80121b8:	2300      	movs	r3, #0
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3714      	adds	r7, #20
 80121be:	46bd      	mov	sp, r7
 80121c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c4:	4770      	bx	lr
	...

080121c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	460b      	mov	r3, r1
 80121d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80121d4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80121d8:	f002 fcca 	bl	8014b70 <USBD_static_malloc>
 80121dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d109      	bne.n	80121f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	32b0      	adds	r2, #176	@ 0xb0
 80121ee:	2100      	movs	r1, #0
 80121f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80121f4:	2302      	movs	r3, #2
 80121f6:	e0d4      	b.n	80123a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80121f8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80121fc:	2100      	movs	r1, #0
 80121fe:	68f8      	ldr	r0, [r7, #12]
 8012200:	f004 f817 	bl	8016232 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	32b0      	adds	r2, #176	@ 0xb0
 801220e:	68f9      	ldr	r1, [r7, #12]
 8012210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	32b0      	adds	r2, #176	@ 0xb0
 801221e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	7c1b      	ldrb	r3, [r3, #16]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d138      	bne.n	80122a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012230:	4b5e      	ldr	r3, [pc, #376]	@ (80123ac <USBD_CDC_Init+0x1e4>)
 8012232:	7819      	ldrb	r1, [r3, #0]
 8012234:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012238:	2202      	movs	r2, #2
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f002 fb75 	bl	801492a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012240:	4b5a      	ldr	r3, [pc, #360]	@ (80123ac <USBD_CDC_Init+0x1e4>)
 8012242:	781b      	ldrb	r3, [r3, #0]
 8012244:	f003 020f 	and.w	r2, r3, #15
 8012248:	6879      	ldr	r1, [r7, #4]
 801224a:	4613      	mov	r3, r2
 801224c:	009b      	lsls	r3, r3, #2
 801224e:	4413      	add	r3, r2
 8012250:	009b      	lsls	r3, r3, #2
 8012252:	440b      	add	r3, r1
 8012254:	3324      	adds	r3, #36	@ 0x24
 8012256:	2201      	movs	r2, #1
 8012258:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801225a:	4b55      	ldr	r3, [pc, #340]	@ (80123b0 <USBD_CDC_Init+0x1e8>)
 801225c:	7819      	ldrb	r1, [r3, #0]
 801225e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012262:	2202      	movs	r2, #2
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f002 fb60 	bl	801492a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801226a:	4b51      	ldr	r3, [pc, #324]	@ (80123b0 <USBD_CDC_Init+0x1e8>)
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	f003 020f 	and.w	r2, r3, #15
 8012272:	6879      	ldr	r1, [r7, #4]
 8012274:	4613      	mov	r3, r2
 8012276:	009b      	lsls	r3, r3, #2
 8012278:	4413      	add	r3, r2
 801227a:	009b      	lsls	r3, r3, #2
 801227c:	440b      	add	r3, r1
 801227e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012282:	2201      	movs	r2, #1
 8012284:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012286:	4b4b      	ldr	r3, [pc, #300]	@ (80123b4 <USBD_CDC_Init+0x1ec>)
 8012288:	781b      	ldrb	r3, [r3, #0]
 801228a:	f003 020f 	and.w	r2, r3, #15
 801228e:	6879      	ldr	r1, [r7, #4]
 8012290:	4613      	mov	r3, r2
 8012292:	009b      	lsls	r3, r3, #2
 8012294:	4413      	add	r3, r2
 8012296:	009b      	lsls	r3, r3, #2
 8012298:	440b      	add	r3, r1
 801229a:	3326      	adds	r3, #38	@ 0x26
 801229c:	2210      	movs	r2, #16
 801229e:	801a      	strh	r2, [r3, #0]
 80122a0:	e035      	b.n	801230e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80122a2:	4b42      	ldr	r3, [pc, #264]	@ (80123ac <USBD_CDC_Init+0x1e4>)
 80122a4:	7819      	ldrb	r1, [r3, #0]
 80122a6:	2340      	movs	r3, #64	@ 0x40
 80122a8:	2202      	movs	r2, #2
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f002 fb3d 	bl	801492a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80122b0:	4b3e      	ldr	r3, [pc, #248]	@ (80123ac <USBD_CDC_Init+0x1e4>)
 80122b2:	781b      	ldrb	r3, [r3, #0]
 80122b4:	f003 020f 	and.w	r2, r3, #15
 80122b8:	6879      	ldr	r1, [r7, #4]
 80122ba:	4613      	mov	r3, r2
 80122bc:	009b      	lsls	r3, r3, #2
 80122be:	4413      	add	r3, r2
 80122c0:	009b      	lsls	r3, r3, #2
 80122c2:	440b      	add	r3, r1
 80122c4:	3324      	adds	r3, #36	@ 0x24
 80122c6:	2201      	movs	r2, #1
 80122c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80122ca:	4b39      	ldr	r3, [pc, #228]	@ (80123b0 <USBD_CDC_Init+0x1e8>)
 80122cc:	7819      	ldrb	r1, [r3, #0]
 80122ce:	2340      	movs	r3, #64	@ 0x40
 80122d0:	2202      	movs	r2, #2
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f002 fb29 	bl	801492a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80122d8:	4b35      	ldr	r3, [pc, #212]	@ (80123b0 <USBD_CDC_Init+0x1e8>)
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	f003 020f 	and.w	r2, r3, #15
 80122e0:	6879      	ldr	r1, [r7, #4]
 80122e2:	4613      	mov	r3, r2
 80122e4:	009b      	lsls	r3, r3, #2
 80122e6:	4413      	add	r3, r2
 80122e8:	009b      	lsls	r3, r3, #2
 80122ea:	440b      	add	r3, r1
 80122ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80122f0:	2201      	movs	r2, #1
 80122f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80122f4:	4b2f      	ldr	r3, [pc, #188]	@ (80123b4 <USBD_CDC_Init+0x1ec>)
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	f003 020f 	and.w	r2, r3, #15
 80122fc:	6879      	ldr	r1, [r7, #4]
 80122fe:	4613      	mov	r3, r2
 8012300:	009b      	lsls	r3, r3, #2
 8012302:	4413      	add	r3, r2
 8012304:	009b      	lsls	r3, r3, #2
 8012306:	440b      	add	r3, r1
 8012308:	3326      	adds	r3, #38	@ 0x26
 801230a:	2210      	movs	r2, #16
 801230c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801230e:	4b29      	ldr	r3, [pc, #164]	@ (80123b4 <USBD_CDC_Init+0x1ec>)
 8012310:	7819      	ldrb	r1, [r3, #0]
 8012312:	2308      	movs	r3, #8
 8012314:	2203      	movs	r2, #3
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f002 fb07 	bl	801492a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801231c:	4b25      	ldr	r3, [pc, #148]	@ (80123b4 <USBD_CDC_Init+0x1ec>)
 801231e:	781b      	ldrb	r3, [r3, #0]
 8012320:	f003 020f 	and.w	r2, r3, #15
 8012324:	6879      	ldr	r1, [r7, #4]
 8012326:	4613      	mov	r3, r2
 8012328:	009b      	lsls	r3, r3, #2
 801232a:	4413      	add	r3, r2
 801232c:	009b      	lsls	r3, r3, #2
 801232e:	440b      	add	r3, r1
 8012330:	3324      	adds	r3, #36	@ 0x24
 8012332:	2201      	movs	r2, #1
 8012334:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2200      	movs	r2, #0
 801233a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012344:	687a      	ldr	r2, [r7, #4]
 8012346:	33b0      	adds	r3, #176	@ 0xb0
 8012348:	009b      	lsls	r3, r3, #2
 801234a:	4413      	add	r3, r2
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	2200      	movs	r2, #0
 8012356:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	2200      	movs	r2, #0
 801235e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8012368:	2b00      	cmp	r3, #0
 801236a:	d101      	bne.n	8012370 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801236c:	2302      	movs	r3, #2
 801236e:	e018      	b.n	80123a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	7c1b      	ldrb	r3, [r3, #16]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d10a      	bne.n	801238e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012378:	4b0d      	ldr	r3, [pc, #52]	@ (80123b0 <USBD_CDC_Init+0x1e8>)
 801237a:	7819      	ldrb	r1, [r3, #0]
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012382:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f002 fbbe 	bl	8014b08 <USBD_LL_PrepareReceive>
 801238c:	e008      	b.n	80123a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801238e:	4b08      	ldr	r3, [pc, #32]	@ (80123b0 <USBD_CDC_Init+0x1e8>)
 8012390:	7819      	ldrb	r1, [r3, #0]
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012398:	2340      	movs	r3, #64	@ 0x40
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f002 fbb4 	bl	8014b08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80123a0:	2300      	movs	r3, #0
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3710      	adds	r7, #16
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}
 80123aa:	bf00      	nop
 80123ac:	24000097 	.word	0x24000097
 80123b0:	24000098 	.word	0x24000098
 80123b4:	24000099 	.word	0x24000099

080123b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	460b      	mov	r3, r1
 80123c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80123c4:	4b3a      	ldr	r3, [pc, #232]	@ (80124b0 <USBD_CDC_DeInit+0xf8>)
 80123c6:	781b      	ldrb	r3, [r3, #0]
 80123c8:	4619      	mov	r1, r3
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f002 fad3 	bl	8014976 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80123d0:	4b37      	ldr	r3, [pc, #220]	@ (80124b0 <USBD_CDC_DeInit+0xf8>)
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	f003 020f 	and.w	r2, r3, #15
 80123d8:	6879      	ldr	r1, [r7, #4]
 80123da:	4613      	mov	r3, r2
 80123dc:	009b      	lsls	r3, r3, #2
 80123de:	4413      	add	r3, r2
 80123e0:	009b      	lsls	r3, r3, #2
 80123e2:	440b      	add	r3, r1
 80123e4:	3324      	adds	r3, #36	@ 0x24
 80123e6:	2200      	movs	r2, #0
 80123e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80123ea:	4b32      	ldr	r3, [pc, #200]	@ (80124b4 <USBD_CDC_DeInit+0xfc>)
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	4619      	mov	r1, r3
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f002 fac0 	bl	8014976 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80123f6:	4b2f      	ldr	r3, [pc, #188]	@ (80124b4 <USBD_CDC_DeInit+0xfc>)
 80123f8:	781b      	ldrb	r3, [r3, #0]
 80123fa:	f003 020f 	and.w	r2, r3, #15
 80123fe:	6879      	ldr	r1, [r7, #4]
 8012400:	4613      	mov	r3, r2
 8012402:	009b      	lsls	r3, r3, #2
 8012404:	4413      	add	r3, r2
 8012406:	009b      	lsls	r3, r3, #2
 8012408:	440b      	add	r3, r1
 801240a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801240e:	2200      	movs	r2, #0
 8012410:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012412:	4b29      	ldr	r3, [pc, #164]	@ (80124b8 <USBD_CDC_DeInit+0x100>)
 8012414:	781b      	ldrb	r3, [r3, #0]
 8012416:	4619      	mov	r1, r3
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f002 faac 	bl	8014976 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801241e:	4b26      	ldr	r3, [pc, #152]	@ (80124b8 <USBD_CDC_DeInit+0x100>)
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	f003 020f 	and.w	r2, r3, #15
 8012426:	6879      	ldr	r1, [r7, #4]
 8012428:	4613      	mov	r3, r2
 801242a:	009b      	lsls	r3, r3, #2
 801242c:	4413      	add	r3, r2
 801242e:	009b      	lsls	r3, r3, #2
 8012430:	440b      	add	r3, r1
 8012432:	3324      	adds	r3, #36	@ 0x24
 8012434:	2200      	movs	r2, #0
 8012436:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012438:	4b1f      	ldr	r3, [pc, #124]	@ (80124b8 <USBD_CDC_DeInit+0x100>)
 801243a:	781b      	ldrb	r3, [r3, #0]
 801243c:	f003 020f 	and.w	r2, r3, #15
 8012440:	6879      	ldr	r1, [r7, #4]
 8012442:	4613      	mov	r3, r2
 8012444:	009b      	lsls	r3, r3, #2
 8012446:	4413      	add	r3, r2
 8012448:	009b      	lsls	r3, r3, #2
 801244a:	440b      	add	r3, r1
 801244c:	3326      	adds	r3, #38	@ 0x26
 801244e:	2200      	movs	r2, #0
 8012450:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	32b0      	adds	r2, #176	@ 0xb0
 801245c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d01f      	beq.n	80124a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801246a:	687a      	ldr	r2, [r7, #4]
 801246c:	33b0      	adds	r3, #176	@ 0xb0
 801246e:	009b      	lsls	r3, r3, #2
 8012470:	4413      	add	r3, r2
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	685b      	ldr	r3, [r3, #4]
 8012476:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	32b0      	adds	r2, #176	@ 0xb0
 8012482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012486:	4618      	mov	r0, r3
 8012488:	f002 fb80 	bl	8014b8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	32b0      	adds	r2, #176	@ 0xb0
 8012496:	2100      	movs	r1, #0
 8012498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2200      	movs	r2, #0
 80124a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80124a4:	2300      	movs	r3, #0
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3708      	adds	r7, #8
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}
 80124ae:	bf00      	nop
 80124b0:	24000097 	.word	0x24000097
 80124b4:	24000098 	.word	0x24000098
 80124b8:	24000099 	.word	0x24000099

080124bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b086      	sub	sp, #24
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	32b0      	adds	r2, #176	@ 0xb0
 80124d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80124d6:	2300      	movs	r3, #0
 80124d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80124da:	2300      	movs	r3, #0
 80124dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80124de:	2300      	movs	r3, #0
 80124e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80124e2:	693b      	ldr	r3, [r7, #16]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d101      	bne.n	80124ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80124e8:	2303      	movs	r3, #3
 80124ea:	e0bf      	b.n	801266c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	781b      	ldrb	r3, [r3, #0]
 80124f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d050      	beq.n	801259a <USBD_CDC_Setup+0xde>
 80124f8:	2b20      	cmp	r3, #32
 80124fa:	f040 80af 	bne.w	801265c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	88db      	ldrh	r3, [r3, #6]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d03a      	beq.n	801257c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	b25b      	sxtb	r3, r3
 801250c:	2b00      	cmp	r3, #0
 801250e:	da1b      	bge.n	8012548 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012516:	687a      	ldr	r2, [r7, #4]
 8012518:	33b0      	adds	r3, #176	@ 0xb0
 801251a:	009b      	lsls	r3, r3, #2
 801251c:	4413      	add	r3, r2
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	689b      	ldr	r3, [r3, #8]
 8012522:	683a      	ldr	r2, [r7, #0]
 8012524:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012526:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012528:	683a      	ldr	r2, [r7, #0]
 801252a:	88d2      	ldrh	r2, [r2, #6]
 801252c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	88db      	ldrh	r3, [r3, #6]
 8012532:	2b07      	cmp	r3, #7
 8012534:	bf28      	it	cs
 8012536:	2307      	movcs	r3, #7
 8012538:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	89fa      	ldrh	r2, [r7, #14]
 801253e:	4619      	mov	r1, r3
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	f001 fdbd 	bl	80140c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012546:	e090      	b.n	801266a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	785a      	ldrb	r2, [r3, #1]
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	88db      	ldrh	r3, [r3, #6]
 8012556:	2b3f      	cmp	r3, #63	@ 0x3f
 8012558:	d803      	bhi.n	8012562 <USBD_CDC_Setup+0xa6>
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	88db      	ldrh	r3, [r3, #6]
 801255e:	b2da      	uxtb	r2, r3
 8012560:	e000      	b.n	8012564 <USBD_CDC_Setup+0xa8>
 8012562:	2240      	movs	r2, #64	@ 0x40
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801256a:	6939      	ldr	r1, [r7, #16]
 801256c:	693b      	ldr	r3, [r7, #16]
 801256e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8012572:	461a      	mov	r2, r3
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f001 fdcf 	bl	8014118 <USBD_CtlPrepareRx>
      break;
 801257a:	e076      	b.n	801266a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012582:	687a      	ldr	r2, [r7, #4]
 8012584:	33b0      	adds	r3, #176	@ 0xb0
 8012586:	009b      	lsls	r3, r3, #2
 8012588:	4413      	add	r3, r2
 801258a:	685b      	ldr	r3, [r3, #4]
 801258c:	689b      	ldr	r3, [r3, #8]
 801258e:	683a      	ldr	r2, [r7, #0]
 8012590:	7850      	ldrb	r0, [r2, #1]
 8012592:	2200      	movs	r2, #0
 8012594:	6839      	ldr	r1, [r7, #0]
 8012596:	4798      	blx	r3
      break;
 8012598:	e067      	b.n	801266a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	785b      	ldrb	r3, [r3, #1]
 801259e:	2b0b      	cmp	r3, #11
 80125a0:	d851      	bhi.n	8012646 <USBD_CDC_Setup+0x18a>
 80125a2:	a201      	add	r2, pc, #4	@ (adr r2, 80125a8 <USBD_CDC_Setup+0xec>)
 80125a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125a8:	080125d9 	.word	0x080125d9
 80125ac:	08012655 	.word	0x08012655
 80125b0:	08012647 	.word	0x08012647
 80125b4:	08012647 	.word	0x08012647
 80125b8:	08012647 	.word	0x08012647
 80125bc:	08012647 	.word	0x08012647
 80125c0:	08012647 	.word	0x08012647
 80125c4:	08012647 	.word	0x08012647
 80125c8:	08012647 	.word	0x08012647
 80125cc:	08012647 	.word	0x08012647
 80125d0:	08012603 	.word	0x08012603
 80125d4:	0801262d 	.word	0x0801262d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	2b03      	cmp	r3, #3
 80125e2:	d107      	bne.n	80125f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80125e4:	f107 030a 	add.w	r3, r7, #10
 80125e8:	2202      	movs	r2, #2
 80125ea:	4619      	mov	r1, r3
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f001 fd67 	bl	80140c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80125f2:	e032      	b.n	801265a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80125f4:	6839      	ldr	r1, [r7, #0]
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f001 fce5 	bl	8013fc6 <USBD_CtlError>
            ret = USBD_FAIL;
 80125fc:	2303      	movs	r3, #3
 80125fe:	75fb      	strb	r3, [r7, #23]
          break;
 8012600:	e02b      	b.n	801265a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012608:	b2db      	uxtb	r3, r3
 801260a:	2b03      	cmp	r3, #3
 801260c:	d107      	bne.n	801261e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801260e:	f107 030d 	add.w	r3, r7, #13
 8012612:	2201      	movs	r2, #1
 8012614:	4619      	mov	r1, r3
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f001 fd52 	bl	80140c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801261c:	e01d      	b.n	801265a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801261e:	6839      	ldr	r1, [r7, #0]
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f001 fcd0 	bl	8013fc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8012626:	2303      	movs	r3, #3
 8012628:	75fb      	strb	r3, [r7, #23]
          break;
 801262a:	e016      	b.n	801265a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012632:	b2db      	uxtb	r3, r3
 8012634:	2b03      	cmp	r3, #3
 8012636:	d00f      	beq.n	8012658 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012638:	6839      	ldr	r1, [r7, #0]
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f001 fcc3 	bl	8013fc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8012640:	2303      	movs	r3, #3
 8012642:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012644:	e008      	b.n	8012658 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012646:	6839      	ldr	r1, [r7, #0]
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f001 fcbc 	bl	8013fc6 <USBD_CtlError>
          ret = USBD_FAIL;
 801264e:	2303      	movs	r3, #3
 8012650:	75fb      	strb	r3, [r7, #23]
          break;
 8012652:	e002      	b.n	801265a <USBD_CDC_Setup+0x19e>
          break;
 8012654:	bf00      	nop
 8012656:	e008      	b.n	801266a <USBD_CDC_Setup+0x1ae>
          break;
 8012658:	bf00      	nop
      }
      break;
 801265a:	e006      	b.n	801266a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801265c:	6839      	ldr	r1, [r7, #0]
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f001 fcb1 	bl	8013fc6 <USBD_CtlError>
      ret = USBD_FAIL;
 8012664:	2303      	movs	r3, #3
 8012666:	75fb      	strb	r3, [r7, #23]
      break;
 8012668:	bf00      	nop
  }

  return (uint8_t)ret;
 801266a:	7dfb      	ldrb	r3, [r7, #23]
}
 801266c:	4618      	mov	r0, r3
 801266e:	3718      	adds	r7, #24
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}

08012674 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b084      	sub	sp, #16
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	460b      	mov	r3, r1
 801267e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012686:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	32b0      	adds	r2, #176	@ 0xb0
 8012692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d101      	bne.n	801269e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801269a:	2303      	movs	r3, #3
 801269c:	e065      	b.n	801276a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	32b0      	adds	r2, #176	@ 0xb0
 80126a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80126ae:	78fb      	ldrb	r3, [r7, #3]
 80126b0:	f003 020f 	and.w	r2, r3, #15
 80126b4:	6879      	ldr	r1, [r7, #4]
 80126b6:	4613      	mov	r3, r2
 80126b8:	009b      	lsls	r3, r3, #2
 80126ba:	4413      	add	r3, r2
 80126bc:	009b      	lsls	r3, r3, #2
 80126be:	440b      	add	r3, r1
 80126c0:	3318      	adds	r3, #24
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d02f      	beq.n	8012728 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80126c8:	78fb      	ldrb	r3, [r7, #3]
 80126ca:	f003 020f 	and.w	r2, r3, #15
 80126ce:	6879      	ldr	r1, [r7, #4]
 80126d0:	4613      	mov	r3, r2
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	4413      	add	r3, r2
 80126d6:	009b      	lsls	r3, r3, #2
 80126d8:	440b      	add	r3, r1
 80126da:	3318      	adds	r3, #24
 80126dc:	681a      	ldr	r2, [r3, #0]
 80126de:	78fb      	ldrb	r3, [r7, #3]
 80126e0:	f003 010f 	and.w	r1, r3, #15
 80126e4:	68f8      	ldr	r0, [r7, #12]
 80126e6:	460b      	mov	r3, r1
 80126e8:	00db      	lsls	r3, r3, #3
 80126ea:	440b      	add	r3, r1
 80126ec:	009b      	lsls	r3, r3, #2
 80126ee:	4403      	add	r3, r0
 80126f0:	331c      	adds	r3, #28
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80126f8:	fb01 f303 	mul.w	r3, r1, r3
 80126fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d112      	bne.n	8012728 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8012702:	78fb      	ldrb	r3, [r7, #3]
 8012704:	f003 020f 	and.w	r2, r3, #15
 8012708:	6879      	ldr	r1, [r7, #4]
 801270a:	4613      	mov	r3, r2
 801270c:	009b      	lsls	r3, r3, #2
 801270e:	4413      	add	r3, r2
 8012710:	009b      	lsls	r3, r3, #2
 8012712:	440b      	add	r3, r1
 8012714:	3318      	adds	r3, #24
 8012716:	2200      	movs	r2, #0
 8012718:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801271a:	78f9      	ldrb	r1, [r7, #3]
 801271c:	2300      	movs	r3, #0
 801271e:	2200      	movs	r2, #0
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f002 f9d0 	bl	8014ac6 <USBD_LL_Transmit>
 8012726:	e01f      	b.n	8012768 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	2200      	movs	r2, #0
 801272c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	33b0      	adds	r3, #176	@ 0xb0
 801273a:	009b      	lsls	r3, r3, #2
 801273c:	4413      	add	r3, r2
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	691b      	ldr	r3, [r3, #16]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d010      	beq.n	8012768 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801274c:	687a      	ldr	r2, [r7, #4]
 801274e:	33b0      	adds	r3, #176	@ 0xb0
 8012750:	009b      	lsls	r3, r3, #2
 8012752:	4413      	add	r3, r2
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	691b      	ldr	r3, [r3, #16]
 8012758:	68ba      	ldr	r2, [r7, #8]
 801275a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801275e:	68ba      	ldr	r2, [r7, #8]
 8012760:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8012764:	78fa      	ldrb	r2, [r7, #3]
 8012766:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012768:	2300      	movs	r3, #0
}
 801276a:	4618      	mov	r0, r3
 801276c:	3710      	adds	r7, #16
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}

08012772 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012772:	b580      	push	{r7, lr}
 8012774:	b084      	sub	sp, #16
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
 801277a:	460b      	mov	r3, r1
 801277c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	32b0      	adds	r2, #176	@ 0xb0
 8012788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801278c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	32b0      	adds	r2, #176	@ 0xb0
 8012798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d101      	bne.n	80127a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80127a0:	2303      	movs	r3, #3
 80127a2:	e01a      	b.n	80127da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80127a4:	78fb      	ldrb	r3, [r7, #3]
 80127a6:	4619      	mov	r1, r3
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f002 f9ce 	bl	8014b4a <USBD_LL_GetRxDataSize>
 80127ae:	4602      	mov	r2, r0
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80127bc:	687a      	ldr	r2, [r7, #4]
 80127be:	33b0      	adds	r3, #176	@ 0xb0
 80127c0:	009b      	lsls	r3, r3, #2
 80127c2:	4413      	add	r3, r2
 80127c4:	685b      	ldr	r3, [r3, #4]
 80127c6:	68db      	ldr	r3, [r3, #12]
 80127c8:	68fa      	ldr	r2, [r7, #12]
 80127ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80127ce:	68fa      	ldr	r2, [r7, #12]
 80127d0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80127d4:	4611      	mov	r1, r2
 80127d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80127d8:	2300      	movs	r3, #0
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3710      	adds	r7, #16
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}

080127e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80127e2:	b580      	push	{r7, lr}
 80127e4:	b084      	sub	sp, #16
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	32b0      	adds	r2, #176	@ 0xb0
 80127f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d101      	bne.n	8012804 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012800:	2303      	movs	r3, #3
 8012802:	e024      	b.n	801284e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801280a:	687a      	ldr	r2, [r7, #4]
 801280c:	33b0      	adds	r3, #176	@ 0xb0
 801280e:	009b      	lsls	r3, r3, #2
 8012810:	4413      	add	r3, r2
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d019      	beq.n	801284c <USBD_CDC_EP0_RxReady+0x6a>
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801281e:	2bff      	cmp	r3, #255	@ 0xff
 8012820:	d014      	beq.n	801284c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012828:	687a      	ldr	r2, [r7, #4]
 801282a:	33b0      	adds	r3, #176	@ 0xb0
 801282c:	009b      	lsls	r3, r3, #2
 801282e:	4413      	add	r3, r2
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	689b      	ldr	r3, [r3, #8]
 8012834:	68fa      	ldr	r2, [r7, #12]
 8012836:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801283a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801283c:	68fa      	ldr	r2, [r7, #12]
 801283e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012842:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	22ff      	movs	r2, #255	@ 0xff
 8012848:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801284c:	2300      	movs	r3, #0
}
 801284e:	4618      	mov	r0, r3
 8012850:	3710      	adds	r7, #16
 8012852:	46bd      	mov	sp, r7
 8012854:	bd80      	pop	{r7, pc}
	...

08012858 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b086      	sub	sp, #24
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012860:	2182      	movs	r1, #130	@ 0x82
 8012862:	4818      	ldr	r0, [pc, #96]	@ (80128c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012864:	f000 fd4f 	bl	8013306 <USBD_GetEpDesc>
 8012868:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801286a:	2101      	movs	r1, #1
 801286c:	4815      	ldr	r0, [pc, #84]	@ (80128c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801286e:	f000 fd4a 	bl	8013306 <USBD_GetEpDesc>
 8012872:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012874:	2181      	movs	r1, #129	@ 0x81
 8012876:	4813      	ldr	r0, [pc, #76]	@ (80128c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012878:	f000 fd45 	bl	8013306 <USBD_GetEpDesc>
 801287c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d002      	beq.n	801288a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012884:	697b      	ldr	r3, [r7, #20]
 8012886:	2210      	movs	r2, #16
 8012888:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801288a:	693b      	ldr	r3, [r7, #16]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d006      	beq.n	801289e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	2200      	movs	r2, #0
 8012894:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012898:	711a      	strb	r2, [r3, #4]
 801289a:	2200      	movs	r2, #0
 801289c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d006      	beq.n	80128b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	2200      	movs	r2, #0
 80128a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80128ac:	711a      	strb	r2, [r3, #4]
 80128ae:	2200      	movs	r2, #0
 80128b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2243      	movs	r2, #67	@ 0x43
 80128b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80128b8:	4b02      	ldr	r3, [pc, #8]	@ (80128c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3718      	adds	r7, #24
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}
 80128c2:	bf00      	nop
 80128c4:	24000054 	.word	0x24000054

080128c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b086      	sub	sp, #24
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80128d0:	2182      	movs	r1, #130	@ 0x82
 80128d2:	4818      	ldr	r0, [pc, #96]	@ (8012934 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80128d4:	f000 fd17 	bl	8013306 <USBD_GetEpDesc>
 80128d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80128da:	2101      	movs	r1, #1
 80128dc:	4815      	ldr	r0, [pc, #84]	@ (8012934 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80128de:	f000 fd12 	bl	8013306 <USBD_GetEpDesc>
 80128e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80128e4:	2181      	movs	r1, #129	@ 0x81
 80128e6:	4813      	ldr	r0, [pc, #76]	@ (8012934 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80128e8:	f000 fd0d 	bl	8013306 <USBD_GetEpDesc>
 80128ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80128ee:	697b      	ldr	r3, [r7, #20]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d002      	beq.n	80128fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	2210      	movs	r2, #16
 80128f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80128fa:	693b      	ldr	r3, [r7, #16]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d006      	beq.n	801290e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012900:	693b      	ldr	r3, [r7, #16]
 8012902:	2200      	movs	r2, #0
 8012904:	711a      	strb	r2, [r3, #4]
 8012906:	2200      	movs	r2, #0
 8012908:	f042 0202 	orr.w	r2, r2, #2
 801290c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d006      	beq.n	8012922 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	2200      	movs	r2, #0
 8012918:	711a      	strb	r2, [r3, #4]
 801291a:	2200      	movs	r2, #0
 801291c:	f042 0202 	orr.w	r2, r2, #2
 8012920:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2243      	movs	r2, #67	@ 0x43
 8012926:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012928:	4b02      	ldr	r3, [pc, #8]	@ (8012934 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801292a:	4618      	mov	r0, r3
 801292c:	3718      	adds	r7, #24
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
 8012932:	bf00      	nop
 8012934:	24000054 	.word	0x24000054

08012938 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b086      	sub	sp, #24
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012940:	2182      	movs	r1, #130	@ 0x82
 8012942:	4818      	ldr	r0, [pc, #96]	@ (80129a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012944:	f000 fcdf 	bl	8013306 <USBD_GetEpDesc>
 8012948:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801294a:	2101      	movs	r1, #1
 801294c:	4815      	ldr	r0, [pc, #84]	@ (80129a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801294e:	f000 fcda 	bl	8013306 <USBD_GetEpDesc>
 8012952:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012954:	2181      	movs	r1, #129	@ 0x81
 8012956:	4813      	ldr	r0, [pc, #76]	@ (80129a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012958:	f000 fcd5 	bl	8013306 <USBD_GetEpDesc>
 801295c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d002      	beq.n	801296a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012964:	697b      	ldr	r3, [r7, #20]
 8012966:	2210      	movs	r2, #16
 8012968:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d006      	beq.n	801297e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	2200      	movs	r2, #0
 8012974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012978:	711a      	strb	r2, [r3, #4]
 801297a:	2200      	movs	r2, #0
 801297c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d006      	beq.n	8012992 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	2200      	movs	r2, #0
 8012988:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801298c:	711a      	strb	r2, [r3, #4]
 801298e:	2200      	movs	r2, #0
 8012990:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	2243      	movs	r2, #67	@ 0x43
 8012996:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012998:	4b02      	ldr	r3, [pc, #8]	@ (80129a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801299a:	4618      	mov	r0, r3
 801299c:	3718      	adds	r7, #24
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}
 80129a2:	bf00      	nop
 80129a4:	24000054 	.word	0x24000054

080129a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80129a8:	b480      	push	{r7}
 80129aa:	b083      	sub	sp, #12
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	220a      	movs	r2, #10
 80129b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80129b6:	4b03      	ldr	r3, [pc, #12]	@ (80129c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	370c      	adds	r7, #12
 80129bc:	46bd      	mov	sp, r7
 80129be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c2:	4770      	bx	lr
 80129c4:	24000010 	.word	0x24000010

080129c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80129c8:	b480      	push	{r7}
 80129ca:	b083      	sub	sp, #12
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d101      	bne.n	80129dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80129d8:	2303      	movs	r3, #3
 80129da:	e009      	b.n	80129f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80129e2:	687a      	ldr	r2, [r7, #4]
 80129e4:	33b0      	adds	r3, #176	@ 0xb0
 80129e6:	009b      	lsls	r3, r3, #2
 80129e8:	4413      	add	r3, r2
 80129ea:	683a      	ldr	r2, [r7, #0]
 80129ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80129ee:	2300      	movs	r3, #0
}
 80129f0:	4618      	mov	r0, r3
 80129f2:	370c      	adds	r7, #12
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr

080129fc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80129fc:	b480      	push	{r7}
 80129fe:	b087      	sub	sp, #28
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	60f8      	str	r0, [r7, #12]
 8012a04:	60b9      	str	r1, [r7, #8]
 8012a06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	32b0      	adds	r2, #176	@ 0xb0
 8012a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a16:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d101      	bne.n	8012a22 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012a1e:	2303      	movs	r3, #3
 8012a20:	e008      	b.n	8012a34 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	68ba      	ldr	r2, [r7, #8]
 8012a26:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8012a32:	2300      	movs	r3, #0
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	371c      	adds	r7, #28
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3e:	4770      	bx	lr

08012a40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012a40:	b480      	push	{r7}
 8012a42:	b085      	sub	sp, #20
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	32b0      	adds	r2, #176	@ 0xb0
 8012a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d101      	bne.n	8012a64 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012a60:	2303      	movs	r3, #3
 8012a62:	e004      	b.n	8012a6e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	683a      	ldr	r2, [r7, #0]
 8012a68:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8012a6c:	2300      	movs	r3, #0
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3714      	adds	r7, #20
 8012a72:	46bd      	mov	sp, r7
 8012a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a78:	4770      	bx	lr
	...

08012a7c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b084      	sub	sp, #16
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	32b0      	adds	r2, #176	@ 0xb0
 8012a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a92:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8012a94:	2301      	movs	r3, #1
 8012a96:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012a98:	68bb      	ldr	r3, [r7, #8]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d101      	bne.n	8012aa2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012a9e:	2303      	movs	r3, #3
 8012aa0:	e025      	b.n	8012aee <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d11f      	bne.n	8012aec <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	2201      	movs	r2, #1
 8012ab0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8012ab4:	4b10      	ldr	r3, [pc, #64]	@ (8012af8 <USBD_CDC_TransmitPacket+0x7c>)
 8012ab6:	781b      	ldrb	r3, [r3, #0]
 8012ab8:	f003 020f 	and.w	r2, r3, #15
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	4613      	mov	r3, r2
 8012ac6:	009b      	lsls	r3, r3, #2
 8012ac8:	4413      	add	r3, r2
 8012aca:	009b      	lsls	r3, r3, #2
 8012acc:	4403      	add	r3, r0
 8012ace:	3318      	adds	r3, #24
 8012ad0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8012ad2:	4b09      	ldr	r3, [pc, #36]	@ (8012af8 <USBD_CDC_TransmitPacket+0x7c>)
 8012ad4:	7819      	ldrb	r1, [r3, #0]
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f001 ffef 	bl	8014ac6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8012aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3710      	adds	r7, #16
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
 8012af6:	bf00      	nop
 8012af8:	24000097 	.word	0x24000097

08012afc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b084      	sub	sp, #16
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	32b0      	adds	r2, #176	@ 0xb0
 8012b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b12:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	32b0      	adds	r2, #176	@ 0xb0
 8012b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d101      	bne.n	8012b2a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8012b26:	2303      	movs	r3, #3
 8012b28:	e018      	b.n	8012b5c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	7c1b      	ldrb	r3, [r3, #16]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d10a      	bne.n	8012b48 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012b32:	4b0c      	ldr	r3, [pc, #48]	@ (8012b64 <USBD_CDC_ReceivePacket+0x68>)
 8012b34:	7819      	ldrb	r1, [r3, #0]
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012b3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f001 ffe1 	bl	8014b08 <USBD_LL_PrepareReceive>
 8012b46:	e008      	b.n	8012b5a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012b48:	4b06      	ldr	r3, [pc, #24]	@ (8012b64 <USBD_CDC_ReceivePacket+0x68>)
 8012b4a:	7819      	ldrb	r1, [r3, #0]
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012b52:	2340      	movs	r3, #64	@ 0x40
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f001 ffd7 	bl	8014b08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012b5a:	2300      	movs	r3, #0
}
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	3710      	adds	r7, #16
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}
 8012b64:	24000098 	.word	0x24000098

08012b68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b086      	sub	sp, #24
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	60b9      	str	r1, [r7, #8]
 8012b72:	4613      	mov	r3, r2
 8012b74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d101      	bne.n	8012b80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012b7c:	2303      	movs	r3, #3
 8012b7e:	e01f      	b.n	8012bc0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2200      	movs	r2, #0
 8012b84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	2200      	movs	r2, #0
 8012b94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d003      	beq.n	8012ba6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	68ba      	ldr	r2, [r7, #8]
 8012ba2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	2201      	movs	r2, #1
 8012baa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	79fa      	ldrb	r2, [r7, #7]
 8012bb2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012bb4:	68f8      	ldr	r0, [r7, #12]
 8012bb6:	f001 fe4b 	bl	8014850 <USBD_LL_Init>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3718      	adds	r7, #24
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}

08012bc8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b084      	sub	sp, #16
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d101      	bne.n	8012be0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012bdc:	2303      	movs	r3, #3
 8012bde:	e025      	b.n	8012c2c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	683a      	ldr	r2, [r7, #0]
 8012be4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	32ae      	adds	r2, #174	@ 0xae
 8012bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d00f      	beq.n	8012c1c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	32ae      	adds	r2, #174	@ 0xae
 8012c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c0c:	f107 020e 	add.w	r2, r7, #14
 8012c10:	4610      	mov	r0, r2
 8012c12:	4798      	blx	r3
 8012c14:	4602      	mov	r2, r0
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012c22:	1c5a      	adds	r2, r3, #1
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8012c2a:	2300      	movs	r3, #0
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3710      	adds	r7, #16
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}

08012c34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b082      	sub	sp, #8
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f001 fe59 	bl	80148f4 <USBD_LL_Start>
 8012c42:	4603      	mov	r3, r0
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	3708      	adds	r7, #8
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}

08012c4c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b083      	sub	sp, #12
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012c54:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	370c      	adds	r7, #12
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c60:	4770      	bx	lr

08012c62 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c62:	b580      	push	{r7, lr}
 8012c64:	b084      	sub	sp, #16
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	6078      	str	r0, [r7, #4]
 8012c6a:	460b      	mov	r3, r1
 8012c6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d009      	beq.n	8012c90 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	78fa      	ldrb	r2, [r7, #3]
 8012c86:	4611      	mov	r1, r2
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	4798      	blx	r3
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3710      	adds	r7, #16
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}

08012c9a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c9a:	b580      	push	{r7, lr}
 8012c9c:	b084      	sub	sp, #16
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	6078      	str	r0, [r7, #4]
 8012ca2:	460b      	mov	r3, r1
 8012ca4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	78fa      	ldrb	r2, [r7, #3]
 8012cb4:	4611      	mov	r1, r2
 8012cb6:	6878      	ldr	r0, [r7, #4]
 8012cb8:	4798      	blx	r3
 8012cba:	4603      	mov	r3, r0
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d001      	beq.n	8012cc4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012cc0:	2303      	movs	r3, #3
 8012cc2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3710      	adds	r7, #16
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}

08012cce <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012cce:	b580      	push	{r7, lr}
 8012cd0:	b084      	sub	sp, #16
 8012cd2:	af00      	add	r7, sp, #0
 8012cd4:	6078      	str	r0, [r7, #4]
 8012cd6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012cde:	6839      	ldr	r1, [r7, #0]
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f001 f936 	bl	8013f52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	2201      	movs	r2, #1
 8012cea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012d02:	f003 031f 	and.w	r3, r3, #31
 8012d06:	2b02      	cmp	r3, #2
 8012d08:	d01a      	beq.n	8012d40 <USBD_LL_SetupStage+0x72>
 8012d0a:	2b02      	cmp	r3, #2
 8012d0c:	d822      	bhi.n	8012d54 <USBD_LL_SetupStage+0x86>
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d002      	beq.n	8012d18 <USBD_LL_SetupStage+0x4a>
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d00a      	beq.n	8012d2c <USBD_LL_SetupStage+0x5e>
 8012d16:	e01d      	b.n	8012d54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012d1e:	4619      	mov	r1, r3
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f000 fb63 	bl	80133ec <USBD_StdDevReq>
 8012d26:	4603      	mov	r3, r0
 8012d28:	73fb      	strb	r3, [r7, #15]
      break;
 8012d2a:	e020      	b.n	8012d6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012d32:	4619      	mov	r1, r3
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f000 fbcb 	bl	80134d0 <USBD_StdItfReq>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8012d3e:	e016      	b.n	8012d6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012d46:	4619      	mov	r1, r3
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f000 fc2d 	bl	80135a8 <USBD_StdEPReq>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	73fb      	strb	r3, [r7, #15]
      break;
 8012d52:	e00c      	b.n	8012d6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012d5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012d5e:	b2db      	uxtb	r3, r3
 8012d60:	4619      	mov	r1, r3
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	f001 fe26 	bl	80149b4 <USBD_LL_StallEP>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8012d6c:	bf00      	nop
  }

  return ret;
 8012d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3710      	adds	r7, #16
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}

08012d78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b086      	sub	sp, #24
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	60f8      	str	r0, [r7, #12]
 8012d80:	460b      	mov	r3, r1
 8012d82:	607a      	str	r2, [r7, #4]
 8012d84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012d86:	2300      	movs	r3, #0
 8012d88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012d8a:	7afb      	ldrb	r3, [r7, #11]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d16e      	bne.n	8012e6e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012d96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012d9e:	2b03      	cmp	r3, #3
 8012da0:	f040 8098 	bne.w	8012ed4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012da4:	693b      	ldr	r3, [r7, #16]
 8012da6:	689a      	ldr	r2, [r3, #8]
 8012da8:	693b      	ldr	r3, [r7, #16]
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d913      	bls.n	8012dd8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012db0:	693b      	ldr	r3, [r7, #16]
 8012db2:	689a      	ldr	r2, [r3, #8]
 8012db4:	693b      	ldr	r3, [r7, #16]
 8012db6:	68db      	ldr	r3, [r3, #12]
 8012db8:	1ad2      	subs	r2, r2, r3
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	68da      	ldr	r2, [r3, #12]
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	689b      	ldr	r3, [r3, #8]
 8012dc6:	4293      	cmp	r3, r2
 8012dc8:	bf28      	it	cs
 8012dca:	4613      	movcs	r3, r2
 8012dcc:	461a      	mov	r2, r3
 8012dce:	6879      	ldr	r1, [r7, #4]
 8012dd0:	68f8      	ldr	r0, [r7, #12]
 8012dd2:	f001 f9be 	bl	8014152 <USBD_CtlContinueRx>
 8012dd6:	e07d      	b.n	8012ed4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012dde:	f003 031f 	and.w	r3, r3, #31
 8012de2:	2b02      	cmp	r3, #2
 8012de4:	d014      	beq.n	8012e10 <USBD_LL_DataOutStage+0x98>
 8012de6:	2b02      	cmp	r3, #2
 8012de8:	d81d      	bhi.n	8012e26 <USBD_LL_DataOutStage+0xae>
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d002      	beq.n	8012df4 <USBD_LL_DataOutStage+0x7c>
 8012dee:	2b01      	cmp	r3, #1
 8012df0:	d003      	beq.n	8012dfa <USBD_LL_DataOutStage+0x82>
 8012df2:	e018      	b.n	8012e26 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012df4:	2300      	movs	r3, #0
 8012df6:	75bb      	strb	r3, [r7, #22]
            break;
 8012df8:	e018      	b.n	8012e2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012e00:	b2db      	uxtb	r3, r3
 8012e02:	4619      	mov	r1, r3
 8012e04:	68f8      	ldr	r0, [r7, #12]
 8012e06:	f000 fa64 	bl	80132d2 <USBD_CoreFindIF>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	75bb      	strb	r3, [r7, #22]
            break;
 8012e0e:	e00d      	b.n	8012e2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012e16:	b2db      	uxtb	r3, r3
 8012e18:	4619      	mov	r1, r3
 8012e1a:	68f8      	ldr	r0, [r7, #12]
 8012e1c:	f000 fa66 	bl	80132ec <USBD_CoreFindEP>
 8012e20:	4603      	mov	r3, r0
 8012e22:	75bb      	strb	r3, [r7, #22]
            break;
 8012e24:	e002      	b.n	8012e2c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012e26:	2300      	movs	r3, #0
 8012e28:	75bb      	strb	r3, [r7, #22]
            break;
 8012e2a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012e2c:	7dbb      	ldrb	r3, [r7, #22]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d119      	bne.n	8012e66 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e38:	b2db      	uxtb	r3, r3
 8012e3a:	2b03      	cmp	r3, #3
 8012e3c:	d113      	bne.n	8012e66 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012e3e:	7dba      	ldrb	r2, [r7, #22]
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	32ae      	adds	r2, #174	@ 0xae
 8012e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e48:	691b      	ldr	r3, [r3, #16]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d00b      	beq.n	8012e66 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012e4e:	7dba      	ldrb	r2, [r7, #22]
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012e56:	7dba      	ldrb	r2, [r7, #22]
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	32ae      	adds	r2, #174	@ 0xae
 8012e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e60:	691b      	ldr	r3, [r3, #16]
 8012e62:	68f8      	ldr	r0, [r7, #12]
 8012e64:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012e66:	68f8      	ldr	r0, [r7, #12]
 8012e68:	f001 f984 	bl	8014174 <USBD_CtlSendStatus>
 8012e6c:	e032      	b.n	8012ed4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012e6e:	7afb      	ldrb	r3, [r7, #11]
 8012e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012e74:	b2db      	uxtb	r3, r3
 8012e76:	4619      	mov	r1, r3
 8012e78:	68f8      	ldr	r0, [r7, #12]
 8012e7a:	f000 fa37 	bl	80132ec <USBD_CoreFindEP>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012e82:	7dbb      	ldrb	r3, [r7, #22]
 8012e84:	2bff      	cmp	r3, #255	@ 0xff
 8012e86:	d025      	beq.n	8012ed4 <USBD_LL_DataOutStage+0x15c>
 8012e88:	7dbb      	ldrb	r3, [r7, #22]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d122      	bne.n	8012ed4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e94:	b2db      	uxtb	r3, r3
 8012e96:	2b03      	cmp	r3, #3
 8012e98:	d117      	bne.n	8012eca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012e9a:	7dba      	ldrb	r2, [r7, #22]
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	32ae      	adds	r2, #174	@ 0xae
 8012ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ea4:	699b      	ldr	r3, [r3, #24]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d00f      	beq.n	8012eca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012eaa:	7dba      	ldrb	r2, [r7, #22]
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012eb2:	7dba      	ldrb	r2, [r7, #22]
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	32ae      	adds	r2, #174	@ 0xae
 8012eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ebc:	699b      	ldr	r3, [r3, #24]
 8012ebe:	7afa      	ldrb	r2, [r7, #11]
 8012ec0:	4611      	mov	r1, r2
 8012ec2:	68f8      	ldr	r0, [r7, #12]
 8012ec4:	4798      	blx	r3
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012eca:	7dfb      	ldrb	r3, [r7, #23]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d001      	beq.n	8012ed4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012ed0:	7dfb      	ldrb	r3, [r7, #23]
 8012ed2:	e000      	b.n	8012ed6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012ed4:	2300      	movs	r3, #0
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3718      	adds	r7, #24
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}

08012ede <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012ede:	b580      	push	{r7, lr}
 8012ee0:	b086      	sub	sp, #24
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	60f8      	str	r0, [r7, #12]
 8012ee6:	460b      	mov	r3, r1
 8012ee8:	607a      	str	r2, [r7, #4]
 8012eea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012eec:	7afb      	ldrb	r3, [r7, #11]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d16f      	bne.n	8012fd2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	3314      	adds	r3, #20
 8012ef6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012efe:	2b02      	cmp	r3, #2
 8012f00:	d15a      	bne.n	8012fb8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	689a      	ldr	r2, [r3, #8]
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	68db      	ldr	r3, [r3, #12]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d914      	bls.n	8012f38 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012f0e:	693b      	ldr	r3, [r7, #16]
 8012f10:	689a      	ldr	r2, [r3, #8]
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	68db      	ldr	r3, [r3, #12]
 8012f16:	1ad2      	subs	r2, r2, r3
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	689b      	ldr	r3, [r3, #8]
 8012f20:	461a      	mov	r2, r3
 8012f22:	6879      	ldr	r1, [r7, #4]
 8012f24:	68f8      	ldr	r0, [r7, #12]
 8012f26:	f001 f8e6 	bl	80140f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	2100      	movs	r1, #0
 8012f30:	68f8      	ldr	r0, [r7, #12]
 8012f32:	f001 fde9 	bl	8014b08 <USBD_LL_PrepareReceive>
 8012f36:	e03f      	b.n	8012fb8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	68da      	ldr	r2, [r3, #12]
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	689b      	ldr	r3, [r3, #8]
 8012f40:	429a      	cmp	r2, r3
 8012f42:	d11c      	bne.n	8012f7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	685a      	ldr	r2, [r3, #4]
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012f4c:	429a      	cmp	r2, r3
 8012f4e:	d316      	bcc.n	8012f7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012f50:	693b      	ldr	r3, [r7, #16]
 8012f52:	685a      	ldr	r2, [r3, #4]
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d20f      	bcs.n	8012f7e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012f5e:	2200      	movs	r2, #0
 8012f60:	2100      	movs	r1, #0
 8012f62:	68f8      	ldr	r0, [r7, #12]
 8012f64:	f001 f8c7 	bl	80140f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012f70:	2300      	movs	r3, #0
 8012f72:	2200      	movs	r2, #0
 8012f74:	2100      	movs	r1, #0
 8012f76:	68f8      	ldr	r0, [r7, #12]
 8012f78:	f001 fdc6 	bl	8014b08 <USBD_LL_PrepareReceive>
 8012f7c:	e01c      	b.n	8012fb8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f84:	b2db      	uxtb	r3, r3
 8012f86:	2b03      	cmp	r3, #3
 8012f88:	d10f      	bne.n	8012faa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f90:	68db      	ldr	r3, [r3, #12]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d009      	beq.n	8012faa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	2200      	movs	r2, #0
 8012f9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012fa4:	68db      	ldr	r3, [r3, #12]
 8012fa6:	68f8      	ldr	r0, [r7, #12]
 8012fa8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012faa:	2180      	movs	r1, #128	@ 0x80
 8012fac:	68f8      	ldr	r0, [r7, #12]
 8012fae:	f001 fd01 	bl	80149b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012fb2:	68f8      	ldr	r0, [r7, #12]
 8012fb4:	f001 f8f1 	bl	801419a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d03a      	beq.n	8013038 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012fc2:	68f8      	ldr	r0, [r7, #12]
 8012fc4:	f7ff fe42 	bl	8012c4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012fd0:	e032      	b.n	8013038 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012fd2:	7afb      	ldrb	r3, [r7, #11]
 8012fd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012fd8:	b2db      	uxtb	r3, r3
 8012fda:	4619      	mov	r1, r3
 8012fdc:	68f8      	ldr	r0, [r7, #12]
 8012fde:	f000 f985 	bl	80132ec <USBD_CoreFindEP>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012fe6:	7dfb      	ldrb	r3, [r7, #23]
 8012fe8:	2bff      	cmp	r3, #255	@ 0xff
 8012fea:	d025      	beq.n	8013038 <USBD_LL_DataInStage+0x15a>
 8012fec:	7dfb      	ldrb	r3, [r7, #23]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d122      	bne.n	8013038 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ff8:	b2db      	uxtb	r3, r3
 8012ffa:	2b03      	cmp	r3, #3
 8012ffc:	d11c      	bne.n	8013038 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8012ffe:	7dfa      	ldrb	r2, [r7, #23]
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	32ae      	adds	r2, #174	@ 0xae
 8013004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013008:	695b      	ldr	r3, [r3, #20]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d014      	beq.n	8013038 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801300e:	7dfa      	ldrb	r2, [r7, #23]
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013016:	7dfa      	ldrb	r2, [r7, #23]
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	32ae      	adds	r2, #174	@ 0xae
 801301c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013020:	695b      	ldr	r3, [r3, #20]
 8013022:	7afa      	ldrb	r2, [r7, #11]
 8013024:	4611      	mov	r1, r2
 8013026:	68f8      	ldr	r0, [r7, #12]
 8013028:	4798      	blx	r3
 801302a:	4603      	mov	r3, r0
 801302c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801302e:	7dbb      	ldrb	r3, [r7, #22]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d001      	beq.n	8013038 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013034:	7dbb      	ldrb	r3, [r7, #22]
 8013036:	e000      	b.n	801303a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013038:	2300      	movs	r3, #0
}
 801303a:	4618      	mov	r0, r3
 801303c:	3718      	adds	r7, #24
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}

08013042 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013042:	b580      	push	{r7, lr}
 8013044:	b084      	sub	sp, #16
 8013046:	af00      	add	r7, sp, #0
 8013048:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801304a:	2300      	movs	r3, #0
 801304c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	2201      	movs	r2, #1
 8013052:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	2200      	movs	r2, #0
 801305a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2200      	movs	r2, #0
 8013062:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2200      	movs	r2, #0
 8013068:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2200      	movs	r2, #0
 8013070:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801307a:	2b00      	cmp	r3, #0
 801307c:	d014      	beq.n	80130a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013084:	685b      	ldr	r3, [r3, #4]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d00e      	beq.n	80130a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013090:	685b      	ldr	r3, [r3, #4]
 8013092:	687a      	ldr	r2, [r7, #4]
 8013094:	6852      	ldr	r2, [r2, #4]
 8013096:	b2d2      	uxtb	r2, r2
 8013098:	4611      	mov	r1, r2
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	4798      	blx	r3
 801309e:	4603      	mov	r3, r0
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d001      	beq.n	80130a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80130a4:	2303      	movs	r3, #3
 80130a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80130a8:	2340      	movs	r3, #64	@ 0x40
 80130aa:	2200      	movs	r2, #0
 80130ac:	2100      	movs	r1, #0
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f001 fc3b 	bl	801492a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2201      	movs	r2, #1
 80130b8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2240      	movs	r2, #64	@ 0x40
 80130c0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80130c4:	2340      	movs	r3, #64	@ 0x40
 80130c6:	2200      	movs	r2, #0
 80130c8:	2180      	movs	r1, #128	@ 0x80
 80130ca:	6878      	ldr	r0, [r7, #4]
 80130cc:	f001 fc2d 	bl	801492a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2201      	movs	r2, #1
 80130d4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	2240      	movs	r2, #64	@ 0x40
 80130da:	621a      	str	r2, [r3, #32]

  return ret;
 80130dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3710      	adds	r7, #16
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}

080130e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80130e6:	b480      	push	{r7}
 80130e8:	b083      	sub	sp, #12
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	6078      	str	r0, [r7, #4]
 80130ee:	460b      	mov	r3, r1
 80130f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	78fa      	ldrb	r2, [r7, #3]
 80130f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80130f8:	2300      	movs	r3, #0
}
 80130fa:	4618      	mov	r0, r3
 80130fc:	370c      	adds	r7, #12
 80130fe:	46bd      	mov	sp, r7
 8013100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013104:	4770      	bx	lr

08013106 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013106:	b480      	push	{r7}
 8013108:	b083      	sub	sp, #12
 801310a:	af00      	add	r7, sp, #0
 801310c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013114:	b2db      	uxtb	r3, r3
 8013116:	2b04      	cmp	r3, #4
 8013118:	d006      	beq.n	8013128 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013120:	b2da      	uxtb	r2, r3
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2204      	movs	r2, #4
 801312c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013130:	2300      	movs	r3, #0
}
 8013132:	4618      	mov	r0, r3
 8013134:	370c      	adds	r7, #12
 8013136:	46bd      	mov	sp, r7
 8013138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313c:	4770      	bx	lr

0801313e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801313e:	b480      	push	{r7}
 8013140:	b083      	sub	sp, #12
 8013142:	af00      	add	r7, sp, #0
 8013144:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801314c:	b2db      	uxtb	r3, r3
 801314e:	2b04      	cmp	r3, #4
 8013150:	d106      	bne.n	8013160 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013158:	b2da      	uxtb	r2, r3
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013160:	2300      	movs	r3, #0
}
 8013162:	4618      	mov	r0, r3
 8013164:	370c      	adds	r7, #12
 8013166:	46bd      	mov	sp, r7
 8013168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316c:	4770      	bx	lr

0801316e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801316e:	b580      	push	{r7, lr}
 8013170:	b082      	sub	sp, #8
 8013172:	af00      	add	r7, sp, #0
 8013174:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801317c:	b2db      	uxtb	r3, r3
 801317e:	2b03      	cmp	r3, #3
 8013180:	d110      	bne.n	80131a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013188:	2b00      	cmp	r3, #0
 801318a:	d00b      	beq.n	80131a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013192:	69db      	ldr	r3, [r3, #28]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d005      	beq.n	80131a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801319e:	69db      	ldr	r3, [r3, #28]
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80131a4:	2300      	movs	r3, #0
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3708      	adds	r7, #8
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}

080131ae <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80131ae:	b580      	push	{r7, lr}
 80131b0:	b082      	sub	sp, #8
 80131b2:	af00      	add	r7, sp, #0
 80131b4:	6078      	str	r0, [r7, #4]
 80131b6:	460b      	mov	r3, r1
 80131b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	32ae      	adds	r2, #174	@ 0xae
 80131c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d101      	bne.n	80131d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80131cc:	2303      	movs	r3, #3
 80131ce:	e01c      	b.n	801320a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80131d6:	b2db      	uxtb	r3, r3
 80131d8:	2b03      	cmp	r3, #3
 80131da:	d115      	bne.n	8013208 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	32ae      	adds	r2, #174	@ 0xae
 80131e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131ea:	6a1b      	ldr	r3, [r3, #32]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d00b      	beq.n	8013208 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	32ae      	adds	r2, #174	@ 0xae
 80131fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131fe:	6a1b      	ldr	r3, [r3, #32]
 8013200:	78fa      	ldrb	r2, [r7, #3]
 8013202:	4611      	mov	r1, r2
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013208:	2300      	movs	r3, #0
}
 801320a:	4618      	mov	r0, r3
 801320c:	3708      	adds	r7, #8
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}

08013212 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013212:	b580      	push	{r7, lr}
 8013214:	b082      	sub	sp, #8
 8013216:	af00      	add	r7, sp, #0
 8013218:	6078      	str	r0, [r7, #4]
 801321a:	460b      	mov	r3, r1
 801321c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	32ae      	adds	r2, #174	@ 0xae
 8013228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d101      	bne.n	8013234 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013230:	2303      	movs	r3, #3
 8013232:	e01c      	b.n	801326e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801323a:	b2db      	uxtb	r3, r3
 801323c:	2b03      	cmp	r3, #3
 801323e:	d115      	bne.n	801326c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	32ae      	adds	r2, #174	@ 0xae
 801324a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013250:	2b00      	cmp	r3, #0
 8013252:	d00b      	beq.n	801326c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	32ae      	adds	r2, #174	@ 0xae
 801325e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013264:	78fa      	ldrb	r2, [r7, #3]
 8013266:	4611      	mov	r1, r2
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801326c:	2300      	movs	r3, #0
}
 801326e:	4618      	mov	r0, r3
 8013270:	3708      	adds	r7, #8
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}

08013276 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013276:	b480      	push	{r7}
 8013278:	b083      	sub	sp, #12
 801327a:	af00      	add	r7, sp, #0
 801327c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801327e:	2300      	movs	r3, #0
}
 8013280:	4618      	mov	r0, r3
 8013282:	370c      	adds	r7, #12
 8013284:	46bd      	mov	sp, r7
 8013286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328a:	4770      	bx	lr

0801328c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b084      	sub	sp, #16
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013294:	2300      	movs	r3, #0
 8013296:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2201      	movs	r2, #1
 801329c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d00e      	beq.n	80132c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	687a      	ldr	r2, [r7, #4]
 80132b4:	6852      	ldr	r2, [r2, #4]
 80132b6:	b2d2      	uxtb	r2, r2
 80132b8:	4611      	mov	r1, r2
 80132ba:	6878      	ldr	r0, [r7, #4]
 80132bc:	4798      	blx	r3
 80132be:	4603      	mov	r3, r0
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d001      	beq.n	80132c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80132c4:	2303      	movs	r3, #3
 80132c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80132c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80132ca:	4618      	mov	r0, r3
 80132cc:	3710      	adds	r7, #16
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}

080132d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80132d2:	b480      	push	{r7}
 80132d4:	b083      	sub	sp, #12
 80132d6:	af00      	add	r7, sp, #0
 80132d8:	6078      	str	r0, [r7, #4]
 80132da:	460b      	mov	r3, r1
 80132dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80132de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80132e0:	4618      	mov	r0, r3
 80132e2:	370c      	adds	r7, #12
 80132e4:	46bd      	mov	sp, r7
 80132e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ea:	4770      	bx	lr

080132ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80132ec:	b480      	push	{r7}
 80132ee:	b083      	sub	sp, #12
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
 80132f4:	460b      	mov	r3, r1
 80132f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80132f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80132fa:	4618      	mov	r0, r3
 80132fc:	370c      	adds	r7, #12
 80132fe:	46bd      	mov	sp, r7
 8013300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013304:	4770      	bx	lr

08013306 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013306:	b580      	push	{r7, lr}
 8013308:	b086      	sub	sp, #24
 801330a:	af00      	add	r7, sp, #0
 801330c:	6078      	str	r0, [r7, #4]
 801330e:	460b      	mov	r3, r1
 8013310:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801331a:	2300      	movs	r3, #0
 801331c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	885b      	ldrh	r3, [r3, #2]
 8013322:	b29b      	uxth	r3, r3
 8013324:	68fa      	ldr	r2, [r7, #12]
 8013326:	7812      	ldrb	r2, [r2, #0]
 8013328:	4293      	cmp	r3, r2
 801332a:	d91f      	bls.n	801336c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013332:	e013      	b.n	801335c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013334:	f107 030a 	add.w	r3, r7, #10
 8013338:	4619      	mov	r1, r3
 801333a:	6978      	ldr	r0, [r7, #20]
 801333c:	f000 f81b 	bl	8013376 <USBD_GetNextDesc>
 8013340:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013342:	697b      	ldr	r3, [r7, #20]
 8013344:	785b      	ldrb	r3, [r3, #1]
 8013346:	2b05      	cmp	r3, #5
 8013348:	d108      	bne.n	801335c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	789b      	ldrb	r3, [r3, #2]
 8013352:	78fa      	ldrb	r2, [r7, #3]
 8013354:	429a      	cmp	r2, r3
 8013356:	d008      	beq.n	801336a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013358:	2300      	movs	r3, #0
 801335a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	885b      	ldrh	r3, [r3, #2]
 8013360:	b29a      	uxth	r2, r3
 8013362:	897b      	ldrh	r3, [r7, #10]
 8013364:	429a      	cmp	r2, r3
 8013366:	d8e5      	bhi.n	8013334 <USBD_GetEpDesc+0x2e>
 8013368:	e000      	b.n	801336c <USBD_GetEpDesc+0x66>
          break;
 801336a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801336c:	693b      	ldr	r3, [r7, #16]
}
 801336e:	4618      	mov	r0, r3
 8013370:	3718      	adds	r7, #24
 8013372:	46bd      	mov	sp, r7
 8013374:	bd80      	pop	{r7, pc}

08013376 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013376:	b480      	push	{r7}
 8013378:	b085      	sub	sp, #20
 801337a:	af00      	add	r7, sp, #0
 801337c:	6078      	str	r0, [r7, #4]
 801337e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	881b      	ldrh	r3, [r3, #0]
 8013388:	68fa      	ldr	r2, [r7, #12]
 801338a:	7812      	ldrb	r2, [r2, #0]
 801338c:	4413      	add	r3, r2
 801338e:	b29a      	uxth	r2, r3
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	781b      	ldrb	r3, [r3, #0]
 8013398:	461a      	mov	r2, r3
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	4413      	add	r3, r2
 801339e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80133a0:	68fb      	ldr	r3, [r7, #12]
}
 80133a2:	4618      	mov	r0, r3
 80133a4:	3714      	adds	r7, #20
 80133a6:	46bd      	mov	sp, r7
 80133a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ac:	4770      	bx	lr

080133ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80133ae:	b480      	push	{r7}
 80133b0:	b087      	sub	sp, #28
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80133ba:	697b      	ldr	r3, [r7, #20]
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	3301      	adds	r3, #1
 80133c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	781b      	ldrb	r3, [r3, #0]
 80133ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80133cc:	8a3b      	ldrh	r3, [r7, #16]
 80133ce:	021b      	lsls	r3, r3, #8
 80133d0:	b21a      	sxth	r2, r3
 80133d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80133d6:	4313      	orrs	r3, r2
 80133d8:	b21b      	sxth	r3, r3
 80133da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80133dc:	89fb      	ldrh	r3, [r7, #14]
}
 80133de:	4618      	mov	r0, r3
 80133e0:	371c      	adds	r7, #28
 80133e2:	46bd      	mov	sp, r7
 80133e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e8:	4770      	bx	lr
	...

080133ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b084      	sub	sp, #16
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
 80133f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80133f6:	2300      	movs	r3, #0
 80133f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	781b      	ldrb	r3, [r3, #0]
 80133fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013402:	2b40      	cmp	r3, #64	@ 0x40
 8013404:	d005      	beq.n	8013412 <USBD_StdDevReq+0x26>
 8013406:	2b40      	cmp	r3, #64	@ 0x40
 8013408:	d857      	bhi.n	80134ba <USBD_StdDevReq+0xce>
 801340a:	2b00      	cmp	r3, #0
 801340c:	d00f      	beq.n	801342e <USBD_StdDevReq+0x42>
 801340e:	2b20      	cmp	r3, #32
 8013410:	d153      	bne.n	80134ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	32ae      	adds	r2, #174	@ 0xae
 801341c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013420:	689b      	ldr	r3, [r3, #8]
 8013422:	6839      	ldr	r1, [r7, #0]
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	4798      	blx	r3
 8013428:	4603      	mov	r3, r0
 801342a:	73fb      	strb	r3, [r7, #15]
      break;
 801342c:	e04a      	b.n	80134c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	785b      	ldrb	r3, [r3, #1]
 8013432:	2b09      	cmp	r3, #9
 8013434:	d83b      	bhi.n	80134ae <USBD_StdDevReq+0xc2>
 8013436:	a201      	add	r2, pc, #4	@ (adr r2, 801343c <USBD_StdDevReq+0x50>)
 8013438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801343c:	08013491 	.word	0x08013491
 8013440:	080134a5 	.word	0x080134a5
 8013444:	080134af 	.word	0x080134af
 8013448:	0801349b 	.word	0x0801349b
 801344c:	080134af 	.word	0x080134af
 8013450:	0801346f 	.word	0x0801346f
 8013454:	08013465 	.word	0x08013465
 8013458:	080134af 	.word	0x080134af
 801345c:	08013487 	.word	0x08013487
 8013460:	08013479 	.word	0x08013479
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013464:	6839      	ldr	r1, [r7, #0]
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f000 fa3c 	bl	80138e4 <USBD_GetDescriptor>
          break;
 801346c:	e024      	b.n	80134b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801346e:	6839      	ldr	r1, [r7, #0]
 8013470:	6878      	ldr	r0, [r7, #4]
 8013472:	f000 fbcb 	bl	8013c0c <USBD_SetAddress>
          break;
 8013476:	e01f      	b.n	80134b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013478:	6839      	ldr	r1, [r7, #0]
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f000 fc0a 	bl	8013c94 <USBD_SetConfig>
 8013480:	4603      	mov	r3, r0
 8013482:	73fb      	strb	r3, [r7, #15]
          break;
 8013484:	e018      	b.n	80134b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013486:	6839      	ldr	r1, [r7, #0]
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	f000 fcad 	bl	8013de8 <USBD_GetConfig>
          break;
 801348e:	e013      	b.n	80134b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013490:	6839      	ldr	r1, [r7, #0]
 8013492:	6878      	ldr	r0, [r7, #4]
 8013494:	f000 fcde 	bl	8013e54 <USBD_GetStatus>
          break;
 8013498:	e00e      	b.n	80134b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801349a:	6839      	ldr	r1, [r7, #0]
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f000 fd0d 	bl	8013ebc <USBD_SetFeature>
          break;
 80134a2:	e009      	b.n	80134b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80134a4:	6839      	ldr	r1, [r7, #0]
 80134a6:	6878      	ldr	r0, [r7, #4]
 80134a8:	f000 fd31 	bl	8013f0e <USBD_ClrFeature>
          break;
 80134ac:	e004      	b.n	80134b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80134ae:	6839      	ldr	r1, [r7, #0]
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f000 fd88 	bl	8013fc6 <USBD_CtlError>
          break;
 80134b6:	bf00      	nop
      }
      break;
 80134b8:	e004      	b.n	80134c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80134ba:	6839      	ldr	r1, [r7, #0]
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f000 fd82 	bl	8013fc6 <USBD_CtlError>
      break;
 80134c2:	bf00      	nop
  }

  return ret;
 80134c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80134c6:	4618      	mov	r0, r3
 80134c8:	3710      	adds	r7, #16
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}
 80134ce:	bf00      	nop

080134d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b084      	sub	sp, #16
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80134da:	2300      	movs	r3, #0
 80134dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80134de:	683b      	ldr	r3, [r7, #0]
 80134e0:	781b      	ldrb	r3, [r3, #0]
 80134e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80134e6:	2b40      	cmp	r3, #64	@ 0x40
 80134e8:	d005      	beq.n	80134f6 <USBD_StdItfReq+0x26>
 80134ea:	2b40      	cmp	r3, #64	@ 0x40
 80134ec:	d852      	bhi.n	8013594 <USBD_StdItfReq+0xc4>
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d001      	beq.n	80134f6 <USBD_StdItfReq+0x26>
 80134f2:	2b20      	cmp	r3, #32
 80134f4:	d14e      	bne.n	8013594 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134fc:	b2db      	uxtb	r3, r3
 80134fe:	3b01      	subs	r3, #1
 8013500:	2b02      	cmp	r3, #2
 8013502:	d840      	bhi.n	8013586 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	889b      	ldrh	r3, [r3, #4]
 8013508:	b2db      	uxtb	r3, r3
 801350a:	2b01      	cmp	r3, #1
 801350c:	d836      	bhi.n	801357c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	889b      	ldrh	r3, [r3, #4]
 8013512:	b2db      	uxtb	r3, r3
 8013514:	4619      	mov	r1, r3
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f7ff fedb 	bl	80132d2 <USBD_CoreFindIF>
 801351c:	4603      	mov	r3, r0
 801351e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013520:	7bbb      	ldrb	r3, [r7, #14]
 8013522:	2bff      	cmp	r3, #255	@ 0xff
 8013524:	d01d      	beq.n	8013562 <USBD_StdItfReq+0x92>
 8013526:	7bbb      	ldrb	r3, [r7, #14]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d11a      	bne.n	8013562 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801352c:	7bba      	ldrb	r2, [r7, #14]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	32ae      	adds	r2, #174	@ 0xae
 8013532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013536:	689b      	ldr	r3, [r3, #8]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d00f      	beq.n	801355c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801353c:	7bba      	ldrb	r2, [r7, #14]
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013544:	7bba      	ldrb	r2, [r7, #14]
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	32ae      	adds	r2, #174	@ 0xae
 801354a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801354e:	689b      	ldr	r3, [r3, #8]
 8013550:	6839      	ldr	r1, [r7, #0]
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	4798      	blx	r3
 8013556:	4603      	mov	r3, r0
 8013558:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801355a:	e004      	b.n	8013566 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801355c:	2303      	movs	r3, #3
 801355e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013560:	e001      	b.n	8013566 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013562:	2303      	movs	r3, #3
 8013564:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	88db      	ldrh	r3, [r3, #6]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d110      	bne.n	8013590 <USBD_StdItfReq+0xc0>
 801356e:	7bfb      	ldrb	r3, [r7, #15]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d10d      	bne.n	8013590 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	f000 fdfd 	bl	8014174 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801357a:	e009      	b.n	8013590 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801357c:	6839      	ldr	r1, [r7, #0]
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	f000 fd21 	bl	8013fc6 <USBD_CtlError>
          break;
 8013584:	e004      	b.n	8013590 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013586:	6839      	ldr	r1, [r7, #0]
 8013588:	6878      	ldr	r0, [r7, #4]
 801358a:	f000 fd1c 	bl	8013fc6 <USBD_CtlError>
          break;
 801358e:	e000      	b.n	8013592 <USBD_StdItfReq+0xc2>
          break;
 8013590:	bf00      	nop
      }
      break;
 8013592:	e004      	b.n	801359e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013594:	6839      	ldr	r1, [r7, #0]
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f000 fd15 	bl	8013fc6 <USBD_CtlError>
      break;
 801359c:	bf00      	nop
  }

  return ret;
 801359e:	7bfb      	ldrb	r3, [r7, #15]
}
 80135a0:	4618      	mov	r0, r3
 80135a2:	3710      	adds	r7, #16
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}

080135a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b084      	sub	sp, #16
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
 80135b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80135b2:	2300      	movs	r3, #0
 80135b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	889b      	ldrh	r3, [r3, #4]
 80135ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80135c4:	2b40      	cmp	r3, #64	@ 0x40
 80135c6:	d007      	beq.n	80135d8 <USBD_StdEPReq+0x30>
 80135c8:	2b40      	cmp	r3, #64	@ 0x40
 80135ca:	f200 817f 	bhi.w	80138cc <USBD_StdEPReq+0x324>
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d02a      	beq.n	8013628 <USBD_StdEPReq+0x80>
 80135d2:	2b20      	cmp	r3, #32
 80135d4:	f040 817a 	bne.w	80138cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80135d8:	7bbb      	ldrb	r3, [r7, #14]
 80135da:	4619      	mov	r1, r3
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	f7ff fe85 	bl	80132ec <USBD_CoreFindEP>
 80135e2:	4603      	mov	r3, r0
 80135e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80135e6:	7b7b      	ldrb	r3, [r7, #13]
 80135e8:	2bff      	cmp	r3, #255	@ 0xff
 80135ea:	f000 8174 	beq.w	80138d6 <USBD_StdEPReq+0x32e>
 80135ee:	7b7b      	ldrb	r3, [r7, #13]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	f040 8170 	bne.w	80138d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80135f6:	7b7a      	ldrb	r2, [r7, #13]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80135fe:	7b7a      	ldrb	r2, [r7, #13]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	32ae      	adds	r2, #174	@ 0xae
 8013604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013608:	689b      	ldr	r3, [r3, #8]
 801360a:	2b00      	cmp	r3, #0
 801360c:	f000 8163 	beq.w	80138d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013610:	7b7a      	ldrb	r2, [r7, #13]
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	32ae      	adds	r2, #174	@ 0xae
 8013616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801361a:	689b      	ldr	r3, [r3, #8]
 801361c:	6839      	ldr	r1, [r7, #0]
 801361e:	6878      	ldr	r0, [r7, #4]
 8013620:	4798      	blx	r3
 8013622:	4603      	mov	r3, r0
 8013624:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013626:	e156      	b.n	80138d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	785b      	ldrb	r3, [r3, #1]
 801362c:	2b03      	cmp	r3, #3
 801362e:	d008      	beq.n	8013642 <USBD_StdEPReq+0x9a>
 8013630:	2b03      	cmp	r3, #3
 8013632:	f300 8145 	bgt.w	80138c0 <USBD_StdEPReq+0x318>
 8013636:	2b00      	cmp	r3, #0
 8013638:	f000 809b 	beq.w	8013772 <USBD_StdEPReq+0x1ca>
 801363c:	2b01      	cmp	r3, #1
 801363e:	d03c      	beq.n	80136ba <USBD_StdEPReq+0x112>
 8013640:	e13e      	b.n	80138c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013648:	b2db      	uxtb	r3, r3
 801364a:	2b02      	cmp	r3, #2
 801364c:	d002      	beq.n	8013654 <USBD_StdEPReq+0xac>
 801364e:	2b03      	cmp	r3, #3
 8013650:	d016      	beq.n	8013680 <USBD_StdEPReq+0xd8>
 8013652:	e02c      	b.n	80136ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013654:	7bbb      	ldrb	r3, [r7, #14]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d00d      	beq.n	8013676 <USBD_StdEPReq+0xce>
 801365a:	7bbb      	ldrb	r3, [r7, #14]
 801365c:	2b80      	cmp	r3, #128	@ 0x80
 801365e:	d00a      	beq.n	8013676 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013660:	7bbb      	ldrb	r3, [r7, #14]
 8013662:	4619      	mov	r1, r3
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f001 f9a5 	bl	80149b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801366a:	2180      	movs	r1, #128	@ 0x80
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f001 f9a1 	bl	80149b4 <USBD_LL_StallEP>
 8013672:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013674:	e020      	b.n	80136b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013676:	6839      	ldr	r1, [r7, #0]
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	f000 fca4 	bl	8013fc6 <USBD_CtlError>
              break;
 801367e:	e01b      	b.n	80136b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	885b      	ldrh	r3, [r3, #2]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d10e      	bne.n	80136a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013688:	7bbb      	ldrb	r3, [r7, #14]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d00b      	beq.n	80136a6 <USBD_StdEPReq+0xfe>
 801368e:	7bbb      	ldrb	r3, [r7, #14]
 8013690:	2b80      	cmp	r3, #128	@ 0x80
 8013692:	d008      	beq.n	80136a6 <USBD_StdEPReq+0xfe>
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	88db      	ldrh	r3, [r3, #6]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d104      	bne.n	80136a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801369c:	7bbb      	ldrb	r3, [r7, #14]
 801369e:	4619      	mov	r1, r3
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f001 f987 	bl	80149b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f000 fd64 	bl	8014174 <USBD_CtlSendStatus>

              break;
 80136ac:	e004      	b.n	80136b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80136ae:	6839      	ldr	r1, [r7, #0]
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f000 fc88 	bl	8013fc6 <USBD_CtlError>
              break;
 80136b6:	bf00      	nop
          }
          break;
 80136b8:	e107      	b.n	80138ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80136c0:	b2db      	uxtb	r3, r3
 80136c2:	2b02      	cmp	r3, #2
 80136c4:	d002      	beq.n	80136cc <USBD_StdEPReq+0x124>
 80136c6:	2b03      	cmp	r3, #3
 80136c8:	d016      	beq.n	80136f8 <USBD_StdEPReq+0x150>
 80136ca:	e04b      	b.n	8013764 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80136cc:	7bbb      	ldrb	r3, [r7, #14]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d00d      	beq.n	80136ee <USBD_StdEPReq+0x146>
 80136d2:	7bbb      	ldrb	r3, [r7, #14]
 80136d4:	2b80      	cmp	r3, #128	@ 0x80
 80136d6:	d00a      	beq.n	80136ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80136d8:	7bbb      	ldrb	r3, [r7, #14]
 80136da:	4619      	mov	r1, r3
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f001 f969 	bl	80149b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80136e2:	2180      	movs	r1, #128	@ 0x80
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f001 f965 	bl	80149b4 <USBD_LL_StallEP>
 80136ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80136ec:	e040      	b.n	8013770 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80136ee:	6839      	ldr	r1, [r7, #0]
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	f000 fc68 	bl	8013fc6 <USBD_CtlError>
              break;
 80136f6:	e03b      	b.n	8013770 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	885b      	ldrh	r3, [r3, #2]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d136      	bne.n	801376e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013700:	7bbb      	ldrb	r3, [r7, #14]
 8013702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013706:	2b00      	cmp	r3, #0
 8013708:	d004      	beq.n	8013714 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801370a:	7bbb      	ldrb	r3, [r7, #14]
 801370c:	4619      	mov	r1, r3
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	f001 f96f 	bl	80149f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f000 fd2d 	bl	8014174 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801371a:	7bbb      	ldrb	r3, [r7, #14]
 801371c:	4619      	mov	r1, r3
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f7ff fde4 	bl	80132ec <USBD_CoreFindEP>
 8013724:	4603      	mov	r3, r0
 8013726:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013728:	7b7b      	ldrb	r3, [r7, #13]
 801372a:	2bff      	cmp	r3, #255	@ 0xff
 801372c:	d01f      	beq.n	801376e <USBD_StdEPReq+0x1c6>
 801372e:	7b7b      	ldrb	r3, [r7, #13]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d11c      	bne.n	801376e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013734:	7b7a      	ldrb	r2, [r7, #13]
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801373c:	7b7a      	ldrb	r2, [r7, #13]
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	32ae      	adds	r2, #174	@ 0xae
 8013742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013746:	689b      	ldr	r3, [r3, #8]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d010      	beq.n	801376e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801374c:	7b7a      	ldrb	r2, [r7, #13]
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	32ae      	adds	r2, #174	@ 0xae
 8013752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013756:	689b      	ldr	r3, [r3, #8]
 8013758:	6839      	ldr	r1, [r7, #0]
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	4798      	blx	r3
 801375e:	4603      	mov	r3, r0
 8013760:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013762:	e004      	b.n	801376e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013764:	6839      	ldr	r1, [r7, #0]
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	f000 fc2d 	bl	8013fc6 <USBD_CtlError>
              break;
 801376c:	e000      	b.n	8013770 <USBD_StdEPReq+0x1c8>
              break;
 801376e:	bf00      	nop
          }
          break;
 8013770:	e0ab      	b.n	80138ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013778:	b2db      	uxtb	r3, r3
 801377a:	2b02      	cmp	r3, #2
 801377c:	d002      	beq.n	8013784 <USBD_StdEPReq+0x1dc>
 801377e:	2b03      	cmp	r3, #3
 8013780:	d032      	beq.n	80137e8 <USBD_StdEPReq+0x240>
 8013782:	e097      	b.n	80138b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013784:	7bbb      	ldrb	r3, [r7, #14]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d007      	beq.n	801379a <USBD_StdEPReq+0x1f2>
 801378a:	7bbb      	ldrb	r3, [r7, #14]
 801378c:	2b80      	cmp	r3, #128	@ 0x80
 801378e:	d004      	beq.n	801379a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013790:	6839      	ldr	r1, [r7, #0]
 8013792:	6878      	ldr	r0, [r7, #4]
 8013794:	f000 fc17 	bl	8013fc6 <USBD_CtlError>
                break;
 8013798:	e091      	b.n	80138be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801379a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	da0b      	bge.n	80137ba <USBD_StdEPReq+0x212>
 80137a2:	7bbb      	ldrb	r3, [r7, #14]
 80137a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80137a8:	4613      	mov	r3, r2
 80137aa:	009b      	lsls	r3, r3, #2
 80137ac:	4413      	add	r3, r2
 80137ae:	009b      	lsls	r3, r3, #2
 80137b0:	3310      	adds	r3, #16
 80137b2:	687a      	ldr	r2, [r7, #4]
 80137b4:	4413      	add	r3, r2
 80137b6:	3304      	adds	r3, #4
 80137b8:	e00b      	b.n	80137d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80137ba:	7bbb      	ldrb	r3, [r7, #14]
 80137bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80137c0:	4613      	mov	r3, r2
 80137c2:	009b      	lsls	r3, r3, #2
 80137c4:	4413      	add	r3, r2
 80137c6:	009b      	lsls	r3, r3, #2
 80137c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80137cc:	687a      	ldr	r2, [r7, #4]
 80137ce:	4413      	add	r3, r2
 80137d0:	3304      	adds	r3, #4
 80137d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	2200      	movs	r2, #0
 80137d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80137da:	68bb      	ldr	r3, [r7, #8]
 80137dc:	2202      	movs	r2, #2
 80137de:	4619      	mov	r1, r3
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f000 fc6d 	bl	80140c0 <USBD_CtlSendData>
              break;
 80137e6:	e06a      	b.n	80138be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80137e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	da11      	bge.n	8013814 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80137f0:	7bbb      	ldrb	r3, [r7, #14]
 80137f2:	f003 020f 	and.w	r2, r3, #15
 80137f6:	6879      	ldr	r1, [r7, #4]
 80137f8:	4613      	mov	r3, r2
 80137fa:	009b      	lsls	r3, r3, #2
 80137fc:	4413      	add	r3, r2
 80137fe:	009b      	lsls	r3, r3, #2
 8013800:	440b      	add	r3, r1
 8013802:	3324      	adds	r3, #36	@ 0x24
 8013804:	881b      	ldrh	r3, [r3, #0]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d117      	bne.n	801383a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801380a:	6839      	ldr	r1, [r7, #0]
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f000 fbda 	bl	8013fc6 <USBD_CtlError>
                  break;
 8013812:	e054      	b.n	80138be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013814:	7bbb      	ldrb	r3, [r7, #14]
 8013816:	f003 020f 	and.w	r2, r3, #15
 801381a:	6879      	ldr	r1, [r7, #4]
 801381c:	4613      	mov	r3, r2
 801381e:	009b      	lsls	r3, r3, #2
 8013820:	4413      	add	r3, r2
 8013822:	009b      	lsls	r3, r3, #2
 8013824:	440b      	add	r3, r1
 8013826:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801382a:	881b      	ldrh	r3, [r3, #0]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d104      	bne.n	801383a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013830:	6839      	ldr	r1, [r7, #0]
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f000 fbc7 	bl	8013fc6 <USBD_CtlError>
                  break;
 8013838:	e041      	b.n	80138be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801383a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801383e:	2b00      	cmp	r3, #0
 8013840:	da0b      	bge.n	801385a <USBD_StdEPReq+0x2b2>
 8013842:	7bbb      	ldrb	r3, [r7, #14]
 8013844:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013848:	4613      	mov	r3, r2
 801384a:	009b      	lsls	r3, r3, #2
 801384c:	4413      	add	r3, r2
 801384e:	009b      	lsls	r3, r3, #2
 8013850:	3310      	adds	r3, #16
 8013852:	687a      	ldr	r2, [r7, #4]
 8013854:	4413      	add	r3, r2
 8013856:	3304      	adds	r3, #4
 8013858:	e00b      	b.n	8013872 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801385a:	7bbb      	ldrb	r3, [r7, #14]
 801385c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013860:	4613      	mov	r3, r2
 8013862:	009b      	lsls	r3, r3, #2
 8013864:	4413      	add	r3, r2
 8013866:	009b      	lsls	r3, r3, #2
 8013868:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801386c:	687a      	ldr	r2, [r7, #4]
 801386e:	4413      	add	r3, r2
 8013870:	3304      	adds	r3, #4
 8013872:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013874:	7bbb      	ldrb	r3, [r7, #14]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d002      	beq.n	8013880 <USBD_StdEPReq+0x2d8>
 801387a:	7bbb      	ldrb	r3, [r7, #14]
 801387c:	2b80      	cmp	r3, #128	@ 0x80
 801387e:	d103      	bne.n	8013888 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	2200      	movs	r2, #0
 8013884:	601a      	str	r2, [r3, #0]
 8013886:	e00e      	b.n	80138a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013888:	7bbb      	ldrb	r3, [r7, #14]
 801388a:	4619      	mov	r1, r3
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f001 f8cf 	bl	8014a30 <USBD_LL_IsStallEP>
 8013892:	4603      	mov	r3, r0
 8013894:	2b00      	cmp	r3, #0
 8013896:	d003      	beq.n	80138a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	2201      	movs	r2, #1
 801389c:	601a      	str	r2, [r3, #0]
 801389e:	e002      	b.n	80138a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	2200      	movs	r2, #0
 80138a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	2202      	movs	r2, #2
 80138aa:	4619      	mov	r1, r3
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f000 fc07 	bl	80140c0 <USBD_CtlSendData>
              break;
 80138b2:	e004      	b.n	80138be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80138b4:	6839      	ldr	r1, [r7, #0]
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f000 fb85 	bl	8013fc6 <USBD_CtlError>
              break;
 80138bc:	bf00      	nop
          }
          break;
 80138be:	e004      	b.n	80138ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80138c0:	6839      	ldr	r1, [r7, #0]
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f000 fb7f 	bl	8013fc6 <USBD_CtlError>
          break;
 80138c8:	bf00      	nop
      }
      break;
 80138ca:	e005      	b.n	80138d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80138cc:	6839      	ldr	r1, [r7, #0]
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	f000 fb79 	bl	8013fc6 <USBD_CtlError>
      break;
 80138d4:	e000      	b.n	80138d8 <USBD_StdEPReq+0x330>
      break;
 80138d6:	bf00      	nop
  }

  return ret;
 80138d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80138da:	4618      	mov	r0, r3
 80138dc:	3710      	adds	r7, #16
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
	...

080138e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b084      	sub	sp, #16
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
 80138ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80138ee:	2300      	movs	r3, #0
 80138f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80138f2:	2300      	movs	r3, #0
 80138f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80138f6:	2300      	movs	r3, #0
 80138f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	885b      	ldrh	r3, [r3, #2]
 80138fe:	0a1b      	lsrs	r3, r3, #8
 8013900:	b29b      	uxth	r3, r3
 8013902:	3b01      	subs	r3, #1
 8013904:	2b0e      	cmp	r3, #14
 8013906:	f200 8152 	bhi.w	8013bae <USBD_GetDescriptor+0x2ca>
 801390a:	a201      	add	r2, pc, #4	@ (adr r2, 8013910 <USBD_GetDescriptor+0x2c>)
 801390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013910:	08013981 	.word	0x08013981
 8013914:	08013999 	.word	0x08013999
 8013918:	080139d9 	.word	0x080139d9
 801391c:	08013baf 	.word	0x08013baf
 8013920:	08013baf 	.word	0x08013baf
 8013924:	08013b4f 	.word	0x08013b4f
 8013928:	08013b7b 	.word	0x08013b7b
 801392c:	08013baf 	.word	0x08013baf
 8013930:	08013baf 	.word	0x08013baf
 8013934:	08013baf 	.word	0x08013baf
 8013938:	08013baf 	.word	0x08013baf
 801393c:	08013baf 	.word	0x08013baf
 8013940:	08013baf 	.word	0x08013baf
 8013944:	08013baf 	.word	0x08013baf
 8013948:	0801394d 	.word	0x0801394d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013952:	69db      	ldr	r3, [r3, #28]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d00b      	beq.n	8013970 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801395e:	69db      	ldr	r3, [r3, #28]
 8013960:	687a      	ldr	r2, [r7, #4]
 8013962:	7c12      	ldrb	r2, [r2, #16]
 8013964:	f107 0108 	add.w	r1, r7, #8
 8013968:	4610      	mov	r0, r2
 801396a:	4798      	blx	r3
 801396c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801396e:	e126      	b.n	8013bbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013970:	6839      	ldr	r1, [r7, #0]
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f000 fb27 	bl	8013fc6 <USBD_CtlError>
        err++;
 8013978:	7afb      	ldrb	r3, [r7, #11]
 801397a:	3301      	adds	r3, #1
 801397c:	72fb      	strb	r3, [r7, #11]
      break;
 801397e:	e11e      	b.n	8013bbe <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	687a      	ldr	r2, [r7, #4]
 801398a:	7c12      	ldrb	r2, [r2, #16]
 801398c:	f107 0108 	add.w	r1, r7, #8
 8013990:	4610      	mov	r0, r2
 8013992:	4798      	blx	r3
 8013994:	60f8      	str	r0, [r7, #12]
      break;
 8013996:	e112      	b.n	8013bbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	7c1b      	ldrb	r3, [r3, #16]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d10d      	bne.n	80139bc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80139a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139a8:	f107 0208 	add.w	r2, r7, #8
 80139ac:	4610      	mov	r0, r2
 80139ae:	4798      	blx	r3
 80139b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	3301      	adds	r3, #1
 80139b6:	2202      	movs	r2, #2
 80139b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80139ba:	e100      	b.n	8013bbe <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80139c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139c4:	f107 0208 	add.w	r2, r7, #8
 80139c8:	4610      	mov	r0, r2
 80139ca:	4798      	blx	r3
 80139cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	3301      	adds	r3, #1
 80139d2:	2202      	movs	r2, #2
 80139d4:	701a      	strb	r2, [r3, #0]
      break;
 80139d6:	e0f2      	b.n	8013bbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	885b      	ldrh	r3, [r3, #2]
 80139dc:	b2db      	uxtb	r3, r3
 80139de:	2b05      	cmp	r3, #5
 80139e0:	f200 80ac 	bhi.w	8013b3c <USBD_GetDescriptor+0x258>
 80139e4:	a201      	add	r2, pc, #4	@ (adr r2, 80139ec <USBD_GetDescriptor+0x108>)
 80139e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139ea:	bf00      	nop
 80139ec:	08013a05 	.word	0x08013a05
 80139f0:	08013a39 	.word	0x08013a39
 80139f4:	08013a6d 	.word	0x08013a6d
 80139f8:	08013aa1 	.word	0x08013aa1
 80139fc:	08013ad5 	.word	0x08013ad5
 8013a00:	08013b09 	.word	0x08013b09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a0a:	685b      	ldr	r3, [r3, #4]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d00b      	beq.n	8013a28 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a16:	685b      	ldr	r3, [r3, #4]
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	7c12      	ldrb	r2, [r2, #16]
 8013a1c:	f107 0108 	add.w	r1, r7, #8
 8013a20:	4610      	mov	r0, r2
 8013a22:	4798      	blx	r3
 8013a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013a26:	e091      	b.n	8013b4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013a28:	6839      	ldr	r1, [r7, #0]
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f000 facb 	bl	8013fc6 <USBD_CtlError>
            err++;
 8013a30:	7afb      	ldrb	r3, [r7, #11]
 8013a32:	3301      	adds	r3, #1
 8013a34:	72fb      	strb	r3, [r7, #11]
          break;
 8013a36:	e089      	b.n	8013b4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a3e:	689b      	ldr	r3, [r3, #8]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d00b      	beq.n	8013a5c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a4a:	689b      	ldr	r3, [r3, #8]
 8013a4c:	687a      	ldr	r2, [r7, #4]
 8013a4e:	7c12      	ldrb	r2, [r2, #16]
 8013a50:	f107 0108 	add.w	r1, r7, #8
 8013a54:	4610      	mov	r0, r2
 8013a56:	4798      	blx	r3
 8013a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013a5a:	e077      	b.n	8013b4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013a5c:	6839      	ldr	r1, [r7, #0]
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f000 fab1 	bl	8013fc6 <USBD_CtlError>
            err++;
 8013a64:	7afb      	ldrb	r3, [r7, #11]
 8013a66:	3301      	adds	r3, #1
 8013a68:	72fb      	strb	r3, [r7, #11]
          break;
 8013a6a:	e06f      	b.n	8013b4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a72:	68db      	ldr	r3, [r3, #12]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d00b      	beq.n	8013a90 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a7e:	68db      	ldr	r3, [r3, #12]
 8013a80:	687a      	ldr	r2, [r7, #4]
 8013a82:	7c12      	ldrb	r2, [r2, #16]
 8013a84:	f107 0108 	add.w	r1, r7, #8
 8013a88:	4610      	mov	r0, r2
 8013a8a:	4798      	blx	r3
 8013a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013a8e:	e05d      	b.n	8013b4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013a90:	6839      	ldr	r1, [r7, #0]
 8013a92:	6878      	ldr	r0, [r7, #4]
 8013a94:	f000 fa97 	bl	8013fc6 <USBD_CtlError>
            err++;
 8013a98:	7afb      	ldrb	r3, [r7, #11]
 8013a9a:	3301      	adds	r3, #1
 8013a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8013a9e:	e055      	b.n	8013b4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013aa6:	691b      	ldr	r3, [r3, #16]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d00b      	beq.n	8013ac4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ab2:	691b      	ldr	r3, [r3, #16]
 8013ab4:	687a      	ldr	r2, [r7, #4]
 8013ab6:	7c12      	ldrb	r2, [r2, #16]
 8013ab8:	f107 0108 	add.w	r1, r7, #8
 8013abc:	4610      	mov	r0, r2
 8013abe:	4798      	blx	r3
 8013ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013ac2:	e043      	b.n	8013b4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013ac4:	6839      	ldr	r1, [r7, #0]
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f000 fa7d 	bl	8013fc6 <USBD_CtlError>
            err++;
 8013acc:	7afb      	ldrb	r3, [r7, #11]
 8013ace:	3301      	adds	r3, #1
 8013ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8013ad2:	e03b      	b.n	8013b4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ada:	695b      	ldr	r3, [r3, #20]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d00b      	beq.n	8013af8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ae6:	695b      	ldr	r3, [r3, #20]
 8013ae8:	687a      	ldr	r2, [r7, #4]
 8013aea:	7c12      	ldrb	r2, [r2, #16]
 8013aec:	f107 0108 	add.w	r1, r7, #8
 8013af0:	4610      	mov	r0, r2
 8013af2:	4798      	blx	r3
 8013af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013af6:	e029      	b.n	8013b4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013af8:	6839      	ldr	r1, [r7, #0]
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f000 fa63 	bl	8013fc6 <USBD_CtlError>
            err++;
 8013b00:	7afb      	ldrb	r3, [r7, #11]
 8013b02:	3301      	adds	r3, #1
 8013b04:	72fb      	strb	r3, [r7, #11]
          break;
 8013b06:	e021      	b.n	8013b4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b0e:	699b      	ldr	r3, [r3, #24]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d00b      	beq.n	8013b2c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b1a:	699b      	ldr	r3, [r3, #24]
 8013b1c:	687a      	ldr	r2, [r7, #4]
 8013b1e:	7c12      	ldrb	r2, [r2, #16]
 8013b20:	f107 0108 	add.w	r1, r7, #8
 8013b24:	4610      	mov	r0, r2
 8013b26:	4798      	blx	r3
 8013b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b2a:	e00f      	b.n	8013b4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013b2c:	6839      	ldr	r1, [r7, #0]
 8013b2e:	6878      	ldr	r0, [r7, #4]
 8013b30:	f000 fa49 	bl	8013fc6 <USBD_CtlError>
            err++;
 8013b34:	7afb      	ldrb	r3, [r7, #11]
 8013b36:	3301      	adds	r3, #1
 8013b38:	72fb      	strb	r3, [r7, #11]
          break;
 8013b3a:	e007      	b.n	8013b4c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013b3c:	6839      	ldr	r1, [r7, #0]
 8013b3e:	6878      	ldr	r0, [r7, #4]
 8013b40:	f000 fa41 	bl	8013fc6 <USBD_CtlError>
          err++;
 8013b44:	7afb      	ldrb	r3, [r7, #11]
 8013b46:	3301      	adds	r3, #1
 8013b48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013b4a:	bf00      	nop
      }
      break;
 8013b4c:	e037      	b.n	8013bbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	7c1b      	ldrb	r3, [r3, #16]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d109      	bne.n	8013b6a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b5e:	f107 0208 	add.w	r2, r7, #8
 8013b62:	4610      	mov	r0, r2
 8013b64:	4798      	blx	r3
 8013b66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013b68:	e029      	b.n	8013bbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013b6a:	6839      	ldr	r1, [r7, #0]
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f000 fa2a 	bl	8013fc6 <USBD_CtlError>
        err++;
 8013b72:	7afb      	ldrb	r3, [r7, #11]
 8013b74:	3301      	adds	r3, #1
 8013b76:	72fb      	strb	r3, [r7, #11]
      break;
 8013b78:	e021      	b.n	8013bbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	7c1b      	ldrb	r3, [r3, #16]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d10d      	bne.n	8013b9e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b8a:	f107 0208 	add.w	r2, r7, #8
 8013b8e:	4610      	mov	r0, r2
 8013b90:	4798      	blx	r3
 8013b92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	3301      	adds	r3, #1
 8013b98:	2207      	movs	r2, #7
 8013b9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013b9c:	e00f      	b.n	8013bbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013b9e:	6839      	ldr	r1, [r7, #0]
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	f000 fa10 	bl	8013fc6 <USBD_CtlError>
        err++;
 8013ba6:	7afb      	ldrb	r3, [r7, #11]
 8013ba8:	3301      	adds	r3, #1
 8013baa:	72fb      	strb	r3, [r7, #11]
      break;
 8013bac:	e007      	b.n	8013bbe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013bae:	6839      	ldr	r1, [r7, #0]
 8013bb0:	6878      	ldr	r0, [r7, #4]
 8013bb2:	f000 fa08 	bl	8013fc6 <USBD_CtlError>
      err++;
 8013bb6:	7afb      	ldrb	r3, [r7, #11]
 8013bb8:	3301      	adds	r3, #1
 8013bba:	72fb      	strb	r3, [r7, #11]
      break;
 8013bbc:	bf00      	nop
  }

  if (err != 0U)
 8013bbe:	7afb      	ldrb	r3, [r7, #11]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d11e      	bne.n	8013c02 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	88db      	ldrh	r3, [r3, #6]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d016      	beq.n	8013bfa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013bcc:	893b      	ldrh	r3, [r7, #8]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d00e      	beq.n	8013bf0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013bd2:	683b      	ldr	r3, [r7, #0]
 8013bd4:	88da      	ldrh	r2, [r3, #6]
 8013bd6:	893b      	ldrh	r3, [r7, #8]
 8013bd8:	4293      	cmp	r3, r2
 8013bda:	bf28      	it	cs
 8013bdc:	4613      	movcs	r3, r2
 8013bde:	b29b      	uxth	r3, r3
 8013be0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013be2:	893b      	ldrh	r3, [r7, #8]
 8013be4:	461a      	mov	r2, r3
 8013be6:	68f9      	ldr	r1, [r7, #12]
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	f000 fa69 	bl	80140c0 <USBD_CtlSendData>
 8013bee:	e009      	b.n	8013c04 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013bf0:	6839      	ldr	r1, [r7, #0]
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f000 f9e7 	bl	8013fc6 <USBD_CtlError>
 8013bf8:	e004      	b.n	8013c04 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013bfa:	6878      	ldr	r0, [r7, #4]
 8013bfc:	f000 faba 	bl	8014174 <USBD_CtlSendStatus>
 8013c00:	e000      	b.n	8013c04 <USBD_GetDescriptor+0x320>
    return;
 8013c02:	bf00      	nop
  }
}
 8013c04:	3710      	adds	r7, #16
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bd80      	pop	{r7, pc}
 8013c0a:	bf00      	nop

08013c0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
 8013c14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	889b      	ldrh	r3, [r3, #4]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d131      	bne.n	8013c82 <USBD_SetAddress+0x76>
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	88db      	ldrh	r3, [r3, #6]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d12d      	bne.n	8013c82 <USBD_SetAddress+0x76>
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	885b      	ldrh	r3, [r3, #2]
 8013c2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8013c2c:	d829      	bhi.n	8013c82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	885b      	ldrh	r3, [r3, #2]
 8013c32:	b2db      	uxtb	r3, r3
 8013c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c40:	b2db      	uxtb	r3, r3
 8013c42:	2b03      	cmp	r3, #3
 8013c44:	d104      	bne.n	8013c50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013c46:	6839      	ldr	r1, [r7, #0]
 8013c48:	6878      	ldr	r0, [r7, #4]
 8013c4a:	f000 f9bc 	bl	8013fc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c4e:	e01d      	b.n	8013c8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	7bfa      	ldrb	r2, [r7, #15]
 8013c54:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013c58:	7bfb      	ldrb	r3, [r7, #15]
 8013c5a:	4619      	mov	r1, r3
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f000 ff13 	bl	8014a88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	f000 fa86 	bl	8014174 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013c68:	7bfb      	ldrb	r3, [r7, #15]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d004      	beq.n	8013c78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	2202      	movs	r2, #2
 8013c72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c76:	e009      	b.n	8013c8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c80:	e004      	b.n	8013c8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013c82:	6839      	ldr	r1, [r7, #0]
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f000 f99e 	bl	8013fc6 <USBD_CtlError>
  }
}
 8013c8a:	bf00      	nop
 8013c8c:	bf00      	nop
 8013c8e:	3710      	adds	r7, #16
 8013c90:	46bd      	mov	sp, r7
 8013c92:	bd80      	pop	{r7, pc}

08013c94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b084      	sub	sp, #16
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	885b      	ldrh	r3, [r3, #2]
 8013ca6:	b2da      	uxtb	r2, r3
 8013ca8:	4b4e      	ldr	r3, [pc, #312]	@ (8013de4 <USBD_SetConfig+0x150>)
 8013caa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013cac:	4b4d      	ldr	r3, [pc, #308]	@ (8013de4 <USBD_SetConfig+0x150>)
 8013cae:	781b      	ldrb	r3, [r3, #0]
 8013cb0:	2b01      	cmp	r3, #1
 8013cb2:	d905      	bls.n	8013cc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013cb4:	6839      	ldr	r1, [r7, #0]
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f000 f985 	bl	8013fc6 <USBD_CtlError>
    return USBD_FAIL;
 8013cbc:	2303      	movs	r3, #3
 8013cbe:	e08c      	b.n	8013dda <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013cc6:	b2db      	uxtb	r3, r3
 8013cc8:	2b02      	cmp	r3, #2
 8013cca:	d002      	beq.n	8013cd2 <USBD_SetConfig+0x3e>
 8013ccc:	2b03      	cmp	r3, #3
 8013cce:	d029      	beq.n	8013d24 <USBD_SetConfig+0x90>
 8013cd0:	e075      	b.n	8013dbe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013cd2:	4b44      	ldr	r3, [pc, #272]	@ (8013de4 <USBD_SetConfig+0x150>)
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d020      	beq.n	8013d1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013cda:	4b42      	ldr	r3, [pc, #264]	@ (8013de4 <USBD_SetConfig+0x150>)
 8013cdc:	781b      	ldrb	r3, [r3, #0]
 8013cde:	461a      	mov	r2, r3
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013ce4:	4b3f      	ldr	r3, [pc, #252]	@ (8013de4 <USBD_SetConfig+0x150>)
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	4619      	mov	r1, r3
 8013cea:	6878      	ldr	r0, [r7, #4]
 8013cec:	f7fe ffb9 	bl	8012c62 <USBD_SetClassConfig>
 8013cf0:	4603      	mov	r3, r0
 8013cf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013cf4:	7bfb      	ldrb	r3, [r7, #15]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d008      	beq.n	8013d0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013cfa:	6839      	ldr	r1, [r7, #0]
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f000 f962 	bl	8013fc6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	2202      	movs	r2, #2
 8013d06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013d0a:	e065      	b.n	8013dd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f000 fa31 	bl	8014174 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2203      	movs	r2, #3
 8013d16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013d1a:	e05d      	b.n	8013dd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f000 fa29 	bl	8014174 <USBD_CtlSendStatus>
      break;
 8013d22:	e059      	b.n	8013dd8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013d24:	4b2f      	ldr	r3, [pc, #188]	@ (8013de4 <USBD_SetConfig+0x150>)
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d112      	bne.n	8013d52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2202      	movs	r2, #2
 8013d30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8013d34:	4b2b      	ldr	r3, [pc, #172]	@ (8013de4 <USBD_SetConfig+0x150>)
 8013d36:	781b      	ldrb	r3, [r3, #0]
 8013d38:	461a      	mov	r2, r3
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013d3e:	4b29      	ldr	r3, [pc, #164]	@ (8013de4 <USBD_SetConfig+0x150>)
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	4619      	mov	r1, r3
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f7fe ffa8 	bl	8012c9a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013d4a:	6878      	ldr	r0, [r7, #4]
 8013d4c:	f000 fa12 	bl	8014174 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013d50:	e042      	b.n	8013dd8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8013d52:	4b24      	ldr	r3, [pc, #144]	@ (8013de4 <USBD_SetConfig+0x150>)
 8013d54:	781b      	ldrb	r3, [r3, #0]
 8013d56:	461a      	mov	r2, r3
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	685b      	ldr	r3, [r3, #4]
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	d02a      	beq.n	8013db6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	685b      	ldr	r3, [r3, #4]
 8013d64:	b2db      	uxtb	r3, r3
 8013d66:	4619      	mov	r1, r3
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f7fe ff96 	bl	8012c9a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8013de4 <USBD_SetConfig+0x150>)
 8013d70:	781b      	ldrb	r3, [r3, #0]
 8013d72:	461a      	mov	r2, r3
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013d78:	4b1a      	ldr	r3, [pc, #104]	@ (8013de4 <USBD_SetConfig+0x150>)
 8013d7a:	781b      	ldrb	r3, [r3, #0]
 8013d7c:	4619      	mov	r1, r3
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f7fe ff6f 	bl	8012c62 <USBD_SetClassConfig>
 8013d84:	4603      	mov	r3, r0
 8013d86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013d88:	7bfb      	ldrb	r3, [r7, #15]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d00f      	beq.n	8013dae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013d8e:	6839      	ldr	r1, [r7, #0]
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f000 f918 	bl	8013fc6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	685b      	ldr	r3, [r3, #4]
 8013d9a:	b2db      	uxtb	r3, r3
 8013d9c:	4619      	mov	r1, r3
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f7fe ff7b 	bl	8012c9a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2202      	movs	r2, #2
 8013da8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013dac:	e014      	b.n	8013dd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013dae:	6878      	ldr	r0, [r7, #4]
 8013db0:	f000 f9e0 	bl	8014174 <USBD_CtlSendStatus>
      break;
 8013db4:	e010      	b.n	8013dd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013db6:	6878      	ldr	r0, [r7, #4]
 8013db8:	f000 f9dc 	bl	8014174 <USBD_CtlSendStatus>
      break;
 8013dbc:	e00c      	b.n	8013dd8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013dbe:	6839      	ldr	r1, [r7, #0]
 8013dc0:	6878      	ldr	r0, [r7, #4]
 8013dc2:	f000 f900 	bl	8013fc6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013dc6:	4b07      	ldr	r3, [pc, #28]	@ (8013de4 <USBD_SetConfig+0x150>)
 8013dc8:	781b      	ldrb	r3, [r3, #0]
 8013dca:	4619      	mov	r1, r3
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f7fe ff64 	bl	8012c9a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013dd2:	2303      	movs	r3, #3
 8013dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8013dd6:	bf00      	nop
  }

  return ret;
 8013dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dda:	4618      	mov	r0, r3
 8013ddc:	3710      	adds	r7, #16
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd80      	pop	{r7, pc}
 8013de2:	bf00      	nop
 8013de4:	24004f48 	.word	0x24004f48

08013de8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
 8013df0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013df2:	683b      	ldr	r3, [r7, #0]
 8013df4:	88db      	ldrh	r3, [r3, #6]
 8013df6:	2b01      	cmp	r3, #1
 8013df8:	d004      	beq.n	8013e04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013dfa:	6839      	ldr	r1, [r7, #0]
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f000 f8e2 	bl	8013fc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013e02:	e023      	b.n	8013e4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e0a:	b2db      	uxtb	r3, r3
 8013e0c:	2b02      	cmp	r3, #2
 8013e0e:	dc02      	bgt.n	8013e16 <USBD_GetConfig+0x2e>
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	dc03      	bgt.n	8013e1c <USBD_GetConfig+0x34>
 8013e14:	e015      	b.n	8013e42 <USBD_GetConfig+0x5a>
 8013e16:	2b03      	cmp	r3, #3
 8013e18:	d00b      	beq.n	8013e32 <USBD_GetConfig+0x4a>
 8013e1a:	e012      	b.n	8013e42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	3308      	adds	r3, #8
 8013e26:	2201      	movs	r2, #1
 8013e28:	4619      	mov	r1, r3
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	f000 f948 	bl	80140c0 <USBD_CtlSendData>
        break;
 8013e30:	e00c      	b.n	8013e4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	3304      	adds	r3, #4
 8013e36:	2201      	movs	r2, #1
 8013e38:	4619      	mov	r1, r3
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f000 f940 	bl	80140c0 <USBD_CtlSendData>
        break;
 8013e40:	e004      	b.n	8013e4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013e42:	6839      	ldr	r1, [r7, #0]
 8013e44:	6878      	ldr	r0, [r7, #4]
 8013e46:	f000 f8be 	bl	8013fc6 <USBD_CtlError>
        break;
 8013e4a:	bf00      	nop
}
 8013e4c:	bf00      	nop
 8013e4e:	3708      	adds	r7, #8
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}

08013e54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b082      	sub	sp, #8
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
 8013e5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e64:	b2db      	uxtb	r3, r3
 8013e66:	3b01      	subs	r3, #1
 8013e68:	2b02      	cmp	r3, #2
 8013e6a:	d81e      	bhi.n	8013eaa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	88db      	ldrh	r3, [r3, #6]
 8013e70:	2b02      	cmp	r3, #2
 8013e72:	d004      	beq.n	8013e7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013e74:	6839      	ldr	r1, [r7, #0]
 8013e76:	6878      	ldr	r0, [r7, #4]
 8013e78:	f000 f8a5 	bl	8013fc6 <USBD_CtlError>
        break;
 8013e7c:	e01a      	b.n	8013eb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2201      	movs	r2, #1
 8013e82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d005      	beq.n	8013e9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	68db      	ldr	r3, [r3, #12]
 8013e92:	f043 0202 	orr.w	r2, r3, #2
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	330c      	adds	r3, #12
 8013e9e:	2202      	movs	r2, #2
 8013ea0:	4619      	mov	r1, r3
 8013ea2:	6878      	ldr	r0, [r7, #4]
 8013ea4:	f000 f90c 	bl	80140c0 <USBD_CtlSendData>
      break;
 8013ea8:	e004      	b.n	8013eb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013eaa:	6839      	ldr	r1, [r7, #0]
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f000 f88a 	bl	8013fc6 <USBD_CtlError>
      break;
 8013eb2:	bf00      	nop
  }
}
 8013eb4:	bf00      	nop
 8013eb6:	3708      	adds	r7, #8
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}

08013ebc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b082      	sub	sp, #8
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
 8013ec4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013ec6:	683b      	ldr	r3, [r7, #0]
 8013ec8:	885b      	ldrh	r3, [r3, #2]
 8013eca:	2b01      	cmp	r3, #1
 8013ecc:	d107      	bne.n	8013ede <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	2201      	movs	r2, #1
 8013ed2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f000 f94c 	bl	8014174 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013edc:	e013      	b.n	8013f06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013ede:	683b      	ldr	r3, [r7, #0]
 8013ee0:	885b      	ldrh	r3, [r3, #2]
 8013ee2:	2b02      	cmp	r3, #2
 8013ee4:	d10b      	bne.n	8013efe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8013ee6:	683b      	ldr	r3, [r7, #0]
 8013ee8:	889b      	ldrh	r3, [r3, #4]
 8013eea:	0a1b      	lsrs	r3, r3, #8
 8013eec:	b29b      	uxth	r3, r3
 8013eee:	b2da      	uxtb	r2, r3
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f000 f93c 	bl	8014174 <USBD_CtlSendStatus>
}
 8013efc:	e003      	b.n	8013f06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013efe:	6839      	ldr	r1, [r7, #0]
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f000 f860 	bl	8013fc6 <USBD_CtlError>
}
 8013f06:	bf00      	nop
 8013f08:	3708      	adds	r7, #8
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}

08013f0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f0e:	b580      	push	{r7, lr}
 8013f10:	b082      	sub	sp, #8
 8013f12:	af00      	add	r7, sp, #0
 8013f14:	6078      	str	r0, [r7, #4]
 8013f16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	3b01      	subs	r3, #1
 8013f22:	2b02      	cmp	r3, #2
 8013f24:	d80b      	bhi.n	8013f3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	885b      	ldrh	r3, [r3, #2]
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d10c      	bne.n	8013f48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2200      	movs	r2, #0
 8013f32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f000 f91c 	bl	8014174 <USBD_CtlSendStatus>
      }
      break;
 8013f3c:	e004      	b.n	8013f48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013f3e:	6839      	ldr	r1, [r7, #0]
 8013f40:	6878      	ldr	r0, [r7, #4]
 8013f42:	f000 f840 	bl	8013fc6 <USBD_CtlError>
      break;
 8013f46:	e000      	b.n	8013f4a <USBD_ClrFeature+0x3c>
      break;
 8013f48:	bf00      	nop
  }
}
 8013f4a:	bf00      	nop
 8013f4c:	3708      	adds	r7, #8
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}

08013f52 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013f52:	b580      	push	{r7, lr}
 8013f54:	b084      	sub	sp, #16
 8013f56:	af00      	add	r7, sp, #0
 8013f58:	6078      	str	r0, [r7, #4]
 8013f5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	781a      	ldrb	r2, [r3, #0]
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	3301      	adds	r3, #1
 8013f6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	781a      	ldrb	r2, [r3, #0]
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	3301      	adds	r3, #1
 8013f7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013f7c:	68f8      	ldr	r0, [r7, #12]
 8013f7e:	f7ff fa16 	bl	80133ae <SWAPBYTE>
 8013f82:	4603      	mov	r3, r0
 8013f84:	461a      	mov	r2, r3
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	3301      	adds	r3, #1
 8013f8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	3301      	adds	r3, #1
 8013f94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013f96:	68f8      	ldr	r0, [r7, #12]
 8013f98:	f7ff fa09 	bl	80133ae <SWAPBYTE>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	461a      	mov	r2, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	3301      	adds	r3, #1
 8013fa8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	3301      	adds	r3, #1
 8013fae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013fb0:	68f8      	ldr	r0, [r7, #12]
 8013fb2:	f7ff f9fc 	bl	80133ae <SWAPBYTE>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	461a      	mov	r2, r3
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	80da      	strh	r2, [r3, #6]
}
 8013fbe:	bf00      	nop
 8013fc0:	3710      	adds	r7, #16
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}

08013fc6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fc6:	b580      	push	{r7, lr}
 8013fc8:	b082      	sub	sp, #8
 8013fca:	af00      	add	r7, sp, #0
 8013fcc:	6078      	str	r0, [r7, #4]
 8013fce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013fd0:	2180      	movs	r1, #128	@ 0x80
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f000 fcee 	bl	80149b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013fd8:	2100      	movs	r1, #0
 8013fda:	6878      	ldr	r0, [r7, #4]
 8013fdc:	f000 fcea 	bl	80149b4 <USBD_LL_StallEP>
}
 8013fe0:	bf00      	nop
 8013fe2:	3708      	adds	r7, #8
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b086      	sub	sp, #24
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	60f8      	str	r0, [r7, #12]
 8013ff0:	60b9      	str	r1, [r7, #8]
 8013ff2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d042      	beq.n	8014084 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014002:	6938      	ldr	r0, [r7, #16]
 8014004:	f000 f842 	bl	801408c <USBD_GetLen>
 8014008:	4603      	mov	r3, r0
 801400a:	3301      	adds	r3, #1
 801400c:	005b      	lsls	r3, r3, #1
 801400e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014012:	d808      	bhi.n	8014026 <USBD_GetString+0x3e>
 8014014:	6938      	ldr	r0, [r7, #16]
 8014016:	f000 f839 	bl	801408c <USBD_GetLen>
 801401a:	4603      	mov	r3, r0
 801401c:	3301      	adds	r3, #1
 801401e:	b29b      	uxth	r3, r3
 8014020:	005b      	lsls	r3, r3, #1
 8014022:	b29a      	uxth	r2, r3
 8014024:	e001      	b.n	801402a <USBD_GetString+0x42>
 8014026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801402e:	7dfb      	ldrb	r3, [r7, #23]
 8014030:	68ba      	ldr	r2, [r7, #8]
 8014032:	4413      	add	r3, r2
 8014034:	687a      	ldr	r2, [r7, #4]
 8014036:	7812      	ldrb	r2, [r2, #0]
 8014038:	701a      	strb	r2, [r3, #0]
  idx++;
 801403a:	7dfb      	ldrb	r3, [r7, #23]
 801403c:	3301      	adds	r3, #1
 801403e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014040:	7dfb      	ldrb	r3, [r7, #23]
 8014042:	68ba      	ldr	r2, [r7, #8]
 8014044:	4413      	add	r3, r2
 8014046:	2203      	movs	r2, #3
 8014048:	701a      	strb	r2, [r3, #0]
  idx++;
 801404a:	7dfb      	ldrb	r3, [r7, #23]
 801404c:	3301      	adds	r3, #1
 801404e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014050:	e013      	b.n	801407a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014052:	7dfb      	ldrb	r3, [r7, #23]
 8014054:	68ba      	ldr	r2, [r7, #8]
 8014056:	4413      	add	r3, r2
 8014058:	693a      	ldr	r2, [r7, #16]
 801405a:	7812      	ldrb	r2, [r2, #0]
 801405c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801405e:	693b      	ldr	r3, [r7, #16]
 8014060:	3301      	adds	r3, #1
 8014062:	613b      	str	r3, [r7, #16]
    idx++;
 8014064:	7dfb      	ldrb	r3, [r7, #23]
 8014066:	3301      	adds	r3, #1
 8014068:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801406a:	7dfb      	ldrb	r3, [r7, #23]
 801406c:	68ba      	ldr	r2, [r7, #8]
 801406e:	4413      	add	r3, r2
 8014070:	2200      	movs	r2, #0
 8014072:	701a      	strb	r2, [r3, #0]
    idx++;
 8014074:	7dfb      	ldrb	r3, [r7, #23]
 8014076:	3301      	adds	r3, #1
 8014078:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801407a:	693b      	ldr	r3, [r7, #16]
 801407c:	781b      	ldrb	r3, [r3, #0]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d1e7      	bne.n	8014052 <USBD_GetString+0x6a>
 8014082:	e000      	b.n	8014086 <USBD_GetString+0x9e>
    return;
 8014084:	bf00      	nop
  }
}
 8014086:	3718      	adds	r7, #24
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}

0801408c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801408c:	b480      	push	{r7}
 801408e:	b085      	sub	sp, #20
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014094:	2300      	movs	r3, #0
 8014096:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801409c:	e005      	b.n	80140aa <USBD_GetLen+0x1e>
  {
    len++;
 801409e:	7bfb      	ldrb	r3, [r7, #15]
 80140a0:	3301      	adds	r3, #1
 80140a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	3301      	adds	r3, #1
 80140a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	781b      	ldrb	r3, [r3, #0]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d1f5      	bne.n	801409e <USBD_GetLen+0x12>
  }

  return len;
 80140b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	3714      	adds	r7, #20
 80140b8:	46bd      	mov	sp, r7
 80140ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140be:	4770      	bx	lr

080140c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b084      	sub	sp, #16
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	60f8      	str	r0, [r7, #12]
 80140c8:	60b9      	str	r1, [r7, #8]
 80140ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	2202      	movs	r2, #2
 80140d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	687a      	ldr	r2, [r7, #4]
 80140d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	687a      	ldr	r2, [r7, #4]
 80140de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	68ba      	ldr	r2, [r7, #8]
 80140e4:	2100      	movs	r1, #0
 80140e6:	68f8      	ldr	r0, [r7, #12]
 80140e8:	f000 fced 	bl	8014ac6 <USBD_LL_Transmit>

  return USBD_OK;
 80140ec:	2300      	movs	r3, #0
}
 80140ee:	4618      	mov	r0, r3
 80140f0:	3710      	adds	r7, #16
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bd80      	pop	{r7, pc}

080140f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80140f6:	b580      	push	{r7, lr}
 80140f8:	b084      	sub	sp, #16
 80140fa:	af00      	add	r7, sp, #0
 80140fc:	60f8      	str	r0, [r7, #12]
 80140fe:	60b9      	str	r1, [r7, #8]
 8014100:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	68ba      	ldr	r2, [r7, #8]
 8014106:	2100      	movs	r1, #0
 8014108:	68f8      	ldr	r0, [r7, #12]
 801410a:	f000 fcdc 	bl	8014ac6 <USBD_LL_Transmit>

  return USBD_OK;
 801410e:	2300      	movs	r3, #0
}
 8014110:	4618      	mov	r0, r3
 8014112:	3710      	adds	r7, #16
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}

08014118 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b084      	sub	sp, #16
 801411c:	af00      	add	r7, sp, #0
 801411e:	60f8      	str	r0, [r7, #12]
 8014120:	60b9      	str	r1, [r7, #8]
 8014122:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	2203      	movs	r2, #3
 8014128:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	687a      	ldr	r2, [r7, #4]
 8014130:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	687a      	ldr	r2, [r7, #4]
 8014138:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	68ba      	ldr	r2, [r7, #8]
 8014140:	2100      	movs	r1, #0
 8014142:	68f8      	ldr	r0, [r7, #12]
 8014144:	f000 fce0 	bl	8014b08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014148:	2300      	movs	r3, #0
}
 801414a:	4618      	mov	r0, r3
 801414c:	3710      	adds	r7, #16
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}

08014152 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014152:	b580      	push	{r7, lr}
 8014154:	b084      	sub	sp, #16
 8014156:	af00      	add	r7, sp, #0
 8014158:	60f8      	str	r0, [r7, #12]
 801415a:	60b9      	str	r1, [r7, #8]
 801415c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	68ba      	ldr	r2, [r7, #8]
 8014162:	2100      	movs	r1, #0
 8014164:	68f8      	ldr	r0, [r7, #12]
 8014166:	f000 fccf 	bl	8014b08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801416a:	2300      	movs	r3, #0
}
 801416c:	4618      	mov	r0, r3
 801416e:	3710      	adds	r7, #16
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}

08014174 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b082      	sub	sp, #8
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2204      	movs	r2, #4
 8014180:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014184:	2300      	movs	r3, #0
 8014186:	2200      	movs	r2, #0
 8014188:	2100      	movs	r1, #0
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	f000 fc9b 	bl	8014ac6 <USBD_LL_Transmit>

  return USBD_OK;
 8014190:	2300      	movs	r3, #0
}
 8014192:	4618      	mov	r0, r3
 8014194:	3708      	adds	r7, #8
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}

0801419a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801419a:	b580      	push	{r7, lr}
 801419c:	b082      	sub	sp, #8
 801419e:	af00      	add	r7, sp, #0
 80141a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	2205      	movs	r2, #5
 80141a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80141aa:	2300      	movs	r3, #0
 80141ac:	2200      	movs	r2, #0
 80141ae:	2100      	movs	r1, #0
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f000 fca9 	bl	8014b08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80141b6:	2300      	movs	r3, #0
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3708      	adds	r7, #8
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}

080141c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80141c4:	2201      	movs	r2, #1
 80141c6:	4913      	ldr	r1, [pc, #76]	@ (8014214 <MX_USB_DEVICE_Init+0x54>)
 80141c8:	4813      	ldr	r0, [pc, #76]	@ (8014218 <MX_USB_DEVICE_Init+0x58>)
 80141ca:	f7fe fccd 	bl	8012b68 <USBD_Init>
 80141ce:	4603      	mov	r3, r0
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d001      	beq.n	80141d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80141d4:	f7ed fb7e 	bl	80018d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80141d8:	4910      	ldr	r1, [pc, #64]	@ (801421c <MX_USB_DEVICE_Init+0x5c>)
 80141da:	480f      	ldr	r0, [pc, #60]	@ (8014218 <MX_USB_DEVICE_Init+0x58>)
 80141dc:	f7fe fcf4 	bl	8012bc8 <USBD_RegisterClass>
 80141e0:	4603      	mov	r3, r0
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d001      	beq.n	80141ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80141e6:	f7ed fb75 	bl	80018d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80141ea:	490d      	ldr	r1, [pc, #52]	@ (8014220 <MX_USB_DEVICE_Init+0x60>)
 80141ec:	480a      	ldr	r0, [pc, #40]	@ (8014218 <MX_USB_DEVICE_Init+0x58>)
 80141ee:	f7fe fbeb 	bl	80129c8 <USBD_CDC_RegisterInterface>
 80141f2:	4603      	mov	r3, r0
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d001      	beq.n	80141fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80141f8:	f7ed fb6c 	bl	80018d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80141fc:	4806      	ldr	r0, [pc, #24]	@ (8014218 <MX_USB_DEVICE_Init+0x58>)
 80141fe:	f7fe fd19 	bl	8012c34 <USBD_Start>
 8014202:	4603      	mov	r3, r0
 8014204:	2b00      	cmp	r3, #0
 8014206:	d001      	beq.n	801420c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014208:	f7ed fb64 	bl	80018d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801420c:	f7f6 fa5c 	bl	800a6c8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014210:	bf00      	nop
 8014212:	bd80      	pop	{r7, pc}
 8014214:	240000b0 	.word	0x240000b0
 8014218:	24004f4c 	.word	0x24004f4c
 801421c:	2400001c 	.word	0x2400001c
 8014220:	2400009c 	.word	0x2400009c

08014224 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8014228:	2200      	movs	r2, #0
 801422a:	4905      	ldr	r1, [pc, #20]	@ (8014240 <CDC_Init_HS+0x1c>)
 801422c:	4805      	ldr	r0, [pc, #20]	@ (8014244 <CDC_Init_HS+0x20>)
 801422e:	f7fe fbe5 	bl	80129fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8014232:	4905      	ldr	r1, [pc, #20]	@ (8014248 <CDC_Init_HS+0x24>)
 8014234:	4803      	ldr	r0, [pc, #12]	@ (8014244 <CDC_Init_HS+0x20>)
 8014236:	f7fe fc03 	bl	8012a40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801423a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801423c:	4618      	mov	r0, r3
 801423e:	bd80      	pop	{r7, pc}
 8014240:	24005a28 	.word	0x24005a28
 8014244:	24004f4c 	.word	0x24004f4c
 8014248:	24005228 	.word	0x24005228

0801424c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801424c:	b480      	push	{r7}
 801424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8014250:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8014252:	4618      	mov	r0, r3
 8014254:	46bd      	mov	sp, r7
 8014256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425a:	4770      	bx	lr

0801425c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801425c:	b480      	push	{r7}
 801425e:	b083      	sub	sp, #12
 8014260:	af00      	add	r7, sp, #0
 8014262:	4603      	mov	r3, r0
 8014264:	6039      	str	r1, [r7, #0]
 8014266:	71fb      	strb	r3, [r7, #7]
 8014268:	4613      	mov	r3, r2
 801426a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801426c:	79fb      	ldrb	r3, [r7, #7]
 801426e:	2b23      	cmp	r3, #35	@ 0x23
 8014270:	d84a      	bhi.n	8014308 <CDC_Control_HS+0xac>
 8014272:	a201      	add	r2, pc, #4	@ (adr r2, 8014278 <CDC_Control_HS+0x1c>)
 8014274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014278:	08014309 	.word	0x08014309
 801427c:	08014309 	.word	0x08014309
 8014280:	08014309 	.word	0x08014309
 8014284:	08014309 	.word	0x08014309
 8014288:	08014309 	.word	0x08014309
 801428c:	08014309 	.word	0x08014309
 8014290:	08014309 	.word	0x08014309
 8014294:	08014309 	.word	0x08014309
 8014298:	08014309 	.word	0x08014309
 801429c:	08014309 	.word	0x08014309
 80142a0:	08014309 	.word	0x08014309
 80142a4:	08014309 	.word	0x08014309
 80142a8:	08014309 	.word	0x08014309
 80142ac:	08014309 	.word	0x08014309
 80142b0:	08014309 	.word	0x08014309
 80142b4:	08014309 	.word	0x08014309
 80142b8:	08014309 	.word	0x08014309
 80142bc:	08014309 	.word	0x08014309
 80142c0:	08014309 	.word	0x08014309
 80142c4:	08014309 	.word	0x08014309
 80142c8:	08014309 	.word	0x08014309
 80142cc:	08014309 	.word	0x08014309
 80142d0:	08014309 	.word	0x08014309
 80142d4:	08014309 	.word	0x08014309
 80142d8:	08014309 	.word	0x08014309
 80142dc:	08014309 	.word	0x08014309
 80142e0:	08014309 	.word	0x08014309
 80142e4:	08014309 	.word	0x08014309
 80142e8:	08014309 	.word	0x08014309
 80142ec:	08014309 	.word	0x08014309
 80142f0:	08014309 	.word	0x08014309
 80142f4:	08014309 	.word	0x08014309
 80142f8:	08014309 	.word	0x08014309
 80142fc:	08014309 	.word	0x08014309
 8014300:	08014309 	.word	0x08014309
 8014304:	08014309 	.word	0x08014309
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014308:	bf00      	nop
  }

  return (USBD_OK);
 801430a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801430c:	4618      	mov	r0, r3
 801430e:	370c      	adds	r7, #12
 8014310:	46bd      	mov	sp, r7
 8014312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014316:	4770      	bx	lr

08014318 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b082      	sub	sp, #8
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
 8014320:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8014322:	6879      	ldr	r1, [r7, #4]
 8014324:	4808      	ldr	r0, [pc, #32]	@ (8014348 <CDC_Receive_HS+0x30>)
 8014326:	f7fe fb8b 	bl	8012a40 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801432a:	4807      	ldr	r0, [pc, #28]	@ (8014348 <CDC_Receive_HS+0x30>)
 801432c:	f7fe fbe6 	bl	8012afc <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	461a      	mov	r2, r3
 8014336:	6879      	ldr	r1, [r7, #4]
 8014338:	4804      	ldr	r0, [pc, #16]	@ (801434c <CDC_Receive_HS+0x34>)
 801433a:	f7ee fddf 	bl	8002efc <VibeCheckShell_PutInput>

	return (USBD_OK);
 801433e:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8014340:	4618      	mov	r0, r3
 8014342:	3708      	adds	r7, #8
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}
 8014348:	24004f4c 	.word	0x24004f4c
 801434c:	24000910 	.word	0x24000910

08014350 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b084      	sub	sp, #16
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
 8014358:	460b      	mov	r3, r1
 801435a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801435c:	2300      	movs	r3, #0
 801435e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8014360:	4b0d      	ldr	r3, [pc, #52]	@ (8014398 <CDC_Transmit_HS+0x48>)
 8014362:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014366:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014368:	68bb      	ldr	r3, [r7, #8]
 801436a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801436e:	2b00      	cmp	r3, #0
 8014370:	d001      	beq.n	8014376 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8014372:	2301      	movs	r3, #1
 8014374:	e00b      	b.n	801438e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8014376:	887b      	ldrh	r3, [r7, #2]
 8014378:	461a      	mov	r2, r3
 801437a:	6879      	ldr	r1, [r7, #4]
 801437c:	4806      	ldr	r0, [pc, #24]	@ (8014398 <CDC_Transmit_HS+0x48>)
 801437e:	f7fe fb3d 	bl	80129fc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8014382:	4805      	ldr	r0, [pc, #20]	@ (8014398 <CDC_Transmit_HS+0x48>)
 8014384:	f7fe fb7a 	bl	8012a7c <USBD_CDC_TransmitPacket>
 8014388:	4603      	mov	r3, r0
 801438a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801438c:	7bfb      	ldrb	r3, [r7, #15]
}
 801438e:	4618      	mov	r0, r3
 8014390:	3710      	adds	r7, #16
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
 8014396:	bf00      	nop
 8014398:	24004f4c 	.word	0x24004f4c

0801439c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801439c:	b480      	push	{r7}
 801439e:	b087      	sub	sp, #28
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	60f8      	str	r0, [r7, #12]
 80143a4:	60b9      	str	r1, [r7, #8]
 80143a6:	4613      	mov	r3, r2
 80143a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80143aa:	2300      	movs	r3, #0
 80143ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80143ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80143b2:	4618      	mov	r0, r3
 80143b4:	371c      	adds	r7, #28
 80143b6:	46bd      	mov	sp, r7
 80143b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143bc:	4770      	bx	lr
	...

080143c0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80143c0:	b480      	push	{r7}
 80143c2:	b083      	sub	sp, #12
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	4603      	mov	r3, r0
 80143c8:	6039      	str	r1, [r7, #0]
 80143ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80143cc:	683b      	ldr	r3, [r7, #0]
 80143ce:	2212      	movs	r2, #18
 80143d0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80143d2:	4b03      	ldr	r3, [pc, #12]	@ (80143e0 <USBD_HS_DeviceDescriptor+0x20>)
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	370c      	adds	r7, #12
 80143d8:	46bd      	mov	sp, r7
 80143da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143de:	4770      	bx	lr
 80143e0:	240000d0 	.word	0x240000d0

080143e4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80143e4:	b480      	push	{r7}
 80143e6:	b083      	sub	sp, #12
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	4603      	mov	r3, r0
 80143ec:	6039      	str	r1, [r7, #0]
 80143ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	2204      	movs	r2, #4
 80143f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80143f6:	4b03      	ldr	r3, [pc, #12]	@ (8014404 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	370c      	adds	r7, #12
 80143fc:	46bd      	mov	sp, r7
 80143fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014402:	4770      	bx	lr
 8014404:	240000e4 	.word	0x240000e4

08014408 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b082      	sub	sp, #8
 801440c:	af00      	add	r7, sp, #0
 801440e:	4603      	mov	r3, r0
 8014410:	6039      	str	r1, [r7, #0]
 8014412:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014414:	79fb      	ldrb	r3, [r7, #7]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d105      	bne.n	8014426 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801441a:	683a      	ldr	r2, [r7, #0]
 801441c:	4907      	ldr	r1, [pc, #28]	@ (801443c <USBD_HS_ProductStrDescriptor+0x34>)
 801441e:	4808      	ldr	r0, [pc, #32]	@ (8014440 <USBD_HS_ProductStrDescriptor+0x38>)
 8014420:	f7ff fde2 	bl	8013fe8 <USBD_GetString>
 8014424:	e004      	b.n	8014430 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8014426:	683a      	ldr	r2, [r7, #0]
 8014428:	4904      	ldr	r1, [pc, #16]	@ (801443c <USBD_HS_ProductStrDescriptor+0x34>)
 801442a:	4805      	ldr	r0, [pc, #20]	@ (8014440 <USBD_HS_ProductStrDescriptor+0x38>)
 801442c:	f7ff fddc 	bl	8013fe8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014430:	4b02      	ldr	r3, [pc, #8]	@ (801443c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8014432:	4618      	mov	r0, r3
 8014434:	3708      	adds	r7, #8
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}
 801443a:	bf00      	nop
 801443c:	24006228 	.word	0x24006228
 8014440:	08019ab0 	.word	0x08019ab0

08014444 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b082      	sub	sp, #8
 8014448:	af00      	add	r7, sp, #0
 801444a:	4603      	mov	r3, r0
 801444c:	6039      	str	r1, [r7, #0]
 801444e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014450:	683a      	ldr	r2, [r7, #0]
 8014452:	4904      	ldr	r1, [pc, #16]	@ (8014464 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8014454:	4804      	ldr	r0, [pc, #16]	@ (8014468 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8014456:	f7ff fdc7 	bl	8013fe8 <USBD_GetString>
  return USBD_StrDesc;
 801445a:	4b02      	ldr	r3, [pc, #8]	@ (8014464 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801445c:	4618      	mov	r0, r3
 801445e:	3708      	adds	r7, #8
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}
 8014464:	24006228 	.word	0x24006228
 8014468:	08019abc 	.word	0x08019abc

0801446c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b082      	sub	sp, #8
 8014470:	af00      	add	r7, sp, #0
 8014472:	4603      	mov	r3, r0
 8014474:	6039      	str	r1, [r7, #0]
 8014476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	221a      	movs	r2, #26
 801447c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801447e:	f000 f843 	bl	8014508 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8014482:	4b02      	ldr	r3, [pc, #8]	@ (801448c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8014484:	4618      	mov	r0, r3
 8014486:	3708      	adds	r7, #8
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}
 801448c:	240000e8 	.word	0x240000e8

08014490 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b082      	sub	sp, #8
 8014494:	af00      	add	r7, sp, #0
 8014496:	4603      	mov	r3, r0
 8014498:	6039      	str	r1, [r7, #0]
 801449a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801449c:	79fb      	ldrb	r3, [r7, #7]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d105      	bne.n	80144ae <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80144a2:	683a      	ldr	r2, [r7, #0]
 80144a4:	4907      	ldr	r1, [pc, #28]	@ (80144c4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80144a6:	4808      	ldr	r0, [pc, #32]	@ (80144c8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80144a8:	f7ff fd9e 	bl	8013fe8 <USBD_GetString>
 80144ac:	e004      	b.n	80144b8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80144ae:	683a      	ldr	r2, [r7, #0]
 80144b0:	4904      	ldr	r1, [pc, #16]	@ (80144c4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80144b2:	4805      	ldr	r0, [pc, #20]	@ (80144c8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80144b4:	f7ff fd98 	bl	8013fe8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80144b8:	4b02      	ldr	r3, [pc, #8]	@ (80144c4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3708      	adds	r7, #8
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	24006228 	.word	0x24006228
 80144c8:	08019ac8 	.word	0x08019ac8

080144cc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b082      	sub	sp, #8
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	4603      	mov	r3, r0
 80144d4:	6039      	str	r1, [r7, #0]
 80144d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80144d8:	79fb      	ldrb	r3, [r7, #7]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d105      	bne.n	80144ea <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80144de:	683a      	ldr	r2, [r7, #0]
 80144e0:	4907      	ldr	r1, [pc, #28]	@ (8014500 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80144e2:	4808      	ldr	r0, [pc, #32]	@ (8014504 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80144e4:	f7ff fd80 	bl	8013fe8 <USBD_GetString>
 80144e8:	e004      	b.n	80144f4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80144ea:	683a      	ldr	r2, [r7, #0]
 80144ec:	4904      	ldr	r1, [pc, #16]	@ (8014500 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80144ee:	4805      	ldr	r0, [pc, #20]	@ (8014504 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80144f0:	f7ff fd7a 	bl	8013fe8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80144f4:	4b02      	ldr	r3, [pc, #8]	@ (8014500 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3708      	adds	r7, #8
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
 80144fe:	bf00      	nop
 8014500:	24006228 	.word	0x24006228
 8014504:	08019ad4 	.word	0x08019ad4

08014508 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b084      	sub	sp, #16
 801450c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801450e:	4b0f      	ldr	r3, [pc, #60]	@ (801454c <Get_SerialNum+0x44>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014514:	4b0e      	ldr	r3, [pc, #56]	@ (8014550 <Get_SerialNum+0x48>)
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801451a:	4b0e      	ldr	r3, [pc, #56]	@ (8014554 <Get_SerialNum+0x4c>)
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014520:	68fa      	ldr	r2, [r7, #12]
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	4413      	add	r3, r2
 8014526:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d009      	beq.n	8014542 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801452e:	2208      	movs	r2, #8
 8014530:	4909      	ldr	r1, [pc, #36]	@ (8014558 <Get_SerialNum+0x50>)
 8014532:	68f8      	ldr	r0, [r7, #12]
 8014534:	f000 f814 	bl	8014560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014538:	2204      	movs	r2, #4
 801453a:	4908      	ldr	r1, [pc, #32]	@ (801455c <Get_SerialNum+0x54>)
 801453c:	68b8      	ldr	r0, [r7, #8]
 801453e:	f000 f80f 	bl	8014560 <IntToUnicode>
  }
}
 8014542:	bf00      	nop
 8014544:	3710      	adds	r7, #16
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}
 801454a:	bf00      	nop
 801454c:	1ff1e800 	.word	0x1ff1e800
 8014550:	1ff1e804 	.word	0x1ff1e804
 8014554:	1ff1e808 	.word	0x1ff1e808
 8014558:	240000ea 	.word	0x240000ea
 801455c:	240000fa 	.word	0x240000fa

08014560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014560:	b480      	push	{r7}
 8014562:	b087      	sub	sp, #28
 8014564:	af00      	add	r7, sp, #0
 8014566:	60f8      	str	r0, [r7, #12]
 8014568:	60b9      	str	r1, [r7, #8]
 801456a:	4613      	mov	r3, r2
 801456c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801456e:	2300      	movs	r3, #0
 8014570:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014572:	2300      	movs	r3, #0
 8014574:	75fb      	strb	r3, [r7, #23]
 8014576:	e027      	b.n	80145c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	0f1b      	lsrs	r3, r3, #28
 801457c:	2b09      	cmp	r3, #9
 801457e:	d80b      	bhi.n	8014598 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	0f1b      	lsrs	r3, r3, #28
 8014584:	b2da      	uxtb	r2, r3
 8014586:	7dfb      	ldrb	r3, [r7, #23]
 8014588:	005b      	lsls	r3, r3, #1
 801458a:	4619      	mov	r1, r3
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	440b      	add	r3, r1
 8014590:	3230      	adds	r2, #48	@ 0x30
 8014592:	b2d2      	uxtb	r2, r2
 8014594:	701a      	strb	r2, [r3, #0]
 8014596:	e00a      	b.n	80145ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	0f1b      	lsrs	r3, r3, #28
 801459c:	b2da      	uxtb	r2, r3
 801459e:	7dfb      	ldrb	r3, [r7, #23]
 80145a0:	005b      	lsls	r3, r3, #1
 80145a2:	4619      	mov	r1, r3
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	440b      	add	r3, r1
 80145a8:	3237      	adds	r2, #55	@ 0x37
 80145aa:	b2d2      	uxtb	r2, r2
 80145ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	011b      	lsls	r3, r3, #4
 80145b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80145b4:	7dfb      	ldrb	r3, [r7, #23]
 80145b6:	005b      	lsls	r3, r3, #1
 80145b8:	3301      	adds	r3, #1
 80145ba:	68ba      	ldr	r2, [r7, #8]
 80145bc:	4413      	add	r3, r2
 80145be:	2200      	movs	r2, #0
 80145c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80145c2:	7dfb      	ldrb	r3, [r7, #23]
 80145c4:	3301      	adds	r3, #1
 80145c6:	75fb      	strb	r3, [r7, #23]
 80145c8:	7dfa      	ldrb	r2, [r7, #23]
 80145ca:	79fb      	ldrb	r3, [r7, #7]
 80145cc:	429a      	cmp	r2, r3
 80145ce:	d3d3      	bcc.n	8014578 <IntToUnicode+0x18>
  }
}
 80145d0:	bf00      	nop
 80145d2:	bf00      	nop
 80145d4:	371c      	adds	r7, #28
 80145d6:	46bd      	mov	sp, r7
 80145d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145dc:	4770      	bx	lr
	...

080145e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b0b2      	sub	sp, #200	@ 0xc8
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80145e8:	f107 0310 	add.w	r3, r7, #16
 80145ec:	22b8      	movs	r2, #184	@ 0xb8
 80145ee:	2100      	movs	r1, #0
 80145f0:	4618      	mov	r0, r3
 80145f2:	f001 fe1e 	bl	8016232 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	4a1a      	ldr	r2, [pc, #104]	@ (8014664 <HAL_PCD_MspInit+0x84>)
 80145fc:	4293      	cmp	r3, r2
 80145fe:	d12c      	bne.n	801465a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014600:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8014604:	f04f 0300 	mov.w	r3, #0
 8014608:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801460c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8014610:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014614:	f107 0310 	add.w	r3, r7, #16
 8014618:	4618      	mov	r0, r3
 801461a:	f7f6 ffcb 	bl	800b5b4 <HAL_RCCEx_PeriphCLKConfig>
 801461e:	4603      	mov	r3, r0
 8014620:	2b00      	cmp	r3, #0
 8014622:	d001      	beq.n	8014628 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8014624:	f7ed f956 	bl	80018d4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8014628:	f7f6 f84e 	bl	800a6c8 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801462c:	4b0e      	ldr	r3, [pc, #56]	@ (8014668 <HAL_PCD_MspInit+0x88>)
 801462e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014632:	4a0d      	ldr	r2, [pc, #52]	@ (8014668 <HAL_PCD_MspInit+0x88>)
 8014634:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8014638:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801463c:	4b0a      	ldr	r3, [pc, #40]	@ (8014668 <HAL_PCD_MspInit+0x88>)
 801463e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014646:	60fb      	str	r3, [r7, #12]
 8014648:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801464a:	2200      	movs	r2, #0
 801464c:	2100      	movs	r1, #0
 801464e:	204d      	movs	r0, #77	@ 0x4d
 8014650:	f7f1 fe1b 	bl	800628a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8014654:	204d      	movs	r0, #77	@ 0x4d
 8014656:	f7f1 fe32 	bl	80062be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801465a:	bf00      	nop
 801465c:	37c8      	adds	r7, #200	@ 0xc8
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
 8014662:	bf00      	nop
 8014664:	40040000 	.word	0x40040000
 8014668:	58024400 	.word	0x58024400

0801466c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8014680:	4619      	mov	r1, r3
 8014682:	4610      	mov	r0, r2
 8014684:	f7fe fb23 	bl	8012cce <USBD_LL_SetupStage>
}
 8014688:	bf00      	nop
 801468a:	3708      	adds	r7, #8
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}

08014690 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b082      	sub	sp, #8
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	460b      	mov	r3, r1
 801469a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80146a2:	78fa      	ldrb	r2, [r7, #3]
 80146a4:	6879      	ldr	r1, [r7, #4]
 80146a6:	4613      	mov	r3, r2
 80146a8:	00db      	lsls	r3, r3, #3
 80146aa:	4413      	add	r3, r2
 80146ac:	009b      	lsls	r3, r3, #2
 80146ae:	440b      	add	r3, r1
 80146b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80146b4:	681a      	ldr	r2, [r3, #0]
 80146b6:	78fb      	ldrb	r3, [r7, #3]
 80146b8:	4619      	mov	r1, r3
 80146ba:	f7fe fb5d 	bl	8012d78 <USBD_LL_DataOutStage>
}
 80146be:	bf00      	nop
 80146c0:	3708      	adds	r7, #8
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}

080146c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80146c6:	b580      	push	{r7, lr}
 80146c8:	b082      	sub	sp, #8
 80146ca:	af00      	add	r7, sp, #0
 80146cc:	6078      	str	r0, [r7, #4]
 80146ce:	460b      	mov	r3, r1
 80146d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80146d8:	78fa      	ldrb	r2, [r7, #3]
 80146da:	6879      	ldr	r1, [r7, #4]
 80146dc:	4613      	mov	r3, r2
 80146de:	00db      	lsls	r3, r3, #3
 80146e0:	4413      	add	r3, r2
 80146e2:	009b      	lsls	r3, r3, #2
 80146e4:	440b      	add	r3, r1
 80146e6:	3320      	adds	r3, #32
 80146e8:	681a      	ldr	r2, [r3, #0]
 80146ea:	78fb      	ldrb	r3, [r7, #3]
 80146ec:	4619      	mov	r1, r3
 80146ee:	f7fe fbf6 	bl	8012ede <USBD_LL_DataInStage>
}
 80146f2:	bf00      	nop
 80146f4:	3708      	adds	r7, #8
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}

080146fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80146fa:	b580      	push	{r7, lr}
 80146fc:	b082      	sub	sp, #8
 80146fe:	af00      	add	r7, sp, #0
 8014700:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014708:	4618      	mov	r0, r3
 801470a:	f7fe fd30 	bl	801316e <USBD_LL_SOF>
}
 801470e:	bf00      	nop
 8014710:	3708      	adds	r7, #8
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}

08014716 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014716:	b580      	push	{r7, lr}
 8014718:	b084      	sub	sp, #16
 801471a:	af00      	add	r7, sp, #0
 801471c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801471e:	2301      	movs	r3, #1
 8014720:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	79db      	ldrb	r3, [r3, #7]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d102      	bne.n	8014730 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801472a:	2300      	movs	r3, #0
 801472c:	73fb      	strb	r3, [r7, #15]
 801472e:	e008      	b.n	8014742 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	79db      	ldrb	r3, [r3, #7]
 8014734:	2b02      	cmp	r3, #2
 8014736:	d102      	bne.n	801473e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014738:	2301      	movs	r3, #1
 801473a:	73fb      	strb	r3, [r7, #15]
 801473c:	e001      	b.n	8014742 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801473e:	f7ed f8c9 	bl	80018d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014748:	7bfa      	ldrb	r2, [r7, #15]
 801474a:	4611      	mov	r1, r2
 801474c:	4618      	mov	r0, r3
 801474e:	f7fe fcca 	bl	80130e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014758:	4618      	mov	r0, r3
 801475a:	f7fe fc72 	bl	8013042 <USBD_LL_Reset>
}
 801475e:	bf00      	nop
 8014760:	3710      	adds	r7, #16
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}
	...

08014768 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b082      	sub	sp, #8
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014776:	4618      	mov	r0, r3
 8014778:	f7fe fcc5 	bl	8013106 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	687a      	ldr	r2, [r7, #4]
 8014788:	6812      	ldr	r2, [r2, #0]
 801478a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801478e:	f043 0301 	orr.w	r3, r3, #1
 8014792:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	7adb      	ldrb	r3, [r3, #11]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d005      	beq.n	80147a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801479c:	4b04      	ldr	r3, [pc, #16]	@ (80147b0 <HAL_PCD_SuspendCallback+0x48>)
 801479e:	691b      	ldr	r3, [r3, #16]
 80147a0:	4a03      	ldr	r2, [pc, #12]	@ (80147b0 <HAL_PCD_SuspendCallback+0x48>)
 80147a2:	f043 0306 	orr.w	r3, r3, #6
 80147a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80147a8:	bf00      	nop
 80147aa:	3708      	adds	r7, #8
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	e000ed00 	.word	0xe000ed00

080147b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b082      	sub	sp, #8
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80147c2:	4618      	mov	r0, r3
 80147c4:	f7fe fcbb 	bl	801313e <USBD_LL_Resume>
}
 80147c8:	bf00      	nop
 80147ca:	3708      	adds	r7, #8
 80147cc:	46bd      	mov	sp, r7
 80147ce:	bd80      	pop	{r7, pc}

080147d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
 80147d8:	460b      	mov	r3, r1
 80147da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80147e2:	78fa      	ldrb	r2, [r7, #3]
 80147e4:	4611      	mov	r1, r2
 80147e6:	4618      	mov	r0, r3
 80147e8:	f7fe fd13 	bl	8013212 <USBD_LL_IsoOUTIncomplete>
}
 80147ec:	bf00      	nop
 80147ee:	3708      	adds	r7, #8
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}

080147f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b082      	sub	sp, #8
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
 80147fc:	460b      	mov	r3, r1
 80147fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014806:	78fa      	ldrb	r2, [r7, #3]
 8014808:	4611      	mov	r1, r2
 801480a:	4618      	mov	r0, r3
 801480c:	f7fe fccf 	bl	80131ae <USBD_LL_IsoINIncomplete>
}
 8014810:	bf00      	nop
 8014812:	3708      	adds	r7, #8
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}

08014818 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014826:	4618      	mov	r0, r3
 8014828:	f7fe fd25 	bl	8013276 <USBD_LL_DevConnected>
}
 801482c:	bf00      	nop
 801482e:	3708      	adds	r7, #8
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}

08014834 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014842:	4618      	mov	r0, r3
 8014844:	f7fe fd22 	bl	801328c <USBD_LL_DevDisconnected>
}
 8014848:	bf00      	nop
 801484a:	3708      	adds	r7, #8
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}

08014850 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b082      	sub	sp, #8
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	2b01      	cmp	r3, #1
 801485e:	d140      	bne.n	80148e2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8014860:	4a22      	ldr	r2, [pc, #136]	@ (80148ec <USBD_LL_Init+0x9c>)
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	4a20      	ldr	r2, [pc, #128]	@ (80148ec <USBD_LL_Init+0x9c>)
 801486c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8014870:	4b1e      	ldr	r3, [pc, #120]	@ (80148ec <USBD_LL_Init+0x9c>)
 8014872:	4a1f      	ldr	r2, [pc, #124]	@ (80148f0 <USBD_LL_Init+0xa0>)
 8014874:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8014876:	4b1d      	ldr	r3, [pc, #116]	@ (80148ec <USBD_LL_Init+0x9c>)
 8014878:	2209      	movs	r2, #9
 801487a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801487c:	4b1b      	ldr	r3, [pc, #108]	@ (80148ec <USBD_LL_Init+0x9c>)
 801487e:	2202      	movs	r2, #2
 8014880:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8014882:	4b1a      	ldr	r3, [pc, #104]	@ (80148ec <USBD_LL_Init+0x9c>)
 8014884:	2200      	movs	r2, #0
 8014886:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8014888:	4b18      	ldr	r3, [pc, #96]	@ (80148ec <USBD_LL_Init+0x9c>)
 801488a:	2202      	movs	r2, #2
 801488c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801488e:	4b17      	ldr	r3, [pc, #92]	@ (80148ec <USBD_LL_Init+0x9c>)
 8014890:	2200      	movs	r2, #0
 8014892:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8014894:	4b15      	ldr	r3, [pc, #84]	@ (80148ec <USBD_LL_Init+0x9c>)
 8014896:	2200      	movs	r2, #0
 8014898:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801489a:	4b14      	ldr	r3, [pc, #80]	@ (80148ec <USBD_LL_Init+0x9c>)
 801489c:	2200      	movs	r2, #0
 801489e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80148a0:	4b12      	ldr	r3, [pc, #72]	@ (80148ec <USBD_LL_Init+0x9c>)
 80148a2:	2200      	movs	r2, #0
 80148a4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80148a6:	4b11      	ldr	r3, [pc, #68]	@ (80148ec <USBD_LL_Init+0x9c>)
 80148a8:	2200      	movs	r2, #0
 80148aa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80148ac:	4b0f      	ldr	r3, [pc, #60]	@ (80148ec <USBD_LL_Init+0x9c>)
 80148ae:	2200      	movs	r2, #0
 80148b0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80148b2:	480e      	ldr	r0, [pc, #56]	@ (80148ec <USBD_LL_Init+0x9c>)
 80148b4:	f7f4 fc2f 	bl	8009116 <HAL_PCD_Init>
 80148b8:	4603      	mov	r3, r0
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d001      	beq.n	80148c2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80148be:	f7ed f809 	bl	80018d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80148c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80148c6:	4809      	ldr	r0, [pc, #36]	@ (80148ec <USBD_LL_Init+0x9c>)
 80148c8:	f7f5 fe83 	bl	800a5d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80148cc:	2280      	movs	r2, #128	@ 0x80
 80148ce:	2100      	movs	r1, #0
 80148d0:	4806      	ldr	r0, [pc, #24]	@ (80148ec <USBD_LL_Init+0x9c>)
 80148d2:	f7f5 fe37 	bl	800a544 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80148d6:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80148da:	2101      	movs	r1, #1
 80148dc:	4803      	ldr	r0, [pc, #12]	@ (80148ec <USBD_LL_Init+0x9c>)
 80148de:	f7f5 fe31 	bl	800a544 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80148e2:	2300      	movs	r3, #0
}
 80148e4:	4618      	mov	r0, r3
 80148e6:	3708      	adds	r7, #8
 80148e8:	46bd      	mov	sp, r7
 80148ea:	bd80      	pop	{r7, pc}
 80148ec:	24006428 	.word	0x24006428
 80148f0:	40040000 	.word	0x40040000

080148f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b084      	sub	sp, #16
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80148fc:	2300      	movs	r3, #0
 80148fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014900:	2300      	movs	r3, #0
 8014902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801490a:	4618      	mov	r0, r3
 801490c:	f7f4 fd0f 	bl	800932e <HAL_PCD_Start>
 8014910:	4603      	mov	r3, r0
 8014912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014914:	7bfb      	ldrb	r3, [r7, #15]
 8014916:	4618      	mov	r0, r3
 8014918:	f000 f942 	bl	8014ba0 <USBD_Get_USB_Status>
 801491c:	4603      	mov	r3, r0
 801491e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014920:	7bbb      	ldrb	r3, [r7, #14]
}
 8014922:	4618      	mov	r0, r3
 8014924:	3710      	adds	r7, #16
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}

0801492a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801492a:	b580      	push	{r7, lr}
 801492c:	b084      	sub	sp, #16
 801492e:	af00      	add	r7, sp, #0
 8014930:	6078      	str	r0, [r7, #4]
 8014932:	4608      	mov	r0, r1
 8014934:	4611      	mov	r1, r2
 8014936:	461a      	mov	r2, r3
 8014938:	4603      	mov	r3, r0
 801493a:	70fb      	strb	r3, [r7, #3]
 801493c:	460b      	mov	r3, r1
 801493e:	70bb      	strb	r3, [r7, #2]
 8014940:	4613      	mov	r3, r2
 8014942:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014944:	2300      	movs	r3, #0
 8014946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014948:	2300      	movs	r3, #0
 801494a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014952:	78bb      	ldrb	r3, [r7, #2]
 8014954:	883a      	ldrh	r2, [r7, #0]
 8014956:	78f9      	ldrb	r1, [r7, #3]
 8014958:	f7f5 fa10 	bl	8009d7c <HAL_PCD_EP_Open>
 801495c:	4603      	mov	r3, r0
 801495e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014960:	7bfb      	ldrb	r3, [r7, #15]
 8014962:	4618      	mov	r0, r3
 8014964:	f000 f91c 	bl	8014ba0 <USBD_Get_USB_Status>
 8014968:	4603      	mov	r3, r0
 801496a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801496c:	7bbb      	ldrb	r3, [r7, #14]
}
 801496e:	4618      	mov	r0, r3
 8014970:	3710      	adds	r7, #16
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}

08014976 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014976:	b580      	push	{r7, lr}
 8014978:	b084      	sub	sp, #16
 801497a:	af00      	add	r7, sp, #0
 801497c:	6078      	str	r0, [r7, #4]
 801497e:	460b      	mov	r3, r1
 8014980:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014982:	2300      	movs	r3, #0
 8014984:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014986:	2300      	movs	r3, #0
 8014988:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014990:	78fa      	ldrb	r2, [r7, #3]
 8014992:	4611      	mov	r1, r2
 8014994:	4618      	mov	r0, r3
 8014996:	f7f5 fa59 	bl	8009e4c <HAL_PCD_EP_Close>
 801499a:	4603      	mov	r3, r0
 801499c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801499e:	7bfb      	ldrb	r3, [r7, #15]
 80149a0:	4618      	mov	r0, r3
 80149a2:	f000 f8fd 	bl	8014ba0 <USBD_Get_USB_Status>
 80149a6:	4603      	mov	r3, r0
 80149a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80149aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3710      	adds	r7, #16
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}

080149b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b084      	sub	sp, #16
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	460b      	mov	r3, r1
 80149be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80149c0:	2300      	movs	r3, #0
 80149c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80149c4:	2300      	movs	r3, #0
 80149c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80149ce:	78fa      	ldrb	r2, [r7, #3]
 80149d0:	4611      	mov	r1, r2
 80149d2:	4618      	mov	r0, r3
 80149d4:	f7f5 fb11 	bl	8009ffa <HAL_PCD_EP_SetStall>
 80149d8:	4603      	mov	r3, r0
 80149da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80149dc:	7bfb      	ldrb	r3, [r7, #15]
 80149de:	4618      	mov	r0, r3
 80149e0:	f000 f8de 	bl	8014ba0 <USBD_Get_USB_Status>
 80149e4:	4603      	mov	r3, r0
 80149e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80149e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3710      	adds	r7, #16
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}

080149f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80149f2:	b580      	push	{r7, lr}
 80149f4:	b084      	sub	sp, #16
 80149f6:	af00      	add	r7, sp, #0
 80149f8:	6078      	str	r0, [r7, #4]
 80149fa:	460b      	mov	r3, r1
 80149fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80149fe:	2300      	movs	r3, #0
 8014a00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a02:	2300      	movs	r3, #0
 8014a04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014a0c:	78fa      	ldrb	r2, [r7, #3]
 8014a0e:	4611      	mov	r1, r2
 8014a10:	4618      	mov	r0, r3
 8014a12:	f7f5 fb55 	bl	800a0c0 <HAL_PCD_EP_ClrStall>
 8014a16:	4603      	mov	r3, r0
 8014a18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a1a:	7bfb      	ldrb	r3, [r7, #15]
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f000 f8bf 	bl	8014ba0 <USBD_Get_USB_Status>
 8014a22:	4603      	mov	r3, r0
 8014a24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	3710      	adds	r7, #16
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bd80      	pop	{r7, pc}

08014a30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a30:	b480      	push	{r7}
 8014a32:	b085      	sub	sp, #20
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
 8014a38:	460b      	mov	r3, r1
 8014a3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014a42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	da0b      	bge.n	8014a64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014a4c:	78fb      	ldrb	r3, [r7, #3]
 8014a4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014a52:	68f9      	ldr	r1, [r7, #12]
 8014a54:	4613      	mov	r3, r2
 8014a56:	00db      	lsls	r3, r3, #3
 8014a58:	4413      	add	r3, r2
 8014a5a:	009b      	lsls	r3, r3, #2
 8014a5c:	440b      	add	r3, r1
 8014a5e:	3316      	adds	r3, #22
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	e00b      	b.n	8014a7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014a64:	78fb      	ldrb	r3, [r7, #3]
 8014a66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014a6a:	68f9      	ldr	r1, [r7, #12]
 8014a6c:	4613      	mov	r3, r2
 8014a6e:	00db      	lsls	r3, r3, #3
 8014a70:	4413      	add	r3, r2
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	440b      	add	r3, r1
 8014a76:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8014a7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	3714      	adds	r7, #20
 8014a80:	46bd      	mov	sp, r7
 8014a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a86:	4770      	bx	lr

08014a88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b084      	sub	sp, #16
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	460b      	mov	r3, r1
 8014a92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a94:	2300      	movs	r3, #0
 8014a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a98:	2300      	movs	r3, #0
 8014a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014aa2:	78fa      	ldrb	r2, [r7, #3]
 8014aa4:	4611      	mov	r1, r2
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f7f5 f944 	bl	8009d34 <HAL_PCD_SetAddress>
 8014aac:	4603      	mov	r3, r0
 8014aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ab0:	7bfb      	ldrb	r3, [r7, #15]
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f000 f874 	bl	8014ba0 <USBD_Get_USB_Status>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3710      	adds	r7, #16
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}

08014ac6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014ac6:	b580      	push	{r7, lr}
 8014ac8:	b086      	sub	sp, #24
 8014aca:	af00      	add	r7, sp, #0
 8014acc:	60f8      	str	r0, [r7, #12]
 8014ace:	607a      	str	r2, [r7, #4]
 8014ad0:	603b      	str	r3, [r7, #0]
 8014ad2:	460b      	mov	r3, r1
 8014ad4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ada:	2300      	movs	r3, #0
 8014adc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014ae4:	7af9      	ldrb	r1, [r7, #11]
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	687a      	ldr	r2, [r7, #4]
 8014aea:	f7f5 fa4c 	bl	8009f86 <HAL_PCD_EP_Transmit>
 8014aee:	4603      	mov	r3, r0
 8014af0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014af2:	7dfb      	ldrb	r3, [r7, #23]
 8014af4:	4618      	mov	r0, r3
 8014af6:	f000 f853 	bl	8014ba0 <USBD_Get_USB_Status>
 8014afa:	4603      	mov	r3, r0
 8014afc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014afe:	7dbb      	ldrb	r3, [r7, #22]
}
 8014b00:	4618      	mov	r0, r3
 8014b02:	3718      	adds	r7, #24
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}

08014b08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b086      	sub	sp, #24
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	60f8      	str	r0, [r7, #12]
 8014b10:	607a      	str	r2, [r7, #4]
 8014b12:	603b      	str	r3, [r7, #0]
 8014b14:	460b      	mov	r3, r1
 8014b16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b18:	2300      	movs	r3, #0
 8014b1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014b26:	7af9      	ldrb	r1, [r7, #11]
 8014b28:	683b      	ldr	r3, [r7, #0]
 8014b2a:	687a      	ldr	r2, [r7, #4]
 8014b2c:	f7f5 f9d8 	bl	8009ee0 <HAL_PCD_EP_Receive>
 8014b30:	4603      	mov	r3, r0
 8014b32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b34:	7dfb      	ldrb	r3, [r7, #23]
 8014b36:	4618      	mov	r0, r3
 8014b38:	f000 f832 	bl	8014ba0 <USBD_Get_USB_Status>
 8014b3c:	4603      	mov	r3, r0
 8014b3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014b40:	7dbb      	ldrb	r3, [r7, #22]
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	3718      	adds	r7, #24
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}

08014b4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b4a:	b580      	push	{r7, lr}
 8014b4c:	b082      	sub	sp, #8
 8014b4e:	af00      	add	r7, sp, #0
 8014b50:	6078      	str	r0, [r7, #4]
 8014b52:	460b      	mov	r3, r1
 8014b54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014b5c:	78fa      	ldrb	r2, [r7, #3]
 8014b5e:	4611      	mov	r1, r2
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7f5 f9f8 	bl	8009f56 <HAL_PCD_EP_GetRxCount>
 8014b66:	4603      	mov	r3, r0
}
 8014b68:	4618      	mov	r0, r3
 8014b6a:	3708      	adds	r7, #8
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	bd80      	pop	{r7, pc}

08014b70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014b70:	b480      	push	{r7}
 8014b72:	b083      	sub	sp, #12
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014b78:	4b03      	ldr	r3, [pc, #12]	@ (8014b88 <USBD_static_malloc+0x18>)
}
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	370c      	adds	r7, #12
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b84:	4770      	bx	lr
 8014b86:	bf00      	nop
 8014b88:	2400690c 	.word	0x2400690c

08014b8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014b8c:	b480      	push	{r7}
 8014b8e:	b083      	sub	sp, #12
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8014b94:	bf00      	nop
 8014b96:	370c      	adds	r7, #12
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9e:	4770      	bx	lr

08014ba0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014ba0:	b480      	push	{r7}
 8014ba2:	b085      	sub	sp, #20
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014baa:	2300      	movs	r3, #0
 8014bac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014bae:	79fb      	ldrb	r3, [r7, #7]
 8014bb0:	2b03      	cmp	r3, #3
 8014bb2:	d817      	bhi.n	8014be4 <USBD_Get_USB_Status+0x44>
 8014bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8014bbc <USBD_Get_USB_Status+0x1c>)
 8014bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bba:	bf00      	nop
 8014bbc:	08014bcd 	.word	0x08014bcd
 8014bc0:	08014bd3 	.word	0x08014bd3
 8014bc4:	08014bd9 	.word	0x08014bd9
 8014bc8:	08014bdf 	.word	0x08014bdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	73fb      	strb	r3, [r7, #15]
    break;
 8014bd0:	e00b      	b.n	8014bea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014bd2:	2303      	movs	r3, #3
 8014bd4:	73fb      	strb	r3, [r7, #15]
    break;
 8014bd6:	e008      	b.n	8014bea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014bd8:	2301      	movs	r3, #1
 8014bda:	73fb      	strb	r3, [r7, #15]
    break;
 8014bdc:	e005      	b.n	8014bea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014bde:	2303      	movs	r3, #3
 8014be0:	73fb      	strb	r3, [r7, #15]
    break;
 8014be2:	e002      	b.n	8014bea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014be4:	2303      	movs	r3, #3
 8014be6:	73fb      	strb	r3, [r7, #15]
    break;
 8014be8:	bf00      	nop
  }
  return usb_status;
 8014bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bec:	4618      	mov	r0, r3
 8014bee:	3714      	adds	r7, #20
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf6:	4770      	bx	lr

08014bf8 <atof>:
 8014bf8:	2100      	movs	r1, #0
 8014bfa:	f000 bdb3 	b.w	8015764 <strtod>

08014bfe <sulp>:
 8014bfe:	b570      	push	{r4, r5, r6, lr}
 8014c00:	4604      	mov	r4, r0
 8014c02:	460d      	mov	r5, r1
 8014c04:	4616      	mov	r6, r2
 8014c06:	ec45 4b10 	vmov	d0, r4, r5
 8014c0a:	f003 f967 	bl	8017edc <__ulp>
 8014c0e:	b17e      	cbz	r6, 8014c30 <sulp+0x32>
 8014c10:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014c14:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	dd09      	ble.n	8014c30 <sulp+0x32>
 8014c1c:	051b      	lsls	r3, r3, #20
 8014c1e:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8014c22:	2000      	movs	r0, #0
 8014c24:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8014c28:	ec41 0b17 	vmov	d7, r0, r1
 8014c2c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014c30:	bd70      	pop	{r4, r5, r6, pc}
 8014c32:	0000      	movs	r0, r0
 8014c34:	0000      	movs	r0, r0
	...

08014c38 <_strtod_l>:
 8014c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c3c:	ed2d 8b0a 	vpush	{d8-d12}
 8014c40:	b097      	sub	sp, #92	@ 0x5c
 8014c42:	4688      	mov	r8, r1
 8014c44:	920e      	str	r2, [sp, #56]	@ 0x38
 8014c46:	2200      	movs	r2, #0
 8014c48:	9212      	str	r2, [sp, #72]	@ 0x48
 8014c4a:	9005      	str	r0, [sp, #20]
 8014c4c:	f04f 0a00 	mov.w	sl, #0
 8014c50:	f04f 0b00 	mov.w	fp, #0
 8014c54:	460a      	mov	r2, r1
 8014c56:	9211      	str	r2, [sp, #68]	@ 0x44
 8014c58:	7811      	ldrb	r1, [r2, #0]
 8014c5a:	292b      	cmp	r1, #43	@ 0x2b
 8014c5c:	d04c      	beq.n	8014cf8 <_strtod_l+0xc0>
 8014c5e:	d839      	bhi.n	8014cd4 <_strtod_l+0x9c>
 8014c60:	290d      	cmp	r1, #13
 8014c62:	d833      	bhi.n	8014ccc <_strtod_l+0x94>
 8014c64:	2908      	cmp	r1, #8
 8014c66:	d833      	bhi.n	8014cd0 <_strtod_l+0x98>
 8014c68:	2900      	cmp	r1, #0
 8014c6a:	d03c      	beq.n	8014ce6 <_strtod_l+0xae>
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	9208      	str	r2, [sp, #32]
 8014c70:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8014c72:	782a      	ldrb	r2, [r5, #0]
 8014c74:	2a30      	cmp	r2, #48	@ 0x30
 8014c76:	f040 80b5 	bne.w	8014de4 <_strtod_l+0x1ac>
 8014c7a:	786a      	ldrb	r2, [r5, #1]
 8014c7c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014c80:	2a58      	cmp	r2, #88	@ 0x58
 8014c82:	d170      	bne.n	8014d66 <_strtod_l+0x12e>
 8014c84:	9302      	str	r3, [sp, #8]
 8014c86:	9b08      	ldr	r3, [sp, #32]
 8014c88:	9301      	str	r3, [sp, #4]
 8014c8a:	ab12      	add	r3, sp, #72	@ 0x48
 8014c8c:	9300      	str	r3, [sp, #0]
 8014c8e:	4a8b      	ldr	r2, [pc, #556]	@ (8014ebc <_strtod_l+0x284>)
 8014c90:	9805      	ldr	r0, [sp, #20]
 8014c92:	ab13      	add	r3, sp, #76	@ 0x4c
 8014c94:	a911      	add	r1, sp, #68	@ 0x44
 8014c96:	f002 fa13 	bl	80170c0 <__gethex>
 8014c9a:	f010 060f 	ands.w	r6, r0, #15
 8014c9e:	4604      	mov	r4, r0
 8014ca0:	d005      	beq.n	8014cae <_strtod_l+0x76>
 8014ca2:	2e06      	cmp	r6, #6
 8014ca4:	d12a      	bne.n	8014cfc <_strtod_l+0xc4>
 8014ca6:	3501      	adds	r5, #1
 8014ca8:	2300      	movs	r3, #0
 8014caa:	9511      	str	r5, [sp, #68]	@ 0x44
 8014cac:	9308      	str	r3, [sp, #32]
 8014cae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	f040 852f 	bne.w	8015714 <_strtod_l+0xadc>
 8014cb6:	9b08      	ldr	r3, [sp, #32]
 8014cb8:	ec4b ab10 	vmov	d0, sl, fp
 8014cbc:	b1cb      	cbz	r3, 8014cf2 <_strtod_l+0xba>
 8014cbe:	eeb1 0b40 	vneg.f64	d0, d0
 8014cc2:	b017      	add	sp, #92	@ 0x5c
 8014cc4:	ecbd 8b0a 	vpop	{d8-d12}
 8014cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ccc:	2920      	cmp	r1, #32
 8014cce:	d1cd      	bne.n	8014c6c <_strtod_l+0x34>
 8014cd0:	3201      	adds	r2, #1
 8014cd2:	e7c0      	b.n	8014c56 <_strtod_l+0x1e>
 8014cd4:	292d      	cmp	r1, #45	@ 0x2d
 8014cd6:	d1c9      	bne.n	8014c6c <_strtod_l+0x34>
 8014cd8:	2101      	movs	r1, #1
 8014cda:	9108      	str	r1, [sp, #32]
 8014cdc:	1c51      	adds	r1, r2, #1
 8014cde:	9111      	str	r1, [sp, #68]	@ 0x44
 8014ce0:	7852      	ldrb	r2, [r2, #1]
 8014ce2:	2a00      	cmp	r2, #0
 8014ce4:	d1c4      	bne.n	8014c70 <_strtod_l+0x38>
 8014ce6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ce8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	f040 850f 	bne.w	8015710 <_strtod_l+0xad8>
 8014cf2:	ec4b ab10 	vmov	d0, sl, fp
 8014cf6:	e7e4      	b.n	8014cc2 <_strtod_l+0x8a>
 8014cf8:	2100      	movs	r1, #0
 8014cfa:	e7ee      	b.n	8014cda <_strtod_l+0xa2>
 8014cfc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014cfe:	b13a      	cbz	r2, 8014d10 <_strtod_l+0xd8>
 8014d00:	2135      	movs	r1, #53	@ 0x35
 8014d02:	a814      	add	r0, sp, #80	@ 0x50
 8014d04:	f003 f9e1 	bl	80180ca <__copybits>
 8014d08:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014d0a:	9805      	ldr	r0, [sp, #20]
 8014d0c:	f002 fdb2 	bl	8017874 <_Bfree>
 8014d10:	1e73      	subs	r3, r6, #1
 8014d12:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014d14:	2b04      	cmp	r3, #4
 8014d16:	d806      	bhi.n	8014d26 <_strtod_l+0xee>
 8014d18:	e8df f003 	tbb	[pc, r3]
 8014d1c:	201d0314 	.word	0x201d0314
 8014d20:	14          	.byte	0x14
 8014d21:	00          	.byte	0x00
 8014d22:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8014d26:	05e3      	lsls	r3, r4, #23
 8014d28:	bf48      	it	mi
 8014d2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8014d2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014d32:	0d1b      	lsrs	r3, r3, #20
 8014d34:	051b      	lsls	r3, r3, #20
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d1b9      	bne.n	8014cae <_strtod_l+0x76>
 8014d3a:	f001 faeb 	bl	8016314 <__errno>
 8014d3e:	2322      	movs	r3, #34	@ 0x22
 8014d40:	6003      	str	r3, [r0, #0]
 8014d42:	e7b4      	b.n	8014cae <_strtod_l+0x76>
 8014d44:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8014d48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8014d4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8014d50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014d54:	e7e7      	b.n	8014d26 <_strtod_l+0xee>
 8014d56:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8014ec4 <_strtod_l+0x28c>
 8014d5a:	e7e4      	b.n	8014d26 <_strtod_l+0xee>
 8014d5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8014d60:	f04f 3aff 	mov.w	sl, #4294967295
 8014d64:	e7df      	b.n	8014d26 <_strtod_l+0xee>
 8014d66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014d68:	1c5a      	adds	r2, r3, #1
 8014d6a:	9211      	str	r2, [sp, #68]	@ 0x44
 8014d6c:	785b      	ldrb	r3, [r3, #1]
 8014d6e:	2b30      	cmp	r3, #48	@ 0x30
 8014d70:	d0f9      	beq.n	8014d66 <_strtod_l+0x12e>
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d09b      	beq.n	8014cae <_strtod_l+0x76>
 8014d76:	2301      	movs	r3, #1
 8014d78:	2600      	movs	r6, #0
 8014d7a:	9307      	str	r3, [sp, #28]
 8014d7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014d7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d80:	46b1      	mov	r9, r6
 8014d82:	4635      	mov	r5, r6
 8014d84:	220a      	movs	r2, #10
 8014d86:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8014d88:	7804      	ldrb	r4, [r0, #0]
 8014d8a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8014d8e:	b2d9      	uxtb	r1, r3
 8014d90:	2909      	cmp	r1, #9
 8014d92:	d929      	bls.n	8014de8 <_strtod_l+0x1b0>
 8014d94:	494a      	ldr	r1, [pc, #296]	@ (8014ec0 <_strtod_l+0x288>)
 8014d96:	2201      	movs	r2, #1
 8014d98:	f001 fa60 	bl	801625c <strncmp>
 8014d9c:	b378      	cbz	r0, 8014dfe <_strtod_l+0x1c6>
 8014d9e:	2000      	movs	r0, #0
 8014da0:	4622      	mov	r2, r4
 8014da2:	462b      	mov	r3, r5
 8014da4:	4607      	mov	r7, r0
 8014da6:	9006      	str	r0, [sp, #24]
 8014da8:	2a65      	cmp	r2, #101	@ 0x65
 8014daa:	d001      	beq.n	8014db0 <_strtod_l+0x178>
 8014dac:	2a45      	cmp	r2, #69	@ 0x45
 8014dae:	d117      	bne.n	8014de0 <_strtod_l+0x1a8>
 8014db0:	b91b      	cbnz	r3, 8014dba <_strtod_l+0x182>
 8014db2:	9b07      	ldr	r3, [sp, #28]
 8014db4:	4303      	orrs	r3, r0
 8014db6:	d096      	beq.n	8014ce6 <_strtod_l+0xae>
 8014db8:	2300      	movs	r3, #0
 8014dba:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8014dbe:	f108 0201 	add.w	r2, r8, #1
 8014dc2:	9211      	str	r2, [sp, #68]	@ 0x44
 8014dc4:	f898 2001 	ldrb.w	r2, [r8, #1]
 8014dc8:	2a2b      	cmp	r2, #43	@ 0x2b
 8014dca:	d06b      	beq.n	8014ea4 <_strtod_l+0x26c>
 8014dcc:	2a2d      	cmp	r2, #45	@ 0x2d
 8014dce:	d071      	beq.n	8014eb4 <_strtod_l+0x27c>
 8014dd0:	f04f 0e00 	mov.w	lr, #0
 8014dd4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8014dd8:	2c09      	cmp	r4, #9
 8014dda:	d979      	bls.n	8014ed0 <_strtod_l+0x298>
 8014ddc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8014de0:	2400      	movs	r4, #0
 8014de2:	e094      	b.n	8014f0e <_strtod_l+0x2d6>
 8014de4:	2300      	movs	r3, #0
 8014de6:	e7c7      	b.n	8014d78 <_strtod_l+0x140>
 8014de8:	2d08      	cmp	r5, #8
 8014dea:	f100 0001 	add.w	r0, r0, #1
 8014dee:	bfd4      	ite	le
 8014df0:	fb02 3909 	mlale	r9, r2, r9, r3
 8014df4:	fb02 3606 	mlagt	r6, r2, r6, r3
 8014df8:	3501      	adds	r5, #1
 8014dfa:	9011      	str	r0, [sp, #68]	@ 0x44
 8014dfc:	e7c3      	b.n	8014d86 <_strtod_l+0x14e>
 8014dfe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014e00:	1c5a      	adds	r2, r3, #1
 8014e02:	9211      	str	r2, [sp, #68]	@ 0x44
 8014e04:	785a      	ldrb	r2, [r3, #1]
 8014e06:	b375      	cbz	r5, 8014e66 <_strtod_l+0x22e>
 8014e08:	4607      	mov	r7, r0
 8014e0a:	462b      	mov	r3, r5
 8014e0c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8014e10:	2909      	cmp	r1, #9
 8014e12:	d913      	bls.n	8014e3c <_strtod_l+0x204>
 8014e14:	2101      	movs	r1, #1
 8014e16:	9106      	str	r1, [sp, #24]
 8014e18:	e7c6      	b.n	8014da8 <_strtod_l+0x170>
 8014e1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014e1c:	1c5a      	adds	r2, r3, #1
 8014e1e:	9211      	str	r2, [sp, #68]	@ 0x44
 8014e20:	785a      	ldrb	r2, [r3, #1]
 8014e22:	3001      	adds	r0, #1
 8014e24:	2a30      	cmp	r2, #48	@ 0x30
 8014e26:	d0f8      	beq.n	8014e1a <_strtod_l+0x1e2>
 8014e28:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8014e2c:	2b08      	cmp	r3, #8
 8014e2e:	f200 8476 	bhi.w	801571e <_strtod_l+0xae6>
 8014e32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014e34:	930a      	str	r3, [sp, #40]	@ 0x28
 8014e36:	4607      	mov	r7, r0
 8014e38:	2000      	movs	r0, #0
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	3a30      	subs	r2, #48	@ 0x30
 8014e3e:	f100 0101 	add.w	r1, r0, #1
 8014e42:	d023      	beq.n	8014e8c <_strtod_l+0x254>
 8014e44:	440f      	add	r7, r1
 8014e46:	eb00 0c03 	add.w	ip, r0, r3
 8014e4a:	4619      	mov	r1, r3
 8014e4c:	240a      	movs	r4, #10
 8014e4e:	4561      	cmp	r1, ip
 8014e50:	d10b      	bne.n	8014e6a <_strtod_l+0x232>
 8014e52:	1c5c      	adds	r4, r3, #1
 8014e54:	4403      	add	r3, r0
 8014e56:	2b08      	cmp	r3, #8
 8014e58:	4404      	add	r4, r0
 8014e5a:	dc11      	bgt.n	8014e80 <_strtod_l+0x248>
 8014e5c:	230a      	movs	r3, #10
 8014e5e:	fb03 2909 	mla	r9, r3, r9, r2
 8014e62:	2100      	movs	r1, #0
 8014e64:	e013      	b.n	8014e8e <_strtod_l+0x256>
 8014e66:	4628      	mov	r0, r5
 8014e68:	e7dc      	b.n	8014e24 <_strtod_l+0x1ec>
 8014e6a:	2908      	cmp	r1, #8
 8014e6c:	f101 0101 	add.w	r1, r1, #1
 8014e70:	dc02      	bgt.n	8014e78 <_strtod_l+0x240>
 8014e72:	fb04 f909 	mul.w	r9, r4, r9
 8014e76:	e7ea      	b.n	8014e4e <_strtod_l+0x216>
 8014e78:	2910      	cmp	r1, #16
 8014e7a:	bfd8      	it	le
 8014e7c:	4366      	mulle	r6, r4
 8014e7e:	e7e6      	b.n	8014e4e <_strtod_l+0x216>
 8014e80:	2b0f      	cmp	r3, #15
 8014e82:	dcee      	bgt.n	8014e62 <_strtod_l+0x22a>
 8014e84:	230a      	movs	r3, #10
 8014e86:	fb03 2606 	mla	r6, r3, r6, r2
 8014e8a:	e7ea      	b.n	8014e62 <_strtod_l+0x22a>
 8014e8c:	461c      	mov	r4, r3
 8014e8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014e90:	1c5a      	adds	r2, r3, #1
 8014e92:	9211      	str	r2, [sp, #68]	@ 0x44
 8014e94:	785a      	ldrb	r2, [r3, #1]
 8014e96:	4608      	mov	r0, r1
 8014e98:	4623      	mov	r3, r4
 8014e9a:	e7b7      	b.n	8014e0c <_strtod_l+0x1d4>
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	2700      	movs	r7, #0
 8014ea0:	9306      	str	r3, [sp, #24]
 8014ea2:	e786      	b.n	8014db2 <_strtod_l+0x17a>
 8014ea4:	f04f 0e00 	mov.w	lr, #0
 8014ea8:	f108 0202 	add.w	r2, r8, #2
 8014eac:	9211      	str	r2, [sp, #68]	@ 0x44
 8014eae:	f898 2002 	ldrb.w	r2, [r8, #2]
 8014eb2:	e78f      	b.n	8014dd4 <_strtod_l+0x19c>
 8014eb4:	f04f 0e01 	mov.w	lr, #1
 8014eb8:	e7f6      	b.n	8014ea8 <_strtod_l+0x270>
 8014eba:	bf00      	nop
 8014ebc:	08019c0c 	.word	0x08019c0c
 8014ec0:	08019bf4 	.word	0x08019bf4
 8014ec4:	7ff00000 	.word	0x7ff00000
 8014ec8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014eca:	1c54      	adds	r4, r2, #1
 8014ecc:	9411      	str	r4, [sp, #68]	@ 0x44
 8014ece:	7852      	ldrb	r2, [r2, #1]
 8014ed0:	2a30      	cmp	r2, #48	@ 0x30
 8014ed2:	d0f9      	beq.n	8014ec8 <_strtod_l+0x290>
 8014ed4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8014ed8:	2c08      	cmp	r4, #8
 8014eda:	d881      	bhi.n	8014de0 <_strtod_l+0x1a8>
 8014edc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8014ee0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014ee2:	9209      	str	r2, [sp, #36]	@ 0x24
 8014ee4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014ee6:	1c51      	adds	r1, r2, #1
 8014ee8:	9111      	str	r1, [sp, #68]	@ 0x44
 8014eea:	7852      	ldrb	r2, [r2, #1]
 8014eec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8014ef0:	2c09      	cmp	r4, #9
 8014ef2:	d938      	bls.n	8014f66 <_strtod_l+0x32e>
 8014ef4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014ef6:	1b0c      	subs	r4, r1, r4
 8014ef8:	2c08      	cmp	r4, #8
 8014efa:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8014efe:	dc02      	bgt.n	8014f06 <_strtod_l+0x2ce>
 8014f00:	4564      	cmp	r4, ip
 8014f02:	bfa8      	it	ge
 8014f04:	4664      	movge	r4, ip
 8014f06:	f1be 0f00 	cmp.w	lr, #0
 8014f0a:	d000      	beq.n	8014f0e <_strtod_l+0x2d6>
 8014f0c:	4264      	negs	r4, r4
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d14e      	bne.n	8014fb0 <_strtod_l+0x378>
 8014f12:	9b07      	ldr	r3, [sp, #28]
 8014f14:	4318      	orrs	r0, r3
 8014f16:	f47f aeca 	bne.w	8014cae <_strtod_l+0x76>
 8014f1a:	9b06      	ldr	r3, [sp, #24]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	f47f aee2 	bne.w	8014ce6 <_strtod_l+0xae>
 8014f22:	2a69      	cmp	r2, #105	@ 0x69
 8014f24:	d027      	beq.n	8014f76 <_strtod_l+0x33e>
 8014f26:	dc24      	bgt.n	8014f72 <_strtod_l+0x33a>
 8014f28:	2a49      	cmp	r2, #73	@ 0x49
 8014f2a:	d024      	beq.n	8014f76 <_strtod_l+0x33e>
 8014f2c:	2a4e      	cmp	r2, #78	@ 0x4e
 8014f2e:	f47f aeda 	bne.w	8014ce6 <_strtod_l+0xae>
 8014f32:	4997      	ldr	r1, [pc, #604]	@ (8015190 <_strtod_l+0x558>)
 8014f34:	a811      	add	r0, sp, #68	@ 0x44
 8014f36:	f002 fae5 	bl	8017504 <__match>
 8014f3a:	2800      	cmp	r0, #0
 8014f3c:	f43f aed3 	beq.w	8014ce6 <_strtod_l+0xae>
 8014f40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014f42:	781b      	ldrb	r3, [r3, #0]
 8014f44:	2b28      	cmp	r3, #40	@ 0x28
 8014f46:	d12d      	bne.n	8014fa4 <_strtod_l+0x36c>
 8014f48:	4992      	ldr	r1, [pc, #584]	@ (8015194 <_strtod_l+0x55c>)
 8014f4a:	aa14      	add	r2, sp, #80	@ 0x50
 8014f4c:	a811      	add	r0, sp, #68	@ 0x44
 8014f4e:	f002 faed 	bl	801752c <__hexnan>
 8014f52:	2805      	cmp	r0, #5
 8014f54:	d126      	bne.n	8014fa4 <_strtod_l+0x36c>
 8014f56:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014f58:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8014f5c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8014f60:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8014f64:	e6a3      	b.n	8014cae <_strtod_l+0x76>
 8014f66:	240a      	movs	r4, #10
 8014f68:	fb04 2c0c 	mla	ip, r4, ip, r2
 8014f6c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8014f70:	e7b8      	b.n	8014ee4 <_strtod_l+0x2ac>
 8014f72:	2a6e      	cmp	r2, #110	@ 0x6e
 8014f74:	e7db      	b.n	8014f2e <_strtod_l+0x2f6>
 8014f76:	4988      	ldr	r1, [pc, #544]	@ (8015198 <_strtod_l+0x560>)
 8014f78:	a811      	add	r0, sp, #68	@ 0x44
 8014f7a:	f002 fac3 	bl	8017504 <__match>
 8014f7e:	2800      	cmp	r0, #0
 8014f80:	f43f aeb1 	beq.w	8014ce6 <_strtod_l+0xae>
 8014f84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014f86:	4985      	ldr	r1, [pc, #532]	@ (801519c <_strtod_l+0x564>)
 8014f88:	3b01      	subs	r3, #1
 8014f8a:	a811      	add	r0, sp, #68	@ 0x44
 8014f8c:	9311      	str	r3, [sp, #68]	@ 0x44
 8014f8e:	f002 fab9 	bl	8017504 <__match>
 8014f92:	b910      	cbnz	r0, 8014f9a <_strtod_l+0x362>
 8014f94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014f96:	3301      	adds	r3, #1
 8014f98:	9311      	str	r3, [sp, #68]	@ 0x44
 8014f9a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80151b0 <_strtod_l+0x578>
 8014f9e:	f04f 0a00 	mov.w	sl, #0
 8014fa2:	e684      	b.n	8014cae <_strtod_l+0x76>
 8014fa4:	487e      	ldr	r0, [pc, #504]	@ (80151a0 <_strtod_l+0x568>)
 8014fa6:	f001 f9f3 	bl	8016390 <nan>
 8014faa:	ec5b ab10 	vmov	sl, fp, d0
 8014fae:	e67e      	b.n	8014cae <_strtod_l+0x76>
 8014fb0:	ee07 9a90 	vmov	s15, r9
 8014fb4:	1be2      	subs	r2, r4, r7
 8014fb6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014fba:	2d00      	cmp	r5, #0
 8014fbc:	bf08      	it	eq
 8014fbe:	461d      	moveq	r5, r3
 8014fc0:	2b10      	cmp	r3, #16
 8014fc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8014fc4:	461a      	mov	r2, r3
 8014fc6:	bfa8      	it	ge
 8014fc8:	2210      	movge	r2, #16
 8014fca:	2b09      	cmp	r3, #9
 8014fcc:	ec5b ab17 	vmov	sl, fp, d7
 8014fd0:	dc15      	bgt.n	8014ffe <_strtod_l+0x3c6>
 8014fd2:	1be1      	subs	r1, r4, r7
 8014fd4:	2900      	cmp	r1, #0
 8014fd6:	f43f ae6a 	beq.w	8014cae <_strtod_l+0x76>
 8014fda:	eba4 0107 	sub.w	r1, r4, r7
 8014fde:	dd72      	ble.n	80150c6 <_strtod_l+0x48e>
 8014fe0:	2916      	cmp	r1, #22
 8014fe2:	dc59      	bgt.n	8015098 <_strtod_l+0x460>
 8014fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80151a4 <_strtod_l+0x56c>)
 8014fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014fe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014fec:	ed93 7b00 	vldr	d7, [r3]
 8014ff0:	ec4b ab16 	vmov	d6, sl, fp
 8014ff4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014ff8:	ec5b ab17 	vmov	sl, fp, d7
 8014ffc:	e657      	b.n	8014cae <_strtod_l+0x76>
 8014ffe:	4969      	ldr	r1, [pc, #420]	@ (80151a4 <_strtod_l+0x56c>)
 8015000:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8015004:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8015008:	ee06 6a90 	vmov	s13, r6
 801500c:	2b0f      	cmp	r3, #15
 801500e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8015012:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015016:	ec5b ab16 	vmov	sl, fp, d6
 801501a:	ddda      	ble.n	8014fd2 <_strtod_l+0x39a>
 801501c:	1a9a      	subs	r2, r3, r2
 801501e:	1be1      	subs	r1, r4, r7
 8015020:	440a      	add	r2, r1
 8015022:	2a00      	cmp	r2, #0
 8015024:	f340 8094 	ble.w	8015150 <_strtod_l+0x518>
 8015028:	f012 000f 	ands.w	r0, r2, #15
 801502c:	d00a      	beq.n	8015044 <_strtod_l+0x40c>
 801502e:	495d      	ldr	r1, [pc, #372]	@ (80151a4 <_strtod_l+0x56c>)
 8015030:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015034:	ed91 7b00 	vldr	d7, [r1]
 8015038:	ec4b ab16 	vmov	d6, sl, fp
 801503c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015040:	ec5b ab17 	vmov	sl, fp, d7
 8015044:	f032 020f 	bics.w	r2, r2, #15
 8015048:	d073      	beq.n	8015132 <_strtod_l+0x4fa>
 801504a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 801504e:	dd47      	ble.n	80150e0 <_strtod_l+0x4a8>
 8015050:	2400      	movs	r4, #0
 8015052:	4625      	mov	r5, r4
 8015054:	9407      	str	r4, [sp, #28]
 8015056:	4626      	mov	r6, r4
 8015058:	9a05      	ldr	r2, [sp, #20]
 801505a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80151b0 <_strtod_l+0x578>
 801505e:	2322      	movs	r3, #34	@ 0x22
 8015060:	6013      	str	r3, [r2, #0]
 8015062:	f04f 0a00 	mov.w	sl, #0
 8015066:	9b07      	ldr	r3, [sp, #28]
 8015068:	2b00      	cmp	r3, #0
 801506a:	f43f ae20 	beq.w	8014cae <_strtod_l+0x76>
 801506e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015070:	9805      	ldr	r0, [sp, #20]
 8015072:	f002 fbff 	bl	8017874 <_Bfree>
 8015076:	9805      	ldr	r0, [sp, #20]
 8015078:	4631      	mov	r1, r6
 801507a:	f002 fbfb 	bl	8017874 <_Bfree>
 801507e:	9805      	ldr	r0, [sp, #20]
 8015080:	4629      	mov	r1, r5
 8015082:	f002 fbf7 	bl	8017874 <_Bfree>
 8015086:	9907      	ldr	r1, [sp, #28]
 8015088:	9805      	ldr	r0, [sp, #20]
 801508a:	f002 fbf3 	bl	8017874 <_Bfree>
 801508e:	9805      	ldr	r0, [sp, #20]
 8015090:	4621      	mov	r1, r4
 8015092:	f002 fbef 	bl	8017874 <_Bfree>
 8015096:	e60a      	b.n	8014cae <_strtod_l+0x76>
 8015098:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 801509c:	1be0      	subs	r0, r4, r7
 801509e:	4281      	cmp	r1, r0
 80150a0:	dbbc      	blt.n	801501c <_strtod_l+0x3e4>
 80150a2:	4a40      	ldr	r2, [pc, #256]	@ (80151a4 <_strtod_l+0x56c>)
 80150a4:	f1c3 030f 	rsb	r3, r3, #15
 80150a8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80150ac:	ed91 7b00 	vldr	d7, [r1]
 80150b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80150b2:	ec4b ab16 	vmov	d6, sl, fp
 80150b6:	1acb      	subs	r3, r1, r3
 80150b8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80150bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80150c0:	ed92 6b00 	vldr	d6, [r2]
 80150c4:	e796      	b.n	8014ff4 <_strtod_l+0x3bc>
 80150c6:	3116      	adds	r1, #22
 80150c8:	dba8      	blt.n	801501c <_strtod_l+0x3e4>
 80150ca:	4b36      	ldr	r3, [pc, #216]	@ (80151a4 <_strtod_l+0x56c>)
 80150cc:	1b3c      	subs	r4, r7, r4
 80150ce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80150d2:	ed94 7b00 	vldr	d7, [r4]
 80150d6:	ec4b ab16 	vmov	d6, sl, fp
 80150da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80150de:	e78b      	b.n	8014ff8 <_strtod_l+0x3c0>
 80150e0:	2000      	movs	r0, #0
 80150e2:	ec4b ab17 	vmov	d7, sl, fp
 80150e6:	4e30      	ldr	r6, [pc, #192]	@ (80151a8 <_strtod_l+0x570>)
 80150e8:	1112      	asrs	r2, r2, #4
 80150ea:	4601      	mov	r1, r0
 80150ec:	2a01      	cmp	r2, #1
 80150ee:	dc23      	bgt.n	8015138 <_strtod_l+0x500>
 80150f0:	b108      	cbz	r0, 80150f6 <_strtod_l+0x4be>
 80150f2:	ec5b ab17 	vmov	sl, fp, d7
 80150f6:	4a2c      	ldr	r2, [pc, #176]	@ (80151a8 <_strtod_l+0x570>)
 80150f8:	482c      	ldr	r0, [pc, #176]	@ (80151ac <_strtod_l+0x574>)
 80150fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80150fe:	ed92 7b00 	vldr	d7, [r2]
 8015102:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015106:	ec4b ab16 	vmov	d6, sl, fp
 801510a:	4a29      	ldr	r2, [pc, #164]	@ (80151b0 <_strtod_l+0x578>)
 801510c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015110:	ee17 1a90 	vmov	r1, s15
 8015114:	400a      	ands	r2, r1
 8015116:	4282      	cmp	r2, r0
 8015118:	ec5b ab17 	vmov	sl, fp, d7
 801511c:	d898      	bhi.n	8015050 <_strtod_l+0x418>
 801511e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8015122:	4282      	cmp	r2, r0
 8015124:	bf86      	itte	hi
 8015126:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80151b4 <_strtod_l+0x57c>
 801512a:	f04f 3aff 	movhi.w	sl, #4294967295
 801512e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8015132:	2200      	movs	r2, #0
 8015134:	9206      	str	r2, [sp, #24]
 8015136:	e076      	b.n	8015226 <_strtod_l+0x5ee>
 8015138:	f012 0f01 	tst.w	r2, #1
 801513c:	d004      	beq.n	8015148 <_strtod_l+0x510>
 801513e:	ed96 6b00 	vldr	d6, [r6]
 8015142:	2001      	movs	r0, #1
 8015144:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015148:	3101      	adds	r1, #1
 801514a:	1052      	asrs	r2, r2, #1
 801514c:	3608      	adds	r6, #8
 801514e:	e7cd      	b.n	80150ec <_strtod_l+0x4b4>
 8015150:	d0ef      	beq.n	8015132 <_strtod_l+0x4fa>
 8015152:	4252      	negs	r2, r2
 8015154:	f012 000f 	ands.w	r0, r2, #15
 8015158:	d00a      	beq.n	8015170 <_strtod_l+0x538>
 801515a:	4912      	ldr	r1, [pc, #72]	@ (80151a4 <_strtod_l+0x56c>)
 801515c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015160:	ed91 7b00 	vldr	d7, [r1]
 8015164:	ec4b ab16 	vmov	d6, sl, fp
 8015168:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801516c:	ec5b ab17 	vmov	sl, fp, d7
 8015170:	1112      	asrs	r2, r2, #4
 8015172:	d0de      	beq.n	8015132 <_strtod_l+0x4fa>
 8015174:	2a1f      	cmp	r2, #31
 8015176:	dd1f      	ble.n	80151b8 <_strtod_l+0x580>
 8015178:	2400      	movs	r4, #0
 801517a:	4625      	mov	r5, r4
 801517c:	9407      	str	r4, [sp, #28]
 801517e:	4626      	mov	r6, r4
 8015180:	9a05      	ldr	r2, [sp, #20]
 8015182:	2322      	movs	r3, #34	@ 0x22
 8015184:	f04f 0a00 	mov.w	sl, #0
 8015188:	f04f 0b00 	mov.w	fp, #0
 801518c:	6013      	str	r3, [r2, #0]
 801518e:	e76a      	b.n	8015066 <_strtod_l+0x42e>
 8015190:	08019d56 	.word	0x08019d56
 8015194:	08019bf8 	.word	0x08019bf8
 8015198:	08019d4e 	.word	0x08019d4e
 801519c:	08019d88 	.word	0x08019d88
 80151a0:	0801a014 	.word	0x0801a014
 80151a4:	08019f00 	.word	0x08019f00
 80151a8:	08019ed8 	.word	0x08019ed8
 80151ac:	7ca00000 	.word	0x7ca00000
 80151b0:	7ff00000 	.word	0x7ff00000
 80151b4:	7fefffff 	.word	0x7fefffff
 80151b8:	f012 0110 	ands.w	r1, r2, #16
 80151bc:	bf18      	it	ne
 80151be:	216a      	movne	r1, #106	@ 0x6a
 80151c0:	9106      	str	r1, [sp, #24]
 80151c2:	ec4b ab17 	vmov	d7, sl, fp
 80151c6:	49b0      	ldr	r1, [pc, #704]	@ (8015488 <_strtod_l+0x850>)
 80151c8:	2000      	movs	r0, #0
 80151ca:	07d6      	lsls	r6, r2, #31
 80151cc:	d504      	bpl.n	80151d8 <_strtod_l+0x5a0>
 80151ce:	ed91 6b00 	vldr	d6, [r1]
 80151d2:	2001      	movs	r0, #1
 80151d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80151d8:	1052      	asrs	r2, r2, #1
 80151da:	f101 0108 	add.w	r1, r1, #8
 80151de:	d1f4      	bne.n	80151ca <_strtod_l+0x592>
 80151e0:	b108      	cbz	r0, 80151e6 <_strtod_l+0x5ae>
 80151e2:	ec5b ab17 	vmov	sl, fp, d7
 80151e6:	9a06      	ldr	r2, [sp, #24]
 80151e8:	b1b2      	cbz	r2, 8015218 <_strtod_l+0x5e0>
 80151ea:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80151ee:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80151f2:	2a00      	cmp	r2, #0
 80151f4:	4658      	mov	r0, fp
 80151f6:	dd0f      	ble.n	8015218 <_strtod_l+0x5e0>
 80151f8:	2a1f      	cmp	r2, #31
 80151fa:	dd55      	ble.n	80152a8 <_strtod_l+0x670>
 80151fc:	2a34      	cmp	r2, #52	@ 0x34
 80151fe:	bfde      	ittt	le
 8015200:	f04f 32ff 	movle.w	r2, #4294967295
 8015204:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8015208:	408a      	lslle	r2, r1
 801520a:	f04f 0a00 	mov.w	sl, #0
 801520e:	bfcc      	ite	gt
 8015210:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015214:	ea02 0b00 	andle.w	fp, r2, r0
 8015218:	ec4b ab17 	vmov	d7, sl, fp
 801521c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015224:	d0a8      	beq.n	8015178 <_strtod_l+0x540>
 8015226:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015228:	9805      	ldr	r0, [sp, #20]
 801522a:	f8cd 9000 	str.w	r9, [sp]
 801522e:	462a      	mov	r2, r5
 8015230:	f002 fb88 	bl	8017944 <__s2b>
 8015234:	9007      	str	r0, [sp, #28]
 8015236:	2800      	cmp	r0, #0
 8015238:	f43f af0a 	beq.w	8015050 <_strtod_l+0x418>
 801523c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801523e:	1b3f      	subs	r7, r7, r4
 8015240:	2b00      	cmp	r3, #0
 8015242:	bfb4      	ite	lt
 8015244:	463b      	movlt	r3, r7
 8015246:	2300      	movge	r3, #0
 8015248:	930a      	str	r3, [sp, #40]	@ 0x28
 801524a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801524c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8015478 <_strtod_l+0x840>
 8015250:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015254:	2400      	movs	r4, #0
 8015256:	930d      	str	r3, [sp, #52]	@ 0x34
 8015258:	4625      	mov	r5, r4
 801525a:	9b07      	ldr	r3, [sp, #28]
 801525c:	9805      	ldr	r0, [sp, #20]
 801525e:	6859      	ldr	r1, [r3, #4]
 8015260:	f002 fac8 	bl	80177f4 <_Balloc>
 8015264:	4606      	mov	r6, r0
 8015266:	2800      	cmp	r0, #0
 8015268:	f43f aef6 	beq.w	8015058 <_strtod_l+0x420>
 801526c:	9b07      	ldr	r3, [sp, #28]
 801526e:	691a      	ldr	r2, [r3, #16]
 8015270:	ec4b ab19 	vmov	d9, sl, fp
 8015274:	3202      	adds	r2, #2
 8015276:	f103 010c 	add.w	r1, r3, #12
 801527a:	0092      	lsls	r2, r2, #2
 801527c:	300c      	adds	r0, #12
 801527e:	f001 f876 	bl	801636e <memcpy>
 8015282:	eeb0 0b49 	vmov.f64	d0, d9
 8015286:	9805      	ldr	r0, [sp, #20]
 8015288:	aa14      	add	r2, sp, #80	@ 0x50
 801528a:	a913      	add	r1, sp, #76	@ 0x4c
 801528c:	f002 fe96 	bl	8017fbc <__d2b>
 8015290:	9012      	str	r0, [sp, #72]	@ 0x48
 8015292:	2800      	cmp	r0, #0
 8015294:	f43f aee0 	beq.w	8015058 <_strtod_l+0x420>
 8015298:	9805      	ldr	r0, [sp, #20]
 801529a:	2101      	movs	r1, #1
 801529c:	f002 fbe8 	bl	8017a70 <__i2b>
 80152a0:	4605      	mov	r5, r0
 80152a2:	b940      	cbnz	r0, 80152b6 <_strtod_l+0x67e>
 80152a4:	2500      	movs	r5, #0
 80152a6:	e6d7      	b.n	8015058 <_strtod_l+0x420>
 80152a8:	f04f 31ff 	mov.w	r1, #4294967295
 80152ac:	fa01 f202 	lsl.w	r2, r1, r2
 80152b0:	ea02 0a0a 	and.w	sl, r2, sl
 80152b4:	e7b0      	b.n	8015218 <_strtod_l+0x5e0>
 80152b6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80152b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80152ba:	2f00      	cmp	r7, #0
 80152bc:	bfab      	itete	ge
 80152be:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80152c0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80152c2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80152c6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80152ca:	bfac      	ite	ge
 80152cc:	eb07 0903 	addge.w	r9, r7, r3
 80152d0:	eba3 0807 	sublt.w	r8, r3, r7
 80152d4:	9b06      	ldr	r3, [sp, #24]
 80152d6:	1aff      	subs	r7, r7, r3
 80152d8:	4417      	add	r7, r2
 80152da:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80152de:	4a6b      	ldr	r2, [pc, #428]	@ (801548c <_strtod_l+0x854>)
 80152e0:	3f01      	subs	r7, #1
 80152e2:	4297      	cmp	r7, r2
 80152e4:	da51      	bge.n	801538a <_strtod_l+0x752>
 80152e6:	1bd1      	subs	r1, r2, r7
 80152e8:	291f      	cmp	r1, #31
 80152ea:	eba3 0301 	sub.w	r3, r3, r1
 80152ee:	f04f 0201 	mov.w	r2, #1
 80152f2:	dc3e      	bgt.n	8015372 <_strtod_l+0x73a>
 80152f4:	408a      	lsls	r2, r1
 80152f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80152f8:	2200      	movs	r2, #0
 80152fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80152fc:	eb09 0703 	add.w	r7, r9, r3
 8015300:	4498      	add	r8, r3
 8015302:	9b06      	ldr	r3, [sp, #24]
 8015304:	45b9      	cmp	r9, r7
 8015306:	4498      	add	r8, r3
 8015308:	464b      	mov	r3, r9
 801530a:	bfa8      	it	ge
 801530c:	463b      	movge	r3, r7
 801530e:	4543      	cmp	r3, r8
 8015310:	bfa8      	it	ge
 8015312:	4643      	movge	r3, r8
 8015314:	2b00      	cmp	r3, #0
 8015316:	bfc2      	ittt	gt
 8015318:	1aff      	subgt	r7, r7, r3
 801531a:	eba8 0803 	subgt.w	r8, r8, r3
 801531e:	eba9 0903 	subgt.w	r9, r9, r3
 8015322:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015324:	2b00      	cmp	r3, #0
 8015326:	dd16      	ble.n	8015356 <_strtod_l+0x71e>
 8015328:	4629      	mov	r1, r5
 801532a:	9805      	ldr	r0, [sp, #20]
 801532c:	461a      	mov	r2, r3
 801532e:	f002 fc5f 	bl	8017bf0 <__pow5mult>
 8015332:	4605      	mov	r5, r0
 8015334:	2800      	cmp	r0, #0
 8015336:	d0b5      	beq.n	80152a4 <_strtod_l+0x66c>
 8015338:	4601      	mov	r1, r0
 801533a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801533c:	9805      	ldr	r0, [sp, #20]
 801533e:	f002 fbad 	bl	8017a9c <__multiply>
 8015342:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015344:	2800      	cmp	r0, #0
 8015346:	f43f ae87 	beq.w	8015058 <_strtod_l+0x420>
 801534a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801534c:	9805      	ldr	r0, [sp, #20]
 801534e:	f002 fa91 	bl	8017874 <_Bfree>
 8015352:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015354:	9312      	str	r3, [sp, #72]	@ 0x48
 8015356:	2f00      	cmp	r7, #0
 8015358:	dc1b      	bgt.n	8015392 <_strtod_l+0x75a>
 801535a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801535c:	2b00      	cmp	r3, #0
 801535e:	dd21      	ble.n	80153a4 <_strtod_l+0x76c>
 8015360:	4631      	mov	r1, r6
 8015362:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015364:	9805      	ldr	r0, [sp, #20]
 8015366:	f002 fc43 	bl	8017bf0 <__pow5mult>
 801536a:	4606      	mov	r6, r0
 801536c:	b9d0      	cbnz	r0, 80153a4 <_strtod_l+0x76c>
 801536e:	2600      	movs	r6, #0
 8015370:	e672      	b.n	8015058 <_strtod_l+0x420>
 8015372:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8015376:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801537a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 801537e:	37e2      	adds	r7, #226	@ 0xe2
 8015380:	fa02 f107 	lsl.w	r1, r2, r7
 8015384:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015386:	920c      	str	r2, [sp, #48]	@ 0x30
 8015388:	e7b8      	b.n	80152fc <_strtod_l+0x6c4>
 801538a:	2200      	movs	r2, #0
 801538c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801538e:	2201      	movs	r2, #1
 8015390:	e7f9      	b.n	8015386 <_strtod_l+0x74e>
 8015392:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015394:	9805      	ldr	r0, [sp, #20]
 8015396:	463a      	mov	r2, r7
 8015398:	f002 fc84 	bl	8017ca4 <__lshift>
 801539c:	9012      	str	r0, [sp, #72]	@ 0x48
 801539e:	2800      	cmp	r0, #0
 80153a0:	d1db      	bne.n	801535a <_strtod_l+0x722>
 80153a2:	e659      	b.n	8015058 <_strtod_l+0x420>
 80153a4:	f1b8 0f00 	cmp.w	r8, #0
 80153a8:	dd07      	ble.n	80153ba <_strtod_l+0x782>
 80153aa:	4631      	mov	r1, r6
 80153ac:	9805      	ldr	r0, [sp, #20]
 80153ae:	4642      	mov	r2, r8
 80153b0:	f002 fc78 	bl	8017ca4 <__lshift>
 80153b4:	4606      	mov	r6, r0
 80153b6:	2800      	cmp	r0, #0
 80153b8:	d0d9      	beq.n	801536e <_strtod_l+0x736>
 80153ba:	f1b9 0f00 	cmp.w	r9, #0
 80153be:	dd08      	ble.n	80153d2 <_strtod_l+0x79a>
 80153c0:	4629      	mov	r1, r5
 80153c2:	9805      	ldr	r0, [sp, #20]
 80153c4:	464a      	mov	r2, r9
 80153c6:	f002 fc6d 	bl	8017ca4 <__lshift>
 80153ca:	4605      	mov	r5, r0
 80153cc:	2800      	cmp	r0, #0
 80153ce:	f43f ae43 	beq.w	8015058 <_strtod_l+0x420>
 80153d2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80153d4:	9805      	ldr	r0, [sp, #20]
 80153d6:	4632      	mov	r2, r6
 80153d8:	f002 fcec 	bl	8017db4 <__mdiff>
 80153dc:	4604      	mov	r4, r0
 80153de:	2800      	cmp	r0, #0
 80153e0:	f43f ae3a 	beq.w	8015058 <_strtod_l+0x420>
 80153e4:	2300      	movs	r3, #0
 80153e6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80153ea:	60c3      	str	r3, [r0, #12]
 80153ec:	4629      	mov	r1, r5
 80153ee:	f002 fcc5 	bl	8017d7c <__mcmp>
 80153f2:	2800      	cmp	r0, #0
 80153f4:	da4e      	bge.n	8015494 <_strtod_l+0x85c>
 80153f6:	ea58 080a 	orrs.w	r8, r8, sl
 80153fa:	d174      	bne.n	80154e6 <_strtod_l+0x8ae>
 80153fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015400:	2b00      	cmp	r3, #0
 8015402:	d170      	bne.n	80154e6 <_strtod_l+0x8ae>
 8015404:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015408:	0d1b      	lsrs	r3, r3, #20
 801540a:	051b      	lsls	r3, r3, #20
 801540c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015410:	d969      	bls.n	80154e6 <_strtod_l+0x8ae>
 8015412:	6963      	ldr	r3, [r4, #20]
 8015414:	b913      	cbnz	r3, 801541c <_strtod_l+0x7e4>
 8015416:	6923      	ldr	r3, [r4, #16]
 8015418:	2b01      	cmp	r3, #1
 801541a:	dd64      	ble.n	80154e6 <_strtod_l+0x8ae>
 801541c:	4621      	mov	r1, r4
 801541e:	2201      	movs	r2, #1
 8015420:	9805      	ldr	r0, [sp, #20]
 8015422:	f002 fc3f 	bl	8017ca4 <__lshift>
 8015426:	4629      	mov	r1, r5
 8015428:	4604      	mov	r4, r0
 801542a:	f002 fca7 	bl	8017d7c <__mcmp>
 801542e:	2800      	cmp	r0, #0
 8015430:	dd59      	ble.n	80154e6 <_strtod_l+0x8ae>
 8015432:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015436:	9a06      	ldr	r2, [sp, #24]
 8015438:	0d1b      	lsrs	r3, r3, #20
 801543a:	051b      	lsls	r3, r3, #20
 801543c:	2a00      	cmp	r2, #0
 801543e:	d070      	beq.n	8015522 <_strtod_l+0x8ea>
 8015440:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015444:	d86d      	bhi.n	8015522 <_strtod_l+0x8ea>
 8015446:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801544a:	f67f ae99 	bls.w	8015180 <_strtod_l+0x548>
 801544e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8015480 <_strtod_l+0x848>
 8015452:	ec4b ab16 	vmov	d6, sl, fp
 8015456:	4b0e      	ldr	r3, [pc, #56]	@ (8015490 <_strtod_l+0x858>)
 8015458:	ee26 7b07 	vmul.f64	d7, d6, d7
 801545c:	ee17 2a90 	vmov	r2, s15
 8015460:	4013      	ands	r3, r2
 8015462:	ec5b ab17 	vmov	sl, fp, d7
 8015466:	2b00      	cmp	r3, #0
 8015468:	f47f ae01 	bne.w	801506e <_strtod_l+0x436>
 801546c:	9a05      	ldr	r2, [sp, #20]
 801546e:	2322      	movs	r3, #34	@ 0x22
 8015470:	6013      	str	r3, [r2, #0]
 8015472:	e5fc      	b.n	801506e <_strtod_l+0x436>
 8015474:	f3af 8000 	nop.w
 8015478:	ffc00000 	.word	0xffc00000
 801547c:	41dfffff 	.word	0x41dfffff
 8015480:	00000000 	.word	0x00000000
 8015484:	39500000 	.word	0x39500000
 8015488:	08019c20 	.word	0x08019c20
 801548c:	fffffc02 	.word	0xfffffc02
 8015490:	7ff00000 	.word	0x7ff00000
 8015494:	46d9      	mov	r9, fp
 8015496:	d15d      	bne.n	8015554 <_strtod_l+0x91c>
 8015498:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801549c:	f1b8 0f00 	cmp.w	r8, #0
 80154a0:	d02a      	beq.n	80154f8 <_strtod_l+0x8c0>
 80154a2:	4aab      	ldr	r2, [pc, #684]	@ (8015750 <_strtod_l+0xb18>)
 80154a4:	4293      	cmp	r3, r2
 80154a6:	d12a      	bne.n	80154fe <_strtod_l+0x8c6>
 80154a8:	9b06      	ldr	r3, [sp, #24]
 80154aa:	4652      	mov	r2, sl
 80154ac:	b1fb      	cbz	r3, 80154ee <_strtod_l+0x8b6>
 80154ae:	4ba9      	ldr	r3, [pc, #676]	@ (8015754 <_strtod_l+0xb1c>)
 80154b0:	ea0b 0303 	and.w	r3, fp, r3
 80154b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80154b8:	f04f 31ff 	mov.w	r1, #4294967295
 80154bc:	d81a      	bhi.n	80154f4 <_strtod_l+0x8bc>
 80154be:	0d1b      	lsrs	r3, r3, #20
 80154c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80154c4:	fa01 f303 	lsl.w	r3, r1, r3
 80154c8:	429a      	cmp	r2, r3
 80154ca:	d118      	bne.n	80154fe <_strtod_l+0x8c6>
 80154cc:	4ba2      	ldr	r3, [pc, #648]	@ (8015758 <_strtod_l+0xb20>)
 80154ce:	4599      	cmp	r9, r3
 80154d0:	d102      	bne.n	80154d8 <_strtod_l+0x8a0>
 80154d2:	3201      	adds	r2, #1
 80154d4:	f43f adc0 	beq.w	8015058 <_strtod_l+0x420>
 80154d8:	4b9e      	ldr	r3, [pc, #632]	@ (8015754 <_strtod_l+0xb1c>)
 80154da:	ea09 0303 	and.w	r3, r9, r3
 80154de:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80154e2:	f04f 0a00 	mov.w	sl, #0
 80154e6:	9b06      	ldr	r3, [sp, #24]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d1b0      	bne.n	801544e <_strtod_l+0x816>
 80154ec:	e5bf      	b.n	801506e <_strtod_l+0x436>
 80154ee:	f04f 33ff 	mov.w	r3, #4294967295
 80154f2:	e7e9      	b.n	80154c8 <_strtod_l+0x890>
 80154f4:	460b      	mov	r3, r1
 80154f6:	e7e7      	b.n	80154c8 <_strtod_l+0x890>
 80154f8:	ea53 030a 	orrs.w	r3, r3, sl
 80154fc:	d099      	beq.n	8015432 <_strtod_l+0x7fa>
 80154fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015500:	b1c3      	cbz	r3, 8015534 <_strtod_l+0x8fc>
 8015502:	ea13 0f09 	tst.w	r3, r9
 8015506:	d0ee      	beq.n	80154e6 <_strtod_l+0x8ae>
 8015508:	9a06      	ldr	r2, [sp, #24]
 801550a:	4650      	mov	r0, sl
 801550c:	4659      	mov	r1, fp
 801550e:	f1b8 0f00 	cmp.w	r8, #0
 8015512:	d013      	beq.n	801553c <_strtod_l+0x904>
 8015514:	f7ff fb73 	bl	8014bfe <sulp>
 8015518:	ee39 7b00 	vadd.f64	d7, d9, d0
 801551c:	ec5b ab17 	vmov	sl, fp, d7
 8015520:	e7e1      	b.n	80154e6 <_strtod_l+0x8ae>
 8015522:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015526:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801552a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801552e:	f04f 3aff 	mov.w	sl, #4294967295
 8015532:	e7d8      	b.n	80154e6 <_strtod_l+0x8ae>
 8015534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015536:	ea13 0f0a 	tst.w	r3, sl
 801553a:	e7e4      	b.n	8015506 <_strtod_l+0x8ce>
 801553c:	f7ff fb5f 	bl	8014bfe <sulp>
 8015540:	ee39 0b40 	vsub.f64	d0, d9, d0
 8015544:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8015548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801554c:	ec5b ab10 	vmov	sl, fp, d0
 8015550:	d1c9      	bne.n	80154e6 <_strtod_l+0x8ae>
 8015552:	e615      	b.n	8015180 <_strtod_l+0x548>
 8015554:	4629      	mov	r1, r5
 8015556:	4620      	mov	r0, r4
 8015558:	f002 fd88 	bl	801806c <__ratio>
 801555c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8015560:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015568:	d85d      	bhi.n	8015626 <_strtod_l+0x9ee>
 801556a:	f1b8 0f00 	cmp.w	r8, #0
 801556e:	d164      	bne.n	801563a <_strtod_l+0xa02>
 8015570:	f1ba 0f00 	cmp.w	sl, #0
 8015574:	d14b      	bne.n	801560e <_strtod_l+0x9d6>
 8015576:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801557a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801557e:	2b00      	cmp	r3, #0
 8015580:	d160      	bne.n	8015644 <_strtod_l+0xa0c>
 8015582:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8015586:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801558a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801558e:	d401      	bmi.n	8015594 <_strtod_l+0x95c>
 8015590:	ee20 8b08 	vmul.f64	d8, d0, d8
 8015594:	eeb1 ab48 	vneg.f64	d10, d8
 8015598:	486e      	ldr	r0, [pc, #440]	@ (8015754 <_strtod_l+0xb1c>)
 801559a:	4970      	ldr	r1, [pc, #448]	@ (801575c <_strtod_l+0xb24>)
 801559c:	ea09 0700 	and.w	r7, r9, r0
 80155a0:	428f      	cmp	r7, r1
 80155a2:	ec53 2b1a 	vmov	r2, r3, d10
 80155a6:	d17d      	bne.n	80156a4 <_strtod_l+0xa6c>
 80155a8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80155ac:	ec4b ab1c 	vmov	d12, sl, fp
 80155b0:	eeb0 0b4c 	vmov.f64	d0, d12
 80155b4:	f002 fc92 	bl	8017edc <__ulp>
 80155b8:	4866      	ldr	r0, [pc, #408]	@ (8015754 <_strtod_l+0xb1c>)
 80155ba:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80155be:	ee1c 3a90 	vmov	r3, s25
 80155c2:	4a67      	ldr	r2, [pc, #412]	@ (8015760 <_strtod_l+0xb28>)
 80155c4:	ea03 0100 	and.w	r1, r3, r0
 80155c8:	4291      	cmp	r1, r2
 80155ca:	ec5b ab1c 	vmov	sl, fp, d12
 80155ce:	d93c      	bls.n	801564a <_strtod_l+0xa12>
 80155d0:	ee19 2a90 	vmov	r2, s19
 80155d4:	4b60      	ldr	r3, [pc, #384]	@ (8015758 <_strtod_l+0xb20>)
 80155d6:	429a      	cmp	r2, r3
 80155d8:	d104      	bne.n	80155e4 <_strtod_l+0x9ac>
 80155da:	ee19 3a10 	vmov	r3, s18
 80155de:	3301      	adds	r3, #1
 80155e0:	f43f ad3a 	beq.w	8015058 <_strtod_l+0x420>
 80155e4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8015758 <_strtod_l+0xb20>
 80155e8:	f04f 3aff 	mov.w	sl, #4294967295
 80155ec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80155ee:	9805      	ldr	r0, [sp, #20]
 80155f0:	f002 f940 	bl	8017874 <_Bfree>
 80155f4:	9805      	ldr	r0, [sp, #20]
 80155f6:	4631      	mov	r1, r6
 80155f8:	f002 f93c 	bl	8017874 <_Bfree>
 80155fc:	9805      	ldr	r0, [sp, #20]
 80155fe:	4629      	mov	r1, r5
 8015600:	f002 f938 	bl	8017874 <_Bfree>
 8015604:	9805      	ldr	r0, [sp, #20]
 8015606:	4621      	mov	r1, r4
 8015608:	f002 f934 	bl	8017874 <_Bfree>
 801560c:	e625      	b.n	801525a <_strtod_l+0x622>
 801560e:	f1ba 0f01 	cmp.w	sl, #1
 8015612:	d103      	bne.n	801561c <_strtod_l+0x9e4>
 8015614:	f1bb 0f00 	cmp.w	fp, #0
 8015618:	f43f adb2 	beq.w	8015180 <_strtod_l+0x548>
 801561c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8015620:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8015624:	e7b8      	b.n	8015598 <_strtod_l+0x960>
 8015626:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801562a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801562e:	f1b8 0f00 	cmp.w	r8, #0
 8015632:	d0af      	beq.n	8015594 <_strtod_l+0x95c>
 8015634:	eeb0 ab48 	vmov.f64	d10, d8
 8015638:	e7ae      	b.n	8015598 <_strtod_l+0x960>
 801563a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801563e:	eeb0 8b4a 	vmov.f64	d8, d10
 8015642:	e7a9      	b.n	8015598 <_strtod_l+0x960>
 8015644:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8015648:	e7a6      	b.n	8015598 <_strtod_l+0x960>
 801564a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801564e:	9b06      	ldr	r3, [sp, #24]
 8015650:	46d9      	mov	r9, fp
 8015652:	2b00      	cmp	r3, #0
 8015654:	d1ca      	bne.n	80155ec <_strtod_l+0x9b4>
 8015656:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801565a:	0d1b      	lsrs	r3, r3, #20
 801565c:	051b      	lsls	r3, r3, #20
 801565e:	429f      	cmp	r7, r3
 8015660:	d1c4      	bne.n	80155ec <_strtod_l+0x9b4>
 8015662:	ec51 0b18 	vmov	r0, r1, d8
 8015666:	f7eb f88f 	bl	8000788 <__aeabi_d2lz>
 801566a:	f7eb f847 	bl	80006fc <__aeabi_l2d>
 801566e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8015672:	ec41 0b17 	vmov	d7, r0, r1
 8015676:	ea49 090a 	orr.w	r9, r9, sl
 801567a:	ea59 0908 	orrs.w	r9, r9, r8
 801567e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8015682:	d03c      	beq.n	80156fe <_strtod_l+0xac6>
 8015684:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8015738 <_strtod_l+0xb00>
 8015688:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801568c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015690:	f53f aced 	bmi.w	801506e <_strtod_l+0x436>
 8015694:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8015740 <_strtod_l+0xb08>
 8015698:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801569c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156a0:	dda4      	ble.n	80155ec <_strtod_l+0x9b4>
 80156a2:	e4e4      	b.n	801506e <_strtod_l+0x436>
 80156a4:	9906      	ldr	r1, [sp, #24]
 80156a6:	b1e1      	cbz	r1, 80156e2 <_strtod_l+0xaaa>
 80156a8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80156ac:	d819      	bhi.n	80156e2 <_strtod_l+0xaaa>
 80156ae:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80156b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156b6:	d811      	bhi.n	80156dc <_strtod_l+0xaa4>
 80156b8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80156bc:	ee18 3a10 	vmov	r3, s16
 80156c0:	2b01      	cmp	r3, #1
 80156c2:	bf38      	it	cc
 80156c4:	2301      	movcc	r3, #1
 80156c6:	ee08 3a10 	vmov	s16, r3
 80156ca:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80156ce:	f1b8 0f00 	cmp.w	r8, #0
 80156d2:	d111      	bne.n	80156f8 <_strtod_l+0xac0>
 80156d4:	eeb1 7b48 	vneg.f64	d7, d8
 80156d8:	ec53 2b17 	vmov	r2, r3, d7
 80156dc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80156e0:	1bcb      	subs	r3, r1, r7
 80156e2:	eeb0 0b49 	vmov.f64	d0, d9
 80156e6:	ec43 2b1a 	vmov	d10, r2, r3
 80156ea:	f002 fbf7 	bl	8017edc <__ulp>
 80156ee:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80156f2:	ec5b ab19 	vmov	sl, fp, d9
 80156f6:	e7aa      	b.n	801564e <_strtod_l+0xa16>
 80156f8:	eeb0 7b48 	vmov.f64	d7, d8
 80156fc:	e7ec      	b.n	80156d8 <_strtod_l+0xaa0>
 80156fe:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8015748 <_strtod_l+0xb10>
 8015702:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801570a:	f57f af6f 	bpl.w	80155ec <_strtod_l+0x9b4>
 801570e:	e4ae      	b.n	801506e <_strtod_l+0x436>
 8015710:	2300      	movs	r3, #0
 8015712:	9308      	str	r3, [sp, #32]
 8015714:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015716:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015718:	6013      	str	r3, [r2, #0]
 801571a:	f7ff bacc 	b.w	8014cb6 <_strtod_l+0x7e>
 801571e:	2a65      	cmp	r2, #101	@ 0x65
 8015720:	f43f abbc 	beq.w	8014e9c <_strtod_l+0x264>
 8015724:	2a45      	cmp	r2, #69	@ 0x45
 8015726:	f43f abb9 	beq.w	8014e9c <_strtod_l+0x264>
 801572a:	2301      	movs	r3, #1
 801572c:	9306      	str	r3, [sp, #24]
 801572e:	f7ff bbf0 	b.w	8014f12 <_strtod_l+0x2da>
 8015732:	bf00      	nop
 8015734:	f3af 8000 	nop.w
 8015738:	94a03595 	.word	0x94a03595
 801573c:	3fdfffff 	.word	0x3fdfffff
 8015740:	35afe535 	.word	0x35afe535
 8015744:	3fe00000 	.word	0x3fe00000
 8015748:	94a03595 	.word	0x94a03595
 801574c:	3fcfffff 	.word	0x3fcfffff
 8015750:	000fffff 	.word	0x000fffff
 8015754:	7ff00000 	.word	0x7ff00000
 8015758:	7fefffff 	.word	0x7fefffff
 801575c:	7fe00000 	.word	0x7fe00000
 8015760:	7c9fffff 	.word	0x7c9fffff

08015764 <strtod>:
 8015764:	460a      	mov	r2, r1
 8015766:	4601      	mov	r1, r0
 8015768:	4802      	ldr	r0, [pc, #8]	@ (8015774 <strtod+0x10>)
 801576a:	4b03      	ldr	r3, [pc, #12]	@ (8015778 <strtod+0x14>)
 801576c:	6800      	ldr	r0, [r0, #0]
 801576e:	f7ff ba63 	b.w	8014c38 <_strtod_l>
 8015772:	bf00      	nop
 8015774:	2400027c 	.word	0x2400027c
 8015778:	24000110 	.word	0x24000110

0801577c <__cvt>:
 801577c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801577e:	ed2d 8b02 	vpush	{d8}
 8015782:	eeb0 8b40 	vmov.f64	d8, d0
 8015786:	b085      	sub	sp, #20
 8015788:	4617      	mov	r7, r2
 801578a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801578c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801578e:	ee18 2a90 	vmov	r2, s17
 8015792:	f025 0520 	bic.w	r5, r5, #32
 8015796:	2a00      	cmp	r2, #0
 8015798:	bfb6      	itet	lt
 801579a:	222d      	movlt	r2, #45	@ 0x2d
 801579c:	2200      	movge	r2, #0
 801579e:	eeb1 8b40 	vneglt.f64	d8, d0
 80157a2:	2d46      	cmp	r5, #70	@ 0x46
 80157a4:	460c      	mov	r4, r1
 80157a6:	701a      	strb	r2, [r3, #0]
 80157a8:	d004      	beq.n	80157b4 <__cvt+0x38>
 80157aa:	2d45      	cmp	r5, #69	@ 0x45
 80157ac:	d100      	bne.n	80157b0 <__cvt+0x34>
 80157ae:	3401      	adds	r4, #1
 80157b0:	2102      	movs	r1, #2
 80157b2:	e000      	b.n	80157b6 <__cvt+0x3a>
 80157b4:	2103      	movs	r1, #3
 80157b6:	ab03      	add	r3, sp, #12
 80157b8:	9301      	str	r3, [sp, #4]
 80157ba:	ab02      	add	r3, sp, #8
 80157bc:	9300      	str	r3, [sp, #0]
 80157be:	4622      	mov	r2, r4
 80157c0:	4633      	mov	r3, r6
 80157c2:	eeb0 0b48 	vmov.f64	d0, d8
 80157c6:	f000 fe73 	bl	80164b0 <_dtoa_r>
 80157ca:	2d47      	cmp	r5, #71	@ 0x47
 80157cc:	d114      	bne.n	80157f8 <__cvt+0x7c>
 80157ce:	07fb      	lsls	r3, r7, #31
 80157d0:	d50a      	bpl.n	80157e8 <__cvt+0x6c>
 80157d2:	1902      	adds	r2, r0, r4
 80157d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80157d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157dc:	bf08      	it	eq
 80157de:	9203      	streq	r2, [sp, #12]
 80157e0:	2130      	movs	r1, #48	@ 0x30
 80157e2:	9b03      	ldr	r3, [sp, #12]
 80157e4:	4293      	cmp	r3, r2
 80157e6:	d319      	bcc.n	801581c <__cvt+0xa0>
 80157e8:	9b03      	ldr	r3, [sp, #12]
 80157ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80157ec:	1a1b      	subs	r3, r3, r0
 80157ee:	6013      	str	r3, [r2, #0]
 80157f0:	b005      	add	sp, #20
 80157f2:	ecbd 8b02 	vpop	{d8}
 80157f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157f8:	2d46      	cmp	r5, #70	@ 0x46
 80157fa:	eb00 0204 	add.w	r2, r0, r4
 80157fe:	d1e9      	bne.n	80157d4 <__cvt+0x58>
 8015800:	7803      	ldrb	r3, [r0, #0]
 8015802:	2b30      	cmp	r3, #48	@ 0x30
 8015804:	d107      	bne.n	8015816 <__cvt+0x9a>
 8015806:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801580a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801580e:	bf1c      	itt	ne
 8015810:	f1c4 0401 	rsbne	r4, r4, #1
 8015814:	6034      	strne	r4, [r6, #0]
 8015816:	6833      	ldr	r3, [r6, #0]
 8015818:	441a      	add	r2, r3
 801581a:	e7db      	b.n	80157d4 <__cvt+0x58>
 801581c:	1c5c      	adds	r4, r3, #1
 801581e:	9403      	str	r4, [sp, #12]
 8015820:	7019      	strb	r1, [r3, #0]
 8015822:	e7de      	b.n	80157e2 <__cvt+0x66>

08015824 <__exponent>:
 8015824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015826:	2900      	cmp	r1, #0
 8015828:	bfba      	itte	lt
 801582a:	4249      	neglt	r1, r1
 801582c:	232d      	movlt	r3, #45	@ 0x2d
 801582e:	232b      	movge	r3, #43	@ 0x2b
 8015830:	2909      	cmp	r1, #9
 8015832:	7002      	strb	r2, [r0, #0]
 8015834:	7043      	strb	r3, [r0, #1]
 8015836:	dd29      	ble.n	801588c <__exponent+0x68>
 8015838:	f10d 0307 	add.w	r3, sp, #7
 801583c:	461d      	mov	r5, r3
 801583e:	270a      	movs	r7, #10
 8015840:	461a      	mov	r2, r3
 8015842:	fbb1 f6f7 	udiv	r6, r1, r7
 8015846:	fb07 1416 	mls	r4, r7, r6, r1
 801584a:	3430      	adds	r4, #48	@ 0x30
 801584c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8015850:	460c      	mov	r4, r1
 8015852:	2c63      	cmp	r4, #99	@ 0x63
 8015854:	f103 33ff 	add.w	r3, r3, #4294967295
 8015858:	4631      	mov	r1, r6
 801585a:	dcf1      	bgt.n	8015840 <__exponent+0x1c>
 801585c:	3130      	adds	r1, #48	@ 0x30
 801585e:	1e94      	subs	r4, r2, #2
 8015860:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015864:	1c41      	adds	r1, r0, #1
 8015866:	4623      	mov	r3, r4
 8015868:	42ab      	cmp	r3, r5
 801586a:	d30a      	bcc.n	8015882 <__exponent+0x5e>
 801586c:	f10d 0309 	add.w	r3, sp, #9
 8015870:	1a9b      	subs	r3, r3, r2
 8015872:	42ac      	cmp	r4, r5
 8015874:	bf88      	it	hi
 8015876:	2300      	movhi	r3, #0
 8015878:	3302      	adds	r3, #2
 801587a:	4403      	add	r3, r0
 801587c:	1a18      	subs	r0, r3, r0
 801587e:	b003      	add	sp, #12
 8015880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015882:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015886:	f801 6f01 	strb.w	r6, [r1, #1]!
 801588a:	e7ed      	b.n	8015868 <__exponent+0x44>
 801588c:	2330      	movs	r3, #48	@ 0x30
 801588e:	3130      	adds	r1, #48	@ 0x30
 8015890:	7083      	strb	r3, [r0, #2]
 8015892:	70c1      	strb	r1, [r0, #3]
 8015894:	1d03      	adds	r3, r0, #4
 8015896:	e7f1      	b.n	801587c <__exponent+0x58>

08015898 <_printf_float>:
 8015898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801589c:	b08d      	sub	sp, #52	@ 0x34
 801589e:	460c      	mov	r4, r1
 80158a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80158a4:	4616      	mov	r6, r2
 80158a6:	461f      	mov	r7, r3
 80158a8:	4605      	mov	r5, r0
 80158aa:	f000 fce9 	bl	8016280 <_localeconv_r>
 80158ae:	f8d0 b000 	ldr.w	fp, [r0]
 80158b2:	4658      	mov	r0, fp
 80158b4:	f7ea fd8c 	bl	80003d0 <strlen>
 80158b8:	2300      	movs	r3, #0
 80158ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80158bc:	f8d8 3000 	ldr.w	r3, [r8]
 80158c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80158c4:	6822      	ldr	r2, [r4, #0]
 80158c6:	9005      	str	r0, [sp, #20]
 80158c8:	3307      	adds	r3, #7
 80158ca:	f023 0307 	bic.w	r3, r3, #7
 80158ce:	f103 0108 	add.w	r1, r3, #8
 80158d2:	f8c8 1000 	str.w	r1, [r8]
 80158d6:	ed93 0b00 	vldr	d0, [r3]
 80158da:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8015b38 <_printf_float+0x2a0>
 80158de:	eeb0 7bc0 	vabs.f64	d7, d0
 80158e2:	eeb4 7b46 	vcmp.f64	d7, d6
 80158e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158ea:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80158ee:	dd24      	ble.n	801593a <_printf_float+0xa2>
 80158f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80158f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158f8:	d502      	bpl.n	8015900 <_printf_float+0x68>
 80158fa:	232d      	movs	r3, #45	@ 0x2d
 80158fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015900:	498f      	ldr	r1, [pc, #572]	@ (8015b40 <_printf_float+0x2a8>)
 8015902:	4b90      	ldr	r3, [pc, #576]	@ (8015b44 <_printf_float+0x2ac>)
 8015904:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8015908:	bf94      	ite	ls
 801590a:	4688      	movls	r8, r1
 801590c:	4698      	movhi	r8, r3
 801590e:	f022 0204 	bic.w	r2, r2, #4
 8015912:	2303      	movs	r3, #3
 8015914:	6123      	str	r3, [r4, #16]
 8015916:	6022      	str	r2, [r4, #0]
 8015918:	f04f 0a00 	mov.w	sl, #0
 801591c:	9700      	str	r7, [sp, #0]
 801591e:	4633      	mov	r3, r6
 8015920:	aa0b      	add	r2, sp, #44	@ 0x2c
 8015922:	4621      	mov	r1, r4
 8015924:	4628      	mov	r0, r5
 8015926:	f000 f9d1 	bl	8015ccc <_printf_common>
 801592a:	3001      	adds	r0, #1
 801592c:	f040 8089 	bne.w	8015a42 <_printf_float+0x1aa>
 8015930:	f04f 30ff 	mov.w	r0, #4294967295
 8015934:	b00d      	add	sp, #52	@ 0x34
 8015936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801593a:	eeb4 0b40 	vcmp.f64	d0, d0
 801593e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015942:	d709      	bvc.n	8015958 <_printf_float+0xc0>
 8015944:	ee10 3a90 	vmov	r3, s1
 8015948:	2b00      	cmp	r3, #0
 801594a:	bfbc      	itt	lt
 801594c:	232d      	movlt	r3, #45	@ 0x2d
 801594e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8015952:	497d      	ldr	r1, [pc, #500]	@ (8015b48 <_printf_float+0x2b0>)
 8015954:	4b7d      	ldr	r3, [pc, #500]	@ (8015b4c <_printf_float+0x2b4>)
 8015956:	e7d5      	b.n	8015904 <_printf_float+0x6c>
 8015958:	6863      	ldr	r3, [r4, #4]
 801595a:	1c59      	adds	r1, r3, #1
 801595c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8015960:	d139      	bne.n	80159d6 <_printf_float+0x13e>
 8015962:	2306      	movs	r3, #6
 8015964:	6063      	str	r3, [r4, #4]
 8015966:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801596a:	2300      	movs	r3, #0
 801596c:	6022      	str	r2, [r4, #0]
 801596e:	9303      	str	r3, [sp, #12]
 8015970:	ab0a      	add	r3, sp, #40	@ 0x28
 8015972:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8015976:	ab09      	add	r3, sp, #36	@ 0x24
 8015978:	9300      	str	r3, [sp, #0]
 801597a:	6861      	ldr	r1, [r4, #4]
 801597c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8015980:	4628      	mov	r0, r5
 8015982:	f7ff fefb 	bl	801577c <__cvt>
 8015986:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801598a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801598c:	4680      	mov	r8, r0
 801598e:	d129      	bne.n	80159e4 <_printf_float+0x14c>
 8015990:	1cc8      	adds	r0, r1, #3
 8015992:	db02      	blt.n	801599a <_printf_float+0x102>
 8015994:	6863      	ldr	r3, [r4, #4]
 8015996:	4299      	cmp	r1, r3
 8015998:	dd41      	ble.n	8015a1e <_printf_float+0x186>
 801599a:	f1a9 0902 	sub.w	r9, r9, #2
 801599e:	fa5f f989 	uxtb.w	r9, r9
 80159a2:	3901      	subs	r1, #1
 80159a4:	464a      	mov	r2, r9
 80159a6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80159aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80159ac:	f7ff ff3a 	bl	8015824 <__exponent>
 80159b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80159b2:	1813      	adds	r3, r2, r0
 80159b4:	2a01      	cmp	r2, #1
 80159b6:	4682      	mov	sl, r0
 80159b8:	6123      	str	r3, [r4, #16]
 80159ba:	dc02      	bgt.n	80159c2 <_printf_float+0x12a>
 80159bc:	6822      	ldr	r2, [r4, #0]
 80159be:	07d2      	lsls	r2, r2, #31
 80159c0:	d501      	bpl.n	80159c6 <_printf_float+0x12e>
 80159c2:	3301      	adds	r3, #1
 80159c4:	6123      	str	r3, [r4, #16]
 80159c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d0a6      	beq.n	801591c <_printf_float+0x84>
 80159ce:	232d      	movs	r3, #45	@ 0x2d
 80159d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80159d4:	e7a2      	b.n	801591c <_printf_float+0x84>
 80159d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80159da:	d1c4      	bne.n	8015966 <_printf_float+0xce>
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d1c2      	bne.n	8015966 <_printf_float+0xce>
 80159e0:	2301      	movs	r3, #1
 80159e2:	e7bf      	b.n	8015964 <_printf_float+0xcc>
 80159e4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80159e8:	d9db      	bls.n	80159a2 <_printf_float+0x10a>
 80159ea:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80159ee:	d118      	bne.n	8015a22 <_printf_float+0x18a>
 80159f0:	2900      	cmp	r1, #0
 80159f2:	6863      	ldr	r3, [r4, #4]
 80159f4:	dd0b      	ble.n	8015a0e <_printf_float+0x176>
 80159f6:	6121      	str	r1, [r4, #16]
 80159f8:	b913      	cbnz	r3, 8015a00 <_printf_float+0x168>
 80159fa:	6822      	ldr	r2, [r4, #0]
 80159fc:	07d0      	lsls	r0, r2, #31
 80159fe:	d502      	bpl.n	8015a06 <_printf_float+0x16e>
 8015a00:	3301      	adds	r3, #1
 8015a02:	440b      	add	r3, r1
 8015a04:	6123      	str	r3, [r4, #16]
 8015a06:	65a1      	str	r1, [r4, #88]	@ 0x58
 8015a08:	f04f 0a00 	mov.w	sl, #0
 8015a0c:	e7db      	b.n	80159c6 <_printf_float+0x12e>
 8015a0e:	b913      	cbnz	r3, 8015a16 <_printf_float+0x17e>
 8015a10:	6822      	ldr	r2, [r4, #0]
 8015a12:	07d2      	lsls	r2, r2, #31
 8015a14:	d501      	bpl.n	8015a1a <_printf_float+0x182>
 8015a16:	3302      	adds	r3, #2
 8015a18:	e7f4      	b.n	8015a04 <_printf_float+0x16c>
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	e7f2      	b.n	8015a04 <_printf_float+0x16c>
 8015a1e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8015a22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015a24:	4299      	cmp	r1, r3
 8015a26:	db05      	blt.n	8015a34 <_printf_float+0x19c>
 8015a28:	6823      	ldr	r3, [r4, #0]
 8015a2a:	6121      	str	r1, [r4, #16]
 8015a2c:	07d8      	lsls	r0, r3, #31
 8015a2e:	d5ea      	bpl.n	8015a06 <_printf_float+0x16e>
 8015a30:	1c4b      	adds	r3, r1, #1
 8015a32:	e7e7      	b.n	8015a04 <_printf_float+0x16c>
 8015a34:	2900      	cmp	r1, #0
 8015a36:	bfd4      	ite	le
 8015a38:	f1c1 0202 	rsble	r2, r1, #2
 8015a3c:	2201      	movgt	r2, #1
 8015a3e:	4413      	add	r3, r2
 8015a40:	e7e0      	b.n	8015a04 <_printf_float+0x16c>
 8015a42:	6823      	ldr	r3, [r4, #0]
 8015a44:	055a      	lsls	r2, r3, #21
 8015a46:	d407      	bmi.n	8015a58 <_printf_float+0x1c0>
 8015a48:	6923      	ldr	r3, [r4, #16]
 8015a4a:	4642      	mov	r2, r8
 8015a4c:	4631      	mov	r1, r6
 8015a4e:	4628      	mov	r0, r5
 8015a50:	47b8      	blx	r7
 8015a52:	3001      	adds	r0, #1
 8015a54:	d12a      	bne.n	8015aac <_printf_float+0x214>
 8015a56:	e76b      	b.n	8015930 <_printf_float+0x98>
 8015a58:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8015a5c:	f240 80e0 	bls.w	8015c20 <_printf_float+0x388>
 8015a60:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8015a64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a6c:	d133      	bne.n	8015ad6 <_printf_float+0x23e>
 8015a6e:	4a38      	ldr	r2, [pc, #224]	@ (8015b50 <_printf_float+0x2b8>)
 8015a70:	2301      	movs	r3, #1
 8015a72:	4631      	mov	r1, r6
 8015a74:	4628      	mov	r0, r5
 8015a76:	47b8      	blx	r7
 8015a78:	3001      	adds	r0, #1
 8015a7a:	f43f af59 	beq.w	8015930 <_printf_float+0x98>
 8015a7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8015a82:	4543      	cmp	r3, r8
 8015a84:	db02      	blt.n	8015a8c <_printf_float+0x1f4>
 8015a86:	6823      	ldr	r3, [r4, #0]
 8015a88:	07d8      	lsls	r0, r3, #31
 8015a8a:	d50f      	bpl.n	8015aac <_printf_float+0x214>
 8015a8c:	9b05      	ldr	r3, [sp, #20]
 8015a8e:	465a      	mov	r2, fp
 8015a90:	4631      	mov	r1, r6
 8015a92:	4628      	mov	r0, r5
 8015a94:	47b8      	blx	r7
 8015a96:	3001      	adds	r0, #1
 8015a98:	f43f af4a 	beq.w	8015930 <_printf_float+0x98>
 8015a9c:	f04f 0900 	mov.w	r9, #0
 8015aa0:	f108 38ff 	add.w	r8, r8, #4294967295
 8015aa4:	f104 0a1a 	add.w	sl, r4, #26
 8015aa8:	45c8      	cmp	r8, r9
 8015aaa:	dc09      	bgt.n	8015ac0 <_printf_float+0x228>
 8015aac:	6823      	ldr	r3, [r4, #0]
 8015aae:	079b      	lsls	r3, r3, #30
 8015ab0:	f100 8107 	bmi.w	8015cc2 <_printf_float+0x42a>
 8015ab4:	68e0      	ldr	r0, [r4, #12]
 8015ab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015ab8:	4298      	cmp	r0, r3
 8015aba:	bfb8      	it	lt
 8015abc:	4618      	movlt	r0, r3
 8015abe:	e739      	b.n	8015934 <_printf_float+0x9c>
 8015ac0:	2301      	movs	r3, #1
 8015ac2:	4652      	mov	r2, sl
 8015ac4:	4631      	mov	r1, r6
 8015ac6:	4628      	mov	r0, r5
 8015ac8:	47b8      	blx	r7
 8015aca:	3001      	adds	r0, #1
 8015acc:	f43f af30 	beq.w	8015930 <_printf_float+0x98>
 8015ad0:	f109 0901 	add.w	r9, r9, #1
 8015ad4:	e7e8      	b.n	8015aa8 <_printf_float+0x210>
 8015ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	dc3b      	bgt.n	8015b54 <_printf_float+0x2bc>
 8015adc:	4a1c      	ldr	r2, [pc, #112]	@ (8015b50 <_printf_float+0x2b8>)
 8015ade:	2301      	movs	r3, #1
 8015ae0:	4631      	mov	r1, r6
 8015ae2:	4628      	mov	r0, r5
 8015ae4:	47b8      	blx	r7
 8015ae6:	3001      	adds	r0, #1
 8015ae8:	f43f af22 	beq.w	8015930 <_printf_float+0x98>
 8015aec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8015af0:	ea59 0303 	orrs.w	r3, r9, r3
 8015af4:	d102      	bne.n	8015afc <_printf_float+0x264>
 8015af6:	6823      	ldr	r3, [r4, #0]
 8015af8:	07d9      	lsls	r1, r3, #31
 8015afa:	d5d7      	bpl.n	8015aac <_printf_float+0x214>
 8015afc:	9b05      	ldr	r3, [sp, #20]
 8015afe:	465a      	mov	r2, fp
 8015b00:	4631      	mov	r1, r6
 8015b02:	4628      	mov	r0, r5
 8015b04:	47b8      	blx	r7
 8015b06:	3001      	adds	r0, #1
 8015b08:	f43f af12 	beq.w	8015930 <_printf_float+0x98>
 8015b0c:	f04f 0a00 	mov.w	sl, #0
 8015b10:	f104 0b1a 	add.w	fp, r4, #26
 8015b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b16:	425b      	negs	r3, r3
 8015b18:	4553      	cmp	r3, sl
 8015b1a:	dc01      	bgt.n	8015b20 <_printf_float+0x288>
 8015b1c:	464b      	mov	r3, r9
 8015b1e:	e794      	b.n	8015a4a <_printf_float+0x1b2>
 8015b20:	2301      	movs	r3, #1
 8015b22:	465a      	mov	r2, fp
 8015b24:	4631      	mov	r1, r6
 8015b26:	4628      	mov	r0, r5
 8015b28:	47b8      	blx	r7
 8015b2a:	3001      	adds	r0, #1
 8015b2c:	f43f af00 	beq.w	8015930 <_printf_float+0x98>
 8015b30:	f10a 0a01 	add.w	sl, sl, #1
 8015b34:	e7ee      	b.n	8015b14 <_printf_float+0x27c>
 8015b36:	bf00      	nop
 8015b38:	ffffffff 	.word	0xffffffff
 8015b3c:	7fefffff 	.word	0x7fefffff
 8015b40:	08019d49 	.word	0x08019d49
 8015b44:	08019d4d 	.word	0x08019d4d
 8015b48:	08019d51 	.word	0x08019d51
 8015b4c:	08019d55 	.word	0x08019d55
 8015b50:	08019d59 	.word	0x08019d59
 8015b54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015b56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8015b5a:	4553      	cmp	r3, sl
 8015b5c:	bfa8      	it	ge
 8015b5e:	4653      	movge	r3, sl
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	4699      	mov	r9, r3
 8015b64:	dc37      	bgt.n	8015bd6 <_printf_float+0x33e>
 8015b66:	2300      	movs	r3, #0
 8015b68:	9307      	str	r3, [sp, #28]
 8015b6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015b6e:	f104 021a 	add.w	r2, r4, #26
 8015b72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015b74:	9907      	ldr	r1, [sp, #28]
 8015b76:	9306      	str	r3, [sp, #24]
 8015b78:	eba3 0309 	sub.w	r3, r3, r9
 8015b7c:	428b      	cmp	r3, r1
 8015b7e:	dc31      	bgt.n	8015be4 <_printf_float+0x34c>
 8015b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b82:	459a      	cmp	sl, r3
 8015b84:	dc3b      	bgt.n	8015bfe <_printf_float+0x366>
 8015b86:	6823      	ldr	r3, [r4, #0]
 8015b88:	07da      	lsls	r2, r3, #31
 8015b8a:	d438      	bmi.n	8015bfe <_printf_float+0x366>
 8015b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b8e:	ebaa 0903 	sub.w	r9, sl, r3
 8015b92:	9b06      	ldr	r3, [sp, #24]
 8015b94:	ebaa 0303 	sub.w	r3, sl, r3
 8015b98:	4599      	cmp	r9, r3
 8015b9a:	bfa8      	it	ge
 8015b9c:	4699      	movge	r9, r3
 8015b9e:	f1b9 0f00 	cmp.w	r9, #0
 8015ba2:	dc34      	bgt.n	8015c0e <_printf_float+0x376>
 8015ba4:	f04f 0800 	mov.w	r8, #0
 8015ba8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015bac:	f104 0b1a 	add.w	fp, r4, #26
 8015bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015bb2:	ebaa 0303 	sub.w	r3, sl, r3
 8015bb6:	eba3 0309 	sub.w	r3, r3, r9
 8015bba:	4543      	cmp	r3, r8
 8015bbc:	f77f af76 	ble.w	8015aac <_printf_float+0x214>
 8015bc0:	2301      	movs	r3, #1
 8015bc2:	465a      	mov	r2, fp
 8015bc4:	4631      	mov	r1, r6
 8015bc6:	4628      	mov	r0, r5
 8015bc8:	47b8      	blx	r7
 8015bca:	3001      	adds	r0, #1
 8015bcc:	f43f aeb0 	beq.w	8015930 <_printf_float+0x98>
 8015bd0:	f108 0801 	add.w	r8, r8, #1
 8015bd4:	e7ec      	b.n	8015bb0 <_printf_float+0x318>
 8015bd6:	4642      	mov	r2, r8
 8015bd8:	4631      	mov	r1, r6
 8015bda:	4628      	mov	r0, r5
 8015bdc:	47b8      	blx	r7
 8015bde:	3001      	adds	r0, #1
 8015be0:	d1c1      	bne.n	8015b66 <_printf_float+0x2ce>
 8015be2:	e6a5      	b.n	8015930 <_printf_float+0x98>
 8015be4:	2301      	movs	r3, #1
 8015be6:	4631      	mov	r1, r6
 8015be8:	4628      	mov	r0, r5
 8015bea:	9206      	str	r2, [sp, #24]
 8015bec:	47b8      	blx	r7
 8015bee:	3001      	adds	r0, #1
 8015bf0:	f43f ae9e 	beq.w	8015930 <_printf_float+0x98>
 8015bf4:	9b07      	ldr	r3, [sp, #28]
 8015bf6:	9a06      	ldr	r2, [sp, #24]
 8015bf8:	3301      	adds	r3, #1
 8015bfa:	9307      	str	r3, [sp, #28]
 8015bfc:	e7b9      	b.n	8015b72 <_printf_float+0x2da>
 8015bfe:	9b05      	ldr	r3, [sp, #20]
 8015c00:	465a      	mov	r2, fp
 8015c02:	4631      	mov	r1, r6
 8015c04:	4628      	mov	r0, r5
 8015c06:	47b8      	blx	r7
 8015c08:	3001      	adds	r0, #1
 8015c0a:	d1bf      	bne.n	8015b8c <_printf_float+0x2f4>
 8015c0c:	e690      	b.n	8015930 <_printf_float+0x98>
 8015c0e:	9a06      	ldr	r2, [sp, #24]
 8015c10:	464b      	mov	r3, r9
 8015c12:	4442      	add	r2, r8
 8015c14:	4631      	mov	r1, r6
 8015c16:	4628      	mov	r0, r5
 8015c18:	47b8      	blx	r7
 8015c1a:	3001      	adds	r0, #1
 8015c1c:	d1c2      	bne.n	8015ba4 <_printf_float+0x30c>
 8015c1e:	e687      	b.n	8015930 <_printf_float+0x98>
 8015c20:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8015c24:	f1b9 0f01 	cmp.w	r9, #1
 8015c28:	dc01      	bgt.n	8015c2e <_printf_float+0x396>
 8015c2a:	07db      	lsls	r3, r3, #31
 8015c2c:	d536      	bpl.n	8015c9c <_printf_float+0x404>
 8015c2e:	2301      	movs	r3, #1
 8015c30:	4642      	mov	r2, r8
 8015c32:	4631      	mov	r1, r6
 8015c34:	4628      	mov	r0, r5
 8015c36:	47b8      	blx	r7
 8015c38:	3001      	adds	r0, #1
 8015c3a:	f43f ae79 	beq.w	8015930 <_printf_float+0x98>
 8015c3e:	9b05      	ldr	r3, [sp, #20]
 8015c40:	465a      	mov	r2, fp
 8015c42:	4631      	mov	r1, r6
 8015c44:	4628      	mov	r0, r5
 8015c46:	47b8      	blx	r7
 8015c48:	3001      	adds	r0, #1
 8015c4a:	f43f ae71 	beq.w	8015930 <_printf_float+0x98>
 8015c4e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8015c52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c5a:	f109 39ff 	add.w	r9, r9, #4294967295
 8015c5e:	d018      	beq.n	8015c92 <_printf_float+0x3fa>
 8015c60:	464b      	mov	r3, r9
 8015c62:	f108 0201 	add.w	r2, r8, #1
 8015c66:	4631      	mov	r1, r6
 8015c68:	4628      	mov	r0, r5
 8015c6a:	47b8      	blx	r7
 8015c6c:	3001      	adds	r0, #1
 8015c6e:	d10c      	bne.n	8015c8a <_printf_float+0x3f2>
 8015c70:	e65e      	b.n	8015930 <_printf_float+0x98>
 8015c72:	2301      	movs	r3, #1
 8015c74:	465a      	mov	r2, fp
 8015c76:	4631      	mov	r1, r6
 8015c78:	4628      	mov	r0, r5
 8015c7a:	47b8      	blx	r7
 8015c7c:	3001      	adds	r0, #1
 8015c7e:	f43f ae57 	beq.w	8015930 <_printf_float+0x98>
 8015c82:	f108 0801 	add.w	r8, r8, #1
 8015c86:	45c8      	cmp	r8, r9
 8015c88:	dbf3      	blt.n	8015c72 <_printf_float+0x3da>
 8015c8a:	4653      	mov	r3, sl
 8015c8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8015c90:	e6dc      	b.n	8015a4c <_printf_float+0x1b4>
 8015c92:	f04f 0800 	mov.w	r8, #0
 8015c96:	f104 0b1a 	add.w	fp, r4, #26
 8015c9a:	e7f4      	b.n	8015c86 <_printf_float+0x3ee>
 8015c9c:	2301      	movs	r3, #1
 8015c9e:	4642      	mov	r2, r8
 8015ca0:	e7e1      	b.n	8015c66 <_printf_float+0x3ce>
 8015ca2:	2301      	movs	r3, #1
 8015ca4:	464a      	mov	r2, r9
 8015ca6:	4631      	mov	r1, r6
 8015ca8:	4628      	mov	r0, r5
 8015caa:	47b8      	blx	r7
 8015cac:	3001      	adds	r0, #1
 8015cae:	f43f ae3f 	beq.w	8015930 <_printf_float+0x98>
 8015cb2:	f108 0801 	add.w	r8, r8, #1
 8015cb6:	68e3      	ldr	r3, [r4, #12]
 8015cb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015cba:	1a5b      	subs	r3, r3, r1
 8015cbc:	4543      	cmp	r3, r8
 8015cbe:	dcf0      	bgt.n	8015ca2 <_printf_float+0x40a>
 8015cc0:	e6f8      	b.n	8015ab4 <_printf_float+0x21c>
 8015cc2:	f04f 0800 	mov.w	r8, #0
 8015cc6:	f104 0919 	add.w	r9, r4, #25
 8015cca:	e7f4      	b.n	8015cb6 <_printf_float+0x41e>

08015ccc <_printf_common>:
 8015ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cd0:	4616      	mov	r6, r2
 8015cd2:	4698      	mov	r8, r3
 8015cd4:	688a      	ldr	r2, [r1, #8]
 8015cd6:	690b      	ldr	r3, [r1, #16]
 8015cd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015cdc:	4293      	cmp	r3, r2
 8015cde:	bfb8      	it	lt
 8015ce0:	4613      	movlt	r3, r2
 8015ce2:	6033      	str	r3, [r6, #0]
 8015ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015ce8:	4607      	mov	r7, r0
 8015cea:	460c      	mov	r4, r1
 8015cec:	b10a      	cbz	r2, 8015cf2 <_printf_common+0x26>
 8015cee:	3301      	adds	r3, #1
 8015cf0:	6033      	str	r3, [r6, #0]
 8015cf2:	6823      	ldr	r3, [r4, #0]
 8015cf4:	0699      	lsls	r1, r3, #26
 8015cf6:	bf42      	ittt	mi
 8015cf8:	6833      	ldrmi	r3, [r6, #0]
 8015cfa:	3302      	addmi	r3, #2
 8015cfc:	6033      	strmi	r3, [r6, #0]
 8015cfe:	6825      	ldr	r5, [r4, #0]
 8015d00:	f015 0506 	ands.w	r5, r5, #6
 8015d04:	d106      	bne.n	8015d14 <_printf_common+0x48>
 8015d06:	f104 0a19 	add.w	sl, r4, #25
 8015d0a:	68e3      	ldr	r3, [r4, #12]
 8015d0c:	6832      	ldr	r2, [r6, #0]
 8015d0e:	1a9b      	subs	r3, r3, r2
 8015d10:	42ab      	cmp	r3, r5
 8015d12:	dc26      	bgt.n	8015d62 <_printf_common+0x96>
 8015d14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015d18:	6822      	ldr	r2, [r4, #0]
 8015d1a:	3b00      	subs	r3, #0
 8015d1c:	bf18      	it	ne
 8015d1e:	2301      	movne	r3, #1
 8015d20:	0692      	lsls	r2, r2, #26
 8015d22:	d42b      	bmi.n	8015d7c <_printf_common+0xb0>
 8015d24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015d28:	4641      	mov	r1, r8
 8015d2a:	4638      	mov	r0, r7
 8015d2c:	47c8      	blx	r9
 8015d2e:	3001      	adds	r0, #1
 8015d30:	d01e      	beq.n	8015d70 <_printf_common+0xa4>
 8015d32:	6823      	ldr	r3, [r4, #0]
 8015d34:	6922      	ldr	r2, [r4, #16]
 8015d36:	f003 0306 	and.w	r3, r3, #6
 8015d3a:	2b04      	cmp	r3, #4
 8015d3c:	bf02      	ittt	eq
 8015d3e:	68e5      	ldreq	r5, [r4, #12]
 8015d40:	6833      	ldreq	r3, [r6, #0]
 8015d42:	1aed      	subeq	r5, r5, r3
 8015d44:	68a3      	ldr	r3, [r4, #8]
 8015d46:	bf0c      	ite	eq
 8015d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015d4c:	2500      	movne	r5, #0
 8015d4e:	4293      	cmp	r3, r2
 8015d50:	bfc4      	itt	gt
 8015d52:	1a9b      	subgt	r3, r3, r2
 8015d54:	18ed      	addgt	r5, r5, r3
 8015d56:	2600      	movs	r6, #0
 8015d58:	341a      	adds	r4, #26
 8015d5a:	42b5      	cmp	r5, r6
 8015d5c:	d11a      	bne.n	8015d94 <_printf_common+0xc8>
 8015d5e:	2000      	movs	r0, #0
 8015d60:	e008      	b.n	8015d74 <_printf_common+0xa8>
 8015d62:	2301      	movs	r3, #1
 8015d64:	4652      	mov	r2, sl
 8015d66:	4641      	mov	r1, r8
 8015d68:	4638      	mov	r0, r7
 8015d6a:	47c8      	blx	r9
 8015d6c:	3001      	adds	r0, #1
 8015d6e:	d103      	bne.n	8015d78 <_printf_common+0xac>
 8015d70:	f04f 30ff 	mov.w	r0, #4294967295
 8015d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d78:	3501      	adds	r5, #1
 8015d7a:	e7c6      	b.n	8015d0a <_printf_common+0x3e>
 8015d7c:	18e1      	adds	r1, r4, r3
 8015d7e:	1c5a      	adds	r2, r3, #1
 8015d80:	2030      	movs	r0, #48	@ 0x30
 8015d82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015d86:	4422      	add	r2, r4
 8015d88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015d8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015d90:	3302      	adds	r3, #2
 8015d92:	e7c7      	b.n	8015d24 <_printf_common+0x58>
 8015d94:	2301      	movs	r3, #1
 8015d96:	4622      	mov	r2, r4
 8015d98:	4641      	mov	r1, r8
 8015d9a:	4638      	mov	r0, r7
 8015d9c:	47c8      	blx	r9
 8015d9e:	3001      	adds	r0, #1
 8015da0:	d0e6      	beq.n	8015d70 <_printf_common+0xa4>
 8015da2:	3601      	adds	r6, #1
 8015da4:	e7d9      	b.n	8015d5a <_printf_common+0x8e>
	...

08015da8 <_printf_i>:
 8015da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015dac:	7e0f      	ldrb	r7, [r1, #24]
 8015dae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015db0:	2f78      	cmp	r7, #120	@ 0x78
 8015db2:	4691      	mov	r9, r2
 8015db4:	4680      	mov	r8, r0
 8015db6:	460c      	mov	r4, r1
 8015db8:	469a      	mov	sl, r3
 8015dba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015dbe:	d807      	bhi.n	8015dd0 <_printf_i+0x28>
 8015dc0:	2f62      	cmp	r7, #98	@ 0x62
 8015dc2:	d80a      	bhi.n	8015dda <_printf_i+0x32>
 8015dc4:	2f00      	cmp	r7, #0
 8015dc6:	f000 80d2 	beq.w	8015f6e <_printf_i+0x1c6>
 8015dca:	2f58      	cmp	r7, #88	@ 0x58
 8015dcc:	f000 80b9 	beq.w	8015f42 <_printf_i+0x19a>
 8015dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015dd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015dd8:	e03a      	b.n	8015e50 <_printf_i+0xa8>
 8015dda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015dde:	2b15      	cmp	r3, #21
 8015de0:	d8f6      	bhi.n	8015dd0 <_printf_i+0x28>
 8015de2:	a101      	add	r1, pc, #4	@ (adr r1, 8015de8 <_printf_i+0x40>)
 8015de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015de8:	08015e41 	.word	0x08015e41
 8015dec:	08015e55 	.word	0x08015e55
 8015df0:	08015dd1 	.word	0x08015dd1
 8015df4:	08015dd1 	.word	0x08015dd1
 8015df8:	08015dd1 	.word	0x08015dd1
 8015dfc:	08015dd1 	.word	0x08015dd1
 8015e00:	08015e55 	.word	0x08015e55
 8015e04:	08015dd1 	.word	0x08015dd1
 8015e08:	08015dd1 	.word	0x08015dd1
 8015e0c:	08015dd1 	.word	0x08015dd1
 8015e10:	08015dd1 	.word	0x08015dd1
 8015e14:	08015f55 	.word	0x08015f55
 8015e18:	08015e7f 	.word	0x08015e7f
 8015e1c:	08015f0f 	.word	0x08015f0f
 8015e20:	08015dd1 	.word	0x08015dd1
 8015e24:	08015dd1 	.word	0x08015dd1
 8015e28:	08015f77 	.word	0x08015f77
 8015e2c:	08015dd1 	.word	0x08015dd1
 8015e30:	08015e7f 	.word	0x08015e7f
 8015e34:	08015dd1 	.word	0x08015dd1
 8015e38:	08015dd1 	.word	0x08015dd1
 8015e3c:	08015f17 	.word	0x08015f17
 8015e40:	6833      	ldr	r3, [r6, #0]
 8015e42:	1d1a      	adds	r2, r3, #4
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	6032      	str	r2, [r6, #0]
 8015e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015e4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015e50:	2301      	movs	r3, #1
 8015e52:	e09d      	b.n	8015f90 <_printf_i+0x1e8>
 8015e54:	6833      	ldr	r3, [r6, #0]
 8015e56:	6820      	ldr	r0, [r4, #0]
 8015e58:	1d19      	adds	r1, r3, #4
 8015e5a:	6031      	str	r1, [r6, #0]
 8015e5c:	0606      	lsls	r6, r0, #24
 8015e5e:	d501      	bpl.n	8015e64 <_printf_i+0xbc>
 8015e60:	681d      	ldr	r5, [r3, #0]
 8015e62:	e003      	b.n	8015e6c <_printf_i+0xc4>
 8015e64:	0645      	lsls	r5, r0, #25
 8015e66:	d5fb      	bpl.n	8015e60 <_printf_i+0xb8>
 8015e68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015e6c:	2d00      	cmp	r5, #0
 8015e6e:	da03      	bge.n	8015e78 <_printf_i+0xd0>
 8015e70:	232d      	movs	r3, #45	@ 0x2d
 8015e72:	426d      	negs	r5, r5
 8015e74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015e78:	4859      	ldr	r0, [pc, #356]	@ (8015fe0 <_printf_i+0x238>)
 8015e7a:	230a      	movs	r3, #10
 8015e7c:	e011      	b.n	8015ea2 <_printf_i+0xfa>
 8015e7e:	6821      	ldr	r1, [r4, #0]
 8015e80:	6833      	ldr	r3, [r6, #0]
 8015e82:	0608      	lsls	r0, r1, #24
 8015e84:	f853 5b04 	ldr.w	r5, [r3], #4
 8015e88:	d402      	bmi.n	8015e90 <_printf_i+0xe8>
 8015e8a:	0649      	lsls	r1, r1, #25
 8015e8c:	bf48      	it	mi
 8015e8e:	b2ad      	uxthmi	r5, r5
 8015e90:	2f6f      	cmp	r7, #111	@ 0x6f
 8015e92:	4853      	ldr	r0, [pc, #332]	@ (8015fe0 <_printf_i+0x238>)
 8015e94:	6033      	str	r3, [r6, #0]
 8015e96:	bf14      	ite	ne
 8015e98:	230a      	movne	r3, #10
 8015e9a:	2308      	moveq	r3, #8
 8015e9c:	2100      	movs	r1, #0
 8015e9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015ea2:	6866      	ldr	r6, [r4, #4]
 8015ea4:	60a6      	str	r6, [r4, #8]
 8015ea6:	2e00      	cmp	r6, #0
 8015ea8:	bfa2      	ittt	ge
 8015eaa:	6821      	ldrge	r1, [r4, #0]
 8015eac:	f021 0104 	bicge.w	r1, r1, #4
 8015eb0:	6021      	strge	r1, [r4, #0]
 8015eb2:	b90d      	cbnz	r5, 8015eb8 <_printf_i+0x110>
 8015eb4:	2e00      	cmp	r6, #0
 8015eb6:	d04b      	beq.n	8015f50 <_printf_i+0x1a8>
 8015eb8:	4616      	mov	r6, r2
 8015eba:	fbb5 f1f3 	udiv	r1, r5, r3
 8015ebe:	fb03 5711 	mls	r7, r3, r1, r5
 8015ec2:	5dc7      	ldrb	r7, [r0, r7]
 8015ec4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015ec8:	462f      	mov	r7, r5
 8015eca:	42bb      	cmp	r3, r7
 8015ecc:	460d      	mov	r5, r1
 8015ece:	d9f4      	bls.n	8015eba <_printf_i+0x112>
 8015ed0:	2b08      	cmp	r3, #8
 8015ed2:	d10b      	bne.n	8015eec <_printf_i+0x144>
 8015ed4:	6823      	ldr	r3, [r4, #0]
 8015ed6:	07df      	lsls	r7, r3, #31
 8015ed8:	d508      	bpl.n	8015eec <_printf_i+0x144>
 8015eda:	6923      	ldr	r3, [r4, #16]
 8015edc:	6861      	ldr	r1, [r4, #4]
 8015ede:	4299      	cmp	r1, r3
 8015ee0:	bfde      	ittt	le
 8015ee2:	2330      	movle	r3, #48	@ 0x30
 8015ee4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015ee8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015eec:	1b92      	subs	r2, r2, r6
 8015eee:	6122      	str	r2, [r4, #16]
 8015ef0:	f8cd a000 	str.w	sl, [sp]
 8015ef4:	464b      	mov	r3, r9
 8015ef6:	aa03      	add	r2, sp, #12
 8015ef8:	4621      	mov	r1, r4
 8015efa:	4640      	mov	r0, r8
 8015efc:	f7ff fee6 	bl	8015ccc <_printf_common>
 8015f00:	3001      	adds	r0, #1
 8015f02:	d14a      	bne.n	8015f9a <_printf_i+0x1f2>
 8015f04:	f04f 30ff 	mov.w	r0, #4294967295
 8015f08:	b004      	add	sp, #16
 8015f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f0e:	6823      	ldr	r3, [r4, #0]
 8015f10:	f043 0320 	orr.w	r3, r3, #32
 8015f14:	6023      	str	r3, [r4, #0]
 8015f16:	4833      	ldr	r0, [pc, #204]	@ (8015fe4 <_printf_i+0x23c>)
 8015f18:	2778      	movs	r7, #120	@ 0x78
 8015f1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015f1e:	6823      	ldr	r3, [r4, #0]
 8015f20:	6831      	ldr	r1, [r6, #0]
 8015f22:	061f      	lsls	r7, r3, #24
 8015f24:	f851 5b04 	ldr.w	r5, [r1], #4
 8015f28:	d402      	bmi.n	8015f30 <_printf_i+0x188>
 8015f2a:	065f      	lsls	r7, r3, #25
 8015f2c:	bf48      	it	mi
 8015f2e:	b2ad      	uxthmi	r5, r5
 8015f30:	6031      	str	r1, [r6, #0]
 8015f32:	07d9      	lsls	r1, r3, #31
 8015f34:	bf44      	itt	mi
 8015f36:	f043 0320 	orrmi.w	r3, r3, #32
 8015f3a:	6023      	strmi	r3, [r4, #0]
 8015f3c:	b11d      	cbz	r5, 8015f46 <_printf_i+0x19e>
 8015f3e:	2310      	movs	r3, #16
 8015f40:	e7ac      	b.n	8015e9c <_printf_i+0xf4>
 8015f42:	4827      	ldr	r0, [pc, #156]	@ (8015fe0 <_printf_i+0x238>)
 8015f44:	e7e9      	b.n	8015f1a <_printf_i+0x172>
 8015f46:	6823      	ldr	r3, [r4, #0]
 8015f48:	f023 0320 	bic.w	r3, r3, #32
 8015f4c:	6023      	str	r3, [r4, #0]
 8015f4e:	e7f6      	b.n	8015f3e <_printf_i+0x196>
 8015f50:	4616      	mov	r6, r2
 8015f52:	e7bd      	b.n	8015ed0 <_printf_i+0x128>
 8015f54:	6833      	ldr	r3, [r6, #0]
 8015f56:	6825      	ldr	r5, [r4, #0]
 8015f58:	6961      	ldr	r1, [r4, #20]
 8015f5a:	1d18      	adds	r0, r3, #4
 8015f5c:	6030      	str	r0, [r6, #0]
 8015f5e:	062e      	lsls	r6, r5, #24
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	d501      	bpl.n	8015f68 <_printf_i+0x1c0>
 8015f64:	6019      	str	r1, [r3, #0]
 8015f66:	e002      	b.n	8015f6e <_printf_i+0x1c6>
 8015f68:	0668      	lsls	r0, r5, #25
 8015f6a:	d5fb      	bpl.n	8015f64 <_printf_i+0x1bc>
 8015f6c:	8019      	strh	r1, [r3, #0]
 8015f6e:	2300      	movs	r3, #0
 8015f70:	6123      	str	r3, [r4, #16]
 8015f72:	4616      	mov	r6, r2
 8015f74:	e7bc      	b.n	8015ef0 <_printf_i+0x148>
 8015f76:	6833      	ldr	r3, [r6, #0]
 8015f78:	1d1a      	adds	r2, r3, #4
 8015f7a:	6032      	str	r2, [r6, #0]
 8015f7c:	681e      	ldr	r6, [r3, #0]
 8015f7e:	6862      	ldr	r2, [r4, #4]
 8015f80:	2100      	movs	r1, #0
 8015f82:	4630      	mov	r0, r6
 8015f84:	f7ea f9d4 	bl	8000330 <memchr>
 8015f88:	b108      	cbz	r0, 8015f8e <_printf_i+0x1e6>
 8015f8a:	1b80      	subs	r0, r0, r6
 8015f8c:	6060      	str	r0, [r4, #4]
 8015f8e:	6863      	ldr	r3, [r4, #4]
 8015f90:	6123      	str	r3, [r4, #16]
 8015f92:	2300      	movs	r3, #0
 8015f94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015f98:	e7aa      	b.n	8015ef0 <_printf_i+0x148>
 8015f9a:	6923      	ldr	r3, [r4, #16]
 8015f9c:	4632      	mov	r2, r6
 8015f9e:	4649      	mov	r1, r9
 8015fa0:	4640      	mov	r0, r8
 8015fa2:	47d0      	blx	sl
 8015fa4:	3001      	adds	r0, #1
 8015fa6:	d0ad      	beq.n	8015f04 <_printf_i+0x15c>
 8015fa8:	6823      	ldr	r3, [r4, #0]
 8015faa:	079b      	lsls	r3, r3, #30
 8015fac:	d413      	bmi.n	8015fd6 <_printf_i+0x22e>
 8015fae:	68e0      	ldr	r0, [r4, #12]
 8015fb0:	9b03      	ldr	r3, [sp, #12]
 8015fb2:	4298      	cmp	r0, r3
 8015fb4:	bfb8      	it	lt
 8015fb6:	4618      	movlt	r0, r3
 8015fb8:	e7a6      	b.n	8015f08 <_printf_i+0x160>
 8015fba:	2301      	movs	r3, #1
 8015fbc:	4632      	mov	r2, r6
 8015fbe:	4649      	mov	r1, r9
 8015fc0:	4640      	mov	r0, r8
 8015fc2:	47d0      	blx	sl
 8015fc4:	3001      	adds	r0, #1
 8015fc6:	d09d      	beq.n	8015f04 <_printf_i+0x15c>
 8015fc8:	3501      	adds	r5, #1
 8015fca:	68e3      	ldr	r3, [r4, #12]
 8015fcc:	9903      	ldr	r1, [sp, #12]
 8015fce:	1a5b      	subs	r3, r3, r1
 8015fd0:	42ab      	cmp	r3, r5
 8015fd2:	dcf2      	bgt.n	8015fba <_printf_i+0x212>
 8015fd4:	e7eb      	b.n	8015fae <_printf_i+0x206>
 8015fd6:	2500      	movs	r5, #0
 8015fd8:	f104 0619 	add.w	r6, r4, #25
 8015fdc:	e7f5      	b.n	8015fca <_printf_i+0x222>
 8015fde:	bf00      	nop
 8015fe0:	08019d5b 	.word	0x08019d5b
 8015fe4:	08019d6c 	.word	0x08019d6c

08015fe8 <std>:
 8015fe8:	2300      	movs	r3, #0
 8015fea:	b510      	push	{r4, lr}
 8015fec:	4604      	mov	r4, r0
 8015fee:	e9c0 3300 	strd	r3, r3, [r0]
 8015ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015ff6:	6083      	str	r3, [r0, #8]
 8015ff8:	8181      	strh	r1, [r0, #12]
 8015ffa:	6643      	str	r3, [r0, #100]	@ 0x64
 8015ffc:	81c2      	strh	r2, [r0, #14]
 8015ffe:	6183      	str	r3, [r0, #24]
 8016000:	4619      	mov	r1, r3
 8016002:	2208      	movs	r2, #8
 8016004:	305c      	adds	r0, #92	@ 0x5c
 8016006:	f000 f914 	bl	8016232 <memset>
 801600a:	4b0d      	ldr	r3, [pc, #52]	@ (8016040 <std+0x58>)
 801600c:	6263      	str	r3, [r4, #36]	@ 0x24
 801600e:	4b0d      	ldr	r3, [pc, #52]	@ (8016044 <std+0x5c>)
 8016010:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016012:	4b0d      	ldr	r3, [pc, #52]	@ (8016048 <std+0x60>)
 8016014:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016016:	4b0d      	ldr	r3, [pc, #52]	@ (801604c <std+0x64>)
 8016018:	6323      	str	r3, [r4, #48]	@ 0x30
 801601a:	4b0d      	ldr	r3, [pc, #52]	@ (8016050 <std+0x68>)
 801601c:	6224      	str	r4, [r4, #32]
 801601e:	429c      	cmp	r4, r3
 8016020:	d006      	beq.n	8016030 <std+0x48>
 8016022:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016026:	4294      	cmp	r4, r2
 8016028:	d002      	beq.n	8016030 <std+0x48>
 801602a:	33d0      	adds	r3, #208	@ 0xd0
 801602c:	429c      	cmp	r4, r3
 801602e:	d105      	bne.n	801603c <std+0x54>
 8016030:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016038:	f000 b996 	b.w	8016368 <__retarget_lock_init_recursive>
 801603c:	bd10      	pop	{r4, pc}
 801603e:	bf00      	nop
 8016040:	080161ad 	.word	0x080161ad
 8016044:	080161cf 	.word	0x080161cf
 8016048:	08016207 	.word	0x08016207
 801604c:	0801622b 	.word	0x0801622b
 8016050:	24006b2c 	.word	0x24006b2c

08016054 <stdio_exit_handler>:
 8016054:	4a02      	ldr	r2, [pc, #8]	@ (8016060 <stdio_exit_handler+0xc>)
 8016056:	4903      	ldr	r1, [pc, #12]	@ (8016064 <stdio_exit_handler+0x10>)
 8016058:	4803      	ldr	r0, [pc, #12]	@ (8016068 <stdio_exit_handler+0x14>)
 801605a:	f000 b869 	b.w	8016130 <_fwalk_sglue>
 801605e:	bf00      	nop
 8016060:	24000104 	.word	0x24000104
 8016064:	08018525 	.word	0x08018525
 8016068:	24000280 	.word	0x24000280

0801606c <cleanup_stdio>:
 801606c:	6841      	ldr	r1, [r0, #4]
 801606e:	4b0c      	ldr	r3, [pc, #48]	@ (80160a0 <cleanup_stdio+0x34>)
 8016070:	4299      	cmp	r1, r3
 8016072:	b510      	push	{r4, lr}
 8016074:	4604      	mov	r4, r0
 8016076:	d001      	beq.n	801607c <cleanup_stdio+0x10>
 8016078:	f002 fa54 	bl	8018524 <_fflush_r>
 801607c:	68a1      	ldr	r1, [r4, #8]
 801607e:	4b09      	ldr	r3, [pc, #36]	@ (80160a4 <cleanup_stdio+0x38>)
 8016080:	4299      	cmp	r1, r3
 8016082:	d002      	beq.n	801608a <cleanup_stdio+0x1e>
 8016084:	4620      	mov	r0, r4
 8016086:	f002 fa4d 	bl	8018524 <_fflush_r>
 801608a:	68e1      	ldr	r1, [r4, #12]
 801608c:	4b06      	ldr	r3, [pc, #24]	@ (80160a8 <cleanup_stdio+0x3c>)
 801608e:	4299      	cmp	r1, r3
 8016090:	d004      	beq.n	801609c <cleanup_stdio+0x30>
 8016092:	4620      	mov	r0, r4
 8016094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016098:	f002 ba44 	b.w	8018524 <_fflush_r>
 801609c:	bd10      	pop	{r4, pc}
 801609e:	bf00      	nop
 80160a0:	24006b2c 	.word	0x24006b2c
 80160a4:	24006b94 	.word	0x24006b94
 80160a8:	24006bfc 	.word	0x24006bfc

080160ac <global_stdio_init.part.0>:
 80160ac:	b510      	push	{r4, lr}
 80160ae:	4b0b      	ldr	r3, [pc, #44]	@ (80160dc <global_stdio_init.part.0+0x30>)
 80160b0:	4c0b      	ldr	r4, [pc, #44]	@ (80160e0 <global_stdio_init.part.0+0x34>)
 80160b2:	4a0c      	ldr	r2, [pc, #48]	@ (80160e4 <global_stdio_init.part.0+0x38>)
 80160b4:	601a      	str	r2, [r3, #0]
 80160b6:	4620      	mov	r0, r4
 80160b8:	2200      	movs	r2, #0
 80160ba:	2104      	movs	r1, #4
 80160bc:	f7ff ff94 	bl	8015fe8 <std>
 80160c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80160c4:	2201      	movs	r2, #1
 80160c6:	2109      	movs	r1, #9
 80160c8:	f7ff ff8e 	bl	8015fe8 <std>
 80160cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80160d0:	2202      	movs	r2, #2
 80160d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160d6:	2112      	movs	r1, #18
 80160d8:	f7ff bf86 	b.w	8015fe8 <std>
 80160dc:	24006c64 	.word	0x24006c64
 80160e0:	24006b2c 	.word	0x24006b2c
 80160e4:	08016055 	.word	0x08016055

080160e8 <__sfp_lock_acquire>:
 80160e8:	4801      	ldr	r0, [pc, #4]	@ (80160f0 <__sfp_lock_acquire+0x8>)
 80160ea:	f000 b93e 	b.w	801636a <__retarget_lock_acquire_recursive>
 80160ee:	bf00      	nop
 80160f0:	24006c6d 	.word	0x24006c6d

080160f4 <__sfp_lock_release>:
 80160f4:	4801      	ldr	r0, [pc, #4]	@ (80160fc <__sfp_lock_release+0x8>)
 80160f6:	f000 b939 	b.w	801636c <__retarget_lock_release_recursive>
 80160fa:	bf00      	nop
 80160fc:	24006c6d 	.word	0x24006c6d

08016100 <__sinit>:
 8016100:	b510      	push	{r4, lr}
 8016102:	4604      	mov	r4, r0
 8016104:	f7ff fff0 	bl	80160e8 <__sfp_lock_acquire>
 8016108:	6a23      	ldr	r3, [r4, #32]
 801610a:	b11b      	cbz	r3, 8016114 <__sinit+0x14>
 801610c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016110:	f7ff bff0 	b.w	80160f4 <__sfp_lock_release>
 8016114:	4b04      	ldr	r3, [pc, #16]	@ (8016128 <__sinit+0x28>)
 8016116:	6223      	str	r3, [r4, #32]
 8016118:	4b04      	ldr	r3, [pc, #16]	@ (801612c <__sinit+0x2c>)
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d1f5      	bne.n	801610c <__sinit+0xc>
 8016120:	f7ff ffc4 	bl	80160ac <global_stdio_init.part.0>
 8016124:	e7f2      	b.n	801610c <__sinit+0xc>
 8016126:	bf00      	nop
 8016128:	0801606d 	.word	0x0801606d
 801612c:	24006c64 	.word	0x24006c64

08016130 <_fwalk_sglue>:
 8016130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016134:	4607      	mov	r7, r0
 8016136:	4688      	mov	r8, r1
 8016138:	4614      	mov	r4, r2
 801613a:	2600      	movs	r6, #0
 801613c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016140:	f1b9 0901 	subs.w	r9, r9, #1
 8016144:	d505      	bpl.n	8016152 <_fwalk_sglue+0x22>
 8016146:	6824      	ldr	r4, [r4, #0]
 8016148:	2c00      	cmp	r4, #0
 801614a:	d1f7      	bne.n	801613c <_fwalk_sglue+0xc>
 801614c:	4630      	mov	r0, r6
 801614e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016152:	89ab      	ldrh	r3, [r5, #12]
 8016154:	2b01      	cmp	r3, #1
 8016156:	d907      	bls.n	8016168 <_fwalk_sglue+0x38>
 8016158:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801615c:	3301      	adds	r3, #1
 801615e:	d003      	beq.n	8016168 <_fwalk_sglue+0x38>
 8016160:	4629      	mov	r1, r5
 8016162:	4638      	mov	r0, r7
 8016164:	47c0      	blx	r8
 8016166:	4306      	orrs	r6, r0
 8016168:	3568      	adds	r5, #104	@ 0x68
 801616a:	e7e9      	b.n	8016140 <_fwalk_sglue+0x10>

0801616c <siprintf>:
 801616c:	b40e      	push	{r1, r2, r3}
 801616e:	b500      	push	{lr}
 8016170:	b09c      	sub	sp, #112	@ 0x70
 8016172:	ab1d      	add	r3, sp, #116	@ 0x74
 8016174:	9002      	str	r0, [sp, #8]
 8016176:	9006      	str	r0, [sp, #24]
 8016178:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801617c:	4809      	ldr	r0, [pc, #36]	@ (80161a4 <siprintf+0x38>)
 801617e:	9107      	str	r1, [sp, #28]
 8016180:	9104      	str	r1, [sp, #16]
 8016182:	4909      	ldr	r1, [pc, #36]	@ (80161a8 <siprintf+0x3c>)
 8016184:	f853 2b04 	ldr.w	r2, [r3], #4
 8016188:	9105      	str	r1, [sp, #20]
 801618a:	6800      	ldr	r0, [r0, #0]
 801618c:	9301      	str	r3, [sp, #4]
 801618e:	a902      	add	r1, sp, #8
 8016190:	f002 f848 	bl	8018224 <_svfiprintf_r>
 8016194:	9b02      	ldr	r3, [sp, #8]
 8016196:	2200      	movs	r2, #0
 8016198:	701a      	strb	r2, [r3, #0]
 801619a:	b01c      	add	sp, #112	@ 0x70
 801619c:	f85d eb04 	ldr.w	lr, [sp], #4
 80161a0:	b003      	add	sp, #12
 80161a2:	4770      	bx	lr
 80161a4:	2400027c 	.word	0x2400027c
 80161a8:	ffff0208 	.word	0xffff0208

080161ac <__sread>:
 80161ac:	b510      	push	{r4, lr}
 80161ae:	460c      	mov	r4, r1
 80161b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161b4:	f000 f88a 	bl	80162cc <_read_r>
 80161b8:	2800      	cmp	r0, #0
 80161ba:	bfab      	itete	ge
 80161bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80161be:	89a3      	ldrhlt	r3, [r4, #12]
 80161c0:	181b      	addge	r3, r3, r0
 80161c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80161c6:	bfac      	ite	ge
 80161c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80161ca:	81a3      	strhlt	r3, [r4, #12]
 80161cc:	bd10      	pop	{r4, pc}

080161ce <__swrite>:
 80161ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161d2:	461f      	mov	r7, r3
 80161d4:	898b      	ldrh	r3, [r1, #12]
 80161d6:	05db      	lsls	r3, r3, #23
 80161d8:	4605      	mov	r5, r0
 80161da:	460c      	mov	r4, r1
 80161dc:	4616      	mov	r6, r2
 80161de:	d505      	bpl.n	80161ec <__swrite+0x1e>
 80161e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161e4:	2302      	movs	r3, #2
 80161e6:	2200      	movs	r2, #0
 80161e8:	f000 f85e 	bl	80162a8 <_lseek_r>
 80161ec:	89a3      	ldrh	r3, [r4, #12]
 80161ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80161f6:	81a3      	strh	r3, [r4, #12]
 80161f8:	4632      	mov	r2, r6
 80161fa:	463b      	mov	r3, r7
 80161fc:	4628      	mov	r0, r5
 80161fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016202:	f000 b875 	b.w	80162f0 <_write_r>

08016206 <__sseek>:
 8016206:	b510      	push	{r4, lr}
 8016208:	460c      	mov	r4, r1
 801620a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801620e:	f000 f84b 	bl	80162a8 <_lseek_r>
 8016212:	1c43      	adds	r3, r0, #1
 8016214:	89a3      	ldrh	r3, [r4, #12]
 8016216:	bf15      	itete	ne
 8016218:	6560      	strne	r0, [r4, #84]	@ 0x54
 801621a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801621e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016222:	81a3      	strheq	r3, [r4, #12]
 8016224:	bf18      	it	ne
 8016226:	81a3      	strhne	r3, [r4, #12]
 8016228:	bd10      	pop	{r4, pc}

0801622a <__sclose>:
 801622a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801622e:	f000 b82b 	b.w	8016288 <_close_r>

08016232 <memset>:
 8016232:	4402      	add	r2, r0
 8016234:	4603      	mov	r3, r0
 8016236:	4293      	cmp	r3, r2
 8016238:	d100      	bne.n	801623c <memset+0xa>
 801623a:	4770      	bx	lr
 801623c:	f803 1b01 	strb.w	r1, [r3], #1
 8016240:	e7f9      	b.n	8016236 <memset+0x4>

08016242 <strchr>:
 8016242:	b2c9      	uxtb	r1, r1
 8016244:	4603      	mov	r3, r0
 8016246:	4618      	mov	r0, r3
 8016248:	f813 2b01 	ldrb.w	r2, [r3], #1
 801624c:	b112      	cbz	r2, 8016254 <strchr+0x12>
 801624e:	428a      	cmp	r2, r1
 8016250:	d1f9      	bne.n	8016246 <strchr+0x4>
 8016252:	4770      	bx	lr
 8016254:	2900      	cmp	r1, #0
 8016256:	bf18      	it	ne
 8016258:	2000      	movne	r0, #0
 801625a:	4770      	bx	lr

0801625c <strncmp>:
 801625c:	b510      	push	{r4, lr}
 801625e:	b16a      	cbz	r2, 801627c <strncmp+0x20>
 8016260:	3901      	subs	r1, #1
 8016262:	1884      	adds	r4, r0, r2
 8016264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016268:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801626c:	429a      	cmp	r2, r3
 801626e:	d103      	bne.n	8016278 <strncmp+0x1c>
 8016270:	42a0      	cmp	r0, r4
 8016272:	d001      	beq.n	8016278 <strncmp+0x1c>
 8016274:	2a00      	cmp	r2, #0
 8016276:	d1f5      	bne.n	8016264 <strncmp+0x8>
 8016278:	1ad0      	subs	r0, r2, r3
 801627a:	bd10      	pop	{r4, pc}
 801627c:	4610      	mov	r0, r2
 801627e:	e7fc      	b.n	801627a <strncmp+0x1e>

08016280 <_localeconv_r>:
 8016280:	4800      	ldr	r0, [pc, #0]	@ (8016284 <_localeconv_r+0x4>)
 8016282:	4770      	bx	lr
 8016284:	24000200 	.word	0x24000200

08016288 <_close_r>:
 8016288:	b538      	push	{r3, r4, r5, lr}
 801628a:	4d06      	ldr	r5, [pc, #24]	@ (80162a4 <_close_r+0x1c>)
 801628c:	2300      	movs	r3, #0
 801628e:	4604      	mov	r4, r0
 8016290:	4608      	mov	r0, r1
 8016292:	602b      	str	r3, [r5, #0]
 8016294:	f7ec f8c2 	bl	800241c <_close>
 8016298:	1c43      	adds	r3, r0, #1
 801629a:	d102      	bne.n	80162a2 <_close_r+0x1a>
 801629c:	682b      	ldr	r3, [r5, #0]
 801629e:	b103      	cbz	r3, 80162a2 <_close_r+0x1a>
 80162a0:	6023      	str	r3, [r4, #0]
 80162a2:	bd38      	pop	{r3, r4, r5, pc}
 80162a4:	24006c68 	.word	0x24006c68

080162a8 <_lseek_r>:
 80162a8:	b538      	push	{r3, r4, r5, lr}
 80162aa:	4d07      	ldr	r5, [pc, #28]	@ (80162c8 <_lseek_r+0x20>)
 80162ac:	4604      	mov	r4, r0
 80162ae:	4608      	mov	r0, r1
 80162b0:	4611      	mov	r1, r2
 80162b2:	2200      	movs	r2, #0
 80162b4:	602a      	str	r2, [r5, #0]
 80162b6:	461a      	mov	r2, r3
 80162b8:	f7ec f8d7 	bl	800246a <_lseek>
 80162bc:	1c43      	adds	r3, r0, #1
 80162be:	d102      	bne.n	80162c6 <_lseek_r+0x1e>
 80162c0:	682b      	ldr	r3, [r5, #0]
 80162c2:	b103      	cbz	r3, 80162c6 <_lseek_r+0x1e>
 80162c4:	6023      	str	r3, [r4, #0]
 80162c6:	bd38      	pop	{r3, r4, r5, pc}
 80162c8:	24006c68 	.word	0x24006c68

080162cc <_read_r>:
 80162cc:	b538      	push	{r3, r4, r5, lr}
 80162ce:	4d07      	ldr	r5, [pc, #28]	@ (80162ec <_read_r+0x20>)
 80162d0:	4604      	mov	r4, r0
 80162d2:	4608      	mov	r0, r1
 80162d4:	4611      	mov	r1, r2
 80162d6:	2200      	movs	r2, #0
 80162d8:	602a      	str	r2, [r5, #0]
 80162da:	461a      	mov	r2, r3
 80162dc:	f7ec f865 	bl	80023aa <_read>
 80162e0:	1c43      	adds	r3, r0, #1
 80162e2:	d102      	bne.n	80162ea <_read_r+0x1e>
 80162e4:	682b      	ldr	r3, [r5, #0]
 80162e6:	b103      	cbz	r3, 80162ea <_read_r+0x1e>
 80162e8:	6023      	str	r3, [r4, #0]
 80162ea:	bd38      	pop	{r3, r4, r5, pc}
 80162ec:	24006c68 	.word	0x24006c68

080162f0 <_write_r>:
 80162f0:	b538      	push	{r3, r4, r5, lr}
 80162f2:	4d07      	ldr	r5, [pc, #28]	@ (8016310 <_write_r+0x20>)
 80162f4:	4604      	mov	r4, r0
 80162f6:	4608      	mov	r0, r1
 80162f8:	4611      	mov	r1, r2
 80162fa:	2200      	movs	r2, #0
 80162fc:	602a      	str	r2, [r5, #0]
 80162fe:	461a      	mov	r2, r3
 8016300:	f7ec f870 	bl	80023e4 <_write>
 8016304:	1c43      	adds	r3, r0, #1
 8016306:	d102      	bne.n	801630e <_write_r+0x1e>
 8016308:	682b      	ldr	r3, [r5, #0]
 801630a:	b103      	cbz	r3, 801630e <_write_r+0x1e>
 801630c:	6023      	str	r3, [r4, #0]
 801630e:	bd38      	pop	{r3, r4, r5, pc}
 8016310:	24006c68 	.word	0x24006c68

08016314 <__errno>:
 8016314:	4b01      	ldr	r3, [pc, #4]	@ (801631c <__errno+0x8>)
 8016316:	6818      	ldr	r0, [r3, #0]
 8016318:	4770      	bx	lr
 801631a:	bf00      	nop
 801631c:	2400027c 	.word	0x2400027c

08016320 <__libc_init_array>:
 8016320:	b570      	push	{r4, r5, r6, lr}
 8016322:	4d0d      	ldr	r5, [pc, #52]	@ (8016358 <__libc_init_array+0x38>)
 8016324:	4c0d      	ldr	r4, [pc, #52]	@ (801635c <__libc_init_array+0x3c>)
 8016326:	1b64      	subs	r4, r4, r5
 8016328:	10a4      	asrs	r4, r4, #2
 801632a:	2600      	movs	r6, #0
 801632c:	42a6      	cmp	r6, r4
 801632e:	d109      	bne.n	8016344 <__libc_init_array+0x24>
 8016330:	4d0b      	ldr	r5, [pc, #44]	@ (8016360 <__libc_init_array+0x40>)
 8016332:	4c0c      	ldr	r4, [pc, #48]	@ (8016364 <__libc_init_array+0x44>)
 8016334:	f003 fb18 	bl	8019968 <_init>
 8016338:	1b64      	subs	r4, r4, r5
 801633a:	10a4      	asrs	r4, r4, #2
 801633c:	2600      	movs	r6, #0
 801633e:	42a6      	cmp	r6, r4
 8016340:	d105      	bne.n	801634e <__libc_init_array+0x2e>
 8016342:	bd70      	pop	{r4, r5, r6, pc}
 8016344:	f855 3b04 	ldr.w	r3, [r5], #4
 8016348:	4798      	blx	r3
 801634a:	3601      	adds	r6, #1
 801634c:	e7ee      	b.n	801632c <__libc_init_array+0xc>
 801634e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016352:	4798      	blx	r3
 8016354:	3601      	adds	r6, #1
 8016356:	e7f2      	b.n	801633e <__libc_init_array+0x1e>
 8016358:	0801a338 	.word	0x0801a338
 801635c:	0801a338 	.word	0x0801a338
 8016360:	0801a338 	.word	0x0801a338
 8016364:	0801a33c 	.word	0x0801a33c

08016368 <__retarget_lock_init_recursive>:
 8016368:	4770      	bx	lr

0801636a <__retarget_lock_acquire_recursive>:
 801636a:	4770      	bx	lr

0801636c <__retarget_lock_release_recursive>:
 801636c:	4770      	bx	lr

0801636e <memcpy>:
 801636e:	440a      	add	r2, r1
 8016370:	4291      	cmp	r1, r2
 8016372:	f100 33ff 	add.w	r3, r0, #4294967295
 8016376:	d100      	bne.n	801637a <memcpy+0xc>
 8016378:	4770      	bx	lr
 801637a:	b510      	push	{r4, lr}
 801637c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016380:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016384:	4291      	cmp	r1, r2
 8016386:	d1f9      	bne.n	801637c <memcpy+0xe>
 8016388:	bd10      	pop	{r4, pc}
 801638a:	0000      	movs	r0, r0
 801638c:	0000      	movs	r0, r0
	...

08016390 <nan>:
 8016390:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016398 <nan+0x8>
 8016394:	4770      	bx	lr
 8016396:	bf00      	nop
 8016398:	00000000 	.word	0x00000000
 801639c:	7ff80000 	.word	0x7ff80000

080163a0 <quorem>:
 80163a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163a4:	6903      	ldr	r3, [r0, #16]
 80163a6:	690c      	ldr	r4, [r1, #16]
 80163a8:	42a3      	cmp	r3, r4
 80163aa:	4607      	mov	r7, r0
 80163ac:	db7e      	blt.n	80164ac <quorem+0x10c>
 80163ae:	3c01      	subs	r4, #1
 80163b0:	f101 0814 	add.w	r8, r1, #20
 80163b4:	00a3      	lsls	r3, r4, #2
 80163b6:	f100 0514 	add.w	r5, r0, #20
 80163ba:	9300      	str	r3, [sp, #0]
 80163bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80163c0:	9301      	str	r3, [sp, #4]
 80163c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80163c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80163ca:	3301      	adds	r3, #1
 80163cc:	429a      	cmp	r2, r3
 80163ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80163d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80163d6:	d32e      	bcc.n	8016436 <quorem+0x96>
 80163d8:	f04f 0a00 	mov.w	sl, #0
 80163dc:	46c4      	mov	ip, r8
 80163de:	46ae      	mov	lr, r5
 80163e0:	46d3      	mov	fp, sl
 80163e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80163e6:	b298      	uxth	r0, r3
 80163e8:	fb06 a000 	mla	r0, r6, r0, sl
 80163ec:	0c02      	lsrs	r2, r0, #16
 80163ee:	0c1b      	lsrs	r3, r3, #16
 80163f0:	fb06 2303 	mla	r3, r6, r3, r2
 80163f4:	f8de 2000 	ldr.w	r2, [lr]
 80163f8:	b280      	uxth	r0, r0
 80163fa:	b292      	uxth	r2, r2
 80163fc:	1a12      	subs	r2, r2, r0
 80163fe:	445a      	add	r2, fp
 8016400:	f8de 0000 	ldr.w	r0, [lr]
 8016404:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016408:	b29b      	uxth	r3, r3
 801640a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801640e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8016412:	b292      	uxth	r2, r2
 8016414:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8016418:	45e1      	cmp	r9, ip
 801641a:	f84e 2b04 	str.w	r2, [lr], #4
 801641e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8016422:	d2de      	bcs.n	80163e2 <quorem+0x42>
 8016424:	9b00      	ldr	r3, [sp, #0]
 8016426:	58eb      	ldr	r3, [r5, r3]
 8016428:	b92b      	cbnz	r3, 8016436 <quorem+0x96>
 801642a:	9b01      	ldr	r3, [sp, #4]
 801642c:	3b04      	subs	r3, #4
 801642e:	429d      	cmp	r5, r3
 8016430:	461a      	mov	r2, r3
 8016432:	d32f      	bcc.n	8016494 <quorem+0xf4>
 8016434:	613c      	str	r4, [r7, #16]
 8016436:	4638      	mov	r0, r7
 8016438:	f001 fca0 	bl	8017d7c <__mcmp>
 801643c:	2800      	cmp	r0, #0
 801643e:	db25      	blt.n	801648c <quorem+0xec>
 8016440:	4629      	mov	r1, r5
 8016442:	2000      	movs	r0, #0
 8016444:	f858 2b04 	ldr.w	r2, [r8], #4
 8016448:	f8d1 c000 	ldr.w	ip, [r1]
 801644c:	fa1f fe82 	uxth.w	lr, r2
 8016450:	fa1f f38c 	uxth.w	r3, ip
 8016454:	eba3 030e 	sub.w	r3, r3, lr
 8016458:	4403      	add	r3, r0
 801645a:	0c12      	lsrs	r2, r2, #16
 801645c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8016460:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8016464:	b29b      	uxth	r3, r3
 8016466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801646a:	45c1      	cmp	r9, r8
 801646c:	f841 3b04 	str.w	r3, [r1], #4
 8016470:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016474:	d2e6      	bcs.n	8016444 <quorem+0xa4>
 8016476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801647a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801647e:	b922      	cbnz	r2, 801648a <quorem+0xea>
 8016480:	3b04      	subs	r3, #4
 8016482:	429d      	cmp	r5, r3
 8016484:	461a      	mov	r2, r3
 8016486:	d30b      	bcc.n	80164a0 <quorem+0x100>
 8016488:	613c      	str	r4, [r7, #16]
 801648a:	3601      	adds	r6, #1
 801648c:	4630      	mov	r0, r6
 801648e:	b003      	add	sp, #12
 8016490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016494:	6812      	ldr	r2, [r2, #0]
 8016496:	3b04      	subs	r3, #4
 8016498:	2a00      	cmp	r2, #0
 801649a:	d1cb      	bne.n	8016434 <quorem+0x94>
 801649c:	3c01      	subs	r4, #1
 801649e:	e7c6      	b.n	801642e <quorem+0x8e>
 80164a0:	6812      	ldr	r2, [r2, #0]
 80164a2:	3b04      	subs	r3, #4
 80164a4:	2a00      	cmp	r2, #0
 80164a6:	d1ef      	bne.n	8016488 <quorem+0xe8>
 80164a8:	3c01      	subs	r4, #1
 80164aa:	e7ea      	b.n	8016482 <quorem+0xe2>
 80164ac:	2000      	movs	r0, #0
 80164ae:	e7ee      	b.n	801648e <quorem+0xee>

080164b0 <_dtoa_r>:
 80164b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164b4:	ed2d 8b02 	vpush	{d8}
 80164b8:	69c7      	ldr	r7, [r0, #28]
 80164ba:	b091      	sub	sp, #68	@ 0x44
 80164bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80164c0:	ec55 4b10 	vmov	r4, r5, d0
 80164c4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80164c6:	9107      	str	r1, [sp, #28]
 80164c8:	4681      	mov	r9, r0
 80164ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80164cc:	930d      	str	r3, [sp, #52]	@ 0x34
 80164ce:	b97f      	cbnz	r7, 80164f0 <_dtoa_r+0x40>
 80164d0:	2010      	movs	r0, #16
 80164d2:	f001 f8c7 	bl	8017664 <malloc>
 80164d6:	4602      	mov	r2, r0
 80164d8:	f8c9 001c 	str.w	r0, [r9, #28]
 80164dc:	b920      	cbnz	r0, 80164e8 <_dtoa_r+0x38>
 80164de:	4ba0      	ldr	r3, [pc, #640]	@ (8016760 <_dtoa_r+0x2b0>)
 80164e0:	21ef      	movs	r1, #239	@ 0xef
 80164e2:	48a0      	ldr	r0, [pc, #640]	@ (8016764 <_dtoa_r+0x2b4>)
 80164e4:	f002 f870 	bl	80185c8 <__assert_func>
 80164e8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80164ec:	6007      	str	r7, [r0, #0]
 80164ee:	60c7      	str	r7, [r0, #12]
 80164f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80164f4:	6819      	ldr	r1, [r3, #0]
 80164f6:	b159      	cbz	r1, 8016510 <_dtoa_r+0x60>
 80164f8:	685a      	ldr	r2, [r3, #4]
 80164fa:	604a      	str	r2, [r1, #4]
 80164fc:	2301      	movs	r3, #1
 80164fe:	4093      	lsls	r3, r2
 8016500:	608b      	str	r3, [r1, #8]
 8016502:	4648      	mov	r0, r9
 8016504:	f001 f9b6 	bl	8017874 <_Bfree>
 8016508:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801650c:	2200      	movs	r2, #0
 801650e:	601a      	str	r2, [r3, #0]
 8016510:	1e2b      	subs	r3, r5, #0
 8016512:	bfbb      	ittet	lt
 8016514:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8016518:	9303      	strlt	r3, [sp, #12]
 801651a:	2300      	movge	r3, #0
 801651c:	2201      	movlt	r2, #1
 801651e:	bfac      	ite	ge
 8016520:	6033      	strge	r3, [r6, #0]
 8016522:	6032      	strlt	r2, [r6, #0]
 8016524:	4b90      	ldr	r3, [pc, #576]	@ (8016768 <_dtoa_r+0x2b8>)
 8016526:	9e03      	ldr	r6, [sp, #12]
 8016528:	43b3      	bics	r3, r6
 801652a:	d110      	bne.n	801654e <_dtoa_r+0x9e>
 801652c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801652e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8016532:	6013      	str	r3, [r2, #0]
 8016534:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8016538:	4323      	orrs	r3, r4
 801653a:	f000 84de 	beq.w	8016efa <_dtoa_r+0xa4a>
 801653e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016540:	4f8a      	ldr	r7, [pc, #552]	@ (801676c <_dtoa_r+0x2bc>)
 8016542:	2b00      	cmp	r3, #0
 8016544:	f000 84e0 	beq.w	8016f08 <_dtoa_r+0xa58>
 8016548:	1cfb      	adds	r3, r7, #3
 801654a:	f000 bcdb 	b.w	8016f04 <_dtoa_r+0xa54>
 801654e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8016552:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801655a:	d10a      	bne.n	8016572 <_dtoa_r+0xc2>
 801655c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801655e:	2301      	movs	r3, #1
 8016560:	6013      	str	r3, [r2, #0]
 8016562:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016564:	b113      	cbz	r3, 801656c <_dtoa_r+0xbc>
 8016566:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8016568:	4b81      	ldr	r3, [pc, #516]	@ (8016770 <_dtoa_r+0x2c0>)
 801656a:	6013      	str	r3, [r2, #0]
 801656c:	4f81      	ldr	r7, [pc, #516]	@ (8016774 <_dtoa_r+0x2c4>)
 801656e:	f000 bccb 	b.w	8016f08 <_dtoa_r+0xa58>
 8016572:	aa0e      	add	r2, sp, #56	@ 0x38
 8016574:	a90f      	add	r1, sp, #60	@ 0x3c
 8016576:	4648      	mov	r0, r9
 8016578:	eeb0 0b48 	vmov.f64	d0, d8
 801657c:	f001 fd1e 	bl	8017fbc <__d2b>
 8016580:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8016584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016586:	9001      	str	r0, [sp, #4]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d045      	beq.n	8016618 <_dtoa_r+0x168>
 801658c:	eeb0 7b48 	vmov.f64	d7, d8
 8016590:	ee18 1a90 	vmov	r1, s17
 8016594:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8016598:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801659c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80165a0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80165a4:	2500      	movs	r5, #0
 80165a6:	ee07 1a90 	vmov	s15, r1
 80165aa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80165ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8016748 <_dtoa_r+0x298>
 80165b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80165b6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8016750 <_dtoa_r+0x2a0>
 80165ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80165be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8016758 <_dtoa_r+0x2a8>
 80165c2:	ee07 3a90 	vmov	s15, r3
 80165c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80165ca:	eeb0 7b46 	vmov.f64	d7, d6
 80165ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 80165d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80165d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80165da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165de:	ee16 8a90 	vmov	r8, s13
 80165e2:	d508      	bpl.n	80165f6 <_dtoa_r+0x146>
 80165e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80165e8:	eeb4 6b47 	vcmp.f64	d6, d7
 80165ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165f0:	bf18      	it	ne
 80165f2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80165f6:	f1b8 0f16 	cmp.w	r8, #22
 80165fa:	d82b      	bhi.n	8016654 <_dtoa_r+0x1a4>
 80165fc:	495e      	ldr	r1, [pc, #376]	@ (8016778 <_dtoa_r+0x2c8>)
 80165fe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8016602:	ed91 7b00 	vldr	d7, [r1]
 8016606:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801660a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801660e:	d501      	bpl.n	8016614 <_dtoa_r+0x164>
 8016610:	f108 38ff 	add.w	r8, r8, #4294967295
 8016614:	2100      	movs	r1, #0
 8016616:	e01e      	b.n	8016656 <_dtoa_r+0x1a6>
 8016618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801661a:	4413      	add	r3, r2
 801661c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8016620:	2920      	cmp	r1, #32
 8016622:	bfc1      	itttt	gt
 8016624:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8016628:	408e      	lslgt	r6, r1
 801662a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801662e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8016632:	bfd6      	itet	le
 8016634:	f1c1 0120 	rsble	r1, r1, #32
 8016638:	4331      	orrgt	r1, r6
 801663a:	fa04 f101 	lslle.w	r1, r4, r1
 801663e:	ee07 1a90 	vmov	s15, r1
 8016642:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016646:	3b01      	subs	r3, #1
 8016648:	ee17 1a90 	vmov	r1, s15
 801664c:	2501      	movs	r5, #1
 801664e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8016652:	e7a8      	b.n	80165a6 <_dtoa_r+0xf6>
 8016654:	2101      	movs	r1, #1
 8016656:	1ad2      	subs	r2, r2, r3
 8016658:	1e53      	subs	r3, r2, #1
 801665a:	9306      	str	r3, [sp, #24]
 801665c:	bf45      	ittet	mi
 801665e:	f1c2 0301 	rsbmi	r3, r2, #1
 8016662:	9305      	strmi	r3, [sp, #20]
 8016664:	2300      	movpl	r3, #0
 8016666:	2300      	movmi	r3, #0
 8016668:	bf4c      	ite	mi
 801666a:	9306      	strmi	r3, [sp, #24]
 801666c:	9305      	strpl	r3, [sp, #20]
 801666e:	f1b8 0f00 	cmp.w	r8, #0
 8016672:	910c      	str	r1, [sp, #48]	@ 0x30
 8016674:	db18      	blt.n	80166a8 <_dtoa_r+0x1f8>
 8016676:	9b06      	ldr	r3, [sp, #24]
 8016678:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801667c:	4443      	add	r3, r8
 801667e:	9306      	str	r3, [sp, #24]
 8016680:	2300      	movs	r3, #0
 8016682:	9a07      	ldr	r2, [sp, #28]
 8016684:	2a09      	cmp	r2, #9
 8016686:	d849      	bhi.n	801671c <_dtoa_r+0x26c>
 8016688:	2a05      	cmp	r2, #5
 801668a:	bfc4      	itt	gt
 801668c:	3a04      	subgt	r2, #4
 801668e:	9207      	strgt	r2, [sp, #28]
 8016690:	9a07      	ldr	r2, [sp, #28]
 8016692:	f1a2 0202 	sub.w	r2, r2, #2
 8016696:	bfcc      	ite	gt
 8016698:	2400      	movgt	r4, #0
 801669a:	2401      	movle	r4, #1
 801669c:	2a03      	cmp	r2, #3
 801669e:	d848      	bhi.n	8016732 <_dtoa_r+0x282>
 80166a0:	e8df f002 	tbb	[pc, r2]
 80166a4:	3a2c2e0b 	.word	0x3a2c2e0b
 80166a8:	9b05      	ldr	r3, [sp, #20]
 80166aa:	2200      	movs	r2, #0
 80166ac:	eba3 0308 	sub.w	r3, r3, r8
 80166b0:	9305      	str	r3, [sp, #20]
 80166b2:	920a      	str	r2, [sp, #40]	@ 0x28
 80166b4:	f1c8 0300 	rsb	r3, r8, #0
 80166b8:	e7e3      	b.n	8016682 <_dtoa_r+0x1d2>
 80166ba:	2200      	movs	r2, #0
 80166bc:	9208      	str	r2, [sp, #32]
 80166be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80166c0:	2a00      	cmp	r2, #0
 80166c2:	dc39      	bgt.n	8016738 <_dtoa_r+0x288>
 80166c4:	f04f 0b01 	mov.w	fp, #1
 80166c8:	46da      	mov	sl, fp
 80166ca:	465a      	mov	r2, fp
 80166cc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80166d0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80166d4:	2100      	movs	r1, #0
 80166d6:	2004      	movs	r0, #4
 80166d8:	f100 0614 	add.w	r6, r0, #20
 80166dc:	4296      	cmp	r6, r2
 80166de:	d930      	bls.n	8016742 <_dtoa_r+0x292>
 80166e0:	6079      	str	r1, [r7, #4]
 80166e2:	4648      	mov	r0, r9
 80166e4:	9304      	str	r3, [sp, #16]
 80166e6:	f001 f885 	bl	80177f4 <_Balloc>
 80166ea:	9b04      	ldr	r3, [sp, #16]
 80166ec:	4607      	mov	r7, r0
 80166ee:	2800      	cmp	r0, #0
 80166f0:	d146      	bne.n	8016780 <_dtoa_r+0x2d0>
 80166f2:	4b22      	ldr	r3, [pc, #136]	@ (801677c <_dtoa_r+0x2cc>)
 80166f4:	4602      	mov	r2, r0
 80166f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80166fa:	e6f2      	b.n	80164e2 <_dtoa_r+0x32>
 80166fc:	2201      	movs	r2, #1
 80166fe:	e7dd      	b.n	80166bc <_dtoa_r+0x20c>
 8016700:	2200      	movs	r2, #0
 8016702:	9208      	str	r2, [sp, #32]
 8016704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016706:	eb08 0b02 	add.w	fp, r8, r2
 801670a:	f10b 0a01 	add.w	sl, fp, #1
 801670e:	4652      	mov	r2, sl
 8016710:	2a01      	cmp	r2, #1
 8016712:	bfb8      	it	lt
 8016714:	2201      	movlt	r2, #1
 8016716:	e7db      	b.n	80166d0 <_dtoa_r+0x220>
 8016718:	2201      	movs	r2, #1
 801671a:	e7f2      	b.n	8016702 <_dtoa_r+0x252>
 801671c:	2401      	movs	r4, #1
 801671e:	2200      	movs	r2, #0
 8016720:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8016724:	f04f 3bff 	mov.w	fp, #4294967295
 8016728:	2100      	movs	r1, #0
 801672a:	46da      	mov	sl, fp
 801672c:	2212      	movs	r2, #18
 801672e:	9109      	str	r1, [sp, #36]	@ 0x24
 8016730:	e7ce      	b.n	80166d0 <_dtoa_r+0x220>
 8016732:	2201      	movs	r2, #1
 8016734:	9208      	str	r2, [sp, #32]
 8016736:	e7f5      	b.n	8016724 <_dtoa_r+0x274>
 8016738:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801673c:	46da      	mov	sl, fp
 801673e:	465a      	mov	r2, fp
 8016740:	e7c6      	b.n	80166d0 <_dtoa_r+0x220>
 8016742:	3101      	adds	r1, #1
 8016744:	0040      	lsls	r0, r0, #1
 8016746:	e7c7      	b.n	80166d8 <_dtoa_r+0x228>
 8016748:	636f4361 	.word	0x636f4361
 801674c:	3fd287a7 	.word	0x3fd287a7
 8016750:	8b60c8b3 	.word	0x8b60c8b3
 8016754:	3fc68a28 	.word	0x3fc68a28
 8016758:	509f79fb 	.word	0x509f79fb
 801675c:	3fd34413 	.word	0x3fd34413
 8016760:	08019d92 	.word	0x08019d92
 8016764:	08019da9 	.word	0x08019da9
 8016768:	7ff00000 	.word	0x7ff00000
 801676c:	08019d8e 	.word	0x08019d8e
 8016770:	08019d5a 	.word	0x08019d5a
 8016774:	08019d59 	.word	0x08019d59
 8016778:	08019f00 	.word	0x08019f00
 801677c:	08019e01 	.word	0x08019e01
 8016780:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8016784:	f1ba 0f0e 	cmp.w	sl, #14
 8016788:	6010      	str	r0, [r2, #0]
 801678a:	d86f      	bhi.n	801686c <_dtoa_r+0x3bc>
 801678c:	2c00      	cmp	r4, #0
 801678e:	d06d      	beq.n	801686c <_dtoa_r+0x3bc>
 8016790:	f1b8 0f00 	cmp.w	r8, #0
 8016794:	f340 80c2 	ble.w	801691c <_dtoa_r+0x46c>
 8016798:	4aca      	ldr	r2, [pc, #808]	@ (8016ac4 <_dtoa_r+0x614>)
 801679a:	f008 010f 	and.w	r1, r8, #15
 801679e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80167a2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80167a6:	ed92 7b00 	vldr	d7, [r2]
 80167aa:	ea4f 1128 	mov.w	r1, r8, asr #4
 80167ae:	f000 80a9 	beq.w	8016904 <_dtoa_r+0x454>
 80167b2:	4ac5      	ldr	r2, [pc, #788]	@ (8016ac8 <_dtoa_r+0x618>)
 80167b4:	ed92 6b08 	vldr	d6, [r2, #32]
 80167b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80167bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80167c0:	f001 010f 	and.w	r1, r1, #15
 80167c4:	2203      	movs	r2, #3
 80167c6:	48c0      	ldr	r0, [pc, #768]	@ (8016ac8 <_dtoa_r+0x618>)
 80167c8:	2900      	cmp	r1, #0
 80167ca:	f040 809d 	bne.w	8016908 <_dtoa_r+0x458>
 80167ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80167d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80167d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80167da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80167dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80167e0:	2900      	cmp	r1, #0
 80167e2:	f000 80c1 	beq.w	8016968 <_dtoa_r+0x4b8>
 80167e6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80167ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80167ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167f2:	f140 80b9 	bpl.w	8016968 <_dtoa_r+0x4b8>
 80167f6:	f1ba 0f00 	cmp.w	sl, #0
 80167fa:	f000 80b5 	beq.w	8016968 <_dtoa_r+0x4b8>
 80167fe:	f1bb 0f00 	cmp.w	fp, #0
 8016802:	dd31      	ble.n	8016868 <_dtoa_r+0x3b8>
 8016804:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8016808:	ee27 7b06 	vmul.f64	d7, d7, d6
 801680c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016810:	f108 31ff 	add.w	r1, r8, #4294967295
 8016814:	9104      	str	r1, [sp, #16]
 8016816:	3201      	adds	r2, #1
 8016818:	465c      	mov	r4, fp
 801681a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801681e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8016822:	ee07 2a90 	vmov	s15, r2
 8016826:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801682a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801682e:	ee15 2a90 	vmov	r2, s11
 8016832:	ec51 0b15 	vmov	r0, r1, d5
 8016836:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801683a:	2c00      	cmp	r4, #0
 801683c:	f040 8098 	bne.w	8016970 <_dtoa_r+0x4c0>
 8016840:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8016844:	ee36 6b47 	vsub.f64	d6, d6, d7
 8016848:	ec41 0b17 	vmov	d7, r0, r1
 801684c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016854:	f300 8261 	bgt.w	8016d1a <_dtoa_r+0x86a>
 8016858:	eeb1 7b47 	vneg.f64	d7, d7
 801685c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016864:	f100 80f5 	bmi.w	8016a52 <_dtoa_r+0x5a2>
 8016868:	ed8d 8b02 	vstr	d8, [sp, #8]
 801686c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801686e:	2a00      	cmp	r2, #0
 8016870:	f2c0 812c 	blt.w	8016acc <_dtoa_r+0x61c>
 8016874:	f1b8 0f0e 	cmp.w	r8, #14
 8016878:	f300 8128 	bgt.w	8016acc <_dtoa_r+0x61c>
 801687c:	4b91      	ldr	r3, [pc, #580]	@ (8016ac4 <_dtoa_r+0x614>)
 801687e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016882:	ed93 6b00 	vldr	d6, [r3]
 8016886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016888:	2b00      	cmp	r3, #0
 801688a:	da03      	bge.n	8016894 <_dtoa_r+0x3e4>
 801688c:	f1ba 0f00 	cmp.w	sl, #0
 8016890:	f340 80d2 	ble.w	8016a38 <_dtoa_r+0x588>
 8016894:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8016898:	ed9d 7b02 	vldr	d7, [sp, #8]
 801689c:	463e      	mov	r6, r7
 801689e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80168a2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80168a6:	ee15 3a10 	vmov	r3, s10
 80168aa:	3330      	adds	r3, #48	@ 0x30
 80168ac:	f806 3b01 	strb.w	r3, [r6], #1
 80168b0:	1bf3      	subs	r3, r6, r7
 80168b2:	459a      	cmp	sl, r3
 80168b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80168b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80168bc:	f040 80f8 	bne.w	8016ab0 <_dtoa_r+0x600>
 80168c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80168c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80168c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168cc:	f300 80dd 	bgt.w	8016a8a <_dtoa_r+0x5da>
 80168d0:	eeb4 7b46 	vcmp.f64	d7, d6
 80168d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168d8:	d104      	bne.n	80168e4 <_dtoa_r+0x434>
 80168da:	ee15 3a10 	vmov	r3, s10
 80168de:	07db      	lsls	r3, r3, #31
 80168e0:	f100 80d3 	bmi.w	8016a8a <_dtoa_r+0x5da>
 80168e4:	9901      	ldr	r1, [sp, #4]
 80168e6:	4648      	mov	r0, r9
 80168e8:	f000 ffc4 	bl	8017874 <_Bfree>
 80168ec:	2300      	movs	r3, #0
 80168ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80168f0:	7033      	strb	r3, [r6, #0]
 80168f2:	f108 0301 	add.w	r3, r8, #1
 80168f6:	6013      	str	r3, [r2, #0]
 80168f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	f000 8304 	beq.w	8016f08 <_dtoa_r+0xa58>
 8016900:	601e      	str	r6, [r3, #0]
 8016902:	e301      	b.n	8016f08 <_dtoa_r+0xa58>
 8016904:	2202      	movs	r2, #2
 8016906:	e75e      	b.n	80167c6 <_dtoa_r+0x316>
 8016908:	07cc      	lsls	r4, r1, #31
 801690a:	d504      	bpl.n	8016916 <_dtoa_r+0x466>
 801690c:	ed90 6b00 	vldr	d6, [r0]
 8016910:	3201      	adds	r2, #1
 8016912:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016916:	1049      	asrs	r1, r1, #1
 8016918:	3008      	adds	r0, #8
 801691a:	e755      	b.n	80167c8 <_dtoa_r+0x318>
 801691c:	d022      	beq.n	8016964 <_dtoa_r+0x4b4>
 801691e:	f1c8 0100 	rsb	r1, r8, #0
 8016922:	4a68      	ldr	r2, [pc, #416]	@ (8016ac4 <_dtoa_r+0x614>)
 8016924:	f001 000f 	and.w	r0, r1, #15
 8016928:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801692c:	ed92 7b00 	vldr	d7, [r2]
 8016930:	ee28 7b07 	vmul.f64	d7, d8, d7
 8016934:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016938:	4863      	ldr	r0, [pc, #396]	@ (8016ac8 <_dtoa_r+0x618>)
 801693a:	1109      	asrs	r1, r1, #4
 801693c:	2400      	movs	r4, #0
 801693e:	2202      	movs	r2, #2
 8016940:	b929      	cbnz	r1, 801694e <_dtoa_r+0x49e>
 8016942:	2c00      	cmp	r4, #0
 8016944:	f43f af49 	beq.w	80167da <_dtoa_r+0x32a>
 8016948:	ed8d 7b02 	vstr	d7, [sp, #8]
 801694c:	e745      	b.n	80167da <_dtoa_r+0x32a>
 801694e:	07ce      	lsls	r6, r1, #31
 8016950:	d505      	bpl.n	801695e <_dtoa_r+0x4ae>
 8016952:	ed90 6b00 	vldr	d6, [r0]
 8016956:	3201      	adds	r2, #1
 8016958:	2401      	movs	r4, #1
 801695a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801695e:	1049      	asrs	r1, r1, #1
 8016960:	3008      	adds	r0, #8
 8016962:	e7ed      	b.n	8016940 <_dtoa_r+0x490>
 8016964:	2202      	movs	r2, #2
 8016966:	e738      	b.n	80167da <_dtoa_r+0x32a>
 8016968:	f8cd 8010 	str.w	r8, [sp, #16]
 801696c:	4654      	mov	r4, sl
 801696e:	e754      	b.n	801681a <_dtoa_r+0x36a>
 8016970:	4a54      	ldr	r2, [pc, #336]	@ (8016ac4 <_dtoa_r+0x614>)
 8016972:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8016976:	ed12 4b02 	vldr	d4, [r2, #-8]
 801697a:	9a08      	ldr	r2, [sp, #32]
 801697c:	ec41 0b17 	vmov	d7, r0, r1
 8016980:	443c      	add	r4, r7
 8016982:	b34a      	cbz	r2, 80169d8 <_dtoa_r+0x528>
 8016984:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8016988:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801698c:	463e      	mov	r6, r7
 801698e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8016992:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8016996:	ee35 7b47 	vsub.f64	d7, d5, d7
 801699a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801699e:	ee14 2a90 	vmov	r2, s9
 80169a2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80169a6:	3230      	adds	r2, #48	@ 0x30
 80169a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80169ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80169b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169b4:	f806 2b01 	strb.w	r2, [r6], #1
 80169b8:	d438      	bmi.n	8016a2c <_dtoa_r+0x57c>
 80169ba:	ee32 5b46 	vsub.f64	d5, d2, d6
 80169be:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80169c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169c6:	d462      	bmi.n	8016a8e <_dtoa_r+0x5de>
 80169c8:	42a6      	cmp	r6, r4
 80169ca:	f43f af4d 	beq.w	8016868 <_dtoa_r+0x3b8>
 80169ce:	ee27 7b03 	vmul.f64	d7, d7, d3
 80169d2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80169d6:	e7e0      	b.n	801699a <_dtoa_r+0x4ea>
 80169d8:	4621      	mov	r1, r4
 80169da:	463e      	mov	r6, r7
 80169dc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80169e0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80169e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80169e8:	ee14 2a90 	vmov	r2, s9
 80169ec:	3230      	adds	r2, #48	@ 0x30
 80169ee:	f806 2b01 	strb.w	r2, [r6], #1
 80169f2:	42a6      	cmp	r6, r4
 80169f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80169f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80169fc:	d119      	bne.n	8016a32 <_dtoa_r+0x582>
 80169fe:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8016a02:	ee37 4b05 	vadd.f64	d4, d7, d5
 8016a06:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8016a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a0e:	dc3e      	bgt.n	8016a8e <_dtoa_r+0x5de>
 8016a10:	ee35 5b47 	vsub.f64	d5, d5, d7
 8016a14:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8016a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a1c:	f57f af24 	bpl.w	8016868 <_dtoa_r+0x3b8>
 8016a20:	460e      	mov	r6, r1
 8016a22:	3901      	subs	r1, #1
 8016a24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016a28:	2b30      	cmp	r3, #48	@ 0x30
 8016a2a:	d0f9      	beq.n	8016a20 <_dtoa_r+0x570>
 8016a2c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016a30:	e758      	b.n	80168e4 <_dtoa_r+0x434>
 8016a32:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016a36:	e7d5      	b.n	80169e4 <_dtoa_r+0x534>
 8016a38:	d10b      	bne.n	8016a52 <_dtoa_r+0x5a2>
 8016a3a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8016a3e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016a42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016a46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a4e:	f2c0 8161 	blt.w	8016d14 <_dtoa_r+0x864>
 8016a52:	2400      	movs	r4, #0
 8016a54:	4625      	mov	r5, r4
 8016a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a58:	43db      	mvns	r3, r3
 8016a5a:	9304      	str	r3, [sp, #16]
 8016a5c:	463e      	mov	r6, r7
 8016a5e:	f04f 0800 	mov.w	r8, #0
 8016a62:	4621      	mov	r1, r4
 8016a64:	4648      	mov	r0, r9
 8016a66:	f000 ff05 	bl	8017874 <_Bfree>
 8016a6a:	2d00      	cmp	r5, #0
 8016a6c:	d0de      	beq.n	8016a2c <_dtoa_r+0x57c>
 8016a6e:	f1b8 0f00 	cmp.w	r8, #0
 8016a72:	d005      	beq.n	8016a80 <_dtoa_r+0x5d0>
 8016a74:	45a8      	cmp	r8, r5
 8016a76:	d003      	beq.n	8016a80 <_dtoa_r+0x5d0>
 8016a78:	4641      	mov	r1, r8
 8016a7a:	4648      	mov	r0, r9
 8016a7c:	f000 fefa 	bl	8017874 <_Bfree>
 8016a80:	4629      	mov	r1, r5
 8016a82:	4648      	mov	r0, r9
 8016a84:	f000 fef6 	bl	8017874 <_Bfree>
 8016a88:	e7d0      	b.n	8016a2c <_dtoa_r+0x57c>
 8016a8a:	f8cd 8010 	str.w	r8, [sp, #16]
 8016a8e:	4633      	mov	r3, r6
 8016a90:	461e      	mov	r6, r3
 8016a92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016a96:	2a39      	cmp	r2, #57	@ 0x39
 8016a98:	d106      	bne.n	8016aa8 <_dtoa_r+0x5f8>
 8016a9a:	429f      	cmp	r7, r3
 8016a9c:	d1f8      	bne.n	8016a90 <_dtoa_r+0x5e0>
 8016a9e:	9a04      	ldr	r2, [sp, #16]
 8016aa0:	3201      	adds	r2, #1
 8016aa2:	9204      	str	r2, [sp, #16]
 8016aa4:	2230      	movs	r2, #48	@ 0x30
 8016aa6:	703a      	strb	r2, [r7, #0]
 8016aa8:	781a      	ldrb	r2, [r3, #0]
 8016aaa:	3201      	adds	r2, #1
 8016aac:	701a      	strb	r2, [r3, #0]
 8016aae:	e7bd      	b.n	8016a2c <_dtoa_r+0x57c>
 8016ab0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016ab4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016abc:	f47f aeef 	bne.w	801689e <_dtoa_r+0x3ee>
 8016ac0:	e710      	b.n	80168e4 <_dtoa_r+0x434>
 8016ac2:	bf00      	nop
 8016ac4:	08019f00 	.word	0x08019f00
 8016ac8:	08019ed8 	.word	0x08019ed8
 8016acc:	9908      	ldr	r1, [sp, #32]
 8016ace:	2900      	cmp	r1, #0
 8016ad0:	f000 80e3 	beq.w	8016c9a <_dtoa_r+0x7ea>
 8016ad4:	9907      	ldr	r1, [sp, #28]
 8016ad6:	2901      	cmp	r1, #1
 8016ad8:	f300 80c8 	bgt.w	8016c6c <_dtoa_r+0x7bc>
 8016adc:	2d00      	cmp	r5, #0
 8016ade:	f000 80c1 	beq.w	8016c64 <_dtoa_r+0x7b4>
 8016ae2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016ae6:	9e05      	ldr	r6, [sp, #20]
 8016ae8:	461c      	mov	r4, r3
 8016aea:	9304      	str	r3, [sp, #16]
 8016aec:	9b05      	ldr	r3, [sp, #20]
 8016aee:	4413      	add	r3, r2
 8016af0:	9305      	str	r3, [sp, #20]
 8016af2:	9b06      	ldr	r3, [sp, #24]
 8016af4:	2101      	movs	r1, #1
 8016af6:	4413      	add	r3, r2
 8016af8:	4648      	mov	r0, r9
 8016afa:	9306      	str	r3, [sp, #24]
 8016afc:	f000 ffb8 	bl	8017a70 <__i2b>
 8016b00:	9b04      	ldr	r3, [sp, #16]
 8016b02:	4605      	mov	r5, r0
 8016b04:	b166      	cbz	r6, 8016b20 <_dtoa_r+0x670>
 8016b06:	9a06      	ldr	r2, [sp, #24]
 8016b08:	2a00      	cmp	r2, #0
 8016b0a:	dd09      	ble.n	8016b20 <_dtoa_r+0x670>
 8016b0c:	42b2      	cmp	r2, r6
 8016b0e:	9905      	ldr	r1, [sp, #20]
 8016b10:	bfa8      	it	ge
 8016b12:	4632      	movge	r2, r6
 8016b14:	1a89      	subs	r1, r1, r2
 8016b16:	9105      	str	r1, [sp, #20]
 8016b18:	9906      	ldr	r1, [sp, #24]
 8016b1a:	1ab6      	subs	r6, r6, r2
 8016b1c:	1a8a      	subs	r2, r1, r2
 8016b1e:	9206      	str	r2, [sp, #24]
 8016b20:	b1fb      	cbz	r3, 8016b62 <_dtoa_r+0x6b2>
 8016b22:	9a08      	ldr	r2, [sp, #32]
 8016b24:	2a00      	cmp	r2, #0
 8016b26:	f000 80bc 	beq.w	8016ca2 <_dtoa_r+0x7f2>
 8016b2a:	b19c      	cbz	r4, 8016b54 <_dtoa_r+0x6a4>
 8016b2c:	4629      	mov	r1, r5
 8016b2e:	4622      	mov	r2, r4
 8016b30:	4648      	mov	r0, r9
 8016b32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016b34:	f001 f85c 	bl	8017bf0 <__pow5mult>
 8016b38:	9a01      	ldr	r2, [sp, #4]
 8016b3a:	4601      	mov	r1, r0
 8016b3c:	4605      	mov	r5, r0
 8016b3e:	4648      	mov	r0, r9
 8016b40:	f000 ffac 	bl	8017a9c <__multiply>
 8016b44:	9901      	ldr	r1, [sp, #4]
 8016b46:	9004      	str	r0, [sp, #16]
 8016b48:	4648      	mov	r0, r9
 8016b4a:	f000 fe93 	bl	8017874 <_Bfree>
 8016b4e:	9a04      	ldr	r2, [sp, #16]
 8016b50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016b52:	9201      	str	r2, [sp, #4]
 8016b54:	1b1a      	subs	r2, r3, r4
 8016b56:	d004      	beq.n	8016b62 <_dtoa_r+0x6b2>
 8016b58:	9901      	ldr	r1, [sp, #4]
 8016b5a:	4648      	mov	r0, r9
 8016b5c:	f001 f848 	bl	8017bf0 <__pow5mult>
 8016b60:	9001      	str	r0, [sp, #4]
 8016b62:	2101      	movs	r1, #1
 8016b64:	4648      	mov	r0, r9
 8016b66:	f000 ff83 	bl	8017a70 <__i2b>
 8016b6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016b6c:	4604      	mov	r4, r0
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	f000 81d0 	beq.w	8016f14 <_dtoa_r+0xa64>
 8016b74:	461a      	mov	r2, r3
 8016b76:	4601      	mov	r1, r0
 8016b78:	4648      	mov	r0, r9
 8016b7a:	f001 f839 	bl	8017bf0 <__pow5mult>
 8016b7e:	9b07      	ldr	r3, [sp, #28]
 8016b80:	2b01      	cmp	r3, #1
 8016b82:	4604      	mov	r4, r0
 8016b84:	f300 8095 	bgt.w	8016cb2 <_dtoa_r+0x802>
 8016b88:	9b02      	ldr	r3, [sp, #8]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	f040 808b 	bne.w	8016ca6 <_dtoa_r+0x7f6>
 8016b90:	9b03      	ldr	r3, [sp, #12]
 8016b92:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8016b96:	2a00      	cmp	r2, #0
 8016b98:	f040 8087 	bne.w	8016caa <_dtoa_r+0x7fa>
 8016b9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8016ba0:	0d12      	lsrs	r2, r2, #20
 8016ba2:	0512      	lsls	r2, r2, #20
 8016ba4:	2a00      	cmp	r2, #0
 8016ba6:	f000 8082 	beq.w	8016cae <_dtoa_r+0x7fe>
 8016baa:	9b05      	ldr	r3, [sp, #20]
 8016bac:	3301      	adds	r3, #1
 8016bae:	9305      	str	r3, [sp, #20]
 8016bb0:	9b06      	ldr	r3, [sp, #24]
 8016bb2:	3301      	adds	r3, #1
 8016bb4:	9306      	str	r3, [sp, #24]
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016bba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	f000 81af 	beq.w	8016f20 <_dtoa_r+0xa70>
 8016bc2:	6922      	ldr	r2, [r4, #16]
 8016bc4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016bc8:	6910      	ldr	r0, [r2, #16]
 8016bca:	f000 ff05 	bl	80179d8 <__hi0bits>
 8016bce:	f1c0 0020 	rsb	r0, r0, #32
 8016bd2:	9b06      	ldr	r3, [sp, #24]
 8016bd4:	4418      	add	r0, r3
 8016bd6:	f010 001f 	ands.w	r0, r0, #31
 8016bda:	d076      	beq.n	8016cca <_dtoa_r+0x81a>
 8016bdc:	f1c0 0220 	rsb	r2, r0, #32
 8016be0:	2a04      	cmp	r2, #4
 8016be2:	dd69      	ble.n	8016cb8 <_dtoa_r+0x808>
 8016be4:	9b05      	ldr	r3, [sp, #20]
 8016be6:	f1c0 001c 	rsb	r0, r0, #28
 8016bea:	4403      	add	r3, r0
 8016bec:	9305      	str	r3, [sp, #20]
 8016bee:	9b06      	ldr	r3, [sp, #24]
 8016bf0:	4406      	add	r6, r0
 8016bf2:	4403      	add	r3, r0
 8016bf4:	9306      	str	r3, [sp, #24]
 8016bf6:	9b05      	ldr	r3, [sp, #20]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	dd05      	ble.n	8016c08 <_dtoa_r+0x758>
 8016bfc:	9901      	ldr	r1, [sp, #4]
 8016bfe:	461a      	mov	r2, r3
 8016c00:	4648      	mov	r0, r9
 8016c02:	f001 f84f 	bl	8017ca4 <__lshift>
 8016c06:	9001      	str	r0, [sp, #4]
 8016c08:	9b06      	ldr	r3, [sp, #24]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	dd05      	ble.n	8016c1a <_dtoa_r+0x76a>
 8016c0e:	4621      	mov	r1, r4
 8016c10:	461a      	mov	r2, r3
 8016c12:	4648      	mov	r0, r9
 8016c14:	f001 f846 	bl	8017ca4 <__lshift>
 8016c18:	4604      	mov	r4, r0
 8016c1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d056      	beq.n	8016cce <_dtoa_r+0x81e>
 8016c20:	9801      	ldr	r0, [sp, #4]
 8016c22:	4621      	mov	r1, r4
 8016c24:	f001 f8aa 	bl	8017d7c <__mcmp>
 8016c28:	2800      	cmp	r0, #0
 8016c2a:	da50      	bge.n	8016cce <_dtoa_r+0x81e>
 8016c2c:	f108 33ff 	add.w	r3, r8, #4294967295
 8016c30:	9304      	str	r3, [sp, #16]
 8016c32:	9901      	ldr	r1, [sp, #4]
 8016c34:	2300      	movs	r3, #0
 8016c36:	220a      	movs	r2, #10
 8016c38:	4648      	mov	r0, r9
 8016c3a:	f000 fe3d 	bl	80178b8 <__multadd>
 8016c3e:	9b08      	ldr	r3, [sp, #32]
 8016c40:	9001      	str	r0, [sp, #4]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	f000 816e 	beq.w	8016f24 <_dtoa_r+0xa74>
 8016c48:	4629      	mov	r1, r5
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	220a      	movs	r2, #10
 8016c4e:	4648      	mov	r0, r9
 8016c50:	f000 fe32 	bl	80178b8 <__multadd>
 8016c54:	f1bb 0f00 	cmp.w	fp, #0
 8016c58:	4605      	mov	r5, r0
 8016c5a:	dc64      	bgt.n	8016d26 <_dtoa_r+0x876>
 8016c5c:	9b07      	ldr	r3, [sp, #28]
 8016c5e:	2b02      	cmp	r3, #2
 8016c60:	dc3e      	bgt.n	8016ce0 <_dtoa_r+0x830>
 8016c62:	e060      	b.n	8016d26 <_dtoa_r+0x876>
 8016c64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016c66:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016c6a:	e73c      	b.n	8016ae6 <_dtoa_r+0x636>
 8016c6c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8016c70:	42a3      	cmp	r3, r4
 8016c72:	bfbf      	itttt	lt
 8016c74:	1ae2      	sublt	r2, r4, r3
 8016c76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8016c78:	189b      	addlt	r3, r3, r2
 8016c7a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8016c7c:	bfae      	itee	ge
 8016c7e:	1b1c      	subge	r4, r3, r4
 8016c80:	4623      	movlt	r3, r4
 8016c82:	2400      	movlt	r4, #0
 8016c84:	f1ba 0f00 	cmp.w	sl, #0
 8016c88:	bfb5      	itete	lt
 8016c8a:	9a05      	ldrlt	r2, [sp, #20]
 8016c8c:	9e05      	ldrge	r6, [sp, #20]
 8016c8e:	eba2 060a 	sublt.w	r6, r2, sl
 8016c92:	4652      	movge	r2, sl
 8016c94:	bfb8      	it	lt
 8016c96:	2200      	movlt	r2, #0
 8016c98:	e727      	b.n	8016aea <_dtoa_r+0x63a>
 8016c9a:	9e05      	ldr	r6, [sp, #20]
 8016c9c:	9d08      	ldr	r5, [sp, #32]
 8016c9e:	461c      	mov	r4, r3
 8016ca0:	e730      	b.n	8016b04 <_dtoa_r+0x654>
 8016ca2:	461a      	mov	r2, r3
 8016ca4:	e758      	b.n	8016b58 <_dtoa_r+0x6a8>
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	e786      	b.n	8016bb8 <_dtoa_r+0x708>
 8016caa:	9b02      	ldr	r3, [sp, #8]
 8016cac:	e784      	b.n	8016bb8 <_dtoa_r+0x708>
 8016cae:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016cb0:	e783      	b.n	8016bba <_dtoa_r+0x70a>
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016cb6:	e784      	b.n	8016bc2 <_dtoa_r+0x712>
 8016cb8:	d09d      	beq.n	8016bf6 <_dtoa_r+0x746>
 8016cba:	9b05      	ldr	r3, [sp, #20]
 8016cbc:	321c      	adds	r2, #28
 8016cbe:	4413      	add	r3, r2
 8016cc0:	9305      	str	r3, [sp, #20]
 8016cc2:	9b06      	ldr	r3, [sp, #24]
 8016cc4:	4416      	add	r6, r2
 8016cc6:	4413      	add	r3, r2
 8016cc8:	e794      	b.n	8016bf4 <_dtoa_r+0x744>
 8016cca:	4602      	mov	r2, r0
 8016ccc:	e7f5      	b.n	8016cba <_dtoa_r+0x80a>
 8016cce:	f1ba 0f00 	cmp.w	sl, #0
 8016cd2:	f8cd 8010 	str.w	r8, [sp, #16]
 8016cd6:	46d3      	mov	fp, sl
 8016cd8:	dc21      	bgt.n	8016d1e <_dtoa_r+0x86e>
 8016cda:	9b07      	ldr	r3, [sp, #28]
 8016cdc:	2b02      	cmp	r3, #2
 8016cde:	dd1e      	ble.n	8016d1e <_dtoa_r+0x86e>
 8016ce0:	f1bb 0f00 	cmp.w	fp, #0
 8016ce4:	f47f aeb7 	bne.w	8016a56 <_dtoa_r+0x5a6>
 8016ce8:	4621      	mov	r1, r4
 8016cea:	465b      	mov	r3, fp
 8016cec:	2205      	movs	r2, #5
 8016cee:	4648      	mov	r0, r9
 8016cf0:	f000 fde2 	bl	80178b8 <__multadd>
 8016cf4:	4601      	mov	r1, r0
 8016cf6:	4604      	mov	r4, r0
 8016cf8:	9801      	ldr	r0, [sp, #4]
 8016cfa:	f001 f83f 	bl	8017d7c <__mcmp>
 8016cfe:	2800      	cmp	r0, #0
 8016d00:	f77f aea9 	ble.w	8016a56 <_dtoa_r+0x5a6>
 8016d04:	463e      	mov	r6, r7
 8016d06:	2331      	movs	r3, #49	@ 0x31
 8016d08:	f806 3b01 	strb.w	r3, [r6], #1
 8016d0c:	9b04      	ldr	r3, [sp, #16]
 8016d0e:	3301      	adds	r3, #1
 8016d10:	9304      	str	r3, [sp, #16]
 8016d12:	e6a4      	b.n	8016a5e <_dtoa_r+0x5ae>
 8016d14:	f8cd 8010 	str.w	r8, [sp, #16]
 8016d18:	4654      	mov	r4, sl
 8016d1a:	4625      	mov	r5, r4
 8016d1c:	e7f2      	b.n	8016d04 <_dtoa_r+0x854>
 8016d1e:	9b08      	ldr	r3, [sp, #32]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	f000 8103 	beq.w	8016f2c <_dtoa_r+0xa7c>
 8016d26:	2e00      	cmp	r6, #0
 8016d28:	dd05      	ble.n	8016d36 <_dtoa_r+0x886>
 8016d2a:	4629      	mov	r1, r5
 8016d2c:	4632      	mov	r2, r6
 8016d2e:	4648      	mov	r0, r9
 8016d30:	f000 ffb8 	bl	8017ca4 <__lshift>
 8016d34:	4605      	mov	r5, r0
 8016d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d058      	beq.n	8016dee <_dtoa_r+0x93e>
 8016d3c:	6869      	ldr	r1, [r5, #4]
 8016d3e:	4648      	mov	r0, r9
 8016d40:	f000 fd58 	bl	80177f4 <_Balloc>
 8016d44:	4606      	mov	r6, r0
 8016d46:	b928      	cbnz	r0, 8016d54 <_dtoa_r+0x8a4>
 8016d48:	4b82      	ldr	r3, [pc, #520]	@ (8016f54 <_dtoa_r+0xaa4>)
 8016d4a:	4602      	mov	r2, r0
 8016d4c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016d50:	f7ff bbc7 	b.w	80164e2 <_dtoa_r+0x32>
 8016d54:	692a      	ldr	r2, [r5, #16]
 8016d56:	3202      	adds	r2, #2
 8016d58:	0092      	lsls	r2, r2, #2
 8016d5a:	f105 010c 	add.w	r1, r5, #12
 8016d5e:	300c      	adds	r0, #12
 8016d60:	f7ff fb05 	bl	801636e <memcpy>
 8016d64:	2201      	movs	r2, #1
 8016d66:	4631      	mov	r1, r6
 8016d68:	4648      	mov	r0, r9
 8016d6a:	f000 ff9b 	bl	8017ca4 <__lshift>
 8016d6e:	1c7b      	adds	r3, r7, #1
 8016d70:	9305      	str	r3, [sp, #20]
 8016d72:	eb07 030b 	add.w	r3, r7, fp
 8016d76:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d78:	9b02      	ldr	r3, [sp, #8]
 8016d7a:	f003 0301 	and.w	r3, r3, #1
 8016d7e:	46a8      	mov	r8, r5
 8016d80:	9308      	str	r3, [sp, #32]
 8016d82:	4605      	mov	r5, r0
 8016d84:	9b05      	ldr	r3, [sp, #20]
 8016d86:	9801      	ldr	r0, [sp, #4]
 8016d88:	4621      	mov	r1, r4
 8016d8a:	f103 3bff 	add.w	fp, r3, #4294967295
 8016d8e:	f7ff fb07 	bl	80163a0 <quorem>
 8016d92:	4641      	mov	r1, r8
 8016d94:	9002      	str	r0, [sp, #8]
 8016d96:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016d9a:	9801      	ldr	r0, [sp, #4]
 8016d9c:	f000 ffee 	bl	8017d7c <__mcmp>
 8016da0:	462a      	mov	r2, r5
 8016da2:	9006      	str	r0, [sp, #24]
 8016da4:	4621      	mov	r1, r4
 8016da6:	4648      	mov	r0, r9
 8016da8:	f001 f804 	bl	8017db4 <__mdiff>
 8016dac:	68c2      	ldr	r2, [r0, #12]
 8016dae:	4606      	mov	r6, r0
 8016db0:	b9fa      	cbnz	r2, 8016df2 <_dtoa_r+0x942>
 8016db2:	4601      	mov	r1, r0
 8016db4:	9801      	ldr	r0, [sp, #4]
 8016db6:	f000 ffe1 	bl	8017d7c <__mcmp>
 8016dba:	4602      	mov	r2, r0
 8016dbc:	4631      	mov	r1, r6
 8016dbe:	4648      	mov	r0, r9
 8016dc0:	920a      	str	r2, [sp, #40]	@ 0x28
 8016dc2:	f000 fd57 	bl	8017874 <_Bfree>
 8016dc6:	9b07      	ldr	r3, [sp, #28]
 8016dc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016dca:	9e05      	ldr	r6, [sp, #20]
 8016dcc:	ea43 0102 	orr.w	r1, r3, r2
 8016dd0:	9b08      	ldr	r3, [sp, #32]
 8016dd2:	4319      	orrs	r1, r3
 8016dd4:	d10f      	bne.n	8016df6 <_dtoa_r+0x946>
 8016dd6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016dda:	d028      	beq.n	8016e2e <_dtoa_r+0x97e>
 8016ddc:	9b06      	ldr	r3, [sp, #24]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	dd02      	ble.n	8016de8 <_dtoa_r+0x938>
 8016de2:	9b02      	ldr	r3, [sp, #8]
 8016de4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8016de8:	f88b a000 	strb.w	sl, [fp]
 8016dec:	e639      	b.n	8016a62 <_dtoa_r+0x5b2>
 8016dee:	4628      	mov	r0, r5
 8016df0:	e7bd      	b.n	8016d6e <_dtoa_r+0x8be>
 8016df2:	2201      	movs	r2, #1
 8016df4:	e7e2      	b.n	8016dbc <_dtoa_r+0x90c>
 8016df6:	9b06      	ldr	r3, [sp, #24]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	db04      	blt.n	8016e06 <_dtoa_r+0x956>
 8016dfc:	9907      	ldr	r1, [sp, #28]
 8016dfe:	430b      	orrs	r3, r1
 8016e00:	9908      	ldr	r1, [sp, #32]
 8016e02:	430b      	orrs	r3, r1
 8016e04:	d120      	bne.n	8016e48 <_dtoa_r+0x998>
 8016e06:	2a00      	cmp	r2, #0
 8016e08:	ddee      	ble.n	8016de8 <_dtoa_r+0x938>
 8016e0a:	9901      	ldr	r1, [sp, #4]
 8016e0c:	2201      	movs	r2, #1
 8016e0e:	4648      	mov	r0, r9
 8016e10:	f000 ff48 	bl	8017ca4 <__lshift>
 8016e14:	4621      	mov	r1, r4
 8016e16:	9001      	str	r0, [sp, #4]
 8016e18:	f000 ffb0 	bl	8017d7c <__mcmp>
 8016e1c:	2800      	cmp	r0, #0
 8016e1e:	dc03      	bgt.n	8016e28 <_dtoa_r+0x978>
 8016e20:	d1e2      	bne.n	8016de8 <_dtoa_r+0x938>
 8016e22:	f01a 0f01 	tst.w	sl, #1
 8016e26:	d0df      	beq.n	8016de8 <_dtoa_r+0x938>
 8016e28:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016e2c:	d1d9      	bne.n	8016de2 <_dtoa_r+0x932>
 8016e2e:	2339      	movs	r3, #57	@ 0x39
 8016e30:	f88b 3000 	strb.w	r3, [fp]
 8016e34:	4633      	mov	r3, r6
 8016e36:	461e      	mov	r6, r3
 8016e38:	3b01      	subs	r3, #1
 8016e3a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016e3e:	2a39      	cmp	r2, #57	@ 0x39
 8016e40:	d053      	beq.n	8016eea <_dtoa_r+0xa3a>
 8016e42:	3201      	adds	r2, #1
 8016e44:	701a      	strb	r2, [r3, #0]
 8016e46:	e60c      	b.n	8016a62 <_dtoa_r+0x5b2>
 8016e48:	2a00      	cmp	r2, #0
 8016e4a:	dd07      	ble.n	8016e5c <_dtoa_r+0x9ac>
 8016e4c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016e50:	d0ed      	beq.n	8016e2e <_dtoa_r+0x97e>
 8016e52:	f10a 0301 	add.w	r3, sl, #1
 8016e56:	f88b 3000 	strb.w	r3, [fp]
 8016e5a:	e602      	b.n	8016a62 <_dtoa_r+0x5b2>
 8016e5c:	9b05      	ldr	r3, [sp, #20]
 8016e5e:	9a05      	ldr	r2, [sp, #20]
 8016e60:	f803 ac01 	strb.w	sl, [r3, #-1]
 8016e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e66:	4293      	cmp	r3, r2
 8016e68:	d029      	beq.n	8016ebe <_dtoa_r+0xa0e>
 8016e6a:	9901      	ldr	r1, [sp, #4]
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	220a      	movs	r2, #10
 8016e70:	4648      	mov	r0, r9
 8016e72:	f000 fd21 	bl	80178b8 <__multadd>
 8016e76:	45a8      	cmp	r8, r5
 8016e78:	9001      	str	r0, [sp, #4]
 8016e7a:	f04f 0300 	mov.w	r3, #0
 8016e7e:	f04f 020a 	mov.w	r2, #10
 8016e82:	4641      	mov	r1, r8
 8016e84:	4648      	mov	r0, r9
 8016e86:	d107      	bne.n	8016e98 <_dtoa_r+0x9e8>
 8016e88:	f000 fd16 	bl	80178b8 <__multadd>
 8016e8c:	4680      	mov	r8, r0
 8016e8e:	4605      	mov	r5, r0
 8016e90:	9b05      	ldr	r3, [sp, #20]
 8016e92:	3301      	adds	r3, #1
 8016e94:	9305      	str	r3, [sp, #20]
 8016e96:	e775      	b.n	8016d84 <_dtoa_r+0x8d4>
 8016e98:	f000 fd0e 	bl	80178b8 <__multadd>
 8016e9c:	4629      	mov	r1, r5
 8016e9e:	4680      	mov	r8, r0
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	220a      	movs	r2, #10
 8016ea4:	4648      	mov	r0, r9
 8016ea6:	f000 fd07 	bl	80178b8 <__multadd>
 8016eaa:	4605      	mov	r5, r0
 8016eac:	e7f0      	b.n	8016e90 <_dtoa_r+0x9e0>
 8016eae:	f1bb 0f00 	cmp.w	fp, #0
 8016eb2:	bfcc      	ite	gt
 8016eb4:	465e      	movgt	r6, fp
 8016eb6:	2601      	movle	r6, #1
 8016eb8:	443e      	add	r6, r7
 8016eba:	f04f 0800 	mov.w	r8, #0
 8016ebe:	9901      	ldr	r1, [sp, #4]
 8016ec0:	2201      	movs	r2, #1
 8016ec2:	4648      	mov	r0, r9
 8016ec4:	f000 feee 	bl	8017ca4 <__lshift>
 8016ec8:	4621      	mov	r1, r4
 8016eca:	9001      	str	r0, [sp, #4]
 8016ecc:	f000 ff56 	bl	8017d7c <__mcmp>
 8016ed0:	2800      	cmp	r0, #0
 8016ed2:	dcaf      	bgt.n	8016e34 <_dtoa_r+0x984>
 8016ed4:	d102      	bne.n	8016edc <_dtoa_r+0xa2c>
 8016ed6:	f01a 0f01 	tst.w	sl, #1
 8016eda:	d1ab      	bne.n	8016e34 <_dtoa_r+0x984>
 8016edc:	4633      	mov	r3, r6
 8016ede:	461e      	mov	r6, r3
 8016ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016ee4:	2a30      	cmp	r2, #48	@ 0x30
 8016ee6:	d0fa      	beq.n	8016ede <_dtoa_r+0xa2e>
 8016ee8:	e5bb      	b.n	8016a62 <_dtoa_r+0x5b2>
 8016eea:	429f      	cmp	r7, r3
 8016eec:	d1a3      	bne.n	8016e36 <_dtoa_r+0x986>
 8016eee:	9b04      	ldr	r3, [sp, #16]
 8016ef0:	3301      	adds	r3, #1
 8016ef2:	9304      	str	r3, [sp, #16]
 8016ef4:	2331      	movs	r3, #49	@ 0x31
 8016ef6:	703b      	strb	r3, [r7, #0]
 8016ef8:	e5b3      	b.n	8016a62 <_dtoa_r+0x5b2>
 8016efa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016efc:	4f16      	ldr	r7, [pc, #88]	@ (8016f58 <_dtoa_r+0xaa8>)
 8016efe:	b11b      	cbz	r3, 8016f08 <_dtoa_r+0xa58>
 8016f00:	f107 0308 	add.w	r3, r7, #8
 8016f04:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8016f06:	6013      	str	r3, [r2, #0]
 8016f08:	4638      	mov	r0, r7
 8016f0a:	b011      	add	sp, #68	@ 0x44
 8016f0c:	ecbd 8b02 	vpop	{d8}
 8016f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f14:	9b07      	ldr	r3, [sp, #28]
 8016f16:	2b01      	cmp	r3, #1
 8016f18:	f77f ae36 	ble.w	8016b88 <_dtoa_r+0x6d8>
 8016f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016f20:	2001      	movs	r0, #1
 8016f22:	e656      	b.n	8016bd2 <_dtoa_r+0x722>
 8016f24:	f1bb 0f00 	cmp.w	fp, #0
 8016f28:	f77f aed7 	ble.w	8016cda <_dtoa_r+0x82a>
 8016f2c:	463e      	mov	r6, r7
 8016f2e:	9801      	ldr	r0, [sp, #4]
 8016f30:	4621      	mov	r1, r4
 8016f32:	f7ff fa35 	bl	80163a0 <quorem>
 8016f36:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016f3a:	f806 ab01 	strb.w	sl, [r6], #1
 8016f3e:	1bf2      	subs	r2, r6, r7
 8016f40:	4593      	cmp	fp, r2
 8016f42:	ddb4      	ble.n	8016eae <_dtoa_r+0x9fe>
 8016f44:	9901      	ldr	r1, [sp, #4]
 8016f46:	2300      	movs	r3, #0
 8016f48:	220a      	movs	r2, #10
 8016f4a:	4648      	mov	r0, r9
 8016f4c:	f000 fcb4 	bl	80178b8 <__multadd>
 8016f50:	9001      	str	r0, [sp, #4]
 8016f52:	e7ec      	b.n	8016f2e <_dtoa_r+0xa7e>
 8016f54:	08019e01 	.word	0x08019e01
 8016f58:	08019d85 	.word	0x08019d85

08016f5c <_free_r>:
 8016f5c:	b538      	push	{r3, r4, r5, lr}
 8016f5e:	4605      	mov	r5, r0
 8016f60:	2900      	cmp	r1, #0
 8016f62:	d041      	beq.n	8016fe8 <_free_r+0x8c>
 8016f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f68:	1f0c      	subs	r4, r1, #4
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	bfb8      	it	lt
 8016f6e:	18e4      	addlt	r4, r4, r3
 8016f70:	f000 fc34 	bl	80177dc <__malloc_lock>
 8016f74:	4a1d      	ldr	r2, [pc, #116]	@ (8016fec <_free_r+0x90>)
 8016f76:	6813      	ldr	r3, [r2, #0]
 8016f78:	b933      	cbnz	r3, 8016f88 <_free_r+0x2c>
 8016f7a:	6063      	str	r3, [r4, #4]
 8016f7c:	6014      	str	r4, [r2, #0]
 8016f7e:	4628      	mov	r0, r5
 8016f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f84:	f000 bc30 	b.w	80177e8 <__malloc_unlock>
 8016f88:	42a3      	cmp	r3, r4
 8016f8a:	d908      	bls.n	8016f9e <_free_r+0x42>
 8016f8c:	6820      	ldr	r0, [r4, #0]
 8016f8e:	1821      	adds	r1, r4, r0
 8016f90:	428b      	cmp	r3, r1
 8016f92:	bf01      	itttt	eq
 8016f94:	6819      	ldreq	r1, [r3, #0]
 8016f96:	685b      	ldreq	r3, [r3, #4]
 8016f98:	1809      	addeq	r1, r1, r0
 8016f9a:	6021      	streq	r1, [r4, #0]
 8016f9c:	e7ed      	b.n	8016f7a <_free_r+0x1e>
 8016f9e:	461a      	mov	r2, r3
 8016fa0:	685b      	ldr	r3, [r3, #4]
 8016fa2:	b10b      	cbz	r3, 8016fa8 <_free_r+0x4c>
 8016fa4:	42a3      	cmp	r3, r4
 8016fa6:	d9fa      	bls.n	8016f9e <_free_r+0x42>
 8016fa8:	6811      	ldr	r1, [r2, #0]
 8016faa:	1850      	adds	r0, r2, r1
 8016fac:	42a0      	cmp	r0, r4
 8016fae:	d10b      	bne.n	8016fc8 <_free_r+0x6c>
 8016fb0:	6820      	ldr	r0, [r4, #0]
 8016fb2:	4401      	add	r1, r0
 8016fb4:	1850      	adds	r0, r2, r1
 8016fb6:	4283      	cmp	r3, r0
 8016fb8:	6011      	str	r1, [r2, #0]
 8016fba:	d1e0      	bne.n	8016f7e <_free_r+0x22>
 8016fbc:	6818      	ldr	r0, [r3, #0]
 8016fbe:	685b      	ldr	r3, [r3, #4]
 8016fc0:	6053      	str	r3, [r2, #4]
 8016fc2:	4408      	add	r0, r1
 8016fc4:	6010      	str	r0, [r2, #0]
 8016fc6:	e7da      	b.n	8016f7e <_free_r+0x22>
 8016fc8:	d902      	bls.n	8016fd0 <_free_r+0x74>
 8016fca:	230c      	movs	r3, #12
 8016fcc:	602b      	str	r3, [r5, #0]
 8016fce:	e7d6      	b.n	8016f7e <_free_r+0x22>
 8016fd0:	6820      	ldr	r0, [r4, #0]
 8016fd2:	1821      	adds	r1, r4, r0
 8016fd4:	428b      	cmp	r3, r1
 8016fd6:	bf04      	itt	eq
 8016fd8:	6819      	ldreq	r1, [r3, #0]
 8016fda:	685b      	ldreq	r3, [r3, #4]
 8016fdc:	6063      	str	r3, [r4, #4]
 8016fde:	bf04      	itt	eq
 8016fe0:	1809      	addeq	r1, r1, r0
 8016fe2:	6021      	streq	r1, [r4, #0]
 8016fe4:	6054      	str	r4, [r2, #4]
 8016fe6:	e7ca      	b.n	8016f7e <_free_r+0x22>
 8016fe8:	bd38      	pop	{r3, r4, r5, pc}
 8016fea:	bf00      	nop
 8016fec:	24006c74 	.word	0x24006c74

08016ff0 <rshift>:
 8016ff0:	6903      	ldr	r3, [r0, #16]
 8016ff2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016ff6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ffa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016ffe:	f100 0414 	add.w	r4, r0, #20
 8017002:	dd45      	ble.n	8017090 <rshift+0xa0>
 8017004:	f011 011f 	ands.w	r1, r1, #31
 8017008:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801700c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017010:	d10c      	bne.n	801702c <rshift+0x3c>
 8017012:	f100 0710 	add.w	r7, r0, #16
 8017016:	4629      	mov	r1, r5
 8017018:	42b1      	cmp	r1, r6
 801701a:	d334      	bcc.n	8017086 <rshift+0x96>
 801701c:	1a9b      	subs	r3, r3, r2
 801701e:	009b      	lsls	r3, r3, #2
 8017020:	1eea      	subs	r2, r5, #3
 8017022:	4296      	cmp	r6, r2
 8017024:	bf38      	it	cc
 8017026:	2300      	movcc	r3, #0
 8017028:	4423      	add	r3, r4
 801702a:	e015      	b.n	8017058 <rshift+0x68>
 801702c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017030:	f1c1 0820 	rsb	r8, r1, #32
 8017034:	40cf      	lsrs	r7, r1
 8017036:	f105 0e04 	add.w	lr, r5, #4
 801703a:	46a1      	mov	r9, r4
 801703c:	4576      	cmp	r6, lr
 801703e:	46f4      	mov	ip, lr
 8017040:	d815      	bhi.n	801706e <rshift+0x7e>
 8017042:	1a9a      	subs	r2, r3, r2
 8017044:	0092      	lsls	r2, r2, #2
 8017046:	3a04      	subs	r2, #4
 8017048:	3501      	adds	r5, #1
 801704a:	42ae      	cmp	r6, r5
 801704c:	bf38      	it	cc
 801704e:	2200      	movcc	r2, #0
 8017050:	18a3      	adds	r3, r4, r2
 8017052:	50a7      	str	r7, [r4, r2]
 8017054:	b107      	cbz	r7, 8017058 <rshift+0x68>
 8017056:	3304      	adds	r3, #4
 8017058:	1b1a      	subs	r2, r3, r4
 801705a:	42a3      	cmp	r3, r4
 801705c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017060:	bf08      	it	eq
 8017062:	2300      	moveq	r3, #0
 8017064:	6102      	str	r2, [r0, #16]
 8017066:	bf08      	it	eq
 8017068:	6143      	streq	r3, [r0, #20]
 801706a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801706e:	f8dc c000 	ldr.w	ip, [ip]
 8017072:	fa0c fc08 	lsl.w	ip, ip, r8
 8017076:	ea4c 0707 	orr.w	r7, ip, r7
 801707a:	f849 7b04 	str.w	r7, [r9], #4
 801707e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017082:	40cf      	lsrs	r7, r1
 8017084:	e7da      	b.n	801703c <rshift+0x4c>
 8017086:	f851 cb04 	ldr.w	ip, [r1], #4
 801708a:	f847 cf04 	str.w	ip, [r7, #4]!
 801708e:	e7c3      	b.n	8017018 <rshift+0x28>
 8017090:	4623      	mov	r3, r4
 8017092:	e7e1      	b.n	8017058 <rshift+0x68>

08017094 <__hexdig_fun>:
 8017094:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017098:	2b09      	cmp	r3, #9
 801709a:	d802      	bhi.n	80170a2 <__hexdig_fun+0xe>
 801709c:	3820      	subs	r0, #32
 801709e:	b2c0      	uxtb	r0, r0
 80170a0:	4770      	bx	lr
 80170a2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80170a6:	2b05      	cmp	r3, #5
 80170a8:	d801      	bhi.n	80170ae <__hexdig_fun+0x1a>
 80170aa:	3847      	subs	r0, #71	@ 0x47
 80170ac:	e7f7      	b.n	801709e <__hexdig_fun+0xa>
 80170ae:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80170b2:	2b05      	cmp	r3, #5
 80170b4:	d801      	bhi.n	80170ba <__hexdig_fun+0x26>
 80170b6:	3827      	subs	r0, #39	@ 0x27
 80170b8:	e7f1      	b.n	801709e <__hexdig_fun+0xa>
 80170ba:	2000      	movs	r0, #0
 80170bc:	4770      	bx	lr
	...

080170c0 <__gethex>:
 80170c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170c4:	b085      	sub	sp, #20
 80170c6:	468a      	mov	sl, r1
 80170c8:	9302      	str	r3, [sp, #8]
 80170ca:	680b      	ldr	r3, [r1, #0]
 80170cc:	9001      	str	r0, [sp, #4]
 80170ce:	4690      	mov	r8, r2
 80170d0:	1c9c      	adds	r4, r3, #2
 80170d2:	46a1      	mov	r9, r4
 80170d4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80170d8:	2830      	cmp	r0, #48	@ 0x30
 80170da:	d0fa      	beq.n	80170d2 <__gethex+0x12>
 80170dc:	eba9 0303 	sub.w	r3, r9, r3
 80170e0:	f1a3 0b02 	sub.w	fp, r3, #2
 80170e4:	f7ff ffd6 	bl	8017094 <__hexdig_fun>
 80170e8:	4605      	mov	r5, r0
 80170ea:	2800      	cmp	r0, #0
 80170ec:	d168      	bne.n	80171c0 <__gethex+0x100>
 80170ee:	49a0      	ldr	r1, [pc, #640]	@ (8017370 <__gethex+0x2b0>)
 80170f0:	2201      	movs	r2, #1
 80170f2:	4648      	mov	r0, r9
 80170f4:	f7ff f8b2 	bl	801625c <strncmp>
 80170f8:	4607      	mov	r7, r0
 80170fa:	2800      	cmp	r0, #0
 80170fc:	d167      	bne.n	80171ce <__gethex+0x10e>
 80170fe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017102:	4626      	mov	r6, r4
 8017104:	f7ff ffc6 	bl	8017094 <__hexdig_fun>
 8017108:	2800      	cmp	r0, #0
 801710a:	d062      	beq.n	80171d2 <__gethex+0x112>
 801710c:	4623      	mov	r3, r4
 801710e:	7818      	ldrb	r0, [r3, #0]
 8017110:	2830      	cmp	r0, #48	@ 0x30
 8017112:	4699      	mov	r9, r3
 8017114:	f103 0301 	add.w	r3, r3, #1
 8017118:	d0f9      	beq.n	801710e <__gethex+0x4e>
 801711a:	f7ff ffbb 	bl	8017094 <__hexdig_fun>
 801711e:	fab0 f580 	clz	r5, r0
 8017122:	096d      	lsrs	r5, r5, #5
 8017124:	f04f 0b01 	mov.w	fp, #1
 8017128:	464a      	mov	r2, r9
 801712a:	4616      	mov	r6, r2
 801712c:	3201      	adds	r2, #1
 801712e:	7830      	ldrb	r0, [r6, #0]
 8017130:	f7ff ffb0 	bl	8017094 <__hexdig_fun>
 8017134:	2800      	cmp	r0, #0
 8017136:	d1f8      	bne.n	801712a <__gethex+0x6a>
 8017138:	498d      	ldr	r1, [pc, #564]	@ (8017370 <__gethex+0x2b0>)
 801713a:	2201      	movs	r2, #1
 801713c:	4630      	mov	r0, r6
 801713e:	f7ff f88d 	bl	801625c <strncmp>
 8017142:	2800      	cmp	r0, #0
 8017144:	d13f      	bne.n	80171c6 <__gethex+0x106>
 8017146:	b944      	cbnz	r4, 801715a <__gethex+0x9a>
 8017148:	1c74      	adds	r4, r6, #1
 801714a:	4622      	mov	r2, r4
 801714c:	4616      	mov	r6, r2
 801714e:	3201      	adds	r2, #1
 8017150:	7830      	ldrb	r0, [r6, #0]
 8017152:	f7ff ff9f 	bl	8017094 <__hexdig_fun>
 8017156:	2800      	cmp	r0, #0
 8017158:	d1f8      	bne.n	801714c <__gethex+0x8c>
 801715a:	1ba4      	subs	r4, r4, r6
 801715c:	00a7      	lsls	r7, r4, #2
 801715e:	7833      	ldrb	r3, [r6, #0]
 8017160:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017164:	2b50      	cmp	r3, #80	@ 0x50
 8017166:	d13e      	bne.n	80171e6 <__gethex+0x126>
 8017168:	7873      	ldrb	r3, [r6, #1]
 801716a:	2b2b      	cmp	r3, #43	@ 0x2b
 801716c:	d033      	beq.n	80171d6 <__gethex+0x116>
 801716e:	2b2d      	cmp	r3, #45	@ 0x2d
 8017170:	d034      	beq.n	80171dc <__gethex+0x11c>
 8017172:	1c71      	adds	r1, r6, #1
 8017174:	2400      	movs	r4, #0
 8017176:	7808      	ldrb	r0, [r1, #0]
 8017178:	f7ff ff8c 	bl	8017094 <__hexdig_fun>
 801717c:	1e43      	subs	r3, r0, #1
 801717e:	b2db      	uxtb	r3, r3
 8017180:	2b18      	cmp	r3, #24
 8017182:	d830      	bhi.n	80171e6 <__gethex+0x126>
 8017184:	f1a0 0210 	sub.w	r2, r0, #16
 8017188:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801718c:	f7ff ff82 	bl	8017094 <__hexdig_fun>
 8017190:	f100 3cff 	add.w	ip, r0, #4294967295
 8017194:	fa5f fc8c 	uxtb.w	ip, ip
 8017198:	f1bc 0f18 	cmp.w	ip, #24
 801719c:	f04f 030a 	mov.w	r3, #10
 80171a0:	d91e      	bls.n	80171e0 <__gethex+0x120>
 80171a2:	b104      	cbz	r4, 80171a6 <__gethex+0xe6>
 80171a4:	4252      	negs	r2, r2
 80171a6:	4417      	add	r7, r2
 80171a8:	f8ca 1000 	str.w	r1, [sl]
 80171ac:	b1ed      	cbz	r5, 80171ea <__gethex+0x12a>
 80171ae:	f1bb 0f00 	cmp.w	fp, #0
 80171b2:	bf0c      	ite	eq
 80171b4:	2506      	moveq	r5, #6
 80171b6:	2500      	movne	r5, #0
 80171b8:	4628      	mov	r0, r5
 80171ba:	b005      	add	sp, #20
 80171bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171c0:	2500      	movs	r5, #0
 80171c2:	462c      	mov	r4, r5
 80171c4:	e7b0      	b.n	8017128 <__gethex+0x68>
 80171c6:	2c00      	cmp	r4, #0
 80171c8:	d1c7      	bne.n	801715a <__gethex+0x9a>
 80171ca:	4627      	mov	r7, r4
 80171cc:	e7c7      	b.n	801715e <__gethex+0x9e>
 80171ce:	464e      	mov	r6, r9
 80171d0:	462f      	mov	r7, r5
 80171d2:	2501      	movs	r5, #1
 80171d4:	e7c3      	b.n	801715e <__gethex+0x9e>
 80171d6:	2400      	movs	r4, #0
 80171d8:	1cb1      	adds	r1, r6, #2
 80171da:	e7cc      	b.n	8017176 <__gethex+0xb6>
 80171dc:	2401      	movs	r4, #1
 80171de:	e7fb      	b.n	80171d8 <__gethex+0x118>
 80171e0:	fb03 0002 	mla	r0, r3, r2, r0
 80171e4:	e7ce      	b.n	8017184 <__gethex+0xc4>
 80171e6:	4631      	mov	r1, r6
 80171e8:	e7de      	b.n	80171a8 <__gethex+0xe8>
 80171ea:	eba6 0309 	sub.w	r3, r6, r9
 80171ee:	3b01      	subs	r3, #1
 80171f0:	4629      	mov	r1, r5
 80171f2:	2b07      	cmp	r3, #7
 80171f4:	dc0a      	bgt.n	801720c <__gethex+0x14c>
 80171f6:	9801      	ldr	r0, [sp, #4]
 80171f8:	f000 fafc 	bl	80177f4 <_Balloc>
 80171fc:	4604      	mov	r4, r0
 80171fe:	b940      	cbnz	r0, 8017212 <__gethex+0x152>
 8017200:	4b5c      	ldr	r3, [pc, #368]	@ (8017374 <__gethex+0x2b4>)
 8017202:	4602      	mov	r2, r0
 8017204:	21e4      	movs	r1, #228	@ 0xe4
 8017206:	485c      	ldr	r0, [pc, #368]	@ (8017378 <__gethex+0x2b8>)
 8017208:	f001 f9de 	bl	80185c8 <__assert_func>
 801720c:	3101      	adds	r1, #1
 801720e:	105b      	asrs	r3, r3, #1
 8017210:	e7ef      	b.n	80171f2 <__gethex+0x132>
 8017212:	f100 0a14 	add.w	sl, r0, #20
 8017216:	2300      	movs	r3, #0
 8017218:	4655      	mov	r5, sl
 801721a:	469b      	mov	fp, r3
 801721c:	45b1      	cmp	r9, r6
 801721e:	d337      	bcc.n	8017290 <__gethex+0x1d0>
 8017220:	f845 bb04 	str.w	fp, [r5], #4
 8017224:	eba5 050a 	sub.w	r5, r5, sl
 8017228:	10ad      	asrs	r5, r5, #2
 801722a:	6125      	str	r5, [r4, #16]
 801722c:	4658      	mov	r0, fp
 801722e:	f000 fbd3 	bl	80179d8 <__hi0bits>
 8017232:	016d      	lsls	r5, r5, #5
 8017234:	f8d8 6000 	ldr.w	r6, [r8]
 8017238:	1a2d      	subs	r5, r5, r0
 801723a:	42b5      	cmp	r5, r6
 801723c:	dd54      	ble.n	80172e8 <__gethex+0x228>
 801723e:	1bad      	subs	r5, r5, r6
 8017240:	4629      	mov	r1, r5
 8017242:	4620      	mov	r0, r4
 8017244:	f000 ff64 	bl	8018110 <__any_on>
 8017248:	4681      	mov	r9, r0
 801724a:	b178      	cbz	r0, 801726c <__gethex+0x1ac>
 801724c:	1e6b      	subs	r3, r5, #1
 801724e:	1159      	asrs	r1, r3, #5
 8017250:	f003 021f 	and.w	r2, r3, #31
 8017254:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017258:	f04f 0901 	mov.w	r9, #1
 801725c:	fa09 f202 	lsl.w	r2, r9, r2
 8017260:	420a      	tst	r2, r1
 8017262:	d003      	beq.n	801726c <__gethex+0x1ac>
 8017264:	454b      	cmp	r3, r9
 8017266:	dc36      	bgt.n	80172d6 <__gethex+0x216>
 8017268:	f04f 0902 	mov.w	r9, #2
 801726c:	4629      	mov	r1, r5
 801726e:	4620      	mov	r0, r4
 8017270:	f7ff febe 	bl	8016ff0 <rshift>
 8017274:	442f      	add	r7, r5
 8017276:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801727a:	42bb      	cmp	r3, r7
 801727c:	da42      	bge.n	8017304 <__gethex+0x244>
 801727e:	9801      	ldr	r0, [sp, #4]
 8017280:	4621      	mov	r1, r4
 8017282:	f000 faf7 	bl	8017874 <_Bfree>
 8017286:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017288:	2300      	movs	r3, #0
 801728a:	6013      	str	r3, [r2, #0]
 801728c:	25a3      	movs	r5, #163	@ 0xa3
 801728e:	e793      	b.n	80171b8 <__gethex+0xf8>
 8017290:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017294:	2a2e      	cmp	r2, #46	@ 0x2e
 8017296:	d012      	beq.n	80172be <__gethex+0x1fe>
 8017298:	2b20      	cmp	r3, #32
 801729a:	d104      	bne.n	80172a6 <__gethex+0x1e6>
 801729c:	f845 bb04 	str.w	fp, [r5], #4
 80172a0:	f04f 0b00 	mov.w	fp, #0
 80172a4:	465b      	mov	r3, fp
 80172a6:	7830      	ldrb	r0, [r6, #0]
 80172a8:	9303      	str	r3, [sp, #12]
 80172aa:	f7ff fef3 	bl	8017094 <__hexdig_fun>
 80172ae:	9b03      	ldr	r3, [sp, #12]
 80172b0:	f000 000f 	and.w	r0, r0, #15
 80172b4:	4098      	lsls	r0, r3
 80172b6:	ea4b 0b00 	orr.w	fp, fp, r0
 80172ba:	3304      	adds	r3, #4
 80172bc:	e7ae      	b.n	801721c <__gethex+0x15c>
 80172be:	45b1      	cmp	r9, r6
 80172c0:	d8ea      	bhi.n	8017298 <__gethex+0x1d8>
 80172c2:	492b      	ldr	r1, [pc, #172]	@ (8017370 <__gethex+0x2b0>)
 80172c4:	9303      	str	r3, [sp, #12]
 80172c6:	2201      	movs	r2, #1
 80172c8:	4630      	mov	r0, r6
 80172ca:	f7fe ffc7 	bl	801625c <strncmp>
 80172ce:	9b03      	ldr	r3, [sp, #12]
 80172d0:	2800      	cmp	r0, #0
 80172d2:	d1e1      	bne.n	8017298 <__gethex+0x1d8>
 80172d4:	e7a2      	b.n	801721c <__gethex+0x15c>
 80172d6:	1ea9      	subs	r1, r5, #2
 80172d8:	4620      	mov	r0, r4
 80172da:	f000 ff19 	bl	8018110 <__any_on>
 80172de:	2800      	cmp	r0, #0
 80172e0:	d0c2      	beq.n	8017268 <__gethex+0x1a8>
 80172e2:	f04f 0903 	mov.w	r9, #3
 80172e6:	e7c1      	b.n	801726c <__gethex+0x1ac>
 80172e8:	da09      	bge.n	80172fe <__gethex+0x23e>
 80172ea:	1b75      	subs	r5, r6, r5
 80172ec:	4621      	mov	r1, r4
 80172ee:	9801      	ldr	r0, [sp, #4]
 80172f0:	462a      	mov	r2, r5
 80172f2:	f000 fcd7 	bl	8017ca4 <__lshift>
 80172f6:	1b7f      	subs	r7, r7, r5
 80172f8:	4604      	mov	r4, r0
 80172fa:	f100 0a14 	add.w	sl, r0, #20
 80172fe:	f04f 0900 	mov.w	r9, #0
 8017302:	e7b8      	b.n	8017276 <__gethex+0x1b6>
 8017304:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017308:	42bd      	cmp	r5, r7
 801730a:	dd6f      	ble.n	80173ec <__gethex+0x32c>
 801730c:	1bed      	subs	r5, r5, r7
 801730e:	42ae      	cmp	r6, r5
 8017310:	dc34      	bgt.n	801737c <__gethex+0x2bc>
 8017312:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017316:	2b02      	cmp	r3, #2
 8017318:	d022      	beq.n	8017360 <__gethex+0x2a0>
 801731a:	2b03      	cmp	r3, #3
 801731c:	d024      	beq.n	8017368 <__gethex+0x2a8>
 801731e:	2b01      	cmp	r3, #1
 8017320:	d115      	bne.n	801734e <__gethex+0x28e>
 8017322:	42ae      	cmp	r6, r5
 8017324:	d113      	bne.n	801734e <__gethex+0x28e>
 8017326:	2e01      	cmp	r6, #1
 8017328:	d10b      	bne.n	8017342 <__gethex+0x282>
 801732a:	9a02      	ldr	r2, [sp, #8]
 801732c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017330:	6013      	str	r3, [r2, #0]
 8017332:	2301      	movs	r3, #1
 8017334:	6123      	str	r3, [r4, #16]
 8017336:	f8ca 3000 	str.w	r3, [sl]
 801733a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801733c:	2562      	movs	r5, #98	@ 0x62
 801733e:	601c      	str	r4, [r3, #0]
 8017340:	e73a      	b.n	80171b8 <__gethex+0xf8>
 8017342:	1e71      	subs	r1, r6, #1
 8017344:	4620      	mov	r0, r4
 8017346:	f000 fee3 	bl	8018110 <__any_on>
 801734a:	2800      	cmp	r0, #0
 801734c:	d1ed      	bne.n	801732a <__gethex+0x26a>
 801734e:	9801      	ldr	r0, [sp, #4]
 8017350:	4621      	mov	r1, r4
 8017352:	f000 fa8f 	bl	8017874 <_Bfree>
 8017356:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017358:	2300      	movs	r3, #0
 801735a:	6013      	str	r3, [r2, #0]
 801735c:	2550      	movs	r5, #80	@ 0x50
 801735e:	e72b      	b.n	80171b8 <__gethex+0xf8>
 8017360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017362:	2b00      	cmp	r3, #0
 8017364:	d1f3      	bne.n	801734e <__gethex+0x28e>
 8017366:	e7e0      	b.n	801732a <__gethex+0x26a>
 8017368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801736a:	2b00      	cmp	r3, #0
 801736c:	d1dd      	bne.n	801732a <__gethex+0x26a>
 801736e:	e7ee      	b.n	801734e <__gethex+0x28e>
 8017370:	08019bf4 	.word	0x08019bf4
 8017374:	08019e01 	.word	0x08019e01
 8017378:	08019e12 	.word	0x08019e12
 801737c:	1e6f      	subs	r7, r5, #1
 801737e:	f1b9 0f00 	cmp.w	r9, #0
 8017382:	d130      	bne.n	80173e6 <__gethex+0x326>
 8017384:	b127      	cbz	r7, 8017390 <__gethex+0x2d0>
 8017386:	4639      	mov	r1, r7
 8017388:	4620      	mov	r0, r4
 801738a:	f000 fec1 	bl	8018110 <__any_on>
 801738e:	4681      	mov	r9, r0
 8017390:	117a      	asrs	r2, r7, #5
 8017392:	2301      	movs	r3, #1
 8017394:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017398:	f007 071f 	and.w	r7, r7, #31
 801739c:	40bb      	lsls	r3, r7
 801739e:	4213      	tst	r3, r2
 80173a0:	4629      	mov	r1, r5
 80173a2:	4620      	mov	r0, r4
 80173a4:	bf18      	it	ne
 80173a6:	f049 0902 	orrne.w	r9, r9, #2
 80173aa:	f7ff fe21 	bl	8016ff0 <rshift>
 80173ae:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80173b2:	1b76      	subs	r6, r6, r5
 80173b4:	2502      	movs	r5, #2
 80173b6:	f1b9 0f00 	cmp.w	r9, #0
 80173ba:	d047      	beq.n	801744c <__gethex+0x38c>
 80173bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80173c0:	2b02      	cmp	r3, #2
 80173c2:	d015      	beq.n	80173f0 <__gethex+0x330>
 80173c4:	2b03      	cmp	r3, #3
 80173c6:	d017      	beq.n	80173f8 <__gethex+0x338>
 80173c8:	2b01      	cmp	r3, #1
 80173ca:	d109      	bne.n	80173e0 <__gethex+0x320>
 80173cc:	f019 0f02 	tst.w	r9, #2
 80173d0:	d006      	beq.n	80173e0 <__gethex+0x320>
 80173d2:	f8da 3000 	ldr.w	r3, [sl]
 80173d6:	ea49 0903 	orr.w	r9, r9, r3
 80173da:	f019 0f01 	tst.w	r9, #1
 80173de:	d10e      	bne.n	80173fe <__gethex+0x33e>
 80173e0:	f045 0510 	orr.w	r5, r5, #16
 80173e4:	e032      	b.n	801744c <__gethex+0x38c>
 80173e6:	f04f 0901 	mov.w	r9, #1
 80173ea:	e7d1      	b.n	8017390 <__gethex+0x2d0>
 80173ec:	2501      	movs	r5, #1
 80173ee:	e7e2      	b.n	80173b6 <__gethex+0x2f6>
 80173f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80173f2:	f1c3 0301 	rsb	r3, r3, #1
 80173f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80173f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d0f0      	beq.n	80173e0 <__gethex+0x320>
 80173fe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017402:	f104 0314 	add.w	r3, r4, #20
 8017406:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801740a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801740e:	f04f 0c00 	mov.w	ip, #0
 8017412:	4618      	mov	r0, r3
 8017414:	f853 2b04 	ldr.w	r2, [r3], #4
 8017418:	f1b2 3fff 	cmp.w	r2, #4294967295
 801741c:	d01b      	beq.n	8017456 <__gethex+0x396>
 801741e:	3201      	adds	r2, #1
 8017420:	6002      	str	r2, [r0, #0]
 8017422:	2d02      	cmp	r5, #2
 8017424:	f104 0314 	add.w	r3, r4, #20
 8017428:	d13c      	bne.n	80174a4 <__gethex+0x3e4>
 801742a:	f8d8 2000 	ldr.w	r2, [r8]
 801742e:	3a01      	subs	r2, #1
 8017430:	42b2      	cmp	r2, r6
 8017432:	d109      	bne.n	8017448 <__gethex+0x388>
 8017434:	1171      	asrs	r1, r6, #5
 8017436:	2201      	movs	r2, #1
 8017438:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801743c:	f006 061f 	and.w	r6, r6, #31
 8017440:	fa02 f606 	lsl.w	r6, r2, r6
 8017444:	421e      	tst	r6, r3
 8017446:	d13a      	bne.n	80174be <__gethex+0x3fe>
 8017448:	f045 0520 	orr.w	r5, r5, #32
 801744c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801744e:	601c      	str	r4, [r3, #0]
 8017450:	9b02      	ldr	r3, [sp, #8]
 8017452:	601f      	str	r7, [r3, #0]
 8017454:	e6b0      	b.n	80171b8 <__gethex+0xf8>
 8017456:	4299      	cmp	r1, r3
 8017458:	f843 cc04 	str.w	ip, [r3, #-4]
 801745c:	d8d9      	bhi.n	8017412 <__gethex+0x352>
 801745e:	68a3      	ldr	r3, [r4, #8]
 8017460:	459b      	cmp	fp, r3
 8017462:	db17      	blt.n	8017494 <__gethex+0x3d4>
 8017464:	6861      	ldr	r1, [r4, #4]
 8017466:	9801      	ldr	r0, [sp, #4]
 8017468:	3101      	adds	r1, #1
 801746a:	f000 f9c3 	bl	80177f4 <_Balloc>
 801746e:	4681      	mov	r9, r0
 8017470:	b918      	cbnz	r0, 801747a <__gethex+0x3ba>
 8017472:	4b1a      	ldr	r3, [pc, #104]	@ (80174dc <__gethex+0x41c>)
 8017474:	4602      	mov	r2, r0
 8017476:	2184      	movs	r1, #132	@ 0x84
 8017478:	e6c5      	b.n	8017206 <__gethex+0x146>
 801747a:	6922      	ldr	r2, [r4, #16]
 801747c:	3202      	adds	r2, #2
 801747e:	f104 010c 	add.w	r1, r4, #12
 8017482:	0092      	lsls	r2, r2, #2
 8017484:	300c      	adds	r0, #12
 8017486:	f7fe ff72 	bl	801636e <memcpy>
 801748a:	4621      	mov	r1, r4
 801748c:	9801      	ldr	r0, [sp, #4]
 801748e:	f000 f9f1 	bl	8017874 <_Bfree>
 8017492:	464c      	mov	r4, r9
 8017494:	6923      	ldr	r3, [r4, #16]
 8017496:	1c5a      	adds	r2, r3, #1
 8017498:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801749c:	6122      	str	r2, [r4, #16]
 801749e:	2201      	movs	r2, #1
 80174a0:	615a      	str	r2, [r3, #20]
 80174a2:	e7be      	b.n	8017422 <__gethex+0x362>
 80174a4:	6922      	ldr	r2, [r4, #16]
 80174a6:	455a      	cmp	r2, fp
 80174a8:	dd0b      	ble.n	80174c2 <__gethex+0x402>
 80174aa:	2101      	movs	r1, #1
 80174ac:	4620      	mov	r0, r4
 80174ae:	f7ff fd9f 	bl	8016ff0 <rshift>
 80174b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80174b6:	3701      	adds	r7, #1
 80174b8:	42bb      	cmp	r3, r7
 80174ba:	f6ff aee0 	blt.w	801727e <__gethex+0x1be>
 80174be:	2501      	movs	r5, #1
 80174c0:	e7c2      	b.n	8017448 <__gethex+0x388>
 80174c2:	f016 061f 	ands.w	r6, r6, #31
 80174c6:	d0fa      	beq.n	80174be <__gethex+0x3fe>
 80174c8:	4453      	add	r3, sl
 80174ca:	f1c6 0620 	rsb	r6, r6, #32
 80174ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80174d2:	f000 fa81 	bl	80179d8 <__hi0bits>
 80174d6:	42b0      	cmp	r0, r6
 80174d8:	dbe7      	blt.n	80174aa <__gethex+0x3ea>
 80174da:	e7f0      	b.n	80174be <__gethex+0x3fe>
 80174dc:	08019e01 	.word	0x08019e01

080174e0 <L_shift>:
 80174e0:	f1c2 0208 	rsb	r2, r2, #8
 80174e4:	0092      	lsls	r2, r2, #2
 80174e6:	b570      	push	{r4, r5, r6, lr}
 80174e8:	f1c2 0620 	rsb	r6, r2, #32
 80174ec:	6843      	ldr	r3, [r0, #4]
 80174ee:	6804      	ldr	r4, [r0, #0]
 80174f0:	fa03 f506 	lsl.w	r5, r3, r6
 80174f4:	432c      	orrs	r4, r5
 80174f6:	40d3      	lsrs	r3, r2
 80174f8:	6004      	str	r4, [r0, #0]
 80174fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80174fe:	4288      	cmp	r0, r1
 8017500:	d3f4      	bcc.n	80174ec <L_shift+0xc>
 8017502:	bd70      	pop	{r4, r5, r6, pc}

08017504 <__match>:
 8017504:	b530      	push	{r4, r5, lr}
 8017506:	6803      	ldr	r3, [r0, #0]
 8017508:	3301      	adds	r3, #1
 801750a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801750e:	b914      	cbnz	r4, 8017516 <__match+0x12>
 8017510:	6003      	str	r3, [r0, #0]
 8017512:	2001      	movs	r0, #1
 8017514:	bd30      	pop	{r4, r5, pc}
 8017516:	f813 2b01 	ldrb.w	r2, [r3], #1
 801751a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801751e:	2d19      	cmp	r5, #25
 8017520:	bf98      	it	ls
 8017522:	3220      	addls	r2, #32
 8017524:	42a2      	cmp	r2, r4
 8017526:	d0f0      	beq.n	801750a <__match+0x6>
 8017528:	2000      	movs	r0, #0
 801752a:	e7f3      	b.n	8017514 <__match+0x10>

0801752c <__hexnan>:
 801752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017530:	680b      	ldr	r3, [r1, #0]
 8017532:	6801      	ldr	r1, [r0, #0]
 8017534:	115e      	asrs	r6, r3, #5
 8017536:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801753a:	f013 031f 	ands.w	r3, r3, #31
 801753e:	b087      	sub	sp, #28
 8017540:	bf18      	it	ne
 8017542:	3604      	addne	r6, #4
 8017544:	2500      	movs	r5, #0
 8017546:	1f37      	subs	r7, r6, #4
 8017548:	4682      	mov	sl, r0
 801754a:	4690      	mov	r8, r2
 801754c:	9301      	str	r3, [sp, #4]
 801754e:	f846 5c04 	str.w	r5, [r6, #-4]
 8017552:	46b9      	mov	r9, r7
 8017554:	463c      	mov	r4, r7
 8017556:	9502      	str	r5, [sp, #8]
 8017558:	46ab      	mov	fp, r5
 801755a:	784a      	ldrb	r2, [r1, #1]
 801755c:	1c4b      	adds	r3, r1, #1
 801755e:	9303      	str	r3, [sp, #12]
 8017560:	b342      	cbz	r2, 80175b4 <__hexnan+0x88>
 8017562:	4610      	mov	r0, r2
 8017564:	9105      	str	r1, [sp, #20]
 8017566:	9204      	str	r2, [sp, #16]
 8017568:	f7ff fd94 	bl	8017094 <__hexdig_fun>
 801756c:	2800      	cmp	r0, #0
 801756e:	d151      	bne.n	8017614 <__hexnan+0xe8>
 8017570:	9a04      	ldr	r2, [sp, #16]
 8017572:	9905      	ldr	r1, [sp, #20]
 8017574:	2a20      	cmp	r2, #32
 8017576:	d818      	bhi.n	80175aa <__hexnan+0x7e>
 8017578:	9b02      	ldr	r3, [sp, #8]
 801757a:	459b      	cmp	fp, r3
 801757c:	dd13      	ble.n	80175a6 <__hexnan+0x7a>
 801757e:	454c      	cmp	r4, r9
 8017580:	d206      	bcs.n	8017590 <__hexnan+0x64>
 8017582:	2d07      	cmp	r5, #7
 8017584:	dc04      	bgt.n	8017590 <__hexnan+0x64>
 8017586:	462a      	mov	r2, r5
 8017588:	4649      	mov	r1, r9
 801758a:	4620      	mov	r0, r4
 801758c:	f7ff ffa8 	bl	80174e0 <L_shift>
 8017590:	4544      	cmp	r4, r8
 8017592:	d952      	bls.n	801763a <__hexnan+0x10e>
 8017594:	2300      	movs	r3, #0
 8017596:	f1a4 0904 	sub.w	r9, r4, #4
 801759a:	f844 3c04 	str.w	r3, [r4, #-4]
 801759e:	f8cd b008 	str.w	fp, [sp, #8]
 80175a2:	464c      	mov	r4, r9
 80175a4:	461d      	mov	r5, r3
 80175a6:	9903      	ldr	r1, [sp, #12]
 80175a8:	e7d7      	b.n	801755a <__hexnan+0x2e>
 80175aa:	2a29      	cmp	r2, #41	@ 0x29
 80175ac:	d157      	bne.n	801765e <__hexnan+0x132>
 80175ae:	3102      	adds	r1, #2
 80175b0:	f8ca 1000 	str.w	r1, [sl]
 80175b4:	f1bb 0f00 	cmp.w	fp, #0
 80175b8:	d051      	beq.n	801765e <__hexnan+0x132>
 80175ba:	454c      	cmp	r4, r9
 80175bc:	d206      	bcs.n	80175cc <__hexnan+0xa0>
 80175be:	2d07      	cmp	r5, #7
 80175c0:	dc04      	bgt.n	80175cc <__hexnan+0xa0>
 80175c2:	462a      	mov	r2, r5
 80175c4:	4649      	mov	r1, r9
 80175c6:	4620      	mov	r0, r4
 80175c8:	f7ff ff8a 	bl	80174e0 <L_shift>
 80175cc:	4544      	cmp	r4, r8
 80175ce:	d936      	bls.n	801763e <__hexnan+0x112>
 80175d0:	f1a8 0204 	sub.w	r2, r8, #4
 80175d4:	4623      	mov	r3, r4
 80175d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80175da:	f842 1f04 	str.w	r1, [r2, #4]!
 80175de:	429f      	cmp	r7, r3
 80175e0:	d2f9      	bcs.n	80175d6 <__hexnan+0xaa>
 80175e2:	1b3b      	subs	r3, r7, r4
 80175e4:	f023 0303 	bic.w	r3, r3, #3
 80175e8:	3304      	adds	r3, #4
 80175ea:	3401      	adds	r4, #1
 80175ec:	3e03      	subs	r6, #3
 80175ee:	42b4      	cmp	r4, r6
 80175f0:	bf88      	it	hi
 80175f2:	2304      	movhi	r3, #4
 80175f4:	4443      	add	r3, r8
 80175f6:	2200      	movs	r2, #0
 80175f8:	f843 2b04 	str.w	r2, [r3], #4
 80175fc:	429f      	cmp	r7, r3
 80175fe:	d2fb      	bcs.n	80175f8 <__hexnan+0xcc>
 8017600:	683b      	ldr	r3, [r7, #0]
 8017602:	b91b      	cbnz	r3, 801760c <__hexnan+0xe0>
 8017604:	4547      	cmp	r7, r8
 8017606:	d128      	bne.n	801765a <__hexnan+0x12e>
 8017608:	2301      	movs	r3, #1
 801760a:	603b      	str	r3, [r7, #0]
 801760c:	2005      	movs	r0, #5
 801760e:	b007      	add	sp, #28
 8017610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017614:	3501      	adds	r5, #1
 8017616:	2d08      	cmp	r5, #8
 8017618:	f10b 0b01 	add.w	fp, fp, #1
 801761c:	dd06      	ble.n	801762c <__hexnan+0x100>
 801761e:	4544      	cmp	r4, r8
 8017620:	d9c1      	bls.n	80175a6 <__hexnan+0x7a>
 8017622:	2300      	movs	r3, #0
 8017624:	f844 3c04 	str.w	r3, [r4, #-4]
 8017628:	2501      	movs	r5, #1
 801762a:	3c04      	subs	r4, #4
 801762c:	6822      	ldr	r2, [r4, #0]
 801762e:	f000 000f 	and.w	r0, r0, #15
 8017632:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017636:	6020      	str	r0, [r4, #0]
 8017638:	e7b5      	b.n	80175a6 <__hexnan+0x7a>
 801763a:	2508      	movs	r5, #8
 801763c:	e7b3      	b.n	80175a6 <__hexnan+0x7a>
 801763e:	9b01      	ldr	r3, [sp, #4]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d0dd      	beq.n	8017600 <__hexnan+0xd4>
 8017644:	f1c3 0320 	rsb	r3, r3, #32
 8017648:	f04f 32ff 	mov.w	r2, #4294967295
 801764c:	40da      	lsrs	r2, r3
 801764e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017652:	4013      	ands	r3, r2
 8017654:	f846 3c04 	str.w	r3, [r6, #-4]
 8017658:	e7d2      	b.n	8017600 <__hexnan+0xd4>
 801765a:	3f04      	subs	r7, #4
 801765c:	e7d0      	b.n	8017600 <__hexnan+0xd4>
 801765e:	2004      	movs	r0, #4
 8017660:	e7d5      	b.n	801760e <__hexnan+0xe2>
	...

08017664 <malloc>:
 8017664:	4b02      	ldr	r3, [pc, #8]	@ (8017670 <malloc+0xc>)
 8017666:	4601      	mov	r1, r0
 8017668:	6818      	ldr	r0, [r3, #0]
 801766a:	f000 b825 	b.w	80176b8 <_malloc_r>
 801766e:	bf00      	nop
 8017670:	2400027c 	.word	0x2400027c

08017674 <sbrk_aligned>:
 8017674:	b570      	push	{r4, r5, r6, lr}
 8017676:	4e0f      	ldr	r6, [pc, #60]	@ (80176b4 <sbrk_aligned+0x40>)
 8017678:	460c      	mov	r4, r1
 801767a:	6831      	ldr	r1, [r6, #0]
 801767c:	4605      	mov	r5, r0
 801767e:	b911      	cbnz	r1, 8017686 <sbrk_aligned+0x12>
 8017680:	f000 ff92 	bl	80185a8 <_sbrk_r>
 8017684:	6030      	str	r0, [r6, #0]
 8017686:	4621      	mov	r1, r4
 8017688:	4628      	mov	r0, r5
 801768a:	f000 ff8d 	bl	80185a8 <_sbrk_r>
 801768e:	1c43      	adds	r3, r0, #1
 8017690:	d103      	bne.n	801769a <sbrk_aligned+0x26>
 8017692:	f04f 34ff 	mov.w	r4, #4294967295
 8017696:	4620      	mov	r0, r4
 8017698:	bd70      	pop	{r4, r5, r6, pc}
 801769a:	1cc4      	adds	r4, r0, #3
 801769c:	f024 0403 	bic.w	r4, r4, #3
 80176a0:	42a0      	cmp	r0, r4
 80176a2:	d0f8      	beq.n	8017696 <sbrk_aligned+0x22>
 80176a4:	1a21      	subs	r1, r4, r0
 80176a6:	4628      	mov	r0, r5
 80176a8:	f000 ff7e 	bl	80185a8 <_sbrk_r>
 80176ac:	3001      	adds	r0, #1
 80176ae:	d1f2      	bne.n	8017696 <sbrk_aligned+0x22>
 80176b0:	e7ef      	b.n	8017692 <sbrk_aligned+0x1e>
 80176b2:	bf00      	nop
 80176b4:	24006c70 	.word	0x24006c70

080176b8 <_malloc_r>:
 80176b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176bc:	1ccd      	adds	r5, r1, #3
 80176be:	f025 0503 	bic.w	r5, r5, #3
 80176c2:	3508      	adds	r5, #8
 80176c4:	2d0c      	cmp	r5, #12
 80176c6:	bf38      	it	cc
 80176c8:	250c      	movcc	r5, #12
 80176ca:	2d00      	cmp	r5, #0
 80176cc:	4606      	mov	r6, r0
 80176ce:	db01      	blt.n	80176d4 <_malloc_r+0x1c>
 80176d0:	42a9      	cmp	r1, r5
 80176d2:	d904      	bls.n	80176de <_malloc_r+0x26>
 80176d4:	230c      	movs	r3, #12
 80176d6:	6033      	str	r3, [r6, #0]
 80176d8:	2000      	movs	r0, #0
 80176da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80177b4 <_malloc_r+0xfc>
 80176e2:	f000 f87b 	bl	80177dc <__malloc_lock>
 80176e6:	f8d8 3000 	ldr.w	r3, [r8]
 80176ea:	461c      	mov	r4, r3
 80176ec:	bb44      	cbnz	r4, 8017740 <_malloc_r+0x88>
 80176ee:	4629      	mov	r1, r5
 80176f0:	4630      	mov	r0, r6
 80176f2:	f7ff ffbf 	bl	8017674 <sbrk_aligned>
 80176f6:	1c43      	adds	r3, r0, #1
 80176f8:	4604      	mov	r4, r0
 80176fa:	d158      	bne.n	80177ae <_malloc_r+0xf6>
 80176fc:	f8d8 4000 	ldr.w	r4, [r8]
 8017700:	4627      	mov	r7, r4
 8017702:	2f00      	cmp	r7, #0
 8017704:	d143      	bne.n	801778e <_malloc_r+0xd6>
 8017706:	2c00      	cmp	r4, #0
 8017708:	d04b      	beq.n	80177a2 <_malloc_r+0xea>
 801770a:	6823      	ldr	r3, [r4, #0]
 801770c:	4639      	mov	r1, r7
 801770e:	4630      	mov	r0, r6
 8017710:	eb04 0903 	add.w	r9, r4, r3
 8017714:	f000 ff48 	bl	80185a8 <_sbrk_r>
 8017718:	4581      	cmp	r9, r0
 801771a:	d142      	bne.n	80177a2 <_malloc_r+0xea>
 801771c:	6821      	ldr	r1, [r4, #0]
 801771e:	1a6d      	subs	r5, r5, r1
 8017720:	4629      	mov	r1, r5
 8017722:	4630      	mov	r0, r6
 8017724:	f7ff ffa6 	bl	8017674 <sbrk_aligned>
 8017728:	3001      	adds	r0, #1
 801772a:	d03a      	beq.n	80177a2 <_malloc_r+0xea>
 801772c:	6823      	ldr	r3, [r4, #0]
 801772e:	442b      	add	r3, r5
 8017730:	6023      	str	r3, [r4, #0]
 8017732:	f8d8 3000 	ldr.w	r3, [r8]
 8017736:	685a      	ldr	r2, [r3, #4]
 8017738:	bb62      	cbnz	r2, 8017794 <_malloc_r+0xdc>
 801773a:	f8c8 7000 	str.w	r7, [r8]
 801773e:	e00f      	b.n	8017760 <_malloc_r+0xa8>
 8017740:	6822      	ldr	r2, [r4, #0]
 8017742:	1b52      	subs	r2, r2, r5
 8017744:	d420      	bmi.n	8017788 <_malloc_r+0xd0>
 8017746:	2a0b      	cmp	r2, #11
 8017748:	d917      	bls.n	801777a <_malloc_r+0xc2>
 801774a:	1961      	adds	r1, r4, r5
 801774c:	42a3      	cmp	r3, r4
 801774e:	6025      	str	r5, [r4, #0]
 8017750:	bf18      	it	ne
 8017752:	6059      	strne	r1, [r3, #4]
 8017754:	6863      	ldr	r3, [r4, #4]
 8017756:	bf08      	it	eq
 8017758:	f8c8 1000 	streq.w	r1, [r8]
 801775c:	5162      	str	r2, [r4, r5]
 801775e:	604b      	str	r3, [r1, #4]
 8017760:	4630      	mov	r0, r6
 8017762:	f000 f841 	bl	80177e8 <__malloc_unlock>
 8017766:	f104 000b 	add.w	r0, r4, #11
 801776a:	1d23      	adds	r3, r4, #4
 801776c:	f020 0007 	bic.w	r0, r0, #7
 8017770:	1ac2      	subs	r2, r0, r3
 8017772:	bf1c      	itt	ne
 8017774:	1a1b      	subne	r3, r3, r0
 8017776:	50a3      	strne	r3, [r4, r2]
 8017778:	e7af      	b.n	80176da <_malloc_r+0x22>
 801777a:	6862      	ldr	r2, [r4, #4]
 801777c:	42a3      	cmp	r3, r4
 801777e:	bf0c      	ite	eq
 8017780:	f8c8 2000 	streq.w	r2, [r8]
 8017784:	605a      	strne	r2, [r3, #4]
 8017786:	e7eb      	b.n	8017760 <_malloc_r+0xa8>
 8017788:	4623      	mov	r3, r4
 801778a:	6864      	ldr	r4, [r4, #4]
 801778c:	e7ae      	b.n	80176ec <_malloc_r+0x34>
 801778e:	463c      	mov	r4, r7
 8017790:	687f      	ldr	r7, [r7, #4]
 8017792:	e7b6      	b.n	8017702 <_malloc_r+0x4a>
 8017794:	461a      	mov	r2, r3
 8017796:	685b      	ldr	r3, [r3, #4]
 8017798:	42a3      	cmp	r3, r4
 801779a:	d1fb      	bne.n	8017794 <_malloc_r+0xdc>
 801779c:	2300      	movs	r3, #0
 801779e:	6053      	str	r3, [r2, #4]
 80177a0:	e7de      	b.n	8017760 <_malloc_r+0xa8>
 80177a2:	230c      	movs	r3, #12
 80177a4:	6033      	str	r3, [r6, #0]
 80177a6:	4630      	mov	r0, r6
 80177a8:	f000 f81e 	bl	80177e8 <__malloc_unlock>
 80177ac:	e794      	b.n	80176d8 <_malloc_r+0x20>
 80177ae:	6005      	str	r5, [r0, #0]
 80177b0:	e7d6      	b.n	8017760 <_malloc_r+0xa8>
 80177b2:	bf00      	nop
 80177b4:	24006c74 	.word	0x24006c74

080177b8 <__ascii_mbtowc>:
 80177b8:	b082      	sub	sp, #8
 80177ba:	b901      	cbnz	r1, 80177be <__ascii_mbtowc+0x6>
 80177bc:	a901      	add	r1, sp, #4
 80177be:	b142      	cbz	r2, 80177d2 <__ascii_mbtowc+0x1a>
 80177c0:	b14b      	cbz	r3, 80177d6 <__ascii_mbtowc+0x1e>
 80177c2:	7813      	ldrb	r3, [r2, #0]
 80177c4:	600b      	str	r3, [r1, #0]
 80177c6:	7812      	ldrb	r2, [r2, #0]
 80177c8:	1e10      	subs	r0, r2, #0
 80177ca:	bf18      	it	ne
 80177cc:	2001      	movne	r0, #1
 80177ce:	b002      	add	sp, #8
 80177d0:	4770      	bx	lr
 80177d2:	4610      	mov	r0, r2
 80177d4:	e7fb      	b.n	80177ce <__ascii_mbtowc+0x16>
 80177d6:	f06f 0001 	mvn.w	r0, #1
 80177da:	e7f8      	b.n	80177ce <__ascii_mbtowc+0x16>

080177dc <__malloc_lock>:
 80177dc:	4801      	ldr	r0, [pc, #4]	@ (80177e4 <__malloc_lock+0x8>)
 80177de:	f7fe bdc4 	b.w	801636a <__retarget_lock_acquire_recursive>
 80177e2:	bf00      	nop
 80177e4:	24006c6c 	.word	0x24006c6c

080177e8 <__malloc_unlock>:
 80177e8:	4801      	ldr	r0, [pc, #4]	@ (80177f0 <__malloc_unlock+0x8>)
 80177ea:	f7fe bdbf 	b.w	801636c <__retarget_lock_release_recursive>
 80177ee:	bf00      	nop
 80177f0:	24006c6c 	.word	0x24006c6c

080177f4 <_Balloc>:
 80177f4:	b570      	push	{r4, r5, r6, lr}
 80177f6:	69c6      	ldr	r6, [r0, #28]
 80177f8:	4604      	mov	r4, r0
 80177fa:	460d      	mov	r5, r1
 80177fc:	b976      	cbnz	r6, 801781c <_Balloc+0x28>
 80177fe:	2010      	movs	r0, #16
 8017800:	f7ff ff30 	bl	8017664 <malloc>
 8017804:	4602      	mov	r2, r0
 8017806:	61e0      	str	r0, [r4, #28]
 8017808:	b920      	cbnz	r0, 8017814 <_Balloc+0x20>
 801780a:	4b18      	ldr	r3, [pc, #96]	@ (801786c <_Balloc+0x78>)
 801780c:	4818      	ldr	r0, [pc, #96]	@ (8017870 <_Balloc+0x7c>)
 801780e:	216b      	movs	r1, #107	@ 0x6b
 8017810:	f000 feda 	bl	80185c8 <__assert_func>
 8017814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017818:	6006      	str	r6, [r0, #0]
 801781a:	60c6      	str	r6, [r0, #12]
 801781c:	69e6      	ldr	r6, [r4, #28]
 801781e:	68f3      	ldr	r3, [r6, #12]
 8017820:	b183      	cbz	r3, 8017844 <_Balloc+0x50>
 8017822:	69e3      	ldr	r3, [r4, #28]
 8017824:	68db      	ldr	r3, [r3, #12]
 8017826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801782a:	b9b8      	cbnz	r0, 801785c <_Balloc+0x68>
 801782c:	2101      	movs	r1, #1
 801782e:	fa01 f605 	lsl.w	r6, r1, r5
 8017832:	1d72      	adds	r2, r6, #5
 8017834:	0092      	lsls	r2, r2, #2
 8017836:	4620      	mov	r0, r4
 8017838:	f000 fee4 	bl	8018604 <_calloc_r>
 801783c:	b160      	cbz	r0, 8017858 <_Balloc+0x64>
 801783e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017842:	e00e      	b.n	8017862 <_Balloc+0x6e>
 8017844:	2221      	movs	r2, #33	@ 0x21
 8017846:	2104      	movs	r1, #4
 8017848:	4620      	mov	r0, r4
 801784a:	f000 fedb 	bl	8018604 <_calloc_r>
 801784e:	69e3      	ldr	r3, [r4, #28]
 8017850:	60f0      	str	r0, [r6, #12]
 8017852:	68db      	ldr	r3, [r3, #12]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d1e4      	bne.n	8017822 <_Balloc+0x2e>
 8017858:	2000      	movs	r0, #0
 801785a:	bd70      	pop	{r4, r5, r6, pc}
 801785c:	6802      	ldr	r2, [r0, #0]
 801785e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017862:	2300      	movs	r3, #0
 8017864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017868:	e7f7      	b.n	801785a <_Balloc+0x66>
 801786a:	bf00      	nop
 801786c:	08019d92 	.word	0x08019d92
 8017870:	08019e72 	.word	0x08019e72

08017874 <_Bfree>:
 8017874:	b570      	push	{r4, r5, r6, lr}
 8017876:	69c6      	ldr	r6, [r0, #28]
 8017878:	4605      	mov	r5, r0
 801787a:	460c      	mov	r4, r1
 801787c:	b976      	cbnz	r6, 801789c <_Bfree+0x28>
 801787e:	2010      	movs	r0, #16
 8017880:	f7ff fef0 	bl	8017664 <malloc>
 8017884:	4602      	mov	r2, r0
 8017886:	61e8      	str	r0, [r5, #28]
 8017888:	b920      	cbnz	r0, 8017894 <_Bfree+0x20>
 801788a:	4b09      	ldr	r3, [pc, #36]	@ (80178b0 <_Bfree+0x3c>)
 801788c:	4809      	ldr	r0, [pc, #36]	@ (80178b4 <_Bfree+0x40>)
 801788e:	218f      	movs	r1, #143	@ 0x8f
 8017890:	f000 fe9a 	bl	80185c8 <__assert_func>
 8017894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017898:	6006      	str	r6, [r0, #0]
 801789a:	60c6      	str	r6, [r0, #12]
 801789c:	b13c      	cbz	r4, 80178ae <_Bfree+0x3a>
 801789e:	69eb      	ldr	r3, [r5, #28]
 80178a0:	6862      	ldr	r2, [r4, #4]
 80178a2:	68db      	ldr	r3, [r3, #12]
 80178a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80178a8:	6021      	str	r1, [r4, #0]
 80178aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80178ae:	bd70      	pop	{r4, r5, r6, pc}
 80178b0:	08019d92 	.word	0x08019d92
 80178b4:	08019e72 	.word	0x08019e72

080178b8 <__multadd>:
 80178b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178bc:	690d      	ldr	r5, [r1, #16]
 80178be:	4607      	mov	r7, r0
 80178c0:	460c      	mov	r4, r1
 80178c2:	461e      	mov	r6, r3
 80178c4:	f101 0c14 	add.w	ip, r1, #20
 80178c8:	2000      	movs	r0, #0
 80178ca:	f8dc 3000 	ldr.w	r3, [ip]
 80178ce:	b299      	uxth	r1, r3
 80178d0:	fb02 6101 	mla	r1, r2, r1, r6
 80178d4:	0c1e      	lsrs	r6, r3, #16
 80178d6:	0c0b      	lsrs	r3, r1, #16
 80178d8:	fb02 3306 	mla	r3, r2, r6, r3
 80178dc:	b289      	uxth	r1, r1
 80178de:	3001      	adds	r0, #1
 80178e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80178e4:	4285      	cmp	r5, r0
 80178e6:	f84c 1b04 	str.w	r1, [ip], #4
 80178ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80178ee:	dcec      	bgt.n	80178ca <__multadd+0x12>
 80178f0:	b30e      	cbz	r6, 8017936 <__multadd+0x7e>
 80178f2:	68a3      	ldr	r3, [r4, #8]
 80178f4:	42ab      	cmp	r3, r5
 80178f6:	dc19      	bgt.n	801792c <__multadd+0x74>
 80178f8:	6861      	ldr	r1, [r4, #4]
 80178fa:	4638      	mov	r0, r7
 80178fc:	3101      	adds	r1, #1
 80178fe:	f7ff ff79 	bl	80177f4 <_Balloc>
 8017902:	4680      	mov	r8, r0
 8017904:	b928      	cbnz	r0, 8017912 <__multadd+0x5a>
 8017906:	4602      	mov	r2, r0
 8017908:	4b0c      	ldr	r3, [pc, #48]	@ (801793c <__multadd+0x84>)
 801790a:	480d      	ldr	r0, [pc, #52]	@ (8017940 <__multadd+0x88>)
 801790c:	21ba      	movs	r1, #186	@ 0xba
 801790e:	f000 fe5b 	bl	80185c8 <__assert_func>
 8017912:	6922      	ldr	r2, [r4, #16]
 8017914:	3202      	adds	r2, #2
 8017916:	f104 010c 	add.w	r1, r4, #12
 801791a:	0092      	lsls	r2, r2, #2
 801791c:	300c      	adds	r0, #12
 801791e:	f7fe fd26 	bl	801636e <memcpy>
 8017922:	4621      	mov	r1, r4
 8017924:	4638      	mov	r0, r7
 8017926:	f7ff ffa5 	bl	8017874 <_Bfree>
 801792a:	4644      	mov	r4, r8
 801792c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017930:	3501      	adds	r5, #1
 8017932:	615e      	str	r6, [r3, #20]
 8017934:	6125      	str	r5, [r4, #16]
 8017936:	4620      	mov	r0, r4
 8017938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801793c:	08019e01 	.word	0x08019e01
 8017940:	08019e72 	.word	0x08019e72

08017944 <__s2b>:
 8017944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017948:	460c      	mov	r4, r1
 801794a:	4615      	mov	r5, r2
 801794c:	461f      	mov	r7, r3
 801794e:	2209      	movs	r2, #9
 8017950:	3308      	adds	r3, #8
 8017952:	4606      	mov	r6, r0
 8017954:	fb93 f3f2 	sdiv	r3, r3, r2
 8017958:	2100      	movs	r1, #0
 801795a:	2201      	movs	r2, #1
 801795c:	429a      	cmp	r2, r3
 801795e:	db09      	blt.n	8017974 <__s2b+0x30>
 8017960:	4630      	mov	r0, r6
 8017962:	f7ff ff47 	bl	80177f4 <_Balloc>
 8017966:	b940      	cbnz	r0, 801797a <__s2b+0x36>
 8017968:	4602      	mov	r2, r0
 801796a:	4b19      	ldr	r3, [pc, #100]	@ (80179d0 <__s2b+0x8c>)
 801796c:	4819      	ldr	r0, [pc, #100]	@ (80179d4 <__s2b+0x90>)
 801796e:	21d3      	movs	r1, #211	@ 0xd3
 8017970:	f000 fe2a 	bl	80185c8 <__assert_func>
 8017974:	0052      	lsls	r2, r2, #1
 8017976:	3101      	adds	r1, #1
 8017978:	e7f0      	b.n	801795c <__s2b+0x18>
 801797a:	9b08      	ldr	r3, [sp, #32]
 801797c:	6143      	str	r3, [r0, #20]
 801797e:	2d09      	cmp	r5, #9
 8017980:	f04f 0301 	mov.w	r3, #1
 8017984:	6103      	str	r3, [r0, #16]
 8017986:	dd16      	ble.n	80179b6 <__s2b+0x72>
 8017988:	f104 0909 	add.w	r9, r4, #9
 801798c:	46c8      	mov	r8, r9
 801798e:	442c      	add	r4, r5
 8017990:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017994:	4601      	mov	r1, r0
 8017996:	3b30      	subs	r3, #48	@ 0x30
 8017998:	220a      	movs	r2, #10
 801799a:	4630      	mov	r0, r6
 801799c:	f7ff ff8c 	bl	80178b8 <__multadd>
 80179a0:	45a0      	cmp	r8, r4
 80179a2:	d1f5      	bne.n	8017990 <__s2b+0x4c>
 80179a4:	f1a5 0408 	sub.w	r4, r5, #8
 80179a8:	444c      	add	r4, r9
 80179aa:	1b2d      	subs	r5, r5, r4
 80179ac:	1963      	adds	r3, r4, r5
 80179ae:	42bb      	cmp	r3, r7
 80179b0:	db04      	blt.n	80179bc <__s2b+0x78>
 80179b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179b6:	340a      	adds	r4, #10
 80179b8:	2509      	movs	r5, #9
 80179ba:	e7f6      	b.n	80179aa <__s2b+0x66>
 80179bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80179c0:	4601      	mov	r1, r0
 80179c2:	3b30      	subs	r3, #48	@ 0x30
 80179c4:	220a      	movs	r2, #10
 80179c6:	4630      	mov	r0, r6
 80179c8:	f7ff ff76 	bl	80178b8 <__multadd>
 80179cc:	e7ee      	b.n	80179ac <__s2b+0x68>
 80179ce:	bf00      	nop
 80179d0:	08019e01 	.word	0x08019e01
 80179d4:	08019e72 	.word	0x08019e72

080179d8 <__hi0bits>:
 80179d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80179dc:	4603      	mov	r3, r0
 80179de:	bf36      	itet	cc
 80179e0:	0403      	lslcc	r3, r0, #16
 80179e2:	2000      	movcs	r0, #0
 80179e4:	2010      	movcc	r0, #16
 80179e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80179ea:	bf3c      	itt	cc
 80179ec:	021b      	lslcc	r3, r3, #8
 80179ee:	3008      	addcc	r0, #8
 80179f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80179f4:	bf3c      	itt	cc
 80179f6:	011b      	lslcc	r3, r3, #4
 80179f8:	3004      	addcc	r0, #4
 80179fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80179fe:	bf3c      	itt	cc
 8017a00:	009b      	lslcc	r3, r3, #2
 8017a02:	3002      	addcc	r0, #2
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	db05      	blt.n	8017a14 <__hi0bits+0x3c>
 8017a08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017a0c:	f100 0001 	add.w	r0, r0, #1
 8017a10:	bf08      	it	eq
 8017a12:	2020      	moveq	r0, #32
 8017a14:	4770      	bx	lr

08017a16 <__lo0bits>:
 8017a16:	6803      	ldr	r3, [r0, #0]
 8017a18:	4602      	mov	r2, r0
 8017a1a:	f013 0007 	ands.w	r0, r3, #7
 8017a1e:	d00b      	beq.n	8017a38 <__lo0bits+0x22>
 8017a20:	07d9      	lsls	r1, r3, #31
 8017a22:	d421      	bmi.n	8017a68 <__lo0bits+0x52>
 8017a24:	0798      	lsls	r0, r3, #30
 8017a26:	bf49      	itett	mi
 8017a28:	085b      	lsrmi	r3, r3, #1
 8017a2a:	089b      	lsrpl	r3, r3, #2
 8017a2c:	2001      	movmi	r0, #1
 8017a2e:	6013      	strmi	r3, [r2, #0]
 8017a30:	bf5c      	itt	pl
 8017a32:	6013      	strpl	r3, [r2, #0]
 8017a34:	2002      	movpl	r0, #2
 8017a36:	4770      	bx	lr
 8017a38:	b299      	uxth	r1, r3
 8017a3a:	b909      	cbnz	r1, 8017a40 <__lo0bits+0x2a>
 8017a3c:	0c1b      	lsrs	r3, r3, #16
 8017a3e:	2010      	movs	r0, #16
 8017a40:	b2d9      	uxtb	r1, r3
 8017a42:	b909      	cbnz	r1, 8017a48 <__lo0bits+0x32>
 8017a44:	3008      	adds	r0, #8
 8017a46:	0a1b      	lsrs	r3, r3, #8
 8017a48:	0719      	lsls	r1, r3, #28
 8017a4a:	bf04      	itt	eq
 8017a4c:	091b      	lsreq	r3, r3, #4
 8017a4e:	3004      	addeq	r0, #4
 8017a50:	0799      	lsls	r1, r3, #30
 8017a52:	bf04      	itt	eq
 8017a54:	089b      	lsreq	r3, r3, #2
 8017a56:	3002      	addeq	r0, #2
 8017a58:	07d9      	lsls	r1, r3, #31
 8017a5a:	d403      	bmi.n	8017a64 <__lo0bits+0x4e>
 8017a5c:	085b      	lsrs	r3, r3, #1
 8017a5e:	f100 0001 	add.w	r0, r0, #1
 8017a62:	d003      	beq.n	8017a6c <__lo0bits+0x56>
 8017a64:	6013      	str	r3, [r2, #0]
 8017a66:	4770      	bx	lr
 8017a68:	2000      	movs	r0, #0
 8017a6a:	4770      	bx	lr
 8017a6c:	2020      	movs	r0, #32
 8017a6e:	4770      	bx	lr

08017a70 <__i2b>:
 8017a70:	b510      	push	{r4, lr}
 8017a72:	460c      	mov	r4, r1
 8017a74:	2101      	movs	r1, #1
 8017a76:	f7ff febd 	bl	80177f4 <_Balloc>
 8017a7a:	4602      	mov	r2, r0
 8017a7c:	b928      	cbnz	r0, 8017a8a <__i2b+0x1a>
 8017a7e:	4b05      	ldr	r3, [pc, #20]	@ (8017a94 <__i2b+0x24>)
 8017a80:	4805      	ldr	r0, [pc, #20]	@ (8017a98 <__i2b+0x28>)
 8017a82:	f240 1145 	movw	r1, #325	@ 0x145
 8017a86:	f000 fd9f 	bl	80185c8 <__assert_func>
 8017a8a:	2301      	movs	r3, #1
 8017a8c:	6144      	str	r4, [r0, #20]
 8017a8e:	6103      	str	r3, [r0, #16]
 8017a90:	bd10      	pop	{r4, pc}
 8017a92:	bf00      	nop
 8017a94:	08019e01 	.word	0x08019e01
 8017a98:	08019e72 	.word	0x08019e72

08017a9c <__multiply>:
 8017a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aa0:	4614      	mov	r4, r2
 8017aa2:	690a      	ldr	r2, [r1, #16]
 8017aa4:	6923      	ldr	r3, [r4, #16]
 8017aa6:	429a      	cmp	r2, r3
 8017aa8:	bfa8      	it	ge
 8017aaa:	4623      	movge	r3, r4
 8017aac:	460f      	mov	r7, r1
 8017aae:	bfa4      	itt	ge
 8017ab0:	460c      	movge	r4, r1
 8017ab2:	461f      	movge	r7, r3
 8017ab4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017ab8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017abc:	68a3      	ldr	r3, [r4, #8]
 8017abe:	6861      	ldr	r1, [r4, #4]
 8017ac0:	eb0a 0609 	add.w	r6, sl, r9
 8017ac4:	42b3      	cmp	r3, r6
 8017ac6:	b085      	sub	sp, #20
 8017ac8:	bfb8      	it	lt
 8017aca:	3101      	addlt	r1, #1
 8017acc:	f7ff fe92 	bl	80177f4 <_Balloc>
 8017ad0:	b930      	cbnz	r0, 8017ae0 <__multiply+0x44>
 8017ad2:	4602      	mov	r2, r0
 8017ad4:	4b44      	ldr	r3, [pc, #272]	@ (8017be8 <__multiply+0x14c>)
 8017ad6:	4845      	ldr	r0, [pc, #276]	@ (8017bec <__multiply+0x150>)
 8017ad8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017adc:	f000 fd74 	bl	80185c8 <__assert_func>
 8017ae0:	f100 0514 	add.w	r5, r0, #20
 8017ae4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017ae8:	462b      	mov	r3, r5
 8017aea:	2200      	movs	r2, #0
 8017aec:	4543      	cmp	r3, r8
 8017aee:	d321      	bcc.n	8017b34 <__multiply+0x98>
 8017af0:	f107 0114 	add.w	r1, r7, #20
 8017af4:	f104 0214 	add.w	r2, r4, #20
 8017af8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017afc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8017b00:	9302      	str	r3, [sp, #8]
 8017b02:	1b13      	subs	r3, r2, r4
 8017b04:	3b15      	subs	r3, #21
 8017b06:	f023 0303 	bic.w	r3, r3, #3
 8017b0a:	3304      	adds	r3, #4
 8017b0c:	f104 0715 	add.w	r7, r4, #21
 8017b10:	42ba      	cmp	r2, r7
 8017b12:	bf38      	it	cc
 8017b14:	2304      	movcc	r3, #4
 8017b16:	9301      	str	r3, [sp, #4]
 8017b18:	9b02      	ldr	r3, [sp, #8]
 8017b1a:	9103      	str	r1, [sp, #12]
 8017b1c:	428b      	cmp	r3, r1
 8017b1e:	d80c      	bhi.n	8017b3a <__multiply+0x9e>
 8017b20:	2e00      	cmp	r6, #0
 8017b22:	dd03      	ble.n	8017b2c <__multiply+0x90>
 8017b24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d05b      	beq.n	8017be4 <__multiply+0x148>
 8017b2c:	6106      	str	r6, [r0, #16]
 8017b2e:	b005      	add	sp, #20
 8017b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b34:	f843 2b04 	str.w	r2, [r3], #4
 8017b38:	e7d8      	b.n	8017aec <__multiply+0x50>
 8017b3a:	f8b1 a000 	ldrh.w	sl, [r1]
 8017b3e:	f1ba 0f00 	cmp.w	sl, #0
 8017b42:	d024      	beq.n	8017b8e <__multiply+0xf2>
 8017b44:	f104 0e14 	add.w	lr, r4, #20
 8017b48:	46a9      	mov	r9, r5
 8017b4a:	f04f 0c00 	mov.w	ip, #0
 8017b4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017b52:	f8d9 3000 	ldr.w	r3, [r9]
 8017b56:	fa1f fb87 	uxth.w	fp, r7
 8017b5a:	b29b      	uxth	r3, r3
 8017b5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8017b60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8017b64:	f8d9 7000 	ldr.w	r7, [r9]
 8017b68:	4463      	add	r3, ip
 8017b6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017b6e:	fb0a c70b 	mla	r7, sl, fp, ip
 8017b72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8017b76:	b29b      	uxth	r3, r3
 8017b78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017b7c:	4572      	cmp	r2, lr
 8017b7e:	f849 3b04 	str.w	r3, [r9], #4
 8017b82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017b86:	d8e2      	bhi.n	8017b4e <__multiply+0xb2>
 8017b88:	9b01      	ldr	r3, [sp, #4]
 8017b8a:	f845 c003 	str.w	ip, [r5, r3]
 8017b8e:	9b03      	ldr	r3, [sp, #12]
 8017b90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017b94:	3104      	adds	r1, #4
 8017b96:	f1b9 0f00 	cmp.w	r9, #0
 8017b9a:	d021      	beq.n	8017be0 <__multiply+0x144>
 8017b9c:	682b      	ldr	r3, [r5, #0]
 8017b9e:	f104 0c14 	add.w	ip, r4, #20
 8017ba2:	46ae      	mov	lr, r5
 8017ba4:	f04f 0a00 	mov.w	sl, #0
 8017ba8:	f8bc b000 	ldrh.w	fp, [ip]
 8017bac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8017bb0:	fb09 770b 	mla	r7, r9, fp, r7
 8017bb4:	4457      	add	r7, sl
 8017bb6:	b29b      	uxth	r3, r3
 8017bb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017bbc:	f84e 3b04 	str.w	r3, [lr], #4
 8017bc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017bc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017bc8:	f8be 3000 	ldrh.w	r3, [lr]
 8017bcc:	fb09 330a 	mla	r3, r9, sl, r3
 8017bd0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017bd4:	4562      	cmp	r2, ip
 8017bd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017bda:	d8e5      	bhi.n	8017ba8 <__multiply+0x10c>
 8017bdc:	9f01      	ldr	r7, [sp, #4]
 8017bde:	51eb      	str	r3, [r5, r7]
 8017be0:	3504      	adds	r5, #4
 8017be2:	e799      	b.n	8017b18 <__multiply+0x7c>
 8017be4:	3e01      	subs	r6, #1
 8017be6:	e79b      	b.n	8017b20 <__multiply+0x84>
 8017be8:	08019e01 	.word	0x08019e01
 8017bec:	08019e72 	.word	0x08019e72

08017bf0 <__pow5mult>:
 8017bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bf4:	4615      	mov	r5, r2
 8017bf6:	f012 0203 	ands.w	r2, r2, #3
 8017bfa:	4607      	mov	r7, r0
 8017bfc:	460e      	mov	r6, r1
 8017bfe:	d007      	beq.n	8017c10 <__pow5mult+0x20>
 8017c00:	4c25      	ldr	r4, [pc, #148]	@ (8017c98 <__pow5mult+0xa8>)
 8017c02:	3a01      	subs	r2, #1
 8017c04:	2300      	movs	r3, #0
 8017c06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017c0a:	f7ff fe55 	bl	80178b8 <__multadd>
 8017c0e:	4606      	mov	r6, r0
 8017c10:	10ad      	asrs	r5, r5, #2
 8017c12:	d03d      	beq.n	8017c90 <__pow5mult+0xa0>
 8017c14:	69fc      	ldr	r4, [r7, #28]
 8017c16:	b97c      	cbnz	r4, 8017c38 <__pow5mult+0x48>
 8017c18:	2010      	movs	r0, #16
 8017c1a:	f7ff fd23 	bl	8017664 <malloc>
 8017c1e:	4602      	mov	r2, r0
 8017c20:	61f8      	str	r0, [r7, #28]
 8017c22:	b928      	cbnz	r0, 8017c30 <__pow5mult+0x40>
 8017c24:	4b1d      	ldr	r3, [pc, #116]	@ (8017c9c <__pow5mult+0xac>)
 8017c26:	481e      	ldr	r0, [pc, #120]	@ (8017ca0 <__pow5mult+0xb0>)
 8017c28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017c2c:	f000 fccc 	bl	80185c8 <__assert_func>
 8017c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017c34:	6004      	str	r4, [r0, #0]
 8017c36:	60c4      	str	r4, [r0, #12]
 8017c38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017c40:	b94c      	cbnz	r4, 8017c56 <__pow5mult+0x66>
 8017c42:	f240 2171 	movw	r1, #625	@ 0x271
 8017c46:	4638      	mov	r0, r7
 8017c48:	f7ff ff12 	bl	8017a70 <__i2b>
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017c52:	4604      	mov	r4, r0
 8017c54:	6003      	str	r3, [r0, #0]
 8017c56:	f04f 0900 	mov.w	r9, #0
 8017c5a:	07eb      	lsls	r3, r5, #31
 8017c5c:	d50a      	bpl.n	8017c74 <__pow5mult+0x84>
 8017c5e:	4631      	mov	r1, r6
 8017c60:	4622      	mov	r2, r4
 8017c62:	4638      	mov	r0, r7
 8017c64:	f7ff ff1a 	bl	8017a9c <__multiply>
 8017c68:	4631      	mov	r1, r6
 8017c6a:	4680      	mov	r8, r0
 8017c6c:	4638      	mov	r0, r7
 8017c6e:	f7ff fe01 	bl	8017874 <_Bfree>
 8017c72:	4646      	mov	r6, r8
 8017c74:	106d      	asrs	r5, r5, #1
 8017c76:	d00b      	beq.n	8017c90 <__pow5mult+0xa0>
 8017c78:	6820      	ldr	r0, [r4, #0]
 8017c7a:	b938      	cbnz	r0, 8017c8c <__pow5mult+0x9c>
 8017c7c:	4622      	mov	r2, r4
 8017c7e:	4621      	mov	r1, r4
 8017c80:	4638      	mov	r0, r7
 8017c82:	f7ff ff0b 	bl	8017a9c <__multiply>
 8017c86:	6020      	str	r0, [r4, #0]
 8017c88:	f8c0 9000 	str.w	r9, [r0]
 8017c8c:	4604      	mov	r4, r0
 8017c8e:	e7e4      	b.n	8017c5a <__pow5mult+0x6a>
 8017c90:	4630      	mov	r0, r6
 8017c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c96:	bf00      	nop
 8017c98:	08019ecc 	.word	0x08019ecc
 8017c9c:	08019d92 	.word	0x08019d92
 8017ca0:	08019e72 	.word	0x08019e72

08017ca4 <__lshift>:
 8017ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ca8:	460c      	mov	r4, r1
 8017caa:	6849      	ldr	r1, [r1, #4]
 8017cac:	6923      	ldr	r3, [r4, #16]
 8017cae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017cb2:	68a3      	ldr	r3, [r4, #8]
 8017cb4:	4607      	mov	r7, r0
 8017cb6:	4691      	mov	r9, r2
 8017cb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017cbc:	f108 0601 	add.w	r6, r8, #1
 8017cc0:	42b3      	cmp	r3, r6
 8017cc2:	db0b      	blt.n	8017cdc <__lshift+0x38>
 8017cc4:	4638      	mov	r0, r7
 8017cc6:	f7ff fd95 	bl	80177f4 <_Balloc>
 8017cca:	4605      	mov	r5, r0
 8017ccc:	b948      	cbnz	r0, 8017ce2 <__lshift+0x3e>
 8017cce:	4602      	mov	r2, r0
 8017cd0:	4b28      	ldr	r3, [pc, #160]	@ (8017d74 <__lshift+0xd0>)
 8017cd2:	4829      	ldr	r0, [pc, #164]	@ (8017d78 <__lshift+0xd4>)
 8017cd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017cd8:	f000 fc76 	bl	80185c8 <__assert_func>
 8017cdc:	3101      	adds	r1, #1
 8017cde:	005b      	lsls	r3, r3, #1
 8017ce0:	e7ee      	b.n	8017cc0 <__lshift+0x1c>
 8017ce2:	2300      	movs	r3, #0
 8017ce4:	f100 0114 	add.w	r1, r0, #20
 8017ce8:	f100 0210 	add.w	r2, r0, #16
 8017cec:	4618      	mov	r0, r3
 8017cee:	4553      	cmp	r3, sl
 8017cf0:	db33      	blt.n	8017d5a <__lshift+0xb6>
 8017cf2:	6920      	ldr	r0, [r4, #16]
 8017cf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017cf8:	f104 0314 	add.w	r3, r4, #20
 8017cfc:	f019 091f 	ands.w	r9, r9, #31
 8017d00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017d04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017d08:	d02b      	beq.n	8017d62 <__lshift+0xbe>
 8017d0a:	f1c9 0e20 	rsb	lr, r9, #32
 8017d0e:	468a      	mov	sl, r1
 8017d10:	2200      	movs	r2, #0
 8017d12:	6818      	ldr	r0, [r3, #0]
 8017d14:	fa00 f009 	lsl.w	r0, r0, r9
 8017d18:	4310      	orrs	r0, r2
 8017d1a:	f84a 0b04 	str.w	r0, [sl], #4
 8017d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d22:	459c      	cmp	ip, r3
 8017d24:	fa22 f20e 	lsr.w	r2, r2, lr
 8017d28:	d8f3      	bhi.n	8017d12 <__lshift+0x6e>
 8017d2a:	ebac 0304 	sub.w	r3, ip, r4
 8017d2e:	3b15      	subs	r3, #21
 8017d30:	f023 0303 	bic.w	r3, r3, #3
 8017d34:	3304      	adds	r3, #4
 8017d36:	f104 0015 	add.w	r0, r4, #21
 8017d3a:	4584      	cmp	ip, r0
 8017d3c:	bf38      	it	cc
 8017d3e:	2304      	movcc	r3, #4
 8017d40:	50ca      	str	r2, [r1, r3]
 8017d42:	b10a      	cbz	r2, 8017d48 <__lshift+0xa4>
 8017d44:	f108 0602 	add.w	r6, r8, #2
 8017d48:	3e01      	subs	r6, #1
 8017d4a:	4638      	mov	r0, r7
 8017d4c:	612e      	str	r6, [r5, #16]
 8017d4e:	4621      	mov	r1, r4
 8017d50:	f7ff fd90 	bl	8017874 <_Bfree>
 8017d54:	4628      	mov	r0, r5
 8017d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8017d5e:	3301      	adds	r3, #1
 8017d60:	e7c5      	b.n	8017cee <__lshift+0x4a>
 8017d62:	3904      	subs	r1, #4
 8017d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d68:	f841 2f04 	str.w	r2, [r1, #4]!
 8017d6c:	459c      	cmp	ip, r3
 8017d6e:	d8f9      	bhi.n	8017d64 <__lshift+0xc0>
 8017d70:	e7ea      	b.n	8017d48 <__lshift+0xa4>
 8017d72:	bf00      	nop
 8017d74:	08019e01 	.word	0x08019e01
 8017d78:	08019e72 	.word	0x08019e72

08017d7c <__mcmp>:
 8017d7c:	690a      	ldr	r2, [r1, #16]
 8017d7e:	4603      	mov	r3, r0
 8017d80:	6900      	ldr	r0, [r0, #16]
 8017d82:	1a80      	subs	r0, r0, r2
 8017d84:	b530      	push	{r4, r5, lr}
 8017d86:	d10e      	bne.n	8017da6 <__mcmp+0x2a>
 8017d88:	3314      	adds	r3, #20
 8017d8a:	3114      	adds	r1, #20
 8017d8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017d90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017d94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017d98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017d9c:	4295      	cmp	r5, r2
 8017d9e:	d003      	beq.n	8017da8 <__mcmp+0x2c>
 8017da0:	d205      	bcs.n	8017dae <__mcmp+0x32>
 8017da2:	f04f 30ff 	mov.w	r0, #4294967295
 8017da6:	bd30      	pop	{r4, r5, pc}
 8017da8:	42a3      	cmp	r3, r4
 8017daa:	d3f3      	bcc.n	8017d94 <__mcmp+0x18>
 8017dac:	e7fb      	b.n	8017da6 <__mcmp+0x2a>
 8017dae:	2001      	movs	r0, #1
 8017db0:	e7f9      	b.n	8017da6 <__mcmp+0x2a>
	...

08017db4 <__mdiff>:
 8017db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017db8:	4689      	mov	r9, r1
 8017dba:	4606      	mov	r6, r0
 8017dbc:	4611      	mov	r1, r2
 8017dbe:	4648      	mov	r0, r9
 8017dc0:	4614      	mov	r4, r2
 8017dc2:	f7ff ffdb 	bl	8017d7c <__mcmp>
 8017dc6:	1e05      	subs	r5, r0, #0
 8017dc8:	d112      	bne.n	8017df0 <__mdiff+0x3c>
 8017dca:	4629      	mov	r1, r5
 8017dcc:	4630      	mov	r0, r6
 8017dce:	f7ff fd11 	bl	80177f4 <_Balloc>
 8017dd2:	4602      	mov	r2, r0
 8017dd4:	b928      	cbnz	r0, 8017de2 <__mdiff+0x2e>
 8017dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8017ed4 <__mdiff+0x120>)
 8017dd8:	f240 2137 	movw	r1, #567	@ 0x237
 8017ddc:	483e      	ldr	r0, [pc, #248]	@ (8017ed8 <__mdiff+0x124>)
 8017dde:	f000 fbf3 	bl	80185c8 <__assert_func>
 8017de2:	2301      	movs	r3, #1
 8017de4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017de8:	4610      	mov	r0, r2
 8017dea:	b003      	add	sp, #12
 8017dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017df0:	bfbc      	itt	lt
 8017df2:	464b      	movlt	r3, r9
 8017df4:	46a1      	movlt	r9, r4
 8017df6:	4630      	mov	r0, r6
 8017df8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017dfc:	bfba      	itte	lt
 8017dfe:	461c      	movlt	r4, r3
 8017e00:	2501      	movlt	r5, #1
 8017e02:	2500      	movge	r5, #0
 8017e04:	f7ff fcf6 	bl	80177f4 <_Balloc>
 8017e08:	4602      	mov	r2, r0
 8017e0a:	b918      	cbnz	r0, 8017e14 <__mdiff+0x60>
 8017e0c:	4b31      	ldr	r3, [pc, #196]	@ (8017ed4 <__mdiff+0x120>)
 8017e0e:	f240 2145 	movw	r1, #581	@ 0x245
 8017e12:	e7e3      	b.n	8017ddc <__mdiff+0x28>
 8017e14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017e18:	6926      	ldr	r6, [r4, #16]
 8017e1a:	60c5      	str	r5, [r0, #12]
 8017e1c:	f109 0310 	add.w	r3, r9, #16
 8017e20:	f109 0514 	add.w	r5, r9, #20
 8017e24:	f104 0e14 	add.w	lr, r4, #20
 8017e28:	f100 0b14 	add.w	fp, r0, #20
 8017e2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017e30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017e34:	9301      	str	r3, [sp, #4]
 8017e36:	46d9      	mov	r9, fp
 8017e38:	f04f 0c00 	mov.w	ip, #0
 8017e3c:	9b01      	ldr	r3, [sp, #4]
 8017e3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017e42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017e46:	9301      	str	r3, [sp, #4]
 8017e48:	fa1f f38a 	uxth.w	r3, sl
 8017e4c:	4619      	mov	r1, r3
 8017e4e:	b283      	uxth	r3, r0
 8017e50:	1acb      	subs	r3, r1, r3
 8017e52:	0c00      	lsrs	r0, r0, #16
 8017e54:	4463      	add	r3, ip
 8017e56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017e5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017e5e:	b29b      	uxth	r3, r3
 8017e60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017e64:	4576      	cmp	r6, lr
 8017e66:	f849 3b04 	str.w	r3, [r9], #4
 8017e6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017e6e:	d8e5      	bhi.n	8017e3c <__mdiff+0x88>
 8017e70:	1b33      	subs	r3, r6, r4
 8017e72:	3b15      	subs	r3, #21
 8017e74:	f023 0303 	bic.w	r3, r3, #3
 8017e78:	3415      	adds	r4, #21
 8017e7a:	3304      	adds	r3, #4
 8017e7c:	42a6      	cmp	r6, r4
 8017e7e:	bf38      	it	cc
 8017e80:	2304      	movcc	r3, #4
 8017e82:	441d      	add	r5, r3
 8017e84:	445b      	add	r3, fp
 8017e86:	461e      	mov	r6, r3
 8017e88:	462c      	mov	r4, r5
 8017e8a:	4544      	cmp	r4, r8
 8017e8c:	d30e      	bcc.n	8017eac <__mdiff+0xf8>
 8017e8e:	f108 0103 	add.w	r1, r8, #3
 8017e92:	1b49      	subs	r1, r1, r5
 8017e94:	f021 0103 	bic.w	r1, r1, #3
 8017e98:	3d03      	subs	r5, #3
 8017e9a:	45a8      	cmp	r8, r5
 8017e9c:	bf38      	it	cc
 8017e9e:	2100      	movcc	r1, #0
 8017ea0:	440b      	add	r3, r1
 8017ea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017ea6:	b191      	cbz	r1, 8017ece <__mdiff+0x11a>
 8017ea8:	6117      	str	r7, [r2, #16]
 8017eaa:	e79d      	b.n	8017de8 <__mdiff+0x34>
 8017eac:	f854 1b04 	ldr.w	r1, [r4], #4
 8017eb0:	46e6      	mov	lr, ip
 8017eb2:	0c08      	lsrs	r0, r1, #16
 8017eb4:	fa1c fc81 	uxtah	ip, ip, r1
 8017eb8:	4471      	add	r1, lr
 8017eba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017ebe:	b289      	uxth	r1, r1
 8017ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017ec4:	f846 1b04 	str.w	r1, [r6], #4
 8017ec8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017ecc:	e7dd      	b.n	8017e8a <__mdiff+0xd6>
 8017ece:	3f01      	subs	r7, #1
 8017ed0:	e7e7      	b.n	8017ea2 <__mdiff+0xee>
 8017ed2:	bf00      	nop
 8017ed4:	08019e01 	.word	0x08019e01
 8017ed8:	08019e72 	.word	0x08019e72

08017edc <__ulp>:
 8017edc:	b082      	sub	sp, #8
 8017ede:	ed8d 0b00 	vstr	d0, [sp]
 8017ee2:	9a01      	ldr	r2, [sp, #4]
 8017ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8017f24 <__ulp+0x48>)
 8017ee6:	4013      	ands	r3, r2
 8017ee8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	dc08      	bgt.n	8017f02 <__ulp+0x26>
 8017ef0:	425b      	negs	r3, r3
 8017ef2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8017ef6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017efa:	da04      	bge.n	8017f06 <__ulp+0x2a>
 8017efc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8017f00:	4113      	asrs	r3, r2
 8017f02:	2200      	movs	r2, #0
 8017f04:	e008      	b.n	8017f18 <__ulp+0x3c>
 8017f06:	f1a2 0314 	sub.w	r3, r2, #20
 8017f0a:	2b1e      	cmp	r3, #30
 8017f0c:	bfda      	itte	le
 8017f0e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8017f12:	40da      	lsrle	r2, r3
 8017f14:	2201      	movgt	r2, #1
 8017f16:	2300      	movs	r3, #0
 8017f18:	4619      	mov	r1, r3
 8017f1a:	4610      	mov	r0, r2
 8017f1c:	ec41 0b10 	vmov	d0, r0, r1
 8017f20:	b002      	add	sp, #8
 8017f22:	4770      	bx	lr
 8017f24:	7ff00000 	.word	0x7ff00000

08017f28 <__b2d>:
 8017f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f2c:	6906      	ldr	r6, [r0, #16]
 8017f2e:	f100 0814 	add.w	r8, r0, #20
 8017f32:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017f36:	1f37      	subs	r7, r6, #4
 8017f38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017f3c:	4610      	mov	r0, r2
 8017f3e:	f7ff fd4b 	bl	80179d8 <__hi0bits>
 8017f42:	f1c0 0320 	rsb	r3, r0, #32
 8017f46:	280a      	cmp	r0, #10
 8017f48:	600b      	str	r3, [r1, #0]
 8017f4a:	491b      	ldr	r1, [pc, #108]	@ (8017fb8 <__b2d+0x90>)
 8017f4c:	dc15      	bgt.n	8017f7a <__b2d+0x52>
 8017f4e:	f1c0 0c0b 	rsb	ip, r0, #11
 8017f52:	fa22 f30c 	lsr.w	r3, r2, ip
 8017f56:	45b8      	cmp	r8, r7
 8017f58:	ea43 0501 	orr.w	r5, r3, r1
 8017f5c:	bf34      	ite	cc
 8017f5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017f62:	2300      	movcs	r3, #0
 8017f64:	3015      	adds	r0, #21
 8017f66:	fa02 f000 	lsl.w	r0, r2, r0
 8017f6a:	fa23 f30c 	lsr.w	r3, r3, ip
 8017f6e:	4303      	orrs	r3, r0
 8017f70:	461c      	mov	r4, r3
 8017f72:	ec45 4b10 	vmov	d0, r4, r5
 8017f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f7a:	45b8      	cmp	r8, r7
 8017f7c:	bf3a      	itte	cc
 8017f7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017f82:	f1a6 0708 	subcc.w	r7, r6, #8
 8017f86:	2300      	movcs	r3, #0
 8017f88:	380b      	subs	r0, #11
 8017f8a:	d012      	beq.n	8017fb2 <__b2d+0x8a>
 8017f8c:	f1c0 0120 	rsb	r1, r0, #32
 8017f90:	fa23 f401 	lsr.w	r4, r3, r1
 8017f94:	4082      	lsls	r2, r0
 8017f96:	4322      	orrs	r2, r4
 8017f98:	4547      	cmp	r7, r8
 8017f9a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8017f9e:	bf8c      	ite	hi
 8017fa0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017fa4:	2200      	movls	r2, #0
 8017fa6:	4083      	lsls	r3, r0
 8017fa8:	40ca      	lsrs	r2, r1
 8017faa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8017fae:	4313      	orrs	r3, r2
 8017fb0:	e7de      	b.n	8017f70 <__b2d+0x48>
 8017fb2:	ea42 0501 	orr.w	r5, r2, r1
 8017fb6:	e7db      	b.n	8017f70 <__b2d+0x48>
 8017fb8:	3ff00000 	.word	0x3ff00000

08017fbc <__d2b>:
 8017fbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017fc0:	460f      	mov	r7, r1
 8017fc2:	2101      	movs	r1, #1
 8017fc4:	ec59 8b10 	vmov	r8, r9, d0
 8017fc8:	4616      	mov	r6, r2
 8017fca:	f7ff fc13 	bl	80177f4 <_Balloc>
 8017fce:	4604      	mov	r4, r0
 8017fd0:	b930      	cbnz	r0, 8017fe0 <__d2b+0x24>
 8017fd2:	4602      	mov	r2, r0
 8017fd4:	4b23      	ldr	r3, [pc, #140]	@ (8018064 <__d2b+0xa8>)
 8017fd6:	4824      	ldr	r0, [pc, #144]	@ (8018068 <__d2b+0xac>)
 8017fd8:	f240 310f 	movw	r1, #783	@ 0x30f
 8017fdc:	f000 faf4 	bl	80185c8 <__assert_func>
 8017fe0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017fe4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017fe8:	b10d      	cbz	r5, 8017fee <__d2b+0x32>
 8017fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017fee:	9301      	str	r3, [sp, #4]
 8017ff0:	f1b8 0300 	subs.w	r3, r8, #0
 8017ff4:	d023      	beq.n	801803e <__d2b+0x82>
 8017ff6:	4668      	mov	r0, sp
 8017ff8:	9300      	str	r3, [sp, #0]
 8017ffa:	f7ff fd0c 	bl	8017a16 <__lo0bits>
 8017ffe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018002:	b1d0      	cbz	r0, 801803a <__d2b+0x7e>
 8018004:	f1c0 0320 	rsb	r3, r0, #32
 8018008:	fa02 f303 	lsl.w	r3, r2, r3
 801800c:	430b      	orrs	r3, r1
 801800e:	40c2      	lsrs	r2, r0
 8018010:	6163      	str	r3, [r4, #20]
 8018012:	9201      	str	r2, [sp, #4]
 8018014:	9b01      	ldr	r3, [sp, #4]
 8018016:	61a3      	str	r3, [r4, #24]
 8018018:	2b00      	cmp	r3, #0
 801801a:	bf0c      	ite	eq
 801801c:	2201      	moveq	r2, #1
 801801e:	2202      	movne	r2, #2
 8018020:	6122      	str	r2, [r4, #16]
 8018022:	b1a5      	cbz	r5, 801804e <__d2b+0x92>
 8018024:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018028:	4405      	add	r5, r0
 801802a:	603d      	str	r5, [r7, #0]
 801802c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018030:	6030      	str	r0, [r6, #0]
 8018032:	4620      	mov	r0, r4
 8018034:	b003      	add	sp, #12
 8018036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801803a:	6161      	str	r1, [r4, #20]
 801803c:	e7ea      	b.n	8018014 <__d2b+0x58>
 801803e:	a801      	add	r0, sp, #4
 8018040:	f7ff fce9 	bl	8017a16 <__lo0bits>
 8018044:	9b01      	ldr	r3, [sp, #4]
 8018046:	6163      	str	r3, [r4, #20]
 8018048:	3020      	adds	r0, #32
 801804a:	2201      	movs	r2, #1
 801804c:	e7e8      	b.n	8018020 <__d2b+0x64>
 801804e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018052:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018056:	6038      	str	r0, [r7, #0]
 8018058:	6918      	ldr	r0, [r3, #16]
 801805a:	f7ff fcbd 	bl	80179d8 <__hi0bits>
 801805e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018062:	e7e5      	b.n	8018030 <__d2b+0x74>
 8018064:	08019e01 	.word	0x08019e01
 8018068:	08019e72 	.word	0x08019e72

0801806c <__ratio>:
 801806c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018070:	4688      	mov	r8, r1
 8018072:	4669      	mov	r1, sp
 8018074:	4681      	mov	r9, r0
 8018076:	f7ff ff57 	bl	8017f28 <__b2d>
 801807a:	a901      	add	r1, sp, #4
 801807c:	4640      	mov	r0, r8
 801807e:	ec55 4b10 	vmov	r4, r5, d0
 8018082:	f7ff ff51 	bl	8017f28 <__b2d>
 8018086:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801808a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801808e:	1ad2      	subs	r2, r2, r3
 8018090:	e9dd 3100 	ldrd	r3, r1, [sp]
 8018094:	1a5b      	subs	r3, r3, r1
 8018096:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801809a:	ec57 6b10 	vmov	r6, r7, d0
 801809e:	2b00      	cmp	r3, #0
 80180a0:	bfd6      	itet	le
 80180a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80180a6:	462a      	movgt	r2, r5
 80180a8:	463a      	movle	r2, r7
 80180aa:	46ab      	mov	fp, r5
 80180ac:	46a2      	mov	sl, r4
 80180ae:	bfce      	itee	gt
 80180b0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80180b4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80180b8:	ee00 3a90 	vmovle	s1, r3
 80180bc:	ec4b ab17 	vmov	d7, sl, fp
 80180c0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80180c4:	b003      	add	sp, #12
 80180c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080180ca <__copybits>:
 80180ca:	3901      	subs	r1, #1
 80180cc:	b570      	push	{r4, r5, r6, lr}
 80180ce:	1149      	asrs	r1, r1, #5
 80180d0:	6914      	ldr	r4, [r2, #16]
 80180d2:	3101      	adds	r1, #1
 80180d4:	f102 0314 	add.w	r3, r2, #20
 80180d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80180dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80180e0:	1f05      	subs	r5, r0, #4
 80180e2:	42a3      	cmp	r3, r4
 80180e4:	d30c      	bcc.n	8018100 <__copybits+0x36>
 80180e6:	1aa3      	subs	r3, r4, r2
 80180e8:	3b11      	subs	r3, #17
 80180ea:	f023 0303 	bic.w	r3, r3, #3
 80180ee:	3211      	adds	r2, #17
 80180f0:	42a2      	cmp	r2, r4
 80180f2:	bf88      	it	hi
 80180f4:	2300      	movhi	r3, #0
 80180f6:	4418      	add	r0, r3
 80180f8:	2300      	movs	r3, #0
 80180fa:	4288      	cmp	r0, r1
 80180fc:	d305      	bcc.n	801810a <__copybits+0x40>
 80180fe:	bd70      	pop	{r4, r5, r6, pc}
 8018100:	f853 6b04 	ldr.w	r6, [r3], #4
 8018104:	f845 6f04 	str.w	r6, [r5, #4]!
 8018108:	e7eb      	b.n	80180e2 <__copybits+0x18>
 801810a:	f840 3b04 	str.w	r3, [r0], #4
 801810e:	e7f4      	b.n	80180fa <__copybits+0x30>

08018110 <__any_on>:
 8018110:	f100 0214 	add.w	r2, r0, #20
 8018114:	6900      	ldr	r0, [r0, #16]
 8018116:	114b      	asrs	r3, r1, #5
 8018118:	4298      	cmp	r0, r3
 801811a:	b510      	push	{r4, lr}
 801811c:	db11      	blt.n	8018142 <__any_on+0x32>
 801811e:	dd0a      	ble.n	8018136 <__any_on+0x26>
 8018120:	f011 011f 	ands.w	r1, r1, #31
 8018124:	d007      	beq.n	8018136 <__any_on+0x26>
 8018126:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801812a:	fa24 f001 	lsr.w	r0, r4, r1
 801812e:	fa00 f101 	lsl.w	r1, r0, r1
 8018132:	428c      	cmp	r4, r1
 8018134:	d10b      	bne.n	801814e <__any_on+0x3e>
 8018136:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801813a:	4293      	cmp	r3, r2
 801813c:	d803      	bhi.n	8018146 <__any_on+0x36>
 801813e:	2000      	movs	r0, #0
 8018140:	bd10      	pop	{r4, pc}
 8018142:	4603      	mov	r3, r0
 8018144:	e7f7      	b.n	8018136 <__any_on+0x26>
 8018146:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801814a:	2900      	cmp	r1, #0
 801814c:	d0f5      	beq.n	801813a <__any_on+0x2a>
 801814e:	2001      	movs	r0, #1
 8018150:	e7f6      	b.n	8018140 <__any_on+0x30>

08018152 <__ascii_wctomb>:
 8018152:	4603      	mov	r3, r0
 8018154:	4608      	mov	r0, r1
 8018156:	b141      	cbz	r1, 801816a <__ascii_wctomb+0x18>
 8018158:	2aff      	cmp	r2, #255	@ 0xff
 801815a:	d904      	bls.n	8018166 <__ascii_wctomb+0x14>
 801815c:	228a      	movs	r2, #138	@ 0x8a
 801815e:	601a      	str	r2, [r3, #0]
 8018160:	f04f 30ff 	mov.w	r0, #4294967295
 8018164:	4770      	bx	lr
 8018166:	700a      	strb	r2, [r1, #0]
 8018168:	2001      	movs	r0, #1
 801816a:	4770      	bx	lr

0801816c <__ssputs_r>:
 801816c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018170:	688e      	ldr	r6, [r1, #8]
 8018172:	461f      	mov	r7, r3
 8018174:	42be      	cmp	r6, r7
 8018176:	680b      	ldr	r3, [r1, #0]
 8018178:	4682      	mov	sl, r0
 801817a:	460c      	mov	r4, r1
 801817c:	4690      	mov	r8, r2
 801817e:	d82d      	bhi.n	80181dc <__ssputs_r+0x70>
 8018180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018184:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018188:	d026      	beq.n	80181d8 <__ssputs_r+0x6c>
 801818a:	6965      	ldr	r5, [r4, #20]
 801818c:	6909      	ldr	r1, [r1, #16]
 801818e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018192:	eba3 0901 	sub.w	r9, r3, r1
 8018196:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801819a:	1c7b      	adds	r3, r7, #1
 801819c:	444b      	add	r3, r9
 801819e:	106d      	asrs	r5, r5, #1
 80181a0:	429d      	cmp	r5, r3
 80181a2:	bf38      	it	cc
 80181a4:	461d      	movcc	r5, r3
 80181a6:	0553      	lsls	r3, r2, #21
 80181a8:	d527      	bpl.n	80181fa <__ssputs_r+0x8e>
 80181aa:	4629      	mov	r1, r5
 80181ac:	f7ff fa84 	bl	80176b8 <_malloc_r>
 80181b0:	4606      	mov	r6, r0
 80181b2:	b360      	cbz	r0, 801820e <__ssputs_r+0xa2>
 80181b4:	6921      	ldr	r1, [r4, #16]
 80181b6:	464a      	mov	r2, r9
 80181b8:	f7fe f8d9 	bl	801636e <memcpy>
 80181bc:	89a3      	ldrh	r3, [r4, #12]
 80181be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80181c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80181c6:	81a3      	strh	r3, [r4, #12]
 80181c8:	6126      	str	r6, [r4, #16]
 80181ca:	6165      	str	r5, [r4, #20]
 80181cc:	444e      	add	r6, r9
 80181ce:	eba5 0509 	sub.w	r5, r5, r9
 80181d2:	6026      	str	r6, [r4, #0]
 80181d4:	60a5      	str	r5, [r4, #8]
 80181d6:	463e      	mov	r6, r7
 80181d8:	42be      	cmp	r6, r7
 80181da:	d900      	bls.n	80181de <__ssputs_r+0x72>
 80181dc:	463e      	mov	r6, r7
 80181de:	6820      	ldr	r0, [r4, #0]
 80181e0:	4632      	mov	r2, r6
 80181e2:	4641      	mov	r1, r8
 80181e4:	f000 f9c6 	bl	8018574 <memmove>
 80181e8:	68a3      	ldr	r3, [r4, #8]
 80181ea:	1b9b      	subs	r3, r3, r6
 80181ec:	60a3      	str	r3, [r4, #8]
 80181ee:	6823      	ldr	r3, [r4, #0]
 80181f0:	4433      	add	r3, r6
 80181f2:	6023      	str	r3, [r4, #0]
 80181f4:	2000      	movs	r0, #0
 80181f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181fa:	462a      	mov	r2, r5
 80181fc:	f000 fa16 	bl	801862c <_realloc_r>
 8018200:	4606      	mov	r6, r0
 8018202:	2800      	cmp	r0, #0
 8018204:	d1e0      	bne.n	80181c8 <__ssputs_r+0x5c>
 8018206:	6921      	ldr	r1, [r4, #16]
 8018208:	4650      	mov	r0, sl
 801820a:	f7fe fea7 	bl	8016f5c <_free_r>
 801820e:	230c      	movs	r3, #12
 8018210:	f8ca 3000 	str.w	r3, [sl]
 8018214:	89a3      	ldrh	r3, [r4, #12]
 8018216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801821a:	81a3      	strh	r3, [r4, #12]
 801821c:	f04f 30ff 	mov.w	r0, #4294967295
 8018220:	e7e9      	b.n	80181f6 <__ssputs_r+0x8a>
	...

08018224 <_svfiprintf_r>:
 8018224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018228:	4698      	mov	r8, r3
 801822a:	898b      	ldrh	r3, [r1, #12]
 801822c:	061b      	lsls	r3, r3, #24
 801822e:	b09d      	sub	sp, #116	@ 0x74
 8018230:	4607      	mov	r7, r0
 8018232:	460d      	mov	r5, r1
 8018234:	4614      	mov	r4, r2
 8018236:	d510      	bpl.n	801825a <_svfiprintf_r+0x36>
 8018238:	690b      	ldr	r3, [r1, #16]
 801823a:	b973      	cbnz	r3, 801825a <_svfiprintf_r+0x36>
 801823c:	2140      	movs	r1, #64	@ 0x40
 801823e:	f7ff fa3b 	bl	80176b8 <_malloc_r>
 8018242:	6028      	str	r0, [r5, #0]
 8018244:	6128      	str	r0, [r5, #16]
 8018246:	b930      	cbnz	r0, 8018256 <_svfiprintf_r+0x32>
 8018248:	230c      	movs	r3, #12
 801824a:	603b      	str	r3, [r7, #0]
 801824c:	f04f 30ff 	mov.w	r0, #4294967295
 8018250:	b01d      	add	sp, #116	@ 0x74
 8018252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018256:	2340      	movs	r3, #64	@ 0x40
 8018258:	616b      	str	r3, [r5, #20]
 801825a:	2300      	movs	r3, #0
 801825c:	9309      	str	r3, [sp, #36]	@ 0x24
 801825e:	2320      	movs	r3, #32
 8018260:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018264:	f8cd 800c 	str.w	r8, [sp, #12]
 8018268:	2330      	movs	r3, #48	@ 0x30
 801826a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018408 <_svfiprintf_r+0x1e4>
 801826e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018272:	f04f 0901 	mov.w	r9, #1
 8018276:	4623      	mov	r3, r4
 8018278:	469a      	mov	sl, r3
 801827a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801827e:	b10a      	cbz	r2, 8018284 <_svfiprintf_r+0x60>
 8018280:	2a25      	cmp	r2, #37	@ 0x25
 8018282:	d1f9      	bne.n	8018278 <_svfiprintf_r+0x54>
 8018284:	ebba 0b04 	subs.w	fp, sl, r4
 8018288:	d00b      	beq.n	80182a2 <_svfiprintf_r+0x7e>
 801828a:	465b      	mov	r3, fp
 801828c:	4622      	mov	r2, r4
 801828e:	4629      	mov	r1, r5
 8018290:	4638      	mov	r0, r7
 8018292:	f7ff ff6b 	bl	801816c <__ssputs_r>
 8018296:	3001      	adds	r0, #1
 8018298:	f000 80a7 	beq.w	80183ea <_svfiprintf_r+0x1c6>
 801829c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801829e:	445a      	add	r2, fp
 80182a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80182a2:	f89a 3000 	ldrb.w	r3, [sl]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	f000 809f 	beq.w	80183ea <_svfiprintf_r+0x1c6>
 80182ac:	2300      	movs	r3, #0
 80182ae:	f04f 32ff 	mov.w	r2, #4294967295
 80182b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80182b6:	f10a 0a01 	add.w	sl, sl, #1
 80182ba:	9304      	str	r3, [sp, #16]
 80182bc:	9307      	str	r3, [sp, #28]
 80182be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80182c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80182c4:	4654      	mov	r4, sl
 80182c6:	2205      	movs	r2, #5
 80182c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182cc:	484e      	ldr	r0, [pc, #312]	@ (8018408 <_svfiprintf_r+0x1e4>)
 80182ce:	f7e8 f82f 	bl	8000330 <memchr>
 80182d2:	9a04      	ldr	r2, [sp, #16]
 80182d4:	b9d8      	cbnz	r0, 801830e <_svfiprintf_r+0xea>
 80182d6:	06d0      	lsls	r0, r2, #27
 80182d8:	bf44      	itt	mi
 80182da:	2320      	movmi	r3, #32
 80182dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80182e0:	0711      	lsls	r1, r2, #28
 80182e2:	bf44      	itt	mi
 80182e4:	232b      	movmi	r3, #43	@ 0x2b
 80182e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80182ea:	f89a 3000 	ldrb.w	r3, [sl]
 80182ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80182f0:	d015      	beq.n	801831e <_svfiprintf_r+0xfa>
 80182f2:	9a07      	ldr	r2, [sp, #28]
 80182f4:	4654      	mov	r4, sl
 80182f6:	2000      	movs	r0, #0
 80182f8:	f04f 0c0a 	mov.w	ip, #10
 80182fc:	4621      	mov	r1, r4
 80182fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018302:	3b30      	subs	r3, #48	@ 0x30
 8018304:	2b09      	cmp	r3, #9
 8018306:	d94b      	bls.n	80183a0 <_svfiprintf_r+0x17c>
 8018308:	b1b0      	cbz	r0, 8018338 <_svfiprintf_r+0x114>
 801830a:	9207      	str	r2, [sp, #28]
 801830c:	e014      	b.n	8018338 <_svfiprintf_r+0x114>
 801830e:	eba0 0308 	sub.w	r3, r0, r8
 8018312:	fa09 f303 	lsl.w	r3, r9, r3
 8018316:	4313      	orrs	r3, r2
 8018318:	9304      	str	r3, [sp, #16]
 801831a:	46a2      	mov	sl, r4
 801831c:	e7d2      	b.n	80182c4 <_svfiprintf_r+0xa0>
 801831e:	9b03      	ldr	r3, [sp, #12]
 8018320:	1d19      	adds	r1, r3, #4
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	9103      	str	r1, [sp, #12]
 8018326:	2b00      	cmp	r3, #0
 8018328:	bfbb      	ittet	lt
 801832a:	425b      	neglt	r3, r3
 801832c:	f042 0202 	orrlt.w	r2, r2, #2
 8018330:	9307      	strge	r3, [sp, #28]
 8018332:	9307      	strlt	r3, [sp, #28]
 8018334:	bfb8      	it	lt
 8018336:	9204      	strlt	r2, [sp, #16]
 8018338:	7823      	ldrb	r3, [r4, #0]
 801833a:	2b2e      	cmp	r3, #46	@ 0x2e
 801833c:	d10a      	bne.n	8018354 <_svfiprintf_r+0x130>
 801833e:	7863      	ldrb	r3, [r4, #1]
 8018340:	2b2a      	cmp	r3, #42	@ 0x2a
 8018342:	d132      	bne.n	80183aa <_svfiprintf_r+0x186>
 8018344:	9b03      	ldr	r3, [sp, #12]
 8018346:	1d1a      	adds	r2, r3, #4
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	9203      	str	r2, [sp, #12]
 801834c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018350:	3402      	adds	r4, #2
 8018352:	9305      	str	r3, [sp, #20]
 8018354:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018418 <_svfiprintf_r+0x1f4>
 8018358:	7821      	ldrb	r1, [r4, #0]
 801835a:	2203      	movs	r2, #3
 801835c:	4650      	mov	r0, sl
 801835e:	f7e7 ffe7 	bl	8000330 <memchr>
 8018362:	b138      	cbz	r0, 8018374 <_svfiprintf_r+0x150>
 8018364:	9b04      	ldr	r3, [sp, #16]
 8018366:	eba0 000a 	sub.w	r0, r0, sl
 801836a:	2240      	movs	r2, #64	@ 0x40
 801836c:	4082      	lsls	r2, r0
 801836e:	4313      	orrs	r3, r2
 8018370:	3401      	adds	r4, #1
 8018372:	9304      	str	r3, [sp, #16]
 8018374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018378:	4824      	ldr	r0, [pc, #144]	@ (801840c <_svfiprintf_r+0x1e8>)
 801837a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801837e:	2206      	movs	r2, #6
 8018380:	f7e7 ffd6 	bl	8000330 <memchr>
 8018384:	2800      	cmp	r0, #0
 8018386:	d036      	beq.n	80183f6 <_svfiprintf_r+0x1d2>
 8018388:	4b21      	ldr	r3, [pc, #132]	@ (8018410 <_svfiprintf_r+0x1ec>)
 801838a:	bb1b      	cbnz	r3, 80183d4 <_svfiprintf_r+0x1b0>
 801838c:	9b03      	ldr	r3, [sp, #12]
 801838e:	3307      	adds	r3, #7
 8018390:	f023 0307 	bic.w	r3, r3, #7
 8018394:	3308      	adds	r3, #8
 8018396:	9303      	str	r3, [sp, #12]
 8018398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801839a:	4433      	add	r3, r6
 801839c:	9309      	str	r3, [sp, #36]	@ 0x24
 801839e:	e76a      	b.n	8018276 <_svfiprintf_r+0x52>
 80183a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80183a4:	460c      	mov	r4, r1
 80183a6:	2001      	movs	r0, #1
 80183a8:	e7a8      	b.n	80182fc <_svfiprintf_r+0xd8>
 80183aa:	2300      	movs	r3, #0
 80183ac:	3401      	adds	r4, #1
 80183ae:	9305      	str	r3, [sp, #20]
 80183b0:	4619      	mov	r1, r3
 80183b2:	f04f 0c0a 	mov.w	ip, #10
 80183b6:	4620      	mov	r0, r4
 80183b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80183bc:	3a30      	subs	r2, #48	@ 0x30
 80183be:	2a09      	cmp	r2, #9
 80183c0:	d903      	bls.n	80183ca <_svfiprintf_r+0x1a6>
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d0c6      	beq.n	8018354 <_svfiprintf_r+0x130>
 80183c6:	9105      	str	r1, [sp, #20]
 80183c8:	e7c4      	b.n	8018354 <_svfiprintf_r+0x130>
 80183ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80183ce:	4604      	mov	r4, r0
 80183d0:	2301      	movs	r3, #1
 80183d2:	e7f0      	b.n	80183b6 <_svfiprintf_r+0x192>
 80183d4:	ab03      	add	r3, sp, #12
 80183d6:	9300      	str	r3, [sp, #0]
 80183d8:	462a      	mov	r2, r5
 80183da:	4b0e      	ldr	r3, [pc, #56]	@ (8018414 <_svfiprintf_r+0x1f0>)
 80183dc:	a904      	add	r1, sp, #16
 80183de:	4638      	mov	r0, r7
 80183e0:	f7fd fa5a 	bl	8015898 <_printf_float>
 80183e4:	1c42      	adds	r2, r0, #1
 80183e6:	4606      	mov	r6, r0
 80183e8:	d1d6      	bne.n	8018398 <_svfiprintf_r+0x174>
 80183ea:	89ab      	ldrh	r3, [r5, #12]
 80183ec:	065b      	lsls	r3, r3, #25
 80183ee:	f53f af2d 	bmi.w	801824c <_svfiprintf_r+0x28>
 80183f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80183f4:	e72c      	b.n	8018250 <_svfiprintf_r+0x2c>
 80183f6:	ab03      	add	r3, sp, #12
 80183f8:	9300      	str	r3, [sp, #0]
 80183fa:	462a      	mov	r2, r5
 80183fc:	4b05      	ldr	r3, [pc, #20]	@ (8018414 <_svfiprintf_r+0x1f0>)
 80183fe:	a904      	add	r1, sp, #16
 8018400:	4638      	mov	r0, r7
 8018402:	f7fd fcd1 	bl	8015da8 <_printf_i>
 8018406:	e7ed      	b.n	80183e4 <_svfiprintf_r+0x1c0>
 8018408:	08019fc8 	.word	0x08019fc8
 801840c:	08019fd2 	.word	0x08019fd2
 8018410:	08015899 	.word	0x08015899
 8018414:	0801816d 	.word	0x0801816d
 8018418:	08019fce 	.word	0x08019fce

0801841c <__sflush_r>:
 801841c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018424:	0716      	lsls	r6, r2, #28
 8018426:	4605      	mov	r5, r0
 8018428:	460c      	mov	r4, r1
 801842a:	d454      	bmi.n	80184d6 <__sflush_r+0xba>
 801842c:	684b      	ldr	r3, [r1, #4]
 801842e:	2b00      	cmp	r3, #0
 8018430:	dc02      	bgt.n	8018438 <__sflush_r+0x1c>
 8018432:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018434:	2b00      	cmp	r3, #0
 8018436:	dd48      	ble.n	80184ca <__sflush_r+0xae>
 8018438:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801843a:	2e00      	cmp	r6, #0
 801843c:	d045      	beq.n	80184ca <__sflush_r+0xae>
 801843e:	2300      	movs	r3, #0
 8018440:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018444:	682f      	ldr	r7, [r5, #0]
 8018446:	6a21      	ldr	r1, [r4, #32]
 8018448:	602b      	str	r3, [r5, #0]
 801844a:	d030      	beq.n	80184ae <__sflush_r+0x92>
 801844c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801844e:	89a3      	ldrh	r3, [r4, #12]
 8018450:	0759      	lsls	r1, r3, #29
 8018452:	d505      	bpl.n	8018460 <__sflush_r+0x44>
 8018454:	6863      	ldr	r3, [r4, #4]
 8018456:	1ad2      	subs	r2, r2, r3
 8018458:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801845a:	b10b      	cbz	r3, 8018460 <__sflush_r+0x44>
 801845c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801845e:	1ad2      	subs	r2, r2, r3
 8018460:	2300      	movs	r3, #0
 8018462:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018464:	6a21      	ldr	r1, [r4, #32]
 8018466:	4628      	mov	r0, r5
 8018468:	47b0      	blx	r6
 801846a:	1c43      	adds	r3, r0, #1
 801846c:	89a3      	ldrh	r3, [r4, #12]
 801846e:	d106      	bne.n	801847e <__sflush_r+0x62>
 8018470:	6829      	ldr	r1, [r5, #0]
 8018472:	291d      	cmp	r1, #29
 8018474:	d82b      	bhi.n	80184ce <__sflush_r+0xb2>
 8018476:	4a2a      	ldr	r2, [pc, #168]	@ (8018520 <__sflush_r+0x104>)
 8018478:	410a      	asrs	r2, r1
 801847a:	07d6      	lsls	r6, r2, #31
 801847c:	d427      	bmi.n	80184ce <__sflush_r+0xb2>
 801847e:	2200      	movs	r2, #0
 8018480:	6062      	str	r2, [r4, #4]
 8018482:	04d9      	lsls	r1, r3, #19
 8018484:	6922      	ldr	r2, [r4, #16]
 8018486:	6022      	str	r2, [r4, #0]
 8018488:	d504      	bpl.n	8018494 <__sflush_r+0x78>
 801848a:	1c42      	adds	r2, r0, #1
 801848c:	d101      	bne.n	8018492 <__sflush_r+0x76>
 801848e:	682b      	ldr	r3, [r5, #0]
 8018490:	b903      	cbnz	r3, 8018494 <__sflush_r+0x78>
 8018492:	6560      	str	r0, [r4, #84]	@ 0x54
 8018494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018496:	602f      	str	r7, [r5, #0]
 8018498:	b1b9      	cbz	r1, 80184ca <__sflush_r+0xae>
 801849a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801849e:	4299      	cmp	r1, r3
 80184a0:	d002      	beq.n	80184a8 <__sflush_r+0x8c>
 80184a2:	4628      	mov	r0, r5
 80184a4:	f7fe fd5a 	bl	8016f5c <_free_r>
 80184a8:	2300      	movs	r3, #0
 80184aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80184ac:	e00d      	b.n	80184ca <__sflush_r+0xae>
 80184ae:	2301      	movs	r3, #1
 80184b0:	4628      	mov	r0, r5
 80184b2:	47b0      	blx	r6
 80184b4:	4602      	mov	r2, r0
 80184b6:	1c50      	adds	r0, r2, #1
 80184b8:	d1c9      	bne.n	801844e <__sflush_r+0x32>
 80184ba:	682b      	ldr	r3, [r5, #0]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d0c6      	beq.n	801844e <__sflush_r+0x32>
 80184c0:	2b1d      	cmp	r3, #29
 80184c2:	d001      	beq.n	80184c8 <__sflush_r+0xac>
 80184c4:	2b16      	cmp	r3, #22
 80184c6:	d11e      	bne.n	8018506 <__sflush_r+0xea>
 80184c8:	602f      	str	r7, [r5, #0]
 80184ca:	2000      	movs	r0, #0
 80184cc:	e022      	b.n	8018514 <__sflush_r+0xf8>
 80184ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80184d2:	b21b      	sxth	r3, r3
 80184d4:	e01b      	b.n	801850e <__sflush_r+0xf2>
 80184d6:	690f      	ldr	r7, [r1, #16]
 80184d8:	2f00      	cmp	r7, #0
 80184da:	d0f6      	beq.n	80184ca <__sflush_r+0xae>
 80184dc:	0793      	lsls	r3, r2, #30
 80184de:	680e      	ldr	r6, [r1, #0]
 80184e0:	bf08      	it	eq
 80184e2:	694b      	ldreq	r3, [r1, #20]
 80184e4:	600f      	str	r7, [r1, #0]
 80184e6:	bf18      	it	ne
 80184e8:	2300      	movne	r3, #0
 80184ea:	eba6 0807 	sub.w	r8, r6, r7
 80184ee:	608b      	str	r3, [r1, #8]
 80184f0:	f1b8 0f00 	cmp.w	r8, #0
 80184f4:	dde9      	ble.n	80184ca <__sflush_r+0xae>
 80184f6:	6a21      	ldr	r1, [r4, #32]
 80184f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80184fa:	4643      	mov	r3, r8
 80184fc:	463a      	mov	r2, r7
 80184fe:	4628      	mov	r0, r5
 8018500:	47b0      	blx	r6
 8018502:	2800      	cmp	r0, #0
 8018504:	dc08      	bgt.n	8018518 <__sflush_r+0xfc>
 8018506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801850a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801850e:	81a3      	strh	r3, [r4, #12]
 8018510:	f04f 30ff 	mov.w	r0, #4294967295
 8018514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018518:	4407      	add	r7, r0
 801851a:	eba8 0800 	sub.w	r8, r8, r0
 801851e:	e7e7      	b.n	80184f0 <__sflush_r+0xd4>
 8018520:	dfbffffe 	.word	0xdfbffffe

08018524 <_fflush_r>:
 8018524:	b538      	push	{r3, r4, r5, lr}
 8018526:	690b      	ldr	r3, [r1, #16]
 8018528:	4605      	mov	r5, r0
 801852a:	460c      	mov	r4, r1
 801852c:	b913      	cbnz	r3, 8018534 <_fflush_r+0x10>
 801852e:	2500      	movs	r5, #0
 8018530:	4628      	mov	r0, r5
 8018532:	bd38      	pop	{r3, r4, r5, pc}
 8018534:	b118      	cbz	r0, 801853e <_fflush_r+0x1a>
 8018536:	6a03      	ldr	r3, [r0, #32]
 8018538:	b90b      	cbnz	r3, 801853e <_fflush_r+0x1a>
 801853a:	f7fd fde1 	bl	8016100 <__sinit>
 801853e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d0f3      	beq.n	801852e <_fflush_r+0xa>
 8018546:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018548:	07d0      	lsls	r0, r2, #31
 801854a:	d404      	bmi.n	8018556 <_fflush_r+0x32>
 801854c:	0599      	lsls	r1, r3, #22
 801854e:	d402      	bmi.n	8018556 <_fflush_r+0x32>
 8018550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018552:	f7fd ff0a 	bl	801636a <__retarget_lock_acquire_recursive>
 8018556:	4628      	mov	r0, r5
 8018558:	4621      	mov	r1, r4
 801855a:	f7ff ff5f 	bl	801841c <__sflush_r>
 801855e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018560:	07da      	lsls	r2, r3, #31
 8018562:	4605      	mov	r5, r0
 8018564:	d4e4      	bmi.n	8018530 <_fflush_r+0xc>
 8018566:	89a3      	ldrh	r3, [r4, #12]
 8018568:	059b      	lsls	r3, r3, #22
 801856a:	d4e1      	bmi.n	8018530 <_fflush_r+0xc>
 801856c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801856e:	f7fd fefd 	bl	801636c <__retarget_lock_release_recursive>
 8018572:	e7dd      	b.n	8018530 <_fflush_r+0xc>

08018574 <memmove>:
 8018574:	4288      	cmp	r0, r1
 8018576:	b510      	push	{r4, lr}
 8018578:	eb01 0402 	add.w	r4, r1, r2
 801857c:	d902      	bls.n	8018584 <memmove+0x10>
 801857e:	4284      	cmp	r4, r0
 8018580:	4623      	mov	r3, r4
 8018582:	d807      	bhi.n	8018594 <memmove+0x20>
 8018584:	1e43      	subs	r3, r0, #1
 8018586:	42a1      	cmp	r1, r4
 8018588:	d008      	beq.n	801859c <memmove+0x28>
 801858a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801858e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018592:	e7f8      	b.n	8018586 <memmove+0x12>
 8018594:	4402      	add	r2, r0
 8018596:	4601      	mov	r1, r0
 8018598:	428a      	cmp	r2, r1
 801859a:	d100      	bne.n	801859e <memmove+0x2a>
 801859c:	bd10      	pop	{r4, pc}
 801859e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80185a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80185a6:	e7f7      	b.n	8018598 <memmove+0x24>

080185a8 <_sbrk_r>:
 80185a8:	b538      	push	{r3, r4, r5, lr}
 80185aa:	4d06      	ldr	r5, [pc, #24]	@ (80185c4 <_sbrk_r+0x1c>)
 80185ac:	2300      	movs	r3, #0
 80185ae:	4604      	mov	r4, r0
 80185b0:	4608      	mov	r0, r1
 80185b2:	602b      	str	r3, [r5, #0]
 80185b4:	f7e9 ff66 	bl	8002484 <_sbrk>
 80185b8:	1c43      	adds	r3, r0, #1
 80185ba:	d102      	bne.n	80185c2 <_sbrk_r+0x1a>
 80185bc:	682b      	ldr	r3, [r5, #0]
 80185be:	b103      	cbz	r3, 80185c2 <_sbrk_r+0x1a>
 80185c0:	6023      	str	r3, [r4, #0]
 80185c2:	bd38      	pop	{r3, r4, r5, pc}
 80185c4:	24006c68 	.word	0x24006c68

080185c8 <__assert_func>:
 80185c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80185ca:	4614      	mov	r4, r2
 80185cc:	461a      	mov	r2, r3
 80185ce:	4b09      	ldr	r3, [pc, #36]	@ (80185f4 <__assert_func+0x2c>)
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	4605      	mov	r5, r0
 80185d4:	68d8      	ldr	r0, [r3, #12]
 80185d6:	b954      	cbnz	r4, 80185ee <__assert_func+0x26>
 80185d8:	4b07      	ldr	r3, [pc, #28]	@ (80185f8 <__assert_func+0x30>)
 80185da:	461c      	mov	r4, r3
 80185dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80185e0:	9100      	str	r1, [sp, #0]
 80185e2:	462b      	mov	r3, r5
 80185e4:	4905      	ldr	r1, [pc, #20]	@ (80185fc <__assert_func+0x34>)
 80185e6:	f000 f84f 	bl	8018688 <fiprintf>
 80185ea:	f000 f85f 	bl	80186ac <abort>
 80185ee:	4b04      	ldr	r3, [pc, #16]	@ (8018600 <__assert_func+0x38>)
 80185f0:	e7f4      	b.n	80185dc <__assert_func+0x14>
 80185f2:	bf00      	nop
 80185f4:	2400027c 	.word	0x2400027c
 80185f8:	0801a014 	.word	0x0801a014
 80185fc:	08019fe6 	.word	0x08019fe6
 8018600:	08019fd9 	.word	0x08019fd9

08018604 <_calloc_r>:
 8018604:	b570      	push	{r4, r5, r6, lr}
 8018606:	fba1 5402 	umull	r5, r4, r1, r2
 801860a:	b93c      	cbnz	r4, 801861c <_calloc_r+0x18>
 801860c:	4629      	mov	r1, r5
 801860e:	f7ff f853 	bl	80176b8 <_malloc_r>
 8018612:	4606      	mov	r6, r0
 8018614:	b928      	cbnz	r0, 8018622 <_calloc_r+0x1e>
 8018616:	2600      	movs	r6, #0
 8018618:	4630      	mov	r0, r6
 801861a:	bd70      	pop	{r4, r5, r6, pc}
 801861c:	220c      	movs	r2, #12
 801861e:	6002      	str	r2, [r0, #0]
 8018620:	e7f9      	b.n	8018616 <_calloc_r+0x12>
 8018622:	462a      	mov	r2, r5
 8018624:	4621      	mov	r1, r4
 8018626:	f7fd fe04 	bl	8016232 <memset>
 801862a:	e7f5      	b.n	8018618 <_calloc_r+0x14>

0801862c <_realloc_r>:
 801862c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018630:	4680      	mov	r8, r0
 8018632:	4615      	mov	r5, r2
 8018634:	460c      	mov	r4, r1
 8018636:	b921      	cbnz	r1, 8018642 <_realloc_r+0x16>
 8018638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801863c:	4611      	mov	r1, r2
 801863e:	f7ff b83b 	b.w	80176b8 <_malloc_r>
 8018642:	b92a      	cbnz	r2, 8018650 <_realloc_r+0x24>
 8018644:	f7fe fc8a 	bl	8016f5c <_free_r>
 8018648:	2400      	movs	r4, #0
 801864a:	4620      	mov	r0, r4
 801864c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018650:	f000 f833 	bl	80186ba <_malloc_usable_size_r>
 8018654:	4285      	cmp	r5, r0
 8018656:	4606      	mov	r6, r0
 8018658:	d802      	bhi.n	8018660 <_realloc_r+0x34>
 801865a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801865e:	d8f4      	bhi.n	801864a <_realloc_r+0x1e>
 8018660:	4629      	mov	r1, r5
 8018662:	4640      	mov	r0, r8
 8018664:	f7ff f828 	bl	80176b8 <_malloc_r>
 8018668:	4607      	mov	r7, r0
 801866a:	2800      	cmp	r0, #0
 801866c:	d0ec      	beq.n	8018648 <_realloc_r+0x1c>
 801866e:	42b5      	cmp	r5, r6
 8018670:	462a      	mov	r2, r5
 8018672:	4621      	mov	r1, r4
 8018674:	bf28      	it	cs
 8018676:	4632      	movcs	r2, r6
 8018678:	f7fd fe79 	bl	801636e <memcpy>
 801867c:	4621      	mov	r1, r4
 801867e:	4640      	mov	r0, r8
 8018680:	f7fe fc6c 	bl	8016f5c <_free_r>
 8018684:	463c      	mov	r4, r7
 8018686:	e7e0      	b.n	801864a <_realloc_r+0x1e>

08018688 <fiprintf>:
 8018688:	b40e      	push	{r1, r2, r3}
 801868a:	b503      	push	{r0, r1, lr}
 801868c:	4601      	mov	r1, r0
 801868e:	ab03      	add	r3, sp, #12
 8018690:	4805      	ldr	r0, [pc, #20]	@ (80186a8 <fiprintf+0x20>)
 8018692:	f853 2b04 	ldr.w	r2, [r3], #4
 8018696:	6800      	ldr	r0, [r0, #0]
 8018698:	9301      	str	r3, [sp, #4]
 801869a:	f000 f83f 	bl	801871c <_vfiprintf_r>
 801869e:	b002      	add	sp, #8
 80186a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80186a4:	b003      	add	sp, #12
 80186a6:	4770      	bx	lr
 80186a8:	2400027c 	.word	0x2400027c

080186ac <abort>:
 80186ac:	b508      	push	{r3, lr}
 80186ae:	2006      	movs	r0, #6
 80186b0:	f000 fa08 	bl	8018ac4 <raise>
 80186b4:	2001      	movs	r0, #1
 80186b6:	f7e9 fe6d 	bl	8002394 <_exit>

080186ba <_malloc_usable_size_r>:
 80186ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80186be:	1f18      	subs	r0, r3, #4
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	bfbc      	itt	lt
 80186c4:	580b      	ldrlt	r3, [r1, r0]
 80186c6:	18c0      	addlt	r0, r0, r3
 80186c8:	4770      	bx	lr

080186ca <__sfputc_r>:
 80186ca:	6893      	ldr	r3, [r2, #8]
 80186cc:	3b01      	subs	r3, #1
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	b410      	push	{r4}
 80186d2:	6093      	str	r3, [r2, #8]
 80186d4:	da08      	bge.n	80186e8 <__sfputc_r+0x1e>
 80186d6:	6994      	ldr	r4, [r2, #24]
 80186d8:	42a3      	cmp	r3, r4
 80186da:	db01      	blt.n	80186e0 <__sfputc_r+0x16>
 80186dc:	290a      	cmp	r1, #10
 80186de:	d103      	bne.n	80186e8 <__sfputc_r+0x1e>
 80186e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186e4:	f000 b932 	b.w	801894c <__swbuf_r>
 80186e8:	6813      	ldr	r3, [r2, #0]
 80186ea:	1c58      	adds	r0, r3, #1
 80186ec:	6010      	str	r0, [r2, #0]
 80186ee:	7019      	strb	r1, [r3, #0]
 80186f0:	4608      	mov	r0, r1
 80186f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186f6:	4770      	bx	lr

080186f8 <__sfputs_r>:
 80186f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186fa:	4606      	mov	r6, r0
 80186fc:	460f      	mov	r7, r1
 80186fe:	4614      	mov	r4, r2
 8018700:	18d5      	adds	r5, r2, r3
 8018702:	42ac      	cmp	r4, r5
 8018704:	d101      	bne.n	801870a <__sfputs_r+0x12>
 8018706:	2000      	movs	r0, #0
 8018708:	e007      	b.n	801871a <__sfputs_r+0x22>
 801870a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801870e:	463a      	mov	r2, r7
 8018710:	4630      	mov	r0, r6
 8018712:	f7ff ffda 	bl	80186ca <__sfputc_r>
 8018716:	1c43      	adds	r3, r0, #1
 8018718:	d1f3      	bne.n	8018702 <__sfputs_r+0xa>
 801871a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801871c <_vfiprintf_r>:
 801871c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018720:	460d      	mov	r5, r1
 8018722:	b09d      	sub	sp, #116	@ 0x74
 8018724:	4614      	mov	r4, r2
 8018726:	4698      	mov	r8, r3
 8018728:	4606      	mov	r6, r0
 801872a:	b118      	cbz	r0, 8018734 <_vfiprintf_r+0x18>
 801872c:	6a03      	ldr	r3, [r0, #32]
 801872e:	b90b      	cbnz	r3, 8018734 <_vfiprintf_r+0x18>
 8018730:	f7fd fce6 	bl	8016100 <__sinit>
 8018734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018736:	07d9      	lsls	r1, r3, #31
 8018738:	d405      	bmi.n	8018746 <_vfiprintf_r+0x2a>
 801873a:	89ab      	ldrh	r3, [r5, #12]
 801873c:	059a      	lsls	r2, r3, #22
 801873e:	d402      	bmi.n	8018746 <_vfiprintf_r+0x2a>
 8018740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018742:	f7fd fe12 	bl	801636a <__retarget_lock_acquire_recursive>
 8018746:	89ab      	ldrh	r3, [r5, #12]
 8018748:	071b      	lsls	r3, r3, #28
 801874a:	d501      	bpl.n	8018750 <_vfiprintf_r+0x34>
 801874c:	692b      	ldr	r3, [r5, #16]
 801874e:	b99b      	cbnz	r3, 8018778 <_vfiprintf_r+0x5c>
 8018750:	4629      	mov	r1, r5
 8018752:	4630      	mov	r0, r6
 8018754:	f000 f938 	bl	80189c8 <__swsetup_r>
 8018758:	b170      	cbz	r0, 8018778 <_vfiprintf_r+0x5c>
 801875a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801875c:	07dc      	lsls	r4, r3, #31
 801875e:	d504      	bpl.n	801876a <_vfiprintf_r+0x4e>
 8018760:	f04f 30ff 	mov.w	r0, #4294967295
 8018764:	b01d      	add	sp, #116	@ 0x74
 8018766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801876a:	89ab      	ldrh	r3, [r5, #12]
 801876c:	0598      	lsls	r0, r3, #22
 801876e:	d4f7      	bmi.n	8018760 <_vfiprintf_r+0x44>
 8018770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018772:	f7fd fdfb 	bl	801636c <__retarget_lock_release_recursive>
 8018776:	e7f3      	b.n	8018760 <_vfiprintf_r+0x44>
 8018778:	2300      	movs	r3, #0
 801877a:	9309      	str	r3, [sp, #36]	@ 0x24
 801877c:	2320      	movs	r3, #32
 801877e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018782:	f8cd 800c 	str.w	r8, [sp, #12]
 8018786:	2330      	movs	r3, #48	@ 0x30
 8018788:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018938 <_vfiprintf_r+0x21c>
 801878c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018790:	f04f 0901 	mov.w	r9, #1
 8018794:	4623      	mov	r3, r4
 8018796:	469a      	mov	sl, r3
 8018798:	f813 2b01 	ldrb.w	r2, [r3], #1
 801879c:	b10a      	cbz	r2, 80187a2 <_vfiprintf_r+0x86>
 801879e:	2a25      	cmp	r2, #37	@ 0x25
 80187a0:	d1f9      	bne.n	8018796 <_vfiprintf_r+0x7a>
 80187a2:	ebba 0b04 	subs.w	fp, sl, r4
 80187a6:	d00b      	beq.n	80187c0 <_vfiprintf_r+0xa4>
 80187a8:	465b      	mov	r3, fp
 80187aa:	4622      	mov	r2, r4
 80187ac:	4629      	mov	r1, r5
 80187ae:	4630      	mov	r0, r6
 80187b0:	f7ff ffa2 	bl	80186f8 <__sfputs_r>
 80187b4:	3001      	adds	r0, #1
 80187b6:	f000 80a7 	beq.w	8018908 <_vfiprintf_r+0x1ec>
 80187ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80187bc:	445a      	add	r2, fp
 80187be:	9209      	str	r2, [sp, #36]	@ 0x24
 80187c0:	f89a 3000 	ldrb.w	r3, [sl]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	f000 809f 	beq.w	8018908 <_vfiprintf_r+0x1ec>
 80187ca:	2300      	movs	r3, #0
 80187cc:	f04f 32ff 	mov.w	r2, #4294967295
 80187d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80187d4:	f10a 0a01 	add.w	sl, sl, #1
 80187d8:	9304      	str	r3, [sp, #16]
 80187da:	9307      	str	r3, [sp, #28]
 80187dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80187e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80187e2:	4654      	mov	r4, sl
 80187e4:	2205      	movs	r2, #5
 80187e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187ea:	4853      	ldr	r0, [pc, #332]	@ (8018938 <_vfiprintf_r+0x21c>)
 80187ec:	f7e7 fda0 	bl	8000330 <memchr>
 80187f0:	9a04      	ldr	r2, [sp, #16]
 80187f2:	b9d8      	cbnz	r0, 801882c <_vfiprintf_r+0x110>
 80187f4:	06d1      	lsls	r1, r2, #27
 80187f6:	bf44      	itt	mi
 80187f8:	2320      	movmi	r3, #32
 80187fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80187fe:	0713      	lsls	r3, r2, #28
 8018800:	bf44      	itt	mi
 8018802:	232b      	movmi	r3, #43	@ 0x2b
 8018804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018808:	f89a 3000 	ldrb.w	r3, [sl]
 801880c:	2b2a      	cmp	r3, #42	@ 0x2a
 801880e:	d015      	beq.n	801883c <_vfiprintf_r+0x120>
 8018810:	9a07      	ldr	r2, [sp, #28]
 8018812:	4654      	mov	r4, sl
 8018814:	2000      	movs	r0, #0
 8018816:	f04f 0c0a 	mov.w	ip, #10
 801881a:	4621      	mov	r1, r4
 801881c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018820:	3b30      	subs	r3, #48	@ 0x30
 8018822:	2b09      	cmp	r3, #9
 8018824:	d94b      	bls.n	80188be <_vfiprintf_r+0x1a2>
 8018826:	b1b0      	cbz	r0, 8018856 <_vfiprintf_r+0x13a>
 8018828:	9207      	str	r2, [sp, #28]
 801882a:	e014      	b.n	8018856 <_vfiprintf_r+0x13a>
 801882c:	eba0 0308 	sub.w	r3, r0, r8
 8018830:	fa09 f303 	lsl.w	r3, r9, r3
 8018834:	4313      	orrs	r3, r2
 8018836:	9304      	str	r3, [sp, #16]
 8018838:	46a2      	mov	sl, r4
 801883a:	e7d2      	b.n	80187e2 <_vfiprintf_r+0xc6>
 801883c:	9b03      	ldr	r3, [sp, #12]
 801883e:	1d19      	adds	r1, r3, #4
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	9103      	str	r1, [sp, #12]
 8018844:	2b00      	cmp	r3, #0
 8018846:	bfbb      	ittet	lt
 8018848:	425b      	neglt	r3, r3
 801884a:	f042 0202 	orrlt.w	r2, r2, #2
 801884e:	9307      	strge	r3, [sp, #28]
 8018850:	9307      	strlt	r3, [sp, #28]
 8018852:	bfb8      	it	lt
 8018854:	9204      	strlt	r2, [sp, #16]
 8018856:	7823      	ldrb	r3, [r4, #0]
 8018858:	2b2e      	cmp	r3, #46	@ 0x2e
 801885a:	d10a      	bne.n	8018872 <_vfiprintf_r+0x156>
 801885c:	7863      	ldrb	r3, [r4, #1]
 801885e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018860:	d132      	bne.n	80188c8 <_vfiprintf_r+0x1ac>
 8018862:	9b03      	ldr	r3, [sp, #12]
 8018864:	1d1a      	adds	r2, r3, #4
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	9203      	str	r2, [sp, #12]
 801886a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801886e:	3402      	adds	r4, #2
 8018870:	9305      	str	r3, [sp, #20]
 8018872:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018948 <_vfiprintf_r+0x22c>
 8018876:	7821      	ldrb	r1, [r4, #0]
 8018878:	2203      	movs	r2, #3
 801887a:	4650      	mov	r0, sl
 801887c:	f7e7 fd58 	bl	8000330 <memchr>
 8018880:	b138      	cbz	r0, 8018892 <_vfiprintf_r+0x176>
 8018882:	9b04      	ldr	r3, [sp, #16]
 8018884:	eba0 000a 	sub.w	r0, r0, sl
 8018888:	2240      	movs	r2, #64	@ 0x40
 801888a:	4082      	lsls	r2, r0
 801888c:	4313      	orrs	r3, r2
 801888e:	3401      	adds	r4, #1
 8018890:	9304      	str	r3, [sp, #16]
 8018892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018896:	4829      	ldr	r0, [pc, #164]	@ (801893c <_vfiprintf_r+0x220>)
 8018898:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801889c:	2206      	movs	r2, #6
 801889e:	f7e7 fd47 	bl	8000330 <memchr>
 80188a2:	2800      	cmp	r0, #0
 80188a4:	d03f      	beq.n	8018926 <_vfiprintf_r+0x20a>
 80188a6:	4b26      	ldr	r3, [pc, #152]	@ (8018940 <_vfiprintf_r+0x224>)
 80188a8:	bb1b      	cbnz	r3, 80188f2 <_vfiprintf_r+0x1d6>
 80188aa:	9b03      	ldr	r3, [sp, #12]
 80188ac:	3307      	adds	r3, #7
 80188ae:	f023 0307 	bic.w	r3, r3, #7
 80188b2:	3308      	adds	r3, #8
 80188b4:	9303      	str	r3, [sp, #12]
 80188b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188b8:	443b      	add	r3, r7
 80188ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80188bc:	e76a      	b.n	8018794 <_vfiprintf_r+0x78>
 80188be:	fb0c 3202 	mla	r2, ip, r2, r3
 80188c2:	460c      	mov	r4, r1
 80188c4:	2001      	movs	r0, #1
 80188c6:	e7a8      	b.n	801881a <_vfiprintf_r+0xfe>
 80188c8:	2300      	movs	r3, #0
 80188ca:	3401      	adds	r4, #1
 80188cc:	9305      	str	r3, [sp, #20]
 80188ce:	4619      	mov	r1, r3
 80188d0:	f04f 0c0a 	mov.w	ip, #10
 80188d4:	4620      	mov	r0, r4
 80188d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80188da:	3a30      	subs	r2, #48	@ 0x30
 80188dc:	2a09      	cmp	r2, #9
 80188de:	d903      	bls.n	80188e8 <_vfiprintf_r+0x1cc>
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d0c6      	beq.n	8018872 <_vfiprintf_r+0x156>
 80188e4:	9105      	str	r1, [sp, #20]
 80188e6:	e7c4      	b.n	8018872 <_vfiprintf_r+0x156>
 80188e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80188ec:	4604      	mov	r4, r0
 80188ee:	2301      	movs	r3, #1
 80188f0:	e7f0      	b.n	80188d4 <_vfiprintf_r+0x1b8>
 80188f2:	ab03      	add	r3, sp, #12
 80188f4:	9300      	str	r3, [sp, #0]
 80188f6:	462a      	mov	r2, r5
 80188f8:	4b12      	ldr	r3, [pc, #72]	@ (8018944 <_vfiprintf_r+0x228>)
 80188fa:	a904      	add	r1, sp, #16
 80188fc:	4630      	mov	r0, r6
 80188fe:	f7fc ffcb 	bl	8015898 <_printf_float>
 8018902:	4607      	mov	r7, r0
 8018904:	1c78      	adds	r0, r7, #1
 8018906:	d1d6      	bne.n	80188b6 <_vfiprintf_r+0x19a>
 8018908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801890a:	07d9      	lsls	r1, r3, #31
 801890c:	d405      	bmi.n	801891a <_vfiprintf_r+0x1fe>
 801890e:	89ab      	ldrh	r3, [r5, #12]
 8018910:	059a      	lsls	r2, r3, #22
 8018912:	d402      	bmi.n	801891a <_vfiprintf_r+0x1fe>
 8018914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018916:	f7fd fd29 	bl	801636c <__retarget_lock_release_recursive>
 801891a:	89ab      	ldrh	r3, [r5, #12]
 801891c:	065b      	lsls	r3, r3, #25
 801891e:	f53f af1f 	bmi.w	8018760 <_vfiprintf_r+0x44>
 8018922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018924:	e71e      	b.n	8018764 <_vfiprintf_r+0x48>
 8018926:	ab03      	add	r3, sp, #12
 8018928:	9300      	str	r3, [sp, #0]
 801892a:	462a      	mov	r2, r5
 801892c:	4b05      	ldr	r3, [pc, #20]	@ (8018944 <_vfiprintf_r+0x228>)
 801892e:	a904      	add	r1, sp, #16
 8018930:	4630      	mov	r0, r6
 8018932:	f7fd fa39 	bl	8015da8 <_printf_i>
 8018936:	e7e4      	b.n	8018902 <_vfiprintf_r+0x1e6>
 8018938:	08019fc8 	.word	0x08019fc8
 801893c:	08019fd2 	.word	0x08019fd2
 8018940:	08015899 	.word	0x08015899
 8018944:	080186f9 	.word	0x080186f9
 8018948:	08019fce 	.word	0x08019fce

0801894c <__swbuf_r>:
 801894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801894e:	460e      	mov	r6, r1
 8018950:	4614      	mov	r4, r2
 8018952:	4605      	mov	r5, r0
 8018954:	b118      	cbz	r0, 801895e <__swbuf_r+0x12>
 8018956:	6a03      	ldr	r3, [r0, #32]
 8018958:	b90b      	cbnz	r3, 801895e <__swbuf_r+0x12>
 801895a:	f7fd fbd1 	bl	8016100 <__sinit>
 801895e:	69a3      	ldr	r3, [r4, #24]
 8018960:	60a3      	str	r3, [r4, #8]
 8018962:	89a3      	ldrh	r3, [r4, #12]
 8018964:	071a      	lsls	r2, r3, #28
 8018966:	d501      	bpl.n	801896c <__swbuf_r+0x20>
 8018968:	6923      	ldr	r3, [r4, #16]
 801896a:	b943      	cbnz	r3, 801897e <__swbuf_r+0x32>
 801896c:	4621      	mov	r1, r4
 801896e:	4628      	mov	r0, r5
 8018970:	f000 f82a 	bl	80189c8 <__swsetup_r>
 8018974:	b118      	cbz	r0, 801897e <__swbuf_r+0x32>
 8018976:	f04f 37ff 	mov.w	r7, #4294967295
 801897a:	4638      	mov	r0, r7
 801897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801897e:	6823      	ldr	r3, [r4, #0]
 8018980:	6922      	ldr	r2, [r4, #16]
 8018982:	1a98      	subs	r0, r3, r2
 8018984:	6963      	ldr	r3, [r4, #20]
 8018986:	b2f6      	uxtb	r6, r6
 8018988:	4283      	cmp	r3, r0
 801898a:	4637      	mov	r7, r6
 801898c:	dc05      	bgt.n	801899a <__swbuf_r+0x4e>
 801898e:	4621      	mov	r1, r4
 8018990:	4628      	mov	r0, r5
 8018992:	f7ff fdc7 	bl	8018524 <_fflush_r>
 8018996:	2800      	cmp	r0, #0
 8018998:	d1ed      	bne.n	8018976 <__swbuf_r+0x2a>
 801899a:	68a3      	ldr	r3, [r4, #8]
 801899c:	3b01      	subs	r3, #1
 801899e:	60a3      	str	r3, [r4, #8]
 80189a0:	6823      	ldr	r3, [r4, #0]
 80189a2:	1c5a      	adds	r2, r3, #1
 80189a4:	6022      	str	r2, [r4, #0]
 80189a6:	701e      	strb	r6, [r3, #0]
 80189a8:	6962      	ldr	r2, [r4, #20]
 80189aa:	1c43      	adds	r3, r0, #1
 80189ac:	429a      	cmp	r2, r3
 80189ae:	d004      	beq.n	80189ba <__swbuf_r+0x6e>
 80189b0:	89a3      	ldrh	r3, [r4, #12]
 80189b2:	07db      	lsls	r3, r3, #31
 80189b4:	d5e1      	bpl.n	801897a <__swbuf_r+0x2e>
 80189b6:	2e0a      	cmp	r6, #10
 80189b8:	d1df      	bne.n	801897a <__swbuf_r+0x2e>
 80189ba:	4621      	mov	r1, r4
 80189bc:	4628      	mov	r0, r5
 80189be:	f7ff fdb1 	bl	8018524 <_fflush_r>
 80189c2:	2800      	cmp	r0, #0
 80189c4:	d0d9      	beq.n	801897a <__swbuf_r+0x2e>
 80189c6:	e7d6      	b.n	8018976 <__swbuf_r+0x2a>

080189c8 <__swsetup_r>:
 80189c8:	b538      	push	{r3, r4, r5, lr}
 80189ca:	4b29      	ldr	r3, [pc, #164]	@ (8018a70 <__swsetup_r+0xa8>)
 80189cc:	4605      	mov	r5, r0
 80189ce:	6818      	ldr	r0, [r3, #0]
 80189d0:	460c      	mov	r4, r1
 80189d2:	b118      	cbz	r0, 80189dc <__swsetup_r+0x14>
 80189d4:	6a03      	ldr	r3, [r0, #32]
 80189d6:	b90b      	cbnz	r3, 80189dc <__swsetup_r+0x14>
 80189d8:	f7fd fb92 	bl	8016100 <__sinit>
 80189dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189e0:	0719      	lsls	r1, r3, #28
 80189e2:	d422      	bmi.n	8018a2a <__swsetup_r+0x62>
 80189e4:	06da      	lsls	r2, r3, #27
 80189e6:	d407      	bmi.n	80189f8 <__swsetup_r+0x30>
 80189e8:	2209      	movs	r2, #9
 80189ea:	602a      	str	r2, [r5, #0]
 80189ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80189f0:	81a3      	strh	r3, [r4, #12]
 80189f2:	f04f 30ff 	mov.w	r0, #4294967295
 80189f6:	e033      	b.n	8018a60 <__swsetup_r+0x98>
 80189f8:	0758      	lsls	r0, r3, #29
 80189fa:	d512      	bpl.n	8018a22 <__swsetup_r+0x5a>
 80189fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80189fe:	b141      	cbz	r1, 8018a12 <__swsetup_r+0x4a>
 8018a00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018a04:	4299      	cmp	r1, r3
 8018a06:	d002      	beq.n	8018a0e <__swsetup_r+0x46>
 8018a08:	4628      	mov	r0, r5
 8018a0a:	f7fe faa7 	bl	8016f5c <_free_r>
 8018a0e:	2300      	movs	r3, #0
 8018a10:	6363      	str	r3, [r4, #52]	@ 0x34
 8018a12:	89a3      	ldrh	r3, [r4, #12]
 8018a14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018a18:	81a3      	strh	r3, [r4, #12]
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	6063      	str	r3, [r4, #4]
 8018a1e:	6923      	ldr	r3, [r4, #16]
 8018a20:	6023      	str	r3, [r4, #0]
 8018a22:	89a3      	ldrh	r3, [r4, #12]
 8018a24:	f043 0308 	orr.w	r3, r3, #8
 8018a28:	81a3      	strh	r3, [r4, #12]
 8018a2a:	6923      	ldr	r3, [r4, #16]
 8018a2c:	b94b      	cbnz	r3, 8018a42 <__swsetup_r+0x7a>
 8018a2e:	89a3      	ldrh	r3, [r4, #12]
 8018a30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018a34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018a38:	d003      	beq.n	8018a42 <__swsetup_r+0x7a>
 8018a3a:	4621      	mov	r1, r4
 8018a3c:	4628      	mov	r0, r5
 8018a3e:	f000 f883 	bl	8018b48 <__smakebuf_r>
 8018a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a46:	f013 0201 	ands.w	r2, r3, #1
 8018a4a:	d00a      	beq.n	8018a62 <__swsetup_r+0x9a>
 8018a4c:	2200      	movs	r2, #0
 8018a4e:	60a2      	str	r2, [r4, #8]
 8018a50:	6962      	ldr	r2, [r4, #20]
 8018a52:	4252      	negs	r2, r2
 8018a54:	61a2      	str	r2, [r4, #24]
 8018a56:	6922      	ldr	r2, [r4, #16]
 8018a58:	b942      	cbnz	r2, 8018a6c <__swsetup_r+0xa4>
 8018a5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018a5e:	d1c5      	bne.n	80189ec <__swsetup_r+0x24>
 8018a60:	bd38      	pop	{r3, r4, r5, pc}
 8018a62:	0799      	lsls	r1, r3, #30
 8018a64:	bf58      	it	pl
 8018a66:	6962      	ldrpl	r2, [r4, #20]
 8018a68:	60a2      	str	r2, [r4, #8]
 8018a6a:	e7f4      	b.n	8018a56 <__swsetup_r+0x8e>
 8018a6c:	2000      	movs	r0, #0
 8018a6e:	e7f7      	b.n	8018a60 <__swsetup_r+0x98>
 8018a70:	2400027c 	.word	0x2400027c

08018a74 <_raise_r>:
 8018a74:	291f      	cmp	r1, #31
 8018a76:	b538      	push	{r3, r4, r5, lr}
 8018a78:	4605      	mov	r5, r0
 8018a7a:	460c      	mov	r4, r1
 8018a7c:	d904      	bls.n	8018a88 <_raise_r+0x14>
 8018a7e:	2316      	movs	r3, #22
 8018a80:	6003      	str	r3, [r0, #0]
 8018a82:	f04f 30ff 	mov.w	r0, #4294967295
 8018a86:	bd38      	pop	{r3, r4, r5, pc}
 8018a88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018a8a:	b112      	cbz	r2, 8018a92 <_raise_r+0x1e>
 8018a8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018a90:	b94b      	cbnz	r3, 8018aa6 <_raise_r+0x32>
 8018a92:	4628      	mov	r0, r5
 8018a94:	f000 f830 	bl	8018af8 <_getpid_r>
 8018a98:	4622      	mov	r2, r4
 8018a9a:	4601      	mov	r1, r0
 8018a9c:	4628      	mov	r0, r5
 8018a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018aa2:	f000 b817 	b.w	8018ad4 <_kill_r>
 8018aa6:	2b01      	cmp	r3, #1
 8018aa8:	d00a      	beq.n	8018ac0 <_raise_r+0x4c>
 8018aaa:	1c59      	adds	r1, r3, #1
 8018aac:	d103      	bne.n	8018ab6 <_raise_r+0x42>
 8018aae:	2316      	movs	r3, #22
 8018ab0:	6003      	str	r3, [r0, #0]
 8018ab2:	2001      	movs	r0, #1
 8018ab4:	e7e7      	b.n	8018a86 <_raise_r+0x12>
 8018ab6:	2100      	movs	r1, #0
 8018ab8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018abc:	4620      	mov	r0, r4
 8018abe:	4798      	blx	r3
 8018ac0:	2000      	movs	r0, #0
 8018ac2:	e7e0      	b.n	8018a86 <_raise_r+0x12>

08018ac4 <raise>:
 8018ac4:	4b02      	ldr	r3, [pc, #8]	@ (8018ad0 <raise+0xc>)
 8018ac6:	4601      	mov	r1, r0
 8018ac8:	6818      	ldr	r0, [r3, #0]
 8018aca:	f7ff bfd3 	b.w	8018a74 <_raise_r>
 8018ace:	bf00      	nop
 8018ad0:	2400027c 	.word	0x2400027c

08018ad4 <_kill_r>:
 8018ad4:	b538      	push	{r3, r4, r5, lr}
 8018ad6:	4d07      	ldr	r5, [pc, #28]	@ (8018af4 <_kill_r+0x20>)
 8018ad8:	2300      	movs	r3, #0
 8018ada:	4604      	mov	r4, r0
 8018adc:	4608      	mov	r0, r1
 8018ade:	4611      	mov	r1, r2
 8018ae0:	602b      	str	r3, [r5, #0]
 8018ae2:	f7e9 fc47 	bl	8002374 <_kill>
 8018ae6:	1c43      	adds	r3, r0, #1
 8018ae8:	d102      	bne.n	8018af0 <_kill_r+0x1c>
 8018aea:	682b      	ldr	r3, [r5, #0]
 8018aec:	b103      	cbz	r3, 8018af0 <_kill_r+0x1c>
 8018aee:	6023      	str	r3, [r4, #0]
 8018af0:	bd38      	pop	{r3, r4, r5, pc}
 8018af2:	bf00      	nop
 8018af4:	24006c68 	.word	0x24006c68

08018af8 <_getpid_r>:
 8018af8:	f7e9 bc34 	b.w	8002364 <_getpid>

08018afc <__swhatbuf_r>:
 8018afc:	b570      	push	{r4, r5, r6, lr}
 8018afe:	460c      	mov	r4, r1
 8018b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b04:	2900      	cmp	r1, #0
 8018b06:	b096      	sub	sp, #88	@ 0x58
 8018b08:	4615      	mov	r5, r2
 8018b0a:	461e      	mov	r6, r3
 8018b0c:	da0d      	bge.n	8018b2a <__swhatbuf_r+0x2e>
 8018b0e:	89a3      	ldrh	r3, [r4, #12]
 8018b10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018b14:	f04f 0100 	mov.w	r1, #0
 8018b18:	bf14      	ite	ne
 8018b1a:	2340      	movne	r3, #64	@ 0x40
 8018b1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018b20:	2000      	movs	r0, #0
 8018b22:	6031      	str	r1, [r6, #0]
 8018b24:	602b      	str	r3, [r5, #0]
 8018b26:	b016      	add	sp, #88	@ 0x58
 8018b28:	bd70      	pop	{r4, r5, r6, pc}
 8018b2a:	466a      	mov	r2, sp
 8018b2c:	f000 f848 	bl	8018bc0 <_fstat_r>
 8018b30:	2800      	cmp	r0, #0
 8018b32:	dbec      	blt.n	8018b0e <__swhatbuf_r+0x12>
 8018b34:	9901      	ldr	r1, [sp, #4]
 8018b36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018b3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018b3e:	4259      	negs	r1, r3
 8018b40:	4159      	adcs	r1, r3
 8018b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018b46:	e7eb      	b.n	8018b20 <__swhatbuf_r+0x24>

08018b48 <__smakebuf_r>:
 8018b48:	898b      	ldrh	r3, [r1, #12]
 8018b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018b4c:	079d      	lsls	r5, r3, #30
 8018b4e:	4606      	mov	r6, r0
 8018b50:	460c      	mov	r4, r1
 8018b52:	d507      	bpl.n	8018b64 <__smakebuf_r+0x1c>
 8018b54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018b58:	6023      	str	r3, [r4, #0]
 8018b5a:	6123      	str	r3, [r4, #16]
 8018b5c:	2301      	movs	r3, #1
 8018b5e:	6163      	str	r3, [r4, #20]
 8018b60:	b003      	add	sp, #12
 8018b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b64:	ab01      	add	r3, sp, #4
 8018b66:	466a      	mov	r2, sp
 8018b68:	f7ff ffc8 	bl	8018afc <__swhatbuf_r>
 8018b6c:	9f00      	ldr	r7, [sp, #0]
 8018b6e:	4605      	mov	r5, r0
 8018b70:	4639      	mov	r1, r7
 8018b72:	4630      	mov	r0, r6
 8018b74:	f7fe fda0 	bl	80176b8 <_malloc_r>
 8018b78:	b948      	cbnz	r0, 8018b8e <__smakebuf_r+0x46>
 8018b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b7e:	059a      	lsls	r2, r3, #22
 8018b80:	d4ee      	bmi.n	8018b60 <__smakebuf_r+0x18>
 8018b82:	f023 0303 	bic.w	r3, r3, #3
 8018b86:	f043 0302 	orr.w	r3, r3, #2
 8018b8a:	81a3      	strh	r3, [r4, #12]
 8018b8c:	e7e2      	b.n	8018b54 <__smakebuf_r+0xc>
 8018b8e:	89a3      	ldrh	r3, [r4, #12]
 8018b90:	6020      	str	r0, [r4, #0]
 8018b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018b96:	81a3      	strh	r3, [r4, #12]
 8018b98:	9b01      	ldr	r3, [sp, #4]
 8018b9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018b9e:	b15b      	cbz	r3, 8018bb8 <__smakebuf_r+0x70>
 8018ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018ba4:	4630      	mov	r0, r6
 8018ba6:	f000 f81d 	bl	8018be4 <_isatty_r>
 8018baa:	b128      	cbz	r0, 8018bb8 <__smakebuf_r+0x70>
 8018bac:	89a3      	ldrh	r3, [r4, #12]
 8018bae:	f023 0303 	bic.w	r3, r3, #3
 8018bb2:	f043 0301 	orr.w	r3, r3, #1
 8018bb6:	81a3      	strh	r3, [r4, #12]
 8018bb8:	89a3      	ldrh	r3, [r4, #12]
 8018bba:	431d      	orrs	r5, r3
 8018bbc:	81a5      	strh	r5, [r4, #12]
 8018bbe:	e7cf      	b.n	8018b60 <__smakebuf_r+0x18>

08018bc0 <_fstat_r>:
 8018bc0:	b538      	push	{r3, r4, r5, lr}
 8018bc2:	4d07      	ldr	r5, [pc, #28]	@ (8018be0 <_fstat_r+0x20>)
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	4604      	mov	r4, r0
 8018bc8:	4608      	mov	r0, r1
 8018bca:	4611      	mov	r1, r2
 8018bcc:	602b      	str	r3, [r5, #0]
 8018bce:	f7e9 fc31 	bl	8002434 <_fstat>
 8018bd2:	1c43      	adds	r3, r0, #1
 8018bd4:	d102      	bne.n	8018bdc <_fstat_r+0x1c>
 8018bd6:	682b      	ldr	r3, [r5, #0]
 8018bd8:	b103      	cbz	r3, 8018bdc <_fstat_r+0x1c>
 8018bda:	6023      	str	r3, [r4, #0]
 8018bdc:	bd38      	pop	{r3, r4, r5, pc}
 8018bde:	bf00      	nop
 8018be0:	24006c68 	.word	0x24006c68

08018be4 <_isatty_r>:
 8018be4:	b538      	push	{r3, r4, r5, lr}
 8018be6:	4d06      	ldr	r5, [pc, #24]	@ (8018c00 <_isatty_r+0x1c>)
 8018be8:	2300      	movs	r3, #0
 8018bea:	4604      	mov	r4, r0
 8018bec:	4608      	mov	r0, r1
 8018bee:	602b      	str	r3, [r5, #0]
 8018bf0:	f7e9 fc30 	bl	8002454 <_isatty>
 8018bf4:	1c43      	adds	r3, r0, #1
 8018bf6:	d102      	bne.n	8018bfe <_isatty_r+0x1a>
 8018bf8:	682b      	ldr	r3, [r5, #0]
 8018bfa:	b103      	cbz	r3, 8018bfe <_isatty_r+0x1a>
 8018bfc:	6023      	str	r3, [r4, #0]
 8018bfe:	bd38      	pop	{r3, r4, r5, pc}
 8018c00:	24006c68 	.word	0x24006c68
 8018c04:	00000000 	.word	0x00000000

08018c08 <sin>:
 8018c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018c0a:	eeb0 7b40 	vmov.f64	d7, d0
 8018c0e:	ee17 3a90 	vmov	r3, s15
 8018c12:	4a21      	ldr	r2, [pc, #132]	@ (8018c98 <sin+0x90>)
 8018c14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018c18:	4293      	cmp	r3, r2
 8018c1a:	d807      	bhi.n	8018c2c <sin+0x24>
 8018c1c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8018c90 <sin+0x88>
 8018c20:	2000      	movs	r0, #0
 8018c22:	b005      	add	sp, #20
 8018c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8018c28:	f000 b986 	b.w	8018f38 <__kernel_sin>
 8018c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8018c9c <sin+0x94>)
 8018c2e:	4293      	cmp	r3, r2
 8018c30:	d904      	bls.n	8018c3c <sin+0x34>
 8018c32:	ee30 0b40 	vsub.f64	d0, d0, d0
 8018c36:	b005      	add	sp, #20
 8018c38:	f85d fb04 	ldr.w	pc, [sp], #4
 8018c3c:	4668      	mov	r0, sp
 8018c3e:	f000 f9d3 	bl	8018fe8 <__ieee754_rem_pio2>
 8018c42:	f000 0003 	and.w	r0, r0, #3
 8018c46:	2801      	cmp	r0, #1
 8018c48:	d00a      	beq.n	8018c60 <sin+0x58>
 8018c4a:	2802      	cmp	r0, #2
 8018c4c:	d00f      	beq.n	8018c6e <sin+0x66>
 8018c4e:	b9c0      	cbnz	r0, 8018c82 <sin+0x7a>
 8018c50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018c54:	ed9d 0b00 	vldr	d0, [sp]
 8018c58:	2001      	movs	r0, #1
 8018c5a:	f000 f96d 	bl	8018f38 <__kernel_sin>
 8018c5e:	e7ea      	b.n	8018c36 <sin+0x2e>
 8018c60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018c64:	ed9d 0b00 	vldr	d0, [sp]
 8018c68:	f000 f8fe 	bl	8018e68 <__kernel_cos>
 8018c6c:	e7e3      	b.n	8018c36 <sin+0x2e>
 8018c6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018c72:	ed9d 0b00 	vldr	d0, [sp]
 8018c76:	2001      	movs	r0, #1
 8018c78:	f000 f95e 	bl	8018f38 <__kernel_sin>
 8018c7c:	eeb1 0b40 	vneg.f64	d0, d0
 8018c80:	e7d9      	b.n	8018c36 <sin+0x2e>
 8018c82:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018c86:	ed9d 0b00 	vldr	d0, [sp]
 8018c8a:	f000 f8ed 	bl	8018e68 <__kernel_cos>
 8018c8e:	e7f5      	b.n	8018c7c <sin+0x74>
	...
 8018c98:	3fe921fb 	.word	0x3fe921fb
 8018c9c:	7fefffff 	.word	0x7fefffff

08018ca0 <sinf_poly>:
 8018ca0:	07cb      	lsls	r3, r1, #31
 8018ca2:	d412      	bmi.n	8018cca <sinf_poly+0x2a>
 8018ca4:	ee21 5b00 	vmul.f64	d5, d1, d0
 8018ca8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8018cac:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8018cb0:	eea6 7b01 	vfma.f64	d7, d6, d1
 8018cb4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8018cb8:	ee21 1b05 	vmul.f64	d1, d1, d5
 8018cbc:	eea6 0b05 	vfma.f64	d0, d6, d5
 8018cc0:	eea7 0b01 	vfma.f64	d0, d7, d1
 8018cc4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018cc8:	4770      	bx	lr
 8018cca:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8018cce:	ee21 5b01 	vmul.f64	d5, d1, d1
 8018cd2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8018cd6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8018cda:	eea1 7b06 	vfma.f64	d7, d1, d6
 8018cde:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8018ce2:	eea1 0b06 	vfma.f64	d0, d1, d6
 8018ce6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8018cea:	ee21 1b05 	vmul.f64	d1, d1, d5
 8018cee:	eea5 0b06 	vfma.f64	d0, d5, d6
 8018cf2:	e7e5      	b.n	8018cc0 <sinf_poly+0x20>
 8018cf4:	0000      	movs	r0, r0
	...

08018cf8 <sinf>:
 8018cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018cfa:	ee10 4a10 	vmov	r4, s0
 8018cfe:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8018d02:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8018d06:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8018d0a:	eef0 7a40 	vmov.f32	s15, s0
 8018d0e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8018d12:	d218      	bcs.n	8018d46 <sinf+0x4e>
 8018d14:	ee26 1b06 	vmul.f64	d1, d6, d6
 8018d18:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8018d1c:	d20a      	bcs.n	8018d34 <sinf+0x3c>
 8018d1e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8018d22:	d103      	bne.n	8018d2c <sinf+0x34>
 8018d24:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8018d28:	ed8d 1a01 	vstr	s2, [sp, #4]
 8018d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8018d30:	b003      	add	sp, #12
 8018d32:	bd30      	pop	{r4, r5, pc}
 8018d34:	483a      	ldr	r0, [pc, #232]	@ (8018e20 <sinf+0x128>)
 8018d36:	eeb0 0b46 	vmov.f64	d0, d6
 8018d3a:	2100      	movs	r1, #0
 8018d3c:	b003      	add	sp, #12
 8018d3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018d42:	f7ff bfad 	b.w	8018ca0 <sinf_poly>
 8018d46:	f240 422e 	movw	r2, #1070	@ 0x42e
 8018d4a:	4293      	cmp	r3, r2
 8018d4c:	d824      	bhi.n	8018d98 <sinf+0xa0>
 8018d4e:	4b34      	ldr	r3, [pc, #208]	@ (8018e20 <sinf+0x128>)
 8018d50:	ed93 7b08 	vldr	d7, [r3, #32]
 8018d54:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018d58:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8018d5c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8018d60:	ee17 1a90 	vmov	r1, s15
 8018d64:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8018d68:	1609      	asrs	r1, r1, #24
 8018d6a:	ee07 1a90 	vmov	s15, r1
 8018d6e:	f001 0203 	and.w	r2, r1, #3
 8018d72:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8018d76:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8018d7a:	ed92 0b00 	vldr	d0, [r2]
 8018d7e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8018d82:	f011 0f02 	tst.w	r1, #2
 8018d86:	eea5 6b47 	vfms.f64	d6, d5, d7
 8018d8a:	bf08      	it	eq
 8018d8c:	4618      	moveq	r0, r3
 8018d8e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8018d92:	ee20 0b06 	vmul.f64	d0, d0, d6
 8018d96:	e7d1      	b.n	8018d3c <sinf+0x44>
 8018d98:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8018d9c:	d237      	bcs.n	8018e0e <sinf+0x116>
 8018d9e:	4921      	ldr	r1, [pc, #132]	@ (8018e24 <sinf+0x12c>)
 8018da0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8018da4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8018da8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8018dac:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8018db0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8018db4:	6a10      	ldr	r0, [r2, #32]
 8018db6:	6912      	ldr	r2, [r2, #16]
 8018db8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8018dbc:	40ab      	lsls	r3, r5
 8018dbe:	fba0 5003 	umull	r5, r0, r0, r3
 8018dc2:	4359      	muls	r1, r3
 8018dc4:	fbe3 0102 	umlal	r0, r1, r3, r2
 8018dc8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8018dcc:	0f9d      	lsrs	r5, r3, #30
 8018dce:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8018dd2:	1ac9      	subs	r1, r1, r3
 8018dd4:	f7e7 fc92 	bl	80006fc <__aeabi_l2d>
 8018dd8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8018ddc:	4b10      	ldr	r3, [pc, #64]	@ (8018e20 <sinf+0x128>)
 8018dde:	f004 0203 	and.w	r2, r4, #3
 8018de2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8018de6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8018e18 <sinf+0x120>
 8018dea:	ed92 0b00 	vldr	d0, [r2]
 8018dee:	ec41 0b17 	vmov	d7, r0, r1
 8018df2:	f014 0f02 	tst.w	r4, #2
 8018df6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018dfa:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8018dfe:	4629      	mov	r1, r5
 8018e00:	bf08      	it	eq
 8018e02:	4618      	moveq	r0, r3
 8018e04:	ee27 1b07 	vmul.f64	d1, d7, d7
 8018e08:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018e0c:	e796      	b.n	8018d3c <sinf+0x44>
 8018e0e:	b003      	add	sp, #12
 8018e10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018e14:	f000 b816 	b.w	8018e44 <__math_invalidf>
 8018e18:	54442d18 	.word	0x54442d18
 8018e1c:	3c1921fb 	.word	0x3c1921fb
 8018e20:	0801a078 	.word	0x0801a078
 8018e24:	0801a018 	.word	0x0801a018

08018e28 <with_errnof>:
 8018e28:	b510      	push	{r4, lr}
 8018e2a:	ed2d 8b02 	vpush	{d8}
 8018e2e:	eeb0 8a40 	vmov.f32	s16, s0
 8018e32:	4604      	mov	r4, r0
 8018e34:	f7fd fa6e 	bl	8016314 <__errno>
 8018e38:	eeb0 0a48 	vmov.f32	s0, s16
 8018e3c:	ecbd 8b02 	vpop	{d8}
 8018e40:	6004      	str	r4, [r0, #0]
 8018e42:	bd10      	pop	{r4, pc}

08018e44 <__math_invalidf>:
 8018e44:	eef0 7a40 	vmov.f32	s15, s0
 8018e48:	ee30 7a40 	vsub.f32	s14, s0, s0
 8018e4c:	eef4 7a67 	vcmp.f32	s15, s15
 8018e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e54:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8018e58:	d602      	bvs.n	8018e60 <__math_invalidf+0x1c>
 8018e5a:	2021      	movs	r0, #33	@ 0x21
 8018e5c:	f7ff bfe4 	b.w	8018e28 <with_errnof>
 8018e60:	4770      	bx	lr
 8018e62:	0000      	movs	r0, r0
 8018e64:	0000      	movs	r0, r0
	...

08018e68 <__kernel_cos>:
 8018e68:	eeb0 5b40 	vmov.f64	d5, d0
 8018e6c:	ee15 1a90 	vmov	r1, s11
 8018e70:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8018e74:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8018e78:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8018e7c:	d204      	bcs.n	8018e88 <__kernel_cos+0x20>
 8018e7e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8018e82:	ee17 3a90 	vmov	r3, s15
 8018e86:	b343      	cbz	r3, 8018eda <__kernel_cos+0x72>
 8018e88:	ee25 6b05 	vmul.f64	d6, d5, d5
 8018e8c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8018e90:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8018f00 <__kernel_cos+0x98>
 8018e94:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8018f08 <__kernel_cos+0xa0>
 8018e98:	eea6 4b07 	vfma.f64	d4, d6, d7
 8018e9c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8018f10 <__kernel_cos+0xa8>
 8018ea0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018ea4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8018f18 <__kernel_cos+0xb0>
 8018ea8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8018eac:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8018f20 <__kernel_cos+0xb8>
 8018eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8018f30 <__kernel_cos+0xc8>)
 8018eb2:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018eb6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8018f28 <__kernel_cos+0xc0>
 8018eba:	4299      	cmp	r1, r3
 8018ebc:	eea7 4b06 	vfma.f64	d4, d7, d6
 8018ec0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8018ec4:	ee24 4b06 	vmul.f64	d4, d4, d6
 8018ec8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018ecc:	eea6 1b04 	vfma.f64	d1, d6, d4
 8018ed0:	d804      	bhi.n	8018edc <__kernel_cos+0x74>
 8018ed2:	ee37 7b41 	vsub.f64	d7, d7, d1
 8018ed6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8018eda:	4770      	bx	lr
 8018edc:	4b15      	ldr	r3, [pc, #84]	@ (8018f34 <__kernel_cos+0xcc>)
 8018ede:	4299      	cmp	r1, r3
 8018ee0:	d809      	bhi.n	8018ef6 <__kernel_cos+0x8e>
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8018ee8:	ec43 2b16 	vmov	d6, r2, r3
 8018eec:	ee30 0b46 	vsub.f64	d0, d0, d6
 8018ef0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018ef4:	e7ed      	b.n	8018ed2 <__kernel_cos+0x6a>
 8018ef6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8018efa:	e7f7      	b.n	8018eec <__kernel_cos+0x84>
 8018efc:	f3af 8000 	nop.w
 8018f00:	be8838d4 	.word	0xbe8838d4
 8018f04:	bda8fae9 	.word	0xbda8fae9
 8018f08:	bdb4b1c4 	.word	0xbdb4b1c4
 8018f0c:	3e21ee9e 	.word	0x3e21ee9e
 8018f10:	809c52ad 	.word	0x809c52ad
 8018f14:	be927e4f 	.word	0xbe927e4f
 8018f18:	19cb1590 	.word	0x19cb1590
 8018f1c:	3efa01a0 	.word	0x3efa01a0
 8018f20:	16c15177 	.word	0x16c15177
 8018f24:	bf56c16c 	.word	0xbf56c16c
 8018f28:	5555554c 	.word	0x5555554c
 8018f2c:	3fa55555 	.word	0x3fa55555
 8018f30:	3fd33332 	.word	0x3fd33332
 8018f34:	3fe90000 	.word	0x3fe90000

08018f38 <__kernel_sin>:
 8018f38:	ee10 3a90 	vmov	r3, s1
 8018f3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018f40:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8018f44:	d204      	bcs.n	8018f50 <__kernel_sin+0x18>
 8018f46:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8018f4a:	ee17 3a90 	vmov	r3, s15
 8018f4e:	b35b      	cbz	r3, 8018fa8 <__kernel_sin+0x70>
 8018f50:	ee20 6b00 	vmul.f64	d6, d0, d0
 8018f54:	ee20 5b06 	vmul.f64	d5, d0, d6
 8018f58:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8018fb0 <__kernel_sin+0x78>
 8018f5c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8018fb8 <__kernel_sin+0x80>
 8018f60:	eea6 4b07 	vfma.f64	d4, d6, d7
 8018f64:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8018fc0 <__kernel_sin+0x88>
 8018f68:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018f6c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8018fc8 <__kernel_sin+0x90>
 8018f70:	eea7 4b06 	vfma.f64	d4, d7, d6
 8018f74:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8018fd0 <__kernel_sin+0x98>
 8018f78:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018f7c:	b930      	cbnz	r0, 8018f8c <__kernel_sin+0x54>
 8018f7e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8018fd8 <__kernel_sin+0xa0>
 8018f82:	eea6 4b07 	vfma.f64	d4, d6, d7
 8018f86:	eea4 0b05 	vfma.f64	d0, d4, d5
 8018f8a:	4770      	bx	lr
 8018f8c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8018f90:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8018f94:	eea1 7b04 	vfma.f64	d7, d1, d4
 8018f98:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8018f9c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8018fe0 <__kernel_sin+0xa8>
 8018fa0:	eea5 1b07 	vfma.f64	d1, d5, d7
 8018fa4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8018fa8:	4770      	bx	lr
 8018faa:	bf00      	nop
 8018fac:	f3af 8000 	nop.w
 8018fb0:	5acfd57c 	.word	0x5acfd57c
 8018fb4:	3de5d93a 	.word	0x3de5d93a
 8018fb8:	8a2b9ceb 	.word	0x8a2b9ceb
 8018fbc:	be5ae5e6 	.word	0xbe5ae5e6
 8018fc0:	57b1fe7d 	.word	0x57b1fe7d
 8018fc4:	3ec71de3 	.word	0x3ec71de3
 8018fc8:	19c161d5 	.word	0x19c161d5
 8018fcc:	bf2a01a0 	.word	0xbf2a01a0
 8018fd0:	1110f8a6 	.word	0x1110f8a6
 8018fd4:	3f811111 	.word	0x3f811111
 8018fd8:	55555549 	.word	0x55555549
 8018fdc:	bfc55555 	.word	0xbfc55555
 8018fe0:	55555549 	.word	0x55555549
 8018fe4:	3fc55555 	.word	0x3fc55555

08018fe8 <__ieee754_rem_pio2>:
 8018fe8:	b570      	push	{r4, r5, r6, lr}
 8018fea:	eeb0 7b40 	vmov.f64	d7, d0
 8018fee:	ee17 5a90 	vmov	r5, s15
 8018ff2:	4b99      	ldr	r3, [pc, #612]	@ (8019258 <__ieee754_rem_pio2+0x270>)
 8018ff4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8018ff8:	429e      	cmp	r6, r3
 8018ffa:	b088      	sub	sp, #32
 8018ffc:	4604      	mov	r4, r0
 8018ffe:	d807      	bhi.n	8019010 <__ieee754_rem_pio2+0x28>
 8019000:	2200      	movs	r2, #0
 8019002:	2300      	movs	r3, #0
 8019004:	ed84 0b00 	vstr	d0, [r4]
 8019008:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801900c:	2000      	movs	r0, #0
 801900e:	e01b      	b.n	8019048 <__ieee754_rem_pio2+0x60>
 8019010:	4b92      	ldr	r3, [pc, #584]	@ (801925c <__ieee754_rem_pio2+0x274>)
 8019012:	429e      	cmp	r6, r3
 8019014:	d83b      	bhi.n	801908e <__ieee754_rem_pio2+0xa6>
 8019016:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801901a:	2d00      	cmp	r5, #0
 801901c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8019218 <__ieee754_rem_pio2+0x230>
 8019020:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8019024:	dd19      	ble.n	801905a <__ieee754_rem_pio2+0x72>
 8019026:	ee30 7b46 	vsub.f64	d7, d0, d6
 801902a:	429e      	cmp	r6, r3
 801902c:	d00e      	beq.n	801904c <__ieee754_rem_pio2+0x64>
 801902e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8019220 <__ieee754_rem_pio2+0x238>
 8019032:	ee37 6b45 	vsub.f64	d6, d7, d5
 8019036:	ee37 7b46 	vsub.f64	d7, d7, d6
 801903a:	ed84 6b00 	vstr	d6, [r4]
 801903e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019042:	ed84 7b02 	vstr	d7, [r4, #8]
 8019046:	2001      	movs	r0, #1
 8019048:	b008      	add	sp, #32
 801904a:	bd70      	pop	{r4, r5, r6, pc}
 801904c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8019228 <__ieee754_rem_pio2+0x240>
 8019050:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8019230 <__ieee754_rem_pio2+0x248>
 8019054:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019058:	e7eb      	b.n	8019032 <__ieee754_rem_pio2+0x4a>
 801905a:	429e      	cmp	r6, r3
 801905c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8019060:	d00e      	beq.n	8019080 <__ieee754_rem_pio2+0x98>
 8019062:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8019220 <__ieee754_rem_pio2+0x238>
 8019066:	ee37 6b05 	vadd.f64	d6, d7, d5
 801906a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801906e:	ed84 6b00 	vstr	d6, [r4]
 8019072:	ee37 7b05 	vadd.f64	d7, d7, d5
 8019076:	f04f 30ff 	mov.w	r0, #4294967295
 801907a:	ed84 7b02 	vstr	d7, [r4, #8]
 801907e:	e7e3      	b.n	8019048 <__ieee754_rem_pio2+0x60>
 8019080:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8019228 <__ieee754_rem_pio2+0x240>
 8019084:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8019230 <__ieee754_rem_pio2+0x248>
 8019088:	ee37 7b06 	vadd.f64	d7, d7, d6
 801908c:	e7eb      	b.n	8019066 <__ieee754_rem_pio2+0x7e>
 801908e:	4b74      	ldr	r3, [pc, #464]	@ (8019260 <__ieee754_rem_pio2+0x278>)
 8019090:	429e      	cmp	r6, r3
 8019092:	d870      	bhi.n	8019176 <__ieee754_rem_pio2+0x18e>
 8019094:	f000 f8ec 	bl	8019270 <fabs>
 8019098:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801909c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8019238 <__ieee754_rem_pio2+0x250>
 80190a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80190a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80190a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80190ac:	ee17 0a90 	vmov	r0, s15
 80190b0:	eeb1 4b45 	vneg.f64	d4, d5
 80190b4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8019218 <__ieee754_rem_pio2+0x230>
 80190b8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80190bc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8019220 <__ieee754_rem_pio2+0x238>
 80190c0:	281f      	cmp	r0, #31
 80190c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80190c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80190ca:	dc05      	bgt.n	80190d8 <__ieee754_rem_pio2+0xf0>
 80190cc:	4b65      	ldr	r3, [pc, #404]	@ (8019264 <__ieee754_rem_pio2+0x27c>)
 80190ce:	1e42      	subs	r2, r0, #1
 80190d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80190d4:	42b3      	cmp	r3, r6
 80190d6:	d109      	bne.n	80190ec <__ieee754_rem_pio2+0x104>
 80190d8:	ee16 3a90 	vmov	r3, s13
 80190dc:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80190e0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80190e4:	2b10      	cmp	r3, #16
 80190e6:	ea4f 5226 	mov.w	r2, r6, asr #20
 80190ea:	dc02      	bgt.n	80190f2 <__ieee754_rem_pio2+0x10a>
 80190ec:	ed84 6b00 	vstr	d6, [r4]
 80190f0:	e01a      	b.n	8019128 <__ieee754_rem_pio2+0x140>
 80190f2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8019228 <__ieee754_rem_pio2+0x240>
 80190f6:	eeb0 6b40 	vmov.f64	d6, d0
 80190fa:	eea4 6b03 	vfma.f64	d6, d4, d3
 80190fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8019102:	eea4 7b03 	vfma.f64	d7, d4, d3
 8019106:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8019230 <__ieee754_rem_pio2+0x248>
 801910a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801910e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8019112:	ee13 3a90 	vmov	r3, s7
 8019116:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801911a:	1ad3      	subs	r3, r2, r3
 801911c:	2b31      	cmp	r3, #49	@ 0x31
 801911e:	dc17      	bgt.n	8019150 <__ieee754_rem_pio2+0x168>
 8019120:	eeb0 0b46 	vmov.f64	d0, d6
 8019124:	ed84 3b00 	vstr	d3, [r4]
 8019128:	ed94 6b00 	vldr	d6, [r4]
 801912c:	2d00      	cmp	r5, #0
 801912e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8019132:	ee30 0b47 	vsub.f64	d0, d0, d7
 8019136:	ed84 0b02 	vstr	d0, [r4, #8]
 801913a:	da85      	bge.n	8019048 <__ieee754_rem_pio2+0x60>
 801913c:	eeb1 6b46 	vneg.f64	d6, d6
 8019140:	eeb1 0b40 	vneg.f64	d0, d0
 8019144:	ed84 6b00 	vstr	d6, [r4]
 8019148:	ed84 0b02 	vstr	d0, [r4, #8]
 801914c:	4240      	negs	r0, r0
 801914e:	e77b      	b.n	8019048 <__ieee754_rem_pio2+0x60>
 8019150:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8019240 <__ieee754_rem_pio2+0x258>
 8019154:	eeb0 0b46 	vmov.f64	d0, d6
 8019158:	eea4 0b07 	vfma.f64	d0, d4, d7
 801915c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8019160:	eea4 6b07 	vfma.f64	d6, d4, d7
 8019164:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8019248 <__ieee754_rem_pio2+0x260>
 8019168:	eeb0 7b46 	vmov.f64	d7, d6
 801916c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8019170:	ee30 6b47 	vsub.f64	d6, d0, d7
 8019174:	e7ba      	b.n	80190ec <__ieee754_rem_pio2+0x104>
 8019176:	4b3c      	ldr	r3, [pc, #240]	@ (8019268 <__ieee754_rem_pio2+0x280>)
 8019178:	429e      	cmp	r6, r3
 801917a:	d906      	bls.n	801918a <__ieee754_rem_pio2+0x1a2>
 801917c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8019180:	ed80 7b02 	vstr	d7, [r0, #8]
 8019184:	ed80 7b00 	vstr	d7, [r0]
 8019188:	e740      	b.n	801900c <__ieee754_rem_pio2+0x24>
 801918a:	ee10 3a10 	vmov	r3, s0
 801918e:	1532      	asrs	r2, r6, #20
 8019190:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8019194:	4618      	mov	r0, r3
 8019196:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801919a:	ec41 0b17 	vmov	d7, r0, r1
 801919e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80191a2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8019250 <__ieee754_rem_pio2+0x268>
 80191a6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80191aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80191ae:	ed8d 6b02 	vstr	d6, [sp, #8]
 80191b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80191b6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80191ba:	a808      	add	r0, sp, #32
 80191bc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80191c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80191c4:	ed8d 6b04 	vstr	d6, [sp, #16]
 80191c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80191cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80191d0:	2103      	movs	r1, #3
 80191d2:	ed30 7b02 	vldmdb	r0!, {d7}
 80191d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80191da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191de:	460b      	mov	r3, r1
 80191e0:	f101 31ff 	add.w	r1, r1, #4294967295
 80191e4:	d0f5      	beq.n	80191d2 <__ieee754_rem_pio2+0x1ea>
 80191e6:	4921      	ldr	r1, [pc, #132]	@ (801926c <__ieee754_rem_pio2+0x284>)
 80191e8:	9101      	str	r1, [sp, #4]
 80191ea:	2102      	movs	r1, #2
 80191ec:	9100      	str	r1, [sp, #0]
 80191ee:	a802      	add	r0, sp, #8
 80191f0:	4621      	mov	r1, r4
 80191f2:	f000 f845 	bl	8019280 <__kernel_rem_pio2>
 80191f6:	2d00      	cmp	r5, #0
 80191f8:	f6bf af26 	bge.w	8019048 <__ieee754_rem_pio2+0x60>
 80191fc:	ed94 7b00 	vldr	d7, [r4]
 8019200:	eeb1 7b47 	vneg.f64	d7, d7
 8019204:	ed84 7b00 	vstr	d7, [r4]
 8019208:	ed94 7b02 	vldr	d7, [r4, #8]
 801920c:	eeb1 7b47 	vneg.f64	d7, d7
 8019210:	ed84 7b02 	vstr	d7, [r4, #8]
 8019214:	e79a      	b.n	801914c <__ieee754_rem_pio2+0x164>
 8019216:	bf00      	nop
 8019218:	54400000 	.word	0x54400000
 801921c:	3ff921fb 	.word	0x3ff921fb
 8019220:	1a626331 	.word	0x1a626331
 8019224:	3dd0b461 	.word	0x3dd0b461
 8019228:	1a600000 	.word	0x1a600000
 801922c:	3dd0b461 	.word	0x3dd0b461
 8019230:	2e037073 	.word	0x2e037073
 8019234:	3ba3198a 	.word	0x3ba3198a
 8019238:	6dc9c883 	.word	0x6dc9c883
 801923c:	3fe45f30 	.word	0x3fe45f30
 8019240:	2e000000 	.word	0x2e000000
 8019244:	3ba3198a 	.word	0x3ba3198a
 8019248:	252049c1 	.word	0x252049c1
 801924c:	397b839a 	.word	0x397b839a
 8019250:	00000000 	.word	0x00000000
 8019254:	41700000 	.word	0x41700000
 8019258:	3fe921fb 	.word	0x3fe921fb
 801925c:	4002d97b 	.word	0x4002d97b
 8019260:	413921fb 	.word	0x413921fb
 8019264:	0801a158 	.word	0x0801a158
 8019268:	7fefffff 	.word	0x7fefffff
 801926c:	0801a1d8 	.word	0x0801a1d8

08019270 <fabs>:
 8019270:	ec51 0b10 	vmov	r0, r1, d0
 8019274:	4602      	mov	r2, r0
 8019276:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801927a:	ec43 2b10 	vmov	d0, r2, r3
 801927e:	4770      	bx	lr

08019280 <__kernel_rem_pio2>:
 8019280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019284:	ed2d 8b06 	vpush	{d8-d10}
 8019288:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801928c:	469b      	mov	fp, r3
 801928e:	9001      	str	r0, [sp, #4]
 8019290:	4bbb      	ldr	r3, [pc, #748]	@ (8019580 <__kernel_rem_pio2+0x300>)
 8019292:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8019294:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8019298:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801929c:	f112 0f14 	cmn.w	r2, #20
 80192a0:	bfa8      	it	ge
 80192a2:	1ed3      	subge	r3, r2, #3
 80192a4:	f10b 3aff 	add.w	sl, fp, #4294967295
 80192a8:	bfb8      	it	lt
 80192aa:	2300      	movlt	r3, #0
 80192ac:	f06f 0517 	mvn.w	r5, #23
 80192b0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8019568 <__kernel_rem_pio2+0x2e8>
 80192b4:	bfa4      	itt	ge
 80192b6:	2018      	movge	r0, #24
 80192b8:	fb93 f3f0 	sdivge	r3, r3, r0
 80192bc:	fb03 5505 	mla	r5, r3, r5, r5
 80192c0:	eba3 040a 	sub.w	r4, r3, sl
 80192c4:	4415      	add	r5, r2
 80192c6:	460f      	mov	r7, r1
 80192c8:	eb09 060a 	add.w	r6, r9, sl
 80192cc:	a81a      	add	r0, sp, #104	@ 0x68
 80192ce:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 80192d2:	2200      	movs	r2, #0
 80192d4:	42b2      	cmp	r2, r6
 80192d6:	dd0e      	ble.n	80192f6 <__kernel_rem_pio2+0x76>
 80192d8:	aa1a      	add	r2, sp, #104	@ 0x68
 80192da:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80192de:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 80192e2:	2600      	movs	r6, #0
 80192e4:	454e      	cmp	r6, r9
 80192e6:	dc25      	bgt.n	8019334 <__kernel_rem_pio2+0xb4>
 80192e8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8019568 <__kernel_rem_pio2+0x2e8>
 80192ec:	f8dd c004 	ldr.w	ip, [sp, #4]
 80192f0:	4614      	mov	r4, r2
 80192f2:	2000      	movs	r0, #0
 80192f4:	e015      	b.n	8019322 <__kernel_rem_pio2+0xa2>
 80192f6:	42d4      	cmn	r4, r2
 80192f8:	d409      	bmi.n	801930e <__kernel_rem_pio2+0x8e>
 80192fa:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 80192fe:	ee07 1a90 	vmov	s15, r1
 8019302:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019306:	eca0 7b02 	vstmia	r0!, {d7}
 801930a:	3201      	adds	r2, #1
 801930c:	e7e2      	b.n	80192d4 <__kernel_rem_pio2+0x54>
 801930e:	eeb0 7b46 	vmov.f64	d7, d6
 8019312:	e7f8      	b.n	8019306 <__kernel_rem_pio2+0x86>
 8019314:	ecbc 5b02 	vldmia	ip!, {d5}
 8019318:	ed94 6b00 	vldr	d6, [r4]
 801931c:	3001      	adds	r0, #1
 801931e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019322:	4550      	cmp	r0, sl
 8019324:	f1a4 0408 	sub.w	r4, r4, #8
 8019328:	ddf4      	ble.n	8019314 <__kernel_rem_pio2+0x94>
 801932a:	ecae 7b02 	vstmia	lr!, {d7}
 801932e:	3601      	adds	r6, #1
 8019330:	3208      	adds	r2, #8
 8019332:	e7d7      	b.n	80192e4 <__kernel_rem_pio2+0x64>
 8019334:	aa06      	add	r2, sp, #24
 8019336:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8019570 <__kernel_rem_pio2+0x2f0>
 801933a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8019578 <__kernel_rem_pio2+0x2f8>
 801933e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8019342:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8019346:	9203      	str	r2, [sp, #12]
 8019348:	9302      	str	r3, [sp, #8]
 801934a:	464c      	mov	r4, r9
 801934c:	00e3      	lsls	r3, r4, #3
 801934e:	9304      	str	r3, [sp, #16]
 8019350:	ab92      	add	r3, sp, #584	@ 0x248
 8019352:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019356:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801935a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801935c:	ab06      	add	r3, sp, #24
 801935e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8019362:	461e      	mov	r6, r3
 8019364:	4620      	mov	r0, r4
 8019366:	2800      	cmp	r0, #0
 8019368:	f1a2 0208 	sub.w	r2, r2, #8
 801936c:	dc4a      	bgt.n	8019404 <__kernel_rem_pio2+0x184>
 801936e:	4628      	mov	r0, r5
 8019370:	9305      	str	r3, [sp, #20]
 8019372:	f000 fa01 	bl	8019778 <scalbn>
 8019376:	eeb0 8b40 	vmov.f64	d8, d0
 801937a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801937e:	ee28 0b00 	vmul.f64	d0, d8, d0
 8019382:	f000 fa79 	bl	8019878 <floor>
 8019386:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801938a:	eea0 8b47 	vfms.f64	d8, d0, d7
 801938e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8019392:	2d00      	cmp	r5, #0
 8019394:	ee17 8a90 	vmov	r8, s15
 8019398:	9b05      	ldr	r3, [sp, #20]
 801939a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801939e:	ee38 8b47 	vsub.f64	d8, d8, d7
 80193a2:	dd41      	ble.n	8019428 <__kernel_rem_pio2+0x1a8>
 80193a4:	1e60      	subs	r0, r4, #1
 80193a6:	aa06      	add	r2, sp, #24
 80193a8:	f1c5 0c18 	rsb	ip, r5, #24
 80193ac:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80193b0:	fa46 f20c 	asr.w	r2, r6, ip
 80193b4:	4490      	add	r8, r2
 80193b6:	fa02 f20c 	lsl.w	r2, r2, ip
 80193ba:	1ab6      	subs	r6, r6, r2
 80193bc:	aa06      	add	r2, sp, #24
 80193be:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 80193c2:	f1c5 0217 	rsb	r2, r5, #23
 80193c6:	4116      	asrs	r6, r2
 80193c8:	2e00      	cmp	r6, #0
 80193ca:	dd3c      	ble.n	8019446 <__kernel_rem_pio2+0x1c6>
 80193cc:	f04f 0c00 	mov.w	ip, #0
 80193d0:	f108 0801 	add.w	r8, r8, #1
 80193d4:	4660      	mov	r0, ip
 80193d6:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 80193da:	4564      	cmp	r4, ip
 80193dc:	dc66      	bgt.n	80194ac <__kernel_rem_pio2+0x22c>
 80193de:	2d00      	cmp	r5, #0
 80193e0:	dd03      	ble.n	80193ea <__kernel_rem_pio2+0x16a>
 80193e2:	2d01      	cmp	r5, #1
 80193e4:	d072      	beq.n	80194cc <__kernel_rem_pio2+0x24c>
 80193e6:	2d02      	cmp	r5, #2
 80193e8:	d07a      	beq.n	80194e0 <__kernel_rem_pio2+0x260>
 80193ea:	2e02      	cmp	r6, #2
 80193ec:	d12b      	bne.n	8019446 <__kernel_rem_pio2+0x1c6>
 80193ee:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80193f2:	ee30 8b48 	vsub.f64	d8, d0, d8
 80193f6:	b330      	cbz	r0, 8019446 <__kernel_rem_pio2+0x1c6>
 80193f8:	4628      	mov	r0, r5
 80193fa:	f000 f9bd 	bl	8019778 <scalbn>
 80193fe:	ee38 8b40 	vsub.f64	d8, d8, d0
 8019402:	e020      	b.n	8019446 <__kernel_rem_pio2+0x1c6>
 8019404:	ee20 7b09 	vmul.f64	d7, d0, d9
 8019408:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801940c:	3801      	subs	r0, #1
 801940e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8019412:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8019416:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801941a:	eca6 0a01 	vstmia	r6!, {s0}
 801941e:	ed92 0b00 	vldr	d0, [r2]
 8019422:	ee37 0b00 	vadd.f64	d0, d7, d0
 8019426:	e79e      	b.n	8019366 <__kernel_rem_pio2+0xe6>
 8019428:	d105      	bne.n	8019436 <__kernel_rem_pio2+0x1b6>
 801942a:	1e62      	subs	r2, r4, #1
 801942c:	a906      	add	r1, sp, #24
 801942e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8019432:	15f6      	asrs	r6, r6, #23
 8019434:	e7c8      	b.n	80193c8 <__kernel_rem_pio2+0x148>
 8019436:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801943a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801943e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019442:	da31      	bge.n	80194a8 <__kernel_rem_pio2+0x228>
 8019444:	2600      	movs	r6, #0
 8019446:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801944a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801944e:	f040 809b 	bne.w	8019588 <__kernel_rem_pio2+0x308>
 8019452:	1e62      	subs	r2, r4, #1
 8019454:	2000      	movs	r0, #0
 8019456:	454a      	cmp	r2, r9
 8019458:	da49      	bge.n	80194ee <__kernel_rem_pio2+0x26e>
 801945a:	2800      	cmp	r0, #0
 801945c:	d062      	beq.n	8019524 <__kernel_rem_pio2+0x2a4>
 801945e:	3c01      	subs	r4, #1
 8019460:	ab06      	add	r3, sp, #24
 8019462:	3d18      	subs	r5, #24
 8019464:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d0f8      	beq.n	801945e <__kernel_rem_pio2+0x1de>
 801946c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8019470:	4628      	mov	r0, r5
 8019472:	f000 f981 	bl	8019778 <scalbn>
 8019476:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8019570 <__kernel_rem_pio2+0x2f0>
 801947a:	1c62      	adds	r2, r4, #1
 801947c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801947e:	00d3      	lsls	r3, r2, #3
 8019480:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8019484:	4622      	mov	r2, r4
 8019486:	2a00      	cmp	r2, #0
 8019488:	f280 80a8 	bge.w	80195dc <__kernel_rem_pio2+0x35c>
 801948c:	4622      	mov	r2, r4
 801948e:	2a00      	cmp	r2, #0
 8019490:	f2c0 80c6 	blt.w	8019620 <__kernel_rem_pio2+0x3a0>
 8019494:	a96a      	add	r1, sp, #424	@ 0x1a8
 8019496:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801949a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8019568 <__kernel_rem_pio2+0x2e8>
 801949e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8019584 <__kernel_rem_pio2+0x304>
 80194a2:	2000      	movs	r0, #0
 80194a4:	1aa1      	subs	r1, r4, r2
 80194a6:	e0b0      	b.n	801960a <__kernel_rem_pio2+0x38a>
 80194a8:	2602      	movs	r6, #2
 80194aa:	e78f      	b.n	80193cc <__kernel_rem_pio2+0x14c>
 80194ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80194b0:	b948      	cbnz	r0, 80194c6 <__kernel_rem_pio2+0x246>
 80194b2:	b122      	cbz	r2, 80194be <__kernel_rem_pio2+0x23e>
 80194b4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 80194b8:	f843 2c04 	str.w	r2, [r3, #-4]
 80194bc:	2201      	movs	r2, #1
 80194be:	f10c 0c01 	add.w	ip, ip, #1
 80194c2:	4610      	mov	r0, r2
 80194c4:	e789      	b.n	80193da <__kernel_rem_pio2+0x15a>
 80194c6:	ebae 0202 	sub.w	r2, lr, r2
 80194ca:	e7f5      	b.n	80194b8 <__kernel_rem_pio2+0x238>
 80194cc:	1e62      	subs	r2, r4, #1
 80194ce:	ab06      	add	r3, sp, #24
 80194d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80194d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80194d8:	a906      	add	r1, sp, #24
 80194da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80194de:	e784      	b.n	80193ea <__kernel_rem_pio2+0x16a>
 80194e0:	1e62      	subs	r2, r4, #1
 80194e2:	ab06      	add	r3, sp, #24
 80194e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80194e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80194ec:	e7f4      	b.n	80194d8 <__kernel_rem_pio2+0x258>
 80194ee:	ab06      	add	r3, sp, #24
 80194f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80194f4:	3a01      	subs	r2, #1
 80194f6:	4318      	orrs	r0, r3
 80194f8:	e7ad      	b.n	8019456 <__kernel_rem_pio2+0x1d6>
 80194fa:	3301      	adds	r3, #1
 80194fc:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8019500:	2800      	cmp	r0, #0
 8019502:	d0fa      	beq.n	80194fa <__kernel_rem_pio2+0x27a>
 8019504:	9a04      	ldr	r2, [sp, #16]
 8019506:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801950a:	446a      	add	r2, sp
 801950c:	eb04 000b 	add.w	r0, r4, fp
 8019510:	a91a      	add	r1, sp, #104	@ 0x68
 8019512:	1c66      	adds	r6, r4, #1
 8019514:	3a98      	subs	r2, #152	@ 0x98
 8019516:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801951a:	4423      	add	r3, r4
 801951c:	42b3      	cmp	r3, r6
 801951e:	da04      	bge.n	801952a <__kernel_rem_pio2+0x2aa>
 8019520:	461c      	mov	r4, r3
 8019522:	e713      	b.n	801934c <__kernel_rem_pio2+0xcc>
 8019524:	9a03      	ldr	r2, [sp, #12]
 8019526:	2301      	movs	r3, #1
 8019528:	e7e8      	b.n	80194fc <__kernel_rem_pio2+0x27c>
 801952a:	9902      	ldr	r1, [sp, #8]
 801952c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8019530:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8019534:	9104      	str	r1, [sp, #16]
 8019536:	ee07 1a90 	vmov	s15, r1
 801953a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801953e:	2400      	movs	r4, #0
 8019540:	eca0 7b02 	vstmia	r0!, {d7}
 8019544:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8019568 <__kernel_rem_pio2+0x2e8>
 8019548:	4686      	mov	lr, r0
 801954a:	4554      	cmp	r4, sl
 801954c:	dd03      	ble.n	8019556 <__kernel_rem_pio2+0x2d6>
 801954e:	eca2 7b02 	vstmia	r2!, {d7}
 8019552:	3601      	adds	r6, #1
 8019554:	e7e2      	b.n	801951c <__kernel_rem_pio2+0x29c>
 8019556:	ecbc 5b02 	vldmia	ip!, {d5}
 801955a:	ed3e 6b02 	vldmdb	lr!, {d6}
 801955e:	3401      	adds	r4, #1
 8019560:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019564:	e7f1      	b.n	801954a <__kernel_rem_pio2+0x2ca>
 8019566:	bf00      	nop
	...
 8019574:	3e700000 	.word	0x3e700000
 8019578:	00000000 	.word	0x00000000
 801957c:	41700000 	.word	0x41700000
 8019580:	0801a320 	.word	0x0801a320
 8019584:	0801a2e0 	.word	0x0801a2e0
 8019588:	4268      	negs	r0, r5
 801958a:	eeb0 0b48 	vmov.f64	d0, d8
 801958e:	f000 f8f3 	bl	8019778 <scalbn>
 8019592:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8019760 <__kernel_rem_pio2+0x4e0>
 8019596:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801959a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801959e:	db17      	blt.n	80195d0 <__kernel_rem_pio2+0x350>
 80195a0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8019768 <__kernel_rem_pio2+0x4e8>
 80195a4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80195a8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80195ac:	aa06      	add	r2, sp, #24
 80195ae:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80195b2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80195b6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80195ba:	3518      	adds	r5, #24
 80195bc:	ee10 3a10 	vmov	r3, s0
 80195c0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80195c4:	ee17 3a10 	vmov	r3, s14
 80195c8:	3401      	adds	r4, #1
 80195ca:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80195ce:	e74d      	b.n	801946c <__kernel_rem_pio2+0x1ec>
 80195d0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80195d4:	aa06      	add	r2, sp, #24
 80195d6:	ee10 3a10 	vmov	r3, s0
 80195da:	e7f6      	b.n	80195ca <__kernel_rem_pio2+0x34a>
 80195dc:	a806      	add	r0, sp, #24
 80195de:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80195e2:	9001      	str	r0, [sp, #4]
 80195e4:	ee07 0a90 	vmov	s15, r0
 80195e8:	3a01      	subs	r2, #1
 80195ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80195ee:	ee27 7b00 	vmul.f64	d7, d7, d0
 80195f2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80195f6:	ed21 7b02 	vstmdb	r1!, {d7}
 80195fa:	e744      	b.n	8019486 <__kernel_rem_pio2+0x206>
 80195fc:	ecbc 5b02 	vldmia	ip!, {d5}
 8019600:	ecb5 6b02 	vldmia	r5!, {d6}
 8019604:	3001      	adds	r0, #1
 8019606:	eea5 7b06 	vfma.f64	d7, d5, d6
 801960a:	4548      	cmp	r0, r9
 801960c:	dc01      	bgt.n	8019612 <__kernel_rem_pio2+0x392>
 801960e:	4281      	cmp	r1, r0
 8019610:	daf4      	bge.n	80195fc <__kernel_rem_pio2+0x37c>
 8019612:	a842      	add	r0, sp, #264	@ 0x108
 8019614:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8019618:	ed81 7b00 	vstr	d7, [r1]
 801961c:	3a01      	subs	r2, #1
 801961e:	e736      	b.n	801948e <__kernel_rem_pio2+0x20e>
 8019620:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8019622:	2a02      	cmp	r2, #2
 8019624:	dc0a      	bgt.n	801963c <__kernel_rem_pio2+0x3bc>
 8019626:	2a00      	cmp	r2, #0
 8019628:	dc2d      	bgt.n	8019686 <__kernel_rem_pio2+0x406>
 801962a:	d046      	beq.n	80196ba <__kernel_rem_pio2+0x43a>
 801962c:	f008 0007 	and.w	r0, r8, #7
 8019630:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8019634:	ecbd 8b06 	vpop	{d8-d10}
 8019638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801963c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801963e:	2a03      	cmp	r2, #3
 8019640:	d1f4      	bne.n	801962c <__kernel_rem_pio2+0x3ac>
 8019642:	a942      	add	r1, sp, #264	@ 0x108
 8019644:	f1a3 0208 	sub.w	r2, r3, #8
 8019648:	440a      	add	r2, r1
 801964a:	4611      	mov	r1, r2
 801964c:	4620      	mov	r0, r4
 801964e:	2800      	cmp	r0, #0
 8019650:	f1a1 0108 	sub.w	r1, r1, #8
 8019654:	dc52      	bgt.n	80196fc <__kernel_rem_pio2+0x47c>
 8019656:	4621      	mov	r1, r4
 8019658:	2901      	cmp	r1, #1
 801965a:	f1a2 0208 	sub.w	r2, r2, #8
 801965e:	dc5d      	bgt.n	801971c <__kernel_rem_pio2+0x49c>
 8019660:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8019770 <__kernel_rem_pio2+0x4f0>
 8019664:	aa42      	add	r2, sp, #264	@ 0x108
 8019666:	4413      	add	r3, r2
 8019668:	2c01      	cmp	r4, #1
 801966a:	dc67      	bgt.n	801973c <__kernel_rem_pio2+0x4bc>
 801966c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8019670:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8019674:	2e00      	cmp	r6, #0
 8019676:	d167      	bne.n	8019748 <__kernel_rem_pio2+0x4c8>
 8019678:	ed87 5b00 	vstr	d5, [r7]
 801967c:	ed87 6b02 	vstr	d6, [r7, #8]
 8019680:	ed87 7b04 	vstr	d7, [r7, #16]
 8019684:	e7d2      	b.n	801962c <__kernel_rem_pio2+0x3ac>
 8019686:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8019770 <__kernel_rem_pio2+0x4f0>
 801968a:	aa42      	add	r2, sp, #264	@ 0x108
 801968c:	4413      	add	r3, r2
 801968e:	4622      	mov	r2, r4
 8019690:	2a00      	cmp	r2, #0
 8019692:	da24      	bge.n	80196de <__kernel_rem_pio2+0x45e>
 8019694:	b34e      	cbz	r6, 80196ea <__kernel_rem_pio2+0x46a>
 8019696:	eeb1 7b46 	vneg.f64	d7, d6
 801969a:	ed87 7b00 	vstr	d7, [r7]
 801969e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 80196a2:	aa44      	add	r2, sp, #272	@ 0x110
 80196a4:	2301      	movs	r3, #1
 80196a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80196aa:	429c      	cmp	r4, r3
 80196ac:	da20      	bge.n	80196f0 <__kernel_rem_pio2+0x470>
 80196ae:	b10e      	cbz	r6, 80196b4 <__kernel_rem_pio2+0x434>
 80196b0:	eeb1 7b47 	vneg.f64	d7, d7
 80196b4:	ed87 7b02 	vstr	d7, [r7, #8]
 80196b8:	e7b8      	b.n	801962c <__kernel_rem_pio2+0x3ac>
 80196ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8019770 <__kernel_rem_pio2+0x4f0>
 80196be:	aa42      	add	r2, sp, #264	@ 0x108
 80196c0:	4413      	add	r3, r2
 80196c2:	2c00      	cmp	r4, #0
 80196c4:	da05      	bge.n	80196d2 <__kernel_rem_pio2+0x452>
 80196c6:	b10e      	cbz	r6, 80196cc <__kernel_rem_pio2+0x44c>
 80196c8:	eeb1 7b47 	vneg.f64	d7, d7
 80196cc:	ed87 7b00 	vstr	d7, [r7]
 80196d0:	e7ac      	b.n	801962c <__kernel_rem_pio2+0x3ac>
 80196d2:	ed33 6b02 	vldmdb	r3!, {d6}
 80196d6:	3c01      	subs	r4, #1
 80196d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80196dc:	e7f1      	b.n	80196c2 <__kernel_rem_pio2+0x442>
 80196de:	ed33 7b02 	vldmdb	r3!, {d7}
 80196e2:	3a01      	subs	r2, #1
 80196e4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80196e8:	e7d2      	b.n	8019690 <__kernel_rem_pio2+0x410>
 80196ea:	eeb0 7b46 	vmov.f64	d7, d6
 80196ee:	e7d4      	b.n	801969a <__kernel_rem_pio2+0x41a>
 80196f0:	ecb2 6b02 	vldmia	r2!, {d6}
 80196f4:	3301      	adds	r3, #1
 80196f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80196fa:	e7d6      	b.n	80196aa <__kernel_rem_pio2+0x42a>
 80196fc:	ed91 7b00 	vldr	d7, [r1]
 8019700:	ed91 5b02 	vldr	d5, [r1, #8]
 8019704:	3801      	subs	r0, #1
 8019706:	ee37 6b05 	vadd.f64	d6, d7, d5
 801970a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801970e:	ed81 6b00 	vstr	d6, [r1]
 8019712:	ee37 7b05 	vadd.f64	d7, d7, d5
 8019716:	ed81 7b02 	vstr	d7, [r1, #8]
 801971a:	e798      	b.n	801964e <__kernel_rem_pio2+0x3ce>
 801971c:	ed92 7b00 	vldr	d7, [r2]
 8019720:	ed92 5b02 	vldr	d5, [r2, #8]
 8019724:	3901      	subs	r1, #1
 8019726:	ee37 6b05 	vadd.f64	d6, d7, d5
 801972a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801972e:	ed82 6b00 	vstr	d6, [r2]
 8019732:	ee37 7b05 	vadd.f64	d7, d7, d5
 8019736:	ed82 7b02 	vstr	d7, [r2, #8]
 801973a:	e78d      	b.n	8019658 <__kernel_rem_pio2+0x3d8>
 801973c:	ed33 6b02 	vldmdb	r3!, {d6}
 8019740:	3c01      	subs	r4, #1
 8019742:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019746:	e78f      	b.n	8019668 <__kernel_rem_pio2+0x3e8>
 8019748:	eeb1 5b45 	vneg.f64	d5, d5
 801974c:	eeb1 6b46 	vneg.f64	d6, d6
 8019750:	ed87 5b00 	vstr	d5, [r7]
 8019754:	eeb1 7b47 	vneg.f64	d7, d7
 8019758:	ed87 6b02 	vstr	d6, [r7, #8]
 801975c:	e790      	b.n	8019680 <__kernel_rem_pio2+0x400>
 801975e:	bf00      	nop
 8019760:	00000000 	.word	0x00000000
 8019764:	41700000 	.word	0x41700000
 8019768:	00000000 	.word	0x00000000
 801976c:	3e700000 	.word	0x3e700000
	...

08019778 <scalbn>:
 8019778:	ee10 1a90 	vmov	r1, s1
 801977c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019780:	b98b      	cbnz	r3, 80197a6 <scalbn+0x2e>
 8019782:	ee10 3a10 	vmov	r3, s0
 8019786:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801978a:	4319      	orrs	r1, r3
 801978c:	d00a      	beq.n	80197a4 <scalbn+0x2c>
 801978e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8019840 <scalbn+0xc8>
 8019792:	4b37      	ldr	r3, [pc, #220]	@ (8019870 <scalbn+0xf8>)
 8019794:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019798:	4298      	cmp	r0, r3
 801979a:	da0b      	bge.n	80197b4 <scalbn+0x3c>
 801979c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8019848 <scalbn+0xd0>
 80197a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80197a4:	4770      	bx	lr
 80197a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80197aa:	4293      	cmp	r3, r2
 80197ac:	d107      	bne.n	80197be <scalbn+0x46>
 80197ae:	ee30 0b00 	vadd.f64	d0, d0, d0
 80197b2:	4770      	bx	lr
 80197b4:	ee10 1a90 	vmov	r1, s1
 80197b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80197bc:	3b36      	subs	r3, #54	@ 0x36
 80197be:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80197c2:	4290      	cmp	r0, r2
 80197c4:	dd0d      	ble.n	80197e2 <scalbn+0x6a>
 80197c6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8019850 <scalbn+0xd8>
 80197ca:	ee10 3a90 	vmov	r3, s1
 80197ce:	eeb0 6b47 	vmov.f64	d6, d7
 80197d2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8019858 <scalbn+0xe0>
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80197dc:	ee27 0b06 	vmul.f64	d0, d7, d6
 80197e0:	4770      	bx	lr
 80197e2:	4418      	add	r0, r3
 80197e4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 80197e8:	4298      	cmp	r0, r3
 80197ea:	dcec      	bgt.n	80197c6 <scalbn+0x4e>
 80197ec:	2800      	cmp	r0, #0
 80197ee:	dd0a      	ble.n	8019806 <scalbn+0x8e>
 80197f0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80197f4:	ec53 2b10 	vmov	r2, r3, d0
 80197f8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80197fc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8019800:	ec43 2b10 	vmov	d0, r2, r3
 8019804:	4770      	bx	lr
 8019806:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801980a:	da09      	bge.n	8019820 <scalbn+0xa8>
 801980c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8019848 <scalbn+0xd0>
 8019810:	ee10 3a90 	vmov	r3, s1
 8019814:	eeb0 6b47 	vmov.f64	d6, d7
 8019818:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8019860 <scalbn+0xe8>
 801981c:	2b00      	cmp	r3, #0
 801981e:	e7db      	b.n	80197d8 <scalbn+0x60>
 8019820:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8019824:	ec53 2b10 	vmov	r2, r3, d0
 8019828:	3036      	adds	r0, #54	@ 0x36
 801982a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801982e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8019832:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8019868 <scalbn+0xf0>
 8019836:	ec43 2b10 	vmov	d0, r2, r3
 801983a:	e7b1      	b.n	80197a0 <scalbn+0x28>
 801983c:	f3af 8000 	nop.w
 8019840:	00000000 	.word	0x00000000
 8019844:	43500000 	.word	0x43500000
 8019848:	c2f8f359 	.word	0xc2f8f359
 801984c:	01a56e1f 	.word	0x01a56e1f
 8019850:	8800759c 	.word	0x8800759c
 8019854:	7e37e43c 	.word	0x7e37e43c
 8019858:	8800759c 	.word	0x8800759c
 801985c:	fe37e43c 	.word	0xfe37e43c
 8019860:	c2f8f359 	.word	0xc2f8f359
 8019864:	81a56e1f 	.word	0x81a56e1f
 8019868:	00000000 	.word	0x00000000
 801986c:	3c900000 	.word	0x3c900000
 8019870:	ffff3cb0 	.word	0xffff3cb0
 8019874:	00000000 	.word	0x00000000

08019878 <floor>:
 8019878:	ee10 3a90 	vmov	r3, s1
 801987c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8019880:	ee10 2a10 	vmov	r2, s0
 8019884:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8019888:	2913      	cmp	r1, #19
 801988a:	b530      	push	{r4, r5, lr}
 801988c:	4615      	mov	r5, r2
 801988e:	dc33      	bgt.n	80198f8 <floor+0x80>
 8019890:	2900      	cmp	r1, #0
 8019892:	da18      	bge.n	80198c6 <floor+0x4e>
 8019894:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8019958 <floor+0xe0>
 8019898:	ee30 0b07 	vadd.f64	d0, d0, d7
 801989c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80198a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198a4:	dd0a      	ble.n	80198bc <floor+0x44>
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	da50      	bge.n	801994c <floor+0xd4>
 80198aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80198ae:	4313      	orrs	r3, r2
 80198b0:	2200      	movs	r2, #0
 80198b2:	4293      	cmp	r3, r2
 80198b4:	4b2a      	ldr	r3, [pc, #168]	@ (8019960 <floor+0xe8>)
 80198b6:	bf08      	it	eq
 80198b8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80198bc:	4619      	mov	r1, r3
 80198be:	4610      	mov	r0, r2
 80198c0:	ec41 0b10 	vmov	d0, r0, r1
 80198c4:	e01f      	b.n	8019906 <floor+0x8e>
 80198c6:	4827      	ldr	r0, [pc, #156]	@ (8019964 <floor+0xec>)
 80198c8:	4108      	asrs	r0, r1
 80198ca:	ea03 0400 	and.w	r4, r3, r0
 80198ce:	4314      	orrs	r4, r2
 80198d0:	d019      	beq.n	8019906 <floor+0x8e>
 80198d2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8019958 <floor+0xe0>
 80198d6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80198da:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80198de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198e2:	ddeb      	ble.n	80198bc <floor+0x44>
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	bfbe      	ittt	lt
 80198e8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 80198ec:	410a      	asrlt	r2, r1
 80198ee:	189b      	addlt	r3, r3, r2
 80198f0:	ea23 0300 	bic.w	r3, r3, r0
 80198f4:	2200      	movs	r2, #0
 80198f6:	e7e1      	b.n	80198bc <floor+0x44>
 80198f8:	2933      	cmp	r1, #51	@ 0x33
 80198fa:	dd05      	ble.n	8019908 <floor+0x90>
 80198fc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8019900:	d101      	bne.n	8019906 <floor+0x8e>
 8019902:	ee30 0b00 	vadd.f64	d0, d0, d0
 8019906:	bd30      	pop	{r4, r5, pc}
 8019908:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801990c:	f04f 30ff 	mov.w	r0, #4294967295
 8019910:	40e0      	lsrs	r0, r4
 8019912:	4210      	tst	r0, r2
 8019914:	d0f7      	beq.n	8019906 <floor+0x8e>
 8019916:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8019958 <floor+0xe0>
 801991a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801991e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019926:	ddc9      	ble.n	80198bc <floor+0x44>
 8019928:	2b00      	cmp	r3, #0
 801992a:	da02      	bge.n	8019932 <floor+0xba>
 801992c:	2914      	cmp	r1, #20
 801992e:	d103      	bne.n	8019938 <floor+0xc0>
 8019930:	3301      	adds	r3, #1
 8019932:	ea22 0200 	bic.w	r2, r2, r0
 8019936:	e7c1      	b.n	80198bc <floor+0x44>
 8019938:	2401      	movs	r4, #1
 801993a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801993e:	fa04 f101 	lsl.w	r1, r4, r1
 8019942:	440a      	add	r2, r1
 8019944:	42aa      	cmp	r2, r5
 8019946:	bf38      	it	cc
 8019948:	191b      	addcc	r3, r3, r4
 801994a:	e7f2      	b.n	8019932 <floor+0xba>
 801994c:	2200      	movs	r2, #0
 801994e:	4613      	mov	r3, r2
 8019950:	e7b4      	b.n	80198bc <floor+0x44>
 8019952:	bf00      	nop
 8019954:	f3af 8000 	nop.w
 8019958:	8800759c 	.word	0x8800759c
 801995c:	7e37e43c 	.word	0x7e37e43c
 8019960:	bff00000 	.word	0xbff00000
 8019964:	000fffff 	.word	0x000fffff

08019968 <_init>:
 8019968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801996a:	bf00      	nop
 801996c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801996e:	bc08      	pop	{r3}
 8019970:	469e      	mov	lr, r3
 8019972:	4770      	bx	lr

08019974 <_fini>:
 8019974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019976:	bf00      	nop
 8019978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801997a:	bc08      	pop	{r3}
 801997c:	469e      	mov	lr, r3
 801997e:	4770      	bx	lr
