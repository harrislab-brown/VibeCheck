
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cd80  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e90  0801d050  0801d050  0001e050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801dee0  0801dee0  0001eee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801dee8  0801dee8  0001eee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801deec  0801deec  0001eeec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  0801def0  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006098  240002cc  0801e1bc  0001f2cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24006364  0801e1bc  0001f364  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001f2cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039e74  00000000  00000000  0001f2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007346  00000000  00000000  0005916e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002900  00000000  00000000  000604b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fbe  00000000  00000000  00062db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e663  00000000  00000000  00064d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003eead  00000000  00000000  000a33d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172da5  00000000  00000000  000e2286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0025502b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c468  00000000  00000000  00255070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000000a6  00000000  00000000  002614d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000072  00000000  00000000  0026157e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002cc 	.word	0x240002cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801d038 	.word	0x0801d038

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d0 	.word	0x240002d0
 800030c:	0801d038 	.word	0x0801d038

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <LSM6DS3_Init>:

void LSM6DS3_Init(LSM6DS3* sensor, LSM6DS3_Config* config, SPI_HandleTypeDef* spi,  /* set the configuration parameters that need to be set once */
		GPIO_TypeDef* cs_port, uint16_t cs_pin,
		GPIO_TypeDef* int1_port, uint16_t int1_pin,
		GPIO_TypeDef* int2_port, uint16_t int2_pin)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
	sensor->config = config;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	61da      	str	r2, [r3, #28]
	sensor->spi = spi;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	sensor->cs_port = cs_port;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
	sensor->cs_pin = cs_pin;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	8b3a      	ldrh	r2, [r7, #24]
 8000adc:	811a      	strh	r2, [r3, #8]
	sensor->int1_port = int1_port;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	69fa      	ldr	r2, [r7, #28]
 8000ae2:	60da      	str	r2, [r3, #12]
	sensor->int1_pin = int1_pin;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	8c3a      	ldrh	r2, [r7, #32]
 8000ae8:	821a      	strh	r2, [r3, #16]
	sensor->int2_port = int2_port;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aee:	615a      	str	r2, [r3, #20]
	sensor->int2_pin = int2_pin;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000af4:	831a      	strh	r2, [r3, #24]

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000af6:	8b3b      	ldrh	r3, [r7, #24]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	6838      	ldr	r0, [r7, #0]
 8000afe:	f00a fb73 	bl	800b1e8 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop

08000b0c <LSM6DS3_TestCommunication>:


uint32_t LSM6DS3_TestCommunication(LSM6DS3* sensor)  /* check that the sensor is connected by querying its device ID */
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t reg_data;
	HAL_StatusTypeDef status = LSM6DS3_ReadRegister(sensor, LSM6DS3_REG_WHO_AM_I, &reg_data);
 8000b14:	f107 030e 	add.w	r3, r7, #14
 8000b18:	461a      	mov	r2, r3
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fadf 	bl	80010e0 <LSM6DS3_ReadRegister>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK && reg_data == LSM6DS3_DEVICE_ID)
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	2b6a      	cmp	r3, #106	@ 0x6a
 8000b30:	d101      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
		return 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LSM6DS3_TestCommunication+0x2c>
	return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LSM6DS3_Configure>:

/* configure the sensor */
/* this should be called each time we change a sensor setting so the chip can be updated */
void LSM6DS3_Configure(LSM6DS3* sensor)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	LSM6DS3_StopAccel(sensor);  /* disable the sensor before messing with the parameters */
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f9a9 	bl	8000ea0 <LSM6DS3_StopAccel>
	LSM6DS3_StopGyro(sensor);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f9b4 	bl	8000ebc <LSM6DS3_StopGyro>

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT1_CTRL, 0x01);  /* INT1 set when accel data ready (p. 59) */
 8000b54:	2201      	movs	r2, #1
 8000b56:	210d      	movs	r1, #13
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 faf5 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT2_CTRL, 0x02);  /* INT2 set when gyro data ready (p. 60) */
 8000b5e:	2202      	movs	r2, #2
 8000b60:	210e      	movs	r1, #14
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 faf0 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL4_C, 0b00000100);  /* disable the I2C interface, also disables the gyro LPF1 (p. 64) */
 8000b68:	2204      	movs	r2, #4
 8000b6a:	2113      	movs	r1, #19
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 faeb 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL6_C, 0b00000000);  /* sets the user offset weights to 2^(-10) g/LSB and the gyro LPF bandwidth (p. 66) */
 8000b72:	2200      	movs	r2, #0
 8000b74:	2115      	movs	r1, #21
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fae6 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL7_G, 0b00000000);  /* disables the gyro HPF (p. 67) */
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2116      	movs	r1, #22
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fae1 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL8_XL, 0b00000000);  /* acceleration filters, configured to keep us on the LPF1 path (p. 67) */
 8000b86:	2200      	movs	r2, #0
 8000b88:	2117      	movs	r1, #23
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fadc 	bl	8001148 <LSM6DS3_WriteRegister>

	LSM6DS3_WriteOffsets(sensor);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 f805 	bl	8000ba0 <LSM6DS3_WriteOffsets>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop

08000ba0 <LSM6DS3_WriteOffsets>:


void LSM6DS3_WriteOffsets(LSM6DS3* sensor)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	/* x, y, z are the DC offsets of the sensor in g */
	/* this function will write to the user offset registers of the accelerometer chip to correct the offset */
	/* we assume the weight of the user offsets is 2^(-10) g/LSB */

	int8_t x_b = (int8_t)(sensor->config->usr_offset_x / 0.0009765625f);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	ed93 7a00 	vldr	s14, [r3]
 8000bb0:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bbc:	edc7 7a00 	vstr	s15, [r7]
 8000bc0:	783b      	ldrb	r3, [r7, #0]
 8000bc2:	73fb      	strb	r3, [r7, #15]
	int8_t y_b = (int8_t)(sensor->config->usr_offset_y / 0.0009765625f);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000bcc:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bd8:	edc7 7a00 	vstr	s15, [r7]
 8000bdc:	783b      	ldrb	r3, [r7, #0]
 8000bde:	73bb      	strb	r3, [r7, #14]
	int8_t z_b = (int8_t)(sensor->config->usr_offset_z / 0.0009765625f);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	ed93 7a02 	vldr	s14, [r3, #8]
 8000be8:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf4:	edc7 7a00 	vstr	s15, [r7]
 8000bf8:	783b      	ldrb	r3, [r7, #0]
 8000bfa:	737b      	strb	r3, [r7, #13]

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_X_OFS_USR, x_b);
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2173      	movs	r1, #115	@ 0x73
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 faa0 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Y_OFS_USR, y_b);
 8000c08:	7bbb      	ldrb	r3, [r7, #14]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2174      	movs	r1, #116	@ 0x74
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 fa9a 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Z_OFS_USR, z_b);
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	461a      	mov	r2, r3
 8000c18:	2175      	movs	r1, #117	@ 0x75
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 fa94 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	3a800000 	.word	0x3a800000

08000c2c <LSM6DS3_StartAccel>:


void LSM6DS3_StartAccel(LSM6DS3* sensor)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->accel_odr_hz)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d04d      	beq.n	8000cde <LSM6DS3_StartAccel+0xb2>
 8000c42:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d84c      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c4a:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d042      	beq.n	8000cd8 <LSM6DS3_StartAccel+0xac>
 8000c52:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d844      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c5a:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d037      	beq.n	8000cd2 <LSM6DS3_StartAccel+0xa6>
 8000c62:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d83c      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c6a:	f240 3241 	movw	r2, #833	@ 0x341
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d02c      	beq.n	8000ccc <LSM6DS3_StartAccel+0xa0>
 8000c72:	f240 3241 	movw	r2, #833	@ 0x341
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d834      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c7a:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000c7e:	d022      	beq.n	8000cc6 <LSM6DS3_StartAccel+0x9a>
 8000c80:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000c84:	d82e      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c86:	2bd0      	cmp	r3, #208	@ 0xd0
 8000c88:	d01a      	beq.n	8000cc0 <LSM6DS3_StartAccel+0x94>
 8000c8a:	2bd0      	cmp	r3, #208	@ 0xd0
 8000c8c:	d82a      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c8e:	2b68      	cmp	r3, #104	@ 0x68
 8000c90:	d013      	beq.n	8000cba <LSM6DS3_StartAccel+0x8e>
 8000c92:	2b68      	cmp	r3, #104	@ 0x68
 8000c94:	d826      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c96:	2b34      	cmp	r3, #52	@ 0x34
 8000c98:	d00c      	beq.n	8000cb4 <LSM6DS3_StartAccel+0x88>
 8000c9a:	2b34      	cmp	r3, #52	@ 0x34
 8000c9c:	d822      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c9e:	2b0d      	cmp	r3, #13
 8000ca0:	d002      	beq.n	8000ca8 <LSM6DS3_StartAccel+0x7c>
 8000ca2:	2b1a      	cmp	r3, #26
 8000ca4:	d003      	beq.n	8000cae <LSM6DS3_StartAccel+0x82>
 8000ca6:	e01d      	b.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_ACCEL_ODR_13HZ;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	73fb      	strb	r3, [r7, #15]
		break;
 8000cac:	e01d      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 26:
		odr_data = LSM6DS3_ACCEL_ODR_26HZ;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	73fb      	strb	r3, [r7, #15]
		break;
 8000cb2:	e01a      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 52:
		odr_data = LSM6DS3_ACCEL_ODR_52HZ;
 8000cb4:	2330      	movs	r3, #48	@ 0x30
 8000cb6:	73fb      	strb	r3, [r7, #15]
		break;
 8000cb8:	e017      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 104:
		odr_data = LSM6DS3_ACCEL_ODR_104HZ;
 8000cba:	2340      	movs	r3, #64	@ 0x40
 8000cbc:	73fb      	strb	r3, [r7, #15]
		break;
 8000cbe:	e014      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 208:
		odr_data = LSM6DS3_ACCEL_ODR_208HZ;
 8000cc0:	2350      	movs	r3, #80	@ 0x50
 8000cc2:	73fb      	strb	r3, [r7, #15]
		break;
 8000cc4:	e011      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 416:
		odr_data = LSM6DS3_ACCEL_ODR_416HZ;
 8000cc6:	2360      	movs	r3, #96	@ 0x60
 8000cc8:	73fb      	strb	r3, [r7, #15]
		break;
 8000cca:	e00e      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 833:
		odr_data = LSM6DS3_ACCEL_ODR_833HZ;
 8000ccc:	2370      	movs	r3, #112	@ 0x70
 8000cce:	73fb      	strb	r3, [r7, #15]
		break;
 8000cd0:	e00b      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 1660:
		odr_data = LSM6DS3_ACCEL_ODR_1660HZ;
 8000cd2:	2380      	movs	r3, #128	@ 0x80
 8000cd4:	73fb      	strb	r3, [r7, #15]
		break;
 8000cd6:	e008      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 3330:
		odr_data = LSM6DS3_ACCEL_ODR_3330HZ;
 8000cd8:	2390      	movs	r3, #144	@ 0x90
 8000cda:	73fb      	strb	r3, [r7, #15]
		break;
 8000cdc:	e005      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 6660:
		odr_data = LSM6DS3_ACCEL_ODR_6660HZ;
 8000cde:	23a0      	movs	r3, #160	@ 0xa0
 8000ce0:	73fb      	strb	r3, [r7, #15]
		break;
 8000ce2:	e002      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	default:
		odr_data = LSM6DS3_ACCEL_ODR_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
		break;
 8000ce8:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->g_range)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	3b02      	subs	r3, #2
 8000cf2:	2b0e      	cmp	r3, #14
 8000cf4:	d82c      	bhi.n	8000d50 <LSM6DS3_StartAccel+0x124>
 8000cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cfc <LSM6DS3_StartAccel+0xd0>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d39 	.word	0x08000d39
 8000d00:	08000d51 	.word	0x08000d51
 8000d04:	08000d3f 	.word	0x08000d3f
 8000d08:	08000d51 	.word	0x08000d51
 8000d0c:	08000d51 	.word	0x08000d51
 8000d10:	08000d51 	.word	0x08000d51
 8000d14:	08000d45 	.word	0x08000d45
 8000d18:	08000d51 	.word	0x08000d51
 8000d1c:	08000d51 	.word	0x08000d51
 8000d20:	08000d51 	.word	0x08000d51
 8000d24:	08000d51 	.word	0x08000d51
 8000d28:	08000d51 	.word	0x08000d51
 8000d2c:	08000d51 	.word	0x08000d51
 8000d30:	08000d51 	.word	0x08000d51
 8000d34:	08000d4b 	.word	0x08000d4b
	{
	case 2:
		range_data = LSM6DS3_G_RANGE_2;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73bb      	strb	r3, [r7, #14]
		break;
 8000d3c:	e00b      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 4:
		range_data = LSM6DS3_G_RANGE_4;
 8000d3e:	2308      	movs	r3, #8
 8000d40:	73bb      	strb	r3, [r7, #14]
		break;
 8000d42:	e008      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 8:
		range_data = LSM6DS3_G_RANGE_8;
 8000d44:	230c      	movs	r3, #12
 8000d46:	73bb      	strb	r3, [r7, #14]
		break;
 8000d48:	e005      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 16:
		range_data = LSM6DS3_G_RANGE_16;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	73bb      	strb	r3, [r7, #14]
		break;
 8000d4e:	e002      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	default:
		range_data = LSM6DS3_G_RANGE_2;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73bb      	strb	r3, [r7, #14]
		break;
 8000d54:	bf00      	nop
	}

	/* this register also contains LPF1_BW_SEL, here we will set BW to ODR/2 */
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, (odr_data | range_data));
 8000d56:	7bfa      	ldrb	r2, [r7, #15]
 8000d58:	7bbb      	ldrb	r3, [r7, #14]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2110      	movs	r1, #16
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 f9f0 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <LSM6DS3_StartGyro>:


void LSM6DS3_StartGyro(LSM6DS3* sensor)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->gyro_odr_hz)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69db      	ldr	r3, [r3, #28]
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d04d      	beq.n	8000e22 <LSM6DS3_StartGyro+0xb2>
 8000d86:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d84c      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000d8e:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d042      	beq.n	8000e1c <LSM6DS3_StartGyro+0xac>
 8000d96:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d844      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000d9e:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d037      	beq.n	8000e16 <LSM6DS3_StartGyro+0xa6>
 8000da6:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d83c      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dae:	f240 3241 	movw	r2, #833	@ 0x341
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d02c      	beq.n	8000e10 <LSM6DS3_StartGyro+0xa0>
 8000db6:	f240 3241 	movw	r2, #833	@ 0x341
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d834      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dbe:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000dc2:	d022      	beq.n	8000e0a <LSM6DS3_StartGyro+0x9a>
 8000dc4:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000dc8:	d82e      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dca:	2bd0      	cmp	r3, #208	@ 0xd0
 8000dcc:	d01a      	beq.n	8000e04 <LSM6DS3_StartGyro+0x94>
 8000dce:	2bd0      	cmp	r3, #208	@ 0xd0
 8000dd0:	d82a      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dd2:	2b68      	cmp	r3, #104	@ 0x68
 8000dd4:	d013      	beq.n	8000dfe <LSM6DS3_StartGyro+0x8e>
 8000dd6:	2b68      	cmp	r3, #104	@ 0x68
 8000dd8:	d826      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dda:	2b34      	cmp	r3, #52	@ 0x34
 8000ddc:	d00c      	beq.n	8000df8 <LSM6DS3_StartGyro+0x88>
 8000dde:	2b34      	cmp	r3, #52	@ 0x34
 8000de0:	d822      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000de2:	2b0d      	cmp	r3, #13
 8000de4:	d002      	beq.n	8000dec <LSM6DS3_StartGyro+0x7c>
 8000de6:	2b1a      	cmp	r3, #26
 8000de8:	d003      	beq.n	8000df2 <LSM6DS3_StartGyro+0x82>
 8000dea:	e01d      	b.n	8000e28 <LSM6DS3_StartGyro+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_GYRO_ODR_13HZ;
 8000dec:	2310      	movs	r3, #16
 8000dee:	73fb      	strb	r3, [r7, #15]
		break;
 8000df0:	e01d      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 26:
		odr_data = LSM6DS3_GYRO_ODR_26HZ;
 8000df2:	2320      	movs	r3, #32
 8000df4:	73fb      	strb	r3, [r7, #15]
		break;
 8000df6:	e01a      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 52:
		odr_data = LSM6DS3_GYRO_ODR_52HZ;
 8000df8:	2330      	movs	r3, #48	@ 0x30
 8000dfa:	73fb      	strb	r3, [r7, #15]
		break;
 8000dfc:	e017      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 104:
		odr_data = LSM6DS3_GYRO_ODR_104HZ;
 8000dfe:	2340      	movs	r3, #64	@ 0x40
 8000e00:	73fb      	strb	r3, [r7, #15]
		break;
 8000e02:	e014      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 208:
		odr_data = LSM6DS3_GYRO_ODR_208HZ;
 8000e04:	2350      	movs	r3, #80	@ 0x50
 8000e06:	73fb      	strb	r3, [r7, #15]
		break;
 8000e08:	e011      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 416:
		odr_data = LSM6DS3_GYRO_ODR_416HZ;
 8000e0a:	2360      	movs	r3, #96	@ 0x60
 8000e0c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e0e:	e00e      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 833:
		odr_data = LSM6DS3_GYRO_ODR_833HZ;
 8000e10:	2370      	movs	r3, #112	@ 0x70
 8000e12:	73fb      	strb	r3, [r7, #15]
		break;
 8000e14:	e00b      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 1660:
		odr_data = LSM6DS3_GYRO_ODR_1660HZ;
 8000e16:	2380      	movs	r3, #128	@ 0x80
 8000e18:	73fb      	strb	r3, [r7, #15]
		break;
 8000e1a:	e008      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 3330:
		odr_data = LSM6DS3_GYRO_ODR_3330HZ;
 8000e1c:	2390      	movs	r3, #144	@ 0x90
 8000e1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000e20:	e005      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 6660:
		odr_data = LSM6DS3_GYRO_ODR_6660HZ;
 8000e22:	23a0      	movs	r3, #160	@ 0xa0
 8000e24:	73fb      	strb	r3, [r7, #15]
		break;
 8000e26:	e002      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	default:
		odr_data = LSM6DS3_GYRO_ODR_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e2c:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->dps_range)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e38:	d01f      	beq.n	8000e7a <LSM6DS3_StartGyro+0x10a>
 8000e3a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e3e:	d81f      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e44:	d016      	beq.n	8000e74 <LSM6DS3_StartGyro+0x104>
 8000e46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e4a:	d819      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e4c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e50:	d00d      	beq.n	8000e6e <LSM6DS3_StartGyro+0xfe>
 8000e52:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e56:	d813      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e58:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e5a:	d002      	beq.n	8000e62 <LSM6DS3_StartGyro+0xf2>
 8000e5c:	2bf5      	cmp	r3, #245	@ 0xf5
 8000e5e:	d003      	beq.n	8000e68 <LSM6DS3_StartGyro+0xf8>
 8000e60:	e00e      	b.n	8000e80 <LSM6DS3_StartGyro+0x110>
	{
	case 125:
		range_data = LSM6DS3_DPS_RANGE_125;
 8000e62:	2302      	movs	r3, #2
 8000e64:	73bb      	strb	r3, [r7, #14]
		break;
 8000e66:	e00e      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 245:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73bb      	strb	r3, [r7, #14]
		break;
 8000e6c:	e00b      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 500:
		range_data = LSM6DS3_DPS_RANGE_500;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	73bb      	strb	r3, [r7, #14]
		break;
 8000e72:	e008      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 1000:
		range_data = LSM6DS3_DPS_RANGE_1000;
 8000e74:	2308      	movs	r3, #8
 8000e76:	73bb      	strb	r3, [r7, #14]
		break;
 8000e78:	e005      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 2000:
		range_data = LSM6DS3_DPS_RANGE_2000;
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	73bb      	strb	r3, [r7, #14]
		break;
 8000e7e:	e002      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	default:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73bb      	strb	r3, [r7, #14]
		break;
 8000e84:	bf00      	nop
	}

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, (odr_data | range_data));
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2111      	movs	r1, #17
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f958 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <LSM6DS3_StopAccel>:


void LSM6DS3_StopAccel(LSM6DS3* sensor)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, LSM6DS3_ACCEL_ODR_DISABLE);  /* power down accel. (p. 61) */
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 f94b 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop

08000ebc <LSM6DS3_StopGyro>:


void LSM6DS3_StopGyro(LSM6DS3* sensor)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, LSM6DS3_GYRO_ODR_DISABLE);  /* power down gyro. (p. 62) */
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2111      	movs	r1, #17
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f93d 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop

08000ed8 <LSM6DS3_ReadAccel>:


void LSM6DS3_ReadAccel(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b08d      	sub	sp, #52	@ 0x34
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
	/* get the acceleration in g */

	/* read multiple bytes corresponding to the raw accelerometer data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_XL | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8000fd4 <LSM6DS3_ReadAccel+0xfc>)
 8000ee8:	f107 0318 	add.w	r3, r7, #24
 8000eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef0:	6018      	str	r0, [r3, #0]
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	8019      	strh	r1, [r3, #0]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	0c0a      	lsrs	r2, r1, #16
 8000efa:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681c      	ldr	r4, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	8912      	ldrh	r2, [r2, #8]
 8000f0a:	f107 0110 	add.w	r1, r7, #16
 8000f0e:	f107 0018 	add.w	r0, r7, #24
 8000f12:	9201      	str	r2, [sp, #4]
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	4623      	mov	r3, r4
 8000f18:	2207      	movs	r2, #7
 8000f1a:	f000 f941 	bl	80011a0 <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8000f1e:	7c7b      	ldrb	r3, [r7, #17]
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	7cbb      	ldrb	r3, [r7, #18]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8000f2c:	7cfb      	ldrb	r3, [r7, #19]
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	7d3b      	ldrb	r3, [r7, #20]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 8000f3a:	7d7b      	ldrb	r3, [r7, #21]
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	7dbb      	ldrb	r3, [r7, #22]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	847b      	strh	r3, [r7, #34]	@ 0x22

	*x = sensor->config->g_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f66:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8000fd8 <LSM6DS3_ReadAccel+0x100>
 8000f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	edc3 7a00 	vstr	s15, [r3]
	*y = sensor->config->g_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f82:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f92:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fd8 <LSM6DS3_ReadAccel+0x100>
 8000f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	edc3 7a00 	vstr	s15, [r3]
	*z = sensor->config->g_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fbe:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8000fd8 <LSM6DS3_ReadAccel+0x100>
 8000fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	edc3 7a00 	vstr	s15, [r3]

}
 8000fcc:	bf00      	nop
 8000fce:	372c      	adds	r7, #44	@ 0x2c
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	0801d050 	.word	0x0801d050
 8000fd8:	47000000 	.word	0x47000000

08000fdc <LSM6DS3_ReadGyro>:


void LSM6DS3_ReadGyro(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b08d      	sub	sp, #52	@ 0x34
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
	/* get the rotation rate in degrees per second */

	/* read multiple bytes corresponding to the raw gyroscope data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_G | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000fea:	4a3b      	ldr	r2, [pc, #236]	@ (80010d8 <LSM6DS3_ReadGyro+0xfc>)
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ff4:	6018      	str	r0, [r3, #0]
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	8019      	strh	r1, [r3, #0]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	0c0a      	lsrs	r2, r1, #16
 8000ffe:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681c      	ldr	r4, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	8912      	ldrh	r2, [r2, #8]
 800100e:	f107 0110 	add.w	r1, r7, #16
 8001012:	f107 0018 	add.w	r0, r7, #24
 8001016:	9201      	str	r2, [sp, #4]
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	4623      	mov	r3, r4
 800101c:	2207      	movs	r2, #7
 800101e:	f000 f8bf 	bl	80011a0 <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8001022:	7c7b      	ldrb	r3, [r7, #17]
 8001024:	b21a      	sxth	r2, r3
 8001026:	7cbb      	ldrb	r3, [r7, #18]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8001030:	7cfb      	ldrb	r3, [r7, #19]
 8001032:	b21a      	sxth	r2, r3
 8001034:	7d3b      	ldrb	r3, [r7, #20]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 800103e:	7d7b      	ldrb	r3, [r7, #21]
 8001040:	b21a      	sxth	r2, r3
 8001042:	7dbb      	ldrb	r3, [r7, #22]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	847b      	strh	r3, [r7, #34]	@ 0x22

	*x = sensor->config->dps_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106a:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80010dc <LSM6DS3_ReadGyro+0x100>
 800106e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	edc3 7a00 	vstr	s15, [r3]
	*y = sensor->config->dps_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001086:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001096:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80010dc <LSM6DS3_ReadGyro+0x100>
 800109a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	edc3 7a00 	vstr	s15, [r3]
	*z = sensor->config->dps_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c2:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80010dc <LSM6DS3_ReadGyro+0x100>
 80010c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	edc3 7a00 	vstr	s15, [r3]
}
 80010d0:	bf00      	nop
 80010d2:	372c      	adds	r7, #44	@ 0x2c
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd90      	pop	{r4, r7, pc}
 80010d8:	0801d058 	.word	0x0801d058
 80010dc:	47000000 	.word	0x47000000

080010e0 <LSM6DS3_ReadRegister>:



HAL_StatusTypeDef LSM6DS3_ReadRegister(LSM6DS3* sensor, uint8_t reg, uint8_t* data)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	460b      	mov	r3, r1
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	72fb      	strb	r3, [r7, #11]
	uint8_t tx_buf[2] = {(reg | 0x80), 0x00};  // set the first bit to indicate a read communication
 80010ee:	7afb      	ldrb	r3, [r7, #11]
 80010f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	753b      	strb	r3, [r7, #20]
 80010f8:	2300      	movs	r3, #0
 80010fa:	757b      	strb	r3, [r7, #21]
	uint8_t rx_buf[2];

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6858      	ldr	r0, [r3, #4]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	891b      	ldrh	r3, [r3, #8]
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	f00a f86e 	bl	800b1e8 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(sensor->spi, tx_buf, rx_buf, 2, HAL_MAX_DELAY);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	f107 0210 	add.w	r2, r7, #16
 8001114:	f107 0114 	add.w	r1, r7, #20
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2302      	movs	r3, #2
 8001120:	f00f fb10 	bl	8010744 <HAL_SPI_TransmitReceive>
 8001124:	4603      	mov	r3, r0
 8001126:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6858      	ldr	r0, [r3, #4]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	891b      	ldrh	r3, [r3, #8]
 8001130:	2201      	movs	r2, #1
 8001132:	4619      	mov	r1, r3
 8001134:	f00a f858 	bl	800b1e8 <HAL_GPIO_WritePin>

	*data = rx_buf[1];
 8001138:	7c7a      	ldrb	r2, [r7, #17]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	701a      	strb	r2, [r3, #0]

	return status;
 800113e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <LSM6DS3_WriteRegister>:


HAL_StatusTypeDef LSM6DS3_WriteRegister(LSM6DS3* sensor, uint8_t reg, uint8_t data)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
 8001154:	4613      	mov	r3, r2
 8001156:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_buf[2] = {reg, data};
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	733b      	strb	r3, [r7, #12]
 800115c:	78bb      	ldrb	r3, [r7, #2]
 800115e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6858      	ldr	r0, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	891b      	ldrh	r3, [r3, #8]
 8001168:	2200      	movs	r2, #0
 800116a:	4619      	mov	r1, r3
 800116c:	f00a f83c 	bl	800b1e8 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_Transmit(sensor->spi, tx_buf, 2, HAL_MAX_DELAY);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	f107 010c 	add.w	r1, r7, #12
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
 800117c:	2202      	movs	r2, #2
 800117e:	f00f f8f3 	bl	8010368 <HAL_SPI_Transmit>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6858      	ldr	r0, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	891b      	ldrh	r3, [r3, #8]
 800118e:	2201      	movs	r2, #1
 8001190:	4619      	mov	r1, r3
 8001192:	f00a f829 	bl	800b1e8 <HAL_GPIO_WritePin>

	return status;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SPI_TxRx_Fast>:
/* this uses the SPI FIFO on the H7, so it only works for transactions 16 bytes or less */
/* (the FIFO size depends on the specific SPI channel too, so check the RM) */
/* On the H723, SPI1, 2, 3 have 16 byte FIFO and SPI4, 5, 6 have 8 bytes FIFO */
/* the peripheral is configured using Cube to have 8 bit data frames and 1 data frame FIFO threshold */
__attribute__((optimize("-Ofast"))) inline void SPI_TxRx_Fast(uint8_t* tx, uint8_t* rx, uint8_t len, SPI_TypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 80011a0:	b470      	push	{r4, r5, r6}
 80011a2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80011a6:	4684      	mov	ip, r0
 80011a8:	9c03      	ldr	r4, [sp, #12]
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 80011aa:	042e      	lsls	r6, r5, #16


	/* If using both the HAL SPI functions and our own, we need the next 2 lines to put SPI in a known state */
	/* If only using our function, I think these could be omitted */
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 80011ac:	4816      	ldr	r0, [pc, #88]	@ (8001208 <SPI_TxRx_Fast+0x68>)
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 80011ae:	61a6      	str	r6, [r4, #24]
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 80011b0:	685e      	ldr	r6, [r3, #4]
 80011b2:	4030      	ands	r0, r6
 80011b4:	6058      	str	r0, [r3, #4]
	spi->CFG2 &= ~SPI_CFG2_COMM;  /* this puts the SPI in full-duplex mode (for some reason the HAL takes it out of this mode sometimes, even when it is configured in Cube as full-duplex) */
 80011b6:	68d8      	ldr	r0, [r3, #12]
 80011b8:	f420 20c0 	bic.w	r0, r0, #393216	@ 0x60000
 80011bc:	60d8      	str	r0, [r3, #12]


	spi->CR1 |= SPI_CR1_SPE;  /* enable SPI */
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	f040 0001 	orr.w	r0, r0, #1
 80011c4:	6018      	str	r0, [r3, #0]
	spi->CR1 |= SPI_CR1_CSTART;  /* start transmission */
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 80011cc:	6018      	str	r0, [r3, #0]

	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 80011ce:	b1a2      	cbz	r2, 80011fa <SPI_TxRx_Fast+0x5a>
 80011d0:	eb0c 0602 	add.w	r6, ip, r2
	{
		if(((spi->SR) & SPI_SR_TXP) == SPI_SR_TXP)  /* wait until TX FIFO has enough space for a data packet */
 80011d4:	6958      	ldr	r0, [r3, #20]
 80011d6:	0780      	lsls	r0, r0, #30
 80011d8:	d5fc      	bpl.n	80011d4 <SPI_TxRx_Fast+0x34>
		   *(__IO uint8_t*)&(spi->TXDR) = tx[i++];  /* put data in TXDR */
 80011da:	f81c 0b01 	ldrb.w	r0, [ip], #1
 80011de:	45b4      	cmp	ip, r6
 80011e0:	f883 0020 	strb.w	r0, [r3, #32]
 80011e4:	d1f6      	bne.n	80011d4 <SPI_TxRx_Fast+0x34>
	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 80011e6:	440a      	add	r2, r1
	}

	for (uint8_t i = 0; i < len; )  /* read out everything from the RX buffer */
	{
		if(((spi->SR) & SPI_SR_RXP) == SPI_SR_RXP)  /* wait until RX FIFO contains a data packet */
 80011e8:	6958      	ldr	r0, [r3, #20]
 80011ea:	07c0      	lsls	r0, r0, #31
 80011ec:	d5fc      	bpl.n	80011e8 <SPI_TxRx_Fast+0x48>
			rx[i++] = *(__IO uint8_t*)&(spi->RXDR);  /* read the data from RXDR */
 80011ee:	f893 0030 	ldrb.w	r0, [r3, #48]	@ 0x30
 80011f2:	f801 0b01 	strb.w	r0, [r1], #1
 80011f6:	4291      	cmp	r1, r2
 80011f8:	d1f6      	bne.n	80011e8 <SPI_TxRx_Fast+0x48>
	}

	spi->CR1 &= ~SPI_CR1_SPE;  /* disable SPI */
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	f022 0201 	bic.w	r2, r2, #1
 8001200:	601a      	str	r2, [r3, #0]
	cs_port->BSRR = cs_pin;  /* CS high */
 8001202:	61a5      	str	r5, [r4, #24]
}
 8001204:	bc70      	pop	{r4, r5, r6}
 8001206:	4770      	bx	lr
 8001208:	ffff0000 	.word	0xffff0000

0800120c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 8001214:	4803      	ldr	r0, [pc, #12]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001216:	f004 fbb0 	bl	800597a <VibeCheckStrobe_PeriodElapsedUpdate>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	24002dac 	.word	0x24002dac

08001228 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 8001232:	f005 f9c3 	bl	80065bc <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	24002dcc 	.word	0x24002dcc

08001244 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 800124e:	f005 f9d1 	bl	80065f4 <VibeCheckWaveGen_DMACpltCallback>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	24002dcc 	.word	0x24002dcc

08001260 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
	VibeCheckSensor_EXTICallback(&vc.sensor, GPIO_Pin);
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4619      	mov	r1, r3
 800126e:	4803      	ldr	r0, [pc, #12]	@ (800127c <HAL_GPIO_EXTI_Callback+0x1c>)
 8001270:	f003 f964 	bl	800453c <VibeCheckSensor_EXTICallback>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	24004398 	.word	0x24004398

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001286:	f000 ff1b 	bl	80020c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128a:	f005 fcaf 	bl	8006bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128e:	f000 f845 	bl	800131c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001292:	f000 f8b3 	bl	80013fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001296:	f000 fdb7 	bl	8001e08 <MX_GPIO_Init>
  MX_DMA_Init();
 800129a:	f000 fd85 	bl	8001da8 <MX_DMA_Init>
  MX_DAC1_Init();
 800129e:	f000 f9c3 	bl	8001628 <MX_DAC1_Init>
  MX_I2C2_Init();
 80012a2:	f000 f9fd 	bl	80016a0 <MX_I2C2_Init>
  MX_SPI2_Init();
 80012a6:	f000 fa3b 	bl	8001720 <MX_SPI2_Init>
  MX_SPI3_Init();
 80012aa:	f000 fa8f 	bl	80017cc <MX_SPI3_Init>
  MX_SPI4_Init();
 80012ae:	f000 fae3 	bl	8001878 <MX_SPI4_Init>
  MX_TIM4_Init();
 80012b2:	f000 fc67 	bl	8001b84 <MX_TIM4_Init>
  MX_TIM3_Init();
 80012b6:	f000 fbd7 	bl	8001a68 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012ba:	f000 fd29 	bl	8001d10 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80012be:	f000 fb31 	bl	8001924 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012c2:	f000 fb83 	bl	80019cc <MX_TIM2_Init>
  MX_ADC1_Init();
 80012c6:	f000 f8c9 	bl	800145c <MX_ADC1_Init>
  MX_ADC2_Init();
 80012ca:	f000 f943 	bl	8001554 <MX_ADC2_Init>
  MX_UART7_Init();
 80012ce:	f000 fcd1 	bl	8001c74 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 80012d2:	f016 fa55 	bl	8017780 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1, &htim4, &hspi2, &hspi3, &hspi4);
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <main+0x7c>)
 80012d8:	9303      	str	r3, [sp, #12]
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <main+0x80>)
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <main+0x84>)
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <main+0x88>)
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <main+0x8c>)
 80012e8:	4a09      	ldr	r2, [pc, #36]	@ (8001310 <main+0x90>)
 80012ea:	490a      	ldr	r1, [pc, #40]	@ (8001314 <main+0x94>)
 80012ec:	480a      	ldr	r0, [pc, #40]	@ (8001318 <main+0x98>)
 80012ee:	f001 fe3d 	bl	8002f6c <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 80012f2:	4809      	ldr	r0, [pc, #36]	@ (8001318 <main+0x98>)
 80012f4:	f002 f812 	bl	800331c <VibeCheck_Loop>
 80012f8:	e7fb      	b.n	80012f2 <main+0x72>
 80012fa:	bf00      	nop
 80012fc:	24000630 	.word	0x24000630
 8001300:	240005a8 	.word	0x240005a8
 8001304:	24000520 	.word	0x24000520
 8001308:	2400079c 	.word	0x2400079c
 800130c:	240003c8 	.word	0x240003c8
 8001310:	240006b8 	.word	0x240006b8
 8001314:	24000750 	.word	0x24000750
 8001318:	24000988 	.word	0x24000988

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b09c      	sub	sp, #112	@ 0x70
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001326:	224c      	movs	r2, #76	@ 0x4c
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f018 fae9 	bl	8019902 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2220      	movs	r2, #32
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f018 fae3 	bl	8019902 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800133c:	2002      	movs	r0, #2
 800133e:	f00b fb59 	bl	800c9f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <SystemClock_Config+0xdc>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a2b      	ldr	r2, [pc, #172]	@ (80013f8 <SystemClock_Config+0xdc>)
 800134c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b29      	ldr	r3, [pc, #164]	@ (80013f8 <SystemClock_Config+0xdc>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800135e:	bf00      	nop
 8001360:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <SystemClock_Config+0xdc>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800136c:	d1f8      	bne.n	8001360 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800136e:	2321      	movs	r3, #33	@ 0x21
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001378:	2301      	movs	r3, #1
 800137a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137c:	2302      	movs	r3, #2
 800137e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001380:	2302      	movs	r3, #2
 8001382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001388:	2328      	movs	r3, #40	@ 0x28
 800138a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800138c:	2301      	movs	r3, #1
 800138e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001390:	2302      	movs	r3, #2
 8001392:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001394:	2302      	movs	r3, #2
 8001396:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001398:	230c      	movs	r3, #12
 800139a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800139c:	2300      	movs	r3, #0
 800139e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00b fb6d 	bl	800ca88 <HAL_RCC_OscConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013b4:	f000 feb0 	bl	8002118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b8:	233f      	movs	r3, #63	@ 0x3f
 80013ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013bc:	2303      	movs	r3, #3
 80013be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013c4:	2308      	movs	r3, #8
 80013c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013c8:	2340      	movs	r3, #64	@ 0x40
 80013ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013cc:	2340      	movs	r3, #64	@ 0x40
 80013ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013d6:	2340      	movs	r3, #64	@ 0x40
 80013d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2103      	movs	r1, #3
 80013de:	4618      	mov	r0, r3
 80013e0:	f00b ff2c 	bl	800d23c <HAL_RCC_ClockConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013ea:	f000 fe95 	bl	8002118 <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3770      	adds	r7, #112	@ 0x70
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	58024800 	.word	0x58024800

080013fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0ae      	sub	sp, #184	@ 0xb8
 8001400:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	22b8      	movs	r2, #184	@ 0xb8
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f018 fa7a 	bl	8019902 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800140e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800141a:	2302      	movs	r3, #2
 800141c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800141e:	2310      	movs	r3, #16
 8001420:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001422:	2302      	movs	r3, #2
 8001424:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001426:	2302      	movs	r3, #2
 8001428:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800142e:	23c0      	movs	r3, #192	@ 0xc0
 8001430:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001440:	463b      	mov	r3, r7
 8001442:	4618      	mov	r0, r3
 8001444:	f00c fa86 	bl	800d954 <HAL_RCCEx_PeriphCLKConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800144e:	f000 fe63 	bl	8002118 <Error_Handler>
  }
}
 8001452:	bf00      	nop
 8001454:	37b8      	adds	r7, #184	@ 0xb8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	@ 0x30
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800146e:	463b      	mov	r3, r7
 8001470:	2224      	movs	r2, #36	@ 0x24
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f018 fa44 	bl	8019902 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800147a:	4b32      	ldr	r3, [pc, #200]	@ (8001544 <MX_ADC1_Init+0xe8>)
 800147c:	4a32      	ldr	r2, [pc, #200]	@ (8001548 <MX_ADC1_Init+0xec>)
 800147e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001480:	4b30      	ldr	r3, [pc, #192]	@ (8001544 <MX_ADC1_Init+0xe8>)
 8001482:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001486:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001488:	4b2e      	ldr	r3, [pc, #184]	@ (8001544 <MX_ADC1_Init+0xe8>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800148e:	4b2d      	ldr	r3, [pc, #180]	@ (8001544 <MX_ADC1_Init+0xe8>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001494:	4b2b      	ldr	r3, [pc, #172]	@ (8001544 <MX_ADC1_Init+0xe8>)
 8001496:	2204      	movs	r2, #4
 8001498:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800149a:	4b2a      	ldr	r3, [pc, #168]	@ (8001544 <MX_ADC1_Init+0xe8>)
 800149c:	2200      	movs	r2, #0
 800149e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014a0:	4b28      	ldr	r3, [pc, #160]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014a6:	4b27      	ldr	r3, [pc, #156]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ac:	4b25      	ldr	r3, [pc, #148]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b4:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ba:	4b22      	ldr	r3, [pc, #136]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80014c0:	4b20      	ldr	r3, [pc, #128]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014dc:	2201      	movs	r2, #1
 80014de:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014e0:	4818      	ldr	r0, [pc, #96]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014e2:	f005 fe7f 	bl	80071e4 <HAL_ADC_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80014ec:	f000 fe14 	bl	8002118 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	4812      	ldr	r0, [pc, #72]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014fc:	f006 febe 	bl	800827c <HAL_ADCEx_MultiModeConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001506:	f000 fe07 	bl	8002118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <MX_ADC1_Init+0xf0>)
 800150c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800150e:	2306      	movs	r3, #6
 8001510:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_ADC1_Init+0xf4>)
 8001518:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800151a:	2304      	movs	r3, #4
 800151c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_ADC1_Init+0xe8>)
 800152e:	f006 f861 	bl	80075f4 <HAL_ADC_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001538:	f000 fdee 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3730      	adds	r7, #48	@ 0x30
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	240002e8 	.word	0x240002e8
 8001548:	40022000 	.word	0x40022000
 800154c:	10c00010 	.word	0x10c00010
 8001550:	47ff0000 	.word	0x47ff0000

08001554 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2224      	movs	r2, #36	@ 0x24
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f018 f9ce 	bl	8019902 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001566:	4b2c      	ldr	r3, [pc, #176]	@ (8001618 <MX_ADC2_Init+0xc4>)
 8001568:	4a2c      	ldr	r2, [pc, #176]	@ (800161c <MX_ADC2_Init+0xc8>)
 800156a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800156c:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <MX_ADC2_Init+0xc4>)
 800156e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001572:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001574:	4b28      	ldr	r3, [pc, #160]	@ (8001618 <MX_ADC2_Init+0xc4>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800157a:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <MX_ADC2_Init+0xc4>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001580:	4b25      	ldr	r3, [pc, #148]	@ (8001618 <MX_ADC2_Init+0xc4>)
 8001582:	2204      	movs	r2, #4
 8001584:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001586:	4b24      	ldr	r3, [pc, #144]	@ (8001618 <MX_ADC2_Init+0xc4>)
 8001588:	2200      	movs	r2, #0
 800158a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800158c:	4b22      	ldr	r3, [pc, #136]	@ (8001618 <MX_ADC2_Init+0xc4>)
 800158e:	2200      	movs	r2, #0
 8001590:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001592:	4b21      	ldr	r3, [pc, #132]	@ (8001618 <MX_ADC2_Init+0xc4>)
 8001594:	2201      	movs	r2, #1
 8001596:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <MX_ADC2_Init+0xc4>)
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015b2:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015cc:	4812      	ldr	r0, [pc, #72]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015ce:	f005 fe09 	bl	80071e4 <HAL_ADC_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80015d8:	f000 fd9e 	bl	8002118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015dc:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_ADC2_Init+0xcc>)
 80015de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015e0:	2306      	movs	r3, #6
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <MX_ADC2_Init+0xd0>)
 80015ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015ec:	2304      	movs	r3, #4
 80015ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	@ (8001618 <MX_ADC2_Init+0xc4>)
 8001600:	f005 fff8 	bl	80075f4 <HAL_ADC_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800160a:	f000 fd85 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	@ 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	24000358 	.word	0x24000358
 800161c:	40022100 	.word	0x40022100
 8001620:	0c900008 	.word	0x0c900008
 8001624:	47ff0000 	.word	0x47ff0000

08001628 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2224      	movs	r2, #36	@ 0x24
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f018 f964 	bl	8019902 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800163a:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <MX_DAC1_Init+0x70>)
 800163c:	4a17      	ldr	r2, [pc, #92]	@ (800169c <MX_DAC1_Init+0x74>)
 800163e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001640:	4815      	ldr	r0, [pc, #84]	@ (8001698 <MX_DAC1_Init+0x70>)
 8001642:	f007 f885 	bl	8008750 <HAL_DAC_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800164c:	f000 fd64 	bl	8002118 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8001654:	2306      	movs	r3, #6
 8001656:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001658:	2302      	movs	r3, #2
 800165a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800165c:	2301      	movs	r3, #1
 800165e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	4619      	mov	r1, r3
 800166a:	480b      	ldr	r0, [pc, #44]	@ (8001698 <MX_DAC1_Init+0x70>)
 800166c:	f007 f95c 	bl	8008928 <HAL_DAC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001676:	f000 fd4f 	bl	8002118 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2210      	movs	r2, #16
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_DAC1_Init+0x70>)
 8001682:	f007 f951 	bl	8008928 <HAL_DAC_ConfigChannel>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800168c:	f000 fd44 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	@ 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	240003c8 	.word	0x240003c8
 800169c:	40007400 	.word	0x40007400

080016a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001718 <MX_I2C2_Init+0x78>)
 80016a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80016aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016ac:	4a1b      	ldr	r2, [pc, #108]	@ (800171c <MX_I2C2_Init+0x7c>)
 80016ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80016b0:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b6:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80016c2:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016da:	480e      	ldr	r0, [pc, #56]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016dc:	f009 fdb8 	bl	800b250 <HAL_I2C_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80016e6:	f000 fd17 	bl	8002118 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ea:	2100      	movs	r1, #0
 80016ec:	4809      	ldr	r0, [pc, #36]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016ee:	f009 fe4b 	bl	800b388 <HAL_I2CEx_ConfigAnalogFilter>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80016f8:	f000 fd0e 	bl	8002118 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016fc:	2100      	movs	r1, #0
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_I2C2_Init+0x74>)
 8001700:	f009 fe8d 	bl	800b41e <HAL_I2CEx_ConfigDigitalFilter>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800170a:	f000 fd05 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	240004cc 	.word	0x240004cc
 8001718:	40005800 	.word	0x40005800
 800171c:	307075b1 	.word	0x307075b1

08001720 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001724:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001726:	4a28      	ldr	r2, [pc, #160]	@ (80017c8 <MX_SPI2_Init+0xa8>)
 8001728:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800172a:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800172c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001730:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001732:	4b24      	ldr	r3, [pc, #144]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001738:	4b22      	ldr	r3, [pc, #136]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800173a:	2207      	movs	r2, #7
 800173c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800173e:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001744:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800174a:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800174c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001750:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001752:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001754:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001758:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800175a:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001760:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001766:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001768:	2200      	movs	r2, #0
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800176c:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800176e:	2200      	movs	r2, #0
 8001770:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001772:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001774:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001778:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800177a:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800177c:	2200      	movs	r2, #0
 800177e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001780:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001782:	2200      	movs	r2, #0
 8001784:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001788:	2200      	movs	r2, #0
 800178a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800178c:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001794:	2200      	movs	r2, #0
 8001796:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001798:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800179a:	2200      	movs	r2, #0
 800179c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017b0:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 80017b2:	f00e fcb5 	bl	8010120 <HAL_SPI_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80017bc:	f000 fcac 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	24000520 	.word	0x24000520
 80017c8:	40003800 	.word	0x40003800

080017cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80017d0:	4b27      	ldr	r3, [pc, #156]	@ (8001870 <MX_SPI3_Init+0xa4>)
 80017d2:	4a28      	ldr	r2, [pc, #160]	@ (8001874 <MX_SPI3_Init+0xa8>)
 80017d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017d6:	4b26      	ldr	r3, [pc, #152]	@ (8001870 <MX_SPI3_Init+0xa4>)
 80017d8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80017de:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <MX_SPI3_Init+0xa4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e4:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <MX_SPI3_Init+0xa4>)
 80017e6:	2207      	movs	r2, #7
 80017e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ea:	4b21      	ldr	r3, [pc, #132]	@ (8001870 <MX_SPI3_Init+0xa4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <MX_SPI3_Init+0xa4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80017f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <MX_SPI3_Init+0xa4>)
 80017f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001800:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001804:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001806:	4b1a      	ldr	r3, [pc, #104]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800180c:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <MX_SPI3_Init+0xa4>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001812:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001814:	2200      	movs	r2, #0
 8001816:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001818:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <MX_SPI3_Init+0xa4>)
 800181a:	2200      	movs	r2, #0
 800181c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800181e:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001820:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001824:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001826:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001828:	2200      	movs	r2, #0
 800182a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800182c:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <MX_SPI3_Init+0xa4>)
 800182e:	2200      	movs	r2, #0
 8001830:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001832:	4b0f      	ldr	r3, [pc, #60]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001834:	2200      	movs	r2, #0
 8001836:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001838:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <MX_SPI3_Init+0xa4>)
 800183a:	2200      	movs	r2, #0
 800183c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800183e:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001840:	2200      	movs	r2, #0
 8001842:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001844:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001846:	2200      	movs	r2, #0
 8001848:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <MX_SPI3_Init+0xa4>)
 800184c:	2200      	movs	r2, #0
 800184e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001850:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001852:	2200      	movs	r2, #0
 8001854:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001858:	2200      	movs	r2, #0
 800185a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	@ (8001870 <MX_SPI3_Init+0xa4>)
 800185e:	f00e fc5f 	bl	8010120 <HAL_SPI_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001868:	f000 fc56 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	240005a8 	.word	0x240005a8
 8001874:	40003c00 	.word	0x40003c00

08001878 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800187c:	4b27      	ldr	r3, [pc, #156]	@ (800191c <MX_SPI4_Init+0xa4>)
 800187e:	4a28      	ldr	r2, [pc, #160]	@ (8001920 <MX_SPI4_Init+0xa8>)
 8001880:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001882:	4b26      	ldr	r3, [pc, #152]	@ (800191c <MX_SPI4_Init+0xa4>)
 8001884:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001888:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800188a:	4b24      	ldr	r3, [pc, #144]	@ (800191c <MX_SPI4_Init+0xa4>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001890:	4b22      	ldr	r3, [pc, #136]	@ (800191c <MX_SPI4_Init+0xa4>)
 8001892:	2207      	movs	r2, #7
 8001894:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001896:	4b21      	ldr	r3, [pc, #132]	@ (800191c <MX_SPI4_Init+0xa4>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800189c:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <MX_SPI4_Init+0xa4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018a4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80018a8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018ac:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80018b0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b8:	4b18      	ldr	r3, [pc, #96]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018be:	4b17      	ldr	r3, [pc, #92]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80018c4:	4b15      	ldr	r3, [pc, #84]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018ca:	4b14      	ldr	r3, [pc, #80]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018d2:	4b12      	ldr	r3, [pc, #72]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018d8:	4b10      	ldr	r3, [pc, #64]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018de:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018e4:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018ea:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018fc:	4b07      	ldr	r3, [pc, #28]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <MX_SPI4_Init+0xa4>)
 8001904:	2200      	movs	r2, #0
 8001906:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001908:	4804      	ldr	r0, [pc, #16]	@ (800191c <MX_SPI4_Init+0xa4>)
 800190a:	f00e fc09 	bl	8010120 <HAL_SPI_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001914:	f000 fc00 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	24000630 	.word	0x24000630
 8001920:	40013400 	.word	0x40013400

08001924 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001942:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 8001944:	4a20      	ldr	r2, [pc, #128]	@ (80019c8 <MX_TIM1_Init+0xa4>)
 8001946:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001948:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 800194a:	2200      	movs	r2, #0
 800194c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194e:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 8001956:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800195a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195c:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001962:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800196e:	4815      	ldr	r0, [pc, #84]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 8001970:	f00f fb0b 	bl	8010f8a <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800197a:	f000 fbcd 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001982:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	480e      	ldr	r0, [pc, #56]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 800198c:	f010 fabc 	bl	8011f08 <HAL_TIM_ConfigClockSource>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001996:	f000 fbbf 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800199a:	2320      	movs	r3, #32
 800199c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4806      	ldr	r0, [pc, #24]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 80019ac:	f011 f8fe 	bl	8012bac <HAL_TIMEx_MasterConfigSynchronization>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80019b6:	f000 fbaf 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	3720      	adds	r7, #32
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	240006b8 	.word	0x240006b8
 80019c8:	40010000 	.word	0x40010000

080019cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <MX_TIM2_Init+0x98>)
 80019ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <MX_TIM2_Init+0x98>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <MX_TIM2_Init+0x98>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019fe:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <MX_TIM2_Init+0x98>)
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <MX_TIM2_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <MX_TIM2_Init+0x98>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a12:	4814      	ldr	r0, [pc, #80]	@ (8001a64 <MX_TIM2_Init+0x98>)
 8001a14:	f00f fab9 	bl	8010f8a <HAL_TIM_Base_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a1e:	f000 fb7b 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480d      	ldr	r0, [pc, #52]	@ (8001a64 <MX_TIM2_Init+0x98>)
 8001a30:	f010 fa6a 	bl	8011f08 <HAL_TIM_ConfigClockSource>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a3a:	f000 fb6d 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4806      	ldr	r0, [pc, #24]	@ (8001a64 <MX_TIM2_Init+0x98>)
 8001a4c:	f011 f8ae 	bl	8012bac <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a56:	f000 fb5f 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	24000704 	.word	0x24000704

08001a68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	@ 0x38
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]
 8001a96:	615a      	str	r2, [r3, #20]
 8001a98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a9a:	4b38      	ldr	r3, [pc, #224]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001a9c:	4a38      	ldr	r2, [pc, #224]	@ (8001b80 <MX_TIM3_Init+0x118>)
 8001a9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aa0:	4b36      	ldr	r3, [pc, #216]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa6:	4b35      	ldr	r3, [pc, #212]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001aac:	4b33      	ldr	r3, [pc, #204]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001aae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ab2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab4:	4b31      	ldr	r3, [pc, #196]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aba:	4b30      	ldr	r3, [pc, #192]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ac0:	482e      	ldr	r0, [pc, #184]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001ac2:	f00f fa62 	bl	8010f8a <HAL_TIM_Base_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001acc:	f000 fb24 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ad6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ada:	4619      	mov	r1, r3
 8001adc:	4827      	ldr	r0, [pc, #156]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001ade:	f010 fa13 	bl	8011f08 <HAL_TIM_ConfigClockSource>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001ae8:	f000 fb16 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001aec:	4823      	ldr	r0, [pc, #140]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001aee:	f00f fba7 	bl	8011240 <HAL_TIM_PWM_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001af8:	f000 fb0e 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	481c      	ldr	r0, [pc, #112]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001b0c:	f011 f84e 	bl	8012bac <HAL_TIMEx_MasterConfigSynchronization>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b16:	f000 faff 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b1a:	2360      	movs	r3, #96	@ 0x60
 8001b1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4812      	ldr	r0, [pc, #72]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001b32:	f010 f8d5 	bl	8011ce0 <HAL_TIM_PWM_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b3c:	f000 faec 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b40:	463b      	mov	r3, r7
 8001b42:	2204      	movs	r2, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	480d      	ldr	r0, [pc, #52]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001b48:	f010 f8ca 	bl	8011ce0 <HAL_TIM_PWM_ConfigChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001b52:	f000 fae1 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b56:	463b      	mov	r3, r7
 8001b58:	2208      	movs	r2, #8
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4807      	ldr	r0, [pc, #28]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001b5e:	f010 f8bf 	bl	8011ce0 <HAL_TIM_PWM_ConfigChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001b68:	f000 fad6 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b6c:	4803      	ldr	r0, [pc, #12]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001b6e:	f000 fee1 	bl	8002934 <HAL_TIM_MspPostInit>

}
 8001b72:	bf00      	nop
 8001b74:	3738      	adds	r7, #56	@ 0x38
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	24000750 	.word	0x24000750
 8001b80:	40000400 	.word	0x40000400

08001b84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08e      	sub	sp, #56	@ 0x38
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	615a      	str	r2, [r3, #20]
 8001bb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8001c70 <MX_TIM4_Init+0xec>)
 8001bba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bc8:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd0:	4b26      	ldr	r3, [pc, #152]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd6:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bdc:	4823      	ldr	r0, [pc, #140]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bde:	f00f f9d4 	bl	8010f8a <HAL_TIM_Base_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001be8:	f000 fa96 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	481c      	ldr	r0, [pc, #112]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bfa:	f010 f985 	bl	8011f08 <HAL_TIM_ConfigClockSource>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001c04:	f000 fa88 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c08:	4818      	ldr	r0, [pc, #96]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001c0a:	f00f fb19 	bl	8011240 <HAL_TIM_PWM_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001c14:	f000 fa80 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4811      	ldr	r0, [pc, #68]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001c28:	f010 ffc0 	bl	8012bac <HAL_TIMEx_MasterConfigSynchronization>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001c32:	f000 fa71 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c36:	2360      	movs	r3, #96	@ 0x60
 8001c38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c46:	463b      	mov	r3, r7
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4807      	ldr	r0, [pc, #28]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001c4e:	f010 f847 	bl	8011ce0 <HAL_TIM_PWM_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001c58:	f000 fa5e 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c5c:	4803      	ldr	r0, [pc, #12]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001c5e:	f000 fe69 	bl	8002934 <HAL_TIM_MspPostInit>

}
 8001c62:	bf00      	nop
 8001c64:	3738      	adds	r7, #56	@ 0x38
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2400079c 	.word	0x2400079c
 8001c70:	40000800 	.word	0x40000800

08001c74 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001c78:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001c7a:	4a24      	ldr	r2, [pc, #144]	@ (8001d0c <MX_UART7_Init+0x98>)
 8001c7c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001c7e:	4b22      	ldr	r3, [pc, #136]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001c80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c84:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001c86:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001c92:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001ca0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001ca4:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca6:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cac:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001cbe:	4812      	ldr	r0, [pc, #72]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001cc0:	f011 f82e 	bl	8012d20 <HAL_UART_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001cca:	f000 fa25 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001cd2:	f012 f93a 	bl	8013f4a <HAL_UARTEx_SetTxFifoThreshold>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001cdc:	f000 fa1c 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4809      	ldr	r0, [pc, #36]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001ce4:	f012 f96f 	bl	8013fc6 <HAL_UARTEx_SetRxFifoThreshold>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001cee:	f000 fa13 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001cf4:	f012 f8f0 	bl	8013ed8 <HAL_UARTEx_DisableFifoMode>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001cfe:	f000 fa0b 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	24000860 	.word	0x24000860
 8001d0c:	40007800 	.word	0x40007800

08001d10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d14:	4b22      	ldr	r3, [pc, #136]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d16:	4a23      	ldr	r2, [pc, #140]	@ (8001da4 <MX_USART1_UART_Init+0x94>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d1a:	4b21      	ldr	r3, [pc, #132]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b1a      	ldr	r3, [pc, #104]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d40:	4b17      	ldr	r3, [pc, #92]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d46:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d52:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d58:	4811      	ldr	r0, [pc, #68]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d5a:	f010 ffe1 	bl	8012d20 <HAL_UART_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d64:	f000 f9d8 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d68:	2100      	movs	r1, #0
 8001d6a:	480d      	ldr	r0, [pc, #52]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d6c:	f012 f8ed 	bl	8013f4a <HAL_UARTEx_SetTxFifoThreshold>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d76:	f000 f9cf 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4808      	ldr	r0, [pc, #32]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d7e:	f012 f922 	bl	8013fc6 <HAL_UARTEx_SetRxFifoThreshold>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d88:	f000 f9c6 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d8e:	f012 f8a3 	bl	8013ed8 <HAL_UARTEx_DisableFifoMode>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d98:	f000 f9be 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	240008f4 	.word	0x240008f4
 8001da4:	40011000 	.word	0x40011000

08001da8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <MX_DMA_Init+0x5c>)
 8001db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001db4:	4a13      	ldr	r2, [pc, #76]	@ (8001e04 <MX_DMA_Init+0x5c>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <MX_DMA_Init+0x5c>)
 8001dc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	200b      	movs	r0, #11
 8001dd2:	f006 fc10 	bl	80085f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001dd6:	200b      	movs	r0, #11
 8001dd8:	f006 fc27 	bl	800862a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	200c      	movs	r0, #12
 8001de2:	f006 fc08 	bl	80085f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001de6:	200c      	movs	r0, #12
 8001de8:	f006 fc1f 	bl	800862a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	200d      	movs	r0, #13
 8001df2:	f006 fc00 	bl	80085f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001df6:	200d      	movs	r0, #13
 8001df8:	f006 fc17 	bl	800862a <HAL_NVIC_EnableIRQ>

}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	58024400 	.word	0x58024400

08001e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	@ 0x30
 8001e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
 8001e1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e1e:	4ba2      	ldr	r3, [pc, #648]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e24:	4aa0      	ldr	r2, [pc, #640]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e26:	f043 0310 	orr.w	r3, r3, #16
 8001e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e2e:	4b9e      	ldr	r3, [pc, #632]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3c:	4b9a      	ldr	r3, [pc, #616]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e42:	4a99      	ldr	r2, [pc, #612]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e4c:	4b96      	ldr	r3, [pc, #600]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e5a:	4b93      	ldr	r3, [pc, #588]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e60:	4a91      	ldr	r2, [pc, #580]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e6a:	4b8f      	ldr	r3, [pc, #572]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	4b8b      	ldr	r3, [pc, #556]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e7e:	4a8a      	ldr	r2, [pc, #552]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e88:	4b87      	ldr	r3, [pc, #540]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e96:	4b84      	ldr	r3, [pc, #528]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9c:	4a82      	ldr	r2, [pc, #520]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e9e:	f043 0302 	orr.w	r3, r3, #2
 8001ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea6:	4b80      	ldr	r3, [pc, #512]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb4:	4b7c      	ldr	r3, [pc, #496]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eba:	4a7b      	ldr	r2, [pc, #492]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec4:	4b78      	ldr	r3, [pc, #480]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS3_GPIO_Port, ACCEL_NCS3_Pin, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2110      	movs	r1, #16
 8001ed6:	4875      	ldr	r0, [pc, #468]	@ (80020ac <MX_GPIO_Init+0x2a4>)
 8001ed8:	f009 f986 	bl	800b1e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2104      	movs	r1, #4
 8001ee0:	4873      	ldr	r0, [pc, #460]	@ (80020b0 <MX_GPIO_Init+0x2a8>)
 8001ee2:	f009 f981 	bl	800b1e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2101      	movs	r1, #1
 8001eea:	4872      	ldr	r0, [pc, #456]	@ (80020b4 <MX_GPIO_Init+0x2ac>)
 8001eec:	f009 f97c 	bl	800b1e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	210a      	movs	r1, #10
 8001ef4:	486f      	ldr	r0, [pc, #444]	@ (80020b4 <MX_GPIO_Init+0x2ac>)
 8001ef6:	f009 f977 	bl	800b1e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS1_GPIO_Port, ACCEL_NCS1_Pin, GPIO_PIN_SET);
 8001efa:	2201      	movs	r2, #1
 8001efc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f00:	486d      	ldr	r0, [pc, #436]	@ (80020b8 <MX_GPIO_Init+0x2b0>)
 8001f02:	f009 f971 	bl	800b1e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS2_GPIO_Port, ACCEL_NCS2_Pin, GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	2101      	movs	r1, #1
 8001f0a:	486c      	ldr	r0, [pc, #432]	@ (80020bc <MX_GPIO_Init+0x2b4>)
 8001f0c:	f009 f96c 	bl	800b1e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f16:	4868      	ldr	r0, [pc, #416]	@ (80020b8 <MX_GPIO_Init+0x2b0>)
 8001f18:	f009 f966 	bl	800b1e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACCEL_INTA3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA3_Pin;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTA3_GPIO_Port, &GPIO_InitStruct);
 8001f2a:	f107 031c 	add.w	r3, r7, #28
 8001f2e:	4619      	mov	r1, r3
 8001f30:	485e      	ldr	r0, [pc, #376]	@ (80020ac <MX_GPIO_Init+0x2a4>)
 8001f32:	f008 ff99 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS3_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS3_Pin;
 8001f36:	2310      	movs	r3, #16
 8001f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS3_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4857      	ldr	r0, [pc, #348]	@ (80020ac <MX_GPIO_Init+0x2a4>)
 8001f4e:	f008 ff8b 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INTB3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTB3_Pin;
 8001f52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTB3_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	4851      	ldr	r0, [pc, #324]	@ (80020b0 <MX_GPIO_Init+0x2a8>)
 8001f6a:	f008 ff7d 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4619      	mov	r1, r3
 8001f84:	484a      	ldr	r0, [pc, #296]	@ (80020b0 <MX_GPIO_Init+0x2a8>)
 8001f86:	f008 ff6f 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8001f8a:	230b      	movs	r3, #11
 8001f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4844      	ldr	r0, [pc, #272]	@ (80020b4 <MX_GPIO_Init+0x2ac>)
 8001fa2:	f008 ff61 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 8001fa6:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4619      	mov	r1, r3
 8001fba:	483e      	ldr	r0, [pc, #248]	@ (80020b4 <MX_GPIO_Init+0x2ac>)
 8001fbc:	f008 ff54 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS1_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin;
 8001fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS1_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4837      	ldr	r0, [pc, #220]	@ (80020b8 <MX_GPIO_Init+0x2b0>)
 8001fda:	f008 ff45 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin ACCEL_INTA2_Pin ACCEL_INTB2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|ACCEL_INTA2_Pin|ACCEL_INTB2_Pin;
 8001fde:	f240 3306 	movw	r3, #774	@ 0x306
 8001fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fe4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4831      	ldr	r0, [pc, #196]	@ (80020bc <MX_GPIO_Init+0x2b4>)
 8001ff6:	f008 ff37 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_EXT_Pin */
  GPIO_InitStruct.Pin = DAC_EXT_Pin;
 8001ffa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAC_EXT_GPIO_Port, &GPIO_InitStruct);
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	4619      	mov	r1, r3
 800200e:	4828      	ldr	r0, [pc, #160]	@ (80020b0 <MX_GPIO_Init+0x2a8>)
 8002010:	f008 ff2a 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS2_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS2_Pin;
 8002014:	2301      	movs	r3, #1
 8002016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002018:	2301      	movs	r3, #1
 800201a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS2_GPIO_Port, &GPIO_InitStruct);
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	4619      	mov	r1, r3
 800202a:	4824      	ldr	r0, [pc, #144]	@ (80020bc <MX_GPIO_Init+0x2b4>)
 800202c:	f008 ff1c 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = RECORD_INDICATOR_Pin;
 8002030:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RECORD_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	4619      	mov	r1, r3
 8002048:	481b      	ldr	r0, [pc, #108]	@ (80020b8 <MX_GPIO_Init+0x2b0>)
 800204a:	f008 ff0d 	bl	800ae68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	2007      	movs	r0, #7
 8002054:	f006 facf 	bl	80085f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002058:	2007      	movs	r0, #7
 800205a:	f006 fae6 	bl	800862a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	2008      	movs	r0, #8
 8002064:	f006 fac7 	bl	80085f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002068:	2008      	movs	r0, #8
 800206a:	f006 fade 	bl	800862a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2009      	movs	r0, #9
 8002074:	f006 fabf 	bl	80085f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002078:	2009      	movs	r0, #9
 800207a:	f006 fad6 	bl	800862a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	2017      	movs	r0, #23
 8002084:	f006 fab7 	bl	80085f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002088:	2017      	movs	r0, #23
 800208a:	f006 face 	bl	800862a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	2028      	movs	r0, #40	@ 0x28
 8002094:	f006 faaf 	bl	80085f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002098:	2028      	movs	r0, #40	@ 0x28
 800209a:	f006 fac6 	bl	800862a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800209e:	bf00      	nop
 80020a0:	3730      	adds	r7, #48	@ 0x30
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	58024400 	.word	0x58024400
 80020ac:	58021000 	.word	0x58021000
 80020b0:	58020800 	.word	0x58020800
 80020b4:	58020000 	.word	0x58020000
 80020b8:	58020400 	.word	0x58020400
 80020bc:	58020c00 	.word	0x58020c00

080020c0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020c6:	463b      	mov	r3, r7
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80020d2:	f006 fac5 	bl	8008660 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020d6:	2301      	movs	r3, #1
 80020d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80020da:	2300      	movs	r3, #0
 80020dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80020e2:	231f      	movs	r3, #31
 80020e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80020e6:	2387      	movs	r3, #135	@ 0x87
 80020e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80020ee:	2300      	movs	r3, #0
 80020f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80020f2:	2301      	movs	r3, #1
 80020f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80020f6:	2301      	movs	r3, #1
 80020f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002102:	463b      	mov	r3, r7
 8002104:	4618      	mov	r0, r3
 8002106:	f006 fae3 	bl	80086d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800210a:	2004      	movs	r0, #4
 800210c:	f006 fac0 	bl	8008690 <HAL_MPU_Enable>

}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800211c:	b672      	cpsid	i
}
 800211e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <Error_Handler+0x8>

08002124 <Sequencer_Init>:
 */

#include "sequencer.h"

void Sequencer_Init(Sequencer* sequencer)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	sequencer->sequence_time_array = NULL;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = 0;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	605a      	str	r2, [r3, #4]
	sequencer->sequence_index = 0;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
	sequencer->time = 0;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	60da      	str	r2, [r3, #12]

	sequencer->is_running = 0;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	741a      	strb	r2, [r3, #16]
	sequencer->is_looping = 0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	745a      	strb	r2, [r3, #17]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <Sequencer_SetSequence>:

void Sequencer_SetSequence(Sequencer* sequencer, const uint32_t* sequence_time_array, const uint32_t sequence_len, uint8_t is_looping)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	70fb      	strb	r3, [r7, #3]
	sequencer->sequence_time_array = sequence_time_array;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = sequence_len;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	605a      	str	r2, [r3, #4]
	sequencer->is_looping = is_looping;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	745a      	strb	r2, [r3, #17]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <Sequencer_Update>:

uint32_t Sequencer_Update(Sequencer* sequencer, uint32_t time, uint32_t* index)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
	/*
	 * each element in the time array says how long to hold that step for
	 */

	if (sequencer->is_running && sequencer->sequence_time_array != NULL)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	7c1b      	ldrb	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d030      	beq.n	80021fe <Sequencer_Update+0x76>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d02c      	beq.n	80021fe <Sequencer_Update+0x76>
	{
		if (time > sequencer->time)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d927      	bls.n	80021fe <Sequencer_Update+0x76>
		{
			*index = sequencer->sequence_index;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	601a      	str	r2, [r3, #0]
			sequencer->time += sequencer->sequence_time_array[sequencer->sequence_index];
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	441a      	add	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	60da      	str	r2, [r3, #12]
			sequencer->sequence_index++;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	609a      	str	r2, [r3, #8]

			if (sequencer->sequence_index == sequencer->sequence_len)  /* reached the end of the sequence */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d10a      	bne.n	80021fa <Sequencer_Update+0x72>
			{
				if (sequencer->is_looping)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	7c5b      	ldrb	r3, [r3, #17]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <Sequencer_Update+0x6c>
					sequencer->sequence_index = 0;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	e002      	b.n	80021fa <Sequencer_Update+0x72>
				else
					sequencer->is_running = 0;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	741a      	strb	r2, [r3, #16]
			}

			return 1;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <Sequencer_Update+0x78>
		}
	}

	return 0;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <Sequencer_Start>:

void Sequencer_Start(Sequencer* sequencer, uint32_t time)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
	sequencer->time = time;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	60da      	str	r2, [r3, #12]
	sequencer->sequence_index = 0;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
	sequencer->is_running = 1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	741a      	strb	r2, [r3, #16]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <Sequencer_Stop>:

void Sequencer_Stop(Sequencer* sequencer)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	sequencer->is_running = 0;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	741a      	strb	r2, [r3, #16]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <Sequencer_IsRunning>:

uint32_t Sequencer_IsRunning(Sequencer* sequencer)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
	return sequencer->is_running;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7c1b      	ldrb	r3, [r3, #16]
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <HAL_MspInit+0x30>)
 8002270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002274:	4a08      	ldr	r2, [pc, #32]	@ (8002298 <HAL_MspInit+0x30>)
 8002276:	f043 0302 	orr.w	r3, r3, #2
 800227a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_MspInit+0x30>)
 8002280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	58024400 	.word	0x58024400

0800229c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	@ 0x30
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a39      	ldr	r2, [pc, #228]	@ (80023a0 <HAL_ADC_MspInit+0x104>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d133      	bne.n	8002326 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80022be:	4b39      	ldr	r3, [pc, #228]	@ (80023a4 <HAL_ADC_MspInit+0x108>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	4a37      	ldr	r2, [pc, #220]	@ (80023a4 <HAL_ADC_MspInit+0x108>)
 80022c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80022c8:	4b36      	ldr	r3, [pc, #216]	@ (80023a4 <HAL_ADC_MspInit+0x108>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d10e      	bne.n	80022ee <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80022d0:	4b35      	ldr	r3, [pc, #212]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 80022d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022d6:	4a34      	ldr	r2, [pc, #208]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 80022d8:	f043 0320 	orr.w	r3, r3, #32
 80022dc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80022e0:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 80022e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ee:	4b2e      	ldr	r3, [pc, #184]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 80022f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f4:	4a2c      	ldr	r2, [pc, #176]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 80022f6:	f043 0304 	orr.w	r3, r3, #4
 80022fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022fe:	4b2a      	ldr	r3, [pc, #168]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 8002300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800230c:	2330      	movs	r3, #48	@ 0x30
 800230e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002310:	2303      	movs	r3, #3
 8002312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	4619      	mov	r1, r3
 800231e:	4823      	ldr	r0, [pc, #140]	@ (80023ac <HAL_ADC_MspInit+0x110>)
 8002320:	f008 fda2 	bl	800ae68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002324:	e037      	b.n	8002396 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a21      	ldr	r2, [pc, #132]	@ (80023b0 <HAL_ADC_MspInit+0x114>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d132      	bne.n	8002396 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002330:	4b1c      	ldr	r3, [pc, #112]	@ (80023a4 <HAL_ADC_MspInit+0x108>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3301      	adds	r3, #1
 8002336:	4a1b      	ldr	r2, [pc, #108]	@ (80023a4 <HAL_ADC_MspInit+0x108>)
 8002338:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800233a:	4b1a      	ldr	r3, [pc, #104]	@ (80023a4 <HAL_ADC_MspInit+0x108>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10e      	bne.n	8002360 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002342:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 8002344:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002348:	4a17      	ldr	r2, [pc, #92]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 800234a:	f043 0320 	orr.w	r3, r3, #32
 800234e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002352:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 8002354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002360:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 8002362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002366:	4a10      	ldr	r2, [pc, #64]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002370:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 8002372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800237e:	23c0      	movs	r3, #192	@ 0xc0
 8002380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002382:	2303      	movs	r3, #3
 8002384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	4619      	mov	r1, r3
 8002390:	4808      	ldr	r0, [pc, #32]	@ (80023b4 <HAL_ADC_MspInit+0x118>)
 8002392:	f008 fd69 	bl	800ae68 <HAL_GPIO_Init>
}
 8002396:	bf00      	nop
 8002398:	3730      	adds	r7, #48	@ 0x30
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40022000 	.word	0x40022000
 80023a4:	24004628 	.word	0x24004628
 80023a8:	58024400 	.word	0x58024400
 80023ac:	58020800 	.word	0x58020800
 80023b0:	40022100 	.word	0x40022100
 80023b4:	58020000 	.word	0x58020000

080023b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	@ 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a48      	ldr	r2, [pc, #288]	@ (80024f8 <HAL_DAC_MspInit+0x140>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	f040 808a 	bne.w	80024f0 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80023dc:	4b47      	ldr	r3, [pc, #284]	@ (80024fc <HAL_DAC_MspInit+0x144>)
 80023de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023e2:	4a46      	ldr	r2, [pc, #280]	@ (80024fc <HAL_DAC_MspInit+0x144>)
 80023e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80023e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023ec:	4b43      	ldr	r3, [pc, #268]	@ (80024fc <HAL_DAC_MspInit+0x144>)
 80023ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	4b40      	ldr	r3, [pc, #256]	@ (80024fc <HAL_DAC_MspInit+0x144>)
 80023fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002400:	4a3e      	ldr	r2, [pc, #248]	@ (80024fc <HAL_DAC_MspInit+0x144>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800240a:	4b3c      	ldr	r3, [pc, #240]	@ (80024fc <HAL_DAC_MspInit+0x144>)
 800240c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002418:	2330      	movs	r3, #48	@ 0x30
 800241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800241c:	2303      	movs	r3, #3
 800241e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4619      	mov	r1, r3
 800242a:	4835      	ldr	r0, [pc, #212]	@ (8002500 <HAL_DAC_MspInit+0x148>)
 800242c:	f008 fd1c 	bl	800ae68 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8002430:	4b34      	ldr	r3, [pc, #208]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002432:	4a35      	ldr	r2, [pc, #212]	@ (8002508 <HAL_DAC_MspInit+0x150>)
 8002434:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002436:	4b33      	ldr	r3, [pc, #204]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002438:	2243      	movs	r2, #67	@ 0x43
 800243a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800243c:	4b31      	ldr	r3, [pc, #196]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 800243e:	2240      	movs	r2, #64	@ 0x40
 8002440:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002442:	4b30      	ldr	r3, [pc, #192]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002448:	4b2e      	ldr	r3, [pc, #184]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 800244a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800244e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002450:	4b2c      	ldr	r3, [pc, #176]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002452:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002456:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002458:	4b2a      	ldr	r3, [pc, #168]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 800245a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800245e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002460:	4b28      	ldr	r3, [pc, #160]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002462:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002466:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002468:	4b26      	ldr	r3, [pc, #152]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 800246a:	2200      	movs	r2, #0
 800246c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800246e:	4b25      	ldr	r3, [pc, #148]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002470:	2200      	movs	r2, #0
 8002472:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002474:	4823      	ldr	r0, [pc, #140]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002476:	f006 fc23 	bl	8008cc0 <HAL_DMA_Init>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8002480:	f7ff fe4a 	bl	8002118 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a1f      	ldr	r2, [pc, #124]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	4a1e      	ldr	r2, [pc, #120]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8002490:	4b1e      	ldr	r3, [pc, #120]	@ (800250c <HAL_DAC_MspInit+0x154>)
 8002492:	4a1f      	ldr	r2, [pc, #124]	@ (8002510 <HAL_DAC_MspInit+0x158>)
 8002494:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8002496:	4b1d      	ldr	r3, [pc, #116]	@ (800250c <HAL_DAC_MspInit+0x154>)
 8002498:	2244      	movs	r2, #68	@ 0x44
 800249a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800249c:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <HAL_DAC_MspInit+0x154>)
 800249e:	2240      	movs	r2, #64	@ 0x40
 80024a0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80024a8:	4b18      	ldr	r3, [pc, #96]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ae:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024b0:	4b16      	ldr	r3, [pc, #88]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024b6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024b8:	4b14      	ldr	r3, [pc, #80]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024be:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80024c0:	4b12      	ldr	r3, [pc, #72]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024c6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80024c8:	4b10      	ldr	r3, [pc, #64]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ce:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80024d4:	480d      	ldr	r0, [pc, #52]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024d6:	f006 fbf3 	bl	8008cc0 <HAL_DMA_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80024e0:	f7ff fe1a 	bl	8002118 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a09      	ldr	r2, [pc, #36]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	4a08      	ldr	r2, [pc, #32]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80024f0:	bf00      	nop
 80024f2:	3728      	adds	r7, #40	@ 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40007400 	.word	0x40007400
 80024fc:	58024400 	.word	0x58024400
 8002500:	58020000 	.word	0x58020000
 8002504:	240003dc 	.word	0x240003dc
 8002508:	40020010 	.word	0x40020010
 800250c:	24000454 	.word	0x24000454
 8002510:	40020028 	.word	0x40020028

08002514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b0b8      	sub	sp, #224	@ 0xe0
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	22b8      	movs	r2, #184	@ 0xb8
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f017 f9e4 	bl	8019902 <memset>
  if(hi2c->Instance==I2C2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a27      	ldr	r2, [pc, #156]	@ (80025dc <HAL_I2C_MspInit+0xc8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d146      	bne.n	80025d2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002544:	f04f 0208 	mov.w	r2, #8
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002556:	f107 0310 	add.w	r3, r7, #16
 800255a:	4618      	mov	r0, r3
 800255c:	f00b f9fa 	bl	800d954 <HAL_RCCEx_PeriphCLKConfig>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002566:	f7ff fdd7 	bl	8002118 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256a:	4b1d      	ldr	r3, [pc, #116]	@ (80025e0 <HAL_I2C_MspInit+0xcc>)
 800256c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002570:	4a1b      	ldr	r2, [pc, #108]	@ (80025e0 <HAL_I2C_MspInit+0xcc>)
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800257a:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <HAL_I2C_MspInit+0xcc>)
 800257c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002588:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800258c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002590:	2312      	movs	r3, #18
 8002592:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025a2:	2304      	movs	r3, #4
 80025a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025ac:	4619      	mov	r1, r3
 80025ae:	480d      	ldr	r0, [pc, #52]	@ (80025e4 <HAL_I2C_MspInit+0xd0>)
 80025b0:	f008 fc5a 	bl	800ae68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025b4:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <HAL_I2C_MspInit+0xcc>)
 80025b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025ba:	4a09      	ldr	r2, [pc, #36]	@ (80025e0 <HAL_I2C_MspInit+0xcc>)
 80025bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025c4:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <HAL_I2C_MspInit+0xcc>)
 80025c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80025d2:	bf00      	nop
 80025d4:	37e0      	adds	r7, #224	@ 0xe0
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40005800 	.word	0x40005800
 80025e0:	58024400 	.word	0x58024400
 80025e4:	58020400 	.word	0x58020400

080025e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b0bc      	sub	sp, #240	@ 0xf0
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002600:	f107 0320 	add.w	r3, r7, #32
 8002604:	22b8      	movs	r2, #184	@ 0xb8
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f017 f97a 	bl	8019902 <memset>
  if(hspi->Instance==SPI2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a72      	ldr	r2, [pc, #456]	@ (80027dc <HAL_SPI_MspInit+0x1f4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d146      	bne.n	80026a6 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002618:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002624:	2300      	movs	r3, #0
 8002626:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002628:	f107 0320 	add.w	r3, r7, #32
 800262c:	4618      	mov	r0, r3
 800262e:	f00b f991 	bl	800d954 <HAL_RCCEx_PeriphCLKConfig>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002638:	f7ff fd6e 	bl	8002118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800263c:	4b68      	ldr	r3, [pc, #416]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 800263e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002642:	4a67      	ldr	r2, [pc, #412]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002648:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800264c:	4b64      	ldr	r3, [pc, #400]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 800264e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265a:	4b61      	ldr	r3, [pc, #388]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 800265c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002660:	4a5f      	ldr	r2, [pc, #380]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 8002662:	f043 0302 	orr.w	r3, r3, #2
 8002666:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800266a:	4b5d      	ldr	r3, [pc, #372]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 800266c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8002678:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800267c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002692:	2305      	movs	r3, #5
 8002694:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002698:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800269c:	4619      	mov	r1, r3
 800269e:	4851      	ldr	r0, [pc, #324]	@ (80027e4 <HAL_SPI_MspInit+0x1fc>)
 80026a0:	f008 fbe2 	bl	800ae68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80026a4:	e096      	b.n	80027d4 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a4f      	ldr	r2, [pc, #316]	@ (80027e8 <HAL_SPI_MspInit+0x200>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d146      	bne.n	800273e <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80026b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026bc:	2300      	movs	r3, #0
 80026be:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c0:	f107 0320 	add.w	r3, r7, #32
 80026c4:	4618      	mov	r0, r3
 80026c6:	f00b f945 	bl	800d954 <HAL_RCCEx_PeriphCLKConfig>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 80026d0:	f7ff fd22 	bl	8002118 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026d4:	4b42      	ldr	r3, [pc, #264]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 80026d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026da:	4a41      	ldr	r2, [pc, #260]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 80026dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026e4:	4b3e      	ldr	r3, [pc, #248]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 80026e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f2:	4b3b      	ldr	r3, [pc, #236]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 80026f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026f8:	4a39      	ldr	r2, [pc, #228]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002702:	4b37      	ldr	r3, [pc, #220]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 8002704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ACCEL_SCK2_Pin|ACCEL_MISO2_Pin|ACCEL_MOSI2_Pin;
 8002710:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002714:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800272a:	2306      	movs	r3, #6
 800272c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002730:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002734:	4619      	mov	r1, r3
 8002736:	482d      	ldr	r0, [pc, #180]	@ (80027ec <HAL_SPI_MspInit+0x204>)
 8002738:	f008 fb96 	bl	800ae68 <HAL_GPIO_Init>
}
 800273c:	e04a      	b.n	80027d4 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a2b      	ldr	r2, [pc, #172]	@ (80027f0 <HAL_SPI_MspInit+0x208>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d145      	bne.n	80027d4 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002748:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800275a:	f107 0320 	add.w	r3, r7, #32
 800275e:	4618      	mov	r0, r3
 8002760:	f00b f8f8 	bl	800d954 <HAL_RCCEx_PeriphCLKConfig>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_SPI_MspInit+0x186>
      Error_Handler();
 800276a:	f7ff fcd5 	bl	8002118 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800276e:	4b1c      	ldr	r3, [pc, #112]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 8002770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002774:	4a1a      	ldr	r2, [pc, #104]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 8002776:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800277a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800277e:	4b18      	ldr	r3, [pc, #96]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 8002780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002784:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800278c:	4b14      	ldr	r3, [pc, #80]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 800278e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002792:	4a13      	ldr	r2, [pc, #76]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 8002794:	f043 0310 	orr.w	r3, r3, #16
 8002798:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800279c:	4b10      	ldr	r3, [pc, #64]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 800279e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_SCK3_Pin|ACCEL_MISO3_Pin|ACCEL_MOSI3_Pin;
 80027aa:	2364      	movs	r3, #100	@ 0x64
 80027ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80027c2:	2305      	movs	r3, #5
 80027c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027cc:	4619      	mov	r1, r3
 80027ce:	4809      	ldr	r0, [pc, #36]	@ (80027f4 <HAL_SPI_MspInit+0x20c>)
 80027d0:	f008 fb4a 	bl	800ae68 <HAL_GPIO_Init>
}
 80027d4:	bf00      	nop
 80027d6:	37f0      	adds	r7, #240	@ 0xf0
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40003800 	.word	0x40003800
 80027e0:	58024400 	.word	0x58024400
 80027e4:	58020400 	.word	0x58020400
 80027e8:	40003c00 	.word	0x40003c00
 80027ec:	58020800 	.word	0x58020800
 80027f0:	40013400 	.word	0x40013400
 80027f4:	58021000 	.word	0x58021000

080027f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a45      	ldr	r2, [pc, #276]	@ (800291c <HAL_TIM_Base_MspInit+0x124>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10f      	bne.n	800282a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800280a:	4b45      	ldr	r3, [pc, #276]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 800280c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002810:	4a43      	ldr	r2, [pc, #268]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800281a:	4b41      	ldr	r3, [pc, #260]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 800281c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002828:	e074      	b.n	8002914 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002832:	d10f      	bne.n	8002854 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002834:	4b3a      	ldr	r3, [pc, #232]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 8002836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800283a:	4a39      	ldr	r2, [pc, #228]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002844:	4b36      	ldr	r3, [pc, #216]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 8002846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
}
 8002852:	e05f      	b.n	8002914 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a32      	ldr	r2, [pc, #200]	@ (8002924 <HAL_TIM_Base_MspInit+0x12c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d117      	bne.n	800288e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800285e:	4b30      	ldr	r3, [pc, #192]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 8002860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002864:	4a2e      	ldr	r2, [pc, #184]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 8002866:	f043 0302 	orr.w	r3, r3, #2
 800286a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800286e:	4b2c      	ldr	r3, [pc, #176]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 8002870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	201d      	movs	r0, #29
 8002882:	f005 feb8 	bl	80085f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002886:	201d      	movs	r0, #29
 8002888:	f005 fecf 	bl	800862a <HAL_NVIC_EnableIRQ>
}
 800288c:	e042      	b.n	8002914 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a25      	ldr	r2, [pc, #148]	@ (8002928 <HAL_TIM_Base_MspInit+0x130>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d13d      	bne.n	8002914 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002898:	4b21      	ldr	r3, [pc, #132]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 800289a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800289e:	4a20      	ldr	r2, [pc, #128]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 80028a0:	f043 0304 	orr.w	r3, r3, #4
 80028a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 80028aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream2;
 80028b6:	4b1d      	ldr	r3, [pc, #116]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002930 <HAL_TIM_Base_MspInit+0x138>)
 80028ba:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028be:	221d      	movs	r2, #29
 80028c0:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c2:	4b1a      	ldr	r3, [pc, #104]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028c4:	2240      	movs	r2, #64	@ 0x40
 80028c6:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c8:	4b18      	ldr	r3, [pc, #96]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80028ce:	4b17      	ldr	r3, [pc, #92]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d4:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028d6:	4b15      	ldr	r3, [pc, #84]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028dc:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028de:	4b13      	ldr	r3, [pc, #76]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028e4:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80028e6:	4b11      	ldr	r3, [pc, #68]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80028ec:	4b0f      	ldr	r3, [pc, #60]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f2:	4b0e      	ldr	r3, [pc, #56]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80028f8:	480c      	ldr	r0, [pc, #48]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028fa:	f006 f9e1 	bl	8008cc0 <HAL_DMA_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_TIM_Base_MspInit+0x110>
      Error_Handler();
 8002904:	f7ff fc08 	bl	8002118 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a08      	ldr	r2, [pc, #32]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 800290c:	625a      	str	r2, [r3, #36]	@ 0x24
 800290e:	4a07      	ldr	r2, [pc, #28]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40010000 	.word	0x40010000
 8002920:	58024400 	.word	0x58024400
 8002924:	40000400 	.word	0x40000400
 8002928:	40000800 	.word	0x40000800
 800292c:	240007e8 	.word	0x240007e8
 8002930:	40020040 	.word	0x40020040

08002934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	@ 0x28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a26      	ldr	r2, [pc, #152]	@ (80029ec <HAL_TIM_MspPostInit+0xb8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d120      	bne.n	8002998 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002956:	4b26      	ldr	r3, [pc, #152]	@ (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 8002958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800295c:	4a24      	ldr	r2, [pc, #144]	@ (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002966:	4b22      	ldr	r3, [pc, #136]	@ (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8002974:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002986:	2302      	movs	r3, #2
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	4818      	ldr	r0, [pc, #96]	@ (80029f4 <HAL_TIM_MspPostInit+0xc0>)
 8002992:	f008 fa69 	bl	800ae68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002996:	e024      	b.n	80029e2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a16      	ldr	r2, [pc, #88]	@ (80029f8 <HAL_TIM_MspPostInit+0xc4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d11f      	bne.n	80029e2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a2:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 80029a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029a8:	4a11      	ldr	r2, [pc, #68]	@ (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 80029aa:	f043 0308 	orr.w	r3, r3, #8
 80029ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029b2:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 80029b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 80029c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029d2:	2302      	movs	r3, #2
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	4619      	mov	r1, r3
 80029dc:	4807      	ldr	r0, [pc, #28]	@ (80029fc <HAL_TIM_MspPostInit+0xc8>)
 80029de:	f008 fa43 	bl	800ae68 <HAL_GPIO_Init>
}
 80029e2:	bf00      	nop
 80029e4:	3728      	adds	r7, #40	@ 0x28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40000400 	.word	0x40000400
 80029f0:	58024400 	.word	0x58024400
 80029f4:	58020800 	.word	0x58020800
 80029f8:	40000800 	.word	0x40000800
 80029fc:	58020c00 	.word	0x58020c00

08002a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b0ba      	sub	sp, #232	@ 0xe8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a18:	f107 0318 	add.w	r3, r7, #24
 8002a1c:	22b8      	movs	r2, #184	@ 0xb8
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f016 ff6e 	bl	8019902 <memset>
  if(huart->Instance==UART7)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a4d      	ldr	r2, [pc, #308]	@ (8002b60 <HAL_UART_MspInit+0x160>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d147      	bne.n	8002ac0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002a30:	f04f 0202 	mov.w	r2, #2
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a42:	f107 0318 	add.w	r3, r7, #24
 8002a46:	4618      	mov	r0, r3
 8002a48:	f00a ff84 	bl	800d954 <HAL_RCCEx_PeriphCLKConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002a52:	f7ff fb61 	bl	8002118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002a56:	4b43      	ldr	r3, [pc, #268]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a5c:	4a41      	ldr	r2, [pc, #260]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002a5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a66:	4b3f      	ldr	r3, [pc, #252]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a74:	4b3b      	ldr	r3, [pc, #236]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a7a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002a7c:	f043 0310 	orr.w	r3, r3, #16
 8002a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a84:	4b37      	ldr	r3, [pc, #220]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002a92:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002a96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002aac:	2307      	movs	r3, #7
 8002aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ab2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	482b      	ldr	r0, [pc, #172]	@ (8002b68 <HAL_UART_MspInit+0x168>)
 8002aba:	f008 f9d5 	bl	800ae68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002abe:	e04a      	b.n	8002b56 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a29      	ldr	r2, [pc, #164]	@ (8002b6c <HAL_UART_MspInit+0x16c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d145      	bne.n	8002b56 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002aca:	f04f 0201 	mov.w	r2, #1
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002adc:	f107 0318 	add.w	r3, r7, #24
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f00a ff37 	bl	800d954 <HAL_RCCEx_PeriphCLKConfig>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002aec:	f7ff fb14 	bl	8002118 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002af0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002af6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002af8:	f043 0310 	orr.w	r3, r3, #16
 8002afc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b00:	4b18      	ldr	r3, [pc, #96]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b14:	4a13      	ldr	r2, [pc, #76]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b1e:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002b2c:	23c0      	movs	r3, #192	@ 0xc0
 8002b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b32:	2302      	movs	r3, #2
 8002b34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b44:	2307      	movs	r3, #7
 8002b46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4807      	ldr	r0, [pc, #28]	@ (8002b70 <HAL_UART_MspInit+0x170>)
 8002b52:	f008 f989 	bl	800ae68 <HAL_GPIO_Init>
}
 8002b56:	bf00      	nop
 8002b58:	37e8      	adds	r7, #232	@ 0xe8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40007800 	.word	0x40007800
 8002b64:	58024400 	.word	0x58024400
 8002b68:	58021000 	.word	0x58021000
 8002b6c:	40011000 	.word	0x40011000
 8002b70:	58020400 	.word	0x58020400

08002b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b78:	bf00      	nop
 8002b7a:	e7fd      	b.n	8002b78 <NMI_Handler+0x4>

08002b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <HardFault_Handler+0x4>

08002b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <MemManage_Handler+0x4>

08002b8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <BusFault_Handler+0x4>

08002b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <UsageFault_Handler+0x4>

08002b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bca:	f004 f881 	bl	8006cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA2_Pin);
 8002bd6:	2002      	movs	r0, #2
 8002bd8:	f008 fb1f 	bl	800b21a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB2_Pin);
 8002be4:	2004      	movs	r0, #4
 8002be6:	f008 fb18 	bl	800b21a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}

08002bee <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA3_Pin);
 8002bf2:	2008      	movs	r0, #8
 8002bf4:	f008 fb11 	bl	800b21a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002c00:	4802      	ldr	r0, [pc, #8]	@ (8002c0c <DMA1_Stream0_IRQHandler+0x10>)
 8002c02:	f006 fe1f 	bl	8009844 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	240003dc 	.word	0x240003dc

08002c10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002c14:	4802      	ldr	r0, [pc, #8]	@ (8002c20 <DMA1_Stream1_IRQHandler+0x10>)
 8002c16:	f006 fe15 	bl	8009844 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	24000454 	.word	0x24000454

08002c24 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002c28:	4802      	ldr	r0, [pc, #8]	@ (8002c34 <DMA1_Stream2_IRQHandler+0x10>)
 8002c2a:	f006 fe0b 	bl	8009844 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	240007e8 	.word	0x240007e8

08002c38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA1_Pin);
 8002c3c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002c40:	f008 faeb 	bl	800b21a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB1_Pin);
 8002c44:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c48:	f008 fae7 	bl	800b21a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c54:	4802      	ldr	r0, [pc, #8]	@ (8002c60 <TIM3_IRQHandler+0x10>)
 8002c56:	f00e ff3b 	bl	8011ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	24000750 	.word	0x24000750

08002c64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB3_Pin);
 8002c68:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002c6c:	f008 fad5 	bl	800b21a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002c78:	4802      	ldr	r0, [pc, #8]	@ (8002c84 <OTG_HS_IRQHandler+0x10>)
 8002c7a:	f008 fd5d 	bl	800b738 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	24005b14 	.word	0x24005b14

08002c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return 1;
 8002c8c:	2301      	movs	r3, #1
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_kill>:

int _kill(int pid, int sig)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ca2:	f016 fe9f 	bl	80199e4 <__errno>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2216      	movs	r2, #22
 8002caa:	601a      	str	r2, [r3, #0]
  return -1;
 8002cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_exit>:

void _exit (int status)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ffe7 	bl	8002c98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cca:	bf00      	nop
 8002ccc:	e7fd      	b.n	8002cca <_exit+0x12>

08002cce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e00a      	b.n	8002cf6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ce0:	f3af 8000 	nop.w
 8002ce4:	4601      	mov	r1, r0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	60ba      	str	r2, [r7, #8]
 8002cec:	b2ca      	uxtb	r2, r1
 8002cee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	dbf0      	blt.n	8002ce0 <_read+0x12>
  }

  return len;
 8002cfe:	687b      	ldr	r3, [r7, #4]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	e009      	b.n	8002d2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	60ba      	str	r2, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	dbf1      	blt.n	8002d1a <_write+0x12>
  }
  return len;
 8002d36:	687b      	ldr	r3, [r7, #4]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_close>:

int _close(int file)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d68:	605a      	str	r2, [r3, #4]
  return 0;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_isatty>:

int _isatty(int file)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d80:	2301      	movs	r3, #1
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b085      	sub	sp, #20
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db0:	4a14      	ldr	r2, [pc, #80]	@ (8002e04 <_sbrk+0x5c>)
 8002db2:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <_sbrk+0x60>)
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dbc:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <_sbrk+0x64>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc4:	4b11      	ldr	r3, [pc, #68]	@ (8002e0c <_sbrk+0x64>)
 8002dc6:	4a12      	ldr	r2, [pc, #72]	@ (8002e10 <_sbrk+0x68>)
 8002dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dca:	4b10      	ldr	r3, [pc, #64]	@ (8002e0c <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d207      	bcs.n	8002de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dd8:	f016 fe04 	bl	80199e4 <__errno>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	220c      	movs	r2, #12
 8002de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	e009      	b.n	8002dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002de8:	4b08      	ldr	r3, [pc, #32]	@ (8002e0c <_sbrk+0x64>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dee:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <_sbrk+0x64>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	4a05      	ldr	r2, [pc, #20]	@ (8002e0c <_sbrk+0x64>)
 8002df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	24050000 	.word	0x24050000
 8002e08:	00000400 	.word	0x00000400
 8002e0c:	2400462c 	.word	0x2400462c
 8002e10:	24006368 	.word	0x24006368

08002e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e18:	4b32      	ldr	r3, [pc, #200]	@ (8002ee4 <SystemInit+0xd0>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1e:	4a31      	ldr	r2, [pc, #196]	@ (8002ee4 <SystemInit+0xd0>)
 8002e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e28:	4b2f      	ldr	r3, [pc, #188]	@ (8002ee8 <SystemInit+0xd4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	2b06      	cmp	r3, #6
 8002e32:	d807      	bhi.n	8002e44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e34:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee8 <SystemInit+0xd4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 030f 	bic.w	r3, r3, #15
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ee8 <SystemInit+0xd4>)
 8002e3e:	f043 0307 	orr.w	r3, r3, #7
 8002e42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e44:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <SystemInit+0xd8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a28      	ldr	r2, [pc, #160]	@ (8002eec <SystemInit+0xd8>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e50:	4b26      	ldr	r3, [pc, #152]	@ (8002eec <SystemInit+0xd8>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e56:	4b25      	ldr	r3, [pc, #148]	@ (8002eec <SystemInit+0xd8>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4924      	ldr	r1, [pc, #144]	@ (8002eec <SystemInit+0xd8>)
 8002e5c:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <SystemInit+0xdc>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e62:	4b21      	ldr	r3, [pc, #132]	@ (8002ee8 <SystemInit+0xd4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee8 <SystemInit+0xd4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 030f 	bic.w	r3, r3, #15
 8002e76:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee8 <SystemInit+0xd4>)
 8002e78:	f043 0307 	orr.w	r3, r3, #7
 8002e7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002eec <SystemInit+0xd8>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e84:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <SystemInit+0xd8>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e8a:	4b18      	ldr	r3, [pc, #96]	@ (8002eec <SystemInit+0xd8>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e90:	4b16      	ldr	r3, [pc, #88]	@ (8002eec <SystemInit+0xd8>)
 8002e92:	4a18      	ldr	r2, [pc, #96]	@ (8002ef4 <SystemInit+0xe0>)
 8002e94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <SystemInit+0xd8>)
 8002e98:	4a17      	ldr	r2, [pc, #92]	@ (8002ef8 <SystemInit+0xe4>)
 8002e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <SystemInit+0xd8>)
 8002e9e:	4a17      	ldr	r2, [pc, #92]	@ (8002efc <SystemInit+0xe8>)
 8002ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ea2:	4b12      	ldr	r3, [pc, #72]	@ (8002eec <SystemInit+0xd8>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ea8:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <SystemInit+0xd8>)
 8002eaa:	4a14      	ldr	r2, [pc, #80]	@ (8002efc <SystemInit+0xe8>)
 8002eac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002eae:	4b0f      	ldr	r3, [pc, #60]	@ (8002eec <SystemInit+0xd8>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <SystemInit+0xd8>)
 8002eb6:	4a11      	ldr	r2, [pc, #68]	@ (8002efc <SystemInit+0xe8>)
 8002eb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002eba:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <SystemInit+0xd8>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8002eec <SystemInit+0xd8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a09      	ldr	r2, [pc, #36]	@ (8002eec <SystemInit+0xd8>)
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ecc:	4b07      	ldr	r3, [pc, #28]	@ (8002eec <SystemInit+0xd8>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <SystemInit+0xec>)
 8002ed4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002ed8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00
 8002ee8:	52002000 	.word	0x52002000
 8002eec:	58024400 	.word	0x58024400
 8002ef0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ef4:	02020200 	.word	0x02020200
 8002ef8:	01ff0000 	.word	0x01ff0000
 8002efc:	01010280 	.word	0x01010280
 8002f00:	52004000 	.word	0x52004000

08002f04 <FindClosest>:
 */

#include "util.h"

uint32_t FindClosest(const uint32_t* arr, uint32_t len, uint32_t target)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	@ 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
	uint32_t min_diff = 0xFFFFFFFF;
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
 8002f14:	61fb      	str	r3, [r7, #28]
	uint32_t closest_value = arr[0];
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	61bb      	str	r3, [r7, #24]

	for (uint32_t i = 0; i < len; i++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	e019      	b.n	8002f56 <FindClosest+0x52>
	{
		uint32_t diff = abs(arr[i] - target);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4413      	add	r3, r2
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bfb8      	it	lt
 8002f34:	425b      	neglt	r3, r3
 8002f36:	613b      	str	r3, [r7, #16]

		if (diff < min_diff)
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d207      	bcs.n	8002f50 <FindClosest+0x4c>
		{
			min_diff = diff;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	61fb      	str	r3, [r7, #28]
			closest_value = arr[i];
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	61bb      	str	r3, [r7, #24]
	for (uint32_t i = 0; i < len; i++)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	3301      	adds	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d3e1      	bcc.n	8002f22 <FindClosest+0x1e>
		}
	}

	return closest_value;
 8002f5e:	69bb      	ldr	r3, [r7, #24]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3724      	adds	r7, #36	@ 0x24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <VibeCheck_Init>:
		DAC_HandleTypeDef* hdac_wavegen,
		TIM_HandleTypeDef* htim_rgb,
		SPI_HandleTypeDef* hspi_accel0,
		SPI_HandleTypeDef* hspi_accel1,
		SPI_HandleTypeDef* hspi_accel2)
{
 8002f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6e:	b0e5      	sub	sp, #404	@ 0x194
 8002f70:	af10      	add	r7, sp, #64	@ 0x40
 8002f72:	f507 74a8 	add.w	r4, r7, #336	@ 0x150
 8002f76:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8002f7a:	6020      	str	r0, [r4, #0]
 8002f7c:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8002f80:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 8002f84:	6001      	str	r1, [r0, #0]
 8002f86:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8002f8a:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8002f8e:	600a      	str	r2, [r1, #0]
 8002f90:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002f94:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8002f98:	6013      	str	r3, [r2, #0]

	HAL_Delay(10);  /* wait for steady power so the RGB LEDs don't get into a weird state */
 8002f9a:	200a      	movs	r0, #10
 8002f9c:	f003 feb8 	bl	8006d10 <HAL_Delay>

	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 8002fa0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002fa4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f001 ff42 	bl	8004e34 <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 8002fb0:	4acb      	ldr	r2, [pc, #812]	@ (80032e0 <VibeCheck_Init+0x374>)
 8002fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002fb6:	6810      	ldr	r0, [r2, #0]
 8002fb8:	6018      	str	r0, [r3, #0]
 8002fba:	8891      	ldrh	r1, [r2, #4]
 8002fbc:	7992      	ldrb	r2, [r2, #6]
 8002fbe:	8099      	strh	r1, [r3, #4]
 8002fc0:	719a      	strb	r2, [r3, #6]
 8002fc2:	f207 130f 	addw	r3, r7, #271	@ 0x10f
 8002fc6:	2239      	movs	r2, #57	@ 0x39
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f016 fc99 	bl	8019902 <memset>
 8002fd0:	4bc4      	ldr	r3, [pc, #784]	@ (80032e4 <VibeCheck_Init+0x378>)
 8002fd2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 8002fd6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002fda:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	f242 4324 	movw	r3, #9252	@ 0x2424
 8002fe4:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 8002fe6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 8002fea:	4abf      	ldr	r2, [pc, #764]	@ (80032e8 <VibeCheck_Init+0x37c>)
 8002fec:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002ff0:	6810      	ldr	r0, [r2, #0]
 8002ff2:	6851      	ldr	r1, [r2, #4]
 8002ff4:	c303      	stmia	r3!, {r0, r1}
 8002ff6:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002ffa:	2238      	movs	r2, #56	@ 0x38
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f016 fc7f 	bl	8019902 <memset>
 8003004:	4bb9      	ldr	r3, [pc, #740]	@ (80032ec <VibeCheck_Init+0x380>)
 8003006:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 800300a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800300e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	f242 4344 	movw	r3, #9284	@ 0x2444
 8003018:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 800301a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	};

	VibeCheckShell_InputHandler rgb_cmd = {
 800301e:	4bb4      	ldr	r3, [pc, #720]	@ (80032f0 <VibeCheck_Init+0x384>)
 8003020:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003022:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003026:	223c      	movs	r2, #60	@ 0x3c
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f016 fc69 	bl	8019902 <memset>
 8003030:	4bb0      	ldr	r3, [pc, #704]	@ (80032f4 <VibeCheck_Init+0x388>)
 8003032:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			.name = "rgb",
			.execute = VibeCheckRGBCMD_Execute,
			.obj = &vc->rgb
 8003036:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800303a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	f243 4390 	movw	r3, #13456	@ 0x3490
 8003044:	4413      	add	r3, r2
	VibeCheckShell_InputHandler rgb_cmd = {
 8003046:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	};

	VibeCheckShell_InputHandler sensor_cmd = {
 800304a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800304e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003052:	4aa9      	ldr	r2, [pc, #676]	@ (80032f8 <VibeCheck_Init+0x38c>)
 8003054:	460b      	mov	r3, r1
 8003056:	6810      	ldr	r0, [r2, #0]
 8003058:	6018      	str	r0, [r3, #0]
 800305a:	8890      	ldrh	r0, [r2, #4]
 800305c:	7992      	ldrb	r2, [r2, #6]
 800305e:	8098      	strh	r0, [r3, #4]
 8003060:	719a      	strb	r2, [r3, #6]
 8003062:	1dcb      	adds	r3, r1, #7
 8003064:	2239      	movs	r2, #57	@ 0x39
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f016 fc4a 	bl	8019902 <memset>
 800306e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003072:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003076:	4aa1      	ldr	r2, [pc, #644]	@ (80032fc <VibeCheck_Init+0x390>)
 8003078:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "sensor",
			.execute = VibeCheckSensorCMD_Execute,
			.obj = &vc->sensor
 800307a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800307e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	f643 2310 	movw	r3, #14864	@ 0x3a10
 8003088:	4413      	add	r3, r2
	VibeCheckShell_InputHandler sensor_cmd = {
 800308a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800308e:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8003092:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 8003094:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003098:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800309c:	681e      	ldr	r6, [r3, #0]
 800309e:	466d      	mov	r5, sp
 80030a0:	f507 748a 	add.w	r4, r7, #276	@ 0x114
 80030a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80030b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80030bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030be:	4630      	mov	r0, r6
 80030c0:	f001 ffe6 	bl	8005090 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 80030c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030cc:	681e      	ldr	r6, [r3, #0]
 80030ce:	466d      	mov	r5, sp
 80030d0:	f107 04cc 	add.w	r4, r7, #204	@ 0xcc
 80030d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80030e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030e8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80030ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ee:	4630      	mov	r0, r6
 80030f0:	f001 ffce 	bl	8005090 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, rgb_cmd);
 80030f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030fc:	681e      	ldr	r6, [r3, #0]
 80030fe:	466d      	mov	r5, sp
 8003100:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 8003104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800310a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800310c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800310e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003110:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003114:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003118:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800311c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800311e:	4630      	mov	r0, r6
 8003120:	f001 ffb6 	bl	8005090 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, sensor_cmd);
 8003124:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003128:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003134:	f5a3 7690 	sub.w	r6, r3, #288	@ 0x120
 8003138:	466d      	mov	r5, sp
 800313a:	f106 040c 	add.w	r4, r6, #12
 800313e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800314a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800314e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003152:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f001 ff9a 	bl	8005090 <VibeCheckShell_RegisterInputHandler>

	VibeCheckShell_OutputHandler wavegen_sender = {
 800315c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003160:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003164:	4a66      	ldr	r2, [pc, #408]	@ (8003300 <VibeCheck_Init+0x394>)
 8003166:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckWaveGenSender_Execute,
			.obj = &vc->wavegen
 8003168:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800316c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	f242 4344 	movw	r3, #9284	@ 0x2444
 8003176:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler wavegen_sender = {
 8003178:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800317c:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8003180:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_data_sender = {
 8003182:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003186:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800318a:	4a5e      	ldr	r2, [pc, #376]	@ (8003304 <VibeCheck_Init+0x398>)
 800318c:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Data_Execute,
			.obj = &vc->sensor
 800318e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003192:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	f643 2310 	movw	r3, #14864	@ 0x3a10
 800319c:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_data_sender = {
 800319e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80031a2:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80031a6:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_status_sender = {
 80031a8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031ac:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80031b0:	4a55      	ldr	r2, [pc, #340]	@ (8003308 <VibeCheck_Init+0x39c>)
 80031b2:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Status_Execute,
			.obj = &vc->sensor
 80031b4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	f643 2310 	movw	r3, #14864	@ 0x3a10
 80031c2:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_status_sender = {
 80031c4:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80031c8:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80031cc:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_RegisterOutputHandler(&vc->shell, wavegen_sender);
 80031ce:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031d2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80031e0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80031e4:	f001 ff86 	bl	80050f4 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_data_sender);
 80031e8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80031fa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80031fe:	f001 ff79 	bl	80050f4 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_status_sender);
 8003202:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003206:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003210:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003214:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003218:	f001 ff6c 	bl	80050f4 <VibeCheckShell_RegisterOutputHandler>

	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 800321c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003220:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	f242 4324 	movw	r3, #9252	@ 0x2424
 800322a:	4413      	add	r3, r2
 800322c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003230:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8003234:	6811      	ldr	r1, [r2, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f002 f9f2 	bl	8005620 <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 800323c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003240:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	f242 4344 	movw	r3, #9284	@ 0x2444
 800324a:	4413      	add	r3, r2
 800324c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003250:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8003254:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8003258:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	6809      	ldr	r1, [r1, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f002 ff2f 	bl	80060c4 <VibeCheckWaveGen_Init>
	VibeCheckRGB_Init(&vc->rgb, htim_rgb);
 8003266:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800326a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	f243 4390 	movw	r3, #13456	@ 0x3490
 8003274:	4413      	add	r3, r2
 8003276:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f887 	bl	800338e <VibeCheckRGB_Init>
	VibeCheckRGB_SetBaseSequence(&vc->rgb, base_sequence_times, base_sequence_colors, base_sequence_len);
 8003280:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003284:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f243 4090 	movw	r0, #13456	@ 0x3490
 800328e:	4418      	add	r0, r3
 8003290:	2310      	movs	r3, #16
 8003292:	4a1e      	ldr	r2, [pc, #120]	@ (800330c <VibeCheck_Init+0x3a0>)
 8003294:	491e      	ldr	r1, [pc, #120]	@ (8003310 <VibeCheck_Init+0x3a4>)
 8003296:	f000 f92d 	bl	80034f4 <VibeCheckRGB_SetBaseSequence>
	VibeCheckRGB_SetTopSequence(&vc->rgb, top_sequence_times, top_sequence_colors, top_sequence_len);
 800329a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800329e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f243 4090 	movw	r0, #13456	@ 0x3490
 80032a8:	4418      	add	r0, r3
 80032aa:	2304      	movs	r3, #4
 80032ac:	4a19      	ldr	r2, [pc, #100]	@ (8003314 <VibeCheck_Init+0x3a8>)
 80032ae:	491a      	ldr	r1, [pc, #104]	@ (8003318 <VibeCheck_Init+0x3ac>)
 80032b0:	f000 f957 	bl	8003562 <VibeCheckRGB_SetTopSequence>
	VibeCheckSensor_Init(&vc->sensor, hspi_accel0, hspi_accel1, hspi_accel2);
 80032b4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f643 2010 	movw	r0, #14864	@ 0x3a10
 80032c2:	4418      	add	r0, r3
 80032c4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80032c8:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80032cc:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80032d0:	f000 fb5e 	bl	8003990 <VibeCheckSensor_Init>
}
 80032d4:	bf00      	nop
 80032d6:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 80032da:	46bd      	mov	sp, r7
 80032dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032de:	bf00      	nop
 80032e0:	0801d060 	.word	0x0801d060
 80032e4:	08005bc1 	.word	0x08005bc1
 80032e8:	0801d068 	.word	0x0801d068
 80032ec:	080069c5 	.word	0x080069c5
 80032f0:	00626772 	.word	0x00626772
 80032f4:	080037c9 	.word	0x080037c9
 80032f8:	0801d070 	.word	0x0801d070
 80032fc:	08004a8d 	.word	0x08004a8d
 8003300:	08006b21 	.word	0x08006b21
 8003304:	08004cdd 	.word	0x08004cdd
 8003308:	08004da9 	.word	0x08004da9
 800330c:	0801d33c 	.word	0x0801d33c
 8003310:	0801d2fc 	.word	0x0801d2fc
 8003314:	0801d290 	.word	0x0801d290
 8003318:	0801d280 	.word	0x0801d280

0800331c <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Update(&vc->wavegen);
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	f242 4344 	movw	r3, #9284	@ 0x2444
 800332a:	4413      	add	r3, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f002 ff69 	bl	8006204 <VibeCheckWaveGen_Update>
	VibeCheckRGB_Update(&vc->rgb);
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	f243 4390 	movw	r3, #13456	@ 0x3490
 8003338:	4413      	add	r3, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f85d 	bl	80033fa <VibeCheckRGB_Update>
	VibeCheckSensor_Update(&vc->sensor);
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	f643 2310 	movw	r3, #14864	@ 0x3a10
 8003346:	4413      	add	r3, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fc2b 	bl	8003ba4 <VibeCheckSensor_Update>

	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4618      	mov	r0, r3
 8003352:	f001 fda9 	bl	8004ea8 <VibeCheckShell_Update>
 8003356:	4603      	mov	r3, r0
 8003358:	617b      	str	r3, [r7, #20]

	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f107 020c 	add.w	r2, r7, #12
 8003360:	f107 0110 	add.w	r1, r7, #16
 8003364:	4618      	mov	r0, r3
 8003366:	f001 ff3b 	bl	80051e0 <VibeCheckShell_GetOutput>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <VibeCheck_Loop+0x6a>
		while (CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len) != USBD_OK);  /* block until the USB transmission starts to make sure we send all data */
 8003370:	bf00      	nop
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	b292      	uxth	r2, r2
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f014 fac8 	bl	8017910 <CDC_Transmit_HS>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f5      	bne.n	8003372 <VibeCheck_Loop+0x56>
}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <VibeCheckRGB_Init>:

#include "vibecheck_rgb.h"


void VibeCheckRGB_Init(VibeCheckRGB* rgb, TIM_HandleTypeDef* htim)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b084      	sub	sp, #16
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	6039      	str	r1, [r7, #0]
	Sequencer_Init(&rgb->base_sequence);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fec0 	bl	8002124 <Sequencer_Init>
	Sequencer_Init(&rgb->top_sequence);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe feba 	bl	8002124 <Sequencer_Init>

	htim->Instance->PSC = VC_RGB_TIM_PSC - 1;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2202      	movs	r2, #2
 80033b6:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = VC_RGB_TIM_ARR - 1;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2263      	movs	r2, #99	@ 0x63
 80033be:	62da      	str	r2, [r3, #44]	@ 0x2c
	rgb->htim = htim;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	601a      	str	r2, [r3, #0]

	/* clear the DMA buffer, particularly setting all zeros during the reset time */
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	e008      	b.n	80033de <VibeCheckRGB_Init+0x50>
		rgb->bit_stream[i] = 0;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	3210      	adds	r2, #16
 80033d2:	2100      	movs	r1, #0
 80033d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3301      	adds	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f5b3 7f26 	cmp.w	r3, #664	@ 0x298
 80033e4:	d3f2      	bcc.n	80033cc <VibeCheckRGB_Init+0x3e>

	/* turn off all LEDs */
	VibeCheckRGB_SetAllOff(rgb);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f94a 	bl	8003680 <VibeCheckRGB_SetAllOff>
	VibeCheckRGB_SendColors(rgb);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f961 	bl	80036b4 <VibeCheckRGB_SendColors>
}
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <VibeCheckRGB_Update>:


void VibeCheckRGB_Update(VibeCheckRGB* rgb)  /* call repeatedly in the main loop */
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b08a      	sub	sp, #40	@ 0x28
 80033fe:	af02      	add	r7, sp, #8
 8003400:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003402:	f003 fc79 	bl	8006cf8 <HAL_GetTick>
 8003406:	6178      	str	r0, [r7, #20]
	uint32_t step;
	if (Sequencer_Update(&rgb->top_sequence, time, &step))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 800340e:	f107 0210 	add.w	r2, r7, #16
 8003412:	6979      	ldr	r1, [r7, #20]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fe feb7 	bl	8002188 <Sequencer_Update>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d028      	beq.n	8003472 <VibeCheckRGB_Update+0x78>
	{
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
 8003424:	e01e      	b.n	8003464 <VibeCheckRGB_Update+0x6a>
		{
			VibeCheckRGB_Color color = rgb->top_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 157c 	ldr.w	r1, [r3, #1404]	@ 0x57c
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	441a      	add	r2, r3
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	441a      	add	r2, r3
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	18ca      	adds	r2, r1, r3
 8003440:	f107 030c 	add.w	r3, r7, #12
 8003444:	8811      	ldrh	r1, [r2, #0]
 8003446:	7892      	ldrb	r2, [r2, #2]
 8003448:	8019      	strh	r1, [r3, #0]
 800344a:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 800344c:	7b3a      	ldrb	r2, [r7, #12]
 800344e:	7b79      	ldrb	r1, [r7, #13]
 8003450:	7bbb      	ldrb	r3, [r7, #14]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	460b      	mov	r3, r1
 8003456:	69f9      	ldr	r1, [r7, #28]
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f8b9 	bl	80035d0 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3301      	adds	r3, #1
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	2b08      	cmp	r3, #8
 8003468:	d9dd      	bls.n	8003426 <VibeCheckRGB_Update+0x2c>
		}
		VibeCheckRGB_SendColors(rgb);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f922 	bl	80036b4 <VibeCheckRGB_SendColors>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
		}
		VibeCheckRGB_SendColors(rgb);
	}
}
 8003470:	e03c      	b.n	80034ec <VibeCheckRGB_Update+0xf2>
	else if (!Sequencer_IsRunning(&rgb->top_sequence) && Sequencer_Update(&rgb->base_sequence, time, &step))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003478:	4618      	mov	r0, r3
 800347a:	f7fe fee8 	bl	800224e <Sequencer_IsRunning>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d133      	bne.n	80034ec <VibeCheckRGB_Update+0xf2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 800348a:	f107 0210 	add.w	r2, r7, #16
 800348e:	6979      	ldr	r1, [r7, #20]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe fe79 	bl	8002188 <Sequencer_Update>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d027      	beq.n	80034ec <VibeCheckRGB_Update+0xf2>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	e01e      	b.n	80034e0 <VibeCheckRGB_Update+0xe6>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 1564 	ldr.w	r1, [r3, #1380]	@ 0x564
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	441a      	add	r2, r3
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	441a      	add	r2, r3
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	18ca      	adds	r2, r1, r3
 80034bc:	f107 0308 	add.w	r3, r7, #8
 80034c0:	8811      	ldrh	r1, [r2, #0]
 80034c2:	7892      	ldrb	r2, [r2, #2]
 80034c4:	8019      	strh	r1, [r3, #0]
 80034c6:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 80034c8:	7a3a      	ldrb	r2, [r7, #8]
 80034ca:	7a79      	ldrb	r1, [r7, #9]
 80034cc:	7abb      	ldrb	r3, [r7, #10]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	460b      	mov	r3, r1
 80034d2:	69b9      	ldr	r1, [r7, #24]
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f87b 	bl	80035d0 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	3301      	adds	r3, #1
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d9dd      	bls.n	80034a2 <VibeCheckRGB_Update+0xa8>
		VibeCheckRGB_SendColors(rgb);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f8e4 	bl	80036b4 <VibeCheckRGB_SendColors>
}
 80034ec:	bf00      	nop
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <VibeCheckRGB_SetBaseSequence>:


void VibeCheckRGB_SetBaseSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
	rgb->base_sequence_colors = color;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	f8c3 2564 	str.w	r2, [r3, #1380]	@ 0x564
	Sequencer_SetSequence(&rgb->base_sequence, time, len, 1);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f503 60aa 	add.w	r0, r3, #1360	@ 0x550
 8003510:	2301      	movs	r3, #1
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	f7fe fe21 	bl	800215c <Sequencer_SetSequence>
}
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <VibeCheckRGB_StartBaseSequence>:

void VibeCheckRGB_StartBaseSequence(VibeCheckRGB* rgb)
{
 8003522:	b590      	push	{r4, r7, lr}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->base_sequence, HAL_GetTick());
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f503 64aa 	add.w	r4, r3, #1360	@ 0x550
 8003530:	f003 fbe2 	bl	8006cf8 <HAL_GetTick>
 8003534:	4603      	mov	r3, r0
 8003536:	4619      	mov	r1, r3
 8003538:	4620      	mov	r0, r4
 800353a:	f7fe fe67 	bl	800220c <Sequencer_Start>
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	bd90      	pop	{r4, r7, pc}

08003546 <VibeCheckRGB_StopBaseSequence>:

void VibeCheckRGB_StopBaseSequence(VibeCheckRGB* rgb)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->base_sequence);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fe6d 	bl	8002234 <Sequencer_Stop>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <VibeCheckRGB_SetTopSequence>:

void VibeCheckRGB_SetTopSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
 800356e:	603b      	str	r3, [r7, #0]
	rgb->top_sequence_colors = color;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	f8c3 257c 	str.w	r2, [r3, #1404]	@ 0x57c
	Sequencer_SetSequence(&rgb->top_sequence, time, len, 0);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f503 60ad 	add.w	r0, r3, #1384	@ 0x568
 800357e:	2300      	movs	r3, #0
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	f7fe fdea 	bl	800215c <Sequencer_SetSequence>
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <VibeCheckRGB_StartTopSequence>:

void VibeCheckRGB_StartTopSequence(VibeCheckRGB* rgb)
{
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->top_sequence, HAL_GetTick());
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f503 64ad 	add.w	r4, r3, #1384	@ 0x568
 800359e:	f003 fbab 	bl	8006cf8 <HAL_GetTick>
 80035a2:	4603      	mov	r3, r0
 80035a4:	4619      	mov	r1, r3
 80035a6:	4620      	mov	r0, r4
 80035a8:	f7fe fe30 	bl	800220c <Sequencer_Start>
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd90      	pop	{r4, r7, pc}

080035b4 <VibeCheckRGB_StopTopSequence>:

void VibeCheckRGB_StopTopSequence(VibeCheckRGB* rgb)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->top_sequence);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe fe36 	bl	8002234 <Sequencer_Stop>
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <VibeCheckRGB_SetColor>:


void VibeCheckRGB_SetColor(VibeCheckRGB* rgb, uint32_t index, uint8_t r, uint8_t g, uint8_t b)  /* set the color of an individual LED */
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	4611      	mov	r1, r2
 80035dc:	461a      	mov	r2, r3
 80035de:	460b      	mov	r3, r1
 80035e0:	71fb      	strb	r3, [r7, #7]
 80035e2:	4613      	mov	r3, r2
 80035e4:	71bb      	strb	r3, [r7, #6]
	if (index > VC_RGB_NUM_LEDS - 1)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d901      	bls.n	80035f0 <VibeCheckRGB_SetColor+0x20>
		index = VC_RGB_NUM_LEDS - 1;
 80035ec:	2308      	movs	r3, #8
 80035ee:	60bb      	str	r3, [r7, #8]

	rgb->colors[index].r = r;
 80035f0:	68f9      	ldr	r1, [r7, #12]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	4613      	mov	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	440b      	add	r3, r1
 80035fc:	3304      	adds	r3, #4
 80035fe:	79fa      	ldrb	r2, [r7, #7]
 8003600:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].g = g;
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	440b      	add	r3, r1
 800360e:	3305      	adds	r3, #5
 8003610:	79ba      	ldrb	r2, [r7, #6]
 8003612:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].b = b;
 8003614:	68f9      	ldr	r1, [r7, #12]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4613      	mov	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4413      	add	r3, r2
 800361e:	440b      	add	r3, r1
 8003620:	3306      	adds	r3, #6
 8003622:	7e3a      	ldrb	r2, [r7, #24]
 8003624:	701a      	strb	r2, [r3, #0]
}
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <VibeCheckRGB_GetColor>:


VibeCheckRGB_Color VibeCheckRGB_GetColor(VibeCheckRGB* rgb, uint32_t index)
{
 8003632:	b480      	push	{r7}
 8003634:	b085      	sub	sp, #20
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6039      	str	r1, [r7, #0]
	if (index > VC_RGB_NUM_LEDS - 1)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b08      	cmp	r3, #8
 8003640:	d901      	bls.n	8003646 <VibeCheckRGB_GetColor+0x14>
			index = VC_RGB_NUM_LEDS - 1;
 8003642:	2308      	movs	r3, #8
 8003644:	603b      	str	r3, [r7, #0]

	return rgb->colors[index];
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	18ca      	adds	r2, r1, r3
 8003652:	f107 030c 	add.w	r3, r7, #12
 8003656:	3204      	adds	r2, #4
 8003658:	8811      	ldrh	r1, [r2, #0]
 800365a:	7892      	ldrb	r2, [r2, #2]
 800365c:	8019      	strh	r1, [r3, #0]
 800365e:	709a      	strb	r2, [r3, #2]
 8003660:	2300      	movs	r3, #0
 8003662:	7b3a      	ldrb	r2, [r7, #12]
 8003664:	f362 0307 	bfi	r3, r2, #0, #8
 8003668:	7b7a      	ldrb	r2, [r7, #13]
 800366a:	f362 230f 	bfi	r3, r2, #8, #8
 800366e:	7bba      	ldrb	r2, [r7, #14]
 8003670:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <VibeCheckRGB_SetAllOff>:


void VibeCheckRGB_SetAllOff(VibeCheckRGB* rgb)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af02      	add	r7, sp, #8
 8003686:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e00a      	b.n	80036a4 <VibeCheckRGB_SetAllOff+0x24>
		VibeCheckRGB_SetColor(rgb, i, 0, 0, 0);
 800368e:	2300      	movs	r3, #0
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	2300      	movs	r3, #0
 8003694:	2200      	movs	r2, #0
 8003696:	68f9      	ldr	r1, [r7, #12]
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ff99 	bl	80035d0 <VibeCheckRGB_SetColor>
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3301      	adds	r3, #1
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d9f1      	bls.n	800368e <VibeCheckRGB_SetAllOff+0xe>
}
 80036aa:	bf00      	nop
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <VibeCheckRGB_SendColors>:


void VibeCheckRGB_SendColors(VibeCheckRGB* rgb)  /* send the colors to the LEDs */
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	/* compute the bit stream timings */
	uint32_t i = VC_RGB_RESET_PERIODS;  /* put the reset periods first so we are not affected by spurious pin events at startup and such */
 80036bc:	23e0      	movs	r3, #224	@ 0xe0
 80036be:	61fb      	str	r3, [r7, #28]
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	e06e      	b.n	80037a4 <VibeCheckRGB_SendColors+0xf0>
	{
		for (uint32_t k = 8; k > 0; k--)  /* green */
 80036c6:	2308      	movs	r3, #8
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	e01d      	b.n	8003708 <VibeCheckRGB_SendColors+0x54>
			rgb->bit_stream[i++] = ((rgb->colors[j].g >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4613      	mov	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	440b      	add	r3, r1
 80036d8:	3305      	adds	r3, #5
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	fa42 f303 	asr.w	r3, r2, r3
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <VibeCheckRGB_SendColors+0x3e>
 80036ee:	2130      	movs	r1, #48	@ 0x30
 80036f0:	e000      	b.n	80036f4 <VibeCheckRGB_SendColors+0x40>
 80036f2:	2118      	movs	r1, #24
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	61fa      	str	r2, [r7, #28]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	3310      	adds	r3, #16
 80036fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	3b01      	subs	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1de      	bne.n	80036cc <VibeCheckRGB_SendColors+0x18>

		for (uint32_t k = 8; k > 0; k--)  /* red */
 800370e:	2308      	movs	r3, #8
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	e01d      	b.n	8003750 <VibeCheckRGB_SendColors+0x9c>
			rgb->bit_stream[i++] = ((rgb->colors[j].r >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	440b      	add	r3, r1
 8003720:	3304      	adds	r3, #4
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	3b01      	subs	r3, #1
 800372a:	fa42 f303 	asr.w	r3, r2, r3
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <VibeCheckRGB_SendColors+0x86>
 8003736:	2130      	movs	r1, #48	@ 0x30
 8003738:	e000      	b.n	800373c <VibeCheckRGB_SendColors+0x88>
 800373a:	2118      	movs	r1, #24
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	61fa      	str	r2, [r7, #28]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	3310      	adds	r3, #16
 8003746:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* red */
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	3b01      	subs	r3, #1
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1de      	bne.n	8003714 <VibeCheckRGB_SendColors+0x60>

		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8003756:	2308      	movs	r3, #8
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e01d      	b.n	8003798 <VibeCheckRGB_SendColors+0xe4>
			rgb->bit_stream[i++] = ((rgb->colors[j].b >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4613      	mov	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	4413      	add	r3, r2
 8003766:	440b      	add	r3, r1
 8003768:	3306      	adds	r3, #6
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	3b01      	subs	r3, #1
 8003772:	fa42 f303 	asr.w	r3, r2, r3
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <VibeCheckRGB_SendColors+0xce>
 800377e:	2130      	movs	r1, #48	@ 0x30
 8003780:	e000      	b.n	8003784 <VibeCheckRGB_SendColors+0xd0>
 8003782:	2118      	movs	r1, #24
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	61fa      	str	r2, [r7, #28]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	3310      	adds	r3, #16
 800378e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3b01      	subs	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1de      	bne.n	800375c <VibeCheckRGB_SendColors+0xa8>
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	3301      	adds	r3, #1
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d98d      	bls.n	80036c6 <VibeCheckRGB_SendColors+0x12>
	}

	/* start the DMA transfer */
	(void)HAL_TIM_PWM_Start_DMA(rgb->htim, VC_RGB_TIM_CHANNEL, (uint32_t*)rgb->bit_stream, VC_RGB_BUF_LEN);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f103 0220 	add.w	r2, r3, #32
 80037b4:	f44f 7326 	mov.w	r3, #664	@ 0x298
 80037b8:	2100      	movs	r1, #0
 80037ba:	f00d ff55 	bl	8011668 <HAL_TIM_PWM_Start_DMA>
}
 80037be:	bf00      	nop
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <VibeCheckRGBCMD_Execute>:

*/


uint32_t VibeCheckRGBCMD_Execute(void* obj, VibeCheckShell* shell)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b09c      	sub	sp, #112	@ 0x70
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	667b      	str	r3, [r7, #100]	@ 0x64

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80037d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037da:	2240      	movs	r2, #64	@ 0x40
 80037dc:	4619      	mov	r1, r3
 80037de:	6838      	ldr	r0, [r7, #0]
 80037e0:	f001 fd7a 	bl	80052d8 <VibeCheckShell_GetNextString>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80c2 	beq.w	8003970 <VibeCheckRGBCMD_Execute+0x1a8>
	{
		if (!strcmp(str, "set"))
 80037ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037f0:	4962      	ldr	r1, [pc, #392]	@ (800397c <VibeCheckRGBCMD_Execute+0x1b4>)
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fc fd8c 	bl	8000310 <strcmp>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d141      	bne.n	8003882 <VibeCheckRGBCMD_Execute+0xba>
		{
			int32_t index, r, g, b;
			if (VibeCheckShell_GetNextInt(shell, &index)
 80037fe:	f107 0320 	add.w	r3, r7, #32
 8003802:	4619      	mov	r1, r3
 8003804:	6838      	ldr	r0, [r7, #0]
 8003806:	f001 fdd7 	bl	80053b8 <VibeCheckShell_GetNextInt>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80af 	beq.w	8003970 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &r)
 8003812:	f107 031c 	add.w	r3, r7, #28
 8003816:	4619      	mov	r1, r3
 8003818:	6838      	ldr	r0, [r7, #0]
 800381a:	f001 fdcd 	bl	80053b8 <VibeCheckShell_GetNextInt>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a5 	beq.w	8003970 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &g)
 8003826:	f107 0318 	add.w	r3, r7, #24
 800382a:	4619      	mov	r1, r3
 800382c:	6838      	ldr	r0, [r7, #0]
 800382e:	f001 fdc3 	bl	80053b8 <VibeCheckShell_GetNextInt>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 809b 	beq.w	8003970 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &b))
 800383a:	f107 0314 	add.w	r3, r7, #20
 800383e:	4619      	mov	r1, r3
 8003840:	6838      	ldr	r0, [r7, #0]
 8003842:	f001 fdb9 	bl	80053b8 <VibeCheckShell_GetNextInt>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8091 	beq.w	8003970 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_SetColor(rgb, index, r, g, b);
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	4618      	mov	r0, r3
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	b2da      	uxtb	r2, r3
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	b2d9      	uxtb	r1, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	460b      	mov	r3, r1
 8003862:	4601      	mov	r1, r0
 8003864:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003866:	f7ff feb3 	bl	80035d0 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(rgb);
 800386a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800386c:	f7ff ff22 	bl	80036b4 <VibeCheckRGB_SendColors>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003870:	4943      	ldr	r1, [pc, #268]	@ (8003980 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003872:	6838      	ldr	r0, [r7, #0]
 8003874:	f001 fe48 	bl	8005508 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003878:	6838      	ldr	r0, [r7, #0]
 800387a:	f001 fec3 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800387e:	2301      	movs	r3, #1
 8003880:	e077      	b.n	8003972 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "get"))
 8003882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003886:	493f      	ldr	r1, [pc, #252]	@ (8003984 <VibeCheckRGBCMD_Execute+0x1bc>)
 8003888:	4618      	mov	r0, r3
 800388a:	f7fc fd41 	bl	8000310 <strcmp>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d137      	bne.n	8003904 <VibeCheckRGBCMD_Execute+0x13c>
		{
			int32_t index;
			if (VibeCheckShell_GetNextInt(shell, &index))
 8003894:	f107 0310 	add.w	r3, r7, #16
 8003898:	4619      	mov	r1, r3
 800389a:	6838      	ldr	r0, [r7, #0]
 800389c:	f001 fd8c 	bl	80053b8 <VibeCheckShell_GetNextInt>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d064      	beq.n	8003970 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_Color color = VibeCheckRGB_GetColor(rgb, index);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4619      	mov	r1, r3
 80038aa:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80038ac:	f7ff fec1 	bl	8003632 <VibeCheckRGB_GetColor>
 80038b0:	4603      	mov	r3, r0
 80038b2:	461a      	mov	r2, r3
 80038b4:	733a      	strb	r2, [r7, #12]
 80038b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80038ba:	737a      	strb	r2, [r7, #13]
 80038bc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80038c0:	73bb      	strb	r3, [r7, #14]

				VibeCheckShell_PutOutputString(shell, "ack");
 80038c2:	492f      	ldr	r1, [pc, #188]	@ (8003980 <VibeCheckRGBCMD_Execute+0x1b8>)
 80038c4:	6838      	ldr	r0, [r7, #0]
 80038c6:	f001 fe1f 	bl	8005508 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputSeparator(shell);
 80038ca:	6838      	ldr	r0, [r7, #0]
 80038cc:	f001 fe8c 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.r);
 80038d0:	7b3b      	ldrb	r3, [r7, #12]
 80038d2:	4619      	mov	r1, r3
 80038d4:	6838      	ldr	r0, [r7, #0]
 80038d6:	f001 fe51 	bl	800557c <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 80038da:	6838      	ldr	r0, [r7, #0]
 80038dc:	f001 fe84 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.g);
 80038e0:	7b7b      	ldrb	r3, [r7, #13]
 80038e2:	4619      	mov	r1, r3
 80038e4:	6838      	ldr	r0, [r7, #0]
 80038e6:	f001 fe49 	bl	800557c <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 80038ea:	6838      	ldr	r0, [r7, #0]
 80038ec:	f001 fe7c 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.b);
 80038f0:	7bbb      	ldrb	r3, [r7, #14]
 80038f2:	4619      	mov	r1, r3
 80038f4:	6838      	ldr	r0, [r7, #0]
 80038f6:	f001 fe41 	bl	800557c <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputDelimiter(shell);
 80038fa:	6838      	ldr	r0, [r7, #0]
 80038fc:	f001 fe82 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003900:	2301      	movs	r3, #1
 8003902:	e036      	b.n	8003972 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "start"))  /* TODO: revisit this once we have a clearer idea of how the LED sequence should behave */
 8003904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003908:	491f      	ldr	r1, [pc, #124]	@ (8003988 <VibeCheckRGBCMD_Execute+0x1c0>)
 800390a:	4618      	mov	r0, r3
 800390c:	f7fc fd00 	bl	8000310 <strcmp>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10e      	bne.n	8003934 <VibeCheckRGBCMD_Execute+0x16c>
		{
			VibeCheckRGB_StartBaseSequence(rgb);
 8003916:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003918:	f7ff fe03 	bl	8003522 <VibeCheckRGB_StartBaseSequence>
			VibeCheckRGB_StartTopSequence(rgb);
 800391c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800391e:	f7ff fe37 	bl	8003590 <VibeCheckRGB_StartTopSequence>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003922:	4917      	ldr	r1, [pc, #92]	@ (8003980 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003924:	6838      	ldr	r0, [r7, #0]
 8003926:	f001 fdef 	bl	8005508 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 800392a:	6838      	ldr	r0, [r7, #0]
 800392c:	f001 fe6a 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003930:	2301      	movs	r3, #1
 8003932:	e01e      	b.n	8003972 <VibeCheckRGBCMD_Execute+0x1aa>
		}
		else if (!strcmp(str, "stop"))
 8003934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003938:	4914      	ldr	r1, [pc, #80]	@ (800398c <VibeCheckRGBCMD_Execute+0x1c4>)
 800393a:	4618      	mov	r0, r3
 800393c:	f7fc fce8 	bl	8000310 <strcmp>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d114      	bne.n	8003970 <VibeCheckRGBCMD_Execute+0x1a8>
		{
			VibeCheckRGB_StopBaseSequence(rgb);
 8003946:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003948:	f7ff fdfd 	bl	8003546 <VibeCheckRGB_StopBaseSequence>
			VibeCheckRGB_StopTopSequence(rgb);
 800394c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800394e:	f7ff fe31 	bl	80035b4 <VibeCheckRGB_StopTopSequence>
			VibeCheckRGB_SetAllOff(rgb);
 8003952:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003954:	f7ff fe94 	bl	8003680 <VibeCheckRGB_SetAllOff>
			VibeCheckRGB_SendColors(rgb);
 8003958:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800395a:	f7ff feab 	bl	80036b4 <VibeCheckRGB_SendColors>
			VibeCheckShell_PutOutputString(shell, "ack");
 800395e:	4908      	ldr	r1, [pc, #32]	@ (8003980 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003960:	6838      	ldr	r0, [r7, #0]
 8003962:	f001 fdd1 	bl	8005508 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003966:	6838      	ldr	r0, [r7, #0]
 8003968:	f001 fe4c 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <VibeCheckRGBCMD_Execute+0x1aa>
		}
	}

	return 0;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3768      	adds	r7, #104	@ 0x68
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	0801d078 	.word	0x0801d078
 8003980:	0801d07c 	.word	0x0801d07c
 8003984:	0801d080 	.word	0x0801d080
 8003988:	0801d084 	.word	0x0801d084
 800398c:	0801d08c 	.word	0x0801d08c

08003990 <VibeCheckSensor_Init>:

#include "vibecheck_sensor.h"


void VibeCheckSensor_Init(VibeCheckSensor* sensor, SPI_HandleTypeDef* hspi0, SPI_HandleTypeDef* hspi1, SPI_HandleTypeDef* hspi2)
{
 8003990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003992:	b0a1      	sub	sp, #132	@ 0x84
 8003994:	af06      	add	r7, sp, #24
 8003996:	6178      	str	r0, [r7, #20]
 8003998:	6139      	str	r1, [r7, #16]
 800399a:	60fa      	str	r2, [r7, #12]
 800399c:	60bb      	str	r3, [r7, #8]
	sensor->data_ind = 0;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
	sensor->data_ready = 0;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
	sensor->time_prev_update = 0;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
	sensor->generate_fake_data = 0;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c

	/* set all the configurations to defaults */
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80039be:	2300      	movs	r3, #0
 80039c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80039c2:	e04a      	b.n	8003a5a <VibeCheckSensor_Init+0xca>
	{
		sensor->sensor_config[i].usr_offset_x = 0.0f;
 80039c4:	6979      	ldr	r1, [r7, #20]
 80039c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_y = 0.0f;
 80039d8:	6979      	ldr	r1, [r7, #20]
 80039da:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	3304      	adds	r3, #4
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_z = 0.0f;
 80039ee:	6979      	ldr	r1, [r7, #20]
 80039f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	3308      	adds	r3, #8
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].accel_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8003a04:	6979      	ldr	r1, [r7, #20]
 8003a06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a08:	4613      	mov	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	330c      	adds	r3, #12
 8003a14:	220d      	movs	r2, #13
 8003a16:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].g_range = VC_SENSOR_DEFAULT_G_RANGE;
 8003a18:	6979      	ldr	r1, [r7, #20]
 8003a1a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	3310      	adds	r3, #16
 8003a28:	2202      	movs	r2, #2
 8003a2a:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].gyro_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8003a2c:	6979      	ldr	r1, [r7, #20]
 8003a2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	220d      	movs	r2, #13
 8003a3e:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].dps_range = VC_SENSOR_DEFAULT_DPS_RANGE;
 8003a40:	6979      	ldr	r1, [r7, #20]
 8003a42:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3318      	adds	r3, #24
 8003a50:	227d      	movs	r2, #125	@ 0x7d
 8003a52:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003a54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a56:	3301      	adds	r3, #1
 8003a58:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d9b1      	bls.n	80039c4 <VibeCheckSensor_Init+0x34>
	}


	/* initialize the sensor chips */
	SPI_HandleTypeDef* hspi[VC_SENSOR_NUM_SENSORS] = {hspi0, hspi1, hspi2};
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	65fb      	str	r3, [r7, #92]	@ 0x5c

	GPIO_TypeDef* cs_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_GPIO_Port, ACCEL_NCS2_GPIO_Port, ACCEL_NCS3_GPIO_Port};
 8003a6c:	4a47      	ldr	r2, [pc, #284]	@ (8003b8c <VibeCheckSensor_Init+0x1fc>)
 8003a6e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003a72:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t cs_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_Pin, ACCEL_NCS2_Pin, ACCEL_NCS3_Pin};
 8003a78:	4a45      	ldr	r2, [pc, #276]	@ (8003b90 <VibeCheckSensor_Init+0x200>)
 8003a7a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a82:	6018      	str	r0, [r3, #0]
 8003a84:	3304      	adds	r3, #4
 8003a86:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int1_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_GPIO_Port, ACCEL_INTA2_GPIO_Port, ACCEL_INTA3_GPIO_Port};
 8003a88:	4a42      	ldr	r2, [pc, #264]	@ (8003b94 <VibeCheckSensor_Init+0x204>)
 8003a8a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int1_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_Pin, ACCEL_INTA2_Pin, ACCEL_INTA3_Pin};
 8003a94:	4a40      	ldr	r2, [pc, #256]	@ (8003b98 <VibeCheckSensor_Init+0x208>)
 8003a96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a9e:	6018      	str	r0, [r3, #0]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int2_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_GPIO_Port, ACCEL_INTB2_GPIO_Port, ACCEL_INTB3_GPIO_Port};
 8003aa4:	4a3d      	ldr	r2, [pc, #244]	@ (8003b9c <VibeCheckSensor_Init+0x20c>)
 8003aa6:	f107 0320 	add.w	r3, r7, #32
 8003aaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int2_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_Pin, ACCEL_INTB2_Pin, ACCEL_INTB3_Pin};
 8003ab0:	4a3b      	ldr	r2, [pc, #236]	@ (8003ba0 <VibeCheckSensor_Init+0x210>)
 8003ab2:	f107 0318 	add.w	r3, r7, #24
 8003ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003aba:	6018      	str	r0, [r3, #0]
 8003abc:	3304      	adds	r3, #4
 8003abe:	8019      	strh	r1, [r3, #0]

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ac4:	e059      	b.n	8003b7a <VibeCheckSensor_Init+0x1ea>
	{
		LSM6DS3_Init(&sensor->sensor_array[i], &sensor->sensor_config[i],
 8003ac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ac8:	015b      	lsls	r3, r3, #5
 8003aca:	3350      	adds	r3, #80	@ 0x50
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4413      	add	r3, r2
 8003ad0:	1d1d      	adds	r5, r3, #4
 8003ad2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	18d6      	adds	r6, r2, r3
 8003ae0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	3360      	adds	r3, #96	@ 0x60
 8003ae6:	f107 0208 	add.w	r2, r7, #8
 8003aea:	4413      	add	r3, r2
 8003aec:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8003afa:	f107 0308 	add.w	r3, r7, #8
 8003afe:	18cb      	adds	r3, r1, r3
 8003b00:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8003b04:	6039      	str	r1, [r7, #0]
 8003b06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8003b0e:	f107 0308 	add.w	r3, r7, #8
 8003b12:	18c3      	adds	r3, r0, r3
 8003b14:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 8003b18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8003b20:	f107 0308 	add.w	r3, r7, #8
 8003b24:	18c3      	adds	r3, r0, r3
 8003b26:	f853 1c34 	ldr.w	r1, [r3, #-52]
 8003b2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8003b32:	f107 0308 	add.w	r3, r7, #8
 8003b36:	18c3      	adds	r3, r0, r3
 8003b38:	f833 0c3c 	ldrh.w	r0, [r3, #-60]
 8003b3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 8003b44:	f107 0308 	add.w	r3, r7, #8
 8003b48:	18e3      	adds	r3, r4, r3
 8003b4a:	f853 4c48 	ldr.w	r4, [r3, #-72]
 8003b4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	3360      	adds	r3, #96	@ 0x60
 8003b54:	f107 0c08 	add.w	ip, r7, #8
 8003b58:	4463      	add	r3, ip
 8003b5a:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8003b5e:	9304      	str	r3, [sp, #16]
 8003b60:	9403      	str	r4, [sp, #12]
 8003b62:	9002      	str	r0, [sp, #8]
 8003b64:	9101      	str	r1, [sp, #4]
 8003b66:	9200      	str	r2, [sp, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4631      	mov	r1, r6
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f7fc ffa2 	bl	8000ab8 <LSM6DS3_Init>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003b74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b76:	3301      	adds	r3, #1
 8003b78:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d9a2      	bls.n	8003ac6 <VibeCheckSensor_Init+0x136>
				hspi[i], cs_ports[i], cs_pins[i], int1_ports[i], int1_pins[i], int2_ports[i], int2_pins[i]);
	}

}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	376c      	adds	r7, #108	@ 0x6c
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	0801d094 	.word	0x0801d094
 8003b90:	0801d0a0 	.word	0x0801d0a0
 8003b94:	0801d0a8 	.word	0x0801d0a8
 8003b98:	0801d0b4 	.word	0x0801d0b4
 8003b9c:	0801d0bc 	.word	0x0801d0bc
 8003ba0:	0801d0c8 	.word	0x0801d0c8

08003ba4 <VibeCheckSensor_Update>:


void VibeCheckSensor_Update(VibeCheckSensor* sensor)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003bac:	f003 f8a4 	bl	8006cf8 <HAL_GetTick>
 8003bb0:	61b8      	str	r0, [r7, #24]
	if (time - sensor->time_prev_update > VC_SENSOR_UPDATE_INTERVAL_MS)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2bfa      	cmp	r3, #250	@ 0xfa
 8003bbe:	f240 80fa 	bls.w	8003db6 <VibeCheckSensor_Update+0x212>

		/* if not connected -> test for connection -> if success, set connected flag, configure the sensor, and send message to host */
		/* if connected but not running -> test for connection -> if failure, reset connected flag, send message to host */
		/* if running either accelerometer or gyro -> check data received status flag and reset it -> if no data received, reset connected flag, send message to host */

		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	e093      	b.n	8003cf0 <VibeCheckSensor_Update+0x14c>
		{
			if (!sensor->status[i].is_connected)
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	33b4      	adds	r3, #180	@ 0xb4
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d124      	bne.n	8003c28 <VibeCheckSensor_Update+0x84>
			{
				if (LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	015b      	lsls	r3, r3, #5
 8003be2:	3350      	adds	r3, #80	@ 0x50
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	3304      	adds	r3, #4
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fc ff8e 	bl	8000b0c <LSM6DS3_TestCommunication>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d079      	beq.n	8003cea <VibeCheckSensor_Update+0x146>
				{
					sensor->status[i].is_connected = 1;
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	33b4      	adds	r3, #180	@ 0xb4
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
					sensor->status[i].connection_change_flag = 1;
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	33c4      	adds	r3, #196	@ 0xc4
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
					VibeCheckSensor_UpdateSensor(sensor, i);
 8003c1e:	69f9      	ldr	r1, [r7, #28]
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fbac 	bl	800437e <VibeCheckSensor_UpdateSensor>
 8003c26:	e060      	b.n	8003cea <VibeCheckSensor_Update+0x146>
				}
			}
			else
			{
				if (!sensor->status[i].accel_measuring && !sensor->status[i].gyro_measuring)
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	69fa      	ldr	r2, [r7, #28]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	33b8      	adds	r3, #184	@ 0xb8
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d12b      	bne.n	8003c96 <VibeCheckSensor_Update+0xf2>
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	33bc      	adds	r3, #188	@ 0xbc
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d120      	bne.n	8003c96 <VibeCheckSensor_Update+0xf2>
				{
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	015b      	lsls	r3, r3, #5
 8003c58:	3350      	adds	r3, #80	@ 0x50
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fc ff53 	bl	8000b0c <LSM6DS3_TestCommunication>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d13e      	bne.n	8003cea <VibeCheckSensor_Update+0x146>
					{
						sensor->status[i].is_connected = 0;
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	33b4      	adds	r3, #180	@ 0xb4
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	33c4      	adds	r3, #196	@ 0xc4
 8003c90:	2201      	movs	r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8003c94:	e029      	b.n	8003cea <VibeCheckSensor_Update+0x146>
					}
				}
				else
				{
					if (sensor->status[i].received_data_flag)
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	33c0      	adds	r3, #192	@ 0xc0
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <VibeCheckSensor_Update+0x11e>
					{
						sensor->status[i].received_data_flag = 0;
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	33c0      	adds	r3, #192	@ 0xc0
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e013      	b.n	8003cea <VibeCheckSensor_Update+0x146>
					}
					else
					{
						sensor->status[i].is_connected = 0;
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	33b4      	adds	r3, #180	@ 0xb4
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	33c4      	adds	r3, #196	@ 0xc4
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3301      	adds	r3, #1
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	f67f af68 	bls.w	8003bc8 <VibeCheckSensor_Update+0x24>
				}
			}
		}

		/* make some random data (3 sine wave phases) for testing the host plotting/data logging */
		if (sensor->generate_fake_data)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d055      	beq.n	8003dae <VibeCheckSensor_Update+0x20a>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	ee07 3a90 	vmov	s15, r3
 8003d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8003dc0 <VibeCheckSensor_Update+0x21c>
 8003d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d14:	eeb0 0a67 	vmov.f32	s0, s15
 8003d18:	f018 fb56 	bl	801c3c8 <sinf>
 8003d1c:	ed87 0a05 	vstr	s0, [r7, #20]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8003dc0 <VibeCheckSensor_Update+0x21c>
 8003d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d32:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003dc4 <VibeCheckSensor_Update+0x220>
 8003d36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d3e:	f018 fb43 	bl	801c3c8 <sinf>
 8003d42:	ed87 0a04 	vstr	s0, [r7, #16]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	ee07 3a90 	vmov	s15, r3
 8003d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d50:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003dc0 <VibeCheckSensor_Update+0x21c>
 8003d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d58:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003dc8 <VibeCheckSensor_Update+0x224>
 8003d5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d60:	eeb0 0a67 	vmov.f32	s0, s15
 8003d64:	f018 fb30 	bl	801c3c8 <sinf>
 8003d68:	ed87 0a03 	vstr	s0, [r7, #12]

			VibeCheckSensor_AddData(sensor, 1, time, val1, val2, val3);
 8003d6c:	ed97 1a03 	vldr	s2, [r7, #12]
 8003d70:	edd7 0a04 	vldr	s1, [r7, #16]
 8003d74:	ed97 0a05 	vldr	s0, [r7, #20]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fb48 	bl	8004412 <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 2, time, val3, val1, val2);
 8003d82:	ed97 1a04 	vldr	s2, [r7, #16]
 8003d86:	edd7 0a05 	vldr	s1, [r7, #20]
 8003d8a:	ed97 0a03 	vldr	s0, [r7, #12]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	2102      	movs	r1, #2
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fb3d 	bl	8004412 <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 3, time, val2, val3, val1);
 8003d98:	ed97 1a05 	vldr	s2, [r7, #20]
 8003d9c:	edd7 0a03 	vldr	s1, [r7, #12]
 8003da0:	ed97 0a04 	vldr	s0, [r7, #16]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	2103      	movs	r1, #3
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fb32 	bl	8004412 <VibeCheckSensor_AddData>
		}

		sensor->time_prev_update = time;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
	}
}
 8003db6:	bf00      	nop
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40c90fd0 	.word	0x40c90fd0
 8003dc4:	3f860a8b 	.word	0x3f860a8b
 8003dc8:	40060a8b 	.word	0x40060a8b

08003dcc <VibeCheckSensor_StartAccel>:

void VibeCheckSensor_StartAccel(VibeCheckSensor* sensor, uint32_t channel)  /* start acceleration measurement of specified channel */
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <VibeCheckSensor_StartAccel+0x14>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].accel_measuring)
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	33b4      	adds	r3, #180	@ 0xb4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d013      	beq.n	8003e1e <VibeCheckSensor_StartAccel+0x52>
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	33b8      	adds	r3, #184	@ 0xb8
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d108      	bne.n	8003e1e <VibeCheckSensor_StartAccel+0x52>
		LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	015b      	lsls	r3, r3, #5
 8003e10:	3350      	adds	r3, #80	@ 0x50
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	4413      	add	r3, r2
 8003e16:	3304      	adds	r3, #4
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fc ff07 	bl	8000c2c <LSM6DS3_StartAccel>
	/*
	 * I choose to set the flag here immediately, even if the accelerometer is not currently connected. This way, it can be set
	 * to start sampling immediately once the accelerometer is plugged in.
	 */

	sensor->status[channel].accel_measuring = 1;
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	33b8      	adds	r3, #184	@ 0xb8
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <VibeCheckSensor_StopAccel>:

void VibeCheckSensor_StopAccel(VibeCheckSensor* sensor, uint32_t channel)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <VibeCheckSensor_StopAccel+0x14>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].accel_measuring)
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	33b4      	adds	r3, #180	@ 0xb4
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d013      	beq.n	8003e8c <VibeCheckSensor_StopAccel+0x52>
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	33b8      	adds	r3, #184	@ 0xb8
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d008      	beq.n	8003e8c <VibeCheckSensor_StopAccel+0x52>
		LSM6DS3_StopAccel(&sensor->sensor_array[channel]);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	015b      	lsls	r3, r3, #5
 8003e7e:	3350      	adds	r3, #80	@ 0x50
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	4413      	add	r3, r2
 8003e84:	3304      	adds	r3, #4
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fd f80a 	bl	8000ea0 <LSM6DS3_StopAccel>

	sensor->status[channel].accel_measuring = 0;
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	33b8      	adds	r3, #184	@ 0xb8
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <VibeCheckSensor_StartGyro>:

void VibeCheckSensor_StartGyro(VibeCheckSensor* sensor, uint32_t channel)  /* start gyroscope measurement of specified channel */
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <VibeCheckSensor_StartGyro+0x14>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].gyro_measuring)
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	33b4      	adds	r3, #180	@ 0xb4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d013      	beq.n	8003efa <VibeCheckSensor_StartGyro+0x52>
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	33bc      	adds	r3, #188	@ 0xbc
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d108      	bne.n	8003efa <VibeCheckSensor_StartGyro+0x52>
		LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	015b      	lsls	r3, r3, #5
 8003eec:	3350      	adds	r3, #80	@ 0x50
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fc ff3b 	bl	8000d70 <LSM6DS3_StartGyro>

	sensor->status[channel].gyro_measuring = 1;
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	33bc      	adds	r3, #188	@ 0xbc
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <VibeCheckSensor_StopGyro>:

void VibeCheckSensor_StopGyro(VibeCheckSensor* sensor, uint32_t channel)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <VibeCheckSensor_StopGyro+0x14>
 8003f26:	2302      	movs	r3, #2
 8003f28:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].gyro_measuring)
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	33b4      	adds	r3, #180	@ 0xb4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <VibeCheckSensor_StopGyro+0x52>
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	33bc      	adds	r3, #188	@ 0xbc
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <VibeCheckSensor_StopGyro+0x52>
		LSM6DS3_StopGyro(&sensor->sensor_array[channel]);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	015b      	lsls	r3, r3, #5
 8003f5a:	3350      	adds	r3, #80	@ 0x50
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	4413      	add	r3, r2
 8003f60:	3304      	adds	r3, #4
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fc ffaa 	bl	8000ebc <LSM6DS3_StopGyro>

	sensor->status[channel].gyro_measuring = 0;
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	33bc      	adds	r3, #188	@ 0xbc
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <VibeCheckSensor_SetAccelODR>:

void VibeCheckSensor_SetAccelODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <VibeCheckSensor_SetAccelODR+0x16>
 8003f96:	2302      	movs	r3, #2
 8003f98:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].accel_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	210a      	movs	r1, #10
 8003f9e:	480a      	ldr	r0, [pc, #40]	@ (8003fc8 <VibeCheckSensor_SetAccelODR+0x44>)
 8003fa0:	f7fe ffb0 	bl	8002f04 <FindClosest>
 8003fa4:	68f9      	ldr	r1, [r7, #12]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f9e0 	bl	800437e <VibeCheckSensor_UpdateSensor>
}
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	0801d4ec 	.word	0x0801d4ec

08003fcc <VibeCheckSensor_SetGyroODR>:

void VibeCheckSensor_SetGyroODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <VibeCheckSensor_SetGyroODR+0x16>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].gyro_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	210a      	movs	r1, #10
 8003fe6:	480a      	ldr	r0, [pc, #40]	@ (8004010 <VibeCheckSensor_SetGyroODR+0x44>)
 8003fe8:	f7fe ff8c 	bl	8002f04 <FindClosest>
 8003fec:	68f9      	ldr	r1, [r7, #12]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	3314      	adds	r3, #20
 8003ffc:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f9bc 	bl	800437e <VibeCheckSensor_UpdateSensor>
}
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	0801d4ec 	.word	0x0801d4ec

08004014 <VibeCheckSensor_SetAccelRange>:

void VibeCheckSensor_SetAccelRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <VibeCheckSensor_SetAccelRange+0x16>
 8004026:	2302      	movs	r3, #2
 8004028:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].g_range = FindClosest(VC_SENSOR_ALLOWED_G_RANGE, sizeof(VC_SENSOR_ALLOWED_G_RANGE) / sizeof(VC_SENSOR_ALLOWED_G_RANGE[0]), range);
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	2104      	movs	r1, #4
 800402e:	480a      	ldr	r0, [pc, #40]	@ (8004058 <VibeCheckSensor_SetAccelRange+0x44>)
 8004030:	f7fe ff68 	bl	8002f04 <FindClosest>
 8004034:	68f9      	ldr	r1, [r7, #12]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	3310      	adds	r3, #16
 8004044:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 f998 	bl	800437e <VibeCheckSensor_UpdateSensor>
}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	0801d514 	.word	0x0801d514

0800405c <VibeCheckSensor_SetGyroRange>:

void VibeCheckSensor_SetGyroRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <VibeCheckSensor_SetGyroRange+0x16>
 800406e:	2302      	movs	r3, #2
 8004070:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].dps_range = FindClosest(VC_SENSOR_ALLOWED_DPS_RANGE, sizeof(VC_SENSOR_ALLOWED_DPS_RANGE) / sizeof(VC_SENSOR_ALLOWED_DPS_RANGE[0]), range);
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	2105      	movs	r1, #5
 8004076:	480a      	ldr	r0, [pc, #40]	@ (80040a0 <VibeCheckSensor_SetGyroRange+0x44>)
 8004078:	f7fe ff44 	bl	8002f04 <FindClosest>
 800407c:	68f9      	ldr	r1, [r7, #12]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	4613      	mov	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	3318      	adds	r3, #24
 800408c:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f974 	bl	800437e <VibeCheckSensor_UpdateSensor>
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	0801d524 	.word	0x0801d524

080040a4 <VibeCheckSensor_SetOffsets>:

void VibeCheckSensor_SetOffsets(VibeCheckSensor* sensor, uint32_t channel, float x, float y, float z)  /* accelerometer DC offsets in g */
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6178      	str	r0, [r7, #20]
 80040ac:	6139      	str	r1, [r7, #16]
 80040ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80040b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80040b6:	ed87 1a01 	vstr	s2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <VibeCheckSensor_SetOffsets+0x20>
 80040c0:	2302      	movs	r3, #2
 80040c2:	613b      	str	r3, [r7, #16]

	if (x > VC_SENSOR_MAX_OFFSET) x = VC_SENSOR_MAX_OFFSET;  /* clamp the offsets to the max value that can fit in the register */
 80040c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80040c8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004194 <VibeCheckSensor_SetOffsets+0xf0>
 80040cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d4:	dd01      	ble.n	80040da <VibeCheckSensor_SetOffsets+0x36>
 80040d6:	4b30      	ldr	r3, [pc, #192]	@ (8004198 <VibeCheckSensor_SetOffsets+0xf4>)
 80040d8:	60fb      	str	r3, [r7, #12]
	if (x < -VC_SENSOR_MAX_OFFSET) x = -VC_SENSOR_MAX_OFFSET;
 80040da:	edd7 7a03 	vldr	s15, [r7, #12]
 80040de:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800419c <VibeCheckSensor_SetOffsets+0xf8>
 80040e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ea:	d501      	bpl.n	80040f0 <VibeCheckSensor_SetOffsets+0x4c>
 80040ec:	4b2c      	ldr	r3, [pc, #176]	@ (80041a0 <VibeCheckSensor_SetOffsets+0xfc>)
 80040ee:	60fb      	str	r3, [r7, #12]
	if (y > VC_SENSOR_MAX_OFFSET) y = VC_SENSOR_MAX_OFFSET;
 80040f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80040f4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8004194 <VibeCheckSensor_SetOffsets+0xf0>
 80040f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	dd01      	ble.n	8004106 <VibeCheckSensor_SetOffsets+0x62>
 8004102:	4b25      	ldr	r3, [pc, #148]	@ (8004198 <VibeCheckSensor_SetOffsets+0xf4>)
 8004104:	60bb      	str	r3, [r7, #8]
	if (y < -VC_SENSOR_MAX_OFFSET) y = -VC_SENSOR_MAX_OFFSET;
 8004106:	edd7 7a02 	vldr	s15, [r7, #8]
 800410a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800419c <VibeCheckSensor_SetOffsets+0xf8>
 800410e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004116:	d501      	bpl.n	800411c <VibeCheckSensor_SetOffsets+0x78>
 8004118:	4b21      	ldr	r3, [pc, #132]	@ (80041a0 <VibeCheckSensor_SetOffsets+0xfc>)
 800411a:	60bb      	str	r3, [r7, #8]
	if (z > VC_SENSOR_MAX_OFFSET) z = VC_SENSOR_MAX_OFFSET;
 800411c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004120:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004194 <VibeCheckSensor_SetOffsets+0xf0>
 8004124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412c:	dd01      	ble.n	8004132 <VibeCheckSensor_SetOffsets+0x8e>
 800412e:	4b1a      	ldr	r3, [pc, #104]	@ (8004198 <VibeCheckSensor_SetOffsets+0xf4>)
 8004130:	607b      	str	r3, [r7, #4]
	if (z < -VC_SENSOR_MAX_OFFSET) z = -VC_SENSOR_MAX_OFFSET;
 8004132:	edd7 7a01 	vldr	s15, [r7, #4]
 8004136:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800419c <VibeCheckSensor_SetOffsets+0xf8>
 800413a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800413e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004142:	d501      	bpl.n	8004148 <VibeCheckSensor_SetOffsets+0xa4>
 8004144:	4b16      	ldr	r3, [pc, #88]	@ (80041a0 <VibeCheckSensor_SetOffsets+0xfc>)
 8004146:	607b      	str	r3, [r7, #4]

	sensor->sensor_config[channel].usr_offset_x = x;
 8004148:	6979      	ldr	r1, [r7, #20]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_y = y;
 800415a:	6979      	ldr	r1, [r7, #20]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	3304      	adds	r3, #4
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_z = z;
 800416e:	6979      	ldr	r1, [r7, #20]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4613      	mov	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	3308      	adds	r3, #8
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	601a      	str	r2, [r3, #0]

	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004182:	6939      	ldr	r1, [r7, #16]
 8004184:	6978      	ldr	r0, [r7, #20]
 8004186:	f000 f8fa 	bl	800437e <VibeCheckSensor_UpdateSensor>
}
 800418a:	bf00      	nop
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	3dfe0000 	.word	0x3dfe0000
 8004198:	3dfe0000 	.word	0x3dfe0000
 800419c:	bdfe0000 	.word	0xbdfe0000
 80041a0:	bdfe0000 	.word	0xbdfe0000

080041a4 <VibeCheckSensor_GetAccelODR>:

uint32_t VibeCheckSensor_GetAccelODR(VibeCheckSensor* sensor, uint32_t channel)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <VibeCheckSensor_GetAccelODR+0x14>
 80041b4:	2302      	movs	r3, #2
 80041b6:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].accel_odr_hz;
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	330c      	adds	r3, #12
 80041c8:	681b      	ldr	r3, [r3, #0]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <VibeCheckSensor_GetGyroODR>:

uint32_t VibeCheckSensor_GetGyroODR(VibeCheckSensor* sensor, uint32_t channel)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <VibeCheckSensor_GetGyroODR+0x14>
 80041e6:	2302      	movs	r3, #2
 80041e8:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].gyro_odr_hz;
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	3314      	adds	r3, #20
 80041fa:	681b      	ldr	r3, [r3, #0]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <VibeCheckSensor_GetAccelRange>:

uint32_t VibeCheckSensor_GetAccelRange(VibeCheckSensor* sensor, uint32_t channel)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <VibeCheckSensor_GetAccelRange+0x14>
 8004218:	2302      	movs	r3, #2
 800421a:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].g_range;
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	3310      	adds	r3, #16
 800422c:	681b      	ldr	r3, [r3, #0]
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <VibeCheckSensor_GetGyroRange>:

uint32_t VibeCheckSensor_GetGyroRange(VibeCheckSensor* sensor, uint32_t channel)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <VibeCheckSensor_GetGyroRange+0x14>
 800424a:	2302      	movs	r3, #2
 800424c:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].dps_range;
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	4613      	mov	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	3318      	adds	r3, #24
 800425e:	681b      	ldr	r3, [r3, #0]
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <VibeCheckSensor_GetOffsets>:

void VibeCheckSensor_GetOffsets(VibeCheckSensor* sensor, uint32_t channel, float* x, float* y, float* z)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <VibeCheckSensor_GetOffsets+0x18>
 8004280:	2302      	movs	r3, #2
 8004282:	60bb      	str	r3, [r7, #8]
	*x = sensor->sensor_config[channel].usr_offset_x;
 8004284:	68f9      	ldr	r1, [r7, #12]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	4613      	mov	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	601a      	str	r2, [r3, #0]
	*y = sensor->sensor_config[channel].usr_offset_y;
 8004298:	68f9      	ldr	r1, [r7, #12]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	3304      	adds	r3, #4
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	601a      	str	r2, [r3, #0]
	*z = sensor->sensor_config[channel].usr_offset_z;
 80042ae:	68f9      	ldr	r1, [r7, #12]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	4613      	mov	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3308      	adds	r3, #8
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	601a      	str	r2, [r3, #0]
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <VibeCheckSensor_StartFakeData>:


void VibeCheckSensor_StartFakeData(VibeCheckSensor* sensor)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 1;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <VibeCheckSensor_StopFakeData>:


void VibeCheckSensor_StopFakeData(VibeCheckSensor* sensor)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 0;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <VibeCheckSensor_ConnectionChanged>:


uint32_t VibeCheckSensor_ConnectionChanged(VibeCheckSensor* sensor, uint32_t* channel, uint32_t* is_connected)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	e027      	b.n	800436a <VibeCheckSensor_ConnectionChanged+0x62>
	{
		if (sensor->status[i].connection_change_flag)
 800431a:	68f9      	ldr	r1, [r7, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	33c4      	adds	r3, #196	@ 0xc4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d019      	beq.n	8004364 <VibeCheckSensor_ConnectionChanged+0x5c>
		{
			sensor->status[i].connection_change_flag = 0;
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	33c4      	adds	r3, #196	@ 0xc4
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
			*channel = i;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	601a      	str	r2, [r3, #0]
			*is_connected = sensor->status[i].is_connected;
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	33b4      	adds	r3, #180	@ 0xb4
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	601a      	str	r2, [r3, #0]
			return 1;
 8004360:	2301      	movs	r3, #1
 8004362:	e006      	b.n	8004372 <VibeCheckSensor_ConnectionChanged+0x6a>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	3301      	adds	r3, #1
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d9d4      	bls.n	800431a <VibeCheckSensor_ConnectionChanged+0x12>
		}
	}

	return 0;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <VibeCheckSensor_UpdateSensor>:


void VibeCheckSensor_UpdateSensor(VibeCheckSensor* sensor, uint32_t channel)  /* send the new configuration parameters to a sensor chip */
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <VibeCheckSensor_UpdateSensor+0x14>
 800438e:	2302      	movs	r3, #2
 8004390:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected)
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	33b4      	adds	r3, #180	@ 0xb4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d030      	beq.n	800440a <VibeCheckSensor_UpdateSensor+0x8c>
	{
		LSM6DS3_Configure(&sensor->sensor_array[channel]);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	015b      	lsls	r3, r3, #5
 80043ac:	3350      	adds	r3, #80	@ 0x50
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	3304      	adds	r3, #4
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc fbc3 	bl	8000b40 <LSM6DS3_Configure>
		if (sensor->status[channel].accel_measuring)
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	33b8      	adds	r3, #184	@ 0xb8
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <VibeCheckSensor_UpdateSensor+0x64>
			LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	015b      	lsls	r3, r3, #5
 80043d4:	3350      	adds	r3, #80	@ 0x50
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	3304      	adds	r3, #4
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fc fc25 	bl	8000c2c <LSM6DS3_StartAccel>
		if (sensor->status[channel].gyro_measuring)
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	33bc      	adds	r3, #188	@ 0xbc
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <VibeCheckSensor_UpdateSensor+0x8c>
			LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	015b      	lsls	r3, r3, #5
 80043fc:	3350      	adds	r3, #80	@ 0x50
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	4413      	add	r3, r2
 8004402:	3304      	adds	r3, #4
 8004404:	4618      	mov	r0, r3
 8004406:	f7fc fcb3 	bl	8000d70 <LSM6DS3_StartGyro>
	}
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <VibeCheckSensor_AddData>:


void VibeCheckSensor_AddData(VibeCheckSensor* sensor, uint8_t id, uint32_t time, float x, float y, float z)
{
 8004412:	b480      	push	{r7}
 8004414:	b087      	sub	sp, #28
 8004416:	af00      	add	r7, sp, #0
 8004418:	6178      	str	r0, [r7, #20]
 800441a:	460b      	mov	r3, r1
 800441c:	60fa      	str	r2, [r7, #12]
 800441e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004422:	edc7 0a01 	vstr	s1, [r7, #4]
 8004426:	ed87 1a00 	vstr	s2, [r7]
 800442a:	74fb      	strb	r3, [r7, #19]
	sensor->data[sensor->data_ind].id = id;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 8004432:	6979      	ldr	r1, [r7, #20]
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	33f0      	adds	r3, #240	@ 0xf0
 8004440:	7cfa      	ldrb	r2, [r7, #19]
 8004442:	701a      	strb	r2, [r3, #0]
	sensor->data[sensor->data_ind].time = time;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 800444a:	6979      	ldr	r1, [r7, #20]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	33f4      	adds	r3, #244	@ 0xf4
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].x = x;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 8004462:	6979      	ldr	r1, [r7, #20]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	33f8      	adds	r3, #248	@ 0xf8
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].y = y;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 800447a:	6979      	ldr	r1, [r7, #20]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	33fc      	adds	r3, #252	@ 0xfc
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].z = z;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 8004492:	6979      	ldr	r1, [r7, #20]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	601a      	str	r2, [r3, #0]

	sensor->data_ind++;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
	if (sensor->data_ind == VC_SENSOR_DATA_PER_PACKET)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80044ba:	2b0a      	cmp	r3, #10
 80044bc:	d104      	bne.n	80044c8 <VibeCheckSensor_AddData+0xb6>
	{
		sensor->data_ready = 1;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
	else if (sensor->data_ind == 2 * VC_SENSOR_DATA_PER_PACKET)
	{
		sensor->data_ind = 0;
		sensor->data_ready = 1;
	}
}
 80044c6:	e00c      	b.n	80044e2 <VibeCheckSensor_AddData+0xd0>
	else if (sensor->data_ind == 2 * VC_SENSOR_DATA_PER_PACKET)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80044ce:	2b14      	cmp	r3, #20
 80044d0:	d107      	bne.n	80044e2 <VibeCheckSensor_AddData+0xd0>
		sensor->data_ind = 0;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
		sensor->data_ready = 1;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2201      	movs	r2, #1
 80044de:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <VibeCheckSensor_GetDataReady>:


uint32_t VibeCheckSensor_GetDataReady(VibeCheckSensor* sensor, VibeCheckSensor_Data** data)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	6039      	str	r1, [r7, #0]
	if (sensor->data_ready)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d015      	beq.n	800452e <VibeCheckSensor_GetDataReady+0x40>
	{
		sensor->data_ready = 0;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
		if (sensor->data_ind < VC_SENSOR_DATA_PER_PACKET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8004510:	2b09      	cmp	r3, #9
 8004512:	d805      	bhi.n	8004520 <VibeCheckSensor_GetDataReady+0x32>
		{
			/* ready to send the second half */
			*data = &sensor->data[VC_SENSOR_DATA_PER_PACKET];
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f503 72dc 	add.w	r2, r3, #440	@ 0x1b8
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e004      	b.n	800452a <VibeCheckSensor_GetDataReady+0x3c>
		}
		else
		{
			/* ready to send the first half */
			*data = &sensor->data[0];
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	601a      	str	r2, [r3, #0]
		}
		return 1;
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <VibeCheckSensor_GetDataReady+0x42>
	}
	return 0;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <VibeCheckSensor_EXTICallback>:


void VibeCheckSensor_EXTICallback(VibeCheckSensor* sensor, uint16_t GPIO_Pin)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	@ 0x28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	807b      	strh	r3, [r7, #2]
	/*
	 * Read the sensor data when a signal occurs on a data ready pin. We assume that the INT1 pin indicates acceleration
	 * data ready and that the INT2 pin indicates gyroscope data ready.
	 */

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004548:	2300      	movs	r3, #0
 800454a:	627b      	str	r3, [r7, #36]	@ 0x24
 800454c:	e089      	b.n	8004662 <VibeCheckSensor_EXTICallback+0x126>
	{
		if (GPIO_Pin == sensor->sensor_array[i].int1_pin && sensor->status[i].accel_measuring)
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	3303      	adds	r3, #3
 8004554:	015b      	lsls	r3, r3, #5
 8004556:	4413      	add	r3, r2
 8004558:	3304      	adds	r3, #4
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	887a      	ldrh	r2, [r7, #2]
 800455e:	429a      	cmp	r2, r3
 8004560:	d138      	bne.n	80045d4 <VibeCheckSensor_EXTICallback+0x98>
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	33b8      	adds	r3, #184	@ 0xb8
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d02d      	beq.n	80045d4 <VibeCheckSensor_EXTICallback+0x98>
		{
			float x, y, z;
			LSM6DS3_ReadAccel(&sensor->sensor_array[i], &x, &y, &z);
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	015b      	lsls	r3, r3, #5
 800457c:	3350      	adds	r3, #80	@ 0x50
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	4413      	add	r3, r2
 8004582:	1d18      	adds	r0, r3, #4
 8004584:	f107 0318 	add.w	r3, r7, #24
 8004588:	f107 021c 	add.w	r2, r7, #28
 800458c:	f107 0120 	add.w	r1, r7, #32
 8004590:	f7fc fca2 	bl	8000ed8 <LSM6DS3_ReadAccel>
			VibeCheckSensor_AddData(sensor, 2 * i, 0, x, y, z);  /* TODO: add time stamps */
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	b2db      	uxtb	r3, r3
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	edd7 7a08 	vldr	s15, [r7, #32]
 80045a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80045a4:	edd7 6a06 	vldr	s13, [r7, #24]
 80045a8:	eeb0 1a66 	vmov.f32	s2, s13
 80045ac:	eef0 0a47 	vmov.f32	s1, s14
 80045b0:	eeb0 0a67 	vmov.f32	s0, s15
 80045b4:	2200      	movs	r2, #0
 80045b6:	4619      	mov	r1, r3
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ff2a 	bl	8004412 <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	33c0      	adds	r3, #192	@ 0xc0
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
			break;
 80045d2:	e04b      	b.n	800466c <VibeCheckSensor_EXTICallback+0x130>
		}

		if (GPIO_Pin == sensor->sensor_array[i].int2_pin && sensor->status[i].gyro_measuring)
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	015b      	lsls	r3, r3, #5
 80045da:	4413      	add	r3, r2
 80045dc:	336c      	adds	r3, #108	@ 0x6c
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	887a      	ldrh	r2, [r7, #2]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d13a      	bne.n	800465c <VibeCheckSensor_EXTICallback+0x120>
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	33bc      	adds	r3, #188	@ 0xbc
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d02f      	beq.n	800465c <VibeCheckSensor_EXTICallback+0x120>
		{
			float x, y, z;
			LSM6DS3_ReadGyro(&sensor->sensor_array[i], &x, &y, &z);
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	015b      	lsls	r3, r3, #5
 8004600:	3350      	adds	r3, #80	@ 0x50
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	4413      	add	r3, r2
 8004606:	1d18      	adds	r0, r3, #4
 8004608:	f107 030c 	add.w	r3, r7, #12
 800460c:	f107 0210 	add.w	r2, r7, #16
 8004610:	f107 0114 	add.w	r1, r7, #20
 8004614:	f7fc fce2 	bl	8000fdc <LSM6DS3_ReadGyro>
			VibeCheckSensor_AddData(sensor, 2 * i + 1, 0, x, y, z);  /* TODO: add time stamps */
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	b2db      	uxtb	r3, r3
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	b2db      	uxtb	r3, r3
 8004620:	3301      	adds	r3, #1
 8004622:	b2db      	uxtb	r3, r3
 8004624:	edd7 7a05 	vldr	s15, [r7, #20]
 8004628:	ed97 7a04 	vldr	s14, [r7, #16]
 800462c:	edd7 6a03 	vldr	s13, [r7, #12]
 8004630:	eeb0 1a66 	vmov.f32	s2, s13
 8004634:	eef0 0a47 	vmov.f32	s1, s14
 8004638:	eeb0 0a67 	vmov.f32	s0, s15
 800463c:	2200      	movs	r2, #0
 800463e:	4619      	mov	r1, r3
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff fee6 	bl	8004412 <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	33c0      	adds	r3, #192	@ 0xc0
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]
			break;
 800465a:	e007      	b.n	800466c <VibeCheckSensor_EXTICallback+0x130>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	3301      	adds	r3, #1
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	2b02      	cmp	r3, #2
 8004666:	f67f af72 	bls.w	800454e <VibeCheckSensor_EXTICallback+0x12>
		}
	}
}
 800466a:	bf00      	nop
 800466c:	bf00      	nop
 800466e:	3728      	adds	r7, #40	@ 0x28
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <VibeCheckSensorCMD_Set>:

#include "vibecheck_sensor_handler.h"


static uint32_t VibeCheckSensorCMD_Set(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b09c      	sub	sp, #112	@ 0x70
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004680:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004684:	2240      	movs	r2, #64	@ 0x40
 8004686:	4619      	mov	r1, r3
 8004688:	68b8      	ldr	r0, [r7, #8]
 800468a:	f000 fe25 	bl	80052d8 <VibeCheckShell_GetNextString>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80eb 	beq.w	800486c <VibeCheckSensorCMD_Set+0x1f8>
	{
		if (!strcmp(str, "accel"))
 8004696:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800469a:	4977      	ldr	r1, [pc, #476]	@ (8004878 <VibeCheckSensorCMD_Set+0x204>)
 800469c:	4618      	mov	r0, r3
 800469e:	f7fb fe37 	bl	8000310 <strcmp>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d14f      	bne.n	8004748 <VibeCheckSensorCMD_Set+0xd4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80046a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80046ac:	2240      	movs	r2, #64	@ 0x40
 80046ae:	4619      	mov	r1, r3
 80046b0:	68b8      	ldr	r0, [r7, #8]
 80046b2:	f000 fe11 	bl	80052d8 <VibeCheckShell_GetNextString>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80d7 	beq.w	800486c <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 80046be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80046c2:	496e      	ldr	r1, [pc, #440]	@ (800487c <VibeCheckSensorCMD_Set+0x208>)
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fb fe23 	bl	8000310 <strcmp>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d118      	bne.n	8004702 <VibeCheckSensorCMD_Set+0x8e>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 80046d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046d4:	4619      	mov	r1, r3
 80046d6:	68b8      	ldr	r0, [r7, #8]
 80046d8:	f000 fe6e 	bl	80053b8 <VibeCheckShell_GetNextInt>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 80c4 	beq.w	800486c <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelODR(sensor, channel, odr);
 80046e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e6:	461a      	mov	r2, r3
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7ff fc4a 	bl	8003f84 <VibeCheckSensor_SetAccelODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 80046f0:	4963      	ldr	r1, [pc, #396]	@ (8004880 <VibeCheckSensorCMD_Set+0x20c>)
 80046f2:	68b8      	ldr	r0, [r7, #8]
 80046f4:	f000 ff08 	bl	8005508 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 80046f8:	68b8      	ldr	r0, [r7, #8]
 80046fa:	f000 ff83 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0b5      	b.n	800486e <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 8004702:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004706:	495f      	ldr	r1, [pc, #380]	@ (8004884 <VibeCheckSensorCMD_Set+0x210>)
 8004708:	4618      	mov	r0, r3
 800470a:	f7fb fe01 	bl	8000310 <strcmp>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	f040 80ab 	bne.w	800486c <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 8004716:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800471a:	4619      	mov	r1, r3
 800471c:	68b8      	ldr	r0, [r7, #8]
 800471e:	f000 fe4b 	bl	80053b8 <VibeCheckShell_GetNextInt>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 80a1 	beq.w	800486c <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelRange(sensor, channel, range);
 800472a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472c:	461a      	mov	r2, r3
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7ff fc6f 	bl	8004014 <VibeCheckSensor_SetAccelRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004736:	4952      	ldr	r1, [pc, #328]	@ (8004880 <VibeCheckSensorCMD_Set+0x20c>)
 8004738:	68b8      	ldr	r0, [r7, #8]
 800473a:	f000 fee5 	bl	8005508 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 800473e:	68b8      	ldr	r0, [r7, #8]
 8004740:	f000 ff60 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004744:	2301      	movs	r3, #1
 8004746:	e092      	b.n	800486e <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8004748:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800474c:	494e      	ldr	r1, [pc, #312]	@ (8004888 <VibeCheckSensorCMD_Set+0x214>)
 800474e:	4618      	mov	r0, r3
 8004750:	f7fb fdde 	bl	8000310 <strcmp>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d14b      	bne.n	80047f2 <VibeCheckSensorCMD_Set+0x17e>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800475a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800475e:	2240      	movs	r2, #64	@ 0x40
 8004760:	4619      	mov	r1, r3
 8004762:	68b8      	ldr	r0, [r7, #8]
 8004764:	f000 fdb8 	bl	80052d8 <VibeCheckShell_GetNextString>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d07e      	beq.n	800486c <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 800476e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004772:	4942      	ldr	r1, [pc, #264]	@ (800487c <VibeCheckSensorCMD_Set+0x208>)
 8004774:	4618      	mov	r0, r3
 8004776:	f7fb fdcb 	bl	8000310 <strcmp>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d117      	bne.n	80047b0 <VibeCheckSensorCMD_Set+0x13c>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 8004780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004784:	4619      	mov	r1, r3
 8004786:	68b8      	ldr	r0, [r7, #8]
 8004788:	f000 fe16 	bl	80053b8 <VibeCheckShell_GetNextInt>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d06c      	beq.n	800486c <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroODR(sensor, channel, odr);
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	461a      	mov	r2, r3
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff fc17 	bl	8003fcc <VibeCheckSensor_SetGyroODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 800479e:	4938      	ldr	r1, [pc, #224]	@ (8004880 <VibeCheckSensorCMD_Set+0x20c>)
 80047a0:	68b8      	ldr	r0, [r7, #8]
 80047a2:	f000 feb1 	bl	8005508 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 80047a6:	68b8      	ldr	r0, [r7, #8]
 80047a8:	f000 ff2c 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e05e      	b.n	800486e <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 80047b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80047b4:	4933      	ldr	r1, [pc, #204]	@ (8004884 <VibeCheckSensorCMD_Set+0x210>)
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fb fdaa 	bl	8000310 <strcmp>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d154      	bne.n	800486c <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 80047c2:	f107 0320 	add.w	r3, r7, #32
 80047c6:	4619      	mov	r1, r3
 80047c8:	68b8      	ldr	r0, [r7, #8]
 80047ca:	f000 fdf5 	bl	80053b8 <VibeCheckShell_GetNextInt>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d04b      	beq.n	800486c <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroRange(sensor, channel, range);
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	461a      	mov	r2, r3
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f7ff fc3e 	bl	800405c <VibeCheckSensor_SetGyroRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 80047e0:	4927      	ldr	r1, [pc, #156]	@ (8004880 <VibeCheckSensorCMD_Set+0x20c>)
 80047e2:	68b8      	ldr	r0, [r7, #8]
 80047e4:	f000 fe90 	bl	8005508 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 80047e8:	68b8      	ldr	r0, [r7, #8]
 80047ea:	f000 ff0b 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e03d      	b.n	800486e <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 80047f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80047f6:	4925      	ldr	r1, [pc, #148]	@ (800488c <VibeCheckSensorCMD_Set+0x218>)
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fb fd89 	bl	8000310 <strcmp>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d133      	bne.n	800486c <VibeCheckSensorCMD_Set+0x1f8>
		{
			float x, y, z;
			if (VibeCheckShell_GetNextFloat(shell, &x)
 8004804:	f107 031c 	add.w	r3, r7, #28
 8004808:	4619      	mov	r1, r3
 800480a:	68b8      	ldr	r0, [r7, #8]
 800480c:	f000 fdf0 	bl	80053f0 <VibeCheckShell_GetNextFloat>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d02a      	beq.n	800486c <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &y)
 8004816:	f107 0318 	add.w	r3, r7, #24
 800481a:	4619      	mov	r1, r3
 800481c:	68b8      	ldr	r0, [r7, #8]
 800481e:	f000 fde7 	bl	80053f0 <VibeCheckShell_GetNextFloat>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d021      	beq.n	800486c <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &z))
 8004828:	f107 0314 	add.w	r3, r7, #20
 800482c:	4619      	mov	r1, r3
 800482e:	68b8      	ldr	r0, [r7, #8]
 8004830:	f000 fdde 	bl	80053f0 <VibeCheckShell_GetNextFloat>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d018      	beq.n	800486c <VibeCheckSensorCMD_Set+0x1f8>
			{
				VibeCheckSensor_SetOffsets(sensor, channel, x, y, z);
 800483a:	edd7 7a07 	vldr	s15, [r7, #28]
 800483e:	ed97 7a06 	vldr	s14, [r7, #24]
 8004842:	edd7 6a05 	vldr	s13, [r7, #20]
 8004846:	eeb0 1a66 	vmov.f32	s2, s13
 800484a:	eef0 0a47 	vmov.f32	s1, s14
 800484e:	eeb0 0a67 	vmov.f32	s0, s15
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff fc25 	bl	80040a4 <VibeCheckSensor_SetOffsets>
				VibeCheckShell_PutOutputString(shell, "ack");
 800485a:	4909      	ldr	r1, [pc, #36]	@ (8004880 <VibeCheckSensorCMD_Set+0x20c>)
 800485c:	68b8      	ldr	r0, [r7, #8]
 800485e:	f000 fe53 	bl	8005508 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004862:	68b8      	ldr	r0, [r7, #8]
 8004864:	f000 fece 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004868:	2301      	movs	r3, #1
 800486a:	e000      	b.n	800486e <VibeCheckSensorCMD_Set+0x1fa>
			}
		}
	}


	return 0;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3770      	adds	r7, #112	@ 0x70
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	0801d0d0 	.word	0x0801d0d0
 800487c:	0801d0d8 	.word	0x0801d0d8
 8004880:	0801d0dc 	.word	0x0801d0dc
 8004884:	0801d0e0 	.word	0x0801d0e0
 8004888:	0801d0e8 	.word	0x0801d0e8
 800488c:	0801d0f0 	.word	0x0801d0f0

08004890 <VibeCheckSensorCMD_Get>:


static uint32_t VibeCheckSensorCMD_Get(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b09a      	sub	sp, #104	@ 0x68
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800489c:	f107 0320 	add.w	r3, r7, #32
 80048a0:	2240      	movs	r2, #64	@ 0x40
 80048a2:	4619      	mov	r1, r3
 80048a4:	68b8      	ldr	r0, [r7, #8]
 80048a6:	f000 fd17 	bl	80052d8 <VibeCheckShell_GetNextString>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80dc 	beq.w	8004a6a <VibeCheckSensorCMD_Get+0x1da>
	{
		if (!strcmp(str, "accel"))
 80048b2:	f107 0320 	add.w	r3, r7, #32
 80048b6:	496f      	ldr	r1, [pc, #444]	@ (8004a74 <VibeCheckSensorCMD_Get+0x1e4>)
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fb fd29 	bl	8000310 <strcmp>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d147      	bne.n	8004954 <VibeCheckSensorCMD_Get+0xc4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80048c4:	f107 0320 	add.w	r3, r7, #32
 80048c8:	2240      	movs	r2, #64	@ 0x40
 80048ca:	4619      	mov	r1, r3
 80048cc:	68b8      	ldr	r0, [r7, #8]
 80048ce:	f000 fd03 	bl	80052d8 <VibeCheckShell_GetNextString>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 80c8 	beq.w	8004a6a <VibeCheckSensorCMD_Get+0x1da>
			{
				if (!strcmp(str, "odr"))
 80048da:	f107 0320 	add.w	r3, r7, #32
 80048de:	4966      	ldr	r1, [pc, #408]	@ (8004a78 <VibeCheckSensorCMD_Get+0x1e8>)
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fb fd15 	bl	8000310 <strcmp>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d114      	bne.n	8004916 <VibeCheckSensorCMD_Get+0x86>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 80048ec:	4963      	ldr	r1, [pc, #396]	@ (8004a7c <VibeCheckSensorCMD_Get+0x1ec>)
 80048ee:	68b8      	ldr	r0, [r7, #8]
 80048f0:	f000 fe0a 	bl	8005508 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 80048f4:	68b8      	ldr	r0, [r7, #8]
 80048f6:	f000 fe77 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelODR(sensor, channel));
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7ff fc51 	bl	80041a4 <VibeCheckSensor_GetAccelODR>
 8004902:	4603      	mov	r3, r0
 8004904:	4619      	mov	r1, r3
 8004906:	68b8      	ldr	r0, [r7, #8]
 8004908:	f000 fe38 	bl	800557c <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 800490c:	68b8      	ldr	r0, [r7, #8]
 800490e:	f000 fe79 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004912:	2301      	movs	r3, #1
 8004914:	e0aa      	b.n	8004a6c <VibeCheckSensorCMD_Get+0x1dc>
				}
				else if (!strcmp(str, "range"))
 8004916:	f107 0320 	add.w	r3, r7, #32
 800491a:	4959      	ldr	r1, [pc, #356]	@ (8004a80 <VibeCheckSensorCMD_Get+0x1f0>)
 800491c:	4618      	mov	r0, r3
 800491e:	f7fb fcf7 	bl	8000310 <strcmp>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	f040 80a0 	bne.w	8004a6a <VibeCheckSensorCMD_Get+0x1da>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 800492a:	4954      	ldr	r1, [pc, #336]	@ (8004a7c <VibeCheckSensorCMD_Get+0x1ec>)
 800492c:	68b8      	ldr	r0, [r7, #8]
 800492e:	f000 fdeb 	bl	8005508 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004932:	68b8      	ldr	r0, [r7, #8]
 8004934:	f000 fe58 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelRange(sensor, channel));
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff fc64 	bl	8004208 <VibeCheckSensor_GetAccelRange>
 8004940:	4603      	mov	r3, r0
 8004942:	4619      	mov	r1, r3
 8004944:	68b8      	ldr	r0, [r7, #8]
 8004946:	f000 fe19 	bl	800557c <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 800494a:	68b8      	ldr	r0, [r7, #8]
 800494c:	f000 fe5a 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004950:	2301      	movs	r3, #1
 8004952:	e08b      	b.n	8004a6c <VibeCheckSensorCMD_Get+0x1dc>
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8004954:	f107 0320 	add.w	r3, r7, #32
 8004958:	494a      	ldr	r1, [pc, #296]	@ (8004a84 <VibeCheckSensorCMD_Get+0x1f4>)
 800495a:	4618      	mov	r0, r3
 800495c:	f7fb fcd8 	bl	8000310 <strcmp>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d145      	bne.n	80049f2 <VibeCheckSensorCMD_Get+0x162>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004966:	f107 0320 	add.w	r3, r7, #32
 800496a:	2240      	movs	r2, #64	@ 0x40
 800496c:	4619      	mov	r1, r3
 800496e:	68b8      	ldr	r0, [r7, #8]
 8004970:	f000 fcb2 	bl	80052d8 <VibeCheckShell_GetNextString>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d077      	beq.n	8004a6a <VibeCheckSensorCMD_Get+0x1da>
			{
				if (!strcmp(str, "odr"))
 800497a:	f107 0320 	add.w	r3, r7, #32
 800497e:	493e      	ldr	r1, [pc, #248]	@ (8004a78 <VibeCheckSensorCMD_Get+0x1e8>)
 8004980:	4618      	mov	r0, r3
 8004982:	f7fb fcc5 	bl	8000310 <strcmp>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d114      	bne.n	80049b6 <VibeCheckSensorCMD_Get+0x126>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 800498c:	493b      	ldr	r1, [pc, #236]	@ (8004a7c <VibeCheckSensorCMD_Get+0x1ec>)
 800498e:	68b8      	ldr	r0, [r7, #8]
 8004990:	f000 fdba 	bl	8005508 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004994:	68b8      	ldr	r0, [r7, #8]
 8004996:	f000 fe27 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroODR(sensor, channel));
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff fc1a 	bl	80041d6 <VibeCheckSensor_GetGyroODR>
 80049a2:	4603      	mov	r3, r0
 80049a4:	4619      	mov	r1, r3
 80049a6:	68b8      	ldr	r0, [r7, #8]
 80049a8:	f000 fde8 	bl	800557c <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 80049ac:	68b8      	ldr	r0, [r7, #8]
 80049ae:	f000 fe29 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e05a      	b.n	8004a6c <VibeCheckSensorCMD_Get+0x1dc>
				}
				else if (!strcmp(str, "range"))
 80049b6:	f107 0320 	add.w	r3, r7, #32
 80049ba:	4931      	ldr	r1, [pc, #196]	@ (8004a80 <VibeCheckSensorCMD_Get+0x1f0>)
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fb fca7 	bl	8000310 <strcmp>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d150      	bne.n	8004a6a <VibeCheckSensorCMD_Get+0x1da>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 80049c8:	492c      	ldr	r1, [pc, #176]	@ (8004a7c <VibeCheckSensorCMD_Get+0x1ec>)
 80049ca:	68b8      	ldr	r0, [r7, #8]
 80049cc:	f000 fd9c 	bl	8005508 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 80049d0:	68b8      	ldr	r0, [r7, #8]
 80049d2:	f000 fe09 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroRange(sensor, channel));
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f7ff fc2e 	bl	800423a <VibeCheckSensor_GetGyroRange>
 80049de:	4603      	mov	r3, r0
 80049e0:	4619      	mov	r1, r3
 80049e2:	68b8      	ldr	r0, [r7, #8]
 80049e4:	f000 fdca 	bl	800557c <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 80049e8:	68b8      	ldr	r0, [r7, #8]
 80049ea:	f000 fe0b 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e03c      	b.n	8004a6c <VibeCheckSensorCMD_Get+0x1dc>
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 80049f2:	f107 0320 	add.w	r3, r7, #32
 80049f6:	4924      	ldr	r1, [pc, #144]	@ (8004a88 <VibeCheckSensorCMD_Get+0x1f8>)
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fb fc89 	bl	8000310 <strcmp>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d132      	bne.n	8004a6a <VibeCheckSensorCMD_Get+0x1da>
		{
			float x, y, z;
			VibeCheckSensor_GetOffsets(sensor, channel, &x, &y, &z);
 8004a04:	f107 0118 	add.w	r1, r7, #24
 8004a08:	f107 021c 	add.w	r2, r7, #28
 8004a0c:	f107 0314 	add.w	r3, r7, #20
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	460b      	mov	r3, r1
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f7ff fc28 	bl	800426c <VibeCheckSensor_GetOffsets>

			VibeCheckShell_PutOutputString(shell, "ack");
 8004a1c:	4917      	ldr	r1, [pc, #92]	@ (8004a7c <VibeCheckSensorCMD_Get+0x1ec>)
 8004a1e:	68b8      	ldr	r0, [r7, #8]
 8004a20:	f000 fd72 	bl	8005508 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8004a24:	68b8      	ldr	r0, [r7, #8]
 8004a26:	f000 fddf 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, x);
 8004a2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a32:	68b8      	ldr	r0, [r7, #8]
 8004a34:	f000 fdba 	bl	80055ac <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8004a38:	68b8      	ldr	r0, [r7, #8]
 8004a3a:	f000 fdd5 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, y);
 8004a3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a42:	eeb0 0a67 	vmov.f32	s0, s15
 8004a46:	68b8      	ldr	r0, [r7, #8]
 8004a48:	f000 fdb0 	bl	80055ac <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8004a4c:	68b8      	ldr	r0, [r7, #8]
 8004a4e:	f000 fdcb 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, z);
 8004a52:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a56:	eeb0 0a67 	vmov.f32	s0, s15
 8004a5a:	68b8      	ldr	r0, [r7, #8]
 8004a5c:	f000 fda6 	bl	80055ac <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004a60:	68b8      	ldr	r0, [r7, #8]
 8004a62:	f000 fdcf 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <VibeCheckSensorCMD_Get+0x1dc>
		}
	}

	return 0;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3760      	adds	r7, #96	@ 0x60
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	0801d0d0 	.word	0x0801d0d0
 8004a78:	0801d0d8 	.word	0x0801d0d8
 8004a7c:	0801d0dc 	.word	0x0801d0dc
 8004a80:	0801d0e0 	.word	0x0801d0e0
 8004a84:	0801d0e8 	.word	0x0801d0e8
 8004a88:	0801d0f0 	.word	0x0801d0f0

08004a8c <VibeCheckSensorCMD_Execute>:


uint32_t VibeCheckSensorCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b094      	sub	sp, #80	@ 0x50
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	int32_t channel;
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004a9a:	f107 030c 	add.w	r3, r7, #12
 8004a9e:	2240      	movs	r2, #64	@ 0x40
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	6838      	ldr	r0, [r7, #0]
 8004aa4:	f000 fc18 	bl	80052d8 <VibeCheckShell_GetNextString>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 8101 	beq.w	8004cb2 <VibeCheckSensorCMD_Execute+0x226>
	{
		if (!strcmp(str, "fakedata"))
 8004ab0:	f107 030c 	add.w	r3, r7, #12
 8004ab4:	4981      	ldr	r1, [pc, #516]	@ (8004cbc <VibeCheckSensorCMD_Execute+0x230>)
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fb fc2a 	bl	8000310 <strcmp>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d135      	bne.n	8004b2e <VibeCheckSensorCMD_Execute+0xa2>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004ac2:	f107 030c 	add.w	r3, r7, #12
 8004ac6:	2240      	movs	r2, #64	@ 0x40
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6838      	ldr	r0, [r7, #0]
 8004acc:	f000 fc04 	bl	80052d8 <VibeCheckShell_GetNextString>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 80ed 	beq.w	8004cb2 <VibeCheckSensorCMD_Execute+0x226>
			{
				if (!strcmp(str, "start"))
 8004ad8:	f107 030c 	add.w	r3, r7, #12
 8004adc:	4978      	ldr	r1, [pc, #480]	@ (8004cc0 <VibeCheckSensorCMD_Execute+0x234>)
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fb fc16 	bl	8000310 <strcmp>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10b      	bne.n	8004b02 <VibeCheckSensorCMD_Execute+0x76>
				{
					VibeCheckSensor_StartFakeData(sensor);
 8004aea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004aec:	f7ff fbf0 	bl	80042d0 <VibeCheckSensor_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004af0:	4974      	ldr	r1, [pc, #464]	@ (8004cc4 <VibeCheckSensorCMD_Execute+0x238>)
 8004af2:	6838      	ldr	r0, [r7, #0]
 8004af4:	f000 fd08 	bl	8005508 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004af8:	6838      	ldr	r0, [r7, #0]
 8004afa:	f000 fd83 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e0d8      	b.n	8004cb4 <VibeCheckSensorCMD_Execute+0x228>
				}
				else if (!strcmp(str, "stop"))
 8004b02:	f107 030c 	add.w	r3, r7, #12
 8004b06:	4970      	ldr	r1, [pc, #448]	@ (8004cc8 <VibeCheckSensorCMD_Execute+0x23c>)
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fb fc01 	bl	8000310 <strcmp>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f040 80ce 	bne.w	8004cb2 <VibeCheckSensorCMD_Execute+0x226>
				{
					VibeCheckSensor_StopFakeData(sensor);
 8004b16:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004b18:	f7ff fbe8 	bl	80042ec <VibeCheckSensor_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004b1c:	4969      	ldr	r1, [pc, #420]	@ (8004cc4 <VibeCheckSensorCMD_Execute+0x238>)
 8004b1e:	6838      	ldr	r0, [r7, #0]
 8004b20:	f000 fcf2 	bl	8005508 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004b24:	6838      	ldr	r0, [r7, #0]
 8004b26:	f000 fd6d 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e0c2      	b.n	8004cb4 <VibeCheckSensorCMD_Execute+0x228>
				}
			}
		}
		else if (VibeCheckShell_TurnToInt(str, &channel))
 8004b2e:	f107 0208 	add.w	r2, r7, #8
 8004b32:	f107 030c 	add.w	r3, r7, #12
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fc75 	bl	8005428 <VibeCheckShell_TurnToInt>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80b6 	beq.w	8004cb2 <VibeCheckSensorCMD_Execute+0x226>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004b46:	f107 030c 	add.w	r3, r7, #12
 8004b4a:	2240      	movs	r2, #64	@ 0x40
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	6838      	ldr	r0, [r7, #0]
 8004b50:	f000 fbc2 	bl	80052d8 <VibeCheckShell_GetNextString>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 80ab 	beq.w	8004cb2 <VibeCheckSensorCMD_Execute+0x226>
			{
				if (!strcmp(str, "start"))
 8004b5c:	f107 030c 	add.w	r3, r7, #12
 8004b60:	4957      	ldr	r1, [pc, #348]	@ (8004cc0 <VibeCheckSensorCMD_Execute+0x234>)
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fb fbd4 	bl	8000310 <strcmp>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d138      	bne.n	8004be0 <VibeCheckSensorCMD_Execute+0x154>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004b6e:	f107 030c 	add.w	r3, r7, #12
 8004b72:	2240      	movs	r2, #64	@ 0x40
 8004b74:	4619      	mov	r1, r3
 8004b76:	6838      	ldr	r0, [r7, #0]
 8004b78:	f000 fbae 	bl	80052d8 <VibeCheckShell_GetNextString>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8097 	beq.w	8004cb2 <VibeCheckSensorCMD_Execute+0x226>
					{
						if (!strcmp(str, "accel"))
 8004b84:	f107 030c 	add.w	r3, r7, #12
 8004b88:	4950      	ldr	r1, [pc, #320]	@ (8004ccc <VibeCheckSensorCMD_Execute+0x240>)
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fb fbc0 	bl	8000310 <strcmp>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10d      	bne.n	8004bb2 <VibeCheckSensorCMD_Execute+0x126>
						{
							VibeCheckSensor_StartAccel(sensor, channel);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004b9c:	f7ff f916 	bl	8003dcc <VibeCheckSensor_StartAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 8004ba0:	4948      	ldr	r1, [pc, #288]	@ (8004cc4 <VibeCheckSensorCMD_Execute+0x238>)
 8004ba2:	6838      	ldr	r0, [r7, #0]
 8004ba4:	f000 fcb0 	bl	8005508 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8004ba8:	6838      	ldr	r0, [r7, #0]
 8004baa:	f000 fd2b 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e080      	b.n	8004cb4 <VibeCheckSensorCMD_Execute+0x228>
						}
						else if (!strcmp(str, "gyro"))
 8004bb2:	f107 030c 	add.w	r3, r7, #12
 8004bb6:	4946      	ldr	r1, [pc, #280]	@ (8004cd0 <VibeCheckSensorCMD_Execute+0x244>)
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fb fba9 	bl	8000310 <strcmp>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d176      	bne.n	8004cb2 <VibeCheckSensorCMD_Execute+0x226>
						{
							VibeCheckSensor_StartGyro(sensor, channel);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004bca:	f7ff f96d 	bl	8003ea8 <VibeCheckSensor_StartGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8004bce:	493d      	ldr	r1, [pc, #244]	@ (8004cc4 <VibeCheckSensorCMD_Execute+0x238>)
 8004bd0:	6838      	ldr	r0, [r7, #0]
 8004bd2:	f000 fc99 	bl	8005508 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8004bd6:	6838      	ldr	r0, [r7, #0]
 8004bd8:	f000 fd14 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e069      	b.n	8004cb4 <VibeCheckSensorCMD_Execute+0x228>
						}
					}
				}
				else if (!strcmp(str, "stop"))
 8004be0:	f107 030c 	add.w	r3, r7, #12
 8004be4:	4938      	ldr	r1, [pc, #224]	@ (8004cc8 <VibeCheckSensorCMD_Execute+0x23c>)
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fb fb92 	bl	8000310 <strcmp>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d137      	bne.n	8004c62 <VibeCheckSensorCMD_Execute+0x1d6>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004bf2:	f107 030c 	add.w	r3, r7, #12
 8004bf6:	2240      	movs	r2, #64	@ 0x40
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6838      	ldr	r0, [r7, #0]
 8004bfc:	f000 fb6c 	bl	80052d8 <VibeCheckShell_GetNextString>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d055      	beq.n	8004cb2 <VibeCheckSensorCMD_Execute+0x226>
					{
						if (!strcmp(str, "accel"))
 8004c06:	f107 030c 	add.w	r3, r7, #12
 8004c0a:	4930      	ldr	r1, [pc, #192]	@ (8004ccc <VibeCheckSensorCMD_Execute+0x240>)
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fb fb7f 	bl	8000310 <strcmp>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10d      	bne.n	8004c34 <VibeCheckSensorCMD_Execute+0x1a8>
						{
							VibeCheckSensor_StopAccel(sensor, channel);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004c1e:	f7ff f90c 	bl	8003e3a <VibeCheckSensor_StopAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 8004c22:	4928      	ldr	r1, [pc, #160]	@ (8004cc4 <VibeCheckSensorCMD_Execute+0x238>)
 8004c24:	6838      	ldr	r0, [r7, #0]
 8004c26:	f000 fc6f 	bl	8005508 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8004c2a:	6838      	ldr	r0, [r7, #0]
 8004c2c:	f000 fcea 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e03f      	b.n	8004cb4 <VibeCheckSensorCMD_Execute+0x228>
						}
						else if (!strcmp(str, "gyro"))
 8004c34:	f107 030c 	add.w	r3, r7, #12
 8004c38:	4925      	ldr	r1, [pc, #148]	@ (8004cd0 <VibeCheckSensorCMD_Execute+0x244>)
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fb fb68 	bl	8000310 <strcmp>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d135      	bne.n	8004cb2 <VibeCheckSensorCMD_Execute+0x226>
						{
							VibeCheckSensor_StopGyro(sensor, channel);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004c4c:	f7ff f963 	bl	8003f16 <VibeCheckSensor_StopGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8004c50:	491c      	ldr	r1, [pc, #112]	@ (8004cc4 <VibeCheckSensorCMD_Execute+0x238>)
 8004c52:	6838      	ldr	r0, [r7, #0]
 8004c54:	f000 fc58 	bl	8005508 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8004c58:	6838      	ldr	r0, [r7, #0]
 8004c5a:	f000 fcd3 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e028      	b.n	8004cb4 <VibeCheckSensorCMD_Execute+0x228>
						}
					}
				}
				else if (!strcmp(str, "set"))
 8004c62:	f107 030c 	add.w	r3, r7, #12
 8004c66:	491b      	ldr	r1, [pc, #108]	@ (8004cd4 <VibeCheckSensorCMD_Execute+0x248>)
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fb fb51 	bl	8000310 <strcmp>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <VibeCheckSensorCMD_Execute+0x1fe>
				{
					if (VibeCheckSensorCMD_Set(sensor, shell, channel))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	461a      	mov	r2, r3
 8004c78:	6839      	ldr	r1, [r7, #0]
 8004c7a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004c7c:	f7ff fcfa 	bl	8004674 <VibeCheckSensorCMD_Set>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d015      	beq.n	8004cb2 <VibeCheckSensorCMD_Execute+0x226>
					{
						return 1;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e014      	b.n	8004cb4 <VibeCheckSensorCMD_Execute+0x228>
					}
				}
				else if (!strcmp(str, "get"))
 8004c8a:	f107 030c 	add.w	r3, r7, #12
 8004c8e:	4912      	ldr	r1, [pc, #72]	@ (8004cd8 <VibeCheckSensorCMD_Execute+0x24c>)
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fb fb3d 	bl	8000310 <strcmp>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <VibeCheckSensorCMD_Execute+0x226>
				{
					if (VibeCheckSensorCMD_Get(sensor, shell, channel))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	6839      	ldr	r1, [r7, #0]
 8004ca2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004ca4:	f7ff fdf4 	bl	8004890 <VibeCheckSensorCMD_Get>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <VibeCheckSensorCMD_Execute+0x226>
					{
						return 1;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <VibeCheckSensorCMD_Execute+0x228>
				}
			}
		}
	}

	return 0;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3750      	adds	r7, #80	@ 0x50
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	0801d0f8 	.word	0x0801d0f8
 8004cc0:	0801d104 	.word	0x0801d104
 8004cc4:	0801d0dc 	.word	0x0801d0dc
 8004cc8:	0801d10c 	.word	0x0801d10c
 8004ccc:	0801d0d0 	.word	0x0801d0d0
 8004cd0:	0801d0e8 	.word	0x0801d0e8
 8004cd4:	0801d114 	.word	0x0801d114
 8004cd8:	0801d118 	.word	0x0801d118

08004cdc <VibeCheckSensorSender_Data_Execute>:


uint32_t VibeCheckSensorSender_Data_Execute(void* obj, VibeCheckShell* shell)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	613b      	str	r3, [r7, #16]

	VibeCheckSensor_Data* data;
	if (VibeCheckSensor_GetDataReady(sensor, &data))
 8004cea:	f107 030c 	add.w	r3, r7, #12
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6938      	ldr	r0, [r7, #16]
 8004cf2:	f7ff fbfc 	bl	80044ee <VibeCheckSensor_GetDataReady>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d04e      	beq.n	8004d9a <VibeCheckSensorSender_Data_Execute+0xbe>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 8004cfc:	4929      	ldr	r1, [pc, #164]	@ (8004da4 <VibeCheckSensorSender_Data_Execute+0xc8>)
 8004cfe:	6838      	ldr	r0, [r7, #0]
 8004d00:	f000 fc02 	bl	8005508 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8004d04:	6838      	ldr	r0, [r7, #0]
 8004d06:	f000 fc6f 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, VC_SENSOR_DATA_PER_PACKET);
 8004d0a:	210a      	movs	r1, #10
 8004d0c:	6838      	ldr	r0, [r7, #0]
 8004d0e:	f000 fc35 	bl	800557c <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
		while (data_written < VC_SENSOR_DATA_PER_PACKET)
 8004d16:	e038      	b.n	8004d8a <VibeCheckSensorSender_Data_Execute+0xae>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 8004d18:	6838      	ldr	r0, [r7, #0]
 8004d1a:	f000 fc65 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	4619      	mov	r1, r3
 8004d24:	6838      	ldr	r0, [r7, #0]
 8004d26:	f000 fc29 	bl	800557c <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8004d2a:	6838      	ldr	r0, [r7, #0]
 8004d2c:	f000 fc5c 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	4619      	mov	r1, r3
 8004d36:	6838      	ldr	r0, [r7, #0]
 8004d38:	f000 fc20 	bl	800557c <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8004d3c:	6838      	ldr	r0, [r7, #0]
 8004d3e:	f000 fc53 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d48:	eeb0 0a67 	vmov.f32	s0, s15
 8004d4c:	6838      	ldr	r0, [r7, #0]
 8004d4e:	f000 fc2d 	bl	80055ac <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8004d52:	6838      	ldr	r0, [r7, #0]
 8004d54:	f000 fc48 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8004d62:	6838      	ldr	r0, [r7, #0]
 8004d64:	f000 fc22 	bl	80055ac <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8004d68:	6838      	ldr	r0, [r7, #0]
 8004d6a:	f000 fc3d 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	edd3 7a04 	vldr	s15, [r3, #16]
 8004d74:	eeb0 0a67 	vmov.f32	s0, s15
 8004d78:	6838      	ldr	r0, [r7, #0]
 8004d7a:	f000 fc17 	bl	80055ac <VibeCheckShell_PutOutputFloat>

			data++;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3314      	adds	r3, #20
 8004d82:	60fb      	str	r3, [r7, #12]
			data_written++;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	3301      	adds	r3, #1
 8004d88:	617b      	str	r3, [r7, #20]
		while (data_written < VC_SENSOR_DATA_PER_PACKET)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b09      	cmp	r3, #9
 8004d8e:	d9c3      	bls.n	8004d18 <VibeCheckSensorSender_Data_Execute+0x3c>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8004d90:	6838      	ldr	r0, [r7, #0]
 8004d92:	f000 fc37 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <VibeCheckSensorSender_Data_Execute+0xc0>
	}

	return 0;
 8004d9a:	2300      	movs	r3, #0

}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	0801d11c 	.word	0x0801d11c

08004da8 <VibeCheckSensorSender_Status_Execute>:


uint32_t VibeCheckSensorSender_Status_Execute(void* obj, VibeCheckShell* shell)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	617b      	str	r3, [r7, #20]

	uint32_t channel, is_connected;
	if (VibeCheckSensor_ConnectionChanged(sensor, &channel, &is_connected))
 8004db6:	f107 020c 	add.w	r2, r7, #12
 8004dba:	f107 0310 	add.w	r3, r7, #16
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	6978      	ldr	r0, [r7, #20]
 8004dc2:	f7ff faa1 	bl	8004308 <VibeCheckSensor_ConnectionChanged>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d026      	beq.n	8004e1a <VibeCheckSensorSender_Status_Execute+0x72>
	{
		VibeCheckShell_PutOutputString(shell, "msg");
 8004dcc:	4915      	ldr	r1, [pc, #84]	@ (8004e24 <VibeCheckSensorSender_Status_Execute+0x7c>)
 8004dce:	6838      	ldr	r0, [r7, #0]
 8004dd0:	f000 fb9a 	bl	8005508 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8004dd4:	6838      	ldr	r0, [r7, #0]
 8004dd6:	f000 fc07 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "sensor");
 8004dda:	4913      	ldr	r1, [pc, #76]	@ (8004e28 <VibeCheckSensorSender_Status_Execute+0x80>)
 8004ddc:	6838      	ldr	r0, [r7, #0]
 8004dde:	f000 fb93 	bl	8005508 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8004de2:	6838      	ldr	r0, [r7, #0]
 8004de4:	f000 fc00 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, channel);
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	4619      	mov	r1, r3
 8004dec:	6838      	ldr	r0, [r7, #0]
 8004dee:	f000 fbc5 	bl	800557c <VibeCheckShell_PutOutputInt>
		VibeCheckShell_PutOutputSeparator(shell);
 8004df2:	6838      	ldr	r0, [r7, #0]
 8004df4:	f000 fbf8 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>

		if (is_connected)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <VibeCheckSensorSender_Status_Execute+0x60>
			VibeCheckShell_PutOutputString(shell, "connected");
 8004dfe:	490b      	ldr	r1, [pc, #44]	@ (8004e2c <VibeCheckSensorSender_Status_Execute+0x84>)
 8004e00:	6838      	ldr	r0, [r7, #0]
 8004e02:	f000 fb81 	bl	8005508 <VibeCheckShell_PutOutputString>
 8004e06:	e003      	b.n	8004e10 <VibeCheckSensorSender_Status_Execute+0x68>
		else
			VibeCheckShell_PutOutputString(shell, "disconnected");
 8004e08:	4909      	ldr	r1, [pc, #36]	@ (8004e30 <VibeCheckSensorSender_Status_Execute+0x88>)
 8004e0a:	6838      	ldr	r0, [r7, #0]
 8004e0c:	f000 fb7c 	bl	8005508 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8004e10:	6838      	ldr	r0, [r7, #0]
 8004e12:	f000 fbf7 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
		return 1;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <VibeCheckSensorSender_Status_Execute+0x74>
	}

	return 0;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	0801d124 	.word	0x0801d124
 8004e28:	0801d128 	.word	0x0801d128
 8004e2c:	0801d130 	.word	0x0801d130
 8004e30:	0801d13c 	.word	0x0801d13c

08004e34 <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	shell->input_tail = 0;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
	shell->input_count = 0;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
	shell->input_delimiter_count = 0;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

	shell->output_head = 0;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e62:	461a      	mov	r2, r3
 8004e64:	2300      	movs	r3, #0
 8004e66:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e6e:	461a      	mov	r2, r3
 8004e70:	2300      	movs	r3, #0
 8004e72:	6153      	str	r3, [r2, #20]
	shell->output_count = 0;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	6193      	str	r3, [r2, #24]

	shell->ih_count = 0;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004e86:	461a      	mov	r2, r3
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	shell->oh_count = 0;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004e94:	461a      	mov	r2, r3
 8004e96:	2300      	movs	r3, #0
 8004e98:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 8004ea8:	b590      	push	{r4, r7, lr}
 8004eaa:	b099      	sub	sp, #100	@ 0x64
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8004eba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ebe:	d302      	bcc.n	8004ec6 <VibeCheckShell_Update+0x1e>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8092 	beq.w	8004ff6 <VibeCheckShell_Update+0x14e>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 8004ed8:	e08d      	b.n	8004ff6 <VibeCheckShell_Update+0x14e>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 8004eda:	f107 030c 	add.w	r3, r7, #12
 8004ede:	2240      	movs	r2, #64	@ 0x40
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f9f8 	bl	80052d8 <VibeCheckShell_GetNextString>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d04d      	beq.n	8004f8a <VibeCheckShell_Update+0xe2>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8004eee:	2300      	movs	r3, #0
 8004ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ef2:	e041      	b.n	8004f78 <VibeCheckShell_Update+0xd0>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8004ef4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4413      	add	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	f241 0218 	movw	r2, #4120	@ 0x1018
 8004f02:	441a      	add	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4413      	add	r3, r2
 8004f08:	3304      	adds	r3, #4
 8004f0a:	f107 020c 	add.w	r2, r7, #12
 8004f0e:	4611      	mov	r1, r2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fb f9fd 	bl	8000310 <strcmp>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d11e      	bne.n	8004f5a <VibeCheckShell_Update+0xb2>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4413      	add	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	18ca      	adds	r2, r1, r3
 8004f2a:	f241 035c 	movw	r3, #4188	@ 0x105c
 8004f2e:	4413      	add	r3, r2
 8004f30:	681c      	ldr	r4, [r3, #0]
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	440b      	add	r3, r1
 8004f40:	f503 5383 	add.w	r3, r3, #4192	@ 0x1060
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	47a0      	blx	r4
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d11f      	bne.n	8004f92 <VibeCheckShell_Update+0xea>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8004f52:	2303      	movs	r3, #3
 8004f54:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 8004f58:	e01b      	b.n	8004f92 <VibeCheckShell_Update+0xea>
				}

				if (i == shell->ih_count - 1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004f60:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004f64:	3b01      	subs	r3, #1
 8004f66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d102      	bne.n	8004f72 <VibeCheckShell_Update+0xca>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8004f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f74:	3301      	adds	r3, #1
 8004f76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004f7e:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004f82:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d3b5      	bcc.n	8004ef4 <VibeCheckShell_Update+0x4c>
 8004f88:	e004      	b.n	8004f94 <VibeCheckShell_Update+0xec>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8004f90:	e000      	b.n	8004f94 <VibeCheckShell_Update+0xec>
					break;
 8004f92:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	5cd3      	ldrb	r3, [r2, r3]
 8004f9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8004fa8:	1e5a      	subs	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8004fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fc8:	d103      	bne.n	8004fd2 <VibeCheckShell_Update+0x12a>
				shell->input_tail = 0;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 8004fd2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	482c      	ldr	r0, [pc, #176]	@ (800508c <VibeCheckShell_Update+0x1e4>)
 8004fda:	f014 fc9a 	bl	8019912 <strchr>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d100      	bne.n	8004fe6 <VibeCheckShell_Update+0x13e>
		{
 8004fe4:	e7d6      	b.n	8004f94 <VibeCheckShell_Update+0xec>
				break;  /* found the delimiter */
 8004fe6:	bf00      	nop
		}


		shell->input_delimiter_count--;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8004fee:	1e5a      	subs	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
	while (shell->input_delimiter_count)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f47f af6c 	bne.w	8004eda <VibeCheckShell_Update+0x32>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8005002:	2300      	movs	r3, #0
 8005004:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005006:	e018      	b.n	800503a <VibeCheckShell_Update+0x192>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800500c:	f202 4244 	addw	r2, r2, #1092	@ 0x444
 8005010:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005018:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	440b      	add	r3, r1
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	4618      	mov	r0, r3
 8005026:	4790      	blx	r2
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <VibeCheckShell_Update+0x18c>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8005034:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005036:	3301      	adds	r3, #1
 8005038:	65bb      	str	r3, [r7, #88]	@ 0x58
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005040:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8005044:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005046:	429a      	cmp	r2, r3
 8005048:	d3de      	bcc.n	8005008 <VibeCheckShell_Update+0x160>
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005056:	d302      	bcc.n	800505e <VibeCheckShell_Update+0x1b6>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 8005058:	2301      	movs	r3, #1
 800505a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 800505e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005060:	653b      	str	r3, [r7, #80]	@ 0x50
 8005062:	2300      	movs	r3, #0
 8005064:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8005068:	f362 0307 	bfi	r3, r2, #0, #8
 800506c:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8005070:	f362 230f 	bfi	r3, r2, #8, #8
 8005074:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8005078:	f362 4317 	bfi	r3, r2, #16, #8
 800507c:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8005080:	f362 631f 	bfi	r3, r2, #24, #8
}
 8005084:	4618      	mov	r0, r3
 8005086:	3764      	adds	r7, #100	@ 0x64
 8005088:	46bd      	mov	sp, r7
 800508a:	bd90      	pop	{r4, r7, pc}
 800508c:	0801d14c 	.word	0x0801d14c

08005090 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 8005090:	b084      	sub	sp, #16
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	f107 0014 	add.w	r0, r7, #20
 800509e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80050a8:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80050ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80050ae:	d81a      	bhi.n	80050e6 <VibeCheckShell_RegisterInputHandler+0x56>
		shell->input_handlers[shell->ih_count++] = handler;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80050b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80050ba:	1c53      	adds	r3, r2, #1
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 80050c2:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	4613      	mov	r3, r2
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	4413      	add	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	18ca      	adds	r2, r1, r3
 80050d2:	f241 0318 	movw	r3, #4120	@ 0x1018
 80050d6:	4413      	add	r3, r2
 80050d8:	3304      	adds	r3, #4
 80050da:	f107 0114 	add.w	r1, r7, #20
 80050de:	2248      	movs	r2, #72	@ 0x48
 80050e0:	4618      	mov	r0, r3
 80050e2:	f014 fcac 	bl	8019a3e <memcpy>
}
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050f0:	b004      	add	sp, #16
 80050f2:	4770      	bx	lr

080050f4 <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	1d3b      	adds	r3, r7, #4
 80050fe:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005108:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800510c:	2b3f      	cmp	r3, #63	@ 0x3f
 800510e:	d814      	bhi.n	800513a <VibeCheckShell_RegisterOutputHandler+0x46>
		shell->output_handlers[shell->oh_count++] = handler;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005116:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	68f9      	ldr	r1, [r7, #12]
 800511e:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8005122:	f8c1 2420 	str.w	r2, [r1, #1056]	@ 0x420
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4413      	add	r3, r2
 8005130:	1d3a      	adds	r2, r7, #4
 8005132:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005136:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	e035      	b.n	80051c6 <VibeCheckShell_PutInput+0x7e>
	{
		if (*input)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d036      	beq.n	80051d0 <VibeCheckShell_PutInput+0x88>
		{
			shell->input[shell->input_head++] = *input;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8005168:	1c59      	adds	r1, r3, #1
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	f8c2 1800 	str.w	r1, [r2, #2048]	@ 0x800
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	7811      	ldrb	r1, [r2, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800517e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005182:	d103      	bne.n	800518c <VibeCheckShell_PutInput+0x44>
					shell->input_head = 0;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
			shell->input_count++;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	4619      	mov	r1, r3
 80051a0:	480e      	ldr	r0, [pc, #56]	@ (80051dc <VibeCheckShell_PutInput+0x94>)
 80051a2:	f014 fbb6 	bl	8019912 <strchr>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d006      	beq.n	80051ba <VibeCheckShell_PutInput+0x72>
				shell->input_delimiter_count++;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

			input++;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	3301      	adds	r3, #1
 80051be:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3301      	adds	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d3c5      	bcc.n	800515a <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 80051ce:	e000      	b.n	80051d2 <VibeCheckShell_PutInput+0x8a>
			break;
 80051d0:	bf00      	nop
}
 80051d2:	bf00      	nop
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	0801d14c 	.word	0x0801d14c

080051e0 <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	if (shell->output_head == shell->output_tail)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d101      	bne.n	8005204 <VibeCheckShell_GetOutput+0x24>
		return 0;
 8005200:	2300      	movs	r3, #0
 8005202:	e062      	b.n	80052ca <VibeCheckShell_GetOutput+0xea>

	if (shell->output_head > shell->output_tail)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	429a      	cmp	r2, r3
 8005216:	d930      	bls.n	800527a <VibeCheckShell_GetOutput+0x9a>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[shell->output_tail];
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	441a      	add	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	601a      	str	r2, [r3, #0]
		*len = shell->output_head - shell->output_tail;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	1ad2      	subs	r2, r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	601a      	str	r2, [r3, #0]
		shell->output_count -= shell->output_head - shell->output_tail;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005250:	6959      	ldr	r1, [r3, #20]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	1acb      	subs	r3, r1, r3
 800525c:	4413      	add	r3, r2
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005264:	6193      	str	r3, [r2, #24]
		shell->output_tail = shell->output_head;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005274:	6153      	str	r3, [r2, #20]
		return 1;
 8005276:	2301      	movs	r3, #1
 8005278:	e027      	b.n	80052ca <VibeCheckShell_GetOutput+0xea>
	}
	else
	{
		/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
		*output = &shell->output[shell->output_tail];
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	441a      	add	r2, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	601a      	str	r2, [r3, #0]
		*len = VC_SHELL_IO_BUF_LEN - shell->output_tail;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	601a      	str	r2, [r3, #0]
		shell->output_count -= VC_SHELL_IO_BUF_LEN - shell->output_tail;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	4413      	add	r3, r2
 80052b0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80052ba:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052c2:	461a      	mov	r2, r3
 80052c4:	2300      	movs	r3, #0
 80052c6:	6153      	str	r3, [r2, #20]
		return 1;
 80052c8:	2301      	movs	r3, #1
	}

}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	e057      	b.n	800539a <VibeCheckShell_GetNextString+0xc2>
	{

		char x = shell->input[shell->input_tail];
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	5cd3      	ldrb	r3, [r2, r3]
 80052f4:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 80052f6:	7cfb      	ldrb	r3, [r7, #19]
 80052f8:	4619      	mov	r1, r3
 80052fa:	482c      	ldr	r0, [pc, #176]	@ (80053ac <VibeCheckShell_GetNextString+0xd4>)
 80052fc:	f014 fb09 	bl	8019912 <strchr>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <VibeCheckShell_GetNextString+0x42>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d004      	beq.n	8005316 <VibeCheckShell_GetNextString+0x3e>
			{
				*next = '\0';
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2200      	movs	r2, #0
 8005310:	701a      	strb	r2, [r3, #0]
				return 1;
 8005312:	2301      	movs	r3, #1
 8005314:	e046      	b.n	80053a4 <VibeCheckShell_GetNextString+0xcc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 8005316:	2300      	movs	r3, #0
 8005318:	e044      	b.n	80053a4 <VibeCheckShell_GetNextString+0xcc>
		}
		else
		{
			shell->input_count--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8005320:	1e5a      	subs	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800533c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005340:	d103      	bne.n	800534a <VibeCheckShell_GetNextString+0x72>
				shell->input_tail = 0;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 800534a:	7cfb      	ldrb	r3, [r7, #19]
 800534c:	4619      	mov	r1, r3
 800534e:	4818      	ldr	r0, [pc, #96]	@ (80053b0 <VibeCheckShell_GetNextString+0xd8>)
 8005350:	f014 fadf 	bl	8019912 <strchr>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <VibeCheckShell_GetNextString+0x92>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01c      	beq.n	800539a <VibeCheckShell_GetNextString+0xc2>
				{
					*next = '\0';
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2200      	movs	r2, #0
 8005364:	701a      	strb	r2, [r3, #0]
					return 1;
 8005366:	2301      	movs	r3, #1
 8005368:	e01c      	b.n	80053a4 <VibeCheckShell_GetNextString+0xcc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 800536a:	7cfb      	ldrb	r3, [r7, #19]
 800536c:	74bb      	strb	r3, [r7, #18]
 800536e:	7cbb      	ldrb	r3, [r7, #18]
 8005370:	3301      	adds	r3, #1
 8005372:	4a10      	ldr	r2, [pc, #64]	@ (80053b4 <VibeCheckShell_GetNextString+0xdc>)
 8005374:	4413      	add	r3, r2
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	f003 0303 	and.w	r3, r3, #3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d103      	bne.n	8005388 <VibeCheckShell_GetNextString+0xb0>
 8005380:	7cbb      	ldrb	r3, [r7, #18]
 8005382:	f103 0220 	add.w	r2, r3, #32
 8005386:	e000      	b.n	800538a <VibeCheckShell_GetNextString+0xb2>
 8005388:	7cba      	ldrb	r2, [r7, #18]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	1c59      	adds	r1, r3, #1
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]
				i++;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	3301      	adds	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d3a3      	bcc.n	80052ea <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	0801d14c 	.word	0x0801d14c
 80053b0:	0801d150 	.word	0x0801d150
 80053b4:	0801d7f8 	.word	0x0801d7f8

080053b8 <VibeCheckShell_GetNextInt>:


uint32_t VibeCheckShell_GetNextInt(VibeCheckShell* shell, int32_t* next)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b092      	sub	sp, #72	@ 0x48
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80053c2:	f107 0308 	add.w	r3, r7, #8
 80053c6:	2240      	movs	r2, #64	@ 0x40
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff ff84 	bl	80052d8 <VibeCheckShell_GetNextString>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d007      	beq.n	80053e6 <VibeCheckShell_GetNextInt+0x2e>
	{
		return VibeCheckShell_TurnToInt(str, next);
 80053d6:	f107 0308 	add.w	r3, r7, #8
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 f823 	bl	8005428 <VibeCheckShell_TurnToInt>
 80053e2:	4603      	mov	r3, r0
 80053e4:	e000      	b.n	80053e8 <VibeCheckShell_GetNextInt+0x30>
	}

	return 0;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3748      	adds	r7, #72	@ 0x48
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <VibeCheckShell_GetNextFloat>:


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b092      	sub	sp, #72	@ 0x48
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80053fa:	f107 0308 	add.w	r3, r7, #8
 80053fe:	2240      	movs	r2, #64	@ 0x40
 8005400:	4619      	mov	r1, r3
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7ff ff68 	bl	80052d8 <VibeCheckShell_GetNextString>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <VibeCheckShell_GetNextFloat+0x2e>
	{
		return VibeCheckShell_TurnToFloat(str, next);
 800540e:	f107 0308 	add.w	r3, r7, #8
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 f83d 	bl	8005494 <VibeCheckShell_TurnToFloat>
 800541a:	4603      	mov	r3, r0
 800541c:	e000      	b.n	8005420 <VibeCheckShell_GetNextFloat+0x30>
	}

	return 0;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3748      	adds	r7, #72	@ 0x48
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <VibeCheckShell_TurnToInt>:

/* if the type of the next token is not known, get it as a string and then try to convert it to numeric using these functions */
uint32_t VibeCheckShell_TurnToInt(char* str, int32_t* next)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
	char valid[] = "-0123456789";
 8005432:	4a17      	ldr	r2, [pc, #92]	@ (8005490 <VibeCheckShell_TurnToInt+0x68>)
 8005434:	f107 0308 	add.w	r3, r7, #8
 8005438:	ca07      	ldmia	r2, {r0, r1, r2}
 800543a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint32_t i = 0; i < strlen(str); i++)
 800543e:	2300      	movs	r3, #0
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	e012      	b.n	800546a <VibeCheckShell_TurnToInt+0x42>
		if (strchr(valid, str[i]) == NULL)
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	4413      	add	r3, r2
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	f107 0308 	add.w	r3, r7, #8
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f014 fa5c 	bl	8019912 <strchr>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <VibeCheckShell_TurnToInt+0x3c>
			return 0;  /* next token contains non-numeric characters */
 8005460:	2300      	movs	r3, #0
 8005462:	e010      	b.n	8005486 <VibeCheckShell_TurnToInt+0x5e>
	for (uint32_t i = 0; i < strlen(str); i++)
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	3301      	adds	r3, #1
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fa ffb0 	bl	80003d0 <strlen>
 8005470:	4602      	mov	r2, r0
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	4293      	cmp	r3, r2
 8005476:	d3e5      	bcc.n	8005444 <VibeCheckShell_TurnToInt+0x1c>
	*next = atoi(str);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f012 fea0 	bl	80181be <atoi>
 800547e:	4602      	mov	r2, r0
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	601a      	str	r2, [r3, #0]
	return 1;
 8005484:	2301      	movs	r3, #1
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	0801d154 	.word	0x0801d154

08005494 <VibeCheckShell_TurnToFloat>:

uint32_t VibeCheckShell_TurnToFloat(char* str, float* next)
{
 8005494:	b590      	push	{r4, r7, lr}
 8005496:	b089      	sub	sp, #36	@ 0x24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
	char valid[] = ".-0123456789";
 800549e:	4b19      	ldr	r3, [pc, #100]	@ (8005504 <VibeCheckShell_TurnToFloat+0x70>)
 80054a0:	f107 040c 	add.w	r4, r7, #12
 80054a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054a6:	c407      	stmia	r4!, {r0, r1, r2}
 80054a8:	7023      	strb	r3, [r4, #0]
	for (uint32_t i = 0; i < strlen(str); i++)
 80054aa:	2300      	movs	r3, #0
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	e012      	b.n	80054d6 <VibeCheckShell_TurnToFloat+0x42>
		if (strchr(valid, str[i]) == NULL)
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	f107 030c 	add.w	r3, r7, #12
 80054be:	4611      	mov	r1, r2
 80054c0:	4618      	mov	r0, r3
 80054c2:	f014 fa26 	bl	8019912 <strchr>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <VibeCheckShell_TurnToFloat+0x3c>
			return 0;  /* next token contains non-numeric characters */
 80054cc:	2300      	movs	r3, #0
 80054ce:	e014      	b.n	80054fa <VibeCheckShell_TurnToFloat+0x66>
	for (uint32_t i = 0; i < strlen(str); i++)
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	3301      	adds	r3, #1
 80054d4:	61fb      	str	r3, [r7, #28]
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fa ff7a 	bl	80003d0 <strlen>
 80054dc:	4602      	mov	r2, r0
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d3e5      	bcc.n	80054b0 <VibeCheckShell_TurnToFloat+0x1c>
	*next = atof(str);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f012 fe67 	bl	80181b8 <atof>
 80054ea:	eeb0 7b40 	vmov.f64	d7, d0
 80054ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	edc3 7a00 	vstr	s15, [r3]
	return 1;
 80054f8:	2301      	movs	r3, #1
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3724      	adds	r7, #36	@ 0x24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd90      	pop	{r4, r7, pc}
 8005502:	bf00      	nop
 8005504:	0801d160 	.word	0x0801d160

08005508 <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
	while (*str)
 8005512:	e027      	b.n	8005564 <VibeCheckShell_PutOutputString+0x5c>
	{
		shell->output[shell->output_head++] = *(str++);
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	1c53      	adds	r3, r2, #1
 8005518:	603b      	str	r3, [r7, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	1c59      	adds	r1, r3, #1
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 800552a:	6101      	str	r1, [r0, #16]
 800552c:	7811      	ldrb	r1, [r2, #0]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4413      	add	r3, r2
 8005532:	460a      	mov	r2, r1
 8005534:	f883 2810 	strb.w	r2, [r3, #2064]	@ 0x810
		shell->output_count++;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	3301      	adds	r3, #1
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005548:	6193      	str	r3, [r2, #24]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005556:	d105      	bne.n	8005564 <VibeCheckShell_PutOutputString+0x5c>
			shell->output_head = 0;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800555e:	461a      	mov	r2, r3
 8005560:	2300      	movs	r3, #0
 8005562:	6113      	str	r3, [r2, #16]
	while (*str)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1d3      	bne.n	8005514 <VibeCheckShell_PutOutputString+0xc>
	}
}
 800556c:	bf00      	nop
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
	...

0800557c <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b092      	sub	sp, #72	@ 0x48
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 8005586:	f107 0308 	add.w	r3, r7, #8
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	4906      	ldr	r1, [pc, #24]	@ (80055a8 <VibeCheckShell_PutOutputInt+0x2c>)
 800558e:	4618      	mov	r0, r3
 8005590:	f014 f954 	bl	801983c <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8005594:	f107 0308 	add.w	r3, r7, #8
 8005598:	4619      	mov	r1, r3
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff ffb4 	bl	8005508 <VibeCheckShell_PutOutputString>
}
 80055a0:	bf00      	nop
 80055a2:	3748      	adds	r7, #72	@ 0x48
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	0801d170 	.word	0x0801d170

080055ac <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b092      	sub	sp, #72	@ 0x48
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%f", val);
 80055b8:	edd7 7a00 	vldr	s15, [r7]
 80055bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80055c0:	f107 0008 	add.w	r0, r7, #8
 80055c4:	ec53 2b17 	vmov	r2, r3, d7
 80055c8:	4906      	ldr	r1, [pc, #24]	@ (80055e4 <VibeCheckShell_PutOutputFloat+0x38>)
 80055ca:	f014 f937 	bl	801983c <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 80055ce:	f107 0308 	add.w	r3, r7, #8
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff ff97 	bl	8005508 <VibeCheckShell_PutOutputString>
}
 80055da:	bf00      	nop
 80055dc:	3748      	adds	r7, #72	@ 0x48
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	0801d174 	.word	0x0801d174

080055e8 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 80055f0:	4903      	ldr	r1, [pc, #12]	@ (8005600 <VibeCheckShell_PutOutputSeparator+0x18>)
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff ff88 	bl	8005508 <VibeCheckShell_PutOutputString>
}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	0801d178 	.word	0x0801d178

08005604 <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 800560c:	4903      	ldr	r1, [pc, #12]	@ (800561c <VibeCheckShell_PutOutputDelimiter+0x18>)
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff ff7a 	bl	8005508 <VibeCheckShell_PutOutputString>
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	0801d14c 	.word	0x0801d14c

08005620 <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005636:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800563e:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f640 125f 	movw	r2, #2399	@ 0x95f
 8005652:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	edd3 7a01 	vldr	s15, [r3, #4]
 800565a:	eeb0 0a67 	vmov.f32	s0, s15
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f84a 	bl	80056f8 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	edd3 7a02 	vldr	s15, [r3, #8]
 800566a:	eeb0 0a67 	vmov.f32	s0, s15
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f928 	bl	80058c4 <VibeCheckStrobe_SetExposure>

}
 8005674:	bf00      	nop
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_Base_Start_IT(strobe->htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4618      	mov	r0, r3
 800568a:	f00b fd53 	bl	8011134 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2100      	movs	r1, #0
 8005694:	4618      	mov	r0, r3
 8005696:	f00b fe35 	bl	8011304 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2104      	movs	r1, #4
 80056a0:	4618      	mov	r0, r3
 80056a2:	f00b fe2f 	bl	8011304 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2108      	movs	r1, #8
 80056ac:	4618      	mov	r0, r3
 80056ae:	f00b fe29 	bl	8011304 <HAL_TIM_PWM_Start>
}
 80056b2:	bf00      	nop
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(strobe->htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f00b fd34 	bl	8011134 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2100      	movs	r1, #0
 80056d2:	4618      	mov	r0, r3
 80056d4:	f00b ff32 	bl	801153c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2104      	movs	r1, #4
 80056de:	4618      	mov	r0, r3
 80056e0:	f00b ff2c 	bl	801153c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2108      	movs	r1, #8
 80056ea:	4618      	mov	r0, r3
 80056ec:	f00b ff26 	bl	801153c <HAL_TIM_PWM_Stop>
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 8005704:	edd7 7a00 	vldr	s15, [r7]
 8005708:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800570c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005714:	d502      	bpl.n	800571c <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8005716:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800571a:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 800571c:	edd7 7a00 	vldr	s15, [r7]
 8005720:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800578c <VibeCheckStrobe_SetFrequency+0x94>
 8005724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800572c:	dd01      	ble.n	8005732 <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 800572e:	4b18      	ldr	r3, [pc, #96]	@ (8005790 <VibeCheckStrobe_SetFrequency+0x98>)
 8005730:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 8005732:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8005794 <VibeCheckStrobe_SetFrequency+0x9c>
 8005736:	ed97 7a00 	vldr	s14, [r7]
 800573a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800573e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005742:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800574a:	ee17 2a90 	vmov	r2, s15
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005766:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8005794 <VibeCheckStrobe_SetFrequency+0x9c>
 800576a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6912      	ldr	r2, [r2, #16]
 800577e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	447a0000 	.word	0x447a0000
 8005790:	447a0000 	.word	0x447a0000
 8005794:	47c35000 	.word	0x47c35000

08005798 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	ee07 3a90 	vmov	s15, r3
}
 80057a8:	eeb0 0a67 	vmov.f32	s0, s15
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 80057c4:	edd7 7a00 	vldr	s15, [r7]
 80057c8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005890 <VibeCheckStrobe_SetPhase+0xd8>
 80057cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d4:	d501      	bpl.n	80057da <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 80057d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005894 <VibeCheckStrobe_SetPhase+0xdc>)
 80057d8:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 80057da:	edd7 7a00 	vldr	s15, [r7]
 80057de:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8005898 <VibeCheckStrobe_SetPhase+0xe0>
 80057e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ea:	dd01      	ble.n	80057f0 <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 80057ec:	4b2b      	ldr	r3, [pc, #172]	@ (800589c <VibeCheckStrobe_SetPhase+0xe4>)
 80057ee:	603b      	str	r3, [r7, #0]


	/* TODO: need to test if this works */
	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80057f6:	ed97 7a00 	vldr	s14, [r7]
 80057fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057fe:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 8005802:	edd7 7a03 	vldr	s15, [r7, #12]
 8005806:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80058a0 <VibeCheckStrobe_SetPhase+0xe8>
 800580a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005822:	ee17 3a90 	vmov	r3, s15
 8005826:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d029      	beq.n	8005882 <VibeCheckStrobe_SetPhase+0xca>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d125      	bne.n	8005882 <VibeCheckStrobe_SetPhase+0xca>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d121      	bne.n	8005882 <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	ed93 7a03 	vldr	s14, [r3, #12]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800585e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80058a0 <VibeCheckStrobe_SetPhase+0xe8>
 8005862:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	441a      	add	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	619a      	str	r2, [r3, #24]
	}
}
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	c3340000 	.word	0xc3340000
 8005894:	c3340000 	.word	0xc3340000
 8005898:	43340000 	.word	0x43340000
 800589c:	43340000 	.word	0x43340000
 80058a0:	43b40000 	.word	0x43b40000

080058a4 <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	ee07 3a90 	vmov	s15, r3
}
 80058b4:	eeb0 0a67 	vmov.f32	s0, s15
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
	...

080058c4 <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 80058d0:	edd7 7a00 	vldr	s15, [r7]
 80058d4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8005950 <VibeCheckStrobe_SetExposure+0x8c>
 80058d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058dc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005954 <VibeCheckStrobe_SetExposure+0x90>
 80058e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058e8:	ee17 3a90 	vmov	r3, s15
 80058ec:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d904      	bls.n	8005906 <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	ee07 3a90 	vmov	s15, r3
 800590c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005910:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8005954 <VibeCheckStrobe_SetExposure+0x90>
 8005914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005918:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8005958 <VibeCheckStrobe_SetExposure+0x94>
 800591c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	3a83126f 	.word	0x3a83126f
 8005954:	47c35000 	.word	0x47c35000
 8005958:	447a0000 	.word	0x447a0000

0800595c <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	ee07 3a90 	vmov	s15, r3
}
 800596c:	eeb0 0a67 	vmov.f32	s0, s15
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6912      	ldr	r2, [r2, #16]
 8005994:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00b      	beq.n	80059bc <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6952      	ldr	r2, [r2, #20]
 80059ae:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	619a      	str	r2, [r3, #24]
	}
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b096      	sub	sp, #88	@ 0x58
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80059d2:	f107 0318 	add.w	r3, r7, #24
 80059d6:	2240      	movs	r2, #64	@ 0x40
 80059d8:	4619      	mov	r1, r3
 80059da:	6838      	ldr	r0, [r7, #0]
 80059dc:	f7ff fc7c 	bl	80052d8 <VibeCheckShell_GetNextString>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d065      	beq.n	8005ab2 <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 80059e6:	f107 0318 	add.w	r3, r7, #24
 80059ea:	4934      	ldr	r1, [pc, #208]	@ (8005abc <VibeCheckStrobeCMD_Set+0xf4>)
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fa fc8f 	bl	8000310 <strcmp>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d118      	bne.n	8005a2a <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80059f8:	f107 0314 	add.w	r3, r7, #20
 80059fc:	4619      	mov	r1, r3
 80059fe:	6838      	ldr	r0, [r7, #0]
 8005a00:	f7ff fcf6 	bl	80053f0 <VibeCheckShell_GetNextFloat>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d053      	beq.n	8005ab2 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 8005a0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff fe70 	bl	80056f8 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8005a18:	4929      	ldr	r1, [pc, #164]	@ (8005ac0 <VibeCheckStrobeCMD_Set+0xf8>)
 8005a1a:	6838      	ldr	r0, [r7, #0]
 8005a1c:	f7ff fd74 	bl	8005508 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8005a20:	6838      	ldr	r0, [r7, #0]
 8005a22:	f7ff fdef 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e044      	b.n	8005ab4 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 8005a2a:	f107 0318 	add.w	r3, r7, #24
 8005a2e:	4925      	ldr	r1, [pc, #148]	@ (8005ac4 <VibeCheckStrobeCMD_Set+0xfc>)
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fa fc6d 	bl	8000310 <strcmp>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d118      	bne.n	8005a6e <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8005a3c:	f107 0310 	add.w	r3, r7, #16
 8005a40:	4619      	mov	r1, r3
 8005a42:	6838      	ldr	r0, [r7, #0]
 8005a44:	f7ff fcd4 	bl	80053f0 <VibeCheckShell_GetNextFloat>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d031      	beq.n	8005ab2 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 8005a4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a52:	eeb0 0a67 	vmov.f32	s0, s15
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff feae 	bl	80057b8 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 8005a5c:	4918      	ldr	r1, [pc, #96]	@ (8005ac0 <VibeCheckStrobeCMD_Set+0xf8>)
 8005a5e:	6838      	ldr	r0, [r7, #0]
 8005a60:	f7ff fd52 	bl	8005508 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8005a64:	6838      	ldr	r0, [r7, #0]
 8005a66:	f7ff fdcd 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e022      	b.n	8005ab4 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 8005a6e:	f107 0318 	add.w	r3, r7, #24
 8005a72:	4915      	ldr	r1, [pc, #84]	@ (8005ac8 <VibeCheckStrobeCMD_Set+0x100>)
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fa fc4b 	bl	8000310 <strcmp>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d118      	bne.n	8005ab2 <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8005a80:	f107 030c 	add.w	r3, r7, #12
 8005a84:	4619      	mov	r1, r3
 8005a86:	6838      	ldr	r0, [r7, #0]
 8005a88:	f7ff fcb2 	bl	80053f0 <VibeCheckShell_GetNextFloat>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00f      	beq.n	8005ab2 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 8005a92:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a96:	eeb0 0a67 	vmov.f32	s0, s15
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff ff12 	bl	80058c4 <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 8005aa0:	4907      	ldr	r1, [pc, #28]	@ (8005ac0 <VibeCheckStrobeCMD_Set+0xf8>)
 8005aa2:	6838      	ldr	r0, [r7, #0]
 8005aa4:	f7ff fd30 	bl	8005508 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8005aa8:	6838      	ldr	r0, [r7, #0]
 8005aaa:	f7ff fdab 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3758      	adds	r7, #88	@ 0x58
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	0801d17c 	.word	0x0801d17c
 8005ac0:	0801d188 	.word	0x0801d188
 8005ac4:	0801d18c 	.word	0x0801d18c
 8005ac8:	0801d194 	.word	0x0801d194

08005acc <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b092      	sub	sp, #72	@ 0x48
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005ad6:	f107 0308 	add.w	r3, r7, #8
 8005ada:	2240      	movs	r2, #64	@ 0x40
 8005adc:	4619      	mov	r1, r3
 8005ade:	6838      	ldr	r0, [r7, #0]
 8005ae0:	f7ff fbfa 	bl	80052d8 <VibeCheckShell_GetNextString>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d05c      	beq.n	8005ba4 <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 8005aea:	f107 0308 	add.w	r3, r7, #8
 8005aee:	4930      	ldr	r1, [pc, #192]	@ (8005bb0 <VibeCheckStrobeCMD_Get+0xe4>)
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fa fc0d 	bl	8000310 <strcmp>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d115      	bne.n	8005b28 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005afc:	492d      	ldr	r1, [pc, #180]	@ (8005bb4 <VibeCheckStrobeCMD_Get+0xe8>)
 8005afe:	6838      	ldr	r0, [r7, #0]
 8005b00:	f7ff fd02 	bl	8005508 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005b04:	6838      	ldr	r0, [r7, #0]
 8005b06:	f7ff fd6f 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff fe44 	bl	8005798 <VibeCheckStrobe_GetFrequency>
 8005b10:	eef0 7a40 	vmov.f32	s15, s0
 8005b14:	eeb0 0a67 	vmov.f32	s0, s15
 8005b18:	6838      	ldr	r0, [r7, #0]
 8005b1a:	f7ff fd47 	bl	80055ac <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005b1e:	6838      	ldr	r0, [r7, #0]
 8005b20:	f7ff fd70 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e03e      	b.n	8005ba6 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 8005b28:	f107 0308 	add.w	r3, r7, #8
 8005b2c:	4922      	ldr	r1, [pc, #136]	@ (8005bb8 <VibeCheckStrobeCMD_Get+0xec>)
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fa fbee 	bl	8000310 <strcmp>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d115      	bne.n	8005b66 <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005b3a:	491e      	ldr	r1, [pc, #120]	@ (8005bb4 <VibeCheckStrobeCMD_Get+0xe8>)
 8005b3c:	6838      	ldr	r0, [r7, #0]
 8005b3e:	f7ff fce3 	bl	8005508 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005b42:	6838      	ldr	r0, [r7, #0]
 8005b44:	f7ff fd50 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff feab 	bl	80058a4 <VibeCheckStrobe_GetPhase>
 8005b4e:	eef0 7a40 	vmov.f32	s15, s0
 8005b52:	eeb0 0a67 	vmov.f32	s0, s15
 8005b56:	6838      	ldr	r0, [r7, #0]
 8005b58:	f7ff fd28 	bl	80055ac <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005b5c:	6838      	ldr	r0, [r7, #0]
 8005b5e:	f7ff fd51 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e01f      	b.n	8005ba6 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 8005b66:	f107 0308 	add.w	r3, r7, #8
 8005b6a:	4914      	ldr	r1, [pc, #80]	@ (8005bbc <VibeCheckStrobeCMD_Get+0xf0>)
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fa fbcf 	bl	8000310 <strcmp>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d115      	bne.n	8005ba4 <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005b78:	490e      	ldr	r1, [pc, #56]	@ (8005bb4 <VibeCheckStrobeCMD_Get+0xe8>)
 8005b7a:	6838      	ldr	r0, [r7, #0]
 8005b7c:	f7ff fcc4 	bl	8005508 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005b80:	6838      	ldr	r0, [r7, #0]
 8005b82:	f7ff fd31 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff fee8 	bl	800595c <VibeCheckStrobe_GetExposure>
 8005b8c:	eef0 7a40 	vmov.f32	s15, s0
 8005b90:	eeb0 0a67 	vmov.f32	s0, s15
 8005b94:	6838      	ldr	r0, [r7, #0]
 8005b96:	f7ff fd09 	bl	80055ac <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005b9a:	6838      	ldr	r0, [r7, #0]
 8005b9c:	f7ff fd32 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3748      	adds	r7, #72	@ 0x48
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	0801d17c 	.word	0x0801d17c
 8005bb4:	0801d188 	.word	0x0801d188
 8005bb8:	0801d18c 	.word	0x0801d18c
 8005bbc:	0801d194 	.word	0x0801d194

08005bc0 <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b094      	sub	sp, #80	@ 0x50
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005bce:	f107 030c 	add.w	r3, r7, #12
 8005bd2:	2240      	movs	r2, #64	@ 0x40
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6838      	ldr	r0, [r7, #0]
 8005bd8:	f7ff fb7e 	bl	80052d8 <VibeCheckShell_GetNextString>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d04d      	beq.n	8005c7e <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 8005be2:	f107 030c 	add.w	r3, r7, #12
 8005be6:	4928      	ldr	r1, [pc, #160]	@ (8005c88 <VibeCheckStrobeCMD_Execute+0xc8>)
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fa fb91 	bl	8000310 <strcmp>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10b      	bne.n	8005c0c <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 8005bf4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005bf6:	f7ff fd41 	bl	800567c <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8005bfa:	4924      	ldr	r1, [pc, #144]	@ (8005c8c <VibeCheckStrobeCMD_Execute+0xcc>)
 8005bfc:	6838      	ldr	r0, [r7, #0]
 8005bfe:	f7ff fc83 	bl	8005508 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005c02:	6838      	ldr	r0, [r7, #0]
 8005c04:	f7ff fcfe 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e039      	b.n	8005c80 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 8005c0c:	f107 030c 	add.w	r3, r7, #12
 8005c10:	491f      	ldr	r1, [pc, #124]	@ (8005c90 <VibeCheckStrobeCMD_Execute+0xd0>)
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fa fb7c 	bl	8000310 <strcmp>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10b      	bne.n	8005c36 <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 8005c1e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005c20:	f7ff fd4b 	bl	80056ba <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8005c24:	4919      	ldr	r1, [pc, #100]	@ (8005c8c <VibeCheckStrobeCMD_Execute+0xcc>)
 8005c26:	6838      	ldr	r0, [r7, #0]
 8005c28:	f7ff fc6e 	bl	8005508 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005c2c:	6838      	ldr	r0, [r7, #0]
 8005c2e:	f7ff fce9 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e024      	b.n	8005c80 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 8005c36:	f107 030c 	add.w	r3, r7, #12
 8005c3a:	4916      	ldr	r1, [pc, #88]	@ (8005c94 <VibeCheckStrobeCMD_Execute+0xd4>)
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fa fb67 	bl	8000310 <strcmp>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d108      	bne.n	8005c5a <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005c4c:	f7ff febc 	bl	80059c8 <VibeCheckStrobeCMD_Set>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d013      	beq.n	8005c7e <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e012      	b.n	8005c80 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 8005c5a:	f107 030c 	add.w	r3, r7, #12
 8005c5e:	490e      	ldr	r1, [pc, #56]	@ (8005c98 <VibeCheckStrobeCMD_Execute+0xd8>)
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fa fb55 	bl	8000310 <strcmp>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d108      	bne.n	8005c7e <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005c70:	f7ff ff2c 	bl	8005acc <VibeCheckStrobeCMD_Get>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3750      	adds	r7, #80	@ 0x50
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	0801d1a0 	.word	0x0801d1a0
 8005c8c:	0801d188 	.word	0x0801d188
 8005c90:	0801d1a8 	.word	0x0801d1a8
 8005c94:	0801d1b0 	.word	0x0801d1b0
 8005c98:	0801d1b4 	.word	0x0801d1b4
 8005c9c:	00000000 	.word	0x00000000

08005ca0 <ComputeSineWave>:

static const uint32_t demo_times1[] = {150,    150, 150,    150, 300,    150,    150,    300,    300,    300,    300,           300,   150,    150, 300,    150,       150, 300,    300,    150,   150,    300,        150,   150,    300,    300,    300,    300,        300,    150,   300,    150,   150,    150,    300,    150,    300,    150,    75,     75,   75,   75,  150,    150,    600};
static const float demo_freqs1[] =    {58.27,  185, 233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 277.18, 233.08,        0,     233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 51.91, 277.18, 233.08,     77.78, 311.13, 277.18, 233.08, 207.65, 0,          369.99, 415.3, 369.99, 415.3, 369.99,   0,    369.99, 466.16, 369.99, 466.16, 369.99, 0,  369.99, 0,   369.99,   0,   46.25};

static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	ed2d 8b02 	vpush	{d8}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	e032      	b.n	8005d1e <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 8005cb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cbc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005cce:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8005d40 <ComputeSineWave+0xa0>
 8005cd2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	ee07 3a90 	vmov	s15, r3
 8005cdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ce4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ce8:	eeb0 0b47 	vmov.f64	d0, d7
 8005cec:	f016 faf4 	bl	801c2d8 <sin>
 8005cf0:	eeb0 7b40 	vmov.f64	d7, d0
 8005cf4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005cf8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005cfc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d00:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8005d38 <ComputeSineWave+0x98>
 8005d04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	1d1a      	adds	r2, r3, #4
 8005d0c:	60fa      	str	r2, [r7, #12]
 8005d0e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005d12:	ee17 2a90 	vmov	r2, s15
 8005d16:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d3c8      	bcc.n	8005cb8 <ComputeSineWave+0x18>
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	ecbd 8b02 	vpop	{d8}
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	f3af 8000 	nop.w
 8005d38:	00000000 	.word	0x00000000
 8005d3c:	409ffe00 	.word	0x409ffe00
 8005d40:	40490fd0 	.word	0x40490fd0

08005d44 <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	e02c      	b.n	8005db2 <ComputeSquareWave+0x6e>
		if (i < len / 2)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d212      	bcs.n	8005d88 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 8005d62:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d6e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005dc8 <ComputeSquareWave+0x84>
 8005d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1d1a      	adds	r2, r3, #4
 8005d7a:	60fa      	str	r2, [r7, #12]
 8005d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d80:	ee17 2a90 	vmov	r2, s15
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	e011      	b.n	8005dac <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 8005d88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d94:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8005dc8 <ComputeSquareWave+0x84>
 8005d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	1d1a      	adds	r2, r3, #4
 8005da0:	60fa      	str	r2, [r7, #12]
 8005da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005da6:	ee17 2a90 	vmov	r2, s15
 8005daa:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	3301      	adds	r3, #1
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d3ce      	bcc.n	8005d58 <ComputeSquareWave+0x14>
}
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	44fff000 	.word	0x44fff000

08005dcc <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	e052      	b.n	8005e86 <ComputeSawWave+0xba>
		if (i < len / 2)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d222      	bcs.n	8005e30 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	ee07 3a90 	vmov	s15, r3
 8005df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005df8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dfc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e16:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005e9c <ComputeSawWave+0xd0>
 8005e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1d1a      	adds	r2, r3, #4
 8005e22:	60fa      	str	r2, [r7, #12]
 8005e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e28:	ee17 2a90 	vmov	r2, s15
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	e027      	b.n	8005e80 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 8005e30:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005e4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e52:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	ee07 3a90 	vmov	s15, r3
 8005e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e60:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e68:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8005e9c <ComputeSawWave+0xd0>
 8005e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	1d1a      	adds	r2, r3, #4
 8005e74:	60fa      	str	r2, [r7, #12]
 8005e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e7a:	ee17 2a90 	vmov	r2, s15
 8005e7e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	3301      	adds	r3, #1
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d3a8      	bcc.n	8005de0 <ComputeSawWave+0x14>
}
 8005e8e:	bf00      	nop
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	44fff000 	.word	0x44fff000

08005ea0 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	e082      	b.n	8005fba <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	089b      	lsrs	r3, r3, #2
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d221      	bcs.n	8005f02 <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005eca:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ece:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	ee07 3a90 	vmov	s15, r3
 8005ed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ee4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ee8:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8005fd4 <ComputeTriangleWave+0x134>
 8005eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1d1a      	adds	r2, r3, #4
 8005ef4:	60fa      	str	r2, [r7, #12]
 8005ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005efa:	ee17 2a90 	vmov	r2, s15
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	e058      	b.n	8005fb4 <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	4613      	mov	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	089b      	lsrs	r3, r3, #2
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d227      	bcs.n	8005f62 <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 8005f12:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f32:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	ee07 3a90 	vmov	s15, r3
 8005f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f40:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f48:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8005fd4 <ComputeTriangleWave+0x134>
 8005f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	1d1a      	adds	r2, r3, #4
 8005f54:	60fa      	str	r2, [r7, #12]
 8005f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f5a:	ee17 2a90 	vmov	r2, s15
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	e028      	b.n	8005fb4 <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 8005f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f66:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f82:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f86:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f94:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f9c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8005fd4 <ComputeTriangleWave+0x134>
 8005fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	1d1a      	adds	r2, r3, #4
 8005fa8:	60fa      	str	r2, [r7, #12]
 8005faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fae:	ee17 2a90 	vmov	r2, s15
 8005fb2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	f4ff af78 	bcc.w	8005eb4 <ComputeTriangleWave+0x14>
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	44fff000 	.word	0x44fff000

08005fd8 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	e008      	b.n	8005ffa <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	1d1a      	adds	r2, r3, #4
 8005fec:	607a      	str	r2, [r7, #4]
 8005fee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005ff2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d3f2      	bcc.n	8005fe8 <ComputeNullWave+0x10>
}
 8006002:	bf00      	nop
 8006004:	bf00      	nop
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006022:	2b00      	cmp	r3, #0
 8006024:	d044      	beq.n	80060b0 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800602c:	7e1b      	ldrb	r3, [r3, #24]
 800602e:	2b03      	cmp	r3, #3
 8006030:	d844      	bhi.n	80060bc <VibeCheckWaveGen_RecomputeWave+0xac>
 8006032:	a201      	add	r2, pc, #4	@ (adr r2, 8006038 <VibeCheckWaveGen_RecomputeWave+0x28>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	08006049 	.word	0x08006049
 800603c:	08006063 	.word	0x08006063
 8006040:	0800607d 	.word	0x0800607d
 8006044:	08006097 	.word	0x08006097
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800604e:	edd3 7a08 	vldr	s15, [r3, #32]
 8006052:	eeb0 0a67 	vmov.f32	s0, s15
 8006056:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800605a:	6838      	ldr	r0, [r7, #0]
 800605c:	f7ff fe20 	bl	8005ca0 <ComputeSineWave>
			break;
 8006060:	e02c      	b.n	80060bc <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006068:	edd3 7a08 	vldr	s15, [r3, #32]
 800606c:	eeb0 0a67 	vmov.f32	s0, s15
 8006070:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006074:	6838      	ldr	r0, [r7, #0]
 8006076:	f7ff fe65 	bl	8005d44 <ComputeSquareWave>
			break;
 800607a:	e01f      	b.n	80060bc <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006082:	edd3 7a08 	vldr	s15, [r3, #32]
 8006086:	eeb0 0a67 	vmov.f32	s0, s15
 800608a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800608e:	6838      	ldr	r0, [r7, #0]
 8006090:	f7ff fe9c 	bl	8005dcc <ComputeSawWave>
			break;
 8006094:	e012      	b.n	80060bc <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800609c:	edd3 7a08 	vldr	s15, [r3, #32]
 80060a0:	eeb0 0a67 	vmov.f32	s0, s15
 80060a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80060a8:	6838      	ldr	r0, [r7, #0]
 80060aa:	f7ff fef9 	bl	8005ea0 <ComputeTriangleWave>
			break;
 80060ae:	e005      	b.n	80060bc <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 80060b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80060b4:	6838      	ldr	r0, [r7, #0]
 80060b6:	f7ff ff8f 	bl	8005fd8 <ComputeNullWave>
	}
}
 80060ba:	e7ff      	b.n	80060bc <VibeCheckWaveGen_RecomputeWave+0xac>
 80060bc:	bf00      	nop
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af02      	add	r7, sp, #8
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = 440.0f;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060e2:	461a      	mov	r2, r3
 80060e4:	4b44      	ldr	r3, [pc, #272]	@ (80061f8 <VibeCheckWaveGen_Init+0x134>)
 80060e6:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = 0.001f;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060ee:	461a      	mov	r2, r3
 80060f0:	4b42      	ldr	r3, [pc, #264]	@ (80061fc <VibeCheckWaveGen_Init+0x138>)
 80060f2:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060fa:	2200      	movs	r2, #0
 80060fc:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006104:	461a      	mov	r2, r3
 8006106:	2300      	movs	r3, #0
 8006108:	6253      	str	r3, [r2, #36]	@ 0x24
	wavegen->is_muted = 0;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006110:	461a      	mov	r2, r3
 8006112:	2300      	movs	r3, #0
 8006114:	6293      	str	r3, [r2, #40]	@ 0x28
	wavegen->mute_button_flag = 0;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800611c:	461a      	mov	r2, r3
 800611e:	2300      	movs	r3, #0
 8006120:	62d3      	str	r3, [r2, #44]	@ 0x2c
	wavegen->time_prev_button_press = 0;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006128:	461a      	mov	r2, r3
 800612a:	2300      	movs	r3, #0
 800612c:	6313      	str	r3, [r2, #48]	@ 0x30

	wavegen->wave_ping_compute_pending = 0;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006134:	461a      	mov	r2, r3
 8006136:	2300      	movs	r3, #0
 8006138:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006140:	461a      	mov	r2, r3
 8006142:	2300      	movs	r3, #0
 8006144:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800614c:	461a      	mov	r2, r3
 800614e:	2300      	movs	r3, #0
 8006150:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006158:	461a      	mov	r2, r3
 800615a:	2300      	movs	r3, #0
 800615c:	6153      	str	r3, [r2, #20]

	wavegen->demo_num = 0;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006164:	461a      	mov	r2, r3
 8006166:	2300      	movs	r3, #0
 8006168:	6353      	str	r3, [r2, #52]	@ 0x34

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	220b      	movs	r2, #11
 8006172:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800617a:	edd3 7a07 	vldr	s15, [r3, #28]
 800617e:	eeb0 0a67 	vmov.f32	s0, s15
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f920 	bl	80063c8 <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3308      	adds	r3, #8
 800618c:	4619      	mov	r1, r3
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff ff3e 	bl	8006010 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 800619a:	4619      	mov	r1, r3
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7ff ff37 	bl	8006010 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6858      	ldr	r0, [r3, #4]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f103 0208 	add.w	r2, r3, #8
 80061ac:	2300      	movs	r3, #0
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061b4:	2100      	movs	r1, #0
 80061b6:	f002 faed 	bl	8008794 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6858      	ldr	r0, [r3, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f103 0208 	add.w	r2, r3, #8
 80061c4:	2300      	movs	r3, #0
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061cc:	2110      	movs	r1, #16
 80061ce:	f002 fae1 	bl	8008794 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f00a ff2e 	bl	8011038 <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 80061dc:	2200      	movs	r2, #0
 80061de:	2108      	movs	r1, #8
 80061e0:	4807      	ldr	r0, [pc, #28]	@ (8006200 <VibeCheckWaveGen_Init+0x13c>)
 80061e2:	f005 f801 	bl	800b1e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 80061e6:	2200      	movs	r2, #0
 80061e8:	2102      	movs	r1, #2
 80061ea:	4805      	ldr	r0, [pc, #20]	@ (8006200 <VibeCheckWaveGen_Init+0x13c>)
 80061ec:	f004 fffc 	bl	800b1e8 <HAL_GPIO_WritePin>
}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	43dc0000 	.word	0x43dc0000
 80061fc:	3a83126f 	.word	0x3a83126f
 8006200:	58020000 	.word	0x58020000

08006204 <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	/* check the mute button */
	uint32_t time = HAL_GetTick();
 800620c:	f000 fd74 	bl	8006cf8 <HAL_GetTick>
 8006210:	60f8      	str	r0, [r7, #12]
	if (time - wavegen->time_prev_button_press > VC_WAVE_BUTTON_DEBOUNCE_MS && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2bfa      	cmp	r3, #250	@ 0xfa
 8006220:	d939      	bls.n	8006296 <VibeCheckWaveGen_Update+0x92>
 8006222:	2104      	movs	r1, #4
 8006224:	4843      	ldr	r0, [pc, #268]	@ (8006334 <VibeCheckWaveGen_Update+0x130>)
 8006226:	f004 ffc7 	bl	800b1b8 <HAL_GPIO_ReadPin>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d032      	beq.n	8006296 <VibeCheckWaveGen_Update+0x92>

		/*
		 * the line driver seems to have some kind of slow start built in so no
		 * need to worry about pops when muting via the hardware pin
		 */
		if (wavegen->is_muted)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006238:	2b00      	cmp	r3, #0
 800623a:	d010      	beq.n	800625e <VibeCheckWaveGen_Update+0x5a>
		{
			wavegen->is_muted = 0;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006242:	461a      	mov	r2, r3
 8006244:	2300      	movs	r3, #0
 8006246:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 8006248:	2200      	movs	r2, #0
 800624a:	2108      	movs	r1, #8
 800624c:	4839      	ldr	r0, [pc, #228]	@ (8006334 <VibeCheckWaveGen_Update+0x130>)
 800624e:	f004 ffcb 	bl	800b1e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 8006252:	2200      	movs	r2, #0
 8006254:	2102      	movs	r1, #2
 8006256:	4837      	ldr	r0, [pc, #220]	@ (8006334 <VibeCheckWaveGen_Update+0x130>)
 8006258:	f004 ffc6 	bl	800b1e8 <HAL_GPIO_WritePin>
 800625c:	e00f      	b.n	800627e <VibeCheckWaveGen_Update+0x7a>
		}
		else
		{
			wavegen->is_muted = 1;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006264:	461a      	mov	r2, r3
 8006266:	2301      	movs	r3, #1
 8006268:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 800626a:	2201      	movs	r2, #1
 800626c:	2108      	movs	r1, #8
 800626e:	4831      	ldr	r0, [pc, #196]	@ (8006334 <VibeCheckWaveGen_Update+0x130>)
 8006270:	f004 ffba 	bl	800b1e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 8006274:	2201      	movs	r2, #1
 8006276:	2102      	movs	r1, #2
 8006278:	482e      	ldr	r0, [pc, #184]	@ (8006334 <VibeCheckWaveGen_Update+0x130>)
 800627a:	f004 ffb5 	bl	800b1e8 <HAL_GPIO_WritePin>
		}

		wavegen->mute_button_flag = 1;  /* can alert the shell via this flag when we press the mute button */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006284:	461a      	mov	r2, r3
 8006286:	2301      	movs	r3, #1
 8006288:	62d3      	str	r3, [r2, #44]	@ 0x2c
		wavegen->time_prev_button_press = time;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006290:	461a      	mov	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00b      	beq.n	80062ba <VibeCheckWaveGen_Update+0xb6>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3308      	adds	r3, #8
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff feb1 	bl	8006010 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062b4:	461a      	mov	r2, r3
 80062b6:	2300      	movs	r3, #0
 80062b8:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00c      	beq.n	80062e0 <VibeCheckWaveGen_Update+0xdc>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80062cc:	4619      	mov	r1, r3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff fe9e 	bl	8006010 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062da:	461a      	mov	r2, r3
 80062dc:	2300      	movs	r3, #0
 80062de:	6153      	str	r3, [r2, #20]

	/*
	 * update the sequencer
	 */
	uint32_t seq_index;
	if (Sequencer_Update(&wavegen->sequencer, time, &seq_index))
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	f241 0338 	movw	r3, #4152	@ 0x1038
 80062e6:	4413      	add	r3, r2
 80062e8:	f107 0208 	add.w	r2, r7, #8
 80062ec:	68f9      	ldr	r1, [r7, #12]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fb ff4a 	bl	8002188 <Sequencer_Update>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d017      	beq.n	800632a <VibeCheckWaveGen_Update+0x126>
	{
		VibeCheckWaveGen_SetFrequency(wavegen, wavegen->demo_num ? demo_freqs1[seq_index] : demo_freqs0[seq_index]);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006302:	2b00      	cmp	r3, #0
 8006304:	d006      	beq.n	8006314 <VibeCheckWaveGen_Update+0x110>
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4a0b      	ldr	r2, [pc, #44]	@ (8006338 <VibeCheckWaveGen_Update+0x134>)
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	edd3 7a00 	vldr	s15, [r3]
 8006312:	e005      	b.n	8006320 <VibeCheckWaveGen_Update+0x11c>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4a09      	ldr	r2, [pc, #36]	@ (800633c <VibeCheckWaveGen_Update+0x138>)
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	edd3 7a00 	vldr	s15, [r3]
 8006320:	eeb0 0a67 	vmov.f32	s0, s15
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f84f 	bl	80063c8 <VibeCheckWaveGen_SetFrequency>
	}

}
 800632a:	bf00      	nop
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	58020000 	.word	0x58020000
 8006338:	0801d6bc 	.word	0x0801d6bc
 800633c:	0801d5a0 	.word	0x0801d5a0

08006340 <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800634e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006350:	2b00      	cmp	r3, #0
 8006352:	d111      	bne.n	8006378 <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800635a:	461a      	mov	r2, r3
 800635c:	2301      	movs	r3, #1
 800635e:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006366:	461a      	mov	r2, r3
 8006368:	2301      	movs	r3, #1
 800636a:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006372:	461a      	mov	r2, r3
 8006374:	2301      	movs	r3, #1
 8006376:	60d3      	str	r3, [r2, #12]
	}

}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006394:	2b00      	cmp	r3, #0
 8006396:	d011      	beq.n	80063bc <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800639e:	461a      	mov	r2, r3
 80063a0:	2300      	movs	r3, #0
 80063a2:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063aa:	461a      	mov	r2, r3
 80063ac:	2301      	movs	r3, #1
 80063ae:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063b6:	461a      	mov	r2, r3
 80063b8:	2301      	movs	r3, #1
 80063ba:	60d3      	str	r3, [r2, #12]
	}
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 80063d4:	edd7 7a00 	vldr	s15, [r7]
 80063d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e0:	d502      	bpl.n	80063e8 <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 80063e2:	f04f 0300 	mov.w	r3, #0
 80063e6:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 80063e8:	edd7 7a00 	vldr	s15, [r7]
 80063ec:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006468 <VibeCheckWaveGen_SetFrequency+0xa0>
 80063f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f8:	dd01      	ble.n	80063fe <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 80063fa:	4b1c      	ldr	r3, [pc, #112]	@ (800646c <VibeCheckWaveGen_SetFrequency+0xa4>)
 80063fc:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 80063fe:	edd7 7a00 	vldr	s15, [r7]
 8006402:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8006470 <VibeCheckWaveGen_SetFrequency+0xa8>
 8006406:	ee27 7a87 	vmul.f32	s14, s15, s14
 800640a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8006474 <VibeCheckWaveGen_SetFrequency+0xac>
 800640e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006416:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800641a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800641e:	ee17 3a90 	vmov	r3, s15
 8006422:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006432:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006436:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8006474 <VibeCheckWaveGen_SetFrequency+0xac>
 800643a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800643e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8006470 <VibeCheckWaveGen_SetFrequency+0xa8>
 8006442:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800644c:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800645a:	bf00      	nop
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	46989600 	.word	0x46989600
 800646c:	46989600 	.word	0x46989600
 8006470:	44000000 	.word	0x44000000
 8006474:	4b989680 	.word	0x4b989680

08006478 <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	ee07 3a90 	vmov	s15, r3
}
 800648c:	eeb0 0a67 	vmov.f32	s0, s15
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 80064a6:	edd7 7a00 	vldr	s15, [r7]
 80064aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b2:	d502      	bpl.n	80064ba <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 80064ba:	edd7 7a00 	vldr	s15, [r7]
 80064be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ca:	dd02      	ble.n	80064d2 <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 80064cc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80064d0:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064d8:	461a      	mov	r2, r3
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064e4:	461a      	mov	r2, r3
 80064e6:	2301      	movs	r3, #1
 80064e8:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064f0:	461a      	mov	r2, r3
 80064f2:	2301      	movs	r3, #1
 80064f4:	60d3      	str	r3, [r2, #12]
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	ee07 3a90 	vmov	s15, r3
}
 8006516:	eeb0 0a67 	vmov.f32	s0, s15
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006536:	461a      	mov	r2, r3
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006542:	461a      	mov	r2, r3
 8006544:	2301      	movs	r3, #1
 8006546:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800654e:	461a      	mov	r2, r3
 8006550:	2301      	movs	r3, #1
 8006552:	60d3      	str	r3, [r2, #12]
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800656e:	7e1b      	ldrb	r3, [r3, #24]
}
 8006570:	4618      	mov	r0, r3
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <VibeCheckWaveGen_WasMuteButtonPressed>:

uint32_t VibeCheckWaveGen_WasMuteButtonPressed(VibeCheckWaveGen* wavegen, uint32_t* is_muted)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
	if (wavegen->mute_button_flag)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800658c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00d      	beq.n	80065ae <VibeCheckWaveGen_WasMuteButtonPressed+0x32>
	{
		wavegen->mute_button_flag = 0;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006598:	461a      	mov	r2, r3
 800659a:	2300      	movs	r3, #0
 800659c:	62d3      	str	r3, [r2, #44]	@ 0x2c
		*is_muted = wavegen->is_muted;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	601a      	str	r2, [r3, #0]
		return 1;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <VibeCheckWaveGen_WasMuteButtonPressed+0x34>
	}

	return 0;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00b      	beq.n	80065e8 <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065d6:	461a      	mov	r2, r3
 80065d8:	2300      	movs	r3, #0
 80065da:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065e2:	461a      	mov	r2, r3
 80065e4:	2301      	movs	r3, #1
 80065e6:	6113      	str	r3, [r2, #16]
	}
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800660e:	461a      	mov	r2, r3
 8006610:	2300      	movs	r3, #0
 8006612:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800661a:	461a      	mov	r2, r3
 800661c:	2301      	movs	r3, #1
 800661e:	6153      	str	r3, [r2, #20]
	}
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <VibeCheckWaveGen_StartDemo>:



void VibeCheckWaveGen_StartDemo(VibeCheckWaveGen* wavegen)
{
 800662c:	b590      	push	{r4, r7, lr}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	Sequencer_Init(&wavegen->sequencer);
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	f241 0338 	movw	r3, #4152	@ 0x1038
 800663a:	4413      	add	r3, r2
 800663c:	4618      	mov	r0, r3
 800663e:	f7fb fd71 	bl	8002124 <Sequencer_Init>
	if (wavegen->demo_num)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800664a:	2b00      	cmp	r3, #0
 800664c:	d009      	beq.n	8006662 <VibeCheckWaveGen_StartDemo+0x36>
		Sequencer_SetSequence(&wavegen->sequencer, demo_times0, sizeof(demo_times0) / sizeof(demo_times0[0]), 1);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f241 0038 	movw	r0, #4152	@ 0x1038
 8006654:	4418      	add	r0, r3
 8006656:	2301      	movs	r3, #1
 8006658:	221a      	movs	r2, #26
 800665a:	4916      	ldr	r1, [pc, #88]	@ (80066b4 <VibeCheckWaveGen_StartDemo+0x88>)
 800665c:	f7fb fd7e 	bl	800215c <Sequencer_SetSequence>
 8006660:	e008      	b.n	8006674 <VibeCheckWaveGen_StartDemo+0x48>
	else
		Sequencer_SetSequence(&wavegen->sequencer, demo_times1, sizeof(demo_times1) / sizeof(demo_times1[0]), 1);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f241 0038 	movw	r0, #4152	@ 0x1038
 8006668:	4418      	add	r0, r3
 800666a:	2301      	movs	r3, #1
 800666c:	222d      	movs	r2, #45	@ 0x2d
 800666e:	4912      	ldr	r1, [pc, #72]	@ (80066b8 <VibeCheckWaveGen_StartDemo+0x8c>)
 8006670:	f7fb fd74 	bl	800215c <Sequencer_SetSequence>
	wavegen->demo_num = !wavegen->demo_num;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800667a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800667c:	2b00      	cmp	r3, #0
 800667e:	bf0c      	ite	eq
 8006680:	2301      	moveq	r3, #1
 8006682:	2300      	movne	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	461a      	mov	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800668e:	635a      	str	r2, [r3, #52]	@ 0x34
	Sequencer_Start(&wavegen->sequencer, HAL_GetTick());
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f241 0438 	movw	r4, #4152	@ 0x1038
 8006696:	441c      	add	r4, r3
 8006698:	f000 fb2e 	bl	8006cf8 <HAL_GetTick>
 800669c:	4603      	mov	r3, r0
 800669e:	4619      	mov	r1, r3
 80066a0:	4620      	mov	r0, r4
 80066a2:	f7fb fdb3 	bl	800220c <Sequencer_Start>
	VibeCheckWaveGen_Start(wavegen);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff fe4a 	bl	8006340 <VibeCheckWaveGen_Start>
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd90      	pop	{r4, r7, pc}
 80066b4:	0801d538 	.word	0x0801d538
 80066b8:	0801d608 	.word	0x0801d608

080066bc <VibeCheckWaveGen_StopDemo>:

void VibeCheckWaveGen_StopDemo(VibeCheckWaveGen* wavegen)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Stop(wavegen);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff fe5d 	bl	8006384 <VibeCheckWaveGen_Stop>
	Sequencer_Stop(&wavegen->sequencer);
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	f241 0338 	movw	r3, #4152	@ 0x1038
 80066d0:	4413      	add	r3, r2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fb fdae 	bl	8002234 <Sequencer_Stop>
}
 80066d8:	bf00      	nop
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b094      	sub	sp, #80	@ 0x50
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80066ea:	f107 0310 	add.w	r3, r7, #16
 80066ee:	2240      	movs	r2, #64	@ 0x40
 80066f0:	4619      	mov	r1, r3
 80066f2:	6838      	ldr	r0, [r7, #0]
 80066f4:	f7fe fdf0 	bl	80052d8 <VibeCheckShell_GetNextString>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 80b0 	beq.w	8006860 <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 8006700:	f107 0310 	add.w	r3, r7, #16
 8006704:	4959      	ldr	r1, [pc, #356]	@ (800686c <VibeCheckWaveGenCMD_Set+0x18c>)
 8006706:	4618      	mov	r0, r3
 8006708:	f7f9 fe02 	bl	8000310 <strcmp>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d119      	bne.n	8006746 <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006712:	f107 030c 	add.w	r3, r7, #12
 8006716:	4619      	mov	r1, r3
 8006718:	6838      	ldr	r0, [r7, #0]
 800671a:	f7fe fe69 	bl	80053f0 <VibeCheckShell_GetNextFloat>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 809d 	beq.w	8006860 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 8006726:	edd7 7a03 	vldr	s15, [r7, #12]
 800672a:	eeb0 0a67 	vmov.f32	s0, s15
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff fe4a 	bl	80063c8 <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006734:	494e      	ldr	r1, [pc, #312]	@ (8006870 <VibeCheckWaveGenCMD_Set+0x190>)
 8006736:	6838      	ldr	r0, [r7, #0]
 8006738:	f7fe fee6 	bl	8005508 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 800673c:	6838      	ldr	r0, [r7, #0]
 800673e:	f7fe ff61 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006742:	2301      	movs	r3, #1
 8006744:	e08d      	b.n	8006862 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 8006746:	f107 0310 	add.w	r3, r7, #16
 800674a:	494a      	ldr	r1, [pc, #296]	@ (8006874 <VibeCheckWaveGenCMD_Set+0x194>)
 800674c:	4618      	mov	r0, r3
 800674e:	f7f9 fddf 	bl	8000310 <strcmp>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d118      	bne.n	800678a <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006758:	f107 0308 	add.w	r3, r7, #8
 800675c:	4619      	mov	r1, r3
 800675e:	6838      	ldr	r0, [r7, #0]
 8006760:	f7fe fe46 	bl	80053f0 <VibeCheckShell_GetNextFloat>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d07a      	beq.n	8006860 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 800676a:	edd7 7a02 	vldr	s15, [r7, #8]
 800676e:	eeb0 0a67 	vmov.f32	s0, s15
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff fe91 	bl	800649a <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006778:	493d      	ldr	r1, [pc, #244]	@ (8006870 <VibeCheckWaveGenCMD_Set+0x190>)
 800677a:	6838      	ldr	r0, [r7, #0]
 800677c:	f7fe fec4 	bl	8005508 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006780:	6838      	ldr	r0, [r7, #0]
 8006782:	f7fe ff3f 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006786:	2301      	movs	r3, #1
 8006788:	e06b      	b.n	8006862 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 800678a:	f107 0310 	add.w	r3, r7, #16
 800678e:	493a      	ldr	r1, [pc, #232]	@ (8006878 <VibeCheckWaveGenCMD_Set+0x198>)
 8006790:	4618      	mov	r0, r3
 8006792:	f7f9 fdbd 	bl	8000310 <strcmp>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d161      	bne.n	8006860 <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800679c:	f107 0310 	add.w	r3, r7, #16
 80067a0:	2240      	movs	r2, #64	@ 0x40
 80067a2:	4619      	mov	r1, r3
 80067a4:	6838      	ldr	r0, [r7, #0]
 80067a6:	f7fe fd97 	bl	80052d8 <VibeCheckShell_GetNextString>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d057      	beq.n	8006860 <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 80067b0:	f107 0310 	add.w	r3, r7, #16
 80067b4:	4931      	ldr	r1, [pc, #196]	@ (800687c <VibeCheckWaveGenCMD_Set+0x19c>)
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7f9 fdaa 	bl	8000310 <strcmp>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10c      	bne.n	80067dc <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 80067c2:	2100      	movs	r1, #0
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff fead 	bl	8006524 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 80067ca:	4929      	ldr	r1, [pc, #164]	@ (8006870 <VibeCheckWaveGenCMD_Set+0x190>)
 80067cc:	6838      	ldr	r0, [r7, #0]
 80067ce:	f7fe fe9b 	bl	8005508 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80067d2:	6838      	ldr	r0, [r7, #0]
 80067d4:	f7fe ff16 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80067d8:	2301      	movs	r3, #1
 80067da:	e042      	b.n	8006862 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 80067dc:	f107 0310 	add.w	r3, r7, #16
 80067e0:	4927      	ldr	r1, [pc, #156]	@ (8006880 <VibeCheckWaveGenCMD_Set+0x1a0>)
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7f9 fd94 	bl	8000310 <strcmp>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10c      	bne.n	8006808 <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 80067ee:	2101      	movs	r1, #1
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff fe97 	bl	8006524 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 80067f6:	491e      	ldr	r1, [pc, #120]	@ (8006870 <VibeCheckWaveGenCMD_Set+0x190>)
 80067f8:	6838      	ldr	r0, [r7, #0]
 80067fa:	f7fe fe85 	bl	8005508 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80067fe:	6838      	ldr	r0, [r7, #0]
 8006800:	f7fe ff00 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006804:	2301      	movs	r3, #1
 8006806:	e02c      	b.n	8006862 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 8006808:	f107 0310 	add.w	r3, r7, #16
 800680c:	491d      	ldr	r1, [pc, #116]	@ (8006884 <VibeCheckWaveGenCMD_Set+0x1a4>)
 800680e:	4618      	mov	r0, r3
 8006810:	f7f9 fd7e 	bl	8000310 <strcmp>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10c      	bne.n	8006834 <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 800681a:	2102      	movs	r1, #2
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff fe81 	bl	8006524 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006822:	4913      	ldr	r1, [pc, #76]	@ (8006870 <VibeCheckWaveGenCMD_Set+0x190>)
 8006824:	6838      	ldr	r0, [r7, #0]
 8006826:	f7fe fe6f 	bl	8005508 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800682a:	6838      	ldr	r0, [r7, #0]
 800682c:	f7fe feea 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006830:	2301      	movs	r3, #1
 8006832:	e016      	b.n	8006862 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 8006834:	f107 0310 	add.w	r3, r7, #16
 8006838:	4913      	ldr	r1, [pc, #76]	@ (8006888 <VibeCheckWaveGenCMD_Set+0x1a8>)
 800683a:	4618      	mov	r0, r3
 800683c:	f7f9 fd68 	bl	8000310 <strcmp>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10c      	bne.n	8006860 <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 8006846:	2103      	movs	r1, #3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7ff fe6b 	bl	8006524 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 800684e:	4908      	ldr	r1, [pc, #32]	@ (8006870 <VibeCheckWaveGenCMD_Set+0x190>)
 8006850:	6838      	ldr	r0, [r7, #0]
 8006852:	f7fe fe59 	bl	8005508 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006856:	6838      	ldr	r0, [r7, #0]
 8006858:	f7fe fed4 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800685c:	2301      	movs	r3, #1
 800685e:	e000      	b.n	8006862 <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3750      	adds	r7, #80	@ 0x50
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	0801d1b8 	.word	0x0801d1b8
 8006870:	0801d1c4 	.word	0x0801d1c4
 8006874:	0801d1c8 	.word	0x0801d1c8
 8006878:	0801d1d4 	.word	0x0801d1d4
 800687c:	0801d1e0 	.word	0x0801d1e0
 8006880:	0801d1e8 	.word	0x0801d1e8
 8006884:	0801d1f0 	.word	0x0801d1f0
 8006888:	0801d1f4 	.word	0x0801d1f4

0800688c <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b092      	sub	sp, #72	@ 0x48
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006896:	f107 0308 	add.w	r3, r7, #8
 800689a:	2240      	movs	r2, #64	@ 0x40
 800689c:	4619      	mov	r1, r3
 800689e:	6838      	ldr	r0, [r7, #0]
 80068a0:	f7fe fd1a 	bl	80052d8 <VibeCheckShell_GetNextString>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d077      	beq.n	800699a <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 80068aa:	f107 0308 	add.w	r3, r7, #8
 80068ae:	493d      	ldr	r1, [pc, #244]	@ (80069a4 <VibeCheckWaveGenCMD_Get+0x118>)
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7f9 fd2d 	bl	8000310 <strcmp>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d115      	bne.n	80068e8 <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80068bc:	493a      	ldr	r1, [pc, #232]	@ (80069a8 <VibeCheckWaveGenCMD_Get+0x11c>)
 80068be:	6838      	ldr	r0, [r7, #0]
 80068c0:	f7fe fe22 	bl	8005508 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80068c4:	6838      	ldr	r0, [r7, #0]
 80068c6:	f7fe fe8f 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff fdd4 	bl	8006478 <VibeCheckWaveGen_GetFrequency>
 80068d0:	eef0 7a40 	vmov.f32	s15, s0
 80068d4:	eeb0 0a67 	vmov.f32	s0, s15
 80068d8:	6838      	ldr	r0, [r7, #0]
 80068da:	f7fe fe67 	bl	80055ac <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80068de:	6838      	ldr	r0, [r7, #0]
 80068e0:	f7fe fe90 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e059      	b.n	800699c <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 80068e8:	f107 0308 	add.w	r3, r7, #8
 80068ec:	492f      	ldr	r1, [pc, #188]	@ (80069ac <VibeCheckWaveGenCMD_Get+0x120>)
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7f9 fd0e 	bl	8000310 <strcmp>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d115      	bne.n	8006926 <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80068fa:	492b      	ldr	r1, [pc, #172]	@ (80069a8 <VibeCheckWaveGenCMD_Get+0x11c>)
 80068fc:	6838      	ldr	r0, [r7, #0]
 80068fe:	f7fe fe03 	bl	8005508 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006902:	6838      	ldr	r0, [r7, #0]
 8006904:	f7fe fe70 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff fdfa 	bl	8006502 <VibeCheckWaveGen_GetAmplitude>
 800690e:	eef0 7a40 	vmov.f32	s15, s0
 8006912:	eeb0 0a67 	vmov.f32	s0, s15
 8006916:	6838      	ldr	r0, [r7, #0]
 8006918:	f7fe fe48 	bl	80055ac <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 800691c:	6838      	ldr	r0, [r7, #0]
 800691e:	f7fe fe71 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006922:	2301      	movs	r3, #1
 8006924:	e03a      	b.n	800699c <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 8006926:	f107 0308 	add.w	r3, r7, #8
 800692a:	4921      	ldr	r1, [pc, #132]	@ (80069b0 <VibeCheckWaveGenCMD_Get+0x124>)
 800692c:	4618      	mov	r0, r3
 800692e:	f7f9 fcef 	bl	8000310 <strcmp>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d130      	bne.n	800699a <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006938:	491b      	ldr	r1, [pc, #108]	@ (80069a8 <VibeCheckWaveGenCMD_Get+0x11c>)
 800693a:	6838      	ldr	r0, [r7, #0]
 800693c:	f7fe fde4 	bl	8005508 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006940:	6838      	ldr	r0, [r7, #0]
 8006942:	f7fe fe51 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff fe0a 	bl	8006560 <VibeCheckWaveGen_GetWaveform>
 800694c:	4603      	mov	r3, r0
 800694e:	2b03      	cmp	r3, #3
 8006950:	d81e      	bhi.n	8006990 <VibeCheckWaveGenCMD_Get+0x104>
 8006952:	a201      	add	r2, pc, #4	@ (adr r2, 8006958 <VibeCheckWaveGenCMD_Get+0xcc>)
 8006954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006958:	08006969 	.word	0x08006969
 800695c:	08006973 	.word	0x08006973
 8006960:	0800697d 	.word	0x0800697d
 8006964:	08006987 	.word	0x08006987
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 8006968:	4912      	ldr	r1, [pc, #72]	@ (80069b4 <VibeCheckWaveGenCMD_Get+0x128>)
 800696a:	6838      	ldr	r0, [r7, #0]
 800696c:	f7fe fdcc 	bl	8005508 <VibeCheckShell_PutOutputString>
				break;
 8006970:	e00e      	b.n	8006990 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 8006972:	4911      	ldr	r1, [pc, #68]	@ (80069b8 <VibeCheckWaveGenCMD_Get+0x12c>)
 8006974:	6838      	ldr	r0, [r7, #0]
 8006976:	f7fe fdc7 	bl	8005508 <VibeCheckShell_PutOutputString>
				break;
 800697a:	e009      	b.n	8006990 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 800697c:	490f      	ldr	r1, [pc, #60]	@ (80069bc <VibeCheckWaveGenCMD_Get+0x130>)
 800697e:	6838      	ldr	r0, [r7, #0]
 8006980:	f7fe fdc2 	bl	8005508 <VibeCheckShell_PutOutputString>
				break;
 8006984:	e004      	b.n	8006990 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 8006986:	490e      	ldr	r1, [pc, #56]	@ (80069c0 <VibeCheckWaveGenCMD_Get+0x134>)
 8006988:	6838      	ldr	r0, [r7, #0]
 800698a:	f7fe fdbd 	bl	8005508 <VibeCheckShell_PutOutputString>
				break;
 800698e:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 8006990:	6838      	ldr	r0, [r7, #0]
 8006992:	f7fe fe37 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006996:	2301      	movs	r3, #1
 8006998:	e000      	b.n	800699c <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3748      	adds	r7, #72	@ 0x48
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	0801d1b8 	.word	0x0801d1b8
 80069a8:	0801d1c4 	.word	0x0801d1c4
 80069ac:	0801d1c8 	.word	0x0801d1c8
 80069b0:	0801d1d4 	.word	0x0801d1d4
 80069b4:	0801d1e0 	.word	0x0801d1e0
 80069b8:	0801d1e8 	.word	0x0801d1e8
 80069bc:	0801d1f0 	.word	0x0801d1f0
 80069c0:	0801d1f4 	.word	0x0801d1f4

080069c4 <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b094      	sub	sp, #80	@ 0x50
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80069d2:	f107 030c 	add.w	r3, r7, #12
 80069d6:	2240      	movs	r2, #64	@ 0x40
 80069d8:	4619      	mov	r1, r3
 80069da:	6838      	ldr	r0, [r7, #0]
 80069dc:	f7fe fc7c 	bl	80052d8 <VibeCheckShell_GetNextString>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 808b 	beq.w	8006afe <VibeCheckWaveGenCMD_Execute+0x13a>
	{
		if (!strcmp(str, "start"))
 80069e8:	f107 030c 	add.w	r3, r7, #12
 80069ec:	4946      	ldr	r1, [pc, #280]	@ (8006b08 <VibeCheckWaveGenCMD_Execute+0x144>)
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7f9 fc8e 	bl	8000310 <strcmp>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <VibeCheckWaveGenCMD_Execute+0x4e>
		{
			VibeCheckWaveGen_Start(wavegen);
 80069fa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80069fc:	f7ff fca0 	bl	8006340 <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8006a00:	4942      	ldr	r1, [pc, #264]	@ (8006b0c <VibeCheckWaveGenCMD_Execute+0x148>)
 8006a02:	6838      	ldr	r0, [r7, #0]
 8006a04:	f7fe fd80 	bl	8005508 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006a08:	6838      	ldr	r0, [r7, #0]
 8006a0a:	f7fe fdfb 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e076      	b.n	8006b00 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "stop"))
 8006a12:	f107 030c 	add.w	r3, r7, #12
 8006a16:	493e      	ldr	r1, [pc, #248]	@ (8006b10 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7f9 fc79 	bl	8000310 <strcmp>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10b      	bne.n	8006a3c <VibeCheckWaveGenCMD_Execute+0x78>
		{
			VibeCheckWaveGen_Stop(wavegen);
 8006a24:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006a26:	f7ff fcad 	bl	8006384 <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8006a2a:	4938      	ldr	r1, [pc, #224]	@ (8006b0c <VibeCheckWaveGenCMD_Execute+0x148>)
 8006a2c:	6838      	ldr	r0, [r7, #0]
 8006a2e:	f7fe fd6b 	bl	8005508 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006a32:	6838      	ldr	r0, [r7, #0]
 8006a34:	f7fe fde6 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e061      	b.n	8006b00 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "set"))
 8006a3c:	f107 030c 	add.w	r3, r7, #12
 8006a40:	4934      	ldr	r1, [pc, #208]	@ (8006b14 <VibeCheckWaveGenCMD_Execute+0x150>)
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7f9 fc64 	bl	8000310 <strcmp>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d108      	bne.n	8006a60 <VibeCheckWaveGenCMD_Execute+0x9c>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006a52:	f7ff fe45 	bl	80066e0 <VibeCheckWaveGenCMD_Set>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d050      	beq.n	8006afe <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e04f      	b.n	8006b00 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "get"))
 8006a60:	f107 030c 	add.w	r3, r7, #12
 8006a64:	492c      	ldr	r1, [pc, #176]	@ (8006b18 <VibeCheckWaveGenCMD_Execute+0x154>)
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7f9 fc52 	bl	8000310 <strcmp>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d108      	bne.n	8006a84 <VibeCheckWaveGenCMD_Execute+0xc0>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006a76:	f7ff ff09 	bl	800688c <VibeCheckWaveGenCMD_Get>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d03e      	beq.n	8006afe <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e03d      	b.n	8006b00 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "demo"))
 8006a84:	f107 030c 	add.w	r3, r7, #12
 8006a88:	4924      	ldr	r1, [pc, #144]	@ (8006b1c <VibeCheckWaveGenCMD_Execute+0x158>)
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7f9 fc40 	bl	8000310 <strcmp>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d133      	bne.n	8006afe <VibeCheckWaveGenCMD_Execute+0x13a>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006a96:	f107 030c 	add.w	r3, r7, #12
 8006a9a:	2240      	movs	r2, #64	@ 0x40
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6838      	ldr	r0, [r7, #0]
 8006aa0:	f7fe fc1a 	bl	80052d8 <VibeCheckShell_GetNextString>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d029      	beq.n	8006afe <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				if (!strcmp(str, "start"))
 8006aaa:	f107 030c 	add.w	r3, r7, #12
 8006aae:	4916      	ldr	r1, [pc, #88]	@ (8006b08 <VibeCheckWaveGenCMD_Execute+0x144>)
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7f9 fc2d 	bl	8000310 <strcmp>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10b      	bne.n	8006ad4 <VibeCheckWaveGenCMD_Execute+0x110>
				{
					VibeCheckWaveGen_StartDemo(wavegen);
 8006abc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006abe:	f7ff fdb5 	bl	800662c <VibeCheckWaveGen_StartDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006ac2:	4912      	ldr	r1, [pc, #72]	@ (8006b0c <VibeCheckWaveGenCMD_Execute+0x148>)
 8006ac4:	6838      	ldr	r0, [r7, #0]
 8006ac6:	f7fe fd1f 	bl	8005508 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006aca:	6838      	ldr	r0, [r7, #0]
 8006acc:	f7fe fd9a 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e015      	b.n	8006b00 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
				else if (!strcmp(str, "stop"))
 8006ad4:	f107 030c 	add.w	r3, r7, #12
 8006ad8:	490d      	ldr	r1, [pc, #52]	@ (8006b10 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7f9 fc18 	bl	8000310 <strcmp>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10b      	bne.n	8006afe <VibeCheckWaveGenCMD_Execute+0x13a>
				{
					VibeCheckWaveGen_StopDemo(wavegen);
 8006ae6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006ae8:	f7ff fde8 	bl	80066bc <VibeCheckWaveGen_StopDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006aec:	4907      	ldr	r1, [pc, #28]	@ (8006b0c <VibeCheckWaveGenCMD_Execute+0x148>)
 8006aee:	6838      	ldr	r0, [r7, #0]
 8006af0:	f7fe fd0a 	bl	8005508 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006af4:	6838      	ldr	r0, [r7, #0]
 8006af6:	f7fe fd85 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
			}
		}
	}

	return 0;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3750      	adds	r7, #80	@ 0x50
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	0801d200 	.word	0x0801d200
 8006b0c:	0801d1c4 	.word	0x0801d1c4
 8006b10:	0801d208 	.word	0x0801d208
 8006b14:	0801d210 	.word	0x0801d210
 8006b18:	0801d214 	.word	0x0801d214
 8006b1c:	0801d218 	.word	0x0801d218

08006b20 <VibeCheckWaveGenSender_Execute>:


uint32_t VibeCheckWaveGenSender_Execute(void* obj, VibeCheckShell* shell)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
	/* this will send a message to the host when the mute button is pressed */

	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60fb      	str	r3, [r7, #12]

	uint32_t is_muted;
	if (VibeCheckWaveGen_WasMuteButtonPressed(wavegen, &is_muted))
 8006b2e:	f107 0308 	add.w	r3, r7, #8
 8006b32:	4619      	mov	r1, r3
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f7ff fd21 	bl	800657c <VibeCheckWaveGen_WasMuteButtonPressed>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01e      	beq.n	8006b7e <VibeCheckWaveGenSender_Execute+0x5e>
	{
		VibeCheckShell_PutOutputString(shell, "msg");
 8006b40:	4911      	ldr	r1, [pc, #68]	@ (8006b88 <VibeCheckWaveGenSender_Execute+0x68>)
 8006b42:	6838      	ldr	r0, [r7, #0]
 8006b44:	f7fe fce0 	bl	8005508 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8006b48:	6838      	ldr	r0, [r7, #0]
 8006b4a:	f7fe fd4d 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "wavegen");  /* TODO: this name should really be kept in a single place */
 8006b4e:	490f      	ldr	r1, [pc, #60]	@ (8006b8c <VibeCheckWaveGenSender_Execute+0x6c>)
 8006b50:	6838      	ldr	r0, [r7, #0]
 8006b52:	f7fe fcd9 	bl	8005508 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8006b56:	6838      	ldr	r0, [r7, #0]
 8006b58:	f7fe fd46 	bl	80055e8 <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d004      	beq.n	8006b6c <VibeCheckWaveGenSender_Execute+0x4c>
			VibeCheckShell_PutOutputString(shell, "muted");
 8006b62:	490b      	ldr	r1, [pc, #44]	@ (8006b90 <VibeCheckWaveGenSender_Execute+0x70>)
 8006b64:	6838      	ldr	r0, [r7, #0]
 8006b66:	f7fe fccf 	bl	8005508 <VibeCheckShell_PutOutputString>
 8006b6a:	e003      	b.n	8006b74 <VibeCheckWaveGenSender_Execute+0x54>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 8006b6c:	4909      	ldr	r1, [pc, #36]	@ (8006b94 <VibeCheckWaveGenSender_Execute+0x74>)
 8006b6e:	6838      	ldr	r0, [r7, #0]
 8006b70:	f7fe fcca 	bl	8005508 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8006b74:	6838      	ldr	r0, [r7, #0]
 8006b76:	f7fe fd45 	bl	8005604 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <VibeCheckWaveGenSender_Execute+0x60>
	}

	return 0;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	0801d220 	.word	0x0801d220
 8006b8c:	0801d224 	.word	0x0801d224
 8006b90:	0801d22c 	.word	0x0801d22c
 8006b94:	0801d234 	.word	0x0801d234

08006b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006bd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006b9c:	f7fc f93a 	bl	8002e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006ba0:	480c      	ldr	r0, [pc, #48]	@ (8006bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006ba2:	490d      	ldr	r1, [pc, #52]	@ (8006bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8006bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ba8:	e002      	b.n	8006bb0 <LoopCopyDataInit>

08006baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006bae:	3304      	adds	r3, #4

08006bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006bb4:	d3f9      	bcc.n	8006baa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8006be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8006be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006bbc:	e001      	b.n	8006bc2 <LoopFillZerobss>

08006bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006bc0:	3204      	adds	r2, #4

08006bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006bc4:	d3fb      	bcc.n	8006bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006bc6:	f012 ff13 	bl	80199f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006bca:	f7fa fb59 	bl	8001280 <main>
  bx  lr
 8006bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006bd0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8006bd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006bd8:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 8006bdc:	0801def0 	.word	0x0801def0
  ldr r2, =_sbss
 8006be0:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8006be4:	24006364 	.word	0x24006364

08006be8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006be8:	e7fe      	b.n	8006be8 <ADC3_IRQHandler>
	...

08006bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bf2:	2003      	movs	r0, #3
 8006bf4:	f001 fcf4 	bl	80085e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006bf8:	f006 fcd6 	bl	800d5a8 <HAL_RCC_GetSysClockFreq>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	4b15      	ldr	r3, [pc, #84]	@ (8006c54 <HAL_Init+0x68>)
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	0a1b      	lsrs	r3, r3, #8
 8006c04:	f003 030f 	and.w	r3, r3, #15
 8006c08:	4913      	ldr	r1, [pc, #76]	@ (8006c58 <HAL_Init+0x6c>)
 8006c0a:	5ccb      	ldrb	r3, [r1, r3]
 8006c0c:	f003 031f 	and.w	r3, r3, #31
 8006c10:	fa22 f303 	lsr.w	r3, r2, r3
 8006c14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c16:	4b0f      	ldr	r3, [pc, #60]	@ (8006c54 <HAL_Init+0x68>)
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	f003 030f 	and.w	r3, r3, #15
 8006c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8006c58 <HAL_Init+0x6c>)
 8006c20:	5cd3      	ldrb	r3, [r2, r3]
 8006c22:	f003 031f 	and.w	r3, r3, #31
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8006c5c <HAL_Init+0x70>)
 8006c2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c30:	4a0b      	ldr	r2, [pc, #44]	@ (8006c60 <HAL_Init+0x74>)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c36:	200f      	movs	r0, #15
 8006c38:	f000 f814 	bl	8006c64 <HAL_InitTick>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e002      	b.n	8006c4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006c46:	f7fb fb0f 	bl	8002268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	58024400 	.word	0x58024400
 8006c58:	0801d270 	.word	0x0801d270
 8006c5c:	24000004 	.word	0x24000004
 8006c60:	24000000 	.word	0x24000000

08006c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006c6c:	4b15      	ldr	r3, [pc, #84]	@ (8006cc4 <HAL_InitTick+0x60>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e021      	b.n	8006cbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006c78:	4b13      	ldr	r3, [pc, #76]	@ (8006cc8 <HAL_InitTick+0x64>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	4b11      	ldr	r3, [pc, #68]	@ (8006cc4 <HAL_InitTick+0x60>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	4619      	mov	r1, r3
 8006c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 fcd9 	bl	8008646 <HAL_SYSTICK_Config>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e00e      	b.n	8006cbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b0f      	cmp	r3, #15
 8006ca2:	d80a      	bhi.n	8006cba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cac:	f001 fca3 	bl	80085f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006cb0:	4a06      	ldr	r2, [pc, #24]	@ (8006ccc <HAL_InitTick+0x68>)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e000      	b.n	8006cbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	2400000c 	.word	0x2400000c
 8006cc8:	24000000 	.word	0x24000000
 8006ccc:	24000008 	.word	0x24000008

08006cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006cd4:	4b06      	ldr	r3, [pc, #24]	@ (8006cf0 <HAL_IncTick+0x20>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4b06      	ldr	r3, [pc, #24]	@ (8006cf4 <HAL_IncTick+0x24>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4413      	add	r3, r2
 8006ce0:	4a04      	ldr	r2, [pc, #16]	@ (8006cf4 <HAL_IncTick+0x24>)
 8006ce2:	6013      	str	r3, [r2, #0]
}
 8006ce4:	bf00      	nop
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	2400000c 	.word	0x2400000c
 8006cf4:	24004630 	.word	0x24004630

08006cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8006cfc:	4b03      	ldr	r3, [pc, #12]	@ (8006d0c <HAL_GetTick+0x14>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	24004630 	.word	0x24004630

08006d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d18:	f7ff ffee 	bl	8006cf8 <HAL_GetTick>
 8006d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d28:	d005      	beq.n	8006d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d54 <HAL_Delay+0x44>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d36:	bf00      	nop
 8006d38:	f7ff ffde 	bl	8006cf8 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d8f7      	bhi.n	8006d38 <HAL_Delay+0x28>
  {
  }
}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	2400000c 	.word	0x2400000c

08006d58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	609a      	str	r2, [r3, #8]
}
 8006d72:	bf00      	nop
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	609a      	str	r2, [r3, #8]
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3360      	adds	r3, #96	@ 0x60
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4a10      	ldr	r2, [pc, #64]	@ (8006e20 <LL_ADC_SetOffset+0x60>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d10b      	bne.n	8006dfc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006dfa:	e00b      	b.n	8006e14 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	601a      	str	r2, [r3, #0]
}
 8006e14:	bf00      	nop
 8006e16:	371c      	adds	r7, #28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	58026000 	.word	0x58026000

08006e24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3360      	adds	r3, #96	@ 0x60
 8006e32:	461a      	mov	r2, r3
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e70:	431a      	orrs	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	611a      	str	r2, [r3, #16]
}
 8006e76:	bf00      	nop
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
	...

08006e84 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4a0c      	ldr	r2, [pc, #48]	@ (8006ec4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00e      	beq.n	8006eb6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3360      	adds	r3, #96	@ 0x60
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	601a      	str	r2, [r3, #0]
  }
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	58026000 	.word	0x58026000

08006ec8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8006f08 <LL_ADC_SetOffsetSaturation+0x40>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d10e      	bne.n	8006efa <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3360      	adds	r3, #96	@ 0x60
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8006efa:	bf00      	nop
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	58026000 	.word	0x58026000

08006f0c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8006f4c <LL_ADC_SetOffsetSign+0x40>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d10e      	bne.n	8006f3e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3360      	adds	r3, #96	@ 0x60
 8006f24:	461a      	mov	r2, r3
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8006f3e:	bf00      	nop
 8006f40:	371c      	adds	r7, #28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	58026000 	.word	0x58026000

08006f50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3360      	adds	r3, #96	@ 0x60
 8006f60:	461a      	mov	r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8006fa0 <LL_ADC_SetOffsetState+0x50>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d108      	bne.n	8006f84 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8006f82:	e007      	b.n	8006f94 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	601a      	str	r2, [r3, #0]
}
 8006f94:	bf00      	nop
 8006f96:	371c      	adds	r7, #28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	58026000 	.word	0x58026000

08006fa4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3330      	adds	r3, #48	@ 0x30
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	0a1b      	lsrs	r3, r3, #8
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	f003 030c 	and.w	r3, r3, #12
 8006fc0:	4413      	add	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	211f      	movs	r1, #31
 8006fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd4:	43db      	mvns	r3, r3
 8006fd6:	401a      	ands	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	0e9b      	lsrs	r3, r3, #26
 8006fdc:	f003 011f 	and.w	r1, r3, #31
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f003 031f 	and.w	r3, r3, #31
 8006fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fea:	431a      	orrs	r2, r3
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006ff0:	bf00      	nop
 8006ff2:	371c      	adds	r7, #28
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	3314      	adds	r3, #20
 800700c:	461a      	mov	r2, r3
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	0e5b      	lsrs	r3, r3, #25
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	4413      	add	r3, r2
 800701a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	0d1b      	lsrs	r3, r3, #20
 8007024:	f003 031f 	and.w	r3, r3, #31
 8007028:	2107      	movs	r1, #7
 800702a:	fa01 f303 	lsl.w	r3, r1, r3
 800702e:	43db      	mvns	r3, r3
 8007030:	401a      	ands	r2, r3
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	0d1b      	lsrs	r3, r3, #20
 8007036:	f003 031f 	and.w	r3, r3, #31
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	fa01 f303 	lsl.w	r3, r1, r3
 8007040:	431a      	orrs	r2, r3
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007046:	bf00      	nop
 8007048:	371c      	adds	r7, #28
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
	...

08007054 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4a1a      	ldr	r2, [pc, #104]	@ (80070cc <LL_ADC_SetChannelSingleDiff+0x78>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d115      	bne.n	8007094 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007074:	43db      	mvns	r3, r3
 8007076:	401a      	ands	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f003 0318 	and.w	r3, r3, #24
 800707e:	4914      	ldr	r1, [pc, #80]	@ (80070d0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007080:	40d9      	lsrs	r1, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	400b      	ands	r3, r1
 8007086:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800708a:	431a      	orrs	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8007092:	e014      	b.n	80070be <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a0:	43db      	mvns	r3, r3
 80070a2:	401a      	ands	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f003 0318 	and.w	r3, r3, #24
 80070aa:	4909      	ldr	r1, [pc, #36]	@ (80070d0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80070ac:	40d9      	lsrs	r1, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	400b      	ands	r3, r1
 80070b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070b6:	431a      	orrs	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	58026000 	.word	0x58026000
 80070d0:	000fffff 	.word	0x000fffff

080070d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	4b04      	ldr	r3, [pc, #16]	@ (80070f4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80070e2:	4013      	ands	r3, r2
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6093      	str	r3, [r2, #8]
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	5fffffc0 	.word	0x5fffffc0

080070f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007108:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800710c:	d101      	bne.n	8007112 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800710e:	2301      	movs	r3, #1
 8007110:	e000      	b.n	8007114 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	4b05      	ldr	r3, [pc, #20]	@ (8007144 <LL_ADC_EnableInternalRegulator+0x24>)
 800712e:	4013      	ands	r3, r2
 8007130:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	6fffffc0 	.word	0x6fffffc0

08007148 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800715c:	d101      	bne.n	8007162 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <LL_ADC_IsEnabled+0x18>
 8007184:	2301      	movs	r3, #1
 8007186:	e000      	b.n	800718a <LL_ADC_IsEnabled+0x1a>
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d101      	bne.n	80071ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e000      	b.n	80071b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f003 0308 	and.w	r3, r3, #8
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d101      	bne.n	80071d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
	...

080071e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80071e4:	b590      	push	{r4, r7, lr}
 80071e6:	b089      	sub	sp, #36	@ 0x24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e1ee      	b.n	80075dc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007208:	2b00      	cmp	r3, #0
 800720a:	d109      	bne.n	8007220 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7fb f845 	bl	800229c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4618      	mov	r0, r3
 8007226:	f7ff ff67 	bl	80070f8 <LL_ADC_IsDeepPowerDownEnabled>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d004      	beq.n	800723a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff ff4d 	bl	80070d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff ff82 	bl	8007148 <LL_ADC_IsInternalRegulatorEnabled>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d114      	bne.n	8007274 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4618      	mov	r0, r3
 8007250:	f7ff ff66 	bl	8007120 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007254:	4b8e      	ldr	r3, [pc, #568]	@ (8007490 <HAL_ADC_Init+0x2ac>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	099b      	lsrs	r3, r3, #6
 800725a:	4a8e      	ldr	r2, [pc, #568]	@ (8007494 <HAL_ADC_Init+0x2b0>)
 800725c:	fba2 2303 	umull	r2, r3, r2, r3
 8007260:	099b      	lsrs	r3, r3, #6
 8007262:	3301      	adds	r3, #1
 8007264:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007266:	e002      	b.n	800726e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	3b01      	subs	r3, #1
 800726c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1f9      	bne.n	8007268 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff ff65 	bl	8007148 <LL_ADC_IsInternalRegulatorEnabled>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10d      	bne.n	80072a0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007288:	f043 0210 	orr.w	r2, r3, #16
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007294:	f043 0201 	orr.w	r2, r3, #1
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff ff76 	bl	8007196 <LL_ADC_REG_IsConversionOngoing>
 80072aa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072b0:	f003 0310 	and.w	r3, r3, #16
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f040 8188 	bne.w	80075ca <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f040 8184 	bne.w	80075ca <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072c6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80072ca:	f043 0202 	orr.w	r2, r3, #2
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff ff4a 	bl	8007170 <LL_ADC_IsEnabled>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d136      	bne.n	8007350 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a6c      	ldr	r2, [pc, #432]	@ (8007498 <HAL_ADC_Init+0x2b4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d004      	beq.n	80072f6 <HAL_ADC_Init+0x112>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a6a      	ldr	r2, [pc, #424]	@ (800749c <HAL_ADC_Init+0x2b8>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d10e      	bne.n	8007314 <HAL_ADC_Init+0x130>
 80072f6:	4868      	ldr	r0, [pc, #416]	@ (8007498 <HAL_ADC_Init+0x2b4>)
 80072f8:	f7ff ff3a 	bl	8007170 <LL_ADC_IsEnabled>
 80072fc:	4604      	mov	r4, r0
 80072fe:	4867      	ldr	r0, [pc, #412]	@ (800749c <HAL_ADC_Init+0x2b8>)
 8007300:	f7ff ff36 	bl	8007170 <LL_ADC_IsEnabled>
 8007304:	4603      	mov	r3, r0
 8007306:	4323      	orrs	r3, r4
 8007308:	2b00      	cmp	r3, #0
 800730a:	bf0c      	ite	eq
 800730c:	2301      	moveq	r3, #1
 800730e:	2300      	movne	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	e008      	b.n	8007326 <HAL_ADC_Init+0x142>
 8007314:	4862      	ldr	r0, [pc, #392]	@ (80074a0 <HAL_ADC_Init+0x2bc>)
 8007316:	f7ff ff2b 	bl	8007170 <LL_ADC_IsEnabled>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	bf0c      	ite	eq
 8007320:	2301      	moveq	r3, #1
 8007322:	2300      	movne	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d012      	beq.n	8007350 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a5a      	ldr	r2, [pc, #360]	@ (8007498 <HAL_ADC_Init+0x2b4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d004      	beq.n	800733e <HAL_ADC_Init+0x15a>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a58      	ldr	r2, [pc, #352]	@ (800749c <HAL_ADC_Init+0x2b8>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d101      	bne.n	8007342 <HAL_ADC_Init+0x15e>
 800733e:	4a59      	ldr	r2, [pc, #356]	@ (80074a4 <HAL_ADC_Init+0x2c0>)
 8007340:	e000      	b.n	8007344 <HAL_ADC_Init+0x160>
 8007342:	4a59      	ldr	r2, [pc, #356]	@ (80074a8 <HAL_ADC_Init+0x2c4>)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	4619      	mov	r1, r3
 800734a:	4610      	mov	r0, r2
 800734c:	f7ff fd04 	bl	8006d58 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a52      	ldr	r2, [pc, #328]	@ (80074a0 <HAL_ADC_Init+0x2bc>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d129      	bne.n	80073ae <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	7e5b      	ldrb	r3, [r3, #25]
 800735e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007364:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800736a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	2b08      	cmp	r3, #8
 8007372:	d013      	beq.n	800739c <HAL_ADC_Init+0x1b8>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	2b0c      	cmp	r3, #12
 800737a:	d00d      	beq.n	8007398 <HAL_ADC_Init+0x1b4>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	2b1c      	cmp	r3, #28
 8007382:	d007      	beq.n	8007394 <HAL_ADC_Init+0x1b0>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	2b18      	cmp	r3, #24
 800738a:	d101      	bne.n	8007390 <HAL_ADC_Init+0x1ac>
 800738c:	2318      	movs	r3, #24
 800738e:	e006      	b.n	800739e <HAL_ADC_Init+0x1ba>
 8007390:	2300      	movs	r3, #0
 8007392:	e004      	b.n	800739e <HAL_ADC_Init+0x1ba>
 8007394:	2310      	movs	r3, #16
 8007396:	e002      	b.n	800739e <HAL_ADC_Init+0x1ba>
 8007398:	2308      	movs	r3, #8
 800739a:	e000      	b.n	800739e <HAL_ADC_Init+0x1ba>
 800739c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800739e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073a6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80073a8:	4313      	orrs	r3, r2
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	e00e      	b.n	80073cc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	7e5b      	ldrb	r3, [r3, #25]
 80073b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80073b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80073be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80073c8:	4313      	orrs	r3, r2
 80073ca:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d106      	bne.n	80073e4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073da:	3b01      	subs	r3, #1
 80073dc:	045b      	lsls	r3, r3, #17
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d009      	beq.n	8007400 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a26      	ldr	r2, [pc, #152]	@ (80074a0 <HAL_ADC_Init+0x2bc>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d115      	bne.n	8007436 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	4b26      	ldr	r3, [pc, #152]	@ (80074ac <HAL_ADC_Init+0x2c8>)
 8007412:	4013      	ands	r3, r2
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	6812      	ldr	r2, [r2, #0]
 8007418:	69b9      	ldr	r1, [r7, #24]
 800741a:	430b      	orrs	r3, r1
 800741c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	611a      	str	r2, [r3, #16]
 8007434:	e009      	b.n	800744a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	4b1c      	ldr	r3, [pc, #112]	@ (80074b0 <HAL_ADC_Init+0x2cc>)
 800743e:	4013      	ands	r3, r2
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6812      	ldr	r2, [r2, #0]
 8007444:	69b9      	ldr	r1, [r7, #24]
 8007446:	430b      	orrs	r3, r1
 8007448:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fea1 	bl	8007196 <LL_ADC_REG_IsConversionOngoing>
 8007454:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff feae 	bl	80071bc <LL_ADC_INJ_IsConversionOngoing>
 8007460:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	f040 808e 	bne.w	8007586 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	f040 808a 	bne.w	8007586 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a0a      	ldr	r2, [pc, #40]	@ (80074a0 <HAL_ADC_Init+0x2bc>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d11b      	bne.n	80074b4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	7e1b      	ldrb	r3, [r3, #24]
 8007480:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007488:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800748a:	4313      	orrs	r3, r2
 800748c:	61bb      	str	r3, [r7, #24]
 800748e:	e018      	b.n	80074c2 <HAL_ADC_Init+0x2de>
 8007490:	24000000 	.word	0x24000000
 8007494:	053e2d63 	.word	0x053e2d63
 8007498:	40022000 	.word	0x40022000
 800749c:	40022100 	.word	0x40022100
 80074a0:	58026000 	.word	0x58026000
 80074a4:	40022300 	.word	0x40022300
 80074a8:	58026300 	.word	0x58026300
 80074ac:	fff04007 	.word	0xfff04007
 80074b0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	7e1b      	ldrb	r3, [r3, #24]
 80074b8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80074be:	4313      	orrs	r3, r2
 80074c0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68da      	ldr	r2, [r3, #12]
 80074c8:	4b46      	ldr	r3, [pc, #280]	@ (80075e4 <HAL_ADC_Init+0x400>)
 80074ca:	4013      	ands	r3, r2
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6812      	ldr	r2, [r2, #0]
 80074d0:	69b9      	ldr	r1, [r7, #24]
 80074d2:	430b      	orrs	r3, r1
 80074d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d137      	bne.n	8007550 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a3f      	ldr	r2, [pc, #252]	@ (80075e8 <HAL_ADC_Init+0x404>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d116      	bne.n	800751e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	691a      	ldr	r2, [r3, #16]
 80074f6:	4b3d      	ldr	r3, [pc, #244]	@ (80075ec <HAL_ADC_Init+0x408>)
 80074f8:	4013      	ands	r3, r2
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007502:	4311      	orrs	r1, r2
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007508:	4311      	orrs	r1, r2
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800750e:	430a      	orrs	r2, r1
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0201 	orr.w	r2, r2, #1
 800751a:	611a      	str	r2, [r3, #16]
 800751c:	e020      	b.n	8007560 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	4b32      	ldr	r3, [pc, #200]	@ (80075f0 <HAL_ADC_Init+0x40c>)
 8007526:	4013      	ands	r3, r2
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800752c:	3a01      	subs	r2, #1
 800752e:	0411      	lsls	r1, r2, #16
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007534:	4311      	orrs	r1, r2
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800753a:	4311      	orrs	r1, r2
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007540:	430a      	orrs	r2, r1
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f042 0201 	orr.w	r2, r2, #1
 800754c:	611a      	str	r2, [r3, #16]
 800754e:	e007      	b.n	8007560 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691a      	ldr	r2, [r3, #16]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0201 	bic.w	r2, r2, #1
 800755e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a1b      	ldr	r2, [pc, #108]	@ (80075e8 <HAL_ADC_Init+0x404>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d002      	beq.n	8007586 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fd67 	bl	8008054 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d10c      	bne.n	80075a8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007594:	f023 010f 	bic.w	r1, r3, #15
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	1e5a      	subs	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80075a6:	e007      	b.n	80075b8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 020f 	bic.w	r2, r2, #15
 80075b6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075bc:	f023 0303 	bic.w	r3, r3, #3
 80075c0:	f043 0201 	orr.w	r2, r3, #1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	661a      	str	r2, [r3, #96]	@ 0x60
 80075c8:	e007      	b.n	80075da <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ce:	f043 0210 	orr.w	r2, r3, #16
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80075da:	7ffb      	ldrb	r3, [r7, #31]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3724      	adds	r7, #36	@ 0x24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd90      	pop	{r4, r7, pc}
 80075e4:	ffffbffc 	.word	0xffffbffc
 80075e8:	58026000 	.word	0x58026000
 80075ec:	fc00f81f 	.word	0xfc00f81f
 80075f0:	fc00f81e 	.word	0xfc00f81e

080075f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80075f4:	b590      	push	{r4, r7, lr}
 80075f6:	b0b9      	sub	sp, #228	@ 0xe4
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800760e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	4aab      	ldr	r2, [pc, #684]	@ (80078c4 <HAL_ADC_ConfigChannel+0x2d0>)
 8007616:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800761e:	2b01      	cmp	r3, #1
 8007620:	d102      	bne.n	8007628 <HAL_ADC_ConfigChannel+0x34>
 8007622:	2302      	movs	r3, #2
 8007624:	f000 bcfe 	b.w	8008024 <HAL_ADC_ConfigChannel+0xa30>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff fdae 	bl	8007196 <LL_ADC_REG_IsConversionOngoing>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 84e2 	bne.w	8008006 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	db38      	blt.n	80076bc <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a9e      	ldr	r2, [pc, #632]	@ (80078c8 <HAL_ADC_ConfigChannel+0x2d4>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d033      	beq.n	80076bc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800765c:	2b00      	cmp	r3, #0
 800765e:	d108      	bne.n	8007672 <HAL_ADC_ConfigChannel+0x7e>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	0e9b      	lsrs	r3, r3, #26
 8007666:	f003 031f 	and.w	r3, r3, #31
 800766a:	2201      	movs	r2, #1
 800766c:	fa02 f303 	lsl.w	r3, r2, r3
 8007670:	e01d      	b.n	80076ae <HAL_ADC_ConfigChannel+0xba>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800767a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800767e:	fa93 f3a3 	rbit	r3, r3
 8007682:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007686:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800768a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800768e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8007696:	2320      	movs	r3, #32
 8007698:	e004      	b.n	80076a4 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800769a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800769e:	fab3 f383 	clz	r3, r3
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	f003 031f 	and.w	r3, r3, #31
 80076a8:	2201      	movs	r2, #1
 80076aa:	fa02 f303 	lsl.w	r3, r2, r3
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6812      	ldr	r2, [r2, #0]
 80076b2:	69d1      	ldr	r1, [r2, #28]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	6812      	ldr	r2, [r2, #0]
 80076b8:	430b      	orrs	r3, r1
 80076ba:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6818      	ldr	r0, [r3, #0]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	6859      	ldr	r1, [r3, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	f7ff fc6b 	bl	8006fa4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff fd5f 	bl	8007196 <LL_ADC_REG_IsConversionOngoing>
 80076d8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7ff fd6b 	bl	80071bc <LL_ADC_INJ_IsConversionOngoing>
 80076e6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80076ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f040 8270 	bne.w	8007bd4 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80076f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f040 826b 	bne.w	8007bd4 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6818      	ldr	r0, [r3, #0]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	6819      	ldr	r1, [r3, #0]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	461a      	mov	r2, r3
 800770c:	f7ff fc76 	bl	8006ffc <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a6c      	ldr	r2, [pc, #432]	@ (80078c8 <HAL_ADC_ConfigChannel+0x2d4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d10d      	bne.n	8007736 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	695a      	ldr	r2, [r3, #20]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	08db      	lsrs	r3, r3, #3
 8007726:	f003 0303 	and.w	r3, r3, #3
 800772a:	005b      	lsls	r3, r3, #1
 800772c:	fa02 f303 	lsl.w	r3, r2, r3
 8007730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007734:	e032      	b.n	800779c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007736:	4b65      	ldr	r3, [pc, #404]	@ (80078cc <HAL_ADC_ConfigChannel+0x2d8>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800773e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007742:	d10b      	bne.n	800775c <HAL_ADC_ConfigChannel+0x168>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	695a      	ldr	r2, [r3, #20]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	089b      	lsrs	r3, r3, #2
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	fa02 f303 	lsl.w	r3, r2, r3
 800775a:	e01d      	b.n	8007798 <HAL_ADC_ConfigChannel+0x1a4>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f003 0310 	and.w	r3, r3, #16
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10b      	bne.n	8007782 <HAL_ADC_ConfigChannel+0x18e>
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	695a      	ldr	r2, [r3, #20]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	089b      	lsrs	r3, r3, #2
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	fa02 f303 	lsl.w	r3, r2, r3
 8007780:	e00a      	b.n	8007798 <HAL_ADC_ConfigChannel+0x1a4>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	695a      	ldr	r2, [r3, #20]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	089b      	lsrs	r3, r3, #2
 800778e:	f003 0304 	and.w	r3, r3, #4
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	fa02 f303 	lsl.w	r3, r2, r3
 8007798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d048      	beq.n	8007836 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6818      	ldr	r0, [r3, #0]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	6919      	ldr	r1, [r3, #16]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077b4:	f7ff fb04 	bl	8006dc0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a42      	ldr	r2, [pc, #264]	@ (80078c8 <HAL_ADC_ConfigChannel+0x2d4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d119      	bne.n	80077f6 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6818      	ldr	r0, [r3, #0]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	6919      	ldr	r1, [r3, #16]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	461a      	mov	r2, r3
 80077d0:	f7ff fb9c 	bl	8006f0c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	6919      	ldr	r1, [r3, #16]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d102      	bne.n	80077ec <HAL_ADC_ConfigChannel+0x1f8>
 80077e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80077ea:	e000      	b.n	80077ee <HAL_ADC_ConfigChannel+0x1fa>
 80077ec:	2300      	movs	r3, #0
 80077ee:	461a      	mov	r2, r3
 80077f0:	f7ff fb6a 	bl	8006ec8 <LL_ADC_SetOffsetSaturation>
 80077f4:	e1ee      	b.n	8007bd4 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	6919      	ldr	r1, [r3, #16]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007804:	2b01      	cmp	r3, #1
 8007806:	d102      	bne.n	800780e <HAL_ADC_ConfigChannel+0x21a>
 8007808:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800780c:	e000      	b.n	8007810 <HAL_ADC_ConfigChannel+0x21c>
 800780e:	2300      	movs	r3, #0
 8007810:	461a      	mov	r2, r3
 8007812:	f7ff fb37 	bl	8006e84 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	6919      	ldr	r1, [r3, #16]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	7e1b      	ldrb	r3, [r3, #24]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d102      	bne.n	800782c <HAL_ADC_ConfigChannel+0x238>
 8007826:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800782a:	e000      	b.n	800782e <HAL_ADC_ConfigChannel+0x23a>
 800782c:	2300      	movs	r3, #0
 800782e:	461a      	mov	r2, r3
 8007830:	f7ff fb0e 	bl	8006e50 <LL_ADC_SetDataRightShift>
 8007834:	e1ce      	b.n	8007bd4 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a23      	ldr	r2, [pc, #140]	@ (80078c8 <HAL_ADC_ConfigChannel+0x2d4>)
 800783c:	4293      	cmp	r3, r2
 800783e:	f040 8181 	bne.w	8007b44 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2100      	movs	r1, #0
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff faeb 	bl	8006e24 <LL_ADC_GetOffsetChannel>
 800784e:	4603      	mov	r3, r0
 8007850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10a      	bne.n	800786e <HAL_ADC_ConfigChannel+0x27a>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2100      	movs	r1, #0
 800785e:	4618      	mov	r0, r3
 8007860:	f7ff fae0 	bl	8006e24 <LL_ADC_GetOffsetChannel>
 8007864:	4603      	mov	r3, r0
 8007866:	0e9b      	lsrs	r3, r3, #26
 8007868:	f003 021f 	and.w	r2, r3, #31
 800786c:	e01e      	b.n	80078ac <HAL_ADC_ConfigChannel+0x2b8>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2100      	movs	r1, #0
 8007874:	4618      	mov	r0, r3
 8007876:	f7ff fad5 	bl	8006e24 <LL_ADC_GetOffsetChannel>
 800787a:	4603      	mov	r3, r0
 800787c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007880:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007884:	fa93 f3a3 	rbit	r3, r3
 8007888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800788c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007890:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8007894:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 800789c:	2320      	movs	r3, #32
 800789e:	e004      	b.n	80078aa <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80078a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078a4:	fab3 f383 	clz	r3, r3
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	461a      	mov	r2, r3
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10b      	bne.n	80078d0 <HAL_ADC_ConfigChannel+0x2dc>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	0e9b      	lsrs	r3, r3, #26
 80078be:	f003 031f 	and.w	r3, r3, #31
 80078c2:	e01e      	b.n	8007902 <HAL_ADC_ConfigChannel+0x30e>
 80078c4:	47ff0000 	.word	0x47ff0000
 80078c8:	58026000 	.word	0x58026000
 80078cc:	5c001000 	.word	0x5c001000
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078dc:	fa93 f3a3 	rbit	r3, r3
 80078e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80078e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80078e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80078ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80078f4:	2320      	movs	r3, #32
 80078f6:	e004      	b.n	8007902 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80078f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80078fc:	fab3 f383 	clz	r3, r3
 8007900:	b2db      	uxtb	r3, r3
 8007902:	429a      	cmp	r2, r3
 8007904:	d106      	bne.n	8007914 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2200      	movs	r2, #0
 800790c:	2100      	movs	r1, #0
 800790e:	4618      	mov	r0, r3
 8007910:	f7ff fb1e 	bl	8006f50 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2101      	movs	r1, #1
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff fa82 	bl	8006e24 <LL_ADC_GetOffsetChannel>
 8007920:	4603      	mov	r3, r0
 8007922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10a      	bne.n	8007940 <HAL_ADC_ConfigChannel+0x34c>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2101      	movs	r1, #1
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff fa77 	bl	8006e24 <LL_ADC_GetOffsetChannel>
 8007936:	4603      	mov	r3, r0
 8007938:	0e9b      	lsrs	r3, r3, #26
 800793a:	f003 021f 	and.w	r2, r3, #31
 800793e:	e01e      	b.n	800797e <HAL_ADC_ConfigChannel+0x38a>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2101      	movs	r1, #1
 8007946:	4618      	mov	r0, r3
 8007948:	f7ff fa6c 	bl	8006e24 <LL_ADC_GetOffsetChannel>
 800794c:	4603      	mov	r3, r0
 800794e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007956:	fa93 f3a3 	rbit	r3, r3
 800795a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800795e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8007966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800796e:	2320      	movs	r3, #32
 8007970:	e004      	b.n	800797c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8007972:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007976:	fab3 f383 	clz	r3, r3
 800797a:	b2db      	uxtb	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <HAL_ADC_ConfigChannel+0x3a2>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	0e9b      	lsrs	r3, r3, #26
 8007990:	f003 031f 	and.w	r3, r3, #31
 8007994:	e018      	b.n	80079c8 <HAL_ADC_ConfigChannel+0x3d4>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800799e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80079a2:	fa93 f3a3 	rbit	r3, r3
 80079a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80079aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80079b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80079ba:	2320      	movs	r3, #32
 80079bc:	e004      	b.n	80079c8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80079be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079c2:	fab3 f383 	clz	r3, r3
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d106      	bne.n	80079da <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2200      	movs	r2, #0
 80079d2:	2101      	movs	r1, #1
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7ff fabb 	bl	8006f50 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2102      	movs	r1, #2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff fa1f 	bl	8006e24 <LL_ADC_GetOffsetChannel>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10a      	bne.n	8007a06 <HAL_ADC_ConfigChannel+0x412>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2102      	movs	r1, #2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7ff fa14 	bl	8006e24 <LL_ADC_GetOffsetChannel>
 80079fc:	4603      	mov	r3, r0
 80079fe:	0e9b      	lsrs	r3, r3, #26
 8007a00:	f003 021f 	and.w	r2, r3, #31
 8007a04:	e01e      	b.n	8007a44 <HAL_ADC_ConfigChannel+0x450>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2102      	movs	r1, #2
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff fa09 	bl	8006e24 <LL_ADC_GetOffsetChannel>
 8007a12:	4603      	mov	r3, r0
 8007a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a1c:	fa93 f3a3 	rbit	r3, r3
 8007a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8007a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8007a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8007a34:	2320      	movs	r3, #32
 8007a36:	e004      	b.n	8007a42 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8007a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a3c:	fab3 f383 	clz	r3, r3
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	461a      	mov	r2, r3
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d105      	bne.n	8007a5c <HAL_ADC_ConfigChannel+0x468>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	0e9b      	lsrs	r3, r3, #26
 8007a56:	f003 031f 	and.w	r3, r3, #31
 8007a5a:	e014      	b.n	8007a86 <HAL_ADC_ConfigChannel+0x492>
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a64:	fa93 f3a3 	rbit	r3, r3
 8007a68:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8007a6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8007a70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8007a78:	2320      	movs	r3, #32
 8007a7a:	e004      	b.n	8007a86 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8007a7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a80:	fab3 f383 	clz	r3, r3
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d106      	bne.n	8007a98 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2102      	movs	r1, #2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fa5c 	bl	8006f50 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2103      	movs	r1, #3
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff f9c0 	bl	8006e24 <LL_ADC_GetOffsetChannel>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10a      	bne.n	8007ac4 <HAL_ADC_ConfigChannel+0x4d0>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2103      	movs	r1, #3
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7ff f9b5 	bl	8006e24 <LL_ADC_GetOffsetChannel>
 8007aba:	4603      	mov	r3, r0
 8007abc:	0e9b      	lsrs	r3, r3, #26
 8007abe:	f003 021f 	and.w	r2, r3, #31
 8007ac2:	e017      	b.n	8007af4 <HAL_ADC_ConfigChannel+0x500>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2103      	movs	r1, #3
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff f9aa 	bl	8006e24 <LL_ADC_GetOffsetChannel>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ad4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ad6:	fa93 f3a3 	rbit	r3, r3
 8007ada:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8007adc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ade:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8007ae0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8007ae6:	2320      	movs	r3, #32
 8007ae8:	e003      	b.n	8007af2 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8007aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007aec:	fab3 f383 	clz	r3, r3
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	461a      	mov	r2, r3
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d105      	bne.n	8007b0c <HAL_ADC_ConfigChannel+0x518>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	0e9b      	lsrs	r3, r3, #26
 8007b06:	f003 031f 	and.w	r3, r3, #31
 8007b0a:	e011      	b.n	8007b30 <HAL_ADC_ConfigChannel+0x53c>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b14:	fa93 f3a3 	rbit	r3, r3
 8007b18:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8007b1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8007b1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8007b24:	2320      	movs	r3, #32
 8007b26:	e003      	b.n	8007b30 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8007b28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b2a:	fab3 f383 	clz	r3, r3
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d14f      	bne.n	8007bd4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2103      	movs	r1, #3
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff fa07 	bl	8006f50 <LL_ADC_SetOffsetState>
 8007b42:	e047      	b.n	8007bd4 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	069b      	lsls	r3, r3, #26
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d107      	bne.n	8007b68 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007b66:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	069b      	lsls	r3, r3, #26
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d107      	bne.n	8007b8c <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007b8a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	069b      	lsls	r3, r3, #26
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d107      	bne.n	8007bb0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007bae:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	069b      	lsls	r3, r3, #26
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d107      	bne.n	8007bd4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007bd2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7ff fac9 	bl	8007170 <LL_ADC_IsEnabled>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f040 8219 	bne.w	8008018 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	6819      	ldr	r1, [r3, #0]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f7ff fa2e 	bl	8007054 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	4aa1      	ldr	r2, [pc, #644]	@ (8007e84 <HAL_ADC_ConfigChannel+0x890>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	f040 812e 	bne.w	8007e60 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10b      	bne.n	8007c2c <HAL_ADC_ConfigChannel+0x638>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	0e9b      	lsrs	r3, r3, #26
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	f003 031f 	and.w	r3, r3, #31
 8007c20:	2b09      	cmp	r3, #9
 8007c22:	bf94      	ite	ls
 8007c24:	2301      	movls	r3, #1
 8007c26:	2300      	movhi	r3, #0
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	e019      	b.n	8007c60 <HAL_ADC_ConfigChannel+0x66c>
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c34:	fa93 f3a3 	rbit	r3, r3
 8007c38:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8007c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8007c3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8007c44:	2320      	movs	r3, #32
 8007c46:	e003      	b.n	8007c50 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8007c48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c4a:	fab3 f383 	clz	r3, r3
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	3301      	adds	r3, #1
 8007c52:	f003 031f 	and.w	r3, r3, #31
 8007c56:	2b09      	cmp	r3, #9
 8007c58:	bf94      	ite	ls
 8007c5a:	2301      	movls	r3, #1
 8007c5c:	2300      	movhi	r3, #0
 8007c5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d079      	beq.n	8007d58 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d107      	bne.n	8007c80 <HAL_ADC_ConfigChannel+0x68c>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	0e9b      	lsrs	r3, r3, #26
 8007c76:	3301      	adds	r3, #1
 8007c78:	069b      	lsls	r3, r3, #26
 8007c7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007c7e:	e015      	b.n	8007cac <HAL_ADC_ConfigChannel+0x6b8>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c88:	fa93 f3a3 	rbit	r3, r3
 8007c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8007c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c90:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8007c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8007c98:	2320      	movs	r3, #32
 8007c9a:	e003      	b.n	8007ca4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8007c9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c9e:	fab3 f383 	clz	r3, r3
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	069b      	lsls	r3, r3, #26
 8007ca8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d109      	bne.n	8007ccc <HAL_ADC_ConfigChannel+0x6d8>
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	0e9b      	lsrs	r3, r3, #26
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	f003 031f 	and.w	r3, r3, #31
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cca:	e017      	b.n	8007cfc <HAL_ADC_ConfigChannel+0x708>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cd4:	fa93 f3a3 	rbit	r3, r3
 8007cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8007cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cdc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8007cde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	e003      	b.n	8007cf0 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8007ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cea:	fab3 f383 	clz	r3, r3
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	f003 031f 	and.w	r3, r3, #31
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cfc:	ea42 0103 	orr.w	r1, r2, r3
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10a      	bne.n	8007d22 <HAL_ADC_ConfigChannel+0x72e>
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	0e9b      	lsrs	r3, r3, #26
 8007d12:	3301      	adds	r3, #1
 8007d14:	f003 021f 	and.w	r2, r3, #31
 8007d18:	4613      	mov	r3, r2
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	4413      	add	r3, r2
 8007d1e:	051b      	lsls	r3, r3, #20
 8007d20:	e018      	b.n	8007d54 <HAL_ADC_ConfigChannel+0x760>
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d2a:	fa93 f3a3 	rbit	r3, r3
 8007d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8007d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d32:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8007d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8007d3a:	2320      	movs	r3, #32
 8007d3c:	e003      	b.n	8007d46 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d40:	fab3 f383 	clz	r3, r3
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	3301      	adds	r3, #1
 8007d48:	f003 021f 	and.w	r2, r3, #31
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	005b      	lsls	r3, r3, #1
 8007d50:	4413      	add	r3, r2
 8007d52:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d54:	430b      	orrs	r3, r1
 8007d56:	e07e      	b.n	8007e56 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d107      	bne.n	8007d74 <HAL_ADC_ConfigChannel+0x780>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	0e9b      	lsrs	r3, r3, #26
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	069b      	lsls	r3, r3, #26
 8007d6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007d72:	e015      	b.n	8007da0 <HAL_ADC_ConfigChannel+0x7ac>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7c:	fa93 f3a3 	rbit	r3, r3
 8007d80:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8007d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8007d8c:	2320      	movs	r3, #32
 8007d8e:	e003      	b.n	8007d98 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8007d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d92:	fab3 f383 	clz	r3, r3
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	3301      	adds	r3, #1
 8007d9a:	069b      	lsls	r3, r3, #26
 8007d9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d109      	bne.n	8007dc0 <HAL_ADC_ConfigChannel+0x7cc>
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	0e9b      	lsrs	r3, r3, #26
 8007db2:	3301      	adds	r3, #1
 8007db4:	f003 031f 	and.w	r3, r3, #31
 8007db8:	2101      	movs	r1, #1
 8007dba:	fa01 f303 	lsl.w	r3, r1, r3
 8007dbe:	e017      	b.n	8007df0 <HAL_ADC_ConfigChannel+0x7fc>
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	fa93 f3a3 	rbit	r3, r3
 8007dcc:	61bb      	str	r3, [r7, #24]
  return result;
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8007dd8:	2320      	movs	r3, #32
 8007dda:	e003      	b.n	8007de4 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	fab3 f383 	clz	r3, r3
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	3301      	adds	r3, #1
 8007de6:	f003 031f 	and.w	r3, r3, #31
 8007dea:	2101      	movs	r1, #1
 8007dec:	fa01 f303 	lsl.w	r3, r1, r3
 8007df0:	ea42 0103 	orr.w	r1, r2, r3
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10d      	bne.n	8007e1c <HAL_ADC_ConfigChannel+0x828>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	0e9b      	lsrs	r3, r3, #26
 8007e06:	3301      	adds	r3, #1
 8007e08:	f003 021f 	and.w	r2, r3, #31
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	4413      	add	r3, r2
 8007e12:	3b1e      	subs	r3, #30
 8007e14:	051b      	lsls	r3, r3, #20
 8007e16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007e1a:	e01b      	b.n	8007e54 <HAL_ADC_ConfigChannel+0x860>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	fa93 f3a3 	rbit	r3, r3
 8007e28:	60fb      	str	r3, [r7, #12]
  return result;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8007e34:	2320      	movs	r3, #32
 8007e36:	e003      	b.n	8007e40 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	fab3 f383 	clz	r3, r3
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	3301      	adds	r3, #1
 8007e42:	f003 021f 	and.w	r2, r3, #31
 8007e46:	4613      	mov	r3, r2
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3b1e      	subs	r3, #30
 8007e4e:	051b      	lsls	r3, r3, #20
 8007e50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007e54:	430b      	orrs	r3, r1
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	6892      	ldr	r2, [r2, #8]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	f7ff f8ce 	bl	8006ffc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f280 80d7 	bge.w	8008018 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a06      	ldr	r2, [pc, #24]	@ (8007e88 <HAL_ADC_ConfigChannel+0x894>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d004      	beq.n	8007e7e <HAL_ADC_ConfigChannel+0x88a>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a04      	ldr	r2, [pc, #16]	@ (8007e8c <HAL_ADC_ConfigChannel+0x898>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d10a      	bne.n	8007e94 <HAL_ADC_ConfigChannel+0x8a0>
 8007e7e:	4b04      	ldr	r3, [pc, #16]	@ (8007e90 <HAL_ADC_ConfigChannel+0x89c>)
 8007e80:	e009      	b.n	8007e96 <HAL_ADC_ConfigChannel+0x8a2>
 8007e82:	bf00      	nop
 8007e84:	47ff0000 	.word	0x47ff0000
 8007e88:	40022000 	.word	0x40022000
 8007e8c:	40022100 	.word	0x40022100
 8007e90:	40022300 	.word	0x40022300
 8007e94:	4b65      	ldr	r3, [pc, #404]	@ (800802c <HAL_ADC_ConfigChannel+0xa38>)
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe ff84 	bl	8006da4 <LL_ADC_GetCommonPathInternalCh>
 8007e9c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a62      	ldr	r2, [pc, #392]	@ (8008030 <HAL_ADC_ConfigChannel+0xa3c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d004      	beq.n	8007eb4 <HAL_ADC_ConfigChannel+0x8c0>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a61      	ldr	r2, [pc, #388]	@ (8008034 <HAL_ADC_ConfigChannel+0xa40>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d10e      	bne.n	8007ed2 <HAL_ADC_ConfigChannel+0x8de>
 8007eb4:	485e      	ldr	r0, [pc, #376]	@ (8008030 <HAL_ADC_ConfigChannel+0xa3c>)
 8007eb6:	f7ff f95b 	bl	8007170 <LL_ADC_IsEnabled>
 8007eba:	4604      	mov	r4, r0
 8007ebc:	485d      	ldr	r0, [pc, #372]	@ (8008034 <HAL_ADC_ConfigChannel+0xa40>)
 8007ebe:	f7ff f957 	bl	8007170 <LL_ADC_IsEnabled>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	4323      	orrs	r3, r4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bf0c      	ite	eq
 8007eca:	2301      	moveq	r3, #1
 8007ecc:	2300      	movne	r3, #0
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	e008      	b.n	8007ee4 <HAL_ADC_ConfigChannel+0x8f0>
 8007ed2:	4859      	ldr	r0, [pc, #356]	@ (8008038 <HAL_ADC_ConfigChannel+0xa44>)
 8007ed4:	f7ff f94c 	bl	8007170 <LL_ADC_IsEnabled>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	bf0c      	ite	eq
 8007ede:	2301      	moveq	r3, #1
 8007ee0:	2300      	movne	r3, #0
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 8084 	beq.w	8007ff2 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a53      	ldr	r2, [pc, #332]	@ (800803c <HAL_ADC_ConfigChannel+0xa48>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d132      	bne.n	8007f5a <HAL_ADC_ConfigChannel+0x966>
 8007ef4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ef8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d12c      	bne.n	8007f5a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a4c      	ldr	r2, [pc, #304]	@ (8008038 <HAL_ADC_ConfigChannel+0xa44>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	f040 8086 	bne.w	8008018 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a47      	ldr	r2, [pc, #284]	@ (8008030 <HAL_ADC_ConfigChannel+0xa3c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d004      	beq.n	8007f20 <HAL_ADC_ConfigChannel+0x92c>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a46      	ldr	r2, [pc, #280]	@ (8008034 <HAL_ADC_ConfigChannel+0xa40>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d101      	bne.n	8007f24 <HAL_ADC_ConfigChannel+0x930>
 8007f20:	4a47      	ldr	r2, [pc, #284]	@ (8008040 <HAL_ADC_ConfigChannel+0xa4c>)
 8007f22:	e000      	b.n	8007f26 <HAL_ADC_ConfigChannel+0x932>
 8007f24:	4a41      	ldr	r2, [pc, #260]	@ (800802c <HAL_ADC_ConfigChannel+0xa38>)
 8007f26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4610      	mov	r0, r2
 8007f32:	f7fe ff24 	bl	8006d7e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007f36:	4b43      	ldr	r3, [pc, #268]	@ (8008044 <HAL_ADC_ConfigChannel+0xa50>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	099b      	lsrs	r3, r3, #6
 8007f3c:	4a42      	ldr	r2, [pc, #264]	@ (8008048 <HAL_ADC_ConfigChannel+0xa54>)
 8007f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f42:	099b      	lsrs	r3, r3, #6
 8007f44:	3301      	adds	r3, #1
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007f4a:	e002      	b.n	8007f52 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1f9      	bne.n	8007f4c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007f58:	e05e      	b.n	8008018 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800804c <HAL_ADC_ConfigChannel+0xa58>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d120      	bne.n	8007fa6 <HAL_ADC_ConfigChannel+0x9b2>
 8007f64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d11a      	bne.n	8007fa6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a30      	ldr	r2, [pc, #192]	@ (8008038 <HAL_ADC_ConfigChannel+0xa44>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d14e      	bne.n	8008018 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8008030 <HAL_ADC_ConfigChannel+0xa3c>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d004      	beq.n	8007f8e <HAL_ADC_ConfigChannel+0x99a>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a2a      	ldr	r2, [pc, #168]	@ (8008034 <HAL_ADC_ConfigChannel+0xa40>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d101      	bne.n	8007f92 <HAL_ADC_ConfigChannel+0x99e>
 8007f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8008040 <HAL_ADC_ConfigChannel+0xa4c>)
 8007f90:	e000      	b.n	8007f94 <HAL_ADC_ConfigChannel+0x9a0>
 8007f92:	4a26      	ldr	r2, [pc, #152]	@ (800802c <HAL_ADC_ConfigChannel+0xa38>)
 8007f94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	f7fe feed 	bl	8006d7e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007fa4:	e038      	b.n	8008018 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a29      	ldr	r2, [pc, #164]	@ (8008050 <HAL_ADC_ConfigChannel+0xa5c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d133      	bne.n	8008018 <HAL_ADC_ConfigChannel+0xa24>
 8007fb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d12d      	bne.n	8008018 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8008038 <HAL_ADC_ConfigChannel+0xa44>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d128      	bne.n	8008018 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a19      	ldr	r2, [pc, #100]	@ (8008030 <HAL_ADC_ConfigChannel+0xa3c>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d004      	beq.n	8007fda <HAL_ADC_ConfigChannel+0x9e6>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a17      	ldr	r2, [pc, #92]	@ (8008034 <HAL_ADC_ConfigChannel+0xa40>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d101      	bne.n	8007fde <HAL_ADC_ConfigChannel+0x9ea>
 8007fda:	4a19      	ldr	r2, [pc, #100]	@ (8008040 <HAL_ADC_ConfigChannel+0xa4c>)
 8007fdc:	e000      	b.n	8007fe0 <HAL_ADC_ConfigChannel+0x9ec>
 8007fde:	4a13      	ldr	r2, [pc, #76]	@ (800802c <HAL_ADC_ConfigChannel+0xa38>)
 8007fe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fe4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4610      	mov	r0, r2
 8007fec:	f7fe fec7 	bl	8006d7e <LL_ADC_SetCommonPathInternalCh>
 8007ff0:	e012      	b.n	8008018 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ff6:	f043 0220 	orr.w	r2, r3, #32
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8008004:	e008      	b.n	8008018 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800800a:	f043 0220 	orr.w	r2, r3, #32
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008020:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8008024:	4618      	mov	r0, r3
 8008026:	37e4      	adds	r7, #228	@ 0xe4
 8008028:	46bd      	mov	sp, r7
 800802a:	bd90      	pop	{r4, r7, pc}
 800802c:	58026300 	.word	0x58026300
 8008030:	40022000 	.word	0x40022000
 8008034:	40022100 	.word	0x40022100
 8008038:	58026000 	.word	0x58026000
 800803c:	c7520000 	.word	0xc7520000
 8008040:	40022300 	.word	0x40022300
 8008044:	24000000 	.word	0x24000000
 8008048:	053e2d63 	.word	0x053e2d63
 800804c:	c3210000 	.word	0xc3210000
 8008050:	cb840000 	.word	0xcb840000

08008054 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a6c      	ldr	r2, [pc, #432]	@ (8008214 <ADC_ConfigureBoostMode+0x1c0>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d004      	beq.n	8008070 <ADC_ConfigureBoostMode+0x1c>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a6b      	ldr	r2, [pc, #428]	@ (8008218 <ADC_ConfigureBoostMode+0x1c4>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d109      	bne.n	8008084 <ADC_ConfigureBoostMode+0x30>
 8008070:	4b6a      	ldr	r3, [pc, #424]	@ (800821c <ADC_ConfigureBoostMode+0x1c8>)
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008078:	2b00      	cmp	r3, #0
 800807a:	bf14      	ite	ne
 800807c:	2301      	movne	r3, #1
 800807e:	2300      	moveq	r3, #0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	e008      	b.n	8008096 <ADC_ConfigureBoostMode+0x42>
 8008084:	4b66      	ldr	r3, [pc, #408]	@ (8008220 <ADC_ConfigureBoostMode+0x1cc>)
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800808c:	2b00      	cmp	r3, #0
 800808e:	bf14      	ite	ne
 8008090:	2301      	movne	r3, #1
 8008092:	2300      	moveq	r3, #0
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d01c      	beq.n	80080d4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800809a:	f005 fbff 	bl	800d89c <HAL_RCC_GetHCLKFreq>
 800809e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080a8:	d010      	beq.n	80080cc <ADC_ConfigureBoostMode+0x78>
 80080aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080ae:	d873      	bhi.n	8008198 <ADC_ConfigureBoostMode+0x144>
 80080b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b4:	d002      	beq.n	80080bc <ADC_ConfigureBoostMode+0x68>
 80080b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080ba:	d16d      	bne.n	8008198 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	0c1b      	lsrs	r3, r3, #16
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c8:	60fb      	str	r3, [r7, #12]
        break;
 80080ca:	e068      	b.n	800819e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	089b      	lsrs	r3, r3, #2
 80080d0:	60fb      	str	r3, [r7, #12]
        break;
 80080d2:	e064      	b.n	800819e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80080d4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80080d8:	f04f 0100 	mov.w	r1, #0
 80080dc:	f006 fdda 	bl	800ec94 <HAL_RCCEx_GetPeriphCLKFreq>
 80080e0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80080ea:	d051      	beq.n	8008190 <ADC_ConfigureBoostMode+0x13c>
 80080ec:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80080f0:	d854      	bhi.n	800819c <ADC_ConfigureBoostMode+0x148>
 80080f2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80080f6:	d047      	beq.n	8008188 <ADC_ConfigureBoostMode+0x134>
 80080f8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80080fc:	d84e      	bhi.n	800819c <ADC_ConfigureBoostMode+0x148>
 80080fe:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8008102:	d03d      	beq.n	8008180 <ADC_ConfigureBoostMode+0x12c>
 8008104:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8008108:	d848      	bhi.n	800819c <ADC_ConfigureBoostMode+0x148>
 800810a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800810e:	d033      	beq.n	8008178 <ADC_ConfigureBoostMode+0x124>
 8008110:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008114:	d842      	bhi.n	800819c <ADC_ConfigureBoostMode+0x148>
 8008116:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800811a:	d029      	beq.n	8008170 <ADC_ConfigureBoostMode+0x11c>
 800811c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8008120:	d83c      	bhi.n	800819c <ADC_ConfigureBoostMode+0x148>
 8008122:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008126:	d01a      	beq.n	800815e <ADC_ConfigureBoostMode+0x10a>
 8008128:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800812c:	d836      	bhi.n	800819c <ADC_ConfigureBoostMode+0x148>
 800812e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008132:	d014      	beq.n	800815e <ADC_ConfigureBoostMode+0x10a>
 8008134:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008138:	d830      	bhi.n	800819c <ADC_ConfigureBoostMode+0x148>
 800813a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800813e:	d00e      	beq.n	800815e <ADC_ConfigureBoostMode+0x10a>
 8008140:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008144:	d82a      	bhi.n	800819c <ADC_ConfigureBoostMode+0x148>
 8008146:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800814a:	d008      	beq.n	800815e <ADC_ConfigureBoostMode+0x10a>
 800814c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008150:	d824      	bhi.n	800819c <ADC_ConfigureBoostMode+0x148>
 8008152:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008156:	d002      	beq.n	800815e <ADC_ConfigureBoostMode+0x10a>
 8008158:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800815c:	d11e      	bne.n	800819c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	0c9b      	lsrs	r3, r3, #18
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	fbb2 f3f3 	udiv	r3, r2, r3
 800816c:	60fb      	str	r3, [r7, #12]
        break;
 800816e:	e016      	b.n	800819e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	091b      	lsrs	r3, r3, #4
 8008174:	60fb      	str	r3, [r7, #12]
        break;
 8008176:	e012      	b.n	800819e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	095b      	lsrs	r3, r3, #5
 800817c:	60fb      	str	r3, [r7, #12]
        break;
 800817e:	e00e      	b.n	800819e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	099b      	lsrs	r3, r3, #6
 8008184:	60fb      	str	r3, [r7, #12]
        break;
 8008186:	e00a      	b.n	800819e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	09db      	lsrs	r3, r3, #7
 800818c:	60fb      	str	r3, [r7, #12]
        break;
 800818e:	e006      	b.n	800819e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	0a1b      	lsrs	r3, r3, #8
 8008194:	60fb      	str	r3, [r7, #12]
        break;
 8008196:	e002      	b.n	800819e <ADC_ConfigureBoostMode+0x14a>
        break;
 8008198:	bf00      	nop
 800819a:	e000      	b.n	800819e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800819c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	085b      	lsrs	r3, r3, #1
 80081a2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4a1f      	ldr	r2, [pc, #124]	@ (8008224 <ADC_ConfigureBoostMode+0x1d0>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d808      	bhi.n	80081be <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80081ba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80081bc:	e025      	b.n	800820a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4a19      	ldr	r2, [pc, #100]	@ (8008228 <ADC_ConfigureBoostMode+0x1d4>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d80a      	bhi.n	80081dc <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081d8:	609a      	str	r2, [r3, #8]
}
 80081da:	e016      	b.n	800820a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4a13      	ldr	r2, [pc, #76]	@ (800822c <ADC_ConfigureBoostMode+0x1d8>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d80a      	bhi.n	80081fa <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081f6:	609a      	str	r2, [r3, #8]
}
 80081f8:	e007      	b.n	800820a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008208:	609a      	str	r2, [r3, #8]
}
 800820a:	bf00      	nop
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	40022000 	.word	0x40022000
 8008218:	40022100 	.word	0x40022100
 800821c:	40022300 	.word	0x40022300
 8008220:	58026300 	.word	0x58026300
 8008224:	005f5e10 	.word	0x005f5e10
 8008228:	00bebc20 	.word	0x00bebc20
 800822c:	017d7840 	.word	0x017d7840

08008230 <LL_ADC_IsEnabled>:
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b01      	cmp	r3, #1
 8008242:	d101      	bne.n	8008248 <LL_ADC_IsEnabled+0x18>
 8008244:	2301      	movs	r3, #1
 8008246:	e000      	b.n	800824a <LL_ADC_IsEnabled+0x1a>
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <LL_ADC_REG_IsConversionOngoing>:
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f003 0304 	and.w	r3, r3, #4
 8008266:	2b04      	cmp	r3, #4
 8008268:	d101      	bne.n	800826e <LL_ADC_REG_IsConversionOngoing+0x18>
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800827c:	b590      	push	{r4, r7, lr}
 800827e:	b0a3      	sub	sp, #140	@ 0x8c
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008292:	2b01      	cmp	r3, #1
 8008294:	d101      	bne.n	800829a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008296:	2302      	movs	r3, #2
 8008298:	e0c1      	b.n	800841e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80082a2:	2300      	movs	r3, #0
 80082a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a5e      	ldr	r2, [pc, #376]	@ (8008428 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d102      	bne.n	80082ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80082b4:	4b5d      	ldr	r3, [pc, #372]	@ (800842c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	e001      	b.n	80082be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80082ba:	2300      	movs	r3, #0
 80082bc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10b      	bne.n	80082dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082c8:	f043 0220 	orr.w	r2, r3, #32
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e0a0      	b.n	800841e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff ffb9 	bl	8008256 <LL_ADC_REG_IsConversionOngoing>
 80082e4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff ffb2 	bl	8008256 <LL_ADC_REG_IsConversionOngoing>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f040 8081 	bne.w	80083fc <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80082fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d17c      	bne.n	80083fc <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a48      	ldr	r2, [pc, #288]	@ (8008428 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d004      	beq.n	8008316 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a46      	ldr	r2, [pc, #280]	@ (800842c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d101      	bne.n	800831a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8008316:	4b46      	ldr	r3, [pc, #280]	@ (8008430 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008318:	e000      	b.n	800831c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800831a:	4b46      	ldr	r3, [pc, #280]	@ (8008434 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800831c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d039      	beq.n	800839a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008326:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	431a      	orrs	r2, r3
 8008334:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008336:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a3a      	ldr	r2, [pc, #232]	@ (8008428 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d004      	beq.n	800834c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a39      	ldr	r2, [pc, #228]	@ (800842c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d10e      	bne.n	800836a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800834c:	4836      	ldr	r0, [pc, #216]	@ (8008428 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800834e:	f7ff ff6f 	bl	8008230 <LL_ADC_IsEnabled>
 8008352:	4604      	mov	r4, r0
 8008354:	4835      	ldr	r0, [pc, #212]	@ (800842c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008356:	f7ff ff6b 	bl	8008230 <LL_ADC_IsEnabled>
 800835a:	4603      	mov	r3, r0
 800835c:	4323      	orrs	r3, r4
 800835e:	2b00      	cmp	r3, #0
 8008360:	bf0c      	ite	eq
 8008362:	2301      	moveq	r3, #1
 8008364:	2300      	movne	r3, #0
 8008366:	b2db      	uxtb	r3, r3
 8008368:	e008      	b.n	800837c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800836a:	4833      	ldr	r0, [pc, #204]	@ (8008438 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800836c:	f7ff ff60 	bl	8008230 <LL_ADC_IsEnabled>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	bf0c      	ite	eq
 8008376:	2301      	moveq	r3, #1
 8008378:	2300      	movne	r3, #0
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d047      	beq.n	8008410 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008380:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	4b2d      	ldr	r3, [pc, #180]	@ (800843c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008386:	4013      	ands	r3, r2
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	6811      	ldr	r1, [r2, #0]
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	6892      	ldr	r2, [r2, #8]
 8008390:	430a      	orrs	r2, r1
 8008392:	431a      	orrs	r2, r3
 8008394:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008396:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008398:	e03a      	b.n	8008410 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800839a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80083a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083a4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008428 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d004      	beq.n	80083ba <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a1d      	ldr	r2, [pc, #116]	@ (800842c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d10e      	bne.n	80083d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80083ba:	481b      	ldr	r0, [pc, #108]	@ (8008428 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80083bc:	f7ff ff38 	bl	8008230 <LL_ADC_IsEnabled>
 80083c0:	4604      	mov	r4, r0
 80083c2:	481a      	ldr	r0, [pc, #104]	@ (800842c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80083c4:	f7ff ff34 	bl	8008230 <LL_ADC_IsEnabled>
 80083c8:	4603      	mov	r3, r0
 80083ca:	4323      	orrs	r3, r4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	bf0c      	ite	eq
 80083d0:	2301      	moveq	r3, #1
 80083d2:	2300      	movne	r3, #0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	e008      	b.n	80083ea <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80083d8:	4817      	ldr	r0, [pc, #92]	@ (8008438 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80083da:	f7ff ff29 	bl	8008230 <LL_ADC_IsEnabled>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	bf0c      	ite	eq
 80083e4:	2301      	moveq	r3, #1
 80083e6:	2300      	movne	r3, #0
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d010      	beq.n	8008410 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80083ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083f0:	689a      	ldr	r2, [r3, #8]
 80083f2:	4b12      	ldr	r3, [pc, #72]	@ (800843c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80083f4:	4013      	ands	r3, r2
 80083f6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80083f8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80083fa:	e009      	b.n	8008410 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008400:	f043 0220 	orr.w	r2, r3, #32
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800840e:	e000      	b.n	8008412 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008410:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800841a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800841e:	4618      	mov	r0, r3
 8008420:	378c      	adds	r7, #140	@ 0x8c
 8008422:	46bd      	mov	sp, r7
 8008424:	bd90      	pop	{r4, r7, pc}
 8008426:	bf00      	nop
 8008428:	40022000 	.word	0x40022000
 800842c:	40022100 	.word	0x40022100
 8008430:	40022300 	.word	0x40022300
 8008434:	58026300 	.word	0x58026300
 8008438:	58026000 	.word	0x58026000
 800843c:	fffff0e0 	.word	0xfffff0e0

08008440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f003 0307 	and.w	r3, r3, #7
 800844e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008450:	4b0b      	ldr	r3, [pc, #44]	@ (8008480 <__NVIC_SetPriorityGrouping+0x40>)
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800845c:	4013      	ands	r3, r2
 800845e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008468:	4b06      	ldr	r3, [pc, #24]	@ (8008484 <__NVIC_SetPriorityGrouping+0x44>)
 800846a:	4313      	orrs	r3, r2
 800846c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800846e:	4a04      	ldr	r2, [pc, #16]	@ (8008480 <__NVIC_SetPriorityGrouping+0x40>)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	60d3      	str	r3, [r2, #12]
}
 8008474:	bf00      	nop
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	e000ed00 	.word	0xe000ed00
 8008484:	05fa0000 	.word	0x05fa0000

08008488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800848c:	4b04      	ldr	r3, [pc, #16]	@ (80084a0 <__NVIC_GetPriorityGrouping+0x18>)
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	0a1b      	lsrs	r3, r3, #8
 8008492:	f003 0307 	and.w	r3, r3, #7
}
 8008496:	4618      	mov	r0, r3
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	e000ed00 	.word	0xe000ed00

080084a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	4603      	mov	r3, r0
 80084ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80084ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	db0b      	blt.n	80084ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80084b6:	88fb      	ldrh	r3, [r7, #6]
 80084b8:	f003 021f 	and.w	r2, r3, #31
 80084bc:	4907      	ldr	r1, [pc, #28]	@ (80084dc <__NVIC_EnableIRQ+0x38>)
 80084be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084c2:	095b      	lsrs	r3, r3, #5
 80084c4:	2001      	movs	r0, #1
 80084c6:	fa00 f202 	lsl.w	r2, r0, r2
 80084ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80084ce:	bf00      	nop
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	e000e100 	.word	0xe000e100

080084e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	4603      	mov	r3, r0
 80084e8:	6039      	str	r1, [r7, #0]
 80084ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80084ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	db0a      	blt.n	800850a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	490c      	ldr	r1, [pc, #48]	@ (800852c <__NVIC_SetPriority+0x4c>)
 80084fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084fe:	0112      	lsls	r2, r2, #4
 8008500:	b2d2      	uxtb	r2, r2
 8008502:	440b      	add	r3, r1
 8008504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008508:	e00a      	b.n	8008520 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	b2da      	uxtb	r2, r3
 800850e:	4908      	ldr	r1, [pc, #32]	@ (8008530 <__NVIC_SetPriority+0x50>)
 8008510:	88fb      	ldrh	r3, [r7, #6]
 8008512:	f003 030f 	and.w	r3, r3, #15
 8008516:	3b04      	subs	r3, #4
 8008518:	0112      	lsls	r2, r2, #4
 800851a:	b2d2      	uxtb	r2, r2
 800851c:	440b      	add	r3, r1
 800851e:	761a      	strb	r2, [r3, #24]
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	e000e100 	.word	0xe000e100
 8008530:	e000ed00 	.word	0xe000ed00

08008534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008534:	b480      	push	{r7}
 8008536:	b089      	sub	sp, #36	@ 0x24
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	f1c3 0307 	rsb	r3, r3, #7
 800854e:	2b04      	cmp	r3, #4
 8008550:	bf28      	it	cs
 8008552:	2304      	movcs	r3, #4
 8008554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	3304      	adds	r3, #4
 800855a:	2b06      	cmp	r3, #6
 800855c:	d902      	bls.n	8008564 <NVIC_EncodePriority+0x30>
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	3b03      	subs	r3, #3
 8008562:	e000      	b.n	8008566 <NVIC_EncodePriority+0x32>
 8008564:	2300      	movs	r3, #0
 8008566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008568:	f04f 32ff 	mov.w	r2, #4294967295
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	fa02 f303 	lsl.w	r3, r2, r3
 8008572:	43da      	mvns	r2, r3
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	401a      	ands	r2, r3
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800857c:	f04f 31ff 	mov.w	r1, #4294967295
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	fa01 f303 	lsl.w	r3, r1, r3
 8008586:	43d9      	mvns	r1, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800858c:	4313      	orrs	r3, r2
         );
}
 800858e:	4618      	mov	r0, r3
 8008590:	3724      	adds	r7, #36	@ 0x24
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
	...

0800859c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085ac:	d301      	bcc.n	80085b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80085ae:	2301      	movs	r3, #1
 80085b0:	e00f      	b.n	80085d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80085b2:	4a0a      	ldr	r2, [pc, #40]	@ (80085dc <SysTick_Config+0x40>)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80085ba:	210f      	movs	r1, #15
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295
 80085c0:	f7ff ff8e 	bl	80084e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80085c4:	4b05      	ldr	r3, [pc, #20]	@ (80085dc <SysTick_Config+0x40>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80085ca:	4b04      	ldr	r3, [pc, #16]	@ (80085dc <SysTick_Config+0x40>)
 80085cc:	2207      	movs	r2, #7
 80085ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	e000e010 	.word	0xe000e010

080085e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7ff ff29 	bl	8008440 <__NVIC_SetPriorityGrouping>
}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b086      	sub	sp, #24
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	4603      	mov	r3, r0
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008604:	f7ff ff40 	bl	8008488 <__NVIC_GetPriorityGrouping>
 8008608:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	68b9      	ldr	r1, [r7, #8]
 800860e:	6978      	ldr	r0, [r7, #20]
 8008610:	f7ff ff90 	bl	8008534 <NVIC_EncodePriority>
 8008614:	4602      	mov	r2, r0
 8008616:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800861a:	4611      	mov	r1, r2
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff ff5f 	bl	80084e0 <__NVIC_SetPriority>
}
 8008622:	bf00      	nop
 8008624:	3718      	adds	r7, #24
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	4603      	mov	r3, r0
 8008632:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff ff33 	bl	80084a4 <__NVIC_EnableIRQ>
}
 800863e:	bf00      	nop
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7ff ffa4 	bl	800859c <SysTick_Config>
 8008654:	4603      	mov	r3, r0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8008660:	b480      	push	{r7}
 8008662:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8008664:	f3bf 8f5f 	dmb	sy
}
 8008668:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800866a:	4b07      	ldr	r3, [pc, #28]	@ (8008688 <HAL_MPU_Disable+0x28>)
 800866c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800866e:	4a06      	ldr	r2, [pc, #24]	@ (8008688 <HAL_MPU_Disable+0x28>)
 8008670:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008674:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008676:	4b05      	ldr	r3, [pc, #20]	@ (800868c <HAL_MPU_Disable+0x2c>)
 8008678:	2200      	movs	r2, #0
 800867a:	605a      	str	r2, [r3, #4]
}
 800867c:	bf00      	nop
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	e000ed00 	.word	0xe000ed00
 800868c:	e000ed90 	.word	0xe000ed90

08008690 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008698:	4a0b      	ldr	r2, [pc, #44]	@ (80086c8 <HAL_MPU_Enable+0x38>)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f043 0301 	orr.w	r3, r3, #1
 80086a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80086a2:	4b0a      	ldr	r3, [pc, #40]	@ (80086cc <HAL_MPU_Enable+0x3c>)
 80086a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a6:	4a09      	ldr	r2, [pc, #36]	@ (80086cc <HAL_MPU_Enable+0x3c>)
 80086a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80086ae:	f3bf 8f4f 	dsb	sy
}
 80086b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80086b4:	f3bf 8f6f 	isb	sy
}
 80086b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80086ba:	bf00      	nop
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	e000ed90 	.word	0xe000ed90
 80086cc:	e000ed00 	.word	0xe000ed00

080086d0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	785a      	ldrb	r2, [r3, #1]
 80086dc:	4b1b      	ldr	r3, [pc, #108]	@ (800874c <HAL_MPU_ConfigRegion+0x7c>)
 80086de:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80086e0:	4b1a      	ldr	r3, [pc, #104]	@ (800874c <HAL_MPU_ConfigRegion+0x7c>)
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	4a19      	ldr	r2, [pc, #100]	@ (800874c <HAL_MPU_ConfigRegion+0x7c>)
 80086e6:	f023 0301 	bic.w	r3, r3, #1
 80086ea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80086ec:	4a17      	ldr	r2, [pc, #92]	@ (800874c <HAL_MPU_ConfigRegion+0x7c>)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	7b1b      	ldrb	r3, [r3, #12]
 80086f8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7adb      	ldrb	r3, [r3, #11]
 80086fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008700:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	7a9b      	ldrb	r3, [r3, #10]
 8008706:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008708:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7b5b      	ldrb	r3, [r3, #13]
 800870e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008710:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	7b9b      	ldrb	r3, [r3, #14]
 8008716:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008718:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	7bdb      	ldrb	r3, [r3, #15]
 800871e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008720:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	7a5b      	ldrb	r3, [r3, #9]
 8008726:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008728:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	7a1b      	ldrb	r3, [r3, #8]
 800872e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008730:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	7812      	ldrb	r2, [r2, #0]
 8008736:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008738:	4a04      	ldr	r2, [pc, #16]	@ (800874c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800873a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800873c:	6113      	str	r3, [r2, #16]
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	e000ed90 	.word	0xe000ed90

08008750 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d101      	bne.n	8008762 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e014      	b.n	800878c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	791b      	ldrb	r3, [r3, #4]
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	d105      	bne.n	8008778 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7f9 fe20 	bl	80023b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2202      	movs	r2, #2
 800877c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d101      	bne.n	80087ac <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e0a2      	b.n	80088f2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	795b      	ldrb	r3, [r3, #5]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d101      	bne.n	80087b8 <HAL_DAC_Start_DMA+0x24>
 80087b4:	2302      	movs	r3, #2
 80087b6:	e09c      	b.n	80088f2 <HAL_DAC_Start_DMA+0x15e>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2201      	movs	r2, #1
 80087bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2202      	movs	r2, #2
 80087c2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d129      	bne.n	800881e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	4a4b      	ldr	r2, [pc, #300]	@ (80088fc <HAL_DAC_Start_DMA+0x168>)
 80087d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	4a4a      	ldr	r2, [pc, #296]	@ (8008900 <HAL_DAC_Start_DMA+0x16c>)
 80087d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	4a49      	ldr	r2, [pc, #292]	@ (8008904 <HAL_DAC_Start_DMA+0x170>)
 80087e0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80087f0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <HAL_DAC_Start_DMA+0x6c>
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	d005      	beq.n	800880a <HAL_DAC_Start_DMA+0x76>
 80087fe:	e009      	b.n	8008814 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3308      	adds	r3, #8
 8008806:	613b      	str	r3, [r7, #16]
        break;
 8008808:	e033      	b.n	8008872 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	330c      	adds	r3, #12
 8008810:	613b      	str	r3, [r7, #16]
        break;
 8008812:	e02e      	b.n	8008872 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3310      	adds	r3, #16
 800881a:	613b      	str	r3, [r7, #16]
        break;
 800881c:	e029      	b.n	8008872 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	4a39      	ldr	r2, [pc, #228]	@ (8008908 <HAL_DAC_Start_DMA+0x174>)
 8008824:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	4a38      	ldr	r2, [pc, #224]	@ (800890c <HAL_DAC_Start_DMA+0x178>)
 800882c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	4a37      	ldr	r2, [pc, #220]	@ (8008910 <HAL_DAC_Start_DMA+0x17c>)
 8008834:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008844:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <HAL_DAC_Start_DMA+0xc0>
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	2b04      	cmp	r3, #4
 8008850:	d005      	beq.n	800885e <HAL_DAC_Start_DMA+0xca>
 8008852:	e009      	b.n	8008868 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3314      	adds	r3, #20
 800885a:	613b      	str	r3, [r7, #16]
        break;
 800885c:	e009      	b.n	8008872 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3318      	adds	r3, #24
 8008864:	613b      	str	r3, [r7, #16]
        break;
 8008866:	e004      	b.n	8008872 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	331c      	adds	r3, #28
 800886e:	613b      	str	r3, [r7, #16]
        break;
 8008870:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d111      	bne.n	800889c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008886:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6898      	ldr	r0, [r3, #8]
 800888c:	6879      	ldr	r1, [r7, #4]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	f000 fd6d 	bl	8009370 <HAL_DMA_Start_IT>
 8008896:	4603      	mov	r3, r0
 8008898:	75fb      	strb	r3, [r7, #23]
 800889a:	e010      	b.n	80088be <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80088aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	68d8      	ldr	r0, [r3, #12]
 80088b0:	6879      	ldr	r1, [r7, #4]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	f000 fd5b 	bl	8009370 <HAL_DMA_Start_IT>
 80088ba:	4603      	mov	r3, r0
 80088bc:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10c      	bne.n	80088e4 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6819      	ldr	r1, [r3, #0]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	f003 0310 	and.w	r3, r3, #16
 80088d6:	2201      	movs	r2, #1
 80088d8:	409a      	lsls	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	e005      	b.n	80088f0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	f043 0204 	orr.w	r2, r3, #4
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3718      	adds	r7, #24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	08008bad 	.word	0x08008bad
 8008900:	08008bcf 	.word	0x08008bcf
 8008904:	08008beb 	.word	0x08008beb
 8008908:	08008c55 	.word	0x08008c55
 800890c:	08008c77 	.word	0x08008c77
 8008910:	08008c93 	.word	0x08008c93

08008914 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b08a      	sub	sp, #40	@ 0x28
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <HAL_DAC_ConfigChannel+0x1e>
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e12a      	b.n	8008ba0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	795b      	ldrb	r3, [r3, #5]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d101      	bne.n	8008956 <HAL_DAC_ConfigChannel+0x2e>
 8008952:	2302      	movs	r3, #2
 8008954:	e124      	b.n	8008ba0 <HAL_DAC_ConfigChannel+0x278>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2202      	movs	r2, #2
 8008960:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b04      	cmp	r3, #4
 8008968:	d17a      	bne.n	8008a60 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800896a:	f7fe f9c5 	bl	8006cf8 <HAL_GetTick>
 800896e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d13d      	bne.n	80089f2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008976:	e018      	b.n	80089aa <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008978:	f7fe f9be 	bl	8006cf8 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	2b01      	cmp	r3, #1
 8008984:	d911      	bls.n	80089aa <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800898c:	4b86      	ldr	r3, [pc, #536]	@ (8008ba8 <HAL_DAC_ConfigChannel+0x280>)
 800898e:	4013      	ands	r3, r2
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00a      	beq.n	80089aa <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	f043 0208 	orr.w	r2, r3, #8
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2203      	movs	r2, #3
 80089a4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e0fa      	b.n	8008ba0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089b0:	4b7d      	ldr	r3, [pc, #500]	@ (8008ba8 <HAL_DAC_ConfigChannel+0x280>)
 80089b2:	4013      	ands	r3, r2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1df      	bne.n	8008978 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	6992      	ldr	r2, [r2, #24]
 80089c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80089c2:	e020      	b.n	8008a06 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80089c4:	f7fe f998 	bl	8006cf8 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d90f      	bls.n	80089f2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089d8:	2b00      	cmp	r3, #0
 80089da:	da0a      	bge.n	80089f2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	f043 0208 	orr.w	r2, r3, #8
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2203      	movs	r2, #3
 80089ec:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e0d6      	b.n	8008ba0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	dbe3      	blt.n	80089c4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	6992      	ldr	r2, [r2, #24]
 8008a04:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f003 0310 	and.w	r3, r3, #16
 8008a12:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8008a16:	fa01 f303 	lsl.w	r3, r1, r3
 8008a1a:	43db      	mvns	r3, r3
 8008a1c:	ea02 0103 	and.w	r1, r2, r3
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	69da      	ldr	r2, [r3, #28]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f003 0310 	and.w	r3, r3, #16
 8008a2a:	409a      	lsls	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f003 0310 	and.w	r3, r3, #16
 8008a40:	21ff      	movs	r1, #255	@ 0xff
 8008a42:	fa01 f303 	lsl.w	r3, r1, r3
 8008a46:	43db      	mvns	r3, r3
 8008a48:	ea02 0103 	and.w	r1, r2, r3
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	6a1a      	ldr	r2, [r3, #32]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f003 0310 	and.w	r3, r3, #16
 8008a56:	409a      	lsls	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d11d      	bne.n	8008aa4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a6e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f003 0310 	and.w	r3, r3, #16
 8008a76:	221f      	movs	r2, #31
 8008a78:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7c:	43db      	mvns	r3, r3
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	4013      	ands	r3, r2
 8008a82:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f003 0310 	and.w	r3, r3, #16
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	fa02 f303 	lsl.w	r3, r2, r3
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aaa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f003 0310 	and.w	r3, r3, #16
 8008ab2:	2207      	movs	r2, #7
 8008ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab8:	43db      	mvns	r3, r3
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	4013      	ands	r3, r2
 8008abe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d102      	bne.n	8008ace <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8008acc:	e00f      	b.n	8008aee <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d102      	bne.n	8008adc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ada:	e008      	b.n	8008aee <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d102      	bne.n	8008aea <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ae8:	e001      	b.n	8008aee <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008aea:	2300      	movs	r3, #0
 8008aec:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008afa:	4313      	orrs	r3, r2
 8008afc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f003 0310 	and.w	r3, r3, #16
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6819      	ldr	r1, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f003 0310 	and.w	r3, r3, #16
 8008b24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008b28:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2c:	43da      	mvns	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	400a      	ands	r2, r1
 8008b34:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f003 0310 	and.w	r3, r3, #16
 8008b44:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8008b48:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4c:	43db      	mvns	r3, r3
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	4013      	ands	r3, r2
 8008b52:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	fa02 f303 	lsl.w	r3, r2, r3
 8008b66:	69ba      	ldr	r2, [r7, #24]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6819      	ldr	r1, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f003 0310 	and.w	r3, r3, #16
 8008b80:	22c0      	movs	r2, #192	@ 0xc0
 8008b82:	fa02 f303 	lsl.w	r3, r2, r3
 8008b86:	43da      	mvns	r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	400a      	ands	r2, r1
 8008b8e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2201      	movs	r2, #1
 8008b94:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3728      	adds	r7, #40	@ 0x28
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	20008000 	.word	0x20008000

08008bac <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f7f8 fb42 	bl	8001244 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	711a      	strb	r2, [r3, #4]
}
 8008bc6:	bf00      	nop
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bda:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f7f8 fb23 	bl	8001228 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008be2:	bf00      	nop
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b084      	sub	sp, #16
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	f043 0204 	orr.w	r2, r3, #4
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f7ff fe85 	bl	8008914 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	711a      	strb	r2, [r3, #4]
}
 8008c10:	bf00      	nop
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c60:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f7ff ffd8 	bl	8008c18 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	711a      	strb	r2, [r3, #4]
}
 8008c6e:	bf00      	nop
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c82:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f7ff ffd1 	bl	8008c2c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008c8a:	bf00      	nop
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	f043 0204 	orr.w	r2, r3, #4
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f7ff ffc7 	bl	8008c40 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	711a      	strb	r2, [r3, #4]
}
 8008cb8:	bf00      	nop
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008cc8:	f7fe f816 	bl	8006cf8 <HAL_GetTick>
 8008ccc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e312      	b.n	80092fe <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a66      	ldr	r2, [pc, #408]	@ (8008e78 <HAL_DMA_Init+0x1b8>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d04a      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a65      	ldr	r2, [pc, #404]	@ (8008e7c <HAL_DMA_Init+0x1bc>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d045      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a63      	ldr	r2, [pc, #396]	@ (8008e80 <HAL_DMA_Init+0x1c0>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d040      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a62      	ldr	r2, [pc, #392]	@ (8008e84 <HAL_DMA_Init+0x1c4>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d03b      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a60      	ldr	r2, [pc, #384]	@ (8008e88 <HAL_DMA_Init+0x1c8>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d036      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a5f      	ldr	r2, [pc, #380]	@ (8008e8c <HAL_DMA_Init+0x1cc>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d031      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a5d      	ldr	r2, [pc, #372]	@ (8008e90 <HAL_DMA_Init+0x1d0>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d02c      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a5c      	ldr	r2, [pc, #368]	@ (8008e94 <HAL_DMA_Init+0x1d4>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d027      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a5a      	ldr	r2, [pc, #360]	@ (8008e98 <HAL_DMA_Init+0x1d8>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d022      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a59      	ldr	r2, [pc, #356]	@ (8008e9c <HAL_DMA_Init+0x1dc>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d01d      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a57      	ldr	r2, [pc, #348]	@ (8008ea0 <HAL_DMA_Init+0x1e0>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d018      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a56      	ldr	r2, [pc, #344]	@ (8008ea4 <HAL_DMA_Init+0x1e4>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d013      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a54      	ldr	r2, [pc, #336]	@ (8008ea8 <HAL_DMA_Init+0x1e8>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00e      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a53      	ldr	r2, [pc, #332]	@ (8008eac <HAL_DMA_Init+0x1ec>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d009      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a51      	ldr	r2, [pc, #324]	@ (8008eb0 <HAL_DMA_Init+0x1f0>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d004      	beq.n	8008d78 <HAL_DMA_Init+0xb8>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a50      	ldr	r2, [pc, #320]	@ (8008eb4 <HAL_DMA_Init+0x1f4>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d101      	bne.n	8008d7c <HAL_DMA_Init+0xbc>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e000      	b.n	8008d7e <HAL_DMA_Init+0xbe>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 813c 	beq.w	8008ffc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2202      	movs	r2, #2
 8008d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a37      	ldr	r2, [pc, #220]	@ (8008e78 <HAL_DMA_Init+0x1b8>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d04a      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a36      	ldr	r2, [pc, #216]	@ (8008e7c <HAL_DMA_Init+0x1bc>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d045      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a34      	ldr	r2, [pc, #208]	@ (8008e80 <HAL_DMA_Init+0x1c0>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d040      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a33      	ldr	r2, [pc, #204]	@ (8008e84 <HAL_DMA_Init+0x1c4>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d03b      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a31      	ldr	r2, [pc, #196]	@ (8008e88 <HAL_DMA_Init+0x1c8>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d036      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a30      	ldr	r2, [pc, #192]	@ (8008e8c <HAL_DMA_Init+0x1cc>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d031      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a2e      	ldr	r2, [pc, #184]	@ (8008e90 <HAL_DMA_Init+0x1d0>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d02c      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a2d      	ldr	r2, [pc, #180]	@ (8008e94 <HAL_DMA_Init+0x1d4>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d027      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a2b      	ldr	r2, [pc, #172]	@ (8008e98 <HAL_DMA_Init+0x1d8>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d022      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a2a      	ldr	r2, [pc, #168]	@ (8008e9c <HAL_DMA_Init+0x1dc>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d01d      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a28      	ldr	r2, [pc, #160]	@ (8008ea0 <HAL_DMA_Init+0x1e0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d018      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a27      	ldr	r2, [pc, #156]	@ (8008ea4 <HAL_DMA_Init+0x1e4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d013      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a25      	ldr	r2, [pc, #148]	@ (8008ea8 <HAL_DMA_Init+0x1e8>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d00e      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a24      	ldr	r2, [pc, #144]	@ (8008eac <HAL_DMA_Init+0x1ec>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d009      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a22      	ldr	r2, [pc, #136]	@ (8008eb0 <HAL_DMA_Init+0x1f0>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d004      	beq.n	8008e34 <HAL_DMA_Init+0x174>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a21      	ldr	r2, [pc, #132]	@ (8008eb4 <HAL_DMA_Init+0x1f4>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d108      	bne.n	8008e46 <HAL_DMA_Init+0x186>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f022 0201 	bic.w	r2, r2, #1
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	e007      	b.n	8008e56 <HAL_DMA_Init+0x196>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f022 0201 	bic.w	r2, r2, #1
 8008e54:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008e56:	e02f      	b.n	8008eb8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008e58:	f7fd ff4e 	bl	8006cf8 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	2b05      	cmp	r3, #5
 8008e64:	d928      	bls.n	8008eb8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2220      	movs	r2, #32
 8008e6a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2203      	movs	r2, #3
 8008e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e242      	b.n	80092fe <HAL_DMA_Init+0x63e>
 8008e78:	40020010 	.word	0x40020010
 8008e7c:	40020028 	.word	0x40020028
 8008e80:	40020040 	.word	0x40020040
 8008e84:	40020058 	.word	0x40020058
 8008e88:	40020070 	.word	0x40020070
 8008e8c:	40020088 	.word	0x40020088
 8008e90:	400200a0 	.word	0x400200a0
 8008e94:	400200b8 	.word	0x400200b8
 8008e98:	40020410 	.word	0x40020410
 8008e9c:	40020428 	.word	0x40020428
 8008ea0:	40020440 	.word	0x40020440
 8008ea4:	40020458 	.word	0x40020458
 8008ea8:	40020470 	.word	0x40020470
 8008eac:	40020488 	.word	0x40020488
 8008eb0:	400204a0 	.word	0x400204a0
 8008eb4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1c8      	bne.n	8008e58 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	4b83      	ldr	r3, [pc, #524]	@ (80090e0 <HAL_DMA_Init+0x420>)
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8008ede:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008eea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ef6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f08:	2b04      	cmp	r3, #4
 8008f0a:	d107      	bne.n	8008f1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f14:	4313      	orrs	r3, r2
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	2b28      	cmp	r3, #40	@ 0x28
 8008f22:	d903      	bls.n	8008f2c <HAL_DMA_Init+0x26c>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f2a:	d91f      	bls.n	8008f6c <HAL_DMA_Init+0x2ac>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f32:	d903      	bls.n	8008f3c <HAL_DMA_Init+0x27c>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	2b42      	cmp	r3, #66	@ 0x42
 8008f3a:	d917      	bls.n	8008f6c <HAL_DMA_Init+0x2ac>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	2b46      	cmp	r3, #70	@ 0x46
 8008f42:	d903      	bls.n	8008f4c <HAL_DMA_Init+0x28c>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	2b48      	cmp	r3, #72	@ 0x48
 8008f4a:	d90f      	bls.n	8008f6c <HAL_DMA_Init+0x2ac>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	2b4e      	cmp	r3, #78	@ 0x4e
 8008f52:	d903      	bls.n	8008f5c <HAL_DMA_Init+0x29c>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	2b52      	cmp	r3, #82	@ 0x52
 8008f5a:	d907      	bls.n	8008f6c <HAL_DMA_Init+0x2ac>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	2b73      	cmp	r3, #115	@ 0x73
 8008f62:	d905      	bls.n	8008f70 <HAL_DMA_Init+0x2b0>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	2b77      	cmp	r3, #119	@ 0x77
 8008f6a:	d801      	bhi.n	8008f70 <HAL_DMA_Init+0x2b0>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e000      	b.n	8008f72 <HAL_DMA_Init+0x2b2>
 8008f70:	2300      	movs	r3, #0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f7c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f023 0307 	bic.w	r3, r3, #7
 8008f94:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d117      	bne.n	8008fd8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00e      	beq.n	8008fd8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f001 fdca 	bl	800ab54 <DMA_CheckFifoParam>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d008      	beq.n	8008fd8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2240      	movs	r2, #64	@ 0x40
 8008fca:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e192      	b.n	80092fe <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 fd05 	bl	800a9f0 <DMA_CalcBaseAndBitshift>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fee:	f003 031f 	and.w	r3, r3, #31
 8008ff2:	223f      	movs	r2, #63	@ 0x3f
 8008ff4:	409a      	lsls	r2, r3
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	609a      	str	r2, [r3, #8]
 8008ffa:	e0c8      	b.n	800918e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a38      	ldr	r2, [pc, #224]	@ (80090e4 <HAL_DMA_Init+0x424>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d022      	beq.n	800904c <HAL_DMA_Init+0x38c>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a37      	ldr	r2, [pc, #220]	@ (80090e8 <HAL_DMA_Init+0x428>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d01d      	beq.n	800904c <HAL_DMA_Init+0x38c>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a35      	ldr	r2, [pc, #212]	@ (80090ec <HAL_DMA_Init+0x42c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d018      	beq.n	800904c <HAL_DMA_Init+0x38c>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a34      	ldr	r2, [pc, #208]	@ (80090f0 <HAL_DMA_Init+0x430>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d013      	beq.n	800904c <HAL_DMA_Init+0x38c>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a32      	ldr	r2, [pc, #200]	@ (80090f4 <HAL_DMA_Init+0x434>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d00e      	beq.n	800904c <HAL_DMA_Init+0x38c>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a31      	ldr	r2, [pc, #196]	@ (80090f8 <HAL_DMA_Init+0x438>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d009      	beq.n	800904c <HAL_DMA_Init+0x38c>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a2f      	ldr	r2, [pc, #188]	@ (80090fc <HAL_DMA_Init+0x43c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d004      	beq.n	800904c <HAL_DMA_Init+0x38c>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a2e      	ldr	r2, [pc, #184]	@ (8009100 <HAL_DMA_Init+0x440>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d101      	bne.n	8009050 <HAL_DMA_Init+0x390>
 800904c:	2301      	movs	r3, #1
 800904e:	e000      	b.n	8009052 <HAL_DMA_Init+0x392>
 8009050:	2300      	movs	r3, #0
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 8092 	beq.w	800917c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a21      	ldr	r2, [pc, #132]	@ (80090e4 <HAL_DMA_Init+0x424>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d021      	beq.n	80090a6 <HAL_DMA_Init+0x3e6>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a20      	ldr	r2, [pc, #128]	@ (80090e8 <HAL_DMA_Init+0x428>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d01c      	beq.n	80090a6 <HAL_DMA_Init+0x3e6>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a1e      	ldr	r2, [pc, #120]	@ (80090ec <HAL_DMA_Init+0x42c>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d017      	beq.n	80090a6 <HAL_DMA_Init+0x3e6>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a1d      	ldr	r2, [pc, #116]	@ (80090f0 <HAL_DMA_Init+0x430>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d012      	beq.n	80090a6 <HAL_DMA_Init+0x3e6>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a1b      	ldr	r2, [pc, #108]	@ (80090f4 <HAL_DMA_Init+0x434>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d00d      	beq.n	80090a6 <HAL_DMA_Init+0x3e6>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a1a      	ldr	r2, [pc, #104]	@ (80090f8 <HAL_DMA_Init+0x438>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d008      	beq.n	80090a6 <HAL_DMA_Init+0x3e6>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a18      	ldr	r2, [pc, #96]	@ (80090fc <HAL_DMA_Init+0x43c>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d003      	beq.n	80090a6 <HAL_DMA_Init+0x3e6>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a17      	ldr	r2, [pc, #92]	@ (8009100 <HAL_DMA_Init+0x440>)
 80090a4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2202      	movs	r2, #2
 80090aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	4b10      	ldr	r3, [pc, #64]	@ (8009104 <HAL_DMA_Init+0x444>)
 80090c2:	4013      	ands	r3, r2
 80090c4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	2b40      	cmp	r3, #64	@ 0x40
 80090cc:	d01c      	beq.n	8009108 <HAL_DMA_Init+0x448>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	2b80      	cmp	r3, #128	@ 0x80
 80090d4:	d102      	bne.n	80090dc <HAL_DMA_Init+0x41c>
 80090d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80090da:	e016      	b.n	800910a <HAL_DMA_Init+0x44a>
 80090dc:	2300      	movs	r3, #0
 80090de:	e014      	b.n	800910a <HAL_DMA_Init+0x44a>
 80090e0:	fe10803f 	.word	0xfe10803f
 80090e4:	58025408 	.word	0x58025408
 80090e8:	5802541c 	.word	0x5802541c
 80090ec:	58025430 	.word	0x58025430
 80090f0:	58025444 	.word	0x58025444
 80090f4:	58025458 	.word	0x58025458
 80090f8:	5802546c 	.word	0x5802546c
 80090fc:	58025480 	.word	0x58025480
 8009100:	58025494 	.word	0x58025494
 8009104:	fffe000f 	.word	0xfffe000f
 8009108:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	68d2      	ldr	r2, [r2, #12]
 800910e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009110:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009118:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009120:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009128:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	69db      	ldr	r3, [r3, #28]
 800912e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009130:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009138:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	4313      	orrs	r3, r2
 800913e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	697a      	ldr	r2, [r7, #20]
 8009146:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	461a      	mov	r2, r3
 800914e:	4b6e      	ldr	r3, [pc, #440]	@ (8009308 <HAL_DMA_Init+0x648>)
 8009150:	4413      	add	r3, r2
 8009152:	4a6e      	ldr	r2, [pc, #440]	@ (800930c <HAL_DMA_Init+0x64c>)
 8009154:	fba2 2303 	umull	r2, r3, r2, r3
 8009158:	091b      	lsrs	r3, r3, #4
 800915a:	009a      	lsls	r2, r3, #2
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f001 fc45 	bl	800a9f0 <DMA_CalcBaseAndBitshift>
 8009166:	4603      	mov	r3, r0
 8009168:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800916e:	f003 031f 	and.w	r3, r3, #31
 8009172:	2201      	movs	r2, #1
 8009174:	409a      	lsls	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	605a      	str	r2, [r3, #4]
 800917a:	e008      	b.n	800918e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2240      	movs	r2, #64	@ 0x40
 8009180:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2203      	movs	r2, #3
 8009186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e0b7      	b.n	80092fe <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a5f      	ldr	r2, [pc, #380]	@ (8009310 <HAL_DMA_Init+0x650>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d072      	beq.n	800927e <HAL_DMA_Init+0x5be>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a5d      	ldr	r2, [pc, #372]	@ (8009314 <HAL_DMA_Init+0x654>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d06d      	beq.n	800927e <HAL_DMA_Init+0x5be>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a5c      	ldr	r2, [pc, #368]	@ (8009318 <HAL_DMA_Init+0x658>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d068      	beq.n	800927e <HAL_DMA_Init+0x5be>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a5a      	ldr	r2, [pc, #360]	@ (800931c <HAL_DMA_Init+0x65c>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d063      	beq.n	800927e <HAL_DMA_Init+0x5be>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a59      	ldr	r2, [pc, #356]	@ (8009320 <HAL_DMA_Init+0x660>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d05e      	beq.n	800927e <HAL_DMA_Init+0x5be>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a57      	ldr	r2, [pc, #348]	@ (8009324 <HAL_DMA_Init+0x664>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d059      	beq.n	800927e <HAL_DMA_Init+0x5be>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a56      	ldr	r2, [pc, #344]	@ (8009328 <HAL_DMA_Init+0x668>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d054      	beq.n	800927e <HAL_DMA_Init+0x5be>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a54      	ldr	r2, [pc, #336]	@ (800932c <HAL_DMA_Init+0x66c>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d04f      	beq.n	800927e <HAL_DMA_Init+0x5be>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a53      	ldr	r2, [pc, #332]	@ (8009330 <HAL_DMA_Init+0x670>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d04a      	beq.n	800927e <HAL_DMA_Init+0x5be>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a51      	ldr	r2, [pc, #324]	@ (8009334 <HAL_DMA_Init+0x674>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d045      	beq.n	800927e <HAL_DMA_Init+0x5be>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a50      	ldr	r2, [pc, #320]	@ (8009338 <HAL_DMA_Init+0x678>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d040      	beq.n	800927e <HAL_DMA_Init+0x5be>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a4e      	ldr	r2, [pc, #312]	@ (800933c <HAL_DMA_Init+0x67c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d03b      	beq.n	800927e <HAL_DMA_Init+0x5be>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a4d      	ldr	r2, [pc, #308]	@ (8009340 <HAL_DMA_Init+0x680>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d036      	beq.n	800927e <HAL_DMA_Init+0x5be>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a4b      	ldr	r2, [pc, #300]	@ (8009344 <HAL_DMA_Init+0x684>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d031      	beq.n	800927e <HAL_DMA_Init+0x5be>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a4a      	ldr	r2, [pc, #296]	@ (8009348 <HAL_DMA_Init+0x688>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d02c      	beq.n	800927e <HAL_DMA_Init+0x5be>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a48      	ldr	r2, [pc, #288]	@ (800934c <HAL_DMA_Init+0x68c>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d027      	beq.n	800927e <HAL_DMA_Init+0x5be>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a47      	ldr	r2, [pc, #284]	@ (8009350 <HAL_DMA_Init+0x690>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d022      	beq.n	800927e <HAL_DMA_Init+0x5be>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a45      	ldr	r2, [pc, #276]	@ (8009354 <HAL_DMA_Init+0x694>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d01d      	beq.n	800927e <HAL_DMA_Init+0x5be>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a44      	ldr	r2, [pc, #272]	@ (8009358 <HAL_DMA_Init+0x698>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d018      	beq.n	800927e <HAL_DMA_Init+0x5be>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a42      	ldr	r2, [pc, #264]	@ (800935c <HAL_DMA_Init+0x69c>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d013      	beq.n	800927e <HAL_DMA_Init+0x5be>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a41      	ldr	r2, [pc, #260]	@ (8009360 <HAL_DMA_Init+0x6a0>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d00e      	beq.n	800927e <HAL_DMA_Init+0x5be>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a3f      	ldr	r2, [pc, #252]	@ (8009364 <HAL_DMA_Init+0x6a4>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d009      	beq.n	800927e <HAL_DMA_Init+0x5be>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a3e      	ldr	r2, [pc, #248]	@ (8009368 <HAL_DMA_Init+0x6a8>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d004      	beq.n	800927e <HAL_DMA_Init+0x5be>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a3c      	ldr	r2, [pc, #240]	@ (800936c <HAL_DMA_Init+0x6ac>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d101      	bne.n	8009282 <HAL_DMA_Init+0x5c2>
 800927e:	2301      	movs	r3, #1
 8009280:	e000      	b.n	8009284 <HAL_DMA_Init+0x5c4>
 8009282:	2300      	movs	r3, #0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d032      	beq.n	80092ee <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 fcdf 	bl	800ac4c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	2b80      	cmp	r3, #128	@ 0x80
 8009294:	d102      	bne.n	800929c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685a      	ldr	r2, [r3, #4]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092a4:	b2d2      	uxtb	r2, r2
 80092a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80092b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d010      	beq.n	80092dc <HAL_DMA_Init+0x61c>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	2b08      	cmp	r3, #8
 80092c0:	d80c      	bhi.n	80092dc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f001 fd5c 	bl	800ad80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80092d8:	605a      	str	r2, [r3, #4]
 80092da:	e008      	b.n	80092ee <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	a7fdabf8 	.word	0xa7fdabf8
 800930c:	cccccccd 	.word	0xcccccccd
 8009310:	40020010 	.word	0x40020010
 8009314:	40020028 	.word	0x40020028
 8009318:	40020040 	.word	0x40020040
 800931c:	40020058 	.word	0x40020058
 8009320:	40020070 	.word	0x40020070
 8009324:	40020088 	.word	0x40020088
 8009328:	400200a0 	.word	0x400200a0
 800932c:	400200b8 	.word	0x400200b8
 8009330:	40020410 	.word	0x40020410
 8009334:	40020428 	.word	0x40020428
 8009338:	40020440 	.word	0x40020440
 800933c:	40020458 	.word	0x40020458
 8009340:	40020470 	.word	0x40020470
 8009344:	40020488 	.word	0x40020488
 8009348:	400204a0 	.word	0x400204a0
 800934c:	400204b8 	.word	0x400204b8
 8009350:	58025408 	.word	0x58025408
 8009354:	5802541c 	.word	0x5802541c
 8009358:	58025430 	.word	0x58025430
 800935c:	58025444 	.word	0x58025444
 8009360:	58025458 	.word	0x58025458
 8009364:	5802546c 	.word	0x5802546c
 8009368:	58025480 	.word	0x58025480
 800936c:	58025494 	.word	0x58025494

08009370 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e226      	b.n	80097da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009392:	2b01      	cmp	r3, #1
 8009394:	d101      	bne.n	800939a <HAL_DMA_Start_IT+0x2a>
 8009396:	2302      	movs	r3, #2
 8009398:	e21f      	b.n	80097da <HAL_DMA_Start_IT+0x46a>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	f040 820a 	bne.w	80097c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2202      	movs	r2, #2
 80093b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a68      	ldr	r2, [pc, #416]	@ (8009564 <HAL_DMA_Start_IT+0x1f4>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d04a      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a66      	ldr	r2, [pc, #408]	@ (8009568 <HAL_DMA_Start_IT+0x1f8>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d045      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a65      	ldr	r2, [pc, #404]	@ (800956c <HAL_DMA_Start_IT+0x1fc>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d040      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a63      	ldr	r2, [pc, #396]	@ (8009570 <HAL_DMA_Start_IT+0x200>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d03b      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a62      	ldr	r2, [pc, #392]	@ (8009574 <HAL_DMA_Start_IT+0x204>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d036      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a60      	ldr	r2, [pc, #384]	@ (8009578 <HAL_DMA_Start_IT+0x208>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d031      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a5f      	ldr	r2, [pc, #380]	@ (800957c <HAL_DMA_Start_IT+0x20c>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d02c      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a5d      	ldr	r2, [pc, #372]	@ (8009580 <HAL_DMA_Start_IT+0x210>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d027      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a5c      	ldr	r2, [pc, #368]	@ (8009584 <HAL_DMA_Start_IT+0x214>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d022      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a5a      	ldr	r2, [pc, #360]	@ (8009588 <HAL_DMA_Start_IT+0x218>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d01d      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a59      	ldr	r2, [pc, #356]	@ (800958c <HAL_DMA_Start_IT+0x21c>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d018      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a57      	ldr	r2, [pc, #348]	@ (8009590 <HAL_DMA_Start_IT+0x220>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d013      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a56      	ldr	r2, [pc, #344]	@ (8009594 <HAL_DMA_Start_IT+0x224>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d00e      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a54      	ldr	r2, [pc, #336]	@ (8009598 <HAL_DMA_Start_IT+0x228>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d009      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a53      	ldr	r2, [pc, #332]	@ (800959c <HAL_DMA_Start_IT+0x22c>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d004      	beq.n	800945e <HAL_DMA_Start_IT+0xee>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a51      	ldr	r2, [pc, #324]	@ (80095a0 <HAL_DMA_Start_IT+0x230>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d108      	bne.n	8009470 <HAL_DMA_Start_IT+0x100>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 0201 	bic.w	r2, r2, #1
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	e007      	b.n	8009480 <HAL_DMA_Start_IT+0x110>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f022 0201 	bic.w	r2, r2, #1
 800947e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	68b9      	ldr	r1, [r7, #8]
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f001 f906 	bl	800a698 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a34      	ldr	r2, [pc, #208]	@ (8009564 <HAL_DMA_Start_IT+0x1f4>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d04a      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a33      	ldr	r2, [pc, #204]	@ (8009568 <HAL_DMA_Start_IT+0x1f8>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d045      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a31      	ldr	r2, [pc, #196]	@ (800956c <HAL_DMA_Start_IT+0x1fc>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d040      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a30      	ldr	r2, [pc, #192]	@ (8009570 <HAL_DMA_Start_IT+0x200>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d03b      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a2e      	ldr	r2, [pc, #184]	@ (8009574 <HAL_DMA_Start_IT+0x204>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d036      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a2d      	ldr	r2, [pc, #180]	@ (8009578 <HAL_DMA_Start_IT+0x208>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d031      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a2b      	ldr	r2, [pc, #172]	@ (800957c <HAL_DMA_Start_IT+0x20c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d02c      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a2a      	ldr	r2, [pc, #168]	@ (8009580 <HAL_DMA_Start_IT+0x210>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d027      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a28      	ldr	r2, [pc, #160]	@ (8009584 <HAL_DMA_Start_IT+0x214>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d022      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a27      	ldr	r2, [pc, #156]	@ (8009588 <HAL_DMA_Start_IT+0x218>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d01d      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a25      	ldr	r2, [pc, #148]	@ (800958c <HAL_DMA_Start_IT+0x21c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d018      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a24      	ldr	r2, [pc, #144]	@ (8009590 <HAL_DMA_Start_IT+0x220>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d013      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a22      	ldr	r2, [pc, #136]	@ (8009594 <HAL_DMA_Start_IT+0x224>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d00e      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a21      	ldr	r2, [pc, #132]	@ (8009598 <HAL_DMA_Start_IT+0x228>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d009      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a1f      	ldr	r2, [pc, #124]	@ (800959c <HAL_DMA_Start_IT+0x22c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d004      	beq.n	800952c <HAL_DMA_Start_IT+0x1bc>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a1e      	ldr	r2, [pc, #120]	@ (80095a0 <HAL_DMA_Start_IT+0x230>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d101      	bne.n	8009530 <HAL_DMA_Start_IT+0x1c0>
 800952c:	2301      	movs	r3, #1
 800952e:	e000      	b.n	8009532 <HAL_DMA_Start_IT+0x1c2>
 8009530:	2300      	movs	r3, #0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d036      	beq.n	80095a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f023 021e 	bic.w	r2, r3, #30
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f042 0216 	orr.w	r2, r2, #22
 8009548:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800954e:	2b00      	cmp	r3, #0
 8009550:	d03e      	beq.n	80095d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f042 0208 	orr.w	r2, r2, #8
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	e035      	b.n	80095d0 <HAL_DMA_Start_IT+0x260>
 8009564:	40020010 	.word	0x40020010
 8009568:	40020028 	.word	0x40020028
 800956c:	40020040 	.word	0x40020040
 8009570:	40020058 	.word	0x40020058
 8009574:	40020070 	.word	0x40020070
 8009578:	40020088 	.word	0x40020088
 800957c:	400200a0 	.word	0x400200a0
 8009580:	400200b8 	.word	0x400200b8
 8009584:	40020410 	.word	0x40020410
 8009588:	40020428 	.word	0x40020428
 800958c:	40020440 	.word	0x40020440
 8009590:	40020458 	.word	0x40020458
 8009594:	40020470 	.word	0x40020470
 8009598:	40020488 	.word	0x40020488
 800959c:	400204a0 	.word	0x400204a0
 80095a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f023 020e 	bic.w	r2, r3, #14
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f042 020a 	orr.w	r2, r2, #10
 80095b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d007      	beq.n	80095d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f042 0204 	orr.w	r2, r2, #4
 80095ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a83      	ldr	r2, [pc, #524]	@ (80097e4 <HAL_DMA_Start_IT+0x474>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d072      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a82      	ldr	r2, [pc, #520]	@ (80097e8 <HAL_DMA_Start_IT+0x478>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d06d      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a80      	ldr	r2, [pc, #512]	@ (80097ec <HAL_DMA_Start_IT+0x47c>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d068      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a7f      	ldr	r2, [pc, #508]	@ (80097f0 <HAL_DMA_Start_IT+0x480>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d063      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a7d      	ldr	r2, [pc, #500]	@ (80097f4 <HAL_DMA_Start_IT+0x484>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d05e      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a7c      	ldr	r2, [pc, #496]	@ (80097f8 <HAL_DMA_Start_IT+0x488>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d059      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a7a      	ldr	r2, [pc, #488]	@ (80097fc <HAL_DMA_Start_IT+0x48c>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d054      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a79      	ldr	r2, [pc, #484]	@ (8009800 <HAL_DMA_Start_IT+0x490>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d04f      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a77      	ldr	r2, [pc, #476]	@ (8009804 <HAL_DMA_Start_IT+0x494>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d04a      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a76      	ldr	r2, [pc, #472]	@ (8009808 <HAL_DMA_Start_IT+0x498>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d045      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a74      	ldr	r2, [pc, #464]	@ (800980c <HAL_DMA_Start_IT+0x49c>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d040      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a73      	ldr	r2, [pc, #460]	@ (8009810 <HAL_DMA_Start_IT+0x4a0>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d03b      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a71      	ldr	r2, [pc, #452]	@ (8009814 <HAL_DMA_Start_IT+0x4a4>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d036      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a70      	ldr	r2, [pc, #448]	@ (8009818 <HAL_DMA_Start_IT+0x4a8>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d031      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a6e      	ldr	r2, [pc, #440]	@ (800981c <HAL_DMA_Start_IT+0x4ac>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d02c      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a6d      	ldr	r2, [pc, #436]	@ (8009820 <HAL_DMA_Start_IT+0x4b0>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d027      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a6b      	ldr	r2, [pc, #428]	@ (8009824 <HAL_DMA_Start_IT+0x4b4>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d022      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a6a      	ldr	r2, [pc, #424]	@ (8009828 <HAL_DMA_Start_IT+0x4b8>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d01d      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a68      	ldr	r2, [pc, #416]	@ (800982c <HAL_DMA_Start_IT+0x4bc>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d018      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a67      	ldr	r2, [pc, #412]	@ (8009830 <HAL_DMA_Start_IT+0x4c0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d013      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a65      	ldr	r2, [pc, #404]	@ (8009834 <HAL_DMA_Start_IT+0x4c4>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d00e      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a64      	ldr	r2, [pc, #400]	@ (8009838 <HAL_DMA_Start_IT+0x4c8>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d009      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a62      	ldr	r2, [pc, #392]	@ (800983c <HAL_DMA_Start_IT+0x4cc>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d004      	beq.n	80096c0 <HAL_DMA_Start_IT+0x350>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a61      	ldr	r2, [pc, #388]	@ (8009840 <HAL_DMA_Start_IT+0x4d0>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d101      	bne.n	80096c4 <HAL_DMA_Start_IT+0x354>
 80096c0:	2301      	movs	r3, #1
 80096c2:	e000      	b.n	80096c6 <HAL_DMA_Start_IT+0x356>
 80096c4:	2300      	movs	r3, #0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d01a      	beq.n	8009700 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d007      	beq.n	80096e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80096e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d007      	beq.n	8009700 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80096fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a37      	ldr	r2, [pc, #220]	@ (80097e4 <HAL_DMA_Start_IT+0x474>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d04a      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a36      	ldr	r2, [pc, #216]	@ (80097e8 <HAL_DMA_Start_IT+0x478>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d045      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a34      	ldr	r2, [pc, #208]	@ (80097ec <HAL_DMA_Start_IT+0x47c>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d040      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a33      	ldr	r2, [pc, #204]	@ (80097f0 <HAL_DMA_Start_IT+0x480>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d03b      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a31      	ldr	r2, [pc, #196]	@ (80097f4 <HAL_DMA_Start_IT+0x484>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d036      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a30      	ldr	r2, [pc, #192]	@ (80097f8 <HAL_DMA_Start_IT+0x488>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d031      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a2e      	ldr	r2, [pc, #184]	@ (80097fc <HAL_DMA_Start_IT+0x48c>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d02c      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a2d      	ldr	r2, [pc, #180]	@ (8009800 <HAL_DMA_Start_IT+0x490>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d027      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a2b      	ldr	r2, [pc, #172]	@ (8009804 <HAL_DMA_Start_IT+0x494>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d022      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a2a      	ldr	r2, [pc, #168]	@ (8009808 <HAL_DMA_Start_IT+0x498>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d01d      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a28      	ldr	r2, [pc, #160]	@ (800980c <HAL_DMA_Start_IT+0x49c>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d018      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a27      	ldr	r2, [pc, #156]	@ (8009810 <HAL_DMA_Start_IT+0x4a0>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d013      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a25      	ldr	r2, [pc, #148]	@ (8009814 <HAL_DMA_Start_IT+0x4a4>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d00e      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a24      	ldr	r2, [pc, #144]	@ (8009818 <HAL_DMA_Start_IT+0x4a8>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d009      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a22      	ldr	r2, [pc, #136]	@ (800981c <HAL_DMA_Start_IT+0x4ac>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d004      	beq.n	80097a0 <HAL_DMA_Start_IT+0x430>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a21      	ldr	r2, [pc, #132]	@ (8009820 <HAL_DMA_Start_IT+0x4b0>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d108      	bne.n	80097b2 <HAL_DMA_Start_IT+0x442>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f042 0201 	orr.w	r2, r2, #1
 80097ae:	601a      	str	r2, [r3, #0]
 80097b0:	e012      	b.n	80097d8 <HAL_DMA_Start_IT+0x468>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f042 0201 	orr.w	r2, r2, #1
 80097c0:	601a      	str	r2, [r3, #0]
 80097c2:	e009      	b.n	80097d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3718      	adds	r7, #24
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	40020010 	.word	0x40020010
 80097e8:	40020028 	.word	0x40020028
 80097ec:	40020040 	.word	0x40020040
 80097f0:	40020058 	.word	0x40020058
 80097f4:	40020070 	.word	0x40020070
 80097f8:	40020088 	.word	0x40020088
 80097fc:	400200a0 	.word	0x400200a0
 8009800:	400200b8 	.word	0x400200b8
 8009804:	40020410 	.word	0x40020410
 8009808:	40020428 	.word	0x40020428
 800980c:	40020440 	.word	0x40020440
 8009810:	40020458 	.word	0x40020458
 8009814:	40020470 	.word	0x40020470
 8009818:	40020488 	.word	0x40020488
 800981c:	400204a0 	.word	0x400204a0
 8009820:	400204b8 	.word	0x400204b8
 8009824:	58025408 	.word	0x58025408
 8009828:	5802541c 	.word	0x5802541c
 800982c:	58025430 	.word	0x58025430
 8009830:	58025444 	.word	0x58025444
 8009834:	58025458 	.word	0x58025458
 8009838:	5802546c 	.word	0x5802546c
 800983c:	58025480 	.word	0x58025480
 8009840:	58025494 	.word	0x58025494

08009844 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b08a      	sub	sp, #40	@ 0x28
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009850:	4b67      	ldr	r3, [pc, #412]	@ (80099f0 <HAL_DMA_IRQHandler+0x1ac>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a67      	ldr	r2, [pc, #412]	@ (80099f4 <HAL_DMA_IRQHandler+0x1b0>)
 8009856:	fba2 2303 	umull	r2, r3, r2, r3
 800985a:	0a9b      	lsrs	r3, r3, #10
 800985c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009862:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009868:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a5f      	ldr	r2, [pc, #380]	@ (80099f8 <HAL_DMA_IRQHandler+0x1b4>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d04a      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a5d      	ldr	r2, [pc, #372]	@ (80099fc <HAL_DMA_IRQHandler+0x1b8>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d045      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a5c      	ldr	r2, [pc, #368]	@ (8009a00 <HAL_DMA_IRQHandler+0x1bc>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d040      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a5a      	ldr	r2, [pc, #360]	@ (8009a04 <HAL_DMA_IRQHandler+0x1c0>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d03b      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a59      	ldr	r2, [pc, #356]	@ (8009a08 <HAL_DMA_IRQHandler+0x1c4>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d036      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a57      	ldr	r2, [pc, #348]	@ (8009a0c <HAL_DMA_IRQHandler+0x1c8>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d031      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a56      	ldr	r2, [pc, #344]	@ (8009a10 <HAL_DMA_IRQHandler+0x1cc>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d02c      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a54      	ldr	r2, [pc, #336]	@ (8009a14 <HAL_DMA_IRQHandler+0x1d0>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d027      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a53      	ldr	r2, [pc, #332]	@ (8009a18 <HAL_DMA_IRQHandler+0x1d4>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d022      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a51      	ldr	r2, [pc, #324]	@ (8009a1c <HAL_DMA_IRQHandler+0x1d8>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d01d      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a50      	ldr	r2, [pc, #320]	@ (8009a20 <HAL_DMA_IRQHandler+0x1dc>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d018      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a4e      	ldr	r2, [pc, #312]	@ (8009a24 <HAL_DMA_IRQHandler+0x1e0>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d013      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a4d      	ldr	r2, [pc, #308]	@ (8009a28 <HAL_DMA_IRQHandler+0x1e4>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d00e      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a4b      	ldr	r2, [pc, #300]	@ (8009a2c <HAL_DMA_IRQHandler+0x1e8>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d009      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a4a      	ldr	r2, [pc, #296]	@ (8009a30 <HAL_DMA_IRQHandler+0x1ec>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d004      	beq.n	8009916 <HAL_DMA_IRQHandler+0xd2>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a48      	ldr	r2, [pc, #288]	@ (8009a34 <HAL_DMA_IRQHandler+0x1f0>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d101      	bne.n	800991a <HAL_DMA_IRQHandler+0xd6>
 8009916:	2301      	movs	r3, #1
 8009918:	e000      	b.n	800991c <HAL_DMA_IRQHandler+0xd8>
 800991a:	2300      	movs	r3, #0
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 842b 	beq.w	800a178 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009926:	f003 031f 	and.w	r3, r3, #31
 800992a:	2208      	movs	r2, #8
 800992c:	409a      	lsls	r2, r3
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	4013      	ands	r3, r2
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 80a2 	beq.w	8009a7c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a2e      	ldr	r2, [pc, #184]	@ (80099f8 <HAL_DMA_IRQHandler+0x1b4>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d04a      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a2d      	ldr	r2, [pc, #180]	@ (80099fc <HAL_DMA_IRQHandler+0x1b8>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d045      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a2b      	ldr	r2, [pc, #172]	@ (8009a00 <HAL_DMA_IRQHandler+0x1bc>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d040      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a2a      	ldr	r2, [pc, #168]	@ (8009a04 <HAL_DMA_IRQHandler+0x1c0>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d03b      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a28      	ldr	r2, [pc, #160]	@ (8009a08 <HAL_DMA_IRQHandler+0x1c4>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d036      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a27      	ldr	r2, [pc, #156]	@ (8009a0c <HAL_DMA_IRQHandler+0x1c8>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d031      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a25      	ldr	r2, [pc, #148]	@ (8009a10 <HAL_DMA_IRQHandler+0x1cc>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d02c      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a24      	ldr	r2, [pc, #144]	@ (8009a14 <HAL_DMA_IRQHandler+0x1d0>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d027      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a22      	ldr	r2, [pc, #136]	@ (8009a18 <HAL_DMA_IRQHandler+0x1d4>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d022      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a21      	ldr	r2, [pc, #132]	@ (8009a1c <HAL_DMA_IRQHandler+0x1d8>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d01d      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a1f      	ldr	r2, [pc, #124]	@ (8009a20 <HAL_DMA_IRQHandler+0x1dc>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d018      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a1e      	ldr	r2, [pc, #120]	@ (8009a24 <HAL_DMA_IRQHandler+0x1e0>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d013      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009a28 <HAL_DMA_IRQHandler+0x1e4>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d00e      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a1b      	ldr	r2, [pc, #108]	@ (8009a2c <HAL_DMA_IRQHandler+0x1e8>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d009      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a19      	ldr	r2, [pc, #100]	@ (8009a30 <HAL_DMA_IRQHandler+0x1ec>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d004      	beq.n	80099d8 <HAL_DMA_IRQHandler+0x194>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a18      	ldr	r2, [pc, #96]	@ (8009a34 <HAL_DMA_IRQHandler+0x1f0>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d12f      	bne.n	8009a38 <HAL_DMA_IRQHandler+0x1f4>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 0304 	and.w	r3, r3, #4
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	bf14      	ite	ne
 80099e6:	2301      	movne	r3, #1
 80099e8:	2300      	moveq	r3, #0
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	e02e      	b.n	8009a4c <HAL_DMA_IRQHandler+0x208>
 80099ee:	bf00      	nop
 80099f0:	24000000 	.word	0x24000000
 80099f4:	1b4e81b5 	.word	0x1b4e81b5
 80099f8:	40020010 	.word	0x40020010
 80099fc:	40020028 	.word	0x40020028
 8009a00:	40020040 	.word	0x40020040
 8009a04:	40020058 	.word	0x40020058
 8009a08:	40020070 	.word	0x40020070
 8009a0c:	40020088 	.word	0x40020088
 8009a10:	400200a0 	.word	0x400200a0
 8009a14:	400200b8 	.word	0x400200b8
 8009a18:	40020410 	.word	0x40020410
 8009a1c:	40020428 	.word	0x40020428
 8009a20:	40020440 	.word	0x40020440
 8009a24:	40020458 	.word	0x40020458
 8009a28:	40020470 	.word	0x40020470
 8009a2c:	40020488 	.word	0x40020488
 8009a30:	400204a0 	.word	0x400204a0
 8009a34:	400204b8 	.word	0x400204b8
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 0308 	and.w	r3, r3, #8
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	bf14      	ite	ne
 8009a46:	2301      	movne	r3, #1
 8009a48:	2300      	moveq	r3, #0
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d015      	beq.n	8009a7c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f022 0204 	bic.w	r2, r2, #4
 8009a5e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a64:	f003 031f 	and.w	r3, r3, #31
 8009a68:	2208      	movs	r2, #8
 8009a6a:	409a      	lsls	r2, r3
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a74:	f043 0201 	orr.w	r2, r3, #1
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a80:	f003 031f 	and.w	r3, r3, #31
 8009a84:	69ba      	ldr	r2, [r7, #24]
 8009a86:	fa22 f303 	lsr.w	r3, r2, r3
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d06e      	beq.n	8009b70 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a69      	ldr	r2, [pc, #420]	@ (8009c3c <HAL_DMA_IRQHandler+0x3f8>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d04a      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a67      	ldr	r2, [pc, #412]	@ (8009c40 <HAL_DMA_IRQHandler+0x3fc>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d045      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a66      	ldr	r2, [pc, #408]	@ (8009c44 <HAL_DMA_IRQHandler+0x400>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d040      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a64      	ldr	r2, [pc, #400]	@ (8009c48 <HAL_DMA_IRQHandler+0x404>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d03b      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a63      	ldr	r2, [pc, #396]	@ (8009c4c <HAL_DMA_IRQHandler+0x408>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d036      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a61      	ldr	r2, [pc, #388]	@ (8009c50 <HAL_DMA_IRQHandler+0x40c>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d031      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a60      	ldr	r2, [pc, #384]	@ (8009c54 <HAL_DMA_IRQHandler+0x410>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d02c      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a5e      	ldr	r2, [pc, #376]	@ (8009c58 <HAL_DMA_IRQHandler+0x414>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d027      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a5d      	ldr	r2, [pc, #372]	@ (8009c5c <HAL_DMA_IRQHandler+0x418>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d022      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a5b      	ldr	r2, [pc, #364]	@ (8009c60 <HAL_DMA_IRQHandler+0x41c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d01d      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a5a      	ldr	r2, [pc, #360]	@ (8009c64 <HAL_DMA_IRQHandler+0x420>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d018      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a58      	ldr	r2, [pc, #352]	@ (8009c68 <HAL_DMA_IRQHandler+0x424>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d013      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a57      	ldr	r2, [pc, #348]	@ (8009c6c <HAL_DMA_IRQHandler+0x428>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d00e      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a55      	ldr	r2, [pc, #340]	@ (8009c70 <HAL_DMA_IRQHandler+0x42c>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d009      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a54      	ldr	r2, [pc, #336]	@ (8009c74 <HAL_DMA_IRQHandler+0x430>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d004      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x2ee>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a52      	ldr	r2, [pc, #328]	@ (8009c78 <HAL_DMA_IRQHandler+0x434>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d10a      	bne.n	8009b48 <HAL_DMA_IRQHandler+0x304>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	695b      	ldr	r3, [r3, #20]
 8009b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	bf14      	ite	ne
 8009b40:	2301      	movne	r3, #1
 8009b42:	2300      	moveq	r3, #0
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	e003      	b.n	8009b50 <HAL_DMA_IRQHandler+0x30c>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2300      	movs	r3, #0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00d      	beq.n	8009b70 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b58:	f003 031f 	and.w	r3, r3, #31
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	409a      	lsls	r2, r3
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b68:	f043 0202 	orr.w	r2, r3, #2
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b74:	f003 031f 	and.w	r3, r3, #31
 8009b78:	2204      	movs	r2, #4
 8009b7a:	409a      	lsls	r2, r3
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	4013      	ands	r3, r2
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 808f 	beq.w	8009ca4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8009c3c <HAL_DMA_IRQHandler+0x3f8>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d04a      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a2a      	ldr	r2, [pc, #168]	@ (8009c40 <HAL_DMA_IRQHandler+0x3fc>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d045      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a29      	ldr	r2, [pc, #164]	@ (8009c44 <HAL_DMA_IRQHandler+0x400>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d040      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a27      	ldr	r2, [pc, #156]	@ (8009c48 <HAL_DMA_IRQHandler+0x404>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d03b      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a26      	ldr	r2, [pc, #152]	@ (8009c4c <HAL_DMA_IRQHandler+0x408>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d036      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a24      	ldr	r2, [pc, #144]	@ (8009c50 <HAL_DMA_IRQHandler+0x40c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d031      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a23      	ldr	r2, [pc, #140]	@ (8009c54 <HAL_DMA_IRQHandler+0x410>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d02c      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a21      	ldr	r2, [pc, #132]	@ (8009c58 <HAL_DMA_IRQHandler+0x414>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d027      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a20      	ldr	r2, [pc, #128]	@ (8009c5c <HAL_DMA_IRQHandler+0x418>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d022      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a1e      	ldr	r2, [pc, #120]	@ (8009c60 <HAL_DMA_IRQHandler+0x41c>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d01d      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a1d      	ldr	r2, [pc, #116]	@ (8009c64 <HAL_DMA_IRQHandler+0x420>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d018      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8009c68 <HAL_DMA_IRQHandler+0x424>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d013      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a1a      	ldr	r2, [pc, #104]	@ (8009c6c <HAL_DMA_IRQHandler+0x428>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d00e      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a18      	ldr	r2, [pc, #96]	@ (8009c70 <HAL_DMA_IRQHandler+0x42c>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d009      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a17      	ldr	r2, [pc, #92]	@ (8009c74 <HAL_DMA_IRQHandler+0x430>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d004      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x3e2>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a15      	ldr	r2, [pc, #84]	@ (8009c78 <HAL_DMA_IRQHandler+0x434>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d12a      	bne.n	8009c7c <HAL_DMA_IRQHandler+0x438>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0302 	and.w	r3, r3, #2
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	bf14      	ite	ne
 8009c34:	2301      	movne	r3, #1
 8009c36:	2300      	moveq	r3, #0
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	e023      	b.n	8009c84 <HAL_DMA_IRQHandler+0x440>
 8009c3c:	40020010 	.word	0x40020010
 8009c40:	40020028 	.word	0x40020028
 8009c44:	40020040 	.word	0x40020040
 8009c48:	40020058 	.word	0x40020058
 8009c4c:	40020070 	.word	0x40020070
 8009c50:	40020088 	.word	0x40020088
 8009c54:	400200a0 	.word	0x400200a0
 8009c58:	400200b8 	.word	0x400200b8
 8009c5c:	40020410 	.word	0x40020410
 8009c60:	40020428 	.word	0x40020428
 8009c64:	40020440 	.word	0x40020440
 8009c68:	40020458 	.word	0x40020458
 8009c6c:	40020470 	.word	0x40020470
 8009c70:	40020488 	.word	0x40020488
 8009c74:	400204a0 	.word	0x400204a0
 8009c78:	400204b8 	.word	0x400204b8
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2300      	movs	r3, #0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00d      	beq.n	8009ca4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c8c:	f003 031f 	and.w	r3, r3, #31
 8009c90:	2204      	movs	r2, #4
 8009c92:	409a      	lsls	r2, r3
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c9c:	f043 0204 	orr.w	r2, r3, #4
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ca8:	f003 031f 	and.w	r3, r3, #31
 8009cac:	2210      	movs	r2, #16
 8009cae:	409a      	lsls	r2, r3
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 80a6 	beq.w	8009e06 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a85      	ldr	r2, [pc, #532]	@ (8009ed4 <HAL_DMA_IRQHandler+0x690>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d04a      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a83      	ldr	r2, [pc, #524]	@ (8009ed8 <HAL_DMA_IRQHandler+0x694>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d045      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a82      	ldr	r2, [pc, #520]	@ (8009edc <HAL_DMA_IRQHandler+0x698>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d040      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a80      	ldr	r2, [pc, #512]	@ (8009ee0 <HAL_DMA_IRQHandler+0x69c>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d03b      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a7f      	ldr	r2, [pc, #508]	@ (8009ee4 <HAL_DMA_IRQHandler+0x6a0>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d036      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a7d      	ldr	r2, [pc, #500]	@ (8009ee8 <HAL_DMA_IRQHandler+0x6a4>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d031      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8009eec <HAL_DMA_IRQHandler+0x6a8>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d02c      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a7a      	ldr	r2, [pc, #488]	@ (8009ef0 <HAL_DMA_IRQHandler+0x6ac>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d027      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a79      	ldr	r2, [pc, #484]	@ (8009ef4 <HAL_DMA_IRQHandler+0x6b0>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d022      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a77      	ldr	r2, [pc, #476]	@ (8009ef8 <HAL_DMA_IRQHandler+0x6b4>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d01d      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a76      	ldr	r2, [pc, #472]	@ (8009efc <HAL_DMA_IRQHandler+0x6b8>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d018      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a74      	ldr	r2, [pc, #464]	@ (8009f00 <HAL_DMA_IRQHandler+0x6bc>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d013      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a73      	ldr	r2, [pc, #460]	@ (8009f04 <HAL_DMA_IRQHandler+0x6c0>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d00e      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a71      	ldr	r2, [pc, #452]	@ (8009f08 <HAL_DMA_IRQHandler+0x6c4>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d009      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a70      	ldr	r2, [pc, #448]	@ (8009f0c <HAL_DMA_IRQHandler+0x6c8>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d004      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x516>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a6e      	ldr	r2, [pc, #440]	@ (8009f10 <HAL_DMA_IRQHandler+0x6cc>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d10a      	bne.n	8009d70 <HAL_DMA_IRQHandler+0x52c>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0308 	and.w	r3, r3, #8
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	bf14      	ite	ne
 8009d68:	2301      	movne	r3, #1
 8009d6a:	2300      	moveq	r3, #0
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	e009      	b.n	8009d84 <HAL_DMA_IRQHandler+0x540>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 0304 	and.w	r3, r3, #4
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	bf14      	ite	ne
 8009d7e:	2301      	movne	r3, #1
 8009d80:	2300      	moveq	r3, #0
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d03e      	beq.n	8009e06 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d8c:	f003 031f 	and.w	r3, r3, #31
 8009d90:	2210      	movs	r2, #16
 8009d92:	409a      	lsls	r2, r3
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d018      	beq.n	8009dd8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d108      	bne.n	8009dc6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d024      	beq.n	8009e06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	4798      	blx	r3
 8009dc4:	e01f      	b.n	8009e06 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d01b      	beq.n	8009e06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	4798      	blx	r3
 8009dd6:	e016      	b.n	8009e06 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d107      	bne.n	8009df6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f022 0208 	bic.w	r2, r2, #8
 8009df4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e0a:	f003 031f 	and.w	r3, r3, #31
 8009e0e:	2220      	movs	r2, #32
 8009e10:	409a      	lsls	r2, r3
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	4013      	ands	r3, r2
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 8110 	beq.w	800a03c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a2c      	ldr	r2, [pc, #176]	@ (8009ed4 <HAL_DMA_IRQHandler+0x690>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d04a      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a2b      	ldr	r2, [pc, #172]	@ (8009ed8 <HAL_DMA_IRQHandler+0x694>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d045      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a29      	ldr	r2, [pc, #164]	@ (8009edc <HAL_DMA_IRQHandler+0x698>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d040      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a28      	ldr	r2, [pc, #160]	@ (8009ee0 <HAL_DMA_IRQHandler+0x69c>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d03b      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a26      	ldr	r2, [pc, #152]	@ (8009ee4 <HAL_DMA_IRQHandler+0x6a0>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d036      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a25      	ldr	r2, [pc, #148]	@ (8009ee8 <HAL_DMA_IRQHandler+0x6a4>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d031      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a23      	ldr	r2, [pc, #140]	@ (8009eec <HAL_DMA_IRQHandler+0x6a8>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d02c      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a22      	ldr	r2, [pc, #136]	@ (8009ef0 <HAL_DMA_IRQHandler+0x6ac>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d027      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a20      	ldr	r2, [pc, #128]	@ (8009ef4 <HAL_DMA_IRQHandler+0x6b0>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d022      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8009ef8 <HAL_DMA_IRQHandler+0x6b4>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d01d      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a1d      	ldr	r2, [pc, #116]	@ (8009efc <HAL_DMA_IRQHandler+0x6b8>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d018      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8009f00 <HAL_DMA_IRQHandler+0x6bc>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d013      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a1a      	ldr	r2, [pc, #104]	@ (8009f04 <HAL_DMA_IRQHandler+0x6c0>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d00e      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a19      	ldr	r2, [pc, #100]	@ (8009f08 <HAL_DMA_IRQHandler+0x6c4>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d009      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a17      	ldr	r2, [pc, #92]	@ (8009f0c <HAL_DMA_IRQHandler+0x6c8>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d004      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x678>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a16      	ldr	r2, [pc, #88]	@ (8009f10 <HAL_DMA_IRQHandler+0x6cc>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d12b      	bne.n	8009f14 <HAL_DMA_IRQHandler+0x6d0>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f003 0310 	and.w	r3, r3, #16
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	bf14      	ite	ne
 8009eca:	2301      	movne	r3, #1
 8009ecc:	2300      	moveq	r3, #0
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	e02a      	b.n	8009f28 <HAL_DMA_IRQHandler+0x6e4>
 8009ed2:	bf00      	nop
 8009ed4:	40020010 	.word	0x40020010
 8009ed8:	40020028 	.word	0x40020028
 8009edc:	40020040 	.word	0x40020040
 8009ee0:	40020058 	.word	0x40020058
 8009ee4:	40020070 	.word	0x40020070
 8009ee8:	40020088 	.word	0x40020088
 8009eec:	400200a0 	.word	0x400200a0
 8009ef0:	400200b8 	.word	0x400200b8
 8009ef4:	40020410 	.word	0x40020410
 8009ef8:	40020428 	.word	0x40020428
 8009efc:	40020440 	.word	0x40020440
 8009f00:	40020458 	.word	0x40020458
 8009f04:	40020470 	.word	0x40020470
 8009f08:	40020488 	.word	0x40020488
 8009f0c:	400204a0 	.word	0x400204a0
 8009f10:	400204b8 	.word	0x400204b8
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0302 	and.w	r3, r3, #2
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	bf14      	ite	ne
 8009f22:	2301      	movne	r3, #1
 8009f24:	2300      	moveq	r3, #0
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 8087 	beq.w	800a03c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f32:	f003 031f 	and.w	r3, r3, #31
 8009f36:	2220      	movs	r2, #32
 8009f38:	409a      	lsls	r2, r3
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	2b04      	cmp	r3, #4
 8009f48:	d139      	bne.n	8009fbe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f022 0216 	bic.w	r2, r2, #22
 8009f58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	695a      	ldr	r2, [r3, #20]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d103      	bne.n	8009f7a <HAL_DMA_IRQHandler+0x736>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d007      	beq.n	8009f8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 0208 	bic.w	r2, r2, #8
 8009f88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f8e:	f003 031f 	and.w	r3, r3, #31
 8009f92:	223f      	movs	r2, #63	@ 0x3f
 8009f94:	409a      	lsls	r2, r3
 8009f96:	6a3b      	ldr	r3, [r7, #32]
 8009f98:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f000 834a 	beq.w	800a648 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	4798      	blx	r3
          }
          return;
 8009fbc:	e344      	b.n	800a648 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d018      	beq.n	8009ffe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d108      	bne.n	8009fec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d02c      	beq.n	800a03c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	4798      	blx	r3
 8009fea:	e027      	b.n	800a03c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d023      	beq.n	800a03c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	4798      	blx	r3
 8009ffc:	e01e      	b.n	800a03c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10f      	bne.n	800a02c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 0210 	bic.w	r2, r2, #16
 800a01a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a030:	2b00      	cmp	r3, #0
 800a032:	d003      	beq.n	800a03c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 8306 	beq.w	800a652 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a04a:	f003 0301 	and.w	r3, r3, #1
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f000 8088 	beq.w	800a164 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2204      	movs	r2, #4
 800a058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a7a      	ldr	r2, [pc, #488]	@ (800a24c <HAL_DMA_IRQHandler+0xa08>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d04a      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a79      	ldr	r2, [pc, #484]	@ (800a250 <HAL_DMA_IRQHandler+0xa0c>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d045      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a77      	ldr	r2, [pc, #476]	@ (800a254 <HAL_DMA_IRQHandler+0xa10>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d040      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a76      	ldr	r2, [pc, #472]	@ (800a258 <HAL_DMA_IRQHandler+0xa14>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d03b      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a74      	ldr	r2, [pc, #464]	@ (800a25c <HAL_DMA_IRQHandler+0xa18>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d036      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a73      	ldr	r2, [pc, #460]	@ (800a260 <HAL_DMA_IRQHandler+0xa1c>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d031      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a71      	ldr	r2, [pc, #452]	@ (800a264 <HAL_DMA_IRQHandler+0xa20>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d02c      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a70      	ldr	r2, [pc, #448]	@ (800a268 <HAL_DMA_IRQHandler+0xa24>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d027      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a6e      	ldr	r2, [pc, #440]	@ (800a26c <HAL_DMA_IRQHandler+0xa28>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d022      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a6d      	ldr	r2, [pc, #436]	@ (800a270 <HAL_DMA_IRQHandler+0xa2c>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d01d      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a6b      	ldr	r2, [pc, #428]	@ (800a274 <HAL_DMA_IRQHandler+0xa30>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d018      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a6a      	ldr	r2, [pc, #424]	@ (800a278 <HAL_DMA_IRQHandler+0xa34>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d013      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a68      	ldr	r2, [pc, #416]	@ (800a27c <HAL_DMA_IRQHandler+0xa38>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d00e      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a67      	ldr	r2, [pc, #412]	@ (800a280 <HAL_DMA_IRQHandler+0xa3c>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d009      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a65      	ldr	r2, [pc, #404]	@ (800a284 <HAL_DMA_IRQHandler+0xa40>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d004      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x8b8>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a64      	ldr	r2, [pc, #400]	@ (800a288 <HAL_DMA_IRQHandler+0xa44>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d108      	bne.n	800a10e <HAL_DMA_IRQHandler+0x8ca>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f022 0201 	bic.w	r2, r2, #1
 800a10a:	601a      	str	r2, [r3, #0]
 800a10c:	e007      	b.n	800a11e <HAL_DMA_IRQHandler+0x8da>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f022 0201 	bic.w	r2, r2, #1
 800a11c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3301      	adds	r3, #1
 800a122:	60fb      	str	r3, [r7, #12]
 800a124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a126:	429a      	cmp	r2, r3
 800a128:	d307      	bcc.n	800a13a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 0301 	and.w	r3, r3, #1
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1f2      	bne.n	800a11e <HAL_DMA_IRQHandler+0x8da>
 800a138:	e000      	b.n	800a13c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a13a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0301 	and.w	r3, r3, #1
 800a146:	2b00      	cmp	r3, #0
 800a148:	d004      	beq.n	800a154 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2203      	movs	r2, #3
 800a14e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a152:	e003      	b.n	800a15c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 8272 	beq.w	800a652 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	4798      	blx	r3
 800a176:	e26c      	b.n	800a652 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a43      	ldr	r2, [pc, #268]	@ (800a28c <HAL_DMA_IRQHandler+0xa48>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d022      	beq.n	800a1c8 <HAL_DMA_IRQHandler+0x984>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a42      	ldr	r2, [pc, #264]	@ (800a290 <HAL_DMA_IRQHandler+0xa4c>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d01d      	beq.n	800a1c8 <HAL_DMA_IRQHandler+0x984>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a40      	ldr	r2, [pc, #256]	@ (800a294 <HAL_DMA_IRQHandler+0xa50>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d018      	beq.n	800a1c8 <HAL_DMA_IRQHandler+0x984>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a3f      	ldr	r2, [pc, #252]	@ (800a298 <HAL_DMA_IRQHandler+0xa54>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d013      	beq.n	800a1c8 <HAL_DMA_IRQHandler+0x984>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a3d      	ldr	r2, [pc, #244]	@ (800a29c <HAL_DMA_IRQHandler+0xa58>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d00e      	beq.n	800a1c8 <HAL_DMA_IRQHandler+0x984>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a3c      	ldr	r2, [pc, #240]	@ (800a2a0 <HAL_DMA_IRQHandler+0xa5c>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d009      	beq.n	800a1c8 <HAL_DMA_IRQHandler+0x984>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a3a      	ldr	r2, [pc, #232]	@ (800a2a4 <HAL_DMA_IRQHandler+0xa60>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d004      	beq.n	800a1c8 <HAL_DMA_IRQHandler+0x984>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a39      	ldr	r2, [pc, #228]	@ (800a2a8 <HAL_DMA_IRQHandler+0xa64>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d101      	bne.n	800a1cc <HAL_DMA_IRQHandler+0x988>
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e000      	b.n	800a1ce <HAL_DMA_IRQHandler+0x98a>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 823f 	beq.w	800a652 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1e0:	f003 031f 	and.w	r3, r3, #31
 800a1e4:	2204      	movs	r2, #4
 800a1e6:	409a      	lsls	r2, r3
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f000 80cd 	beq.w	800a38c <HAL_DMA_IRQHandler+0xb48>
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f003 0304 	and.w	r3, r3, #4
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f000 80c7 	beq.w	800a38c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a202:	f003 031f 	and.w	r3, r3, #31
 800a206:	2204      	movs	r2, #4
 800a208:	409a      	lsls	r2, r3
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a214:	2b00      	cmp	r3, #0
 800a216:	d049      	beq.n	800a2ac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d109      	bne.n	800a236 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a226:	2b00      	cmp	r3, #0
 800a228:	f000 8210 	beq.w	800a64c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a234:	e20a      	b.n	800a64c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f000 8206 	beq.w	800a64c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a248:	e200      	b.n	800a64c <HAL_DMA_IRQHandler+0xe08>
 800a24a:	bf00      	nop
 800a24c:	40020010 	.word	0x40020010
 800a250:	40020028 	.word	0x40020028
 800a254:	40020040 	.word	0x40020040
 800a258:	40020058 	.word	0x40020058
 800a25c:	40020070 	.word	0x40020070
 800a260:	40020088 	.word	0x40020088
 800a264:	400200a0 	.word	0x400200a0
 800a268:	400200b8 	.word	0x400200b8
 800a26c:	40020410 	.word	0x40020410
 800a270:	40020428 	.word	0x40020428
 800a274:	40020440 	.word	0x40020440
 800a278:	40020458 	.word	0x40020458
 800a27c:	40020470 	.word	0x40020470
 800a280:	40020488 	.word	0x40020488
 800a284:	400204a0 	.word	0x400204a0
 800a288:	400204b8 	.word	0x400204b8
 800a28c:	58025408 	.word	0x58025408
 800a290:	5802541c 	.word	0x5802541c
 800a294:	58025430 	.word	0x58025430
 800a298:	58025444 	.word	0x58025444
 800a29c:	58025458 	.word	0x58025458
 800a2a0:	5802546c 	.word	0x5802546c
 800a2a4:	58025480 	.word	0x58025480
 800a2a8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f003 0320 	and.w	r3, r3, #32
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d160      	bne.n	800a378 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a7f      	ldr	r2, [pc, #508]	@ (800a4b8 <HAL_DMA_IRQHandler+0xc74>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d04a      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a7d      	ldr	r2, [pc, #500]	@ (800a4bc <HAL_DMA_IRQHandler+0xc78>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d045      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a7c      	ldr	r2, [pc, #496]	@ (800a4c0 <HAL_DMA_IRQHandler+0xc7c>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d040      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a7a      	ldr	r2, [pc, #488]	@ (800a4c4 <HAL_DMA_IRQHandler+0xc80>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d03b      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a79      	ldr	r2, [pc, #484]	@ (800a4c8 <HAL_DMA_IRQHandler+0xc84>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d036      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a77      	ldr	r2, [pc, #476]	@ (800a4cc <HAL_DMA_IRQHandler+0xc88>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d031      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a76      	ldr	r2, [pc, #472]	@ (800a4d0 <HAL_DMA_IRQHandler+0xc8c>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d02c      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a74      	ldr	r2, [pc, #464]	@ (800a4d4 <HAL_DMA_IRQHandler+0xc90>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d027      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a73      	ldr	r2, [pc, #460]	@ (800a4d8 <HAL_DMA_IRQHandler+0xc94>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d022      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a71      	ldr	r2, [pc, #452]	@ (800a4dc <HAL_DMA_IRQHandler+0xc98>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d01d      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a70      	ldr	r2, [pc, #448]	@ (800a4e0 <HAL_DMA_IRQHandler+0xc9c>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d018      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a6e      	ldr	r2, [pc, #440]	@ (800a4e4 <HAL_DMA_IRQHandler+0xca0>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d013      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a6d      	ldr	r2, [pc, #436]	@ (800a4e8 <HAL_DMA_IRQHandler+0xca4>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d00e      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a6b      	ldr	r2, [pc, #428]	@ (800a4ec <HAL_DMA_IRQHandler+0xca8>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d009      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a6a      	ldr	r2, [pc, #424]	@ (800a4f0 <HAL_DMA_IRQHandler+0xcac>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d004      	beq.n	800a356 <HAL_DMA_IRQHandler+0xb12>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a68      	ldr	r2, [pc, #416]	@ (800a4f4 <HAL_DMA_IRQHandler+0xcb0>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d108      	bne.n	800a368 <HAL_DMA_IRQHandler+0xb24>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f022 0208 	bic.w	r2, r2, #8
 800a364:	601a      	str	r2, [r3, #0]
 800a366:	e007      	b.n	800a378 <HAL_DMA_IRQHandler+0xb34>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f022 0204 	bic.w	r2, r2, #4
 800a376:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 8165 	beq.w	800a64c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a38a:	e15f      	b.n	800a64c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a390:	f003 031f 	and.w	r3, r3, #31
 800a394:	2202      	movs	r2, #2
 800a396:	409a      	lsls	r2, r3
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	4013      	ands	r3, r2
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 80c5 	beq.w	800a52c <HAL_DMA_IRQHandler+0xce8>
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	f003 0302 	and.w	r3, r3, #2
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 80bf 	beq.w	800a52c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3b2:	f003 031f 	and.w	r3, r3, #31
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	409a      	lsls	r2, r3
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d018      	beq.n	800a3fa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d109      	bne.n	800a3e6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f000 813a 	beq.w	800a650 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a3e4:	e134      	b.n	800a650 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f000 8130 	beq.w	800a650 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a3f8:	e12a      	b.n	800a650 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	f003 0320 	and.w	r3, r3, #32
 800a400:	2b00      	cmp	r3, #0
 800a402:	f040 8089 	bne.w	800a518 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a2b      	ldr	r2, [pc, #172]	@ (800a4b8 <HAL_DMA_IRQHandler+0xc74>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d04a      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a29      	ldr	r2, [pc, #164]	@ (800a4bc <HAL_DMA_IRQHandler+0xc78>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d045      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a28      	ldr	r2, [pc, #160]	@ (800a4c0 <HAL_DMA_IRQHandler+0xc7c>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d040      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a26      	ldr	r2, [pc, #152]	@ (800a4c4 <HAL_DMA_IRQHandler+0xc80>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d03b      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a25      	ldr	r2, [pc, #148]	@ (800a4c8 <HAL_DMA_IRQHandler+0xc84>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d036      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a23      	ldr	r2, [pc, #140]	@ (800a4cc <HAL_DMA_IRQHandler+0xc88>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d031      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a22      	ldr	r2, [pc, #136]	@ (800a4d0 <HAL_DMA_IRQHandler+0xc8c>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d02c      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a20      	ldr	r2, [pc, #128]	@ (800a4d4 <HAL_DMA_IRQHandler+0xc90>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d027      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a1f      	ldr	r2, [pc, #124]	@ (800a4d8 <HAL_DMA_IRQHandler+0xc94>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d022      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a1d      	ldr	r2, [pc, #116]	@ (800a4dc <HAL_DMA_IRQHandler+0xc98>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d01d      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a1c      	ldr	r2, [pc, #112]	@ (800a4e0 <HAL_DMA_IRQHandler+0xc9c>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d018      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a1a      	ldr	r2, [pc, #104]	@ (800a4e4 <HAL_DMA_IRQHandler+0xca0>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d013      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a19      	ldr	r2, [pc, #100]	@ (800a4e8 <HAL_DMA_IRQHandler+0xca4>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d00e      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a17      	ldr	r2, [pc, #92]	@ (800a4ec <HAL_DMA_IRQHandler+0xca8>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d009      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a16      	ldr	r2, [pc, #88]	@ (800a4f0 <HAL_DMA_IRQHandler+0xcac>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d004      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0xc62>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a14      	ldr	r2, [pc, #80]	@ (800a4f4 <HAL_DMA_IRQHandler+0xcb0>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d128      	bne.n	800a4f8 <HAL_DMA_IRQHandler+0xcb4>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f022 0214 	bic.w	r2, r2, #20
 800a4b4:	601a      	str	r2, [r3, #0]
 800a4b6:	e027      	b.n	800a508 <HAL_DMA_IRQHandler+0xcc4>
 800a4b8:	40020010 	.word	0x40020010
 800a4bc:	40020028 	.word	0x40020028
 800a4c0:	40020040 	.word	0x40020040
 800a4c4:	40020058 	.word	0x40020058
 800a4c8:	40020070 	.word	0x40020070
 800a4cc:	40020088 	.word	0x40020088
 800a4d0:	400200a0 	.word	0x400200a0
 800a4d4:	400200b8 	.word	0x400200b8
 800a4d8:	40020410 	.word	0x40020410
 800a4dc:	40020428 	.word	0x40020428
 800a4e0:	40020440 	.word	0x40020440
 800a4e4:	40020458 	.word	0x40020458
 800a4e8:	40020470 	.word	0x40020470
 800a4ec:	40020488 	.word	0x40020488
 800a4f0:	400204a0 	.word	0x400204a0
 800a4f4:	400204b8 	.word	0x400204b8
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f022 020a 	bic.w	r2, r2, #10
 800a506:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 8097 	beq.w	800a650 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a52a:	e091      	b.n	800a650 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a530:	f003 031f 	and.w	r3, r3, #31
 800a534:	2208      	movs	r2, #8
 800a536:	409a      	lsls	r2, r3
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	4013      	ands	r3, r2
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 8088 	beq.w	800a652 <HAL_DMA_IRQHandler+0xe0e>
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	f003 0308 	and.w	r3, r3, #8
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 8082 	beq.w	800a652 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a41      	ldr	r2, [pc, #260]	@ (800a658 <HAL_DMA_IRQHandler+0xe14>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d04a      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a3f      	ldr	r2, [pc, #252]	@ (800a65c <HAL_DMA_IRQHandler+0xe18>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d045      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a3e      	ldr	r2, [pc, #248]	@ (800a660 <HAL_DMA_IRQHandler+0xe1c>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d040      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a3c      	ldr	r2, [pc, #240]	@ (800a664 <HAL_DMA_IRQHandler+0xe20>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d03b      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a3b      	ldr	r2, [pc, #236]	@ (800a668 <HAL_DMA_IRQHandler+0xe24>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d036      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a39      	ldr	r2, [pc, #228]	@ (800a66c <HAL_DMA_IRQHandler+0xe28>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d031      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a38      	ldr	r2, [pc, #224]	@ (800a670 <HAL_DMA_IRQHandler+0xe2c>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d02c      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a36      	ldr	r2, [pc, #216]	@ (800a674 <HAL_DMA_IRQHandler+0xe30>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d027      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a35      	ldr	r2, [pc, #212]	@ (800a678 <HAL_DMA_IRQHandler+0xe34>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d022      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a33      	ldr	r2, [pc, #204]	@ (800a67c <HAL_DMA_IRQHandler+0xe38>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d01d      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a32      	ldr	r2, [pc, #200]	@ (800a680 <HAL_DMA_IRQHandler+0xe3c>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d018      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a30      	ldr	r2, [pc, #192]	@ (800a684 <HAL_DMA_IRQHandler+0xe40>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d013      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a2f      	ldr	r2, [pc, #188]	@ (800a688 <HAL_DMA_IRQHandler+0xe44>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d00e      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a2d      	ldr	r2, [pc, #180]	@ (800a68c <HAL_DMA_IRQHandler+0xe48>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d009      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a2c      	ldr	r2, [pc, #176]	@ (800a690 <HAL_DMA_IRQHandler+0xe4c>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d004      	beq.n	800a5ee <HAL_DMA_IRQHandler+0xdaa>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a2a      	ldr	r2, [pc, #168]	@ (800a694 <HAL_DMA_IRQHandler+0xe50>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d108      	bne.n	800a600 <HAL_DMA_IRQHandler+0xdbc>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f022 021c 	bic.w	r2, r2, #28
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	e007      	b.n	800a610 <HAL_DMA_IRQHandler+0xdcc>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f022 020e 	bic.w	r2, r2, #14
 800a60e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a614:	f003 031f 	and.w	r3, r3, #31
 800a618:	2201      	movs	r2, #1
 800a61a:	409a      	lsls	r2, r3
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d009      	beq.n	800a652 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	4798      	blx	r3
 800a646:	e004      	b.n	800a652 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a648:	bf00      	nop
 800a64a:	e002      	b.n	800a652 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a64c:	bf00      	nop
 800a64e:	e000      	b.n	800a652 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a650:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a652:	3728      	adds	r7, #40	@ 0x28
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	40020010 	.word	0x40020010
 800a65c:	40020028 	.word	0x40020028
 800a660:	40020040 	.word	0x40020040
 800a664:	40020058 	.word	0x40020058
 800a668:	40020070 	.word	0x40020070
 800a66c:	40020088 	.word	0x40020088
 800a670:	400200a0 	.word	0x400200a0
 800a674:	400200b8 	.word	0x400200b8
 800a678:	40020410 	.word	0x40020410
 800a67c:	40020428 	.word	0x40020428
 800a680:	40020440 	.word	0x40020440
 800a684:	40020458 	.word	0x40020458
 800a688:	40020470 	.word	0x40020470
 800a68c:	40020488 	.word	0x40020488
 800a690:	400204a0 	.word	0x400204a0
 800a694:	400204b8 	.word	0x400204b8

0800a698 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
 800a6a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a7f      	ldr	r2, [pc, #508]	@ (800a8b4 <DMA_SetConfig+0x21c>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d072      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a7d      	ldr	r2, [pc, #500]	@ (800a8b8 <DMA_SetConfig+0x220>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d06d      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a7c      	ldr	r2, [pc, #496]	@ (800a8bc <DMA_SetConfig+0x224>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d068      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a7a      	ldr	r2, [pc, #488]	@ (800a8c0 <DMA_SetConfig+0x228>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d063      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a79      	ldr	r2, [pc, #484]	@ (800a8c4 <DMA_SetConfig+0x22c>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d05e      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a77      	ldr	r2, [pc, #476]	@ (800a8c8 <DMA_SetConfig+0x230>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d059      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a76      	ldr	r2, [pc, #472]	@ (800a8cc <DMA_SetConfig+0x234>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d054      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a74      	ldr	r2, [pc, #464]	@ (800a8d0 <DMA_SetConfig+0x238>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d04f      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a73      	ldr	r2, [pc, #460]	@ (800a8d4 <DMA_SetConfig+0x23c>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d04a      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a71      	ldr	r2, [pc, #452]	@ (800a8d8 <DMA_SetConfig+0x240>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d045      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a70      	ldr	r2, [pc, #448]	@ (800a8dc <DMA_SetConfig+0x244>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d040      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a6e      	ldr	r2, [pc, #440]	@ (800a8e0 <DMA_SetConfig+0x248>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d03b      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a6d      	ldr	r2, [pc, #436]	@ (800a8e4 <DMA_SetConfig+0x24c>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d036      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a6b      	ldr	r2, [pc, #428]	@ (800a8e8 <DMA_SetConfig+0x250>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d031      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a6a      	ldr	r2, [pc, #424]	@ (800a8ec <DMA_SetConfig+0x254>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d02c      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a68      	ldr	r2, [pc, #416]	@ (800a8f0 <DMA_SetConfig+0x258>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d027      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a67      	ldr	r2, [pc, #412]	@ (800a8f4 <DMA_SetConfig+0x25c>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d022      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a65      	ldr	r2, [pc, #404]	@ (800a8f8 <DMA_SetConfig+0x260>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d01d      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a64      	ldr	r2, [pc, #400]	@ (800a8fc <DMA_SetConfig+0x264>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d018      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a62      	ldr	r2, [pc, #392]	@ (800a900 <DMA_SetConfig+0x268>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d013      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a61      	ldr	r2, [pc, #388]	@ (800a904 <DMA_SetConfig+0x26c>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d00e      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a5f      	ldr	r2, [pc, #380]	@ (800a908 <DMA_SetConfig+0x270>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d009      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a5e      	ldr	r2, [pc, #376]	@ (800a90c <DMA_SetConfig+0x274>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d004      	beq.n	800a7a2 <DMA_SetConfig+0x10a>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a5c      	ldr	r2, [pc, #368]	@ (800a910 <DMA_SetConfig+0x278>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d101      	bne.n	800a7a6 <DMA_SetConfig+0x10e>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e000      	b.n	800a7a8 <DMA_SetConfig+0x110>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00d      	beq.n	800a7c8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a7b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d004      	beq.n	800a7c8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a7c6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a39      	ldr	r2, [pc, #228]	@ (800a8b4 <DMA_SetConfig+0x21c>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d04a      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a38      	ldr	r2, [pc, #224]	@ (800a8b8 <DMA_SetConfig+0x220>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d045      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a36      	ldr	r2, [pc, #216]	@ (800a8bc <DMA_SetConfig+0x224>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d040      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a35      	ldr	r2, [pc, #212]	@ (800a8c0 <DMA_SetConfig+0x228>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d03b      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a33      	ldr	r2, [pc, #204]	@ (800a8c4 <DMA_SetConfig+0x22c>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d036      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a32      	ldr	r2, [pc, #200]	@ (800a8c8 <DMA_SetConfig+0x230>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d031      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a30      	ldr	r2, [pc, #192]	@ (800a8cc <DMA_SetConfig+0x234>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d02c      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a2f      	ldr	r2, [pc, #188]	@ (800a8d0 <DMA_SetConfig+0x238>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d027      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a2d      	ldr	r2, [pc, #180]	@ (800a8d4 <DMA_SetConfig+0x23c>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d022      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a2c      	ldr	r2, [pc, #176]	@ (800a8d8 <DMA_SetConfig+0x240>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d01d      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a2a      	ldr	r2, [pc, #168]	@ (800a8dc <DMA_SetConfig+0x244>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d018      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a29      	ldr	r2, [pc, #164]	@ (800a8e0 <DMA_SetConfig+0x248>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d013      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a27      	ldr	r2, [pc, #156]	@ (800a8e4 <DMA_SetConfig+0x24c>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d00e      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a26      	ldr	r2, [pc, #152]	@ (800a8e8 <DMA_SetConfig+0x250>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d009      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a24      	ldr	r2, [pc, #144]	@ (800a8ec <DMA_SetConfig+0x254>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d004      	beq.n	800a868 <DMA_SetConfig+0x1d0>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a23      	ldr	r2, [pc, #140]	@ (800a8f0 <DMA_SetConfig+0x258>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d101      	bne.n	800a86c <DMA_SetConfig+0x1d4>
 800a868:	2301      	movs	r3, #1
 800a86a:	e000      	b.n	800a86e <DMA_SetConfig+0x1d6>
 800a86c:	2300      	movs	r3, #0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d059      	beq.n	800a926 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a876:	f003 031f 	and.w	r3, r3, #31
 800a87a:	223f      	movs	r2, #63	@ 0x3f
 800a87c:	409a      	lsls	r2, r3
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a890:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	2b40      	cmp	r3, #64	@ 0x40
 800a8a0:	d138      	bne.n	800a914 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a8b2:	e086      	b.n	800a9c2 <DMA_SetConfig+0x32a>
 800a8b4:	40020010 	.word	0x40020010
 800a8b8:	40020028 	.word	0x40020028
 800a8bc:	40020040 	.word	0x40020040
 800a8c0:	40020058 	.word	0x40020058
 800a8c4:	40020070 	.word	0x40020070
 800a8c8:	40020088 	.word	0x40020088
 800a8cc:	400200a0 	.word	0x400200a0
 800a8d0:	400200b8 	.word	0x400200b8
 800a8d4:	40020410 	.word	0x40020410
 800a8d8:	40020428 	.word	0x40020428
 800a8dc:	40020440 	.word	0x40020440
 800a8e0:	40020458 	.word	0x40020458
 800a8e4:	40020470 	.word	0x40020470
 800a8e8:	40020488 	.word	0x40020488
 800a8ec:	400204a0 	.word	0x400204a0
 800a8f0:	400204b8 	.word	0x400204b8
 800a8f4:	58025408 	.word	0x58025408
 800a8f8:	5802541c 	.word	0x5802541c
 800a8fc:	58025430 	.word	0x58025430
 800a900:	58025444 	.word	0x58025444
 800a904:	58025458 	.word	0x58025458
 800a908:	5802546c 	.word	0x5802546c
 800a90c:	58025480 	.word	0x58025480
 800a910:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	60da      	str	r2, [r3, #12]
}
 800a924:	e04d      	b.n	800a9c2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a29      	ldr	r2, [pc, #164]	@ (800a9d0 <DMA_SetConfig+0x338>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d022      	beq.n	800a976 <DMA_SetConfig+0x2de>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a27      	ldr	r2, [pc, #156]	@ (800a9d4 <DMA_SetConfig+0x33c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d01d      	beq.n	800a976 <DMA_SetConfig+0x2de>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a26      	ldr	r2, [pc, #152]	@ (800a9d8 <DMA_SetConfig+0x340>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d018      	beq.n	800a976 <DMA_SetConfig+0x2de>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a24      	ldr	r2, [pc, #144]	@ (800a9dc <DMA_SetConfig+0x344>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d013      	beq.n	800a976 <DMA_SetConfig+0x2de>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a23      	ldr	r2, [pc, #140]	@ (800a9e0 <DMA_SetConfig+0x348>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d00e      	beq.n	800a976 <DMA_SetConfig+0x2de>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a21      	ldr	r2, [pc, #132]	@ (800a9e4 <DMA_SetConfig+0x34c>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d009      	beq.n	800a976 <DMA_SetConfig+0x2de>
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a20      	ldr	r2, [pc, #128]	@ (800a9e8 <DMA_SetConfig+0x350>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d004      	beq.n	800a976 <DMA_SetConfig+0x2de>
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a1e      	ldr	r2, [pc, #120]	@ (800a9ec <DMA_SetConfig+0x354>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d101      	bne.n	800a97a <DMA_SetConfig+0x2e2>
 800a976:	2301      	movs	r3, #1
 800a978:	e000      	b.n	800a97c <DMA_SetConfig+0x2e4>
 800a97a:	2300      	movs	r3, #0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d020      	beq.n	800a9c2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a984:	f003 031f 	and.w	r3, r3, #31
 800a988:	2201      	movs	r2, #1
 800a98a:	409a      	lsls	r2, r3
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	2b40      	cmp	r3, #64	@ 0x40
 800a99e:	d108      	bne.n	800a9b2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	60da      	str	r2, [r3, #12]
}
 800a9b0:	e007      	b.n	800a9c2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	60da      	str	r2, [r3, #12]
}
 800a9c2:	bf00      	nop
 800a9c4:	371c      	adds	r7, #28
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	58025408 	.word	0x58025408
 800a9d4:	5802541c 	.word	0x5802541c
 800a9d8:	58025430 	.word	0x58025430
 800a9dc:	58025444 	.word	0x58025444
 800a9e0:	58025458 	.word	0x58025458
 800a9e4:	5802546c 	.word	0x5802546c
 800a9e8:	58025480 	.word	0x58025480
 800a9ec:	58025494 	.word	0x58025494

0800a9f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a42      	ldr	r2, [pc, #264]	@ (800ab08 <DMA_CalcBaseAndBitshift+0x118>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d04a      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a41      	ldr	r2, [pc, #260]	@ (800ab0c <DMA_CalcBaseAndBitshift+0x11c>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d045      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a3f      	ldr	r2, [pc, #252]	@ (800ab10 <DMA_CalcBaseAndBitshift+0x120>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d040      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a3e      	ldr	r2, [pc, #248]	@ (800ab14 <DMA_CalcBaseAndBitshift+0x124>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d03b      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a3c      	ldr	r2, [pc, #240]	@ (800ab18 <DMA_CalcBaseAndBitshift+0x128>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d036      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a3b      	ldr	r2, [pc, #236]	@ (800ab1c <DMA_CalcBaseAndBitshift+0x12c>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d031      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a39      	ldr	r2, [pc, #228]	@ (800ab20 <DMA_CalcBaseAndBitshift+0x130>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d02c      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a38      	ldr	r2, [pc, #224]	@ (800ab24 <DMA_CalcBaseAndBitshift+0x134>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d027      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a36      	ldr	r2, [pc, #216]	@ (800ab28 <DMA_CalcBaseAndBitshift+0x138>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d022      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a35      	ldr	r2, [pc, #212]	@ (800ab2c <DMA_CalcBaseAndBitshift+0x13c>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d01d      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a33      	ldr	r2, [pc, #204]	@ (800ab30 <DMA_CalcBaseAndBitshift+0x140>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d018      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a32      	ldr	r2, [pc, #200]	@ (800ab34 <DMA_CalcBaseAndBitshift+0x144>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d013      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a30      	ldr	r2, [pc, #192]	@ (800ab38 <DMA_CalcBaseAndBitshift+0x148>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d00e      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a2f      	ldr	r2, [pc, #188]	@ (800ab3c <DMA_CalcBaseAndBitshift+0x14c>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d009      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a2d      	ldr	r2, [pc, #180]	@ (800ab40 <DMA_CalcBaseAndBitshift+0x150>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d004      	beq.n	800aa98 <DMA_CalcBaseAndBitshift+0xa8>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a2c      	ldr	r2, [pc, #176]	@ (800ab44 <DMA_CalcBaseAndBitshift+0x154>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d101      	bne.n	800aa9c <DMA_CalcBaseAndBitshift+0xac>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e000      	b.n	800aa9e <DMA_CalcBaseAndBitshift+0xae>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d024      	beq.n	800aaec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	3b10      	subs	r3, #16
 800aaaa:	4a27      	ldr	r2, [pc, #156]	@ (800ab48 <DMA_CalcBaseAndBitshift+0x158>)
 800aaac:	fba2 2303 	umull	r2, r3, r2, r3
 800aab0:	091b      	lsrs	r3, r3, #4
 800aab2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f003 0307 	and.w	r3, r3, #7
 800aaba:	4a24      	ldr	r2, [pc, #144]	@ (800ab4c <DMA_CalcBaseAndBitshift+0x15c>)
 800aabc:	5cd3      	ldrb	r3, [r2, r3]
 800aabe:	461a      	mov	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b03      	cmp	r3, #3
 800aac8:	d908      	bls.n	800aadc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	461a      	mov	r2, r3
 800aad0:	4b1f      	ldr	r3, [pc, #124]	@ (800ab50 <DMA_CalcBaseAndBitshift+0x160>)
 800aad2:	4013      	ands	r3, r2
 800aad4:	1d1a      	adds	r2, r3, #4
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	659a      	str	r2, [r3, #88]	@ 0x58
 800aada:	e00d      	b.n	800aaf8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	461a      	mov	r2, r3
 800aae2:	4b1b      	ldr	r3, [pc, #108]	@ (800ab50 <DMA_CalcBaseAndBitshift+0x160>)
 800aae4:	4013      	ands	r3, r2
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	6593      	str	r3, [r2, #88]	@ 0x58
 800aaea:	e005      	b.n	800aaf8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr
 800ab08:	40020010 	.word	0x40020010
 800ab0c:	40020028 	.word	0x40020028
 800ab10:	40020040 	.word	0x40020040
 800ab14:	40020058 	.word	0x40020058
 800ab18:	40020070 	.word	0x40020070
 800ab1c:	40020088 	.word	0x40020088
 800ab20:	400200a0 	.word	0x400200a0
 800ab24:	400200b8 	.word	0x400200b8
 800ab28:	40020410 	.word	0x40020410
 800ab2c:	40020428 	.word	0x40020428
 800ab30:	40020440 	.word	0x40020440
 800ab34:	40020458 	.word	0x40020458
 800ab38:	40020470 	.word	0x40020470
 800ab3c:	40020488 	.word	0x40020488
 800ab40:	400204a0 	.word	0x400204a0
 800ab44:	400204b8 	.word	0x400204b8
 800ab48:	aaaaaaab 	.word	0xaaaaaaab
 800ab4c:	0801d770 	.word	0x0801d770
 800ab50:	fffffc00 	.word	0xfffffc00

0800ab54 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d120      	bne.n	800abaa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d858      	bhi.n	800ac22 <DMA_CheckFifoParam+0xce>
 800ab70:	a201      	add	r2, pc, #4	@ (adr r2, 800ab78 <DMA_CheckFifoParam+0x24>)
 800ab72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab76:	bf00      	nop
 800ab78:	0800ab89 	.word	0x0800ab89
 800ab7c:	0800ab9b 	.word	0x0800ab9b
 800ab80:	0800ab89 	.word	0x0800ab89
 800ab84:	0800ac23 	.word	0x0800ac23
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d048      	beq.n	800ac26 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ab98:	e045      	b.n	800ac26 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab9e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800aba2:	d142      	bne.n	800ac2a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800aba8:	e03f      	b.n	800ac2a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abb2:	d123      	bne.n	800abfc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d838      	bhi.n	800ac2e <DMA_CheckFifoParam+0xda>
 800abbc:	a201      	add	r2, pc, #4	@ (adr r2, 800abc4 <DMA_CheckFifoParam+0x70>)
 800abbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc2:	bf00      	nop
 800abc4:	0800abd5 	.word	0x0800abd5
 800abc8:	0800abdb 	.word	0x0800abdb
 800abcc:	0800abd5 	.word	0x0800abd5
 800abd0:	0800abed 	.word	0x0800abed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	73fb      	strb	r3, [r7, #15]
        break;
 800abd8:	e030      	b.n	800ac3c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d025      	beq.n	800ac32 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800abea:	e022      	b.n	800ac32 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800abf4:	d11f      	bne.n	800ac36 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800abfa:	e01c      	b.n	800ac36 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d902      	bls.n	800ac0a <DMA_CheckFifoParam+0xb6>
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	d003      	beq.n	800ac10 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800ac08:	e018      	b.n	800ac3c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	73fb      	strb	r3, [r7, #15]
        break;
 800ac0e:	e015      	b.n	800ac3c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00e      	beq.n	800ac3a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac20:	e00b      	b.n	800ac3a <DMA_CheckFifoParam+0xe6>
        break;
 800ac22:	bf00      	nop
 800ac24:	e00a      	b.n	800ac3c <DMA_CheckFifoParam+0xe8>
        break;
 800ac26:	bf00      	nop
 800ac28:	e008      	b.n	800ac3c <DMA_CheckFifoParam+0xe8>
        break;
 800ac2a:	bf00      	nop
 800ac2c:	e006      	b.n	800ac3c <DMA_CheckFifoParam+0xe8>
        break;
 800ac2e:	bf00      	nop
 800ac30:	e004      	b.n	800ac3c <DMA_CheckFifoParam+0xe8>
        break;
 800ac32:	bf00      	nop
 800ac34:	e002      	b.n	800ac3c <DMA_CheckFifoParam+0xe8>
        break;
 800ac36:	bf00      	nop
 800ac38:	e000      	b.n	800ac3c <DMA_CheckFifoParam+0xe8>
    break;
 800ac3a:	bf00      	nop
    }
  }

  return status;
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop

0800ac4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a38      	ldr	r2, [pc, #224]	@ (800ad40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d022      	beq.n	800acaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a36      	ldr	r2, [pc, #216]	@ (800ad44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d01d      	beq.n	800acaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a35      	ldr	r2, [pc, #212]	@ (800ad48 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d018      	beq.n	800acaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a33      	ldr	r2, [pc, #204]	@ (800ad4c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d013      	beq.n	800acaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a32      	ldr	r2, [pc, #200]	@ (800ad50 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d00e      	beq.n	800acaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a30      	ldr	r2, [pc, #192]	@ (800ad54 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d009      	beq.n	800acaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a2f      	ldr	r2, [pc, #188]	@ (800ad58 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d004      	beq.n	800acaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a2d      	ldr	r2, [pc, #180]	@ (800ad5c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d101      	bne.n	800acae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800acaa:	2301      	movs	r3, #1
 800acac:	e000      	b.n	800acb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800acae:	2300      	movs	r3, #0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d01a      	beq.n	800acea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	3b08      	subs	r3, #8
 800acbc:	4a28      	ldr	r2, [pc, #160]	@ (800ad60 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800acbe:	fba2 2303 	umull	r2, r3, r2, r3
 800acc2:	091b      	lsrs	r3, r3, #4
 800acc4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	4b26      	ldr	r3, [pc, #152]	@ (800ad64 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800acca:	4413      	add	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	461a      	mov	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a24      	ldr	r2, [pc, #144]	@ (800ad68 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800acd8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f003 031f 	and.w	r3, r3, #31
 800ace0:	2201      	movs	r2, #1
 800ace2:	409a      	lsls	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800ace8:	e024      	b.n	800ad34 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	3b10      	subs	r3, #16
 800acf2:	4a1e      	ldr	r2, [pc, #120]	@ (800ad6c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800acf4:	fba2 2303 	umull	r2, r3, r2, r3
 800acf8:	091b      	lsrs	r3, r3, #4
 800acfa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	4a1c      	ldr	r2, [pc, #112]	@ (800ad70 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d806      	bhi.n	800ad12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	4a1b      	ldr	r2, [pc, #108]	@ (800ad74 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d902      	bls.n	800ad12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	3308      	adds	r3, #8
 800ad10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	4b18      	ldr	r3, [pc, #96]	@ (800ad78 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800ad16:	4413      	add	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a16      	ldr	r2, [pc, #88]	@ (800ad7c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800ad24:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f003 031f 	and.w	r3, r3, #31
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	409a      	lsls	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ad34:	bf00      	nop
 800ad36:	3714      	adds	r7, #20
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	58025408 	.word	0x58025408
 800ad44:	5802541c 	.word	0x5802541c
 800ad48:	58025430 	.word	0x58025430
 800ad4c:	58025444 	.word	0x58025444
 800ad50:	58025458 	.word	0x58025458
 800ad54:	5802546c 	.word	0x5802546c
 800ad58:	58025480 	.word	0x58025480
 800ad5c:	58025494 	.word	0x58025494
 800ad60:	cccccccd 	.word	0xcccccccd
 800ad64:	16009600 	.word	0x16009600
 800ad68:	58025880 	.word	0x58025880
 800ad6c:	aaaaaaab 	.word	0xaaaaaaab
 800ad70:	400204b8 	.word	0x400204b8
 800ad74:	4002040f 	.word	0x4002040f
 800ad78:	10008200 	.word	0x10008200
 800ad7c:	40020880 	.word	0x40020880

0800ad80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d04a      	beq.n	800ae2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2b08      	cmp	r3, #8
 800ad9a:	d847      	bhi.n	800ae2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a25      	ldr	r2, [pc, #148]	@ (800ae38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d022      	beq.n	800adec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a24      	ldr	r2, [pc, #144]	@ (800ae3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d01d      	beq.n	800adec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a22      	ldr	r2, [pc, #136]	@ (800ae40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d018      	beq.n	800adec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a21      	ldr	r2, [pc, #132]	@ (800ae44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d013      	beq.n	800adec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a1f      	ldr	r2, [pc, #124]	@ (800ae48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d00e      	beq.n	800adec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a1e      	ldr	r2, [pc, #120]	@ (800ae4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d009      	beq.n	800adec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a1c      	ldr	r2, [pc, #112]	@ (800ae50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d004      	beq.n	800adec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a1b      	ldr	r2, [pc, #108]	@ (800ae54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d101      	bne.n	800adf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800adec:	2301      	movs	r3, #1
 800adee:	e000      	b.n	800adf2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800adf0:	2300      	movs	r3, #0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00a      	beq.n	800ae0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	4b17      	ldr	r3, [pc, #92]	@ (800ae58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800adfa:	4413      	add	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	461a      	mov	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a15      	ldr	r2, [pc, #84]	@ (800ae5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800ae08:	671a      	str	r2, [r3, #112]	@ 0x70
 800ae0a:	e009      	b.n	800ae20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	4b14      	ldr	r3, [pc, #80]	@ (800ae60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800ae10:	4413      	add	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	461a      	mov	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4a11      	ldr	r2, [pc, #68]	@ (800ae64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800ae1e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	3b01      	subs	r3, #1
 800ae24:	2201      	movs	r2, #1
 800ae26:	409a      	lsls	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800ae2c:	bf00      	nop
 800ae2e:	3714      	adds	r7, #20
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr
 800ae38:	58025408 	.word	0x58025408
 800ae3c:	5802541c 	.word	0x5802541c
 800ae40:	58025430 	.word	0x58025430
 800ae44:	58025444 	.word	0x58025444
 800ae48:	58025458 	.word	0x58025458
 800ae4c:	5802546c 	.word	0x5802546c
 800ae50:	58025480 	.word	0x58025480
 800ae54:	58025494 	.word	0x58025494
 800ae58:	1600963f 	.word	0x1600963f
 800ae5c:	58025940 	.word	0x58025940
 800ae60:	1000823f 	.word	0x1000823f
 800ae64:	40020940 	.word	0x40020940

0800ae68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b089      	sub	sp, #36	@ 0x24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ae72:	2300      	movs	r3, #0
 800ae74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ae76:	4b86      	ldr	r3, [pc, #536]	@ (800b090 <HAL_GPIO_Init+0x228>)
 800ae78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ae7a:	e18c      	b.n	800b196 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	2101      	movs	r1, #1
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	fa01 f303 	lsl.w	r3, r1, r3
 800ae88:	4013      	ands	r3, r2
 800ae8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f000 817e 	beq.w	800b190 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	f003 0303 	and.w	r3, r3, #3
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d005      	beq.n	800aeac <HAL_GPIO_Init+0x44>
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f003 0303 	and.w	r3, r3, #3
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d130      	bne.n	800af0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	2203      	movs	r2, #3
 800aeb8:	fa02 f303 	lsl.w	r3, r2, r3
 800aebc:	43db      	mvns	r3, r3
 800aebe:	69ba      	ldr	r2, [r7, #24]
 800aec0:	4013      	ands	r3, r2
 800aec2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	68da      	ldr	r2, [r3, #12]
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	fa02 f303 	lsl.w	r3, r2, r3
 800aed0:	69ba      	ldr	r2, [r7, #24]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	69ba      	ldr	r2, [r7, #24]
 800aeda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800aee2:	2201      	movs	r2, #1
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeea:	43db      	mvns	r3, r3
 800aeec:	69ba      	ldr	r2, [r7, #24]
 800aeee:	4013      	ands	r3, r2
 800aef0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	091b      	lsrs	r3, r3, #4
 800aef8:	f003 0201 	and.w	r2, r3, #1
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	fa02 f303 	lsl.w	r3, r2, r3
 800af02:	69ba      	ldr	r2, [r7, #24]
 800af04:	4313      	orrs	r3, r2
 800af06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	69ba      	ldr	r2, [r7, #24]
 800af0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	f003 0303 	and.w	r3, r3, #3
 800af16:	2b03      	cmp	r3, #3
 800af18:	d017      	beq.n	800af4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	005b      	lsls	r3, r3, #1
 800af24:	2203      	movs	r2, #3
 800af26:	fa02 f303 	lsl.w	r3, r2, r3
 800af2a:	43db      	mvns	r3, r3
 800af2c:	69ba      	ldr	r2, [r7, #24]
 800af2e:	4013      	ands	r3, r2
 800af30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	689a      	ldr	r2, [r3, #8]
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	005b      	lsls	r3, r3, #1
 800af3a:	fa02 f303 	lsl.w	r3, r2, r3
 800af3e:	69ba      	ldr	r2, [r7, #24]
 800af40:	4313      	orrs	r3, r2
 800af42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	69ba      	ldr	r2, [r7, #24]
 800af48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	f003 0303 	and.w	r3, r3, #3
 800af52:	2b02      	cmp	r3, #2
 800af54:	d123      	bne.n	800af9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	08da      	lsrs	r2, r3, #3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	3208      	adds	r2, #8
 800af5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	f003 0307 	and.w	r3, r3, #7
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	220f      	movs	r2, #15
 800af6e:	fa02 f303 	lsl.w	r3, r2, r3
 800af72:	43db      	mvns	r3, r3
 800af74:	69ba      	ldr	r2, [r7, #24]
 800af76:	4013      	ands	r3, r2
 800af78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	691a      	ldr	r2, [r3, #16]
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	f003 0307 	and.w	r3, r3, #7
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	fa02 f303 	lsl.w	r3, r2, r3
 800af8a:	69ba      	ldr	r2, [r7, #24]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	08da      	lsrs	r2, r3, #3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	3208      	adds	r2, #8
 800af98:	69b9      	ldr	r1, [r7, #24]
 800af9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	005b      	lsls	r3, r3, #1
 800afa8:	2203      	movs	r2, #3
 800afaa:	fa02 f303 	lsl.w	r3, r2, r3
 800afae:	43db      	mvns	r3, r3
 800afb0:	69ba      	ldr	r2, [r7, #24]
 800afb2:	4013      	ands	r3, r2
 800afb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	f003 0203 	and.w	r2, r3, #3
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	005b      	lsls	r3, r3, #1
 800afc2:	fa02 f303 	lsl.w	r3, r2, r3
 800afc6:	69ba      	ldr	r2, [r7, #24]
 800afc8:	4313      	orrs	r3, r2
 800afca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	69ba      	ldr	r2, [r7, #24]
 800afd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800afda:	2b00      	cmp	r3, #0
 800afdc:	f000 80d8 	beq.w	800b190 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afe0:	4b2c      	ldr	r3, [pc, #176]	@ (800b094 <HAL_GPIO_Init+0x22c>)
 800afe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800afe6:	4a2b      	ldr	r2, [pc, #172]	@ (800b094 <HAL_GPIO_Init+0x22c>)
 800afe8:	f043 0302 	orr.w	r3, r3, #2
 800afec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800aff0:	4b28      	ldr	r3, [pc, #160]	@ (800b094 <HAL_GPIO_Init+0x22c>)
 800aff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aff6:	f003 0302 	and.w	r3, r3, #2
 800affa:	60fb      	str	r3, [r7, #12]
 800affc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800affe:	4a26      	ldr	r2, [pc, #152]	@ (800b098 <HAL_GPIO_Init+0x230>)
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	089b      	lsrs	r3, r3, #2
 800b004:	3302      	adds	r3, #2
 800b006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b00a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	f003 0303 	and.w	r3, r3, #3
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	220f      	movs	r2, #15
 800b016:	fa02 f303 	lsl.w	r3, r2, r3
 800b01a:	43db      	mvns	r3, r3
 800b01c:	69ba      	ldr	r2, [r7, #24]
 800b01e:	4013      	ands	r3, r2
 800b020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4a1d      	ldr	r2, [pc, #116]	@ (800b09c <HAL_GPIO_Init+0x234>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d04a      	beq.n	800b0c0 <HAL_GPIO_Init+0x258>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4a1c      	ldr	r2, [pc, #112]	@ (800b0a0 <HAL_GPIO_Init+0x238>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d02b      	beq.n	800b08a <HAL_GPIO_Init+0x222>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a1b      	ldr	r2, [pc, #108]	@ (800b0a4 <HAL_GPIO_Init+0x23c>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d025      	beq.n	800b086 <HAL_GPIO_Init+0x21e>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a1a      	ldr	r2, [pc, #104]	@ (800b0a8 <HAL_GPIO_Init+0x240>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d01f      	beq.n	800b082 <HAL_GPIO_Init+0x21a>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4a19      	ldr	r2, [pc, #100]	@ (800b0ac <HAL_GPIO_Init+0x244>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d019      	beq.n	800b07e <HAL_GPIO_Init+0x216>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a18      	ldr	r2, [pc, #96]	@ (800b0b0 <HAL_GPIO_Init+0x248>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d013      	beq.n	800b07a <HAL_GPIO_Init+0x212>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a17      	ldr	r2, [pc, #92]	@ (800b0b4 <HAL_GPIO_Init+0x24c>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d00d      	beq.n	800b076 <HAL_GPIO_Init+0x20e>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a16      	ldr	r2, [pc, #88]	@ (800b0b8 <HAL_GPIO_Init+0x250>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d007      	beq.n	800b072 <HAL_GPIO_Init+0x20a>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4a15      	ldr	r2, [pc, #84]	@ (800b0bc <HAL_GPIO_Init+0x254>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d101      	bne.n	800b06e <HAL_GPIO_Init+0x206>
 800b06a:	2309      	movs	r3, #9
 800b06c:	e029      	b.n	800b0c2 <HAL_GPIO_Init+0x25a>
 800b06e:	230a      	movs	r3, #10
 800b070:	e027      	b.n	800b0c2 <HAL_GPIO_Init+0x25a>
 800b072:	2307      	movs	r3, #7
 800b074:	e025      	b.n	800b0c2 <HAL_GPIO_Init+0x25a>
 800b076:	2306      	movs	r3, #6
 800b078:	e023      	b.n	800b0c2 <HAL_GPIO_Init+0x25a>
 800b07a:	2305      	movs	r3, #5
 800b07c:	e021      	b.n	800b0c2 <HAL_GPIO_Init+0x25a>
 800b07e:	2304      	movs	r3, #4
 800b080:	e01f      	b.n	800b0c2 <HAL_GPIO_Init+0x25a>
 800b082:	2303      	movs	r3, #3
 800b084:	e01d      	b.n	800b0c2 <HAL_GPIO_Init+0x25a>
 800b086:	2302      	movs	r3, #2
 800b088:	e01b      	b.n	800b0c2 <HAL_GPIO_Init+0x25a>
 800b08a:	2301      	movs	r3, #1
 800b08c:	e019      	b.n	800b0c2 <HAL_GPIO_Init+0x25a>
 800b08e:	bf00      	nop
 800b090:	58000080 	.word	0x58000080
 800b094:	58024400 	.word	0x58024400
 800b098:	58000400 	.word	0x58000400
 800b09c:	58020000 	.word	0x58020000
 800b0a0:	58020400 	.word	0x58020400
 800b0a4:	58020800 	.word	0x58020800
 800b0a8:	58020c00 	.word	0x58020c00
 800b0ac:	58021000 	.word	0x58021000
 800b0b0:	58021400 	.word	0x58021400
 800b0b4:	58021800 	.word	0x58021800
 800b0b8:	58021c00 	.word	0x58021c00
 800b0bc:	58022400 	.word	0x58022400
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	69fa      	ldr	r2, [r7, #28]
 800b0c4:	f002 0203 	and.w	r2, r2, #3
 800b0c8:	0092      	lsls	r2, r2, #2
 800b0ca:	4093      	lsls	r3, r2
 800b0cc:	69ba      	ldr	r2, [r7, #24]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b0d2:	4938      	ldr	r1, [pc, #224]	@ (800b1b4 <HAL_GPIO_Init+0x34c>)
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	089b      	lsrs	r3, r3, #2
 800b0d8:	3302      	adds	r3, #2
 800b0da:	69ba      	ldr	r2, [r7, #24]
 800b0dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b0e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	43db      	mvns	r3, r3
 800b0ec:	69ba      	ldr	r2, [r7, #24]
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d003      	beq.n	800b106 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b0fe:	69ba      	ldr	r2, [r7, #24]
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	4313      	orrs	r3, r2
 800b104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b106:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b10e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	43db      	mvns	r3, r3
 800b11a:	69ba      	ldr	r2, [r7, #24]
 800b11c:	4013      	ands	r3, r2
 800b11e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b12c:	69ba      	ldr	r2, [r7, #24]
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	4313      	orrs	r3, r2
 800b132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b134:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	43db      	mvns	r3, r3
 800b146:	69ba      	ldr	r2, [r7, #24]
 800b148:	4013      	ands	r3, r2
 800b14a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b154:	2b00      	cmp	r3, #0
 800b156:	d003      	beq.n	800b160 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b158:	69ba      	ldr	r2, [r7, #24]
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	4313      	orrs	r3, r2
 800b15e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	69ba      	ldr	r2, [r7, #24]
 800b164:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	43db      	mvns	r3, r3
 800b170:	69ba      	ldr	r2, [r7, #24]
 800b172:	4013      	ands	r3, r2
 800b174:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d003      	beq.n	800b18a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b182:	69ba      	ldr	r2, [r7, #24]
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	4313      	orrs	r3, r2
 800b188:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	69ba      	ldr	r2, [r7, #24]
 800b18e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	3301      	adds	r3, #1
 800b194:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	fa22 f303 	lsr.w	r3, r2, r3
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f47f ae6b 	bne.w	800ae7c <HAL_GPIO_Init+0x14>
  }
}
 800b1a6:	bf00      	nop
 800b1a8:	bf00      	nop
 800b1aa:	3724      	adds	r7, #36	@ 0x24
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr
 800b1b4:	58000400 	.word	0x58000400

0800b1b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	691a      	ldr	r2, [r3, #16]
 800b1c8:	887b      	ldrh	r3, [r7, #2]
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d002      	beq.n	800b1d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	73fb      	strb	r3, [r7, #15]
 800b1d4:	e001      	b.n	800b1da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3714      	adds	r7, #20
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	807b      	strh	r3, [r7, #2]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b1f8:	787b      	ldrb	r3, [r7, #1]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d003      	beq.n	800b206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b1fe:	887a      	ldrh	r2, [r7, #2]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b204:	e003      	b.n	800b20e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b206:	887b      	ldrh	r3, [r7, #2]
 800b208:	041a      	lsls	r2, r3, #16
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	619a      	str	r2, [r3, #24]
}
 800b20e:	bf00      	nop
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b082      	sub	sp, #8
 800b21e:	af00      	add	r7, sp, #0
 800b220:	4603      	mov	r3, r0
 800b222:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800b224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b228:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b22c:	88fb      	ldrh	r3, [r7, #6]
 800b22e:	4013      	ands	r3, r2
 800b230:	2b00      	cmp	r3, #0
 800b232:	d008      	beq.n	800b246 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b234:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b238:	88fb      	ldrh	r3, [r7, #6]
 800b23a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b23e:	88fb      	ldrh	r3, [r7, #6]
 800b240:	4618      	mov	r0, r3
 800b242:	f7f6 f80d 	bl	8001260 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800b246:	bf00      	nop
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
	...

0800b250 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	e08b      	b.n	800b37a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d106      	bne.n	800b27c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f7f7 f94c 	bl	8002514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2224      	movs	r2, #36	@ 0x24
 800b280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f022 0201 	bic.w	r2, r2, #1
 800b292:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685a      	ldr	r2, [r3, #4]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b2a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	689a      	ldr	r2, [r3, #8]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b2b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d107      	bne.n	800b2ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	689a      	ldr	r2, [r3, #8]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b2c6:	609a      	str	r2, [r3, #8]
 800b2c8:	e006      	b.n	800b2d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	689a      	ldr	r2, [r3, #8]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b2d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d108      	bne.n	800b2f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b2ee:	605a      	str	r2, [r3, #4]
 800b2f0:	e007      	b.n	800b302 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	685a      	ldr	r2, [r3, #4]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b300:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6859      	ldr	r1, [r3, #4]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	4b1d      	ldr	r3, [pc, #116]	@ (800b384 <HAL_I2C_Init+0x134>)
 800b30e:	430b      	orrs	r3, r1
 800b310:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68da      	ldr	r2, [r3, #12]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b320:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	691a      	ldr	r2, [r3, #16]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	430a      	orrs	r2, r1
 800b33a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	69d9      	ldr	r1, [r3, #28]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a1a      	ldr	r2, [r3, #32]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	430a      	orrs	r2, r1
 800b34a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f042 0201 	orr.w	r2, r2, #1
 800b35a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2220      	movs	r2, #32
 800b366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	02008000 	.word	0x02008000

0800b388 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	2b20      	cmp	r3, #32
 800b39c:	d138      	bne.n	800b410 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d101      	bne.n	800b3ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	e032      	b.n	800b412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2224      	movs	r2, #36	@ 0x24
 800b3b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f022 0201 	bic.w	r2, r2, #1
 800b3ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b3da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6819      	ldr	r1, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	430a      	orrs	r2, r1
 800b3ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f042 0201 	orr.w	r2, r2, #1
 800b3fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2220      	movs	r2, #32
 800b400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	e000      	b.n	800b412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b410:	2302      	movs	r3, #2
  }
}
 800b412:	4618      	mov	r0, r3
 800b414:	370c      	adds	r7, #12
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr

0800b41e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b41e:	b480      	push	{r7}
 800b420:	b085      	sub	sp, #20
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	2b20      	cmp	r3, #32
 800b432:	d139      	bne.n	800b4a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d101      	bne.n	800b442 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b43e:	2302      	movs	r3, #2
 800b440:	e033      	b.n	800b4aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2201      	movs	r2, #1
 800b446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2224      	movs	r2, #36	@ 0x24
 800b44e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f022 0201 	bic.w	r2, r2, #1
 800b460:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b470:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	021b      	lsls	r3, r3, #8
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	4313      	orrs	r3, r2
 800b47a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f042 0201 	orr.w	r2, r2, #1
 800b492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2220      	movs	r2, #32
 800b498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	e000      	b.n	800b4aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b4a8:	2302      	movs	r3, #2
  }
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b086      	sub	sp, #24
 800b4ba:	af02      	add	r7, sp, #8
 800b4bc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d101      	bne.n	800b4c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	e0fe      	b.n	800b6c6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d106      	bne.n	800b4e2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f00c fb5f 	bl	8017ba0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2203      	movs	r2, #3
 800b4e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f008 ff1b 	bl	801432a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6818      	ldr	r0, [r3, #0]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	7c1a      	ldrb	r2, [r3, #16]
 800b4fc:	f88d 2000 	strb.w	r2, [sp]
 800b500:	3304      	adds	r3, #4
 800b502:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b504:	f008 fdec 	bl	80140e0 <USB_CoreInit>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d005      	beq.n	800b51a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2202      	movs	r2, #2
 800b512:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	e0d5      	b.n	800b6c6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2100      	movs	r1, #0
 800b520:	4618      	mov	r0, r3
 800b522:	f008 ff13 	bl	801434c <USB_SetCurrentMode>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d005      	beq.n	800b538 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2202      	movs	r2, #2
 800b530:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	e0c6      	b.n	800b6c6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b538:	2300      	movs	r3, #0
 800b53a:	73fb      	strb	r3, [r7, #15]
 800b53c:	e04a      	b.n	800b5d4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b53e:	7bfa      	ldrb	r2, [r7, #15]
 800b540:	6879      	ldr	r1, [r7, #4]
 800b542:	4613      	mov	r3, r2
 800b544:	00db      	lsls	r3, r3, #3
 800b546:	4413      	add	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	440b      	add	r3, r1
 800b54c:	3315      	adds	r3, #21
 800b54e:	2201      	movs	r2, #1
 800b550:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b552:	7bfa      	ldrb	r2, [r7, #15]
 800b554:	6879      	ldr	r1, [r7, #4]
 800b556:	4613      	mov	r3, r2
 800b558:	00db      	lsls	r3, r3, #3
 800b55a:	4413      	add	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	440b      	add	r3, r1
 800b560:	3314      	adds	r3, #20
 800b562:	7bfa      	ldrb	r2, [r7, #15]
 800b564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b566:	7bfa      	ldrb	r2, [r7, #15]
 800b568:	7bfb      	ldrb	r3, [r7, #15]
 800b56a:	b298      	uxth	r0, r3
 800b56c:	6879      	ldr	r1, [r7, #4]
 800b56e:	4613      	mov	r3, r2
 800b570:	00db      	lsls	r3, r3, #3
 800b572:	4413      	add	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	440b      	add	r3, r1
 800b578:	332e      	adds	r3, #46	@ 0x2e
 800b57a:	4602      	mov	r2, r0
 800b57c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b57e:	7bfa      	ldrb	r2, [r7, #15]
 800b580:	6879      	ldr	r1, [r7, #4]
 800b582:	4613      	mov	r3, r2
 800b584:	00db      	lsls	r3, r3, #3
 800b586:	4413      	add	r3, r2
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	440b      	add	r3, r1
 800b58c:	3318      	adds	r3, #24
 800b58e:	2200      	movs	r2, #0
 800b590:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b592:	7bfa      	ldrb	r2, [r7, #15]
 800b594:	6879      	ldr	r1, [r7, #4]
 800b596:	4613      	mov	r3, r2
 800b598:	00db      	lsls	r3, r3, #3
 800b59a:	4413      	add	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	440b      	add	r3, r1
 800b5a0:	331c      	adds	r3, #28
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b5a6:	7bfa      	ldrb	r2, [r7, #15]
 800b5a8:	6879      	ldr	r1, [r7, #4]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	00db      	lsls	r3, r3, #3
 800b5ae:	4413      	add	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	440b      	add	r3, r1
 800b5b4:	3320      	adds	r3, #32
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b5ba:	7bfa      	ldrb	r2, [r7, #15]
 800b5bc:	6879      	ldr	r1, [r7, #4]
 800b5be:	4613      	mov	r3, r2
 800b5c0:	00db      	lsls	r3, r3, #3
 800b5c2:	4413      	add	r3, r2
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	440b      	add	r3, r1
 800b5c8:	3324      	adds	r3, #36	@ 0x24
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	73fb      	strb	r3, [r7, #15]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	791b      	ldrb	r3, [r3, #4]
 800b5d8:	7bfa      	ldrb	r2, [r7, #15]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d3af      	bcc.n	800b53e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73fb      	strb	r3, [r7, #15]
 800b5e2:	e044      	b.n	800b66e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b5e4:	7bfa      	ldrb	r2, [r7, #15]
 800b5e6:	6879      	ldr	r1, [r7, #4]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	00db      	lsls	r3, r3, #3
 800b5ec:	4413      	add	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	440b      	add	r3, r1
 800b5f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b5fa:	7bfa      	ldrb	r2, [r7, #15]
 800b5fc:	6879      	ldr	r1, [r7, #4]
 800b5fe:	4613      	mov	r3, r2
 800b600:	00db      	lsls	r3, r3, #3
 800b602:	4413      	add	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	440b      	add	r3, r1
 800b608:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800b60c:	7bfa      	ldrb	r2, [r7, #15]
 800b60e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b610:	7bfa      	ldrb	r2, [r7, #15]
 800b612:	6879      	ldr	r1, [r7, #4]
 800b614:	4613      	mov	r3, r2
 800b616:	00db      	lsls	r3, r3, #3
 800b618:	4413      	add	r3, r2
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	440b      	add	r3, r1
 800b61e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b622:	2200      	movs	r2, #0
 800b624:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b626:	7bfa      	ldrb	r2, [r7, #15]
 800b628:	6879      	ldr	r1, [r7, #4]
 800b62a:	4613      	mov	r3, r2
 800b62c:	00db      	lsls	r3, r3, #3
 800b62e:	4413      	add	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	440b      	add	r3, r1
 800b634:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800b638:	2200      	movs	r2, #0
 800b63a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b63c:	7bfa      	ldrb	r2, [r7, #15]
 800b63e:	6879      	ldr	r1, [r7, #4]
 800b640:	4613      	mov	r3, r2
 800b642:	00db      	lsls	r3, r3, #3
 800b644:	4413      	add	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	440b      	add	r3, r1
 800b64a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b64e:	2200      	movs	r2, #0
 800b650:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b652:	7bfa      	ldrb	r2, [r7, #15]
 800b654:	6879      	ldr	r1, [r7, #4]
 800b656:	4613      	mov	r3, r2
 800b658:	00db      	lsls	r3, r3, #3
 800b65a:	4413      	add	r3, r2
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	440b      	add	r3, r1
 800b660:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b664:	2200      	movs	r2, #0
 800b666:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b668:	7bfb      	ldrb	r3, [r7, #15]
 800b66a:	3301      	adds	r3, #1
 800b66c:	73fb      	strb	r3, [r7, #15]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	791b      	ldrb	r3, [r3, #4]
 800b672:	7bfa      	ldrb	r2, [r7, #15]
 800b674:	429a      	cmp	r2, r3
 800b676:	d3b5      	bcc.n	800b5e4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6818      	ldr	r0, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	7c1a      	ldrb	r2, [r3, #16]
 800b680:	f88d 2000 	strb.w	r2, [sp]
 800b684:	3304      	adds	r3, #4
 800b686:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b688:	f008 feac 	bl	80143e4 <USB_DevInit>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d005      	beq.n	800b69e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2202      	movs	r2, #2
 800b696:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	e013      	b.n	800b6c6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	7b1b      	ldrb	r3, [r3, #12]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d102      	bne.n	800b6ba <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f001 f96d 	bl	800c994 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f009 feeb 	bl	801549a <USB_DevDisconnect>

  return HAL_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b084      	sub	sp, #16
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d101      	bne.n	800b6ea <HAL_PCD_Start+0x1c>
 800b6e6:	2302      	movs	r3, #2
 800b6e8:	e022      	b.n	800b730 <HAL_PCD_Start+0x62>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d009      	beq.n	800b712 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b702:	2b01      	cmp	r3, #1
 800b704:	d105      	bne.n	800b712 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b70a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4618      	mov	r0, r3
 800b718:	f008 fdf6 	bl	8014308 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4618      	mov	r0, r3
 800b722:	f009 fe99 	bl	8015458 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b738:	b590      	push	{r4, r7, lr}
 800b73a:	b08d      	sub	sp, #52	@ 0x34
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b746:	6a3b      	ldr	r3, [r7, #32]
 800b748:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4618      	mov	r0, r3
 800b750:	f009 ff57 	bl	8015602 <USB_GetMode>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	f040 84b9 	bne.w	800c0ce <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4618      	mov	r0, r3
 800b762:	f009 febb 	bl	80154dc <USB_ReadInterrupts>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f000 84af 	beq.w	800c0cc <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	0a1b      	lsrs	r3, r3, #8
 800b778:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4618      	mov	r0, r3
 800b788:	f009 fea8 	bl	80154dc <USB_ReadInterrupts>
 800b78c:	4603      	mov	r3, r0
 800b78e:	f003 0302 	and.w	r3, r3, #2
 800b792:	2b02      	cmp	r3, #2
 800b794:	d107      	bne.n	800b7a6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	695a      	ldr	r2, [r3, #20]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f002 0202 	and.w	r2, r2, #2
 800b7a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f009 fe96 	bl	80154dc <USB_ReadInterrupts>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f003 0310 	and.w	r3, r3, #16
 800b7b6:	2b10      	cmp	r3, #16
 800b7b8:	d161      	bne.n	800b87e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	699a      	ldr	r2, [r3, #24]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f022 0210 	bic.w	r2, r2, #16
 800b7c8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b7ca:	6a3b      	ldr	r3, [r7, #32]
 800b7cc:	6a1b      	ldr	r3, [r3, #32]
 800b7ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	f003 020f 	and.w	r2, r3, #15
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	00db      	lsls	r3, r3, #3
 800b7da:	4413      	add	r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	0c5b      	lsrs	r3, r3, #17
 800b7ee:	f003 030f 	and.w	r3, r3, #15
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d124      	bne.n	800b840 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b7f6:	69ba      	ldr	r2, [r7, #24]
 800b7f8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d035      	beq.n	800b86e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	091b      	lsrs	r3, r3, #4
 800b80a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b80c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b810:	b29b      	uxth	r3, r3
 800b812:	461a      	mov	r2, r3
 800b814:	6a38      	ldr	r0, [r7, #32]
 800b816:	f009 fccd 	bl	80151b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	68da      	ldr	r2, [r3, #12]
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	091b      	lsrs	r3, r3, #4
 800b822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b826:	441a      	add	r2, r3
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	695a      	ldr	r2, [r3, #20]
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	091b      	lsrs	r3, r3, #4
 800b834:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b838:	441a      	add	r2, r3
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	615a      	str	r2, [r3, #20]
 800b83e:	e016      	b.n	800b86e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	0c5b      	lsrs	r3, r3, #17
 800b844:	f003 030f 	and.w	r3, r3, #15
 800b848:	2b06      	cmp	r3, #6
 800b84a:	d110      	bne.n	800b86e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b852:	2208      	movs	r2, #8
 800b854:	4619      	mov	r1, r3
 800b856:	6a38      	ldr	r0, [r7, #32]
 800b858:	f009 fcac 	bl	80151b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	695a      	ldr	r2, [r3, #20]
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	091b      	lsrs	r3, r3, #4
 800b864:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b868:	441a      	add	r2, r3
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	699a      	ldr	r2, [r3, #24]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f042 0210 	orr.w	r2, r2, #16
 800b87c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4618      	mov	r0, r3
 800b884:	f009 fe2a 	bl	80154dc <USB_ReadInterrupts>
 800b888:	4603      	mov	r3, r0
 800b88a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b88e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b892:	f040 80a7 	bne.w	800b9e4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b896:	2300      	movs	r3, #0
 800b898:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f009 fe2f 	bl	8015502 <USB_ReadDevAllOutEpInterrupt>
 800b8a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b8a6:	e099      	b.n	800b9dc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8aa:	f003 0301 	and.w	r3, r3, #1
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f000 808e 	beq.w	800b9d0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8ba:	b2d2      	uxtb	r2, r2
 800b8bc:	4611      	mov	r1, r2
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f009 fe53 	bl	801556a <USB_ReadDevOutEPInterrupt>
 800b8c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f003 0301 	and.w	r3, r3, #1
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00c      	beq.n	800b8ea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d2:	015a      	lsls	r2, r3, #5
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8dc:	461a      	mov	r2, r3
 800b8de:	2301      	movs	r3, #1
 800b8e0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b8e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fecf 	bl	800c688 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	f003 0308 	and.w	r3, r3, #8
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00c      	beq.n	800b90e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f6:	015a      	lsls	r2, r3, #5
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b900:	461a      	mov	r2, r3
 800b902:	2308      	movs	r3, #8
 800b904:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b906:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 ffa5 	bl	800c858 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	f003 0310 	and.w	r3, r3, #16
 800b914:	2b00      	cmp	r3, #0
 800b916:	d008      	beq.n	800b92a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91a:	015a      	lsls	r2, r3, #5
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	4413      	add	r3, r2
 800b920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b924:	461a      	mov	r2, r3
 800b926:	2310      	movs	r3, #16
 800b928:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	f003 0302 	and.w	r3, r3, #2
 800b930:	2b00      	cmp	r3, #0
 800b932:	d030      	beq.n	800b996 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b934:	6a3b      	ldr	r3, [r7, #32]
 800b936:	695b      	ldr	r3, [r3, #20]
 800b938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b93c:	2b80      	cmp	r3, #128	@ 0x80
 800b93e:	d109      	bne.n	800b954 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	69fa      	ldr	r2, [r7, #28]
 800b94a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b94e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b952:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b956:	4613      	mov	r3, r2
 800b958:	00db      	lsls	r3, r3, #3
 800b95a:	4413      	add	r3, r2
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	4413      	add	r3, r2
 800b966:	3304      	adds	r3, #4
 800b968:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	78db      	ldrb	r3, [r3, #3]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d108      	bne.n	800b984 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	2200      	movs	r2, #0
 800b976:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	4619      	mov	r1, r3
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f00c fa06 	bl	8017d90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b986:	015a      	lsls	r2, r3, #5
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	4413      	add	r3, r2
 800b98c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b990:	461a      	mov	r2, r3
 800b992:	2302      	movs	r3, #2
 800b994:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	f003 0320 	and.w	r3, r3, #32
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d008      	beq.n	800b9b2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a2:	015a      	lsls	r2, r3, #5
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	2320      	movs	r3, #32
 800b9b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d009      	beq.n	800b9d0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9be:	015a      	lsls	r2, r3, #5
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b9ce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d8:	085b      	lsrs	r3, r3, #1
 800b9da:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f47f af62 	bne.w	800b8a8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f009 fd77 	bl	80154dc <USB_ReadInterrupts>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b9f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b9f8:	f040 80db 	bne.w	800bbb2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f009 fd98 	bl	8015536 <USB_ReadDevAllInEpInterrupt>
 800ba06:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800ba0c:	e0cd      	b.n	800bbaa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ba0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba10:	f003 0301 	and.w	r3, r3, #1
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f000 80c2 	beq.w	800bb9e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba20:	b2d2      	uxtb	r2, r2
 800ba22:	4611      	mov	r1, r2
 800ba24:	4618      	mov	r0, r3
 800ba26:	f009 fdbe 	bl	80155a6 <USB_ReadDevInEPInterrupt>
 800ba2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	f003 0301 	and.w	r3, r3, #1
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d057      	beq.n	800bae6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ba36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba38:	f003 030f 	and.w	r3, r3, #15
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba42:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	43db      	mvns	r3, r3
 800ba50:	69f9      	ldr	r1, [r7, #28]
 800ba52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ba56:	4013      	ands	r3, r2
 800ba58:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5c:	015a      	lsls	r2, r3, #5
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	4413      	add	r3, r2
 800ba62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba66:	461a      	mov	r2, r3
 800ba68:	2301      	movs	r3, #1
 800ba6a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	799b      	ldrb	r3, [r3, #6]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d132      	bne.n	800bada <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800ba74:	6879      	ldr	r1, [r7, #4]
 800ba76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba78:	4613      	mov	r3, r2
 800ba7a:	00db      	lsls	r3, r3, #3
 800ba7c:	4413      	add	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	440b      	add	r3, r1
 800ba82:	3320      	adds	r3, #32
 800ba84:	6819      	ldr	r1, [r3, #0]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	00db      	lsls	r3, r3, #3
 800ba8e:	4413      	add	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4403      	add	r3, r0
 800ba94:	331c      	adds	r3, #28
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4419      	add	r1, r3
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba9e:	4613      	mov	r3, r2
 800baa0:	00db      	lsls	r3, r3, #3
 800baa2:	4413      	add	r3, r2
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	4403      	add	r3, r0
 800baa8:	3320      	adds	r3, #32
 800baaa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800baac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d113      	bne.n	800bada <HAL_PCD_IRQHandler+0x3a2>
 800bab2:	6879      	ldr	r1, [r7, #4]
 800bab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bab6:	4613      	mov	r3, r2
 800bab8:	00db      	lsls	r3, r3, #3
 800baba:	4413      	add	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	440b      	add	r3, r1
 800bac0:	3324      	adds	r3, #36	@ 0x24
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d108      	bne.n	800bada <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6818      	ldr	r0, [r3, #0]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bad2:	461a      	mov	r2, r3
 800bad4:	2101      	movs	r1, #1
 800bad6:	f009 fdc7 	bl	8015668 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800bada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800badc:	b2db      	uxtb	r3, r3
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f00c f8d0 	bl	8017c86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	f003 0308 	and.w	r3, r3, #8
 800baec:	2b00      	cmp	r3, #0
 800baee:	d008      	beq.n	800bb02 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800baf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf2:	015a      	lsls	r2, r3, #5
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	4413      	add	r3, r2
 800baf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bafc:	461a      	mov	r2, r3
 800bafe:	2308      	movs	r3, #8
 800bb00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	f003 0310 	and.w	r3, r3, #16
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d008      	beq.n	800bb1e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0e:	015a      	lsls	r2, r3, #5
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	4413      	add	r3, r2
 800bb14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb18:	461a      	mov	r2, r3
 800bb1a:	2310      	movs	r3, #16
 800bb1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d008      	beq.n	800bb3a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800bb28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb2a:	015a      	lsls	r2, r3, #5
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	4413      	add	r3, r2
 800bb30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb34:	461a      	mov	r2, r3
 800bb36:	2340      	movs	r3, #64	@ 0x40
 800bb38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	f003 0302 	and.w	r3, r3, #2
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d023      	beq.n	800bb8c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800bb44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb46:	6a38      	ldr	r0, [r7, #32]
 800bb48:	f008 fdaa 	bl	80146a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800bb4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb4e:	4613      	mov	r3, r2
 800bb50:	00db      	lsls	r3, r3, #3
 800bb52:	4413      	add	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	3310      	adds	r3, #16
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	3304      	adds	r3, #4
 800bb5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	78db      	ldrb	r3, [r3, #3]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d108      	bne.n	800bb7a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	4619      	mov	r1, r3
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f00c f91d 	bl	8017db4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7c:	015a      	lsls	r2, r3, #5
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	4413      	add	r3, r2
 800bb82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb86:	461a      	mov	r2, r3
 800bb88:	2302      	movs	r3, #2
 800bb8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d003      	beq.n	800bb9e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800bb96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 fce8 	bl	800c56e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba0:	3301      	adds	r3, #1
 800bba2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800bba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba6:	085b      	lsrs	r3, r3, #1
 800bba8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800bbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f47f af2e 	bne.w	800ba0e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f009 fc90 	bl	80154dc <USB_ReadInterrupts>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bbc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bbc6:	d122      	bne.n	800bc0e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	69fa      	ldr	r2, [r7, #28]
 800bbd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbd6:	f023 0301 	bic.w	r3, r3, #1
 800bbda:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d108      	bne.n	800bbf8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800bbee:	2100      	movs	r1, #0
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fef3 	bl	800c9dc <HAL_PCDEx_LPM_Callback>
 800bbf6:	e002      	b.n	800bbfe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f00c f8bb 	bl	8017d74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	695a      	ldr	r2, [r3, #20]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800bc0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f009 fc62 	bl	80154dc <USB_ReadInterrupts>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc22:	d112      	bne.n	800bc4a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	f003 0301 	and.w	r3, r3, #1
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d102      	bne.n	800bc3a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f00c f877 	bl	8017d28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	695a      	ldr	r2, [r3, #20]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800bc48:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f009 fc44 	bl	80154dc <USB_ReadInterrupts>
 800bc54:	4603      	mov	r3, r0
 800bc56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc5e:	d121      	bne.n	800bca4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	695a      	ldr	r2, [r3, #20]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800bc6e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d111      	bne.n	800bc9e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc88:	089b      	lsrs	r3, r3, #2
 800bc8a:	f003 020f 	and.w	r2, r3, #15
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800bc94:	2101      	movs	r1, #1
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fea0 	bl	800c9dc <HAL_PCDEx_LPM_Callback>
 800bc9c:	e002      	b.n	800bca4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f00c f842 	bl	8017d28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f009 fc17 	bl	80154dc <USB_ReadInterrupts>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bcb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcb8:	f040 80b7 	bne.w	800be2a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	69fa      	ldr	r2, [r7, #28]
 800bcc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcca:	f023 0301 	bic.w	r3, r3, #1
 800bcce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2110      	movs	r1, #16
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f008 fce2 	bl	80146a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bcdc:	2300      	movs	r3, #0
 800bcde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bce0:	e046      	b.n	800bd70 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce4:	015a      	lsls	r2, r3, #5
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	4413      	add	r3, r2
 800bcea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcee:	461a      	mov	r2, r3
 800bcf0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bcf4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bcf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf8:	015a      	lsls	r2, r3, #5
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd06:	0151      	lsls	r1, r2, #5
 800bd08:	69fa      	ldr	r2, [r7, #28]
 800bd0a:	440a      	add	r2, r1
 800bd0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd10:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd18:	015a      	lsls	r2, r3, #5
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd22:	461a      	mov	r2, r3
 800bd24:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bd28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bd2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd2c:	015a      	lsls	r2, r3, #5
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	4413      	add	r3, r2
 800bd32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd3a:	0151      	lsls	r1, r2, #5
 800bd3c:	69fa      	ldr	r2, [r7, #28]
 800bd3e:	440a      	add	r2, r1
 800bd40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd44:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bd4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd4c:	015a      	lsls	r2, r3, #5
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	4413      	add	r3, r2
 800bd52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd5a:	0151      	lsls	r1, r2, #5
 800bd5c:	69fa      	ldr	r2, [r7, #28]
 800bd5e:	440a      	add	r2, r1
 800bd60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd64:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bd68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	791b      	ldrb	r3, [r3, #4]
 800bd74:	461a      	mov	r2, r3
 800bd76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d3b2      	bcc.n	800bce2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd82:	69db      	ldr	r3, [r3, #28]
 800bd84:	69fa      	ldr	r2, [r7, #28]
 800bd86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd8a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800bd8e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	7bdb      	ldrb	r3, [r3, #15]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d016      	beq.n	800bdc6 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bda2:	69fa      	ldr	r2, [r7, #28]
 800bda4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bda8:	f043 030b 	orr.w	r3, r3, #11
 800bdac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdb8:	69fa      	ldr	r2, [r7, #28]
 800bdba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdbe:	f043 030b 	orr.w	r3, r3, #11
 800bdc2:	6453      	str	r3, [r2, #68]	@ 0x44
 800bdc4:	e015      	b.n	800bdf2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdcc:	695a      	ldr	r2, [r3, #20]
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	f242 032b 	movw	r3, #8235	@ 0x202b
 800bdda:	4313      	orrs	r3, r2
 800bddc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	69fa      	ldr	r2, [r7, #28]
 800bde8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdec:	f043 030b 	orr.w	r3, r3, #11
 800bdf0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	69fa      	ldr	r2, [r7, #28]
 800bdfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be00:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800be04:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6818      	ldr	r0, [r3, #0]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800be14:	461a      	mov	r2, r3
 800be16:	f009 fc27 	bl	8015668 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	695a      	ldr	r2, [r3, #20]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800be28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4618      	mov	r0, r3
 800be30:	f009 fb54 	bl	80154dc <USB_ReadInterrupts>
 800be34:	4603      	mov	r3, r0
 800be36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800be3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be3e:	d123      	bne.n	800be88 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4618      	mov	r0, r3
 800be46:	f009 fbeb 	bl	8015620 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4618      	mov	r0, r3
 800be50:	f008 fc9f 	bl	8014792 <USB_GetDevSpeed>
 800be54:	4603      	mov	r3, r0
 800be56:	461a      	mov	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681c      	ldr	r4, [r3, #0]
 800be60:	f001 fd1c 	bl	800d89c <HAL_RCC_GetHCLKFreq>
 800be64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800be6a:	461a      	mov	r2, r3
 800be6c:	4620      	mov	r0, r4
 800be6e:	f008 f9a9 	bl	80141c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f00b ff2f 	bl	8017cd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	695a      	ldr	r2, [r3, #20]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800be86:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f009 fb25 	bl	80154dc <USB_ReadInterrupts>
 800be92:	4603      	mov	r3, r0
 800be94:	f003 0308 	and.w	r3, r3, #8
 800be98:	2b08      	cmp	r3, #8
 800be9a:	d10a      	bne.n	800beb2 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f00b ff0c 	bl	8017cba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	695a      	ldr	r2, [r3, #20]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f002 0208 	and.w	r2, r2, #8
 800beb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f009 fb10 	bl	80154dc <USB_ReadInterrupts>
 800bebc:	4603      	mov	r3, r0
 800bebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bec2:	2b80      	cmp	r3, #128	@ 0x80
 800bec4:	d123      	bne.n	800bf0e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800bec6:	6a3b      	ldr	r3, [r7, #32]
 800bec8:	699b      	ldr	r3, [r3, #24]
 800beca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bece:	6a3b      	ldr	r3, [r7, #32]
 800bed0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bed2:	2301      	movs	r3, #1
 800bed4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bed6:	e014      	b.n	800bf02 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800bed8:	6879      	ldr	r1, [r7, #4]
 800beda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bedc:	4613      	mov	r3, r2
 800bede:	00db      	lsls	r3, r3, #3
 800bee0:	4413      	add	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	440b      	add	r3, r1
 800bee6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d105      	bne.n	800befc <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800bef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	4619      	mov	r1, r3
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fb08 	bl	800c50c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800befc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befe:	3301      	adds	r3, #1
 800bf00:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	791b      	ldrb	r3, [r3, #4]
 800bf06:	461a      	mov	r2, r3
 800bf08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d3e4      	bcc.n	800bed8 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f009 fae2 	bl	80154dc <USB_ReadInterrupts>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf22:	d13c      	bne.n	800bf9e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bf24:	2301      	movs	r3, #1
 800bf26:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf28:	e02b      	b.n	800bf82 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800bf2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2c:	015a      	lsls	r2, r3, #5
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	4413      	add	r3, r2
 800bf32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf3e:	4613      	mov	r3, r2
 800bf40:	00db      	lsls	r3, r3, #3
 800bf42:	4413      	add	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	440b      	add	r3, r1
 800bf48:	3318      	adds	r3, #24
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d115      	bne.n	800bf7c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800bf50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	da12      	bge.n	800bf7c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800bf56:	6879      	ldr	r1, [r7, #4]
 800bf58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	00db      	lsls	r3, r3, #3
 800bf5e:	4413      	add	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	440b      	add	r3, r1
 800bf64:	3317      	adds	r3, #23
 800bf66:	2201      	movs	r2, #1
 800bf68:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	4619      	mov	r1, r3
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fac8 	bl	800c50c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bf7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf7e:	3301      	adds	r3, #1
 800bf80:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	791b      	ldrb	r3, [r3, #4]
 800bf86:	461a      	mov	r2, r3
 800bf88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d3cd      	bcc.n	800bf2a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	695a      	ldr	r2, [r3, #20]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800bf9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f009 fa9a 	bl	80154dc <USB_ReadInterrupts>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bfae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bfb2:	d156      	bne.n	800c062 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfb8:	e045      	b.n	800c046 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfbc:	015a      	lsls	r2, r3, #5
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bfca:	6879      	ldr	r1, [r7, #4]
 800bfcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfce:	4613      	mov	r3, r2
 800bfd0:	00db      	lsls	r3, r3, #3
 800bfd2:	4413      	add	r3, r2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	440b      	add	r3, r1
 800bfd8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d12e      	bne.n	800c040 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bfe2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	da2b      	bge.n	800c040 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800bff4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d121      	bne.n	800c040 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800bffc:	6879      	ldr	r1, [r7, #4]
 800bffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c000:	4613      	mov	r3, r2
 800c002:	00db      	lsls	r3, r3, #3
 800c004:	4413      	add	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	440b      	add	r3, r1
 800c00a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c00e:	2201      	movs	r2, #1
 800c010:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c012:	6a3b      	ldr	r3, [r7, #32]
 800c014:	699b      	ldr	r3, [r3, #24]
 800c016:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c01a:	6a3b      	ldr	r3, [r7, #32]
 800c01c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c01e:	6a3b      	ldr	r3, [r7, #32]
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10a      	bne.n	800c040 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	69fa      	ldr	r2, [r7, #28]
 800c034:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c038:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c03c:	6053      	str	r3, [r2, #4]
            break;
 800c03e:	e008      	b.n	800c052 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c042:	3301      	adds	r3, #1
 800c044:	627b      	str	r3, [r7, #36]	@ 0x24
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	791b      	ldrb	r3, [r3, #4]
 800c04a:	461a      	mov	r2, r3
 800c04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c04e:	4293      	cmp	r3, r2
 800c050:	d3b3      	bcc.n	800bfba <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	695a      	ldr	r2, [r3, #20]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800c060:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4618      	mov	r0, r3
 800c068:	f009 fa38 	bl	80154dc <USB_ReadInterrupts>
 800c06c:	4603      	mov	r3, r0
 800c06e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c076:	d10a      	bne.n	800c08e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f00b fead 	bl	8017dd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	695a      	ldr	r2, [r3, #20]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c08c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4618      	mov	r0, r3
 800c094:	f009 fa22 	bl	80154dc <USB_ReadInterrupts>
 800c098:	4603      	mov	r3, r0
 800c09a:	f003 0304 	and.w	r3, r3, #4
 800c09e:	2b04      	cmp	r3, #4
 800c0a0:	d115      	bne.n	800c0ce <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	f003 0304 	and.w	r3, r3, #4
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d002      	beq.n	800c0ba <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f00b fe9d 	bl	8017df4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	6859      	ldr	r1, [r3, #4]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	69ba      	ldr	r2, [r7, #24]
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	605a      	str	r2, [r3, #4]
 800c0ca:	e000      	b.n	800c0ce <HAL_PCD_IRQHandler+0x996>
      return;
 800c0cc:	bf00      	nop
    }
  }
}
 800c0ce:	3734      	adds	r7, #52	@ 0x34
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd90      	pop	{r4, r7, pc}

0800c0d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d101      	bne.n	800c0ee <HAL_PCD_SetAddress+0x1a>
 800c0ea:	2302      	movs	r3, #2
 800c0ec:	e012      	b.n	800c114 <HAL_PCD_SetAddress+0x40>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	78fa      	ldrb	r2, [r7, #3]
 800c0fa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	78fa      	ldrb	r2, [r7, #3]
 800c102:	4611      	mov	r1, r2
 800c104:	4618      	mov	r0, r3
 800c106:	f009 f981 	bl	801540c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	4608      	mov	r0, r1
 800c126:	4611      	mov	r1, r2
 800c128:	461a      	mov	r2, r3
 800c12a:	4603      	mov	r3, r0
 800c12c:	70fb      	strb	r3, [r7, #3]
 800c12e:	460b      	mov	r3, r1
 800c130:	803b      	strh	r3, [r7, #0]
 800c132:	4613      	mov	r3, r2
 800c134:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c136:	2300      	movs	r3, #0
 800c138:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c13a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	da0f      	bge.n	800c162 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c142:	78fb      	ldrb	r3, [r7, #3]
 800c144:	f003 020f 	and.w	r2, r3, #15
 800c148:	4613      	mov	r3, r2
 800c14a:	00db      	lsls	r3, r3, #3
 800c14c:	4413      	add	r3, r2
 800c14e:	009b      	lsls	r3, r3, #2
 800c150:	3310      	adds	r3, #16
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	4413      	add	r3, r2
 800c156:	3304      	adds	r3, #4
 800c158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2201      	movs	r2, #1
 800c15e:	705a      	strb	r2, [r3, #1]
 800c160:	e00f      	b.n	800c182 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c162:	78fb      	ldrb	r3, [r7, #3]
 800c164:	f003 020f 	and.w	r2, r3, #15
 800c168:	4613      	mov	r3, r2
 800c16a:	00db      	lsls	r3, r3, #3
 800c16c:	4413      	add	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	4413      	add	r3, r2
 800c178:	3304      	adds	r3, #4
 800c17a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c182:	78fb      	ldrb	r3, [r7, #3]
 800c184:	f003 030f 	and.w	r3, r3, #15
 800c188:	b2da      	uxtb	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c18e:	883a      	ldrh	r2, [r7, #0]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	78ba      	ldrb	r2, [r7, #2]
 800c198:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	785b      	ldrb	r3, [r3, #1]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d004      	beq.n	800c1ac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c1ac:	78bb      	ldrb	r3, [r7, #2]
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	d102      	bne.n	800c1b8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d101      	bne.n	800c1c6 <HAL_PCD_EP_Open+0xaa>
 800c1c2:	2302      	movs	r3, #2
 800c1c4:	e00e      	b.n	800c1e4 <HAL_PCD_EP_Open+0xc8>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	68f9      	ldr	r1, [r7, #12]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f008 fb01 	bl	80147dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c1e2:	7afb      	ldrb	r3, [r7, #11]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3710      	adds	r7, #16
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c1f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	da0f      	bge.n	800c220 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c200:	78fb      	ldrb	r3, [r7, #3]
 800c202:	f003 020f 	and.w	r2, r3, #15
 800c206:	4613      	mov	r3, r2
 800c208:	00db      	lsls	r3, r3, #3
 800c20a:	4413      	add	r3, r2
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	3310      	adds	r3, #16
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	4413      	add	r3, r2
 800c214:	3304      	adds	r3, #4
 800c216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2201      	movs	r2, #1
 800c21c:	705a      	strb	r2, [r3, #1]
 800c21e:	e00f      	b.n	800c240 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c220:	78fb      	ldrb	r3, [r7, #3]
 800c222:	f003 020f 	and.w	r2, r3, #15
 800c226:	4613      	mov	r3, r2
 800c228:	00db      	lsls	r3, r3, #3
 800c22a:	4413      	add	r3, r2
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	4413      	add	r3, r2
 800c236:	3304      	adds	r3, #4
 800c238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2200      	movs	r2, #0
 800c23e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c240:	78fb      	ldrb	r3, [r7, #3]
 800c242:	f003 030f 	and.w	r3, r3, #15
 800c246:	b2da      	uxtb	r2, r3
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c252:	2b01      	cmp	r3, #1
 800c254:	d101      	bne.n	800c25a <HAL_PCD_EP_Close+0x6e>
 800c256:	2302      	movs	r3, #2
 800c258:	e00e      	b.n	800c278 <HAL_PCD_EP_Close+0x8c>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	68f9      	ldr	r1, [r7, #12]
 800c268:	4618      	mov	r0, r3
 800c26a:	f008 fb3f 	bl	80148ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b086      	sub	sp, #24
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	607a      	str	r2, [r7, #4]
 800c28a:	603b      	str	r3, [r7, #0]
 800c28c:	460b      	mov	r3, r1
 800c28e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c290:	7afb      	ldrb	r3, [r7, #11]
 800c292:	f003 020f 	and.w	r2, r3, #15
 800c296:	4613      	mov	r3, r2
 800c298:	00db      	lsls	r3, r3, #3
 800c29a:	4413      	add	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c2c2:	7afb      	ldrb	r3, [r7, #11]
 800c2c4:	f003 030f 	and.w	r3, r3, #15
 800c2c8:	b2da      	uxtb	r2, r3
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	799b      	ldrb	r3, [r3, #6]
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d102      	bne.n	800c2dc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6818      	ldr	r0, [r3, #0]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	799b      	ldrb	r3, [r3, #6]
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	6979      	ldr	r1, [r7, #20]
 800c2e8:	f008 fbdc 	bl	8014aa4 <USB_EPStartXfer>

  return HAL_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3718      	adds	r7, #24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c2f6:	b480      	push	{r7}
 800c2f8:	b083      	sub	sp, #12
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	460b      	mov	r3, r1
 800c300:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c302:	78fb      	ldrb	r3, [r7, #3]
 800c304:	f003 020f 	and.w	r2, r3, #15
 800c308:	6879      	ldr	r1, [r7, #4]
 800c30a:	4613      	mov	r3, r2
 800c30c:	00db      	lsls	r3, r3, #3
 800c30e:	4413      	add	r3, r2
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	440b      	add	r3, r1
 800c314:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c318:	681b      	ldr	r3, [r3, #0]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	370c      	adds	r7, #12
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr

0800c326 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b086      	sub	sp, #24
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	60f8      	str	r0, [r7, #12]
 800c32e:	607a      	str	r2, [r7, #4]
 800c330:	603b      	str	r3, [r7, #0]
 800c332:	460b      	mov	r3, r1
 800c334:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c336:	7afb      	ldrb	r3, [r7, #11]
 800c338:	f003 020f 	and.w	r2, r3, #15
 800c33c:	4613      	mov	r3, r2
 800c33e:	00db      	lsls	r3, r3, #3
 800c340:	4413      	add	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	3310      	adds	r3, #16
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	4413      	add	r3, r2
 800c34a:	3304      	adds	r3, #4
 800c34c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	683a      	ldr	r2, [r7, #0]
 800c358:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2200      	movs	r2, #0
 800c35e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	2201      	movs	r2, #1
 800c364:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c366:	7afb      	ldrb	r3, [r7, #11]
 800c368:	f003 030f 	and.w	r3, r3, #15
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	799b      	ldrb	r3, [r3, #6]
 800c376:	2b01      	cmp	r3, #1
 800c378:	d102      	bne.n	800c380 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6818      	ldr	r0, [r3, #0]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	799b      	ldrb	r3, [r3, #6]
 800c388:	461a      	mov	r2, r3
 800c38a:	6979      	ldr	r1, [r7, #20]
 800c38c:	f008 fb8a 	bl	8014aa4 <USB_EPStartXfer>

  return HAL_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	3718      	adds	r7, #24
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b084      	sub	sp, #16
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c3a6:	78fb      	ldrb	r3, [r7, #3]
 800c3a8:	f003 030f 	and.w	r3, r3, #15
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	7912      	ldrb	r2, [r2, #4]
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d901      	bls.n	800c3b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e04f      	b.n	800c458 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c3b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	da0f      	bge.n	800c3e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c3c0:	78fb      	ldrb	r3, [r7, #3]
 800c3c2:	f003 020f 	and.w	r2, r3, #15
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	4413      	add	r3, r2
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	3310      	adds	r3, #16
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	3304      	adds	r3, #4
 800c3d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	705a      	strb	r2, [r3, #1]
 800c3de:	e00d      	b.n	800c3fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c3e0:	78fa      	ldrb	r2, [r7, #3]
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	00db      	lsls	r3, r3, #3
 800c3e6:	4413      	add	r3, r2
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2201      	movs	r2, #1
 800c400:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c402:	78fb      	ldrb	r3, [r7, #3]
 800c404:	f003 030f 	and.w	r3, r3, #15
 800c408:	b2da      	uxtb	r2, r3
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c414:	2b01      	cmp	r3, #1
 800c416:	d101      	bne.n	800c41c <HAL_PCD_EP_SetStall+0x82>
 800c418:	2302      	movs	r3, #2
 800c41a:	e01d      	b.n	800c458 <HAL_PCD_EP_SetStall+0xbe>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2201      	movs	r2, #1
 800c420:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68f9      	ldr	r1, [r7, #12]
 800c42a:	4618      	mov	r0, r3
 800c42c:	f008 ff1a 	bl	8015264 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c430:	78fb      	ldrb	r3, [r7, #3]
 800c432:	f003 030f 	and.w	r3, r3, #15
 800c436:	2b00      	cmp	r3, #0
 800c438:	d109      	bne.n	800c44e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6818      	ldr	r0, [r3, #0]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	7999      	ldrb	r1, [r3, #6]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c448:	461a      	mov	r2, r3
 800c44a:	f009 f90d 	bl	8015668 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	460b      	mov	r3, r1
 800c46a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c46c:	78fb      	ldrb	r3, [r7, #3]
 800c46e:	f003 030f 	and.w	r3, r3, #15
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	7912      	ldrb	r2, [r2, #4]
 800c476:	4293      	cmp	r3, r2
 800c478:	d901      	bls.n	800c47e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c47a:	2301      	movs	r3, #1
 800c47c:	e042      	b.n	800c504 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c47e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c482:	2b00      	cmp	r3, #0
 800c484:	da0f      	bge.n	800c4a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c486:	78fb      	ldrb	r3, [r7, #3]
 800c488:	f003 020f 	and.w	r2, r3, #15
 800c48c:	4613      	mov	r3, r2
 800c48e:	00db      	lsls	r3, r3, #3
 800c490:	4413      	add	r3, r2
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	3310      	adds	r3, #16
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	4413      	add	r3, r2
 800c49a:	3304      	adds	r3, #4
 800c49c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	705a      	strb	r2, [r3, #1]
 800c4a4:	e00f      	b.n	800c4c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c4a6:	78fb      	ldrb	r3, [r7, #3]
 800c4a8:	f003 020f 	and.w	r2, r3, #15
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	00db      	lsls	r3, r3, #3
 800c4b0:	4413      	add	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	3304      	adds	r3, #4
 800c4be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c4cc:	78fb      	ldrb	r3, [r7, #3]
 800c4ce:	f003 030f 	and.w	r3, r3, #15
 800c4d2:	b2da      	uxtb	r2, r3
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d101      	bne.n	800c4e6 <HAL_PCD_EP_ClrStall+0x86>
 800c4e2:	2302      	movs	r3, #2
 800c4e4:	e00e      	b.n	800c504 <HAL_PCD_EP_ClrStall+0xa4>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68f9      	ldr	r1, [r7, #12]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f008 ff23 	bl	8015340 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c502:	2300      	movs	r3, #0
}
 800c504:	4618      	mov	r0, r3
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	460b      	mov	r3, r1
 800c516:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	da0c      	bge.n	800c53a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c520:	78fb      	ldrb	r3, [r7, #3]
 800c522:	f003 020f 	and.w	r2, r3, #15
 800c526:	4613      	mov	r3, r2
 800c528:	00db      	lsls	r3, r3, #3
 800c52a:	4413      	add	r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	3310      	adds	r3, #16
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	4413      	add	r3, r2
 800c534:	3304      	adds	r3, #4
 800c536:	60fb      	str	r3, [r7, #12]
 800c538:	e00c      	b.n	800c554 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c53a:	78fb      	ldrb	r3, [r7, #3]
 800c53c:	f003 020f 	and.w	r2, r3, #15
 800c540:	4613      	mov	r3, r2
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	4413      	add	r3, r2
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	4413      	add	r3, r2
 800c550:	3304      	adds	r3, #4
 800c552:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68f9      	ldr	r1, [r7, #12]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f008 fd42 	bl	8014fe4 <USB_EPStopXfer>
 800c560:	4603      	mov	r3, r0
 800c562:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c564:	7afb      	ldrb	r3, [r7, #11]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b08a      	sub	sp, #40	@ 0x28
 800c572:	af02      	add	r7, sp, #8
 800c574:	6078      	str	r0, [r7, #4]
 800c576:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c582:	683a      	ldr	r2, [r7, #0]
 800c584:	4613      	mov	r3, r2
 800c586:	00db      	lsls	r3, r3, #3
 800c588:	4413      	add	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	3310      	adds	r3, #16
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	4413      	add	r3, r2
 800c592:	3304      	adds	r3, #4
 800c594:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	695a      	ldr	r2, [r3, #20]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d901      	bls.n	800c5a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e06b      	b.n	800c67e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	691a      	ldr	r2, [r3, #16]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	695b      	ldr	r3, [r3, #20]
 800c5ae:	1ad3      	subs	r3, r2, r3
 800c5b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	69fa      	ldr	r2, [r7, #28]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d902      	bls.n	800c5c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	3303      	adds	r3, #3
 800c5c6:	089b      	lsrs	r3, r3, #2
 800c5c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c5ca:	e02a      	b.n	800c622 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	691a      	ldr	r2, [r3, #16]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	695b      	ldr	r3, [r3, #20]
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	69fa      	ldr	r2, [r7, #28]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d902      	bls.n	800c5e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	3303      	adds	r3, #3
 800c5ec:	089b      	lsrs	r3, r3, #2
 800c5ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	68d9      	ldr	r1, [r3, #12]
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	69fb      	ldr	r3, [r7, #28]
 800c5fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	4603      	mov	r3, r0
 800c604:	6978      	ldr	r0, [r7, #20]
 800c606:	f008 fd97 	bl	8015138 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	68da      	ldr	r2, [r3, #12]
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	441a      	add	r2, r3
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	695a      	ldr	r2, [r3, #20]
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	441a      	add	r2, r3
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	015a      	lsls	r2, r3, #5
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	4413      	add	r3, r2
 800c62a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c62e:	699b      	ldr	r3, [r3, #24]
 800c630:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c632:	69ba      	ldr	r2, [r7, #24]
 800c634:	429a      	cmp	r2, r3
 800c636:	d809      	bhi.n	800c64c <PCD_WriteEmptyTxFifo+0xde>
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	695a      	ldr	r2, [r3, #20]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c640:	429a      	cmp	r2, r3
 800c642:	d203      	bcs.n	800c64c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d1bf      	bne.n	800c5cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	691a      	ldr	r2, [r3, #16]
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	695b      	ldr	r3, [r3, #20]
 800c654:	429a      	cmp	r2, r3
 800c656:	d811      	bhi.n	800c67c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	f003 030f 	and.w	r3, r3, #15
 800c65e:	2201      	movs	r2, #1
 800c660:	fa02 f303 	lsl.w	r3, r2, r3
 800c664:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c66c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	43db      	mvns	r3, r3
 800c672:	6939      	ldr	r1, [r7, #16]
 800c674:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c678:	4013      	ands	r3, r2
 800c67a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3720      	adds	r7, #32
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
	...

0800c688 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b088      	sub	sp, #32
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	333c      	adds	r3, #60	@ 0x3c
 800c6a0:	3304      	adds	r3, #4
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	015a      	lsls	r2, r3, #5
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	799b      	ldrb	r3, [r3, #6]
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d17b      	bne.n	800c7b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	f003 0308 	and.w	r3, r3, #8
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d015      	beq.n	800c6f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	4a61      	ldr	r2, [pc, #388]	@ (800c850 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	f240 80b9 	bls.w	800c844 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 80b3 	beq.w	800c844 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	015a      	lsls	r2, r3, #5
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6f0:	6093      	str	r3, [r2, #8]
 800c6f2:	e0a7      	b.n	800c844 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	f003 0320 	and.w	r3, r3, #32
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d009      	beq.n	800c712 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	015a      	lsls	r2, r3, #5
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	4413      	add	r3, r2
 800c706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c70a:	461a      	mov	r2, r3
 800c70c:	2320      	movs	r3, #32
 800c70e:	6093      	str	r3, [r2, #8]
 800c710:	e098      	b.n	800c844 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f040 8093 	bne.w	800c844 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	4a4b      	ldr	r2, [pc, #300]	@ (800c850 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d90f      	bls.n	800c746 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00a      	beq.n	800c746 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	015a      	lsls	r2, r3, #5
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	4413      	add	r3, r2
 800c738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c73c:	461a      	mov	r2, r3
 800c73e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c742:	6093      	str	r3, [r2, #8]
 800c744:	e07e      	b.n	800c844 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c746:	683a      	ldr	r2, [r7, #0]
 800c748:	4613      	mov	r3, r2
 800c74a:	00db      	lsls	r3, r3, #3
 800c74c:	4413      	add	r3, r2
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	4413      	add	r3, r2
 800c758:	3304      	adds	r3, #4
 800c75a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6a1a      	ldr	r2, [r3, #32]
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	0159      	lsls	r1, r3, #5
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	440b      	add	r3, r1
 800c768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c772:	1ad2      	subs	r2, r2, r3
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d114      	bne.n	800c7a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d109      	bne.n	800c79a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6818      	ldr	r0, [r3, #0]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c790:	461a      	mov	r2, r3
 800c792:	2101      	movs	r1, #1
 800c794:	f008 ff68 	bl	8015668 <USB_EP0_OutStart>
 800c798:	e006      	b.n	800c7a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	68da      	ldr	r2, [r3, #12]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	441a      	add	r2, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f00b fa4e 	bl	8017c50 <HAL_PCD_DataOutStageCallback>
 800c7b4:	e046      	b.n	800c844 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	4a26      	ldr	r2, [pc, #152]	@ (800c854 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d124      	bne.n	800c808 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00a      	beq.n	800c7de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	015a      	lsls	r2, r3, #5
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c7da:	6093      	str	r3, [r2, #8]
 800c7dc:	e032      	b.n	800c844 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	f003 0320 	and.w	r3, r3, #32
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d008      	beq.n	800c7fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	015a      	lsls	r2, r3, #5
 800c7ec:	69bb      	ldr	r3, [r7, #24]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	2320      	movs	r3, #32
 800c7f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	4619      	mov	r1, r3
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f00b fa25 	bl	8017c50 <HAL_PCD_DataOutStageCallback>
 800c806:	e01d      	b.n	800c844 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d114      	bne.n	800c838 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c80e:	6879      	ldr	r1, [r7, #4]
 800c810:	683a      	ldr	r2, [r7, #0]
 800c812:	4613      	mov	r3, r2
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	4413      	add	r3, r2
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	440b      	add	r3, r1
 800c81c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d108      	bne.n	800c838 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6818      	ldr	r0, [r3, #0]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c830:	461a      	mov	r2, r3
 800c832:	2100      	movs	r1, #0
 800c834:	f008 ff18 	bl	8015668 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	4619      	mov	r1, r3
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f00b fa06 	bl	8017c50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3720      	adds	r7, #32
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	4f54300a 	.word	0x4f54300a
 800c854:	4f54310a 	.word	0x4f54310a

0800c858 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	333c      	adds	r3, #60	@ 0x3c
 800c870:	3304      	adds	r3, #4
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	015a      	lsls	r2, r3, #5
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	4413      	add	r3, r2
 800c87e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	4a15      	ldr	r2, [pc, #84]	@ (800c8e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d90e      	bls.n	800c8ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c894:	2b00      	cmp	r3, #0
 800c896:	d009      	beq.n	800c8ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	015a      	lsls	r2, r3, #5
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	4413      	add	r3, r2
 800c8a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f00b f9bd 	bl	8017c2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	4a0a      	ldr	r2, [pc, #40]	@ (800c8e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d90c      	bls.n	800c8d4 <PCD_EP_OutSetupPacket_int+0x7c>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	799b      	ldrb	r3, [r3, #6]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d108      	bne.n	800c8d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6818      	ldr	r0, [r3, #0]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	2101      	movs	r1, #1
 800c8d0:	f008 feca 	bl	8015668 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3718      	adds	r7, #24
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	4f54300a 	.word	0x4f54300a

0800c8e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	70fb      	strb	r3, [r7, #3]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c8fc:	78fb      	ldrb	r3, [r7, #3]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d107      	bne.n	800c912 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c902:	883b      	ldrh	r3, [r7, #0]
 800c904:	0419      	lsls	r1, r3, #16
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	430a      	orrs	r2, r1
 800c90e:	629a      	str	r2, [r3, #40]	@ 0x28
 800c910:	e028      	b.n	800c964 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c918:	0c1b      	lsrs	r3, r3, #16
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	4413      	add	r3, r2
 800c91e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c920:	2300      	movs	r3, #0
 800c922:	73fb      	strb	r3, [r7, #15]
 800c924:	e00d      	b.n	800c942 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	7bfb      	ldrb	r3, [r7, #15]
 800c92c:	3340      	adds	r3, #64	@ 0x40
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	4413      	add	r3, r2
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	0c1b      	lsrs	r3, r3, #16
 800c936:	68ba      	ldr	r2, [r7, #8]
 800c938:	4413      	add	r3, r2
 800c93a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c93c:	7bfb      	ldrb	r3, [r7, #15]
 800c93e:	3301      	adds	r3, #1
 800c940:	73fb      	strb	r3, [r7, #15]
 800c942:	7bfa      	ldrb	r2, [r7, #15]
 800c944:	78fb      	ldrb	r3, [r7, #3]
 800c946:	3b01      	subs	r3, #1
 800c948:	429a      	cmp	r2, r3
 800c94a:	d3ec      	bcc.n	800c926 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c94c:	883b      	ldrh	r3, [r7, #0]
 800c94e:	0418      	lsls	r0, r3, #16
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6819      	ldr	r1, [r3, #0]
 800c954:	78fb      	ldrb	r3, [r7, #3]
 800c956:	3b01      	subs	r3, #1
 800c958:	68ba      	ldr	r2, [r7, #8]
 800c95a:	4302      	orrs	r2, r0
 800c95c:	3340      	adds	r3, #64	@ 0x40
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	440b      	add	r3, r1
 800c962:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3714      	adds	r7, #20
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr

0800c972 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c972:	b480      	push	{r7}
 800c974:	b083      	sub	sp, #12
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
 800c97a:	460b      	mov	r3, r1
 800c97c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	887a      	ldrh	r2, [r7, #2]
 800c984:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	370c      	adds	r7, #12
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	699b      	ldr	r3, [r3, #24]
 800c9b6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c9c2:	4b05      	ldr	r3, [pc, #20]	@ (800c9d8 <HAL_PCDEx_ActivateLPM+0x44>)
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800c9ca:	2300      	movs	r3, #0
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr
 800c9d8:	10000003 	.word	0x10000003

0800c9dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c9e8:	bf00      	nop
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c9fc:	4b19      	ldr	r3, [pc, #100]	@ (800ca64 <HAL_PWREx_ConfigSupply+0x70>)
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	f003 0304 	and.w	r3, r3, #4
 800ca04:	2b04      	cmp	r3, #4
 800ca06:	d00a      	beq.n	800ca1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ca08:	4b16      	ldr	r3, [pc, #88]	@ (800ca64 <HAL_PWREx_ConfigSupply+0x70>)
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	f003 0307 	and.w	r3, r3, #7
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d001      	beq.n	800ca1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ca16:	2301      	movs	r3, #1
 800ca18:	e01f      	b.n	800ca5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	e01d      	b.n	800ca5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ca1e:	4b11      	ldr	r3, [pc, #68]	@ (800ca64 <HAL_PWREx_ConfigSupply+0x70>)
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	f023 0207 	bic.w	r2, r3, #7
 800ca26:	490f      	ldr	r1, [pc, #60]	@ (800ca64 <HAL_PWREx_ConfigSupply+0x70>)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ca2e:	f7fa f963 	bl	8006cf8 <HAL_GetTick>
 800ca32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ca34:	e009      	b.n	800ca4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ca36:	f7fa f95f 	bl	8006cf8 <HAL_GetTick>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	1ad3      	subs	r3, r2, r3
 800ca40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ca44:	d901      	bls.n	800ca4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	e007      	b.n	800ca5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ca4a:	4b06      	ldr	r3, [pc, #24]	@ (800ca64 <HAL_PWREx_ConfigSupply+0x70>)
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ca52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca56:	d1ee      	bne.n	800ca36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	58024800 	.word	0x58024800

0800ca68 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800ca6c:	4b05      	ldr	r3, [pc, #20]	@ (800ca84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	4a04      	ldr	r2, [pc, #16]	@ (800ca84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800ca72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ca76:	60d3      	str	r3, [r2, #12]
}
 800ca78:	bf00      	nop
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	58024800 	.word	0x58024800

0800ca88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b08c      	sub	sp, #48	@ 0x30
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d101      	bne.n	800ca9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e3c8      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f003 0301 	and.w	r3, r3, #1
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	f000 8087 	beq.w	800cbb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800caa8:	4b88      	ldr	r3, [pc, #544]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800caaa:	691b      	ldr	r3, [r3, #16]
 800caac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cab2:	4b86      	ldr	r3, [pc, #536]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cab6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caba:	2b10      	cmp	r3, #16
 800cabc:	d007      	beq.n	800cace <HAL_RCC_OscConfig+0x46>
 800cabe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac0:	2b18      	cmp	r3, #24
 800cac2:	d110      	bne.n	800cae6 <HAL_RCC_OscConfig+0x5e>
 800cac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cac6:	f003 0303 	and.w	r3, r3, #3
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d10b      	bne.n	800cae6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cace:	4b7f      	ldr	r3, [pc, #508]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d06c      	beq.n	800cbb4 <HAL_RCC_OscConfig+0x12c>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d168      	bne.n	800cbb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e3a2      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800caee:	d106      	bne.n	800cafe <HAL_RCC_OscConfig+0x76>
 800caf0:	4b76      	ldr	r3, [pc, #472]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a75      	ldr	r2, [pc, #468]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800caf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cafa:	6013      	str	r3, [r2, #0]
 800cafc:	e02e      	b.n	800cb5c <HAL_RCC_OscConfig+0xd4>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d10c      	bne.n	800cb20 <HAL_RCC_OscConfig+0x98>
 800cb06:	4b71      	ldr	r3, [pc, #452]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a70      	ldr	r2, [pc, #448]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cb0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cb10:	6013      	str	r3, [r2, #0]
 800cb12:	4b6e      	ldr	r3, [pc, #440]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a6d      	ldr	r2, [pc, #436]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cb18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cb1c:	6013      	str	r3, [r2, #0]
 800cb1e:	e01d      	b.n	800cb5c <HAL_RCC_OscConfig+0xd4>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cb28:	d10c      	bne.n	800cb44 <HAL_RCC_OscConfig+0xbc>
 800cb2a:	4b68      	ldr	r3, [pc, #416]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a67      	ldr	r2, [pc, #412]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cb30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cb34:	6013      	str	r3, [r2, #0]
 800cb36:	4b65      	ldr	r3, [pc, #404]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a64      	ldr	r2, [pc, #400]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cb3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb40:	6013      	str	r3, [r2, #0]
 800cb42:	e00b      	b.n	800cb5c <HAL_RCC_OscConfig+0xd4>
 800cb44:	4b61      	ldr	r3, [pc, #388]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a60      	ldr	r2, [pc, #384]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cb4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cb4e:	6013      	str	r3, [r2, #0]
 800cb50:	4b5e      	ldr	r3, [pc, #376]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a5d      	ldr	r2, [pc, #372]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cb56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cb5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d013      	beq.n	800cb8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb64:	f7fa f8c8 	bl	8006cf8 <HAL_GetTick>
 800cb68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cb6a:	e008      	b.n	800cb7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb6c:	f7fa f8c4 	bl	8006cf8 <HAL_GetTick>
 800cb70:	4602      	mov	r2, r0
 800cb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	2b64      	cmp	r3, #100	@ 0x64
 800cb78:	d901      	bls.n	800cb7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	e356      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cb7e:	4b53      	ldr	r3, [pc, #332]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d0f0      	beq.n	800cb6c <HAL_RCC_OscConfig+0xe4>
 800cb8a:	e014      	b.n	800cbb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb8c:	f7fa f8b4 	bl	8006cf8 <HAL_GetTick>
 800cb90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cb92:	e008      	b.n	800cba6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb94:	f7fa f8b0 	bl	8006cf8 <HAL_GetTick>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9c:	1ad3      	subs	r3, r2, r3
 800cb9e:	2b64      	cmp	r3, #100	@ 0x64
 800cba0:	d901      	bls.n	800cba6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800cba2:	2303      	movs	r3, #3
 800cba4:	e342      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cba6:	4b49      	ldr	r3, [pc, #292]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1f0      	bne.n	800cb94 <HAL_RCC_OscConfig+0x10c>
 800cbb2:	e000      	b.n	800cbb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 0302 	and.w	r3, r3, #2
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f000 808c 	beq.w	800ccdc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cbc4:	4b41      	ldr	r3, [pc, #260]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cbc6:	691b      	ldr	r3, [r3, #16]
 800cbc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cbcc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cbce:	4b3f      	ldr	r3, [pc, #252]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cbd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbd2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800cbd4:	6a3b      	ldr	r3, [r7, #32]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d007      	beq.n	800cbea <HAL_RCC_OscConfig+0x162>
 800cbda:	6a3b      	ldr	r3, [r7, #32]
 800cbdc:	2b18      	cmp	r3, #24
 800cbde:	d137      	bne.n	800cc50 <HAL_RCC_OscConfig+0x1c8>
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	f003 0303 	and.w	r3, r3, #3
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d132      	bne.n	800cc50 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cbea:	4b38      	ldr	r3, [pc, #224]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f003 0304 	and.w	r3, r3, #4
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d005      	beq.n	800cc02 <HAL_RCC_OscConfig+0x17a>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d101      	bne.n	800cc02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e314      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cc02:	4b32      	ldr	r3, [pc, #200]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f023 0219 	bic.w	r2, r3, #25
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	492f      	ldr	r1, [pc, #188]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cc10:	4313      	orrs	r3, r2
 800cc12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc14:	f7fa f870 	bl	8006cf8 <HAL_GetTick>
 800cc18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cc1a:	e008      	b.n	800cc2e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cc1c:	f7fa f86c 	bl	8006cf8 <HAL_GetTick>
 800cc20:	4602      	mov	r2, r0
 800cc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc24:	1ad3      	subs	r3, r2, r3
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	d901      	bls.n	800cc2e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800cc2a:	2303      	movs	r3, #3
 800cc2c:	e2fe      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cc2e:	4b27      	ldr	r3, [pc, #156]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 0304 	and.w	r3, r3, #4
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d0f0      	beq.n	800cc1c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc3a:	4b24      	ldr	r3, [pc, #144]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	061b      	lsls	r3, r3, #24
 800cc48:	4920      	ldr	r1, [pc, #128]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cc4e:	e045      	b.n	800ccdc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d026      	beq.n	800cca6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cc58:	4b1c      	ldr	r3, [pc, #112]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f023 0219 	bic.w	r2, r3, #25
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	4919      	ldr	r1, [pc, #100]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cc66:	4313      	orrs	r3, r2
 800cc68:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc6a:	f7fa f845 	bl	8006cf8 <HAL_GetTick>
 800cc6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cc70:	e008      	b.n	800cc84 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cc72:	f7fa f841 	bl	8006cf8 <HAL_GetTick>
 800cc76:	4602      	mov	r2, r0
 800cc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d901      	bls.n	800cc84 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800cc80:	2303      	movs	r3, #3
 800cc82:	e2d3      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cc84:	4b11      	ldr	r3, [pc, #68]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 0304 	and.w	r3, r3, #4
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d0f0      	beq.n	800cc72 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc90:	4b0e      	ldr	r3, [pc, #56]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	691b      	ldr	r3, [r3, #16]
 800cc9c:	061b      	lsls	r3, r3, #24
 800cc9e:	490b      	ldr	r1, [pc, #44]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cca0:	4313      	orrs	r3, r2
 800cca2:	604b      	str	r3, [r1, #4]
 800cca4:	e01a      	b.n	800ccdc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cca6:	4b09      	ldr	r3, [pc, #36]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a08      	ldr	r2, [pc, #32]	@ (800cccc <HAL_RCC_OscConfig+0x244>)
 800ccac:	f023 0301 	bic.w	r3, r3, #1
 800ccb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccb2:	f7fa f821 	bl	8006cf8 <HAL_GetTick>
 800ccb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ccb8:	e00a      	b.n	800ccd0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ccba:	f7fa f81d 	bl	8006cf8 <HAL_GetTick>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc2:	1ad3      	subs	r3, r2, r3
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d903      	bls.n	800ccd0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	e2af      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
 800cccc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ccd0:	4b96      	ldr	r3, [pc, #600]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f003 0304 	and.w	r3, r3, #4
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d1ee      	bne.n	800ccba <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f003 0310 	and.w	r3, r3, #16
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d06a      	beq.n	800cdbe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cce8:	4b90      	ldr	r3, [pc, #576]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ccf0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ccf2:	4b8e      	ldr	r3, [pc, #568]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800ccf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccf6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	2b08      	cmp	r3, #8
 800ccfc:	d007      	beq.n	800cd0e <HAL_RCC_OscConfig+0x286>
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	2b18      	cmp	r3, #24
 800cd02:	d11b      	bne.n	800cd3c <HAL_RCC_OscConfig+0x2b4>
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	f003 0303 	and.w	r3, r3, #3
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d116      	bne.n	800cd3c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cd0e:	4b87      	ldr	r3, [pc, #540]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d005      	beq.n	800cd26 <HAL_RCC_OscConfig+0x29e>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	69db      	ldr	r3, [r3, #28]
 800cd1e:	2b80      	cmp	r3, #128	@ 0x80
 800cd20:	d001      	beq.n	800cd26 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800cd22:	2301      	movs	r3, #1
 800cd24:	e282      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cd26:	4b81      	ldr	r3, [pc, #516]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a1b      	ldr	r3, [r3, #32]
 800cd32:	061b      	lsls	r3, r3, #24
 800cd34:	497d      	ldr	r1, [pc, #500]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cd36:	4313      	orrs	r3, r2
 800cd38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cd3a:	e040      	b.n	800cdbe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	69db      	ldr	r3, [r3, #28]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d023      	beq.n	800cd8c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cd44:	4b79      	ldr	r3, [pc, #484]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a78      	ldr	r2, [pc, #480]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cd4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd50:	f7f9 ffd2 	bl	8006cf8 <HAL_GetTick>
 800cd54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cd56:	e008      	b.n	800cd6a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cd58:	f7f9 ffce 	bl	8006cf8 <HAL_GetTick>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd60:	1ad3      	subs	r3, r2, r3
 800cd62:	2b02      	cmp	r3, #2
 800cd64:	d901      	bls.n	800cd6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800cd66:	2303      	movs	r3, #3
 800cd68:	e260      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cd6a:	4b70      	ldr	r3, [pc, #448]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d0f0      	beq.n	800cd58 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cd76:	4b6d      	ldr	r3, [pc, #436]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	061b      	lsls	r3, r3, #24
 800cd84:	4969      	ldr	r1, [pc, #420]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cd86:	4313      	orrs	r3, r2
 800cd88:	60cb      	str	r3, [r1, #12]
 800cd8a:	e018      	b.n	800cdbe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cd8c:	4b67      	ldr	r3, [pc, #412]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a66      	ldr	r2, [pc, #408]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cd92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd98:	f7f9 ffae 	bl	8006cf8 <HAL_GetTick>
 800cd9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cd9e:	e008      	b.n	800cdb2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cda0:	f7f9 ffaa 	bl	8006cf8 <HAL_GetTick>
 800cda4:	4602      	mov	r2, r0
 800cda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda8:	1ad3      	subs	r3, r2, r3
 800cdaa:	2b02      	cmp	r3, #2
 800cdac:	d901      	bls.n	800cdb2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800cdae:	2303      	movs	r3, #3
 800cdb0:	e23c      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cdb2:	4b5e      	ldr	r3, [pc, #376]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1f0      	bne.n	800cda0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f003 0308 	and.w	r3, r3, #8
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d036      	beq.n	800ce38 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	695b      	ldr	r3, [r3, #20]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d019      	beq.n	800ce06 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cdd2:	4b56      	ldr	r3, [pc, #344]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cdd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdd6:	4a55      	ldr	r2, [pc, #340]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cdd8:	f043 0301 	orr.w	r3, r3, #1
 800cddc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdde:	f7f9 ff8b 	bl	8006cf8 <HAL_GetTick>
 800cde2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cde4:	e008      	b.n	800cdf8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cde6:	f7f9 ff87 	bl	8006cf8 <HAL_GetTick>
 800cdea:	4602      	mov	r2, r0
 800cdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	d901      	bls.n	800cdf8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800cdf4:	2303      	movs	r3, #3
 800cdf6:	e219      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cdf8:	4b4c      	ldr	r3, [pc, #304]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cdfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdfc:	f003 0302 	and.w	r3, r3, #2
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d0f0      	beq.n	800cde6 <HAL_RCC_OscConfig+0x35e>
 800ce04:	e018      	b.n	800ce38 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ce06:	4b49      	ldr	r3, [pc, #292]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800ce08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce0a:	4a48      	ldr	r2, [pc, #288]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800ce0c:	f023 0301 	bic.w	r3, r3, #1
 800ce10:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce12:	f7f9 ff71 	bl	8006cf8 <HAL_GetTick>
 800ce16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ce18:	e008      	b.n	800ce2c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce1a:	f7f9 ff6d 	bl	8006cf8 <HAL_GetTick>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	2b02      	cmp	r3, #2
 800ce26:	d901      	bls.n	800ce2c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	e1ff      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ce2c:	4b3f      	ldr	r3, [pc, #252]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800ce2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce30:	f003 0302 	and.w	r3, r3, #2
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1f0      	bne.n	800ce1a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f003 0320 	and.w	r3, r3, #32
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d036      	beq.n	800ceb2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	699b      	ldr	r3, [r3, #24]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d019      	beq.n	800ce80 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ce4c:	4b37      	ldr	r3, [pc, #220]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a36      	ldr	r2, [pc, #216]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800ce52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ce56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ce58:	f7f9 ff4e 	bl	8006cf8 <HAL_GetTick>
 800ce5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ce5e:	e008      	b.n	800ce72 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ce60:	f7f9 ff4a 	bl	8006cf8 <HAL_GetTick>
 800ce64:	4602      	mov	r2, r0
 800ce66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce68:	1ad3      	subs	r3, r2, r3
 800ce6a:	2b02      	cmp	r3, #2
 800ce6c:	d901      	bls.n	800ce72 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800ce6e:	2303      	movs	r3, #3
 800ce70:	e1dc      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ce72:	4b2e      	ldr	r3, [pc, #184]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d0f0      	beq.n	800ce60 <HAL_RCC_OscConfig+0x3d8>
 800ce7e:	e018      	b.n	800ceb2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ce80:	4b2a      	ldr	r3, [pc, #168]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a29      	ldr	r2, [pc, #164]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800ce86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ce8c:	f7f9 ff34 	bl	8006cf8 <HAL_GetTick>
 800ce90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ce92:	e008      	b.n	800cea6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ce94:	f7f9 ff30 	bl	8006cf8 <HAL_GetTick>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	2b02      	cmp	r3, #2
 800cea0:	d901      	bls.n	800cea6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800cea2:	2303      	movs	r3, #3
 800cea4:	e1c2      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cea6:	4b21      	ldr	r3, [pc, #132]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d1f0      	bne.n	800ce94 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 0304 	and.w	r3, r3, #4
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	f000 8086 	beq.w	800cfcc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cec0:	4b1b      	ldr	r3, [pc, #108]	@ (800cf30 <HAL_RCC_OscConfig+0x4a8>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a1a      	ldr	r2, [pc, #104]	@ (800cf30 <HAL_RCC_OscConfig+0x4a8>)
 800cec6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ceca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cecc:	f7f9 ff14 	bl	8006cf8 <HAL_GetTick>
 800ced0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ced2:	e008      	b.n	800cee6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ced4:	f7f9 ff10 	bl	8006cf8 <HAL_GetTick>
 800ced8:	4602      	mov	r2, r0
 800ceda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cedc:	1ad3      	subs	r3, r2, r3
 800cede:	2b64      	cmp	r3, #100	@ 0x64
 800cee0:	d901      	bls.n	800cee6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800cee2:	2303      	movs	r3, #3
 800cee4:	e1a2      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cee6:	4b12      	ldr	r3, [pc, #72]	@ (800cf30 <HAL_RCC_OscConfig+0x4a8>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d0f0      	beq.n	800ced4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d106      	bne.n	800cf08 <HAL_RCC_OscConfig+0x480>
 800cefa:	4b0c      	ldr	r3, [pc, #48]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cefc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cefe:	4a0b      	ldr	r2, [pc, #44]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cf00:	f043 0301 	orr.w	r3, r3, #1
 800cf04:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf06:	e032      	b.n	800cf6e <HAL_RCC_OscConfig+0x4e6>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	689b      	ldr	r3, [r3, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d111      	bne.n	800cf34 <HAL_RCC_OscConfig+0x4ac>
 800cf10:	4b06      	ldr	r3, [pc, #24]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cf12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf14:	4a05      	ldr	r2, [pc, #20]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cf16:	f023 0301 	bic.w	r3, r3, #1
 800cf1a:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf1c:	4b03      	ldr	r3, [pc, #12]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cf1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf20:	4a02      	ldr	r2, [pc, #8]	@ (800cf2c <HAL_RCC_OscConfig+0x4a4>)
 800cf22:	f023 0304 	bic.w	r3, r3, #4
 800cf26:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf28:	e021      	b.n	800cf6e <HAL_RCC_OscConfig+0x4e6>
 800cf2a:	bf00      	nop
 800cf2c:	58024400 	.word	0x58024400
 800cf30:	58024800 	.word	0x58024800
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	2b05      	cmp	r3, #5
 800cf3a:	d10c      	bne.n	800cf56 <HAL_RCC_OscConfig+0x4ce>
 800cf3c:	4b83      	ldr	r3, [pc, #524]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800cf3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf40:	4a82      	ldr	r2, [pc, #520]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800cf42:	f043 0304 	orr.w	r3, r3, #4
 800cf46:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf48:	4b80      	ldr	r3, [pc, #512]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800cf4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf4c:	4a7f      	ldr	r2, [pc, #508]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800cf4e:	f043 0301 	orr.w	r3, r3, #1
 800cf52:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf54:	e00b      	b.n	800cf6e <HAL_RCC_OscConfig+0x4e6>
 800cf56:	4b7d      	ldr	r3, [pc, #500]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800cf58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf5a:	4a7c      	ldr	r2, [pc, #496]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800cf5c:	f023 0301 	bic.w	r3, r3, #1
 800cf60:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf62:	4b7a      	ldr	r3, [pc, #488]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800cf64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf66:	4a79      	ldr	r2, [pc, #484]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800cf68:	f023 0304 	bic.w	r3, r3, #4
 800cf6c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d015      	beq.n	800cfa2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf76:	f7f9 febf 	bl	8006cf8 <HAL_GetTick>
 800cf7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf7c:	e00a      	b.n	800cf94 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf7e:	f7f9 febb 	bl	8006cf8 <HAL_GetTick>
 800cf82:	4602      	mov	r2, r0
 800cf84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d901      	bls.n	800cf94 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800cf90:	2303      	movs	r3, #3
 800cf92:	e14b      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf94:	4b6d      	ldr	r3, [pc, #436]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800cf96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf98:	f003 0302 	and.w	r3, r3, #2
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d0ee      	beq.n	800cf7e <HAL_RCC_OscConfig+0x4f6>
 800cfa0:	e014      	b.n	800cfcc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfa2:	f7f9 fea9 	bl	8006cf8 <HAL_GetTick>
 800cfa6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cfa8:	e00a      	b.n	800cfc0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cfaa:	f7f9 fea5 	bl	8006cf8 <HAL_GetTick>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d901      	bls.n	800cfc0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800cfbc:	2303      	movs	r3, #3
 800cfbe:	e135      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cfc0:	4b62      	ldr	r3, [pc, #392]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800cfc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfc4:	f003 0302 	and.w	r3, r3, #2
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d1ee      	bne.n	800cfaa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f000 812a 	beq.w	800d22a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cfd6:	4b5d      	ldr	r3, [pc, #372]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800cfd8:	691b      	ldr	r3, [r3, #16]
 800cfda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cfde:	2b18      	cmp	r3, #24
 800cfe0:	f000 80ba 	beq.w	800d158 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	f040 8095 	bne.w	800d118 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cfee:	4b57      	ldr	r3, [pc, #348]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a56      	ldr	r2, [pc, #344]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800cff4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cffa:	f7f9 fe7d 	bl	8006cf8 <HAL_GetTick>
 800cffe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d000:	e008      	b.n	800d014 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d002:	f7f9 fe79 	bl	8006cf8 <HAL_GetTick>
 800d006:	4602      	mov	r2, r0
 800d008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d901      	bls.n	800d014 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800d010:	2303      	movs	r3, #3
 800d012:	e10b      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d014:	4b4d      	ldr	r3, [pc, #308]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1f0      	bne.n	800d002 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d020:	4b4a      	ldr	r3, [pc, #296]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d022:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d024:	4b4a      	ldr	r3, [pc, #296]	@ (800d150 <HAL_RCC_OscConfig+0x6c8>)
 800d026:	4013      	ands	r3, r2
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d030:	0112      	lsls	r2, r2, #4
 800d032:	430a      	orrs	r2, r1
 800d034:	4945      	ldr	r1, [pc, #276]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d036:	4313      	orrs	r3, r2
 800d038:	628b      	str	r3, [r1, #40]	@ 0x28
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d03e:	3b01      	subs	r3, #1
 800d040:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d048:	3b01      	subs	r3, #1
 800d04a:	025b      	lsls	r3, r3, #9
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	431a      	orrs	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d054:	3b01      	subs	r3, #1
 800d056:	041b      	lsls	r3, r3, #16
 800d058:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d05c:	431a      	orrs	r2, r3
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d062:	3b01      	subs	r3, #1
 800d064:	061b      	lsls	r3, r3, #24
 800d066:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d06a:	4938      	ldr	r1, [pc, #224]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d06c:	4313      	orrs	r3, r2
 800d06e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d070:	4b36      	ldr	r3, [pc, #216]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d074:	4a35      	ldr	r2, [pc, #212]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d076:	f023 0301 	bic.w	r3, r3, #1
 800d07a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d07c:	4b33      	ldr	r3, [pc, #204]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d07e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d080:	4b34      	ldr	r3, [pc, #208]	@ (800d154 <HAL_RCC_OscConfig+0x6cc>)
 800d082:	4013      	ands	r3, r2
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d088:	00d2      	lsls	r2, r2, #3
 800d08a:	4930      	ldr	r1, [pc, #192]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d08c:	4313      	orrs	r3, r2
 800d08e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d090:	4b2e      	ldr	r3, [pc, #184]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d094:	f023 020c 	bic.w	r2, r3, #12
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d09c:	492b      	ldr	r1, [pc, #172]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d0a2:	4b2a      	ldr	r3, [pc, #168]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0a6:	f023 0202 	bic.w	r2, r3, #2
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0ae:	4927      	ldr	r1, [pc, #156]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d0b4:	4b25      	ldr	r3, [pc, #148]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0b8:	4a24      	ldr	r2, [pc, #144]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d0ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0c0:	4b22      	ldr	r3, [pc, #136]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0c4:	4a21      	ldr	r2, [pc, #132]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d0c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d0ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d0cc:	4b1f      	ldr	r3, [pc, #124]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0d0:	4a1e      	ldr	r2, [pc, #120]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d0d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d0d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d0d8:	4b1c      	ldr	r3, [pc, #112]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0dc:	4a1b      	ldr	r2, [pc, #108]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d0de:	f043 0301 	orr.w	r3, r3, #1
 800d0e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d0e4:	4b19      	ldr	r3, [pc, #100]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a18      	ldr	r2, [pc, #96]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d0ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d0ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0f0:	f7f9 fe02 	bl	8006cf8 <HAL_GetTick>
 800d0f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d0f6:	e008      	b.n	800d10a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d0f8:	f7f9 fdfe 	bl	8006cf8 <HAL_GetTick>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d100:	1ad3      	subs	r3, r2, r3
 800d102:	2b02      	cmp	r3, #2
 800d104:	d901      	bls.n	800d10a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800d106:	2303      	movs	r3, #3
 800d108:	e090      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d10a:	4b10      	ldr	r3, [pc, #64]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d112:	2b00      	cmp	r3, #0
 800d114:	d0f0      	beq.n	800d0f8 <HAL_RCC_OscConfig+0x670>
 800d116:	e088      	b.n	800d22a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d118:	4b0c      	ldr	r3, [pc, #48]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a0b      	ldr	r2, [pc, #44]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d11e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d124:	f7f9 fde8 	bl	8006cf8 <HAL_GetTick>
 800d128:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d12a:	e008      	b.n	800d13e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d12c:	f7f9 fde4 	bl	8006cf8 <HAL_GetTick>
 800d130:	4602      	mov	r2, r0
 800d132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d134:	1ad3      	subs	r3, r2, r3
 800d136:	2b02      	cmp	r3, #2
 800d138:	d901      	bls.n	800d13e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800d13a:	2303      	movs	r3, #3
 800d13c:	e076      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d13e:	4b03      	ldr	r3, [pc, #12]	@ (800d14c <HAL_RCC_OscConfig+0x6c4>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d146:	2b00      	cmp	r3, #0
 800d148:	d1f0      	bne.n	800d12c <HAL_RCC_OscConfig+0x6a4>
 800d14a:	e06e      	b.n	800d22a <HAL_RCC_OscConfig+0x7a2>
 800d14c:	58024400 	.word	0x58024400
 800d150:	fffffc0c 	.word	0xfffffc0c
 800d154:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d158:	4b36      	ldr	r3, [pc, #216]	@ (800d234 <HAL_RCC_OscConfig+0x7ac>)
 800d15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d15c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d15e:	4b35      	ldr	r3, [pc, #212]	@ (800d234 <HAL_RCC_OscConfig+0x7ac>)
 800d160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d162:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d031      	beq.n	800d1d0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	f003 0203 	and.w	r2, r3, #3
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d176:	429a      	cmp	r2, r3
 800d178:	d12a      	bne.n	800d1d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	091b      	lsrs	r3, r3, #4
 800d17e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d186:	429a      	cmp	r2, r3
 800d188:	d122      	bne.n	800d1d0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d194:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d196:	429a      	cmp	r2, r3
 800d198:	d11a      	bne.n	800d1d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	0a5b      	lsrs	r3, r3, #9
 800d19e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d111      	bne.n	800d1d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	0c1b      	lsrs	r3, r3, #16
 800d1b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d108      	bne.n	800d1d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	0e1b      	lsrs	r3, r3, #24
 800d1c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d001      	beq.n	800d1d4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e02b      	b.n	800d22c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d1d4:	4b17      	ldr	r3, [pc, #92]	@ (800d234 <HAL_RCC_OscConfig+0x7ac>)
 800d1d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1d8:	08db      	lsrs	r3, r3, #3
 800d1da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1de:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d1e4:	693a      	ldr	r2, [r7, #16]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d01f      	beq.n	800d22a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d1ea:	4b12      	ldr	r3, [pc, #72]	@ (800d234 <HAL_RCC_OscConfig+0x7ac>)
 800d1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ee:	4a11      	ldr	r2, [pc, #68]	@ (800d234 <HAL_RCC_OscConfig+0x7ac>)
 800d1f0:	f023 0301 	bic.w	r3, r3, #1
 800d1f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d1f6:	f7f9 fd7f 	bl	8006cf8 <HAL_GetTick>
 800d1fa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d1fc:	bf00      	nop
 800d1fe:	f7f9 fd7b 	bl	8006cf8 <HAL_GetTick>
 800d202:	4602      	mov	r2, r0
 800d204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d206:	4293      	cmp	r3, r2
 800d208:	d0f9      	beq.n	800d1fe <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d20a:	4b0a      	ldr	r3, [pc, #40]	@ (800d234 <HAL_RCC_OscConfig+0x7ac>)
 800d20c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d20e:	4b0a      	ldr	r3, [pc, #40]	@ (800d238 <HAL_RCC_OscConfig+0x7b0>)
 800d210:	4013      	ands	r3, r2
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d216:	00d2      	lsls	r2, r2, #3
 800d218:	4906      	ldr	r1, [pc, #24]	@ (800d234 <HAL_RCC_OscConfig+0x7ac>)
 800d21a:	4313      	orrs	r3, r2
 800d21c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d21e:	4b05      	ldr	r3, [pc, #20]	@ (800d234 <HAL_RCC_OscConfig+0x7ac>)
 800d220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d222:	4a04      	ldr	r2, [pc, #16]	@ (800d234 <HAL_RCC_OscConfig+0x7ac>)
 800d224:	f043 0301 	orr.w	r3, r3, #1
 800d228:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3730      	adds	r7, #48	@ 0x30
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	58024400 	.word	0x58024400
 800d238:	ffff0007 	.word	0xffff0007

0800d23c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b086      	sub	sp, #24
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d101      	bne.n	800d250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d24c:	2301      	movs	r3, #1
 800d24e:	e19c      	b.n	800d58a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d250:	4b8a      	ldr	r3, [pc, #552]	@ (800d47c <HAL_RCC_ClockConfig+0x240>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f003 030f 	and.w	r3, r3, #15
 800d258:	683a      	ldr	r2, [r7, #0]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d910      	bls.n	800d280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d25e:	4b87      	ldr	r3, [pc, #540]	@ (800d47c <HAL_RCC_ClockConfig+0x240>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f023 020f 	bic.w	r2, r3, #15
 800d266:	4985      	ldr	r1, [pc, #532]	@ (800d47c <HAL_RCC_ClockConfig+0x240>)
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	4313      	orrs	r3, r2
 800d26c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d26e:	4b83      	ldr	r3, [pc, #524]	@ (800d47c <HAL_RCC_ClockConfig+0x240>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f003 030f 	and.w	r3, r3, #15
 800d276:	683a      	ldr	r2, [r7, #0]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d001      	beq.n	800d280 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d27c:	2301      	movs	r3, #1
 800d27e:	e184      	b.n	800d58a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f003 0304 	and.w	r3, r3, #4
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d010      	beq.n	800d2ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	691a      	ldr	r2, [r3, #16]
 800d290:	4b7b      	ldr	r3, [pc, #492]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d292:	699b      	ldr	r3, [r3, #24]
 800d294:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d298:	429a      	cmp	r2, r3
 800d29a:	d908      	bls.n	800d2ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d29c:	4b78      	ldr	r3, [pc, #480]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d29e:	699b      	ldr	r3, [r3, #24]
 800d2a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	691b      	ldr	r3, [r3, #16]
 800d2a8:	4975      	ldr	r1, [pc, #468]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f003 0308 	and.w	r3, r3, #8
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d010      	beq.n	800d2dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	695a      	ldr	r2, [r3, #20]
 800d2be:	4b70      	ldr	r3, [pc, #448]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d2c0:	69db      	ldr	r3, [r3, #28]
 800d2c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d908      	bls.n	800d2dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d2ca:	4b6d      	ldr	r3, [pc, #436]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d2cc:	69db      	ldr	r3, [r3, #28]
 800d2ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	695b      	ldr	r3, [r3, #20]
 800d2d6:	496a      	ldr	r1, [pc, #424]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f003 0310 	and.w	r3, r3, #16
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d010      	beq.n	800d30a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	699a      	ldr	r2, [r3, #24]
 800d2ec:	4b64      	ldr	r3, [pc, #400]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d2ee:	69db      	ldr	r3, [r3, #28]
 800d2f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d908      	bls.n	800d30a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d2f8:	4b61      	ldr	r3, [pc, #388]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d2fa:	69db      	ldr	r3, [r3, #28]
 800d2fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	699b      	ldr	r3, [r3, #24]
 800d304:	495e      	ldr	r1, [pc, #376]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d306:	4313      	orrs	r3, r2
 800d308:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f003 0320 	and.w	r3, r3, #32
 800d312:	2b00      	cmp	r3, #0
 800d314:	d010      	beq.n	800d338 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	69da      	ldr	r2, [r3, #28]
 800d31a:	4b59      	ldr	r3, [pc, #356]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d31c:	6a1b      	ldr	r3, [r3, #32]
 800d31e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d322:	429a      	cmp	r2, r3
 800d324:	d908      	bls.n	800d338 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d326:	4b56      	ldr	r3, [pc, #344]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d328:	6a1b      	ldr	r3, [r3, #32]
 800d32a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	69db      	ldr	r3, [r3, #28]
 800d332:	4953      	ldr	r1, [pc, #332]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d334:	4313      	orrs	r3, r2
 800d336:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f003 0302 	and.w	r3, r3, #2
 800d340:	2b00      	cmp	r3, #0
 800d342:	d010      	beq.n	800d366 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	68da      	ldr	r2, [r3, #12]
 800d348:	4b4d      	ldr	r3, [pc, #308]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d34a:	699b      	ldr	r3, [r3, #24]
 800d34c:	f003 030f 	and.w	r3, r3, #15
 800d350:	429a      	cmp	r2, r3
 800d352:	d908      	bls.n	800d366 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d354:	4b4a      	ldr	r3, [pc, #296]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d356:	699b      	ldr	r3, [r3, #24]
 800d358:	f023 020f 	bic.w	r2, r3, #15
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	4947      	ldr	r1, [pc, #284]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d362:	4313      	orrs	r3, r2
 800d364:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d055      	beq.n	800d41e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d372:	4b43      	ldr	r3, [pc, #268]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d374:	699b      	ldr	r3, [r3, #24]
 800d376:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	689b      	ldr	r3, [r3, #8]
 800d37e:	4940      	ldr	r1, [pc, #256]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d380:	4313      	orrs	r3, r2
 800d382:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d107      	bne.n	800d39c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d38c:	4b3c      	ldr	r3, [pc, #240]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d394:	2b00      	cmp	r3, #0
 800d396:	d121      	bne.n	800d3dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d398:	2301      	movs	r3, #1
 800d39a:	e0f6      	b.n	800d58a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	2b03      	cmp	r3, #3
 800d3a2:	d107      	bne.n	800d3b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d3a4:	4b36      	ldr	r3, [pc, #216]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d115      	bne.n	800d3dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e0ea      	b.n	800d58a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d107      	bne.n	800d3cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d3bc:	4b30      	ldr	r3, [pc, #192]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d109      	bne.n	800d3dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e0de      	b.n	800d58a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3cc:	4b2c      	ldr	r3, [pc, #176]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f003 0304 	and.w	r3, r3, #4
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d101      	bne.n	800d3dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e0d6      	b.n	800d58a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d3dc:	4b28      	ldr	r3, [pc, #160]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d3de:	691b      	ldr	r3, [r3, #16]
 800d3e0:	f023 0207 	bic.w	r2, r3, #7
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	4925      	ldr	r1, [pc, #148]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3ee:	f7f9 fc83 	bl	8006cf8 <HAL_GetTick>
 800d3f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d3f4:	e00a      	b.n	800d40c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d3f6:	f7f9 fc7f 	bl	8006cf8 <HAL_GetTick>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	1ad3      	subs	r3, r2, r3
 800d400:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d404:	4293      	cmp	r3, r2
 800d406:	d901      	bls.n	800d40c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d408:	2303      	movs	r3, #3
 800d40a:	e0be      	b.n	800d58a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d40c:	4b1c      	ldr	r3, [pc, #112]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	00db      	lsls	r3, r3, #3
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d1eb      	bne.n	800d3f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f003 0302 	and.w	r3, r3, #2
 800d426:	2b00      	cmp	r3, #0
 800d428:	d010      	beq.n	800d44c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68da      	ldr	r2, [r3, #12]
 800d42e:	4b14      	ldr	r3, [pc, #80]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d430:	699b      	ldr	r3, [r3, #24]
 800d432:	f003 030f 	and.w	r3, r3, #15
 800d436:	429a      	cmp	r2, r3
 800d438:	d208      	bcs.n	800d44c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d43a:	4b11      	ldr	r3, [pc, #68]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d43c:	699b      	ldr	r3, [r3, #24]
 800d43e:	f023 020f 	bic.w	r2, r3, #15
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	490e      	ldr	r1, [pc, #56]	@ (800d480 <HAL_RCC_ClockConfig+0x244>)
 800d448:	4313      	orrs	r3, r2
 800d44a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d44c:	4b0b      	ldr	r3, [pc, #44]	@ (800d47c <HAL_RCC_ClockConfig+0x240>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f003 030f 	and.w	r3, r3, #15
 800d454:	683a      	ldr	r2, [r7, #0]
 800d456:	429a      	cmp	r2, r3
 800d458:	d214      	bcs.n	800d484 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d45a:	4b08      	ldr	r3, [pc, #32]	@ (800d47c <HAL_RCC_ClockConfig+0x240>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f023 020f 	bic.w	r2, r3, #15
 800d462:	4906      	ldr	r1, [pc, #24]	@ (800d47c <HAL_RCC_ClockConfig+0x240>)
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	4313      	orrs	r3, r2
 800d468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d46a:	4b04      	ldr	r3, [pc, #16]	@ (800d47c <HAL_RCC_ClockConfig+0x240>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f003 030f 	and.w	r3, r3, #15
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	429a      	cmp	r2, r3
 800d476:	d005      	beq.n	800d484 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d478:	2301      	movs	r3, #1
 800d47a:	e086      	b.n	800d58a <HAL_RCC_ClockConfig+0x34e>
 800d47c:	52002000 	.word	0x52002000
 800d480:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f003 0304 	and.w	r3, r3, #4
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d010      	beq.n	800d4b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	691a      	ldr	r2, [r3, #16]
 800d494:	4b3f      	ldr	r3, [pc, #252]	@ (800d594 <HAL_RCC_ClockConfig+0x358>)
 800d496:	699b      	ldr	r3, [r3, #24]
 800d498:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d208      	bcs.n	800d4b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d4a0:	4b3c      	ldr	r3, [pc, #240]	@ (800d594 <HAL_RCC_ClockConfig+0x358>)
 800d4a2:	699b      	ldr	r3, [r3, #24]
 800d4a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	691b      	ldr	r3, [r3, #16]
 800d4ac:	4939      	ldr	r1, [pc, #228]	@ (800d594 <HAL_RCC_ClockConfig+0x358>)
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f003 0308 	and.w	r3, r3, #8
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d010      	beq.n	800d4e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	695a      	ldr	r2, [r3, #20]
 800d4c2:	4b34      	ldr	r3, [pc, #208]	@ (800d594 <HAL_RCC_ClockConfig+0x358>)
 800d4c4:	69db      	ldr	r3, [r3, #28]
 800d4c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d208      	bcs.n	800d4e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d4ce:	4b31      	ldr	r3, [pc, #196]	@ (800d594 <HAL_RCC_ClockConfig+0x358>)
 800d4d0:	69db      	ldr	r3, [r3, #28]
 800d4d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	695b      	ldr	r3, [r3, #20]
 800d4da:	492e      	ldr	r1, [pc, #184]	@ (800d594 <HAL_RCC_ClockConfig+0x358>)
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f003 0310 	and.w	r3, r3, #16
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d010      	beq.n	800d50e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	699a      	ldr	r2, [r3, #24]
 800d4f0:	4b28      	ldr	r3, [pc, #160]	@ (800d594 <HAL_RCC_ClockConfig+0x358>)
 800d4f2:	69db      	ldr	r3, [r3, #28]
 800d4f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d208      	bcs.n	800d50e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d4fc:	4b25      	ldr	r3, [pc, #148]	@ (800d594 <HAL_RCC_ClockConfig+0x358>)
 800d4fe:	69db      	ldr	r3, [r3, #28]
 800d500:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	699b      	ldr	r3, [r3, #24]
 800d508:	4922      	ldr	r1, [pc, #136]	@ (800d594 <HAL_RCC_ClockConfig+0x358>)
 800d50a:	4313      	orrs	r3, r2
 800d50c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f003 0320 	and.w	r3, r3, #32
 800d516:	2b00      	cmp	r3, #0
 800d518:	d010      	beq.n	800d53c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	69da      	ldr	r2, [r3, #28]
 800d51e:	4b1d      	ldr	r3, [pc, #116]	@ (800d594 <HAL_RCC_ClockConfig+0x358>)
 800d520:	6a1b      	ldr	r3, [r3, #32]
 800d522:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d526:	429a      	cmp	r2, r3
 800d528:	d208      	bcs.n	800d53c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d52a:	4b1a      	ldr	r3, [pc, #104]	@ (800d594 <HAL_RCC_ClockConfig+0x358>)
 800d52c:	6a1b      	ldr	r3, [r3, #32]
 800d52e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	69db      	ldr	r3, [r3, #28]
 800d536:	4917      	ldr	r1, [pc, #92]	@ (800d594 <HAL_RCC_ClockConfig+0x358>)
 800d538:	4313      	orrs	r3, r2
 800d53a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d53c:	f000 f834 	bl	800d5a8 <HAL_RCC_GetSysClockFreq>
 800d540:	4602      	mov	r2, r0
 800d542:	4b14      	ldr	r3, [pc, #80]	@ (800d594 <HAL_RCC_ClockConfig+0x358>)
 800d544:	699b      	ldr	r3, [r3, #24]
 800d546:	0a1b      	lsrs	r3, r3, #8
 800d548:	f003 030f 	and.w	r3, r3, #15
 800d54c:	4912      	ldr	r1, [pc, #72]	@ (800d598 <HAL_RCC_ClockConfig+0x35c>)
 800d54e:	5ccb      	ldrb	r3, [r1, r3]
 800d550:	f003 031f 	and.w	r3, r3, #31
 800d554:	fa22 f303 	lsr.w	r3, r2, r3
 800d558:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d55a:	4b0e      	ldr	r3, [pc, #56]	@ (800d594 <HAL_RCC_ClockConfig+0x358>)
 800d55c:	699b      	ldr	r3, [r3, #24]
 800d55e:	f003 030f 	and.w	r3, r3, #15
 800d562:	4a0d      	ldr	r2, [pc, #52]	@ (800d598 <HAL_RCC_ClockConfig+0x35c>)
 800d564:	5cd3      	ldrb	r3, [r2, r3]
 800d566:	f003 031f 	and.w	r3, r3, #31
 800d56a:	693a      	ldr	r2, [r7, #16]
 800d56c:	fa22 f303 	lsr.w	r3, r2, r3
 800d570:	4a0a      	ldr	r2, [pc, #40]	@ (800d59c <HAL_RCC_ClockConfig+0x360>)
 800d572:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d574:	4a0a      	ldr	r2, [pc, #40]	@ (800d5a0 <HAL_RCC_ClockConfig+0x364>)
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d57a:	4b0a      	ldr	r3, [pc, #40]	@ (800d5a4 <HAL_RCC_ClockConfig+0x368>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4618      	mov	r0, r3
 800d580:	f7f9 fb70 	bl	8006c64 <HAL_InitTick>
 800d584:	4603      	mov	r3, r0
 800d586:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d588:	7bfb      	ldrb	r3, [r7, #15]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3718      	adds	r7, #24
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	58024400 	.word	0x58024400
 800d598:	0801d270 	.word	0x0801d270
 800d59c:	24000004 	.word	0x24000004
 800d5a0:	24000000 	.word	0x24000000
 800d5a4:	24000008 	.word	0x24000008

0800d5a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b089      	sub	sp, #36	@ 0x24
 800d5ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d5ae:	4bb3      	ldr	r3, [pc, #716]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d5b6:	2b18      	cmp	r3, #24
 800d5b8:	f200 8155 	bhi.w	800d866 <HAL_RCC_GetSysClockFreq+0x2be>
 800d5bc:	a201      	add	r2, pc, #4	@ (adr r2, 800d5c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c2:	bf00      	nop
 800d5c4:	0800d629 	.word	0x0800d629
 800d5c8:	0800d867 	.word	0x0800d867
 800d5cc:	0800d867 	.word	0x0800d867
 800d5d0:	0800d867 	.word	0x0800d867
 800d5d4:	0800d867 	.word	0x0800d867
 800d5d8:	0800d867 	.word	0x0800d867
 800d5dc:	0800d867 	.word	0x0800d867
 800d5e0:	0800d867 	.word	0x0800d867
 800d5e4:	0800d64f 	.word	0x0800d64f
 800d5e8:	0800d867 	.word	0x0800d867
 800d5ec:	0800d867 	.word	0x0800d867
 800d5f0:	0800d867 	.word	0x0800d867
 800d5f4:	0800d867 	.word	0x0800d867
 800d5f8:	0800d867 	.word	0x0800d867
 800d5fc:	0800d867 	.word	0x0800d867
 800d600:	0800d867 	.word	0x0800d867
 800d604:	0800d655 	.word	0x0800d655
 800d608:	0800d867 	.word	0x0800d867
 800d60c:	0800d867 	.word	0x0800d867
 800d610:	0800d867 	.word	0x0800d867
 800d614:	0800d867 	.word	0x0800d867
 800d618:	0800d867 	.word	0x0800d867
 800d61c:	0800d867 	.word	0x0800d867
 800d620:	0800d867 	.word	0x0800d867
 800d624:	0800d65b 	.word	0x0800d65b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d628:	4b94      	ldr	r3, [pc, #592]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f003 0320 	and.w	r3, r3, #32
 800d630:	2b00      	cmp	r3, #0
 800d632:	d009      	beq.n	800d648 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d634:	4b91      	ldr	r3, [pc, #580]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	08db      	lsrs	r3, r3, #3
 800d63a:	f003 0303 	and.w	r3, r3, #3
 800d63e:	4a90      	ldr	r2, [pc, #576]	@ (800d880 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d640:	fa22 f303 	lsr.w	r3, r2, r3
 800d644:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d646:	e111      	b.n	800d86c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d648:	4b8d      	ldr	r3, [pc, #564]	@ (800d880 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d64a:	61bb      	str	r3, [r7, #24]
      break;
 800d64c:	e10e      	b.n	800d86c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d64e:	4b8d      	ldr	r3, [pc, #564]	@ (800d884 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d650:	61bb      	str	r3, [r7, #24]
      break;
 800d652:	e10b      	b.n	800d86c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d654:	4b8c      	ldr	r3, [pc, #560]	@ (800d888 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d656:	61bb      	str	r3, [r7, #24]
      break;
 800d658:	e108      	b.n	800d86c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d65a:	4b88      	ldr	r3, [pc, #544]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d65c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d65e:	f003 0303 	and.w	r3, r3, #3
 800d662:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d664:	4b85      	ldr	r3, [pc, #532]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d668:	091b      	lsrs	r3, r3, #4
 800d66a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d66e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d670:	4b82      	ldr	r3, [pc, #520]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d674:	f003 0301 	and.w	r3, r3, #1
 800d678:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d67a:	4b80      	ldr	r3, [pc, #512]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d67c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d67e:	08db      	lsrs	r3, r3, #3
 800d680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	fb02 f303 	mul.w	r3, r2, r3
 800d68a:	ee07 3a90 	vmov	s15, r3
 800d68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d692:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f000 80e1 	beq.w	800d860 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	2b02      	cmp	r3, #2
 800d6a2:	f000 8083 	beq.w	800d7ac <HAL_RCC_GetSysClockFreq+0x204>
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	f200 80a1 	bhi.w	800d7f0 <HAL_RCC_GetSysClockFreq+0x248>
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d003      	beq.n	800d6bc <HAL_RCC_GetSysClockFreq+0x114>
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d056      	beq.n	800d768 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d6ba:	e099      	b.n	800d7f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6bc:	4b6f      	ldr	r3, [pc, #444]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f003 0320 	and.w	r3, r3, #32
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d02d      	beq.n	800d724 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6c8:	4b6c      	ldr	r3, [pc, #432]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	08db      	lsrs	r3, r3, #3
 800d6ce:	f003 0303 	and.w	r3, r3, #3
 800d6d2:	4a6b      	ldr	r2, [pc, #428]	@ (800d880 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d6d4:	fa22 f303 	lsr.w	r3, r2, r3
 800d6d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	ee07 3a90 	vmov	s15, r3
 800d6e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	ee07 3a90 	vmov	s15, r3
 800d6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6f2:	4b62      	ldr	r3, [pc, #392]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6fa:	ee07 3a90 	vmov	s15, r3
 800d6fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d702:	ed97 6a02 	vldr	s12, [r7, #8]
 800d706:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d88c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d70a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d70e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d71a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d71e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d722:	e087      	b.n	800d834 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	ee07 3a90 	vmov	s15, r3
 800d72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d72e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d890 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d736:	4b51      	ldr	r3, [pc, #324]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d73e:	ee07 3a90 	vmov	s15, r3
 800d742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d746:	ed97 6a02 	vldr	s12, [r7, #8]
 800d74a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d88c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d762:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d766:	e065      	b.n	800d834 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	ee07 3a90 	vmov	s15, r3
 800d76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d772:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d894 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d77a:	4b40      	ldr	r3, [pc, #256]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d77c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d782:	ee07 3a90 	vmov	s15, r3
 800d786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d78a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d78e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d88c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d79a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d7aa:	e043      	b.n	800d834 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	ee07 3a90 	vmov	s15, r3
 800d7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7b6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d898 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d7ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7be:	4b2f      	ldr	r3, [pc, #188]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7c6:	ee07 3a90 	vmov	s15, r3
 800d7ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800d7d2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d88c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d7d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d7ee:	e021      	b.n	800d834 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	ee07 3a90 	vmov	s15, r3
 800d7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7fa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d894 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d802:	4b1e      	ldr	r3, [pc, #120]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d80a:	ee07 3a90 	vmov	s15, r3
 800d80e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d812:	ed97 6a02 	vldr	s12, [r7, #8]
 800d816:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d88c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d81a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d81e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d82e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d832:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d834:	4b11      	ldr	r3, [pc, #68]	@ (800d87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d838:	0a5b      	lsrs	r3, r3, #9
 800d83a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d83e:	3301      	adds	r3, #1
 800d840:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	ee07 3a90 	vmov	s15, r3
 800d848:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d84c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d858:	ee17 3a90 	vmov	r3, s15
 800d85c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d85e:	e005      	b.n	800d86c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d860:	2300      	movs	r3, #0
 800d862:	61bb      	str	r3, [r7, #24]
      break;
 800d864:	e002      	b.n	800d86c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d866:	4b07      	ldr	r3, [pc, #28]	@ (800d884 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d868:	61bb      	str	r3, [r7, #24]
      break;
 800d86a:	bf00      	nop
  }

  return sysclockfreq;
 800d86c:	69bb      	ldr	r3, [r7, #24]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3724      	adds	r7, #36	@ 0x24
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	58024400 	.word	0x58024400
 800d880:	03d09000 	.word	0x03d09000
 800d884:	003d0900 	.word	0x003d0900
 800d888:	016e3600 	.word	0x016e3600
 800d88c:	46000000 	.word	0x46000000
 800d890:	4c742400 	.word	0x4c742400
 800d894:	4a742400 	.word	0x4a742400
 800d898:	4bb71b00 	.word	0x4bb71b00

0800d89c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d8a2:	f7ff fe81 	bl	800d5a8 <HAL_RCC_GetSysClockFreq>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	4b10      	ldr	r3, [pc, #64]	@ (800d8ec <HAL_RCC_GetHCLKFreq+0x50>)
 800d8aa:	699b      	ldr	r3, [r3, #24]
 800d8ac:	0a1b      	lsrs	r3, r3, #8
 800d8ae:	f003 030f 	and.w	r3, r3, #15
 800d8b2:	490f      	ldr	r1, [pc, #60]	@ (800d8f0 <HAL_RCC_GetHCLKFreq+0x54>)
 800d8b4:	5ccb      	ldrb	r3, [r1, r3]
 800d8b6:	f003 031f 	and.w	r3, r3, #31
 800d8ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d8be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d8c0:	4b0a      	ldr	r3, [pc, #40]	@ (800d8ec <HAL_RCC_GetHCLKFreq+0x50>)
 800d8c2:	699b      	ldr	r3, [r3, #24]
 800d8c4:	f003 030f 	and.w	r3, r3, #15
 800d8c8:	4a09      	ldr	r2, [pc, #36]	@ (800d8f0 <HAL_RCC_GetHCLKFreq+0x54>)
 800d8ca:	5cd3      	ldrb	r3, [r2, r3]
 800d8cc:	f003 031f 	and.w	r3, r3, #31
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d8d6:	4a07      	ldr	r2, [pc, #28]	@ (800d8f4 <HAL_RCC_GetHCLKFreq+0x58>)
 800d8d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d8da:	4a07      	ldr	r2, [pc, #28]	@ (800d8f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d8e0:	4b04      	ldr	r3, [pc, #16]	@ (800d8f4 <HAL_RCC_GetHCLKFreq+0x58>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3708      	adds	r7, #8
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	58024400 	.word	0x58024400
 800d8f0:	0801d270 	.word	0x0801d270
 800d8f4:	24000004 	.word	0x24000004
 800d8f8:	24000000 	.word	0x24000000

0800d8fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d900:	f7ff ffcc 	bl	800d89c <HAL_RCC_GetHCLKFreq>
 800d904:	4602      	mov	r2, r0
 800d906:	4b06      	ldr	r3, [pc, #24]	@ (800d920 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d908:	69db      	ldr	r3, [r3, #28]
 800d90a:	091b      	lsrs	r3, r3, #4
 800d90c:	f003 0307 	and.w	r3, r3, #7
 800d910:	4904      	ldr	r1, [pc, #16]	@ (800d924 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d912:	5ccb      	ldrb	r3, [r1, r3]
 800d914:	f003 031f 	and.w	r3, r3, #31
 800d918:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	58024400 	.word	0x58024400
 800d924:	0801d270 	.word	0x0801d270

0800d928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d92c:	f7ff ffb6 	bl	800d89c <HAL_RCC_GetHCLKFreq>
 800d930:	4602      	mov	r2, r0
 800d932:	4b06      	ldr	r3, [pc, #24]	@ (800d94c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d934:	69db      	ldr	r3, [r3, #28]
 800d936:	0a1b      	lsrs	r3, r3, #8
 800d938:	f003 0307 	and.w	r3, r3, #7
 800d93c:	4904      	ldr	r1, [pc, #16]	@ (800d950 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d93e:	5ccb      	ldrb	r3, [r1, r3]
 800d940:	f003 031f 	and.w	r3, r3, #31
 800d944:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d948:	4618      	mov	r0, r3
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	58024400 	.word	0x58024400
 800d950:	0801d270 	.word	0x0801d270

0800d954 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d958:	b0c6      	sub	sp, #280	@ 0x118
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d960:	2300      	movs	r3, #0
 800d962:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d966:	2300      	movs	r3, #0
 800d968:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d974:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d978:	2500      	movs	r5, #0
 800d97a:	ea54 0305 	orrs.w	r3, r4, r5
 800d97e:	d049      	beq.n	800da14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d986:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d98a:	d02f      	beq.n	800d9ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d98c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d990:	d828      	bhi.n	800d9e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d992:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d996:	d01a      	beq.n	800d9ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d998:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d99c:	d822      	bhi.n	800d9e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d003      	beq.n	800d9aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d9a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d9a6:	d007      	beq.n	800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d9a8:	e01c      	b.n	800d9e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d9aa:	4bab      	ldr	r3, [pc, #684]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ae:	4aaa      	ldr	r2, [pc, #680]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d9b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d9b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d9b6:	e01a      	b.n	800d9ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9bc:	3308      	adds	r3, #8
 800d9be:	2102      	movs	r1, #2
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f002 fa49 	bl	800fe58 <RCCEx_PLL2_Config>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d9cc:	e00f      	b.n	800d9ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9d2:	3328      	adds	r3, #40	@ 0x28
 800d9d4:	2102      	movs	r1, #2
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f002 faf0 	bl	800ffbc <RCCEx_PLL3_Config>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d9e2:	e004      	b.n	800d9ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d9ea:	e000      	b.n	800d9ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d9ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d10a      	bne.n	800da0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d9f6:	4b98      	ldr	r3, [pc, #608]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d9f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da04:	4a94      	ldr	r2, [pc, #592]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800da06:	430b      	orrs	r3, r1
 800da08:	6513      	str	r3, [r2, #80]	@ 0x50
 800da0a:	e003      	b.n	800da14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800da10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800da14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800da20:	f04f 0900 	mov.w	r9, #0
 800da24:	ea58 0309 	orrs.w	r3, r8, r9
 800da28:	d047      	beq.n	800daba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800da2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da30:	2b04      	cmp	r3, #4
 800da32:	d82a      	bhi.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800da34:	a201      	add	r2, pc, #4	@ (adr r2, 800da3c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800da36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da3a:	bf00      	nop
 800da3c:	0800da51 	.word	0x0800da51
 800da40:	0800da5f 	.word	0x0800da5f
 800da44:	0800da75 	.word	0x0800da75
 800da48:	0800da93 	.word	0x0800da93
 800da4c:	0800da93 	.word	0x0800da93
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da50:	4b81      	ldr	r3, [pc, #516]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800da52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da54:	4a80      	ldr	r2, [pc, #512]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800da56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800da5c:	e01a      	b.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800da5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da62:	3308      	adds	r3, #8
 800da64:	2100      	movs	r1, #0
 800da66:	4618      	mov	r0, r3
 800da68:	f002 f9f6 	bl	800fe58 <RCCEx_PLL2_Config>
 800da6c:	4603      	mov	r3, r0
 800da6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800da72:	e00f      	b.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800da74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da78:	3328      	adds	r3, #40	@ 0x28
 800da7a:	2100      	movs	r1, #0
 800da7c:	4618      	mov	r0, r3
 800da7e:	f002 fa9d 	bl	800ffbc <RCCEx_PLL3_Config>
 800da82:	4603      	mov	r3, r0
 800da84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800da88:	e004      	b.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da8a:	2301      	movs	r3, #1
 800da8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800da90:	e000      	b.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800da92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10a      	bne.n	800dab2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800da9c:	4b6e      	ldr	r3, [pc, #440]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800da9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800daa0:	f023 0107 	bic.w	r1, r3, #7
 800daa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800daa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800daaa:	4a6b      	ldr	r2, [pc, #428]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800daac:	430b      	orrs	r3, r1
 800daae:	6513      	str	r3, [r2, #80]	@ 0x50
 800dab0:	e003      	b.n	800daba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dab2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dab6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800daba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800dac6:	f04f 0b00 	mov.w	fp, #0
 800daca:	ea5a 030b 	orrs.w	r3, sl, fp
 800dace:	d05b      	beq.n	800db88 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800dad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dad4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dad8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800dadc:	d03b      	beq.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800dade:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800dae2:	d834      	bhi.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800dae4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dae8:	d037      	beq.n	800db5a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800daea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800daee:	d82e      	bhi.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800daf0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800daf4:	d033      	beq.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800daf6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dafa:	d828      	bhi.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800dafc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db00:	d01a      	beq.n	800db38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800db02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db06:	d822      	bhi.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d003      	beq.n	800db14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800db0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db10:	d007      	beq.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800db12:	e01c      	b.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db14:	4b50      	ldr	r3, [pc, #320]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800db16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db18:	4a4f      	ldr	r2, [pc, #316]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800db1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800db20:	e01e      	b.n	800db60 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800db22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db26:	3308      	adds	r3, #8
 800db28:	2100      	movs	r1, #0
 800db2a:	4618      	mov	r0, r3
 800db2c:	f002 f994 	bl	800fe58 <RCCEx_PLL2_Config>
 800db30:	4603      	mov	r3, r0
 800db32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800db36:	e013      	b.n	800db60 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800db38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db3c:	3328      	adds	r3, #40	@ 0x28
 800db3e:	2100      	movs	r1, #0
 800db40:	4618      	mov	r0, r3
 800db42:	f002 fa3b 	bl	800ffbc <RCCEx_PLL3_Config>
 800db46:	4603      	mov	r3, r0
 800db48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800db4c:	e008      	b.n	800db60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800db4e:	2301      	movs	r3, #1
 800db50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800db54:	e004      	b.n	800db60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800db56:	bf00      	nop
 800db58:	e002      	b.n	800db60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800db5a:	bf00      	nop
 800db5c:	e000      	b.n	800db60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800db5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800db64:	2b00      	cmp	r3, #0
 800db66:	d10b      	bne.n	800db80 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800db68:	4b3b      	ldr	r3, [pc, #236]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800db6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db6c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800db70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800db78:	4a37      	ldr	r2, [pc, #220]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800db7a:	430b      	orrs	r3, r1
 800db7c:	6593      	str	r3, [r2, #88]	@ 0x58
 800db7e:	e003      	b.n	800db88 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800db84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800db88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db90:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800db94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800db98:	2300      	movs	r3, #0
 800db9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800db9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800dba2:	460b      	mov	r3, r1
 800dba4:	4313      	orrs	r3, r2
 800dba6:	d05d      	beq.n	800dc64 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800dba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dbb0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800dbb4:	d03b      	beq.n	800dc2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800dbb6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800dbba:	d834      	bhi.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dbbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dbc0:	d037      	beq.n	800dc32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800dbc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dbc6:	d82e      	bhi.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dbc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dbcc:	d033      	beq.n	800dc36 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800dbce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dbd2:	d828      	bhi.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dbd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dbd8:	d01a      	beq.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800dbda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dbde:	d822      	bhi.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d003      	beq.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x298>
 800dbe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dbe8:	d007      	beq.n	800dbfa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800dbea:	e01c      	b.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbec:	4b1a      	ldr	r3, [pc, #104]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf0:	4a19      	ldr	r2, [pc, #100]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dbf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dbf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dbf8:	e01e      	b.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbfe:	3308      	adds	r3, #8
 800dc00:	2100      	movs	r1, #0
 800dc02:	4618      	mov	r0, r3
 800dc04:	f002 f928 	bl	800fe58 <RCCEx_PLL2_Config>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dc0e:	e013      	b.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dc10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc14:	3328      	adds	r3, #40	@ 0x28
 800dc16:	2100      	movs	r1, #0
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f002 f9cf 	bl	800ffbc <RCCEx_PLL3_Config>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc24:	e008      	b.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800dc26:	2301      	movs	r3, #1
 800dc28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dc2c:	e004      	b.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800dc2e:	bf00      	nop
 800dc30:	e002      	b.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800dc32:	bf00      	nop
 800dc34:	e000      	b.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800dc36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10d      	bne.n	800dc5c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800dc40:	4b05      	ldr	r3, [pc, #20]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dc42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc44:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800dc48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dc50:	4a01      	ldr	r2, [pc, #4]	@ (800dc58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dc52:	430b      	orrs	r3, r1
 800dc54:	6593      	str	r3, [r2, #88]	@ 0x58
 800dc56:	e005      	b.n	800dc64 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800dc58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dc60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800dc64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800dc70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dc74:	2300      	movs	r3, #0
 800dc76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800dc7a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800dc7e:	460b      	mov	r3, r1
 800dc80:	4313      	orrs	r3, r2
 800dc82:	d03a      	beq.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800dc84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc8a:	2b30      	cmp	r3, #48	@ 0x30
 800dc8c:	d01f      	beq.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800dc8e:	2b30      	cmp	r3, #48	@ 0x30
 800dc90:	d819      	bhi.n	800dcc6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800dc92:	2b20      	cmp	r3, #32
 800dc94:	d00c      	beq.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800dc96:	2b20      	cmp	r3, #32
 800dc98:	d815      	bhi.n	800dcc6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d019      	beq.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800dc9e:	2b10      	cmp	r3, #16
 800dca0:	d111      	bne.n	800dcc6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dca2:	4baa      	ldr	r3, [pc, #680]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dca6:	4aa9      	ldr	r2, [pc, #676]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dcac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800dcae:	e011      	b.n	800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dcb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcb4:	3308      	adds	r3, #8
 800dcb6:	2102      	movs	r1, #2
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f002 f8cd 	bl	800fe58 <RCCEx_PLL2_Config>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800dcc4:	e006      	b.n	800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dccc:	e002      	b.n	800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800dcce:	bf00      	nop
 800dcd0:	e000      	b.n	800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800dcd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dcd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d10a      	bne.n	800dcf2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800dcdc:	4b9b      	ldr	r3, [pc, #620]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dcde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dce0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800dce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcea:	4a98      	ldr	r2, [pc, #608]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dcec:	430b      	orrs	r3, r1
 800dcee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800dcf0:	e003      	b.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dcf6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800dcfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd02:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800dd06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dd10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800dd14:	460b      	mov	r3, r1
 800dd16:	4313      	orrs	r3, r2
 800dd18:	d051      	beq.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800dd1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dd24:	d035      	beq.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800dd26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dd2a:	d82e      	bhi.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800dd2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dd30:	d031      	beq.n	800dd96 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800dd32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dd36:	d828      	bhi.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800dd38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd3c:	d01a      	beq.n	800dd74 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800dd3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd42:	d822      	bhi.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d003      	beq.n	800dd50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800dd48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd4c:	d007      	beq.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800dd4e:	e01c      	b.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd50:	4b7e      	ldr	r3, [pc, #504]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dd52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd54:	4a7d      	ldr	r2, [pc, #500]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dd56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dd5c:	e01c      	b.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd62:	3308      	adds	r3, #8
 800dd64:	2100      	movs	r1, #0
 800dd66:	4618      	mov	r0, r3
 800dd68:	f002 f876 	bl	800fe58 <RCCEx_PLL2_Config>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dd72:	e011      	b.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dd74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd78:	3328      	adds	r3, #40	@ 0x28
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f002 f91d 	bl	800ffbc <RCCEx_PLL3_Config>
 800dd82:	4603      	mov	r3, r0
 800dd84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dd88:	e006      	b.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dd90:	e002      	b.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800dd92:	bf00      	nop
 800dd94:	e000      	b.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800dd96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d10a      	bne.n	800ddb6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dda0:	4b6a      	ldr	r3, [pc, #424]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dda2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dda4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800dda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddae:	4a67      	ldr	r2, [pc, #412]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ddb0:	430b      	orrs	r3, r1
 800ddb2:	6513      	str	r3, [r2, #80]	@ 0x50
 800ddb4:	e003      	b.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ddba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ddbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ddca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ddce:	2300      	movs	r3, #0
 800ddd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ddd4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ddd8:	460b      	mov	r3, r1
 800ddda:	4313      	orrs	r3, r2
 800dddc:	d053      	beq.n	800de86 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ddde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dde2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dde4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dde8:	d033      	beq.n	800de52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ddea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ddee:	d82c      	bhi.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ddf0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ddf4:	d02f      	beq.n	800de56 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ddf6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ddfa:	d826      	bhi.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ddfc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800de00:	d02b      	beq.n	800de5a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800de02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800de06:	d820      	bhi.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800de08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de0c:	d012      	beq.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800de0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de12:	d81a      	bhi.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800de14:	2b00      	cmp	r3, #0
 800de16:	d022      	beq.n	800de5e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800de18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de1c:	d115      	bne.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800de1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de22:	3308      	adds	r3, #8
 800de24:	2101      	movs	r1, #1
 800de26:	4618      	mov	r0, r3
 800de28:	f002 f816 	bl	800fe58 <RCCEx_PLL2_Config>
 800de2c:	4603      	mov	r3, r0
 800de2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800de32:	e015      	b.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800de34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de38:	3328      	adds	r3, #40	@ 0x28
 800de3a:	2101      	movs	r1, #1
 800de3c:	4618      	mov	r0, r3
 800de3e:	f002 f8bd 	bl	800ffbc <RCCEx_PLL3_Config>
 800de42:	4603      	mov	r3, r0
 800de44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800de48:	e00a      	b.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800de50:	e006      	b.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800de52:	bf00      	nop
 800de54:	e004      	b.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800de56:	bf00      	nop
 800de58:	e002      	b.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800de5a:	bf00      	nop
 800de5c:	e000      	b.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800de5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de64:	2b00      	cmp	r3, #0
 800de66:	d10a      	bne.n	800de7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800de68:	4b38      	ldr	r3, [pc, #224]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800de6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de6c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800de70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de76:	4a35      	ldr	r2, [pc, #212]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800de78:	430b      	orrs	r3, r1
 800de7a:	6513      	str	r3, [r2, #80]	@ 0x50
 800de7c:	e003      	b.n	800de86 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800de86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800de92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800de96:	2300      	movs	r3, #0
 800de98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800de9c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800dea0:	460b      	mov	r3, r1
 800dea2:	4313      	orrs	r3, r2
 800dea4:	d058      	beq.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800dea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800deae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800deb2:	d033      	beq.n	800df1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800deb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800deb8:	d82c      	bhi.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800deba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800debe:	d02f      	beq.n	800df20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800dec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dec4:	d826      	bhi.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800dec6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800deca:	d02b      	beq.n	800df24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800decc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ded0:	d820      	bhi.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ded2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ded6:	d012      	beq.n	800defe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ded8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dedc:	d81a      	bhi.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d022      	beq.n	800df28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800dee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dee6:	d115      	bne.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deec:	3308      	adds	r3, #8
 800deee:	2101      	movs	r1, #1
 800def0:	4618      	mov	r0, r3
 800def2:	f001 ffb1 	bl	800fe58 <RCCEx_PLL2_Config>
 800def6:	4603      	mov	r3, r0
 800def8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800defc:	e015      	b.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800defe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df02:	3328      	adds	r3, #40	@ 0x28
 800df04:	2101      	movs	r1, #1
 800df06:	4618      	mov	r0, r3
 800df08:	f002 f858 	bl	800ffbc <RCCEx_PLL3_Config>
 800df0c:	4603      	mov	r3, r0
 800df0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800df12:	e00a      	b.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800df14:	2301      	movs	r3, #1
 800df16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800df1a:	e006      	b.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800df1c:	bf00      	nop
 800df1e:	e004      	b.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800df20:	bf00      	nop
 800df22:	e002      	b.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800df24:	bf00      	nop
 800df26:	e000      	b.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800df28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d10e      	bne.n	800df50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800df32:	4b06      	ldr	r3, [pc, #24]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800df34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df36:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800df3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800df42:	4a02      	ldr	r2, [pc, #8]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800df44:	430b      	orrs	r3, r1
 800df46:	6593      	str	r3, [r2, #88]	@ 0x58
 800df48:	e006      	b.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800df4a:	bf00      	nop
 800df4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800df58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df60:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800df64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800df68:	2300      	movs	r3, #0
 800df6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800df6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800df72:	460b      	mov	r3, r1
 800df74:	4313      	orrs	r3, r2
 800df76:	d037      	beq.n	800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800df78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df82:	d00e      	beq.n	800dfa2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800df84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df88:	d816      	bhi.n	800dfb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d018      	beq.n	800dfc0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800df8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df92:	d111      	bne.n	800dfb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df94:	4bc4      	ldr	r3, [pc, #784]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800df96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df98:	4ac3      	ldr	r2, [pc, #780]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800df9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800dfa0:	e00f      	b.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dfa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfa6:	3308      	adds	r3, #8
 800dfa8:	2101      	movs	r1, #1
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f001 ff54 	bl	800fe58 <RCCEx_PLL2_Config>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800dfb6:	e004      	b.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dfbe:	e000      	b.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800dfc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dfc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d10a      	bne.n	800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800dfca:	4bb7      	ldr	r3, [pc, #732]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dfcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800dfd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfd8:	4ab3      	ldr	r2, [pc, #716]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dfda:	430b      	orrs	r3, r1
 800dfdc:	6513      	str	r3, [r2, #80]	@ 0x50
 800dfde:	e003      	b.n	800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dfe4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800dfe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800dff4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dff8:	2300      	movs	r3, #0
 800dffa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dffe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e002:	460b      	mov	r3, r1
 800e004:	4313      	orrs	r3, r2
 800e006:	d039      	beq.n	800e07c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e00c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e00e:	2b03      	cmp	r3, #3
 800e010:	d81c      	bhi.n	800e04c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800e012:	a201      	add	r2, pc, #4	@ (adr r2, 800e018 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800e014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e018:	0800e055 	.word	0x0800e055
 800e01c:	0800e029 	.word	0x0800e029
 800e020:	0800e037 	.word	0x0800e037
 800e024:	0800e055 	.word	0x0800e055
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e028:	4b9f      	ldr	r3, [pc, #636]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e02c:	4a9e      	ldr	r2, [pc, #632]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e02e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e034:	e00f      	b.n	800e056 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e03a:	3308      	adds	r3, #8
 800e03c:	2102      	movs	r1, #2
 800e03e:	4618      	mov	r0, r3
 800e040:	f001 ff0a 	bl	800fe58 <RCCEx_PLL2_Config>
 800e044:	4603      	mov	r3, r0
 800e046:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e04a:	e004      	b.n	800e056 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e04c:	2301      	movs	r3, #1
 800e04e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e052:	e000      	b.n	800e056 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800e054:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e056:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d10a      	bne.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e05e:	4b92      	ldr	r3, [pc, #584]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e062:	f023 0103 	bic.w	r1, r3, #3
 800e066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e06a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e06c:	4a8e      	ldr	r2, [pc, #568]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e06e:	430b      	orrs	r3, r1
 800e070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e072:	e003      	b.n	800e07c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e078:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e084:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e088:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e08c:	2300      	movs	r3, #0
 800e08e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e092:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e096:	460b      	mov	r3, r1
 800e098:	4313      	orrs	r3, r2
 800e09a:	f000 8099 	beq.w	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e09e:	4b83      	ldr	r3, [pc, #524]	@ (800e2ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4a82      	ldr	r2, [pc, #520]	@ (800e2ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e0a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e0a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e0aa:	f7f8 fe25 	bl	8006cf8 <HAL_GetTick>
 800e0ae:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e0b2:	e00b      	b.n	800e0cc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e0b4:	f7f8 fe20 	bl	8006cf8 <HAL_GetTick>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e0be:	1ad3      	subs	r3, r2, r3
 800e0c0:	2b64      	cmp	r3, #100	@ 0x64
 800e0c2:	d903      	bls.n	800e0cc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800e0c4:	2303      	movs	r3, #3
 800e0c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e0ca:	e005      	b.n	800e0d8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e0cc:	4b77      	ldr	r3, [pc, #476]	@ (800e2ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d0ed      	beq.n	800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800e0d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d173      	bne.n	800e1c8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e0e0:	4b71      	ldr	r3, [pc, #452]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e0e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e0ec:	4053      	eors	r3, r2
 800e0ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d015      	beq.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e0f6:	4b6c      	ldr	r3, [pc, #432]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e0f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e0fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e102:	4b69      	ldr	r3, [pc, #420]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e106:	4a68      	ldr	r2, [pc, #416]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e10c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e10e:	4b66      	ldr	r3, [pc, #408]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e112:	4a65      	ldr	r2, [pc, #404]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e118:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e11a:	4a63      	ldr	r2, [pc, #396]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e11c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e120:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e126:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e12a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e12e:	d118      	bne.n	800e162 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e130:	f7f8 fde2 	bl	8006cf8 <HAL_GetTick>
 800e134:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e138:	e00d      	b.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e13a:	f7f8 fddd 	bl	8006cf8 <HAL_GetTick>
 800e13e:	4602      	mov	r2, r0
 800e140:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e144:	1ad2      	subs	r2, r2, r3
 800e146:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d903      	bls.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800e14e:	2303      	movs	r3, #3
 800e150:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800e154:	e005      	b.n	800e162 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e156:	4b54      	ldr	r3, [pc, #336]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e15a:	f003 0302 	and.w	r3, r3, #2
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d0eb      	beq.n	800e13a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800e162:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e166:	2b00      	cmp	r3, #0
 800e168:	d129      	bne.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e16e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e176:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e17a:	d10e      	bne.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800e17c:	4b4a      	ldr	r3, [pc, #296]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e17e:	691b      	ldr	r3, [r3, #16]
 800e180:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e188:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e18c:	091a      	lsrs	r2, r3, #4
 800e18e:	4b48      	ldr	r3, [pc, #288]	@ (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800e190:	4013      	ands	r3, r2
 800e192:	4a45      	ldr	r2, [pc, #276]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e194:	430b      	orrs	r3, r1
 800e196:	6113      	str	r3, [r2, #16]
 800e198:	e005      	b.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800e19a:	4b43      	ldr	r3, [pc, #268]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e19c:	691b      	ldr	r3, [r3, #16]
 800e19e:	4a42      	ldr	r2, [pc, #264]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e1a4:	6113      	str	r3, [r2, #16]
 800e1a6:	4b40      	ldr	r3, [pc, #256]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1a8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e1b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e1b6:	4a3c      	ldr	r2, [pc, #240]	@ (800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1b8:	430b      	orrs	r3, r1
 800e1ba:	6713      	str	r3, [r2, #112]	@ 0x70
 800e1bc:	e008      	b.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e1be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e1c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e1c6:	e003      	b.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e1cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d8:	f002 0301 	and.w	r3, r2, #1
 800e1dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e1e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	f000 808f 	beq.w	800e310 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e1f8:	2b28      	cmp	r3, #40	@ 0x28
 800e1fa:	d871      	bhi.n	800e2e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800e1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800e204 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800e1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e202:	bf00      	nop
 800e204:	0800e2e9 	.word	0x0800e2e9
 800e208:	0800e2e1 	.word	0x0800e2e1
 800e20c:	0800e2e1 	.word	0x0800e2e1
 800e210:	0800e2e1 	.word	0x0800e2e1
 800e214:	0800e2e1 	.word	0x0800e2e1
 800e218:	0800e2e1 	.word	0x0800e2e1
 800e21c:	0800e2e1 	.word	0x0800e2e1
 800e220:	0800e2e1 	.word	0x0800e2e1
 800e224:	0800e2b5 	.word	0x0800e2b5
 800e228:	0800e2e1 	.word	0x0800e2e1
 800e22c:	0800e2e1 	.word	0x0800e2e1
 800e230:	0800e2e1 	.word	0x0800e2e1
 800e234:	0800e2e1 	.word	0x0800e2e1
 800e238:	0800e2e1 	.word	0x0800e2e1
 800e23c:	0800e2e1 	.word	0x0800e2e1
 800e240:	0800e2e1 	.word	0x0800e2e1
 800e244:	0800e2cb 	.word	0x0800e2cb
 800e248:	0800e2e1 	.word	0x0800e2e1
 800e24c:	0800e2e1 	.word	0x0800e2e1
 800e250:	0800e2e1 	.word	0x0800e2e1
 800e254:	0800e2e1 	.word	0x0800e2e1
 800e258:	0800e2e1 	.word	0x0800e2e1
 800e25c:	0800e2e1 	.word	0x0800e2e1
 800e260:	0800e2e1 	.word	0x0800e2e1
 800e264:	0800e2e9 	.word	0x0800e2e9
 800e268:	0800e2e1 	.word	0x0800e2e1
 800e26c:	0800e2e1 	.word	0x0800e2e1
 800e270:	0800e2e1 	.word	0x0800e2e1
 800e274:	0800e2e1 	.word	0x0800e2e1
 800e278:	0800e2e1 	.word	0x0800e2e1
 800e27c:	0800e2e1 	.word	0x0800e2e1
 800e280:	0800e2e1 	.word	0x0800e2e1
 800e284:	0800e2e9 	.word	0x0800e2e9
 800e288:	0800e2e1 	.word	0x0800e2e1
 800e28c:	0800e2e1 	.word	0x0800e2e1
 800e290:	0800e2e1 	.word	0x0800e2e1
 800e294:	0800e2e1 	.word	0x0800e2e1
 800e298:	0800e2e1 	.word	0x0800e2e1
 800e29c:	0800e2e1 	.word	0x0800e2e1
 800e2a0:	0800e2e1 	.word	0x0800e2e1
 800e2a4:	0800e2e9 	.word	0x0800e2e9
 800e2a8:	58024400 	.word	0x58024400
 800e2ac:	58024800 	.word	0x58024800
 800e2b0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2b8:	3308      	adds	r3, #8
 800e2ba:	2101      	movs	r1, #1
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f001 fdcb 	bl	800fe58 <RCCEx_PLL2_Config>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e2c8:	e00f      	b.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2ce:	3328      	adds	r3, #40	@ 0x28
 800e2d0:	2101      	movs	r1, #1
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f001 fe72 	bl	800ffbc <RCCEx_PLL3_Config>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e2de:	e004      	b.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e2e6:	e000      	b.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800e2e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d10a      	bne.n	800e308 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e2f2:	4bbf      	ldr	r3, [pc, #764]	@ (800e5f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e2f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2f6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e300:	4abb      	ldr	r2, [pc, #748]	@ (800e5f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e302:	430b      	orrs	r3, r1
 800e304:	6553      	str	r3, [r2, #84]	@ 0x54
 800e306:	e003      	b.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e308:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e30c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e318:	f002 0302 	and.w	r3, r2, #2
 800e31c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e320:	2300      	movs	r3, #0
 800e322:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e326:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e32a:	460b      	mov	r3, r1
 800e32c:	4313      	orrs	r3, r2
 800e32e:	d041      	beq.n	800e3b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e336:	2b05      	cmp	r3, #5
 800e338:	d824      	bhi.n	800e384 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800e33a:	a201      	add	r2, pc, #4	@ (adr r2, 800e340 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800e33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e340:	0800e38d 	.word	0x0800e38d
 800e344:	0800e359 	.word	0x0800e359
 800e348:	0800e36f 	.word	0x0800e36f
 800e34c:	0800e38d 	.word	0x0800e38d
 800e350:	0800e38d 	.word	0x0800e38d
 800e354:	0800e38d 	.word	0x0800e38d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e35c:	3308      	adds	r3, #8
 800e35e:	2101      	movs	r1, #1
 800e360:	4618      	mov	r0, r3
 800e362:	f001 fd79 	bl	800fe58 <RCCEx_PLL2_Config>
 800e366:	4603      	mov	r3, r0
 800e368:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e36c:	e00f      	b.n	800e38e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e372:	3328      	adds	r3, #40	@ 0x28
 800e374:	2101      	movs	r1, #1
 800e376:	4618      	mov	r0, r3
 800e378:	f001 fe20 	bl	800ffbc <RCCEx_PLL3_Config>
 800e37c:	4603      	mov	r3, r0
 800e37e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e382:	e004      	b.n	800e38e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e384:	2301      	movs	r3, #1
 800e386:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e38a:	e000      	b.n	800e38e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800e38c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e38e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e392:	2b00      	cmp	r3, #0
 800e394:	d10a      	bne.n	800e3ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e396:	4b96      	ldr	r3, [pc, #600]	@ (800e5f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e39a:	f023 0107 	bic.w	r1, r3, #7
 800e39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3a4:	4a92      	ldr	r2, [pc, #584]	@ (800e5f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e3a6:	430b      	orrs	r3, r1
 800e3a8:	6553      	str	r3, [r2, #84]	@ 0x54
 800e3aa:	e003      	b.n	800e3b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e3b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3bc:	f002 0304 	and.w	r3, r2, #4
 800e3c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e3ca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	d044      	beq.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3dc:	2b05      	cmp	r3, #5
 800e3de:	d825      	bhi.n	800e42c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800e3e0:	a201      	add	r2, pc, #4	@ (adr r2, 800e3e8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800e3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3e6:	bf00      	nop
 800e3e8:	0800e435 	.word	0x0800e435
 800e3ec:	0800e401 	.word	0x0800e401
 800e3f0:	0800e417 	.word	0x0800e417
 800e3f4:	0800e435 	.word	0x0800e435
 800e3f8:	0800e435 	.word	0x0800e435
 800e3fc:	0800e435 	.word	0x0800e435
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e404:	3308      	adds	r3, #8
 800e406:	2101      	movs	r1, #1
 800e408:	4618      	mov	r0, r3
 800e40a:	f001 fd25 	bl	800fe58 <RCCEx_PLL2_Config>
 800e40e:	4603      	mov	r3, r0
 800e410:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e414:	e00f      	b.n	800e436 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e41a:	3328      	adds	r3, #40	@ 0x28
 800e41c:	2101      	movs	r1, #1
 800e41e:	4618      	mov	r0, r3
 800e420:	f001 fdcc 	bl	800ffbc <RCCEx_PLL3_Config>
 800e424:	4603      	mov	r3, r0
 800e426:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e42a:	e004      	b.n	800e436 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e42c:	2301      	movs	r3, #1
 800e42e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e432:	e000      	b.n	800e436 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800e434:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d10b      	bne.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e43e:	4b6c      	ldr	r3, [pc, #432]	@ (800e5f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e442:	f023 0107 	bic.w	r1, r3, #7
 800e446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e44a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e44e:	4a68      	ldr	r2, [pc, #416]	@ (800e5f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e450:	430b      	orrs	r3, r1
 800e452:	6593      	str	r3, [r2, #88]	@ 0x58
 800e454:	e003      	b.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e456:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e45a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e466:	f002 0320 	and.w	r3, r2, #32
 800e46a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e46e:	2300      	movs	r3, #0
 800e470:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e474:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e478:	460b      	mov	r3, r1
 800e47a:	4313      	orrs	r3, r2
 800e47c:	d055      	beq.n	800e52a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e47e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e482:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e486:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e48a:	d033      	beq.n	800e4f4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800e48c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e490:	d82c      	bhi.n	800e4ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e496:	d02f      	beq.n	800e4f8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800e498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e49c:	d826      	bhi.n	800e4ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e49e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e4a2:	d02b      	beq.n	800e4fc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800e4a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e4a8:	d820      	bhi.n	800e4ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e4aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e4ae:	d012      	beq.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800e4b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e4b4:	d81a      	bhi.n	800e4ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d022      	beq.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800e4ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e4be:	d115      	bne.n	800e4ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4c4:	3308      	adds	r3, #8
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f001 fcc5 	bl	800fe58 <RCCEx_PLL2_Config>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e4d4:	e015      	b.n	800e502 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4da:	3328      	adds	r3, #40	@ 0x28
 800e4dc:	2102      	movs	r1, #2
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f001 fd6c 	bl	800ffbc <RCCEx_PLL3_Config>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e4ea:	e00a      	b.n	800e502 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e4f2:	e006      	b.n	800e502 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e4f4:	bf00      	nop
 800e4f6:	e004      	b.n	800e502 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e4f8:	bf00      	nop
 800e4fa:	e002      	b.n	800e502 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e4fc:	bf00      	nop
 800e4fe:	e000      	b.n	800e502 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e500:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e502:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e506:	2b00      	cmp	r3, #0
 800e508:	d10b      	bne.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e50a:	4b39      	ldr	r3, [pc, #228]	@ (800e5f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e50c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e50e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e51a:	4a35      	ldr	r2, [pc, #212]	@ (800e5f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e51c:	430b      	orrs	r3, r1
 800e51e:	6553      	str	r3, [r2, #84]	@ 0x54
 800e520:	e003      	b.n	800e52a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e522:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e526:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e532:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e536:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e53a:	2300      	movs	r3, #0
 800e53c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e540:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e544:	460b      	mov	r3, r1
 800e546:	4313      	orrs	r3, r2
 800e548:	d058      	beq.n	800e5fc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e54e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e552:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e556:	d033      	beq.n	800e5c0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800e558:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e55c:	d82c      	bhi.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e55e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e562:	d02f      	beq.n	800e5c4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e568:	d826      	bhi.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e56a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e56e:	d02b      	beq.n	800e5c8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800e570:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e574:	d820      	bhi.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e57a:	d012      	beq.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800e57c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e580:	d81a      	bhi.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e582:	2b00      	cmp	r3, #0
 800e584:	d022      	beq.n	800e5cc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800e586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e58a:	d115      	bne.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e590:	3308      	adds	r3, #8
 800e592:	2100      	movs	r1, #0
 800e594:	4618      	mov	r0, r3
 800e596:	f001 fc5f 	bl	800fe58 <RCCEx_PLL2_Config>
 800e59a:	4603      	mov	r3, r0
 800e59c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e5a0:	e015      	b.n	800e5ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e5a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5a6:	3328      	adds	r3, #40	@ 0x28
 800e5a8:	2102      	movs	r1, #2
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f001 fd06 	bl	800ffbc <RCCEx_PLL3_Config>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e5b6:	e00a      	b.n	800e5ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e5be:	e006      	b.n	800e5ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e5c0:	bf00      	nop
 800e5c2:	e004      	b.n	800e5ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e5c4:	bf00      	nop
 800e5c6:	e002      	b.n	800e5ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e5c8:	bf00      	nop
 800e5ca:	e000      	b.n	800e5ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e5cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d10e      	bne.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e5d6:	4b06      	ldr	r3, [pc, #24]	@ (800e5f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e5d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5da:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e5e6:	4a02      	ldr	r2, [pc, #8]	@ (800e5f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e5e8:	430b      	orrs	r3, r1
 800e5ea:	6593      	str	r3, [r2, #88]	@ 0x58
 800e5ec:	e006      	b.n	800e5fc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800e5ee:	bf00      	nop
 800e5f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e5f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e604:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e608:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e60c:	2300      	movs	r3, #0
 800e60e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e612:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e616:	460b      	mov	r3, r1
 800e618:	4313      	orrs	r3, r2
 800e61a:	d055      	beq.n	800e6c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e620:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e624:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e628:	d033      	beq.n	800e692 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800e62a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e62e:	d82c      	bhi.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e634:	d02f      	beq.n	800e696 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800e636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e63a:	d826      	bhi.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e63c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e640:	d02b      	beq.n	800e69a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800e642:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e646:	d820      	bhi.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e648:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e64c:	d012      	beq.n	800e674 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800e64e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e652:	d81a      	bhi.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e654:	2b00      	cmp	r3, #0
 800e656:	d022      	beq.n	800e69e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800e658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e65c:	d115      	bne.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e662:	3308      	adds	r3, #8
 800e664:	2100      	movs	r1, #0
 800e666:	4618      	mov	r0, r3
 800e668:	f001 fbf6 	bl	800fe58 <RCCEx_PLL2_Config>
 800e66c:	4603      	mov	r3, r0
 800e66e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e672:	e015      	b.n	800e6a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e678:	3328      	adds	r3, #40	@ 0x28
 800e67a:	2102      	movs	r1, #2
 800e67c:	4618      	mov	r0, r3
 800e67e:	f001 fc9d 	bl	800ffbc <RCCEx_PLL3_Config>
 800e682:	4603      	mov	r3, r0
 800e684:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e688:	e00a      	b.n	800e6a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e68a:	2301      	movs	r3, #1
 800e68c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e690:	e006      	b.n	800e6a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e692:	bf00      	nop
 800e694:	e004      	b.n	800e6a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e696:	bf00      	nop
 800e698:	e002      	b.n	800e6a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e69a:	bf00      	nop
 800e69c:	e000      	b.n	800e6a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e69e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d10b      	bne.n	800e6c0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e6a8:	4ba0      	ldr	r3, [pc, #640]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e6aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6ac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e6b8:	4a9c      	ldr	r2, [pc, #624]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e6ba:	430b      	orrs	r3, r1
 800e6bc:	6593      	str	r3, [r2, #88]	@ 0x58
 800e6be:	e003      	b.n	800e6c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800e6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d0:	f002 0308 	and.w	r3, r2, #8
 800e6d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e6d8:	2300      	movs	r3, #0
 800e6da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e6de:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	4313      	orrs	r3, r2
 800e6e6:	d01e      	beq.n	800e726 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800e6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6f4:	d10c      	bne.n	800e710 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6fa:	3328      	adds	r3, #40	@ 0x28
 800e6fc:	2102      	movs	r1, #2
 800e6fe:	4618      	mov	r0, r3
 800e700:	f001 fc5c 	bl	800ffbc <RCCEx_PLL3_Config>
 800e704:	4603      	mov	r3, r0
 800e706:	2b00      	cmp	r3, #0
 800e708:	d002      	beq.n	800e710 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800e710:	4b86      	ldr	r3, [pc, #536]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e714:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e71c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e720:	4a82      	ldr	r2, [pc, #520]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e722:	430b      	orrs	r3, r1
 800e724:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72e:	f002 0310 	and.w	r3, r2, #16
 800e732:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e736:	2300      	movs	r3, #0
 800e738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e73c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e740:	460b      	mov	r3, r1
 800e742:	4313      	orrs	r3, r2
 800e744:	d01e      	beq.n	800e784 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e74a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e74e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e752:	d10c      	bne.n	800e76e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e758:	3328      	adds	r3, #40	@ 0x28
 800e75a:	2102      	movs	r1, #2
 800e75c:	4618      	mov	r0, r3
 800e75e:	f001 fc2d 	bl	800ffbc <RCCEx_PLL3_Config>
 800e762:	4603      	mov	r3, r0
 800e764:	2b00      	cmp	r3, #0
 800e766:	d002      	beq.n	800e76e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800e768:	2301      	movs	r3, #1
 800e76a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e76e:	4b6f      	ldr	r3, [pc, #444]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e772:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e77a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e77e:	4a6b      	ldr	r2, [pc, #428]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e780:	430b      	orrs	r3, r1
 800e782:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e790:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e792:	2300      	movs	r3, #0
 800e794:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e796:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e79a:	460b      	mov	r3, r1
 800e79c:	4313      	orrs	r3, r2
 800e79e:	d03e      	beq.n	800e81e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e7a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e7ac:	d022      	beq.n	800e7f4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800e7ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e7b2:	d81b      	bhi.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d003      	beq.n	800e7c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800e7b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7bc:	d00b      	beq.n	800e7d6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800e7be:	e015      	b.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7c4:	3308      	adds	r3, #8
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f001 fb45 	bl	800fe58 <RCCEx_PLL2_Config>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e7d4:	e00f      	b.n	800e7f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7da:	3328      	adds	r3, #40	@ 0x28
 800e7dc:	2102      	movs	r1, #2
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f001 fbec 	bl	800ffbc <RCCEx_PLL3_Config>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e7ea:	e004      	b.n	800e7f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e7f2:	e000      	b.n	800e7f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800e7f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d10b      	bne.n	800e816 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e7fe:	4b4b      	ldr	r3, [pc, #300]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e802:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e80a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e80e:	4a47      	ldr	r2, [pc, #284]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e810:	430b      	orrs	r3, r1
 800e812:	6593      	str	r3, [r2, #88]	@ 0x58
 800e814:	e003      	b.n	800e81e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e816:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e81a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e826:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e82a:	673b      	str	r3, [r7, #112]	@ 0x70
 800e82c:	2300      	movs	r3, #0
 800e82e:	677b      	str	r3, [r7, #116]	@ 0x74
 800e830:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e834:	460b      	mov	r3, r1
 800e836:	4313      	orrs	r3, r2
 800e838:	d03b      	beq.n	800e8b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e842:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e846:	d01f      	beq.n	800e888 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800e848:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e84c:	d818      	bhi.n	800e880 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800e84e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e852:	d003      	beq.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800e854:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e858:	d007      	beq.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800e85a:	e011      	b.n	800e880 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e85c:	4b33      	ldr	r3, [pc, #204]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e860:	4a32      	ldr	r2, [pc, #200]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e868:	e00f      	b.n	800e88a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e86e:	3328      	adds	r3, #40	@ 0x28
 800e870:	2101      	movs	r1, #1
 800e872:	4618      	mov	r0, r3
 800e874:	f001 fba2 	bl	800ffbc <RCCEx_PLL3_Config>
 800e878:	4603      	mov	r3, r0
 800e87a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800e87e:	e004      	b.n	800e88a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e880:	2301      	movs	r3, #1
 800e882:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e886:	e000      	b.n	800e88a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800e888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e88a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10b      	bne.n	800e8aa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e892:	4b26      	ldr	r3, [pc, #152]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e896:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e89e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8a2:	4a22      	ldr	r2, [pc, #136]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e8a4:	430b      	orrs	r3, r1
 800e8a6:	6553      	str	r3, [r2, #84]	@ 0x54
 800e8a8:	e003      	b.n	800e8b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e8be:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e8c4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	d034      	beq.n	800e938 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d003      	beq.n	800e8e0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800e8d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8dc:	d007      	beq.n	800e8ee <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800e8de:	e011      	b.n	800e904 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e8e0:	4b12      	ldr	r3, [pc, #72]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e8e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8e4:	4a11      	ldr	r2, [pc, #68]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e8e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e8ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e8ec:	e00e      	b.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8f2:	3308      	adds	r3, #8
 800e8f4:	2102      	movs	r1, #2
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f001 faae 	bl	800fe58 <RCCEx_PLL2_Config>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e902:	e003      	b.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800e904:	2301      	movs	r3, #1
 800e906:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e90a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e90c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10d      	bne.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e914:	4b05      	ldr	r3, [pc, #20]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e918:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e922:	4a02      	ldr	r2, [pc, #8]	@ (800e92c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e924:	430b      	orrs	r3, r1
 800e926:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e928:	e006      	b.n	800e938 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800e92a:	bf00      	nop
 800e92c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e934:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e940:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e944:	663b      	str	r3, [r7, #96]	@ 0x60
 800e946:	2300      	movs	r3, #0
 800e948:	667b      	str	r3, [r7, #100]	@ 0x64
 800e94a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e94e:	460b      	mov	r3, r1
 800e950:	4313      	orrs	r3, r2
 800e952:	d00c      	beq.n	800e96e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e958:	3328      	adds	r3, #40	@ 0x28
 800e95a:	2102      	movs	r1, #2
 800e95c:	4618      	mov	r0, r3
 800e95e:	f001 fb2d 	bl	800ffbc <RCCEx_PLL3_Config>
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d002      	beq.n	800e96e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800e968:	2301      	movs	r3, #1
 800e96a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e976:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e97a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e97c:	2300      	movs	r3, #0
 800e97e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e980:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e984:	460b      	mov	r3, r1
 800e986:	4313      	orrs	r3, r2
 800e988:	d036      	beq.n	800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e98e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e990:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e994:	d018      	beq.n	800e9c8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800e996:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e99a:	d811      	bhi.n	800e9c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800e99c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9a0:	d014      	beq.n	800e9cc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800e9a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9a6:	d80b      	bhi.n	800e9c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d011      	beq.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800e9ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9b0:	d106      	bne.n	800e9c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e9b2:	4bb7      	ldr	r3, [pc, #732]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9b6:	4ab6      	ldr	r2, [pc, #728]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e9b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e9bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e9be:	e008      	b.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e9c6:	e004      	b.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800e9c8:	bf00      	nop
 800e9ca:	e002      	b.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800e9cc:	bf00      	nop
 800e9ce:	e000      	b.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800e9d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d10a      	bne.n	800e9f0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e9da:	4bad      	ldr	r3, [pc, #692]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e9dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9e8:	4aa9      	ldr	r2, [pc, #676]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e9ea:	430b      	orrs	r3, r1
 800e9ec:	6553      	str	r3, [r2, #84]	@ 0x54
 800e9ee:	e003      	b.n	800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e9f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea00:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ea04:	653b      	str	r3, [r7, #80]	@ 0x50
 800ea06:	2300      	movs	r3, #0
 800ea08:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea0a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ea0e:	460b      	mov	r3, r1
 800ea10:	4313      	orrs	r3, r2
 800ea12:	d009      	beq.n	800ea28 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ea14:	4b9e      	ldr	r3, [pc, #632]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ea1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea22:	4a9b      	ldr	r2, [pc, #620]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea24:	430b      	orrs	r3, r1
 800ea26:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ea28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea30:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ea34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea36:	2300      	movs	r3, #0
 800ea38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea3a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ea3e:	460b      	mov	r3, r1
 800ea40:	4313      	orrs	r3, r2
 800ea42:	d009      	beq.n	800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ea44:	4b92      	ldr	r3, [pc, #584]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea48:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ea4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ea52:	4a8f      	ldr	r2, [pc, #572]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea54:	430b      	orrs	r3, r1
 800ea56:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ea58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea60:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ea64:	643b      	str	r3, [r7, #64]	@ 0x40
 800ea66:	2300      	movs	r3, #0
 800ea68:	647b      	str	r3, [r7, #68]	@ 0x44
 800ea6a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ea6e:	460b      	mov	r3, r1
 800ea70:	4313      	orrs	r3, r2
 800ea72:	d00e      	beq.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ea74:	4b86      	ldr	r3, [pc, #536]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	4a85      	ldr	r2, [pc, #532]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ea7e:	6113      	str	r3, [r2, #16]
 800ea80:	4b83      	ldr	r3, [pc, #524]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea82:	6919      	ldr	r1, [r3, #16]
 800ea84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ea8c:	4a80      	ldr	r2, [pc, #512]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea8e:	430b      	orrs	r3, r1
 800ea90:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ea92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ea9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eaa4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	d009      	beq.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800eaae:	4b78      	ldr	r3, [pc, #480]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eab2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800eab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eabc:	4a74      	ldr	r2, [pc, #464]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eabe:	430b      	orrs	r3, r1
 800eac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800eac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800eace:	633b      	str	r3, [r7, #48]	@ 0x30
 800ead0:	2300      	movs	r3, #0
 800ead2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ead4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ead8:	460b      	mov	r3, r1
 800eada:	4313      	orrs	r3, r2
 800eadc:	d00a      	beq.n	800eaf4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800eade:	4b6c      	ldr	r3, [pc, #432]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eae2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800eae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eaee:	4a68      	ldr	r2, [pc, #416]	@ (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eaf0:	430b      	orrs	r3, r1
 800eaf2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800eaf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafc:	2100      	movs	r1, #0
 800eafe:	62b9      	str	r1, [r7, #40]	@ 0x28
 800eb00:	f003 0301 	and.w	r3, r3, #1
 800eb04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb06:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	d011      	beq.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb14:	3308      	adds	r3, #8
 800eb16:	2100      	movs	r1, #0
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f001 f99d 	bl	800fe58 <RCCEx_PLL2_Config>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800eb24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d003      	beq.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800eb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	6239      	str	r1, [r7, #32]
 800eb40:	f003 0302 	and.w	r3, r3, #2
 800eb44:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb46:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800eb4a:	460b      	mov	r3, r1
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	d011      	beq.n	800eb74 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb54:	3308      	adds	r3, #8
 800eb56:	2101      	movs	r1, #1
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f001 f97d 	bl	800fe58 <RCCEx_PLL2_Config>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800eb64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d003      	beq.n	800eb74 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800eb74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	61b9      	str	r1, [r7, #24]
 800eb80:	f003 0304 	and.w	r3, r3, #4
 800eb84:	61fb      	str	r3, [r7, #28]
 800eb86:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	d011      	beq.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb94:	3308      	adds	r3, #8
 800eb96:	2102      	movs	r1, #2
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f001 f95d 	bl	800fe58 <RCCEx_PLL2_Config>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800eba4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d003      	beq.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ebb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebbc:	2100      	movs	r1, #0
 800ebbe:	6139      	str	r1, [r7, #16]
 800ebc0:	f003 0308 	and.w	r3, r3, #8
 800ebc4:	617b      	str	r3, [r7, #20]
 800ebc6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ebca:	460b      	mov	r3, r1
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	d011      	beq.n	800ebf4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ebd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebd4:	3328      	adds	r3, #40	@ 0x28
 800ebd6:	2100      	movs	r1, #0
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f001 f9ef 	bl	800ffbc <RCCEx_PLL3_Config>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800ebe4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d003      	beq.n	800ebf4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ebf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfc:	2100      	movs	r1, #0
 800ebfe:	60b9      	str	r1, [r7, #8]
 800ec00:	f003 0310 	and.w	r3, r3, #16
 800ec04:	60fb      	str	r3, [r7, #12]
 800ec06:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ec0a:	460b      	mov	r3, r1
 800ec0c:	4313      	orrs	r3, r2
 800ec0e:	d011      	beq.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ec10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec14:	3328      	adds	r3, #40	@ 0x28
 800ec16:	2101      	movs	r1, #1
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f001 f9cf 	bl	800ffbc <RCCEx_PLL3_Config>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ec24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d003      	beq.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ec34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3c:	2100      	movs	r1, #0
 800ec3e:	6039      	str	r1, [r7, #0]
 800ec40:	f003 0320 	and.w	r3, r3, #32
 800ec44:	607b      	str	r3, [r7, #4]
 800ec46:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ec4a:	460b      	mov	r3, r1
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	d011      	beq.n	800ec74 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ec50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec54:	3328      	adds	r3, #40	@ 0x28
 800ec56:	2102      	movs	r1, #2
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f001 f9af 	bl	800ffbc <RCCEx_PLL3_Config>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ec64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d003      	beq.n	800ec74 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800ec74:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d101      	bne.n	800ec80 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	e000      	b.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ec80:	2301      	movs	r3, #1
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec8e:	bf00      	nop
 800ec90:	58024400 	.word	0x58024400

0800ec94 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b090      	sub	sp, #64	@ 0x40
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ec9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eca2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800eca6:	430b      	orrs	r3, r1
 800eca8:	f040 8094 	bne.w	800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ecac:	4b9b      	ldr	r3, [pc, #620]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ecae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecb0:	f003 0307 	and.w	r3, r3, #7
 800ecb4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ecb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb8:	2b04      	cmp	r3, #4
 800ecba:	f200 8087 	bhi.w	800edcc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ecbe:	a201      	add	r2, pc, #4	@ (adr r2, 800ecc4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ecc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc4:	0800ecd9 	.word	0x0800ecd9
 800ecc8:	0800ed01 	.word	0x0800ed01
 800eccc:	0800ed29 	.word	0x0800ed29
 800ecd0:	0800edc5 	.word	0x0800edc5
 800ecd4:	0800ed51 	.word	0x0800ed51
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ecd8:	4b90      	ldr	r3, [pc, #576]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ece0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ece4:	d108      	bne.n	800ecf8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ece6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ecea:	4618      	mov	r0, r3
 800ecec:	f000 ff62 	bl	800fbb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ecf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ecf4:	f000 bc93 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecfc:	f000 bc8f 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ed00:	4b86      	ldr	r3, [pc, #536]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed0c:	d108      	bne.n	800ed20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed0e:	f107 0318 	add.w	r3, r7, #24
 800ed12:	4618      	mov	r0, r3
 800ed14:	f000 fca6 	bl	800f664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ed18:	69bb      	ldr	r3, [r7, #24]
 800ed1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed1c:	f000 bc7f 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ed20:	2300      	movs	r3, #0
 800ed22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed24:	f000 bc7b 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ed28:	4b7c      	ldr	r3, [pc, #496]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed34:	d108      	bne.n	800ed48 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed36:	f107 030c 	add.w	r3, r7, #12
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f000 fde6 	bl	800f90c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed44:	f000 bc6b 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed4c:	f000 bc67 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ed50:	4b72      	ldr	r3, [pc, #456]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ed52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ed58:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ed5a:	4b70      	ldr	r3, [pc, #448]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	f003 0304 	and.w	r3, r3, #4
 800ed62:	2b04      	cmp	r3, #4
 800ed64:	d10c      	bne.n	800ed80 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ed66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d109      	bne.n	800ed80 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed6c:	4b6b      	ldr	r3, [pc, #428]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	08db      	lsrs	r3, r3, #3
 800ed72:	f003 0303 	and.w	r3, r3, #3
 800ed76:	4a6a      	ldr	r2, [pc, #424]	@ (800ef20 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ed78:	fa22 f303 	lsr.w	r3, r2, r3
 800ed7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed7e:	e01f      	b.n	800edc0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ed80:	4b66      	ldr	r3, [pc, #408]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed8c:	d106      	bne.n	800ed9c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ed8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed94:	d102      	bne.n	800ed9c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ed96:	4b63      	ldr	r3, [pc, #396]	@ (800ef24 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ed98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed9a:	e011      	b.n	800edc0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ed9c:	4b5f      	ldr	r3, [pc, #380]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eda4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eda8:	d106      	bne.n	800edb8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800edaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800edb0:	d102      	bne.n	800edb8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800edb2:	4b5d      	ldr	r3, [pc, #372]	@ (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800edb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edb6:	e003      	b.n	800edc0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800edb8:	2300      	movs	r3, #0
 800edba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800edbc:	f000 bc2f 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800edc0:	f000 bc2d 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800edc4:	4b59      	ldr	r3, [pc, #356]	@ (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800edc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edc8:	f000 bc29 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800edcc:	2300      	movs	r3, #0
 800edce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edd0:	f000 bc25 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800edd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edd8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800eddc:	430b      	orrs	r3, r1
 800edde:	f040 80a7 	bne.w	800ef30 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ede2:	4b4e      	ldr	r3, [pc, #312]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ede4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ede6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800edea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800edec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800edf2:	d054      	beq.n	800ee9e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800edf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edf6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800edfa:	f200 808b 	bhi.w	800ef14 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800edfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee00:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ee04:	f000 8083 	beq.w	800ef0e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ee08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ee0e:	f200 8081 	bhi.w	800ef14 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ee12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ee18:	d02f      	beq.n	800ee7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ee20:	d878      	bhi.n	800ef14 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ee22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d004      	beq.n	800ee32 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ee28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ee2e:	d012      	beq.n	800ee56 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ee30:	e070      	b.n	800ef14 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ee32:	4b3a      	ldr	r3, [pc, #232]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ee3e:	d107      	bne.n	800ee50 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee44:	4618      	mov	r0, r3
 800ee46:	f000 feb5 	bl	800fbb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee4e:	e3e6      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ee50:	2300      	movs	r3, #0
 800ee52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee54:	e3e3      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee56:	4b31      	ldr	r3, [pc, #196]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ee5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ee62:	d107      	bne.n	800ee74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee64:	f107 0318 	add.w	r3, r7, #24
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f000 fbfb 	bl	800f664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ee6e:	69bb      	ldr	r3, [r7, #24]
 800ee70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee72:	e3d4      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ee74:	2300      	movs	r3, #0
 800ee76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee78:	e3d1      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ee7a:	4b28      	ldr	r3, [pc, #160]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ee82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee86:	d107      	bne.n	800ee98 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee88:	f107 030c 	add.w	r3, r7, #12
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f000 fd3d 	bl	800f90c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee96:	e3c2      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee9c:	e3bf      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ee9e:	4b1f      	ldr	r3, [pc, #124]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eea2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800eea6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eea8:	4b1c      	ldr	r3, [pc, #112]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f003 0304 	and.w	r3, r3, #4
 800eeb0:	2b04      	cmp	r3, #4
 800eeb2:	d10c      	bne.n	800eece <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800eeb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d109      	bne.n	800eece <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eeba:	4b18      	ldr	r3, [pc, #96]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	08db      	lsrs	r3, r3, #3
 800eec0:	f003 0303 	and.w	r3, r3, #3
 800eec4:	4a16      	ldr	r2, [pc, #88]	@ (800ef20 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800eec6:	fa22 f303 	lsr.w	r3, r2, r3
 800eeca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eecc:	e01e      	b.n	800ef0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eece:	4b13      	ldr	r3, [pc, #76]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eeda:	d106      	bne.n	800eeea <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800eedc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eede:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eee2:	d102      	bne.n	800eeea <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eee4:	4b0f      	ldr	r3, [pc, #60]	@ (800ef24 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800eee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eee8:	e010      	b.n	800ef0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eeea:	4b0c      	ldr	r3, [pc, #48]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eef2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eef6:	d106      	bne.n	800ef06 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800eef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eefa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eefe:	d102      	bne.n	800ef06 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ef00:	4b09      	ldr	r3, [pc, #36]	@ (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef04:	e002      	b.n	800ef0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ef06:	2300      	movs	r3, #0
 800ef08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ef0a:	e388      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ef0c:	e387      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ef0e:	4b07      	ldr	r3, [pc, #28]	@ (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ef10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef12:	e384      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ef14:	2300      	movs	r3, #0
 800ef16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef18:	e381      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ef1a:	bf00      	nop
 800ef1c:	58024400 	.word	0x58024400
 800ef20:	03d09000 	.word	0x03d09000
 800ef24:	003d0900 	.word	0x003d0900
 800ef28:	016e3600 	.word	0x016e3600
 800ef2c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ef30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef34:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ef38:	430b      	orrs	r3, r1
 800ef3a:	f040 809c 	bne.w	800f076 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ef3e:	4b9e      	ldr	r3, [pc, #632]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ef40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef42:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ef46:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ef48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ef4e:	d054      	beq.n	800effa <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ef50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ef56:	f200 808b 	bhi.w	800f070 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ef5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ef60:	f000 8083 	beq.w	800f06a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ef64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ef6a:	f200 8081 	bhi.w	800f070 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef74:	d02f      	beq.n	800efd6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ef76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef7c:	d878      	bhi.n	800f070 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ef7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d004      	beq.n	800ef8e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ef84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ef8a:	d012      	beq.n	800efb2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ef8c:	e070      	b.n	800f070 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ef8e:	4b8a      	ldr	r3, [pc, #552]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef9a:	d107      	bne.n	800efac <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800efa0:	4618      	mov	r0, r3
 800efa2:	f000 fe07 	bl	800fbb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800efa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efaa:	e338      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800efac:	2300      	movs	r3, #0
 800efae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efb0:	e335      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800efb2:	4b81      	ldr	r3, [pc, #516]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800efba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800efbe:	d107      	bne.n	800efd0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efc0:	f107 0318 	add.w	r3, r7, #24
 800efc4:	4618      	mov	r0, r3
 800efc6:	f000 fb4d 	bl	800f664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efce:	e326      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800efd0:	2300      	movs	r3, #0
 800efd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efd4:	e323      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800efd6:	4b78      	ldr	r3, [pc, #480]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800efde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efe2:	d107      	bne.n	800eff4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efe4:	f107 030c 	add.w	r3, r7, #12
 800efe8:	4618      	mov	r0, r3
 800efea:	f000 fc8f 	bl	800f90c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eff2:	e314      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800eff4:	2300      	movs	r3, #0
 800eff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eff8:	e311      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800effa:	4b6f      	ldr	r3, [pc, #444]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800effc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800effe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f002:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f004:	4b6c      	ldr	r3, [pc, #432]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f003 0304 	and.w	r3, r3, #4
 800f00c:	2b04      	cmp	r3, #4
 800f00e:	d10c      	bne.n	800f02a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800f010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f012:	2b00      	cmp	r3, #0
 800f014:	d109      	bne.n	800f02a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f016:	4b68      	ldr	r3, [pc, #416]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	08db      	lsrs	r3, r3, #3
 800f01c:	f003 0303 	and.w	r3, r3, #3
 800f020:	4a66      	ldr	r2, [pc, #408]	@ (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f022:	fa22 f303 	lsr.w	r3, r2, r3
 800f026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f028:	e01e      	b.n	800f068 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f02a:	4b63      	ldr	r3, [pc, #396]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f036:	d106      	bne.n	800f046 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f03a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f03e:	d102      	bne.n	800f046 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f040:	4b5f      	ldr	r3, [pc, #380]	@ (800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f044:	e010      	b.n	800f068 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f046:	4b5c      	ldr	r3, [pc, #368]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f04e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f052:	d106      	bne.n	800f062 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800f054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f05a:	d102      	bne.n	800f062 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f05c:	4b59      	ldr	r3, [pc, #356]	@ (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f060:	e002      	b.n	800f068 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f062:	2300      	movs	r3, #0
 800f064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f066:	e2da      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f068:	e2d9      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f06a:	4b57      	ldr	r3, [pc, #348]	@ (800f1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f06e:	e2d6      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f070:	2300      	movs	r3, #0
 800f072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f074:	e2d3      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f07a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f07e:	430b      	orrs	r3, r1
 800f080:	f040 80a7 	bne.w	800f1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f084:	4b4c      	ldr	r3, [pc, #304]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f088:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f08c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f090:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f094:	d055      	beq.n	800f142 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800f096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f098:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f09c:	f200 8096 	bhi.w	800f1cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f0a6:	f000 8084 	beq.w	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800f0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f0b0:	f200 808c 	bhi.w	800f1cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f0ba:	d030      	beq.n	800f11e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800f0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f0c2:	f200 8083 	bhi.w	800f1cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d004      	beq.n	800f0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800f0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0d2:	d012      	beq.n	800f0fa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800f0d4:	e07a      	b.n	800f1cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f0d6:	4b38      	ldr	r3, [pc, #224]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f0de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f0e2:	d107      	bne.n	800f0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f0e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f000 fd63 	bl	800fbb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0f2:	e294      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0f8:	e291      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f0fa:	4b2f      	ldr	r3, [pc, #188]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f102:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f106:	d107      	bne.n	800f118 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f108:	f107 0318 	add.w	r3, r7, #24
 800f10c:	4618      	mov	r0, r3
 800f10e:	f000 faa9 	bl	800f664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f112:	69bb      	ldr	r3, [r7, #24]
 800f114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f116:	e282      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f118:	2300      	movs	r3, #0
 800f11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f11c:	e27f      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f11e:	4b26      	ldr	r3, [pc, #152]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f12a:	d107      	bne.n	800f13c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f12c:	f107 030c 	add.w	r3, r7, #12
 800f130:	4618      	mov	r0, r3
 800f132:	f000 fbeb 	bl	800f90c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f13a:	e270      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f13c:	2300      	movs	r3, #0
 800f13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f140:	e26d      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f142:	4b1d      	ldr	r3, [pc, #116]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f146:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f14a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f14c:	4b1a      	ldr	r3, [pc, #104]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f003 0304 	and.w	r3, r3, #4
 800f154:	2b04      	cmp	r3, #4
 800f156:	d10c      	bne.n	800f172 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800f158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d109      	bne.n	800f172 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f15e:	4b16      	ldr	r3, [pc, #88]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	08db      	lsrs	r3, r3, #3
 800f164:	f003 0303 	and.w	r3, r3, #3
 800f168:	4a14      	ldr	r2, [pc, #80]	@ (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f16a:	fa22 f303 	lsr.w	r3, r2, r3
 800f16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f170:	e01e      	b.n	800f1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f172:	4b11      	ldr	r3, [pc, #68]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f17a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f17e:	d106      	bne.n	800f18e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f186:	d102      	bne.n	800f18e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f188:	4b0d      	ldr	r3, [pc, #52]	@ (800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f18c:	e010      	b.n	800f1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f18e:	4b0a      	ldr	r3, [pc, #40]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f196:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f19a:	d106      	bne.n	800f1aa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800f19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f19e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f1a2:	d102      	bne.n	800f1aa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f1a4:	4b07      	ldr	r3, [pc, #28]	@ (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1a8:	e002      	b.n	800f1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f1ae:	e236      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f1b0:	e235      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f1b2:	4b05      	ldr	r3, [pc, #20]	@ (800f1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f1b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1b6:	e232      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f1b8:	58024400 	.word	0x58024400
 800f1bc:	03d09000 	.word	0x03d09000
 800f1c0:	003d0900 	.word	0x003d0900
 800f1c4:	016e3600 	.word	0x016e3600
 800f1c8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1d0:	e225      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f1d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1d6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f1da:	430b      	orrs	r3, r1
 800f1dc:	f040 8085 	bne.w	800f2ea <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f1e0:	4b9c      	ldr	r3, [pc, #624]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f1e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1e4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f1e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800f1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f1f0:	d06b      	beq.n	800f2ca <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800f1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f1f8:	d874      	bhi.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f200:	d056      	beq.n	800f2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800f202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f204:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f208:	d86c      	bhi.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f20c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f210:	d03b      	beq.n	800f28a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800f212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f214:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f218:	d864      	bhi.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f21c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f220:	d021      	beq.n	800f266 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f228:	d85c      	bhi.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d004      	beq.n	800f23a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800f230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f236:	d004      	beq.n	800f242 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800f238:	e054      	b.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f23a:	f7fe fb5f 	bl	800d8fc <HAL_RCC_GetPCLK1Freq>
 800f23e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f240:	e1ed      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f242:	4b84      	ldr	r3, [pc, #528]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f24a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f24e:	d107      	bne.n	800f260 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f250:	f107 0318 	add.w	r3, r7, #24
 800f254:	4618      	mov	r0, r3
 800f256:	f000 fa05 	bl	800f664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f25e:	e1de      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f260:	2300      	movs	r3, #0
 800f262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f264:	e1db      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f266:	4b7b      	ldr	r3, [pc, #492]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f26e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f272:	d107      	bne.n	800f284 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f274:	f107 030c 	add.w	r3, r7, #12
 800f278:	4618      	mov	r0, r3
 800f27a:	f000 fb47 	bl	800f90c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f282:	e1cc      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f284:	2300      	movs	r3, #0
 800f286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f288:	e1c9      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f28a:	4b72      	ldr	r3, [pc, #456]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f003 0304 	and.w	r3, r3, #4
 800f292:	2b04      	cmp	r3, #4
 800f294:	d109      	bne.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f296:	4b6f      	ldr	r3, [pc, #444]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	08db      	lsrs	r3, r3, #3
 800f29c:	f003 0303 	and.w	r3, r3, #3
 800f2a0:	4a6d      	ldr	r2, [pc, #436]	@ (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800f2a2:	fa22 f303 	lsr.w	r3, r2, r3
 800f2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2a8:	e1b9      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2ae:	e1b6      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f2b0:	4b68      	ldr	r3, [pc, #416]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2bc:	d102      	bne.n	800f2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800f2be:	4b67      	ldr	r3, [pc, #412]	@ (800f45c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800f2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2c2:	e1ac      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2c8:	e1a9      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f2ca:	4b62      	ldr	r3, [pc, #392]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f2d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f2d6:	d102      	bne.n	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800f2d8:	4b61      	ldr	r3, [pc, #388]	@ (800f460 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800f2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2dc:	e19f      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2e2:	e19c      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2e8:	e199      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f2ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2ee:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800f2f2:	430b      	orrs	r3, r1
 800f2f4:	d173      	bne.n	800f3de <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f2f6:	4b57      	ldr	r3, [pc, #348]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f2f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f2fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f302:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f306:	d02f      	beq.n	800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800f308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f30a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f30e:	d863      	bhi.n	800f3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800f310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f312:	2b00      	cmp	r3, #0
 800f314:	d004      	beq.n	800f320 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800f316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f31c:	d012      	beq.n	800f344 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800f31e:	e05b      	b.n	800f3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f320:	4b4c      	ldr	r3, [pc, #304]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f328:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f32c:	d107      	bne.n	800f33e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f32e:	f107 0318 	add.w	r3, r7, #24
 800f332:	4618      	mov	r0, r3
 800f334:	f000 f996 	bl	800f664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f338:	69bb      	ldr	r3, [r7, #24]
 800f33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f33c:	e16f      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f33e:	2300      	movs	r3, #0
 800f340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f342:	e16c      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f344:	4b43      	ldr	r3, [pc, #268]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f34c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f350:	d107      	bne.n	800f362 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f352:	f107 030c 	add.w	r3, r7, #12
 800f356:	4618      	mov	r0, r3
 800f358:	f000 fad8 	bl	800f90c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f360:	e15d      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f362:	2300      	movs	r3, #0
 800f364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f366:	e15a      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f368:	4b3a      	ldr	r3, [pc, #232]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f36a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f36c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f370:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f372:	4b38      	ldr	r3, [pc, #224]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f003 0304 	and.w	r3, r3, #4
 800f37a:	2b04      	cmp	r3, #4
 800f37c:	d10c      	bne.n	800f398 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f380:	2b00      	cmp	r3, #0
 800f382:	d109      	bne.n	800f398 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f384:	4b33      	ldr	r3, [pc, #204]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	08db      	lsrs	r3, r3, #3
 800f38a:	f003 0303 	and.w	r3, r3, #3
 800f38e:	4a32      	ldr	r2, [pc, #200]	@ (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800f390:	fa22 f303 	lsr.w	r3, r2, r3
 800f394:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f396:	e01e      	b.n	800f3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f398:	4b2e      	ldr	r3, [pc, #184]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f3a4:	d106      	bne.n	800f3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800f3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f3ac:	d102      	bne.n	800f3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f3ae:	4b2b      	ldr	r3, [pc, #172]	@ (800f45c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800f3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3b2:	e010      	b.n	800f3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f3b4:	4b27      	ldr	r3, [pc, #156]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f3bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f3c0:	d106      	bne.n	800f3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800f3c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f3c8:	d102      	bne.n	800f3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f3ca:	4b25      	ldr	r3, [pc, #148]	@ (800f460 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800f3cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3ce:	e002      	b.n	800f3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f3d4:	e123      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f3d6:	e122      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3dc:	e11f      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f3de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3e2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f3e6:	430b      	orrs	r3, r1
 800f3e8:	d13c      	bne.n	800f464 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f3ea:	4b1a      	ldr	r3, [pc, #104]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f3ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f3ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f3f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d004      	beq.n	800f404 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800f3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f400:	d012      	beq.n	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800f402:	e023      	b.n	800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f404:	4b13      	ldr	r3, [pc, #76]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f40c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f410:	d107      	bne.n	800f422 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f416:	4618      	mov	r0, r3
 800f418:	f000 fbcc 	bl	800fbb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f420:	e0fd      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f422:	2300      	movs	r3, #0
 800f424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f426:	e0fa      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f428:	4b0a      	ldr	r3, [pc, #40]	@ (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f430:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f434:	d107      	bne.n	800f446 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f436:	f107 0318 	add.w	r3, r7, #24
 800f43a:	4618      	mov	r0, r3
 800f43c:	f000 f912 	bl	800f664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f440:	6a3b      	ldr	r3, [r7, #32]
 800f442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f444:	e0eb      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f446:	2300      	movs	r3, #0
 800f448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f44a:	e0e8      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f44c:	2300      	movs	r3, #0
 800f44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f450:	e0e5      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f452:	bf00      	nop
 800f454:	58024400 	.word	0x58024400
 800f458:	03d09000 	.word	0x03d09000
 800f45c:	003d0900 	.word	0x003d0900
 800f460:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f464:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f468:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800f46c:	430b      	orrs	r3, r1
 800f46e:	f040 8085 	bne.w	800f57c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f472:	4b6d      	ldr	r3, [pc, #436]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f476:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800f47a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f47e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f482:	d06b      	beq.n	800f55c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800f484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f486:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f48a:	d874      	bhi.n	800f576 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f48e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f492:	d056      	beq.n	800f542 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800f494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f49a:	d86c      	bhi.n	800f576 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f49e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f4a2:	d03b      	beq.n	800f51c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800f4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f4aa:	d864      	bhi.n	800f576 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4b2:	d021      	beq.n	800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800f4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4ba:	d85c      	bhi.n	800f576 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d004      	beq.n	800f4cc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800f4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f4c8:	d004      	beq.n	800f4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800f4ca:	e054      	b.n	800f576 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f4cc:	f000 f8b4 	bl	800f638 <HAL_RCCEx_GetD3PCLK1Freq>
 800f4d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f4d2:	e0a4      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f4d4:	4b54      	ldr	r3, [pc, #336]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f4dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f4e0:	d107      	bne.n	800f4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4e2:	f107 0318 	add.w	r3, r7, #24
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f000 f8bc 	bl	800f664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f4ec:	69fb      	ldr	r3, [r7, #28]
 800f4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4f0:	e095      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4f6:	e092      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f4f8:	4b4b      	ldr	r3, [pc, #300]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f504:	d107      	bne.n	800f516 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f506:	f107 030c 	add.w	r3, r7, #12
 800f50a:	4618      	mov	r0, r3
 800f50c:	f000 f9fe 	bl	800f90c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f514:	e083      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f516:	2300      	movs	r3, #0
 800f518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f51a:	e080      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f51c:	4b42      	ldr	r3, [pc, #264]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f003 0304 	and.w	r3, r3, #4
 800f524:	2b04      	cmp	r3, #4
 800f526:	d109      	bne.n	800f53c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f528:	4b3f      	ldr	r3, [pc, #252]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	08db      	lsrs	r3, r3, #3
 800f52e:	f003 0303 	and.w	r3, r3, #3
 800f532:	4a3e      	ldr	r2, [pc, #248]	@ (800f62c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800f534:	fa22 f303 	lsr.w	r3, r2, r3
 800f538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f53a:	e070      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f53c:	2300      	movs	r3, #0
 800f53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f540:	e06d      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f542:	4b39      	ldr	r3, [pc, #228]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f54a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f54e:	d102      	bne.n	800f556 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800f550:	4b37      	ldr	r3, [pc, #220]	@ (800f630 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f554:	e063      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f556:	2300      	movs	r3, #0
 800f558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f55a:	e060      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f55c:	4b32      	ldr	r3, [pc, #200]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f564:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f568:	d102      	bne.n	800f570 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800f56a:	4b32      	ldr	r3, [pc, #200]	@ (800f634 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800f56c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f56e:	e056      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f570:	2300      	movs	r3, #0
 800f572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f574:	e053      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f576:	2300      	movs	r3, #0
 800f578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f57a:	e050      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f57c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f580:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f584:	430b      	orrs	r3, r1
 800f586:	d148      	bne.n	800f61a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f588:	4b27      	ldr	r3, [pc, #156]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f58a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f58c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f590:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f598:	d02a      	beq.n	800f5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800f59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f59c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5a0:	d838      	bhi.n	800f614 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800f5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d004      	beq.n	800f5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800f5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f5ae:	d00d      	beq.n	800f5cc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800f5b0:	e030      	b.n	800f614 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f5b2:	4b1d      	ldr	r3, [pc, #116]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f5ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f5be:	d102      	bne.n	800f5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800f5c0:	4b1c      	ldr	r3, [pc, #112]	@ (800f634 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800f5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f5c4:	e02b      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5ca:	e028      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f5cc:	4b16      	ldr	r3, [pc, #88]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f5d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f5d8:	d107      	bne.n	800f5ea <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f5da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f000 fae8 	bl	800fbb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f5e8:	e019      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5ee:	e016      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f5f0:	4b0d      	ldr	r3, [pc, #52]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f5f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f5fc:	d107      	bne.n	800f60e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5fe:	f107 0318 	add.w	r3, r7, #24
 800f602:	4618      	mov	r0, r3
 800f604:	f000 f82e 	bl	800f664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f60c:	e007      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f60e:	2300      	movs	r3, #0
 800f610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f612:	e004      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800f614:	2300      	movs	r3, #0
 800f616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f618:	e001      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800f61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f620:	4618      	mov	r0, r3
 800f622:	3740      	adds	r7, #64	@ 0x40
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	58024400 	.word	0x58024400
 800f62c:	03d09000 	.word	0x03d09000
 800f630:	003d0900 	.word	0x003d0900
 800f634:	016e3600 	.word	0x016e3600

0800f638 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f63c:	f7fe f92e 	bl	800d89c <HAL_RCC_GetHCLKFreq>
 800f640:	4602      	mov	r2, r0
 800f642:	4b06      	ldr	r3, [pc, #24]	@ (800f65c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f644:	6a1b      	ldr	r3, [r3, #32]
 800f646:	091b      	lsrs	r3, r3, #4
 800f648:	f003 0307 	and.w	r3, r3, #7
 800f64c:	4904      	ldr	r1, [pc, #16]	@ (800f660 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f64e:	5ccb      	ldrb	r3, [r1, r3]
 800f650:	f003 031f 	and.w	r3, r3, #31
 800f654:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f658:	4618      	mov	r0, r3
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	58024400 	.word	0x58024400
 800f660:	0801d270 	.word	0x0801d270

0800f664 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f664:	b480      	push	{r7}
 800f666:	b089      	sub	sp, #36	@ 0x24
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f66c:	4ba1      	ldr	r3, [pc, #644]	@ (800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f670:	f003 0303 	and.w	r3, r3, #3
 800f674:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f676:	4b9f      	ldr	r3, [pc, #636]	@ (800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f67a:	0b1b      	lsrs	r3, r3, #12
 800f67c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f680:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f682:	4b9c      	ldr	r3, [pc, #624]	@ (800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f686:	091b      	lsrs	r3, r3, #4
 800f688:	f003 0301 	and.w	r3, r3, #1
 800f68c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f68e:	4b99      	ldr	r3, [pc, #612]	@ (800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f692:	08db      	lsrs	r3, r3, #3
 800f694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f698:	693a      	ldr	r2, [r7, #16]
 800f69a:	fb02 f303 	mul.w	r3, r2, r3
 800f69e:	ee07 3a90 	vmov	s15, r3
 800f6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	f000 8111 	beq.w	800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	f000 8083 	beq.w	800f7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f6ba:	69bb      	ldr	r3, [r7, #24]
 800f6bc:	2b02      	cmp	r3, #2
 800f6be:	f200 80a1 	bhi.w	800f804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f6c2:	69bb      	ldr	r3, [r7, #24]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d003      	beq.n	800f6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	2b01      	cmp	r3, #1
 800f6cc:	d056      	beq.n	800f77c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f6ce:	e099      	b.n	800f804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6d0:	4b88      	ldr	r3, [pc, #544]	@ (800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	f003 0320 	and.w	r3, r3, #32
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d02d      	beq.n	800f738 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f6dc:	4b85      	ldr	r3, [pc, #532]	@ (800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	08db      	lsrs	r3, r3, #3
 800f6e2:	f003 0303 	and.w	r3, r3, #3
 800f6e6:	4a84      	ldr	r2, [pc, #528]	@ (800f8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f6e8:	fa22 f303 	lsr.w	r3, r2, r3
 800f6ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	ee07 3a90 	vmov	s15, r3
 800f6f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	ee07 3a90 	vmov	s15, r3
 800f6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f706:	4b7b      	ldr	r3, [pc, #492]	@ (800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f70a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f70e:	ee07 3a90 	vmov	s15, r3
 800f712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f716:	ed97 6a03 	vldr	s12, [r7, #12]
 800f71a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f8fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f71e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f72a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f72e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f732:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f736:	e087      	b.n	800f848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	ee07 3a90 	vmov	s15, r3
 800f73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f742:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f900 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f74a:	4b6a      	ldr	r3, [pc, #424]	@ (800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f74c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f752:	ee07 3a90 	vmov	s15, r3
 800f756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f75a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f75e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f8fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f76a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f76e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f772:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f77a:	e065      	b.n	800f848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	ee07 3a90 	vmov	s15, r3
 800f782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f786:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f78a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f78e:	4b59      	ldr	r3, [pc, #356]	@ (800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f796:	ee07 3a90 	vmov	s15, r3
 800f79a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f79e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f7a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f8fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f7a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f7b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f7be:	e043      	b.n	800f848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	ee07 3a90 	vmov	s15, r3
 800f7c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f7ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f7d2:	4b48      	ldr	r3, [pc, #288]	@ (800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7da:	ee07 3a90 	vmov	s15, r3
 800f7de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f7e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f7e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f8fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f7ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f7f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f802:	e021      	b.n	800f848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	ee07 3a90 	vmov	s15, r3
 800f80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f80e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f816:	4b37      	ldr	r3, [pc, #220]	@ (800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f81a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f81e:	ee07 3a90 	vmov	s15, r3
 800f822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f826:	ed97 6a03 	vldr	s12, [r7, #12]
 800f82a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f8fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f82e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f83a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f83e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f846:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f848:	4b2a      	ldr	r3, [pc, #168]	@ (800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f84a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f84c:	0a5b      	lsrs	r3, r3, #9
 800f84e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f852:	ee07 3a90 	vmov	s15, r3
 800f856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f85a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f85e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f862:	edd7 6a07 	vldr	s13, [r7, #28]
 800f866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f86a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f86e:	ee17 2a90 	vmov	r2, s15
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f876:	4b1f      	ldr	r3, [pc, #124]	@ (800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f87a:	0c1b      	lsrs	r3, r3, #16
 800f87c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f880:	ee07 3a90 	vmov	s15, r3
 800f884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f888:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f88c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f890:	edd7 6a07 	vldr	s13, [r7, #28]
 800f894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f89c:	ee17 2a90 	vmov	r2, s15
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f8a4:	4b13      	ldr	r3, [pc, #76]	@ (800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f8a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8a8:	0e1b      	lsrs	r3, r3, #24
 800f8aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8ae:	ee07 3a90 	vmov	s15, r3
 800f8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f8ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f8be:	edd7 6a07 	vldr	s13, [r7, #28]
 800f8c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f8c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f8ca:	ee17 2a90 	vmov	r2, s15
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f8d2:	e008      	b.n	800f8e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	609a      	str	r2, [r3, #8]
}
 800f8e6:	bf00      	nop
 800f8e8:	3724      	adds	r7, #36	@ 0x24
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr
 800f8f2:	bf00      	nop
 800f8f4:	58024400 	.word	0x58024400
 800f8f8:	03d09000 	.word	0x03d09000
 800f8fc:	46000000 	.word	0x46000000
 800f900:	4c742400 	.word	0x4c742400
 800f904:	4a742400 	.word	0x4a742400
 800f908:	4bb71b00 	.word	0x4bb71b00

0800f90c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b089      	sub	sp, #36	@ 0x24
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f914:	4ba1      	ldr	r3, [pc, #644]	@ (800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f918:	f003 0303 	and.w	r3, r3, #3
 800f91c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f91e:	4b9f      	ldr	r3, [pc, #636]	@ (800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f922:	0d1b      	lsrs	r3, r3, #20
 800f924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f928:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f92a:	4b9c      	ldr	r3, [pc, #624]	@ (800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f92c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f92e:	0a1b      	lsrs	r3, r3, #8
 800f930:	f003 0301 	and.w	r3, r3, #1
 800f934:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f936:	4b99      	ldr	r3, [pc, #612]	@ (800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f93a:	08db      	lsrs	r3, r3, #3
 800f93c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f940:	693a      	ldr	r2, [r7, #16]
 800f942:	fb02 f303 	mul.w	r3, r2, r3
 800f946:	ee07 3a90 	vmov	s15, r3
 800f94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f94e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	2b00      	cmp	r3, #0
 800f956:	f000 8111 	beq.w	800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f95a:	69bb      	ldr	r3, [r7, #24]
 800f95c:	2b02      	cmp	r3, #2
 800f95e:	f000 8083 	beq.w	800fa68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f962:	69bb      	ldr	r3, [r7, #24]
 800f964:	2b02      	cmp	r3, #2
 800f966:	f200 80a1 	bhi.w	800faac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d003      	beq.n	800f978 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f970:	69bb      	ldr	r3, [r7, #24]
 800f972:	2b01      	cmp	r3, #1
 800f974:	d056      	beq.n	800fa24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f976:	e099      	b.n	800faac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f978:	4b88      	ldr	r3, [pc, #544]	@ (800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f003 0320 	and.w	r3, r3, #32
 800f980:	2b00      	cmp	r3, #0
 800f982:	d02d      	beq.n	800f9e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f984:	4b85      	ldr	r3, [pc, #532]	@ (800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	08db      	lsrs	r3, r3, #3
 800f98a:	f003 0303 	and.w	r3, r3, #3
 800f98e:	4a84      	ldr	r2, [pc, #528]	@ (800fba0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f990:	fa22 f303 	lsr.w	r3, r2, r3
 800f994:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	ee07 3a90 	vmov	s15, r3
 800f99c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	ee07 3a90 	vmov	s15, r3
 800f9a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9ae:	4b7b      	ldr	r3, [pc, #492]	@ (800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9b6:	ee07 3a90 	vmov	s15, r3
 800f9ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9be:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f9c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f9d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f9de:	e087      	b.n	800faf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	ee07 3a90 	vmov	s15, r3
 800f9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fba8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f9ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9f2:	4b6a      	ldr	r3, [pc, #424]	@ (800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9fa:	ee07 3a90 	vmov	s15, r3
 800f9fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa02:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa22:	e065      	b.n	800faf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	ee07 3a90 	vmov	s15, r3
 800fa2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fbac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fa32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa36:	4b59      	ldr	r3, [pc, #356]	@ (800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa3e:	ee07 3a90 	vmov	s15, r3
 800fa42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa46:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa66:	e043      	b.n	800faf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	ee07 3a90 	vmov	s15, r3
 800fa6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fbb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fa76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa7a:	4b48      	ldr	r3, [pc, #288]	@ (800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa82:	ee07 3a90 	vmov	s15, r3
 800fa86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800faa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800faaa:	e021      	b.n	800faf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	ee07 3a90 	vmov	s15, r3
 800fab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fab6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fbac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800faba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fabe:	4b37      	ldr	r3, [pc, #220]	@ (800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fac6:	ee07 3a90 	vmov	s15, r3
 800faca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800face:	ed97 6a03 	vldr	s12, [r7, #12]
 800fad2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800faee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800faf0:	4b2a      	ldr	r3, [pc, #168]	@ (800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800faf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faf4:	0a5b      	lsrs	r3, r3, #9
 800faf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fafa:	ee07 3a90 	vmov	s15, r3
 800fafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb16:	ee17 2a90 	vmov	r2, s15
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800fb1e:	4b1f      	ldr	r3, [pc, #124]	@ (800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb22:	0c1b      	lsrs	r3, r3, #16
 800fb24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb28:	ee07 3a90 	vmov	s15, r3
 800fb2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb38:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb44:	ee17 2a90 	vmov	r2, s15
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800fb4c:	4b13      	ldr	r3, [pc, #76]	@ (800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb50:	0e1b      	lsrs	r3, r3, #24
 800fb52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb56:	ee07 3a90 	vmov	s15, r3
 800fb5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb66:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb72:	ee17 2a90 	vmov	r2, s15
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fb7a:	e008      	b.n	800fb8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2200      	movs	r2, #0
 800fb86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	609a      	str	r2, [r3, #8]
}
 800fb8e:	bf00      	nop
 800fb90:	3724      	adds	r7, #36	@ 0x24
 800fb92:	46bd      	mov	sp, r7
 800fb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb98:	4770      	bx	lr
 800fb9a:	bf00      	nop
 800fb9c:	58024400 	.word	0x58024400
 800fba0:	03d09000 	.word	0x03d09000
 800fba4:	46000000 	.word	0x46000000
 800fba8:	4c742400 	.word	0x4c742400
 800fbac:	4a742400 	.word	0x4a742400
 800fbb0:	4bb71b00 	.word	0x4bb71b00

0800fbb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b089      	sub	sp, #36	@ 0x24
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fbbc:	4ba0      	ldr	r3, [pc, #640]	@ (800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbc0:	f003 0303 	and.w	r3, r3, #3
 800fbc4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800fbc6:	4b9e      	ldr	r3, [pc, #632]	@ (800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbca:	091b      	lsrs	r3, r3, #4
 800fbcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fbd0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800fbd2:	4b9b      	ldr	r3, [pc, #620]	@ (800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbd6:	f003 0301 	and.w	r3, r3, #1
 800fbda:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fbdc:	4b98      	ldr	r3, [pc, #608]	@ (800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbe0:	08db      	lsrs	r3, r3, #3
 800fbe2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fbe6:	693a      	ldr	r2, [r7, #16]
 800fbe8:	fb02 f303 	mul.w	r3, r2, r3
 800fbec:	ee07 3a90 	vmov	s15, r3
 800fbf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbf4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	f000 8111 	beq.w	800fe22 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800fc00:	69bb      	ldr	r3, [r7, #24]
 800fc02:	2b02      	cmp	r3, #2
 800fc04:	f000 8083 	beq.w	800fd0e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fc08:	69bb      	ldr	r3, [r7, #24]
 800fc0a:	2b02      	cmp	r3, #2
 800fc0c:	f200 80a1 	bhi.w	800fd52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fc10:	69bb      	ldr	r3, [r7, #24]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d003      	beq.n	800fc1e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800fc16:	69bb      	ldr	r3, [r7, #24]
 800fc18:	2b01      	cmp	r3, #1
 800fc1a:	d056      	beq.n	800fcca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800fc1c:	e099      	b.n	800fd52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc1e:	4b88      	ldr	r3, [pc, #544]	@ (800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f003 0320 	and.w	r3, r3, #32
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d02d      	beq.n	800fc86 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fc2a:	4b85      	ldr	r3, [pc, #532]	@ (800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	08db      	lsrs	r3, r3, #3
 800fc30:	f003 0303 	and.w	r3, r3, #3
 800fc34:	4a83      	ldr	r2, [pc, #524]	@ (800fe44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fc36:	fa22 f303 	lsr.w	r3, r2, r3
 800fc3a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	ee07 3a90 	vmov	s15, r3
 800fc42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	ee07 3a90 	vmov	s15, r3
 800fc4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc54:	4b7a      	ldr	r3, [pc, #488]	@ (800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc5c:	ee07 3a90 	vmov	s15, r3
 800fc60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc64:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc68:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800fe48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fc6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fc78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc80:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fc84:	e087      	b.n	800fd96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	ee07 3a90 	vmov	s15, r3
 800fc8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc90:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800fe4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fc94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc98:	4b69      	ldr	r3, [pc, #420]	@ (800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fca0:	ee07 3a90 	vmov	s15, r3
 800fca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fca8:	ed97 6a03 	vldr	s12, [r7, #12]
 800fcac:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800fe48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fcb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fcb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fcbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fcc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fcc8:	e065      	b.n	800fd96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	ee07 3a90 	vmov	s15, r3
 800fcd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcd4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800fe50 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800fcd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fcdc:	4b58      	ldr	r3, [pc, #352]	@ (800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fcde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fce4:	ee07 3a90 	vmov	s15, r3
 800fce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fcec:	ed97 6a03 	vldr	s12, [r7, #12]
 800fcf0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800fe48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fcf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fcfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fd0c:	e043      	b.n	800fd96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	ee07 3a90 	vmov	s15, r3
 800fd14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd18:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800fe54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fd1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd20:	4b47      	ldr	r3, [pc, #284]	@ (800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd28:	ee07 3a90 	vmov	s15, r3
 800fd2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd30:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd34:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800fe48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fd50:	e021      	b.n	800fd96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	ee07 3a90 	vmov	s15, r3
 800fd58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd5c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800fe4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fd60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd64:	4b36      	ldr	r3, [pc, #216]	@ (800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd6c:	ee07 3a90 	vmov	s15, r3
 800fd70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd74:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd78:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800fe48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fd94:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800fd96:	4b2a      	ldr	r3, [pc, #168]	@ (800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd9a:	0a5b      	lsrs	r3, r3, #9
 800fd9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fda0:	ee07 3a90 	vmov	s15, r3
 800fda4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fda8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fdac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fdb0:	edd7 6a07 	vldr	s13, [r7, #28]
 800fdb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fdb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fdbc:	ee17 2a90 	vmov	r2, s15
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800fdc4:	4b1e      	ldr	r3, [pc, #120]	@ (800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fdc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdc8:	0c1b      	lsrs	r3, r3, #16
 800fdca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fdce:	ee07 3a90 	vmov	s15, r3
 800fdd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fdda:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fdde:	edd7 6a07 	vldr	s13, [r7, #28]
 800fde2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fde6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fdea:	ee17 2a90 	vmov	r2, s15
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800fdf2:	4b13      	ldr	r3, [pc, #76]	@ (800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fdf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdf6:	0e1b      	lsrs	r3, r3, #24
 800fdf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fdfc:	ee07 3a90 	vmov	s15, r3
 800fe00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe08:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe18:	ee17 2a90 	vmov	r2, s15
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800fe20:	e008      	b.n	800fe34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2200      	movs	r2, #0
 800fe26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2200      	movs	r2, #0
 800fe32:	609a      	str	r2, [r3, #8]
}
 800fe34:	bf00      	nop
 800fe36:	3724      	adds	r7, #36	@ 0x24
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr
 800fe40:	58024400 	.word	0x58024400
 800fe44:	03d09000 	.word	0x03d09000
 800fe48:	46000000 	.word	0x46000000
 800fe4c:	4c742400 	.word	0x4c742400
 800fe50:	4a742400 	.word	0x4a742400
 800fe54:	4bb71b00 	.word	0x4bb71b00

0800fe58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fe62:	2300      	movs	r3, #0
 800fe64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fe66:	4b53      	ldr	r3, [pc, #332]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800fe68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe6a:	f003 0303 	and.w	r3, r3, #3
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	d101      	bne.n	800fe76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fe72:	2301      	movs	r3, #1
 800fe74:	e099      	b.n	800ffaa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fe76:	4b4f      	ldr	r3, [pc, #316]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	4a4e      	ldr	r2, [pc, #312]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800fe7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fe80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe82:	f7f6 ff39 	bl	8006cf8 <HAL_GetTick>
 800fe86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe88:	e008      	b.n	800fe9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fe8a:	f7f6 ff35 	bl	8006cf8 <HAL_GetTick>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	1ad3      	subs	r3, r2, r3
 800fe94:	2b02      	cmp	r3, #2
 800fe96:	d901      	bls.n	800fe9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fe98:	2303      	movs	r3, #3
 800fe9a:	e086      	b.n	800ffaa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe9c:	4b45      	ldr	r3, [pc, #276]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d1f0      	bne.n	800fe8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fea8:	4b42      	ldr	r3, [pc, #264]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800feaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800feac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	031b      	lsls	r3, r3, #12
 800feb6:	493f      	ldr	r1, [pc, #252]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800feb8:	4313      	orrs	r3, r2
 800feba:	628b      	str	r3, [r1, #40]	@ 0x28
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	685b      	ldr	r3, [r3, #4]
 800fec0:	3b01      	subs	r3, #1
 800fec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	689b      	ldr	r3, [r3, #8]
 800feca:	3b01      	subs	r3, #1
 800fecc:	025b      	lsls	r3, r3, #9
 800fece:	b29b      	uxth	r3, r3
 800fed0:	431a      	orrs	r2, r3
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	68db      	ldr	r3, [r3, #12]
 800fed6:	3b01      	subs	r3, #1
 800fed8:	041b      	lsls	r3, r3, #16
 800feda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fede:	431a      	orrs	r2, r3
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	691b      	ldr	r3, [r3, #16]
 800fee4:	3b01      	subs	r3, #1
 800fee6:	061b      	lsls	r3, r3, #24
 800fee8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800feec:	4931      	ldr	r1, [pc, #196]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800feee:	4313      	orrs	r3, r2
 800fef0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fef2:	4b30      	ldr	r3, [pc, #192]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800fef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fef6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	695b      	ldr	r3, [r3, #20]
 800fefe:	492d      	ldr	r1, [pc, #180]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff00:	4313      	orrs	r3, r2
 800ff02:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ff04:	4b2b      	ldr	r3, [pc, #172]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff08:	f023 0220 	bic.w	r2, r3, #32
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	699b      	ldr	r3, [r3, #24]
 800ff10:	4928      	ldr	r1, [pc, #160]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff12:	4313      	orrs	r3, r2
 800ff14:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ff16:	4b27      	ldr	r3, [pc, #156]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff1a:	4a26      	ldr	r2, [pc, #152]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff1c:	f023 0310 	bic.w	r3, r3, #16
 800ff20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ff22:	4b24      	ldr	r3, [pc, #144]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff26:	4b24      	ldr	r3, [pc, #144]	@ (800ffb8 <RCCEx_PLL2_Config+0x160>)
 800ff28:	4013      	ands	r3, r2
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	69d2      	ldr	r2, [r2, #28]
 800ff2e:	00d2      	lsls	r2, r2, #3
 800ff30:	4920      	ldr	r1, [pc, #128]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff32:	4313      	orrs	r3, r2
 800ff34:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ff36:	4b1f      	ldr	r3, [pc, #124]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff3a:	4a1e      	ldr	r2, [pc, #120]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff3c:	f043 0310 	orr.w	r3, r3, #16
 800ff40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d106      	bne.n	800ff56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ff48:	4b1a      	ldr	r3, [pc, #104]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff4c:	4a19      	ldr	r2, [pc, #100]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ff52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ff54:	e00f      	b.n	800ff76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d106      	bne.n	800ff6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ff5c:	4b15      	ldr	r3, [pc, #84]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff60:	4a14      	ldr	r2, [pc, #80]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ff66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ff68:	e005      	b.n	800ff76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ff6a:	4b12      	ldr	r3, [pc, #72]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff6e:	4a11      	ldr	r2, [pc, #68]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ff74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ff76:	4b0f      	ldr	r3, [pc, #60]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	4a0e      	ldr	r2, [pc, #56]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ff80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ff82:	f7f6 feb9 	bl	8006cf8 <HAL_GetTick>
 800ff86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff88:	e008      	b.n	800ff9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ff8a:	f7f6 feb5 	bl	8006cf8 <HAL_GetTick>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	1ad3      	subs	r3, r2, r3
 800ff94:	2b02      	cmp	r3, #2
 800ff96:	d901      	bls.n	800ff9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ff98:	2303      	movs	r3, #3
 800ff9a:	e006      	b.n	800ffaa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff9c:	4b05      	ldr	r3, [pc, #20]	@ (800ffb4 <RCCEx_PLL2_Config+0x15c>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d0f0      	beq.n	800ff8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ffa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3710      	adds	r7, #16
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}
 800ffb2:	bf00      	nop
 800ffb4:	58024400 	.word	0x58024400
 800ffb8:	ffff0007 	.word	0xffff0007

0800ffbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b084      	sub	sp, #16
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ffca:	4b53      	ldr	r3, [pc, #332]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 800ffcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffce:	f003 0303 	and.w	r3, r3, #3
 800ffd2:	2b03      	cmp	r3, #3
 800ffd4:	d101      	bne.n	800ffda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	e099      	b.n	801010e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ffda:	4b4f      	ldr	r3, [pc, #316]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	4a4e      	ldr	r2, [pc, #312]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 800ffe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ffe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ffe6:	f7f6 fe87 	bl	8006cf8 <HAL_GetTick>
 800ffea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ffec:	e008      	b.n	8010000 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ffee:	f7f6 fe83 	bl	8006cf8 <HAL_GetTick>
 800fff2:	4602      	mov	r2, r0
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	1ad3      	subs	r3, r2, r3
 800fff8:	2b02      	cmp	r3, #2
 800fffa:	d901      	bls.n	8010000 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fffc:	2303      	movs	r3, #3
 800fffe:	e086      	b.n	801010e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010000:	4b45      	ldr	r3, [pc, #276]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010008:	2b00      	cmp	r3, #0
 801000a:	d1f0      	bne.n	800ffee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801000c:	4b42      	ldr	r3, [pc, #264]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 801000e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010010:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	051b      	lsls	r3, r3, #20
 801001a:	493f      	ldr	r1, [pc, #252]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 801001c:	4313      	orrs	r3, r2
 801001e:	628b      	str	r3, [r1, #40]	@ 0x28
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	3b01      	subs	r3, #1
 8010026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	3b01      	subs	r3, #1
 8010030:	025b      	lsls	r3, r3, #9
 8010032:	b29b      	uxth	r3, r3
 8010034:	431a      	orrs	r2, r3
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	3b01      	subs	r3, #1
 801003c:	041b      	lsls	r3, r3, #16
 801003e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010042:	431a      	orrs	r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	691b      	ldr	r3, [r3, #16]
 8010048:	3b01      	subs	r3, #1
 801004a:	061b      	lsls	r3, r3, #24
 801004c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010050:	4931      	ldr	r1, [pc, #196]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 8010052:	4313      	orrs	r3, r2
 8010054:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010056:	4b30      	ldr	r3, [pc, #192]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 8010058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801005a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	695b      	ldr	r3, [r3, #20]
 8010062:	492d      	ldr	r1, [pc, #180]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 8010064:	4313      	orrs	r3, r2
 8010066:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010068:	4b2b      	ldr	r3, [pc, #172]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 801006a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801006c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	699b      	ldr	r3, [r3, #24]
 8010074:	4928      	ldr	r1, [pc, #160]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 8010076:	4313      	orrs	r3, r2
 8010078:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801007a:	4b27      	ldr	r3, [pc, #156]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 801007c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801007e:	4a26      	ldr	r2, [pc, #152]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 8010080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010084:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010086:	4b24      	ldr	r3, [pc, #144]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 8010088:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801008a:	4b24      	ldr	r3, [pc, #144]	@ (801011c <RCCEx_PLL3_Config+0x160>)
 801008c:	4013      	ands	r3, r2
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	69d2      	ldr	r2, [r2, #28]
 8010092:	00d2      	lsls	r2, r2, #3
 8010094:	4920      	ldr	r1, [pc, #128]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 8010096:	4313      	orrs	r3, r2
 8010098:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801009a:	4b1f      	ldr	r3, [pc, #124]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 801009c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801009e:	4a1e      	ldr	r2, [pc, #120]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 80100a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80100a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d106      	bne.n	80100ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80100ac:	4b1a      	ldr	r3, [pc, #104]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 80100ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100b0:	4a19      	ldr	r2, [pc, #100]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 80100b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80100b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80100b8:	e00f      	b.n	80100da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d106      	bne.n	80100ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80100c0:	4b15      	ldr	r3, [pc, #84]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 80100c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100c4:	4a14      	ldr	r2, [pc, #80]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 80100c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80100ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80100cc:	e005      	b.n	80100da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80100ce:	4b12      	ldr	r3, [pc, #72]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 80100d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100d2:	4a11      	ldr	r2, [pc, #68]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 80100d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80100d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80100da:	4b0f      	ldr	r3, [pc, #60]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	4a0e      	ldr	r2, [pc, #56]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 80100e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80100e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80100e6:	f7f6 fe07 	bl	8006cf8 <HAL_GetTick>
 80100ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80100ec:	e008      	b.n	8010100 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80100ee:	f7f6 fe03 	bl	8006cf8 <HAL_GetTick>
 80100f2:	4602      	mov	r2, r0
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	1ad3      	subs	r3, r2, r3
 80100f8:	2b02      	cmp	r3, #2
 80100fa:	d901      	bls.n	8010100 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80100fc:	2303      	movs	r3, #3
 80100fe:	e006      	b.n	801010e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010100:	4b05      	ldr	r3, [pc, #20]	@ (8010118 <RCCEx_PLL3_Config+0x15c>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010108:	2b00      	cmp	r3, #0
 801010a:	d0f0      	beq.n	80100ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801010c:	7bfb      	ldrb	r3, [r7, #15]
}
 801010e:	4618      	mov	r0, r3
 8010110:	3710      	adds	r7, #16
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	58024400 	.word	0x58024400
 801011c:	ffff0007 	.word	0xffff0007

08010120 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b084      	sub	sp, #16
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d101      	bne.n	8010132 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801012e:	2301      	movs	r3, #1
 8010130:	e10f      	b.n	8010352 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2200      	movs	r2, #0
 8010136:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	4a87      	ldr	r2, [pc, #540]	@ (801035c <HAL_SPI_Init+0x23c>)
 801013e:	4293      	cmp	r3, r2
 8010140:	d00f      	beq.n	8010162 <HAL_SPI_Init+0x42>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	4a86      	ldr	r2, [pc, #536]	@ (8010360 <HAL_SPI_Init+0x240>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d00a      	beq.n	8010162 <HAL_SPI_Init+0x42>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	4a84      	ldr	r2, [pc, #528]	@ (8010364 <HAL_SPI_Init+0x244>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d005      	beq.n	8010162 <HAL_SPI_Init+0x42>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	2b0f      	cmp	r3, #15
 801015c:	d901      	bls.n	8010162 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801015e:	2301      	movs	r3, #1
 8010160:	e0f7      	b.n	8010352 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f000 fef6 	bl	8010f54 <SPI_GetPacketSize>
 8010168:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	4a7b      	ldr	r2, [pc, #492]	@ (801035c <HAL_SPI_Init+0x23c>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d00c      	beq.n	801018e <HAL_SPI_Init+0x6e>
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	4a79      	ldr	r2, [pc, #484]	@ (8010360 <HAL_SPI_Init+0x240>)
 801017a:	4293      	cmp	r3, r2
 801017c:	d007      	beq.n	801018e <HAL_SPI_Init+0x6e>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	4a78      	ldr	r2, [pc, #480]	@ (8010364 <HAL_SPI_Init+0x244>)
 8010184:	4293      	cmp	r3, r2
 8010186:	d002      	beq.n	801018e <HAL_SPI_Init+0x6e>
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	2b08      	cmp	r3, #8
 801018c:	d811      	bhi.n	80101b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010192:	4a72      	ldr	r2, [pc, #456]	@ (801035c <HAL_SPI_Init+0x23c>)
 8010194:	4293      	cmp	r3, r2
 8010196:	d009      	beq.n	80101ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	4a70      	ldr	r2, [pc, #448]	@ (8010360 <HAL_SPI_Init+0x240>)
 801019e:	4293      	cmp	r3, r2
 80101a0:	d004      	beq.n	80101ac <HAL_SPI_Init+0x8c>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	4a6f      	ldr	r2, [pc, #444]	@ (8010364 <HAL_SPI_Init+0x244>)
 80101a8:	4293      	cmp	r3, r2
 80101aa:	d104      	bne.n	80101b6 <HAL_SPI_Init+0x96>
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2b10      	cmp	r3, #16
 80101b0:	d901      	bls.n	80101b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80101b2:	2301      	movs	r3, #1
 80101b4:	e0cd      	b.n	8010352 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d106      	bne.n	80101d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2200      	movs	r2, #0
 80101c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f7f2 fa0c 	bl	80025e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2202      	movs	r2, #2
 80101d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	f022 0201 	bic.w	r2, r2, #1
 80101e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	689b      	ldr	r3, [r3, #8]
 80101ee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80101f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	699b      	ldr	r3, [r3, #24]
 80101f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80101fc:	d119      	bne.n	8010232 <HAL_SPI_Init+0x112>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010206:	d103      	bne.n	8010210 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801020c:	2b00      	cmp	r3, #0
 801020e:	d008      	beq.n	8010222 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010214:	2b00      	cmp	r3, #0
 8010216:	d10c      	bne.n	8010232 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801021c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010220:	d107      	bne.n	8010232 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010230:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801023a:	2b00      	cmp	r3, #0
 801023c:	d00f      	beq.n	801025e <HAL_SPI_Init+0x13e>
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	68db      	ldr	r3, [r3, #12]
 8010242:	2b06      	cmp	r3, #6
 8010244:	d90b      	bls.n	801025e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	430a      	orrs	r2, r1
 801025a:	601a      	str	r2, [r3, #0]
 801025c:	e007      	b.n	801026e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801026c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	69da      	ldr	r2, [r3, #28]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010276:	431a      	orrs	r2, r3
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	431a      	orrs	r2, r3
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010280:	ea42 0103 	orr.w	r1, r2, r3
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	68da      	ldr	r2, [r3, #12]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	430a      	orrs	r2, r1
 801028e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010298:	431a      	orrs	r2, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801029e:	431a      	orrs	r2, r3
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	699b      	ldr	r3, [r3, #24]
 80102a4:	431a      	orrs	r2, r3
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	691b      	ldr	r3, [r3, #16]
 80102aa:	431a      	orrs	r2, r3
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	695b      	ldr	r3, [r3, #20]
 80102b0:	431a      	orrs	r2, r3
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6a1b      	ldr	r3, [r3, #32]
 80102b6:	431a      	orrs	r2, r3
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	431a      	orrs	r2, r3
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80102c2:	431a      	orrs	r2, r3
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	689b      	ldr	r3, [r3, #8]
 80102c8:	431a      	orrs	r2, r3
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80102ce:	ea42 0103 	orr.w	r1, r2, r3
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	430a      	orrs	r2, r1
 80102dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d113      	bne.n	801030e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	689b      	ldr	r3, [r3, #8]
 80102ec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80102f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	689b      	ldr	r3, [r3, #8]
 8010300:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801030c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f022 0201 	bic.w	r2, r2, #1
 801031c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010326:	2b00      	cmp	r3, #0
 8010328:	d00a      	beq.n	8010340 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	68db      	ldr	r3, [r3, #12]
 8010330:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	430a      	orrs	r2, r1
 801033e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2200      	movs	r2, #0
 8010344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2201      	movs	r2, #1
 801034c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8010350:	2300      	movs	r3, #0
}
 8010352:	4618      	mov	r0, r3
 8010354:	3710      	adds	r7, #16
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
 801035a:	bf00      	nop
 801035c:	40013000 	.word	0x40013000
 8010360:	40003800 	.word	0x40003800
 8010364:	40003c00 	.word	0x40003c00

08010368 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b088      	sub	sp, #32
 801036c:	af02      	add	r7, sp, #8
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	60b9      	str	r1, [r7, #8]
 8010372:	603b      	str	r3, [r7, #0]
 8010374:	4613      	mov	r3, r2
 8010376:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	3320      	adds	r3, #32
 801037e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010380:	f7f6 fcba 	bl	8006cf8 <HAL_GetTick>
 8010384:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801038c:	b2db      	uxtb	r3, r3
 801038e:	2b01      	cmp	r3, #1
 8010390:	d001      	beq.n	8010396 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8010392:	2302      	movs	r3, #2
 8010394:	e1d1      	b.n	801073a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d002      	beq.n	80103a2 <HAL_SPI_Transmit+0x3a>
 801039c:	88fb      	ldrh	r3, [r7, #6]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d101      	bne.n	80103a6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80103a2:	2301      	movs	r3, #1
 80103a4:	e1c9      	b.n	801073a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	d101      	bne.n	80103b4 <HAL_SPI_Transmit+0x4c>
 80103b0:	2302      	movs	r3, #2
 80103b2:	e1c2      	b.n	801073a <HAL_SPI_Transmit+0x3d2>
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2201      	movs	r2, #1
 80103b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2203      	movs	r2, #3
 80103c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2200      	movs	r2, #0
 80103c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	68ba      	ldr	r2, [r7, #8]
 80103d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	88fa      	ldrh	r2, [r7, #6]
 80103d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	88fa      	ldrh	r2, [r7, #6]
 80103de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	2200      	movs	r2, #0
 80103e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	2200      	movs	r2, #0
 80103ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	2200      	movs	r2, #0
 80103f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	2200      	movs	r2, #0
 80103fc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2200      	movs	r2, #0
 8010402:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	689b      	ldr	r3, [r3, #8]
 8010408:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 801040c:	d108      	bne.n	8010420 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	681a      	ldr	r2, [r3, #0]
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801041c:	601a      	str	r2, [r3, #0]
 801041e:	e009      	b.n	8010434 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	68db      	ldr	r3, [r3, #12]
 8010426:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010432:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	685a      	ldr	r2, [r3, #4]
 801043a:	4b96      	ldr	r3, [pc, #600]	@ (8010694 <HAL_SPI_Transmit+0x32c>)
 801043c:	4013      	ands	r3, r2
 801043e:	88f9      	ldrh	r1, [r7, #6]
 8010440:	68fa      	ldr	r2, [r7, #12]
 8010442:	6812      	ldr	r2, [r2, #0]
 8010444:	430b      	orrs	r3, r1
 8010446:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	f042 0201 	orr.w	r2, r2, #1
 8010456:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010460:	d107      	bne.n	8010472 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	681a      	ldr	r2, [r3, #0]
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010470:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	68db      	ldr	r3, [r3, #12]
 8010476:	2b0f      	cmp	r3, #15
 8010478:	d947      	bls.n	801050a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801047a:	e03f      	b.n	80104fc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	695b      	ldr	r3, [r3, #20]
 8010482:	f003 0302 	and.w	r3, r3, #2
 8010486:	2b02      	cmp	r3, #2
 8010488:	d114      	bne.n	80104b4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	6812      	ldr	r2, [r2, #0]
 8010494:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801049a:	1d1a      	adds	r2, r3, #4
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	3b01      	subs	r3, #1
 80104aa:	b29a      	uxth	r2, r3
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80104b2:	e023      	b.n	80104fc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80104b4:	f7f6 fc20 	bl	8006cf8 <HAL_GetTick>
 80104b8:	4602      	mov	r2, r0
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	1ad3      	subs	r3, r2, r3
 80104be:	683a      	ldr	r2, [r7, #0]
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d803      	bhi.n	80104cc <HAL_SPI_Transmit+0x164>
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ca:	d102      	bne.n	80104d2 <HAL_SPI_Transmit+0x16a>
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d114      	bne.n	80104fc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80104d2:	68f8      	ldr	r0, [r7, #12]
 80104d4:	f000 fc70 	bl	8010db8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80104de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	2201      	movs	r2, #1
 80104ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	2200      	movs	r2, #0
 80104f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80104f8:	2303      	movs	r3, #3
 80104fa:	e11e      	b.n	801073a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010502:	b29b      	uxth	r3, r3
 8010504:	2b00      	cmp	r3, #0
 8010506:	d1b9      	bne.n	801047c <HAL_SPI_Transmit+0x114>
 8010508:	e0f1      	b.n	80106ee <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	2b07      	cmp	r3, #7
 8010510:	f240 80e6 	bls.w	80106e0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010514:	e05d      	b.n	80105d2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	695b      	ldr	r3, [r3, #20]
 801051c:	f003 0302 	and.w	r3, r3, #2
 8010520:	2b02      	cmp	r3, #2
 8010522:	d132      	bne.n	801058a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801052a:	b29b      	uxth	r3, r3
 801052c:	2b01      	cmp	r3, #1
 801052e:	d918      	bls.n	8010562 <HAL_SPI_Transmit+0x1fa>
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010534:	2b00      	cmp	r3, #0
 8010536:	d014      	beq.n	8010562 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	6812      	ldr	r2, [r2, #0]
 8010542:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010548:	1d1a      	adds	r2, r3, #4
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010554:	b29b      	uxth	r3, r3
 8010556:	3b02      	subs	r3, #2
 8010558:	b29a      	uxth	r2, r3
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010560:	e037      	b.n	80105d2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010566:	881a      	ldrh	r2, [r3, #0]
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010570:	1c9a      	adds	r2, r3, #2
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801057c:	b29b      	uxth	r3, r3
 801057e:	3b01      	subs	r3, #1
 8010580:	b29a      	uxth	r2, r3
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010588:	e023      	b.n	80105d2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801058a:	f7f6 fbb5 	bl	8006cf8 <HAL_GetTick>
 801058e:	4602      	mov	r2, r0
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	1ad3      	subs	r3, r2, r3
 8010594:	683a      	ldr	r2, [r7, #0]
 8010596:	429a      	cmp	r2, r3
 8010598:	d803      	bhi.n	80105a2 <HAL_SPI_Transmit+0x23a>
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105a0:	d102      	bne.n	80105a8 <HAL_SPI_Transmit+0x240>
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d114      	bne.n	80105d2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80105a8:	68f8      	ldr	r0, [r7, #12]
 80105aa:	f000 fc05 	bl	8010db8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80105b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2201      	movs	r2, #1
 80105c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2200      	movs	r2, #0
 80105ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80105ce:	2303      	movs	r3, #3
 80105d0:	e0b3      	b.n	801073a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80105d8:	b29b      	uxth	r3, r3
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d19b      	bne.n	8010516 <HAL_SPI_Transmit+0x1ae>
 80105de:	e086      	b.n	80106ee <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	695b      	ldr	r3, [r3, #20]
 80105e6:	f003 0302 	and.w	r3, r3, #2
 80105ea:	2b02      	cmp	r3, #2
 80105ec:	d154      	bne.n	8010698 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	2b03      	cmp	r3, #3
 80105f8:	d918      	bls.n	801062c <HAL_SPI_Transmit+0x2c4>
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105fe:	2b40      	cmp	r3, #64	@ 0x40
 8010600:	d914      	bls.n	801062c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	6812      	ldr	r2, [r2, #0]
 801060c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010612:	1d1a      	adds	r2, r3, #4
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801061e:	b29b      	uxth	r3, r3
 8010620:	3b04      	subs	r3, #4
 8010622:	b29a      	uxth	r2, r3
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801062a:	e059      	b.n	80106e0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010632:	b29b      	uxth	r3, r3
 8010634:	2b01      	cmp	r3, #1
 8010636:	d917      	bls.n	8010668 <HAL_SPI_Transmit+0x300>
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801063c:	2b00      	cmp	r3, #0
 801063e:	d013      	beq.n	8010668 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010644:	881a      	ldrh	r2, [r3, #0]
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801064e:	1c9a      	adds	r2, r3, #2
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801065a:	b29b      	uxth	r3, r3
 801065c:	3b02      	subs	r3, #2
 801065e:	b29a      	uxth	r2, r3
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010666:	e03b      	b.n	80106e0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	3320      	adds	r3, #32
 8010672:	7812      	ldrb	r2, [r2, #0]
 8010674:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801067a:	1c5a      	adds	r2, r3, #1
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010686:	b29b      	uxth	r3, r3
 8010688:	3b01      	subs	r3, #1
 801068a:	b29a      	uxth	r2, r3
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010692:	e025      	b.n	80106e0 <HAL_SPI_Transmit+0x378>
 8010694:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010698:	f7f6 fb2e 	bl	8006cf8 <HAL_GetTick>
 801069c:	4602      	mov	r2, r0
 801069e:	693b      	ldr	r3, [r7, #16]
 80106a0:	1ad3      	subs	r3, r2, r3
 80106a2:	683a      	ldr	r2, [r7, #0]
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d803      	bhi.n	80106b0 <HAL_SPI_Transmit+0x348>
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ae:	d102      	bne.n	80106b6 <HAL_SPI_Transmit+0x34e>
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d114      	bne.n	80106e0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80106b6:	68f8      	ldr	r0, [r7, #12]
 80106b8:	f000 fb7e 	bl	8010db8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80106c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	2201      	movs	r2, #1
 80106d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2200      	movs	r2, #0
 80106d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80106dc:	2303      	movs	r3, #3
 80106de:	e02c      	b.n	801073a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	f47f af79 	bne.w	80105e0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	9300      	str	r3, [sp, #0]
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	2200      	movs	r2, #0
 80106f6:	2108      	movs	r1, #8
 80106f8:	68f8      	ldr	r0, [r7, #12]
 80106fa:	f000 fbfd 	bl	8010ef8 <SPI_WaitOnFlagUntilTimeout>
 80106fe:	4603      	mov	r3, r0
 8010700:	2b00      	cmp	r3, #0
 8010702:	d007      	beq.n	8010714 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801070a:	f043 0220 	orr.w	r2, r3, #32
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010714:	68f8      	ldr	r0, [r7, #12]
 8010716:	f000 fb4f 	bl	8010db8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2201      	movs	r2, #1
 801071e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2200      	movs	r2, #0
 8010726:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010730:	2b00      	cmp	r3, #0
 8010732:	d001      	beq.n	8010738 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8010734:	2301      	movs	r3, #1
 8010736:	e000      	b.n	801073a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8010738:	2300      	movs	r3, #0
  }
}
 801073a:	4618      	mov	r0, r3
 801073c:	3718      	adds	r7, #24
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop

08010744 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b08e      	sub	sp, #56	@ 0x38
 8010748:	af02      	add	r7, sp, #8
 801074a:	60f8      	str	r0, [r7, #12]
 801074c:	60b9      	str	r1, [r7, #8]
 801074e:	607a      	str	r2, [r7, #4]
 8010750:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	3320      	adds	r3, #32
 8010758:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	3330      	adds	r3, #48	@ 0x30
 8010760:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010766:	095b      	lsrs	r3, r3, #5
 8010768:	b29b      	uxth	r3, r3
 801076a:	3301      	adds	r3, #1
 801076c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801076e:	f7f6 fac3 	bl	8006cf8 <HAL_GetTick>
 8010772:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8010774:	887b      	ldrh	r3, [r7, #2]
 8010776:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8010778:	887b      	ldrh	r3, [r7, #2]
 801077a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010782:	b2db      	uxtb	r3, r3
 8010784:	2b01      	cmp	r3, #1
 8010786:	d001      	beq.n	801078c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8010788:	2302      	movs	r3, #2
 801078a:	e310      	b.n	8010dae <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d005      	beq.n	801079e <HAL_SPI_TransmitReceive+0x5a>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d002      	beq.n	801079e <HAL_SPI_TransmitReceive+0x5a>
 8010798:	887b      	ldrh	r3, [r7, #2]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d101      	bne.n	80107a2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 801079e:	2301      	movs	r3, #1
 80107a0:	e305      	b.n	8010dae <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d101      	bne.n	80107b0 <HAL_SPI_TransmitReceive+0x6c>
 80107ac:	2302      	movs	r3, #2
 80107ae:	e2fe      	b.n	8010dae <HAL_SPI_TransmitReceive+0x66a>
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	2201      	movs	r2, #1
 80107b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2205      	movs	r2, #5
 80107bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2200      	movs	r2, #0
 80107c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	887a      	ldrh	r2, [r7, #2]
 80107d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	887a      	ldrh	r2, [r7, #2]
 80107da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	68ba      	ldr	r2, [r7, #8]
 80107e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	887a      	ldrh	r2, [r7, #2]
 80107e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	887a      	ldrh	r2, [r7, #2]
 80107f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	2200      	movs	r2, #0
 80107f8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2200      	movs	r2, #0
 80107fe:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	68da      	ldr	r2, [r3, #12]
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 801080e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	4a70      	ldr	r2, [pc, #448]	@ (80109d8 <HAL_SPI_TransmitReceive+0x294>)
 8010816:	4293      	cmp	r3, r2
 8010818:	d009      	beq.n	801082e <HAL_SPI_TransmitReceive+0xea>
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	4a6f      	ldr	r2, [pc, #444]	@ (80109dc <HAL_SPI_TransmitReceive+0x298>)
 8010820:	4293      	cmp	r3, r2
 8010822:	d004      	beq.n	801082e <HAL_SPI_TransmitReceive+0xea>
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	4a6d      	ldr	r2, [pc, #436]	@ (80109e0 <HAL_SPI_TransmitReceive+0x29c>)
 801082a:	4293      	cmp	r3, r2
 801082c:	d102      	bne.n	8010834 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 801082e:	2310      	movs	r3, #16
 8010830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010832:	e001      	b.n	8010838 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8010834:	2308      	movs	r3, #8
 8010836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	685a      	ldr	r2, [r3, #4]
 801083e:	4b69      	ldr	r3, [pc, #420]	@ (80109e4 <HAL_SPI_TransmitReceive+0x2a0>)
 8010840:	4013      	ands	r3, r2
 8010842:	8879      	ldrh	r1, [r7, #2]
 8010844:	68fa      	ldr	r2, [r7, #12]
 8010846:	6812      	ldr	r2, [r2, #0]
 8010848:	430b      	orrs	r3, r1
 801084a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	f042 0201 	orr.w	r2, r2, #1
 801085a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010864:	d107      	bne.n	8010876 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	681a      	ldr	r2, [r3, #0]
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010874:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	68db      	ldr	r3, [r3, #12]
 801087a:	2b0f      	cmp	r3, #15
 801087c:	f240 80a2 	bls.w	80109c4 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8010880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010882:	089b      	lsrs	r3, r3, #2
 8010884:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010886:	e094      	b.n	80109b2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	695b      	ldr	r3, [r3, #20]
 801088e:	f003 0302 	and.w	r3, r3, #2
 8010892:	2b02      	cmp	r3, #2
 8010894:	d120      	bne.n	80108d8 <HAL_SPI_TransmitReceive+0x194>
 8010896:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010898:	2b00      	cmp	r3, #0
 801089a:	d01d      	beq.n	80108d8 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 801089c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801089e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80108a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d217      	bcs.n	80108d8 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	6812      	ldr	r2, [r2, #0]
 80108b2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80108b8:	1d1a      	adds	r2, r3, #4
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	3b01      	subs	r3, #1
 80108c8:	b29a      	uxth	r2, r3
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80108d6:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	695b      	ldr	r3, [r3, #20]
 80108de:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80108e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d065      	beq.n	80109b2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	695b      	ldr	r3, [r3, #20]
 80108ec:	f003 0301 	and.w	r3, r3, #1
 80108f0:	2b01      	cmp	r3, #1
 80108f2:	d118      	bne.n	8010926 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681a      	ldr	r2, [r3, #0]
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80108fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80108fe:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010904:	1d1a      	adds	r2, r3, #4
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010910:	b29b      	uxth	r3, r3
 8010912:	3b01      	subs	r3, #1
 8010914:	b29a      	uxth	r2, r3
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010922:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010924:	e045      	b.n	80109b2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010926:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010928:	8bfb      	ldrh	r3, [r7, #30]
 801092a:	429a      	cmp	r2, r3
 801092c:	d21d      	bcs.n	801096a <HAL_SPI_TransmitReceive+0x226>
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010934:	2b00      	cmp	r3, #0
 8010936:	d018      	beq.n	801096a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	681a      	ldr	r2, [r3, #0]
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010940:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010942:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010948:	1d1a      	adds	r2, r3, #4
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010954:	b29b      	uxth	r3, r3
 8010956:	3b01      	subs	r3, #1
 8010958:	b29a      	uxth	r2, r3
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010966:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010968:	e023      	b.n	80109b2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801096a:	f7f6 f9c5 	bl	8006cf8 <HAL_GetTick>
 801096e:	4602      	mov	r2, r0
 8010970:	69bb      	ldr	r3, [r7, #24]
 8010972:	1ad3      	subs	r3, r2, r3
 8010974:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010976:	429a      	cmp	r2, r3
 8010978:	d803      	bhi.n	8010982 <HAL_SPI_TransmitReceive+0x23e>
 801097a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801097c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010980:	d102      	bne.n	8010988 <HAL_SPI_TransmitReceive+0x244>
 8010982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010984:	2b00      	cmp	r3, #0
 8010986:	d114      	bne.n	80109b2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8010988:	68f8      	ldr	r0, [r7, #12]
 801098a:	f000 fa15 	bl	8010db8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010994:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	2201      	movs	r2, #1
 80109a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2200      	movs	r2, #0
 80109aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80109ae:	2303      	movs	r3, #3
 80109b0:	e1fd      	b.n	8010dae <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80109b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	f47f af67 	bne.w	8010888 <HAL_SPI_TransmitReceive+0x144>
 80109ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80109bc:	2b00      	cmp	r3, #0
 80109be:	f47f af63 	bne.w	8010888 <HAL_SPI_TransmitReceive+0x144>
 80109c2:	e1ce      	b.n	8010d62 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	68db      	ldr	r3, [r3, #12]
 80109c8:	2b07      	cmp	r3, #7
 80109ca:	f240 81c2 	bls.w	8010d52 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80109ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109d0:	085b      	lsrs	r3, r3, #1
 80109d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80109d4:	e0c9      	b.n	8010b6a <HAL_SPI_TransmitReceive+0x426>
 80109d6:	bf00      	nop
 80109d8:	40013000 	.word	0x40013000
 80109dc:	40003800 	.word	0x40003800
 80109e0:	40003c00 	.word	0x40003c00
 80109e4:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	695b      	ldr	r3, [r3, #20]
 80109ee:	f003 0302 	and.w	r3, r3, #2
 80109f2:	2b02      	cmp	r3, #2
 80109f4:	d11f      	bne.n	8010a36 <HAL_SPI_TransmitReceive+0x2f2>
 80109f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d01c      	beq.n	8010a36 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80109fc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80109fe:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8010a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a02:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d216      	bcs.n	8010a36 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a0c:	881a      	ldrh	r2, [r3, #0]
 8010a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a10:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a16:	1c9a      	adds	r2, r3, #2
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	3b01      	subs	r3, #1
 8010a26:	b29a      	uxth	r2, r3
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010a34:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	695b      	ldr	r3, [r3, #20]
 8010a3c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8010a3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	f000 8092 	beq.w	8010b6a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	695b      	ldr	r3, [r3, #20]
 8010a4c:	f003 0301 	and.w	r3, r3, #1
 8010a50:	2b01      	cmp	r3, #1
 8010a52:	d118      	bne.n	8010a86 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a58:	6a3a      	ldr	r2, [r7, #32]
 8010a5a:	8812      	ldrh	r2, [r2, #0]
 8010a5c:	b292      	uxth	r2, r2
 8010a5e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a64:	1c9a      	adds	r2, r3, #2
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	3b01      	subs	r3, #1
 8010a74:	b29a      	uxth	r2, r3
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010a82:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010a84:	e071      	b.n	8010b6a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010a86:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010a88:	8bfb      	ldrh	r3, [r7, #30]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d228      	bcs.n	8010ae0 <HAL_SPI_TransmitReceive+0x39c>
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d023      	beq.n	8010ae0 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a9c:	6a3a      	ldr	r2, [r7, #32]
 8010a9e:	8812      	ldrh	r2, [r2, #0]
 8010aa0:	b292      	uxth	r2, r2
 8010aa2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010aa8:	1c9a      	adds	r2, r3, #2
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ab2:	6a3a      	ldr	r2, [r7, #32]
 8010ab4:	8812      	ldrh	r2, [r2, #0]
 8010ab6:	b292      	uxth	r2, r2
 8010ab8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010abe:	1c9a      	adds	r2, r3, #2
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010aca:	b29b      	uxth	r3, r3
 8010acc:	3b02      	subs	r3, #2
 8010ace:	b29a      	uxth	r2, r3
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010adc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010ade:	e044      	b.n	8010b6a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8010ae0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010ae2:	2b01      	cmp	r3, #1
 8010ae4:	d11d      	bne.n	8010b22 <HAL_SPI_TransmitReceive+0x3de>
 8010ae6:	697b      	ldr	r3, [r7, #20]
 8010ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d018      	beq.n	8010b22 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010af4:	6a3a      	ldr	r2, [r7, #32]
 8010af6:	8812      	ldrh	r2, [r2, #0]
 8010af8:	b292      	uxth	r2, r2
 8010afa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b00:	1c9a      	adds	r2, r3, #2
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	3b01      	subs	r3, #1
 8010b10:	b29a      	uxth	r2, r3
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010b1e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010b20:	e023      	b.n	8010b6a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010b22:	f7f6 f8e9 	bl	8006cf8 <HAL_GetTick>
 8010b26:	4602      	mov	r2, r0
 8010b28:	69bb      	ldr	r3, [r7, #24]
 8010b2a:	1ad3      	subs	r3, r2, r3
 8010b2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d803      	bhi.n	8010b3a <HAL_SPI_TransmitReceive+0x3f6>
 8010b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b38:	d102      	bne.n	8010b40 <HAL_SPI_TransmitReceive+0x3fc>
 8010b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d114      	bne.n	8010b6a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8010b40:	68f8      	ldr	r0, [r7, #12]
 8010b42:	f000 f939 	bl	8010db8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010b4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2201      	movs	r2, #1
 8010b5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	2200      	movs	r2, #0
 8010b62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8010b66:	2303      	movs	r3, #3
 8010b68:	e121      	b.n	8010dae <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010b6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	f47f af3b 	bne.w	80109e8 <HAL_SPI_TransmitReceive+0x2a4>
 8010b72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	f47f af37 	bne.w	80109e8 <HAL_SPI_TransmitReceive+0x2a4>
 8010b7a:	e0f2      	b.n	8010d62 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	695b      	ldr	r3, [r3, #20]
 8010b82:	f003 0302 	and.w	r3, r3, #2
 8010b86:	2b02      	cmp	r3, #2
 8010b88:	d121      	bne.n	8010bce <HAL_SPI_TransmitReceive+0x48a>
 8010b8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d01e      	beq.n	8010bce <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8010b90:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010b92:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8010b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b96:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d218      	bcs.n	8010bce <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	3320      	adds	r3, #32
 8010ba6:	7812      	ldrb	r2, [r2, #0]
 8010ba8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010bae:	1c5a      	adds	r2, r3, #1
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010bba:	b29b      	uxth	r3, r3
 8010bbc:	3b01      	subs	r3, #1
 8010bbe:	b29a      	uxth	r2, r3
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010bcc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	695b      	ldr	r3, [r3, #20]
 8010bd4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8010bd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	f000 80ba 	beq.w	8010d52 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	695b      	ldr	r3, [r3, #20]
 8010be4:	f003 0301 	and.w	r3, r3, #1
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d11b      	bne.n	8010c24 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010bf8:	7812      	ldrb	r2, [r2, #0]
 8010bfa:	b2d2      	uxtb	r2, r2
 8010bfc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c02:	1c5a      	adds	r2, r3, #1
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	3b01      	subs	r3, #1
 8010c12:	b29a      	uxth	r2, r3
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c20:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010c22:	e096      	b.n	8010d52 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010c24:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010c26:	8bfb      	ldrh	r3, [r7, #30]
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d24a      	bcs.n	8010cc2 <HAL_SPI_TransmitReceive+0x57e>
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d045      	beq.n	8010cc2 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c42:	7812      	ldrb	r2, [r2, #0]
 8010c44:	b2d2      	uxtb	r2, r2
 8010c46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c4c:	1c5a      	adds	r2, r3, #1
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c5e:	7812      	ldrb	r2, [r2, #0]
 8010c60:	b2d2      	uxtb	r2, r2
 8010c62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c68:	1c5a      	adds	r2, r3, #1
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c7a:	7812      	ldrb	r2, [r2, #0]
 8010c7c:	b2d2      	uxtb	r2, r2
 8010c7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c84:	1c5a      	adds	r2, r3, #1
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c96:	7812      	ldrb	r2, [r2, #0]
 8010c98:	b2d2      	uxtb	r2, r2
 8010c9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ca0:	1c5a      	adds	r2, r3, #1
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	3b04      	subs	r3, #4
 8010cb0:	b29a      	uxth	r2, r3
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010cbe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010cc0:	e047      	b.n	8010d52 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8010cc2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010cc4:	2b03      	cmp	r3, #3
 8010cc6:	d820      	bhi.n	8010d0a <HAL_SPI_TransmitReceive+0x5c6>
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d01b      	beq.n	8010d0a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010cde:	7812      	ldrb	r2, [r2, #0]
 8010ce0:	b2d2      	uxtb	r2, r2
 8010ce2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ce8:	1c5a      	adds	r2, r3, #1
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	3b01      	subs	r3, #1
 8010cf8:	b29a      	uxth	r2, r3
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d06:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010d08:	e023      	b.n	8010d52 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010d0a:	f7f5 fff5 	bl	8006cf8 <HAL_GetTick>
 8010d0e:	4602      	mov	r2, r0
 8010d10:	69bb      	ldr	r3, [r7, #24]
 8010d12:	1ad3      	subs	r3, r2, r3
 8010d14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d803      	bhi.n	8010d22 <HAL_SPI_TransmitReceive+0x5de>
 8010d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d20:	d102      	bne.n	8010d28 <HAL_SPI_TransmitReceive+0x5e4>
 8010d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d114      	bne.n	8010d52 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8010d28:	68f8      	ldr	r0, [r7, #12]
 8010d2a:	f000 f845 	bl	8010db8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	2201      	movs	r2, #1
 8010d42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8010d4e:	2303      	movs	r3, #3
 8010d50:	e02d      	b.n	8010dae <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010d52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	f47f af11 	bne.w	8010b7c <HAL_SPI_TransmitReceive+0x438>
 8010d5a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f47f af0d 	bne.w	8010b7c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010d62:	69bb      	ldr	r3, [r7, #24]
 8010d64:	9300      	str	r3, [sp, #0]
 8010d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d68:	2200      	movs	r2, #0
 8010d6a:	2108      	movs	r1, #8
 8010d6c:	68f8      	ldr	r0, [r7, #12]
 8010d6e:	f000 f8c3 	bl	8010ef8 <SPI_WaitOnFlagUntilTimeout>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d007      	beq.n	8010d88 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d7e:	f043 0220 	orr.w	r2, r3, #32
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010d88:	68f8      	ldr	r0, [r7, #12]
 8010d8a:	f000 f815 	bl	8010db8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2201      	movs	r2, #1
 8010d92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d001      	beq.n	8010dac <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8010da8:	2301      	movs	r3, #1
 8010daa:	e000      	b.n	8010dae <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8010dac:	2300      	movs	r3, #0
  }
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	3730      	adds	r7, #48	@ 0x30
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop

08010db8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b085      	sub	sp, #20
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	695b      	ldr	r3, [r3, #20]
 8010dc6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	699a      	ldr	r2, [r3, #24]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f042 0208 	orr.w	r2, r2, #8
 8010dd6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	699a      	ldr	r2, [r3, #24]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f042 0210 	orr.w	r2, r2, #16
 8010de6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f022 0201 	bic.w	r2, r2, #1
 8010df6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	6919      	ldr	r1, [r3, #16]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681a      	ldr	r2, [r3, #0]
 8010e02:	4b3c      	ldr	r3, [pc, #240]	@ (8010ef4 <SPI_CloseTransfer+0x13c>)
 8010e04:	400b      	ands	r3, r1
 8010e06:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	689a      	ldr	r2, [r3, #8]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010e16:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010e1e:	b2db      	uxtb	r3, r3
 8010e20:	2b04      	cmp	r3, #4
 8010e22:	d014      	beq.n	8010e4e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	f003 0320 	and.w	r3, r3, #32
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d00f      	beq.n	8010e4e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	699a      	ldr	r2, [r3, #24]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	f042 0220 	orr.w	r2, r2, #32
 8010e4c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010e54:	b2db      	uxtb	r3, r3
 8010e56:	2b03      	cmp	r3, #3
 8010e58:	d014      	beq.n	8010e84 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d00f      	beq.n	8010e84 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e6a:	f043 0204 	orr.w	r2, r3, #4
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	699a      	ldr	r2, [r3, #24]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010e82:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d00f      	beq.n	8010eae <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e94:	f043 0201 	orr.w	r2, r3, #1
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	699a      	ldr	r2, [r3, #24]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010eac:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d00f      	beq.n	8010ed8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ebe:	f043 0208 	orr.w	r2, r3, #8
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	699a      	ldr	r2, [r3, #24]
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010ed6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2200      	movs	r2, #0
 8010edc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8010ee8:	bf00      	nop
 8010eea:	3714      	adds	r7, #20
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr
 8010ef4:	fffffc90 	.word	0xfffffc90

08010ef8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	603b      	str	r3, [r7, #0]
 8010f04:	4613      	mov	r3, r2
 8010f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010f08:	e010      	b.n	8010f2c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010f0a:	f7f5 fef5 	bl	8006cf8 <HAL_GetTick>
 8010f0e:	4602      	mov	r2, r0
 8010f10:	69bb      	ldr	r3, [r7, #24]
 8010f12:	1ad3      	subs	r3, r2, r3
 8010f14:	683a      	ldr	r2, [r7, #0]
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d803      	bhi.n	8010f22 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f20:	d102      	bne.n	8010f28 <SPI_WaitOnFlagUntilTimeout+0x30>
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d101      	bne.n	8010f2c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010f28:	2303      	movs	r3, #3
 8010f2a:	e00f      	b.n	8010f4c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	695a      	ldr	r2, [r3, #20]
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	4013      	ands	r3, r2
 8010f36:	68ba      	ldr	r2, [r7, #8]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	bf0c      	ite	eq
 8010f3c:	2301      	moveq	r3, #1
 8010f3e:	2300      	movne	r3, #0
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	461a      	mov	r2, r3
 8010f44:	79fb      	ldrb	r3, [r7, #7]
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d0df      	beq.n	8010f0a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010f4a:	2300      	movs	r3, #0
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3710      	adds	r7, #16
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010f54:	b480      	push	{r7}
 8010f56:	b085      	sub	sp, #20
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f60:	095b      	lsrs	r3, r3, #5
 8010f62:	3301      	adds	r3, #1
 8010f64:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	68db      	ldr	r3, [r3, #12]
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	3307      	adds	r3, #7
 8010f72:	08db      	lsrs	r3, r3, #3
 8010f74:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	68fa      	ldr	r2, [r7, #12]
 8010f7a:	fb02 f303 	mul.w	r3, r2, r3
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3714      	adds	r7, #20
 8010f82:	46bd      	mov	sp, r7
 8010f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f88:	4770      	bx	lr

08010f8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010f8a:	b580      	push	{r7, lr}
 8010f8c:	b082      	sub	sp, #8
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d101      	bne.n	8010f9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	e049      	b.n	8011030 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d106      	bne.n	8010fb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2200      	movs	r2, #0
 8010fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f7f1 fc21 	bl	80027f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2202      	movs	r2, #2
 8010fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	3304      	adds	r3, #4
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	4610      	mov	r0, r2
 8010fca:	f001 f9a3 	bl	8012314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2201      	movs	r2, #1
 8010fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	2201      	movs	r2, #1
 8010fe2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2201      	movs	r2, #1
 8010fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2201      	movs	r2, #1
 8010ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2201      	movs	r2, #1
 8010ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2201      	movs	r2, #1
 8011002:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2201      	movs	r2, #1
 801100a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	2201      	movs	r2, #1
 8011012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2201      	movs	r2, #1
 801101a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2201      	movs	r2, #1
 8011022:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2201      	movs	r2, #1
 801102a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801102e:	2300      	movs	r3, #0
}
 8011030:	4618      	mov	r0, r3
 8011032:	3708      	adds	r7, #8
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8011038:	b480      	push	{r7}
 801103a:	b085      	sub	sp, #20
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011046:	b2db      	uxtb	r3, r3
 8011048:	2b01      	cmp	r3, #1
 801104a:	d001      	beq.n	8011050 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801104c:	2301      	movs	r3, #1
 801104e:	e056      	b.n	80110fe <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2202      	movs	r2, #2
 8011054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	4a2b      	ldr	r2, [pc, #172]	@ (801110c <HAL_TIM_Base_Start+0xd4>)
 801105e:	4293      	cmp	r3, r2
 8011060:	d02c      	beq.n	80110bc <HAL_TIM_Base_Start+0x84>
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801106a:	d027      	beq.n	80110bc <HAL_TIM_Base_Start+0x84>
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4a27      	ldr	r2, [pc, #156]	@ (8011110 <HAL_TIM_Base_Start+0xd8>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d022      	beq.n	80110bc <HAL_TIM_Base_Start+0x84>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	4a26      	ldr	r2, [pc, #152]	@ (8011114 <HAL_TIM_Base_Start+0xdc>)
 801107c:	4293      	cmp	r3, r2
 801107e:	d01d      	beq.n	80110bc <HAL_TIM_Base_Start+0x84>
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	4a24      	ldr	r2, [pc, #144]	@ (8011118 <HAL_TIM_Base_Start+0xe0>)
 8011086:	4293      	cmp	r3, r2
 8011088:	d018      	beq.n	80110bc <HAL_TIM_Base_Start+0x84>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	4a23      	ldr	r2, [pc, #140]	@ (801111c <HAL_TIM_Base_Start+0xe4>)
 8011090:	4293      	cmp	r3, r2
 8011092:	d013      	beq.n	80110bc <HAL_TIM_Base_Start+0x84>
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	4a21      	ldr	r2, [pc, #132]	@ (8011120 <HAL_TIM_Base_Start+0xe8>)
 801109a:	4293      	cmp	r3, r2
 801109c:	d00e      	beq.n	80110bc <HAL_TIM_Base_Start+0x84>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	4a20      	ldr	r2, [pc, #128]	@ (8011124 <HAL_TIM_Base_Start+0xec>)
 80110a4:	4293      	cmp	r3, r2
 80110a6:	d009      	beq.n	80110bc <HAL_TIM_Base_Start+0x84>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	4a1e      	ldr	r2, [pc, #120]	@ (8011128 <HAL_TIM_Base_Start+0xf0>)
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d004      	beq.n	80110bc <HAL_TIM_Base_Start+0x84>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	4a1d      	ldr	r2, [pc, #116]	@ (801112c <HAL_TIM_Base_Start+0xf4>)
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d115      	bne.n	80110e8 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	689a      	ldr	r2, [r3, #8]
 80110c2:	4b1b      	ldr	r3, [pc, #108]	@ (8011130 <HAL_TIM_Base_Start+0xf8>)
 80110c4:	4013      	ands	r3, r2
 80110c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2b06      	cmp	r3, #6
 80110cc:	d015      	beq.n	80110fa <HAL_TIM_Base_Start+0xc2>
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80110d4:	d011      	beq.n	80110fa <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	681a      	ldr	r2, [r3, #0]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	f042 0201 	orr.w	r2, r2, #1
 80110e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80110e6:	e008      	b.n	80110fa <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	681a      	ldr	r2, [r3, #0]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	f042 0201 	orr.w	r2, r2, #1
 80110f6:	601a      	str	r2, [r3, #0]
 80110f8:	e000      	b.n	80110fc <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80110fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80110fc:	2300      	movs	r3, #0
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3714      	adds	r7, #20
 8011102:	46bd      	mov	sp, r7
 8011104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011108:	4770      	bx	lr
 801110a:	bf00      	nop
 801110c:	40010000 	.word	0x40010000
 8011110:	40000400 	.word	0x40000400
 8011114:	40000800 	.word	0x40000800
 8011118:	40000c00 	.word	0x40000c00
 801111c:	40010400 	.word	0x40010400
 8011120:	40001800 	.word	0x40001800
 8011124:	40014000 	.word	0x40014000
 8011128:	4000e000 	.word	0x4000e000
 801112c:	4000e400 	.word	0x4000e400
 8011130:	00010007 	.word	0x00010007

08011134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011134:	b480      	push	{r7}
 8011136:	b085      	sub	sp, #20
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011142:	b2db      	uxtb	r3, r3
 8011144:	2b01      	cmp	r3, #1
 8011146:	d001      	beq.n	801114c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011148:	2301      	movs	r3, #1
 801114a:	e05e      	b.n	801120a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2202      	movs	r2, #2
 8011150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	68da      	ldr	r2, [r3, #12]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	f042 0201 	orr.w	r2, r2, #1
 8011162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	4a2b      	ldr	r2, [pc, #172]	@ (8011218 <HAL_TIM_Base_Start_IT+0xe4>)
 801116a:	4293      	cmp	r3, r2
 801116c:	d02c      	beq.n	80111c8 <HAL_TIM_Base_Start_IT+0x94>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011176:	d027      	beq.n	80111c8 <HAL_TIM_Base_Start_IT+0x94>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4a27      	ldr	r2, [pc, #156]	@ (801121c <HAL_TIM_Base_Start_IT+0xe8>)
 801117e:	4293      	cmp	r3, r2
 8011180:	d022      	beq.n	80111c8 <HAL_TIM_Base_Start_IT+0x94>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	4a26      	ldr	r2, [pc, #152]	@ (8011220 <HAL_TIM_Base_Start_IT+0xec>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d01d      	beq.n	80111c8 <HAL_TIM_Base_Start_IT+0x94>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	4a24      	ldr	r2, [pc, #144]	@ (8011224 <HAL_TIM_Base_Start_IT+0xf0>)
 8011192:	4293      	cmp	r3, r2
 8011194:	d018      	beq.n	80111c8 <HAL_TIM_Base_Start_IT+0x94>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4a23      	ldr	r2, [pc, #140]	@ (8011228 <HAL_TIM_Base_Start_IT+0xf4>)
 801119c:	4293      	cmp	r3, r2
 801119e:	d013      	beq.n	80111c8 <HAL_TIM_Base_Start_IT+0x94>
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	4a21      	ldr	r2, [pc, #132]	@ (801122c <HAL_TIM_Base_Start_IT+0xf8>)
 80111a6:	4293      	cmp	r3, r2
 80111a8:	d00e      	beq.n	80111c8 <HAL_TIM_Base_Start_IT+0x94>
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	4a20      	ldr	r2, [pc, #128]	@ (8011230 <HAL_TIM_Base_Start_IT+0xfc>)
 80111b0:	4293      	cmp	r3, r2
 80111b2:	d009      	beq.n	80111c8 <HAL_TIM_Base_Start_IT+0x94>
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	4a1e      	ldr	r2, [pc, #120]	@ (8011234 <HAL_TIM_Base_Start_IT+0x100>)
 80111ba:	4293      	cmp	r3, r2
 80111bc:	d004      	beq.n	80111c8 <HAL_TIM_Base_Start_IT+0x94>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	4a1d      	ldr	r2, [pc, #116]	@ (8011238 <HAL_TIM_Base_Start_IT+0x104>)
 80111c4:	4293      	cmp	r3, r2
 80111c6:	d115      	bne.n	80111f4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	689a      	ldr	r2, [r3, #8]
 80111ce:	4b1b      	ldr	r3, [pc, #108]	@ (801123c <HAL_TIM_Base_Start_IT+0x108>)
 80111d0:	4013      	ands	r3, r2
 80111d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2b06      	cmp	r3, #6
 80111d8:	d015      	beq.n	8011206 <HAL_TIM_Base_Start_IT+0xd2>
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80111e0:	d011      	beq.n	8011206 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	681a      	ldr	r2, [r3, #0]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	f042 0201 	orr.w	r2, r2, #1
 80111f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111f2:	e008      	b.n	8011206 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	681a      	ldr	r2, [r3, #0]
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	f042 0201 	orr.w	r2, r2, #1
 8011202:	601a      	str	r2, [r3, #0]
 8011204:	e000      	b.n	8011208 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011206:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011208:	2300      	movs	r3, #0
}
 801120a:	4618      	mov	r0, r3
 801120c:	3714      	adds	r7, #20
 801120e:	46bd      	mov	sp, r7
 8011210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011214:	4770      	bx	lr
 8011216:	bf00      	nop
 8011218:	40010000 	.word	0x40010000
 801121c:	40000400 	.word	0x40000400
 8011220:	40000800 	.word	0x40000800
 8011224:	40000c00 	.word	0x40000c00
 8011228:	40010400 	.word	0x40010400
 801122c:	40001800 	.word	0x40001800
 8011230:	40014000 	.word	0x40014000
 8011234:	4000e000 	.word	0x4000e000
 8011238:	4000e400 	.word	0x4000e400
 801123c:	00010007 	.word	0x00010007

08011240 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d101      	bne.n	8011252 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801124e:	2301      	movs	r3, #1
 8011250:	e049      	b.n	80112e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011258:	b2db      	uxtb	r3, r3
 801125a:	2b00      	cmp	r3, #0
 801125c:	d106      	bne.n	801126c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2200      	movs	r2, #0
 8011262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f000 f841 	bl	80112ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2202      	movs	r2, #2
 8011270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	3304      	adds	r3, #4
 801127c:	4619      	mov	r1, r3
 801127e:	4610      	mov	r0, r2
 8011280:	f001 f848 	bl	8012314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2201      	movs	r2, #1
 8011288:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2201      	movs	r2, #1
 8011290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2201      	movs	r2, #1
 8011298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2201      	movs	r2, #1
 80112a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2201      	movs	r2, #1
 80112a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2201      	movs	r2, #1
 80112b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2201      	movs	r2, #1
 80112b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2201      	movs	r2, #1
 80112c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2201      	movs	r2, #1
 80112c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2201      	movs	r2, #1
 80112d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2201      	movs	r2, #1
 80112d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2201      	movs	r2, #1
 80112e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80112e4:	2300      	movs	r3, #0
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3708      	adds	r7, #8
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}

080112ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80112ee:	b480      	push	{r7}
 80112f0:	b083      	sub	sp, #12
 80112f2:	af00      	add	r7, sp, #0
 80112f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80112f6:	bf00      	nop
 80112f8:	370c      	adds	r7, #12
 80112fa:	46bd      	mov	sp, r7
 80112fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011300:	4770      	bx	lr
	...

08011304 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d109      	bne.n	8011328 <HAL_TIM_PWM_Start+0x24>
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801131a:	b2db      	uxtb	r3, r3
 801131c:	2b01      	cmp	r3, #1
 801131e:	bf14      	ite	ne
 8011320:	2301      	movne	r3, #1
 8011322:	2300      	moveq	r3, #0
 8011324:	b2db      	uxtb	r3, r3
 8011326:	e03c      	b.n	80113a2 <HAL_TIM_PWM_Start+0x9e>
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	2b04      	cmp	r3, #4
 801132c:	d109      	bne.n	8011342 <HAL_TIM_PWM_Start+0x3e>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011334:	b2db      	uxtb	r3, r3
 8011336:	2b01      	cmp	r3, #1
 8011338:	bf14      	ite	ne
 801133a:	2301      	movne	r3, #1
 801133c:	2300      	moveq	r3, #0
 801133e:	b2db      	uxtb	r3, r3
 8011340:	e02f      	b.n	80113a2 <HAL_TIM_PWM_Start+0x9e>
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	2b08      	cmp	r3, #8
 8011346:	d109      	bne.n	801135c <HAL_TIM_PWM_Start+0x58>
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801134e:	b2db      	uxtb	r3, r3
 8011350:	2b01      	cmp	r3, #1
 8011352:	bf14      	ite	ne
 8011354:	2301      	movne	r3, #1
 8011356:	2300      	moveq	r3, #0
 8011358:	b2db      	uxtb	r3, r3
 801135a:	e022      	b.n	80113a2 <HAL_TIM_PWM_Start+0x9e>
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	2b0c      	cmp	r3, #12
 8011360:	d109      	bne.n	8011376 <HAL_TIM_PWM_Start+0x72>
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011368:	b2db      	uxtb	r3, r3
 801136a:	2b01      	cmp	r3, #1
 801136c:	bf14      	ite	ne
 801136e:	2301      	movne	r3, #1
 8011370:	2300      	moveq	r3, #0
 8011372:	b2db      	uxtb	r3, r3
 8011374:	e015      	b.n	80113a2 <HAL_TIM_PWM_Start+0x9e>
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	2b10      	cmp	r3, #16
 801137a:	d109      	bne.n	8011390 <HAL_TIM_PWM_Start+0x8c>
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011382:	b2db      	uxtb	r3, r3
 8011384:	2b01      	cmp	r3, #1
 8011386:	bf14      	ite	ne
 8011388:	2301      	movne	r3, #1
 801138a:	2300      	moveq	r3, #0
 801138c:	b2db      	uxtb	r3, r3
 801138e:	e008      	b.n	80113a2 <HAL_TIM_PWM_Start+0x9e>
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011396:	b2db      	uxtb	r3, r3
 8011398:	2b01      	cmp	r3, #1
 801139a:	bf14      	ite	ne
 801139c:	2301      	movne	r3, #1
 801139e:	2300      	moveq	r3, #0
 80113a0:	b2db      	uxtb	r3, r3
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d001      	beq.n	80113aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80113a6:	2301      	movs	r3, #1
 80113a8:	e0ab      	b.n	8011502 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d104      	bne.n	80113ba <HAL_TIM_PWM_Start+0xb6>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2202      	movs	r2, #2
 80113b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80113b8:	e023      	b.n	8011402 <HAL_TIM_PWM_Start+0xfe>
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	2b04      	cmp	r3, #4
 80113be:	d104      	bne.n	80113ca <HAL_TIM_PWM_Start+0xc6>
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2202      	movs	r2, #2
 80113c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80113c8:	e01b      	b.n	8011402 <HAL_TIM_PWM_Start+0xfe>
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	2b08      	cmp	r3, #8
 80113ce:	d104      	bne.n	80113da <HAL_TIM_PWM_Start+0xd6>
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2202      	movs	r2, #2
 80113d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80113d8:	e013      	b.n	8011402 <HAL_TIM_PWM_Start+0xfe>
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	2b0c      	cmp	r3, #12
 80113de:	d104      	bne.n	80113ea <HAL_TIM_PWM_Start+0xe6>
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2202      	movs	r2, #2
 80113e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80113e8:	e00b      	b.n	8011402 <HAL_TIM_PWM_Start+0xfe>
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	2b10      	cmp	r3, #16
 80113ee:	d104      	bne.n	80113fa <HAL_TIM_PWM_Start+0xf6>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2202      	movs	r2, #2
 80113f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80113f8:	e003      	b.n	8011402 <HAL_TIM_PWM_Start+0xfe>
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2202      	movs	r2, #2
 80113fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	2201      	movs	r2, #1
 8011408:	6839      	ldr	r1, [r7, #0]
 801140a:	4618      	mov	r0, r3
 801140c:	f001 fba8 	bl	8012b60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	4a3d      	ldr	r2, [pc, #244]	@ (801150c <HAL_TIM_PWM_Start+0x208>)
 8011416:	4293      	cmp	r3, r2
 8011418:	d013      	beq.n	8011442 <HAL_TIM_PWM_Start+0x13e>
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	4a3c      	ldr	r2, [pc, #240]	@ (8011510 <HAL_TIM_PWM_Start+0x20c>)
 8011420:	4293      	cmp	r3, r2
 8011422:	d00e      	beq.n	8011442 <HAL_TIM_PWM_Start+0x13e>
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	4a3a      	ldr	r2, [pc, #232]	@ (8011514 <HAL_TIM_PWM_Start+0x210>)
 801142a:	4293      	cmp	r3, r2
 801142c:	d009      	beq.n	8011442 <HAL_TIM_PWM_Start+0x13e>
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	4a39      	ldr	r2, [pc, #228]	@ (8011518 <HAL_TIM_PWM_Start+0x214>)
 8011434:	4293      	cmp	r3, r2
 8011436:	d004      	beq.n	8011442 <HAL_TIM_PWM_Start+0x13e>
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	4a37      	ldr	r2, [pc, #220]	@ (801151c <HAL_TIM_PWM_Start+0x218>)
 801143e:	4293      	cmp	r3, r2
 8011440:	d101      	bne.n	8011446 <HAL_TIM_PWM_Start+0x142>
 8011442:	2301      	movs	r3, #1
 8011444:	e000      	b.n	8011448 <HAL_TIM_PWM_Start+0x144>
 8011446:	2300      	movs	r3, #0
 8011448:	2b00      	cmp	r3, #0
 801144a:	d007      	beq.n	801145c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801145a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	4a2a      	ldr	r2, [pc, #168]	@ (801150c <HAL_TIM_PWM_Start+0x208>)
 8011462:	4293      	cmp	r3, r2
 8011464:	d02c      	beq.n	80114c0 <HAL_TIM_PWM_Start+0x1bc>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801146e:	d027      	beq.n	80114c0 <HAL_TIM_PWM_Start+0x1bc>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	4a2a      	ldr	r2, [pc, #168]	@ (8011520 <HAL_TIM_PWM_Start+0x21c>)
 8011476:	4293      	cmp	r3, r2
 8011478:	d022      	beq.n	80114c0 <HAL_TIM_PWM_Start+0x1bc>
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	4a29      	ldr	r2, [pc, #164]	@ (8011524 <HAL_TIM_PWM_Start+0x220>)
 8011480:	4293      	cmp	r3, r2
 8011482:	d01d      	beq.n	80114c0 <HAL_TIM_PWM_Start+0x1bc>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	4a27      	ldr	r2, [pc, #156]	@ (8011528 <HAL_TIM_PWM_Start+0x224>)
 801148a:	4293      	cmp	r3, r2
 801148c:	d018      	beq.n	80114c0 <HAL_TIM_PWM_Start+0x1bc>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	4a1f      	ldr	r2, [pc, #124]	@ (8011510 <HAL_TIM_PWM_Start+0x20c>)
 8011494:	4293      	cmp	r3, r2
 8011496:	d013      	beq.n	80114c0 <HAL_TIM_PWM_Start+0x1bc>
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	4a23      	ldr	r2, [pc, #140]	@ (801152c <HAL_TIM_PWM_Start+0x228>)
 801149e:	4293      	cmp	r3, r2
 80114a0:	d00e      	beq.n	80114c0 <HAL_TIM_PWM_Start+0x1bc>
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	4a1b      	ldr	r2, [pc, #108]	@ (8011514 <HAL_TIM_PWM_Start+0x210>)
 80114a8:	4293      	cmp	r3, r2
 80114aa:	d009      	beq.n	80114c0 <HAL_TIM_PWM_Start+0x1bc>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	4a1f      	ldr	r2, [pc, #124]	@ (8011530 <HAL_TIM_PWM_Start+0x22c>)
 80114b2:	4293      	cmp	r3, r2
 80114b4:	d004      	beq.n	80114c0 <HAL_TIM_PWM_Start+0x1bc>
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	4a1e      	ldr	r2, [pc, #120]	@ (8011534 <HAL_TIM_PWM_Start+0x230>)
 80114bc:	4293      	cmp	r3, r2
 80114be:	d115      	bne.n	80114ec <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	689a      	ldr	r2, [r3, #8]
 80114c6:	4b1c      	ldr	r3, [pc, #112]	@ (8011538 <HAL_TIM_PWM_Start+0x234>)
 80114c8:	4013      	ands	r3, r2
 80114ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	2b06      	cmp	r3, #6
 80114d0:	d015      	beq.n	80114fe <HAL_TIM_PWM_Start+0x1fa>
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80114d8:	d011      	beq.n	80114fe <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	681a      	ldr	r2, [r3, #0]
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	f042 0201 	orr.w	r2, r2, #1
 80114e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80114ea:	e008      	b.n	80114fe <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	681a      	ldr	r2, [r3, #0]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f042 0201 	orr.w	r2, r2, #1
 80114fa:	601a      	str	r2, [r3, #0]
 80114fc:	e000      	b.n	8011500 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80114fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011500:	2300      	movs	r3, #0
}
 8011502:	4618      	mov	r0, r3
 8011504:	3710      	adds	r7, #16
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop
 801150c:	40010000 	.word	0x40010000
 8011510:	40010400 	.word	0x40010400
 8011514:	40014000 	.word	0x40014000
 8011518:	40014400 	.word	0x40014400
 801151c:	40014800 	.word	0x40014800
 8011520:	40000400 	.word	0x40000400
 8011524:	40000800 	.word	0x40000800
 8011528:	40000c00 	.word	0x40000c00
 801152c:	40001800 	.word	0x40001800
 8011530:	4000e000 	.word	0x4000e000
 8011534:	4000e400 	.word	0x4000e400
 8011538:	00010007 	.word	0x00010007

0801153c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b082      	sub	sp, #8
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2200      	movs	r2, #0
 801154c:	6839      	ldr	r1, [r7, #0]
 801154e:	4618      	mov	r0, r3
 8011550:	f001 fb06 	bl	8012b60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	4a3e      	ldr	r2, [pc, #248]	@ (8011654 <HAL_TIM_PWM_Stop+0x118>)
 801155a:	4293      	cmp	r3, r2
 801155c:	d013      	beq.n	8011586 <HAL_TIM_PWM_Stop+0x4a>
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	4a3d      	ldr	r2, [pc, #244]	@ (8011658 <HAL_TIM_PWM_Stop+0x11c>)
 8011564:	4293      	cmp	r3, r2
 8011566:	d00e      	beq.n	8011586 <HAL_TIM_PWM_Stop+0x4a>
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	4a3b      	ldr	r2, [pc, #236]	@ (801165c <HAL_TIM_PWM_Stop+0x120>)
 801156e:	4293      	cmp	r3, r2
 8011570:	d009      	beq.n	8011586 <HAL_TIM_PWM_Stop+0x4a>
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	4a3a      	ldr	r2, [pc, #232]	@ (8011660 <HAL_TIM_PWM_Stop+0x124>)
 8011578:	4293      	cmp	r3, r2
 801157a:	d004      	beq.n	8011586 <HAL_TIM_PWM_Stop+0x4a>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	4a38      	ldr	r2, [pc, #224]	@ (8011664 <HAL_TIM_PWM_Stop+0x128>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d101      	bne.n	801158a <HAL_TIM_PWM_Stop+0x4e>
 8011586:	2301      	movs	r3, #1
 8011588:	e000      	b.n	801158c <HAL_TIM_PWM_Stop+0x50>
 801158a:	2300      	movs	r3, #0
 801158c:	2b00      	cmp	r3, #0
 801158e:	d017      	beq.n	80115c0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	6a1a      	ldr	r2, [r3, #32]
 8011596:	f241 1311 	movw	r3, #4369	@ 0x1111
 801159a:	4013      	ands	r3, r2
 801159c:	2b00      	cmp	r3, #0
 801159e:	d10f      	bne.n	80115c0 <HAL_TIM_PWM_Stop+0x84>
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	6a1a      	ldr	r2, [r3, #32]
 80115a6:	f240 4344 	movw	r3, #1092	@ 0x444
 80115aa:	4013      	ands	r3, r2
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d107      	bne.n	80115c0 <HAL_TIM_PWM_Stop+0x84>
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80115be:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	6a1a      	ldr	r2, [r3, #32]
 80115c6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80115ca:	4013      	ands	r3, r2
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d10f      	bne.n	80115f0 <HAL_TIM_PWM_Stop+0xb4>
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	6a1a      	ldr	r2, [r3, #32]
 80115d6:	f240 4344 	movw	r3, #1092	@ 0x444
 80115da:	4013      	ands	r3, r2
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d107      	bne.n	80115f0 <HAL_TIM_PWM_Stop+0xb4>
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f022 0201 	bic.w	r2, r2, #1
 80115ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d104      	bne.n	8011600 <HAL_TIM_PWM_Stop+0xc4>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2201      	movs	r2, #1
 80115fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80115fe:	e023      	b.n	8011648 <HAL_TIM_PWM_Stop+0x10c>
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	2b04      	cmp	r3, #4
 8011604:	d104      	bne.n	8011610 <HAL_TIM_PWM_Stop+0xd4>
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2201      	movs	r2, #1
 801160a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801160e:	e01b      	b.n	8011648 <HAL_TIM_PWM_Stop+0x10c>
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	2b08      	cmp	r3, #8
 8011614:	d104      	bne.n	8011620 <HAL_TIM_PWM_Stop+0xe4>
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2201      	movs	r2, #1
 801161a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801161e:	e013      	b.n	8011648 <HAL_TIM_PWM_Stop+0x10c>
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	2b0c      	cmp	r3, #12
 8011624:	d104      	bne.n	8011630 <HAL_TIM_PWM_Stop+0xf4>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	2201      	movs	r2, #1
 801162a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801162e:	e00b      	b.n	8011648 <HAL_TIM_PWM_Stop+0x10c>
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	2b10      	cmp	r3, #16
 8011634:	d104      	bne.n	8011640 <HAL_TIM_PWM_Stop+0x104>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2201      	movs	r2, #1
 801163a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801163e:	e003      	b.n	8011648 <HAL_TIM_PWM_Stop+0x10c>
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2201      	movs	r2, #1
 8011644:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8011648:	2300      	movs	r3, #0
}
 801164a:	4618      	mov	r0, r3
 801164c:	3708      	adds	r7, #8
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop
 8011654:	40010000 	.word	0x40010000
 8011658:	40010400 	.word	0x40010400
 801165c:	40014000 	.word	0x40014000
 8011660:	40014400 	.word	0x40014400
 8011664:	40014800 	.word	0x40014800

08011668 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b086      	sub	sp, #24
 801166c:	af00      	add	r7, sp, #0
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	60b9      	str	r1, [r7, #8]
 8011672:	607a      	str	r2, [r7, #4]
 8011674:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8011676:	2300      	movs	r3, #0
 8011678:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d109      	bne.n	8011694 <HAL_TIM_PWM_Start_DMA+0x2c>
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011686:	b2db      	uxtb	r3, r3
 8011688:	2b02      	cmp	r3, #2
 801168a:	bf0c      	ite	eq
 801168c:	2301      	moveq	r3, #1
 801168e:	2300      	movne	r3, #0
 8011690:	b2db      	uxtb	r3, r3
 8011692:	e03c      	b.n	801170e <HAL_TIM_PWM_Start_DMA+0xa6>
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	2b04      	cmp	r3, #4
 8011698:	d109      	bne.n	80116ae <HAL_TIM_PWM_Start_DMA+0x46>
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80116a0:	b2db      	uxtb	r3, r3
 80116a2:	2b02      	cmp	r3, #2
 80116a4:	bf0c      	ite	eq
 80116a6:	2301      	moveq	r3, #1
 80116a8:	2300      	movne	r3, #0
 80116aa:	b2db      	uxtb	r3, r3
 80116ac:	e02f      	b.n	801170e <HAL_TIM_PWM_Start_DMA+0xa6>
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	2b08      	cmp	r3, #8
 80116b2:	d109      	bne.n	80116c8 <HAL_TIM_PWM_Start_DMA+0x60>
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80116ba:	b2db      	uxtb	r3, r3
 80116bc:	2b02      	cmp	r3, #2
 80116be:	bf0c      	ite	eq
 80116c0:	2301      	moveq	r3, #1
 80116c2:	2300      	movne	r3, #0
 80116c4:	b2db      	uxtb	r3, r3
 80116c6:	e022      	b.n	801170e <HAL_TIM_PWM_Start_DMA+0xa6>
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	2b0c      	cmp	r3, #12
 80116cc:	d109      	bne.n	80116e2 <HAL_TIM_PWM_Start_DMA+0x7a>
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	2b02      	cmp	r3, #2
 80116d8:	bf0c      	ite	eq
 80116da:	2301      	moveq	r3, #1
 80116dc:	2300      	movne	r3, #0
 80116de:	b2db      	uxtb	r3, r3
 80116e0:	e015      	b.n	801170e <HAL_TIM_PWM_Start_DMA+0xa6>
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	2b10      	cmp	r3, #16
 80116e6:	d109      	bne.n	80116fc <HAL_TIM_PWM_Start_DMA+0x94>
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	2b02      	cmp	r3, #2
 80116f2:	bf0c      	ite	eq
 80116f4:	2301      	moveq	r3, #1
 80116f6:	2300      	movne	r3, #0
 80116f8:	b2db      	uxtb	r3, r3
 80116fa:	e008      	b.n	801170e <HAL_TIM_PWM_Start_DMA+0xa6>
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011702:	b2db      	uxtb	r3, r3
 8011704:	2b02      	cmp	r3, #2
 8011706:	bf0c      	ite	eq
 8011708:	2301      	moveq	r3, #1
 801170a:	2300      	movne	r3, #0
 801170c:	b2db      	uxtb	r3, r3
 801170e:	2b00      	cmp	r3, #0
 8011710:	d001      	beq.n	8011716 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8011712:	2302      	movs	r3, #2
 8011714:	e1ba      	b.n	8011a8c <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d109      	bne.n	8011730 <HAL_TIM_PWM_Start_DMA+0xc8>
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011722:	b2db      	uxtb	r3, r3
 8011724:	2b01      	cmp	r3, #1
 8011726:	bf0c      	ite	eq
 8011728:	2301      	moveq	r3, #1
 801172a:	2300      	movne	r3, #0
 801172c:	b2db      	uxtb	r3, r3
 801172e:	e03c      	b.n	80117aa <HAL_TIM_PWM_Start_DMA+0x142>
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	2b04      	cmp	r3, #4
 8011734:	d109      	bne.n	801174a <HAL_TIM_PWM_Start_DMA+0xe2>
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801173c:	b2db      	uxtb	r3, r3
 801173e:	2b01      	cmp	r3, #1
 8011740:	bf0c      	ite	eq
 8011742:	2301      	moveq	r3, #1
 8011744:	2300      	movne	r3, #0
 8011746:	b2db      	uxtb	r3, r3
 8011748:	e02f      	b.n	80117aa <HAL_TIM_PWM_Start_DMA+0x142>
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	2b08      	cmp	r3, #8
 801174e:	d109      	bne.n	8011764 <HAL_TIM_PWM_Start_DMA+0xfc>
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011756:	b2db      	uxtb	r3, r3
 8011758:	2b01      	cmp	r3, #1
 801175a:	bf0c      	ite	eq
 801175c:	2301      	moveq	r3, #1
 801175e:	2300      	movne	r3, #0
 8011760:	b2db      	uxtb	r3, r3
 8011762:	e022      	b.n	80117aa <HAL_TIM_PWM_Start_DMA+0x142>
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	2b0c      	cmp	r3, #12
 8011768:	d109      	bne.n	801177e <HAL_TIM_PWM_Start_DMA+0x116>
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011770:	b2db      	uxtb	r3, r3
 8011772:	2b01      	cmp	r3, #1
 8011774:	bf0c      	ite	eq
 8011776:	2301      	moveq	r3, #1
 8011778:	2300      	movne	r3, #0
 801177a:	b2db      	uxtb	r3, r3
 801177c:	e015      	b.n	80117aa <HAL_TIM_PWM_Start_DMA+0x142>
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	2b10      	cmp	r3, #16
 8011782:	d109      	bne.n	8011798 <HAL_TIM_PWM_Start_DMA+0x130>
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801178a:	b2db      	uxtb	r3, r3
 801178c:	2b01      	cmp	r3, #1
 801178e:	bf0c      	ite	eq
 8011790:	2301      	moveq	r3, #1
 8011792:	2300      	movne	r3, #0
 8011794:	b2db      	uxtb	r3, r3
 8011796:	e008      	b.n	80117aa <HAL_TIM_PWM_Start_DMA+0x142>
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801179e:	b2db      	uxtb	r3, r3
 80117a0:	2b01      	cmp	r3, #1
 80117a2:	bf0c      	ite	eq
 80117a4:	2301      	moveq	r3, #1
 80117a6:	2300      	movne	r3, #0
 80117a8:	b2db      	uxtb	r3, r3
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d034      	beq.n	8011818 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d002      	beq.n	80117ba <HAL_TIM_PWM_Start_DMA+0x152>
 80117b4:	887b      	ldrh	r3, [r7, #2]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d101      	bne.n	80117be <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80117ba:	2301      	movs	r3, #1
 80117bc:	e166      	b.n	8011a8c <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d104      	bne.n	80117ce <HAL_TIM_PWM_Start_DMA+0x166>
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	2202      	movs	r2, #2
 80117c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80117cc:	e026      	b.n	801181c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	2b04      	cmp	r3, #4
 80117d2:	d104      	bne.n	80117de <HAL_TIM_PWM_Start_DMA+0x176>
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2202      	movs	r2, #2
 80117d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80117dc:	e01e      	b.n	801181c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	2b08      	cmp	r3, #8
 80117e2:	d104      	bne.n	80117ee <HAL_TIM_PWM_Start_DMA+0x186>
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	2202      	movs	r2, #2
 80117e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80117ec:	e016      	b.n	801181c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	2b0c      	cmp	r3, #12
 80117f2:	d104      	bne.n	80117fe <HAL_TIM_PWM_Start_DMA+0x196>
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2202      	movs	r2, #2
 80117f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80117fc:	e00e      	b.n	801181c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	2b10      	cmp	r3, #16
 8011802:	d104      	bne.n	801180e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	2202      	movs	r2, #2
 8011808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801180c:	e006      	b.n	801181c <HAL_TIM_PWM_Start_DMA+0x1b4>
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	2202      	movs	r2, #2
 8011812:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011816:	e001      	b.n	801181c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8011818:	2301      	movs	r3, #1
 801181a:	e137      	b.n	8011a8c <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	2b0c      	cmp	r3, #12
 8011820:	f200 80ae 	bhi.w	8011980 <HAL_TIM_PWM_Start_DMA+0x318>
 8011824:	a201      	add	r2, pc, #4	@ (adr r2, 801182c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8011826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801182a:	bf00      	nop
 801182c:	08011861 	.word	0x08011861
 8011830:	08011981 	.word	0x08011981
 8011834:	08011981 	.word	0x08011981
 8011838:	08011981 	.word	0x08011981
 801183c:	080118a9 	.word	0x080118a9
 8011840:	08011981 	.word	0x08011981
 8011844:	08011981 	.word	0x08011981
 8011848:	08011981 	.word	0x08011981
 801184c:	080118f1 	.word	0x080118f1
 8011850:	08011981 	.word	0x08011981
 8011854:	08011981 	.word	0x08011981
 8011858:	08011981 	.word	0x08011981
 801185c:	08011939 	.word	0x08011939
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011864:	4a8b      	ldr	r2, [pc, #556]	@ (8011a94 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8011866:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801186c:	4a8a      	ldr	r2, [pc, #552]	@ (8011a98 <HAL_TIM_PWM_Start_DMA+0x430>)
 801186e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011874:	4a89      	ldr	r2, [pc, #548]	@ (8011a9c <HAL_TIM_PWM_Start_DMA+0x434>)
 8011876:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801187c:	6879      	ldr	r1, [r7, #4]
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	3334      	adds	r3, #52	@ 0x34
 8011884:	461a      	mov	r2, r3
 8011886:	887b      	ldrh	r3, [r7, #2]
 8011888:	f7f7 fd72 	bl	8009370 <HAL_DMA_Start_IT>
 801188c:	4603      	mov	r3, r0
 801188e:	2b00      	cmp	r3, #0
 8011890:	d001      	beq.n	8011896 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8011892:	2301      	movs	r3, #1
 8011894:	e0fa      	b.n	8011a8c <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	68da      	ldr	r2, [r3, #12]
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80118a4:	60da      	str	r2, [r3, #12]
      break;
 80118a6:	e06e      	b.n	8011986 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118ac:	4a79      	ldr	r2, [pc, #484]	@ (8011a94 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80118ae:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118b4:	4a78      	ldr	r2, [pc, #480]	@ (8011a98 <HAL_TIM_PWM_Start_DMA+0x430>)
 80118b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118bc:	4a77      	ldr	r2, [pc, #476]	@ (8011a9c <HAL_TIM_PWM_Start_DMA+0x434>)
 80118be:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80118c4:	6879      	ldr	r1, [r7, #4]
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	3338      	adds	r3, #56	@ 0x38
 80118cc:	461a      	mov	r2, r3
 80118ce:	887b      	ldrh	r3, [r7, #2]
 80118d0:	f7f7 fd4e 	bl	8009370 <HAL_DMA_Start_IT>
 80118d4:	4603      	mov	r3, r0
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d001      	beq.n	80118de <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80118da:	2301      	movs	r3, #1
 80118dc:	e0d6      	b.n	8011a8c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	68da      	ldr	r2, [r3, #12]
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80118ec:	60da      	str	r2, [r3, #12]
      break;
 80118ee:	e04a      	b.n	8011986 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118f4:	4a67      	ldr	r2, [pc, #412]	@ (8011a94 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80118f6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118fc:	4a66      	ldr	r2, [pc, #408]	@ (8011a98 <HAL_TIM_PWM_Start_DMA+0x430>)
 80118fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011904:	4a65      	ldr	r2, [pc, #404]	@ (8011a9c <HAL_TIM_PWM_Start_DMA+0x434>)
 8011906:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801190c:	6879      	ldr	r1, [r7, #4]
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	333c      	adds	r3, #60	@ 0x3c
 8011914:	461a      	mov	r2, r3
 8011916:	887b      	ldrh	r3, [r7, #2]
 8011918:	f7f7 fd2a 	bl	8009370 <HAL_DMA_Start_IT>
 801191c:	4603      	mov	r3, r0
 801191e:	2b00      	cmp	r3, #0
 8011920:	d001      	beq.n	8011926 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8011922:	2301      	movs	r3, #1
 8011924:	e0b2      	b.n	8011a8c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	68da      	ldr	r2, [r3, #12]
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011934:	60da      	str	r2, [r3, #12]
      break;
 8011936:	e026      	b.n	8011986 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801193c:	4a55      	ldr	r2, [pc, #340]	@ (8011a94 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801193e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011944:	4a54      	ldr	r2, [pc, #336]	@ (8011a98 <HAL_TIM_PWM_Start_DMA+0x430>)
 8011946:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801194c:	4a53      	ldr	r2, [pc, #332]	@ (8011a9c <HAL_TIM_PWM_Start_DMA+0x434>)
 801194e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011954:	6879      	ldr	r1, [r7, #4]
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	3340      	adds	r3, #64	@ 0x40
 801195c:	461a      	mov	r2, r3
 801195e:	887b      	ldrh	r3, [r7, #2]
 8011960:	f7f7 fd06 	bl	8009370 <HAL_DMA_Start_IT>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d001      	beq.n	801196e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801196a:	2301      	movs	r3, #1
 801196c:	e08e      	b.n	8011a8c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	68da      	ldr	r2, [r3, #12]
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801197c:	60da      	str	r2, [r3, #12]
      break;
 801197e:	e002      	b.n	8011986 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8011980:	2301      	movs	r3, #1
 8011982:	75fb      	strb	r3, [r7, #23]
      break;
 8011984:	bf00      	nop
  }

  if (status == HAL_OK)
 8011986:	7dfb      	ldrb	r3, [r7, #23]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d17e      	bne.n	8011a8a <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	2201      	movs	r2, #1
 8011992:	68b9      	ldr	r1, [r7, #8]
 8011994:	4618      	mov	r0, r3
 8011996:	f001 f8e3 	bl	8012b60 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	4a40      	ldr	r2, [pc, #256]	@ (8011aa0 <HAL_TIM_PWM_Start_DMA+0x438>)
 80119a0:	4293      	cmp	r3, r2
 80119a2:	d013      	beq.n	80119cc <HAL_TIM_PWM_Start_DMA+0x364>
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	4a3e      	ldr	r2, [pc, #248]	@ (8011aa4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80119aa:	4293      	cmp	r3, r2
 80119ac:	d00e      	beq.n	80119cc <HAL_TIM_PWM_Start_DMA+0x364>
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	4a3d      	ldr	r2, [pc, #244]	@ (8011aa8 <HAL_TIM_PWM_Start_DMA+0x440>)
 80119b4:	4293      	cmp	r3, r2
 80119b6:	d009      	beq.n	80119cc <HAL_TIM_PWM_Start_DMA+0x364>
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	4a3b      	ldr	r2, [pc, #236]	@ (8011aac <HAL_TIM_PWM_Start_DMA+0x444>)
 80119be:	4293      	cmp	r3, r2
 80119c0:	d004      	beq.n	80119cc <HAL_TIM_PWM_Start_DMA+0x364>
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	4a3a      	ldr	r2, [pc, #232]	@ (8011ab0 <HAL_TIM_PWM_Start_DMA+0x448>)
 80119c8:	4293      	cmp	r3, r2
 80119ca:	d101      	bne.n	80119d0 <HAL_TIM_PWM_Start_DMA+0x368>
 80119cc:	2301      	movs	r3, #1
 80119ce:	e000      	b.n	80119d2 <HAL_TIM_PWM_Start_DMA+0x36a>
 80119d0:	2300      	movs	r3, #0
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d007      	beq.n	80119e6 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80119e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	4a2d      	ldr	r2, [pc, #180]	@ (8011aa0 <HAL_TIM_PWM_Start_DMA+0x438>)
 80119ec:	4293      	cmp	r3, r2
 80119ee:	d02c      	beq.n	8011a4a <HAL_TIM_PWM_Start_DMA+0x3e2>
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80119f8:	d027      	beq.n	8011a4a <HAL_TIM_PWM_Start_DMA+0x3e2>
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	4a2d      	ldr	r2, [pc, #180]	@ (8011ab4 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8011a00:	4293      	cmp	r3, r2
 8011a02:	d022      	beq.n	8011a4a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	4a2b      	ldr	r2, [pc, #172]	@ (8011ab8 <HAL_TIM_PWM_Start_DMA+0x450>)
 8011a0a:	4293      	cmp	r3, r2
 8011a0c:	d01d      	beq.n	8011a4a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	4a2a      	ldr	r2, [pc, #168]	@ (8011abc <HAL_TIM_PWM_Start_DMA+0x454>)
 8011a14:	4293      	cmp	r3, r2
 8011a16:	d018      	beq.n	8011a4a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	4a21      	ldr	r2, [pc, #132]	@ (8011aa4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8011a1e:	4293      	cmp	r3, r2
 8011a20:	d013      	beq.n	8011a4a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	4a26      	ldr	r2, [pc, #152]	@ (8011ac0 <HAL_TIM_PWM_Start_DMA+0x458>)
 8011a28:	4293      	cmp	r3, r2
 8011a2a:	d00e      	beq.n	8011a4a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	4a1d      	ldr	r2, [pc, #116]	@ (8011aa8 <HAL_TIM_PWM_Start_DMA+0x440>)
 8011a32:	4293      	cmp	r3, r2
 8011a34:	d009      	beq.n	8011a4a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	4a22      	ldr	r2, [pc, #136]	@ (8011ac4 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8011a3c:	4293      	cmp	r3, r2
 8011a3e:	d004      	beq.n	8011a4a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	4a20      	ldr	r2, [pc, #128]	@ (8011ac8 <HAL_TIM_PWM_Start_DMA+0x460>)
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d115      	bne.n	8011a76 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	689a      	ldr	r2, [r3, #8]
 8011a50:	4b1e      	ldr	r3, [pc, #120]	@ (8011acc <HAL_TIM_PWM_Start_DMA+0x464>)
 8011a52:	4013      	ands	r3, r2
 8011a54:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	2b06      	cmp	r3, #6
 8011a5a:	d015      	beq.n	8011a88 <HAL_TIM_PWM_Start_DMA+0x420>
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011a62:	d011      	beq.n	8011a88 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	681a      	ldr	r2, [r3, #0]
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	f042 0201 	orr.w	r2, r2, #1
 8011a72:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011a74:	e008      	b.n	8011a88 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	681a      	ldr	r2, [r3, #0]
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	f042 0201 	orr.w	r2, r2, #1
 8011a84:	601a      	str	r2, [r3, #0]
 8011a86:	e000      	b.n	8011a8a <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011a88:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8011a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3718      	adds	r7, #24
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	08012203 	.word	0x08012203
 8011a98:	080122ab 	.word	0x080122ab
 8011a9c:	08012171 	.word	0x08012171
 8011aa0:	40010000 	.word	0x40010000
 8011aa4:	40010400 	.word	0x40010400
 8011aa8:	40014000 	.word	0x40014000
 8011aac:	40014400 	.word	0x40014400
 8011ab0:	40014800 	.word	0x40014800
 8011ab4:	40000400 	.word	0x40000400
 8011ab8:	40000800 	.word	0x40000800
 8011abc:	40000c00 	.word	0x40000c00
 8011ac0:	40001800 	.word	0x40001800
 8011ac4:	4000e000 	.word	0x4000e000
 8011ac8:	4000e400 	.word	0x4000e400
 8011acc:	00010007 	.word	0x00010007

08011ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	68db      	ldr	r3, [r3, #12]
 8011ade:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	691b      	ldr	r3, [r3, #16]
 8011ae6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	f003 0302 	and.w	r3, r3, #2
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d020      	beq.n	8011b34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f003 0302 	and.w	r3, r3, #2
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d01b      	beq.n	8011b34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	f06f 0202 	mvn.w	r2, #2
 8011b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2201      	movs	r2, #1
 8011b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	699b      	ldr	r3, [r3, #24]
 8011b12:	f003 0303 	and.w	r3, r3, #3
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d003      	beq.n	8011b22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f000 faf6 	bl	801210c <HAL_TIM_IC_CaptureCallback>
 8011b20:	e005      	b.n	8011b2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f000 fae8 	bl	80120f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f000 faf9 	bl	8012120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	2200      	movs	r2, #0
 8011b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	f003 0304 	and.w	r3, r3, #4
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d020      	beq.n	8011b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	f003 0304 	and.w	r3, r3, #4
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d01b      	beq.n	8011b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f06f 0204 	mvn.w	r2, #4
 8011b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2202      	movs	r2, #2
 8011b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	699b      	ldr	r3, [r3, #24]
 8011b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d003      	beq.n	8011b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f000 fad0 	bl	801210c <HAL_TIM_IC_CaptureCallback>
 8011b6c:	e005      	b.n	8011b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f000 fac2 	bl	80120f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f000 fad3 	bl	8012120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	f003 0308 	and.w	r3, r3, #8
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d020      	beq.n	8011bcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	f003 0308 	and.w	r3, r3, #8
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d01b      	beq.n	8011bcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f06f 0208 	mvn.w	r2, #8
 8011b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2204      	movs	r2, #4
 8011ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	69db      	ldr	r3, [r3, #28]
 8011baa:	f003 0303 	and.w	r3, r3, #3
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d003      	beq.n	8011bba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f000 faaa 	bl	801210c <HAL_TIM_IC_CaptureCallback>
 8011bb8:	e005      	b.n	8011bc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f000 fa9c 	bl	80120f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f000 faad 	bl	8012120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2200      	movs	r2, #0
 8011bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	f003 0310 	and.w	r3, r3, #16
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d020      	beq.n	8011c18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	f003 0310 	and.w	r3, r3, #16
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d01b      	beq.n	8011c18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	f06f 0210 	mvn.w	r2, #16
 8011be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2208      	movs	r2, #8
 8011bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	69db      	ldr	r3, [r3, #28]
 8011bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d003      	beq.n	8011c06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f000 fa84 	bl	801210c <HAL_TIM_IC_CaptureCallback>
 8011c04:	e005      	b.n	8011c12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011c06:	6878      	ldr	r0, [r7, #4]
 8011c08:	f000 fa76 	bl	80120f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f000 fa87 	bl	8012120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2200      	movs	r2, #0
 8011c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	f003 0301 	and.w	r3, r3, #1
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d00c      	beq.n	8011c3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	f003 0301 	and.w	r3, r3, #1
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d007      	beq.n	8011c3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	f06f 0201 	mvn.w	r2, #1
 8011c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f7ef fae8 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d104      	bne.n	8011c50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d00c      	beq.n	8011c6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d007      	beq.n	8011c6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8011c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f001 f847 	bl	8012cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d00c      	beq.n	8011c8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d007      	beq.n	8011c8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8011c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f001 f83f 	bl	8012d0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d00c      	beq.n	8011cb2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d007      	beq.n	8011cb2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8011caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f000 fa4b 	bl	8012148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	f003 0320 	and.w	r3, r3, #32
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d00c      	beq.n	8011cd6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	f003 0320 	and.w	r3, r3, #32
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d007      	beq.n	8011cd6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	f06f 0220 	mvn.w	r2, #32
 8011cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f001 f807 	bl	8012ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011cd6:	bf00      	nop
 8011cd8:	3710      	adds	r7, #16
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}
	...

08011ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b086      	sub	sp, #24
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	60f8      	str	r0, [r7, #12]
 8011ce8:	60b9      	str	r1, [r7, #8]
 8011cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011cec:	2300      	movs	r3, #0
 8011cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011cf6:	2b01      	cmp	r3, #1
 8011cf8:	d101      	bne.n	8011cfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011cfa:	2302      	movs	r3, #2
 8011cfc:	e0ff      	b.n	8011efe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2201      	movs	r2, #1
 8011d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2b14      	cmp	r3, #20
 8011d0a:	f200 80f0 	bhi.w	8011eee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8011d14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d14:	08011d69 	.word	0x08011d69
 8011d18:	08011eef 	.word	0x08011eef
 8011d1c:	08011eef 	.word	0x08011eef
 8011d20:	08011eef 	.word	0x08011eef
 8011d24:	08011da9 	.word	0x08011da9
 8011d28:	08011eef 	.word	0x08011eef
 8011d2c:	08011eef 	.word	0x08011eef
 8011d30:	08011eef 	.word	0x08011eef
 8011d34:	08011deb 	.word	0x08011deb
 8011d38:	08011eef 	.word	0x08011eef
 8011d3c:	08011eef 	.word	0x08011eef
 8011d40:	08011eef 	.word	0x08011eef
 8011d44:	08011e2b 	.word	0x08011e2b
 8011d48:	08011eef 	.word	0x08011eef
 8011d4c:	08011eef 	.word	0x08011eef
 8011d50:	08011eef 	.word	0x08011eef
 8011d54:	08011e6d 	.word	0x08011e6d
 8011d58:	08011eef 	.word	0x08011eef
 8011d5c:	08011eef 	.word	0x08011eef
 8011d60:	08011eef 	.word	0x08011eef
 8011d64:	08011ead 	.word	0x08011ead
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	68b9      	ldr	r1, [r7, #8]
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f000 fb82 	bl	8012478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	699a      	ldr	r2, [r3, #24]
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	f042 0208 	orr.w	r2, r2, #8
 8011d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	699a      	ldr	r2, [r3, #24]
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	f022 0204 	bic.w	r2, r2, #4
 8011d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	6999      	ldr	r1, [r3, #24]
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	691a      	ldr	r2, [r3, #16]
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	430a      	orrs	r2, r1
 8011da4:	619a      	str	r2, [r3, #24]
      break;
 8011da6:	e0a5      	b.n	8011ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	68b9      	ldr	r1, [r7, #8]
 8011dae:	4618      	mov	r0, r3
 8011db0:	f000 fbf2 	bl	8012598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	699a      	ldr	r2, [r3, #24]
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	699a      	ldr	r2, [r3, #24]
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	6999      	ldr	r1, [r3, #24]
 8011dda:	68bb      	ldr	r3, [r7, #8]
 8011ddc:	691b      	ldr	r3, [r3, #16]
 8011dde:	021a      	lsls	r2, r3, #8
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	430a      	orrs	r2, r1
 8011de6:	619a      	str	r2, [r3, #24]
      break;
 8011de8:	e084      	b.n	8011ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	68b9      	ldr	r1, [r7, #8]
 8011df0:	4618      	mov	r0, r3
 8011df2:	f000 fc5b 	bl	80126ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	69da      	ldr	r2, [r3, #28]
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f042 0208 	orr.w	r2, r2, #8
 8011e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	69da      	ldr	r2, [r3, #28]
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f022 0204 	bic.w	r2, r2, #4
 8011e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	69d9      	ldr	r1, [r3, #28]
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	691a      	ldr	r2, [r3, #16]
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	430a      	orrs	r2, r1
 8011e26:	61da      	str	r2, [r3, #28]
      break;
 8011e28:	e064      	b.n	8011ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	68b9      	ldr	r1, [r7, #8]
 8011e30:	4618      	mov	r0, r3
 8011e32:	f000 fcc3 	bl	80127bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	69da      	ldr	r2, [r3, #28]
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	69da      	ldr	r2, [r3, #28]
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	69d9      	ldr	r1, [r3, #28]
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	691b      	ldr	r3, [r3, #16]
 8011e60:	021a      	lsls	r2, r3, #8
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	430a      	orrs	r2, r1
 8011e68:	61da      	str	r2, [r3, #28]
      break;
 8011e6a:	e043      	b.n	8011ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	68b9      	ldr	r1, [r7, #8]
 8011e72:	4618      	mov	r0, r3
 8011e74:	f000 fd0c 	bl	8012890 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	f042 0208 	orr.w	r2, r2, #8
 8011e86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	f022 0204 	bic.w	r2, r2, #4
 8011e96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	691a      	ldr	r2, [r3, #16]
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	430a      	orrs	r2, r1
 8011ea8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011eaa:	e023      	b.n	8011ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	68b9      	ldr	r1, [r7, #8]
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f000 fd50 	bl	8012958 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011ec6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011ed6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	691b      	ldr	r3, [r3, #16]
 8011ee2:	021a      	lsls	r2, r3, #8
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	430a      	orrs	r2, r1
 8011eea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011eec:	e002      	b.n	8011ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011eee:	2301      	movs	r3, #1
 8011ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8011ef2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	3718      	adds	r7, #24
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}
 8011f06:	bf00      	nop

08011f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011f12:	2300      	movs	r3, #0
 8011f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011f1c:	2b01      	cmp	r3, #1
 8011f1e:	d101      	bne.n	8011f24 <HAL_TIM_ConfigClockSource+0x1c>
 8011f20:	2302      	movs	r3, #2
 8011f22:	e0dc      	b.n	80120de <HAL_TIM_ConfigClockSource+0x1d6>
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2201      	movs	r2, #1
 8011f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2202      	movs	r2, #2
 8011f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	689b      	ldr	r3, [r3, #8]
 8011f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011f3c:	68ba      	ldr	r2, [r7, #8]
 8011f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80120e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011f40:	4013      	ands	r3, r2
 8011f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	68ba      	ldr	r2, [r7, #8]
 8011f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	4a64      	ldr	r2, [pc, #400]	@ (80120ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8011f5a:	4293      	cmp	r3, r2
 8011f5c:	f000 80a9 	beq.w	80120b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8011f60:	4a62      	ldr	r2, [pc, #392]	@ (80120ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8011f62:	4293      	cmp	r3, r2
 8011f64:	f200 80ae 	bhi.w	80120c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f68:	4a61      	ldr	r2, [pc, #388]	@ (80120f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011f6a:	4293      	cmp	r3, r2
 8011f6c:	f000 80a1 	beq.w	80120b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8011f70:	4a5f      	ldr	r2, [pc, #380]	@ (80120f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011f72:	4293      	cmp	r3, r2
 8011f74:	f200 80a6 	bhi.w	80120c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f78:	4a5e      	ldr	r2, [pc, #376]	@ (80120f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8011f7a:	4293      	cmp	r3, r2
 8011f7c:	f000 8099 	beq.w	80120b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8011f80:	4a5c      	ldr	r2, [pc, #368]	@ (80120f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8011f82:	4293      	cmp	r3, r2
 8011f84:	f200 809e 	bhi.w	80120c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8011f8c:	f000 8091 	beq.w	80120b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8011f90:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8011f94:	f200 8096 	bhi.w	80120c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011f9c:	f000 8089 	beq.w	80120b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8011fa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011fa4:	f200 808e 	bhi.w	80120c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011fac:	d03e      	beq.n	801202c <HAL_TIM_ConfigClockSource+0x124>
 8011fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011fb2:	f200 8087 	bhi.w	80120c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011fba:	f000 8086 	beq.w	80120ca <HAL_TIM_ConfigClockSource+0x1c2>
 8011fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011fc2:	d87f      	bhi.n	80120c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011fc4:	2b70      	cmp	r3, #112	@ 0x70
 8011fc6:	d01a      	beq.n	8011ffe <HAL_TIM_ConfigClockSource+0xf6>
 8011fc8:	2b70      	cmp	r3, #112	@ 0x70
 8011fca:	d87b      	bhi.n	80120c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011fcc:	2b60      	cmp	r3, #96	@ 0x60
 8011fce:	d050      	beq.n	8012072 <HAL_TIM_ConfigClockSource+0x16a>
 8011fd0:	2b60      	cmp	r3, #96	@ 0x60
 8011fd2:	d877      	bhi.n	80120c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011fd4:	2b50      	cmp	r3, #80	@ 0x50
 8011fd6:	d03c      	beq.n	8012052 <HAL_TIM_ConfigClockSource+0x14a>
 8011fd8:	2b50      	cmp	r3, #80	@ 0x50
 8011fda:	d873      	bhi.n	80120c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011fdc:	2b40      	cmp	r3, #64	@ 0x40
 8011fde:	d058      	beq.n	8012092 <HAL_TIM_ConfigClockSource+0x18a>
 8011fe0:	2b40      	cmp	r3, #64	@ 0x40
 8011fe2:	d86f      	bhi.n	80120c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011fe4:	2b30      	cmp	r3, #48	@ 0x30
 8011fe6:	d064      	beq.n	80120b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8011fe8:	2b30      	cmp	r3, #48	@ 0x30
 8011fea:	d86b      	bhi.n	80120c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011fec:	2b20      	cmp	r3, #32
 8011fee:	d060      	beq.n	80120b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8011ff0:	2b20      	cmp	r3, #32
 8011ff2:	d867      	bhi.n	80120c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d05c      	beq.n	80120b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8011ff8:	2b10      	cmp	r3, #16
 8011ffa:	d05a      	beq.n	80120b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8011ffc:	e062      	b.n	80120c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801200e:	f000 fd87 	bl	8012b20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	689b      	ldr	r3, [r3, #8]
 8012018:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012020:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	68ba      	ldr	r2, [r7, #8]
 8012028:	609a      	str	r2, [r3, #8]
      break;
 801202a:	e04f      	b.n	80120cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801203c:	f000 fd70 	bl	8012b20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	689a      	ldr	r2, [r3, #8]
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801204e:	609a      	str	r2, [r3, #8]
      break;
 8012050:	e03c      	b.n	80120cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801205e:	461a      	mov	r2, r3
 8012060:	f000 fce0 	bl	8012a24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	2150      	movs	r1, #80	@ 0x50
 801206a:	4618      	mov	r0, r3
 801206c:	f000 fd3a 	bl	8012ae4 <TIM_ITRx_SetConfig>
      break;
 8012070:	e02c      	b.n	80120cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801207e:	461a      	mov	r2, r3
 8012080:	f000 fcff 	bl	8012a82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	2160      	movs	r1, #96	@ 0x60
 801208a:	4618      	mov	r0, r3
 801208c:	f000 fd2a 	bl	8012ae4 <TIM_ITRx_SetConfig>
      break;
 8012090:	e01c      	b.n	80120cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801209e:	461a      	mov	r2, r3
 80120a0:	f000 fcc0 	bl	8012a24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	2140      	movs	r1, #64	@ 0x40
 80120aa:	4618      	mov	r0, r3
 80120ac:	f000 fd1a 	bl	8012ae4 <TIM_ITRx_SetConfig>
      break;
 80120b0:	e00c      	b.n	80120cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	4619      	mov	r1, r3
 80120bc:	4610      	mov	r0, r2
 80120be:	f000 fd11 	bl	8012ae4 <TIM_ITRx_SetConfig>
      break;
 80120c2:	e003      	b.n	80120cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80120c4:	2301      	movs	r3, #1
 80120c6:	73fb      	strb	r3, [r7, #15]
      break;
 80120c8:	e000      	b.n	80120cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80120ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2201      	movs	r2, #1
 80120d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2200      	movs	r2, #0
 80120d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80120dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80120de:	4618      	mov	r0, r3
 80120e0:	3710      	adds	r7, #16
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	ffceff88 	.word	0xffceff88
 80120ec:	00100040 	.word	0x00100040
 80120f0:	00100030 	.word	0x00100030
 80120f4:	00100020 	.word	0x00100020

080120f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80120f8:	b480      	push	{r7}
 80120fa:	b083      	sub	sp, #12
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012100:	bf00      	nop
 8012102:	370c      	adds	r7, #12
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr

0801210c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801210c:	b480      	push	{r7}
 801210e:	b083      	sub	sp, #12
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012114:	bf00      	nop
 8012116:	370c      	adds	r7, #12
 8012118:	46bd      	mov	sp, r7
 801211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211e:	4770      	bx	lr

08012120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012120:	b480      	push	{r7}
 8012122:	b083      	sub	sp, #12
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012128:	bf00      	nop
 801212a:	370c      	adds	r7, #12
 801212c:	46bd      	mov	sp, r7
 801212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012132:	4770      	bx	lr

08012134 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8012134:	b480      	push	{r7}
 8012136:	b083      	sub	sp, #12
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 801213c:	bf00      	nop
 801213e:	370c      	adds	r7, #12
 8012140:	46bd      	mov	sp, r7
 8012142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012146:	4770      	bx	lr

08012148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012148:	b480      	push	{r7}
 801214a:	b083      	sub	sp, #12
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012150:	bf00      	nop
 8012152:	370c      	adds	r7, #12
 8012154:	46bd      	mov	sp, r7
 8012156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215a:	4770      	bx	lr

0801215c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 801215c:	b480      	push	{r7}
 801215e:	b083      	sub	sp, #12
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8012164:	bf00      	nop
 8012166:	370c      	adds	r7, #12
 8012168:	46bd      	mov	sp, r7
 801216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216e:	4770      	bx	lr

08012170 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801217c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012182:	687a      	ldr	r2, [r7, #4]
 8012184:	429a      	cmp	r2, r3
 8012186:	d107      	bne.n	8012198 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	2201      	movs	r2, #1
 801218c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	2201      	movs	r2, #1
 8012192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012196:	e02a      	b.n	80121ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801219c:	687a      	ldr	r2, [r7, #4]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d107      	bne.n	80121b2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	2202      	movs	r2, #2
 80121a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	2201      	movs	r2, #1
 80121ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80121b0:	e01d      	b.n	80121ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d107      	bne.n	80121cc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2204      	movs	r2, #4
 80121c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2201      	movs	r2, #1
 80121c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80121ca:	e010      	b.n	80121ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121d0:	687a      	ldr	r2, [r7, #4]
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d107      	bne.n	80121e6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2208      	movs	r2, #8
 80121da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	2201      	movs	r2, #1
 80121e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80121e4:	e003      	b.n	80121ee <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	2201      	movs	r2, #1
 80121ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80121ee:	68f8      	ldr	r0, [r7, #12]
 80121f0:	f7ff ffb4 	bl	801215c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	2200      	movs	r2, #0
 80121f8:	771a      	strb	r2, [r3, #28]
}
 80121fa:	bf00      	nop
 80121fc:	3710      	adds	r7, #16
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}

08012202 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8012202:	b580      	push	{r7, lr}
 8012204:	b084      	sub	sp, #16
 8012206:	af00      	add	r7, sp, #0
 8012208:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801220e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	429a      	cmp	r2, r3
 8012218:	d10b      	bne.n	8012232 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	2201      	movs	r2, #1
 801221e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	69db      	ldr	r3, [r3, #28]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d136      	bne.n	8012296 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	2201      	movs	r2, #1
 801222c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012230:	e031      	b.n	8012296 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012236:	687a      	ldr	r2, [r7, #4]
 8012238:	429a      	cmp	r2, r3
 801223a:	d10b      	bne.n	8012254 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	2202      	movs	r2, #2
 8012240:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	69db      	ldr	r3, [r3, #28]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d125      	bne.n	8012296 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	2201      	movs	r2, #1
 801224e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012252:	e020      	b.n	8012296 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012258:	687a      	ldr	r2, [r7, #4]
 801225a:	429a      	cmp	r2, r3
 801225c:	d10b      	bne.n	8012276 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	2204      	movs	r2, #4
 8012262:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	69db      	ldr	r3, [r3, #28]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d114      	bne.n	8012296 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	2201      	movs	r2, #1
 8012270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012274:	e00f      	b.n	8012296 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801227a:	687a      	ldr	r2, [r7, #4]
 801227c:	429a      	cmp	r2, r3
 801227e:	d10a      	bne.n	8012296 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	2208      	movs	r2, #8
 8012284:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	69db      	ldr	r3, [r3, #28]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d103      	bne.n	8012296 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	2201      	movs	r2, #1
 8012292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012296:	68f8      	ldr	r0, [r7, #12]
 8012298:	f7ff ff42 	bl	8012120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	2200      	movs	r2, #0
 80122a0:	771a      	strb	r2, [r3, #28]
}
 80122a2:	bf00      	nop
 80122a4:	3710      	adds	r7, #16
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}

080122aa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80122aa:	b580      	push	{r7, lr}
 80122ac:	b084      	sub	sp, #16
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122b6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122bc:	687a      	ldr	r2, [r7, #4]
 80122be:	429a      	cmp	r2, r3
 80122c0:	d103      	bne.n	80122ca <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	2201      	movs	r2, #1
 80122c6:	771a      	strb	r2, [r3, #28]
 80122c8:	e019      	b.n	80122fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122ce:	687a      	ldr	r2, [r7, #4]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d103      	bne.n	80122dc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	2202      	movs	r2, #2
 80122d8:	771a      	strb	r2, [r3, #28]
 80122da:	e010      	b.n	80122fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122e0:	687a      	ldr	r2, [r7, #4]
 80122e2:	429a      	cmp	r2, r3
 80122e4:	d103      	bne.n	80122ee <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2204      	movs	r2, #4
 80122ea:	771a      	strb	r2, [r3, #28]
 80122ec:	e007      	b.n	80122fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122f2:	687a      	ldr	r2, [r7, #4]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d102      	bne.n	80122fe <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	2208      	movs	r2, #8
 80122fc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80122fe:	68f8      	ldr	r0, [r7, #12]
 8012300:	f7ff ff18 	bl	8012134 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	2200      	movs	r2, #0
 8012308:	771a      	strb	r2, [r3, #28]
}
 801230a:	bf00      	nop
 801230c:	3710      	adds	r7, #16
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
	...

08012314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012314:	b480      	push	{r7}
 8012316:	b085      	sub	sp, #20
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	4a4a      	ldr	r2, [pc, #296]	@ (8012450 <TIM_Base_SetConfig+0x13c>)
 8012328:	4293      	cmp	r3, r2
 801232a:	d013      	beq.n	8012354 <TIM_Base_SetConfig+0x40>
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012332:	d00f      	beq.n	8012354 <TIM_Base_SetConfig+0x40>
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	4a47      	ldr	r2, [pc, #284]	@ (8012454 <TIM_Base_SetConfig+0x140>)
 8012338:	4293      	cmp	r3, r2
 801233a:	d00b      	beq.n	8012354 <TIM_Base_SetConfig+0x40>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	4a46      	ldr	r2, [pc, #280]	@ (8012458 <TIM_Base_SetConfig+0x144>)
 8012340:	4293      	cmp	r3, r2
 8012342:	d007      	beq.n	8012354 <TIM_Base_SetConfig+0x40>
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	4a45      	ldr	r2, [pc, #276]	@ (801245c <TIM_Base_SetConfig+0x148>)
 8012348:	4293      	cmp	r3, r2
 801234a:	d003      	beq.n	8012354 <TIM_Base_SetConfig+0x40>
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	4a44      	ldr	r2, [pc, #272]	@ (8012460 <TIM_Base_SetConfig+0x14c>)
 8012350:	4293      	cmp	r3, r2
 8012352:	d108      	bne.n	8012366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801235a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	685b      	ldr	r3, [r3, #4]
 8012360:	68fa      	ldr	r2, [r7, #12]
 8012362:	4313      	orrs	r3, r2
 8012364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	4a39      	ldr	r2, [pc, #228]	@ (8012450 <TIM_Base_SetConfig+0x13c>)
 801236a:	4293      	cmp	r3, r2
 801236c:	d027      	beq.n	80123be <TIM_Base_SetConfig+0xaa>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012374:	d023      	beq.n	80123be <TIM_Base_SetConfig+0xaa>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	4a36      	ldr	r2, [pc, #216]	@ (8012454 <TIM_Base_SetConfig+0x140>)
 801237a:	4293      	cmp	r3, r2
 801237c:	d01f      	beq.n	80123be <TIM_Base_SetConfig+0xaa>
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	4a35      	ldr	r2, [pc, #212]	@ (8012458 <TIM_Base_SetConfig+0x144>)
 8012382:	4293      	cmp	r3, r2
 8012384:	d01b      	beq.n	80123be <TIM_Base_SetConfig+0xaa>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	4a34      	ldr	r2, [pc, #208]	@ (801245c <TIM_Base_SetConfig+0x148>)
 801238a:	4293      	cmp	r3, r2
 801238c:	d017      	beq.n	80123be <TIM_Base_SetConfig+0xaa>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	4a33      	ldr	r2, [pc, #204]	@ (8012460 <TIM_Base_SetConfig+0x14c>)
 8012392:	4293      	cmp	r3, r2
 8012394:	d013      	beq.n	80123be <TIM_Base_SetConfig+0xaa>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	4a32      	ldr	r2, [pc, #200]	@ (8012464 <TIM_Base_SetConfig+0x150>)
 801239a:	4293      	cmp	r3, r2
 801239c:	d00f      	beq.n	80123be <TIM_Base_SetConfig+0xaa>
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	4a31      	ldr	r2, [pc, #196]	@ (8012468 <TIM_Base_SetConfig+0x154>)
 80123a2:	4293      	cmp	r3, r2
 80123a4:	d00b      	beq.n	80123be <TIM_Base_SetConfig+0xaa>
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	4a30      	ldr	r2, [pc, #192]	@ (801246c <TIM_Base_SetConfig+0x158>)
 80123aa:	4293      	cmp	r3, r2
 80123ac:	d007      	beq.n	80123be <TIM_Base_SetConfig+0xaa>
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	4a2f      	ldr	r2, [pc, #188]	@ (8012470 <TIM_Base_SetConfig+0x15c>)
 80123b2:	4293      	cmp	r3, r2
 80123b4:	d003      	beq.n	80123be <TIM_Base_SetConfig+0xaa>
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	4a2e      	ldr	r2, [pc, #184]	@ (8012474 <TIM_Base_SetConfig+0x160>)
 80123ba:	4293      	cmp	r3, r2
 80123bc:	d108      	bne.n	80123d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80123c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	68db      	ldr	r3, [r3, #12]
 80123ca:	68fa      	ldr	r2, [r7, #12]
 80123cc:	4313      	orrs	r3, r2
 80123ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	695b      	ldr	r3, [r3, #20]
 80123da:	4313      	orrs	r3, r2
 80123dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	68fa      	ldr	r2, [r7, #12]
 80123e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	689a      	ldr	r2, [r3, #8]
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	681a      	ldr	r2, [r3, #0]
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	4a16      	ldr	r2, [pc, #88]	@ (8012450 <TIM_Base_SetConfig+0x13c>)
 80123f8:	4293      	cmp	r3, r2
 80123fa:	d00f      	beq.n	801241c <TIM_Base_SetConfig+0x108>
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	4a18      	ldr	r2, [pc, #96]	@ (8012460 <TIM_Base_SetConfig+0x14c>)
 8012400:	4293      	cmp	r3, r2
 8012402:	d00b      	beq.n	801241c <TIM_Base_SetConfig+0x108>
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	4a17      	ldr	r2, [pc, #92]	@ (8012464 <TIM_Base_SetConfig+0x150>)
 8012408:	4293      	cmp	r3, r2
 801240a:	d007      	beq.n	801241c <TIM_Base_SetConfig+0x108>
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	4a16      	ldr	r2, [pc, #88]	@ (8012468 <TIM_Base_SetConfig+0x154>)
 8012410:	4293      	cmp	r3, r2
 8012412:	d003      	beq.n	801241c <TIM_Base_SetConfig+0x108>
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	4a15      	ldr	r2, [pc, #84]	@ (801246c <TIM_Base_SetConfig+0x158>)
 8012418:	4293      	cmp	r3, r2
 801241a:	d103      	bne.n	8012424 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	691a      	ldr	r2, [r3, #16]
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2201      	movs	r2, #1
 8012428:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	691b      	ldr	r3, [r3, #16]
 801242e:	f003 0301 	and.w	r3, r3, #1
 8012432:	2b01      	cmp	r3, #1
 8012434:	d105      	bne.n	8012442 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	691b      	ldr	r3, [r3, #16]
 801243a:	f023 0201 	bic.w	r2, r3, #1
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	611a      	str	r2, [r3, #16]
  }
}
 8012442:	bf00      	nop
 8012444:	3714      	adds	r7, #20
 8012446:	46bd      	mov	sp, r7
 8012448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244c:	4770      	bx	lr
 801244e:	bf00      	nop
 8012450:	40010000 	.word	0x40010000
 8012454:	40000400 	.word	0x40000400
 8012458:	40000800 	.word	0x40000800
 801245c:	40000c00 	.word	0x40000c00
 8012460:	40010400 	.word	0x40010400
 8012464:	40014000 	.word	0x40014000
 8012468:	40014400 	.word	0x40014400
 801246c:	40014800 	.word	0x40014800
 8012470:	4000e000 	.word	0x4000e000
 8012474:	4000e400 	.word	0x4000e400

08012478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012478:	b480      	push	{r7}
 801247a:	b087      	sub	sp, #28
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6a1b      	ldr	r3, [r3, #32]
 8012486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6a1b      	ldr	r3, [r3, #32]
 801248c:	f023 0201 	bic.w	r2, r3, #1
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	685b      	ldr	r3, [r3, #4]
 8012498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	699b      	ldr	r3, [r3, #24]
 801249e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80124a0:	68fa      	ldr	r2, [r7, #12]
 80124a2:	4b37      	ldr	r3, [pc, #220]	@ (8012580 <TIM_OC1_SetConfig+0x108>)
 80124a4:	4013      	ands	r3, r2
 80124a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	f023 0303 	bic.w	r3, r3, #3
 80124ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	68fa      	ldr	r2, [r7, #12]
 80124b6:	4313      	orrs	r3, r2
 80124b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	f023 0302 	bic.w	r3, r3, #2
 80124c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	689b      	ldr	r3, [r3, #8]
 80124c6:	697a      	ldr	r2, [r7, #20]
 80124c8:	4313      	orrs	r3, r2
 80124ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	4a2d      	ldr	r2, [pc, #180]	@ (8012584 <TIM_OC1_SetConfig+0x10c>)
 80124d0:	4293      	cmp	r3, r2
 80124d2:	d00f      	beq.n	80124f4 <TIM_OC1_SetConfig+0x7c>
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	4a2c      	ldr	r2, [pc, #176]	@ (8012588 <TIM_OC1_SetConfig+0x110>)
 80124d8:	4293      	cmp	r3, r2
 80124da:	d00b      	beq.n	80124f4 <TIM_OC1_SetConfig+0x7c>
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	4a2b      	ldr	r2, [pc, #172]	@ (801258c <TIM_OC1_SetConfig+0x114>)
 80124e0:	4293      	cmp	r3, r2
 80124e2:	d007      	beq.n	80124f4 <TIM_OC1_SetConfig+0x7c>
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	4a2a      	ldr	r2, [pc, #168]	@ (8012590 <TIM_OC1_SetConfig+0x118>)
 80124e8:	4293      	cmp	r3, r2
 80124ea:	d003      	beq.n	80124f4 <TIM_OC1_SetConfig+0x7c>
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	4a29      	ldr	r2, [pc, #164]	@ (8012594 <TIM_OC1_SetConfig+0x11c>)
 80124f0:	4293      	cmp	r3, r2
 80124f2:	d10c      	bne.n	801250e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	f023 0308 	bic.w	r3, r3, #8
 80124fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	68db      	ldr	r3, [r3, #12]
 8012500:	697a      	ldr	r2, [r7, #20]
 8012502:	4313      	orrs	r3, r2
 8012504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	f023 0304 	bic.w	r3, r3, #4
 801250c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	4a1c      	ldr	r2, [pc, #112]	@ (8012584 <TIM_OC1_SetConfig+0x10c>)
 8012512:	4293      	cmp	r3, r2
 8012514:	d00f      	beq.n	8012536 <TIM_OC1_SetConfig+0xbe>
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	4a1b      	ldr	r2, [pc, #108]	@ (8012588 <TIM_OC1_SetConfig+0x110>)
 801251a:	4293      	cmp	r3, r2
 801251c:	d00b      	beq.n	8012536 <TIM_OC1_SetConfig+0xbe>
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	4a1a      	ldr	r2, [pc, #104]	@ (801258c <TIM_OC1_SetConfig+0x114>)
 8012522:	4293      	cmp	r3, r2
 8012524:	d007      	beq.n	8012536 <TIM_OC1_SetConfig+0xbe>
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	4a19      	ldr	r2, [pc, #100]	@ (8012590 <TIM_OC1_SetConfig+0x118>)
 801252a:	4293      	cmp	r3, r2
 801252c:	d003      	beq.n	8012536 <TIM_OC1_SetConfig+0xbe>
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	4a18      	ldr	r2, [pc, #96]	@ (8012594 <TIM_OC1_SetConfig+0x11c>)
 8012532:	4293      	cmp	r3, r2
 8012534:	d111      	bne.n	801255a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801253c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801253e:	693b      	ldr	r3, [r7, #16]
 8012540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	695b      	ldr	r3, [r3, #20]
 801254a:	693a      	ldr	r2, [r7, #16]
 801254c:	4313      	orrs	r3, r2
 801254e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	699b      	ldr	r3, [r3, #24]
 8012554:	693a      	ldr	r2, [r7, #16]
 8012556:	4313      	orrs	r3, r2
 8012558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	693a      	ldr	r2, [r7, #16]
 801255e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	68fa      	ldr	r2, [r7, #12]
 8012564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	685a      	ldr	r2, [r3, #4]
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	697a      	ldr	r2, [r7, #20]
 8012572:	621a      	str	r2, [r3, #32]
}
 8012574:	bf00      	nop
 8012576:	371c      	adds	r7, #28
 8012578:	46bd      	mov	sp, r7
 801257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257e:	4770      	bx	lr
 8012580:	fffeff8f 	.word	0xfffeff8f
 8012584:	40010000 	.word	0x40010000
 8012588:	40010400 	.word	0x40010400
 801258c:	40014000 	.word	0x40014000
 8012590:	40014400 	.word	0x40014400
 8012594:	40014800 	.word	0x40014800

08012598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012598:	b480      	push	{r7}
 801259a:	b087      	sub	sp, #28
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
 80125a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	6a1b      	ldr	r3, [r3, #32]
 80125a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6a1b      	ldr	r3, [r3, #32]
 80125ac:	f023 0210 	bic.w	r2, r3, #16
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	699b      	ldr	r3, [r3, #24]
 80125be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80125c0:	68fa      	ldr	r2, [r7, #12]
 80125c2:	4b34      	ldr	r3, [pc, #208]	@ (8012694 <TIM_OC2_SetConfig+0xfc>)
 80125c4:	4013      	ands	r3, r2
 80125c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80125ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	021b      	lsls	r3, r3, #8
 80125d6:	68fa      	ldr	r2, [r7, #12]
 80125d8:	4313      	orrs	r3, r2
 80125da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	f023 0320 	bic.w	r3, r3, #32
 80125e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	689b      	ldr	r3, [r3, #8]
 80125e8:	011b      	lsls	r3, r3, #4
 80125ea:	697a      	ldr	r2, [r7, #20]
 80125ec:	4313      	orrs	r3, r2
 80125ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	4a29      	ldr	r2, [pc, #164]	@ (8012698 <TIM_OC2_SetConfig+0x100>)
 80125f4:	4293      	cmp	r3, r2
 80125f6:	d003      	beq.n	8012600 <TIM_OC2_SetConfig+0x68>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	4a28      	ldr	r2, [pc, #160]	@ (801269c <TIM_OC2_SetConfig+0x104>)
 80125fc:	4293      	cmp	r3, r2
 80125fe:	d10d      	bne.n	801261c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	68db      	ldr	r3, [r3, #12]
 801260c:	011b      	lsls	r3, r3, #4
 801260e:	697a      	ldr	r2, [r7, #20]
 8012610:	4313      	orrs	r3, r2
 8012612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801261a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	4a1e      	ldr	r2, [pc, #120]	@ (8012698 <TIM_OC2_SetConfig+0x100>)
 8012620:	4293      	cmp	r3, r2
 8012622:	d00f      	beq.n	8012644 <TIM_OC2_SetConfig+0xac>
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	4a1d      	ldr	r2, [pc, #116]	@ (801269c <TIM_OC2_SetConfig+0x104>)
 8012628:	4293      	cmp	r3, r2
 801262a:	d00b      	beq.n	8012644 <TIM_OC2_SetConfig+0xac>
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	4a1c      	ldr	r2, [pc, #112]	@ (80126a0 <TIM_OC2_SetConfig+0x108>)
 8012630:	4293      	cmp	r3, r2
 8012632:	d007      	beq.n	8012644 <TIM_OC2_SetConfig+0xac>
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	4a1b      	ldr	r2, [pc, #108]	@ (80126a4 <TIM_OC2_SetConfig+0x10c>)
 8012638:	4293      	cmp	r3, r2
 801263a:	d003      	beq.n	8012644 <TIM_OC2_SetConfig+0xac>
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	4a1a      	ldr	r2, [pc, #104]	@ (80126a8 <TIM_OC2_SetConfig+0x110>)
 8012640:	4293      	cmp	r3, r2
 8012642:	d113      	bne.n	801266c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012644:	693b      	ldr	r3, [r7, #16]
 8012646:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801264a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801264c:	693b      	ldr	r3, [r7, #16]
 801264e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	695b      	ldr	r3, [r3, #20]
 8012658:	009b      	lsls	r3, r3, #2
 801265a:	693a      	ldr	r2, [r7, #16]
 801265c:	4313      	orrs	r3, r2
 801265e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	699b      	ldr	r3, [r3, #24]
 8012664:	009b      	lsls	r3, r3, #2
 8012666:	693a      	ldr	r2, [r7, #16]
 8012668:	4313      	orrs	r3, r2
 801266a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	693a      	ldr	r2, [r7, #16]
 8012670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	68fa      	ldr	r2, [r7, #12]
 8012676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	685a      	ldr	r2, [r3, #4]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	697a      	ldr	r2, [r7, #20]
 8012684:	621a      	str	r2, [r3, #32]
}
 8012686:	bf00      	nop
 8012688:	371c      	adds	r7, #28
 801268a:	46bd      	mov	sp, r7
 801268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop
 8012694:	feff8fff 	.word	0xfeff8fff
 8012698:	40010000 	.word	0x40010000
 801269c:	40010400 	.word	0x40010400
 80126a0:	40014000 	.word	0x40014000
 80126a4:	40014400 	.word	0x40014400
 80126a8:	40014800 	.word	0x40014800

080126ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80126ac:	b480      	push	{r7}
 80126ae:	b087      	sub	sp, #28
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
 80126b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	6a1b      	ldr	r3, [r3, #32]
 80126ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	6a1b      	ldr	r3, [r3, #32]
 80126c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	69db      	ldr	r3, [r3, #28]
 80126d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80126d4:	68fa      	ldr	r2, [r7, #12]
 80126d6:	4b33      	ldr	r3, [pc, #204]	@ (80127a4 <TIM_OC3_SetConfig+0xf8>)
 80126d8:	4013      	ands	r3, r2
 80126da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	f023 0303 	bic.w	r3, r3, #3
 80126e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	68fa      	ldr	r2, [r7, #12]
 80126ea:	4313      	orrs	r3, r2
 80126ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80126f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	689b      	ldr	r3, [r3, #8]
 80126fa:	021b      	lsls	r3, r3, #8
 80126fc:	697a      	ldr	r2, [r7, #20]
 80126fe:	4313      	orrs	r3, r2
 8012700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	4a28      	ldr	r2, [pc, #160]	@ (80127a8 <TIM_OC3_SetConfig+0xfc>)
 8012706:	4293      	cmp	r3, r2
 8012708:	d003      	beq.n	8012712 <TIM_OC3_SetConfig+0x66>
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	4a27      	ldr	r2, [pc, #156]	@ (80127ac <TIM_OC3_SetConfig+0x100>)
 801270e:	4293      	cmp	r3, r2
 8012710:	d10d      	bne.n	801272e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012712:	697b      	ldr	r3, [r7, #20]
 8012714:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	68db      	ldr	r3, [r3, #12]
 801271e:	021b      	lsls	r3, r3, #8
 8012720:	697a      	ldr	r2, [r7, #20]
 8012722:	4313      	orrs	r3, r2
 8012724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801272c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	4a1d      	ldr	r2, [pc, #116]	@ (80127a8 <TIM_OC3_SetConfig+0xfc>)
 8012732:	4293      	cmp	r3, r2
 8012734:	d00f      	beq.n	8012756 <TIM_OC3_SetConfig+0xaa>
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	4a1c      	ldr	r2, [pc, #112]	@ (80127ac <TIM_OC3_SetConfig+0x100>)
 801273a:	4293      	cmp	r3, r2
 801273c:	d00b      	beq.n	8012756 <TIM_OC3_SetConfig+0xaa>
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	4a1b      	ldr	r2, [pc, #108]	@ (80127b0 <TIM_OC3_SetConfig+0x104>)
 8012742:	4293      	cmp	r3, r2
 8012744:	d007      	beq.n	8012756 <TIM_OC3_SetConfig+0xaa>
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	4a1a      	ldr	r2, [pc, #104]	@ (80127b4 <TIM_OC3_SetConfig+0x108>)
 801274a:	4293      	cmp	r3, r2
 801274c:	d003      	beq.n	8012756 <TIM_OC3_SetConfig+0xaa>
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	4a19      	ldr	r2, [pc, #100]	@ (80127b8 <TIM_OC3_SetConfig+0x10c>)
 8012752:	4293      	cmp	r3, r2
 8012754:	d113      	bne.n	801277e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012756:	693b      	ldr	r3, [r7, #16]
 8012758:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801275c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	695b      	ldr	r3, [r3, #20]
 801276a:	011b      	lsls	r3, r3, #4
 801276c:	693a      	ldr	r2, [r7, #16]
 801276e:	4313      	orrs	r3, r2
 8012770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	699b      	ldr	r3, [r3, #24]
 8012776:	011b      	lsls	r3, r3, #4
 8012778:	693a      	ldr	r2, [r7, #16]
 801277a:	4313      	orrs	r3, r2
 801277c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	693a      	ldr	r2, [r7, #16]
 8012782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	68fa      	ldr	r2, [r7, #12]
 8012788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	685a      	ldr	r2, [r3, #4]
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	697a      	ldr	r2, [r7, #20]
 8012796:	621a      	str	r2, [r3, #32]
}
 8012798:	bf00      	nop
 801279a:	371c      	adds	r7, #28
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr
 80127a4:	fffeff8f 	.word	0xfffeff8f
 80127a8:	40010000 	.word	0x40010000
 80127ac:	40010400 	.word	0x40010400
 80127b0:	40014000 	.word	0x40014000
 80127b4:	40014400 	.word	0x40014400
 80127b8:	40014800 	.word	0x40014800

080127bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80127bc:	b480      	push	{r7}
 80127be:	b087      	sub	sp, #28
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	6a1b      	ldr	r3, [r3, #32]
 80127ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	6a1b      	ldr	r3, [r3, #32]
 80127d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	685b      	ldr	r3, [r3, #4]
 80127dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	69db      	ldr	r3, [r3, #28]
 80127e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80127e4:	68fa      	ldr	r2, [r7, #12]
 80127e6:	4b24      	ldr	r3, [pc, #144]	@ (8012878 <TIM_OC4_SetConfig+0xbc>)
 80127e8:	4013      	ands	r3, r2
 80127ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80127f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	021b      	lsls	r3, r3, #8
 80127fa:	68fa      	ldr	r2, [r7, #12]
 80127fc:	4313      	orrs	r3, r2
 80127fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	689b      	ldr	r3, [r3, #8]
 801280c:	031b      	lsls	r3, r3, #12
 801280e:	693a      	ldr	r2, [r7, #16]
 8012810:	4313      	orrs	r3, r2
 8012812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	4a19      	ldr	r2, [pc, #100]	@ (801287c <TIM_OC4_SetConfig+0xc0>)
 8012818:	4293      	cmp	r3, r2
 801281a:	d00f      	beq.n	801283c <TIM_OC4_SetConfig+0x80>
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	4a18      	ldr	r2, [pc, #96]	@ (8012880 <TIM_OC4_SetConfig+0xc4>)
 8012820:	4293      	cmp	r3, r2
 8012822:	d00b      	beq.n	801283c <TIM_OC4_SetConfig+0x80>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	4a17      	ldr	r2, [pc, #92]	@ (8012884 <TIM_OC4_SetConfig+0xc8>)
 8012828:	4293      	cmp	r3, r2
 801282a:	d007      	beq.n	801283c <TIM_OC4_SetConfig+0x80>
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	4a16      	ldr	r2, [pc, #88]	@ (8012888 <TIM_OC4_SetConfig+0xcc>)
 8012830:	4293      	cmp	r3, r2
 8012832:	d003      	beq.n	801283c <TIM_OC4_SetConfig+0x80>
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	4a15      	ldr	r2, [pc, #84]	@ (801288c <TIM_OC4_SetConfig+0xd0>)
 8012838:	4293      	cmp	r3, r2
 801283a:	d109      	bne.n	8012850 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012842:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	695b      	ldr	r3, [r3, #20]
 8012848:	019b      	lsls	r3, r3, #6
 801284a:	697a      	ldr	r2, [r7, #20]
 801284c:	4313      	orrs	r3, r2
 801284e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	697a      	ldr	r2, [r7, #20]
 8012854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	68fa      	ldr	r2, [r7, #12]
 801285a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	685a      	ldr	r2, [r3, #4]
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	693a      	ldr	r2, [r7, #16]
 8012868:	621a      	str	r2, [r3, #32]
}
 801286a:	bf00      	nop
 801286c:	371c      	adds	r7, #28
 801286e:	46bd      	mov	sp, r7
 8012870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012874:	4770      	bx	lr
 8012876:	bf00      	nop
 8012878:	feff8fff 	.word	0xfeff8fff
 801287c:	40010000 	.word	0x40010000
 8012880:	40010400 	.word	0x40010400
 8012884:	40014000 	.word	0x40014000
 8012888:	40014400 	.word	0x40014400
 801288c:	40014800 	.word	0x40014800

08012890 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012890:	b480      	push	{r7}
 8012892:	b087      	sub	sp, #28
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6a1b      	ldr	r3, [r3, #32]
 801289e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6a1b      	ldr	r3, [r3, #32]
 80128a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80128b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80128b8:	68fa      	ldr	r2, [r7, #12]
 80128ba:	4b21      	ldr	r3, [pc, #132]	@ (8012940 <TIM_OC5_SetConfig+0xb0>)
 80128bc:	4013      	ands	r3, r2
 80128be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	68fa      	ldr	r2, [r7, #12]
 80128c6:	4313      	orrs	r3, r2
 80128c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80128d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	689b      	ldr	r3, [r3, #8]
 80128d6:	041b      	lsls	r3, r3, #16
 80128d8:	693a      	ldr	r2, [r7, #16]
 80128da:	4313      	orrs	r3, r2
 80128dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	4a18      	ldr	r2, [pc, #96]	@ (8012944 <TIM_OC5_SetConfig+0xb4>)
 80128e2:	4293      	cmp	r3, r2
 80128e4:	d00f      	beq.n	8012906 <TIM_OC5_SetConfig+0x76>
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	4a17      	ldr	r2, [pc, #92]	@ (8012948 <TIM_OC5_SetConfig+0xb8>)
 80128ea:	4293      	cmp	r3, r2
 80128ec:	d00b      	beq.n	8012906 <TIM_OC5_SetConfig+0x76>
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	4a16      	ldr	r2, [pc, #88]	@ (801294c <TIM_OC5_SetConfig+0xbc>)
 80128f2:	4293      	cmp	r3, r2
 80128f4:	d007      	beq.n	8012906 <TIM_OC5_SetConfig+0x76>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	4a15      	ldr	r2, [pc, #84]	@ (8012950 <TIM_OC5_SetConfig+0xc0>)
 80128fa:	4293      	cmp	r3, r2
 80128fc:	d003      	beq.n	8012906 <TIM_OC5_SetConfig+0x76>
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	4a14      	ldr	r2, [pc, #80]	@ (8012954 <TIM_OC5_SetConfig+0xc4>)
 8012902:	4293      	cmp	r3, r2
 8012904:	d109      	bne.n	801291a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012906:	697b      	ldr	r3, [r7, #20]
 8012908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801290c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	695b      	ldr	r3, [r3, #20]
 8012912:	021b      	lsls	r3, r3, #8
 8012914:	697a      	ldr	r2, [r7, #20]
 8012916:	4313      	orrs	r3, r2
 8012918:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	697a      	ldr	r2, [r7, #20]
 801291e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	68fa      	ldr	r2, [r7, #12]
 8012924:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	685a      	ldr	r2, [r3, #4]
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	693a      	ldr	r2, [r7, #16]
 8012932:	621a      	str	r2, [r3, #32]
}
 8012934:	bf00      	nop
 8012936:	371c      	adds	r7, #28
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr
 8012940:	fffeff8f 	.word	0xfffeff8f
 8012944:	40010000 	.word	0x40010000
 8012948:	40010400 	.word	0x40010400
 801294c:	40014000 	.word	0x40014000
 8012950:	40014400 	.word	0x40014400
 8012954:	40014800 	.word	0x40014800

08012958 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012958:	b480      	push	{r7}
 801295a:	b087      	sub	sp, #28
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6a1b      	ldr	r3, [r3, #32]
 8012966:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	6a1b      	ldr	r3, [r3, #32]
 801296c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	685b      	ldr	r3, [r3, #4]
 8012978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801297e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012980:	68fa      	ldr	r2, [r7, #12]
 8012982:	4b22      	ldr	r3, [pc, #136]	@ (8012a0c <TIM_OC6_SetConfig+0xb4>)
 8012984:	4013      	ands	r3, r2
 8012986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	021b      	lsls	r3, r3, #8
 801298e:	68fa      	ldr	r2, [r7, #12]
 8012990:	4313      	orrs	r3, r2
 8012992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801299a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801299c:	683b      	ldr	r3, [r7, #0]
 801299e:	689b      	ldr	r3, [r3, #8]
 80129a0:	051b      	lsls	r3, r3, #20
 80129a2:	693a      	ldr	r2, [r7, #16]
 80129a4:	4313      	orrs	r3, r2
 80129a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	4a19      	ldr	r2, [pc, #100]	@ (8012a10 <TIM_OC6_SetConfig+0xb8>)
 80129ac:	4293      	cmp	r3, r2
 80129ae:	d00f      	beq.n	80129d0 <TIM_OC6_SetConfig+0x78>
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	4a18      	ldr	r2, [pc, #96]	@ (8012a14 <TIM_OC6_SetConfig+0xbc>)
 80129b4:	4293      	cmp	r3, r2
 80129b6:	d00b      	beq.n	80129d0 <TIM_OC6_SetConfig+0x78>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	4a17      	ldr	r2, [pc, #92]	@ (8012a18 <TIM_OC6_SetConfig+0xc0>)
 80129bc:	4293      	cmp	r3, r2
 80129be:	d007      	beq.n	80129d0 <TIM_OC6_SetConfig+0x78>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	4a16      	ldr	r2, [pc, #88]	@ (8012a1c <TIM_OC6_SetConfig+0xc4>)
 80129c4:	4293      	cmp	r3, r2
 80129c6:	d003      	beq.n	80129d0 <TIM_OC6_SetConfig+0x78>
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	4a15      	ldr	r2, [pc, #84]	@ (8012a20 <TIM_OC6_SetConfig+0xc8>)
 80129cc:	4293      	cmp	r3, r2
 80129ce:	d109      	bne.n	80129e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80129d0:	697b      	ldr	r3, [r7, #20]
 80129d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80129d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80129d8:	683b      	ldr	r3, [r7, #0]
 80129da:	695b      	ldr	r3, [r3, #20]
 80129dc:	029b      	lsls	r3, r3, #10
 80129de:	697a      	ldr	r2, [r7, #20]
 80129e0:	4313      	orrs	r3, r2
 80129e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	697a      	ldr	r2, [r7, #20]
 80129e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	68fa      	ldr	r2, [r7, #12]
 80129ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	685a      	ldr	r2, [r3, #4]
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	693a      	ldr	r2, [r7, #16]
 80129fc:	621a      	str	r2, [r3, #32]
}
 80129fe:	bf00      	nop
 8012a00:	371c      	adds	r7, #28
 8012a02:	46bd      	mov	sp, r7
 8012a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop
 8012a0c:	feff8fff 	.word	0xfeff8fff
 8012a10:	40010000 	.word	0x40010000
 8012a14:	40010400 	.word	0x40010400
 8012a18:	40014000 	.word	0x40014000
 8012a1c:	40014400 	.word	0x40014400
 8012a20:	40014800 	.word	0x40014800

08012a24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012a24:	b480      	push	{r7}
 8012a26:	b087      	sub	sp, #28
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	60f8      	str	r0, [r7, #12]
 8012a2c:	60b9      	str	r1, [r7, #8]
 8012a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	6a1b      	ldr	r3, [r3, #32]
 8012a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	6a1b      	ldr	r3, [r3, #32]
 8012a3a:	f023 0201 	bic.w	r2, r3, #1
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	699b      	ldr	r3, [r3, #24]
 8012a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012a48:	693b      	ldr	r3, [r7, #16]
 8012a4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8012a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	011b      	lsls	r3, r3, #4
 8012a54:	693a      	ldr	r2, [r7, #16]
 8012a56:	4313      	orrs	r3, r2
 8012a58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	f023 030a 	bic.w	r3, r3, #10
 8012a60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012a62:	697a      	ldr	r2, [r7, #20]
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	4313      	orrs	r3, r2
 8012a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	693a      	ldr	r2, [r7, #16]
 8012a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	697a      	ldr	r2, [r7, #20]
 8012a74:	621a      	str	r2, [r3, #32]
}
 8012a76:	bf00      	nop
 8012a78:	371c      	adds	r7, #28
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a80:	4770      	bx	lr

08012a82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012a82:	b480      	push	{r7}
 8012a84:	b087      	sub	sp, #28
 8012a86:	af00      	add	r7, sp, #0
 8012a88:	60f8      	str	r0, [r7, #12]
 8012a8a:	60b9      	str	r1, [r7, #8]
 8012a8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	6a1b      	ldr	r3, [r3, #32]
 8012a92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	6a1b      	ldr	r3, [r3, #32]
 8012a98:	f023 0210 	bic.w	r2, r3, #16
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	699b      	ldr	r3, [r3, #24]
 8012aa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8012aac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	031b      	lsls	r3, r3, #12
 8012ab2:	693a      	ldr	r2, [r7, #16]
 8012ab4:	4313      	orrs	r3, r2
 8012ab6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8012abe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	011b      	lsls	r3, r3, #4
 8012ac4:	697a      	ldr	r2, [r7, #20]
 8012ac6:	4313      	orrs	r3, r2
 8012ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	693a      	ldr	r2, [r7, #16]
 8012ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	697a      	ldr	r2, [r7, #20]
 8012ad4:	621a      	str	r2, [r3, #32]
}
 8012ad6:	bf00      	nop
 8012ad8:	371c      	adds	r7, #28
 8012ada:	46bd      	mov	sp, r7
 8012adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae0:	4770      	bx	lr
	...

08012ae4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	b085      	sub	sp, #20
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	689b      	ldr	r3, [r3, #8]
 8012af2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012af4:	68fa      	ldr	r2, [r7, #12]
 8012af6:	4b09      	ldr	r3, [pc, #36]	@ (8012b1c <TIM_ITRx_SetConfig+0x38>)
 8012af8:	4013      	ands	r3, r2
 8012afa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012afc:	683a      	ldr	r2, [r7, #0]
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	4313      	orrs	r3, r2
 8012b02:	f043 0307 	orr.w	r3, r3, #7
 8012b06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	68fa      	ldr	r2, [r7, #12]
 8012b0c:	609a      	str	r2, [r3, #8]
}
 8012b0e:	bf00      	nop
 8012b10:	3714      	adds	r7, #20
 8012b12:	46bd      	mov	sp, r7
 8012b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b18:	4770      	bx	lr
 8012b1a:	bf00      	nop
 8012b1c:	ffcfff8f 	.word	0xffcfff8f

08012b20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012b20:	b480      	push	{r7}
 8012b22:	b087      	sub	sp, #28
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	60b9      	str	r1, [r7, #8]
 8012b2a:	607a      	str	r2, [r7, #4]
 8012b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	689b      	ldr	r3, [r3, #8]
 8012b32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012b3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	021a      	lsls	r2, r3, #8
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	431a      	orrs	r2, r3
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	4313      	orrs	r3, r2
 8012b48:	697a      	ldr	r2, [r7, #20]
 8012b4a:	4313      	orrs	r3, r2
 8012b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	697a      	ldr	r2, [r7, #20]
 8012b52:	609a      	str	r2, [r3, #8]
}
 8012b54:	bf00      	nop
 8012b56:	371c      	adds	r7, #28
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012b60:	b480      	push	{r7}
 8012b62:	b087      	sub	sp, #28
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012b6c:	68bb      	ldr	r3, [r7, #8]
 8012b6e:	f003 031f 	and.w	r3, r3, #31
 8012b72:	2201      	movs	r2, #1
 8012b74:	fa02 f303 	lsl.w	r3, r2, r3
 8012b78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	6a1a      	ldr	r2, [r3, #32]
 8012b7e:	697b      	ldr	r3, [r7, #20]
 8012b80:	43db      	mvns	r3, r3
 8012b82:	401a      	ands	r2, r3
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	6a1a      	ldr	r2, [r3, #32]
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	f003 031f 	and.w	r3, r3, #31
 8012b92:	6879      	ldr	r1, [r7, #4]
 8012b94:	fa01 f303 	lsl.w	r3, r1, r3
 8012b98:	431a      	orrs	r2, r3
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	621a      	str	r2, [r3, #32]
}
 8012b9e:	bf00      	nop
 8012ba0:	371c      	adds	r7, #28
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba8:	4770      	bx	lr
	...

08012bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012bac:	b480      	push	{r7}
 8012bae:	b085      	sub	sp, #20
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012bbc:	2b01      	cmp	r3, #1
 8012bbe:	d101      	bne.n	8012bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012bc0:	2302      	movs	r3, #2
 8012bc2:	e077      	b.n	8012cb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2201      	movs	r2, #1
 8012bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2202      	movs	r2, #2
 8012bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	685b      	ldr	r3, [r3, #4]
 8012bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	689b      	ldr	r3, [r3, #8]
 8012be2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	4a35      	ldr	r2, [pc, #212]	@ (8012cc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012bea:	4293      	cmp	r3, r2
 8012bec:	d004      	beq.n	8012bf8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	4a34      	ldr	r2, [pc, #208]	@ (8012cc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012bf4:	4293      	cmp	r3, r2
 8012bf6:	d108      	bne.n	8012c0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8012bfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	68fa      	ldr	r2, [r7, #12]
 8012c06:	4313      	orrs	r3, r2
 8012c08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	68fa      	ldr	r2, [r7, #12]
 8012c18:	4313      	orrs	r3, r2
 8012c1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	68fa      	ldr	r2, [r7, #12]
 8012c22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	4a25      	ldr	r2, [pc, #148]	@ (8012cc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012c2a:	4293      	cmp	r3, r2
 8012c2c:	d02c      	beq.n	8012c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012c36:	d027      	beq.n	8012c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	4a22      	ldr	r2, [pc, #136]	@ (8012cc8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8012c3e:	4293      	cmp	r3, r2
 8012c40:	d022      	beq.n	8012c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	4a21      	ldr	r2, [pc, #132]	@ (8012ccc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8012c48:	4293      	cmp	r3, r2
 8012c4a:	d01d      	beq.n	8012c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	4a1f      	ldr	r2, [pc, #124]	@ (8012cd0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8012c52:	4293      	cmp	r3, r2
 8012c54:	d018      	beq.n	8012c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8012cc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012c5c:	4293      	cmp	r3, r2
 8012c5e:	d013      	beq.n	8012c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	4a1b      	ldr	r2, [pc, #108]	@ (8012cd4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8012c66:	4293      	cmp	r3, r2
 8012c68:	d00e      	beq.n	8012c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8012cd8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8012c70:	4293      	cmp	r3, r2
 8012c72:	d009      	beq.n	8012c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	4a18      	ldr	r2, [pc, #96]	@ (8012cdc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8012c7a:	4293      	cmp	r3, r2
 8012c7c:	d004      	beq.n	8012c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	4a17      	ldr	r2, [pc, #92]	@ (8012ce0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8012c84:	4293      	cmp	r3, r2
 8012c86:	d10c      	bne.n	8012ca2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012c88:	68bb      	ldr	r3, [r7, #8]
 8012c8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012c8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	689b      	ldr	r3, [r3, #8]
 8012c94:	68ba      	ldr	r2, [r7, #8]
 8012c96:	4313      	orrs	r3, r2
 8012c98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	68ba      	ldr	r2, [r7, #8]
 8012ca0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2201      	movs	r2, #1
 8012ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2200      	movs	r2, #0
 8012cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012cb2:	2300      	movs	r3, #0
}
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	3714      	adds	r7, #20
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr
 8012cc0:	40010000 	.word	0x40010000
 8012cc4:	40010400 	.word	0x40010400
 8012cc8:	40000400 	.word	0x40000400
 8012ccc:	40000800 	.word	0x40000800
 8012cd0:	40000c00 	.word	0x40000c00
 8012cd4:	40001800 	.word	0x40001800
 8012cd8:	40014000 	.word	0x40014000
 8012cdc:	4000e000 	.word	0x4000e000
 8012ce0:	4000e400 	.word	0x4000e400

08012ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	b083      	sub	sp, #12
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012cec:	bf00      	nop
 8012cee:	370c      	adds	r7, #12
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf6:	4770      	bx	lr

08012cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b083      	sub	sp, #12
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012d00:	bf00      	nop
 8012d02:	370c      	adds	r7, #12
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr

08012d0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b083      	sub	sp, #12
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012d14:	bf00      	nop
 8012d16:	370c      	adds	r7, #12
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1e:	4770      	bx	lr

08012d20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d101      	bne.n	8012d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012d2e:	2301      	movs	r3, #1
 8012d30:	e042      	b.n	8012db8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d106      	bne.n	8012d4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f7ef fe5b 	bl	8002a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2224      	movs	r2, #36	@ 0x24
 8012d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	681a      	ldr	r2, [r3, #0]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	f022 0201 	bic.w	r2, r2, #1
 8012d60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d002      	beq.n	8012d70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f000 fe94 	bl	8013a98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f000 f825 	bl	8012dc0 <UART_SetConfig>
 8012d76:	4603      	mov	r3, r0
 8012d78:	2b01      	cmp	r3, #1
 8012d7a:	d101      	bne.n	8012d80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	e01b      	b.n	8012db8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	685a      	ldr	r2, [r3, #4]
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8012d8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	689a      	ldr	r2, [r3, #8]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8012d9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	681a      	ldr	r2, [r3, #0]
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	f042 0201 	orr.w	r2, r2, #1
 8012dae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f000 ff13 	bl	8013bdc <UART_CheckIdleState>
 8012db6:	4603      	mov	r3, r0
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	3708      	adds	r7, #8
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}

08012dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012dc4:	b092      	sub	sp, #72	@ 0x48
 8012dc6:	af00      	add	r7, sp, #0
 8012dc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012dd0:	697b      	ldr	r3, [r7, #20]
 8012dd2:	689a      	ldr	r2, [r3, #8]
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	691b      	ldr	r3, [r3, #16]
 8012dd8:	431a      	orrs	r2, r3
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	695b      	ldr	r3, [r3, #20]
 8012dde:	431a      	orrs	r2, r3
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	69db      	ldr	r3, [r3, #28]
 8012de4:	4313      	orrs	r3, r2
 8012de6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012de8:	697b      	ldr	r3, [r7, #20]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	681a      	ldr	r2, [r3, #0]
 8012dee:	4bbe      	ldr	r3, [pc, #760]	@ (80130e8 <UART_SetConfig+0x328>)
 8012df0:	4013      	ands	r3, r2
 8012df2:	697a      	ldr	r2, [r7, #20]
 8012df4:	6812      	ldr	r2, [r2, #0]
 8012df6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012df8:	430b      	orrs	r3, r1
 8012dfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012dfc:	697b      	ldr	r3, [r7, #20]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	685b      	ldr	r3, [r3, #4]
 8012e02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	68da      	ldr	r2, [r3, #12]
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	430a      	orrs	r2, r1
 8012e10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	699b      	ldr	r3, [r3, #24]
 8012e16:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012e18:	697b      	ldr	r3, [r7, #20]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	4ab3      	ldr	r2, [pc, #716]	@ (80130ec <UART_SetConfig+0x32c>)
 8012e1e:	4293      	cmp	r3, r2
 8012e20:	d004      	beq.n	8012e2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	6a1b      	ldr	r3, [r3, #32]
 8012e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012e28:	4313      	orrs	r3, r2
 8012e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012e2c:	697b      	ldr	r3, [r7, #20]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	689a      	ldr	r2, [r3, #8]
 8012e32:	4baf      	ldr	r3, [pc, #700]	@ (80130f0 <UART_SetConfig+0x330>)
 8012e34:	4013      	ands	r3, r2
 8012e36:	697a      	ldr	r2, [r7, #20]
 8012e38:	6812      	ldr	r2, [r2, #0]
 8012e3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012e3c:	430b      	orrs	r3, r1
 8012e3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e46:	f023 010f 	bic.w	r1, r3, #15
 8012e4a:	697b      	ldr	r3, [r7, #20]
 8012e4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	430a      	orrs	r2, r1
 8012e54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012e56:	697b      	ldr	r3, [r7, #20]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	4aa6      	ldr	r2, [pc, #664]	@ (80130f4 <UART_SetConfig+0x334>)
 8012e5c:	4293      	cmp	r3, r2
 8012e5e:	d177      	bne.n	8012f50 <UART_SetConfig+0x190>
 8012e60:	4ba5      	ldr	r3, [pc, #660]	@ (80130f8 <UART_SetConfig+0x338>)
 8012e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012e68:	2b28      	cmp	r3, #40	@ 0x28
 8012e6a:	d86d      	bhi.n	8012f48 <UART_SetConfig+0x188>
 8012e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8012e74 <UART_SetConfig+0xb4>)
 8012e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e72:	bf00      	nop
 8012e74:	08012f19 	.word	0x08012f19
 8012e78:	08012f49 	.word	0x08012f49
 8012e7c:	08012f49 	.word	0x08012f49
 8012e80:	08012f49 	.word	0x08012f49
 8012e84:	08012f49 	.word	0x08012f49
 8012e88:	08012f49 	.word	0x08012f49
 8012e8c:	08012f49 	.word	0x08012f49
 8012e90:	08012f49 	.word	0x08012f49
 8012e94:	08012f21 	.word	0x08012f21
 8012e98:	08012f49 	.word	0x08012f49
 8012e9c:	08012f49 	.word	0x08012f49
 8012ea0:	08012f49 	.word	0x08012f49
 8012ea4:	08012f49 	.word	0x08012f49
 8012ea8:	08012f49 	.word	0x08012f49
 8012eac:	08012f49 	.word	0x08012f49
 8012eb0:	08012f49 	.word	0x08012f49
 8012eb4:	08012f29 	.word	0x08012f29
 8012eb8:	08012f49 	.word	0x08012f49
 8012ebc:	08012f49 	.word	0x08012f49
 8012ec0:	08012f49 	.word	0x08012f49
 8012ec4:	08012f49 	.word	0x08012f49
 8012ec8:	08012f49 	.word	0x08012f49
 8012ecc:	08012f49 	.word	0x08012f49
 8012ed0:	08012f49 	.word	0x08012f49
 8012ed4:	08012f31 	.word	0x08012f31
 8012ed8:	08012f49 	.word	0x08012f49
 8012edc:	08012f49 	.word	0x08012f49
 8012ee0:	08012f49 	.word	0x08012f49
 8012ee4:	08012f49 	.word	0x08012f49
 8012ee8:	08012f49 	.word	0x08012f49
 8012eec:	08012f49 	.word	0x08012f49
 8012ef0:	08012f49 	.word	0x08012f49
 8012ef4:	08012f39 	.word	0x08012f39
 8012ef8:	08012f49 	.word	0x08012f49
 8012efc:	08012f49 	.word	0x08012f49
 8012f00:	08012f49 	.word	0x08012f49
 8012f04:	08012f49 	.word	0x08012f49
 8012f08:	08012f49 	.word	0x08012f49
 8012f0c:	08012f49 	.word	0x08012f49
 8012f10:	08012f49 	.word	0x08012f49
 8012f14:	08012f41 	.word	0x08012f41
 8012f18:	2301      	movs	r3, #1
 8012f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f1e:	e326      	b.n	801356e <UART_SetConfig+0x7ae>
 8012f20:	2304      	movs	r3, #4
 8012f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f26:	e322      	b.n	801356e <UART_SetConfig+0x7ae>
 8012f28:	2308      	movs	r3, #8
 8012f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f2e:	e31e      	b.n	801356e <UART_SetConfig+0x7ae>
 8012f30:	2310      	movs	r3, #16
 8012f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f36:	e31a      	b.n	801356e <UART_SetConfig+0x7ae>
 8012f38:	2320      	movs	r3, #32
 8012f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f3e:	e316      	b.n	801356e <UART_SetConfig+0x7ae>
 8012f40:	2340      	movs	r3, #64	@ 0x40
 8012f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f46:	e312      	b.n	801356e <UART_SetConfig+0x7ae>
 8012f48:	2380      	movs	r3, #128	@ 0x80
 8012f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f4e:	e30e      	b.n	801356e <UART_SetConfig+0x7ae>
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	4a69      	ldr	r2, [pc, #420]	@ (80130fc <UART_SetConfig+0x33c>)
 8012f56:	4293      	cmp	r3, r2
 8012f58:	d130      	bne.n	8012fbc <UART_SetConfig+0x1fc>
 8012f5a:	4b67      	ldr	r3, [pc, #412]	@ (80130f8 <UART_SetConfig+0x338>)
 8012f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f5e:	f003 0307 	and.w	r3, r3, #7
 8012f62:	2b05      	cmp	r3, #5
 8012f64:	d826      	bhi.n	8012fb4 <UART_SetConfig+0x1f4>
 8012f66:	a201      	add	r2, pc, #4	@ (adr r2, 8012f6c <UART_SetConfig+0x1ac>)
 8012f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f6c:	08012f85 	.word	0x08012f85
 8012f70:	08012f8d 	.word	0x08012f8d
 8012f74:	08012f95 	.word	0x08012f95
 8012f78:	08012f9d 	.word	0x08012f9d
 8012f7c:	08012fa5 	.word	0x08012fa5
 8012f80:	08012fad 	.word	0x08012fad
 8012f84:	2300      	movs	r3, #0
 8012f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f8a:	e2f0      	b.n	801356e <UART_SetConfig+0x7ae>
 8012f8c:	2304      	movs	r3, #4
 8012f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f92:	e2ec      	b.n	801356e <UART_SetConfig+0x7ae>
 8012f94:	2308      	movs	r3, #8
 8012f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f9a:	e2e8      	b.n	801356e <UART_SetConfig+0x7ae>
 8012f9c:	2310      	movs	r3, #16
 8012f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fa2:	e2e4      	b.n	801356e <UART_SetConfig+0x7ae>
 8012fa4:	2320      	movs	r3, #32
 8012fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012faa:	e2e0      	b.n	801356e <UART_SetConfig+0x7ae>
 8012fac:	2340      	movs	r3, #64	@ 0x40
 8012fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fb2:	e2dc      	b.n	801356e <UART_SetConfig+0x7ae>
 8012fb4:	2380      	movs	r3, #128	@ 0x80
 8012fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fba:	e2d8      	b.n	801356e <UART_SetConfig+0x7ae>
 8012fbc:	697b      	ldr	r3, [r7, #20]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8013100 <UART_SetConfig+0x340>)
 8012fc2:	4293      	cmp	r3, r2
 8012fc4:	d130      	bne.n	8013028 <UART_SetConfig+0x268>
 8012fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80130f8 <UART_SetConfig+0x338>)
 8012fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fca:	f003 0307 	and.w	r3, r3, #7
 8012fce:	2b05      	cmp	r3, #5
 8012fd0:	d826      	bhi.n	8013020 <UART_SetConfig+0x260>
 8012fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8012fd8 <UART_SetConfig+0x218>)
 8012fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fd8:	08012ff1 	.word	0x08012ff1
 8012fdc:	08012ff9 	.word	0x08012ff9
 8012fe0:	08013001 	.word	0x08013001
 8012fe4:	08013009 	.word	0x08013009
 8012fe8:	08013011 	.word	0x08013011
 8012fec:	08013019 	.word	0x08013019
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ff6:	e2ba      	b.n	801356e <UART_SetConfig+0x7ae>
 8012ff8:	2304      	movs	r3, #4
 8012ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ffe:	e2b6      	b.n	801356e <UART_SetConfig+0x7ae>
 8013000:	2308      	movs	r3, #8
 8013002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013006:	e2b2      	b.n	801356e <UART_SetConfig+0x7ae>
 8013008:	2310      	movs	r3, #16
 801300a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801300e:	e2ae      	b.n	801356e <UART_SetConfig+0x7ae>
 8013010:	2320      	movs	r3, #32
 8013012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013016:	e2aa      	b.n	801356e <UART_SetConfig+0x7ae>
 8013018:	2340      	movs	r3, #64	@ 0x40
 801301a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801301e:	e2a6      	b.n	801356e <UART_SetConfig+0x7ae>
 8013020:	2380      	movs	r3, #128	@ 0x80
 8013022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013026:	e2a2      	b.n	801356e <UART_SetConfig+0x7ae>
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	4a35      	ldr	r2, [pc, #212]	@ (8013104 <UART_SetConfig+0x344>)
 801302e:	4293      	cmp	r3, r2
 8013030:	d130      	bne.n	8013094 <UART_SetConfig+0x2d4>
 8013032:	4b31      	ldr	r3, [pc, #196]	@ (80130f8 <UART_SetConfig+0x338>)
 8013034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013036:	f003 0307 	and.w	r3, r3, #7
 801303a:	2b05      	cmp	r3, #5
 801303c:	d826      	bhi.n	801308c <UART_SetConfig+0x2cc>
 801303e:	a201      	add	r2, pc, #4	@ (adr r2, 8013044 <UART_SetConfig+0x284>)
 8013040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013044:	0801305d 	.word	0x0801305d
 8013048:	08013065 	.word	0x08013065
 801304c:	0801306d 	.word	0x0801306d
 8013050:	08013075 	.word	0x08013075
 8013054:	0801307d 	.word	0x0801307d
 8013058:	08013085 	.word	0x08013085
 801305c:	2300      	movs	r3, #0
 801305e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013062:	e284      	b.n	801356e <UART_SetConfig+0x7ae>
 8013064:	2304      	movs	r3, #4
 8013066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801306a:	e280      	b.n	801356e <UART_SetConfig+0x7ae>
 801306c:	2308      	movs	r3, #8
 801306e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013072:	e27c      	b.n	801356e <UART_SetConfig+0x7ae>
 8013074:	2310      	movs	r3, #16
 8013076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801307a:	e278      	b.n	801356e <UART_SetConfig+0x7ae>
 801307c:	2320      	movs	r3, #32
 801307e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013082:	e274      	b.n	801356e <UART_SetConfig+0x7ae>
 8013084:	2340      	movs	r3, #64	@ 0x40
 8013086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801308a:	e270      	b.n	801356e <UART_SetConfig+0x7ae>
 801308c:	2380      	movs	r3, #128	@ 0x80
 801308e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013092:	e26c      	b.n	801356e <UART_SetConfig+0x7ae>
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	4a1b      	ldr	r2, [pc, #108]	@ (8013108 <UART_SetConfig+0x348>)
 801309a:	4293      	cmp	r3, r2
 801309c:	d142      	bne.n	8013124 <UART_SetConfig+0x364>
 801309e:	4b16      	ldr	r3, [pc, #88]	@ (80130f8 <UART_SetConfig+0x338>)
 80130a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80130a2:	f003 0307 	and.w	r3, r3, #7
 80130a6:	2b05      	cmp	r3, #5
 80130a8:	d838      	bhi.n	801311c <UART_SetConfig+0x35c>
 80130aa:	a201      	add	r2, pc, #4	@ (adr r2, 80130b0 <UART_SetConfig+0x2f0>)
 80130ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130b0:	080130c9 	.word	0x080130c9
 80130b4:	080130d1 	.word	0x080130d1
 80130b8:	080130d9 	.word	0x080130d9
 80130bc:	080130e1 	.word	0x080130e1
 80130c0:	0801310d 	.word	0x0801310d
 80130c4:	08013115 	.word	0x08013115
 80130c8:	2300      	movs	r3, #0
 80130ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130ce:	e24e      	b.n	801356e <UART_SetConfig+0x7ae>
 80130d0:	2304      	movs	r3, #4
 80130d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130d6:	e24a      	b.n	801356e <UART_SetConfig+0x7ae>
 80130d8:	2308      	movs	r3, #8
 80130da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130de:	e246      	b.n	801356e <UART_SetConfig+0x7ae>
 80130e0:	2310      	movs	r3, #16
 80130e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130e6:	e242      	b.n	801356e <UART_SetConfig+0x7ae>
 80130e8:	cfff69f3 	.word	0xcfff69f3
 80130ec:	58000c00 	.word	0x58000c00
 80130f0:	11fff4ff 	.word	0x11fff4ff
 80130f4:	40011000 	.word	0x40011000
 80130f8:	58024400 	.word	0x58024400
 80130fc:	40004400 	.word	0x40004400
 8013100:	40004800 	.word	0x40004800
 8013104:	40004c00 	.word	0x40004c00
 8013108:	40005000 	.word	0x40005000
 801310c:	2320      	movs	r3, #32
 801310e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013112:	e22c      	b.n	801356e <UART_SetConfig+0x7ae>
 8013114:	2340      	movs	r3, #64	@ 0x40
 8013116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801311a:	e228      	b.n	801356e <UART_SetConfig+0x7ae>
 801311c:	2380      	movs	r3, #128	@ 0x80
 801311e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013122:	e224      	b.n	801356e <UART_SetConfig+0x7ae>
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	4ab1      	ldr	r2, [pc, #708]	@ (80133f0 <UART_SetConfig+0x630>)
 801312a:	4293      	cmp	r3, r2
 801312c:	d176      	bne.n	801321c <UART_SetConfig+0x45c>
 801312e:	4bb1      	ldr	r3, [pc, #708]	@ (80133f4 <UART_SetConfig+0x634>)
 8013130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013132:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013136:	2b28      	cmp	r3, #40	@ 0x28
 8013138:	d86c      	bhi.n	8013214 <UART_SetConfig+0x454>
 801313a:	a201      	add	r2, pc, #4	@ (adr r2, 8013140 <UART_SetConfig+0x380>)
 801313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013140:	080131e5 	.word	0x080131e5
 8013144:	08013215 	.word	0x08013215
 8013148:	08013215 	.word	0x08013215
 801314c:	08013215 	.word	0x08013215
 8013150:	08013215 	.word	0x08013215
 8013154:	08013215 	.word	0x08013215
 8013158:	08013215 	.word	0x08013215
 801315c:	08013215 	.word	0x08013215
 8013160:	080131ed 	.word	0x080131ed
 8013164:	08013215 	.word	0x08013215
 8013168:	08013215 	.word	0x08013215
 801316c:	08013215 	.word	0x08013215
 8013170:	08013215 	.word	0x08013215
 8013174:	08013215 	.word	0x08013215
 8013178:	08013215 	.word	0x08013215
 801317c:	08013215 	.word	0x08013215
 8013180:	080131f5 	.word	0x080131f5
 8013184:	08013215 	.word	0x08013215
 8013188:	08013215 	.word	0x08013215
 801318c:	08013215 	.word	0x08013215
 8013190:	08013215 	.word	0x08013215
 8013194:	08013215 	.word	0x08013215
 8013198:	08013215 	.word	0x08013215
 801319c:	08013215 	.word	0x08013215
 80131a0:	080131fd 	.word	0x080131fd
 80131a4:	08013215 	.word	0x08013215
 80131a8:	08013215 	.word	0x08013215
 80131ac:	08013215 	.word	0x08013215
 80131b0:	08013215 	.word	0x08013215
 80131b4:	08013215 	.word	0x08013215
 80131b8:	08013215 	.word	0x08013215
 80131bc:	08013215 	.word	0x08013215
 80131c0:	08013205 	.word	0x08013205
 80131c4:	08013215 	.word	0x08013215
 80131c8:	08013215 	.word	0x08013215
 80131cc:	08013215 	.word	0x08013215
 80131d0:	08013215 	.word	0x08013215
 80131d4:	08013215 	.word	0x08013215
 80131d8:	08013215 	.word	0x08013215
 80131dc:	08013215 	.word	0x08013215
 80131e0:	0801320d 	.word	0x0801320d
 80131e4:	2301      	movs	r3, #1
 80131e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131ea:	e1c0      	b.n	801356e <UART_SetConfig+0x7ae>
 80131ec:	2304      	movs	r3, #4
 80131ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131f2:	e1bc      	b.n	801356e <UART_SetConfig+0x7ae>
 80131f4:	2308      	movs	r3, #8
 80131f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131fa:	e1b8      	b.n	801356e <UART_SetConfig+0x7ae>
 80131fc:	2310      	movs	r3, #16
 80131fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013202:	e1b4      	b.n	801356e <UART_SetConfig+0x7ae>
 8013204:	2320      	movs	r3, #32
 8013206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801320a:	e1b0      	b.n	801356e <UART_SetConfig+0x7ae>
 801320c:	2340      	movs	r3, #64	@ 0x40
 801320e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013212:	e1ac      	b.n	801356e <UART_SetConfig+0x7ae>
 8013214:	2380      	movs	r3, #128	@ 0x80
 8013216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801321a:	e1a8      	b.n	801356e <UART_SetConfig+0x7ae>
 801321c:	697b      	ldr	r3, [r7, #20]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	4a75      	ldr	r2, [pc, #468]	@ (80133f8 <UART_SetConfig+0x638>)
 8013222:	4293      	cmp	r3, r2
 8013224:	d130      	bne.n	8013288 <UART_SetConfig+0x4c8>
 8013226:	4b73      	ldr	r3, [pc, #460]	@ (80133f4 <UART_SetConfig+0x634>)
 8013228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801322a:	f003 0307 	and.w	r3, r3, #7
 801322e:	2b05      	cmp	r3, #5
 8013230:	d826      	bhi.n	8013280 <UART_SetConfig+0x4c0>
 8013232:	a201      	add	r2, pc, #4	@ (adr r2, 8013238 <UART_SetConfig+0x478>)
 8013234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013238:	08013251 	.word	0x08013251
 801323c:	08013259 	.word	0x08013259
 8013240:	08013261 	.word	0x08013261
 8013244:	08013269 	.word	0x08013269
 8013248:	08013271 	.word	0x08013271
 801324c:	08013279 	.word	0x08013279
 8013250:	2300      	movs	r3, #0
 8013252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013256:	e18a      	b.n	801356e <UART_SetConfig+0x7ae>
 8013258:	2304      	movs	r3, #4
 801325a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801325e:	e186      	b.n	801356e <UART_SetConfig+0x7ae>
 8013260:	2308      	movs	r3, #8
 8013262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013266:	e182      	b.n	801356e <UART_SetConfig+0x7ae>
 8013268:	2310      	movs	r3, #16
 801326a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801326e:	e17e      	b.n	801356e <UART_SetConfig+0x7ae>
 8013270:	2320      	movs	r3, #32
 8013272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013276:	e17a      	b.n	801356e <UART_SetConfig+0x7ae>
 8013278:	2340      	movs	r3, #64	@ 0x40
 801327a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801327e:	e176      	b.n	801356e <UART_SetConfig+0x7ae>
 8013280:	2380      	movs	r3, #128	@ 0x80
 8013282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013286:	e172      	b.n	801356e <UART_SetConfig+0x7ae>
 8013288:	697b      	ldr	r3, [r7, #20]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	4a5b      	ldr	r2, [pc, #364]	@ (80133fc <UART_SetConfig+0x63c>)
 801328e:	4293      	cmp	r3, r2
 8013290:	d130      	bne.n	80132f4 <UART_SetConfig+0x534>
 8013292:	4b58      	ldr	r3, [pc, #352]	@ (80133f4 <UART_SetConfig+0x634>)
 8013294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013296:	f003 0307 	and.w	r3, r3, #7
 801329a:	2b05      	cmp	r3, #5
 801329c:	d826      	bhi.n	80132ec <UART_SetConfig+0x52c>
 801329e:	a201      	add	r2, pc, #4	@ (adr r2, 80132a4 <UART_SetConfig+0x4e4>)
 80132a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132a4:	080132bd 	.word	0x080132bd
 80132a8:	080132c5 	.word	0x080132c5
 80132ac:	080132cd 	.word	0x080132cd
 80132b0:	080132d5 	.word	0x080132d5
 80132b4:	080132dd 	.word	0x080132dd
 80132b8:	080132e5 	.word	0x080132e5
 80132bc:	2300      	movs	r3, #0
 80132be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132c2:	e154      	b.n	801356e <UART_SetConfig+0x7ae>
 80132c4:	2304      	movs	r3, #4
 80132c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132ca:	e150      	b.n	801356e <UART_SetConfig+0x7ae>
 80132cc:	2308      	movs	r3, #8
 80132ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132d2:	e14c      	b.n	801356e <UART_SetConfig+0x7ae>
 80132d4:	2310      	movs	r3, #16
 80132d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132da:	e148      	b.n	801356e <UART_SetConfig+0x7ae>
 80132dc:	2320      	movs	r3, #32
 80132de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132e2:	e144      	b.n	801356e <UART_SetConfig+0x7ae>
 80132e4:	2340      	movs	r3, #64	@ 0x40
 80132e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132ea:	e140      	b.n	801356e <UART_SetConfig+0x7ae>
 80132ec:	2380      	movs	r3, #128	@ 0x80
 80132ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132f2:	e13c      	b.n	801356e <UART_SetConfig+0x7ae>
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	4a41      	ldr	r2, [pc, #260]	@ (8013400 <UART_SetConfig+0x640>)
 80132fa:	4293      	cmp	r3, r2
 80132fc:	f040 8082 	bne.w	8013404 <UART_SetConfig+0x644>
 8013300:	4b3c      	ldr	r3, [pc, #240]	@ (80133f4 <UART_SetConfig+0x634>)
 8013302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013308:	2b28      	cmp	r3, #40	@ 0x28
 801330a:	d86d      	bhi.n	80133e8 <UART_SetConfig+0x628>
 801330c:	a201      	add	r2, pc, #4	@ (adr r2, 8013314 <UART_SetConfig+0x554>)
 801330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013312:	bf00      	nop
 8013314:	080133b9 	.word	0x080133b9
 8013318:	080133e9 	.word	0x080133e9
 801331c:	080133e9 	.word	0x080133e9
 8013320:	080133e9 	.word	0x080133e9
 8013324:	080133e9 	.word	0x080133e9
 8013328:	080133e9 	.word	0x080133e9
 801332c:	080133e9 	.word	0x080133e9
 8013330:	080133e9 	.word	0x080133e9
 8013334:	080133c1 	.word	0x080133c1
 8013338:	080133e9 	.word	0x080133e9
 801333c:	080133e9 	.word	0x080133e9
 8013340:	080133e9 	.word	0x080133e9
 8013344:	080133e9 	.word	0x080133e9
 8013348:	080133e9 	.word	0x080133e9
 801334c:	080133e9 	.word	0x080133e9
 8013350:	080133e9 	.word	0x080133e9
 8013354:	080133c9 	.word	0x080133c9
 8013358:	080133e9 	.word	0x080133e9
 801335c:	080133e9 	.word	0x080133e9
 8013360:	080133e9 	.word	0x080133e9
 8013364:	080133e9 	.word	0x080133e9
 8013368:	080133e9 	.word	0x080133e9
 801336c:	080133e9 	.word	0x080133e9
 8013370:	080133e9 	.word	0x080133e9
 8013374:	080133d1 	.word	0x080133d1
 8013378:	080133e9 	.word	0x080133e9
 801337c:	080133e9 	.word	0x080133e9
 8013380:	080133e9 	.word	0x080133e9
 8013384:	080133e9 	.word	0x080133e9
 8013388:	080133e9 	.word	0x080133e9
 801338c:	080133e9 	.word	0x080133e9
 8013390:	080133e9 	.word	0x080133e9
 8013394:	080133d9 	.word	0x080133d9
 8013398:	080133e9 	.word	0x080133e9
 801339c:	080133e9 	.word	0x080133e9
 80133a0:	080133e9 	.word	0x080133e9
 80133a4:	080133e9 	.word	0x080133e9
 80133a8:	080133e9 	.word	0x080133e9
 80133ac:	080133e9 	.word	0x080133e9
 80133b0:	080133e9 	.word	0x080133e9
 80133b4:	080133e1 	.word	0x080133e1
 80133b8:	2301      	movs	r3, #1
 80133ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80133be:	e0d6      	b.n	801356e <UART_SetConfig+0x7ae>
 80133c0:	2304      	movs	r3, #4
 80133c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80133c6:	e0d2      	b.n	801356e <UART_SetConfig+0x7ae>
 80133c8:	2308      	movs	r3, #8
 80133ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80133ce:	e0ce      	b.n	801356e <UART_SetConfig+0x7ae>
 80133d0:	2310      	movs	r3, #16
 80133d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80133d6:	e0ca      	b.n	801356e <UART_SetConfig+0x7ae>
 80133d8:	2320      	movs	r3, #32
 80133da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80133de:	e0c6      	b.n	801356e <UART_SetConfig+0x7ae>
 80133e0:	2340      	movs	r3, #64	@ 0x40
 80133e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80133e6:	e0c2      	b.n	801356e <UART_SetConfig+0x7ae>
 80133e8:	2380      	movs	r3, #128	@ 0x80
 80133ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80133ee:	e0be      	b.n	801356e <UART_SetConfig+0x7ae>
 80133f0:	40011400 	.word	0x40011400
 80133f4:	58024400 	.word	0x58024400
 80133f8:	40007800 	.word	0x40007800
 80133fc:	40007c00 	.word	0x40007c00
 8013400:	40011800 	.word	0x40011800
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	4aad      	ldr	r2, [pc, #692]	@ (80136c0 <UART_SetConfig+0x900>)
 801340a:	4293      	cmp	r3, r2
 801340c:	d176      	bne.n	80134fc <UART_SetConfig+0x73c>
 801340e:	4bad      	ldr	r3, [pc, #692]	@ (80136c4 <UART_SetConfig+0x904>)
 8013410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013412:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013416:	2b28      	cmp	r3, #40	@ 0x28
 8013418:	d86c      	bhi.n	80134f4 <UART_SetConfig+0x734>
 801341a:	a201      	add	r2, pc, #4	@ (adr r2, 8013420 <UART_SetConfig+0x660>)
 801341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013420:	080134c5 	.word	0x080134c5
 8013424:	080134f5 	.word	0x080134f5
 8013428:	080134f5 	.word	0x080134f5
 801342c:	080134f5 	.word	0x080134f5
 8013430:	080134f5 	.word	0x080134f5
 8013434:	080134f5 	.word	0x080134f5
 8013438:	080134f5 	.word	0x080134f5
 801343c:	080134f5 	.word	0x080134f5
 8013440:	080134cd 	.word	0x080134cd
 8013444:	080134f5 	.word	0x080134f5
 8013448:	080134f5 	.word	0x080134f5
 801344c:	080134f5 	.word	0x080134f5
 8013450:	080134f5 	.word	0x080134f5
 8013454:	080134f5 	.word	0x080134f5
 8013458:	080134f5 	.word	0x080134f5
 801345c:	080134f5 	.word	0x080134f5
 8013460:	080134d5 	.word	0x080134d5
 8013464:	080134f5 	.word	0x080134f5
 8013468:	080134f5 	.word	0x080134f5
 801346c:	080134f5 	.word	0x080134f5
 8013470:	080134f5 	.word	0x080134f5
 8013474:	080134f5 	.word	0x080134f5
 8013478:	080134f5 	.word	0x080134f5
 801347c:	080134f5 	.word	0x080134f5
 8013480:	080134dd 	.word	0x080134dd
 8013484:	080134f5 	.word	0x080134f5
 8013488:	080134f5 	.word	0x080134f5
 801348c:	080134f5 	.word	0x080134f5
 8013490:	080134f5 	.word	0x080134f5
 8013494:	080134f5 	.word	0x080134f5
 8013498:	080134f5 	.word	0x080134f5
 801349c:	080134f5 	.word	0x080134f5
 80134a0:	080134e5 	.word	0x080134e5
 80134a4:	080134f5 	.word	0x080134f5
 80134a8:	080134f5 	.word	0x080134f5
 80134ac:	080134f5 	.word	0x080134f5
 80134b0:	080134f5 	.word	0x080134f5
 80134b4:	080134f5 	.word	0x080134f5
 80134b8:	080134f5 	.word	0x080134f5
 80134bc:	080134f5 	.word	0x080134f5
 80134c0:	080134ed 	.word	0x080134ed
 80134c4:	2301      	movs	r3, #1
 80134c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80134ca:	e050      	b.n	801356e <UART_SetConfig+0x7ae>
 80134cc:	2304      	movs	r3, #4
 80134ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80134d2:	e04c      	b.n	801356e <UART_SetConfig+0x7ae>
 80134d4:	2308      	movs	r3, #8
 80134d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80134da:	e048      	b.n	801356e <UART_SetConfig+0x7ae>
 80134dc:	2310      	movs	r3, #16
 80134de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80134e2:	e044      	b.n	801356e <UART_SetConfig+0x7ae>
 80134e4:	2320      	movs	r3, #32
 80134e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80134ea:	e040      	b.n	801356e <UART_SetConfig+0x7ae>
 80134ec:	2340      	movs	r3, #64	@ 0x40
 80134ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80134f2:	e03c      	b.n	801356e <UART_SetConfig+0x7ae>
 80134f4:	2380      	movs	r3, #128	@ 0x80
 80134f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80134fa:	e038      	b.n	801356e <UART_SetConfig+0x7ae>
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	4a71      	ldr	r2, [pc, #452]	@ (80136c8 <UART_SetConfig+0x908>)
 8013502:	4293      	cmp	r3, r2
 8013504:	d130      	bne.n	8013568 <UART_SetConfig+0x7a8>
 8013506:	4b6f      	ldr	r3, [pc, #444]	@ (80136c4 <UART_SetConfig+0x904>)
 8013508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801350a:	f003 0307 	and.w	r3, r3, #7
 801350e:	2b05      	cmp	r3, #5
 8013510:	d826      	bhi.n	8013560 <UART_SetConfig+0x7a0>
 8013512:	a201      	add	r2, pc, #4	@ (adr r2, 8013518 <UART_SetConfig+0x758>)
 8013514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013518:	08013531 	.word	0x08013531
 801351c:	08013539 	.word	0x08013539
 8013520:	08013541 	.word	0x08013541
 8013524:	08013549 	.word	0x08013549
 8013528:	08013551 	.word	0x08013551
 801352c:	08013559 	.word	0x08013559
 8013530:	2302      	movs	r3, #2
 8013532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013536:	e01a      	b.n	801356e <UART_SetConfig+0x7ae>
 8013538:	2304      	movs	r3, #4
 801353a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801353e:	e016      	b.n	801356e <UART_SetConfig+0x7ae>
 8013540:	2308      	movs	r3, #8
 8013542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013546:	e012      	b.n	801356e <UART_SetConfig+0x7ae>
 8013548:	2310      	movs	r3, #16
 801354a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801354e:	e00e      	b.n	801356e <UART_SetConfig+0x7ae>
 8013550:	2320      	movs	r3, #32
 8013552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013556:	e00a      	b.n	801356e <UART_SetConfig+0x7ae>
 8013558:	2340      	movs	r3, #64	@ 0x40
 801355a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801355e:	e006      	b.n	801356e <UART_SetConfig+0x7ae>
 8013560:	2380      	movs	r3, #128	@ 0x80
 8013562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013566:	e002      	b.n	801356e <UART_SetConfig+0x7ae>
 8013568:	2380      	movs	r3, #128	@ 0x80
 801356a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	4a55      	ldr	r2, [pc, #340]	@ (80136c8 <UART_SetConfig+0x908>)
 8013574:	4293      	cmp	r3, r2
 8013576:	f040 80f8 	bne.w	801376a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801357a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801357e:	2b20      	cmp	r3, #32
 8013580:	dc46      	bgt.n	8013610 <UART_SetConfig+0x850>
 8013582:	2b02      	cmp	r3, #2
 8013584:	db75      	blt.n	8013672 <UART_SetConfig+0x8b2>
 8013586:	3b02      	subs	r3, #2
 8013588:	2b1e      	cmp	r3, #30
 801358a:	d872      	bhi.n	8013672 <UART_SetConfig+0x8b2>
 801358c:	a201      	add	r2, pc, #4	@ (adr r2, 8013594 <UART_SetConfig+0x7d4>)
 801358e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013592:	bf00      	nop
 8013594:	08013617 	.word	0x08013617
 8013598:	08013673 	.word	0x08013673
 801359c:	0801361f 	.word	0x0801361f
 80135a0:	08013673 	.word	0x08013673
 80135a4:	08013673 	.word	0x08013673
 80135a8:	08013673 	.word	0x08013673
 80135ac:	0801362f 	.word	0x0801362f
 80135b0:	08013673 	.word	0x08013673
 80135b4:	08013673 	.word	0x08013673
 80135b8:	08013673 	.word	0x08013673
 80135bc:	08013673 	.word	0x08013673
 80135c0:	08013673 	.word	0x08013673
 80135c4:	08013673 	.word	0x08013673
 80135c8:	08013673 	.word	0x08013673
 80135cc:	0801363f 	.word	0x0801363f
 80135d0:	08013673 	.word	0x08013673
 80135d4:	08013673 	.word	0x08013673
 80135d8:	08013673 	.word	0x08013673
 80135dc:	08013673 	.word	0x08013673
 80135e0:	08013673 	.word	0x08013673
 80135e4:	08013673 	.word	0x08013673
 80135e8:	08013673 	.word	0x08013673
 80135ec:	08013673 	.word	0x08013673
 80135f0:	08013673 	.word	0x08013673
 80135f4:	08013673 	.word	0x08013673
 80135f8:	08013673 	.word	0x08013673
 80135fc:	08013673 	.word	0x08013673
 8013600:	08013673 	.word	0x08013673
 8013604:	08013673 	.word	0x08013673
 8013608:	08013673 	.word	0x08013673
 801360c:	08013665 	.word	0x08013665
 8013610:	2b40      	cmp	r3, #64	@ 0x40
 8013612:	d02a      	beq.n	801366a <UART_SetConfig+0x8aa>
 8013614:	e02d      	b.n	8013672 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013616:	f7fc f80f 	bl	800f638 <HAL_RCCEx_GetD3PCLK1Freq>
 801361a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801361c:	e02f      	b.n	801367e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801361e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013622:	4618      	mov	r0, r3
 8013624:	f7fc f81e 	bl	800f664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801362a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801362c:	e027      	b.n	801367e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801362e:	f107 0318 	add.w	r3, r7, #24
 8013632:	4618      	mov	r0, r3
 8013634:	f7fc f96a 	bl	800f90c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013638:	69fb      	ldr	r3, [r7, #28]
 801363a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801363c:	e01f      	b.n	801367e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801363e:	4b21      	ldr	r3, [pc, #132]	@ (80136c4 <UART_SetConfig+0x904>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	f003 0320 	and.w	r3, r3, #32
 8013646:	2b00      	cmp	r3, #0
 8013648:	d009      	beq.n	801365e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801364a:	4b1e      	ldr	r3, [pc, #120]	@ (80136c4 <UART_SetConfig+0x904>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	08db      	lsrs	r3, r3, #3
 8013650:	f003 0303 	and.w	r3, r3, #3
 8013654:	4a1d      	ldr	r2, [pc, #116]	@ (80136cc <UART_SetConfig+0x90c>)
 8013656:	fa22 f303 	lsr.w	r3, r2, r3
 801365a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801365c:	e00f      	b.n	801367e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801365e:	4b1b      	ldr	r3, [pc, #108]	@ (80136cc <UART_SetConfig+0x90c>)
 8013660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013662:	e00c      	b.n	801367e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013664:	4b1a      	ldr	r3, [pc, #104]	@ (80136d0 <UART_SetConfig+0x910>)
 8013666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013668:	e009      	b.n	801367e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801366a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801366e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013670:	e005      	b.n	801367e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013672:	2300      	movs	r3, #0
 8013674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013676:	2301      	movs	r3, #1
 8013678:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801367c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801367e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013680:	2b00      	cmp	r3, #0
 8013682:	f000 81ee 	beq.w	8013a62 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013686:	697b      	ldr	r3, [r7, #20]
 8013688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801368a:	4a12      	ldr	r2, [pc, #72]	@ (80136d4 <UART_SetConfig+0x914>)
 801368c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013690:	461a      	mov	r2, r3
 8013692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013694:	fbb3 f3f2 	udiv	r3, r3, r2
 8013698:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	685a      	ldr	r2, [r3, #4]
 801369e:	4613      	mov	r3, r2
 80136a0:	005b      	lsls	r3, r3, #1
 80136a2:	4413      	add	r3, r2
 80136a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136a6:	429a      	cmp	r2, r3
 80136a8:	d305      	bcc.n	80136b6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80136aa:	697b      	ldr	r3, [r7, #20]
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80136b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136b2:	429a      	cmp	r2, r3
 80136b4:	d910      	bls.n	80136d8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80136b6:	2301      	movs	r3, #1
 80136b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80136bc:	e1d1      	b.n	8013a62 <UART_SetConfig+0xca2>
 80136be:	bf00      	nop
 80136c0:	40011c00 	.word	0x40011c00
 80136c4:	58024400 	.word	0x58024400
 80136c8:	58000c00 	.word	0x58000c00
 80136cc:	03d09000 	.word	0x03d09000
 80136d0:	003d0900 	.word	0x003d0900
 80136d4:	0801d778 	.word	0x0801d778
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80136d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136da:	2200      	movs	r2, #0
 80136dc:	60bb      	str	r3, [r7, #8]
 80136de:	60fa      	str	r2, [r7, #12]
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136e4:	4ac0      	ldr	r2, [pc, #768]	@ (80139e8 <UART_SetConfig+0xc28>)
 80136e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136ea:	b29b      	uxth	r3, r3
 80136ec:	2200      	movs	r2, #0
 80136ee:	603b      	str	r3, [r7, #0]
 80136f0:	607a      	str	r2, [r7, #4]
 80136f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80136fa:	f7ed f82d 	bl	8000758 <__aeabi_uldivmod>
 80136fe:	4602      	mov	r2, r0
 8013700:	460b      	mov	r3, r1
 8013702:	4610      	mov	r0, r2
 8013704:	4619      	mov	r1, r3
 8013706:	f04f 0200 	mov.w	r2, #0
 801370a:	f04f 0300 	mov.w	r3, #0
 801370e:	020b      	lsls	r3, r1, #8
 8013710:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013714:	0202      	lsls	r2, r0, #8
 8013716:	6979      	ldr	r1, [r7, #20]
 8013718:	6849      	ldr	r1, [r1, #4]
 801371a:	0849      	lsrs	r1, r1, #1
 801371c:	2000      	movs	r0, #0
 801371e:	460c      	mov	r4, r1
 8013720:	4605      	mov	r5, r0
 8013722:	eb12 0804 	adds.w	r8, r2, r4
 8013726:	eb43 0905 	adc.w	r9, r3, r5
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	2200      	movs	r2, #0
 8013730:	469a      	mov	sl, r3
 8013732:	4693      	mov	fp, r2
 8013734:	4652      	mov	r2, sl
 8013736:	465b      	mov	r3, fp
 8013738:	4640      	mov	r0, r8
 801373a:	4649      	mov	r1, r9
 801373c:	f7ed f80c 	bl	8000758 <__aeabi_uldivmod>
 8013740:	4602      	mov	r2, r0
 8013742:	460b      	mov	r3, r1
 8013744:	4613      	mov	r3, r2
 8013746:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801374a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801374e:	d308      	bcc.n	8013762 <UART_SetConfig+0x9a2>
 8013750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013756:	d204      	bcs.n	8013762 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801375e:	60da      	str	r2, [r3, #12]
 8013760:	e17f      	b.n	8013a62 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8013762:	2301      	movs	r3, #1
 8013764:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013768:	e17b      	b.n	8013a62 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	69db      	ldr	r3, [r3, #28]
 801376e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013772:	f040 80bd 	bne.w	80138f0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8013776:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801377a:	2b20      	cmp	r3, #32
 801377c:	dc48      	bgt.n	8013810 <UART_SetConfig+0xa50>
 801377e:	2b00      	cmp	r3, #0
 8013780:	db7b      	blt.n	801387a <UART_SetConfig+0xaba>
 8013782:	2b20      	cmp	r3, #32
 8013784:	d879      	bhi.n	801387a <UART_SetConfig+0xaba>
 8013786:	a201      	add	r2, pc, #4	@ (adr r2, 801378c <UART_SetConfig+0x9cc>)
 8013788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801378c:	08013817 	.word	0x08013817
 8013790:	0801381f 	.word	0x0801381f
 8013794:	0801387b 	.word	0x0801387b
 8013798:	0801387b 	.word	0x0801387b
 801379c:	08013827 	.word	0x08013827
 80137a0:	0801387b 	.word	0x0801387b
 80137a4:	0801387b 	.word	0x0801387b
 80137a8:	0801387b 	.word	0x0801387b
 80137ac:	08013837 	.word	0x08013837
 80137b0:	0801387b 	.word	0x0801387b
 80137b4:	0801387b 	.word	0x0801387b
 80137b8:	0801387b 	.word	0x0801387b
 80137bc:	0801387b 	.word	0x0801387b
 80137c0:	0801387b 	.word	0x0801387b
 80137c4:	0801387b 	.word	0x0801387b
 80137c8:	0801387b 	.word	0x0801387b
 80137cc:	08013847 	.word	0x08013847
 80137d0:	0801387b 	.word	0x0801387b
 80137d4:	0801387b 	.word	0x0801387b
 80137d8:	0801387b 	.word	0x0801387b
 80137dc:	0801387b 	.word	0x0801387b
 80137e0:	0801387b 	.word	0x0801387b
 80137e4:	0801387b 	.word	0x0801387b
 80137e8:	0801387b 	.word	0x0801387b
 80137ec:	0801387b 	.word	0x0801387b
 80137f0:	0801387b 	.word	0x0801387b
 80137f4:	0801387b 	.word	0x0801387b
 80137f8:	0801387b 	.word	0x0801387b
 80137fc:	0801387b 	.word	0x0801387b
 8013800:	0801387b 	.word	0x0801387b
 8013804:	0801387b 	.word	0x0801387b
 8013808:	0801387b 	.word	0x0801387b
 801380c:	0801386d 	.word	0x0801386d
 8013810:	2b40      	cmp	r3, #64	@ 0x40
 8013812:	d02e      	beq.n	8013872 <UART_SetConfig+0xab2>
 8013814:	e031      	b.n	801387a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013816:	f7fa f871 	bl	800d8fc <HAL_RCC_GetPCLK1Freq>
 801381a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801381c:	e033      	b.n	8013886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801381e:	f7fa f883 	bl	800d928 <HAL_RCC_GetPCLK2Freq>
 8013822:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013824:	e02f      	b.n	8013886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801382a:	4618      	mov	r0, r3
 801382c:	f7fb ff1a 	bl	800f664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013834:	e027      	b.n	8013886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013836:	f107 0318 	add.w	r3, r7, #24
 801383a:	4618      	mov	r0, r3
 801383c:	f7fc f866 	bl	800f90c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013840:	69fb      	ldr	r3, [r7, #28]
 8013842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013844:	e01f      	b.n	8013886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013846:	4b69      	ldr	r3, [pc, #420]	@ (80139ec <UART_SetConfig+0xc2c>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	f003 0320 	and.w	r3, r3, #32
 801384e:	2b00      	cmp	r3, #0
 8013850:	d009      	beq.n	8013866 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013852:	4b66      	ldr	r3, [pc, #408]	@ (80139ec <UART_SetConfig+0xc2c>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	08db      	lsrs	r3, r3, #3
 8013858:	f003 0303 	and.w	r3, r3, #3
 801385c:	4a64      	ldr	r2, [pc, #400]	@ (80139f0 <UART_SetConfig+0xc30>)
 801385e:	fa22 f303 	lsr.w	r3, r2, r3
 8013862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013864:	e00f      	b.n	8013886 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8013866:	4b62      	ldr	r3, [pc, #392]	@ (80139f0 <UART_SetConfig+0xc30>)
 8013868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801386a:	e00c      	b.n	8013886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801386c:	4b61      	ldr	r3, [pc, #388]	@ (80139f4 <UART_SetConfig+0xc34>)
 801386e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013870:	e009      	b.n	8013886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013878:	e005      	b.n	8013886 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801387a:	2300      	movs	r3, #0
 801387c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801387e:	2301      	movs	r3, #1
 8013880:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013888:	2b00      	cmp	r3, #0
 801388a:	f000 80ea 	beq.w	8013a62 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013892:	4a55      	ldr	r2, [pc, #340]	@ (80139e8 <UART_SetConfig+0xc28>)
 8013894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013898:	461a      	mov	r2, r3
 801389a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801389c:	fbb3 f3f2 	udiv	r3, r3, r2
 80138a0:	005a      	lsls	r2, r3, #1
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	685b      	ldr	r3, [r3, #4]
 80138a6:	085b      	lsrs	r3, r3, #1
 80138a8:	441a      	add	r2, r3
 80138aa:	697b      	ldr	r3, [r7, #20]
 80138ac:	685b      	ldr	r3, [r3, #4]
 80138ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80138b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80138b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138b6:	2b0f      	cmp	r3, #15
 80138b8:	d916      	bls.n	80138e8 <UART_SetConfig+0xb28>
 80138ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80138c0:	d212      	bcs.n	80138e8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80138c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c4:	b29b      	uxth	r3, r3
 80138c6:	f023 030f 	bic.w	r3, r3, #15
 80138ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80138cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ce:	085b      	lsrs	r3, r3, #1
 80138d0:	b29b      	uxth	r3, r3
 80138d2:	f003 0307 	and.w	r3, r3, #7
 80138d6:	b29a      	uxth	r2, r3
 80138d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80138da:	4313      	orrs	r3, r2
 80138dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80138e4:	60da      	str	r2, [r3, #12]
 80138e6:	e0bc      	b.n	8013a62 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80138e8:	2301      	movs	r3, #1
 80138ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80138ee:	e0b8      	b.n	8013a62 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80138f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80138f4:	2b20      	cmp	r3, #32
 80138f6:	dc4b      	bgt.n	8013990 <UART_SetConfig+0xbd0>
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	f2c0 8087 	blt.w	8013a0c <UART_SetConfig+0xc4c>
 80138fe:	2b20      	cmp	r3, #32
 8013900:	f200 8084 	bhi.w	8013a0c <UART_SetConfig+0xc4c>
 8013904:	a201      	add	r2, pc, #4	@ (adr r2, 801390c <UART_SetConfig+0xb4c>)
 8013906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801390a:	bf00      	nop
 801390c:	08013997 	.word	0x08013997
 8013910:	0801399f 	.word	0x0801399f
 8013914:	08013a0d 	.word	0x08013a0d
 8013918:	08013a0d 	.word	0x08013a0d
 801391c:	080139a7 	.word	0x080139a7
 8013920:	08013a0d 	.word	0x08013a0d
 8013924:	08013a0d 	.word	0x08013a0d
 8013928:	08013a0d 	.word	0x08013a0d
 801392c:	080139b7 	.word	0x080139b7
 8013930:	08013a0d 	.word	0x08013a0d
 8013934:	08013a0d 	.word	0x08013a0d
 8013938:	08013a0d 	.word	0x08013a0d
 801393c:	08013a0d 	.word	0x08013a0d
 8013940:	08013a0d 	.word	0x08013a0d
 8013944:	08013a0d 	.word	0x08013a0d
 8013948:	08013a0d 	.word	0x08013a0d
 801394c:	080139c7 	.word	0x080139c7
 8013950:	08013a0d 	.word	0x08013a0d
 8013954:	08013a0d 	.word	0x08013a0d
 8013958:	08013a0d 	.word	0x08013a0d
 801395c:	08013a0d 	.word	0x08013a0d
 8013960:	08013a0d 	.word	0x08013a0d
 8013964:	08013a0d 	.word	0x08013a0d
 8013968:	08013a0d 	.word	0x08013a0d
 801396c:	08013a0d 	.word	0x08013a0d
 8013970:	08013a0d 	.word	0x08013a0d
 8013974:	08013a0d 	.word	0x08013a0d
 8013978:	08013a0d 	.word	0x08013a0d
 801397c:	08013a0d 	.word	0x08013a0d
 8013980:	08013a0d 	.word	0x08013a0d
 8013984:	08013a0d 	.word	0x08013a0d
 8013988:	08013a0d 	.word	0x08013a0d
 801398c:	080139ff 	.word	0x080139ff
 8013990:	2b40      	cmp	r3, #64	@ 0x40
 8013992:	d037      	beq.n	8013a04 <UART_SetConfig+0xc44>
 8013994:	e03a      	b.n	8013a0c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013996:	f7f9 ffb1 	bl	800d8fc <HAL_RCC_GetPCLK1Freq>
 801399a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801399c:	e03c      	b.n	8013a18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801399e:	f7f9 ffc3 	bl	800d928 <HAL_RCC_GetPCLK2Freq>
 80139a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80139a4:	e038      	b.n	8013a18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80139a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7fb fe5a 	bl	800f664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80139b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139b4:	e030      	b.n	8013a18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80139b6:	f107 0318 	add.w	r3, r7, #24
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7fb ffa6 	bl	800f90c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80139c0:	69fb      	ldr	r3, [r7, #28]
 80139c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139c4:	e028      	b.n	8013a18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80139c6:	4b09      	ldr	r3, [pc, #36]	@ (80139ec <UART_SetConfig+0xc2c>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	f003 0320 	and.w	r3, r3, #32
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d012      	beq.n	80139f8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80139d2:	4b06      	ldr	r3, [pc, #24]	@ (80139ec <UART_SetConfig+0xc2c>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	08db      	lsrs	r3, r3, #3
 80139d8:	f003 0303 	and.w	r3, r3, #3
 80139dc:	4a04      	ldr	r2, [pc, #16]	@ (80139f0 <UART_SetConfig+0xc30>)
 80139de:	fa22 f303 	lsr.w	r3, r2, r3
 80139e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80139e4:	e018      	b.n	8013a18 <UART_SetConfig+0xc58>
 80139e6:	bf00      	nop
 80139e8:	0801d778 	.word	0x0801d778
 80139ec:	58024400 	.word	0x58024400
 80139f0:	03d09000 	.word	0x03d09000
 80139f4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80139f8:	4b24      	ldr	r3, [pc, #144]	@ (8013a8c <UART_SetConfig+0xccc>)
 80139fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139fc:	e00c      	b.n	8013a18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80139fe:	4b24      	ldr	r3, [pc, #144]	@ (8013a90 <UART_SetConfig+0xcd0>)
 8013a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a02:	e009      	b.n	8013a18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013a04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a0a:	e005      	b.n	8013a18 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013a10:	2301      	movs	r3, #1
 8013a12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013a16:	bf00      	nop
    }

    if (pclk != 0U)
 8013a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d021      	beq.n	8013a62 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a22:	4a1c      	ldr	r2, [pc, #112]	@ (8013a94 <UART_SetConfig+0xcd4>)
 8013a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a28:	461a      	mov	r2, r3
 8013a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a2c:	fbb3 f2f2 	udiv	r2, r3, r2
 8013a30:	697b      	ldr	r3, [r7, #20]
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	085b      	lsrs	r3, r3, #1
 8013a36:	441a      	add	r2, r3
 8013a38:	697b      	ldr	r3, [r7, #20]
 8013a3a:	685b      	ldr	r3, [r3, #4]
 8013a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a40:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a44:	2b0f      	cmp	r3, #15
 8013a46:	d909      	bls.n	8013a5c <UART_SetConfig+0xc9c>
 8013a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013a4e:	d205      	bcs.n	8013a5c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a52:	b29a      	uxth	r2, r3
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	60da      	str	r2, [r3, #12]
 8013a5a:	e002      	b.n	8013a62 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8013a5c:	2301      	movs	r3, #1
 8013a5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	2201      	movs	r2, #1
 8013a66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8013a6a:	697b      	ldr	r3, [r7, #20]
 8013a6c:	2201      	movs	r2, #1
 8013a6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013a72:	697b      	ldr	r3, [r7, #20]
 8013a74:	2200      	movs	r2, #0
 8013a76:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8013a78:	697b      	ldr	r3, [r7, #20]
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8013a7e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8013a82:	4618      	mov	r0, r3
 8013a84:	3748      	adds	r7, #72	@ 0x48
 8013a86:	46bd      	mov	sp, r7
 8013a88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013a8c:	03d09000 	.word	0x03d09000
 8013a90:	003d0900 	.word	0x003d0900
 8013a94:	0801d778 	.word	0x0801d778

08013a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013a98:	b480      	push	{r7}
 8013a9a:	b083      	sub	sp, #12
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013aa4:	f003 0308 	and.w	r3, r3, #8
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d00a      	beq.n	8013ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	430a      	orrs	r2, r1
 8013ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ac6:	f003 0301 	and.w	r3, r3, #1
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d00a      	beq.n	8013ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	685b      	ldr	r3, [r3, #4]
 8013ad4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	430a      	orrs	r2, r1
 8013ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ae8:	f003 0302 	and.w	r3, r3, #2
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d00a      	beq.n	8013b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	430a      	orrs	r2, r1
 8013b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b0a:	f003 0304 	and.w	r3, r3, #4
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d00a      	beq.n	8013b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	685b      	ldr	r3, [r3, #4]
 8013b18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	430a      	orrs	r2, r1
 8013b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b2c:	f003 0310 	and.w	r3, r3, #16
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d00a      	beq.n	8013b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	689b      	ldr	r3, [r3, #8]
 8013b3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	430a      	orrs	r2, r1
 8013b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b4e:	f003 0320 	and.w	r3, r3, #32
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d00a      	beq.n	8013b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	689b      	ldr	r3, [r3, #8]
 8013b5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	430a      	orrs	r2, r1
 8013b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d01a      	beq.n	8013bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	685b      	ldr	r3, [r3, #4]
 8013b7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	430a      	orrs	r2, r1
 8013b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013b96:	d10a      	bne.n	8013bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	430a      	orrs	r2, r1
 8013bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d00a      	beq.n	8013bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	685b      	ldr	r3, [r3, #4]
 8013bc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	430a      	orrs	r2, r1
 8013bce:	605a      	str	r2, [r3, #4]
  }
}
 8013bd0:	bf00      	nop
 8013bd2:	370c      	adds	r7, #12
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b098      	sub	sp, #96	@ 0x60
 8013be0:	af02      	add	r7, sp, #8
 8013be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	2200      	movs	r2, #0
 8013be8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013bec:	f7f3 f884 	bl	8006cf8 <HAL_GetTick>
 8013bf0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	f003 0308 	and.w	r3, r3, #8
 8013bfc:	2b08      	cmp	r3, #8
 8013bfe:	d12f      	bne.n	8013c60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013c00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013c04:	9300      	str	r3, [sp, #0]
 8013c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c08:	2200      	movs	r2, #0
 8013c0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8013c0e:	6878      	ldr	r0, [r7, #4]
 8013c10:	f000 f88e 	bl	8013d30 <UART_WaitOnFlagUntilTimeout>
 8013c14:	4603      	mov	r3, r0
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d022      	beq.n	8013c60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c22:	e853 3f00 	ldrex	r3, [r3]
 8013c26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013c2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	461a      	mov	r2, r3
 8013c36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013c3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013c40:	e841 2300 	strex	r3, r2, [r1]
 8013c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d1e6      	bne.n	8013c1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2220      	movs	r2, #32
 8013c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2200      	movs	r2, #0
 8013c58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013c5c:	2303      	movs	r3, #3
 8013c5e:	e063      	b.n	8013d28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	f003 0304 	and.w	r3, r3, #4
 8013c6a:	2b04      	cmp	r3, #4
 8013c6c:	d149      	bne.n	8013d02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013c6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013c72:	9300      	str	r3, [sp, #0]
 8013c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c76:	2200      	movs	r2, #0
 8013c78:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f000 f857 	bl	8013d30 <UART_WaitOnFlagUntilTimeout>
 8013c82:	4603      	mov	r3, r0
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d03c      	beq.n	8013d02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c90:	e853 3f00 	ldrex	r3, [r3]
 8013c94:	623b      	str	r3, [r7, #32]
   return(result);
 8013c96:	6a3b      	ldr	r3, [r7, #32]
 8013c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8013ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013caa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013cae:	e841 2300 	strex	r3, r2, [r1]
 8013cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d1e6      	bne.n	8013c88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	3308      	adds	r3, #8
 8013cc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cc2:	693b      	ldr	r3, [r7, #16]
 8013cc4:	e853 3f00 	ldrex	r3, [r3]
 8013cc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	f023 0301 	bic.w	r3, r3, #1
 8013cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	3308      	adds	r3, #8
 8013cd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013cda:	61fa      	str	r2, [r7, #28]
 8013cdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cde:	69b9      	ldr	r1, [r7, #24]
 8013ce0:	69fa      	ldr	r2, [r7, #28]
 8013ce2:	e841 2300 	strex	r3, r2, [r1]
 8013ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8013ce8:	697b      	ldr	r3, [r7, #20]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d1e5      	bne.n	8013cba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2220      	movs	r2, #32
 8013cf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013cfe:	2303      	movs	r3, #3
 8013d00:	e012      	b.n	8013d28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	2220      	movs	r2, #32
 8013d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2220      	movs	r2, #32
 8013d0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2200      	movs	r2, #0
 8013d16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	2200      	movs	r2, #0
 8013d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013d26:	2300      	movs	r3, #0
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3758      	adds	r7, #88	@ 0x58
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}

08013d30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b084      	sub	sp, #16
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	60f8      	str	r0, [r7, #12]
 8013d38:	60b9      	str	r1, [r7, #8]
 8013d3a:	603b      	str	r3, [r7, #0]
 8013d3c:	4613      	mov	r3, r2
 8013d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013d40:	e04f      	b.n	8013de2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013d42:	69bb      	ldr	r3, [r7, #24]
 8013d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d48:	d04b      	beq.n	8013de2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013d4a:	f7f2 ffd5 	bl	8006cf8 <HAL_GetTick>
 8013d4e:	4602      	mov	r2, r0
 8013d50:	683b      	ldr	r3, [r7, #0]
 8013d52:	1ad3      	subs	r3, r2, r3
 8013d54:	69ba      	ldr	r2, [r7, #24]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d302      	bcc.n	8013d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8013d5a:	69bb      	ldr	r3, [r7, #24]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d101      	bne.n	8013d64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013d60:	2303      	movs	r3, #3
 8013d62:	e04e      	b.n	8013e02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	f003 0304 	and.w	r3, r3, #4
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d037      	beq.n	8013de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	2b80      	cmp	r3, #128	@ 0x80
 8013d76:	d034      	beq.n	8013de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	2b40      	cmp	r3, #64	@ 0x40
 8013d7c:	d031      	beq.n	8013de2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	69db      	ldr	r3, [r3, #28]
 8013d84:	f003 0308 	and.w	r3, r3, #8
 8013d88:	2b08      	cmp	r3, #8
 8013d8a:	d110      	bne.n	8013dae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	2208      	movs	r2, #8
 8013d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013d94:	68f8      	ldr	r0, [r7, #12]
 8013d96:	f000 f839 	bl	8013e0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	2208      	movs	r2, #8
 8013d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	2200      	movs	r2, #0
 8013da6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013daa:	2301      	movs	r3, #1
 8013dac:	e029      	b.n	8013e02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	69db      	ldr	r3, [r3, #28]
 8013db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013dbc:	d111      	bne.n	8013de2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013dc8:	68f8      	ldr	r0, [r7, #12]
 8013dca:	f000 f81f 	bl	8013e0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	2220      	movs	r2, #32
 8013dd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	2200      	movs	r2, #0
 8013dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013dde:	2303      	movs	r3, #3
 8013de0:	e00f      	b.n	8013e02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	69da      	ldr	r2, [r3, #28]
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	4013      	ands	r3, r2
 8013dec:	68ba      	ldr	r2, [r7, #8]
 8013dee:	429a      	cmp	r2, r3
 8013df0:	bf0c      	ite	eq
 8013df2:	2301      	moveq	r3, #1
 8013df4:	2300      	movne	r3, #0
 8013df6:	b2db      	uxtb	r3, r3
 8013df8:	461a      	mov	r2, r3
 8013dfa:	79fb      	ldrb	r3, [r7, #7]
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d0a0      	beq.n	8013d42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013e00:	2300      	movs	r3, #0
}
 8013e02:	4618      	mov	r0, r3
 8013e04:	3710      	adds	r7, #16
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bd80      	pop	{r7, pc}
	...

08013e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013e0c:	b480      	push	{r7}
 8013e0e:	b095      	sub	sp, #84	@ 0x54
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e1c:	e853 3f00 	ldrex	r3, [r3]
 8013e20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	461a      	mov	r2, r3
 8013e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e32:	643b      	str	r3, [r7, #64]	@ 0x40
 8013e34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013e38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013e3a:	e841 2300 	strex	r3, r2, [r1]
 8013e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d1e6      	bne.n	8013e14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	3308      	adds	r3, #8
 8013e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e4e:	6a3b      	ldr	r3, [r7, #32]
 8013e50:	e853 3f00 	ldrex	r3, [r3]
 8013e54:	61fb      	str	r3, [r7, #28]
   return(result);
 8013e56:	69fa      	ldr	r2, [r7, #28]
 8013e58:	4b1e      	ldr	r3, [pc, #120]	@ (8013ed4 <UART_EndRxTransfer+0xc8>)
 8013e5a:	4013      	ands	r3, r2
 8013e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	3308      	adds	r3, #8
 8013e64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013e68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013e6e:	e841 2300 	strex	r3, r2, [r1]
 8013e72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d1e5      	bne.n	8013e46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e7e:	2b01      	cmp	r3, #1
 8013e80:	d118      	bne.n	8013eb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	e853 3f00 	ldrex	r3, [r3]
 8013e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	f023 0310 	bic.w	r3, r3, #16
 8013e96:	647b      	str	r3, [r7, #68]	@ 0x44
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	461a      	mov	r2, r3
 8013e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ea0:	61bb      	str	r3, [r7, #24]
 8013ea2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ea4:	6979      	ldr	r1, [r7, #20]
 8013ea6:	69ba      	ldr	r2, [r7, #24]
 8013ea8:	e841 2300 	strex	r3, r2, [r1]
 8013eac:	613b      	str	r3, [r7, #16]
   return(result);
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d1e6      	bne.n	8013e82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2220      	movs	r2, #32
 8013eb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013ec8:	bf00      	nop
 8013eca:	3754      	adds	r7, #84	@ 0x54
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed2:	4770      	bx	lr
 8013ed4:	effffffe 	.word	0xeffffffe

08013ed8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013ed8:	b480      	push	{r7}
 8013eda:	b085      	sub	sp, #20
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013ee6:	2b01      	cmp	r3, #1
 8013ee8:	d101      	bne.n	8013eee <HAL_UARTEx_DisableFifoMode+0x16>
 8013eea:	2302      	movs	r3, #2
 8013eec:	e027      	b.n	8013f3e <HAL_UARTEx_DisableFifoMode+0x66>
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2201      	movs	r2, #1
 8013ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2224      	movs	r2, #36	@ 0x24
 8013efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	681a      	ldr	r2, [r3, #0]
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	f022 0201 	bic.w	r2, r2, #1
 8013f14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8013f1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2200      	movs	r2, #0
 8013f22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	68fa      	ldr	r2, [r7, #12]
 8013f2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2220      	movs	r2, #32
 8013f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	2200      	movs	r2, #0
 8013f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013f3c:	2300      	movs	r3, #0
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	3714      	adds	r7, #20
 8013f42:	46bd      	mov	sp, r7
 8013f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f48:	4770      	bx	lr

08013f4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013f4a:	b580      	push	{r7, lr}
 8013f4c:	b084      	sub	sp, #16
 8013f4e:	af00      	add	r7, sp, #0
 8013f50:	6078      	str	r0, [r7, #4]
 8013f52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013f5a:	2b01      	cmp	r3, #1
 8013f5c:	d101      	bne.n	8013f62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013f5e:	2302      	movs	r3, #2
 8013f60:	e02d      	b.n	8013fbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	2201      	movs	r2, #1
 8013f66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	2224      	movs	r2, #36	@ 0x24
 8013f6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	681a      	ldr	r2, [r3, #0]
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	f022 0201 	bic.w	r2, r2, #1
 8013f88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	689b      	ldr	r3, [r3, #8]
 8013f90:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	683a      	ldr	r2, [r7, #0]
 8013f9a:	430a      	orrs	r2, r1
 8013f9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f000 f850 	bl	8014044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	68fa      	ldr	r2, [r7, #12]
 8013faa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2220      	movs	r2, #32
 8013fb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013fbc:	2300      	movs	r3, #0
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3710      	adds	r7, #16
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}

08013fc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013fc6:	b580      	push	{r7, lr}
 8013fc8:	b084      	sub	sp, #16
 8013fca:	af00      	add	r7, sp, #0
 8013fcc:	6078      	str	r0, [r7, #4]
 8013fce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013fd6:	2b01      	cmp	r3, #1
 8013fd8:	d101      	bne.n	8013fde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013fda:	2302      	movs	r3, #2
 8013fdc:	e02d      	b.n	801403a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	2201      	movs	r2, #1
 8013fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	2224      	movs	r2, #36	@ 0x24
 8013fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	681a      	ldr	r2, [r3, #0]
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	f022 0201 	bic.w	r2, r2, #1
 8014004:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	689b      	ldr	r3, [r3, #8]
 801400c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	683a      	ldr	r2, [r7, #0]
 8014016:	430a      	orrs	r2, r1
 8014018:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f000 f812 	bl	8014044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	68fa      	ldr	r2, [r7, #12]
 8014026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	2220      	movs	r2, #32
 801402c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2200      	movs	r2, #0
 8014034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014038:	2300      	movs	r3, #0
}
 801403a:	4618      	mov	r0, r3
 801403c:	3710      	adds	r7, #16
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}
	...

08014044 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014044:	b480      	push	{r7}
 8014046:	b085      	sub	sp, #20
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014050:	2b00      	cmp	r3, #0
 8014052:	d108      	bne.n	8014066 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	2201      	movs	r2, #1
 8014058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	2201      	movs	r2, #1
 8014060:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014064:	e031      	b.n	80140ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014066:	2310      	movs	r3, #16
 8014068:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801406a:	2310      	movs	r3, #16
 801406c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	689b      	ldr	r3, [r3, #8]
 8014074:	0e5b      	lsrs	r3, r3, #25
 8014076:	b2db      	uxtb	r3, r3
 8014078:	f003 0307 	and.w	r3, r3, #7
 801407c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	689b      	ldr	r3, [r3, #8]
 8014084:	0f5b      	lsrs	r3, r3, #29
 8014086:	b2db      	uxtb	r3, r3
 8014088:	f003 0307 	and.w	r3, r3, #7
 801408c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801408e:	7bbb      	ldrb	r3, [r7, #14]
 8014090:	7b3a      	ldrb	r2, [r7, #12]
 8014092:	4911      	ldr	r1, [pc, #68]	@ (80140d8 <UARTEx_SetNbDataToProcess+0x94>)
 8014094:	5c8a      	ldrb	r2, [r1, r2]
 8014096:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801409a:	7b3a      	ldrb	r2, [r7, #12]
 801409c:	490f      	ldr	r1, [pc, #60]	@ (80140dc <UARTEx_SetNbDataToProcess+0x98>)
 801409e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80140a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80140a4:	b29a      	uxth	r2, r3
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80140ac:	7bfb      	ldrb	r3, [r7, #15]
 80140ae:	7b7a      	ldrb	r2, [r7, #13]
 80140b0:	4909      	ldr	r1, [pc, #36]	@ (80140d8 <UARTEx_SetNbDataToProcess+0x94>)
 80140b2:	5c8a      	ldrb	r2, [r1, r2]
 80140b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80140b8:	7b7a      	ldrb	r2, [r7, #13]
 80140ba:	4908      	ldr	r1, [pc, #32]	@ (80140dc <UARTEx_SetNbDataToProcess+0x98>)
 80140bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80140be:	fb93 f3f2 	sdiv	r3, r3, r2
 80140c2:	b29a      	uxth	r2, r3
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80140ca:	bf00      	nop
 80140cc:	3714      	adds	r7, #20
 80140ce:	46bd      	mov	sp, r7
 80140d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d4:	4770      	bx	lr
 80140d6:	bf00      	nop
 80140d8:	0801d790 	.word	0x0801d790
 80140dc:	0801d798 	.word	0x0801d798

080140e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80140e0:	b084      	sub	sp, #16
 80140e2:	b580      	push	{r7, lr}
 80140e4:	b084      	sub	sp, #16
 80140e6:	af00      	add	r7, sp, #0
 80140e8:	6078      	str	r0, [r7, #4]
 80140ea:	f107 001c 	add.w	r0, r7, #28
 80140ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80140f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80140f6:	2b01      	cmp	r3, #1
 80140f8:	d121      	bne.n	801413e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	68da      	ldr	r2, [r3, #12]
 801410a:	4b2c      	ldr	r3, [pc, #176]	@ (80141bc <USB_CoreInit+0xdc>)
 801410c:	4013      	ands	r3, r2
 801410e:	687a      	ldr	r2, [r7, #4]
 8014110:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	68db      	ldr	r3, [r3, #12]
 8014116:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801411e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014122:	2b01      	cmp	r3, #1
 8014124:	d105      	bne.n	8014132 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	68db      	ldr	r3, [r3, #12]
 801412a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f001 faf6 	bl	8015724 <USB_CoreReset>
 8014138:	4603      	mov	r3, r0
 801413a:	73fb      	strb	r3, [r7, #15]
 801413c:	e01b      	b.n	8014176 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	68db      	ldr	r3, [r3, #12]
 8014142:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f001 faea 	bl	8015724 <USB_CoreReset>
 8014150:	4603      	mov	r3, r0
 8014152:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8014154:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8014158:	2b00      	cmp	r3, #0
 801415a:	d106      	bne.n	801416a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014160:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	639a      	str	r2, [r3, #56]	@ 0x38
 8014168:	e005      	b.n	8014176 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801416e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014176:	7fbb      	ldrb	r3, [r7, #30]
 8014178:	2b01      	cmp	r3, #1
 801417a:	d116      	bne.n	80141aa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014180:	b29a      	uxth	r2, r3
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801418a:	4b0d      	ldr	r3, [pc, #52]	@ (80141c0 <USB_CoreInit+0xe0>)
 801418c:	4313      	orrs	r3, r2
 801418e:	687a      	ldr	r2, [r7, #4]
 8014190:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	689b      	ldr	r3, [r3, #8]
 8014196:	f043 0206 	orr.w	r2, r3, #6
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	689b      	ldr	r3, [r3, #8]
 80141a2:	f043 0220 	orr.w	r2, r3, #32
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80141aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80141ac:	4618      	mov	r0, r3
 80141ae:	3710      	adds	r7, #16
 80141b0:	46bd      	mov	sp, r7
 80141b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80141b6:	b004      	add	sp, #16
 80141b8:	4770      	bx	lr
 80141ba:	bf00      	nop
 80141bc:	ffbdffbf 	.word	0xffbdffbf
 80141c0:	03ee0000 	.word	0x03ee0000

080141c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80141c4:	b480      	push	{r7}
 80141c6:	b087      	sub	sp, #28
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	60f8      	str	r0, [r7, #12]
 80141cc:	60b9      	str	r1, [r7, #8]
 80141ce:	4613      	mov	r3, r2
 80141d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80141d2:	79fb      	ldrb	r3, [r7, #7]
 80141d4:	2b02      	cmp	r3, #2
 80141d6:	d165      	bne.n	80142a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	4a41      	ldr	r2, [pc, #260]	@ (80142e0 <USB_SetTurnaroundTime+0x11c>)
 80141dc:	4293      	cmp	r3, r2
 80141de:	d906      	bls.n	80141ee <USB_SetTurnaroundTime+0x2a>
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	4a40      	ldr	r2, [pc, #256]	@ (80142e4 <USB_SetTurnaroundTime+0x120>)
 80141e4:	4293      	cmp	r3, r2
 80141e6:	d202      	bcs.n	80141ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80141e8:	230f      	movs	r3, #15
 80141ea:	617b      	str	r3, [r7, #20]
 80141ec:	e062      	b.n	80142b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	4a3c      	ldr	r2, [pc, #240]	@ (80142e4 <USB_SetTurnaroundTime+0x120>)
 80141f2:	4293      	cmp	r3, r2
 80141f4:	d306      	bcc.n	8014204 <USB_SetTurnaroundTime+0x40>
 80141f6:	68bb      	ldr	r3, [r7, #8]
 80141f8:	4a3b      	ldr	r2, [pc, #236]	@ (80142e8 <USB_SetTurnaroundTime+0x124>)
 80141fa:	4293      	cmp	r3, r2
 80141fc:	d202      	bcs.n	8014204 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80141fe:	230e      	movs	r3, #14
 8014200:	617b      	str	r3, [r7, #20]
 8014202:	e057      	b.n	80142b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	4a38      	ldr	r2, [pc, #224]	@ (80142e8 <USB_SetTurnaroundTime+0x124>)
 8014208:	4293      	cmp	r3, r2
 801420a:	d306      	bcc.n	801421a <USB_SetTurnaroundTime+0x56>
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	4a37      	ldr	r2, [pc, #220]	@ (80142ec <USB_SetTurnaroundTime+0x128>)
 8014210:	4293      	cmp	r3, r2
 8014212:	d202      	bcs.n	801421a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8014214:	230d      	movs	r3, #13
 8014216:	617b      	str	r3, [r7, #20]
 8014218:	e04c      	b.n	80142b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801421a:	68bb      	ldr	r3, [r7, #8]
 801421c:	4a33      	ldr	r2, [pc, #204]	@ (80142ec <USB_SetTurnaroundTime+0x128>)
 801421e:	4293      	cmp	r3, r2
 8014220:	d306      	bcc.n	8014230 <USB_SetTurnaroundTime+0x6c>
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	4a32      	ldr	r2, [pc, #200]	@ (80142f0 <USB_SetTurnaroundTime+0x12c>)
 8014226:	4293      	cmp	r3, r2
 8014228:	d802      	bhi.n	8014230 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801422a:	230c      	movs	r3, #12
 801422c:	617b      	str	r3, [r7, #20]
 801422e:	e041      	b.n	80142b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	4a2f      	ldr	r2, [pc, #188]	@ (80142f0 <USB_SetTurnaroundTime+0x12c>)
 8014234:	4293      	cmp	r3, r2
 8014236:	d906      	bls.n	8014246 <USB_SetTurnaroundTime+0x82>
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	4a2e      	ldr	r2, [pc, #184]	@ (80142f4 <USB_SetTurnaroundTime+0x130>)
 801423c:	4293      	cmp	r3, r2
 801423e:	d802      	bhi.n	8014246 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014240:	230b      	movs	r3, #11
 8014242:	617b      	str	r3, [r7, #20]
 8014244:	e036      	b.n	80142b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	4a2a      	ldr	r2, [pc, #168]	@ (80142f4 <USB_SetTurnaroundTime+0x130>)
 801424a:	4293      	cmp	r3, r2
 801424c:	d906      	bls.n	801425c <USB_SetTurnaroundTime+0x98>
 801424e:	68bb      	ldr	r3, [r7, #8]
 8014250:	4a29      	ldr	r2, [pc, #164]	@ (80142f8 <USB_SetTurnaroundTime+0x134>)
 8014252:	4293      	cmp	r3, r2
 8014254:	d802      	bhi.n	801425c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8014256:	230a      	movs	r3, #10
 8014258:	617b      	str	r3, [r7, #20]
 801425a:	e02b      	b.n	80142b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801425c:	68bb      	ldr	r3, [r7, #8]
 801425e:	4a26      	ldr	r2, [pc, #152]	@ (80142f8 <USB_SetTurnaroundTime+0x134>)
 8014260:	4293      	cmp	r3, r2
 8014262:	d906      	bls.n	8014272 <USB_SetTurnaroundTime+0xae>
 8014264:	68bb      	ldr	r3, [r7, #8]
 8014266:	4a25      	ldr	r2, [pc, #148]	@ (80142fc <USB_SetTurnaroundTime+0x138>)
 8014268:	4293      	cmp	r3, r2
 801426a:	d202      	bcs.n	8014272 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801426c:	2309      	movs	r3, #9
 801426e:	617b      	str	r3, [r7, #20]
 8014270:	e020      	b.n	80142b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	4a21      	ldr	r2, [pc, #132]	@ (80142fc <USB_SetTurnaroundTime+0x138>)
 8014276:	4293      	cmp	r3, r2
 8014278:	d306      	bcc.n	8014288 <USB_SetTurnaroundTime+0xc4>
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	4a20      	ldr	r2, [pc, #128]	@ (8014300 <USB_SetTurnaroundTime+0x13c>)
 801427e:	4293      	cmp	r3, r2
 8014280:	d802      	bhi.n	8014288 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8014282:	2308      	movs	r3, #8
 8014284:	617b      	str	r3, [r7, #20]
 8014286:	e015      	b.n	80142b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	4a1d      	ldr	r2, [pc, #116]	@ (8014300 <USB_SetTurnaroundTime+0x13c>)
 801428c:	4293      	cmp	r3, r2
 801428e:	d906      	bls.n	801429e <USB_SetTurnaroundTime+0xda>
 8014290:	68bb      	ldr	r3, [r7, #8]
 8014292:	4a1c      	ldr	r2, [pc, #112]	@ (8014304 <USB_SetTurnaroundTime+0x140>)
 8014294:	4293      	cmp	r3, r2
 8014296:	d202      	bcs.n	801429e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014298:	2307      	movs	r3, #7
 801429a:	617b      	str	r3, [r7, #20]
 801429c:	e00a      	b.n	80142b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801429e:	2306      	movs	r3, #6
 80142a0:	617b      	str	r3, [r7, #20]
 80142a2:	e007      	b.n	80142b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80142a4:	79fb      	ldrb	r3, [r7, #7]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d102      	bne.n	80142b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80142aa:	2309      	movs	r3, #9
 80142ac:	617b      	str	r3, [r7, #20]
 80142ae:	e001      	b.n	80142b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80142b0:	2309      	movs	r3, #9
 80142b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	68db      	ldr	r3, [r3, #12]
 80142b8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	68da      	ldr	r2, [r3, #12]
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	029b      	lsls	r3, r3, #10
 80142c8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80142cc:	431a      	orrs	r2, r3
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80142d2:	2300      	movs	r3, #0
}
 80142d4:	4618      	mov	r0, r3
 80142d6:	371c      	adds	r7, #28
 80142d8:	46bd      	mov	sp, r7
 80142da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142de:	4770      	bx	lr
 80142e0:	00d8acbf 	.word	0x00d8acbf
 80142e4:	00e4e1c0 	.word	0x00e4e1c0
 80142e8:	00f42400 	.word	0x00f42400
 80142ec:	01067380 	.word	0x01067380
 80142f0:	011a499f 	.word	0x011a499f
 80142f4:	01312cff 	.word	0x01312cff
 80142f8:	014ca43f 	.word	0x014ca43f
 80142fc:	016e3600 	.word	0x016e3600
 8014300:	01a6ab1f 	.word	0x01a6ab1f
 8014304:	01e84800 	.word	0x01e84800

08014308 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014308:	b480      	push	{r7}
 801430a:	b083      	sub	sp, #12
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	689b      	ldr	r3, [r3, #8]
 8014314:	f043 0201 	orr.w	r2, r3, #1
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801431c:	2300      	movs	r3, #0
}
 801431e:	4618      	mov	r0, r3
 8014320:	370c      	adds	r7, #12
 8014322:	46bd      	mov	sp, r7
 8014324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014328:	4770      	bx	lr

0801432a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801432a:	b480      	push	{r7}
 801432c:	b083      	sub	sp, #12
 801432e:	af00      	add	r7, sp, #0
 8014330:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	689b      	ldr	r3, [r3, #8]
 8014336:	f023 0201 	bic.w	r2, r3, #1
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801433e:	2300      	movs	r3, #0
}
 8014340:	4618      	mov	r0, r3
 8014342:	370c      	adds	r7, #12
 8014344:	46bd      	mov	sp, r7
 8014346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434a:	4770      	bx	lr

0801434c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801434c:	b580      	push	{r7, lr}
 801434e:	b084      	sub	sp, #16
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
 8014354:	460b      	mov	r3, r1
 8014356:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014358:	2300      	movs	r3, #0
 801435a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	68db      	ldr	r3, [r3, #12]
 8014360:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014368:	78fb      	ldrb	r3, [r7, #3]
 801436a:	2b01      	cmp	r3, #1
 801436c:	d115      	bne.n	801439a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	68db      	ldr	r3, [r3, #12]
 8014372:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801437a:	200a      	movs	r0, #10
 801437c:	f7f2 fcc8 	bl	8006d10 <HAL_Delay>
      ms += 10U;
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	330a      	adds	r3, #10
 8014384:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014386:	6878      	ldr	r0, [r7, #4]
 8014388:	f001 f93b 	bl	8015602 <USB_GetMode>
 801438c:	4603      	mov	r3, r0
 801438e:	2b01      	cmp	r3, #1
 8014390:	d01e      	beq.n	80143d0 <USB_SetCurrentMode+0x84>
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	2bc7      	cmp	r3, #199	@ 0xc7
 8014396:	d9f0      	bls.n	801437a <USB_SetCurrentMode+0x2e>
 8014398:	e01a      	b.n	80143d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801439a:	78fb      	ldrb	r3, [r7, #3]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d115      	bne.n	80143cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80143ac:	200a      	movs	r0, #10
 80143ae:	f7f2 fcaf 	bl	8006d10 <HAL_Delay>
      ms += 10U;
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	330a      	adds	r3, #10
 80143b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80143b8:	6878      	ldr	r0, [r7, #4]
 80143ba:	f001 f922 	bl	8015602 <USB_GetMode>
 80143be:	4603      	mov	r3, r0
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d005      	beq.n	80143d0 <USB_SetCurrentMode+0x84>
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80143c8:	d9f0      	bls.n	80143ac <USB_SetCurrentMode+0x60>
 80143ca:	e001      	b.n	80143d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80143cc:	2301      	movs	r3, #1
 80143ce:	e005      	b.n	80143dc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	2bc8      	cmp	r3, #200	@ 0xc8
 80143d4:	d101      	bne.n	80143da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80143d6:	2301      	movs	r3, #1
 80143d8:	e000      	b.n	80143dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80143da:	2300      	movs	r3, #0
}
 80143dc:	4618      	mov	r0, r3
 80143de:	3710      	adds	r7, #16
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}

080143e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80143e4:	b084      	sub	sp, #16
 80143e6:	b580      	push	{r7, lr}
 80143e8:	b086      	sub	sp, #24
 80143ea:	af00      	add	r7, sp, #0
 80143ec:	6078      	str	r0, [r7, #4]
 80143ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80143f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80143f6:	2300      	movs	r3, #0
 80143f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80143fe:	2300      	movs	r3, #0
 8014400:	613b      	str	r3, [r7, #16]
 8014402:	e009      	b.n	8014418 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014404:	687a      	ldr	r2, [r7, #4]
 8014406:	693b      	ldr	r3, [r7, #16]
 8014408:	3340      	adds	r3, #64	@ 0x40
 801440a:	009b      	lsls	r3, r3, #2
 801440c:	4413      	add	r3, r2
 801440e:	2200      	movs	r2, #0
 8014410:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8014412:	693b      	ldr	r3, [r7, #16]
 8014414:	3301      	adds	r3, #1
 8014416:	613b      	str	r3, [r7, #16]
 8014418:	693b      	ldr	r3, [r7, #16]
 801441a:	2b0e      	cmp	r3, #14
 801441c:	d9f2      	bls.n	8014404 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801441e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014422:	2b00      	cmp	r3, #0
 8014424:	d11c      	bne.n	8014460 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801442c:	685b      	ldr	r3, [r3, #4]
 801442e:	68fa      	ldr	r2, [r7, #12]
 8014430:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014434:	f043 0302 	orr.w	r3, r3, #2
 8014438:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801443e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	601a      	str	r2, [r3, #0]
 801445e:	e005      	b.n	801446c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014464:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014472:	461a      	mov	r2, r3
 8014474:	2300      	movs	r3, #0
 8014476:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014478:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 801447c:	2b01      	cmp	r3, #1
 801447e:	d10d      	bne.n	801449c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014484:	2b00      	cmp	r3, #0
 8014486:	d104      	bne.n	8014492 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014488:	2100      	movs	r1, #0
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f000 f968 	bl	8014760 <USB_SetDevSpeed>
 8014490:	e008      	b.n	80144a4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014492:	2101      	movs	r1, #1
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f000 f963 	bl	8014760 <USB_SetDevSpeed>
 801449a:	e003      	b.n	80144a4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801449c:	2103      	movs	r1, #3
 801449e:	6878      	ldr	r0, [r7, #4]
 80144a0:	f000 f95e 	bl	8014760 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80144a4:	2110      	movs	r1, #16
 80144a6:	6878      	ldr	r0, [r7, #4]
 80144a8:	f000 f8fa 	bl	80146a0 <USB_FlushTxFifo>
 80144ac:	4603      	mov	r3, r0
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d001      	beq.n	80144b6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80144b2:	2301      	movs	r3, #1
 80144b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	f000 f924 	bl	8014704 <USB_FlushRxFifo>
 80144bc:	4603      	mov	r3, r0
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d001      	beq.n	80144c6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80144c2:	2301      	movs	r3, #1
 80144c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80144cc:	461a      	mov	r2, r3
 80144ce:	2300      	movs	r3, #0
 80144d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80144d8:	461a      	mov	r2, r3
 80144da:	2300      	movs	r3, #0
 80144dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80144e4:	461a      	mov	r2, r3
 80144e6:	2300      	movs	r3, #0
 80144e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80144ea:	2300      	movs	r3, #0
 80144ec:	613b      	str	r3, [r7, #16]
 80144ee:	e043      	b.n	8014578 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80144f0:	693b      	ldr	r3, [r7, #16]
 80144f2:	015a      	lsls	r2, r3, #5
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	4413      	add	r3, r2
 80144f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014502:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014506:	d118      	bne.n	801453a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8014508:	693b      	ldr	r3, [r7, #16]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d10a      	bne.n	8014524 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801450e:	693b      	ldr	r3, [r7, #16]
 8014510:	015a      	lsls	r2, r3, #5
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	4413      	add	r3, r2
 8014516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801451a:	461a      	mov	r2, r3
 801451c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014520:	6013      	str	r3, [r2, #0]
 8014522:	e013      	b.n	801454c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014524:	693b      	ldr	r3, [r7, #16]
 8014526:	015a      	lsls	r2, r3, #5
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	4413      	add	r3, r2
 801452c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014530:	461a      	mov	r2, r3
 8014532:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014536:	6013      	str	r3, [r2, #0]
 8014538:	e008      	b.n	801454c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801453a:	693b      	ldr	r3, [r7, #16]
 801453c:	015a      	lsls	r2, r3, #5
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	4413      	add	r3, r2
 8014542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014546:	461a      	mov	r2, r3
 8014548:	2300      	movs	r3, #0
 801454a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801454c:	693b      	ldr	r3, [r7, #16]
 801454e:	015a      	lsls	r2, r3, #5
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	4413      	add	r3, r2
 8014554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014558:	461a      	mov	r2, r3
 801455a:	2300      	movs	r3, #0
 801455c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	015a      	lsls	r2, r3, #5
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	4413      	add	r3, r2
 8014566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801456a:	461a      	mov	r2, r3
 801456c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014570:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	3301      	adds	r3, #1
 8014576:	613b      	str	r3, [r7, #16]
 8014578:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801457c:	461a      	mov	r2, r3
 801457e:	693b      	ldr	r3, [r7, #16]
 8014580:	4293      	cmp	r3, r2
 8014582:	d3b5      	bcc.n	80144f0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014584:	2300      	movs	r3, #0
 8014586:	613b      	str	r3, [r7, #16]
 8014588:	e043      	b.n	8014612 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801458a:	693b      	ldr	r3, [r7, #16]
 801458c:	015a      	lsls	r2, r3, #5
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	4413      	add	r3, r2
 8014592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801459c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80145a0:	d118      	bne.n	80145d4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d10a      	bne.n	80145be <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80145a8:	693b      	ldr	r3, [r7, #16]
 80145aa:	015a      	lsls	r2, r3, #5
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	4413      	add	r3, r2
 80145b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145b4:	461a      	mov	r2, r3
 80145b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80145ba:	6013      	str	r3, [r2, #0]
 80145bc:	e013      	b.n	80145e6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80145be:	693b      	ldr	r3, [r7, #16]
 80145c0:	015a      	lsls	r2, r3, #5
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	4413      	add	r3, r2
 80145c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145ca:	461a      	mov	r2, r3
 80145cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80145d0:	6013      	str	r3, [r2, #0]
 80145d2:	e008      	b.n	80145e6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80145d4:	693b      	ldr	r3, [r7, #16]
 80145d6:	015a      	lsls	r2, r3, #5
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	4413      	add	r3, r2
 80145dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145e0:	461a      	mov	r2, r3
 80145e2:	2300      	movs	r3, #0
 80145e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80145e6:	693b      	ldr	r3, [r7, #16]
 80145e8:	015a      	lsls	r2, r3, #5
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	4413      	add	r3, r2
 80145ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145f2:	461a      	mov	r2, r3
 80145f4:	2300      	movs	r3, #0
 80145f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	015a      	lsls	r2, r3, #5
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	4413      	add	r3, r2
 8014600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014604:	461a      	mov	r2, r3
 8014606:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801460a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801460c:	693b      	ldr	r3, [r7, #16]
 801460e:	3301      	adds	r3, #1
 8014610:	613b      	str	r3, [r7, #16]
 8014612:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014616:	461a      	mov	r2, r3
 8014618:	693b      	ldr	r3, [r7, #16]
 801461a:	4293      	cmp	r3, r2
 801461c:	d3b5      	bcc.n	801458a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014624:	691b      	ldr	r3, [r3, #16]
 8014626:	68fa      	ldr	r2, [r7, #12]
 8014628:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801462c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014630:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	2200      	movs	r2, #0
 8014636:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801463e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014640:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014644:	2b00      	cmp	r3, #0
 8014646:	d105      	bne.n	8014654 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	699b      	ldr	r3, [r3, #24]
 801464c:	f043 0210 	orr.w	r2, r3, #16
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	699a      	ldr	r2, [r3, #24]
 8014658:	4b0f      	ldr	r3, [pc, #60]	@ (8014698 <USB_DevInit+0x2b4>)
 801465a:	4313      	orrs	r3, r2
 801465c:	687a      	ldr	r2, [r7, #4]
 801465e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014660:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8014664:	2b00      	cmp	r3, #0
 8014666:	d005      	beq.n	8014674 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	699b      	ldr	r3, [r3, #24]
 801466c:	f043 0208 	orr.w	r2, r3, #8
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8014674:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014678:	2b01      	cmp	r3, #1
 801467a:	d105      	bne.n	8014688 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	699a      	ldr	r2, [r3, #24]
 8014680:	4b06      	ldr	r3, [pc, #24]	@ (801469c <USB_DevInit+0x2b8>)
 8014682:	4313      	orrs	r3, r2
 8014684:	687a      	ldr	r2, [r7, #4]
 8014686:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014688:	7dfb      	ldrb	r3, [r7, #23]
}
 801468a:	4618      	mov	r0, r3
 801468c:	3718      	adds	r7, #24
 801468e:	46bd      	mov	sp, r7
 8014690:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014694:	b004      	add	sp, #16
 8014696:	4770      	bx	lr
 8014698:	803c3800 	.word	0x803c3800
 801469c:	40000004 	.word	0x40000004

080146a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80146a0:	b480      	push	{r7}
 80146a2:	b085      	sub	sp, #20
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
 80146a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80146aa:	2300      	movs	r3, #0
 80146ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	3301      	adds	r3, #1
 80146b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80146ba:	d901      	bls.n	80146c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80146bc:	2303      	movs	r3, #3
 80146be:	e01b      	b.n	80146f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	691b      	ldr	r3, [r3, #16]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	daf2      	bge.n	80146ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80146c8:	2300      	movs	r3, #0
 80146ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	019b      	lsls	r3, r3, #6
 80146d0:	f043 0220 	orr.w	r2, r3, #32
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	3301      	adds	r3, #1
 80146dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80146e4:	d901      	bls.n	80146ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80146e6:	2303      	movs	r3, #3
 80146e8:	e006      	b.n	80146f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	691b      	ldr	r3, [r3, #16]
 80146ee:	f003 0320 	and.w	r3, r3, #32
 80146f2:	2b20      	cmp	r3, #32
 80146f4:	d0f0      	beq.n	80146d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80146f6:	2300      	movs	r3, #0
}
 80146f8:	4618      	mov	r0, r3
 80146fa:	3714      	adds	r7, #20
 80146fc:	46bd      	mov	sp, r7
 80146fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014702:	4770      	bx	lr

08014704 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014704:	b480      	push	{r7}
 8014706:	b085      	sub	sp, #20
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801470c:	2300      	movs	r3, #0
 801470e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	3301      	adds	r3, #1
 8014714:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801471c:	d901      	bls.n	8014722 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801471e:	2303      	movs	r3, #3
 8014720:	e018      	b.n	8014754 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	691b      	ldr	r3, [r3, #16]
 8014726:	2b00      	cmp	r3, #0
 8014728:	daf2      	bge.n	8014710 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801472a:	2300      	movs	r3, #0
 801472c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	2210      	movs	r2, #16
 8014732:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	3301      	adds	r3, #1
 8014738:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014740:	d901      	bls.n	8014746 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8014742:	2303      	movs	r3, #3
 8014744:	e006      	b.n	8014754 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	691b      	ldr	r3, [r3, #16]
 801474a:	f003 0310 	and.w	r3, r3, #16
 801474e:	2b10      	cmp	r3, #16
 8014750:	d0f0      	beq.n	8014734 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8014752:	2300      	movs	r3, #0
}
 8014754:	4618      	mov	r0, r3
 8014756:	3714      	adds	r7, #20
 8014758:	46bd      	mov	sp, r7
 801475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475e:	4770      	bx	lr

08014760 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014760:	b480      	push	{r7}
 8014762:	b085      	sub	sp, #20
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	460b      	mov	r3, r1
 801476a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014776:	681a      	ldr	r2, [r3, #0]
 8014778:	78fb      	ldrb	r3, [r7, #3]
 801477a:	68f9      	ldr	r1, [r7, #12]
 801477c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014780:	4313      	orrs	r3, r2
 8014782:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014784:	2300      	movs	r3, #0
}
 8014786:	4618      	mov	r0, r3
 8014788:	3714      	adds	r7, #20
 801478a:	46bd      	mov	sp, r7
 801478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014790:	4770      	bx	lr

08014792 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8014792:	b480      	push	{r7}
 8014794:	b087      	sub	sp, #28
 8014796:	af00      	add	r7, sp, #0
 8014798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801479e:	693b      	ldr	r3, [r7, #16]
 80147a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80147a4:	689b      	ldr	r3, [r3, #8]
 80147a6:	f003 0306 	and.w	r3, r3, #6
 80147aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d102      	bne.n	80147b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80147b2:	2300      	movs	r3, #0
 80147b4:	75fb      	strb	r3, [r7, #23]
 80147b6:	e00a      	b.n	80147ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	2b02      	cmp	r3, #2
 80147bc:	d002      	beq.n	80147c4 <USB_GetDevSpeed+0x32>
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	2b06      	cmp	r3, #6
 80147c2:	d102      	bne.n	80147ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80147c4:	2302      	movs	r3, #2
 80147c6:	75fb      	strb	r3, [r7, #23]
 80147c8:	e001      	b.n	80147ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80147ca:	230f      	movs	r3, #15
 80147cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80147ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	371c      	adds	r7, #28
 80147d4:	46bd      	mov	sp, r7
 80147d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147da:	4770      	bx	lr

080147dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80147dc:	b480      	push	{r7}
 80147de:	b085      	sub	sp, #20
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	785b      	ldrb	r3, [r3, #1]
 80147f4:	2b01      	cmp	r3, #1
 80147f6:	d139      	bne.n	801486c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80147fe:	69da      	ldr	r2, [r3, #28]
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	781b      	ldrb	r3, [r3, #0]
 8014804:	f003 030f 	and.w	r3, r3, #15
 8014808:	2101      	movs	r1, #1
 801480a:	fa01 f303 	lsl.w	r3, r1, r3
 801480e:	b29b      	uxth	r3, r3
 8014810:	68f9      	ldr	r1, [r7, #12]
 8014812:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014816:	4313      	orrs	r3, r2
 8014818:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	015a      	lsls	r2, r3, #5
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	4413      	add	r3, r2
 8014822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801482c:	2b00      	cmp	r3, #0
 801482e:	d153      	bne.n	80148d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	015a      	lsls	r2, r3, #5
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	4413      	add	r3, r2
 8014838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801483c:	681a      	ldr	r2, [r3, #0]
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	689b      	ldr	r3, [r3, #8]
 8014842:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	791b      	ldrb	r3, [r3, #4]
 801484a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801484c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	059b      	lsls	r3, r3, #22
 8014852:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014854:	431a      	orrs	r2, r3
 8014856:	68bb      	ldr	r3, [r7, #8]
 8014858:	0159      	lsls	r1, r3, #5
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	440b      	add	r3, r1
 801485e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014862:	4619      	mov	r1, r3
 8014864:	4b20      	ldr	r3, [pc, #128]	@ (80148e8 <USB_ActivateEndpoint+0x10c>)
 8014866:	4313      	orrs	r3, r2
 8014868:	600b      	str	r3, [r1, #0]
 801486a:	e035      	b.n	80148d8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014872:	69da      	ldr	r2, [r3, #28]
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	781b      	ldrb	r3, [r3, #0]
 8014878:	f003 030f 	and.w	r3, r3, #15
 801487c:	2101      	movs	r1, #1
 801487e:	fa01 f303 	lsl.w	r3, r1, r3
 8014882:	041b      	lsls	r3, r3, #16
 8014884:	68f9      	ldr	r1, [r7, #12]
 8014886:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801488a:	4313      	orrs	r3, r2
 801488c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	015a      	lsls	r2, r3, #5
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	4413      	add	r3, r2
 8014896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d119      	bne.n	80148d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	015a      	lsls	r2, r3, #5
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	4413      	add	r3, r2
 80148ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80148b0:	681a      	ldr	r2, [r3, #0]
 80148b2:	683b      	ldr	r3, [r7, #0]
 80148b4:	689b      	ldr	r3, [r3, #8]
 80148b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	791b      	ldrb	r3, [r3, #4]
 80148be:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80148c0:	430b      	orrs	r3, r1
 80148c2:	431a      	orrs	r2, r3
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	0159      	lsls	r1, r3, #5
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	440b      	add	r3, r1
 80148cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80148d0:	4619      	mov	r1, r3
 80148d2:	4b05      	ldr	r3, [pc, #20]	@ (80148e8 <USB_ActivateEndpoint+0x10c>)
 80148d4:	4313      	orrs	r3, r2
 80148d6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80148d8:	2300      	movs	r3, #0
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3714      	adds	r7, #20
 80148de:	46bd      	mov	sp, r7
 80148e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e4:	4770      	bx	lr
 80148e6:	bf00      	nop
 80148e8:	10008000 	.word	0x10008000

080148ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80148ec:	b480      	push	{r7}
 80148ee:	b085      	sub	sp, #20
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
 80148f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	781b      	ldrb	r3, [r3, #0]
 80148fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	785b      	ldrb	r3, [r3, #1]
 8014904:	2b01      	cmp	r3, #1
 8014906:	d161      	bne.n	80149cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	015a      	lsls	r2, r3, #5
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	4413      	add	r3, r2
 8014910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801491a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801491e:	d11f      	bne.n	8014960 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	015a      	lsls	r2, r3, #5
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	4413      	add	r3, r2
 8014928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	68ba      	ldr	r2, [r7, #8]
 8014930:	0151      	lsls	r1, r2, #5
 8014932:	68fa      	ldr	r2, [r7, #12]
 8014934:	440a      	add	r2, r1
 8014936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801493a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801493e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	015a      	lsls	r2, r3, #5
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	4413      	add	r3, r2
 8014948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	68ba      	ldr	r2, [r7, #8]
 8014950:	0151      	lsls	r1, r2, #5
 8014952:	68fa      	ldr	r2, [r7, #12]
 8014954:	440a      	add	r2, r1
 8014956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801495a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801495e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	781b      	ldrb	r3, [r3, #0]
 801496c:	f003 030f 	and.w	r3, r3, #15
 8014970:	2101      	movs	r1, #1
 8014972:	fa01 f303 	lsl.w	r3, r1, r3
 8014976:	b29b      	uxth	r3, r3
 8014978:	43db      	mvns	r3, r3
 801497a:	68f9      	ldr	r1, [r7, #12]
 801497c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014980:	4013      	ands	r3, r2
 8014982:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801498a:	69da      	ldr	r2, [r3, #28]
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	781b      	ldrb	r3, [r3, #0]
 8014990:	f003 030f 	and.w	r3, r3, #15
 8014994:	2101      	movs	r1, #1
 8014996:	fa01 f303 	lsl.w	r3, r1, r3
 801499a:	b29b      	uxth	r3, r3
 801499c:	43db      	mvns	r3, r3
 801499e:	68f9      	ldr	r1, [r7, #12]
 80149a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80149a4:	4013      	ands	r3, r2
 80149a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	015a      	lsls	r2, r3, #5
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	4413      	add	r3, r2
 80149b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149b4:	681a      	ldr	r2, [r3, #0]
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	0159      	lsls	r1, r3, #5
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	440b      	add	r3, r1
 80149be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149c2:	4619      	mov	r1, r3
 80149c4:	4b35      	ldr	r3, [pc, #212]	@ (8014a9c <USB_DeactivateEndpoint+0x1b0>)
 80149c6:	4013      	ands	r3, r2
 80149c8:	600b      	str	r3, [r1, #0]
 80149ca:	e060      	b.n	8014a8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	015a      	lsls	r2, r3, #5
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	4413      	add	r3, r2
 80149d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80149de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80149e2:	d11f      	bne.n	8014a24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80149e4:	68bb      	ldr	r3, [r7, #8]
 80149e6:	015a      	lsls	r2, r3, #5
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	4413      	add	r3, r2
 80149ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	68ba      	ldr	r2, [r7, #8]
 80149f4:	0151      	lsls	r1, r2, #5
 80149f6:	68fa      	ldr	r2, [r7, #12]
 80149f8:	440a      	add	r2, r1
 80149fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80149fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014a02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014a04:	68bb      	ldr	r3, [r7, #8]
 8014a06:	015a      	lsls	r2, r3, #5
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	4413      	add	r3, r2
 8014a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	68ba      	ldr	r2, [r7, #8]
 8014a14:	0151      	lsls	r1, r2, #5
 8014a16:	68fa      	ldr	r2, [r7, #12]
 8014a18:	440a      	add	r2, r1
 8014a1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014a1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014a22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	f003 030f 	and.w	r3, r3, #15
 8014a34:	2101      	movs	r1, #1
 8014a36:	fa01 f303 	lsl.w	r3, r1, r3
 8014a3a:	041b      	lsls	r3, r3, #16
 8014a3c:	43db      	mvns	r3, r3
 8014a3e:	68f9      	ldr	r1, [r7, #12]
 8014a40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014a44:	4013      	ands	r3, r2
 8014a46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a4e:	69da      	ldr	r2, [r3, #28]
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	781b      	ldrb	r3, [r3, #0]
 8014a54:	f003 030f 	and.w	r3, r3, #15
 8014a58:	2101      	movs	r1, #1
 8014a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8014a5e:	041b      	lsls	r3, r3, #16
 8014a60:	43db      	mvns	r3, r3
 8014a62:	68f9      	ldr	r1, [r7, #12]
 8014a64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014a68:	4013      	ands	r3, r2
 8014a6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014a6c:	68bb      	ldr	r3, [r7, #8]
 8014a6e:	015a      	lsls	r2, r3, #5
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	4413      	add	r3, r2
 8014a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a78:	681a      	ldr	r2, [r3, #0]
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	0159      	lsls	r1, r3, #5
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	440b      	add	r3, r1
 8014a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a86:	4619      	mov	r1, r3
 8014a88:	4b05      	ldr	r3, [pc, #20]	@ (8014aa0 <USB_DeactivateEndpoint+0x1b4>)
 8014a8a:	4013      	ands	r3, r2
 8014a8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8014a8e:	2300      	movs	r3, #0
}
 8014a90:	4618      	mov	r0, r3
 8014a92:	3714      	adds	r7, #20
 8014a94:	46bd      	mov	sp, r7
 8014a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9a:	4770      	bx	lr
 8014a9c:	ec337800 	.word	0xec337800
 8014aa0:	eff37800 	.word	0xeff37800

08014aa4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b08a      	sub	sp, #40	@ 0x28
 8014aa8:	af02      	add	r7, sp, #8
 8014aaa:	60f8      	str	r0, [r7, #12]
 8014aac:	60b9      	str	r1, [r7, #8]
 8014aae:	4613      	mov	r3, r2
 8014ab0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014ab6:	68bb      	ldr	r3, [r7, #8]
 8014ab8:	781b      	ldrb	r3, [r3, #0]
 8014aba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	785b      	ldrb	r3, [r3, #1]
 8014ac0:	2b01      	cmp	r3, #1
 8014ac2:	f040 8181 	bne.w	8014dc8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	691b      	ldr	r3, [r3, #16]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d132      	bne.n	8014b34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014ace:	69bb      	ldr	r3, [r7, #24]
 8014ad0:	015a      	lsls	r2, r3, #5
 8014ad2:	69fb      	ldr	r3, [r7, #28]
 8014ad4:	4413      	add	r3, r2
 8014ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ada:	691a      	ldr	r2, [r3, #16]
 8014adc:	69bb      	ldr	r3, [r7, #24]
 8014ade:	0159      	lsls	r1, r3, #5
 8014ae0:	69fb      	ldr	r3, [r7, #28]
 8014ae2:	440b      	add	r3, r1
 8014ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ae8:	4619      	mov	r1, r3
 8014aea:	4ba5      	ldr	r3, [pc, #660]	@ (8014d80 <USB_EPStartXfer+0x2dc>)
 8014aec:	4013      	ands	r3, r2
 8014aee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014af0:	69bb      	ldr	r3, [r7, #24]
 8014af2:	015a      	lsls	r2, r3, #5
 8014af4:	69fb      	ldr	r3, [r7, #28]
 8014af6:	4413      	add	r3, r2
 8014af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014afc:	691b      	ldr	r3, [r3, #16]
 8014afe:	69ba      	ldr	r2, [r7, #24]
 8014b00:	0151      	lsls	r1, r2, #5
 8014b02:	69fa      	ldr	r2, [r7, #28]
 8014b04:	440a      	add	r2, r1
 8014b06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014b0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014b10:	69bb      	ldr	r3, [r7, #24]
 8014b12:	015a      	lsls	r2, r3, #5
 8014b14:	69fb      	ldr	r3, [r7, #28]
 8014b16:	4413      	add	r3, r2
 8014b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b1c:	691a      	ldr	r2, [r3, #16]
 8014b1e:	69bb      	ldr	r3, [r7, #24]
 8014b20:	0159      	lsls	r1, r3, #5
 8014b22:	69fb      	ldr	r3, [r7, #28]
 8014b24:	440b      	add	r3, r1
 8014b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b2a:	4619      	mov	r1, r3
 8014b2c:	4b95      	ldr	r3, [pc, #596]	@ (8014d84 <USB_EPStartXfer+0x2e0>)
 8014b2e:	4013      	ands	r3, r2
 8014b30:	610b      	str	r3, [r1, #16]
 8014b32:	e092      	b.n	8014c5a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014b34:	69bb      	ldr	r3, [r7, #24]
 8014b36:	015a      	lsls	r2, r3, #5
 8014b38:	69fb      	ldr	r3, [r7, #28]
 8014b3a:	4413      	add	r3, r2
 8014b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b40:	691a      	ldr	r2, [r3, #16]
 8014b42:	69bb      	ldr	r3, [r7, #24]
 8014b44:	0159      	lsls	r1, r3, #5
 8014b46:	69fb      	ldr	r3, [r7, #28]
 8014b48:	440b      	add	r3, r1
 8014b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b4e:	4619      	mov	r1, r3
 8014b50:	4b8c      	ldr	r3, [pc, #560]	@ (8014d84 <USB_EPStartXfer+0x2e0>)
 8014b52:	4013      	ands	r3, r2
 8014b54:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014b56:	69bb      	ldr	r3, [r7, #24]
 8014b58:	015a      	lsls	r2, r3, #5
 8014b5a:	69fb      	ldr	r3, [r7, #28]
 8014b5c:	4413      	add	r3, r2
 8014b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b62:	691a      	ldr	r2, [r3, #16]
 8014b64:	69bb      	ldr	r3, [r7, #24]
 8014b66:	0159      	lsls	r1, r3, #5
 8014b68:	69fb      	ldr	r3, [r7, #28]
 8014b6a:	440b      	add	r3, r1
 8014b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b70:	4619      	mov	r1, r3
 8014b72:	4b83      	ldr	r3, [pc, #524]	@ (8014d80 <USB_EPStartXfer+0x2dc>)
 8014b74:	4013      	ands	r3, r2
 8014b76:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014b78:	69bb      	ldr	r3, [r7, #24]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d11a      	bne.n	8014bb4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014b7e:	68bb      	ldr	r3, [r7, #8]
 8014b80:	691a      	ldr	r2, [r3, #16]
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	689b      	ldr	r3, [r3, #8]
 8014b86:	429a      	cmp	r2, r3
 8014b88:	d903      	bls.n	8014b92 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014b8a:	68bb      	ldr	r3, [r7, #8]
 8014b8c:	689a      	ldr	r2, [r3, #8]
 8014b8e:	68bb      	ldr	r3, [r7, #8]
 8014b90:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014b92:	69bb      	ldr	r3, [r7, #24]
 8014b94:	015a      	lsls	r2, r3, #5
 8014b96:	69fb      	ldr	r3, [r7, #28]
 8014b98:	4413      	add	r3, r2
 8014b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b9e:	691b      	ldr	r3, [r3, #16]
 8014ba0:	69ba      	ldr	r2, [r7, #24]
 8014ba2:	0151      	lsls	r1, r2, #5
 8014ba4:	69fa      	ldr	r2, [r7, #28]
 8014ba6:	440a      	add	r2, r1
 8014ba8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014bac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014bb0:	6113      	str	r3, [r2, #16]
 8014bb2:	e01b      	b.n	8014bec <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014bb4:	69bb      	ldr	r3, [r7, #24]
 8014bb6:	015a      	lsls	r2, r3, #5
 8014bb8:	69fb      	ldr	r3, [r7, #28]
 8014bba:	4413      	add	r3, r2
 8014bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bc0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	6919      	ldr	r1, [r3, #16]
 8014bc6:	68bb      	ldr	r3, [r7, #8]
 8014bc8:	689b      	ldr	r3, [r3, #8]
 8014bca:	440b      	add	r3, r1
 8014bcc:	1e59      	subs	r1, r3, #1
 8014bce:	68bb      	ldr	r3, [r7, #8]
 8014bd0:	689b      	ldr	r3, [r3, #8]
 8014bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8014bd6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014bd8:	4b6b      	ldr	r3, [pc, #428]	@ (8014d88 <USB_EPStartXfer+0x2e4>)
 8014bda:	400b      	ands	r3, r1
 8014bdc:	69b9      	ldr	r1, [r7, #24]
 8014bde:	0148      	lsls	r0, r1, #5
 8014be0:	69f9      	ldr	r1, [r7, #28]
 8014be2:	4401      	add	r1, r0
 8014be4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014be8:	4313      	orrs	r3, r2
 8014bea:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014bec:	69bb      	ldr	r3, [r7, #24]
 8014bee:	015a      	lsls	r2, r3, #5
 8014bf0:	69fb      	ldr	r3, [r7, #28]
 8014bf2:	4413      	add	r3, r2
 8014bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bf8:	691a      	ldr	r2, [r3, #16]
 8014bfa:	68bb      	ldr	r3, [r7, #8]
 8014bfc:	691b      	ldr	r3, [r3, #16]
 8014bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014c02:	69b9      	ldr	r1, [r7, #24]
 8014c04:	0148      	lsls	r0, r1, #5
 8014c06:	69f9      	ldr	r1, [r7, #28]
 8014c08:	4401      	add	r1, r0
 8014c0a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014c0e:	4313      	orrs	r3, r2
 8014c10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	791b      	ldrb	r3, [r3, #4]
 8014c16:	2b01      	cmp	r3, #1
 8014c18:	d11f      	bne.n	8014c5a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014c1a:	69bb      	ldr	r3, [r7, #24]
 8014c1c:	015a      	lsls	r2, r3, #5
 8014c1e:	69fb      	ldr	r3, [r7, #28]
 8014c20:	4413      	add	r3, r2
 8014c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c26:	691b      	ldr	r3, [r3, #16]
 8014c28:	69ba      	ldr	r2, [r7, #24]
 8014c2a:	0151      	lsls	r1, r2, #5
 8014c2c:	69fa      	ldr	r2, [r7, #28]
 8014c2e:	440a      	add	r2, r1
 8014c30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c34:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014c38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014c3a:	69bb      	ldr	r3, [r7, #24]
 8014c3c:	015a      	lsls	r2, r3, #5
 8014c3e:	69fb      	ldr	r3, [r7, #28]
 8014c40:	4413      	add	r3, r2
 8014c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c46:	691b      	ldr	r3, [r3, #16]
 8014c48:	69ba      	ldr	r2, [r7, #24]
 8014c4a:	0151      	lsls	r1, r2, #5
 8014c4c:	69fa      	ldr	r2, [r7, #28]
 8014c4e:	440a      	add	r2, r1
 8014c50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014c58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014c5a:	79fb      	ldrb	r3, [r7, #7]
 8014c5c:	2b01      	cmp	r3, #1
 8014c5e:	d14b      	bne.n	8014cf8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014c60:	68bb      	ldr	r3, [r7, #8]
 8014c62:	69db      	ldr	r3, [r3, #28]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d009      	beq.n	8014c7c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014c68:	69bb      	ldr	r3, [r7, #24]
 8014c6a:	015a      	lsls	r2, r3, #5
 8014c6c:	69fb      	ldr	r3, [r7, #28]
 8014c6e:	4413      	add	r3, r2
 8014c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c74:	461a      	mov	r2, r3
 8014c76:	68bb      	ldr	r3, [r7, #8]
 8014c78:	69db      	ldr	r3, [r3, #28]
 8014c7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014c7c:	68bb      	ldr	r3, [r7, #8]
 8014c7e:	791b      	ldrb	r3, [r3, #4]
 8014c80:	2b01      	cmp	r3, #1
 8014c82:	d128      	bne.n	8014cd6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014c84:	69fb      	ldr	r3, [r7, #28]
 8014c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c8a:	689b      	ldr	r3, [r3, #8]
 8014c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d110      	bne.n	8014cb6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014c94:	69bb      	ldr	r3, [r7, #24]
 8014c96:	015a      	lsls	r2, r3, #5
 8014c98:	69fb      	ldr	r3, [r7, #28]
 8014c9a:	4413      	add	r3, r2
 8014c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	69ba      	ldr	r2, [r7, #24]
 8014ca4:	0151      	lsls	r1, r2, #5
 8014ca6:	69fa      	ldr	r2, [r7, #28]
 8014ca8:	440a      	add	r2, r1
 8014caa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014cae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014cb2:	6013      	str	r3, [r2, #0]
 8014cb4:	e00f      	b.n	8014cd6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014cb6:	69bb      	ldr	r3, [r7, #24]
 8014cb8:	015a      	lsls	r2, r3, #5
 8014cba:	69fb      	ldr	r3, [r7, #28]
 8014cbc:	4413      	add	r3, r2
 8014cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	69ba      	ldr	r2, [r7, #24]
 8014cc6:	0151      	lsls	r1, r2, #5
 8014cc8:	69fa      	ldr	r2, [r7, #28]
 8014cca:	440a      	add	r2, r1
 8014ccc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014cd4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014cd6:	69bb      	ldr	r3, [r7, #24]
 8014cd8:	015a      	lsls	r2, r3, #5
 8014cda:	69fb      	ldr	r3, [r7, #28]
 8014cdc:	4413      	add	r3, r2
 8014cde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	69ba      	ldr	r2, [r7, #24]
 8014ce6:	0151      	lsls	r1, r2, #5
 8014ce8:	69fa      	ldr	r2, [r7, #28]
 8014cea:	440a      	add	r2, r1
 8014cec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014cf0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014cf4:	6013      	str	r3, [r2, #0]
 8014cf6:	e16a      	b.n	8014fce <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014cf8:	69bb      	ldr	r3, [r7, #24]
 8014cfa:	015a      	lsls	r2, r3, #5
 8014cfc:	69fb      	ldr	r3, [r7, #28]
 8014cfe:	4413      	add	r3, r2
 8014d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	69ba      	ldr	r2, [r7, #24]
 8014d08:	0151      	lsls	r1, r2, #5
 8014d0a:	69fa      	ldr	r2, [r7, #28]
 8014d0c:	440a      	add	r2, r1
 8014d0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d12:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014d16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	791b      	ldrb	r3, [r3, #4]
 8014d1c:	2b01      	cmp	r3, #1
 8014d1e:	d015      	beq.n	8014d4c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	691b      	ldr	r3, [r3, #16]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	f000 8152 	beq.w	8014fce <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014d2a:	69fb      	ldr	r3, [r7, #28]
 8014d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	781b      	ldrb	r3, [r3, #0]
 8014d36:	f003 030f 	and.w	r3, r3, #15
 8014d3a:	2101      	movs	r1, #1
 8014d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8014d40:	69f9      	ldr	r1, [r7, #28]
 8014d42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014d46:	4313      	orrs	r3, r2
 8014d48:	634b      	str	r3, [r1, #52]	@ 0x34
 8014d4a:	e140      	b.n	8014fce <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014d4c:	69fb      	ldr	r3, [r7, #28]
 8014d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014d52:	689b      	ldr	r3, [r3, #8]
 8014d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d117      	bne.n	8014d8c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014d5c:	69bb      	ldr	r3, [r7, #24]
 8014d5e:	015a      	lsls	r2, r3, #5
 8014d60:	69fb      	ldr	r3, [r7, #28]
 8014d62:	4413      	add	r3, r2
 8014d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	69ba      	ldr	r2, [r7, #24]
 8014d6c:	0151      	lsls	r1, r2, #5
 8014d6e:	69fa      	ldr	r2, [r7, #28]
 8014d70:	440a      	add	r2, r1
 8014d72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d76:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014d7a:	6013      	str	r3, [r2, #0]
 8014d7c:	e016      	b.n	8014dac <USB_EPStartXfer+0x308>
 8014d7e:	bf00      	nop
 8014d80:	e007ffff 	.word	0xe007ffff
 8014d84:	fff80000 	.word	0xfff80000
 8014d88:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014d8c:	69bb      	ldr	r3, [r7, #24]
 8014d8e:	015a      	lsls	r2, r3, #5
 8014d90:	69fb      	ldr	r3, [r7, #28]
 8014d92:	4413      	add	r3, r2
 8014d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	69ba      	ldr	r2, [r7, #24]
 8014d9c:	0151      	lsls	r1, r2, #5
 8014d9e:	69fa      	ldr	r2, [r7, #28]
 8014da0:	440a      	add	r2, r1
 8014da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014daa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014dac:	68bb      	ldr	r3, [r7, #8]
 8014dae:	68d9      	ldr	r1, [r3, #12]
 8014db0:	68bb      	ldr	r3, [r7, #8]
 8014db2:	781a      	ldrb	r2, [r3, #0]
 8014db4:	68bb      	ldr	r3, [r7, #8]
 8014db6:	691b      	ldr	r3, [r3, #16]
 8014db8:	b298      	uxth	r0, r3
 8014dba:	79fb      	ldrb	r3, [r7, #7]
 8014dbc:	9300      	str	r3, [sp, #0]
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	68f8      	ldr	r0, [r7, #12]
 8014dc2:	f000 f9b9 	bl	8015138 <USB_WritePacket>
 8014dc6:	e102      	b.n	8014fce <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014dc8:	69bb      	ldr	r3, [r7, #24]
 8014dca:	015a      	lsls	r2, r3, #5
 8014dcc:	69fb      	ldr	r3, [r7, #28]
 8014dce:	4413      	add	r3, r2
 8014dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dd4:	691a      	ldr	r2, [r3, #16]
 8014dd6:	69bb      	ldr	r3, [r7, #24]
 8014dd8:	0159      	lsls	r1, r3, #5
 8014dda:	69fb      	ldr	r3, [r7, #28]
 8014ddc:	440b      	add	r3, r1
 8014dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014de2:	4619      	mov	r1, r3
 8014de4:	4b7c      	ldr	r3, [pc, #496]	@ (8014fd8 <USB_EPStartXfer+0x534>)
 8014de6:	4013      	ands	r3, r2
 8014de8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014dea:	69bb      	ldr	r3, [r7, #24]
 8014dec:	015a      	lsls	r2, r3, #5
 8014dee:	69fb      	ldr	r3, [r7, #28]
 8014df0:	4413      	add	r3, r2
 8014df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014df6:	691a      	ldr	r2, [r3, #16]
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	0159      	lsls	r1, r3, #5
 8014dfc:	69fb      	ldr	r3, [r7, #28]
 8014dfe:	440b      	add	r3, r1
 8014e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e04:	4619      	mov	r1, r3
 8014e06:	4b75      	ldr	r3, [pc, #468]	@ (8014fdc <USB_EPStartXfer+0x538>)
 8014e08:	4013      	ands	r3, r2
 8014e0a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014e0c:	69bb      	ldr	r3, [r7, #24]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d12f      	bne.n	8014e72 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8014e12:	68bb      	ldr	r3, [r7, #8]
 8014e14:	691b      	ldr	r3, [r3, #16]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d003      	beq.n	8014e22 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8014e1a:	68bb      	ldr	r3, [r7, #8]
 8014e1c:	689a      	ldr	r2, [r3, #8]
 8014e1e:	68bb      	ldr	r3, [r7, #8]
 8014e20:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	689a      	ldr	r2, [r3, #8]
 8014e26:	68bb      	ldr	r3, [r7, #8]
 8014e28:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014e2a:	69bb      	ldr	r3, [r7, #24]
 8014e2c:	015a      	lsls	r2, r3, #5
 8014e2e:	69fb      	ldr	r3, [r7, #28]
 8014e30:	4413      	add	r3, r2
 8014e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e36:	691a      	ldr	r2, [r3, #16]
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	6a1b      	ldr	r3, [r3, #32]
 8014e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014e40:	69b9      	ldr	r1, [r7, #24]
 8014e42:	0148      	lsls	r0, r1, #5
 8014e44:	69f9      	ldr	r1, [r7, #28]
 8014e46:	4401      	add	r1, r0
 8014e48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014e4c:	4313      	orrs	r3, r2
 8014e4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014e50:	69bb      	ldr	r3, [r7, #24]
 8014e52:	015a      	lsls	r2, r3, #5
 8014e54:	69fb      	ldr	r3, [r7, #28]
 8014e56:	4413      	add	r3, r2
 8014e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e5c:	691b      	ldr	r3, [r3, #16]
 8014e5e:	69ba      	ldr	r2, [r7, #24]
 8014e60:	0151      	lsls	r1, r2, #5
 8014e62:	69fa      	ldr	r2, [r7, #28]
 8014e64:	440a      	add	r2, r1
 8014e66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014e6e:	6113      	str	r3, [r2, #16]
 8014e70:	e05f      	b.n	8014f32 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	691b      	ldr	r3, [r3, #16]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d123      	bne.n	8014ec2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014e7a:	69bb      	ldr	r3, [r7, #24]
 8014e7c:	015a      	lsls	r2, r3, #5
 8014e7e:	69fb      	ldr	r3, [r7, #28]
 8014e80:	4413      	add	r3, r2
 8014e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e86:	691a      	ldr	r2, [r3, #16]
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	689b      	ldr	r3, [r3, #8]
 8014e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014e90:	69b9      	ldr	r1, [r7, #24]
 8014e92:	0148      	lsls	r0, r1, #5
 8014e94:	69f9      	ldr	r1, [r7, #28]
 8014e96:	4401      	add	r1, r0
 8014e98:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014e9c:	4313      	orrs	r3, r2
 8014e9e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014ea0:	69bb      	ldr	r3, [r7, #24]
 8014ea2:	015a      	lsls	r2, r3, #5
 8014ea4:	69fb      	ldr	r3, [r7, #28]
 8014ea6:	4413      	add	r3, r2
 8014ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014eac:	691b      	ldr	r3, [r3, #16]
 8014eae:	69ba      	ldr	r2, [r7, #24]
 8014eb0:	0151      	lsls	r1, r2, #5
 8014eb2:	69fa      	ldr	r2, [r7, #28]
 8014eb4:	440a      	add	r2, r1
 8014eb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014eba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014ebe:	6113      	str	r3, [r2, #16]
 8014ec0:	e037      	b.n	8014f32 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	691a      	ldr	r2, [r3, #16]
 8014ec6:	68bb      	ldr	r3, [r7, #8]
 8014ec8:	689b      	ldr	r3, [r3, #8]
 8014eca:	4413      	add	r3, r2
 8014ecc:	1e5a      	subs	r2, r3, #1
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	689b      	ldr	r3, [r3, #8]
 8014ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ed6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014ed8:	68bb      	ldr	r3, [r7, #8]
 8014eda:	689b      	ldr	r3, [r3, #8]
 8014edc:	8afa      	ldrh	r2, [r7, #22]
 8014ede:	fb03 f202 	mul.w	r2, r3, r2
 8014ee2:	68bb      	ldr	r3, [r7, #8]
 8014ee4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014ee6:	69bb      	ldr	r3, [r7, #24]
 8014ee8:	015a      	lsls	r2, r3, #5
 8014eea:	69fb      	ldr	r3, [r7, #28]
 8014eec:	4413      	add	r3, r2
 8014eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ef2:	691a      	ldr	r2, [r3, #16]
 8014ef4:	8afb      	ldrh	r3, [r7, #22]
 8014ef6:	04d9      	lsls	r1, r3, #19
 8014ef8:	4b39      	ldr	r3, [pc, #228]	@ (8014fe0 <USB_EPStartXfer+0x53c>)
 8014efa:	400b      	ands	r3, r1
 8014efc:	69b9      	ldr	r1, [r7, #24]
 8014efe:	0148      	lsls	r0, r1, #5
 8014f00:	69f9      	ldr	r1, [r7, #28]
 8014f02:	4401      	add	r1, r0
 8014f04:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014f08:	4313      	orrs	r3, r2
 8014f0a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014f0c:	69bb      	ldr	r3, [r7, #24]
 8014f0e:	015a      	lsls	r2, r3, #5
 8014f10:	69fb      	ldr	r3, [r7, #28]
 8014f12:	4413      	add	r3, r2
 8014f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f18:	691a      	ldr	r2, [r3, #16]
 8014f1a:	68bb      	ldr	r3, [r7, #8]
 8014f1c:	6a1b      	ldr	r3, [r3, #32]
 8014f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014f22:	69b9      	ldr	r1, [r7, #24]
 8014f24:	0148      	lsls	r0, r1, #5
 8014f26:	69f9      	ldr	r1, [r7, #28]
 8014f28:	4401      	add	r1, r0
 8014f2a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014f2e:	4313      	orrs	r3, r2
 8014f30:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014f32:	79fb      	ldrb	r3, [r7, #7]
 8014f34:	2b01      	cmp	r3, #1
 8014f36:	d10d      	bne.n	8014f54 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014f38:	68bb      	ldr	r3, [r7, #8]
 8014f3a:	68db      	ldr	r3, [r3, #12]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d009      	beq.n	8014f54 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	68d9      	ldr	r1, [r3, #12]
 8014f44:	69bb      	ldr	r3, [r7, #24]
 8014f46:	015a      	lsls	r2, r3, #5
 8014f48:	69fb      	ldr	r3, [r7, #28]
 8014f4a:	4413      	add	r3, r2
 8014f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f50:	460a      	mov	r2, r1
 8014f52:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014f54:	68bb      	ldr	r3, [r7, #8]
 8014f56:	791b      	ldrb	r3, [r3, #4]
 8014f58:	2b01      	cmp	r3, #1
 8014f5a:	d128      	bne.n	8014fae <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014f5c:	69fb      	ldr	r3, [r7, #28]
 8014f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014f62:	689b      	ldr	r3, [r3, #8]
 8014f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d110      	bne.n	8014f8e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014f6c:	69bb      	ldr	r3, [r7, #24]
 8014f6e:	015a      	lsls	r2, r3, #5
 8014f70:	69fb      	ldr	r3, [r7, #28]
 8014f72:	4413      	add	r3, r2
 8014f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	69ba      	ldr	r2, [r7, #24]
 8014f7c:	0151      	lsls	r1, r2, #5
 8014f7e:	69fa      	ldr	r2, [r7, #28]
 8014f80:	440a      	add	r2, r1
 8014f82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f86:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014f8a:	6013      	str	r3, [r2, #0]
 8014f8c:	e00f      	b.n	8014fae <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014f8e:	69bb      	ldr	r3, [r7, #24]
 8014f90:	015a      	lsls	r2, r3, #5
 8014f92:	69fb      	ldr	r3, [r7, #28]
 8014f94:	4413      	add	r3, r2
 8014f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	69ba      	ldr	r2, [r7, #24]
 8014f9e:	0151      	lsls	r1, r2, #5
 8014fa0:	69fa      	ldr	r2, [r7, #28]
 8014fa2:	440a      	add	r2, r1
 8014fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014fac:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014fae:	69bb      	ldr	r3, [r7, #24]
 8014fb0:	015a      	lsls	r2, r3, #5
 8014fb2:	69fb      	ldr	r3, [r7, #28]
 8014fb4:	4413      	add	r3, r2
 8014fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	69ba      	ldr	r2, [r7, #24]
 8014fbe:	0151      	lsls	r1, r2, #5
 8014fc0:	69fa      	ldr	r2, [r7, #28]
 8014fc2:	440a      	add	r2, r1
 8014fc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014fc8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014fcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014fce:	2300      	movs	r3, #0
}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	3720      	adds	r7, #32
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}
 8014fd8:	fff80000 	.word	0xfff80000
 8014fdc:	e007ffff 	.word	0xe007ffff
 8014fe0:	1ff80000 	.word	0x1ff80000

08014fe4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014fe4:	b480      	push	{r7}
 8014fe6:	b087      	sub	sp, #28
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
 8014fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014fee:	2300      	movs	r3, #0
 8014ff0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	785b      	ldrb	r3, [r3, #1]
 8014ffe:	2b01      	cmp	r3, #1
 8015000:	d14a      	bne.n	8015098 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	781b      	ldrb	r3, [r3, #0]
 8015006:	015a      	lsls	r2, r3, #5
 8015008:	693b      	ldr	r3, [r7, #16]
 801500a:	4413      	add	r3, r2
 801500c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015016:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801501a:	f040 8086 	bne.w	801512a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801501e:	683b      	ldr	r3, [r7, #0]
 8015020:	781b      	ldrb	r3, [r3, #0]
 8015022:	015a      	lsls	r2, r3, #5
 8015024:	693b      	ldr	r3, [r7, #16]
 8015026:	4413      	add	r3, r2
 8015028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	683a      	ldr	r2, [r7, #0]
 8015030:	7812      	ldrb	r2, [r2, #0]
 8015032:	0151      	lsls	r1, r2, #5
 8015034:	693a      	ldr	r2, [r7, #16]
 8015036:	440a      	add	r2, r1
 8015038:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801503c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015040:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	781b      	ldrb	r3, [r3, #0]
 8015046:	015a      	lsls	r2, r3, #5
 8015048:	693b      	ldr	r3, [r7, #16]
 801504a:	4413      	add	r3, r2
 801504c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	683a      	ldr	r2, [r7, #0]
 8015054:	7812      	ldrb	r2, [r2, #0]
 8015056:	0151      	lsls	r1, r2, #5
 8015058:	693a      	ldr	r2, [r7, #16]
 801505a:	440a      	add	r2, r1
 801505c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015060:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015064:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	3301      	adds	r3, #1
 801506a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015072:	4293      	cmp	r3, r2
 8015074:	d902      	bls.n	801507c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8015076:	2301      	movs	r3, #1
 8015078:	75fb      	strb	r3, [r7, #23]
          break;
 801507a:	e056      	b.n	801512a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801507c:	683b      	ldr	r3, [r7, #0]
 801507e:	781b      	ldrb	r3, [r3, #0]
 8015080:	015a      	lsls	r2, r3, #5
 8015082:	693b      	ldr	r3, [r7, #16]
 8015084:	4413      	add	r3, r2
 8015086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015090:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015094:	d0e7      	beq.n	8015066 <USB_EPStopXfer+0x82>
 8015096:	e048      	b.n	801512a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015098:	683b      	ldr	r3, [r7, #0]
 801509a:	781b      	ldrb	r3, [r3, #0]
 801509c:	015a      	lsls	r2, r3, #5
 801509e:	693b      	ldr	r3, [r7, #16]
 80150a0:	4413      	add	r3, r2
 80150a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80150ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80150b0:	d13b      	bne.n	801512a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80150b2:	683b      	ldr	r3, [r7, #0]
 80150b4:	781b      	ldrb	r3, [r3, #0]
 80150b6:	015a      	lsls	r2, r3, #5
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	4413      	add	r3, r2
 80150bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	683a      	ldr	r2, [r7, #0]
 80150c4:	7812      	ldrb	r2, [r2, #0]
 80150c6:	0151      	lsls	r1, r2, #5
 80150c8:	693a      	ldr	r2, [r7, #16]
 80150ca:	440a      	add	r2, r1
 80150cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80150d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80150d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	781b      	ldrb	r3, [r3, #0]
 80150da:	015a      	lsls	r2, r3, #5
 80150dc:	693b      	ldr	r3, [r7, #16]
 80150de:	4413      	add	r3, r2
 80150e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	683a      	ldr	r2, [r7, #0]
 80150e8:	7812      	ldrb	r2, [r2, #0]
 80150ea:	0151      	lsls	r1, r2, #5
 80150ec:	693a      	ldr	r2, [r7, #16]
 80150ee:	440a      	add	r2, r1
 80150f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80150f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80150f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	3301      	adds	r3, #1
 80150fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015106:	4293      	cmp	r3, r2
 8015108:	d902      	bls.n	8015110 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801510a:	2301      	movs	r3, #1
 801510c:	75fb      	strb	r3, [r7, #23]
          break;
 801510e:	e00c      	b.n	801512a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8015110:	683b      	ldr	r3, [r7, #0]
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	015a      	lsls	r2, r3, #5
 8015116:	693b      	ldr	r3, [r7, #16]
 8015118:	4413      	add	r3, r2
 801511a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015124:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015128:	d0e7      	beq.n	80150fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801512a:	7dfb      	ldrb	r3, [r7, #23]
}
 801512c:	4618      	mov	r0, r3
 801512e:	371c      	adds	r7, #28
 8015130:	46bd      	mov	sp, r7
 8015132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015136:	4770      	bx	lr

08015138 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015138:	b480      	push	{r7}
 801513a:	b089      	sub	sp, #36	@ 0x24
 801513c:	af00      	add	r7, sp, #0
 801513e:	60f8      	str	r0, [r7, #12]
 8015140:	60b9      	str	r1, [r7, #8]
 8015142:	4611      	mov	r1, r2
 8015144:	461a      	mov	r2, r3
 8015146:	460b      	mov	r3, r1
 8015148:	71fb      	strb	r3, [r7, #7]
 801514a:	4613      	mov	r3, r2
 801514c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8015152:	68bb      	ldr	r3, [r7, #8]
 8015154:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8015156:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801515a:	2b00      	cmp	r3, #0
 801515c:	d123      	bne.n	80151a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801515e:	88bb      	ldrh	r3, [r7, #4]
 8015160:	3303      	adds	r3, #3
 8015162:	089b      	lsrs	r3, r3, #2
 8015164:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8015166:	2300      	movs	r3, #0
 8015168:	61bb      	str	r3, [r7, #24]
 801516a:	e018      	b.n	801519e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801516c:	79fb      	ldrb	r3, [r7, #7]
 801516e:	031a      	lsls	r2, r3, #12
 8015170:	697b      	ldr	r3, [r7, #20]
 8015172:	4413      	add	r3, r2
 8015174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015178:	461a      	mov	r2, r3
 801517a:	69fb      	ldr	r3, [r7, #28]
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015180:	69fb      	ldr	r3, [r7, #28]
 8015182:	3301      	adds	r3, #1
 8015184:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015186:	69fb      	ldr	r3, [r7, #28]
 8015188:	3301      	adds	r3, #1
 801518a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801518c:	69fb      	ldr	r3, [r7, #28]
 801518e:	3301      	adds	r3, #1
 8015190:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015192:	69fb      	ldr	r3, [r7, #28]
 8015194:	3301      	adds	r3, #1
 8015196:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015198:	69bb      	ldr	r3, [r7, #24]
 801519a:	3301      	adds	r3, #1
 801519c:	61bb      	str	r3, [r7, #24]
 801519e:	69ba      	ldr	r2, [r7, #24]
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	429a      	cmp	r2, r3
 80151a4:	d3e2      	bcc.n	801516c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80151a6:	2300      	movs	r3, #0
}
 80151a8:	4618      	mov	r0, r3
 80151aa:	3724      	adds	r7, #36	@ 0x24
 80151ac:	46bd      	mov	sp, r7
 80151ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b2:	4770      	bx	lr

080151b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80151b4:	b480      	push	{r7}
 80151b6:	b08b      	sub	sp, #44	@ 0x2c
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	60f8      	str	r0, [r7, #12]
 80151bc:	60b9      	str	r1, [r7, #8]
 80151be:	4613      	mov	r3, r2
 80151c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80151c6:	68bb      	ldr	r3, [r7, #8]
 80151c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80151ca:	88fb      	ldrh	r3, [r7, #6]
 80151cc:	089b      	lsrs	r3, r3, #2
 80151ce:	b29b      	uxth	r3, r3
 80151d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80151d2:	88fb      	ldrh	r3, [r7, #6]
 80151d4:	f003 0303 	and.w	r3, r3, #3
 80151d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80151da:	2300      	movs	r3, #0
 80151dc:	623b      	str	r3, [r7, #32]
 80151de:	e014      	b.n	801520a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80151e0:	69bb      	ldr	r3, [r7, #24]
 80151e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80151e6:	681a      	ldr	r2, [r3, #0]
 80151e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80151ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151ee:	3301      	adds	r3, #1
 80151f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80151f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151f4:	3301      	adds	r3, #1
 80151f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80151f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151fa:	3301      	adds	r3, #1
 80151fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80151fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015200:	3301      	adds	r3, #1
 8015202:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8015204:	6a3b      	ldr	r3, [r7, #32]
 8015206:	3301      	adds	r3, #1
 8015208:	623b      	str	r3, [r7, #32]
 801520a:	6a3a      	ldr	r2, [r7, #32]
 801520c:	697b      	ldr	r3, [r7, #20]
 801520e:	429a      	cmp	r2, r3
 8015210:	d3e6      	bcc.n	80151e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015212:	8bfb      	ldrh	r3, [r7, #30]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d01e      	beq.n	8015256 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015218:	2300      	movs	r3, #0
 801521a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801521c:	69bb      	ldr	r3, [r7, #24]
 801521e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015222:	461a      	mov	r2, r3
 8015224:	f107 0310 	add.w	r3, r7, #16
 8015228:	6812      	ldr	r2, [r2, #0]
 801522a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801522c:	693a      	ldr	r2, [r7, #16]
 801522e:	6a3b      	ldr	r3, [r7, #32]
 8015230:	b2db      	uxtb	r3, r3
 8015232:	00db      	lsls	r3, r3, #3
 8015234:	fa22 f303 	lsr.w	r3, r2, r3
 8015238:	b2da      	uxtb	r2, r3
 801523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801523c:	701a      	strb	r2, [r3, #0]
      i++;
 801523e:	6a3b      	ldr	r3, [r7, #32]
 8015240:	3301      	adds	r3, #1
 8015242:	623b      	str	r3, [r7, #32]
      pDest++;
 8015244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015246:	3301      	adds	r3, #1
 8015248:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801524a:	8bfb      	ldrh	r3, [r7, #30]
 801524c:	3b01      	subs	r3, #1
 801524e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015250:	8bfb      	ldrh	r3, [r7, #30]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d1ea      	bne.n	801522c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015258:	4618      	mov	r0, r3
 801525a:	372c      	adds	r7, #44	@ 0x2c
 801525c:	46bd      	mov	sp, r7
 801525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015262:	4770      	bx	lr

08015264 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015264:	b480      	push	{r7}
 8015266:	b085      	sub	sp, #20
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
 801526c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015272:	683b      	ldr	r3, [r7, #0]
 8015274:	781b      	ldrb	r3, [r3, #0]
 8015276:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	785b      	ldrb	r3, [r3, #1]
 801527c:	2b01      	cmp	r3, #1
 801527e:	d12c      	bne.n	80152da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	015a      	lsls	r2, r3, #5
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	4413      	add	r3, r2
 8015288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	2b00      	cmp	r3, #0
 8015290:	db12      	blt.n	80152b8 <USB_EPSetStall+0x54>
 8015292:	68bb      	ldr	r3, [r7, #8]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d00f      	beq.n	80152b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015298:	68bb      	ldr	r3, [r7, #8]
 801529a:	015a      	lsls	r2, r3, #5
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	4413      	add	r3, r2
 80152a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	68ba      	ldr	r2, [r7, #8]
 80152a8:	0151      	lsls	r1, r2, #5
 80152aa:	68fa      	ldr	r2, [r7, #12]
 80152ac:	440a      	add	r2, r1
 80152ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80152b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80152b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80152b8:	68bb      	ldr	r3, [r7, #8]
 80152ba:	015a      	lsls	r2, r3, #5
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	4413      	add	r3, r2
 80152c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	68ba      	ldr	r2, [r7, #8]
 80152c8:	0151      	lsls	r1, r2, #5
 80152ca:	68fa      	ldr	r2, [r7, #12]
 80152cc:	440a      	add	r2, r1
 80152ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80152d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80152d6:	6013      	str	r3, [r2, #0]
 80152d8:	e02b      	b.n	8015332 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	015a      	lsls	r2, r3, #5
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	4413      	add	r3, r2
 80152e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	db12      	blt.n	8015312 <USB_EPSetStall+0xae>
 80152ec:	68bb      	ldr	r3, [r7, #8]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d00f      	beq.n	8015312 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80152f2:	68bb      	ldr	r3, [r7, #8]
 80152f4:	015a      	lsls	r2, r3, #5
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	4413      	add	r3, r2
 80152fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	68ba      	ldr	r2, [r7, #8]
 8015302:	0151      	lsls	r1, r2, #5
 8015304:	68fa      	ldr	r2, [r7, #12]
 8015306:	440a      	add	r2, r1
 8015308:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801530c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015310:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	015a      	lsls	r2, r3, #5
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	4413      	add	r3, r2
 801531a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	68ba      	ldr	r2, [r7, #8]
 8015322:	0151      	lsls	r1, r2, #5
 8015324:	68fa      	ldr	r2, [r7, #12]
 8015326:	440a      	add	r2, r1
 8015328:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801532c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015330:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015332:	2300      	movs	r3, #0
}
 8015334:	4618      	mov	r0, r3
 8015336:	3714      	adds	r7, #20
 8015338:	46bd      	mov	sp, r7
 801533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533e:	4770      	bx	lr

08015340 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015340:	b480      	push	{r7}
 8015342:	b085      	sub	sp, #20
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
 8015348:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	781b      	ldrb	r3, [r3, #0]
 8015352:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	785b      	ldrb	r3, [r3, #1]
 8015358:	2b01      	cmp	r3, #1
 801535a:	d128      	bne.n	80153ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801535c:	68bb      	ldr	r3, [r7, #8]
 801535e:	015a      	lsls	r2, r3, #5
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	4413      	add	r3, r2
 8015364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	68ba      	ldr	r2, [r7, #8]
 801536c:	0151      	lsls	r1, r2, #5
 801536e:	68fa      	ldr	r2, [r7, #12]
 8015370:	440a      	add	r2, r1
 8015372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015376:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801537a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	791b      	ldrb	r3, [r3, #4]
 8015380:	2b03      	cmp	r3, #3
 8015382:	d003      	beq.n	801538c <USB_EPClearStall+0x4c>
 8015384:	683b      	ldr	r3, [r7, #0]
 8015386:	791b      	ldrb	r3, [r3, #4]
 8015388:	2b02      	cmp	r3, #2
 801538a:	d138      	bne.n	80153fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	015a      	lsls	r2, r3, #5
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	4413      	add	r3, r2
 8015394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	68ba      	ldr	r2, [r7, #8]
 801539c:	0151      	lsls	r1, r2, #5
 801539e:	68fa      	ldr	r2, [r7, #12]
 80153a0:	440a      	add	r2, r1
 80153a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80153a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80153aa:	6013      	str	r3, [r2, #0]
 80153ac:	e027      	b.n	80153fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80153ae:	68bb      	ldr	r3, [r7, #8]
 80153b0:	015a      	lsls	r2, r3, #5
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	4413      	add	r3, r2
 80153b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	68ba      	ldr	r2, [r7, #8]
 80153be:	0151      	lsls	r1, r2, #5
 80153c0:	68fa      	ldr	r2, [r7, #12]
 80153c2:	440a      	add	r2, r1
 80153c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80153c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80153cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80153ce:	683b      	ldr	r3, [r7, #0]
 80153d0:	791b      	ldrb	r3, [r3, #4]
 80153d2:	2b03      	cmp	r3, #3
 80153d4:	d003      	beq.n	80153de <USB_EPClearStall+0x9e>
 80153d6:	683b      	ldr	r3, [r7, #0]
 80153d8:	791b      	ldrb	r3, [r3, #4]
 80153da:	2b02      	cmp	r3, #2
 80153dc:	d10f      	bne.n	80153fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	015a      	lsls	r2, r3, #5
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	4413      	add	r3, r2
 80153e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	68ba      	ldr	r2, [r7, #8]
 80153ee:	0151      	lsls	r1, r2, #5
 80153f0:	68fa      	ldr	r2, [r7, #12]
 80153f2:	440a      	add	r2, r1
 80153f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80153f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80153fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80153fe:	2300      	movs	r3, #0
}
 8015400:	4618      	mov	r0, r3
 8015402:	3714      	adds	r7, #20
 8015404:	46bd      	mov	sp, r7
 8015406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540a:	4770      	bx	lr

0801540c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801540c:	b480      	push	{r7}
 801540e:	b085      	sub	sp, #20
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
 8015414:	460b      	mov	r3, r1
 8015416:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	68fa      	ldr	r2, [r7, #12]
 8015426:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801542a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801542e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015436:	681a      	ldr	r2, [r3, #0]
 8015438:	78fb      	ldrb	r3, [r7, #3]
 801543a:	011b      	lsls	r3, r3, #4
 801543c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8015440:	68f9      	ldr	r1, [r7, #12]
 8015442:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015446:	4313      	orrs	r3, r2
 8015448:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801544a:	2300      	movs	r3, #0
}
 801544c:	4618      	mov	r0, r3
 801544e:	3714      	adds	r7, #20
 8015450:	46bd      	mov	sp, r7
 8015452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015456:	4770      	bx	lr

08015458 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015458:	b480      	push	{r7}
 801545a:	b085      	sub	sp, #20
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	68fa      	ldr	r2, [r7, #12]
 801546e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015472:	f023 0303 	bic.w	r3, r3, #3
 8015476:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801547e:	685b      	ldr	r3, [r3, #4]
 8015480:	68fa      	ldr	r2, [r7, #12]
 8015482:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015486:	f023 0302 	bic.w	r3, r3, #2
 801548a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801548c:	2300      	movs	r3, #0
}
 801548e:	4618      	mov	r0, r3
 8015490:	3714      	adds	r7, #20
 8015492:	46bd      	mov	sp, r7
 8015494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015498:	4770      	bx	lr

0801549a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801549a:	b480      	push	{r7}
 801549c:	b085      	sub	sp, #20
 801549e:	af00      	add	r7, sp, #0
 80154a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	68fa      	ldr	r2, [r7, #12]
 80154b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80154b4:	f023 0303 	bic.w	r3, r3, #3
 80154b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	68fa      	ldr	r2, [r7, #12]
 80154c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80154c8:	f043 0302 	orr.w	r3, r3, #2
 80154cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80154ce:	2300      	movs	r3, #0
}
 80154d0:	4618      	mov	r0, r3
 80154d2:	3714      	adds	r7, #20
 80154d4:	46bd      	mov	sp, r7
 80154d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154da:	4770      	bx	lr

080154dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80154dc:	b480      	push	{r7}
 80154de:	b085      	sub	sp, #20
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	695b      	ldr	r3, [r3, #20]
 80154e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	699b      	ldr	r3, [r3, #24]
 80154ee:	68fa      	ldr	r2, [r7, #12]
 80154f0:	4013      	ands	r3, r2
 80154f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80154f4:	68fb      	ldr	r3, [r7, #12]
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	3714      	adds	r7, #20
 80154fa:	46bd      	mov	sp, r7
 80154fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015500:	4770      	bx	lr

08015502 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015502:	b480      	push	{r7}
 8015504:	b085      	sub	sp, #20
 8015506:	af00      	add	r7, sp, #0
 8015508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015514:	699b      	ldr	r3, [r3, #24]
 8015516:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801551e:	69db      	ldr	r3, [r3, #28]
 8015520:	68ba      	ldr	r2, [r7, #8]
 8015522:	4013      	ands	r3, r2
 8015524:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015526:	68bb      	ldr	r3, [r7, #8]
 8015528:	0c1b      	lsrs	r3, r3, #16
}
 801552a:	4618      	mov	r0, r3
 801552c:	3714      	adds	r7, #20
 801552e:	46bd      	mov	sp, r7
 8015530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015534:	4770      	bx	lr

08015536 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015536:	b480      	push	{r7}
 8015538:	b085      	sub	sp, #20
 801553a:	af00      	add	r7, sp, #0
 801553c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015548:	699b      	ldr	r3, [r3, #24]
 801554a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015552:	69db      	ldr	r3, [r3, #28]
 8015554:	68ba      	ldr	r2, [r7, #8]
 8015556:	4013      	ands	r3, r2
 8015558:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	b29b      	uxth	r3, r3
}
 801555e:	4618      	mov	r0, r3
 8015560:	3714      	adds	r7, #20
 8015562:	46bd      	mov	sp, r7
 8015564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015568:	4770      	bx	lr

0801556a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801556a:	b480      	push	{r7}
 801556c:	b085      	sub	sp, #20
 801556e:	af00      	add	r7, sp, #0
 8015570:	6078      	str	r0, [r7, #4]
 8015572:	460b      	mov	r3, r1
 8015574:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801557a:	78fb      	ldrb	r3, [r7, #3]
 801557c:	015a      	lsls	r2, r3, #5
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	4413      	add	r3, r2
 8015582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015586:	689b      	ldr	r3, [r3, #8]
 8015588:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015590:	695b      	ldr	r3, [r3, #20]
 8015592:	68ba      	ldr	r2, [r7, #8]
 8015594:	4013      	ands	r3, r2
 8015596:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015598:	68bb      	ldr	r3, [r7, #8]
}
 801559a:	4618      	mov	r0, r3
 801559c:	3714      	adds	r7, #20
 801559e:	46bd      	mov	sp, r7
 80155a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a4:	4770      	bx	lr

080155a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80155a6:	b480      	push	{r7}
 80155a8:	b087      	sub	sp, #28
 80155aa:	af00      	add	r7, sp, #0
 80155ac:	6078      	str	r0, [r7, #4]
 80155ae:	460b      	mov	r3, r1
 80155b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80155b6:	697b      	ldr	r3, [r7, #20]
 80155b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80155bc:	691b      	ldr	r3, [r3, #16]
 80155be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80155c0:	697b      	ldr	r3, [r7, #20]
 80155c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80155c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80155c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80155ca:	78fb      	ldrb	r3, [r7, #3]
 80155cc:	f003 030f 	and.w	r3, r3, #15
 80155d0:	68fa      	ldr	r2, [r7, #12]
 80155d2:	fa22 f303 	lsr.w	r3, r2, r3
 80155d6:	01db      	lsls	r3, r3, #7
 80155d8:	b2db      	uxtb	r3, r3
 80155da:	693a      	ldr	r2, [r7, #16]
 80155dc:	4313      	orrs	r3, r2
 80155de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80155e0:	78fb      	ldrb	r3, [r7, #3]
 80155e2:	015a      	lsls	r2, r3, #5
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	4413      	add	r3, r2
 80155e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80155ec:	689b      	ldr	r3, [r3, #8]
 80155ee:	693a      	ldr	r2, [r7, #16]
 80155f0:	4013      	ands	r3, r2
 80155f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80155f4:	68bb      	ldr	r3, [r7, #8]
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	371c      	adds	r7, #28
 80155fa:	46bd      	mov	sp, r7
 80155fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015600:	4770      	bx	lr

08015602 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8015602:	b480      	push	{r7}
 8015604:	b083      	sub	sp, #12
 8015606:	af00      	add	r7, sp, #0
 8015608:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	695b      	ldr	r3, [r3, #20]
 801560e:	f003 0301 	and.w	r3, r3, #1
}
 8015612:	4618      	mov	r0, r3
 8015614:	370c      	adds	r7, #12
 8015616:	46bd      	mov	sp, r7
 8015618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561c:	4770      	bx	lr
	...

08015620 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8015620:	b480      	push	{r7}
 8015622:	b085      	sub	sp, #20
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015632:	681a      	ldr	r2, [r3, #0]
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801563a:	4619      	mov	r1, r3
 801563c:	4b09      	ldr	r3, [pc, #36]	@ (8015664 <USB_ActivateSetup+0x44>)
 801563e:	4013      	ands	r3, r2
 8015640:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015648:	685b      	ldr	r3, [r3, #4]
 801564a:	68fa      	ldr	r2, [r7, #12]
 801564c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015654:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015656:	2300      	movs	r3, #0
}
 8015658:	4618      	mov	r0, r3
 801565a:	3714      	adds	r7, #20
 801565c:	46bd      	mov	sp, r7
 801565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015662:	4770      	bx	lr
 8015664:	fffff800 	.word	0xfffff800

08015668 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8015668:	b480      	push	{r7}
 801566a:	b087      	sub	sp, #28
 801566c:	af00      	add	r7, sp, #0
 801566e:	60f8      	str	r0, [r7, #12]
 8015670:	460b      	mov	r3, r1
 8015672:	607a      	str	r2, [r7, #4]
 8015674:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	333c      	adds	r3, #60	@ 0x3c
 801567e:	3304      	adds	r3, #4
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015684:	693b      	ldr	r3, [r7, #16]
 8015686:	4a26      	ldr	r2, [pc, #152]	@ (8015720 <USB_EP0_OutStart+0xb8>)
 8015688:	4293      	cmp	r3, r2
 801568a:	d90a      	bls.n	80156a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015698:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801569c:	d101      	bne.n	80156a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801569e:	2300      	movs	r3, #0
 80156a0:	e037      	b.n	8015712 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80156a2:	697b      	ldr	r3, [r7, #20]
 80156a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156a8:	461a      	mov	r2, r3
 80156aa:	2300      	movs	r3, #0
 80156ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156b4:	691b      	ldr	r3, [r3, #16]
 80156b6:	697a      	ldr	r2, [r7, #20]
 80156b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80156bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80156c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80156c2:	697b      	ldr	r3, [r7, #20]
 80156c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156c8:	691b      	ldr	r3, [r3, #16]
 80156ca:	697a      	ldr	r2, [r7, #20]
 80156cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80156d0:	f043 0318 	orr.w	r3, r3, #24
 80156d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80156d6:	697b      	ldr	r3, [r7, #20]
 80156d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156dc:	691b      	ldr	r3, [r3, #16]
 80156de:	697a      	ldr	r2, [r7, #20]
 80156e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80156e4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80156e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80156ea:	7afb      	ldrb	r3, [r7, #11]
 80156ec:	2b01      	cmp	r3, #1
 80156ee:	d10f      	bne.n	8015710 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156f6:	461a      	mov	r2, r3
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80156fc:	697b      	ldr	r3, [r7, #20]
 80156fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	697a      	ldr	r2, [r7, #20]
 8015706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801570a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801570e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015710:	2300      	movs	r3, #0
}
 8015712:	4618      	mov	r0, r3
 8015714:	371c      	adds	r7, #28
 8015716:	46bd      	mov	sp, r7
 8015718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571c:	4770      	bx	lr
 801571e:	bf00      	nop
 8015720:	4f54300a 	.word	0x4f54300a

08015724 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015724:	b480      	push	{r7}
 8015726:	b085      	sub	sp, #20
 8015728:	af00      	add	r7, sp, #0
 801572a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801572c:	2300      	movs	r3, #0
 801572e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	3301      	adds	r3, #1
 8015734:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801573c:	d901      	bls.n	8015742 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801573e:	2303      	movs	r3, #3
 8015740:	e01b      	b.n	801577a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	691b      	ldr	r3, [r3, #16]
 8015746:	2b00      	cmp	r3, #0
 8015748:	daf2      	bge.n	8015730 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801574a:	2300      	movs	r3, #0
 801574c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	691b      	ldr	r3, [r3, #16]
 8015752:	f043 0201 	orr.w	r2, r3, #1
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	3301      	adds	r3, #1
 801575e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015766:	d901      	bls.n	801576c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015768:	2303      	movs	r3, #3
 801576a:	e006      	b.n	801577a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	691b      	ldr	r3, [r3, #16]
 8015770:	f003 0301 	and.w	r3, r3, #1
 8015774:	2b01      	cmp	r3, #1
 8015776:	d0f0      	beq.n	801575a <USB_CoreReset+0x36>

  return HAL_OK;
 8015778:	2300      	movs	r3, #0
}
 801577a:	4618      	mov	r0, r3
 801577c:	3714      	adds	r7, #20
 801577e:	46bd      	mov	sp, r7
 8015780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015784:	4770      	bx	lr
	...

08015788 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b084      	sub	sp, #16
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
 8015790:	460b      	mov	r3, r1
 8015792:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015794:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8015798:	f002 fcca 	bl	8018130 <USBD_static_malloc>
 801579c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d109      	bne.n	80157b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	32b0      	adds	r2, #176	@ 0xb0
 80157ae:	2100      	movs	r1, #0
 80157b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80157b4:	2302      	movs	r3, #2
 80157b6:	e0d4      	b.n	8015962 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80157b8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80157bc:	2100      	movs	r1, #0
 80157be:	68f8      	ldr	r0, [r7, #12]
 80157c0:	f004 f89f 	bl	8019902 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	32b0      	adds	r2, #176	@ 0xb0
 80157ce:	68f9      	ldr	r1, [r7, #12]
 80157d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	32b0      	adds	r2, #176	@ 0xb0
 80157de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	7c1b      	ldrb	r3, [r3, #16]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d138      	bne.n	8015862 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80157f0:	4b5e      	ldr	r3, [pc, #376]	@ (801596c <USBD_CDC_Init+0x1e4>)
 80157f2:	7819      	ldrb	r1, [r3, #0]
 80157f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80157f8:	2202      	movs	r2, #2
 80157fa:	6878      	ldr	r0, [r7, #4]
 80157fc:	f002 fb75 	bl	8017eea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015800:	4b5a      	ldr	r3, [pc, #360]	@ (801596c <USBD_CDC_Init+0x1e4>)
 8015802:	781b      	ldrb	r3, [r3, #0]
 8015804:	f003 020f 	and.w	r2, r3, #15
 8015808:	6879      	ldr	r1, [r7, #4]
 801580a:	4613      	mov	r3, r2
 801580c:	009b      	lsls	r3, r3, #2
 801580e:	4413      	add	r3, r2
 8015810:	009b      	lsls	r3, r3, #2
 8015812:	440b      	add	r3, r1
 8015814:	3324      	adds	r3, #36	@ 0x24
 8015816:	2201      	movs	r2, #1
 8015818:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801581a:	4b55      	ldr	r3, [pc, #340]	@ (8015970 <USBD_CDC_Init+0x1e8>)
 801581c:	7819      	ldrb	r1, [r3, #0]
 801581e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015822:	2202      	movs	r2, #2
 8015824:	6878      	ldr	r0, [r7, #4]
 8015826:	f002 fb60 	bl	8017eea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801582a:	4b51      	ldr	r3, [pc, #324]	@ (8015970 <USBD_CDC_Init+0x1e8>)
 801582c:	781b      	ldrb	r3, [r3, #0]
 801582e:	f003 020f 	and.w	r2, r3, #15
 8015832:	6879      	ldr	r1, [r7, #4]
 8015834:	4613      	mov	r3, r2
 8015836:	009b      	lsls	r3, r3, #2
 8015838:	4413      	add	r3, r2
 801583a:	009b      	lsls	r3, r3, #2
 801583c:	440b      	add	r3, r1
 801583e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015842:	2201      	movs	r2, #1
 8015844:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015846:	4b4b      	ldr	r3, [pc, #300]	@ (8015974 <USBD_CDC_Init+0x1ec>)
 8015848:	781b      	ldrb	r3, [r3, #0]
 801584a:	f003 020f 	and.w	r2, r3, #15
 801584e:	6879      	ldr	r1, [r7, #4]
 8015850:	4613      	mov	r3, r2
 8015852:	009b      	lsls	r3, r3, #2
 8015854:	4413      	add	r3, r2
 8015856:	009b      	lsls	r3, r3, #2
 8015858:	440b      	add	r3, r1
 801585a:	3326      	adds	r3, #38	@ 0x26
 801585c:	2210      	movs	r2, #16
 801585e:	801a      	strh	r2, [r3, #0]
 8015860:	e035      	b.n	80158ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015862:	4b42      	ldr	r3, [pc, #264]	@ (801596c <USBD_CDC_Init+0x1e4>)
 8015864:	7819      	ldrb	r1, [r3, #0]
 8015866:	2340      	movs	r3, #64	@ 0x40
 8015868:	2202      	movs	r2, #2
 801586a:	6878      	ldr	r0, [r7, #4]
 801586c:	f002 fb3d 	bl	8017eea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015870:	4b3e      	ldr	r3, [pc, #248]	@ (801596c <USBD_CDC_Init+0x1e4>)
 8015872:	781b      	ldrb	r3, [r3, #0]
 8015874:	f003 020f 	and.w	r2, r3, #15
 8015878:	6879      	ldr	r1, [r7, #4]
 801587a:	4613      	mov	r3, r2
 801587c:	009b      	lsls	r3, r3, #2
 801587e:	4413      	add	r3, r2
 8015880:	009b      	lsls	r3, r3, #2
 8015882:	440b      	add	r3, r1
 8015884:	3324      	adds	r3, #36	@ 0x24
 8015886:	2201      	movs	r2, #1
 8015888:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801588a:	4b39      	ldr	r3, [pc, #228]	@ (8015970 <USBD_CDC_Init+0x1e8>)
 801588c:	7819      	ldrb	r1, [r3, #0]
 801588e:	2340      	movs	r3, #64	@ 0x40
 8015890:	2202      	movs	r2, #2
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f002 fb29 	bl	8017eea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015898:	4b35      	ldr	r3, [pc, #212]	@ (8015970 <USBD_CDC_Init+0x1e8>)
 801589a:	781b      	ldrb	r3, [r3, #0]
 801589c:	f003 020f 	and.w	r2, r3, #15
 80158a0:	6879      	ldr	r1, [r7, #4]
 80158a2:	4613      	mov	r3, r2
 80158a4:	009b      	lsls	r3, r3, #2
 80158a6:	4413      	add	r3, r2
 80158a8:	009b      	lsls	r3, r3, #2
 80158aa:	440b      	add	r3, r1
 80158ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80158b0:	2201      	movs	r2, #1
 80158b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80158b4:	4b2f      	ldr	r3, [pc, #188]	@ (8015974 <USBD_CDC_Init+0x1ec>)
 80158b6:	781b      	ldrb	r3, [r3, #0]
 80158b8:	f003 020f 	and.w	r2, r3, #15
 80158bc:	6879      	ldr	r1, [r7, #4]
 80158be:	4613      	mov	r3, r2
 80158c0:	009b      	lsls	r3, r3, #2
 80158c2:	4413      	add	r3, r2
 80158c4:	009b      	lsls	r3, r3, #2
 80158c6:	440b      	add	r3, r1
 80158c8:	3326      	adds	r3, #38	@ 0x26
 80158ca:	2210      	movs	r2, #16
 80158cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80158ce:	4b29      	ldr	r3, [pc, #164]	@ (8015974 <USBD_CDC_Init+0x1ec>)
 80158d0:	7819      	ldrb	r1, [r3, #0]
 80158d2:	2308      	movs	r3, #8
 80158d4:	2203      	movs	r2, #3
 80158d6:	6878      	ldr	r0, [r7, #4]
 80158d8:	f002 fb07 	bl	8017eea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80158dc:	4b25      	ldr	r3, [pc, #148]	@ (8015974 <USBD_CDC_Init+0x1ec>)
 80158de:	781b      	ldrb	r3, [r3, #0]
 80158e0:	f003 020f 	and.w	r2, r3, #15
 80158e4:	6879      	ldr	r1, [r7, #4]
 80158e6:	4613      	mov	r3, r2
 80158e8:	009b      	lsls	r3, r3, #2
 80158ea:	4413      	add	r3, r2
 80158ec:	009b      	lsls	r3, r3, #2
 80158ee:	440b      	add	r3, r1
 80158f0:	3324      	adds	r3, #36	@ 0x24
 80158f2:	2201      	movs	r2, #1
 80158f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	2200      	movs	r2, #0
 80158fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015904:	687a      	ldr	r2, [r7, #4]
 8015906:	33b0      	adds	r3, #176	@ 0xb0
 8015908:	009b      	lsls	r3, r3, #2
 801590a:	4413      	add	r3, r2
 801590c:	685b      	ldr	r3, [r3, #4]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	2200      	movs	r2, #0
 8015916:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	2200      	movs	r2, #0
 801591e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8015928:	2b00      	cmp	r3, #0
 801592a:	d101      	bne.n	8015930 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801592c:	2302      	movs	r3, #2
 801592e:	e018      	b.n	8015962 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	7c1b      	ldrb	r3, [r3, #16]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d10a      	bne.n	801594e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015938:	4b0d      	ldr	r3, [pc, #52]	@ (8015970 <USBD_CDC_Init+0x1e8>)
 801593a:	7819      	ldrb	r1, [r3, #0]
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015942:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	f002 fbbe 	bl	80180c8 <USBD_LL_PrepareReceive>
 801594c:	e008      	b.n	8015960 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801594e:	4b08      	ldr	r3, [pc, #32]	@ (8015970 <USBD_CDC_Init+0x1e8>)
 8015950:	7819      	ldrb	r1, [r3, #0]
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015958:	2340      	movs	r3, #64	@ 0x40
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f002 fbb4 	bl	80180c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015960:	2300      	movs	r3, #0
}
 8015962:	4618      	mov	r0, r3
 8015964:	3710      	adds	r7, #16
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}
 801596a:	bf00      	nop
 801596c:	24000097 	.word	0x24000097
 8015970:	24000098 	.word	0x24000098
 8015974:	24000099 	.word	0x24000099

08015978 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b082      	sub	sp, #8
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
 8015980:	460b      	mov	r3, r1
 8015982:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015984:	4b3a      	ldr	r3, [pc, #232]	@ (8015a70 <USBD_CDC_DeInit+0xf8>)
 8015986:	781b      	ldrb	r3, [r3, #0]
 8015988:	4619      	mov	r1, r3
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f002 fad3 	bl	8017f36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015990:	4b37      	ldr	r3, [pc, #220]	@ (8015a70 <USBD_CDC_DeInit+0xf8>)
 8015992:	781b      	ldrb	r3, [r3, #0]
 8015994:	f003 020f 	and.w	r2, r3, #15
 8015998:	6879      	ldr	r1, [r7, #4]
 801599a:	4613      	mov	r3, r2
 801599c:	009b      	lsls	r3, r3, #2
 801599e:	4413      	add	r3, r2
 80159a0:	009b      	lsls	r3, r3, #2
 80159a2:	440b      	add	r3, r1
 80159a4:	3324      	adds	r3, #36	@ 0x24
 80159a6:	2200      	movs	r2, #0
 80159a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80159aa:	4b32      	ldr	r3, [pc, #200]	@ (8015a74 <USBD_CDC_DeInit+0xfc>)
 80159ac:	781b      	ldrb	r3, [r3, #0]
 80159ae:	4619      	mov	r1, r3
 80159b0:	6878      	ldr	r0, [r7, #4]
 80159b2:	f002 fac0 	bl	8017f36 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80159b6:	4b2f      	ldr	r3, [pc, #188]	@ (8015a74 <USBD_CDC_DeInit+0xfc>)
 80159b8:	781b      	ldrb	r3, [r3, #0]
 80159ba:	f003 020f 	and.w	r2, r3, #15
 80159be:	6879      	ldr	r1, [r7, #4]
 80159c0:	4613      	mov	r3, r2
 80159c2:	009b      	lsls	r3, r3, #2
 80159c4:	4413      	add	r3, r2
 80159c6:	009b      	lsls	r3, r3, #2
 80159c8:	440b      	add	r3, r1
 80159ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80159ce:	2200      	movs	r2, #0
 80159d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80159d2:	4b29      	ldr	r3, [pc, #164]	@ (8015a78 <USBD_CDC_DeInit+0x100>)
 80159d4:	781b      	ldrb	r3, [r3, #0]
 80159d6:	4619      	mov	r1, r3
 80159d8:	6878      	ldr	r0, [r7, #4]
 80159da:	f002 faac 	bl	8017f36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80159de:	4b26      	ldr	r3, [pc, #152]	@ (8015a78 <USBD_CDC_DeInit+0x100>)
 80159e0:	781b      	ldrb	r3, [r3, #0]
 80159e2:	f003 020f 	and.w	r2, r3, #15
 80159e6:	6879      	ldr	r1, [r7, #4]
 80159e8:	4613      	mov	r3, r2
 80159ea:	009b      	lsls	r3, r3, #2
 80159ec:	4413      	add	r3, r2
 80159ee:	009b      	lsls	r3, r3, #2
 80159f0:	440b      	add	r3, r1
 80159f2:	3324      	adds	r3, #36	@ 0x24
 80159f4:	2200      	movs	r2, #0
 80159f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80159f8:	4b1f      	ldr	r3, [pc, #124]	@ (8015a78 <USBD_CDC_DeInit+0x100>)
 80159fa:	781b      	ldrb	r3, [r3, #0]
 80159fc:	f003 020f 	and.w	r2, r3, #15
 8015a00:	6879      	ldr	r1, [r7, #4]
 8015a02:	4613      	mov	r3, r2
 8015a04:	009b      	lsls	r3, r3, #2
 8015a06:	4413      	add	r3, r2
 8015a08:	009b      	lsls	r3, r3, #2
 8015a0a:	440b      	add	r3, r1
 8015a0c:	3326      	adds	r3, #38	@ 0x26
 8015a0e:	2200      	movs	r2, #0
 8015a10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	32b0      	adds	r2, #176	@ 0xb0
 8015a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d01f      	beq.n	8015a64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015a2a:	687a      	ldr	r2, [r7, #4]
 8015a2c:	33b0      	adds	r3, #176	@ 0xb0
 8015a2e:	009b      	lsls	r3, r3, #2
 8015a30:	4413      	add	r3, r2
 8015a32:	685b      	ldr	r3, [r3, #4]
 8015a34:	685b      	ldr	r3, [r3, #4]
 8015a36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	32b0      	adds	r2, #176	@ 0xb0
 8015a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a46:	4618      	mov	r0, r3
 8015a48:	f002 fb80 	bl	801814c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	32b0      	adds	r2, #176	@ 0xb0
 8015a56:	2100      	movs	r1, #0
 8015a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	2200      	movs	r2, #0
 8015a60:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015a64:	2300      	movs	r3, #0
}
 8015a66:	4618      	mov	r0, r3
 8015a68:	3708      	adds	r7, #8
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bd80      	pop	{r7, pc}
 8015a6e:	bf00      	nop
 8015a70:	24000097 	.word	0x24000097
 8015a74:	24000098 	.word	0x24000098
 8015a78:	24000099 	.word	0x24000099

08015a7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b086      	sub	sp, #24
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
 8015a84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	32b0      	adds	r2, #176	@ 0xb0
 8015a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015a96:	2300      	movs	r3, #0
 8015a98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015aa2:	693b      	ldr	r3, [r7, #16]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d101      	bne.n	8015aac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015aa8:	2303      	movs	r3, #3
 8015aaa:	e0bf      	b.n	8015c2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015aac:	683b      	ldr	r3, [r7, #0]
 8015aae:	781b      	ldrb	r3, [r3, #0]
 8015ab0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d050      	beq.n	8015b5a <USBD_CDC_Setup+0xde>
 8015ab8:	2b20      	cmp	r3, #32
 8015aba:	f040 80af 	bne.w	8015c1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015abe:	683b      	ldr	r3, [r7, #0]
 8015ac0:	88db      	ldrh	r3, [r3, #6]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d03a      	beq.n	8015b3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015ac6:	683b      	ldr	r3, [r7, #0]
 8015ac8:	781b      	ldrb	r3, [r3, #0]
 8015aca:	b25b      	sxtb	r3, r3
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	da1b      	bge.n	8015b08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015ad6:	687a      	ldr	r2, [r7, #4]
 8015ad8:	33b0      	adds	r3, #176	@ 0xb0
 8015ada:	009b      	lsls	r3, r3, #2
 8015adc:	4413      	add	r3, r2
 8015ade:	685b      	ldr	r3, [r3, #4]
 8015ae0:	689b      	ldr	r3, [r3, #8]
 8015ae2:	683a      	ldr	r2, [r7, #0]
 8015ae4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015ae6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015ae8:	683a      	ldr	r2, [r7, #0]
 8015aea:	88d2      	ldrh	r2, [r2, #6]
 8015aec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	88db      	ldrh	r3, [r3, #6]
 8015af2:	2b07      	cmp	r3, #7
 8015af4:	bf28      	it	cs
 8015af6:	2307      	movcs	r3, #7
 8015af8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	89fa      	ldrh	r2, [r7, #14]
 8015afe:	4619      	mov	r1, r3
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f001 fdbd 	bl	8017680 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015b06:	e090      	b.n	8015c2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015b08:	683b      	ldr	r3, [r7, #0]
 8015b0a:	785a      	ldrb	r2, [r3, #1]
 8015b0c:	693b      	ldr	r3, [r7, #16]
 8015b0e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015b12:	683b      	ldr	r3, [r7, #0]
 8015b14:	88db      	ldrh	r3, [r3, #6]
 8015b16:	2b3f      	cmp	r3, #63	@ 0x3f
 8015b18:	d803      	bhi.n	8015b22 <USBD_CDC_Setup+0xa6>
 8015b1a:	683b      	ldr	r3, [r7, #0]
 8015b1c:	88db      	ldrh	r3, [r3, #6]
 8015b1e:	b2da      	uxtb	r2, r3
 8015b20:	e000      	b.n	8015b24 <USBD_CDC_Setup+0xa8>
 8015b22:	2240      	movs	r2, #64	@ 0x40
 8015b24:	693b      	ldr	r3, [r7, #16]
 8015b26:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015b2a:	6939      	ldr	r1, [r7, #16]
 8015b2c:	693b      	ldr	r3, [r7, #16]
 8015b2e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8015b32:	461a      	mov	r2, r3
 8015b34:	6878      	ldr	r0, [r7, #4]
 8015b36:	f001 fdcf 	bl	80176d8 <USBD_CtlPrepareRx>
      break;
 8015b3a:	e076      	b.n	8015c2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015b42:	687a      	ldr	r2, [r7, #4]
 8015b44:	33b0      	adds	r3, #176	@ 0xb0
 8015b46:	009b      	lsls	r3, r3, #2
 8015b48:	4413      	add	r3, r2
 8015b4a:	685b      	ldr	r3, [r3, #4]
 8015b4c:	689b      	ldr	r3, [r3, #8]
 8015b4e:	683a      	ldr	r2, [r7, #0]
 8015b50:	7850      	ldrb	r0, [r2, #1]
 8015b52:	2200      	movs	r2, #0
 8015b54:	6839      	ldr	r1, [r7, #0]
 8015b56:	4798      	blx	r3
      break;
 8015b58:	e067      	b.n	8015c2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015b5a:	683b      	ldr	r3, [r7, #0]
 8015b5c:	785b      	ldrb	r3, [r3, #1]
 8015b5e:	2b0b      	cmp	r3, #11
 8015b60:	d851      	bhi.n	8015c06 <USBD_CDC_Setup+0x18a>
 8015b62:	a201      	add	r2, pc, #4	@ (adr r2, 8015b68 <USBD_CDC_Setup+0xec>)
 8015b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b68:	08015b99 	.word	0x08015b99
 8015b6c:	08015c15 	.word	0x08015c15
 8015b70:	08015c07 	.word	0x08015c07
 8015b74:	08015c07 	.word	0x08015c07
 8015b78:	08015c07 	.word	0x08015c07
 8015b7c:	08015c07 	.word	0x08015c07
 8015b80:	08015c07 	.word	0x08015c07
 8015b84:	08015c07 	.word	0x08015c07
 8015b88:	08015c07 	.word	0x08015c07
 8015b8c:	08015c07 	.word	0x08015c07
 8015b90:	08015bc3 	.word	0x08015bc3
 8015b94:	08015bed 	.word	0x08015bed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015b9e:	b2db      	uxtb	r3, r3
 8015ba0:	2b03      	cmp	r3, #3
 8015ba2:	d107      	bne.n	8015bb4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015ba4:	f107 030a 	add.w	r3, r7, #10
 8015ba8:	2202      	movs	r2, #2
 8015baa:	4619      	mov	r1, r3
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	f001 fd67 	bl	8017680 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015bb2:	e032      	b.n	8015c1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015bb4:	6839      	ldr	r1, [r7, #0]
 8015bb6:	6878      	ldr	r0, [r7, #4]
 8015bb8:	f001 fce5 	bl	8017586 <USBD_CtlError>
            ret = USBD_FAIL;
 8015bbc:	2303      	movs	r3, #3
 8015bbe:	75fb      	strb	r3, [r7, #23]
          break;
 8015bc0:	e02b      	b.n	8015c1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015bc8:	b2db      	uxtb	r3, r3
 8015bca:	2b03      	cmp	r3, #3
 8015bcc:	d107      	bne.n	8015bde <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015bce:	f107 030d 	add.w	r3, r7, #13
 8015bd2:	2201      	movs	r2, #1
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	f001 fd52 	bl	8017680 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015bdc:	e01d      	b.n	8015c1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015bde:	6839      	ldr	r1, [r7, #0]
 8015be0:	6878      	ldr	r0, [r7, #4]
 8015be2:	f001 fcd0 	bl	8017586 <USBD_CtlError>
            ret = USBD_FAIL;
 8015be6:	2303      	movs	r3, #3
 8015be8:	75fb      	strb	r3, [r7, #23]
          break;
 8015bea:	e016      	b.n	8015c1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015bf2:	b2db      	uxtb	r3, r3
 8015bf4:	2b03      	cmp	r3, #3
 8015bf6:	d00f      	beq.n	8015c18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015bf8:	6839      	ldr	r1, [r7, #0]
 8015bfa:	6878      	ldr	r0, [r7, #4]
 8015bfc:	f001 fcc3 	bl	8017586 <USBD_CtlError>
            ret = USBD_FAIL;
 8015c00:	2303      	movs	r3, #3
 8015c02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015c04:	e008      	b.n	8015c18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015c06:	6839      	ldr	r1, [r7, #0]
 8015c08:	6878      	ldr	r0, [r7, #4]
 8015c0a:	f001 fcbc 	bl	8017586 <USBD_CtlError>
          ret = USBD_FAIL;
 8015c0e:	2303      	movs	r3, #3
 8015c10:	75fb      	strb	r3, [r7, #23]
          break;
 8015c12:	e002      	b.n	8015c1a <USBD_CDC_Setup+0x19e>
          break;
 8015c14:	bf00      	nop
 8015c16:	e008      	b.n	8015c2a <USBD_CDC_Setup+0x1ae>
          break;
 8015c18:	bf00      	nop
      }
      break;
 8015c1a:	e006      	b.n	8015c2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015c1c:	6839      	ldr	r1, [r7, #0]
 8015c1e:	6878      	ldr	r0, [r7, #4]
 8015c20:	f001 fcb1 	bl	8017586 <USBD_CtlError>
      ret = USBD_FAIL;
 8015c24:	2303      	movs	r3, #3
 8015c26:	75fb      	strb	r3, [r7, #23]
      break;
 8015c28:	bf00      	nop
  }

  return (uint8_t)ret;
 8015c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	3718      	adds	r7, #24
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd80      	pop	{r7, pc}

08015c34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b084      	sub	sp, #16
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
 8015c3c:	460b      	mov	r3, r1
 8015c3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015c46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	32b0      	adds	r2, #176	@ 0xb0
 8015c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d101      	bne.n	8015c5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015c5a:	2303      	movs	r3, #3
 8015c5c:	e065      	b.n	8015d2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	32b0      	adds	r2, #176	@ 0xb0
 8015c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015c6e:	78fb      	ldrb	r3, [r7, #3]
 8015c70:	f003 020f 	and.w	r2, r3, #15
 8015c74:	6879      	ldr	r1, [r7, #4]
 8015c76:	4613      	mov	r3, r2
 8015c78:	009b      	lsls	r3, r3, #2
 8015c7a:	4413      	add	r3, r2
 8015c7c:	009b      	lsls	r3, r3, #2
 8015c7e:	440b      	add	r3, r1
 8015c80:	3318      	adds	r3, #24
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d02f      	beq.n	8015ce8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015c88:	78fb      	ldrb	r3, [r7, #3]
 8015c8a:	f003 020f 	and.w	r2, r3, #15
 8015c8e:	6879      	ldr	r1, [r7, #4]
 8015c90:	4613      	mov	r3, r2
 8015c92:	009b      	lsls	r3, r3, #2
 8015c94:	4413      	add	r3, r2
 8015c96:	009b      	lsls	r3, r3, #2
 8015c98:	440b      	add	r3, r1
 8015c9a:	3318      	adds	r3, #24
 8015c9c:	681a      	ldr	r2, [r3, #0]
 8015c9e:	78fb      	ldrb	r3, [r7, #3]
 8015ca0:	f003 010f 	and.w	r1, r3, #15
 8015ca4:	68f8      	ldr	r0, [r7, #12]
 8015ca6:	460b      	mov	r3, r1
 8015ca8:	00db      	lsls	r3, r3, #3
 8015caa:	440b      	add	r3, r1
 8015cac:	009b      	lsls	r3, r3, #2
 8015cae:	4403      	add	r3, r0
 8015cb0:	331c      	adds	r3, #28
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8015cb8:	fb01 f303 	mul.w	r3, r1, r3
 8015cbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d112      	bne.n	8015ce8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015cc2:	78fb      	ldrb	r3, [r7, #3]
 8015cc4:	f003 020f 	and.w	r2, r3, #15
 8015cc8:	6879      	ldr	r1, [r7, #4]
 8015cca:	4613      	mov	r3, r2
 8015ccc:	009b      	lsls	r3, r3, #2
 8015cce:	4413      	add	r3, r2
 8015cd0:	009b      	lsls	r3, r3, #2
 8015cd2:	440b      	add	r3, r1
 8015cd4:	3318      	adds	r3, #24
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015cda:	78f9      	ldrb	r1, [r7, #3]
 8015cdc:	2300      	movs	r3, #0
 8015cde:	2200      	movs	r2, #0
 8015ce0:	6878      	ldr	r0, [r7, #4]
 8015ce2:	f002 f9d0 	bl	8018086 <USBD_LL_Transmit>
 8015ce6:	e01f      	b.n	8015d28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	2200      	movs	r2, #0
 8015cec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015cf6:	687a      	ldr	r2, [r7, #4]
 8015cf8:	33b0      	adds	r3, #176	@ 0xb0
 8015cfa:	009b      	lsls	r3, r3, #2
 8015cfc:	4413      	add	r3, r2
 8015cfe:	685b      	ldr	r3, [r3, #4]
 8015d00:	691b      	ldr	r3, [r3, #16]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d010      	beq.n	8015d28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d0c:	687a      	ldr	r2, [r7, #4]
 8015d0e:	33b0      	adds	r3, #176	@ 0xb0
 8015d10:	009b      	lsls	r3, r3, #2
 8015d12:	4413      	add	r3, r2
 8015d14:	685b      	ldr	r3, [r3, #4]
 8015d16:	691b      	ldr	r3, [r3, #16]
 8015d18:	68ba      	ldr	r2, [r7, #8]
 8015d1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8015d1e:	68ba      	ldr	r2, [r7, #8]
 8015d20:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8015d24:	78fa      	ldrb	r2, [r7, #3]
 8015d26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015d28:	2300      	movs	r3, #0
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3710      	adds	r7, #16
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}

08015d32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015d32:	b580      	push	{r7, lr}
 8015d34:	b084      	sub	sp, #16
 8015d36:	af00      	add	r7, sp, #0
 8015d38:	6078      	str	r0, [r7, #4]
 8015d3a:	460b      	mov	r3, r1
 8015d3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	32b0      	adds	r2, #176	@ 0xb0
 8015d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	32b0      	adds	r2, #176	@ 0xb0
 8015d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d101      	bne.n	8015d64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015d60:	2303      	movs	r3, #3
 8015d62:	e01a      	b.n	8015d9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015d64:	78fb      	ldrb	r3, [r7, #3]
 8015d66:	4619      	mov	r1, r3
 8015d68:	6878      	ldr	r0, [r7, #4]
 8015d6a:	f002 f9ce 	bl	801810a <USBD_LL_GetRxDataSize>
 8015d6e:	4602      	mov	r2, r0
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d7c:	687a      	ldr	r2, [r7, #4]
 8015d7e:	33b0      	adds	r3, #176	@ 0xb0
 8015d80:	009b      	lsls	r3, r3, #2
 8015d82:	4413      	add	r3, r2
 8015d84:	685b      	ldr	r3, [r3, #4]
 8015d86:	68db      	ldr	r3, [r3, #12]
 8015d88:	68fa      	ldr	r2, [r7, #12]
 8015d8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8015d8e:	68fa      	ldr	r2, [r7, #12]
 8015d90:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8015d94:	4611      	mov	r1, r2
 8015d96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015d98:	2300      	movs	r3, #0
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3710      	adds	r7, #16
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}

08015da2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015da2:	b580      	push	{r7, lr}
 8015da4:	b084      	sub	sp, #16
 8015da6:	af00      	add	r7, sp, #0
 8015da8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	32b0      	adds	r2, #176	@ 0xb0
 8015db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015db8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d101      	bne.n	8015dc4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015dc0:	2303      	movs	r3, #3
 8015dc2:	e024      	b.n	8015e0e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015dca:	687a      	ldr	r2, [r7, #4]
 8015dcc:	33b0      	adds	r3, #176	@ 0xb0
 8015dce:	009b      	lsls	r3, r3, #2
 8015dd0:	4413      	add	r3, r2
 8015dd2:	685b      	ldr	r3, [r3, #4]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d019      	beq.n	8015e0c <USBD_CDC_EP0_RxReady+0x6a>
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015dde:	2bff      	cmp	r3, #255	@ 0xff
 8015de0:	d014      	beq.n	8015e0c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	33b0      	adds	r3, #176	@ 0xb0
 8015dec:	009b      	lsls	r3, r3, #2
 8015dee:	4413      	add	r3, r2
 8015df0:	685b      	ldr	r3, [r3, #4]
 8015df2:	689b      	ldr	r3, [r3, #8]
 8015df4:	68fa      	ldr	r2, [r7, #12]
 8015df6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8015dfa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015dfc:	68fa      	ldr	r2, [r7, #12]
 8015dfe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015e02:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	22ff      	movs	r2, #255	@ 0xff
 8015e08:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8015e0c:	2300      	movs	r3, #0
}
 8015e0e:	4618      	mov	r0, r3
 8015e10:	3710      	adds	r7, #16
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bd80      	pop	{r7, pc}
	...

08015e18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b086      	sub	sp, #24
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015e20:	2182      	movs	r1, #130	@ 0x82
 8015e22:	4818      	ldr	r0, [pc, #96]	@ (8015e84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015e24:	f000 fd4f 	bl	80168c6 <USBD_GetEpDesc>
 8015e28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015e2a:	2101      	movs	r1, #1
 8015e2c:	4815      	ldr	r0, [pc, #84]	@ (8015e84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015e2e:	f000 fd4a 	bl	80168c6 <USBD_GetEpDesc>
 8015e32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015e34:	2181      	movs	r1, #129	@ 0x81
 8015e36:	4813      	ldr	r0, [pc, #76]	@ (8015e84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015e38:	f000 fd45 	bl	80168c6 <USBD_GetEpDesc>
 8015e3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015e3e:	697b      	ldr	r3, [r7, #20]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d002      	beq.n	8015e4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015e44:	697b      	ldr	r3, [r7, #20]
 8015e46:	2210      	movs	r2, #16
 8015e48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015e4a:	693b      	ldr	r3, [r7, #16]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d006      	beq.n	8015e5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015e50:	693b      	ldr	r3, [r7, #16]
 8015e52:	2200      	movs	r2, #0
 8015e54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015e58:	711a      	strb	r2, [r3, #4]
 8015e5a:	2200      	movs	r2, #0
 8015e5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d006      	beq.n	8015e72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	2200      	movs	r2, #0
 8015e68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015e6c:	711a      	strb	r2, [r3, #4]
 8015e6e:	2200      	movs	r2, #0
 8015e70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	2243      	movs	r2, #67	@ 0x43
 8015e76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015e78:	4b02      	ldr	r3, [pc, #8]	@ (8015e84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	3718      	adds	r7, #24
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}
 8015e82:	bf00      	nop
 8015e84:	24000054 	.word	0x24000054

08015e88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b086      	sub	sp, #24
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015e90:	2182      	movs	r1, #130	@ 0x82
 8015e92:	4818      	ldr	r0, [pc, #96]	@ (8015ef4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015e94:	f000 fd17 	bl	80168c6 <USBD_GetEpDesc>
 8015e98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015e9a:	2101      	movs	r1, #1
 8015e9c:	4815      	ldr	r0, [pc, #84]	@ (8015ef4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015e9e:	f000 fd12 	bl	80168c6 <USBD_GetEpDesc>
 8015ea2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015ea4:	2181      	movs	r1, #129	@ 0x81
 8015ea6:	4813      	ldr	r0, [pc, #76]	@ (8015ef4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015ea8:	f000 fd0d 	bl	80168c6 <USBD_GetEpDesc>
 8015eac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015eae:	697b      	ldr	r3, [r7, #20]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d002      	beq.n	8015eba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015eb4:	697b      	ldr	r3, [r7, #20]
 8015eb6:	2210      	movs	r2, #16
 8015eb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015eba:	693b      	ldr	r3, [r7, #16]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d006      	beq.n	8015ece <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015ec0:	693b      	ldr	r3, [r7, #16]
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	711a      	strb	r2, [r3, #4]
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	f042 0202 	orr.w	r2, r2, #2
 8015ecc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d006      	beq.n	8015ee2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	711a      	strb	r2, [r3, #4]
 8015eda:	2200      	movs	r2, #0
 8015edc:	f042 0202 	orr.w	r2, r2, #2
 8015ee0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	2243      	movs	r2, #67	@ 0x43
 8015ee6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015ee8:	4b02      	ldr	r3, [pc, #8]	@ (8015ef4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015eea:	4618      	mov	r0, r3
 8015eec:	3718      	adds	r7, #24
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}
 8015ef2:	bf00      	nop
 8015ef4:	24000054 	.word	0x24000054

08015ef8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b086      	sub	sp, #24
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015f00:	2182      	movs	r1, #130	@ 0x82
 8015f02:	4818      	ldr	r0, [pc, #96]	@ (8015f64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015f04:	f000 fcdf 	bl	80168c6 <USBD_GetEpDesc>
 8015f08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015f0a:	2101      	movs	r1, #1
 8015f0c:	4815      	ldr	r0, [pc, #84]	@ (8015f64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015f0e:	f000 fcda 	bl	80168c6 <USBD_GetEpDesc>
 8015f12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015f14:	2181      	movs	r1, #129	@ 0x81
 8015f16:	4813      	ldr	r0, [pc, #76]	@ (8015f64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015f18:	f000 fcd5 	bl	80168c6 <USBD_GetEpDesc>
 8015f1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015f1e:	697b      	ldr	r3, [r7, #20]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d002      	beq.n	8015f2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015f24:	697b      	ldr	r3, [r7, #20]
 8015f26:	2210      	movs	r2, #16
 8015f28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015f2a:	693b      	ldr	r3, [r7, #16]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d006      	beq.n	8015f3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015f30:	693b      	ldr	r3, [r7, #16]
 8015f32:	2200      	movs	r2, #0
 8015f34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015f38:	711a      	strb	r2, [r3, #4]
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d006      	beq.n	8015f52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	2200      	movs	r2, #0
 8015f48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015f4c:	711a      	strb	r2, [r3, #4]
 8015f4e:	2200      	movs	r2, #0
 8015f50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	2243      	movs	r2, #67	@ 0x43
 8015f56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015f58:	4b02      	ldr	r3, [pc, #8]	@ (8015f64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	3718      	adds	r7, #24
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}
 8015f62:	bf00      	nop
 8015f64:	24000054 	.word	0x24000054

08015f68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015f68:	b480      	push	{r7}
 8015f6a:	b083      	sub	sp, #12
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	220a      	movs	r2, #10
 8015f74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015f76:	4b03      	ldr	r3, [pc, #12]	@ (8015f84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015f78:	4618      	mov	r0, r3
 8015f7a:	370c      	adds	r7, #12
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f82:	4770      	bx	lr
 8015f84:	24000010 	.word	0x24000010

08015f88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015f88:	b480      	push	{r7}
 8015f8a:	b083      	sub	sp, #12
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
 8015f90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015f92:	683b      	ldr	r3, [r7, #0]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d101      	bne.n	8015f9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015f98:	2303      	movs	r3, #3
 8015f9a:	e009      	b.n	8015fb0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015fa2:	687a      	ldr	r2, [r7, #4]
 8015fa4:	33b0      	adds	r3, #176	@ 0xb0
 8015fa6:	009b      	lsls	r3, r3, #2
 8015fa8:	4413      	add	r3, r2
 8015faa:	683a      	ldr	r2, [r7, #0]
 8015fac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015fae:	2300      	movs	r3, #0
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	370c      	adds	r7, #12
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fba:	4770      	bx	lr

08015fbc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015fbc:	b480      	push	{r7}
 8015fbe:	b087      	sub	sp, #28
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	60f8      	str	r0, [r7, #12]
 8015fc4:	60b9      	str	r1, [r7, #8]
 8015fc6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	32b0      	adds	r2, #176	@ 0xb0
 8015fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fd6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015fd8:	697b      	ldr	r3, [r7, #20]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d101      	bne.n	8015fe2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015fde:	2303      	movs	r3, #3
 8015fe0:	e008      	b.n	8015ff4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015fe2:	697b      	ldr	r3, [r7, #20]
 8015fe4:	68ba      	ldr	r2, [r7, #8]
 8015fe6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8015fea:	697b      	ldr	r3, [r7, #20]
 8015fec:	687a      	ldr	r2, [r7, #4]
 8015fee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8015ff2:	2300      	movs	r3, #0
}
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	371c      	adds	r7, #28
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ffe:	4770      	bx	lr

08016000 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8016000:	b480      	push	{r7}
 8016002:	b085      	sub	sp, #20
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
 8016008:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	32b0      	adds	r2, #176	@ 0xb0
 8016014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016018:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d101      	bne.n	8016024 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8016020:	2303      	movs	r3, #3
 8016022:	e004      	b.n	801602e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	683a      	ldr	r2, [r7, #0]
 8016028:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801602c:	2300      	movs	r3, #0
}
 801602e:	4618      	mov	r0, r3
 8016030:	3714      	adds	r7, #20
 8016032:	46bd      	mov	sp, r7
 8016034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016038:	4770      	bx	lr
	...

0801603c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b084      	sub	sp, #16
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	32b0      	adds	r2, #176	@ 0xb0
 801604e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016052:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8016054:	2301      	movs	r3, #1
 8016056:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016058:	68bb      	ldr	r3, [r7, #8]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d101      	bne.n	8016062 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801605e:	2303      	movs	r3, #3
 8016060:	e025      	b.n	80160ae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8016062:	68bb      	ldr	r3, [r7, #8]
 8016064:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016068:	2b00      	cmp	r3, #0
 801606a:	d11f      	bne.n	80160ac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801606c:	68bb      	ldr	r3, [r7, #8]
 801606e:	2201      	movs	r2, #1
 8016070:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8016074:	4b10      	ldr	r3, [pc, #64]	@ (80160b8 <USBD_CDC_TransmitPacket+0x7c>)
 8016076:	781b      	ldrb	r3, [r3, #0]
 8016078:	f003 020f 	and.w	r2, r3, #15
 801607c:	68bb      	ldr	r3, [r7, #8]
 801607e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8016082:	6878      	ldr	r0, [r7, #4]
 8016084:	4613      	mov	r3, r2
 8016086:	009b      	lsls	r3, r3, #2
 8016088:	4413      	add	r3, r2
 801608a:	009b      	lsls	r3, r3, #2
 801608c:	4403      	add	r3, r0
 801608e:	3318      	adds	r3, #24
 8016090:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8016092:	4b09      	ldr	r3, [pc, #36]	@ (80160b8 <USBD_CDC_TransmitPacket+0x7c>)
 8016094:	7819      	ldrb	r1, [r3, #0]
 8016096:	68bb      	ldr	r3, [r7, #8]
 8016098:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801609c:	68bb      	ldr	r3, [r7, #8]
 801609e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80160a2:	6878      	ldr	r0, [r7, #4]
 80160a4:	f001 ffef 	bl	8018086 <USBD_LL_Transmit>

    ret = USBD_OK;
 80160a8:	2300      	movs	r3, #0
 80160aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80160ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80160ae:	4618      	mov	r0, r3
 80160b0:	3710      	adds	r7, #16
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bd80      	pop	{r7, pc}
 80160b6:	bf00      	nop
 80160b8:	24000097 	.word	0x24000097

080160bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b084      	sub	sp, #16
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	32b0      	adds	r2, #176	@ 0xb0
 80160ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	32b0      	adds	r2, #176	@ 0xb0
 80160de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d101      	bne.n	80160ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80160e6:	2303      	movs	r3, #3
 80160e8:	e018      	b.n	801611c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	7c1b      	ldrb	r3, [r3, #16]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d10a      	bne.n	8016108 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80160f2:	4b0c      	ldr	r3, [pc, #48]	@ (8016124 <USBD_CDC_ReceivePacket+0x68>)
 80160f4:	7819      	ldrb	r1, [r3, #0]
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80160fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f001 ffe1 	bl	80180c8 <USBD_LL_PrepareReceive>
 8016106:	e008      	b.n	801611a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016108:	4b06      	ldr	r3, [pc, #24]	@ (8016124 <USBD_CDC_ReceivePacket+0x68>)
 801610a:	7819      	ldrb	r1, [r3, #0]
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016112:	2340      	movs	r3, #64	@ 0x40
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f001 ffd7 	bl	80180c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801611a:	2300      	movs	r3, #0
}
 801611c:	4618      	mov	r0, r3
 801611e:	3710      	adds	r7, #16
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}
 8016124:	24000098 	.word	0x24000098

08016128 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b086      	sub	sp, #24
 801612c:	af00      	add	r7, sp, #0
 801612e:	60f8      	str	r0, [r7, #12]
 8016130:	60b9      	str	r1, [r7, #8]
 8016132:	4613      	mov	r3, r2
 8016134:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d101      	bne.n	8016140 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801613c:	2303      	movs	r3, #3
 801613e:	e01f      	b.n	8016180 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	2200      	movs	r2, #0
 8016144:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	2200      	movs	r2, #0
 801614c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	2200      	movs	r2, #0
 8016154:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016158:	68bb      	ldr	r3, [r7, #8]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d003      	beq.n	8016166 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	68ba      	ldr	r2, [r7, #8]
 8016162:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	2201      	movs	r2, #1
 801616a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	79fa      	ldrb	r2, [r7, #7]
 8016172:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016174:	68f8      	ldr	r0, [r7, #12]
 8016176:	f001 fe4b 	bl	8017e10 <USBD_LL_Init>
 801617a:	4603      	mov	r3, r0
 801617c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801617e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016180:	4618      	mov	r0, r3
 8016182:	3718      	adds	r7, #24
 8016184:	46bd      	mov	sp, r7
 8016186:	bd80      	pop	{r7, pc}

08016188 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b084      	sub	sp, #16
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
 8016190:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016192:	2300      	movs	r3, #0
 8016194:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d101      	bne.n	80161a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801619c:	2303      	movs	r3, #3
 801619e:	e025      	b.n	80161ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	683a      	ldr	r2, [r7, #0]
 80161a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	32ae      	adds	r2, #174	@ 0xae
 80161b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d00f      	beq.n	80161dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	32ae      	adds	r2, #174	@ 0xae
 80161c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161cc:	f107 020e 	add.w	r2, r7, #14
 80161d0:	4610      	mov	r0, r2
 80161d2:	4798      	blx	r3
 80161d4:	4602      	mov	r2, r0
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80161e2:	1c5a      	adds	r2, r3, #1
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80161ea:	2300      	movs	r3, #0
}
 80161ec:	4618      	mov	r0, r3
 80161ee:	3710      	adds	r7, #16
 80161f0:	46bd      	mov	sp, r7
 80161f2:	bd80      	pop	{r7, pc}

080161f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b082      	sub	sp, #8
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f001 fe59 	bl	8017eb4 <USBD_LL_Start>
 8016202:	4603      	mov	r3, r0
}
 8016204:	4618      	mov	r0, r3
 8016206:	3708      	adds	r7, #8
 8016208:	46bd      	mov	sp, r7
 801620a:	bd80      	pop	{r7, pc}

0801620c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801620c:	b480      	push	{r7}
 801620e:	b083      	sub	sp, #12
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016214:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8016216:	4618      	mov	r0, r3
 8016218:	370c      	adds	r7, #12
 801621a:	46bd      	mov	sp, r7
 801621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016220:	4770      	bx	lr

08016222 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016222:	b580      	push	{r7, lr}
 8016224:	b084      	sub	sp, #16
 8016226:	af00      	add	r7, sp, #0
 8016228:	6078      	str	r0, [r7, #4]
 801622a:	460b      	mov	r3, r1
 801622c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801622e:	2300      	movs	r3, #0
 8016230:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016238:	2b00      	cmp	r3, #0
 801623a:	d009      	beq.n	8016250 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	78fa      	ldrb	r2, [r7, #3]
 8016246:	4611      	mov	r1, r2
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	4798      	blx	r3
 801624c:	4603      	mov	r3, r0
 801624e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016250:	7bfb      	ldrb	r3, [r7, #15]
}
 8016252:	4618      	mov	r0, r3
 8016254:	3710      	adds	r7, #16
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}

0801625a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801625a:	b580      	push	{r7, lr}
 801625c:	b084      	sub	sp, #16
 801625e:	af00      	add	r7, sp, #0
 8016260:	6078      	str	r0, [r7, #4]
 8016262:	460b      	mov	r3, r1
 8016264:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016266:	2300      	movs	r3, #0
 8016268:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016270:	685b      	ldr	r3, [r3, #4]
 8016272:	78fa      	ldrb	r2, [r7, #3]
 8016274:	4611      	mov	r1, r2
 8016276:	6878      	ldr	r0, [r7, #4]
 8016278:	4798      	blx	r3
 801627a:	4603      	mov	r3, r0
 801627c:	2b00      	cmp	r3, #0
 801627e:	d001      	beq.n	8016284 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016280:	2303      	movs	r3, #3
 8016282:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016284:	7bfb      	ldrb	r3, [r7, #15]
}
 8016286:	4618      	mov	r0, r3
 8016288:	3710      	adds	r7, #16
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}

0801628e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801628e:	b580      	push	{r7, lr}
 8016290:	b084      	sub	sp, #16
 8016292:	af00      	add	r7, sp, #0
 8016294:	6078      	str	r0, [r7, #4]
 8016296:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801629e:	6839      	ldr	r1, [r7, #0]
 80162a0:	4618      	mov	r0, r3
 80162a2:	f001 f936 	bl	8017512 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	2201      	movs	r2, #1
 80162aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80162b4:	461a      	mov	r2, r3
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80162c2:	f003 031f 	and.w	r3, r3, #31
 80162c6:	2b02      	cmp	r3, #2
 80162c8:	d01a      	beq.n	8016300 <USBD_LL_SetupStage+0x72>
 80162ca:	2b02      	cmp	r3, #2
 80162cc:	d822      	bhi.n	8016314 <USBD_LL_SetupStage+0x86>
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d002      	beq.n	80162d8 <USBD_LL_SetupStage+0x4a>
 80162d2:	2b01      	cmp	r3, #1
 80162d4:	d00a      	beq.n	80162ec <USBD_LL_SetupStage+0x5e>
 80162d6:	e01d      	b.n	8016314 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80162de:	4619      	mov	r1, r3
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	f000 fb63 	bl	80169ac <USBD_StdDevReq>
 80162e6:	4603      	mov	r3, r0
 80162e8:	73fb      	strb	r3, [r7, #15]
      break;
 80162ea:	e020      	b.n	801632e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80162f2:	4619      	mov	r1, r3
 80162f4:	6878      	ldr	r0, [r7, #4]
 80162f6:	f000 fbcb 	bl	8016a90 <USBD_StdItfReq>
 80162fa:	4603      	mov	r3, r0
 80162fc:	73fb      	strb	r3, [r7, #15]
      break;
 80162fe:	e016      	b.n	801632e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016306:	4619      	mov	r1, r3
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	f000 fc2d 	bl	8016b68 <USBD_StdEPReq>
 801630e:	4603      	mov	r3, r0
 8016310:	73fb      	strb	r3, [r7, #15]
      break;
 8016312:	e00c      	b.n	801632e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801631a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801631e:	b2db      	uxtb	r3, r3
 8016320:	4619      	mov	r1, r3
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f001 fe26 	bl	8017f74 <USBD_LL_StallEP>
 8016328:	4603      	mov	r3, r0
 801632a:	73fb      	strb	r3, [r7, #15]
      break;
 801632c:	bf00      	nop
  }

  return ret;
 801632e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016330:	4618      	mov	r0, r3
 8016332:	3710      	adds	r7, #16
 8016334:	46bd      	mov	sp, r7
 8016336:	bd80      	pop	{r7, pc}

08016338 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b086      	sub	sp, #24
 801633c:	af00      	add	r7, sp, #0
 801633e:	60f8      	str	r0, [r7, #12]
 8016340:	460b      	mov	r3, r1
 8016342:	607a      	str	r2, [r7, #4]
 8016344:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8016346:	2300      	movs	r3, #0
 8016348:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801634a:	7afb      	ldrb	r3, [r7, #11]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d16e      	bne.n	801642e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8016356:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801635e:	2b03      	cmp	r3, #3
 8016360:	f040 8098 	bne.w	8016494 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016364:	693b      	ldr	r3, [r7, #16]
 8016366:	689a      	ldr	r2, [r3, #8]
 8016368:	693b      	ldr	r3, [r7, #16]
 801636a:	68db      	ldr	r3, [r3, #12]
 801636c:	429a      	cmp	r2, r3
 801636e:	d913      	bls.n	8016398 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016370:	693b      	ldr	r3, [r7, #16]
 8016372:	689a      	ldr	r2, [r3, #8]
 8016374:	693b      	ldr	r3, [r7, #16]
 8016376:	68db      	ldr	r3, [r3, #12]
 8016378:	1ad2      	subs	r2, r2, r3
 801637a:	693b      	ldr	r3, [r7, #16]
 801637c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801637e:	693b      	ldr	r3, [r7, #16]
 8016380:	68da      	ldr	r2, [r3, #12]
 8016382:	693b      	ldr	r3, [r7, #16]
 8016384:	689b      	ldr	r3, [r3, #8]
 8016386:	4293      	cmp	r3, r2
 8016388:	bf28      	it	cs
 801638a:	4613      	movcs	r3, r2
 801638c:	461a      	mov	r2, r3
 801638e:	6879      	ldr	r1, [r7, #4]
 8016390:	68f8      	ldr	r0, [r7, #12]
 8016392:	f001 f9be 	bl	8017712 <USBD_CtlContinueRx>
 8016396:	e07d      	b.n	8016494 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801639e:	f003 031f 	and.w	r3, r3, #31
 80163a2:	2b02      	cmp	r3, #2
 80163a4:	d014      	beq.n	80163d0 <USBD_LL_DataOutStage+0x98>
 80163a6:	2b02      	cmp	r3, #2
 80163a8:	d81d      	bhi.n	80163e6 <USBD_LL_DataOutStage+0xae>
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d002      	beq.n	80163b4 <USBD_LL_DataOutStage+0x7c>
 80163ae:	2b01      	cmp	r3, #1
 80163b0:	d003      	beq.n	80163ba <USBD_LL_DataOutStage+0x82>
 80163b2:	e018      	b.n	80163e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80163b4:	2300      	movs	r3, #0
 80163b6:	75bb      	strb	r3, [r7, #22]
            break;
 80163b8:	e018      	b.n	80163ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80163c0:	b2db      	uxtb	r3, r3
 80163c2:	4619      	mov	r1, r3
 80163c4:	68f8      	ldr	r0, [r7, #12]
 80163c6:	f000 fa64 	bl	8016892 <USBD_CoreFindIF>
 80163ca:	4603      	mov	r3, r0
 80163cc:	75bb      	strb	r3, [r7, #22]
            break;
 80163ce:	e00d      	b.n	80163ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80163d6:	b2db      	uxtb	r3, r3
 80163d8:	4619      	mov	r1, r3
 80163da:	68f8      	ldr	r0, [r7, #12]
 80163dc:	f000 fa66 	bl	80168ac <USBD_CoreFindEP>
 80163e0:	4603      	mov	r3, r0
 80163e2:	75bb      	strb	r3, [r7, #22]
            break;
 80163e4:	e002      	b.n	80163ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80163e6:	2300      	movs	r3, #0
 80163e8:	75bb      	strb	r3, [r7, #22]
            break;
 80163ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80163ec:	7dbb      	ldrb	r3, [r7, #22]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d119      	bne.n	8016426 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80163f8:	b2db      	uxtb	r3, r3
 80163fa:	2b03      	cmp	r3, #3
 80163fc:	d113      	bne.n	8016426 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80163fe:	7dba      	ldrb	r2, [r7, #22]
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	32ae      	adds	r2, #174	@ 0xae
 8016404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016408:	691b      	ldr	r3, [r3, #16]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d00b      	beq.n	8016426 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801640e:	7dba      	ldrb	r2, [r7, #22]
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016416:	7dba      	ldrb	r2, [r7, #22]
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	32ae      	adds	r2, #174	@ 0xae
 801641c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016420:	691b      	ldr	r3, [r3, #16]
 8016422:	68f8      	ldr	r0, [r7, #12]
 8016424:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016426:	68f8      	ldr	r0, [r7, #12]
 8016428:	f001 f984 	bl	8017734 <USBD_CtlSendStatus>
 801642c:	e032      	b.n	8016494 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801642e:	7afb      	ldrb	r3, [r7, #11]
 8016430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016434:	b2db      	uxtb	r3, r3
 8016436:	4619      	mov	r1, r3
 8016438:	68f8      	ldr	r0, [r7, #12]
 801643a:	f000 fa37 	bl	80168ac <USBD_CoreFindEP>
 801643e:	4603      	mov	r3, r0
 8016440:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016442:	7dbb      	ldrb	r3, [r7, #22]
 8016444:	2bff      	cmp	r3, #255	@ 0xff
 8016446:	d025      	beq.n	8016494 <USBD_LL_DataOutStage+0x15c>
 8016448:	7dbb      	ldrb	r3, [r7, #22]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d122      	bne.n	8016494 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016454:	b2db      	uxtb	r3, r3
 8016456:	2b03      	cmp	r3, #3
 8016458:	d117      	bne.n	801648a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801645a:	7dba      	ldrb	r2, [r7, #22]
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	32ae      	adds	r2, #174	@ 0xae
 8016460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016464:	699b      	ldr	r3, [r3, #24]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d00f      	beq.n	801648a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801646a:	7dba      	ldrb	r2, [r7, #22]
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016472:	7dba      	ldrb	r2, [r7, #22]
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	32ae      	adds	r2, #174	@ 0xae
 8016478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801647c:	699b      	ldr	r3, [r3, #24]
 801647e:	7afa      	ldrb	r2, [r7, #11]
 8016480:	4611      	mov	r1, r2
 8016482:	68f8      	ldr	r0, [r7, #12]
 8016484:	4798      	blx	r3
 8016486:	4603      	mov	r3, r0
 8016488:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801648a:	7dfb      	ldrb	r3, [r7, #23]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d001      	beq.n	8016494 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016490:	7dfb      	ldrb	r3, [r7, #23]
 8016492:	e000      	b.n	8016496 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016494:	2300      	movs	r3, #0
}
 8016496:	4618      	mov	r0, r3
 8016498:	3718      	adds	r7, #24
 801649a:	46bd      	mov	sp, r7
 801649c:	bd80      	pop	{r7, pc}

0801649e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801649e:	b580      	push	{r7, lr}
 80164a0:	b086      	sub	sp, #24
 80164a2:	af00      	add	r7, sp, #0
 80164a4:	60f8      	str	r0, [r7, #12]
 80164a6:	460b      	mov	r3, r1
 80164a8:	607a      	str	r2, [r7, #4]
 80164aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80164ac:	7afb      	ldrb	r3, [r7, #11]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d16f      	bne.n	8016592 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	3314      	adds	r3, #20
 80164b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80164be:	2b02      	cmp	r3, #2
 80164c0:	d15a      	bne.n	8016578 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80164c2:	693b      	ldr	r3, [r7, #16]
 80164c4:	689a      	ldr	r2, [r3, #8]
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	68db      	ldr	r3, [r3, #12]
 80164ca:	429a      	cmp	r2, r3
 80164cc:	d914      	bls.n	80164f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80164ce:	693b      	ldr	r3, [r7, #16]
 80164d0:	689a      	ldr	r2, [r3, #8]
 80164d2:	693b      	ldr	r3, [r7, #16]
 80164d4:	68db      	ldr	r3, [r3, #12]
 80164d6:	1ad2      	subs	r2, r2, r3
 80164d8:	693b      	ldr	r3, [r7, #16]
 80164da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80164dc:	693b      	ldr	r3, [r7, #16]
 80164de:	689b      	ldr	r3, [r3, #8]
 80164e0:	461a      	mov	r2, r3
 80164e2:	6879      	ldr	r1, [r7, #4]
 80164e4:	68f8      	ldr	r0, [r7, #12]
 80164e6:	f001 f8e6 	bl	80176b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80164ea:	2300      	movs	r3, #0
 80164ec:	2200      	movs	r2, #0
 80164ee:	2100      	movs	r1, #0
 80164f0:	68f8      	ldr	r0, [r7, #12]
 80164f2:	f001 fde9 	bl	80180c8 <USBD_LL_PrepareReceive>
 80164f6:	e03f      	b.n	8016578 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80164f8:	693b      	ldr	r3, [r7, #16]
 80164fa:	68da      	ldr	r2, [r3, #12]
 80164fc:	693b      	ldr	r3, [r7, #16]
 80164fe:	689b      	ldr	r3, [r3, #8]
 8016500:	429a      	cmp	r2, r3
 8016502:	d11c      	bne.n	801653e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016504:	693b      	ldr	r3, [r7, #16]
 8016506:	685a      	ldr	r2, [r3, #4]
 8016508:	693b      	ldr	r3, [r7, #16]
 801650a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801650c:	429a      	cmp	r2, r3
 801650e:	d316      	bcc.n	801653e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016510:	693b      	ldr	r3, [r7, #16]
 8016512:	685a      	ldr	r2, [r3, #4]
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801651a:	429a      	cmp	r2, r3
 801651c:	d20f      	bcs.n	801653e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801651e:	2200      	movs	r2, #0
 8016520:	2100      	movs	r1, #0
 8016522:	68f8      	ldr	r0, [r7, #12]
 8016524:	f001 f8c7 	bl	80176b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	2200      	movs	r2, #0
 801652c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016530:	2300      	movs	r3, #0
 8016532:	2200      	movs	r2, #0
 8016534:	2100      	movs	r1, #0
 8016536:	68f8      	ldr	r0, [r7, #12]
 8016538:	f001 fdc6 	bl	80180c8 <USBD_LL_PrepareReceive>
 801653c:	e01c      	b.n	8016578 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016544:	b2db      	uxtb	r3, r3
 8016546:	2b03      	cmp	r3, #3
 8016548:	d10f      	bne.n	801656a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016550:	68db      	ldr	r3, [r3, #12]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d009      	beq.n	801656a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	2200      	movs	r2, #0
 801655a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016564:	68db      	ldr	r3, [r3, #12]
 8016566:	68f8      	ldr	r0, [r7, #12]
 8016568:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801656a:	2180      	movs	r1, #128	@ 0x80
 801656c:	68f8      	ldr	r0, [r7, #12]
 801656e:	f001 fd01 	bl	8017f74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016572:	68f8      	ldr	r0, [r7, #12]
 8016574:	f001 f8f1 	bl	801775a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801657e:	2b00      	cmp	r3, #0
 8016580:	d03a      	beq.n	80165f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016582:	68f8      	ldr	r0, [r7, #12]
 8016584:	f7ff fe42 	bl	801620c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	2200      	movs	r2, #0
 801658c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8016590:	e032      	b.n	80165f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016592:	7afb      	ldrb	r3, [r7, #11]
 8016594:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016598:	b2db      	uxtb	r3, r3
 801659a:	4619      	mov	r1, r3
 801659c:	68f8      	ldr	r0, [r7, #12]
 801659e:	f000 f985 	bl	80168ac <USBD_CoreFindEP>
 80165a2:	4603      	mov	r3, r0
 80165a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80165a6:	7dfb      	ldrb	r3, [r7, #23]
 80165a8:	2bff      	cmp	r3, #255	@ 0xff
 80165aa:	d025      	beq.n	80165f8 <USBD_LL_DataInStage+0x15a>
 80165ac:	7dfb      	ldrb	r3, [r7, #23]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d122      	bne.n	80165f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80165b8:	b2db      	uxtb	r3, r3
 80165ba:	2b03      	cmp	r3, #3
 80165bc:	d11c      	bne.n	80165f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80165be:	7dfa      	ldrb	r2, [r7, #23]
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	32ae      	adds	r2, #174	@ 0xae
 80165c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165c8:	695b      	ldr	r3, [r3, #20]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d014      	beq.n	80165f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80165ce:	7dfa      	ldrb	r2, [r7, #23]
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80165d6:	7dfa      	ldrb	r2, [r7, #23]
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	32ae      	adds	r2, #174	@ 0xae
 80165dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165e0:	695b      	ldr	r3, [r3, #20]
 80165e2:	7afa      	ldrb	r2, [r7, #11]
 80165e4:	4611      	mov	r1, r2
 80165e6:	68f8      	ldr	r0, [r7, #12]
 80165e8:	4798      	blx	r3
 80165ea:	4603      	mov	r3, r0
 80165ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80165ee:	7dbb      	ldrb	r3, [r7, #22]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d001      	beq.n	80165f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80165f4:	7dbb      	ldrb	r3, [r7, #22]
 80165f6:	e000      	b.n	80165fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80165f8:	2300      	movs	r3, #0
}
 80165fa:	4618      	mov	r0, r3
 80165fc:	3718      	adds	r7, #24
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}

08016602 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016602:	b580      	push	{r7, lr}
 8016604:	b084      	sub	sp, #16
 8016606:	af00      	add	r7, sp, #0
 8016608:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801660a:	2300      	movs	r3, #0
 801660c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	2201      	movs	r2, #1
 8016612:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	2200      	movs	r2, #0
 801661a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	2200      	movs	r2, #0
 8016622:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2200      	movs	r2, #0
 8016628:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2200      	movs	r2, #0
 8016630:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801663a:	2b00      	cmp	r3, #0
 801663c:	d014      	beq.n	8016668 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016644:	685b      	ldr	r3, [r3, #4]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d00e      	beq.n	8016668 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016650:	685b      	ldr	r3, [r3, #4]
 8016652:	687a      	ldr	r2, [r7, #4]
 8016654:	6852      	ldr	r2, [r2, #4]
 8016656:	b2d2      	uxtb	r2, r2
 8016658:	4611      	mov	r1, r2
 801665a:	6878      	ldr	r0, [r7, #4]
 801665c:	4798      	blx	r3
 801665e:	4603      	mov	r3, r0
 8016660:	2b00      	cmp	r3, #0
 8016662:	d001      	beq.n	8016668 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016664:	2303      	movs	r3, #3
 8016666:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016668:	2340      	movs	r3, #64	@ 0x40
 801666a:	2200      	movs	r2, #0
 801666c:	2100      	movs	r1, #0
 801666e:	6878      	ldr	r0, [r7, #4]
 8016670:	f001 fc3b 	bl	8017eea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2201      	movs	r2, #1
 8016678:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2240      	movs	r2, #64	@ 0x40
 8016680:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016684:	2340      	movs	r3, #64	@ 0x40
 8016686:	2200      	movs	r2, #0
 8016688:	2180      	movs	r1, #128	@ 0x80
 801668a:	6878      	ldr	r0, [r7, #4]
 801668c:	f001 fc2d 	bl	8017eea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2201      	movs	r2, #1
 8016694:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	2240      	movs	r2, #64	@ 0x40
 801669a:	621a      	str	r2, [r3, #32]

  return ret;
 801669c:	7bfb      	ldrb	r3, [r7, #15]
}
 801669e:	4618      	mov	r0, r3
 80166a0:	3710      	adds	r7, #16
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bd80      	pop	{r7, pc}

080166a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80166a6:	b480      	push	{r7}
 80166a8:	b083      	sub	sp, #12
 80166aa:	af00      	add	r7, sp, #0
 80166ac:	6078      	str	r0, [r7, #4]
 80166ae:	460b      	mov	r3, r1
 80166b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	78fa      	ldrb	r2, [r7, #3]
 80166b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80166b8:	2300      	movs	r3, #0
}
 80166ba:	4618      	mov	r0, r3
 80166bc:	370c      	adds	r7, #12
 80166be:	46bd      	mov	sp, r7
 80166c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c4:	4770      	bx	lr

080166c6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80166c6:	b480      	push	{r7}
 80166c8:	b083      	sub	sp, #12
 80166ca:	af00      	add	r7, sp, #0
 80166cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	2b04      	cmp	r3, #4
 80166d8:	d006      	beq.n	80166e8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166e0:	b2da      	uxtb	r2, r3
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	2204      	movs	r2, #4
 80166ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80166f0:	2300      	movs	r3, #0
}
 80166f2:	4618      	mov	r0, r3
 80166f4:	370c      	adds	r7, #12
 80166f6:	46bd      	mov	sp, r7
 80166f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fc:	4770      	bx	lr

080166fe <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80166fe:	b480      	push	{r7}
 8016700:	b083      	sub	sp, #12
 8016702:	af00      	add	r7, sp, #0
 8016704:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801670c:	b2db      	uxtb	r3, r3
 801670e:	2b04      	cmp	r3, #4
 8016710:	d106      	bne.n	8016720 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016718:	b2da      	uxtb	r2, r3
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016720:	2300      	movs	r3, #0
}
 8016722:	4618      	mov	r0, r3
 8016724:	370c      	adds	r7, #12
 8016726:	46bd      	mov	sp, r7
 8016728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672c:	4770      	bx	lr

0801672e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801672e:	b580      	push	{r7, lr}
 8016730:	b082      	sub	sp, #8
 8016732:	af00      	add	r7, sp, #0
 8016734:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801673c:	b2db      	uxtb	r3, r3
 801673e:	2b03      	cmp	r3, #3
 8016740:	d110      	bne.n	8016764 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016748:	2b00      	cmp	r3, #0
 801674a:	d00b      	beq.n	8016764 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016752:	69db      	ldr	r3, [r3, #28]
 8016754:	2b00      	cmp	r3, #0
 8016756:	d005      	beq.n	8016764 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801675e:	69db      	ldr	r3, [r3, #28]
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016764:	2300      	movs	r3, #0
}
 8016766:	4618      	mov	r0, r3
 8016768:	3708      	adds	r7, #8
 801676a:	46bd      	mov	sp, r7
 801676c:	bd80      	pop	{r7, pc}

0801676e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801676e:	b580      	push	{r7, lr}
 8016770:	b082      	sub	sp, #8
 8016772:	af00      	add	r7, sp, #0
 8016774:	6078      	str	r0, [r7, #4]
 8016776:	460b      	mov	r3, r1
 8016778:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	32ae      	adds	r2, #174	@ 0xae
 8016784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d101      	bne.n	8016790 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801678c:	2303      	movs	r3, #3
 801678e:	e01c      	b.n	80167ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016796:	b2db      	uxtb	r3, r3
 8016798:	2b03      	cmp	r3, #3
 801679a:	d115      	bne.n	80167c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	32ae      	adds	r2, #174	@ 0xae
 80167a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167aa:	6a1b      	ldr	r3, [r3, #32]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d00b      	beq.n	80167c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	32ae      	adds	r2, #174	@ 0xae
 80167ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167be:	6a1b      	ldr	r3, [r3, #32]
 80167c0:	78fa      	ldrb	r2, [r7, #3]
 80167c2:	4611      	mov	r1, r2
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80167c8:	2300      	movs	r3, #0
}
 80167ca:	4618      	mov	r0, r3
 80167cc:	3708      	adds	r7, #8
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}

080167d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80167d2:	b580      	push	{r7, lr}
 80167d4:	b082      	sub	sp, #8
 80167d6:	af00      	add	r7, sp, #0
 80167d8:	6078      	str	r0, [r7, #4]
 80167da:	460b      	mov	r3, r1
 80167dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	32ae      	adds	r2, #174	@ 0xae
 80167e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d101      	bne.n	80167f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80167f0:	2303      	movs	r3, #3
 80167f2:	e01c      	b.n	801682e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80167fa:	b2db      	uxtb	r3, r3
 80167fc:	2b03      	cmp	r3, #3
 80167fe:	d115      	bne.n	801682c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	32ae      	adds	r2, #174	@ 0xae
 801680a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801680e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016810:	2b00      	cmp	r3, #0
 8016812:	d00b      	beq.n	801682c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	32ae      	adds	r2, #174	@ 0xae
 801681e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016824:	78fa      	ldrb	r2, [r7, #3]
 8016826:	4611      	mov	r1, r2
 8016828:	6878      	ldr	r0, [r7, #4]
 801682a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801682c:	2300      	movs	r3, #0
}
 801682e:	4618      	mov	r0, r3
 8016830:	3708      	adds	r7, #8
 8016832:	46bd      	mov	sp, r7
 8016834:	bd80      	pop	{r7, pc}

08016836 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016836:	b480      	push	{r7}
 8016838:	b083      	sub	sp, #12
 801683a:	af00      	add	r7, sp, #0
 801683c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801683e:	2300      	movs	r3, #0
}
 8016840:	4618      	mov	r0, r3
 8016842:	370c      	adds	r7, #12
 8016844:	46bd      	mov	sp, r7
 8016846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684a:	4770      	bx	lr

0801684c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801684c:	b580      	push	{r7, lr}
 801684e:	b084      	sub	sp, #16
 8016850:	af00      	add	r7, sp, #0
 8016852:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016854:	2300      	movs	r3, #0
 8016856:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2201      	movs	r2, #1
 801685c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016866:	2b00      	cmp	r3, #0
 8016868:	d00e      	beq.n	8016888 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016870:	685b      	ldr	r3, [r3, #4]
 8016872:	687a      	ldr	r2, [r7, #4]
 8016874:	6852      	ldr	r2, [r2, #4]
 8016876:	b2d2      	uxtb	r2, r2
 8016878:	4611      	mov	r1, r2
 801687a:	6878      	ldr	r0, [r7, #4]
 801687c:	4798      	blx	r3
 801687e:	4603      	mov	r3, r0
 8016880:	2b00      	cmp	r3, #0
 8016882:	d001      	beq.n	8016888 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016884:	2303      	movs	r3, #3
 8016886:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016888:	7bfb      	ldrb	r3, [r7, #15]
}
 801688a:	4618      	mov	r0, r3
 801688c:	3710      	adds	r7, #16
 801688e:	46bd      	mov	sp, r7
 8016890:	bd80      	pop	{r7, pc}

08016892 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016892:	b480      	push	{r7}
 8016894:	b083      	sub	sp, #12
 8016896:	af00      	add	r7, sp, #0
 8016898:	6078      	str	r0, [r7, #4]
 801689a:	460b      	mov	r3, r1
 801689c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801689e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80168a0:	4618      	mov	r0, r3
 80168a2:	370c      	adds	r7, #12
 80168a4:	46bd      	mov	sp, r7
 80168a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168aa:	4770      	bx	lr

080168ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80168ac:	b480      	push	{r7}
 80168ae:	b083      	sub	sp, #12
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
 80168b4:	460b      	mov	r3, r1
 80168b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80168b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80168ba:	4618      	mov	r0, r3
 80168bc:	370c      	adds	r7, #12
 80168be:	46bd      	mov	sp, r7
 80168c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c4:	4770      	bx	lr

080168c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80168c6:	b580      	push	{r7, lr}
 80168c8:	b086      	sub	sp, #24
 80168ca:	af00      	add	r7, sp, #0
 80168cc:	6078      	str	r0, [r7, #4]
 80168ce:	460b      	mov	r3, r1
 80168d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80168da:	2300      	movs	r3, #0
 80168dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	885b      	ldrh	r3, [r3, #2]
 80168e2:	b29b      	uxth	r3, r3
 80168e4:	68fa      	ldr	r2, [r7, #12]
 80168e6:	7812      	ldrb	r2, [r2, #0]
 80168e8:	4293      	cmp	r3, r2
 80168ea:	d91f      	bls.n	801692c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	781b      	ldrb	r3, [r3, #0]
 80168f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80168f2:	e013      	b.n	801691c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80168f4:	f107 030a 	add.w	r3, r7, #10
 80168f8:	4619      	mov	r1, r3
 80168fa:	6978      	ldr	r0, [r7, #20]
 80168fc:	f000 f81b 	bl	8016936 <USBD_GetNextDesc>
 8016900:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016902:	697b      	ldr	r3, [r7, #20]
 8016904:	785b      	ldrb	r3, [r3, #1]
 8016906:	2b05      	cmp	r3, #5
 8016908:	d108      	bne.n	801691c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801690a:	697b      	ldr	r3, [r7, #20]
 801690c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801690e:	693b      	ldr	r3, [r7, #16]
 8016910:	789b      	ldrb	r3, [r3, #2]
 8016912:	78fa      	ldrb	r2, [r7, #3]
 8016914:	429a      	cmp	r2, r3
 8016916:	d008      	beq.n	801692a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016918:	2300      	movs	r3, #0
 801691a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	885b      	ldrh	r3, [r3, #2]
 8016920:	b29a      	uxth	r2, r3
 8016922:	897b      	ldrh	r3, [r7, #10]
 8016924:	429a      	cmp	r2, r3
 8016926:	d8e5      	bhi.n	80168f4 <USBD_GetEpDesc+0x2e>
 8016928:	e000      	b.n	801692c <USBD_GetEpDesc+0x66>
          break;
 801692a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801692c:	693b      	ldr	r3, [r7, #16]
}
 801692e:	4618      	mov	r0, r3
 8016930:	3718      	adds	r7, #24
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}

08016936 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016936:	b480      	push	{r7}
 8016938:	b085      	sub	sp, #20
 801693a:	af00      	add	r7, sp, #0
 801693c:	6078      	str	r0, [r7, #4]
 801693e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016944:	683b      	ldr	r3, [r7, #0]
 8016946:	881b      	ldrh	r3, [r3, #0]
 8016948:	68fa      	ldr	r2, [r7, #12]
 801694a:	7812      	ldrb	r2, [r2, #0]
 801694c:	4413      	add	r3, r2
 801694e:	b29a      	uxth	r2, r3
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	781b      	ldrb	r3, [r3, #0]
 8016958:	461a      	mov	r2, r3
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	4413      	add	r3, r2
 801695e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016960:	68fb      	ldr	r3, [r7, #12]
}
 8016962:	4618      	mov	r0, r3
 8016964:	3714      	adds	r7, #20
 8016966:	46bd      	mov	sp, r7
 8016968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696c:	4770      	bx	lr

0801696e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801696e:	b480      	push	{r7}
 8016970:	b087      	sub	sp, #28
 8016972:	af00      	add	r7, sp, #0
 8016974:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801697a:	697b      	ldr	r3, [r7, #20]
 801697c:	781b      	ldrb	r3, [r3, #0]
 801697e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	3301      	adds	r3, #1
 8016984:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016986:	697b      	ldr	r3, [r7, #20]
 8016988:	781b      	ldrb	r3, [r3, #0]
 801698a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801698c:	8a3b      	ldrh	r3, [r7, #16]
 801698e:	021b      	lsls	r3, r3, #8
 8016990:	b21a      	sxth	r2, r3
 8016992:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016996:	4313      	orrs	r3, r2
 8016998:	b21b      	sxth	r3, r3
 801699a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801699c:	89fb      	ldrh	r3, [r7, #14]
}
 801699e:	4618      	mov	r0, r3
 80169a0:	371c      	adds	r7, #28
 80169a2:	46bd      	mov	sp, r7
 80169a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a8:	4770      	bx	lr
	...

080169ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b084      	sub	sp, #16
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
 80169b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80169b6:	2300      	movs	r3, #0
 80169b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80169ba:	683b      	ldr	r3, [r7, #0]
 80169bc:	781b      	ldrb	r3, [r3, #0]
 80169be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80169c2:	2b40      	cmp	r3, #64	@ 0x40
 80169c4:	d005      	beq.n	80169d2 <USBD_StdDevReq+0x26>
 80169c6:	2b40      	cmp	r3, #64	@ 0x40
 80169c8:	d857      	bhi.n	8016a7a <USBD_StdDevReq+0xce>
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d00f      	beq.n	80169ee <USBD_StdDevReq+0x42>
 80169ce:	2b20      	cmp	r3, #32
 80169d0:	d153      	bne.n	8016a7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	32ae      	adds	r2, #174	@ 0xae
 80169dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169e0:	689b      	ldr	r3, [r3, #8]
 80169e2:	6839      	ldr	r1, [r7, #0]
 80169e4:	6878      	ldr	r0, [r7, #4]
 80169e6:	4798      	blx	r3
 80169e8:	4603      	mov	r3, r0
 80169ea:	73fb      	strb	r3, [r7, #15]
      break;
 80169ec:	e04a      	b.n	8016a84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80169ee:	683b      	ldr	r3, [r7, #0]
 80169f0:	785b      	ldrb	r3, [r3, #1]
 80169f2:	2b09      	cmp	r3, #9
 80169f4:	d83b      	bhi.n	8016a6e <USBD_StdDevReq+0xc2>
 80169f6:	a201      	add	r2, pc, #4	@ (adr r2, 80169fc <USBD_StdDevReq+0x50>)
 80169f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169fc:	08016a51 	.word	0x08016a51
 8016a00:	08016a65 	.word	0x08016a65
 8016a04:	08016a6f 	.word	0x08016a6f
 8016a08:	08016a5b 	.word	0x08016a5b
 8016a0c:	08016a6f 	.word	0x08016a6f
 8016a10:	08016a2f 	.word	0x08016a2f
 8016a14:	08016a25 	.word	0x08016a25
 8016a18:	08016a6f 	.word	0x08016a6f
 8016a1c:	08016a47 	.word	0x08016a47
 8016a20:	08016a39 	.word	0x08016a39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016a24:	6839      	ldr	r1, [r7, #0]
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	f000 fa3c 	bl	8016ea4 <USBD_GetDescriptor>
          break;
 8016a2c:	e024      	b.n	8016a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016a2e:	6839      	ldr	r1, [r7, #0]
 8016a30:	6878      	ldr	r0, [r7, #4]
 8016a32:	f000 fbcb 	bl	80171cc <USBD_SetAddress>
          break;
 8016a36:	e01f      	b.n	8016a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016a38:	6839      	ldr	r1, [r7, #0]
 8016a3a:	6878      	ldr	r0, [r7, #4]
 8016a3c:	f000 fc0a 	bl	8017254 <USBD_SetConfig>
 8016a40:	4603      	mov	r3, r0
 8016a42:	73fb      	strb	r3, [r7, #15]
          break;
 8016a44:	e018      	b.n	8016a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016a46:	6839      	ldr	r1, [r7, #0]
 8016a48:	6878      	ldr	r0, [r7, #4]
 8016a4a:	f000 fcad 	bl	80173a8 <USBD_GetConfig>
          break;
 8016a4e:	e013      	b.n	8016a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016a50:	6839      	ldr	r1, [r7, #0]
 8016a52:	6878      	ldr	r0, [r7, #4]
 8016a54:	f000 fcde 	bl	8017414 <USBD_GetStatus>
          break;
 8016a58:	e00e      	b.n	8016a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016a5a:	6839      	ldr	r1, [r7, #0]
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f000 fd0d 	bl	801747c <USBD_SetFeature>
          break;
 8016a62:	e009      	b.n	8016a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016a64:	6839      	ldr	r1, [r7, #0]
 8016a66:	6878      	ldr	r0, [r7, #4]
 8016a68:	f000 fd31 	bl	80174ce <USBD_ClrFeature>
          break;
 8016a6c:	e004      	b.n	8016a78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016a6e:	6839      	ldr	r1, [r7, #0]
 8016a70:	6878      	ldr	r0, [r7, #4]
 8016a72:	f000 fd88 	bl	8017586 <USBD_CtlError>
          break;
 8016a76:	bf00      	nop
      }
      break;
 8016a78:	e004      	b.n	8016a84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016a7a:	6839      	ldr	r1, [r7, #0]
 8016a7c:	6878      	ldr	r0, [r7, #4]
 8016a7e:	f000 fd82 	bl	8017586 <USBD_CtlError>
      break;
 8016a82:	bf00      	nop
  }

  return ret;
 8016a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a86:	4618      	mov	r0, r3
 8016a88:	3710      	adds	r7, #16
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}
 8016a8e:	bf00      	nop

08016a90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b084      	sub	sp, #16
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
 8016a98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016a9e:	683b      	ldr	r3, [r7, #0]
 8016aa0:	781b      	ldrb	r3, [r3, #0]
 8016aa2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016aa6:	2b40      	cmp	r3, #64	@ 0x40
 8016aa8:	d005      	beq.n	8016ab6 <USBD_StdItfReq+0x26>
 8016aaa:	2b40      	cmp	r3, #64	@ 0x40
 8016aac:	d852      	bhi.n	8016b54 <USBD_StdItfReq+0xc4>
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d001      	beq.n	8016ab6 <USBD_StdItfReq+0x26>
 8016ab2:	2b20      	cmp	r3, #32
 8016ab4:	d14e      	bne.n	8016b54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016abc:	b2db      	uxtb	r3, r3
 8016abe:	3b01      	subs	r3, #1
 8016ac0:	2b02      	cmp	r3, #2
 8016ac2:	d840      	bhi.n	8016b46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016ac4:	683b      	ldr	r3, [r7, #0]
 8016ac6:	889b      	ldrh	r3, [r3, #4]
 8016ac8:	b2db      	uxtb	r3, r3
 8016aca:	2b01      	cmp	r3, #1
 8016acc:	d836      	bhi.n	8016b3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016ace:	683b      	ldr	r3, [r7, #0]
 8016ad0:	889b      	ldrh	r3, [r3, #4]
 8016ad2:	b2db      	uxtb	r3, r3
 8016ad4:	4619      	mov	r1, r3
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f7ff fedb 	bl	8016892 <USBD_CoreFindIF>
 8016adc:	4603      	mov	r3, r0
 8016ade:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016ae0:	7bbb      	ldrb	r3, [r7, #14]
 8016ae2:	2bff      	cmp	r3, #255	@ 0xff
 8016ae4:	d01d      	beq.n	8016b22 <USBD_StdItfReq+0x92>
 8016ae6:	7bbb      	ldrb	r3, [r7, #14]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d11a      	bne.n	8016b22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016aec:	7bba      	ldrb	r2, [r7, #14]
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	32ae      	adds	r2, #174	@ 0xae
 8016af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016af6:	689b      	ldr	r3, [r3, #8]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d00f      	beq.n	8016b1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016afc:	7bba      	ldrb	r2, [r7, #14]
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016b04:	7bba      	ldrb	r2, [r7, #14]
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	32ae      	adds	r2, #174	@ 0xae
 8016b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b0e:	689b      	ldr	r3, [r3, #8]
 8016b10:	6839      	ldr	r1, [r7, #0]
 8016b12:	6878      	ldr	r0, [r7, #4]
 8016b14:	4798      	blx	r3
 8016b16:	4603      	mov	r3, r0
 8016b18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016b1a:	e004      	b.n	8016b26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016b1c:	2303      	movs	r3, #3
 8016b1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016b20:	e001      	b.n	8016b26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016b22:	2303      	movs	r3, #3
 8016b24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016b26:	683b      	ldr	r3, [r7, #0]
 8016b28:	88db      	ldrh	r3, [r3, #6]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d110      	bne.n	8016b50 <USBD_StdItfReq+0xc0>
 8016b2e:	7bfb      	ldrb	r3, [r7, #15]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d10d      	bne.n	8016b50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016b34:	6878      	ldr	r0, [r7, #4]
 8016b36:	f000 fdfd 	bl	8017734 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016b3a:	e009      	b.n	8016b50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016b3c:	6839      	ldr	r1, [r7, #0]
 8016b3e:	6878      	ldr	r0, [r7, #4]
 8016b40:	f000 fd21 	bl	8017586 <USBD_CtlError>
          break;
 8016b44:	e004      	b.n	8016b50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016b46:	6839      	ldr	r1, [r7, #0]
 8016b48:	6878      	ldr	r0, [r7, #4]
 8016b4a:	f000 fd1c 	bl	8017586 <USBD_CtlError>
          break;
 8016b4e:	e000      	b.n	8016b52 <USBD_StdItfReq+0xc2>
          break;
 8016b50:	bf00      	nop
      }
      break;
 8016b52:	e004      	b.n	8016b5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016b54:	6839      	ldr	r1, [r7, #0]
 8016b56:	6878      	ldr	r0, [r7, #4]
 8016b58:	f000 fd15 	bl	8017586 <USBD_CtlError>
      break;
 8016b5c:	bf00      	nop
  }

  return ret;
 8016b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b60:	4618      	mov	r0, r3
 8016b62:	3710      	adds	r7, #16
 8016b64:	46bd      	mov	sp, r7
 8016b66:	bd80      	pop	{r7, pc}

08016b68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b084      	sub	sp, #16
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
 8016b70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016b72:	2300      	movs	r3, #0
 8016b74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	889b      	ldrh	r3, [r3, #4]
 8016b7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016b7c:	683b      	ldr	r3, [r7, #0]
 8016b7e:	781b      	ldrb	r3, [r3, #0]
 8016b80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016b84:	2b40      	cmp	r3, #64	@ 0x40
 8016b86:	d007      	beq.n	8016b98 <USBD_StdEPReq+0x30>
 8016b88:	2b40      	cmp	r3, #64	@ 0x40
 8016b8a:	f200 817f 	bhi.w	8016e8c <USBD_StdEPReq+0x324>
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d02a      	beq.n	8016be8 <USBD_StdEPReq+0x80>
 8016b92:	2b20      	cmp	r3, #32
 8016b94:	f040 817a 	bne.w	8016e8c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016b98:	7bbb      	ldrb	r3, [r7, #14]
 8016b9a:	4619      	mov	r1, r3
 8016b9c:	6878      	ldr	r0, [r7, #4]
 8016b9e:	f7ff fe85 	bl	80168ac <USBD_CoreFindEP>
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016ba6:	7b7b      	ldrb	r3, [r7, #13]
 8016ba8:	2bff      	cmp	r3, #255	@ 0xff
 8016baa:	f000 8174 	beq.w	8016e96 <USBD_StdEPReq+0x32e>
 8016bae:	7b7b      	ldrb	r3, [r7, #13]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	f040 8170 	bne.w	8016e96 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016bb6:	7b7a      	ldrb	r2, [r7, #13]
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016bbe:	7b7a      	ldrb	r2, [r7, #13]
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	32ae      	adds	r2, #174	@ 0xae
 8016bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bc8:	689b      	ldr	r3, [r3, #8]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	f000 8163 	beq.w	8016e96 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016bd0:	7b7a      	ldrb	r2, [r7, #13]
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	32ae      	adds	r2, #174	@ 0xae
 8016bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bda:	689b      	ldr	r3, [r3, #8]
 8016bdc:	6839      	ldr	r1, [r7, #0]
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	4798      	blx	r3
 8016be2:	4603      	mov	r3, r0
 8016be4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016be6:	e156      	b.n	8016e96 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016be8:	683b      	ldr	r3, [r7, #0]
 8016bea:	785b      	ldrb	r3, [r3, #1]
 8016bec:	2b03      	cmp	r3, #3
 8016bee:	d008      	beq.n	8016c02 <USBD_StdEPReq+0x9a>
 8016bf0:	2b03      	cmp	r3, #3
 8016bf2:	f300 8145 	bgt.w	8016e80 <USBD_StdEPReq+0x318>
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	f000 809b 	beq.w	8016d32 <USBD_StdEPReq+0x1ca>
 8016bfc:	2b01      	cmp	r3, #1
 8016bfe:	d03c      	beq.n	8016c7a <USBD_StdEPReq+0x112>
 8016c00:	e13e      	b.n	8016e80 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c08:	b2db      	uxtb	r3, r3
 8016c0a:	2b02      	cmp	r3, #2
 8016c0c:	d002      	beq.n	8016c14 <USBD_StdEPReq+0xac>
 8016c0e:	2b03      	cmp	r3, #3
 8016c10:	d016      	beq.n	8016c40 <USBD_StdEPReq+0xd8>
 8016c12:	e02c      	b.n	8016c6e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016c14:	7bbb      	ldrb	r3, [r7, #14]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d00d      	beq.n	8016c36 <USBD_StdEPReq+0xce>
 8016c1a:	7bbb      	ldrb	r3, [r7, #14]
 8016c1c:	2b80      	cmp	r3, #128	@ 0x80
 8016c1e:	d00a      	beq.n	8016c36 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016c20:	7bbb      	ldrb	r3, [r7, #14]
 8016c22:	4619      	mov	r1, r3
 8016c24:	6878      	ldr	r0, [r7, #4]
 8016c26:	f001 f9a5 	bl	8017f74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016c2a:	2180      	movs	r1, #128	@ 0x80
 8016c2c:	6878      	ldr	r0, [r7, #4]
 8016c2e:	f001 f9a1 	bl	8017f74 <USBD_LL_StallEP>
 8016c32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016c34:	e020      	b.n	8016c78 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016c36:	6839      	ldr	r1, [r7, #0]
 8016c38:	6878      	ldr	r0, [r7, #4]
 8016c3a:	f000 fca4 	bl	8017586 <USBD_CtlError>
              break;
 8016c3e:	e01b      	b.n	8016c78 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016c40:	683b      	ldr	r3, [r7, #0]
 8016c42:	885b      	ldrh	r3, [r3, #2]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d10e      	bne.n	8016c66 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016c48:	7bbb      	ldrb	r3, [r7, #14]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d00b      	beq.n	8016c66 <USBD_StdEPReq+0xfe>
 8016c4e:	7bbb      	ldrb	r3, [r7, #14]
 8016c50:	2b80      	cmp	r3, #128	@ 0x80
 8016c52:	d008      	beq.n	8016c66 <USBD_StdEPReq+0xfe>
 8016c54:	683b      	ldr	r3, [r7, #0]
 8016c56:	88db      	ldrh	r3, [r3, #6]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d104      	bne.n	8016c66 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016c5c:	7bbb      	ldrb	r3, [r7, #14]
 8016c5e:	4619      	mov	r1, r3
 8016c60:	6878      	ldr	r0, [r7, #4]
 8016c62:	f001 f987 	bl	8017f74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016c66:	6878      	ldr	r0, [r7, #4]
 8016c68:	f000 fd64 	bl	8017734 <USBD_CtlSendStatus>

              break;
 8016c6c:	e004      	b.n	8016c78 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016c6e:	6839      	ldr	r1, [r7, #0]
 8016c70:	6878      	ldr	r0, [r7, #4]
 8016c72:	f000 fc88 	bl	8017586 <USBD_CtlError>
              break;
 8016c76:	bf00      	nop
          }
          break;
 8016c78:	e107      	b.n	8016e8a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c80:	b2db      	uxtb	r3, r3
 8016c82:	2b02      	cmp	r3, #2
 8016c84:	d002      	beq.n	8016c8c <USBD_StdEPReq+0x124>
 8016c86:	2b03      	cmp	r3, #3
 8016c88:	d016      	beq.n	8016cb8 <USBD_StdEPReq+0x150>
 8016c8a:	e04b      	b.n	8016d24 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016c8c:	7bbb      	ldrb	r3, [r7, #14]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d00d      	beq.n	8016cae <USBD_StdEPReq+0x146>
 8016c92:	7bbb      	ldrb	r3, [r7, #14]
 8016c94:	2b80      	cmp	r3, #128	@ 0x80
 8016c96:	d00a      	beq.n	8016cae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016c98:	7bbb      	ldrb	r3, [r7, #14]
 8016c9a:	4619      	mov	r1, r3
 8016c9c:	6878      	ldr	r0, [r7, #4]
 8016c9e:	f001 f969 	bl	8017f74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016ca2:	2180      	movs	r1, #128	@ 0x80
 8016ca4:	6878      	ldr	r0, [r7, #4]
 8016ca6:	f001 f965 	bl	8017f74 <USBD_LL_StallEP>
 8016caa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016cac:	e040      	b.n	8016d30 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016cae:	6839      	ldr	r1, [r7, #0]
 8016cb0:	6878      	ldr	r0, [r7, #4]
 8016cb2:	f000 fc68 	bl	8017586 <USBD_CtlError>
              break;
 8016cb6:	e03b      	b.n	8016d30 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016cb8:	683b      	ldr	r3, [r7, #0]
 8016cba:	885b      	ldrh	r3, [r3, #2]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d136      	bne.n	8016d2e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016cc0:	7bbb      	ldrb	r3, [r7, #14]
 8016cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d004      	beq.n	8016cd4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016cca:	7bbb      	ldrb	r3, [r7, #14]
 8016ccc:	4619      	mov	r1, r3
 8016cce:	6878      	ldr	r0, [r7, #4]
 8016cd0:	f001 f96f 	bl	8017fb2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	f000 fd2d 	bl	8017734 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016cda:	7bbb      	ldrb	r3, [r7, #14]
 8016cdc:	4619      	mov	r1, r3
 8016cde:	6878      	ldr	r0, [r7, #4]
 8016ce0:	f7ff fde4 	bl	80168ac <USBD_CoreFindEP>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016ce8:	7b7b      	ldrb	r3, [r7, #13]
 8016cea:	2bff      	cmp	r3, #255	@ 0xff
 8016cec:	d01f      	beq.n	8016d2e <USBD_StdEPReq+0x1c6>
 8016cee:	7b7b      	ldrb	r3, [r7, #13]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d11c      	bne.n	8016d2e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016cf4:	7b7a      	ldrb	r2, [r7, #13]
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016cfc:	7b7a      	ldrb	r2, [r7, #13]
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	32ae      	adds	r2, #174	@ 0xae
 8016d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d06:	689b      	ldr	r3, [r3, #8]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d010      	beq.n	8016d2e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016d0c:	7b7a      	ldrb	r2, [r7, #13]
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	32ae      	adds	r2, #174	@ 0xae
 8016d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d16:	689b      	ldr	r3, [r3, #8]
 8016d18:	6839      	ldr	r1, [r7, #0]
 8016d1a:	6878      	ldr	r0, [r7, #4]
 8016d1c:	4798      	blx	r3
 8016d1e:	4603      	mov	r3, r0
 8016d20:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016d22:	e004      	b.n	8016d2e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016d24:	6839      	ldr	r1, [r7, #0]
 8016d26:	6878      	ldr	r0, [r7, #4]
 8016d28:	f000 fc2d 	bl	8017586 <USBD_CtlError>
              break;
 8016d2c:	e000      	b.n	8016d30 <USBD_StdEPReq+0x1c8>
              break;
 8016d2e:	bf00      	nop
          }
          break;
 8016d30:	e0ab      	b.n	8016e8a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d38:	b2db      	uxtb	r3, r3
 8016d3a:	2b02      	cmp	r3, #2
 8016d3c:	d002      	beq.n	8016d44 <USBD_StdEPReq+0x1dc>
 8016d3e:	2b03      	cmp	r3, #3
 8016d40:	d032      	beq.n	8016da8 <USBD_StdEPReq+0x240>
 8016d42:	e097      	b.n	8016e74 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016d44:	7bbb      	ldrb	r3, [r7, #14]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d007      	beq.n	8016d5a <USBD_StdEPReq+0x1f2>
 8016d4a:	7bbb      	ldrb	r3, [r7, #14]
 8016d4c:	2b80      	cmp	r3, #128	@ 0x80
 8016d4e:	d004      	beq.n	8016d5a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016d50:	6839      	ldr	r1, [r7, #0]
 8016d52:	6878      	ldr	r0, [r7, #4]
 8016d54:	f000 fc17 	bl	8017586 <USBD_CtlError>
                break;
 8016d58:	e091      	b.n	8016e7e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	da0b      	bge.n	8016d7a <USBD_StdEPReq+0x212>
 8016d62:	7bbb      	ldrb	r3, [r7, #14]
 8016d64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016d68:	4613      	mov	r3, r2
 8016d6a:	009b      	lsls	r3, r3, #2
 8016d6c:	4413      	add	r3, r2
 8016d6e:	009b      	lsls	r3, r3, #2
 8016d70:	3310      	adds	r3, #16
 8016d72:	687a      	ldr	r2, [r7, #4]
 8016d74:	4413      	add	r3, r2
 8016d76:	3304      	adds	r3, #4
 8016d78:	e00b      	b.n	8016d92 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016d7a:	7bbb      	ldrb	r3, [r7, #14]
 8016d7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d80:	4613      	mov	r3, r2
 8016d82:	009b      	lsls	r3, r3, #2
 8016d84:	4413      	add	r3, r2
 8016d86:	009b      	lsls	r3, r3, #2
 8016d88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016d8c:	687a      	ldr	r2, [r7, #4]
 8016d8e:	4413      	add	r3, r2
 8016d90:	3304      	adds	r3, #4
 8016d92:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016d94:	68bb      	ldr	r3, [r7, #8]
 8016d96:	2200      	movs	r2, #0
 8016d98:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016d9a:	68bb      	ldr	r3, [r7, #8]
 8016d9c:	2202      	movs	r2, #2
 8016d9e:	4619      	mov	r1, r3
 8016da0:	6878      	ldr	r0, [r7, #4]
 8016da2:	f000 fc6d 	bl	8017680 <USBD_CtlSendData>
              break;
 8016da6:	e06a      	b.n	8016e7e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	da11      	bge.n	8016dd4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016db0:	7bbb      	ldrb	r3, [r7, #14]
 8016db2:	f003 020f 	and.w	r2, r3, #15
 8016db6:	6879      	ldr	r1, [r7, #4]
 8016db8:	4613      	mov	r3, r2
 8016dba:	009b      	lsls	r3, r3, #2
 8016dbc:	4413      	add	r3, r2
 8016dbe:	009b      	lsls	r3, r3, #2
 8016dc0:	440b      	add	r3, r1
 8016dc2:	3324      	adds	r3, #36	@ 0x24
 8016dc4:	881b      	ldrh	r3, [r3, #0]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d117      	bne.n	8016dfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016dca:	6839      	ldr	r1, [r7, #0]
 8016dcc:	6878      	ldr	r0, [r7, #4]
 8016dce:	f000 fbda 	bl	8017586 <USBD_CtlError>
                  break;
 8016dd2:	e054      	b.n	8016e7e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016dd4:	7bbb      	ldrb	r3, [r7, #14]
 8016dd6:	f003 020f 	and.w	r2, r3, #15
 8016dda:	6879      	ldr	r1, [r7, #4]
 8016ddc:	4613      	mov	r3, r2
 8016dde:	009b      	lsls	r3, r3, #2
 8016de0:	4413      	add	r3, r2
 8016de2:	009b      	lsls	r3, r3, #2
 8016de4:	440b      	add	r3, r1
 8016de6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016dea:	881b      	ldrh	r3, [r3, #0]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d104      	bne.n	8016dfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016df0:	6839      	ldr	r1, [r7, #0]
 8016df2:	6878      	ldr	r0, [r7, #4]
 8016df4:	f000 fbc7 	bl	8017586 <USBD_CtlError>
                  break;
 8016df8:	e041      	b.n	8016e7e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016dfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	da0b      	bge.n	8016e1a <USBD_StdEPReq+0x2b2>
 8016e02:	7bbb      	ldrb	r3, [r7, #14]
 8016e04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016e08:	4613      	mov	r3, r2
 8016e0a:	009b      	lsls	r3, r3, #2
 8016e0c:	4413      	add	r3, r2
 8016e0e:	009b      	lsls	r3, r3, #2
 8016e10:	3310      	adds	r3, #16
 8016e12:	687a      	ldr	r2, [r7, #4]
 8016e14:	4413      	add	r3, r2
 8016e16:	3304      	adds	r3, #4
 8016e18:	e00b      	b.n	8016e32 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016e1a:	7bbb      	ldrb	r3, [r7, #14]
 8016e1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016e20:	4613      	mov	r3, r2
 8016e22:	009b      	lsls	r3, r3, #2
 8016e24:	4413      	add	r3, r2
 8016e26:	009b      	lsls	r3, r3, #2
 8016e28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016e2c:	687a      	ldr	r2, [r7, #4]
 8016e2e:	4413      	add	r3, r2
 8016e30:	3304      	adds	r3, #4
 8016e32:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016e34:	7bbb      	ldrb	r3, [r7, #14]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d002      	beq.n	8016e40 <USBD_StdEPReq+0x2d8>
 8016e3a:	7bbb      	ldrb	r3, [r7, #14]
 8016e3c:	2b80      	cmp	r3, #128	@ 0x80
 8016e3e:	d103      	bne.n	8016e48 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016e40:	68bb      	ldr	r3, [r7, #8]
 8016e42:	2200      	movs	r2, #0
 8016e44:	601a      	str	r2, [r3, #0]
 8016e46:	e00e      	b.n	8016e66 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016e48:	7bbb      	ldrb	r3, [r7, #14]
 8016e4a:	4619      	mov	r1, r3
 8016e4c:	6878      	ldr	r0, [r7, #4]
 8016e4e:	f001 f8cf 	bl	8017ff0 <USBD_LL_IsStallEP>
 8016e52:	4603      	mov	r3, r0
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d003      	beq.n	8016e60 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	2201      	movs	r2, #1
 8016e5c:	601a      	str	r2, [r3, #0]
 8016e5e:	e002      	b.n	8016e66 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	2200      	movs	r2, #0
 8016e64:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016e66:	68bb      	ldr	r3, [r7, #8]
 8016e68:	2202      	movs	r2, #2
 8016e6a:	4619      	mov	r1, r3
 8016e6c:	6878      	ldr	r0, [r7, #4]
 8016e6e:	f000 fc07 	bl	8017680 <USBD_CtlSendData>
              break;
 8016e72:	e004      	b.n	8016e7e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016e74:	6839      	ldr	r1, [r7, #0]
 8016e76:	6878      	ldr	r0, [r7, #4]
 8016e78:	f000 fb85 	bl	8017586 <USBD_CtlError>
              break;
 8016e7c:	bf00      	nop
          }
          break;
 8016e7e:	e004      	b.n	8016e8a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016e80:	6839      	ldr	r1, [r7, #0]
 8016e82:	6878      	ldr	r0, [r7, #4]
 8016e84:	f000 fb7f 	bl	8017586 <USBD_CtlError>
          break;
 8016e88:	bf00      	nop
      }
      break;
 8016e8a:	e005      	b.n	8016e98 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016e8c:	6839      	ldr	r1, [r7, #0]
 8016e8e:	6878      	ldr	r0, [r7, #4]
 8016e90:	f000 fb79 	bl	8017586 <USBD_CtlError>
      break;
 8016e94:	e000      	b.n	8016e98 <USBD_StdEPReq+0x330>
      break;
 8016e96:	bf00      	nop
  }

  return ret;
 8016e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	3710      	adds	r7, #16
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	bd80      	pop	{r7, pc}
	...

08016ea4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	b084      	sub	sp, #16
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	6078      	str	r0, [r7, #4]
 8016eac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016eae:	2300      	movs	r3, #0
 8016eb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016eba:	683b      	ldr	r3, [r7, #0]
 8016ebc:	885b      	ldrh	r3, [r3, #2]
 8016ebe:	0a1b      	lsrs	r3, r3, #8
 8016ec0:	b29b      	uxth	r3, r3
 8016ec2:	3b01      	subs	r3, #1
 8016ec4:	2b0e      	cmp	r3, #14
 8016ec6:	f200 8152 	bhi.w	801716e <USBD_GetDescriptor+0x2ca>
 8016eca:	a201      	add	r2, pc, #4	@ (adr r2, 8016ed0 <USBD_GetDescriptor+0x2c>)
 8016ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ed0:	08016f41 	.word	0x08016f41
 8016ed4:	08016f59 	.word	0x08016f59
 8016ed8:	08016f99 	.word	0x08016f99
 8016edc:	0801716f 	.word	0x0801716f
 8016ee0:	0801716f 	.word	0x0801716f
 8016ee4:	0801710f 	.word	0x0801710f
 8016ee8:	0801713b 	.word	0x0801713b
 8016eec:	0801716f 	.word	0x0801716f
 8016ef0:	0801716f 	.word	0x0801716f
 8016ef4:	0801716f 	.word	0x0801716f
 8016ef8:	0801716f 	.word	0x0801716f
 8016efc:	0801716f 	.word	0x0801716f
 8016f00:	0801716f 	.word	0x0801716f
 8016f04:	0801716f 	.word	0x0801716f
 8016f08:	08016f0d 	.word	0x08016f0d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f12:	69db      	ldr	r3, [r3, #28]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d00b      	beq.n	8016f30 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f1e:	69db      	ldr	r3, [r3, #28]
 8016f20:	687a      	ldr	r2, [r7, #4]
 8016f22:	7c12      	ldrb	r2, [r2, #16]
 8016f24:	f107 0108 	add.w	r1, r7, #8
 8016f28:	4610      	mov	r0, r2
 8016f2a:	4798      	blx	r3
 8016f2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016f2e:	e126      	b.n	801717e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016f30:	6839      	ldr	r1, [r7, #0]
 8016f32:	6878      	ldr	r0, [r7, #4]
 8016f34:	f000 fb27 	bl	8017586 <USBD_CtlError>
        err++;
 8016f38:	7afb      	ldrb	r3, [r7, #11]
 8016f3a:	3301      	adds	r3, #1
 8016f3c:	72fb      	strb	r3, [r7, #11]
      break;
 8016f3e:	e11e      	b.n	801717e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	687a      	ldr	r2, [r7, #4]
 8016f4a:	7c12      	ldrb	r2, [r2, #16]
 8016f4c:	f107 0108 	add.w	r1, r7, #8
 8016f50:	4610      	mov	r0, r2
 8016f52:	4798      	blx	r3
 8016f54:	60f8      	str	r0, [r7, #12]
      break;
 8016f56:	e112      	b.n	801717e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	7c1b      	ldrb	r3, [r3, #16]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d10d      	bne.n	8016f7c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f68:	f107 0208 	add.w	r2, r7, #8
 8016f6c:	4610      	mov	r0, r2
 8016f6e:	4798      	blx	r3
 8016f70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	3301      	adds	r3, #1
 8016f76:	2202      	movs	r2, #2
 8016f78:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016f7a:	e100      	b.n	801717e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016f84:	f107 0208 	add.w	r2, r7, #8
 8016f88:	4610      	mov	r0, r2
 8016f8a:	4798      	blx	r3
 8016f8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	3301      	adds	r3, #1
 8016f92:	2202      	movs	r2, #2
 8016f94:	701a      	strb	r2, [r3, #0]
      break;
 8016f96:	e0f2      	b.n	801717e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016f98:	683b      	ldr	r3, [r7, #0]
 8016f9a:	885b      	ldrh	r3, [r3, #2]
 8016f9c:	b2db      	uxtb	r3, r3
 8016f9e:	2b05      	cmp	r3, #5
 8016fa0:	f200 80ac 	bhi.w	80170fc <USBD_GetDescriptor+0x258>
 8016fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8016fac <USBD_GetDescriptor+0x108>)
 8016fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016faa:	bf00      	nop
 8016fac:	08016fc5 	.word	0x08016fc5
 8016fb0:	08016ff9 	.word	0x08016ff9
 8016fb4:	0801702d 	.word	0x0801702d
 8016fb8:	08017061 	.word	0x08017061
 8016fbc:	08017095 	.word	0x08017095
 8016fc0:	080170c9 	.word	0x080170c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016fca:	685b      	ldr	r3, [r3, #4]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d00b      	beq.n	8016fe8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016fd6:	685b      	ldr	r3, [r3, #4]
 8016fd8:	687a      	ldr	r2, [r7, #4]
 8016fda:	7c12      	ldrb	r2, [r2, #16]
 8016fdc:	f107 0108 	add.w	r1, r7, #8
 8016fe0:	4610      	mov	r0, r2
 8016fe2:	4798      	blx	r3
 8016fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016fe6:	e091      	b.n	801710c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016fe8:	6839      	ldr	r1, [r7, #0]
 8016fea:	6878      	ldr	r0, [r7, #4]
 8016fec:	f000 facb 	bl	8017586 <USBD_CtlError>
            err++;
 8016ff0:	7afb      	ldrb	r3, [r7, #11]
 8016ff2:	3301      	adds	r3, #1
 8016ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8016ff6:	e089      	b.n	801710c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016ffe:	689b      	ldr	r3, [r3, #8]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d00b      	beq.n	801701c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801700a:	689b      	ldr	r3, [r3, #8]
 801700c:	687a      	ldr	r2, [r7, #4]
 801700e:	7c12      	ldrb	r2, [r2, #16]
 8017010:	f107 0108 	add.w	r1, r7, #8
 8017014:	4610      	mov	r0, r2
 8017016:	4798      	blx	r3
 8017018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801701a:	e077      	b.n	801710c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801701c:	6839      	ldr	r1, [r7, #0]
 801701e:	6878      	ldr	r0, [r7, #4]
 8017020:	f000 fab1 	bl	8017586 <USBD_CtlError>
            err++;
 8017024:	7afb      	ldrb	r3, [r7, #11]
 8017026:	3301      	adds	r3, #1
 8017028:	72fb      	strb	r3, [r7, #11]
          break;
 801702a:	e06f      	b.n	801710c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017032:	68db      	ldr	r3, [r3, #12]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d00b      	beq.n	8017050 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801703e:	68db      	ldr	r3, [r3, #12]
 8017040:	687a      	ldr	r2, [r7, #4]
 8017042:	7c12      	ldrb	r2, [r2, #16]
 8017044:	f107 0108 	add.w	r1, r7, #8
 8017048:	4610      	mov	r0, r2
 801704a:	4798      	blx	r3
 801704c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801704e:	e05d      	b.n	801710c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017050:	6839      	ldr	r1, [r7, #0]
 8017052:	6878      	ldr	r0, [r7, #4]
 8017054:	f000 fa97 	bl	8017586 <USBD_CtlError>
            err++;
 8017058:	7afb      	ldrb	r3, [r7, #11]
 801705a:	3301      	adds	r3, #1
 801705c:	72fb      	strb	r3, [r7, #11]
          break;
 801705e:	e055      	b.n	801710c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017066:	691b      	ldr	r3, [r3, #16]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d00b      	beq.n	8017084 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017072:	691b      	ldr	r3, [r3, #16]
 8017074:	687a      	ldr	r2, [r7, #4]
 8017076:	7c12      	ldrb	r2, [r2, #16]
 8017078:	f107 0108 	add.w	r1, r7, #8
 801707c:	4610      	mov	r0, r2
 801707e:	4798      	blx	r3
 8017080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017082:	e043      	b.n	801710c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017084:	6839      	ldr	r1, [r7, #0]
 8017086:	6878      	ldr	r0, [r7, #4]
 8017088:	f000 fa7d 	bl	8017586 <USBD_CtlError>
            err++;
 801708c:	7afb      	ldrb	r3, [r7, #11]
 801708e:	3301      	adds	r3, #1
 8017090:	72fb      	strb	r3, [r7, #11]
          break;
 8017092:	e03b      	b.n	801710c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801709a:	695b      	ldr	r3, [r3, #20]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d00b      	beq.n	80170b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170a6:	695b      	ldr	r3, [r3, #20]
 80170a8:	687a      	ldr	r2, [r7, #4]
 80170aa:	7c12      	ldrb	r2, [r2, #16]
 80170ac:	f107 0108 	add.w	r1, r7, #8
 80170b0:	4610      	mov	r0, r2
 80170b2:	4798      	blx	r3
 80170b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80170b6:	e029      	b.n	801710c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80170b8:	6839      	ldr	r1, [r7, #0]
 80170ba:	6878      	ldr	r0, [r7, #4]
 80170bc:	f000 fa63 	bl	8017586 <USBD_CtlError>
            err++;
 80170c0:	7afb      	ldrb	r3, [r7, #11]
 80170c2:	3301      	adds	r3, #1
 80170c4:	72fb      	strb	r3, [r7, #11]
          break;
 80170c6:	e021      	b.n	801710c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170ce:	699b      	ldr	r3, [r3, #24]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d00b      	beq.n	80170ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170da:	699b      	ldr	r3, [r3, #24]
 80170dc:	687a      	ldr	r2, [r7, #4]
 80170de:	7c12      	ldrb	r2, [r2, #16]
 80170e0:	f107 0108 	add.w	r1, r7, #8
 80170e4:	4610      	mov	r0, r2
 80170e6:	4798      	blx	r3
 80170e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80170ea:	e00f      	b.n	801710c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80170ec:	6839      	ldr	r1, [r7, #0]
 80170ee:	6878      	ldr	r0, [r7, #4]
 80170f0:	f000 fa49 	bl	8017586 <USBD_CtlError>
            err++;
 80170f4:	7afb      	ldrb	r3, [r7, #11]
 80170f6:	3301      	adds	r3, #1
 80170f8:	72fb      	strb	r3, [r7, #11]
          break;
 80170fa:	e007      	b.n	801710c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80170fc:	6839      	ldr	r1, [r7, #0]
 80170fe:	6878      	ldr	r0, [r7, #4]
 8017100:	f000 fa41 	bl	8017586 <USBD_CtlError>
          err++;
 8017104:	7afb      	ldrb	r3, [r7, #11]
 8017106:	3301      	adds	r3, #1
 8017108:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801710a:	bf00      	nop
      }
      break;
 801710c:	e037      	b.n	801717e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	7c1b      	ldrb	r3, [r3, #16]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d109      	bne.n	801712a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801711c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801711e:	f107 0208 	add.w	r2, r7, #8
 8017122:	4610      	mov	r0, r2
 8017124:	4798      	blx	r3
 8017126:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017128:	e029      	b.n	801717e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801712a:	6839      	ldr	r1, [r7, #0]
 801712c:	6878      	ldr	r0, [r7, #4]
 801712e:	f000 fa2a 	bl	8017586 <USBD_CtlError>
        err++;
 8017132:	7afb      	ldrb	r3, [r7, #11]
 8017134:	3301      	adds	r3, #1
 8017136:	72fb      	strb	r3, [r7, #11]
      break;
 8017138:	e021      	b.n	801717e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	7c1b      	ldrb	r3, [r3, #16]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d10d      	bne.n	801715e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801714a:	f107 0208 	add.w	r2, r7, #8
 801714e:	4610      	mov	r0, r2
 8017150:	4798      	blx	r3
 8017152:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	3301      	adds	r3, #1
 8017158:	2207      	movs	r2, #7
 801715a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801715c:	e00f      	b.n	801717e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801715e:	6839      	ldr	r1, [r7, #0]
 8017160:	6878      	ldr	r0, [r7, #4]
 8017162:	f000 fa10 	bl	8017586 <USBD_CtlError>
        err++;
 8017166:	7afb      	ldrb	r3, [r7, #11]
 8017168:	3301      	adds	r3, #1
 801716a:	72fb      	strb	r3, [r7, #11]
      break;
 801716c:	e007      	b.n	801717e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801716e:	6839      	ldr	r1, [r7, #0]
 8017170:	6878      	ldr	r0, [r7, #4]
 8017172:	f000 fa08 	bl	8017586 <USBD_CtlError>
      err++;
 8017176:	7afb      	ldrb	r3, [r7, #11]
 8017178:	3301      	adds	r3, #1
 801717a:	72fb      	strb	r3, [r7, #11]
      break;
 801717c:	bf00      	nop
  }

  if (err != 0U)
 801717e:	7afb      	ldrb	r3, [r7, #11]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d11e      	bne.n	80171c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	88db      	ldrh	r3, [r3, #6]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d016      	beq.n	80171ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801718c:	893b      	ldrh	r3, [r7, #8]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d00e      	beq.n	80171b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8017192:	683b      	ldr	r3, [r7, #0]
 8017194:	88da      	ldrh	r2, [r3, #6]
 8017196:	893b      	ldrh	r3, [r7, #8]
 8017198:	4293      	cmp	r3, r2
 801719a:	bf28      	it	cs
 801719c:	4613      	movcs	r3, r2
 801719e:	b29b      	uxth	r3, r3
 80171a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80171a2:	893b      	ldrh	r3, [r7, #8]
 80171a4:	461a      	mov	r2, r3
 80171a6:	68f9      	ldr	r1, [r7, #12]
 80171a8:	6878      	ldr	r0, [r7, #4]
 80171aa:	f000 fa69 	bl	8017680 <USBD_CtlSendData>
 80171ae:	e009      	b.n	80171c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80171b0:	6839      	ldr	r1, [r7, #0]
 80171b2:	6878      	ldr	r0, [r7, #4]
 80171b4:	f000 f9e7 	bl	8017586 <USBD_CtlError>
 80171b8:	e004      	b.n	80171c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80171ba:	6878      	ldr	r0, [r7, #4]
 80171bc:	f000 faba 	bl	8017734 <USBD_CtlSendStatus>
 80171c0:	e000      	b.n	80171c4 <USBD_GetDescriptor+0x320>
    return;
 80171c2:	bf00      	nop
  }
}
 80171c4:	3710      	adds	r7, #16
 80171c6:	46bd      	mov	sp, r7
 80171c8:	bd80      	pop	{r7, pc}
 80171ca:	bf00      	nop

080171cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b084      	sub	sp, #16
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	6078      	str	r0, [r7, #4]
 80171d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80171d6:	683b      	ldr	r3, [r7, #0]
 80171d8:	889b      	ldrh	r3, [r3, #4]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d131      	bne.n	8017242 <USBD_SetAddress+0x76>
 80171de:	683b      	ldr	r3, [r7, #0]
 80171e0:	88db      	ldrh	r3, [r3, #6]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d12d      	bne.n	8017242 <USBD_SetAddress+0x76>
 80171e6:	683b      	ldr	r3, [r7, #0]
 80171e8:	885b      	ldrh	r3, [r3, #2]
 80171ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80171ec:	d829      	bhi.n	8017242 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80171ee:	683b      	ldr	r3, [r7, #0]
 80171f0:	885b      	ldrh	r3, [r3, #2]
 80171f2:	b2db      	uxtb	r3, r3
 80171f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80171f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017200:	b2db      	uxtb	r3, r3
 8017202:	2b03      	cmp	r3, #3
 8017204:	d104      	bne.n	8017210 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017206:	6839      	ldr	r1, [r7, #0]
 8017208:	6878      	ldr	r0, [r7, #4]
 801720a:	f000 f9bc 	bl	8017586 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801720e:	e01d      	b.n	801724c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	7bfa      	ldrb	r2, [r7, #15]
 8017214:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017218:	7bfb      	ldrb	r3, [r7, #15]
 801721a:	4619      	mov	r1, r3
 801721c:	6878      	ldr	r0, [r7, #4]
 801721e:	f000 ff13 	bl	8018048 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8017222:	6878      	ldr	r0, [r7, #4]
 8017224:	f000 fa86 	bl	8017734 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017228:	7bfb      	ldrb	r3, [r7, #15]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d004      	beq.n	8017238 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	2202      	movs	r2, #2
 8017232:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017236:	e009      	b.n	801724c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	2201      	movs	r2, #1
 801723c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017240:	e004      	b.n	801724c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017242:	6839      	ldr	r1, [r7, #0]
 8017244:	6878      	ldr	r0, [r7, #4]
 8017246:	f000 f99e 	bl	8017586 <USBD_CtlError>
  }
}
 801724a:	bf00      	nop
 801724c:	bf00      	nop
 801724e:	3710      	adds	r7, #16
 8017250:	46bd      	mov	sp, r7
 8017252:	bd80      	pop	{r7, pc}

08017254 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b084      	sub	sp, #16
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
 801725c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801725e:	2300      	movs	r3, #0
 8017260:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017262:	683b      	ldr	r3, [r7, #0]
 8017264:	885b      	ldrh	r3, [r3, #2]
 8017266:	b2da      	uxtb	r2, r3
 8017268:	4b4e      	ldr	r3, [pc, #312]	@ (80173a4 <USBD_SetConfig+0x150>)
 801726a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801726c:	4b4d      	ldr	r3, [pc, #308]	@ (80173a4 <USBD_SetConfig+0x150>)
 801726e:	781b      	ldrb	r3, [r3, #0]
 8017270:	2b01      	cmp	r3, #1
 8017272:	d905      	bls.n	8017280 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017274:	6839      	ldr	r1, [r7, #0]
 8017276:	6878      	ldr	r0, [r7, #4]
 8017278:	f000 f985 	bl	8017586 <USBD_CtlError>
    return USBD_FAIL;
 801727c:	2303      	movs	r3, #3
 801727e:	e08c      	b.n	801739a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017286:	b2db      	uxtb	r3, r3
 8017288:	2b02      	cmp	r3, #2
 801728a:	d002      	beq.n	8017292 <USBD_SetConfig+0x3e>
 801728c:	2b03      	cmp	r3, #3
 801728e:	d029      	beq.n	80172e4 <USBD_SetConfig+0x90>
 8017290:	e075      	b.n	801737e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017292:	4b44      	ldr	r3, [pc, #272]	@ (80173a4 <USBD_SetConfig+0x150>)
 8017294:	781b      	ldrb	r3, [r3, #0]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d020      	beq.n	80172dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801729a:	4b42      	ldr	r3, [pc, #264]	@ (80173a4 <USBD_SetConfig+0x150>)
 801729c:	781b      	ldrb	r3, [r3, #0]
 801729e:	461a      	mov	r2, r3
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80172a4:	4b3f      	ldr	r3, [pc, #252]	@ (80173a4 <USBD_SetConfig+0x150>)
 80172a6:	781b      	ldrb	r3, [r3, #0]
 80172a8:	4619      	mov	r1, r3
 80172aa:	6878      	ldr	r0, [r7, #4]
 80172ac:	f7fe ffb9 	bl	8016222 <USBD_SetClassConfig>
 80172b0:	4603      	mov	r3, r0
 80172b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80172b4:	7bfb      	ldrb	r3, [r7, #15]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d008      	beq.n	80172cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80172ba:	6839      	ldr	r1, [r7, #0]
 80172bc:	6878      	ldr	r0, [r7, #4]
 80172be:	f000 f962 	bl	8017586 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	2202      	movs	r2, #2
 80172c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80172ca:	e065      	b.n	8017398 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80172cc:	6878      	ldr	r0, [r7, #4]
 80172ce:	f000 fa31 	bl	8017734 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	2203      	movs	r2, #3
 80172d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80172da:	e05d      	b.n	8017398 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f000 fa29 	bl	8017734 <USBD_CtlSendStatus>
      break;
 80172e2:	e059      	b.n	8017398 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80172e4:	4b2f      	ldr	r3, [pc, #188]	@ (80173a4 <USBD_SetConfig+0x150>)
 80172e6:	781b      	ldrb	r3, [r3, #0]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d112      	bne.n	8017312 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	2202      	movs	r2, #2
 80172f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80172f4:	4b2b      	ldr	r3, [pc, #172]	@ (80173a4 <USBD_SetConfig+0x150>)
 80172f6:	781b      	ldrb	r3, [r3, #0]
 80172f8:	461a      	mov	r2, r3
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80172fe:	4b29      	ldr	r3, [pc, #164]	@ (80173a4 <USBD_SetConfig+0x150>)
 8017300:	781b      	ldrb	r3, [r3, #0]
 8017302:	4619      	mov	r1, r3
 8017304:	6878      	ldr	r0, [r7, #4]
 8017306:	f7fe ffa8 	bl	801625a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801730a:	6878      	ldr	r0, [r7, #4]
 801730c:	f000 fa12 	bl	8017734 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017310:	e042      	b.n	8017398 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8017312:	4b24      	ldr	r3, [pc, #144]	@ (80173a4 <USBD_SetConfig+0x150>)
 8017314:	781b      	ldrb	r3, [r3, #0]
 8017316:	461a      	mov	r2, r3
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	685b      	ldr	r3, [r3, #4]
 801731c:	429a      	cmp	r2, r3
 801731e:	d02a      	beq.n	8017376 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	685b      	ldr	r3, [r3, #4]
 8017324:	b2db      	uxtb	r3, r3
 8017326:	4619      	mov	r1, r3
 8017328:	6878      	ldr	r0, [r7, #4]
 801732a:	f7fe ff96 	bl	801625a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801732e:	4b1d      	ldr	r3, [pc, #116]	@ (80173a4 <USBD_SetConfig+0x150>)
 8017330:	781b      	ldrb	r3, [r3, #0]
 8017332:	461a      	mov	r2, r3
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017338:	4b1a      	ldr	r3, [pc, #104]	@ (80173a4 <USBD_SetConfig+0x150>)
 801733a:	781b      	ldrb	r3, [r3, #0]
 801733c:	4619      	mov	r1, r3
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	f7fe ff6f 	bl	8016222 <USBD_SetClassConfig>
 8017344:	4603      	mov	r3, r0
 8017346:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017348:	7bfb      	ldrb	r3, [r7, #15]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d00f      	beq.n	801736e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801734e:	6839      	ldr	r1, [r7, #0]
 8017350:	6878      	ldr	r0, [r7, #4]
 8017352:	f000 f918 	bl	8017586 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	685b      	ldr	r3, [r3, #4]
 801735a:	b2db      	uxtb	r3, r3
 801735c:	4619      	mov	r1, r3
 801735e:	6878      	ldr	r0, [r7, #4]
 8017360:	f7fe ff7b 	bl	801625a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	2202      	movs	r2, #2
 8017368:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801736c:	e014      	b.n	8017398 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801736e:	6878      	ldr	r0, [r7, #4]
 8017370:	f000 f9e0 	bl	8017734 <USBD_CtlSendStatus>
      break;
 8017374:	e010      	b.n	8017398 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017376:	6878      	ldr	r0, [r7, #4]
 8017378:	f000 f9dc 	bl	8017734 <USBD_CtlSendStatus>
      break;
 801737c:	e00c      	b.n	8017398 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801737e:	6839      	ldr	r1, [r7, #0]
 8017380:	6878      	ldr	r0, [r7, #4]
 8017382:	f000 f900 	bl	8017586 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017386:	4b07      	ldr	r3, [pc, #28]	@ (80173a4 <USBD_SetConfig+0x150>)
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	4619      	mov	r1, r3
 801738c:	6878      	ldr	r0, [r7, #4]
 801738e:	f7fe ff64 	bl	801625a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017392:	2303      	movs	r3, #3
 8017394:	73fb      	strb	r3, [r7, #15]
      break;
 8017396:	bf00      	nop
  }

  return ret;
 8017398:	7bfb      	ldrb	r3, [r7, #15]
}
 801739a:	4618      	mov	r0, r3
 801739c:	3710      	adds	r7, #16
 801739e:	46bd      	mov	sp, r7
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	bf00      	nop
 80173a4:	24004634 	.word	0x24004634

080173a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b082      	sub	sp, #8
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
 80173b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80173b2:	683b      	ldr	r3, [r7, #0]
 80173b4:	88db      	ldrh	r3, [r3, #6]
 80173b6:	2b01      	cmp	r3, #1
 80173b8:	d004      	beq.n	80173c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80173ba:	6839      	ldr	r1, [r7, #0]
 80173bc:	6878      	ldr	r0, [r7, #4]
 80173be:	f000 f8e2 	bl	8017586 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80173c2:	e023      	b.n	801740c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80173ca:	b2db      	uxtb	r3, r3
 80173cc:	2b02      	cmp	r3, #2
 80173ce:	dc02      	bgt.n	80173d6 <USBD_GetConfig+0x2e>
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	dc03      	bgt.n	80173dc <USBD_GetConfig+0x34>
 80173d4:	e015      	b.n	8017402 <USBD_GetConfig+0x5a>
 80173d6:	2b03      	cmp	r3, #3
 80173d8:	d00b      	beq.n	80173f2 <USBD_GetConfig+0x4a>
 80173da:	e012      	b.n	8017402 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2200      	movs	r2, #0
 80173e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	3308      	adds	r3, #8
 80173e6:	2201      	movs	r2, #1
 80173e8:	4619      	mov	r1, r3
 80173ea:	6878      	ldr	r0, [r7, #4]
 80173ec:	f000 f948 	bl	8017680 <USBD_CtlSendData>
        break;
 80173f0:	e00c      	b.n	801740c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	3304      	adds	r3, #4
 80173f6:	2201      	movs	r2, #1
 80173f8:	4619      	mov	r1, r3
 80173fa:	6878      	ldr	r0, [r7, #4]
 80173fc:	f000 f940 	bl	8017680 <USBD_CtlSendData>
        break;
 8017400:	e004      	b.n	801740c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017402:	6839      	ldr	r1, [r7, #0]
 8017404:	6878      	ldr	r0, [r7, #4]
 8017406:	f000 f8be 	bl	8017586 <USBD_CtlError>
        break;
 801740a:	bf00      	nop
}
 801740c:	bf00      	nop
 801740e:	3708      	adds	r7, #8
 8017410:	46bd      	mov	sp, r7
 8017412:	bd80      	pop	{r7, pc}

08017414 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017414:	b580      	push	{r7, lr}
 8017416:	b082      	sub	sp, #8
 8017418:	af00      	add	r7, sp, #0
 801741a:	6078      	str	r0, [r7, #4]
 801741c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017424:	b2db      	uxtb	r3, r3
 8017426:	3b01      	subs	r3, #1
 8017428:	2b02      	cmp	r3, #2
 801742a:	d81e      	bhi.n	801746a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801742c:	683b      	ldr	r3, [r7, #0]
 801742e:	88db      	ldrh	r3, [r3, #6]
 8017430:	2b02      	cmp	r3, #2
 8017432:	d004      	beq.n	801743e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017434:	6839      	ldr	r1, [r7, #0]
 8017436:	6878      	ldr	r0, [r7, #4]
 8017438:	f000 f8a5 	bl	8017586 <USBD_CtlError>
        break;
 801743c:	e01a      	b.n	8017474 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	2201      	movs	r2, #1
 8017442:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801744a:	2b00      	cmp	r3, #0
 801744c:	d005      	beq.n	801745a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	68db      	ldr	r3, [r3, #12]
 8017452:	f043 0202 	orr.w	r2, r3, #2
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	330c      	adds	r3, #12
 801745e:	2202      	movs	r2, #2
 8017460:	4619      	mov	r1, r3
 8017462:	6878      	ldr	r0, [r7, #4]
 8017464:	f000 f90c 	bl	8017680 <USBD_CtlSendData>
      break;
 8017468:	e004      	b.n	8017474 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801746a:	6839      	ldr	r1, [r7, #0]
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f000 f88a 	bl	8017586 <USBD_CtlError>
      break;
 8017472:	bf00      	nop
  }
}
 8017474:	bf00      	nop
 8017476:	3708      	adds	r7, #8
 8017478:	46bd      	mov	sp, r7
 801747a:	bd80      	pop	{r7, pc}

0801747c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801747c:	b580      	push	{r7, lr}
 801747e:	b082      	sub	sp, #8
 8017480:	af00      	add	r7, sp, #0
 8017482:	6078      	str	r0, [r7, #4]
 8017484:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	885b      	ldrh	r3, [r3, #2]
 801748a:	2b01      	cmp	r3, #1
 801748c:	d107      	bne.n	801749e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	2201      	movs	r2, #1
 8017492:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017496:	6878      	ldr	r0, [r7, #4]
 8017498:	f000 f94c 	bl	8017734 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801749c:	e013      	b.n	80174c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801749e:	683b      	ldr	r3, [r7, #0]
 80174a0:	885b      	ldrh	r3, [r3, #2]
 80174a2:	2b02      	cmp	r3, #2
 80174a4:	d10b      	bne.n	80174be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80174a6:	683b      	ldr	r3, [r7, #0]
 80174a8:	889b      	ldrh	r3, [r3, #4]
 80174aa:	0a1b      	lsrs	r3, r3, #8
 80174ac:	b29b      	uxth	r3, r3
 80174ae:	b2da      	uxtb	r2, r3
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80174b6:	6878      	ldr	r0, [r7, #4]
 80174b8:	f000 f93c 	bl	8017734 <USBD_CtlSendStatus>
}
 80174bc:	e003      	b.n	80174c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80174be:	6839      	ldr	r1, [r7, #0]
 80174c0:	6878      	ldr	r0, [r7, #4]
 80174c2:	f000 f860 	bl	8017586 <USBD_CtlError>
}
 80174c6:	bf00      	nop
 80174c8:	3708      	adds	r7, #8
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}

080174ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174ce:	b580      	push	{r7, lr}
 80174d0:	b082      	sub	sp, #8
 80174d2:	af00      	add	r7, sp, #0
 80174d4:	6078      	str	r0, [r7, #4]
 80174d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80174de:	b2db      	uxtb	r3, r3
 80174e0:	3b01      	subs	r3, #1
 80174e2:	2b02      	cmp	r3, #2
 80174e4:	d80b      	bhi.n	80174fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80174e6:	683b      	ldr	r3, [r7, #0]
 80174e8:	885b      	ldrh	r3, [r3, #2]
 80174ea:	2b01      	cmp	r3, #1
 80174ec:	d10c      	bne.n	8017508 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	2200      	movs	r2, #0
 80174f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80174f6:	6878      	ldr	r0, [r7, #4]
 80174f8:	f000 f91c 	bl	8017734 <USBD_CtlSendStatus>
      }
      break;
 80174fc:	e004      	b.n	8017508 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80174fe:	6839      	ldr	r1, [r7, #0]
 8017500:	6878      	ldr	r0, [r7, #4]
 8017502:	f000 f840 	bl	8017586 <USBD_CtlError>
      break;
 8017506:	e000      	b.n	801750a <USBD_ClrFeature+0x3c>
      break;
 8017508:	bf00      	nop
  }
}
 801750a:	bf00      	nop
 801750c:	3708      	adds	r7, #8
 801750e:	46bd      	mov	sp, r7
 8017510:	bd80      	pop	{r7, pc}

08017512 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017512:	b580      	push	{r7, lr}
 8017514:	b084      	sub	sp, #16
 8017516:	af00      	add	r7, sp, #0
 8017518:	6078      	str	r0, [r7, #4]
 801751a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801751c:	683b      	ldr	r3, [r7, #0]
 801751e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	781a      	ldrb	r2, [r3, #0]
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	3301      	adds	r3, #1
 801752c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	781a      	ldrb	r2, [r3, #0]
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	3301      	adds	r3, #1
 801753a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801753c:	68f8      	ldr	r0, [r7, #12]
 801753e:	f7ff fa16 	bl	801696e <SWAPBYTE>
 8017542:	4603      	mov	r3, r0
 8017544:	461a      	mov	r2, r3
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	3301      	adds	r3, #1
 801754e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	3301      	adds	r3, #1
 8017554:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017556:	68f8      	ldr	r0, [r7, #12]
 8017558:	f7ff fa09 	bl	801696e <SWAPBYTE>
 801755c:	4603      	mov	r3, r0
 801755e:	461a      	mov	r2, r3
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	3301      	adds	r3, #1
 8017568:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	3301      	adds	r3, #1
 801756e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017570:	68f8      	ldr	r0, [r7, #12]
 8017572:	f7ff f9fc 	bl	801696e <SWAPBYTE>
 8017576:	4603      	mov	r3, r0
 8017578:	461a      	mov	r2, r3
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	80da      	strh	r2, [r3, #6]
}
 801757e:	bf00      	nop
 8017580:	3710      	adds	r7, #16
 8017582:	46bd      	mov	sp, r7
 8017584:	bd80      	pop	{r7, pc}

08017586 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017586:	b580      	push	{r7, lr}
 8017588:	b082      	sub	sp, #8
 801758a:	af00      	add	r7, sp, #0
 801758c:	6078      	str	r0, [r7, #4]
 801758e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017590:	2180      	movs	r1, #128	@ 0x80
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f000 fcee 	bl	8017f74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017598:	2100      	movs	r1, #0
 801759a:	6878      	ldr	r0, [r7, #4]
 801759c:	f000 fcea 	bl	8017f74 <USBD_LL_StallEP>
}
 80175a0:	bf00      	nop
 80175a2:	3708      	adds	r7, #8
 80175a4:	46bd      	mov	sp, r7
 80175a6:	bd80      	pop	{r7, pc}

080175a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b086      	sub	sp, #24
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	60f8      	str	r0, [r7, #12]
 80175b0:	60b9      	str	r1, [r7, #8]
 80175b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80175b4:	2300      	movs	r3, #0
 80175b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d042      	beq.n	8017644 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80175c2:	6938      	ldr	r0, [r7, #16]
 80175c4:	f000 f842 	bl	801764c <USBD_GetLen>
 80175c8:	4603      	mov	r3, r0
 80175ca:	3301      	adds	r3, #1
 80175cc:	005b      	lsls	r3, r3, #1
 80175ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80175d2:	d808      	bhi.n	80175e6 <USBD_GetString+0x3e>
 80175d4:	6938      	ldr	r0, [r7, #16]
 80175d6:	f000 f839 	bl	801764c <USBD_GetLen>
 80175da:	4603      	mov	r3, r0
 80175dc:	3301      	adds	r3, #1
 80175de:	b29b      	uxth	r3, r3
 80175e0:	005b      	lsls	r3, r3, #1
 80175e2:	b29a      	uxth	r2, r3
 80175e4:	e001      	b.n	80175ea <USBD_GetString+0x42>
 80175e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80175ee:	7dfb      	ldrb	r3, [r7, #23]
 80175f0:	68ba      	ldr	r2, [r7, #8]
 80175f2:	4413      	add	r3, r2
 80175f4:	687a      	ldr	r2, [r7, #4]
 80175f6:	7812      	ldrb	r2, [r2, #0]
 80175f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80175fa:	7dfb      	ldrb	r3, [r7, #23]
 80175fc:	3301      	adds	r3, #1
 80175fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017600:	7dfb      	ldrb	r3, [r7, #23]
 8017602:	68ba      	ldr	r2, [r7, #8]
 8017604:	4413      	add	r3, r2
 8017606:	2203      	movs	r2, #3
 8017608:	701a      	strb	r2, [r3, #0]
  idx++;
 801760a:	7dfb      	ldrb	r3, [r7, #23]
 801760c:	3301      	adds	r3, #1
 801760e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017610:	e013      	b.n	801763a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8017612:	7dfb      	ldrb	r3, [r7, #23]
 8017614:	68ba      	ldr	r2, [r7, #8]
 8017616:	4413      	add	r3, r2
 8017618:	693a      	ldr	r2, [r7, #16]
 801761a:	7812      	ldrb	r2, [r2, #0]
 801761c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801761e:	693b      	ldr	r3, [r7, #16]
 8017620:	3301      	adds	r3, #1
 8017622:	613b      	str	r3, [r7, #16]
    idx++;
 8017624:	7dfb      	ldrb	r3, [r7, #23]
 8017626:	3301      	adds	r3, #1
 8017628:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801762a:	7dfb      	ldrb	r3, [r7, #23]
 801762c:	68ba      	ldr	r2, [r7, #8]
 801762e:	4413      	add	r3, r2
 8017630:	2200      	movs	r2, #0
 8017632:	701a      	strb	r2, [r3, #0]
    idx++;
 8017634:	7dfb      	ldrb	r3, [r7, #23]
 8017636:	3301      	adds	r3, #1
 8017638:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	781b      	ldrb	r3, [r3, #0]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d1e7      	bne.n	8017612 <USBD_GetString+0x6a>
 8017642:	e000      	b.n	8017646 <USBD_GetString+0x9e>
    return;
 8017644:	bf00      	nop
  }
}
 8017646:	3718      	adds	r7, #24
 8017648:	46bd      	mov	sp, r7
 801764a:	bd80      	pop	{r7, pc}

0801764c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801764c:	b480      	push	{r7}
 801764e:	b085      	sub	sp, #20
 8017650:	af00      	add	r7, sp, #0
 8017652:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017654:	2300      	movs	r3, #0
 8017656:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801765c:	e005      	b.n	801766a <USBD_GetLen+0x1e>
  {
    len++;
 801765e:	7bfb      	ldrb	r3, [r7, #15]
 8017660:	3301      	adds	r3, #1
 8017662:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017664:	68bb      	ldr	r3, [r7, #8]
 8017666:	3301      	adds	r3, #1
 8017668:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801766a:	68bb      	ldr	r3, [r7, #8]
 801766c:	781b      	ldrb	r3, [r3, #0]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d1f5      	bne.n	801765e <USBD_GetLen+0x12>
  }

  return len;
 8017672:	7bfb      	ldrb	r3, [r7, #15]
}
 8017674:	4618      	mov	r0, r3
 8017676:	3714      	adds	r7, #20
 8017678:	46bd      	mov	sp, r7
 801767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767e:	4770      	bx	lr

08017680 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b084      	sub	sp, #16
 8017684:	af00      	add	r7, sp, #0
 8017686:	60f8      	str	r0, [r7, #12]
 8017688:	60b9      	str	r1, [r7, #8]
 801768a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	2202      	movs	r2, #2
 8017690:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	687a      	ldr	r2, [r7, #4]
 8017698:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	687a      	ldr	r2, [r7, #4]
 801769e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	68ba      	ldr	r2, [r7, #8]
 80176a4:	2100      	movs	r1, #0
 80176a6:	68f8      	ldr	r0, [r7, #12]
 80176a8:	f000 fced 	bl	8018086 <USBD_LL_Transmit>

  return USBD_OK;
 80176ac:	2300      	movs	r3, #0
}
 80176ae:	4618      	mov	r0, r3
 80176b0:	3710      	adds	r7, #16
 80176b2:	46bd      	mov	sp, r7
 80176b4:	bd80      	pop	{r7, pc}

080176b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80176b6:	b580      	push	{r7, lr}
 80176b8:	b084      	sub	sp, #16
 80176ba:	af00      	add	r7, sp, #0
 80176bc:	60f8      	str	r0, [r7, #12]
 80176be:	60b9      	str	r1, [r7, #8]
 80176c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	68ba      	ldr	r2, [r7, #8]
 80176c6:	2100      	movs	r1, #0
 80176c8:	68f8      	ldr	r0, [r7, #12]
 80176ca:	f000 fcdc 	bl	8018086 <USBD_LL_Transmit>

  return USBD_OK;
 80176ce:	2300      	movs	r3, #0
}
 80176d0:	4618      	mov	r0, r3
 80176d2:	3710      	adds	r7, #16
 80176d4:	46bd      	mov	sp, r7
 80176d6:	bd80      	pop	{r7, pc}

080176d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b084      	sub	sp, #16
 80176dc:	af00      	add	r7, sp, #0
 80176de:	60f8      	str	r0, [r7, #12]
 80176e0:	60b9      	str	r1, [r7, #8]
 80176e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	2203      	movs	r2, #3
 80176e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	687a      	ldr	r2, [r7, #4]
 80176f0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	687a      	ldr	r2, [r7, #4]
 80176f8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	68ba      	ldr	r2, [r7, #8]
 8017700:	2100      	movs	r1, #0
 8017702:	68f8      	ldr	r0, [r7, #12]
 8017704:	f000 fce0 	bl	80180c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017708:	2300      	movs	r3, #0
}
 801770a:	4618      	mov	r0, r3
 801770c:	3710      	adds	r7, #16
 801770e:	46bd      	mov	sp, r7
 8017710:	bd80      	pop	{r7, pc}

08017712 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017712:	b580      	push	{r7, lr}
 8017714:	b084      	sub	sp, #16
 8017716:	af00      	add	r7, sp, #0
 8017718:	60f8      	str	r0, [r7, #12]
 801771a:	60b9      	str	r1, [r7, #8]
 801771c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	68ba      	ldr	r2, [r7, #8]
 8017722:	2100      	movs	r1, #0
 8017724:	68f8      	ldr	r0, [r7, #12]
 8017726:	f000 fccf 	bl	80180c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801772a:	2300      	movs	r3, #0
}
 801772c:	4618      	mov	r0, r3
 801772e:	3710      	adds	r7, #16
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}

08017734 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017734:	b580      	push	{r7, lr}
 8017736:	b082      	sub	sp, #8
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	2204      	movs	r2, #4
 8017740:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017744:	2300      	movs	r3, #0
 8017746:	2200      	movs	r2, #0
 8017748:	2100      	movs	r1, #0
 801774a:	6878      	ldr	r0, [r7, #4]
 801774c:	f000 fc9b 	bl	8018086 <USBD_LL_Transmit>

  return USBD_OK;
 8017750:	2300      	movs	r3, #0
}
 8017752:	4618      	mov	r0, r3
 8017754:	3708      	adds	r7, #8
 8017756:	46bd      	mov	sp, r7
 8017758:	bd80      	pop	{r7, pc}

0801775a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801775a:	b580      	push	{r7, lr}
 801775c:	b082      	sub	sp, #8
 801775e:	af00      	add	r7, sp, #0
 8017760:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	2205      	movs	r2, #5
 8017766:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801776a:	2300      	movs	r3, #0
 801776c:	2200      	movs	r2, #0
 801776e:	2100      	movs	r1, #0
 8017770:	6878      	ldr	r0, [r7, #4]
 8017772:	f000 fca9 	bl	80180c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017776:	2300      	movs	r3, #0
}
 8017778:	4618      	mov	r0, r3
 801777a:	3708      	adds	r7, #8
 801777c:	46bd      	mov	sp, r7
 801777e:	bd80      	pop	{r7, pc}

08017780 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017780:	b580      	push	{r7, lr}
 8017782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8017784:	2201      	movs	r2, #1
 8017786:	4913      	ldr	r1, [pc, #76]	@ (80177d4 <MX_USB_DEVICE_Init+0x54>)
 8017788:	4813      	ldr	r0, [pc, #76]	@ (80177d8 <MX_USB_DEVICE_Init+0x58>)
 801778a:	f7fe fccd 	bl	8016128 <USBD_Init>
 801778e:	4603      	mov	r3, r0
 8017790:	2b00      	cmp	r3, #0
 8017792:	d001      	beq.n	8017798 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017794:	f7ea fcc0 	bl	8002118 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8017798:	4910      	ldr	r1, [pc, #64]	@ (80177dc <MX_USB_DEVICE_Init+0x5c>)
 801779a:	480f      	ldr	r0, [pc, #60]	@ (80177d8 <MX_USB_DEVICE_Init+0x58>)
 801779c:	f7fe fcf4 	bl	8016188 <USBD_RegisterClass>
 80177a0:	4603      	mov	r3, r0
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d001      	beq.n	80177aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80177a6:	f7ea fcb7 	bl	8002118 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80177aa:	490d      	ldr	r1, [pc, #52]	@ (80177e0 <MX_USB_DEVICE_Init+0x60>)
 80177ac:	480a      	ldr	r0, [pc, #40]	@ (80177d8 <MX_USB_DEVICE_Init+0x58>)
 80177ae:	f7fe fbeb 	bl	8015f88 <USBD_CDC_RegisterInterface>
 80177b2:	4603      	mov	r3, r0
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d001      	beq.n	80177bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80177b8:	f7ea fcae 	bl	8002118 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80177bc:	4806      	ldr	r0, [pc, #24]	@ (80177d8 <MX_USB_DEVICE_Init+0x58>)
 80177be:	f7fe fd19 	bl	80161f4 <USBD_Start>
 80177c2:	4603      	mov	r3, r0
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d001      	beq.n	80177cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80177c8:	f7ea fca6 	bl	8002118 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80177cc:	f7f5 f94c 	bl	800ca68 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80177d0:	bf00      	nop
 80177d2:	bd80      	pop	{r7, pc}
 80177d4:	240000b0 	.word	0x240000b0
 80177d8:	24004638 	.word	0x24004638
 80177dc:	2400001c 	.word	0x2400001c
 80177e0:	2400009c 	.word	0x2400009c

080177e4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80177e8:	2200      	movs	r2, #0
 80177ea:	4905      	ldr	r1, [pc, #20]	@ (8017800 <CDC_Init_HS+0x1c>)
 80177ec:	4805      	ldr	r0, [pc, #20]	@ (8017804 <CDC_Init_HS+0x20>)
 80177ee:	f7fe fbe5 	bl	8015fbc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80177f2:	4905      	ldr	r1, [pc, #20]	@ (8017808 <CDC_Init_HS+0x24>)
 80177f4:	4803      	ldr	r0, [pc, #12]	@ (8017804 <CDC_Init_HS+0x20>)
 80177f6:	f7fe fc03 	bl	8016000 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80177fa:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80177fc:	4618      	mov	r0, r3
 80177fe:	bd80      	pop	{r7, pc}
 8017800:	24005114 	.word	0x24005114
 8017804:	24004638 	.word	0x24004638
 8017808:	24004914 	.word	0x24004914

0801780c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801780c:	b480      	push	{r7}
 801780e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8017810:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8017812:	4618      	mov	r0, r3
 8017814:	46bd      	mov	sp, r7
 8017816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801781a:	4770      	bx	lr

0801781c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801781c:	b480      	push	{r7}
 801781e:	b083      	sub	sp, #12
 8017820:	af00      	add	r7, sp, #0
 8017822:	4603      	mov	r3, r0
 8017824:	6039      	str	r1, [r7, #0]
 8017826:	71fb      	strb	r3, [r7, #7]
 8017828:	4613      	mov	r3, r2
 801782a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801782c:	79fb      	ldrb	r3, [r7, #7]
 801782e:	2b23      	cmp	r3, #35	@ 0x23
 8017830:	d84a      	bhi.n	80178c8 <CDC_Control_HS+0xac>
 8017832:	a201      	add	r2, pc, #4	@ (adr r2, 8017838 <CDC_Control_HS+0x1c>)
 8017834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017838:	080178c9 	.word	0x080178c9
 801783c:	080178c9 	.word	0x080178c9
 8017840:	080178c9 	.word	0x080178c9
 8017844:	080178c9 	.word	0x080178c9
 8017848:	080178c9 	.word	0x080178c9
 801784c:	080178c9 	.word	0x080178c9
 8017850:	080178c9 	.word	0x080178c9
 8017854:	080178c9 	.word	0x080178c9
 8017858:	080178c9 	.word	0x080178c9
 801785c:	080178c9 	.word	0x080178c9
 8017860:	080178c9 	.word	0x080178c9
 8017864:	080178c9 	.word	0x080178c9
 8017868:	080178c9 	.word	0x080178c9
 801786c:	080178c9 	.word	0x080178c9
 8017870:	080178c9 	.word	0x080178c9
 8017874:	080178c9 	.word	0x080178c9
 8017878:	080178c9 	.word	0x080178c9
 801787c:	080178c9 	.word	0x080178c9
 8017880:	080178c9 	.word	0x080178c9
 8017884:	080178c9 	.word	0x080178c9
 8017888:	080178c9 	.word	0x080178c9
 801788c:	080178c9 	.word	0x080178c9
 8017890:	080178c9 	.word	0x080178c9
 8017894:	080178c9 	.word	0x080178c9
 8017898:	080178c9 	.word	0x080178c9
 801789c:	080178c9 	.word	0x080178c9
 80178a0:	080178c9 	.word	0x080178c9
 80178a4:	080178c9 	.word	0x080178c9
 80178a8:	080178c9 	.word	0x080178c9
 80178ac:	080178c9 	.word	0x080178c9
 80178b0:	080178c9 	.word	0x080178c9
 80178b4:	080178c9 	.word	0x080178c9
 80178b8:	080178c9 	.word	0x080178c9
 80178bc:	080178c9 	.word	0x080178c9
 80178c0:	080178c9 	.word	0x080178c9
 80178c4:	080178c9 	.word	0x080178c9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80178c8:	bf00      	nop
  }

  return (USBD_OK);
 80178ca:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80178cc:	4618      	mov	r0, r3
 80178ce:	370c      	adds	r7, #12
 80178d0:	46bd      	mov	sp, r7
 80178d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d6:	4770      	bx	lr

080178d8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b082      	sub	sp, #8
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]
 80178e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80178e2:	6879      	ldr	r1, [r7, #4]
 80178e4:	4808      	ldr	r0, [pc, #32]	@ (8017908 <CDC_Receive_HS+0x30>)
 80178e6:	f7fe fb8b 	bl	8016000 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80178ea:	4807      	ldr	r0, [pc, #28]	@ (8017908 <CDC_Receive_HS+0x30>)
 80178ec:	f7fe fbe6 	bl	80160bc <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 80178f0:	683b      	ldr	r3, [r7, #0]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	461a      	mov	r2, r3
 80178f6:	6879      	ldr	r1, [r7, #4]
 80178f8:	4804      	ldr	r0, [pc, #16]	@ (801790c <CDC_Receive_HS+0x34>)
 80178fa:	f7ed fc25 	bl	8005148 <VibeCheckShell_PutInput>

	return (USBD_OK);
 80178fe:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8017900:	4618      	mov	r0, r3
 8017902:	3708      	adds	r7, #8
 8017904:	46bd      	mov	sp, r7
 8017906:	bd80      	pop	{r7, pc}
 8017908:	24004638 	.word	0x24004638
 801790c:	24000988 	.word	0x24000988

08017910 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8017910:	b580      	push	{r7, lr}
 8017912:	b084      	sub	sp, #16
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
 8017918:	460b      	mov	r3, r1
 801791a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801791c:	2300      	movs	r3, #0
 801791e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8017920:	4b0d      	ldr	r3, [pc, #52]	@ (8017958 <CDC_Transmit_HS+0x48>)
 8017922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017926:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017928:	68bb      	ldr	r3, [r7, #8]
 801792a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801792e:	2b00      	cmp	r3, #0
 8017930:	d001      	beq.n	8017936 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8017932:	2301      	movs	r3, #1
 8017934:	e00b      	b.n	801794e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8017936:	887b      	ldrh	r3, [r7, #2]
 8017938:	461a      	mov	r2, r3
 801793a:	6879      	ldr	r1, [r7, #4]
 801793c:	4806      	ldr	r0, [pc, #24]	@ (8017958 <CDC_Transmit_HS+0x48>)
 801793e:	f7fe fb3d 	bl	8015fbc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8017942:	4805      	ldr	r0, [pc, #20]	@ (8017958 <CDC_Transmit_HS+0x48>)
 8017944:	f7fe fb7a 	bl	801603c <USBD_CDC_TransmitPacket>
 8017948:	4603      	mov	r3, r0
 801794a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801794c:	7bfb      	ldrb	r3, [r7, #15]
}
 801794e:	4618      	mov	r0, r3
 8017950:	3710      	adds	r7, #16
 8017952:	46bd      	mov	sp, r7
 8017954:	bd80      	pop	{r7, pc}
 8017956:	bf00      	nop
 8017958:	24004638 	.word	0x24004638

0801795c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801795c:	b480      	push	{r7}
 801795e:	b087      	sub	sp, #28
 8017960:	af00      	add	r7, sp, #0
 8017962:	60f8      	str	r0, [r7, #12]
 8017964:	60b9      	str	r1, [r7, #8]
 8017966:	4613      	mov	r3, r2
 8017968:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801796a:	2300      	movs	r3, #0
 801796c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801796e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017972:	4618      	mov	r0, r3
 8017974:	371c      	adds	r7, #28
 8017976:	46bd      	mov	sp, r7
 8017978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801797c:	4770      	bx	lr
	...

08017980 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017980:	b480      	push	{r7}
 8017982:	b083      	sub	sp, #12
 8017984:	af00      	add	r7, sp, #0
 8017986:	4603      	mov	r3, r0
 8017988:	6039      	str	r1, [r7, #0]
 801798a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801798c:	683b      	ldr	r3, [r7, #0]
 801798e:	2212      	movs	r2, #18
 8017990:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8017992:	4b03      	ldr	r3, [pc, #12]	@ (80179a0 <USBD_HS_DeviceDescriptor+0x20>)
}
 8017994:	4618      	mov	r0, r3
 8017996:	370c      	adds	r7, #12
 8017998:	46bd      	mov	sp, r7
 801799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799e:	4770      	bx	lr
 80179a0:	240000d0 	.word	0x240000d0

080179a4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179a4:	b480      	push	{r7}
 80179a6:	b083      	sub	sp, #12
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	4603      	mov	r3, r0
 80179ac:	6039      	str	r1, [r7, #0]
 80179ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80179b0:	683b      	ldr	r3, [r7, #0]
 80179b2:	2204      	movs	r2, #4
 80179b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80179b6:	4b03      	ldr	r3, [pc, #12]	@ (80179c4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80179b8:	4618      	mov	r0, r3
 80179ba:	370c      	adds	r7, #12
 80179bc:	46bd      	mov	sp, r7
 80179be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c2:	4770      	bx	lr
 80179c4:	240000e4 	.word	0x240000e4

080179c8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b082      	sub	sp, #8
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	4603      	mov	r3, r0
 80179d0:	6039      	str	r1, [r7, #0]
 80179d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80179d4:	79fb      	ldrb	r3, [r7, #7]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d105      	bne.n	80179e6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80179da:	683a      	ldr	r2, [r7, #0]
 80179dc:	4907      	ldr	r1, [pc, #28]	@ (80179fc <USBD_HS_ProductStrDescriptor+0x34>)
 80179de:	4808      	ldr	r0, [pc, #32]	@ (8017a00 <USBD_HS_ProductStrDescriptor+0x38>)
 80179e0:	f7ff fde2 	bl	80175a8 <USBD_GetString>
 80179e4:	e004      	b.n	80179f0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80179e6:	683a      	ldr	r2, [r7, #0]
 80179e8:	4904      	ldr	r1, [pc, #16]	@ (80179fc <USBD_HS_ProductStrDescriptor+0x34>)
 80179ea:	4805      	ldr	r0, [pc, #20]	@ (8017a00 <USBD_HS_ProductStrDescriptor+0x38>)
 80179ec:	f7ff fddc 	bl	80175a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80179f0:	4b02      	ldr	r3, [pc, #8]	@ (80179fc <USBD_HS_ProductStrDescriptor+0x34>)
}
 80179f2:	4618      	mov	r0, r3
 80179f4:	3708      	adds	r7, #8
 80179f6:	46bd      	mov	sp, r7
 80179f8:	bd80      	pop	{r7, pc}
 80179fa:	bf00      	nop
 80179fc:	24005914 	.word	0x24005914
 8017a00:	0801d23c 	.word	0x0801d23c

08017a04 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b082      	sub	sp, #8
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	4603      	mov	r3, r0
 8017a0c:	6039      	str	r1, [r7, #0]
 8017a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017a10:	683a      	ldr	r2, [r7, #0]
 8017a12:	4904      	ldr	r1, [pc, #16]	@ (8017a24 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8017a14:	4804      	ldr	r0, [pc, #16]	@ (8017a28 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8017a16:	f7ff fdc7 	bl	80175a8 <USBD_GetString>
  return USBD_StrDesc;
 8017a1a:	4b02      	ldr	r3, [pc, #8]	@ (8017a24 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	3708      	adds	r7, #8
 8017a20:	46bd      	mov	sp, r7
 8017a22:	bd80      	pop	{r7, pc}
 8017a24:	24005914 	.word	0x24005914
 8017a28:	0801d248 	.word	0x0801d248

08017a2c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b082      	sub	sp, #8
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	4603      	mov	r3, r0
 8017a34:	6039      	str	r1, [r7, #0]
 8017a36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017a38:	683b      	ldr	r3, [r7, #0]
 8017a3a:	221a      	movs	r2, #26
 8017a3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017a3e:	f000 f843 	bl	8017ac8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8017a42:	4b02      	ldr	r3, [pc, #8]	@ (8017a4c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8017a44:	4618      	mov	r0, r3
 8017a46:	3708      	adds	r7, #8
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	bd80      	pop	{r7, pc}
 8017a4c:	240000e8 	.word	0x240000e8

08017a50 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b082      	sub	sp, #8
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	4603      	mov	r3, r0
 8017a58:	6039      	str	r1, [r7, #0]
 8017a5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017a5c:	79fb      	ldrb	r3, [r7, #7]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d105      	bne.n	8017a6e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8017a62:	683a      	ldr	r2, [r7, #0]
 8017a64:	4907      	ldr	r1, [pc, #28]	@ (8017a84 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017a66:	4808      	ldr	r0, [pc, #32]	@ (8017a88 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017a68:	f7ff fd9e 	bl	80175a8 <USBD_GetString>
 8017a6c:	e004      	b.n	8017a78 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8017a6e:	683a      	ldr	r2, [r7, #0]
 8017a70:	4904      	ldr	r1, [pc, #16]	@ (8017a84 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017a72:	4805      	ldr	r0, [pc, #20]	@ (8017a88 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017a74:	f7ff fd98 	bl	80175a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017a78:	4b02      	ldr	r3, [pc, #8]	@ (8017a84 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	3708      	adds	r7, #8
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	bd80      	pop	{r7, pc}
 8017a82:	bf00      	nop
 8017a84:	24005914 	.word	0x24005914
 8017a88:	0801d254 	.word	0x0801d254

08017a8c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a8c:	b580      	push	{r7, lr}
 8017a8e:	b082      	sub	sp, #8
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	4603      	mov	r3, r0
 8017a94:	6039      	str	r1, [r7, #0]
 8017a96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017a98:	79fb      	ldrb	r3, [r7, #7]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d105      	bne.n	8017aaa <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8017a9e:	683a      	ldr	r2, [r7, #0]
 8017aa0:	4907      	ldr	r1, [pc, #28]	@ (8017ac0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017aa2:	4808      	ldr	r0, [pc, #32]	@ (8017ac4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017aa4:	f7ff fd80 	bl	80175a8 <USBD_GetString>
 8017aa8:	e004      	b.n	8017ab4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8017aaa:	683a      	ldr	r2, [r7, #0]
 8017aac:	4904      	ldr	r1, [pc, #16]	@ (8017ac0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017aae:	4805      	ldr	r0, [pc, #20]	@ (8017ac4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017ab0:	f7ff fd7a 	bl	80175a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017ab4:	4b02      	ldr	r3, [pc, #8]	@ (8017ac0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	3708      	adds	r7, #8
 8017aba:	46bd      	mov	sp, r7
 8017abc:	bd80      	pop	{r7, pc}
 8017abe:	bf00      	nop
 8017ac0:	24005914 	.word	0x24005914
 8017ac4:	0801d260 	.word	0x0801d260

08017ac8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b084      	sub	sp, #16
 8017acc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017ace:	4b0f      	ldr	r3, [pc, #60]	@ (8017b0c <Get_SerialNum+0x44>)
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8017b10 <Get_SerialNum+0x48>)
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017ada:	4b0e      	ldr	r3, [pc, #56]	@ (8017b14 <Get_SerialNum+0x4c>)
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017ae0:	68fa      	ldr	r2, [r7, #12]
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	4413      	add	r3, r2
 8017ae6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d009      	beq.n	8017b02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017aee:	2208      	movs	r2, #8
 8017af0:	4909      	ldr	r1, [pc, #36]	@ (8017b18 <Get_SerialNum+0x50>)
 8017af2:	68f8      	ldr	r0, [r7, #12]
 8017af4:	f000 f814 	bl	8017b20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017af8:	2204      	movs	r2, #4
 8017afa:	4908      	ldr	r1, [pc, #32]	@ (8017b1c <Get_SerialNum+0x54>)
 8017afc:	68b8      	ldr	r0, [r7, #8]
 8017afe:	f000 f80f 	bl	8017b20 <IntToUnicode>
  }
}
 8017b02:	bf00      	nop
 8017b04:	3710      	adds	r7, #16
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}
 8017b0a:	bf00      	nop
 8017b0c:	1ff1e800 	.word	0x1ff1e800
 8017b10:	1ff1e804 	.word	0x1ff1e804
 8017b14:	1ff1e808 	.word	0x1ff1e808
 8017b18:	240000ea 	.word	0x240000ea
 8017b1c:	240000fa 	.word	0x240000fa

08017b20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017b20:	b480      	push	{r7}
 8017b22:	b087      	sub	sp, #28
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	60f8      	str	r0, [r7, #12]
 8017b28:	60b9      	str	r1, [r7, #8]
 8017b2a:	4613      	mov	r3, r2
 8017b2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017b2e:	2300      	movs	r3, #0
 8017b30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017b32:	2300      	movs	r3, #0
 8017b34:	75fb      	strb	r3, [r7, #23]
 8017b36:	e027      	b.n	8017b88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	0f1b      	lsrs	r3, r3, #28
 8017b3c:	2b09      	cmp	r3, #9
 8017b3e:	d80b      	bhi.n	8017b58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	0f1b      	lsrs	r3, r3, #28
 8017b44:	b2da      	uxtb	r2, r3
 8017b46:	7dfb      	ldrb	r3, [r7, #23]
 8017b48:	005b      	lsls	r3, r3, #1
 8017b4a:	4619      	mov	r1, r3
 8017b4c:	68bb      	ldr	r3, [r7, #8]
 8017b4e:	440b      	add	r3, r1
 8017b50:	3230      	adds	r2, #48	@ 0x30
 8017b52:	b2d2      	uxtb	r2, r2
 8017b54:	701a      	strb	r2, [r3, #0]
 8017b56:	e00a      	b.n	8017b6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	0f1b      	lsrs	r3, r3, #28
 8017b5c:	b2da      	uxtb	r2, r3
 8017b5e:	7dfb      	ldrb	r3, [r7, #23]
 8017b60:	005b      	lsls	r3, r3, #1
 8017b62:	4619      	mov	r1, r3
 8017b64:	68bb      	ldr	r3, [r7, #8]
 8017b66:	440b      	add	r3, r1
 8017b68:	3237      	adds	r2, #55	@ 0x37
 8017b6a:	b2d2      	uxtb	r2, r2
 8017b6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	011b      	lsls	r3, r3, #4
 8017b72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017b74:	7dfb      	ldrb	r3, [r7, #23]
 8017b76:	005b      	lsls	r3, r3, #1
 8017b78:	3301      	adds	r3, #1
 8017b7a:	68ba      	ldr	r2, [r7, #8]
 8017b7c:	4413      	add	r3, r2
 8017b7e:	2200      	movs	r2, #0
 8017b80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017b82:	7dfb      	ldrb	r3, [r7, #23]
 8017b84:	3301      	adds	r3, #1
 8017b86:	75fb      	strb	r3, [r7, #23]
 8017b88:	7dfa      	ldrb	r2, [r7, #23]
 8017b8a:	79fb      	ldrb	r3, [r7, #7]
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	d3d3      	bcc.n	8017b38 <IntToUnicode+0x18>
  }
}
 8017b90:	bf00      	nop
 8017b92:	bf00      	nop
 8017b94:	371c      	adds	r7, #28
 8017b96:	46bd      	mov	sp, r7
 8017b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b9c:	4770      	bx	lr
	...

08017ba0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b0b2      	sub	sp, #200	@ 0xc8
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017ba8:	f107 0310 	add.w	r3, r7, #16
 8017bac:	22b8      	movs	r2, #184	@ 0xb8
 8017bae:	2100      	movs	r1, #0
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f001 fea6 	bl	8019902 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	4a1a      	ldr	r2, [pc, #104]	@ (8017c24 <HAL_PCD_MspInit+0x84>)
 8017bbc:	4293      	cmp	r3, r2
 8017bbe:	d12c      	bne.n	8017c1a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017bc0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017bc4:	f04f 0300 	mov.w	r3, #0
 8017bc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017bcc:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8017bd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017bd4:	f107 0310 	add.w	r3, r7, #16
 8017bd8:	4618      	mov	r0, r3
 8017bda:	f7f5 febb 	bl	800d954 <HAL_RCCEx_PeriphCLKConfig>
 8017bde:	4603      	mov	r3, r0
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d001      	beq.n	8017be8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8017be4:	f7ea fa98 	bl	8002118 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017be8:	f7f4 ff3e 	bl	800ca68 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8017bec:	4b0e      	ldr	r3, [pc, #56]	@ (8017c28 <HAL_PCD_MspInit+0x88>)
 8017bee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8017c28 <HAL_PCD_MspInit+0x88>)
 8017bf4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8017bf8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8017bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8017c28 <HAL_PCD_MspInit+0x88>)
 8017bfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017c06:	60fb      	str	r3, [r7, #12]
 8017c08:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	2100      	movs	r1, #0
 8017c0e:	204d      	movs	r0, #77	@ 0x4d
 8017c10:	f7f0 fcf1 	bl	80085f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8017c14:	204d      	movs	r0, #77	@ 0x4d
 8017c16:	f7f0 fd08 	bl	800862a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8017c1a:	bf00      	nop
 8017c1c:	37c8      	adds	r7, #200	@ 0xc8
 8017c1e:	46bd      	mov	sp, r7
 8017c20:	bd80      	pop	{r7, pc}
 8017c22:	bf00      	nop
 8017c24:	40040000 	.word	0x40040000
 8017c28:	58024400 	.word	0x58024400

08017c2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c2c:	b580      	push	{r7, lr}
 8017c2e:	b082      	sub	sp, #8
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017c40:	4619      	mov	r1, r3
 8017c42:	4610      	mov	r0, r2
 8017c44:	f7fe fb23 	bl	801628e <USBD_LL_SetupStage>
}
 8017c48:	bf00      	nop
 8017c4a:	3708      	adds	r7, #8
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}

08017c50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b082      	sub	sp, #8
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
 8017c58:	460b      	mov	r3, r1
 8017c5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017c62:	78fa      	ldrb	r2, [r7, #3]
 8017c64:	6879      	ldr	r1, [r7, #4]
 8017c66:	4613      	mov	r3, r2
 8017c68:	00db      	lsls	r3, r3, #3
 8017c6a:	4413      	add	r3, r2
 8017c6c:	009b      	lsls	r3, r3, #2
 8017c6e:	440b      	add	r3, r1
 8017c70:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017c74:	681a      	ldr	r2, [r3, #0]
 8017c76:	78fb      	ldrb	r3, [r7, #3]
 8017c78:	4619      	mov	r1, r3
 8017c7a:	f7fe fb5d 	bl	8016338 <USBD_LL_DataOutStage>
}
 8017c7e:	bf00      	nop
 8017c80:	3708      	adds	r7, #8
 8017c82:	46bd      	mov	sp, r7
 8017c84:	bd80      	pop	{r7, pc}

08017c86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c86:	b580      	push	{r7, lr}
 8017c88:	b082      	sub	sp, #8
 8017c8a:	af00      	add	r7, sp, #0
 8017c8c:	6078      	str	r0, [r7, #4]
 8017c8e:	460b      	mov	r3, r1
 8017c90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017c98:	78fa      	ldrb	r2, [r7, #3]
 8017c9a:	6879      	ldr	r1, [r7, #4]
 8017c9c:	4613      	mov	r3, r2
 8017c9e:	00db      	lsls	r3, r3, #3
 8017ca0:	4413      	add	r3, r2
 8017ca2:	009b      	lsls	r3, r3, #2
 8017ca4:	440b      	add	r3, r1
 8017ca6:	3320      	adds	r3, #32
 8017ca8:	681a      	ldr	r2, [r3, #0]
 8017caa:	78fb      	ldrb	r3, [r7, #3]
 8017cac:	4619      	mov	r1, r3
 8017cae:	f7fe fbf6 	bl	801649e <USBD_LL_DataInStage>
}
 8017cb2:	bf00      	nop
 8017cb4:	3708      	adds	r7, #8
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	bd80      	pop	{r7, pc}

08017cba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cba:	b580      	push	{r7, lr}
 8017cbc:	b082      	sub	sp, #8
 8017cbe:	af00      	add	r7, sp, #0
 8017cc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f7fe fd30 	bl	801672e <USBD_LL_SOF>
}
 8017cce:	bf00      	nop
 8017cd0:	3708      	adds	r7, #8
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	bd80      	pop	{r7, pc}

08017cd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cd6:	b580      	push	{r7, lr}
 8017cd8:	b084      	sub	sp, #16
 8017cda:	af00      	add	r7, sp, #0
 8017cdc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017cde:	2301      	movs	r3, #1
 8017ce0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	79db      	ldrb	r3, [r3, #7]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d102      	bne.n	8017cf0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017cea:	2300      	movs	r3, #0
 8017cec:	73fb      	strb	r3, [r7, #15]
 8017cee:	e008      	b.n	8017d02 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	79db      	ldrb	r3, [r3, #7]
 8017cf4:	2b02      	cmp	r3, #2
 8017cf6:	d102      	bne.n	8017cfe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	73fb      	strb	r3, [r7, #15]
 8017cfc:	e001      	b.n	8017d02 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017cfe:	f7ea fa0b 	bl	8002118 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d08:	7bfa      	ldrb	r2, [r7, #15]
 8017d0a:	4611      	mov	r1, r2
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	f7fe fcca 	bl	80166a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d18:	4618      	mov	r0, r3
 8017d1a:	f7fe fc72 	bl	8016602 <USBD_LL_Reset>
}
 8017d1e:	bf00      	nop
 8017d20:	3710      	adds	r7, #16
 8017d22:	46bd      	mov	sp, r7
 8017d24:	bd80      	pop	{r7, pc}
	...

08017d28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b082      	sub	sp, #8
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d36:	4618      	mov	r0, r3
 8017d38:	f7fe fcc5 	bl	80166c6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	687a      	ldr	r2, [r7, #4]
 8017d48:	6812      	ldr	r2, [r2, #0]
 8017d4a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017d4e:	f043 0301 	orr.w	r3, r3, #1
 8017d52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	7adb      	ldrb	r3, [r3, #11]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d005      	beq.n	8017d68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017d5c:	4b04      	ldr	r3, [pc, #16]	@ (8017d70 <HAL_PCD_SuspendCallback+0x48>)
 8017d5e:	691b      	ldr	r3, [r3, #16]
 8017d60:	4a03      	ldr	r2, [pc, #12]	@ (8017d70 <HAL_PCD_SuspendCallback+0x48>)
 8017d62:	f043 0306 	orr.w	r3, r3, #6
 8017d66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017d68:	bf00      	nop
 8017d6a:	3708      	adds	r7, #8
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bd80      	pop	{r7, pc}
 8017d70:	e000ed00 	.word	0xe000ed00

08017d74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b082      	sub	sp, #8
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d82:	4618      	mov	r0, r3
 8017d84:	f7fe fcbb 	bl	80166fe <USBD_LL_Resume>
}
 8017d88:	bf00      	nop
 8017d8a:	3708      	adds	r7, #8
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	bd80      	pop	{r7, pc}

08017d90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b082      	sub	sp, #8
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
 8017d98:	460b      	mov	r3, r1
 8017d9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017da2:	78fa      	ldrb	r2, [r7, #3]
 8017da4:	4611      	mov	r1, r2
 8017da6:	4618      	mov	r0, r3
 8017da8:	f7fe fd13 	bl	80167d2 <USBD_LL_IsoOUTIncomplete>
}
 8017dac:	bf00      	nop
 8017dae:	3708      	adds	r7, #8
 8017db0:	46bd      	mov	sp, r7
 8017db2:	bd80      	pop	{r7, pc}

08017db4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017db4:	b580      	push	{r7, lr}
 8017db6:	b082      	sub	sp, #8
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	6078      	str	r0, [r7, #4]
 8017dbc:	460b      	mov	r3, r1
 8017dbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017dc6:	78fa      	ldrb	r2, [r7, #3]
 8017dc8:	4611      	mov	r1, r2
 8017dca:	4618      	mov	r0, r3
 8017dcc:	f7fe fccf 	bl	801676e <USBD_LL_IsoINIncomplete>
}
 8017dd0:	bf00      	nop
 8017dd2:	3708      	adds	r7, #8
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	bd80      	pop	{r7, pc}

08017dd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b082      	sub	sp, #8
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017de6:	4618      	mov	r0, r3
 8017de8:	f7fe fd25 	bl	8016836 <USBD_LL_DevConnected>
}
 8017dec:	bf00      	nop
 8017dee:	3708      	adds	r7, #8
 8017df0:	46bd      	mov	sp, r7
 8017df2:	bd80      	pop	{r7, pc}

08017df4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b082      	sub	sp, #8
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017e02:	4618      	mov	r0, r3
 8017e04:	f7fe fd22 	bl	801684c <USBD_LL_DevDisconnected>
}
 8017e08:	bf00      	nop
 8017e0a:	3708      	adds	r7, #8
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	bd80      	pop	{r7, pc}

08017e10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b082      	sub	sp, #8
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	781b      	ldrb	r3, [r3, #0]
 8017e1c:	2b01      	cmp	r3, #1
 8017e1e:	d140      	bne.n	8017ea2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8017e20:	4a22      	ldr	r2, [pc, #136]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	4a20      	ldr	r2, [pc, #128]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e2c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8017e30:	4b1e      	ldr	r3, [pc, #120]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e32:	4a1f      	ldr	r2, [pc, #124]	@ (8017eb0 <USBD_LL_Init+0xa0>)
 8017e34:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8017e36:	4b1d      	ldr	r3, [pc, #116]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e38:	2209      	movs	r2, #9
 8017e3a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8017e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e3e:	2202      	movs	r2, #2
 8017e40:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8017e42:	4b1a      	ldr	r3, [pc, #104]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e44:	2200      	movs	r2, #0
 8017e46:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8017e48:	4b18      	ldr	r3, [pc, #96]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e4a:	2202      	movs	r2, #2
 8017e4c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8017e4e:	4b17      	ldr	r3, [pc, #92]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e50:	2200      	movs	r2, #0
 8017e52:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017e54:	4b15      	ldr	r3, [pc, #84]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e56:	2200      	movs	r2, #0
 8017e58:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8017e5a:	4b14      	ldr	r3, [pc, #80]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8017e60:	4b12      	ldr	r3, [pc, #72]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e62:	2200      	movs	r2, #0
 8017e64:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8017e66:	4b11      	ldr	r3, [pc, #68]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e68:	2200      	movs	r2, #0
 8017e6a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e6e:	2200      	movs	r2, #0
 8017e70:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8017e72:	480e      	ldr	r0, [pc, #56]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e74:	f7f3 fb1f 	bl	800b4b6 <HAL_PCD_Init>
 8017e78:	4603      	mov	r3, r0
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d001      	beq.n	8017e82 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017e7e:	f7ea f94b 	bl	8002118 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8017e82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8017e86:	4809      	ldr	r0, [pc, #36]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e88:	f7f4 fd73 	bl	800c972 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017e8c:	2280      	movs	r2, #128	@ 0x80
 8017e8e:	2100      	movs	r1, #0
 8017e90:	4806      	ldr	r0, [pc, #24]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e92:	f7f4 fd27 	bl	800c8e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8017e96:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8017e9a:	2101      	movs	r1, #1
 8017e9c:	4803      	ldr	r0, [pc, #12]	@ (8017eac <USBD_LL_Init+0x9c>)
 8017e9e:	f7f4 fd21 	bl	800c8e4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8017ea2:	2300      	movs	r3, #0
}
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	3708      	adds	r7, #8
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	bd80      	pop	{r7, pc}
 8017eac:	24005b14 	.word	0x24005b14
 8017eb0:	40040000 	.word	0x40040000

08017eb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b084      	sub	sp, #16
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017eca:	4618      	mov	r0, r3
 8017ecc:	f7f3 fbff 	bl	800b6ce <HAL_PCD_Start>
 8017ed0:	4603      	mov	r3, r0
 8017ed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ed4:	7bfb      	ldrb	r3, [r7, #15]
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	f000 f942 	bl	8018160 <USBD_Get_USB_Status>
 8017edc:	4603      	mov	r3, r0
 8017ede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	3710      	adds	r7, #16
 8017ee6:	46bd      	mov	sp, r7
 8017ee8:	bd80      	pop	{r7, pc}

08017eea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017eea:	b580      	push	{r7, lr}
 8017eec:	b084      	sub	sp, #16
 8017eee:	af00      	add	r7, sp, #0
 8017ef0:	6078      	str	r0, [r7, #4]
 8017ef2:	4608      	mov	r0, r1
 8017ef4:	4611      	mov	r1, r2
 8017ef6:	461a      	mov	r2, r3
 8017ef8:	4603      	mov	r3, r0
 8017efa:	70fb      	strb	r3, [r7, #3]
 8017efc:	460b      	mov	r3, r1
 8017efe:	70bb      	strb	r3, [r7, #2]
 8017f00:	4613      	mov	r3, r2
 8017f02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f04:	2300      	movs	r3, #0
 8017f06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f08:	2300      	movs	r3, #0
 8017f0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017f12:	78bb      	ldrb	r3, [r7, #2]
 8017f14:	883a      	ldrh	r2, [r7, #0]
 8017f16:	78f9      	ldrb	r1, [r7, #3]
 8017f18:	f7f4 f900 	bl	800c11c <HAL_PCD_EP_Open>
 8017f1c:	4603      	mov	r3, r0
 8017f1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f20:	7bfb      	ldrb	r3, [r7, #15]
 8017f22:	4618      	mov	r0, r3
 8017f24:	f000 f91c 	bl	8018160 <USBD_Get_USB_Status>
 8017f28:	4603      	mov	r3, r0
 8017f2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f2e:	4618      	mov	r0, r3
 8017f30:	3710      	adds	r7, #16
 8017f32:	46bd      	mov	sp, r7
 8017f34:	bd80      	pop	{r7, pc}

08017f36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f36:	b580      	push	{r7, lr}
 8017f38:	b084      	sub	sp, #16
 8017f3a:	af00      	add	r7, sp, #0
 8017f3c:	6078      	str	r0, [r7, #4]
 8017f3e:	460b      	mov	r3, r1
 8017f40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f42:	2300      	movs	r3, #0
 8017f44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f46:	2300      	movs	r3, #0
 8017f48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f50:	78fa      	ldrb	r2, [r7, #3]
 8017f52:	4611      	mov	r1, r2
 8017f54:	4618      	mov	r0, r3
 8017f56:	f7f4 f949 	bl	800c1ec <HAL_PCD_EP_Close>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f5e:	7bfb      	ldrb	r3, [r7, #15]
 8017f60:	4618      	mov	r0, r3
 8017f62:	f000 f8fd 	bl	8018160 <USBD_Get_USB_Status>
 8017f66:	4603      	mov	r3, r0
 8017f68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	3710      	adds	r7, #16
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bd80      	pop	{r7, pc}

08017f74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b084      	sub	sp, #16
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
 8017f7c:	460b      	mov	r3, r1
 8017f7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f80:	2300      	movs	r3, #0
 8017f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f84:	2300      	movs	r3, #0
 8017f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f8e:	78fa      	ldrb	r2, [r7, #3]
 8017f90:	4611      	mov	r1, r2
 8017f92:	4618      	mov	r0, r3
 8017f94:	f7f4 fa01 	bl	800c39a <HAL_PCD_EP_SetStall>
 8017f98:	4603      	mov	r3, r0
 8017f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f9c:	7bfb      	ldrb	r3, [r7, #15]
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	f000 f8de 	bl	8018160 <USBD_Get_USB_Status>
 8017fa4:	4603      	mov	r3, r0
 8017fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017faa:	4618      	mov	r0, r3
 8017fac:	3710      	adds	r7, #16
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	bd80      	pop	{r7, pc}

08017fb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017fb2:	b580      	push	{r7, lr}
 8017fb4:	b084      	sub	sp, #16
 8017fb6:	af00      	add	r7, sp, #0
 8017fb8:	6078      	str	r0, [r7, #4]
 8017fba:	460b      	mov	r3, r1
 8017fbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017fcc:	78fa      	ldrb	r2, [r7, #3]
 8017fce:	4611      	mov	r1, r2
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	f7f4 fa45 	bl	800c460 <HAL_PCD_EP_ClrStall>
 8017fd6:	4603      	mov	r3, r0
 8017fd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017fda:	7bfb      	ldrb	r3, [r7, #15]
 8017fdc:	4618      	mov	r0, r3
 8017fde:	f000 f8bf 	bl	8018160 <USBD_Get_USB_Status>
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8017fe8:	4618      	mov	r0, r3
 8017fea:	3710      	adds	r7, #16
 8017fec:	46bd      	mov	sp, r7
 8017fee:	bd80      	pop	{r7, pc}

08017ff0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ff0:	b480      	push	{r7}
 8017ff2:	b085      	sub	sp, #20
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	6078      	str	r0, [r7, #4]
 8017ff8:	460b      	mov	r3, r1
 8017ffa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018002:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018008:	2b00      	cmp	r3, #0
 801800a:	da0b      	bge.n	8018024 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801800c:	78fb      	ldrb	r3, [r7, #3]
 801800e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018012:	68f9      	ldr	r1, [r7, #12]
 8018014:	4613      	mov	r3, r2
 8018016:	00db      	lsls	r3, r3, #3
 8018018:	4413      	add	r3, r2
 801801a:	009b      	lsls	r3, r3, #2
 801801c:	440b      	add	r3, r1
 801801e:	3316      	adds	r3, #22
 8018020:	781b      	ldrb	r3, [r3, #0]
 8018022:	e00b      	b.n	801803c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018024:	78fb      	ldrb	r3, [r7, #3]
 8018026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801802a:	68f9      	ldr	r1, [r7, #12]
 801802c:	4613      	mov	r3, r2
 801802e:	00db      	lsls	r3, r3, #3
 8018030:	4413      	add	r3, r2
 8018032:	009b      	lsls	r3, r3, #2
 8018034:	440b      	add	r3, r1
 8018036:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801803a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801803c:	4618      	mov	r0, r3
 801803e:	3714      	adds	r7, #20
 8018040:	46bd      	mov	sp, r7
 8018042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018046:	4770      	bx	lr

08018048 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018048:	b580      	push	{r7, lr}
 801804a:	b084      	sub	sp, #16
 801804c:	af00      	add	r7, sp, #0
 801804e:	6078      	str	r0, [r7, #4]
 8018050:	460b      	mov	r3, r1
 8018052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018054:	2300      	movs	r3, #0
 8018056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018058:	2300      	movs	r3, #0
 801805a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018062:	78fa      	ldrb	r2, [r7, #3]
 8018064:	4611      	mov	r1, r2
 8018066:	4618      	mov	r0, r3
 8018068:	f7f4 f834 	bl	800c0d4 <HAL_PCD_SetAddress>
 801806c:	4603      	mov	r3, r0
 801806e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018070:	7bfb      	ldrb	r3, [r7, #15]
 8018072:	4618      	mov	r0, r3
 8018074:	f000 f874 	bl	8018160 <USBD_Get_USB_Status>
 8018078:	4603      	mov	r3, r0
 801807a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801807c:	7bbb      	ldrb	r3, [r7, #14]
}
 801807e:	4618      	mov	r0, r3
 8018080:	3710      	adds	r7, #16
 8018082:	46bd      	mov	sp, r7
 8018084:	bd80      	pop	{r7, pc}

08018086 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018086:	b580      	push	{r7, lr}
 8018088:	b086      	sub	sp, #24
 801808a:	af00      	add	r7, sp, #0
 801808c:	60f8      	str	r0, [r7, #12]
 801808e:	607a      	str	r2, [r7, #4]
 8018090:	603b      	str	r3, [r7, #0]
 8018092:	460b      	mov	r3, r1
 8018094:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018096:	2300      	movs	r3, #0
 8018098:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801809a:	2300      	movs	r3, #0
 801809c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80180a4:	7af9      	ldrb	r1, [r7, #11]
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	687a      	ldr	r2, [r7, #4]
 80180aa:	f7f4 f93c 	bl	800c326 <HAL_PCD_EP_Transmit>
 80180ae:	4603      	mov	r3, r0
 80180b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80180b2:	7dfb      	ldrb	r3, [r7, #23]
 80180b4:	4618      	mov	r0, r3
 80180b6:	f000 f853 	bl	8018160 <USBD_Get_USB_Status>
 80180ba:	4603      	mov	r3, r0
 80180bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80180be:	7dbb      	ldrb	r3, [r7, #22]
}
 80180c0:	4618      	mov	r0, r3
 80180c2:	3718      	adds	r7, #24
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bd80      	pop	{r7, pc}

080180c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b086      	sub	sp, #24
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	60f8      	str	r0, [r7, #12]
 80180d0:	607a      	str	r2, [r7, #4]
 80180d2:	603b      	str	r3, [r7, #0]
 80180d4:	460b      	mov	r3, r1
 80180d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180d8:	2300      	movs	r3, #0
 80180da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180dc:	2300      	movs	r3, #0
 80180de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80180e6:	7af9      	ldrb	r1, [r7, #11]
 80180e8:	683b      	ldr	r3, [r7, #0]
 80180ea:	687a      	ldr	r2, [r7, #4]
 80180ec:	f7f4 f8c8 	bl	800c280 <HAL_PCD_EP_Receive>
 80180f0:	4603      	mov	r3, r0
 80180f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80180f4:	7dfb      	ldrb	r3, [r7, #23]
 80180f6:	4618      	mov	r0, r3
 80180f8:	f000 f832 	bl	8018160 <USBD_Get_USB_Status>
 80180fc:	4603      	mov	r3, r0
 80180fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018100:	7dbb      	ldrb	r3, [r7, #22]
}
 8018102:	4618      	mov	r0, r3
 8018104:	3718      	adds	r7, #24
 8018106:	46bd      	mov	sp, r7
 8018108:	bd80      	pop	{r7, pc}

0801810a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801810a:	b580      	push	{r7, lr}
 801810c:	b082      	sub	sp, #8
 801810e:	af00      	add	r7, sp, #0
 8018110:	6078      	str	r0, [r7, #4]
 8018112:	460b      	mov	r3, r1
 8018114:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801811c:	78fa      	ldrb	r2, [r7, #3]
 801811e:	4611      	mov	r1, r2
 8018120:	4618      	mov	r0, r3
 8018122:	f7f4 f8e8 	bl	800c2f6 <HAL_PCD_EP_GetRxCount>
 8018126:	4603      	mov	r3, r0
}
 8018128:	4618      	mov	r0, r3
 801812a:	3708      	adds	r7, #8
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}

08018130 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018130:	b480      	push	{r7}
 8018132:	b083      	sub	sp, #12
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018138:	4b03      	ldr	r3, [pc, #12]	@ (8018148 <USBD_static_malloc+0x18>)
}
 801813a:	4618      	mov	r0, r3
 801813c:	370c      	adds	r7, #12
 801813e:	46bd      	mov	sp, r7
 8018140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018144:	4770      	bx	lr
 8018146:	bf00      	nop
 8018148:	24005ff8 	.word	0x24005ff8

0801814c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801814c:	b480      	push	{r7}
 801814e:	b083      	sub	sp, #12
 8018150:	af00      	add	r7, sp, #0
 8018152:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8018154:	bf00      	nop
 8018156:	370c      	adds	r7, #12
 8018158:	46bd      	mov	sp, r7
 801815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815e:	4770      	bx	lr

08018160 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018160:	b480      	push	{r7}
 8018162:	b085      	sub	sp, #20
 8018164:	af00      	add	r7, sp, #0
 8018166:	4603      	mov	r3, r0
 8018168:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801816a:	2300      	movs	r3, #0
 801816c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801816e:	79fb      	ldrb	r3, [r7, #7]
 8018170:	2b03      	cmp	r3, #3
 8018172:	d817      	bhi.n	80181a4 <USBD_Get_USB_Status+0x44>
 8018174:	a201      	add	r2, pc, #4	@ (adr r2, 801817c <USBD_Get_USB_Status+0x1c>)
 8018176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801817a:	bf00      	nop
 801817c:	0801818d 	.word	0x0801818d
 8018180:	08018193 	.word	0x08018193
 8018184:	08018199 	.word	0x08018199
 8018188:	0801819f 	.word	0x0801819f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801818c:	2300      	movs	r3, #0
 801818e:	73fb      	strb	r3, [r7, #15]
    break;
 8018190:	e00b      	b.n	80181aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018192:	2303      	movs	r3, #3
 8018194:	73fb      	strb	r3, [r7, #15]
    break;
 8018196:	e008      	b.n	80181aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018198:	2301      	movs	r3, #1
 801819a:	73fb      	strb	r3, [r7, #15]
    break;
 801819c:	e005      	b.n	80181aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801819e:	2303      	movs	r3, #3
 80181a0:	73fb      	strb	r3, [r7, #15]
    break;
 80181a2:	e002      	b.n	80181aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80181a4:	2303      	movs	r3, #3
 80181a6:	73fb      	strb	r3, [r7, #15]
    break;
 80181a8:	bf00      	nop
  }
  return usb_status;
 80181aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80181ac:	4618      	mov	r0, r3
 80181ae:	3714      	adds	r7, #20
 80181b0:	46bd      	mov	sp, r7
 80181b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b6:	4770      	bx	lr

080181b8 <atof>:
 80181b8:	2100      	movs	r1, #0
 80181ba:	f000 bdb7 	b.w	8018d2c <strtod>

080181be <atoi>:
 80181be:	220a      	movs	r2, #10
 80181c0:	2100      	movs	r1, #0
 80181c2:	f000 be39 	b.w	8018e38 <strtol>

080181c6 <sulp>:
 80181c6:	b570      	push	{r4, r5, r6, lr}
 80181c8:	4604      	mov	r4, r0
 80181ca:	460d      	mov	r5, r1
 80181cc:	4616      	mov	r6, r2
 80181ce:	ec45 4b10 	vmov	d0, r4, r5
 80181d2:	f003 f9eb 	bl	801b5ac <__ulp>
 80181d6:	b17e      	cbz	r6, 80181f8 <sulp+0x32>
 80181d8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80181dc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	dd09      	ble.n	80181f8 <sulp+0x32>
 80181e4:	051b      	lsls	r3, r3, #20
 80181e6:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80181ea:	2000      	movs	r0, #0
 80181ec:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80181f0:	ec41 0b17 	vmov	d7, r0, r1
 80181f4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80181f8:	bd70      	pop	{r4, r5, r6, pc}
 80181fa:	0000      	movs	r0, r0
 80181fc:	0000      	movs	r0, r0
	...

08018200 <_strtod_l>:
 8018200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018204:	ed2d 8b0a 	vpush	{d8-d12}
 8018208:	b097      	sub	sp, #92	@ 0x5c
 801820a:	4688      	mov	r8, r1
 801820c:	920e      	str	r2, [sp, #56]	@ 0x38
 801820e:	2200      	movs	r2, #0
 8018210:	9212      	str	r2, [sp, #72]	@ 0x48
 8018212:	9005      	str	r0, [sp, #20]
 8018214:	f04f 0a00 	mov.w	sl, #0
 8018218:	f04f 0b00 	mov.w	fp, #0
 801821c:	460a      	mov	r2, r1
 801821e:	9211      	str	r2, [sp, #68]	@ 0x44
 8018220:	7811      	ldrb	r1, [r2, #0]
 8018222:	292b      	cmp	r1, #43	@ 0x2b
 8018224:	d04c      	beq.n	80182c0 <_strtod_l+0xc0>
 8018226:	d839      	bhi.n	801829c <_strtod_l+0x9c>
 8018228:	290d      	cmp	r1, #13
 801822a:	d833      	bhi.n	8018294 <_strtod_l+0x94>
 801822c:	2908      	cmp	r1, #8
 801822e:	d833      	bhi.n	8018298 <_strtod_l+0x98>
 8018230:	2900      	cmp	r1, #0
 8018232:	d03c      	beq.n	80182ae <_strtod_l+0xae>
 8018234:	2200      	movs	r2, #0
 8018236:	9208      	str	r2, [sp, #32]
 8018238:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801823a:	782a      	ldrb	r2, [r5, #0]
 801823c:	2a30      	cmp	r2, #48	@ 0x30
 801823e:	f040 80b5 	bne.w	80183ac <_strtod_l+0x1ac>
 8018242:	786a      	ldrb	r2, [r5, #1]
 8018244:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018248:	2a58      	cmp	r2, #88	@ 0x58
 801824a:	d170      	bne.n	801832e <_strtod_l+0x12e>
 801824c:	9302      	str	r3, [sp, #8]
 801824e:	9b08      	ldr	r3, [sp, #32]
 8018250:	9301      	str	r3, [sp, #4]
 8018252:	ab12      	add	r3, sp, #72	@ 0x48
 8018254:	9300      	str	r3, [sp, #0]
 8018256:	4a8b      	ldr	r2, [pc, #556]	@ (8018484 <_strtod_l+0x284>)
 8018258:	9805      	ldr	r0, [sp, #20]
 801825a:	ab13      	add	r3, sp, #76	@ 0x4c
 801825c:	a911      	add	r1, sp, #68	@ 0x44
 801825e:	f002 fa97 	bl	801a790 <__gethex>
 8018262:	f010 060f 	ands.w	r6, r0, #15
 8018266:	4604      	mov	r4, r0
 8018268:	d005      	beq.n	8018276 <_strtod_l+0x76>
 801826a:	2e06      	cmp	r6, #6
 801826c:	d12a      	bne.n	80182c4 <_strtod_l+0xc4>
 801826e:	3501      	adds	r5, #1
 8018270:	2300      	movs	r3, #0
 8018272:	9511      	str	r5, [sp, #68]	@ 0x44
 8018274:	9308      	str	r3, [sp, #32]
 8018276:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018278:	2b00      	cmp	r3, #0
 801827a:	f040 852f 	bne.w	8018cdc <_strtod_l+0xadc>
 801827e:	9b08      	ldr	r3, [sp, #32]
 8018280:	ec4b ab10 	vmov	d0, sl, fp
 8018284:	b1cb      	cbz	r3, 80182ba <_strtod_l+0xba>
 8018286:	eeb1 0b40 	vneg.f64	d0, d0
 801828a:	b017      	add	sp, #92	@ 0x5c
 801828c:	ecbd 8b0a 	vpop	{d8-d12}
 8018290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018294:	2920      	cmp	r1, #32
 8018296:	d1cd      	bne.n	8018234 <_strtod_l+0x34>
 8018298:	3201      	adds	r2, #1
 801829a:	e7c0      	b.n	801821e <_strtod_l+0x1e>
 801829c:	292d      	cmp	r1, #45	@ 0x2d
 801829e:	d1c9      	bne.n	8018234 <_strtod_l+0x34>
 80182a0:	2101      	movs	r1, #1
 80182a2:	9108      	str	r1, [sp, #32]
 80182a4:	1c51      	adds	r1, r2, #1
 80182a6:	9111      	str	r1, [sp, #68]	@ 0x44
 80182a8:	7852      	ldrb	r2, [r2, #1]
 80182aa:	2a00      	cmp	r2, #0
 80182ac:	d1c4      	bne.n	8018238 <_strtod_l+0x38>
 80182ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182b0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	f040 850f 	bne.w	8018cd8 <_strtod_l+0xad8>
 80182ba:	ec4b ab10 	vmov	d0, sl, fp
 80182be:	e7e4      	b.n	801828a <_strtod_l+0x8a>
 80182c0:	2100      	movs	r1, #0
 80182c2:	e7ee      	b.n	80182a2 <_strtod_l+0xa2>
 80182c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80182c6:	b13a      	cbz	r2, 80182d8 <_strtod_l+0xd8>
 80182c8:	2135      	movs	r1, #53	@ 0x35
 80182ca:	a814      	add	r0, sp, #80	@ 0x50
 80182cc:	f003 fa65 	bl	801b79a <__copybits>
 80182d0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80182d2:	9805      	ldr	r0, [sp, #20]
 80182d4:	f002 fe36 	bl	801af44 <_Bfree>
 80182d8:	1e73      	subs	r3, r6, #1
 80182da:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80182dc:	2b04      	cmp	r3, #4
 80182de:	d806      	bhi.n	80182ee <_strtod_l+0xee>
 80182e0:	e8df f003 	tbb	[pc, r3]
 80182e4:	201d0314 	.word	0x201d0314
 80182e8:	14          	.byte	0x14
 80182e9:	00          	.byte	0x00
 80182ea:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80182ee:	05e3      	lsls	r3, r4, #23
 80182f0:	bf48      	it	mi
 80182f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80182f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80182fa:	0d1b      	lsrs	r3, r3, #20
 80182fc:	051b      	lsls	r3, r3, #20
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d1b9      	bne.n	8018276 <_strtod_l+0x76>
 8018302:	f001 fb6f 	bl	80199e4 <__errno>
 8018306:	2322      	movs	r3, #34	@ 0x22
 8018308:	6003      	str	r3, [r0, #0]
 801830a:	e7b4      	b.n	8018276 <_strtod_l+0x76>
 801830c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8018310:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8018314:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8018318:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801831c:	e7e7      	b.n	80182ee <_strtod_l+0xee>
 801831e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801848c <_strtod_l+0x28c>
 8018322:	e7e4      	b.n	80182ee <_strtod_l+0xee>
 8018324:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8018328:	f04f 3aff 	mov.w	sl, #4294967295
 801832c:	e7df      	b.n	80182ee <_strtod_l+0xee>
 801832e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018330:	1c5a      	adds	r2, r3, #1
 8018332:	9211      	str	r2, [sp, #68]	@ 0x44
 8018334:	785b      	ldrb	r3, [r3, #1]
 8018336:	2b30      	cmp	r3, #48	@ 0x30
 8018338:	d0f9      	beq.n	801832e <_strtod_l+0x12e>
 801833a:	2b00      	cmp	r3, #0
 801833c:	d09b      	beq.n	8018276 <_strtod_l+0x76>
 801833e:	2301      	movs	r3, #1
 8018340:	2600      	movs	r6, #0
 8018342:	9307      	str	r3, [sp, #28]
 8018344:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018346:	930a      	str	r3, [sp, #40]	@ 0x28
 8018348:	46b1      	mov	r9, r6
 801834a:	4635      	mov	r5, r6
 801834c:	220a      	movs	r2, #10
 801834e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018350:	7804      	ldrb	r4, [r0, #0]
 8018352:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8018356:	b2d9      	uxtb	r1, r3
 8018358:	2909      	cmp	r1, #9
 801835a:	d929      	bls.n	80183b0 <_strtod_l+0x1b0>
 801835c:	494a      	ldr	r1, [pc, #296]	@ (8018488 <_strtod_l+0x288>)
 801835e:	2201      	movs	r2, #1
 8018360:	f001 fae4 	bl	801992c <strncmp>
 8018364:	b378      	cbz	r0, 80183c6 <_strtod_l+0x1c6>
 8018366:	2000      	movs	r0, #0
 8018368:	4622      	mov	r2, r4
 801836a:	462b      	mov	r3, r5
 801836c:	4607      	mov	r7, r0
 801836e:	9006      	str	r0, [sp, #24]
 8018370:	2a65      	cmp	r2, #101	@ 0x65
 8018372:	d001      	beq.n	8018378 <_strtod_l+0x178>
 8018374:	2a45      	cmp	r2, #69	@ 0x45
 8018376:	d117      	bne.n	80183a8 <_strtod_l+0x1a8>
 8018378:	b91b      	cbnz	r3, 8018382 <_strtod_l+0x182>
 801837a:	9b07      	ldr	r3, [sp, #28]
 801837c:	4303      	orrs	r3, r0
 801837e:	d096      	beq.n	80182ae <_strtod_l+0xae>
 8018380:	2300      	movs	r3, #0
 8018382:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8018386:	f108 0201 	add.w	r2, r8, #1
 801838a:	9211      	str	r2, [sp, #68]	@ 0x44
 801838c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018390:	2a2b      	cmp	r2, #43	@ 0x2b
 8018392:	d06b      	beq.n	801846c <_strtod_l+0x26c>
 8018394:	2a2d      	cmp	r2, #45	@ 0x2d
 8018396:	d071      	beq.n	801847c <_strtod_l+0x27c>
 8018398:	f04f 0e00 	mov.w	lr, #0
 801839c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80183a0:	2c09      	cmp	r4, #9
 80183a2:	d979      	bls.n	8018498 <_strtod_l+0x298>
 80183a4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80183a8:	2400      	movs	r4, #0
 80183aa:	e094      	b.n	80184d6 <_strtod_l+0x2d6>
 80183ac:	2300      	movs	r3, #0
 80183ae:	e7c7      	b.n	8018340 <_strtod_l+0x140>
 80183b0:	2d08      	cmp	r5, #8
 80183b2:	f100 0001 	add.w	r0, r0, #1
 80183b6:	bfd4      	ite	le
 80183b8:	fb02 3909 	mlale	r9, r2, r9, r3
 80183bc:	fb02 3606 	mlagt	r6, r2, r6, r3
 80183c0:	3501      	adds	r5, #1
 80183c2:	9011      	str	r0, [sp, #68]	@ 0x44
 80183c4:	e7c3      	b.n	801834e <_strtod_l+0x14e>
 80183c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80183c8:	1c5a      	adds	r2, r3, #1
 80183ca:	9211      	str	r2, [sp, #68]	@ 0x44
 80183cc:	785a      	ldrb	r2, [r3, #1]
 80183ce:	b375      	cbz	r5, 801842e <_strtod_l+0x22e>
 80183d0:	4607      	mov	r7, r0
 80183d2:	462b      	mov	r3, r5
 80183d4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80183d8:	2909      	cmp	r1, #9
 80183da:	d913      	bls.n	8018404 <_strtod_l+0x204>
 80183dc:	2101      	movs	r1, #1
 80183de:	9106      	str	r1, [sp, #24]
 80183e0:	e7c6      	b.n	8018370 <_strtod_l+0x170>
 80183e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80183e4:	1c5a      	adds	r2, r3, #1
 80183e6:	9211      	str	r2, [sp, #68]	@ 0x44
 80183e8:	785a      	ldrb	r2, [r3, #1]
 80183ea:	3001      	adds	r0, #1
 80183ec:	2a30      	cmp	r2, #48	@ 0x30
 80183ee:	d0f8      	beq.n	80183e2 <_strtod_l+0x1e2>
 80183f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80183f4:	2b08      	cmp	r3, #8
 80183f6:	f200 8476 	bhi.w	8018ce6 <_strtod_l+0xae6>
 80183fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80183fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80183fe:	4607      	mov	r7, r0
 8018400:	2000      	movs	r0, #0
 8018402:	4603      	mov	r3, r0
 8018404:	3a30      	subs	r2, #48	@ 0x30
 8018406:	f100 0101 	add.w	r1, r0, #1
 801840a:	d023      	beq.n	8018454 <_strtod_l+0x254>
 801840c:	440f      	add	r7, r1
 801840e:	eb00 0c03 	add.w	ip, r0, r3
 8018412:	4619      	mov	r1, r3
 8018414:	240a      	movs	r4, #10
 8018416:	4561      	cmp	r1, ip
 8018418:	d10b      	bne.n	8018432 <_strtod_l+0x232>
 801841a:	1c5c      	adds	r4, r3, #1
 801841c:	4403      	add	r3, r0
 801841e:	2b08      	cmp	r3, #8
 8018420:	4404      	add	r4, r0
 8018422:	dc11      	bgt.n	8018448 <_strtod_l+0x248>
 8018424:	230a      	movs	r3, #10
 8018426:	fb03 2909 	mla	r9, r3, r9, r2
 801842a:	2100      	movs	r1, #0
 801842c:	e013      	b.n	8018456 <_strtod_l+0x256>
 801842e:	4628      	mov	r0, r5
 8018430:	e7dc      	b.n	80183ec <_strtod_l+0x1ec>
 8018432:	2908      	cmp	r1, #8
 8018434:	f101 0101 	add.w	r1, r1, #1
 8018438:	dc02      	bgt.n	8018440 <_strtod_l+0x240>
 801843a:	fb04 f909 	mul.w	r9, r4, r9
 801843e:	e7ea      	b.n	8018416 <_strtod_l+0x216>
 8018440:	2910      	cmp	r1, #16
 8018442:	bfd8      	it	le
 8018444:	4366      	mulle	r6, r4
 8018446:	e7e6      	b.n	8018416 <_strtod_l+0x216>
 8018448:	2b0f      	cmp	r3, #15
 801844a:	dcee      	bgt.n	801842a <_strtod_l+0x22a>
 801844c:	230a      	movs	r3, #10
 801844e:	fb03 2606 	mla	r6, r3, r6, r2
 8018452:	e7ea      	b.n	801842a <_strtod_l+0x22a>
 8018454:	461c      	mov	r4, r3
 8018456:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018458:	1c5a      	adds	r2, r3, #1
 801845a:	9211      	str	r2, [sp, #68]	@ 0x44
 801845c:	785a      	ldrb	r2, [r3, #1]
 801845e:	4608      	mov	r0, r1
 8018460:	4623      	mov	r3, r4
 8018462:	e7b7      	b.n	80183d4 <_strtod_l+0x1d4>
 8018464:	2301      	movs	r3, #1
 8018466:	2700      	movs	r7, #0
 8018468:	9306      	str	r3, [sp, #24]
 801846a:	e786      	b.n	801837a <_strtod_l+0x17a>
 801846c:	f04f 0e00 	mov.w	lr, #0
 8018470:	f108 0202 	add.w	r2, r8, #2
 8018474:	9211      	str	r2, [sp, #68]	@ 0x44
 8018476:	f898 2002 	ldrb.w	r2, [r8, #2]
 801847a:	e78f      	b.n	801839c <_strtod_l+0x19c>
 801847c:	f04f 0e01 	mov.w	lr, #1
 8018480:	e7f6      	b.n	8018470 <_strtod_l+0x270>
 8018482:	bf00      	nop
 8018484:	0801d7b8 	.word	0x0801d7b8
 8018488:	0801d7a0 	.word	0x0801d7a0
 801848c:	7ff00000 	.word	0x7ff00000
 8018490:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018492:	1c54      	adds	r4, r2, #1
 8018494:	9411      	str	r4, [sp, #68]	@ 0x44
 8018496:	7852      	ldrb	r2, [r2, #1]
 8018498:	2a30      	cmp	r2, #48	@ 0x30
 801849a:	d0f9      	beq.n	8018490 <_strtod_l+0x290>
 801849c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80184a0:	2c08      	cmp	r4, #8
 80184a2:	d881      	bhi.n	80183a8 <_strtod_l+0x1a8>
 80184a4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80184a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80184aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80184ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80184ae:	1c51      	adds	r1, r2, #1
 80184b0:	9111      	str	r1, [sp, #68]	@ 0x44
 80184b2:	7852      	ldrb	r2, [r2, #1]
 80184b4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80184b8:	2c09      	cmp	r4, #9
 80184ba:	d938      	bls.n	801852e <_strtod_l+0x32e>
 80184bc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80184be:	1b0c      	subs	r4, r1, r4
 80184c0:	2c08      	cmp	r4, #8
 80184c2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80184c6:	dc02      	bgt.n	80184ce <_strtod_l+0x2ce>
 80184c8:	4564      	cmp	r4, ip
 80184ca:	bfa8      	it	ge
 80184cc:	4664      	movge	r4, ip
 80184ce:	f1be 0f00 	cmp.w	lr, #0
 80184d2:	d000      	beq.n	80184d6 <_strtod_l+0x2d6>
 80184d4:	4264      	negs	r4, r4
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d14e      	bne.n	8018578 <_strtod_l+0x378>
 80184da:	9b07      	ldr	r3, [sp, #28]
 80184dc:	4318      	orrs	r0, r3
 80184de:	f47f aeca 	bne.w	8018276 <_strtod_l+0x76>
 80184e2:	9b06      	ldr	r3, [sp, #24]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	f47f aee2 	bne.w	80182ae <_strtod_l+0xae>
 80184ea:	2a69      	cmp	r2, #105	@ 0x69
 80184ec:	d027      	beq.n	801853e <_strtod_l+0x33e>
 80184ee:	dc24      	bgt.n	801853a <_strtod_l+0x33a>
 80184f0:	2a49      	cmp	r2, #73	@ 0x49
 80184f2:	d024      	beq.n	801853e <_strtod_l+0x33e>
 80184f4:	2a4e      	cmp	r2, #78	@ 0x4e
 80184f6:	f47f aeda 	bne.w	80182ae <_strtod_l+0xae>
 80184fa:	4997      	ldr	r1, [pc, #604]	@ (8018758 <_strtod_l+0x558>)
 80184fc:	a811      	add	r0, sp, #68	@ 0x44
 80184fe:	f002 fb69 	bl	801abd4 <__match>
 8018502:	2800      	cmp	r0, #0
 8018504:	f43f aed3 	beq.w	80182ae <_strtod_l+0xae>
 8018508:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801850a:	781b      	ldrb	r3, [r3, #0]
 801850c:	2b28      	cmp	r3, #40	@ 0x28
 801850e:	d12d      	bne.n	801856c <_strtod_l+0x36c>
 8018510:	4992      	ldr	r1, [pc, #584]	@ (801875c <_strtod_l+0x55c>)
 8018512:	aa14      	add	r2, sp, #80	@ 0x50
 8018514:	a811      	add	r0, sp, #68	@ 0x44
 8018516:	f002 fb71 	bl	801abfc <__hexnan>
 801851a:	2805      	cmp	r0, #5
 801851c:	d126      	bne.n	801856c <_strtod_l+0x36c>
 801851e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018520:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8018524:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8018528:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801852c:	e6a3      	b.n	8018276 <_strtod_l+0x76>
 801852e:	240a      	movs	r4, #10
 8018530:	fb04 2c0c 	mla	ip, r4, ip, r2
 8018534:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8018538:	e7b8      	b.n	80184ac <_strtod_l+0x2ac>
 801853a:	2a6e      	cmp	r2, #110	@ 0x6e
 801853c:	e7db      	b.n	80184f6 <_strtod_l+0x2f6>
 801853e:	4988      	ldr	r1, [pc, #544]	@ (8018760 <_strtod_l+0x560>)
 8018540:	a811      	add	r0, sp, #68	@ 0x44
 8018542:	f002 fb47 	bl	801abd4 <__match>
 8018546:	2800      	cmp	r0, #0
 8018548:	f43f aeb1 	beq.w	80182ae <_strtod_l+0xae>
 801854c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801854e:	4985      	ldr	r1, [pc, #532]	@ (8018764 <_strtod_l+0x564>)
 8018550:	3b01      	subs	r3, #1
 8018552:	a811      	add	r0, sp, #68	@ 0x44
 8018554:	9311      	str	r3, [sp, #68]	@ 0x44
 8018556:	f002 fb3d 	bl	801abd4 <__match>
 801855a:	b910      	cbnz	r0, 8018562 <_strtod_l+0x362>
 801855c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801855e:	3301      	adds	r3, #1
 8018560:	9311      	str	r3, [sp, #68]	@ 0x44
 8018562:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8018778 <_strtod_l+0x578>
 8018566:	f04f 0a00 	mov.w	sl, #0
 801856a:	e684      	b.n	8018276 <_strtod_l+0x76>
 801856c:	487e      	ldr	r0, [pc, #504]	@ (8018768 <_strtod_l+0x568>)
 801856e:	f001 fa77 	bl	8019a60 <nan>
 8018572:	ec5b ab10 	vmov	sl, fp, d0
 8018576:	e67e      	b.n	8018276 <_strtod_l+0x76>
 8018578:	ee07 9a90 	vmov	s15, r9
 801857c:	1be2      	subs	r2, r4, r7
 801857e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018582:	2d00      	cmp	r5, #0
 8018584:	bf08      	it	eq
 8018586:	461d      	moveq	r5, r3
 8018588:	2b10      	cmp	r3, #16
 801858a:	9209      	str	r2, [sp, #36]	@ 0x24
 801858c:	461a      	mov	r2, r3
 801858e:	bfa8      	it	ge
 8018590:	2210      	movge	r2, #16
 8018592:	2b09      	cmp	r3, #9
 8018594:	ec5b ab17 	vmov	sl, fp, d7
 8018598:	dc15      	bgt.n	80185c6 <_strtod_l+0x3c6>
 801859a:	1be1      	subs	r1, r4, r7
 801859c:	2900      	cmp	r1, #0
 801859e:	f43f ae6a 	beq.w	8018276 <_strtod_l+0x76>
 80185a2:	eba4 0107 	sub.w	r1, r4, r7
 80185a6:	dd72      	ble.n	801868e <_strtod_l+0x48e>
 80185a8:	2916      	cmp	r1, #22
 80185aa:	dc59      	bgt.n	8018660 <_strtod_l+0x460>
 80185ac:	4b6f      	ldr	r3, [pc, #444]	@ (801876c <_strtod_l+0x56c>)
 80185ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80185b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80185b4:	ed93 7b00 	vldr	d7, [r3]
 80185b8:	ec4b ab16 	vmov	d6, sl, fp
 80185bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80185c0:	ec5b ab17 	vmov	sl, fp, d7
 80185c4:	e657      	b.n	8018276 <_strtod_l+0x76>
 80185c6:	4969      	ldr	r1, [pc, #420]	@ (801876c <_strtod_l+0x56c>)
 80185c8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80185cc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80185d0:	ee06 6a90 	vmov	s13, r6
 80185d4:	2b0f      	cmp	r3, #15
 80185d6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80185da:	eea7 6b05 	vfma.f64	d6, d7, d5
 80185de:	ec5b ab16 	vmov	sl, fp, d6
 80185e2:	ddda      	ble.n	801859a <_strtod_l+0x39a>
 80185e4:	1a9a      	subs	r2, r3, r2
 80185e6:	1be1      	subs	r1, r4, r7
 80185e8:	440a      	add	r2, r1
 80185ea:	2a00      	cmp	r2, #0
 80185ec:	f340 8094 	ble.w	8018718 <_strtod_l+0x518>
 80185f0:	f012 000f 	ands.w	r0, r2, #15
 80185f4:	d00a      	beq.n	801860c <_strtod_l+0x40c>
 80185f6:	495d      	ldr	r1, [pc, #372]	@ (801876c <_strtod_l+0x56c>)
 80185f8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80185fc:	ed91 7b00 	vldr	d7, [r1]
 8018600:	ec4b ab16 	vmov	d6, sl, fp
 8018604:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018608:	ec5b ab17 	vmov	sl, fp, d7
 801860c:	f032 020f 	bics.w	r2, r2, #15
 8018610:	d073      	beq.n	80186fa <_strtod_l+0x4fa>
 8018612:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8018616:	dd47      	ble.n	80186a8 <_strtod_l+0x4a8>
 8018618:	2400      	movs	r4, #0
 801861a:	4625      	mov	r5, r4
 801861c:	9407      	str	r4, [sp, #28]
 801861e:	4626      	mov	r6, r4
 8018620:	9a05      	ldr	r2, [sp, #20]
 8018622:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8018778 <_strtod_l+0x578>
 8018626:	2322      	movs	r3, #34	@ 0x22
 8018628:	6013      	str	r3, [r2, #0]
 801862a:	f04f 0a00 	mov.w	sl, #0
 801862e:	9b07      	ldr	r3, [sp, #28]
 8018630:	2b00      	cmp	r3, #0
 8018632:	f43f ae20 	beq.w	8018276 <_strtod_l+0x76>
 8018636:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018638:	9805      	ldr	r0, [sp, #20]
 801863a:	f002 fc83 	bl	801af44 <_Bfree>
 801863e:	9805      	ldr	r0, [sp, #20]
 8018640:	4631      	mov	r1, r6
 8018642:	f002 fc7f 	bl	801af44 <_Bfree>
 8018646:	9805      	ldr	r0, [sp, #20]
 8018648:	4629      	mov	r1, r5
 801864a:	f002 fc7b 	bl	801af44 <_Bfree>
 801864e:	9907      	ldr	r1, [sp, #28]
 8018650:	9805      	ldr	r0, [sp, #20]
 8018652:	f002 fc77 	bl	801af44 <_Bfree>
 8018656:	9805      	ldr	r0, [sp, #20]
 8018658:	4621      	mov	r1, r4
 801865a:	f002 fc73 	bl	801af44 <_Bfree>
 801865e:	e60a      	b.n	8018276 <_strtod_l+0x76>
 8018660:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8018664:	1be0      	subs	r0, r4, r7
 8018666:	4281      	cmp	r1, r0
 8018668:	dbbc      	blt.n	80185e4 <_strtod_l+0x3e4>
 801866a:	4a40      	ldr	r2, [pc, #256]	@ (801876c <_strtod_l+0x56c>)
 801866c:	f1c3 030f 	rsb	r3, r3, #15
 8018670:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8018674:	ed91 7b00 	vldr	d7, [r1]
 8018678:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801867a:	ec4b ab16 	vmov	d6, sl, fp
 801867e:	1acb      	subs	r3, r1, r3
 8018680:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018684:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018688:	ed92 6b00 	vldr	d6, [r2]
 801868c:	e796      	b.n	80185bc <_strtod_l+0x3bc>
 801868e:	3116      	adds	r1, #22
 8018690:	dba8      	blt.n	80185e4 <_strtod_l+0x3e4>
 8018692:	4b36      	ldr	r3, [pc, #216]	@ (801876c <_strtod_l+0x56c>)
 8018694:	1b3c      	subs	r4, r7, r4
 8018696:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801869a:	ed94 7b00 	vldr	d7, [r4]
 801869e:	ec4b ab16 	vmov	d6, sl, fp
 80186a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80186a6:	e78b      	b.n	80185c0 <_strtod_l+0x3c0>
 80186a8:	2000      	movs	r0, #0
 80186aa:	ec4b ab17 	vmov	d7, sl, fp
 80186ae:	4e30      	ldr	r6, [pc, #192]	@ (8018770 <_strtod_l+0x570>)
 80186b0:	1112      	asrs	r2, r2, #4
 80186b2:	4601      	mov	r1, r0
 80186b4:	2a01      	cmp	r2, #1
 80186b6:	dc23      	bgt.n	8018700 <_strtod_l+0x500>
 80186b8:	b108      	cbz	r0, 80186be <_strtod_l+0x4be>
 80186ba:	ec5b ab17 	vmov	sl, fp, d7
 80186be:	4a2c      	ldr	r2, [pc, #176]	@ (8018770 <_strtod_l+0x570>)
 80186c0:	482c      	ldr	r0, [pc, #176]	@ (8018774 <_strtod_l+0x574>)
 80186c2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80186c6:	ed92 7b00 	vldr	d7, [r2]
 80186ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80186ce:	ec4b ab16 	vmov	d6, sl, fp
 80186d2:	4a29      	ldr	r2, [pc, #164]	@ (8018778 <_strtod_l+0x578>)
 80186d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80186d8:	ee17 1a90 	vmov	r1, s15
 80186dc:	400a      	ands	r2, r1
 80186de:	4282      	cmp	r2, r0
 80186e0:	ec5b ab17 	vmov	sl, fp, d7
 80186e4:	d898      	bhi.n	8018618 <_strtod_l+0x418>
 80186e6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80186ea:	4282      	cmp	r2, r0
 80186ec:	bf86      	itte	hi
 80186ee:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801877c <_strtod_l+0x57c>
 80186f2:	f04f 3aff 	movhi.w	sl, #4294967295
 80186f6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80186fa:	2200      	movs	r2, #0
 80186fc:	9206      	str	r2, [sp, #24]
 80186fe:	e076      	b.n	80187ee <_strtod_l+0x5ee>
 8018700:	f012 0f01 	tst.w	r2, #1
 8018704:	d004      	beq.n	8018710 <_strtod_l+0x510>
 8018706:	ed96 6b00 	vldr	d6, [r6]
 801870a:	2001      	movs	r0, #1
 801870c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018710:	3101      	adds	r1, #1
 8018712:	1052      	asrs	r2, r2, #1
 8018714:	3608      	adds	r6, #8
 8018716:	e7cd      	b.n	80186b4 <_strtod_l+0x4b4>
 8018718:	d0ef      	beq.n	80186fa <_strtod_l+0x4fa>
 801871a:	4252      	negs	r2, r2
 801871c:	f012 000f 	ands.w	r0, r2, #15
 8018720:	d00a      	beq.n	8018738 <_strtod_l+0x538>
 8018722:	4912      	ldr	r1, [pc, #72]	@ (801876c <_strtod_l+0x56c>)
 8018724:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018728:	ed91 7b00 	vldr	d7, [r1]
 801872c:	ec4b ab16 	vmov	d6, sl, fp
 8018730:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018734:	ec5b ab17 	vmov	sl, fp, d7
 8018738:	1112      	asrs	r2, r2, #4
 801873a:	d0de      	beq.n	80186fa <_strtod_l+0x4fa>
 801873c:	2a1f      	cmp	r2, #31
 801873e:	dd1f      	ble.n	8018780 <_strtod_l+0x580>
 8018740:	2400      	movs	r4, #0
 8018742:	4625      	mov	r5, r4
 8018744:	9407      	str	r4, [sp, #28]
 8018746:	4626      	mov	r6, r4
 8018748:	9a05      	ldr	r2, [sp, #20]
 801874a:	2322      	movs	r3, #34	@ 0x22
 801874c:	f04f 0a00 	mov.w	sl, #0
 8018750:	f04f 0b00 	mov.w	fp, #0
 8018754:	6013      	str	r3, [r2, #0]
 8018756:	e76a      	b.n	801862e <_strtod_l+0x42e>
 8018758:	0801d906 	.word	0x0801d906
 801875c:	0801d7a4 	.word	0x0801d7a4
 8018760:	0801d8fe 	.word	0x0801d8fe
 8018764:	0801d938 	.word	0x0801d938
 8018768:	0801dbc4 	.word	0x0801dbc4
 801876c:	0801dab0 	.word	0x0801dab0
 8018770:	0801da88 	.word	0x0801da88
 8018774:	7ca00000 	.word	0x7ca00000
 8018778:	7ff00000 	.word	0x7ff00000
 801877c:	7fefffff 	.word	0x7fefffff
 8018780:	f012 0110 	ands.w	r1, r2, #16
 8018784:	bf18      	it	ne
 8018786:	216a      	movne	r1, #106	@ 0x6a
 8018788:	9106      	str	r1, [sp, #24]
 801878a:	ec4b ab17 	vmov	d7, sl, fp
 801878e:	49b0      	ldr	r1, [pc, #704]	@ (8018a50 <_strtod_l+0x850>)
 8018790:	2000      	movs	r0, #0
 8018792:	07d6      	lsls	r6, r2, #31
 8018794:	d504      	bpl.n	80187a0 <_strtod_l+0x5a0>
 8018796:	ed91 6b00 	vldr	d6, [r1]
 801879a:	2001      	movs	r0, #1
 801879c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80187a0:	1052      	asrs	r2, r2, #1
 80187a2:	f101 0108 	add.w	r1, r1, #8
 80187a6:	d1f4      	bne.n	8018792 <_strtod_l+0x592>
 80187a8:	b108      	cbz	r0, 80187ae <_strtod_l+0x5ae>
 80187aa:	ec5b ab17 	vmov	sl, fp, d7
 80187ae:	9a06      	ldr	r2, [sp, #24]
 80187b0:	b1b2      	cbz	r2, 80187e0 <_strtod_l+0x5e0>
 80187b2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80187b6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80187ba:	2a00      	cmp	r2, #0
 80187bc:	4658      	mov	r0, fp
 80187be:	dd0f      	ble.n	80187e0 <_strtod_l+0x5e0>
 80187c0:	2a1f      	cmp	r2, #31
 80187c2:	dd55      	ble.n	8018870 <_strtod_l+0x670>
 80187c4:	2a34      	cmp	r2, #52	@ 0x34
 80187c6:	bfde      	ittt	le
 80187c8:	f04f 32ff 	movle.w	r2, #4294967295
 80187cc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80187d0:	408a      	lslle	r2, r1
 80187d2:	f04f 0a00 	mov.w	sl, #0
 80187d6:	bfcc      	ite	gt
 80187d8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80187dc:	ea02 0b00 	andle.w	fp, r2, r0
 80187e0:	ec4b ab17 	vmov	d7, sl, fp
 80187e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80187e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187ec:	d0a8      	beq.n	8018740 <_strtod_l+0x540>
 80187ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80187f0:	9805      	ldr	r0, [sp, #20]
 80187f2:	f8cd 9000 	str.w	r9, [sp]
 80187f6:	462a      	mov	r2, r5
 80187f8:	f002 fc0c 	bl	801b014 <__s2b>
 80187fc:	9007      	str	r0, [sp, #28]
 80187fe:	2800      	cmp	r0, #0
 8018800:	f43f af0a 	beq.w	8018618 <_strtod_l+0x418>
 8018804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018806:	1b3f      	subs	r7, r7, r4
 8018808:	2b00      	cmp	r3, #0
 801880a:	bfb4      	ite	lt
 801880c:	463b      	movlt	r3, r7
 801880e:	2300      	movge	r3, #0
 8018810:	930a      	str	r3, [sp, #40]	@ 0x28
 8018812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018814:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8018a40 <_strtod_l+0x840>
 8018818:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801881c:	2400      	movs	r4, #0
 801881e:	930d      	str	r3, [sp, #52]	@ 0x34
 8018820:	4625      	mov	r5, r4
 8018822:	9b07      	ldr	r3, [sp, #28]
 8018824:	9805      	ldr	r0, [sp, #20]
 8018826:	6859      	ldr	r1, [r3, #4]
 8018828:	f002 fb4c 	bl	801aec4 <_Balloc>
 801882c:	4606      	mov	r6, r0
 801882e:	2800      	cmp	r0, #0
 8018830:	f43f aef6 	beq.w	8018620 <_strtod_l+0x420>
 8018834:	9b07      	ldr	r3, [sp, #28]
 8018836:	691a      	ldr	r2, [r3, #16]
 8018838:	ec4b ab19 	vmov	d9, sl, fp
 801883c:	3202      	adds	r2, #2
 801883e:	f103 010c 	add.w	r1, r3, #12
 8018842:	0092      	lsls	r2, r2, #2
 8018844:	300c      	adds	r0, #12
 8018846:	f001 f8fa 	bl	8019a3e <memcpy>
 801884a:	eeb0 0b49 	vmov.f64	d0, d9
 801884e:	9805      	ldr	r0, [sp, #20]
 8018850:	aa14      	add	r2, sp, #80	@ 0x50
 8018852:	a913      	add	r1, sp, #76	@ 0x4c
 8018854:	f002 ff1a 	bl	801b68c <__d2b>
 8018858:	9012      	str	r0, [sp, #72]	@ 0x48
 801885a:	2800      	cmp	r0, #0
 801885c:	f43f aee0 	beq.w	8018620 <_strtod_l+0x420>
 8018860:	9805      	ldr	r0, [sp, #20]
 8018862:	2101      	movs	r1, #1
 8018864:	f002 fc6c 	bl	801b140 <__i2b>
 8018868:	4605      	mov	r5, r0
 801886a:	b940      	cbnz	r0, 801887e <_strtod_l+0x67e>
 801886c:	2500      	movs	r5, #0
 801886e:	e6d7      	b.n	8018620 <_strtod_l+0x420>
 8018870:	f04f 31ff 	mov.w	r1, #4294967295
 8018874:	fa01 f202 	lsl.w	r2, r1, r2
 8018878:	ea02 0a0a 	and.w	sl, r2, sl
 801887c:	e7b0      	b.n	80187e0 <_strtod_l+0x5e0>
 801887e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8018880:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018882:	2f00      	cmp	r7, #0
 8018884:	bfab      	itete	ge
 8018886:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8018888:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801888a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801888e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8018892:	bfac      	ite	ge
 8018894:	eb07 0903 	addge.w	r9, r7, r3
 8018898:	eba3 0807 	sublt.w	r8, r3, r7
 801889c:	9b06      	ldr	r3, [sp, #24]
 801889e:	1aff      	subs	r7, r7, r3
 80188a0:	4417      	add	r7, r2
 80188a2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80188a6:	4a6b      	ldr	r2, [pc, #428]	@ (8018a54 <_strtod_l+0x854>)
 80188a8:	3f01      	subs	r7, #1
 80188aa:	4297      	cmp	r7, r2
 80188ac:	da51      	bge.n	8018952 <_strtod_l+0x752>
 80188ae:	1bd1      	subs	r1, r2, r7
 80188b0:	291f      	cmp	r1, #31
 80188b2:	eba3 0301 	sub.w	r3, r3, r1
 80188b6:	f04f 0201 	mov.w	r2, #1
 80188ba:	dc3e      	bgt.n	801893a <_strtod_l+0x73a>
 80188bc:	408a      	lsls	r2, r1
 80188be:	920c      	str	r2, [sp, #48]	@ 0x30
 80188c0:	2200      	movs	r2, #0
 80188c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80188c4:	eb09 0703 	add.w	r7, r9, r3
 80188c8:	4498      	add	r8, r3
 80188ca:	9b06      	ldr	r3, [sp, #24]
 80188cc:	45b9      	cmp	r9, r7
 80188ce:	4498      	add	r8, r3
 80188d0:	464b      	mov	r3, r9
 80188d2:	bfa8      	it	ge
 80188d4:	463b      	movge	r3, r7
 80188d6:	4543      	cmp	r3, r8
 80188d8:	bfa8      	it	ge
 80188da:	4643      	movge	r3, r8
 80188dc:	2b00      	cmp	r3, #0
 80188de:	bfc2      	ittt	gt
 80188e0:	1aff      	subgt	r7, r7, r3
 80188e2:	eba8 0803 	subgt.w	r8, r8, r3
 80188e6:	eba9 0903 	subgt.w	r9, r9, r3
 80188ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	dd16      	ble.n	801891e <_strtod_l+0x71e>
 80188f0:	4629      	mov	r1, r5
 80188f2:	9805      	ldr	r0, [sp, #20]
 80188f4:	461a      	mov	r2, r3
 80188f6:	f002 fce3 	bl	801b2c0 <__pow5mult>
 80188fa:	4605      	mov	r5, r0
 80188fc:	2800      	cmp	r0, #0
 80188fe:	d0b5      	beq.n	801886c <_strtod_l+0x66c>
 8018900:	4601      	mov	r1, r0
 8018902:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018904:	9805      	ldr	r0, [sp, #20]
 8018906:	f002 fc31 	bl	801b16c <__multiply>
 801890a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801890c:	2800      	cmp	r0, #0
 801890e:	f43f ae87 	beq.w	8018620 <_strtod_l+0x420>
 8018912:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018914:	9805      	ldr	r0, [sp, #20]
 8018916:	f002 fb15 	bl	801af44 <_Bfree>
 801891a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801891c:	9312      	str	r3, [sp, #72]	@ 0x48
 801891e:	2f00      	cmp	r7, #0
 8018920:	dc1b      	bgt.n	801895a <_strtod_l+0x75a>
 8018922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018924:	2b00      	cmp	r3, #0
 8018926:	dd21      	ble.n	801896c <_strtod_l+0x76c>
 8018928:	4631      	mov	r1, r6
 801892a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801892c:	9805      	ldr	r0, [sp, #20]
 801892e:	f002 fcc7 	bl	801b2c0 <__pow5mult>
 8018932:	4606      	mov	r6, r0
 8018934:	b9d0      	cbnz	r0, 801896c <_strtod_l+0x76c>
 8018936:	2600      	movs	r6, #0
 8018938:	e672      	b.n	8018620 <_strtod_l+0x420>
 801893a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801893e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8018942:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8018946:	37e2      	adds	r7, #226	@ 0xe2
 8018948:	fa02 f107 	lsl.w	r1, r2, r7
 801894c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801894e:	920c      	str	r2, [sp, #48]	@ 0x30
 8018950:	e7b8      	b.n	80188c4 <_strtod_l+0x6c4>
 8018952:	2200      	movs	r2, #0
 8018954:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018956:	2201      	movs	r2, #1
 8018958:	e7f9      	b.n	801894e <_strtod_l+0x74e>
 801895a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801895c:	9805      	ldr	r0, [sp, #20]
 801895e:	463a      	mov	r2, r7
 8018960:	f002 fd08 	bl	801b374 <__lshift>
 8018964:	9012      	str	r0, [sp, #72]	@ 0x48
 8018966:	2800      	cmp	r0, #0
 8018968:	d1db      	bne.n	8018922 <_strtod_l+0x722>
 801896a:	e659      	b.n	8018620 <_strtod_l+0x420>
 801896c:	f1b8 0f00 	cmp.w	r8, #0
 8018970:	dd07      	ble.n	8018982 <_strtod_l+0x782>
 8018972:	4631      	mov	r1, r6
 8018974:	9805      	ldr	r0, [sp, #20]
 8018976:	4642      	mov	r2, r8
 8018978:	f002 fcfc 	bl	801b374 <__lshift>
 801897c:	4606      	mov	r6, r0
 801897e:	2800      	cmp	r0, #0
 8018980:	d0d9      	beq.n	8018936 <_strtod_l+0x736>
 8018982:	f1b9 0f00 	cmp.w	r9, #0
 8018986:	dd08      	ble.n	801899a <_strtod_l+0x79a>
 8018988:	4629      	mov	r1, r5
 801898a:	9805      	ldr	r0, [sp, #20]
 801898c:	464a      	mov	r2, r9
 801898e:	f002 fcf1 	bl	801b374 <__lshift>
 8018992:	4605      	mov	r5, r0
 8018994:	2800      	cmp	r0, #0
 8018996:	f43f ae43 	beq.w	8018620 <_strtod_l+0x420>
 801899a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801899c:	9805      	ldr	r0, [sp, #20]
 801899e:	4632      	mov	r2, r6
 80189a0:	f002 fd70 	bl	801b484 <__mdiff>
 80189a4:	4604      	mov	r4, r0
 80189a6:	2800      	cmp	r0, #0
 80189a8:	f43f ae3a 	beq.w	8018620 <_strtod_l+0x420>
 80189ac:	2300      	movs	r3, #0
 80189ae:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80189b2:	60c3      	str	r3, [r0, #12]
 80189b4:	4629      	mov	r1, r5
 80189b6:	f002 fd49 	bl	801b44c <__mcmp>
 80189ba:	2800      	cmp	r0, #0
 80189bc:	da4e      	bge.n	8018a5c <_strtod_l+0x85c>
 80189be:	ea58 080a 	orrs.w	r8, r8, sl
 80189c2:	d174      	bne.n	8018aae <_strtod_l+0x8ae>
 80189c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d170      	bne.n	8018aae <_strtod_l+0x8ae>
 80189cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80189d0:	0d1b      	lsrs	r3, r3, #20
 80189d2:	051b      	lsls	r3, r3, #20
 80189d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80189d8:	d969      	bls.n	8018aae <_strtod_l+0x8ae>
 80189da:	6963      	ldr	r3, [r4, #20]
 80189dc:	b913      	cbnz	r3, 80189e4 <_strtod_l+0x7e4>
 80189de:	6923      	ldr	r3, [r4, #16]
 80189e0:	2b01      	cmp	r3, #1
 80189e2:	dd64      	ble.n	8018aae <_strtod_l+0x8ae>
 80189e4:	4621      	mov	r1, r4
 80189e6:	2201      	movs	r2, #1
 80189e8:	9805      	ldr	r0, [sp, #20]
 80189ea:	f002 fcc3 	bl	801b374 <__lshift>
 80189ee:	4629      	mov	r1, r5
 80189f0:	4604      	mov	r4, r0
 80189f2:	f002 fd2b 	bl	801b44c <__mcmp>
 80189f6:	2800      	cmp	r0, #0
 80189f8:	dd59      	ble.n	8018aae <_strtod_l+0x8ae>
 80189fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80189fe:	9a06      	ldr	r2, [sp, #24]
 8018a00:	0d1b      	lsrs	r3, r3, #20
 8018a02:	051b      	lsls	r3, r3, #20
 8018a04:	2a00      	cmp	r2, #0
 8018a06:	d070      	beq.n	8018aea <_strtod_l+0x8ea>
 8018a08:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018a0c:	d86d      	bhi.n	8018aea <_strtod_l+0x8ea>
 8018a0e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8018a12:	f67f ae99 	bls.w	8018748 <_strtod_l+0x548>
 8018a16:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8018a48 <_strtod_l+0x848>
 8018a1a:	ec4b ab16 	vmov	d6, sl, fp
 8018a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8018a58 <_strtod_l+0x858>)
 8018a20:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018a24:	ee17 2a90 	vmov	r2, s15
 8018a28:	4013      	ands	r3, r2
 8018a2a:	ec5b ab17 	vmov	sl, fp, d7
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	f47f ae01 	bne.w	8018636 <_strtod_l+0x436>
 8018a34:	9a05      	ldr	r2, [sp, #20]
 8018a36:	2322      	movs	r3, #34	@ 0x22
 8018a38:	6013      	str	r3, [r2, #0]
 8018a3a:	e5fc      	b.n	8018636 <_strtod_l+0x436>
 8018a3c:	f3af 8000 	nop.w
 8018a40:	ffc00000 	.word	0xffc00000
 8018a44:	41dfffff 	.word	0x41dfffff
 8018a48:	00000000 	.word	0x00000000
 8018a4c:	39500000 	.word	0x39500000
 8018a50:	0801d7d0 	.word	0x0801d7d0
 8018a54:	fffffc02 	.word	0xfffffc02
 8018a58:	7ff00000 	.word	0x7ff00000
 8018a5c:	46d9      	mov	r9, fp
 8018a5e:	d15d      	bne.n	8018b1c <_strtod_l+0x91c>
 8018a60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018a64:	f1b8 0f00 	cmp.w	r8, #0
 8018a68:	d02a      	beq.n	8018ac0 <_strtod_l+0x8c0>
 8018a6a:	4aab      	ldr	r2, [pc, #684]	@ (8018d18 <_strtod_l+0xb18>)
 8018a6c:	4293      	cmp	r3, r2
 8018a6e:	d12a      	bne.n	8018ac6 <_strtod_l+0x8c6>
 8018a70:	9b06      	ldr	r3, [sp, #24]
 8018a72:	4652      	mov	r2, sl
 8018a74:	b1fb      	cbz	r3, 8018ab6 <_strtod_l+0x8b6>
 8018a76:	4ba9      	ldr	r3, [pc, #676]	@ (8018d1c <_strtod_l+0xb1c>)
 8018a78:	ea0b 0303 	and.w	r3, fp, r3
 8018a7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8018a80:	f04f 31ff 	mov.w	r1, #4294967295
 8018a84:	d81a      	bhi.n	8018abc <_strtod_l+0x8bc>
 8018a86:	0d1b      	lsrs	r3, r3, #20
 8018a88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8018a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8018a90:	429a      	cmp	r2, r3
 8018a92:	d118      	bne.n	8018ac6 <_strtod_l+0x8c6>
 8018a94:	4ba2      	ldr	r3, [pc, #648]	@ (8018d20 <_strtod_l+0xb20>)
 8018a96:	4599      	cmp	r9, r3
 8018a98:	d102      	bne.n	8018aa0 <_strtod_l+0x8a0>
 8018a9a:	3201      	adds	r2, #1
 8018a9c:	f43f adc0 	beq.w	8018620 <_strtod_l+0x420>
 8018aa0:	4b9e      	ldr	r3, [pc, #632]	@ (8018d1c <_strtod_l+0xb1c>)
 8018aa2:	ea09 0303 	and.w	r3, r9, r3
 8018aa6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8018aaa:	f04f 0a00 	mov.w	sl, #0
 8018aae:	9b06      	ldr	r3, [sp, #24]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d1b0      	bne.n	8018a16 <_strtod_l+0x816>
 8018ab4:	e5bf      	b.n	8018636 <_strtod_l+0x436>
 8018ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8018aba:	e7e9      	b.n	8018a90 <_strtod_l+0x890>
 8018abc:	460b      	mov	r3, r1
 8018abe:	e7e7      	b.n	8018a90 <_strtod_l+0x890>
 8018ac0:	ea53 030a 	orrs.w	r3, r3, sl
 8018ac4:	d099      	beq.n	80189fa <_strtod_l+0x7fa>
 8018ac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018ac8:	b1c3      	cbz	r3, 8018afc <_strtod_l+0x8fc>
 8018aca:	ea13 0f09 	tst.w	r3, r9
 8018ace:	d0ee      	beq.n	8018aae <_strtod_l+0x8ae>
 8018ad0:	9a06      	ldr	r2, [sp, #24]
 8018ad2:	4650      	mov	r0, sl
 8018ad4:	4659      	mov	r1, fp
 8018ad6:	f1b8 0f00 	cmp.w	r8, #0
 8018ada:	d013      	beq.n	8018b04 <_strtod_l+0x904>
 8018adc:	f7ff fb73 	bl	80181c6 <sulp>
 8018ae0:	ee39 7b00 	vadd.f64	d7, d9, d0
 8018ae4:	ec5b ab17 	vmov	sl, fp, d7
 8018ae8:	e7e1      	b.n	8018aae <_strtod_l+0x8ae>
 8018aea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8018aee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018af2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018af6:	f04f 3aff 	mov.w	sl, #4294967295
 8018afa:	e7d8      	b.n	8018aae <_strtod_l+0x8ae>
 8018afc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018afe:	ea13 0f0a 	tst.w	r3, sl
 8018b02:	e7e4      	b.n	8018ace <_strtod_l+0x8ce>
 8018b04:	f7ff fb5f 	bl	80181c6 <sulp>
 8018b08:	ee39 0b40 	vsub.f64	d0, d9, d0
 8018b0c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8018b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b14:	ec5b ab10 	vmov	sl, fp, d0
 8018b18:	d1c9      	bne.n	8018aae <_strtod_l+0x8ae>
 8018b1a:	e615      	b.n	8018748 <_strtod_l+0x548>
 8018b1c:	4629      	mov	r1, r5
 8018b1e:	4620      	mov	r0, r4
 8018b20:	f002 fe0c 	bl	801b73c <__ratio>
 8018b24:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8018b28:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b30:	d85d      	bhi.n	8018bee <_strtod_l+0x9ee>
 8018b32:	f1b8 0f00 	cmp.w	r8, #0
 8018b36:	d164      	bne.n	8018c02 <_strtod_l+0xa02>
 8018b38:	f1ba 0f00 	cmp.w	sl, #0
 8018b3c:	d14b      	bne.n	8018bd6 <_strtod_l+0x9d6>
 8018b3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018b42:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d160      	bne.n	8018c0c <_strtod_l+0xa0c>
 8018b4a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8018b4e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8018b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b56:	d401      	bmi.n	8018b5c <_strtod_l+0x95c>
 8018b58:	ee20 8b08 	vmul.f64	d8, d0, d8
 8018b5c:	eeb1 ab48 	vneg.f64	d10, d8
 8018b60:	486e      	ldr	r0, [pc, #440]	@ (8018d1c <_strtod_l+0xb1c>)
 8018b62:	4970      	ldr	r1, [pc, #448]	@ (8018d24 <_strtod_l+0xb24>)
 8018b64:	ea09 0700 	and.w	r7, r9, r0
 8018b68:	428f      	cmp	r7, r1
 8018b6a:	ec53 2b1a 	vmov	r2, r3, d10
 8018b6e:	d17d      	bne.n	8018c6c <_strtod_l+0xa6c>
 8018b70:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8018b74:	ec4b ab1c 	vmov	d12, sl, fp
 8018b78:	eeb0 0b4c 	vmov.f64	d0, d12
 8018b7c:	f002 fd16 	bl	801b5ac <__ulp>
 8018b80:	4866      	ldr	r0, [pc, #408]	@ (8018d1c <_strtod_l+0xb1c>)
 8018b82:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8018b86:	ee1c 3a90 	vmov	r3, s25
 8018b8a:	4a67      	ldr	r2, [pc, #412]	@ (8018d28 <_strtod_l+0xb28>)
 8018b8c:	ea03 0100 	and.w	r1, r3, r0
 8018b90:	4291      	cmp	r1, r2
 8018b92:	ec5b ab1c 	vmov	sl, fp, d12
 8018b96:	d93c      	bls.n	8018c12 <_strtod_l+0xa12>
 8018b98:	ee19 2a90 	vmov	r2, s19
 8018b9c:	4b60      	ldr	r3, [pc, #384]	@ (8018d20 <_strtod_l+0xb20>)
 8018b9e:	429a      	cmp	r2, r3
 8018ba0:	d104      	bne.n	8018bac <_strtod_l+0x9ac>
 8018ba2:	ee19 3a10 	vmov	r3, s18
 8018ba6:	3301      	adds	r3, #1
 8018ba8:	f43f ad3a 	beq.w	8018620 <_strtod_l+0x420>
 8018bac:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8018d20 <_strtod_l+0xb20>
 8018bb0:	f04f 3aff 	mov.w	sl, #4294967295
 8018bb4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018bb6:	9805      	ldr	r0, [sp, #20]
 8018bb8:	f002 f9c4 	bl	801af44 <_Bfree>
 8018bbc:	9805      	ldr	r0, [sp, #20]
 8018bbe:	4631      	mov	r1, r6
 8018bc0:	f002 f9c0 	bl	801af44 <_Bfree>
 8018bc4:	9805      	ldr	r0, [sp, #20]
 8018bc6:	4629      	mov	r1, r5
 8018bc8:	f002 f9bc 	bl	801af44 <_Bfree>
 8018bcc:	9805      	ldr	r0, [sp, #20]
 8018bce:	4621      	mov	r1, r4
 8018bd0:	f002 f9b8 	bl	801af44 <_Bfree>
 8018bd4:	e625      	b.n	8018822 <_strtod_l+0x622>
 8018bd6:	f1ba 0f01 	cmp.w	sl, #1
 8018bda:	d103      	bne.n	8018be4 <_strtod_l+0x9e4>
 8018bdc:	f1bb 0f00 	cmp.w	fp, #0
 8018be0:	f43f adb2 	beq.w	8018748 <_strtod_l+0x548>
 8018be4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018be8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8018bec:	e7b8      	b.n	8018b60 <_strtod_l+0x960>
 8018bee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8018bf2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8018bf6:	f1b8 0f00 	cmp.w	r8, #0
 8018bfa:	d0af      	beq.n	8018b5c <_strtod_l+0x95c>
 8018bfc:	eeb0 ab48 	vmov.f64	d10, d8
 8018c00:	e7ae      	b.n	8018b60 <_strtod_l+0x960>
 8018c02:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8018c06:	eeb0 8b4a 	vmov.f64	d8, d10
 8018c0a:	e7a9      	b.n	8018b60 <_strtod_l+0x960>
 8018c0c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018c10:	e7a6      	b.n	8018b60 <_strtod_l+0x960>
 8018c12:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8018c16:	9b06      	ldr	r3, [sp, #24]
 8018c18:	46d9      	mov	r9, fp
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d1ca      	bne.n	8018bb4 <_strtod_l+0x9b4>
 8018c1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018c22:	0d1b      	lsrs	r3, r3, #20
 8018c24:	051b      	lsls	r3, r3, #20
 8018c26:	429f      	cmp	r7, r3
 8018c28:	d1c4      	bne.n	8018bb4 <_strtod_l+0x9b4>
 8018c2a:	ec51 0b18 	vmov	r0, r1, d8
 8018c2e:	f7e7 fdab 	bl	8000788 <__aeabi_d2lz>
 8018c32:	f7e7 fd63 	bl	80006fc <__aeabi_l2d>
 8018c36:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8018c3a:	ec41 0b17 	vmov	d7, r0, r1
 8018c3e:	ea49 090a 	orr.w	r9, r9, sl
 8018c42:	ea59 0908 	orrs.w	r9, r9, r8
 8018c46:	ee38 8b47 	vsub.f64	d8, d8, d7
 8018c4a:	d03c      	beq.n	8018cc6 <_strtod_l+0xac6>
 8018c4c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8018d00 <_strtod_l+0xb00>
 8018c50:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c58:	f53f aced 	bmi.w	8018636 <_strtod_l+0x436>
 8018c5c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018d08 <_strtod_l+0xb08>
 8018c60:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c68:	dda4      	ble.n	8018bb4 <_strtod_l+0x9b4>
 8018c6a:	e4e4      	b.n	8018636 <_strtod_l+0x436>
 8018c6c:	9906      	ldr	r1, [sp, #24]
 8018c6e:	b1e1      	cbz	r1, 8018caa <_strtod_l+0xaaa>
 8018c70:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8018c74:	d819      	bhi.n	8018caa <_strtod_l+0xaaa>
 8018c76:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8018c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c7e:	d811      	bhi.n	8018ca4 <_strtod_l+0xaa4>
 8018c80:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8018c84:	ee18 3a10 	vmov	r3, s16
 8018c88:	2b01      	cmp	r3, #1
 8018c8a:	bf38      	it	cc
 8018c8c:	2301      	movcc	r3, #1
 8018c8e:	ee08 3a10 	vmov	s16, r3
 8018c92:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8018c96:	f1b8 0f00 	cmp.w	r8, #0
 8018c9a:	d111      	bne.n	8018cc0 <_strtod_l+0xac0>
 8018c9c:	eeb1 7b48 	vneg.f64	d7, d8
 8018ca0:	ec53 2b17 	vmov	r2, r3, d7
 8018ca4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8018ca8:	1bcb      	subs	r3, r1, r7
 8018caa:	eeb0 0b49 	vmov.f64	d0, d9
 8018cae:	ec43 2b1a 	vmov	d10, r2, r3
 8018cb2:	f002 fc7b 	bl	801b5ac <__ulp>
 8018cb6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8018cba:	ec5b ab19 	vmov	sl, fp, d9
 8018cbe:	e7aa      	b.n	8018c16 <_strtod_l+0xa16>
 8018cc0:	eeb0 7b48 	vmov.f64	d7, d8
 8018cc4:	e7ec      	b.n	8018ca0 <_strtod_l+0xaa0>
 8018cc6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8018d10 <_strtod_l+0xb10>
 8018cca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cd2:	f57f af6f 	bpl.w	8018bb4 <_strtod_l+0x9b4>
 8018cd6:	e4ae      	b.n	8018636 <_strtod_l+0x436>
 8018cd8:	2300      	movs	r3, #0
 8018cda:	9308      	str	r3, [sp, #32]
 8018cdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018cde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018ce0:	6013      	str	r3, [r2, #0]
 8018ce2:	f7ff bacc 	b.w	801827e <_strtod_l+0x7e>
 8018ce6:	2a65      	cmp	r2, #101	@ 0x65
 8018ce8:	f43f abbc 	beq.w	8018464 <_strtod_l+0x264>
 8018cec:	2a45      	cmp	r2, #69	@ 0x45
 8018cee:	f43f abb9 	beq.w	8018464 <_strtod_l+0x264>
 8018cf2:	2301      	movs	r3, #1
 8018cf4:	9306      	str	r3, [sp, #24]
 8018cf6:	f7ff bbf0 	b.w	80184da <_strtod_l+0x2da>
 8018cfa:	bf00      	nop
 8018cfc:	f3af 8000 	nop.w
 8018d00:	94a03595 	.word	0x94a03595
 8018d04:	3fdfffff 	.word	0x3fdfffff
 8018d08:	35afe535 	.word	0x35afe535
 8018d0c:	3fe00000 	.word	0x3fe00000
 8018d10:	94a03595 	.word	0x94a03595
 8018d14:	3fcfffff 	.word	0x3fcfffff
 8018d18:	000fffff 	.word	0x000fffff
 8018d1c:	7ff00000 	.word	0x7ff00000
 8018d20:	7fefffff 	.word	0x7fefffff
 8018d24:	7fe00000 	.word	0x7fe00000
 8018d28:	7c9fffff 	.word	0x7c9fffff

08018d2c <strtod>:
 8018d2c:	460a      	mov	r2, r1
 8018d2e:	4601      	mov	r1, r0
 8018d30:	4802      	ldr	r0, [pc, #8]	@ (8018d3c <strtod+0x10>)
 8018d32:	4b03      	ldr	r3, [pc, #12]	@ (8018d40 <strtod+0x14>)
 8018d34:	6800      	ldr	r0, [r0, #0]
 8018d36:	f7ff ba63 	b.w	8018200 <_strtod_l>
 8018d3a:	bf00      	nop
 8018d3c:	2400027c 	.word	0x2400027c
 8018d40:	24000110 	.word	0x24000110

08018d44 <_strtol_l.constprop.0>:
 8018d44:	2b24      	cmp	r3, #36	@ 0x24
 8018d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d4a:	4686      	mov	lr, r0
 8018d4c:	4690      	mov	r8, r2
 8018d4e:	d801      	bhi.n	8018d54 <_strtol_l.constprop.0+0x10>
 8018d50:	2b01      	cmp	r3, #1
 8018d52:	d106      	bne.n	8018d62 <_strtol_l.constprop.0+0x1e>
 8018d54:	f000 fe46 	bl	80199e4 <__errno>
 8018d58:	2316      	movs	r3, #22
 8018d5a:	6003      	str	r3, [r0, #0]
 8018d5c:	2000      	movs	r0, #0
 8018d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d62:	4834      	ldr	r0, [pc, #208]	@ (8018e34 <_strtol_l.constprop.0+0xf0>)
 8018d64:	460d      	mov	r5, r1
 8018d66:	462a      	mov	r2, r5
 8018d68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018d6c:	5d06      	ldrb	r6, [r0, r4]
 8018d6e:	f016 0608 	ands.w	r6, r6, #8
 8018d72:	d1f8      	bne.n	8018d66 <_strtol_l.constprop.0+0x22>
 8018d74:	2c2d      	cmp	r4, #45	@ 0x2d
 8018d76:	d12d      	bne.n	8018dd4 <_strtol_l.constprop.0+0x90>
 8018d78:	782c      	ldrb	r4, [r5, #0]
 8018d7a:	2601      	movs	r6, #1
 8018d7c:	1c95      	adds	r5, r2, #2
 8018d7e:	f033 0210 	bics.w	r2, r3, #16
 8018d82:	d109      	bne.n	8018d98 <_strtol_l.constprop.0+0x54>
 8018d84:	2c30      	cmp	r4, #48	@ 0x30
 8018d86:	d12a      	bne.n	8018dde <_strtol_l.constprop.0+0x9a>
 8018d88:	782a      	ldrb	r2, [r5, #0]
 8018d8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018d8e:	2a58      	cmp	r2, #88	@ 0x58
 8018d90:	d125      	bne.n	8018dde <_strtol_l.constprop.0+0x9a>
 8018d92:	786c      	ldrb	r4, [r5, #1]
 8018d94:	2310      	movs	r3, #16
 8018d96:	3502      	adds	r5, #2
 8018d98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8018d9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018da0:	2200      	movs	r2, #0
 8018da2:	fbbc f9f3 	udiv	r9, ip, r3
 8018da6:	4610      	mov	r0, r2
 8018da8:	fb03 ca19 	mls	sl, r3, r9, ip
 8018dac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8018db0:	2f09      	cmp	r7, #9
 8018db2:	d81b      	bhi.n	8018dec <_strtol_l.constprop.0+0xa8>
 8018db4:	463c      	mov	r4, r7
 8018db6:	42a3      	cmp	r3, r4
 8018db8:	dd27      	ble.n	8018e0a <_strtol_l.constprop.0+0xc6>
 8018dba:	1c57      	adds	r7, r2, #1
 8018dbc:	d007      	beq.n	8018dce <_strtol_l.constprop.0+0x8a>
 8018dbe:	4581      	cmp	r9, r0
 8018dc0:	d320      	bcc.n	8018e04 <_strtol_l.constprop.0+0xc0>
 8018dc2:	d101      	bne.n	8018dc8 <_strtol_l.constprop.0+0x84>
 8018dc4:	45a2      	cmp	sl, r4
 8018dc6:	db1d      	blt.n	8018e04 <_strtol_l.constprop.0+0xc0>
 8018dc8:	fb00 4003 	mla	r0, r0, r3, r4
 8018dcc:	2201      	movs	r2, #1
 8018dce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018dd2:	e7eb      	b.n	8018dac <_strtol_l.constprop.0+0x68>
 8018dd4:	2c2b      	cmp	r4, #43	@ 0x2b
 8018dd6:	bf04      	itt	eq
 8018dd8:	782c      	ldrbeq	r4, [r5, #0]
 8018dda:	1c95      	addeq	r5, r2, #2
 8018ddc:	e7cf      	b.n	8018d7e <_strtol_l.constprop.0+0x3a>
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d1da      	bne.n	8018d98 <_strtol_l.constprop.0+0x54>
 8018de2:	2c30      	cmp	r4, #48	@ 0x30
 8018de4:	bf0c      	ite	eq
 8018de6:	2308      	moveq	r3, #8
 8018de8:	230a      	movne	r3, #10
 8018dea:	e7d5      	b.n	8018d98 <_strtol_l.constprop.0+0x54>
 8018dec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8018df0:	2f19      	cmp	r7, #25
 8018df2:	d801      	bhi.n	8018df8 <_strtol_l.constprop.0+0xb4>
 8018df4:	3c37      	subs	r4, #55	@ 0x37
 8018df6:	e7de      	b.n	8018db6 <_strtol_l.constprop.0+0x72>
 8018df8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8018dfc:	2f19      	cmp	r7, #25
 8018dfe:	d804      	bhi.n	8018e0a <_strtol_l.constprop.0+0xc6>
 8018e00:	3c57      	subs	r4, #87	@ 0x57
 8018e02:	e7d8      	b.n	8018db6 <_strtol_l.constprop.0+0x72>
 8018e04:	f04f 32ff 	mov.w	r2, #4294967295
 8018e08:	e7e1      	b.n	8018dce <_strtol_l.constprop.0+0x8a>
 8018e0a:	1c53      	adds	r3, r2, #1
 8018e0c:	d108      	bne.n	8018e20 <_strtol_l.constprop.0+0xdc>
 8018e0e:	2322      	movs	r3, #34	@ 0x22
 8018e10:	f8ce 3000 	str.w	r3, [lr]
 8018e14:	4660      	mov	r0, ip
 8018e16:	f1b8 0f00 	cmp.w	r8, #0
 8018e1a:	d0a0      	beq.n	8018d5e <_strtol_l.constprop.0+0x1a>
 8018e1c:	1e69      	subs	r1, r5, #1
 8018e1e:	e006      	b.n	8018e2e <_strtol_l.constprop.0+0xea>
 8018e20:	b106      	cbz	r6, 8018e24 <_strtol_l.constprop.0+0xe0>
 8018e22:	4240      	negs	r0, r0
 8018e24:	f1b8 0f00 	cmp.w	r8, #0
 8018e28:	d099      	beq.n	8018d5e <_strtol_l.constprop.0+0x1a>
 8018e2a:	2a00      	cmp	r2, #0
 8018e2c:	d1f6      	bne.n	8018e1c <_strtol_l.constprop.0+0xd8>
 8018e2e:	f8c8 1000 	str.w	r1, [r8]
 8018e32:	e794      	b.n	8018d5e <_strtol_l.constprop.0+0x1a>
 8018e34:	0801d7f9 	.word	0x0801d7f9

08018e38 <strtol>:
 8018e38:	4613      	mov	r3, r2
 8018e3a:	460a      	mov	r2, r1
 8018e3c:	4601      	mov	r1, r0
 8018e3e:	4802      	ldr	r0, [pc, #8]	@ (8018e48 <strtol+0x10>)
 8018e40:	6800      	ldr	r0, [r0, #0]
 8018e42:	f7ff bf7f 	b.w	8018d44 <_strtol_l.constprop.0>
 8018e46:	bf00      	nop
 8018e48:	2400027c 	.word	0x2400027c

08018e4c <__cvt>:
 8018e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e4e:	ed2d 8b02 	vpush	{d8}
 8018e52:	eeb0 8b40 	vmov.f64	d8, d0
 8018e56:	b085      	sub	sp, #20
 8018e58:	4617      	mov	r7, r2
 8018e5a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8018e5c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018e5e:	ee18 2a90 	vmov	r2, s17
 8018e62:	f025 0520 	bic.w	r5, r5, #32
 8018e66:	2a00      	cmp	r2, #0
 8018e68:	bfb6      	itet	lt
 8018e6a:	222d      	movlt	r2, #45	@ 0x2d
 8018e6c:	2200      	movge	r2, #0
 8018e6e:	eeb1 8b40 	vneglt.f64	d8, d0
 8018e72:	2d46      	cmp	r5, #70	@ 0x46
 8018e74:	460c      	mov	r4, r1
 8018e76:	701a      	strb	r2, [r3, #0]
 8018e78:	d004      	beq.n	8018e84 <__cvt+0x38>
 8018e7a:	2d45      	cmp	r5, #69	@ 0x45
 8018e7c:	d100      	bne.n	8018e80 <__cvt+0x34>
 8018e7e:	3401      	adds	r4, #1
 8018e80:	2102      	movs	r1, #2
 8018e82:	e000      	b.n	8018e86 <__cvt+0x3a>
 8018e84:	2103      	movs	r1, #3
 8018e86:	ab03      	add	r3, sp, #12
 8018e88:	9301      	str	r3, [sp, #4]
 8018e8a:	ab02      	add	r3, sp, #8
 8018e8c:	9300      	str	r3, [sp, #0]
 8018e8e:	4622      	mov	r2, r4
 8018e90:	4633      	mov	r3, r6
 8018e92:	eeb0 0b48 	vmov.f64	d0, d8
 8018e96:	f000 fe73 	bl	8019b80 <_dtoa_r>
 8018e9a:	2d47      	cmp	r5, #71	@ 0x47
 8018e9c:	d114      	bne.n	8018ec8 <__cvt+0x7c>
 8018e9e:	07fb      	lsls	r3, r7, #31
 8018ea0:	d50a      	bpl.n	8018eb8 <__cvt+0x6c>
 8018ea2:	1902      	adds	r2, r0, r4
 8018ea4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eac:	bf08      	it	eq
 8018eae:	9203      	streq	r2, [sp, #12]
 8018eb0:	2130      	movs	r1, #48	@ 0x30
 8018eb2:	9b03      	ldr	r3, [sp, #12]
 8018eb4:	4293      	cmp	r3, r2
 8018eb6:	d319      	bcc.n	8018eec <__cvt+0xa0>
 8018eb8:	9b03      	ldr	r3, [sp, #12]
 8018eba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018ebc:	1a1b      	subs	r3, r3, r0
 8018ebe:	6013      	str	r3, [r2, #0]
 8018ec0:	b005      	add	sp, #20
 8018ec2:	ecbd 8b02 	vpop	{d8}
 8018ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ec8:	2d46      	cmp	r5, #70	@ 0x46
 8018eca:	eb00 0204 	add.w	r2, r0, r4
 8018ece:	d1e9      	bne.n	8018ea4 <__cvt+0x58>
 8018ed0:	7803      	ldrb	r3, [r0, #0]
 8018ed2:	2b30      	cmp	r3, #48	@ 0x30
 8018ed4:	d107      	bne.n	8018ee6 <__cvt+0x9a>
 8018ed6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ede:	bf1c      	itt	ne
 8018ee0:	f1c4 0401 	rsbne	r4, r4, #1
 8018ee4:	6034      	strne	r4, [r6, #0]
 8018ee6:	6833      	ldr	r3, [r6, #0]
 8018ee8:	441a      	add	r2, r3
 8018eea:	e7db      	b.n	8018ea4 <__cvt+0x58>
 8018eec:	1c5c      	adds	r4, r3, #1
 8018eee:	9403      	str	r4, [sp, #12]
 8018ef0:	7019      	strb	r1, [r3, #0]
 8018ef2:	e7de      	b.n	8018eb2 <__cvt+0x66>

08018ef4 <__exponent>:
 8018ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018ef6:	2900      	cmp	r1, #0
 8018ef8:	bfba      	itte	lt
 8018efa:	4249      	neglt	r1, r1
 8018efc:	232d      	movlt	r3, #45	@ 0x2d
 8018efe:	232b      	movge	r3, #43	@ 0x2b
 8018f00:	2909      	cmp	r1, #9
 8018f02:	7002      	strb	r2, [r0, #0]
 8018f04:	7043      	strb	r3, [r0, #1]
 8018f06:	dd29      	ble.n	8018f5c <__exponent+0x68>
 8018f08:	f10d 0307 	add.w	r3, sp, #7
 8018f0c:	461d      	mov	r5, r3
 8018f0e:	270a      	movs	r7, #10
 8018f10:	461a      	mov	r2, r3
 8018f12:	fbb1 f6f7 	udiv	r6, r1, r7
 8018f16:	fb07 1416 	mls	r4, r7, r6, r1
 8018f1a:	3430      	adds	r4, #48	@ 0x30
 8018f1c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8018f20:	460c      	mov	r4, r1
 8018f22:	2c63      	cmp	r4, #99	@ 0x63
 8018f24:	f103 33ff 	add.w	r3, r3, #4294967295
 8018f28:	4631      	mov	r1, r6
 8018f2a:	dcf1      	bgt.n	8018f10 <__exponent+0x1c>
 8018f2c:	3130      	adds	r1, #48	@ 0x30
 8018f2e:	1e94      	subs	r4, r2, #2
 8018f30:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018f34:	1c41      	adds	r1, r0, #1
 8018f36:	4623      	mov	r3, r4
 8018f38:	42ab      	cmp	r3, r5
 8018f3a:	d30a      	bcc.n	8018f52 <__exponent+0x5e>
 8018f3c:	f10d 0309 	add.w	r3, sp, #9
 8018f40:	1a9b      	subs	r3, r3, r2
 8018f42:	42ac      	cmp	r4, r5
 8018f44:	bf88      	it	hi
 8018f46:	2300      	movhi	r3, #0
 8018f48:	3302      	adds	r3, #2
 8018f4a:	4403      	add	r3, r0
 8018f4c:	1a18      	subs	r0, r3, r0
 8018f4e:	b003      	add	sp, #12
 8018f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f52:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018f56:	f801 6f01 	strb.w	r6, [r1, #1]!
 8018f5a:	e7ed      	b.n	8018f38 <__exponent+0x44>
 8018f5c:	2330      	movs	r3, #48	@ 0x30
 8018f5e:	3130      	adds	r1, #48	@ 0x30
 8018f60:	7083      	strb	r3, [r0, #2]
 8018f62:	70c1      	strb	r1, [r0, #3]
 8018f64:	1d03      	adds	r3, r0, #4
 8018f66:	e7f1      	b.n	8018f4c <__exponent+0x58>

08018f68 <_printf_float>:
 8018f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f6c:	b08d      	sub	sp, #52	@ 0x34
 8018f6e:	460c      	mov	r4, r1
 8018f70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8018f74:	4616      	mov	r6, r2
 8018f76:	461f      	mov	r7, r3
 8018f78:	4605      	mov	r5, r0
 8018f7a:	f000 fce9 	bl	8019950 <_localeconv_r>
 8018f7e:	f8d0 b000 	ldr.w	fp, [r0]
 8018f82:	4658      	mov	r0, fp
 8018f84:	f7e7 fa24 	bl	80003d0 <strlen>
 8018f88:	2300      	movs	r3, #0
 8018f8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8018f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8018f90:	f894 9018 	ldrb.w	r9, [r4, #24]
 8018f94:	6822      	ldr	r2, [r4, #0]
 8018f96:	9005      	str	r0, [sp, #20]
 8018f98:	3307      	adds	r3, #7
 8018f9a:	f023 0307 	bic.w	r3, r3, #7
 8018f9e:	f103 0108 	add.w	r1, r3, #8
 8018fa2:	f8c8 1000 	str.w	r1, [r8]
 8018fa6:	ed93 0b00 	vldr	d0, [r3]
 8018faa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8019208 <_printf_float+0x2a0>
 8018fae:	eeb0 7bc0 	vabs.f64	d7, d0
 8018fb2:	eeb4 7b46 	vcmp.f64	d7, d6
 8018fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fba:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8018fbe:	dd24      	ble.n	801900a <_printf_float+0xa2>
 8018fc0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fc8:	d502      	bpl.n	8018fd0 <_printf_float+0x68>
 8018fca:	232d      	movs	r3, #45	@ 0x2d
 8018fcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018fd0:	498f      	ldr	r1, [pc, #572]	@ (8019210 <_printf_float+0x2a8>)
 8018fd2:	4b90      	ldr	r3, [pc, #576]	@ (8019214 <_printf_float+0x2ac>)
 8018fd4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8018fd8:	bf94      	ite	ls
 8018fda:	4688      	movls	r8, r1
 8018fdc:	4698      	movhi	r8, r3
 8018fde:	f022 0204 	bic.w	r2, r2, #4
 8018fe2:	2303      	movs	r3, #3
 8018fe4:	6123      	str	r3, [r4, #16]
 8018fe6:	6022      	str	r2, [r4, #0]
 8018fe8:	f04f 0a00 	mov.w	sl, #0
 8018fec:	9700      	str	r7, [sp, #0]
 8018fee:	4633      	mov	r3, r6
 8018ff0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8018ff2:	4621      	mov	r1, r4
 8018ff4:	4628      	mov	r0, r5
 8018ff6:	f000 f9d1 	bl	801939c <_printf_common>
 8018ffa:	3001      	adds	r0, #1
 8018ffc:	f040 8089 	bne.w	8019112 <_printf_float+0x1aa>
 8019000:	f04f 30ff 	mov.w	r0, #4294967295
 8019004:	b00d      	add	sp, #52	@ 0x34
 8019006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801900a:	eeb4 0b40 	vcmp.f64	d0, d0
 801900e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019012:	d709      	bvc.n	8019028 <_printf_float+0xc0>
 8019014:	ee10 3a90 	vmov	r3, s1
 8019018:	2b00      	cmp	r3, #0
 801901a:	bfbc      	itt	lt
 801901c:	232d      	movlt	r3, #45	@ 0x2d
 801901e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8019022:	497d      	ldr	r1, [pc, #500]	@ (8019218 <_printf_float+0x2b0>)
 8019024:	4b7d      	ldr	r3, [pc, #500]	@ (801921c <_printf_float+0x2b4>)
 8019026:	e7d5      	b.n	8018fd4 <_printf_float+0x6c>
 8019028:	6863      	ldr	r3, [r4, #4]
 801902a:	1c59      	adds	r1, r3, #1
 801902c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8019030:	d139      	bne.n	80190a6 <_printf_float+0x13e>
 8019032:	2306      	movs	r3, #6
 8019034:	6063      	str	r3, [r4, #4]
 8019036:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801903a:	2300      	movs	r3, #0
 801903c:	6022      	str	r2, [r4, #0]
 801903e:	9303      	str	r3, [sp, #12]
 8019040:	ab0a      	add	r3, sp, #40	@ 0x28
 8019042:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8019046:	ab09      	add	r3, sp, #36	@ 0x24
 8019048:	9300      	str	r3, [sp, #0]
 801904a:	6861      	ldr	r1, [r4, #4]
 801904c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8019050:	4628      	mov	r0, r5
 8019052:	f7ff fefb 	bl	8018e4c <__cvt>
 8019056:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801905a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801905c:	4680      	mov	r8, r0
 801905e:	d129      	bne.n	80190b4 <_printf_float+0x14c>
 8019060:	1cc8      	adds	r0, r1, #3
 8019062:	db02      	blt.n	801906a <_printf_float+0x102>
 8019064:	6863      	ldr	r3, [r4, #4]
 8019066:	4299      	cmp	r1, r3
 8019068:	dd41      	ble.n	80190ee <_printf_float+0x186>
 801906a:	f1a9 0902 	sub.w	r9, r9, #2
 801906e:	fa5f f989 	uxtb.w	r9, r9
 8019072:	3901      	subs	r1, #1
 8019074:	464a      	mov	r2, r9
 8019076:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801907a:	9109      	str	r1, [sp, #36]	@ 0x24
 801907c:	f7ff ff3a 	bl	8018ef4 <__exponent>
 8019080:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019082:	1813      	adds	r3, r2, r0
 8019084:	2a01      	cmp	r2, #1
 8019086:	4682      	mov	sl, r0
 8019088:	6123      	str	r3, [r4, #16]
 801908a:	dc02      	bgt.n	8019092 <_printf_float+0x12a>
 801908c:	6822      	ldr	r2, [r4, #0]
 801908e:	07d2      	lsls	r2, r2, #31
 8019090:	d501      	bpl.n	8019096 <_printf_float+0x12e>
 8019092:	3301      	adds	r3, #1
 8019094:	6123      	str	r3, [r4, #16]
 8019096:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801909a:	2b00      	cmp	r3, #0
 801909c:	d0a6      	beq.n	8018fec <_printf_float+0x84>
 801909e:	232d      	movs	r3, #45	@ 0x2d
 80190a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80190a4:	e7a2      	b.n	8018fec <_printf_float+0x84>
 80190a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80190aa:	d1c4      	bne.n	8019036 <_printf_float+0xce>
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d1c2      	bne.n	8019036 <_printf_float+0xce>
 80190b0:	2301      	movs	r3, #1
 80190b2:	e7bf      	b.n	8019034 <_printf_float+0xcc>
 80190b4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80190b8:	d9db      	bls.n	8019072 <_printf_float+0x10a>
 80190ba:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80190be:	d118      	bne.n	80190f2 <_printf_float+0x18a>
 80190c0:	2900      	cmp	r1, #0
 80190c2:	6863      	ldr	r3, [r4, #4]
 80190c4:	dd0b      	ble.n	80190de <_printf_float+0x176>
 80190c6:	6121      	str	r1, [r4, #16]
 80190c8:	b913      	cbnz	r3, 80190d0 <_printf_float+0x168>
 80190ca:	6822      	ldr	r2, [r4, #0]
 80190cc:	07d0      	lsls	r0, r2, #31
 80190ce:	d502      	bpl.n	80190d6 <_printf_float+0x16e>
 80190d0:	3301      	adds	r3, #1
 80190d2:	440b      	add	r3, r1
 80190d4:	6123      	str	r3, [r4, #16]
 80190d6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80190d8:	f04f 0a00 	mov.w	sl, #0
 80190dc:	e7db      	b.n	8019096 <_printf_float+0x12e>
 80190de:	b913      	cbnz	r3, 80190e6 <_printf_float+0x17e>
 80190e0:	6822      	ldr	r2, [r4, #0]
 80190e2:	07d2      	lsls	r2, r2, #31
 80190e4:	d501      	bpl.n	80190ea <_printf_float+0x182>
 80190e6:	3302      	adds	r3, #2
 80190e8:	e7f4      	b.n	80190d4 <_printf_float+0x16c>
 80190ea:	2301      	movs	r3, #1
 80190ec:	e7f2      	b.n	80190d4 <_printf_float+0x16c>
 80190ee:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80190f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80190f4:	4299      	cmp	r1, r3
 80190f6:	db05      	blt.n	8019104 <_printf_float+0x19c>
 80190f8:	6823      	ldr	r3, [r4, #0]
 80190fa:	6121      	str	r1, [r4, #16]
 80190fc:	07d8      	lsls	r0, r3, #31
 80190fe:	d5ea      	bpl.n	80190d6 <_printf_float+0x16e>
 8019100:	1c4b      	adds	r3, r1, #1
 8019102:	e7e7      	b.n	80190d4 <_printf_float+0x16c>
 8019104:	2900      	cmp	r1, #0
 8019106:	bfd4      	ite	le
 8019108:	f1c1 0202 	rsble	r2, r1, #2
 801910c:	2201      	movgt	r2, #1
 801910e:	4413      	add	r3, r2
 8019110:	e7e0      	b.n	80190d4 <_printf_float+0x16c>
 8019112:	6823      	ldr	r3, [r4, #0]
 8019114:	055a      	lsls	r2, r3, #21
 8019116:	d407      	bmi.n	8019128 <_printf_float+0x1c0>
 8019118:	6923      	ldr	r3, [r4, #16]
 801911a:	4642      	mov	r2, r8
 801911c:	4631      	mov	r1, r6
 801911e:	4628      	mov	r0, r5
 8019120:	47b8      	blx	r7
 8019122:	3001      	adds	r0, #1
 8019124:	d12a      	bne.n	801917c <_printf_float+0x214>
 8019126:	e76b      	b.n	8019000 <_printf_float+0x98>
 8019128:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801912c:	f240 80e0 	bls.w	80192f0 <_printf_float+0x388>
 8019130:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8019134:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801913c:	d133      	bne.n	80191a6 <_printf_float+0x23e>
 801913e:	4a38      	ldr	r2, [pc, #224]	@ (8019220 <_printf_float+0x2b8>)
 8019140:	2301      	movs	r3, #1
 8019142:	4631      	mov	r1, r6
 8019144:	4628      	mov	r0, r5
 8019146:	47b8      	blx	r7
 8019148:	3001      	adds	r0, #1
 801914a:	f43f af59 	beq.w	8019000 <_printf_float+0x98>
 801914e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8019152:	4543      	cmp	r3, r8
 8019154:	db02      	blt.n	801915c <_printf_float+0x1f4>
 8019156:	6823      	ldr	r3, [r4, #0]
 8019158:	07d8      	lsls	r0, r3, #31
 801915a:	d50f      	bpl.n	801917c <_printf_float+0x214>
 801915c:	9b05      	ldr	r3, [sp, #20]
 801915e:	465a      	mov	r2, fp
 8019160:	4631      	mov	r1, r6
 8019162:	4628      	mov	r0, r5
 8019164:	47b8      	blx	r7
 8019166:	3001      	adds	r0, #1
 8019168:	f43f af4a 	beq.w	8019000 <_printf_float+0x98>
 801916c:	f04f 0900 	mov.w	r9, #0
 8019170:	f108 38ff 	add.w	r8, r8, #4294967295
 8019174:	f104 0a1a 	add.w	sl, r4, #26
 8019178:	45c8      	cmp	r8, r9
 801917a:	dc09      	bgt.n	8019190 <_printf_float+0x228>
 801917c:	6823      	ldr	r3, [r4, #0]
 801917e:	079b      	lsls	r3, r3, #30
 8019180:	f100 8107 	bmi.w	8019392 <_printf_float+0x42a>
 8019184:	68e0      	ldr	r0, [r4, #12]
 8019186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019188:	4298      	cmp	r0, r3
 801918a:	bfb8      	it	lt
 801918c:	4618      	movlt	r0, r3
 801918e:	e739      	b.n	8019004 <_printf_float+0x9c>
 8019190:	2301      	movs	r3, #1
 8019192:	4652      	mov	r2, sl
 8019194:	4631      	mov	r1, r6
 8019196:	4628      	mov	r0, r5
 8019198:	47b8      	blx	r7
 801919a:	3001      	adds	r0, #1
 801919c:	f43f af30 	beq.w	8019000 <_printf_float+0x98>
 80191a0:	f109 0901 	add.w	r9, r9, #1
 80191a4:	e7e8      	b.n	8019178 <_printf_float+0x210>
 80191a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	dc3b      	bgt.n	8019224 <_printf_float+0x2bc>
 80191ac:	4a1c      	ldr	r2, [pc, #112]	@ (8019220 <_printf_float+0x2b8>)
 80191ae:	2301      	movs	r3, #1
 80191b0:	4631      	mov	r1, r6
 80191b2:	4628      	mov	r0, r5
 80191b4:	47b8      	blx	r7
 80191b6:	3001      	adds	r0, #1
 80191b8:	f43f af22 	beq.w	8019000 <_printf_float+0x98>
 80191bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80191c0:	ea59 0303 	orrs.w	r3, r9, r3
 80191c4:	d102      	bne.n	80191cc <_printf_float+0x264>
 80191c6:	6823      	ldr	r3, [r4, #0]
 80191c8:	07d9      	lsls	r1, r3, #31
 80191ca:	d5d7      	bpl.n	801917c <_printf_float+0x214>
 80191cc:	9b05      	ldr	r3, [sp, #20]
 80191ce:	465a      	mov	r2, fp
 80191d0:	4631      	mov	r1, r6
 80191d2:	4628      	mov	r0, r5
 80191d4:	47b8      	blx	r7
 80191d6:	3001      	adds	r0, #1
 80191d8:	f43f af12 	beq.w	8019000 <_printf_float+0x98>
 80191dc:	f04f 0a00 	mov.w	sl, #0
 80191e0:	f104 0b1a 	add.w	fp, r4, #26
 80191e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191e6:	425b      	negs	r3, r3
 80191e8:	4553      	cmp	r3, sl
 80191ea:	dc01      	bgt.n	80191f0 <_printf_float+0x288>
 80191ec:	464b      	mov	r3, r9
 80191ee:	e794      	b.n	801911a <_printf_float+0x1b2>
 80191f0:	2301      	movs	r3, #1
 80191f2:	465a      	mov	r2, fp
 80191f4:	4631      	mov	r1, r6
 80191f6:	4628      	mov	r0, r5
 80191f8:	47b8      	blx	r7
 80191fa:	3001      	adds	r0, #1
 80191fc:	f43f af00 	beq.w	8019000 <_printf_float+0x98>
 8019200:	f10a 0a01 	add.w	sl, sl, #1
 8019204:	e7ee      	b.n	80191e4 <_printf_float+0x27c>
 8019206:	bf00      	nop
 8019208:	ffffffff 	.word	0xffffffff
 801920c:	7fefffff 	.word	0x7fefffff
 8019210:	0801d8f9 	.word	0x0801d8f9
 8019214:	0801d8fd 	.word	0x0801d8fd
 8019218:	0801d901 	.word	0x0801d901
 801921c:	0801d905 	.word	0x0801d905
 8019220:	0801d909 	.word	0x0801d909
 8019224:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019226:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801922a:	4553      	cmp	r3, sl
 801922c:	bfa8      	it	ge
 801922e:	4653      	movge	r3, sl
 8019230:	2b00      	cmp	r3, #0
 8019232:	4699      	mov	r9, r3
 8019234:	dc37      	bgt.n	80192a6 <_printf_float+0x33e>
 8019236:	2300      	movs	r3, #0
 8019238:	9307      	str	r3, [sp, #28]
 801923a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801923e:	f104 021a 	add.w	r2, r4, #26
 8019242:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019244:	9907      	ldr	r1, [sp, #28]
 8019246:	9306      	str	r3, [sp, #24]
 8019248:	eba3 0309 	sub.w	r3, r3, r9
 801924c:	428b      	cmp	r3, r1
 801924e:	dc31      	bgt.n	80192b4 <_printf_float+0x34c>
 8019250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019252:	459a      	cmp	sl, r3
 8019254:	dc3b      	bgt.n	80192ce <_printf_float+0x366>
 8019256:	6823      	ldr	r3, [r4, #0]
 8019258:	07da      	lsls	r2, r3, #31
 801925a:	d438      	bmi.n	80192ce <_printf_float+0x366>
 801925c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801925e:	ebaa 0903 	sub.w	r9, sl, r3
 8019262:	9b06      	ldr	r3, [sp, #24]
 8019264:	ebaa 0303 	sub.w	r3, sl, r3
 8019268:	4599      	cmp	r9, r3
 801926a:	bfa8      	it	ge
 801926c:	4699      	movge	r9, r3
 801926e:	f1b9 0f00 	cmp.w	r9, #0
 8019272:	dc34      	bgt.n	80192de <_printf_float+0x376>
 8019274:	f04f 0800 	mov.w	r8, #0
 8019278:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801927c:	f104 0b1a 	add.w	fp, r4, #26
 8019280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019282:	ebaa 0303 	sub.w	r3, sl, r3
 8019286:	eba3 0309 	sub.w	r3, r3, r9
 801928a:	4543      	cmp	r3, r8
 801928c:	f77f af76 	ble.w	801917c <_printf_float+0x214>
 8019290:	2301      	movs	r3, #1
 8019292:	465a      	mov	r2, fp
 8019294:	4631      	mov	r1, r6
 8019296:	4628      	mov	r0, r5
 8019298:	47b8      	blx	r7
 801929a:	3001      	adds	r0, #1
 801929c:	f43f aeb0 	beq.w	8019000 <_printf_float+0x98>
 80192a0:	f108 0801 	add.w	r8, r8, #1
 80192a4:	e7ec      	b.n	8019280 <_printf_float+0x318>
 80192a6:	4642      	mov	r2, r8
 80192a8:	4631      	mov	r1, r6
 80192aa:	4628      	mov	r0, r5
 80192ac:	47b8      	blx	r7
 80192ae:	3001      	adds	r0, #1
 80192b0:	d1c1      	bne.n	8019236 <_printf_float+0x2ce>
 80192b2:	e6a5      	b.n	8019000 <_printf_float+0x98>
 80192b4:	2301      	movs	r3, #1
 80192b6:	4631      	mov	r1, r6
 80192b8:	4628      	mov	r0, r5
 80192ba:	9206      	str	r2, [sp, #24]
 80192bc:	47b8      	blx	r7
 80192be:	3001      	adds	r0, #1
 80192c0:	f43f ae9e 	beq.w	8019000 <_printf_float+0x98>
 80192c4:	9b07      	ldr	r3, [sp, #28]
 80192c6:	9a06      	ldr	r2, [sp, #24]
 80192c8:	3301      	adds	r3, #1
 80192ca:	9307      	str	r3, [sp, #28]
 80192cc:	e7b9      	b.n	8019242 <_printf_float+0x2da>
 80192ce:	9b05      	ldr	r3, [sp, #20]
 80192d0:	465a      	mov	r2, fp
 80192d2:	4631      	mov	r1, r6
 80192d4:	4628      	mov	r0, r5
 80192d6:	47b8      	blx	r7
 80192d8:	3001      	adds	r0, #1
 80192da:	d1bf      	bne.n	801925c <_printf_float+0x2f4>
 80192dc:	e690      	b.n	8019000 <_printf_float+0x98>
 80192de:	9a06      	ldr	r2, [sp, #24]
 80192e0:	464b      	mov	r3, r9
 80192e2:	4442      	add	r2, r8
 80192e4:	4631      	mov	r1, r6
 80192e6:	4628      	mov	r0, r5
 80192e8:	47b8      	blx	r7
 80192ea:	3001      	adds	r0, #1
 80192ec:	d1c2      	bne.n	8019274 <_printf_float+0x30c>
 80192ee:	e687      	b.n	8019000 <_printf_float+0x98>
 80192f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80192f4:	f1b9 0f01 	cmp.w	r9, #1
 80192f8:	dc01      	bgt.n	80192fe <_printf_float+0x396>
 80192fa:	07db      	lsls	r3, r3, #31
 80192fc:	d536      	bpl.n	801936c <_printf_float+0x404>
 80192fe:	2301      	movs	r3, #1
 8019300:	4642      	mov	r2, r8
 8019302:	4631      	mov	r1, r6
 8019304:	4628      	mov	r0, r5
 8019306:	47b8      	blx	r7
 8019308:	3001      	adds	r0, #1
 801930a:	f43f ae79 	beq.w	8019000 <_printf_float+0x98>
 801930e:	9b05      	ldr	r3, [sp, #20]
 8019310:	465a      	mov	r2, fp
 8019312:	4631      	mov	r1, r6
 8019314:	4628      	mov	r0, r5
 8019316:	47b8      	blx	r7
 8019318:	3001      	adds	r0, #1
 801931a:	f43f ae71 	beq.w	8019000 <_printf_float+0x98>
 801931e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8019322:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801932a:	f109 39ff 	add.w	r9, r9, #4294967295
 801932e:	d018      	beq.n	8019362 <_printf_float+0x3fa>
 8019330:	464b      	mov	r3, r9
 8019332:	f108 0201 	add.w	r2, r8, #1
 8019336:	4631      	mov	r1, r6
 8019338:	4628      	mov	r0, r5
 801933a:	47b8      	blx	r7
 801933c:	3001      	adds	r0, #1
 801933e:	d10c      	bne.n	801935a <_printf_float+0x3f2>
 8019340:	e65e      	b.n	8019000 <_printf_float+0x98>
 8019342:	2301      	movs	r3, #1
 8019344:	465a      	mov	r2, fp
 8019346:	4631      	mov	r1, r6
 8019348:	4628      	mov	r0, r5
 801934a:	47b8      	blx	r7
 801934c:	3001      	adds	r0, #1
 801934e:	f43f ae57 	beq.w	8019000 <_printf_float+0x98>
 8019352:	f108 0801 	add.w	r8, r8, #1
 8019356:	45c8      	cmp	r8, r9
 8019358:	dbf3      	blt.n	8019342 <_printf_float+0x3da>
 801935a:	4653      	mov	r3, sl
 801935c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019360:	e6dc      	b.n	801911c <_printf_float+0x1b4>
 8019362:	f04f 0800 	mov.w	r8, #0
 8019366:	f104 0b1a 	add.w	fp, r4, #26
 801936a:	e7f4      	b.n	8019356 <_printf_float+0x3ee>
 801936c:	2301      	movs	r3, #1
 801936e:	4642      	mov	r2, r8
 8019370:	e7e1      	b.n	8019336 <_printf_float+0x3ce>
 8019372:	2301      	movs	r3, #1
 8019374:	464a      	mov	r2, r9
 8019376:	4631      	mov	r1, r6
 8019378:	4628      	mov	r0, r5
 801937a:	47b8      	blx	r7
 801937c:	3001      	adds	r0, #1
 801937e:	f43f ae3f 	beq.w	8019000 <_printf_float+0x98>
 8019382:	f108 0801 	add.w	r8, r8, #1
 8019386:	68e3      	ldr	r3, [r4, #12]
 8019388:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801938a:	1a5b      	subs	r3, r3, r1
 801938c:	4543      	cmp	r3, r8
 801938e:	dcf0      	bgt.n	8019372 <_printf_float+0x40a>
 8019390:	e6f8      	b.n	8019184 <_printf_float+0x21c>
 8019392:	f04f 0800 	mov.w	r8, #0
 8019396:	f104 0919 	add.w	r9, r4, #25
 801939a:	e7f4      	b.n	8019386 <_printf_float+0x41e>

0801939c <_printf_common>:
 801939c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193a0:	4616      	mov	r6, r2
 80193a2:	4698      	mov	r8, r3
 80193a4:	688a      	ldr	r2, [r1, #8]
 80193a6:	690b      	ldr	r3, [r1, #16]
 80193a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80193ac:	4293      	cmp	r3, r2
 80193ae:	bfb8      	it	lt
 80193b0:	4613      	movlt	r3, r2
 80193b2:	6033      	str	r3, [r6, #0]
 80193b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80193b8:	4607      	mov	r7, r0
 80193ba:	460c      	mov	r4, r1
 80193bc:	b10a      	cbz	r2, 80193c2 <_printf_common+0x26>
 80193be:	3301      	adds	r3, #1
 80193c0:	6033      	str	r3, [r6, #0]
 80193c2:	6823      	ldr	r3, [r4, #0]
 80193c4:	0699      	lsls	r1, r3, #26
 80193c6:	bf42      	ittt	mi
 80193c8:	6833      	ldrmi	r3, [r6, #0]
 80193ca:	3302      	addmi	r3, #2
 80193cc:	6033      	strmi	r3, [r6, #0]
 80193ce:	6825      	ldr	r5, [r4, #0]
 80193d0:	f015 0506 	ands.w	r5, r5, #6
 80193d4:	d106      	bne.n	80193e4 <_printf_common+0x48>
 80193d6:	f104 0a19 	add.w	sl, r4, #25
 80193da:	68e3      	ldr	r3, [r4, #12]
 80193dc:	6832      	ldr	r2, [r6, #0]
 80193de:	1a9b      	subs	r3, r3, r2
 80193e0:	42ab      	cmp	r3, r5
 80193e2:	dc26      	bgt.n	8019432 <_printf_common+0x96>
 80193e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80193e8:	6822      	ldr	r2, [r4, #0]
 80193ea:	3b00      	subs	r3, #0
 80193ec:	bf18      	it	ne
 80193ee:	2301      	movne	r3, #1
 80193f0:	0692      	lsls	r2, r2, #26
 80193f2:	d42b      	bmi.n	801944c <_printf_common+0xb0>
 80193f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80193f8:	4641      	mov	r1, r8
 80193fa:	4638      	mov	r0, r7
 80193fc:	47c8      	blx	r9
 80193fe:	3001      	adds	r0, #1
 8019400:	d01e      	beq.n	8019440 <_printf_common+0xa4>
 8019402:	6823      	ldr	r3, [r4, #0]
 8019404:	6922      	ldr	r2, [r4, #16]
 8019406:	f003 0306 	and.w	r3, r3, #6
 801940a:	2b04      	cmp	r3, #4
 801940c:	bf02      	ittt	eq
 801940e:	68e5      	ldreq	r5, [r4, #12]
 8019410:	6833      	ldreq	r3, [r6, #0]
 8019412:	1aed      	subeq	r5, r5, r3
 8019414:	68a3      	ldr	r3, [r4, #8]
 8019416:	bf0c      	ite	eq
 8019418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801941c:	2500      	movne	r5, #0
 801941e:	4293      	cmp	r3, r2
 8019420:	bfc4      	itt	gt
 8019422:	1a9b      	subgt	r3, r3, r2
 8019424:	18ed      	addgt	r5, r5, r3
 8019426:	2600      	movs	r6, #0
 8019428:	341a      	adds	r4, #26
 801942a:	42b5      	cmp	r5, r6
 801942c:	d11a      	bne.n	8019464 <_printf_common+0xc8>
 801942e:	2000      	movs	r0, #0
 8019430:	e008      	b.n	8019444 <_printf_common+0xa8>
 8019432:	2301      	movs	r3, #1
 8019434:	4652      	mov	r2, sl
 8019436:	4641      	mov	r1, r8
 8019438:	4638      	mov	r0, r7
 801943a:	47c8      	blx	r9
 801943c:	3001      	adds	r0, #1
 801943e:	d103      	bne.n	8019448 <_printf_common+0xac>
 8019440:	f04f 30ff 	mov.w	r0, #4294967295
 8019444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019448:	3501      	adds	r5, #1
 801944a:	e7c6      	b.n	80193da <_printf_common+0x3e>
 801944c:	18e1      	adds	r1, r4, r3
 801944e:	1c5a      	adds	r2, r3, #1
 8019450:	2030      	movs	r0, #48	@ 0x30
 8019452:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019456:	4422      	add	r2, r4
 8019458:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801945c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019460:	3302      	adds	r3, #2
 8019462:	e7c7      	b.n	80193f4 <_printf_common+0x58>
 8019464:	2301      	movs	r3, #1
 8019466:	4622      	mov	r2, r4
 8019468:	4641      	mov	r1, r8
 801946a:	4638      	mov	r0, r7
 801946c:	47c8      	blx	r9
 801946e:	3001      	adds	r0, #1
 8019470:	d0e6      	beq.n	8019440 <_printf_common+0xa4>
 8019472:	3601      	adds	r6, #1
 8019474:	e7d9      	b.n	801942a <_printf_common+0x8e>
	...

08019478 <_printf_i>:
 8019478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801947c:	7e0f      	ldrb	r7, [r1, #24]
 801947e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019480:	2f78      	cmp	r7, #120	@ 0x78
 8019482:	4691      	mov	r9, r2
 8019484:	4680      	mov	r8, r0
 8019486:	460c      	mov	r4, r1
 8019488:	469a      	mov	sl, r3
 801948a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801948e:	d807      	bhi.n	80194a0 <_printf_i+0x28>
 8019490:	2f62      	cmp	r7, #98	@ 0x62
 8019492:	d80a      	bhi.n	80194aa <_printf_i+0x32>
 8019494:	2f00      	cmp	r7, #0
 8019496:	f000 80d2 	beq.w	801963e <_printf_i+0x1c6>
 801949a:	2f58      	cmp	r7, #88	@ 0x58
 801949c:	f000 80b9 	beq.w	8019612 <_printf_i+0x19a>
 80194a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80194a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80194a8:	e03a      	b.n	8019520 <_printf_i+0xa8>
 80194aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80194ae:	2b15      	cmp	r3, #21
 80194b0:	d8f6      	bhi.n	80194a0 <_printf_i+0x28>
 80194b2:	a101      	add	r1, pc, #4	@ (adr r1, 80194b8 <_printf_i+0x40>)
 80194b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80194b8:	08019511 	.word	0x08019511
 80194bc:	08019525 	.word	0x08019525
 80194c0:	080194a1 	.word	0x080194a1
 80194c4:	080194a1 	.word	0x080194a1
 80194c8:	080194a1 	.word	0x080194a1
 80194cc:	080194a1 	.word	0x080194a1
 80194d0:	08019525 	.word	0x08019525
 80194d4:	080194a1 	.word	0x080194a1
 80194d8:	080194a1 	.word	0x080194a1
 80194dc:	080194a1 	.word	0x080194a1
 80194e0:	080194a1 	.word	0x080194a1
 80194e4:	08019625 	.word	0x08019625
 80194e8:	0801954f 	.word	0x0801954f
 80194ec:	080195df 	.word	0x080195df
 80194f0:	080194a1 	.word	0x080194a1
 80194f4:	080194a1 	.word	0x080194a1
 80194f8:	08019647 	.word	0x08019647
 80194fc:	080194a1 	.word	0x080194a1
 8019500:	0801954f 	.word	0x0801954f
 8019504:	080194a1 	.word	0x080194a1
 8019508:	080194a1 	.word	0x080194a1
 801950c:	080195e7 	.word	0x080195e7
 8019510:	6833      	ldr	r3, [r6, #0]
 8019512:	1d1a      	adds	r2, r3, #4
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	6032      	str	r2, [r6, #0]
 8019518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801951c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019520:	2301      	movs	r3, #1
 8019522:	e09d      	b.n	8019660 <_printf_i+0x1e8>
 8019524:	6833      	ldr	r3, [r6, #0]
 8019526:	6820      	ldr	r0, [r4, #0]
 8019528:	1d19      	adds	r1, r3, #4
 801952a:	6031      	str	r1, [r6, #0]
 801952c:	0606      	lsls	r6, r0, #24
 801952e:	d501      	bpl.n	8019534 <_printf_i+0xbc>
 8019530:	681d      	ldr	r5, [r3, #0]
 8019532:	e003      	b.n	801953c <_printf_i+0xc4>
 8019534:	0645      	lsls	r5, r0, #25
 8019536:	d5fb      	bpl.n	8019530 <_printf_i+0xb8>
 8019538:	f9b3 5000 	ldrsh.w	r5, [r3]
 801953c:	2d00      	cmp	r5, #0
 801953e:	da03      	bge.n	8019548 <_printf_i+0xd0>
 8019540:	232d      	movs	r3, #45	@ 0x2d
 8019542:	426d      	negs	r5, r5
 8019544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019548:	4859      	ldr	r0, [pc, #356]	@ (80196b0 <_printf_i+0x238>)
 801954a:	230a      	movs	r3, #10
 801954c:	e011      	b.n	8019572 <_printf_i+0xfa>
 801954e:	6821      	ldr	r1, [r4, #0]
 8019550:	6833      	ldr	r3, [r6, #0]
 8019552:	0608      	lsls	r0, r1, #24
 8019554:	f853 5b04 	ldr.w	r5, [r3], #4
 8019558:	d402      	bmi.n	8019560 <_printf_i+0xe8>
 801955a:	0649      	lsls	r1, r1, #25
 801955c:	bf48      	it	mi
 801955e:	b2ad      	uxthmi	r5, r5
 8019560:	2f6f      	cmp	r7, #111	@ 0x6f
 8019562:	4853      	ldr	r0, [pc, #332]	@ (80196b0 <_printf_i+0x238>)
 8019564:	6033      	str	r3, [r6, #0]
 8019566:	bf14      	ite	ne
 8019568:	230a      	movne	r3, #10
 801956a:	2308      	moveq	r3, #8
 801956c:	2100      	movs	r1, #0
 801956e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019572:	6866      	ldr	r6, [r4, #4]
 8019574:	60a6      	str	r6, [r4, #8]
 8019576:	2e00      	cmp	r6, #0
 8019578:	bfa2      	ittt	ge
 801957a:	6821      	ldrge	r1, [r4, #0]
 801957c:	f021 0104 	bicge.w	r1, r1, #4
 8019580:	6021      	strge	r1, [r4, #0]
 8019582:	b90d      	cbnz	r5, 8019588 <_printf_i+0x110>
 8019584:	2e00      	cmp	r6, #0
 8019586:	d04b      	beq.n	8019620 <_printf_i+0x1a8>
 8019588:	4616      	mov	r6, r2
 801958a:	fbb5 f1f3 	udiv	r1, r5, r3
 801958e:	fb03 5711 	mls	r7, r3, r1, r5
 8019592:	5dc7      	ldrb	r7, [r0, r7]
 8019594:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019598:	462f      	mov	r7, r5
 801959a:	42bb      	cmp	r3, r7
 801959c:	460d      	mov	r5, r1
 801959e:	d9f4      	bls.n	801958a <_printf_i+0x112>
 80195a0:	2b08      	cmp	r3, #8
 80195a2:	d10b      	bne.n	80195bc <_printf_i+0x144>
 80195a4:	6823      	ldr	r3, [r4, #0]
 80195a6:	07df      	lsls	r7, r3, #31
 80195a8:	d508      	bpl.n	80195bc <_printf_i+0x144>
 80195aa:	6923      	ldr	r3, [r4, #16]
 80195ac:	6861      	ldr	r1, [r4, #4]
 80195ae:	4299      	cmp	r1, r3
 80195b0:	bfde      	ittt	le
 80195b2:	2330      	movle	r3, #48	@ 0x30
 80195b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80195b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80195bc:	1b92      	subs	r2, r2, r6
 80195be:	6122      	str	r2, [r4, #16]
 80195c0:	f8cd a000 	str.w	sl, [sp]
 80195c4:	464b      	mov	r3, r9
 80195c6:	aa03      	add	r2, sp, #12
 80195c8:	4621      	mov	r1, r4
 80195ca:	4640      	mov	r0, r8
 80195cc:	f7ff fee6 	bl	801939c <_printf_common>
 80195d0:	3001      	adds	r0, #1
 80195d2:	d14a      	bne.n	801966a <_printf_i+0x1f2>
 80195d4:	f04f 30ff 	mov.w	r0, #4294967295
 80195d8:	b004      	add	sp, #16
 80195da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195de:	6823      	ldr	r3, [r4, #0]
 80195e0:	f043 0320 	orr.w	r3, r3, #32
 80195e4:	6023      	str	r3, [r4, #0]
 80195e6:	4833      	ldr	r0, [pc, #204]	@ (80196b4 <_printf_i+0x23c>)
 80195e8:	2778      	movs	r7, #120	@ 0x78
 80195ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80195ee:	6823      	ldr	r3, [r4, #0]
 80195f0:	6831      	ldr	r1, [r6, #0]
 80195f2:	061f      	lsls	r7, r3, #24
 80195f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80195f8:	d402      	bmi.n	8019600 <_printf_i+0x188>
 80195fa:	065f      	lsls	r7, r3, #25
 80195fc:	bf48      	it	mi
 80195fe:	b2ad      	uxthmi	r5, r5
 8019600:	6031      	str	r1, [r6, #0]
 8019602:	07d9      	lsls	r1, r3, #31
 8019604:	bf44      	itt	mi
 8019606:	f043 0320 	orrmi.w	r3, r3, #32
 801960a:	6023      	strmi	r3, [r4, #0]
 801960c:	b11d      	cbz	r5, 8019616 <_printf_i+0x19e>
 801960e:	2310      	movs	r3, #16
 8019610:	e7ac      	b.n	801956c <_printf_i+0xf4>
 8019612:	4827      	ldr	r0, [pc, #156]	@ (80196b0 <_printf_i+0x238>)
 8019614:	e7e9      	b.n	80195ea <_printf_i+0x172>
 8019616:	6823      	ldr	r3, [r4, #0]
 8019618:	f023 0320 	bic.w	r3, r3, #32
 801961c:	6023      	str	r3, [r4, #0]
 801961e:	e7f6      	b.n	801960e <_printf_i+0x196>
 8019620:	4616      	mov	r6, r2
 8019622:	e7bd      	b.n	80195a0 <_printf_i+0x128>
 8019624:	6833      	ldr	r3, [r6, #0]
 8019626:	6825      	ldr	r5, [r4, #0]
 8019628:	6961      	ldr	r1, [r4, #20]
 801962a:	1d18      	adds	r0, r3, #4
 801962c:	6030      	str	r0, [r6, #0]
 801962e:	062e      	lsls	r6, r5, #24
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	d501      	bpl.n	8019638 <_printf_i+0x1c0>
 8019634:	6019      	str	r1, [r3, #0]
 8019636:	e002      	b.n	801963e <_printf_i+0x1c6>
 8019638:	0668      	lsls	r0, r5, #25
 801963a:	d5fb      	bpl.n	8019634 <_printf_i+0x1bc>
 801963c:	8019      	strh	r1, [r3, #0]
 801963e:	2300      	movs	r3, #0
 8019640:	6123      	str	r3, [r4, #16]
 8019642:	4616      	mov	r6, r2
 8019644:	e7bc      	b.n	80195c0 <_printf_i+0x148>
 8019646:	6833      	ldr	r3, [r6, #0]
 8019648:	1d1a      	adds	r2, r3, #4
 801964a:	6032      	str	r2, [r6, #0]
 801964c:	681e      	ldr	r6, [r3, #0]
 801964e:	6862      	ldr	r2, [r4, #4]
 8019650:	2100      	movs	r1, #0
 8019652:	4630      	mov	r0, r6
 8019654:	f7e6 fe6c 	bl	8000330 <memchr>
 8019658:	b108      	cbz	r0, 801965e <_printf_i+0x1e6>
 801965a:	1b80      	subs	r0, r0, r6
 801965c:	6060      	str	r0, [r4, #4]
 801965e:	6863      	ldr	r3, [r4, #4]
 8019660:	6123      	str	r3, [r4, #16]
 8019662:	2300      	movs	r3, #0
 8019664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019668:	e7aa      	b.n	80195c0 <_printf_i+0x148>
 801966a:	6923      	ldr	r3, [r4, #16]
 801966c:	4632      	mov	r2, r6
 801966e:	4649      	mov	r1, r9
 8019670:	4640      	mov	r0, r8
 8019672:	47d0      	blx	sl
 8019674:	3001      	adds	r0, #1
 8019676:	d0ad      	beq.n	80195d4 <_printf_i+0x15c>
 8019678:	6823      	ldr	r3, [r4, #0]
 801967a:	079b      	lsls	r3, r3, #30
 801967c:	d413      	bmi.n	80196a6 <_printf_i+0x22e>
 801967e:	68e0      	ldr	r0, [r4, #12]
 8019680:	9b03      	ldr	r3, [sp, #12]
 8019682:	4298      	cmp	r0, r3
 8019684:	bfb8      	it	lt
 8019686:	4618      	movlt	r0, r3
 8019688:	e7a6      	b.n	80195d8 <_printf_i+0x160>
 801968a:	2301      	movs	r3, #1
 801968c:	4632      	mov	r2, r6
 801968e:	4649      	mov	r1, r9
 8019690:	4640      	mov	r0, r8
 8019692:	47d0      	blx	sl
 8019694:	3001      	adds	r0, #1
 8019696:	d09d      	beq.n	80195d4 <_printf_i+0x15c>
 8019698:	3501      	adds	r5, #1
 801969a:	68e3      	ldr	r3, [r4, #12]
 801969c:	9903      	ldr	r1, [sp, #12]
 801969e:	1a5b      	subs	r3, r3, r1
 80196a0:	42ab      	cmp	r3, r5
 80196a2:	dcf2      	bgt.n	801968a <_printf_i+0x212>
 80196a4:	e7eb      	b.n	801967e <_printf_i+0x206>
 80196a6:	2500      	movs	r5, #0
 80196a8:	f104 0619 	add.w	r6, r4, #25
 80196ac:	e7f5      	b.n	801969a <_printf_i+0x222>
 80196ae:	bf00      	nop
 80196b0:	0801d90b 	.word	0x0801d90b
 80196b4:	0801d91c 	.word	0x0801d91c

080196b8 <std>:
 80196b8:	2300      	movs	r3, #0
 80196ba:	b510      	push	{r4, lr}
 80196bc:	4604      	mov	r4, r0
 80196be:	e9c0 3300 	strd	r3, r3, [r0]
 80196c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80196c6:	6083      	str	r3, [r0, #8]
 80196c8:	8181      	strh	r1, [r0, #12]
 80196ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80196cc:	81c2      	strh	r2, [r0, #14]
 80196ce:	6183      	str	r3, [r0, #24]
 80196d0:	4619      	mov	r1, r3
 80196d2:	2208      	movs	r2, #8
 80196d4:	305c      	adds	r0, #92	@ 0x5c
 80196d6:	f000 f914 	bl	8019902 <memset>
 80196da:	4b0d      	ldr	r3, [pc, #52]	@ (8019710 <std+0x58>)
 80196dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80196de:	4b0d      	ldr	r3, [pc, #52]	@ (8019714 <std+0x5c>)
 80196e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80196e2:	4b0d      	ldr	r3, [pc, #52]	@ (8019718 <std+0x60>)
 80196e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80196e6:	4b0d      	ldr	r3, [pc, #52]	@ (801971c <std+0x64>)
 80196e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80196ea:	4b0d      	ldr	r3, [pc, #52]	@ (8019720 <std+0x68>)
 80196ec:	6224      	str	r4, [r4, #32]
 80196ee:	429c      	cmp	r4, r3
 80196f0:	d006      	beq.n	8019700 <std+0x48>
 80196f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80196f6:	4294      	cmp	r4, r2
 80196f8:	d002      	beq.n	8019700 <std+0x48>
 80196fa:	33d0      	adds	r3, #208	@ 0xd0
 80196fc:	429c      	cmp	r4, r3
 80196fe:	d105      	bne.n	801970c <std+0x54>
 8019700:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019708:	f000 b996 	b.w	8019a38 <__retarget_lock_init_recursive>
 801970c:	bd10      	pop	{r4, pc}
 801970e:	bf00      	nop
 8019710:	0801987d 	.word	0x0801987d
 8019714:	0801989f 	.word	0x0801989f
 8019718:	080198d7 	.word	0x080198d7
 801971c:	080198fb 	.word	0x080198fb
 8019720:	24006218 	.word	0x24006218

08019724 <stdio_exit_handler>:
 8019724:	4a02      	ldr	r2, [pc, #8]	@ (8019730 <stdio_exit_handler+0xc>)
 8019726:	4903      	ldr	r1, [pc, #12]	@ (8019734 <stdio_exit_handler+0x10>)
 8019728:	4803      	ldr	r0, [pc, #12]	@ (8019738 <stdio_exit_handler+0x14>)
 801972a:	f000 b869 	b.w	8019800 <_fwalk_sglue>
 801972e:	bf00      	nop
 8019730:	24000104 	.word	0x24000104
 8019734:	0801bbf5 	.word	0x0801bbf5
 8019738:	24000280 	.word	0x24000280

0801973c <cleanup_stdio>:
 801973c:	6841      	ldr	r1, [r0, #4]
 801973e:	4b0c      	ldr	r3, [pc, #48]	@ (8019770 <cleanup_stdio+0x34>)
 8019740:	4299      	cmp	r1, r3
 8019742:	b510      	push	{r4, lr}
 8019744:	4604      	mov	r4, r0
 8019746:	d001      	beq.n	801974c <cleanup_stdio+0x10>
 8019748:	f002 fa54 	bl	801bbf4 <_fflush_r>
 801974c:	68a1      	ldr	r1, [r4, #8]
 801974e:	4b09      	ldr	r3, [pc, #36]	@ (8019774 <cleanup_stdio+0x38>)
 8019750:	4299      	cmp	r1, r3
 8019752:	d002      	beq.n	801975a <cleanup_stdio+0x1e>
 8019754:	4620      	mov	r0, r4
 8019756:	f002 fa4d 	bl	801bbf4 <_fflush_r>
 801975a:	68e1      	ldr	r1, [r4, #12]
 801975c:	4b06      	ldr	r3, [pc, #24]	@ (8019778 <cleanup_stdio+0x3c>)
 801975e:	4299      	cmp	r1, r3
 8019760:	d004      	beq.n	801976c <cleanup_stdio+0x30>
 8019762:	4620      	mov	r0, r4
 8019764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019768:	f002 ba44 	b.w	801bbf4 <_fflush_r>
 801976c:	bd10      	pop	{r4, pc}
 801976e:	bf00      	nop
 8019770:	24006218 	.word	0x24006218
 8019774:	24006280 	.word	0x24006280
 8019778:	240062e8 	.word	0x240062e8

0801977c <global_stdio_init.part.0>:
 801977c:	b510      	push	{r4, lr}
 801977e:	4b0b      	ldr	r3, [pc, #44]	@ (80197ac <global_stdio_init.part.0+0x30>)
 8019780:	4c0b      	ldr	r4, [pc, #44]	@ (80197b0 <global_stdio_init.part.0+0x34>)
 8019782:	4a0c      	ldr	r2, [pc, #48]	@ (80197b4 <global_stdio_init.part.0+0x38>)
 8019784:	601a      	str	r2, [r3, #0]
 8019786:	4620      	mov	r0, r4
 8019788:	2200      	movs	r2, #0
 801978a:	2104      	movs	r1, #4
 801978c:	f7ff ff94 	bl	80196b8 <std>
 8019790:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019794:	2201      	movs	r2, #1
 8019796:	2109      	movs	r1, #9
 8019798:	f7ff ff8e 	bl	80196b8 <std>
 801979c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80197a0:	2202      	movs	r2, #2
 80197a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197a6:	2112      	movs	r1, #18
 80197a8:	f7ff bf86 	b.w	80196b8 <std>
 80197ac:	24006350 	.word	0x24006350
 80197b0:	24006218 	.word	0x24006218
 80197b4:	08019725 	.word	0x08019725

080197b8 <__sfp_lock_acquire>:
 80197b8:	4801      	ldr	r0, [pc, #4]	@ (80197c0 <__sfp_lock_acquire+0x8>)
 80197ba:	f000 b93e 	b.w	8019a3a <__retarget_lock_acquire_recursive>
 80197be:	bf00      	nop
 80197c0:	24006359 	.word	0x24006359

080197c4 <__sfp_lock_release>:
 80197c4:	4801      	ldr	r0, [pc, #4]	@ (80197cc <__sfp_lock_release+0x8>)
 80197c6:	f000 b939 	b.w	8019a3c <__retarget_lock_release_recursive>
 80197ca:	bf00      	nop
 80197cc:	24006359 	.word	0x24006359

080197d0 <__sinit>:
 80197d0:	b510      	push	{r4, lr}
 80197d2:	4604      	mov	r4, r0
 80197d4:	f7ff fff0 	bl	80197b8 <__sfp_lock_acquire>
 80197d8:	6a23      	ldr	r3, [r4, #32]
 80197da:	b11b      	cbz	r3, 80197e4 <__sinit+0x14>
 80197dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197e0:	f7ff bff0 	b.w	80197c4 <__sfp_lock_release>
 80197e4:	4b04      	ldr	r3, [pc, #16]	@ (80197f8 <__sinit+0x28>)
 80197e6:	6223      	str	r3, [r4, #32]
 80197e8:	4b04      	ldr	r3, [pc, #16]	@ (80197fc <__sinit+0x2c>)
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d1f5      	bne.n	80197dc <__sinit+0xc>
 80197f0:	f7ff ffc4 	bl	801977c <global_stdio_init.part.0>
 80197f4:	e7f2      	b.n	80197dc <__sinit+0xc>
 80197f6:	bf00      	nop
 80197f8:	0801973d 	.word	0x0801973d
 80197fc:	24006350 	.word	0x24006350

08019800 <_fwalk_sglue>:
 8019800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019804:	4607      	mov	r7, r0
 8019806:	4688      	mov	r8, r1
 8019808:	4614      	mov	r4, r2
 801980a:	2600      	movs	r6, #0
 801980c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019810:	f1b9 0901 	subs.w	r9, r9, #1
 8019814:	d505      	bpl.n	8019822 <_fwalk_sglue+0x22>
 8019816:	6824      	ldr	r4, [r4, #0]
 8019818:	2c00      	cmp	r4, #0
 801981a:	d1f7      	bne.n	801980c <_fwalk_sglue+0xc>
 801981c:	4630      	mov	r0, r6
 801981e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019822:	89ab      	ldrh	r3, [r5, #12]
 8019824:	2b01      	cmp	r3, #1
 8019826:	d907      	bls.n	8019838 <_fwalk_sglue+0x38>
 8019828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801982c:	3301      	adds	r3, #1
 801982e:	d003      	beq.n	8019838 <_fwalk_sglue+0x38>
 8019830:	4629      	mov	r1, r5
 8019832:	4638      	mov	r0, r7
 8019834:	47c0      	blx	r8
 8019836:	4306      	orrs	r6, r0
 8019838:	3568      	adds	r5, #104	@ 0x68
 801983a:	e7e9      	b.n	8019810 <_fwalk_sglue+0x10>

0801983c <siprintf>:
 801983c:	b40e      	push	{r1, r2, r3}
 801983e:	b500      	push	{lr}
 8019840:	b09c      	sub	sp, #112	@ 0x70
 8019842:	ab1d      	add	r3, sp, #116	@ 0x74
 8019844:	9002      	str	r0, [sp, #8]
 8019846:	9006      	str	r0, [sp, #24]
 8019848:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801984c:	4809      	ldr	r0, [pc, #36]	@ (8019874 <siprintf+0x38>)
 801984e:	9107      	str	r1, [sp, #28]
 8019850:	9104      	str	r1, [sp, #16]
 8019852:	4909      	ldr	r1, [pc, #36]	@ (8019878 <siprintf+0x3c>)
 8019854:	f853 2b04 	ldr.w	r2, [r3], #4
 8019858:	9105      	str	r1, [sp, #20]
 801985a:	6800      	ldr	r0, [r0, #0]
 801985c:	9301      	str	r3, [sp, #4]
 801985e:	a902      	add	r1, sp, #8
 8019860:	f002 f848 	bl	801b8f4 <_svfiprintf_r>
 8019864:	9b02      	ldr	r3, [sp, #8]
 8019866:	2200      	movs	r2, #0
 8019868:	701a      	strb	r2, [r3, #0]
 801986a:	b01c      	add	sp, #112	@ 0x70
 801986c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019870:	b003      	add	sp, #12
 8019872:	4770      	bx	lr
 8019874:	2400027c 	.word	0x2400027c
 8019878:	ffff0208 	.word	0xffff0208

0801987c <__sread>:
 801987c:	b510      	push	{r4, lr}
 801987e:	460c      	mov	r4, r1
 8019880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019884:	f000 f88a 	bl	801999c <_read_r>
 8019888:	2800      	cmp	r0, #0
 801988a:	bfab      	itete	ge
 801988c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801988e:	89a3      	ldrhlt	r3, [r4, #12]
 8019890:	181b      	addge	r3, r3, r0
 8019892:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019896:	bfac      	ite	ge
 8019898:	6563      	strge	r3, [r4, #84]	@ 0x54
 801989a:	81a3      	strhlt	r3, [r4, #12]
 801989c:	bd10      	pop	{r4, pc}

0801989e <__swrite>:
 801989e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198a2:	461f      	mov	r7, r3
 80198a4:	898b      	ldrh	r3, [r1, #12]
 80198a6:	05db      	lsls	r3, r3, #23
 80198a8:	4605      	mov	r5, r0
 80198aa:	460c      	mov	r4, r1
 80198ac:	4616      	mov	r6, r2
 80198ae:	d505      	bpl.n	80198bc <__swrite+0x1e>
 80198b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198b4:	2302      	movs	r3, #2
 80198b6:	2200      	movs	r2, #0
 80198b8:	f000 f85e 	bl	8019978 <_lseek_r>
 80198bc:	89a3      	ldrh	r3, [r4, #12]
 80198be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80198c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80198c6:	81a3      	strh	r3, [r4, #12]
 80198c8:	4632      	mov	r2, r6
 80198ca:	463b      	mov	r3, r7
 80198cc:	4628      	mov	r0, r5
 80198ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80198d2:	f000 b875 	b.w	80199c0 <_write_r>

080198d6 <__sseek>:
 80198d6:	b510      	push	{r4, lr}
 80198d8:	460c      	mov	r4, r1
 80198da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198de:	f000 f84b 	bl	8019978 <_lseek_r>
 80198e2:	1c43      	adds	r3, r0, #1
 80198e4:	89a3      	ldrh	r3, [r4, #12]
 80198e6:	bf15      	itete	ne
 80198e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80198ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80198ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80198f2:	81a3      	strheq	r3, [r4, #12]
 80198f4:	bf18      	it	ne
 80198f6:	81a3      	strhne	r3, [r4, #12]
 80198f8:	bd10      	pop	{r4, pc}

080198fa <__sclose>:
 80198fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198fe:	f000 b82b 	b.w	8019958 <_close_r>

08019902 <memset>:
 8019902:	4402      	add	r2, r0
 8019904:	4603      	mov	r3, r0
 8019906:	4293      	cmp	r3, r2
 8019908:	d100      	bne.n	801990c <memset+0xa>
 801990a:	4770      	bx	lr
 801990c:	f803 1b01 	strb.w	r1, [r3], #1
 8019910:	e7f9      	b.n	8019906 <memset+0x4>

08019912 <strchr>:
 8019912:	b2c9      	uxtb	r1, r1
 8019914:	4603      	mov	r3, r0
 8019916:	4618      	mov	r0, r3
 8019918:	f813 2b01 	ldrb.w	r2, [r3], #1
 801991c:	b112      	cbz	r2, 8019924 <strchr+0x12>
 801991e:	428a      	cmp	r2, r1
 8019920:	d1f9      	bne.n	8019916 <strchr+0x4>
 8019922:	4770      	bx	lr
 8019924:	2900      	cmp	r1, #0
 8019926:	bf18      	it	ne
 8019928:	2000      	movne	r0, #0
 801992a:	4770      	bx	lr

0801992c <strncmp>:
 801992c:	b510      	push	{r4, lr}
 801992e:	b16a      	cbz	r2, 801994c <strncmp+0x20>
 8019930:	3901      	subs	r1, #1
 8019932:	1884      	adds	r4, r0, r2
 8019934:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019938:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801993c:	429a      	cmp	r2, r3
 801993e:	d103      	bne.n	8019948 <strncmp+0x1c>
 8019940:	42a0      	cmp	r0, r4
 8019942:	d001      	beq.n	8019948 <strncmp+0x1c>
 8019944:	2a00      	cmp	r2, #0
 8019946:	d1f5      	bne.n	8019934 <strncmp+0x8>
 8019948:	1ad0      	subs	r0, r2, r3
 801994a:	bd10      	pop	{r4, pc}
 801994c:	4610      	mov	r0, r2
 801994e:	e7fc      	b.n	801994a <strncmp+0x1e>

08019950 <_localeconv_r>:
 8019950:	4800      	ldr	r0, [pc, #0]	@ (8019954 <_localeconv_r+0x4>)
 8019952:	4770      	bx	lr
 8019954:	24000200 	.word	0x24000200

08019958 <_close_r>:
 8019958:	b538      	push	{r3, r4, r5, lr}
 801995a:	4d06      	ldr	r5, [pc, #24]	@ (8019974 <_close_r+0x1c>)
 801995c:	2300      	movs	r3, #0
 801995e:	4604      	mov	r4, r0
 8019960:	4608      	mov	r0, r1
 8019962:	602b      	str	r3, [r5, #0]
 8019964:	f7e9 f9ec 	bl	8002d40 <_close>
 8019968:	1c43      	adds	r3, r0, #1
 801996a:	d102      	bne.n	8019972 <_close_r+0x1a>
 801996c:	682b      	ldr	r3, [r5, #0]
 801996e:	b103      	cbz	r3, 8019972 <_close_r+0x1a>
 8019970:	6023      	str	r3, [r4, #0]
 8019972:	bd38      	pop	{r3, r4, r5, pc}
 8019974:	24006354 	.word	0x24006354

08019978 <_lseek_r>:
 8019978:	b538      	push	{r3, r4, r5, lr}
 801997a:	4d07      	ldr	r5, [pc, #28]	@ (8019998 <_lseek_r+0x20>)
 801997c:	4604      	mov	r4, r0
 801997e:	4608      	mov	r0, r1
 8019980:	4611      	mov	r1, r2
 8019982:	2200      	movs	r2, #0
 8019984:	602a      	str	r2, [r5, #0]
 8019986:	461a      	mov	r2, r3
 8019988:	f7e9 fa01 	bl	8002d8e <_lseek>
 801998c:	1c43      	adds	r3, r0, #1
 801998e:	d102      	bne.n	8019996 <_lseek_r+0x1e>
 8019990:	682b      	ldr	r3, [r5, #0]
 8019992:	b103      	cbz	r3, 8019996 <_lseek_r+0x1e>
 8019994:	6023      	str	r3, [r4, #0]
 8019996:	bd38      	pop	{r3, r4, r5, pc}
 8019998:	24006354 	.word	0x24006354

0801999c <_read_r>:
 801999c:	b538      	push	{r3, r4, r5, lr}
 801999e:	4d07      	ldr	r5, [pc, #28]	@ (80199bc <_read_r+0x20>)
 80199a0:	4604      	mov	r4, r0
 80199a2:	4608      	mov	r0, r1
 80199a4:	4611      	mov	r1, r2
 80199a6:	2200      	movs	r2, #0
 80199a8:	602a      	str	r2, [r5, #0]
 80199aa:	461a      	mov	r2, r3
 80199ac:	f7e9 f98f 	bl	8002cce <_read>
 80199b0:	1c43      	adds	r3, r0, #1
 80199b2:	d102      	bne.n	80199ba <_read_r+0x1e>
 80199b4:	682b      	ldr	r3, [r5, #0]
 80199b6:	b103      	cbz	r3, 80199ba <_read_r+0x1e>
 80199b8:	6023      	str	r3, [r4, #0]
 80199ba:	bd38      	pop	{r3, r4, r5, pc}
 80199bc:	24006354 	.word	0x24006354

080199c0 <_write_r>:
 80199c0:	b538      	push	{r3, r4, r5, lr}
 80199c2:	4d07      	ldr	r5, [pc, #28]	@ (80199e0 <_write_r+0x20>)
 80199c4:	4604      	mov	r4, r0
 80199c6:	4608      	mov	r0, r1
 80199c8:	4611      	mov	r1, r2
 80199ca:	2200      	movs	r2, #0
 80199cc:	602a      	str	r2, [r5, #0]
 80199ce:	461a      	mov	r2, r3
 80199d0:	f7e9 f99a 	bl	8002d08 <_write>
 80199d4:	1c43      	adds	r3, r0, #1
 80199d6:	d102      	bne.n	80199de <_write_r+0x1e>
 80199d8:	682b      	ldr	r3, [r5, #0]
 80199da:	b103      	cbz	r3, 80199de <_write_r+0x1e>
 80199dc:	6023      	str	r3, [r4, #0]
 80199de:	bd38      	pop	{r3, r4, r5, pc}
 80199e0:	24006354 	.word	0x24006354

080199e4 <__errno>:
 80199e4:	4b01      	ldr	r3, [pc, #4]	@ (80199ec <__errno+0x8>)
 80199e6:	6818      	ldr	r0, [r3, #0]
 80199e8:	4770      	bx	lr
 80199ea:	bf00      	nop
 80199ec:	2400027c 	.word	0x2400027c

080199f0 <__libc_init_array>:
 80199f0:	b570      	push	{r4, r5, r6, lr}
 80199f2:	4d0d      	ldr	r5, [pc, #52]	@ (8019a28 <__libc_init_array+0x38>)
 80199f4:	4c0d      	ldr	r4, [pc, #52]	@ (8019a2c <__libc_init_array+0x3c>)
 80199f6:	1b64      	subs	r4, r4, r5
 80199f8:	10a4      	asrs	r4, r4, #2
 80199fa:	2600      	movs	r6, #0
 80199fc:	42a6      	cmp	r6, r4
 80199fe:	d109      	bne.n	8019a14 <__libc_init_array+0x24>
 8019a00:	4d0b      	ldr	r5, [pc, #44]	@ (8019a30 <__libc_init_array+0x40>)
 8019a02:	4c0c      	ldr	r4, [pc, #48]	@ (8019a34 <__libc_init_array+0x44>)
 8019a04:	f003 fb18 	bl	801d038 <_init>
 8019a08:	1b64      	subs	r4, r4, r5
 8019a0a:	10a4      	asrs	r4, r4, #2
 8019a0c:	2600      	movs	r6, #0
 8019a0e:	42a6      	cmp	r6, r4
 8019a10:	d105      	bne.n	8019a1e <__libc_init_array+0x2e>
 8019a12:	bd70      	pop	{r4, r5, r6, pc}
 8019a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a18:	4798      	blx	r3
 8019a1a:	3601      	adds	r6, #1
 8019a1c:	e7ee      	b.n	80199fc <__libc_init_array+0xc>
 8019a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a22:	4798      	blx	r3
 8019a24:	3601      	adds	r6, #1
 8019a26:	e7f2      	b.n	8019a0e <__libc_init_array+0x1e>
 8019a28:	0801dee8 	.word	0x0801dee8
 8019a2c:	0801dee8 	.word	0x0801dee8
 8019a30:	0801dee8 	.word	0x0801dee8
 8019a34:	0801deec 	.word	0x0801deec

08019a38 <__retarget_lock_init_recursive>:
 8019a38:	4770      	bx	lr

08019a3a <__retarget_lock_acquire_recursive>:
 8019a3a:	4770      	bx	lr

08019a3c <__retarget_lock_release_recursive>:
 8019a3c:	4770      	bx	lr

08019a3e <memcpy>:
 8019a3e:	440a      	add	r2, r1
 8019a40:	4291      	cmp	r1, r2
 8019a42:	f100 33ff 	add.w	r3, r0, #4294967295
 8019a46:	d100      	bne.n	8019a4a <memcpy+0xc>
 8019a48:	4770      	bx	lr
 8019a4a:	b510      	push	{r4, lr}
 8019a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019a54:	4291      	cmp	r1, r2
 8019a56:	d1f9      	bne.n	8019a4c <memcpy+0xe>
 8019a58:	bd10      	pop	{r4, pc}
 8019a5a:	0000      	movs	r0, r0
 8019a5c:	0000      	movs	r0, r0
	...

08019a60 <nan>:
 8019a60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8019a68 <nan+0x8>
 8019a64:	4770      	bx	lr
 8019a66:	bf00      	nop
 8019a68:	00000000 	.word	0x00000000
 8019a6c:	7ff80000 	.word	0x7ff80000

08019a70 <quorem>:
 8019a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a74:	6903      	ldr	r3, [r0, #16]
 8019a76:	690c      	ldr	r4, [r1, #16]
 8019a78:	42a3      	cmp	r3, r4
 8019a7a:	4607      	mov	r7, r0
 8019a7c:	db7e      	blt.n	8019b7c <quorem+0x10c>
 8019a7e:	3c01      	subs	r4, #1
 8019a80:	f101 0814 	add.w	r8, r1, #20
 8019a84:	00a3      	lsls	r3, r4, #2
 8019a86:	f100 0514 	add.w	r5, r0, #20
 8019a8a:	9300      	str	r3, [sp, #0]
 8019a8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019a90:	9301      	str	r3, [sp, #4]
 8019a92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019a96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019a9a:	3301      	adds	r3, #1
 8019a9c:	429a      	cmp	r2, r3
 8019a9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019aa2:	fbb2 f6f3 	udiv	r6, r2, r3
 8019aa6:	d32e      	bcc.n	8019b06 <quorem+0x96>
 8019aa8:	f04f 0a00 	mov.w	sl, #0
 8019aac:	46c4      	mov	ip, r8
 8019aae:	46ae      	mov	lr, r5
 8019ab0:	46d3      	mov	fp, sl
 8019ab2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8019ab6:	b298      	uxth	r0, r3
 8019ab8:	fb06 a000 	mla	r0, r6, r0, sl
 8019abc:	0c02      	lsrs	r2, r0, #16
 8019abe:	0c1b      	lsrs	r3, r3, #16
 8019ac0:	fb06 2303 	mla	r3, r6, r3, r2
 8019ac4:	f8de 2000 	ldr.w	r2, [lr]
 8019ac8:	b280      	uxth	r0, r0
 8019aca:	b292      	uxth	r2, r2
 8019acc:	1a12      	subs	r2, r2, r0
 8019ace:	445a      	add	r2, fp
 8019ad0:	f8de 0000 	ldr.w	r0, [lr]
 8019ad4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019ad8:	b29b      	uxth	r3, r3
 8019ada:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8019ade:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8019ae2:	b292      	uxth	r2, r2
 8019ae4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019ae8:	45e1      	cmp	r9, ip
 8019aea:	f84e 2b04 	str.w	r2, [lr], #4
 8019aee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8019af2:	d2de      	bcs.n	8019ab2 <quorem+0x42>
 8019af4:	9b00      	ldr	r3, [sp, #0]
 8019af6:	58eb      	ldr	r3, [r5, r3]
 8019af8:	b92b      	cbnz	r3, 8019b06 <quorem+0x96>
 8019afa:	9b01      	ldr	r3, [sp, #4]
 8019afc:	3b04      	subs	r3, #4
 8019afe:	429d      	cmp	r5, r3
 8019b00:	461a      	mov	r2, r3
 8019b02:	d32f      	bcc.n	8019b64 <quorem+0xf4>
 8019b04:	613c      	str	r4, [r7, #16]
 8019b06:	4638      	mov	r0, r7
 8019b08:	f001 fca0 	bl	801b44c <__mcmp>
 8019b0c:	2800      	cmp	r0, #0
 8019b0e:	db25      	blt.n	8019b5c <quorem+0xec>
 8019b10:	4629      	mov	r1, r5
 8019b12:	2000      	movs	r0, #0
 8019b14:	f858 2b04 	ldr.w	r2, [r8], #4
 8019b18:	f8d1 c000 	ldr.w	ip, [r1]
 8019b1c:	fa1f fe82 	uxth.w	lr, r2
 8019b20:	fa1f f38c 	uxth.w	r3, ip
 8019b24:	eba3 030e 	sub.w	r3, r3, lr
 8019b28:	4403      	add	r3, r0
 8019b2a:	0c12      	lsrs	r2, r2, #16
 8019b2c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8019b30:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8019b34:	b29b      	uxth	r3, r3
 8019b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019b3a:	45c1      	cmp	r9, r8
 8019b3c:	f841 3b04 	str.w	r3, [r1], #4
 8019b40:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019b44:	d2e6      	bcs.n	8019b14 <quorem+0xa4>
 8019b46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019b4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019b4e:	b922      	cbnz	r2, 8019b5a <quorem+0xea>
 8019b50:	3b04      	subs	r3, #4
 8019b52:	429d      	cmp	r5, r3
 8019b54:	461a      	mov	r2, r3
 8019b56:	d30b      	bcc.n	8019b70 <quorem+0x100>
 8019b58:	613c      	str	r4, [r7, #16]
 8019b5a:	3601      	adds	r6, #1
 8019b5c:	4630      	mov	r0, r6
 8019b5e:	b003      	add	sp, #12
 8019b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b64:	6812      	ldr	r2, [r2, #0]
 8019b66:	3b04      	subs	r3, #4
 8019b68:	2a00      	cmp	r2, #0
 8019b6a:	d1cb      	bne.n	8019b04 <quorem+0x94>
 8019b6c:	3c01      	subs	r4, #1
 8019b6e:	e7c6      	b.n	8019afe <quorem+0x8e>
 8019b70:	6812      	ldr	r2, [r2, #0]
 8019b72:	3b04      	subs	r3, #4
 8019b74:	2a00      	cmp	r2, #0
 8019b76:	d1ef      	bne.n	8019b58 <quorem+0xe8>
 8019b78:	3c01      	subs	r4, #1
 8019b7a:	e7ea      	b.n	8019b52 <quorem+0xe2>
 8019b7c:	2000      	movs	r0, #0
 8019b7e:	e7ee      	b.n	8019b5e <quorem+0xee>

08019b80 <_dtoa_r>:
 8019b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b84:	ed2d 8b02 	vpush	{d8}
 8019b88:	69c7      	ldr	r7, [r0, #28]
 8019b8a:	b091      	sub	sp, #68	@ 0x44
 8019b8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019b90:	ec55 4b10 	vmov	r4, r5, d0
 8019b94:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8019b96:	9107      	str	r1, [sp, #28]
 8019b98:	4681      	mov	r9, r0
 8019b9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8019b9c:	930d      	str	r3, [sp, #52]	@ 0x34
 8019b9e:	b97f      	cbnz	r7, 8019bc0 <_dtoa_r+0x40>
 8019ba0:	2010      	movs	r0, #16
 8019ba2:	f001 f8c7 	bl	801ad34 <malloc>
 8019ba6:	4602      	mov	r2, r0
 8019ba8:	f8c9 001c 	str.w	r0, [r9, #28]
 8019bac:	b920      	cbnz	r0, 8019bb8 <_dtoa_r+0x38>
 8019bae:	4ba0      	ldr	r3, [pc, #640]	@ (8019e30 <_dtoa_r+0x2b0>)
 8019bb0:	21ef      	movs	r1, #239	@ 0xef
 8019bb2:	48a0      	ldr	r0, [pc, #640]	@ (8019e34 <_dtoa_r+0x2b4>)
 8019bb4:	f002 f870 	bl	801bc98 <__assert_func>
 8019bb8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8019bbc:	6007      	str	r7, [r0, #0]
 8019bbe:	60c7      	str	r7, [r0, #12]
 8019bc0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019bc4:	6819      	ldr	r1, [r3, #0]
 8019bc6:	b159      	cbz	r1, 8019be0 <_dtoa_r+0x60>
 8019bc8:	685a      	ldr	r2, [r3, #4]
 8019bca:	604a      	str	r2, [r1, #4]
 8019bcc:	2301      	movs	r3, #1
 8019bce:	4093      	lsls	r3, r2
 8019bd0:	608b      	str	r3, [r1, #8]
 8019bd2:	4648      	mov	r0, r9
 8019bd4:	f001 f9b6 	bl	801af44 <_Bfree>
 8019bd8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019bdc:	2200      	movs	r2, #0
 8019bde:	601a      	str	r2, [r3, #0]
 8019be0:	1e2b      	subs	r3, r5, #0
 8019be2:	bfbb      	ittet	lt
 8019be4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019be8:	9303      	strlt	r3, [sp, #12]
 8019bea:	2300      	movge	r3, #0
 8019bec:	2201      	movlt	r2, #1
 8019bee:	bfac      	ite	ge
 8019bf0:	6033      	strge	r3, [r6, #0]
 8019bf2:	6032      	strlt	r2, [r6, #0]
 8019bf4:	4b90      	ldr	r3, [pc, #576]	@ (8019e38 <_dtoa_r+0x2b8>)
 8019bf6:	9e03      	ldr	r6, [sp, #12]
 8019bf8:	43b3      	bics	r3, r6
 8019bfa:	d110      	bne.n	8019c1e <_dtoa_r+0x9e>
 8019bfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019bfe:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019c02:	6013      	str	r3, [r2, #0]
 8019c04:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8019c08:	4323      	orrs	r3, r4
 8019c0a:	f000 84de 	beq.w	801a5ca <_dtoa_r+0xa4a>
 8019c0e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019c10:	4f8a      	ldr	r7, [pc, #552]	@ (8019e3c <_dtoa_r+0x2bc>)
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	f000 84e0 	beq.w	801a5d8 <_dtoa_r+0xa58>
 8019c18:	1cfb      	adds	r3, r7, #3
 8019c1a:	f000 bcdb 	b.w	801a5d4 <_dtoa_r+0xa54>
 8019c1e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019c22:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c2a:	d10a      	bne.n	8019c42 <_dtoa_r+0xc2>
 8019c2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019c2e:	2301      	movs	r3, #1
 8019c30:	6013      	str	r3, [r2, #0]
 8019c32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019c34:	b113      	cbz	r3, 8019c3c <_dtoa_r+0xbc>
 8019c36:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019c38:	4b81      	ldr	r3, [pc, #516]	@ (8019e40 <_dtoa_r+0x2c0>)
 8019c3a:	6013      	str	r3, [r2, #0]
 8019c3c:	4f81      	ldr	r7, [pc, #516]	@ (8019e44 <_dtoa_r+0x2c4>)
 8019c3e:	f000 bccb 	b.w	801a5d8 <_dtoa_r+0xa58>
 8019c42:	aa0e      	add	r2, sp, #56	@ 0x38
 8019c44:	a90f      	add	r1, sp, #60	@ 0x3c
 8019c46:	4648      	mov	r0, r9
 8019c48:	eeb0 0b48 	vmov.f64	d0, d8
 8019c4c:	f001 fd1e 	bl	801b68c <__d2b>
 8019c50:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8019c54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019c56:	9001      	str	r0, [sp, #4]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d045      	beq.n	8019ce8 <_dtoa_r+0x168>
 8019c5c:	eeb0 7b48 	vmov.f64	d7, d8
 8019c60:	ee18 1a90 	vmov	r1, s17
 8019c64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019c68:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8019c6c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8019c70:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8019c74:	2500      	movs	r5, #0
 8019c76:	ee07 1a90 	vmov	s15, r1
 8019c7a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8019c7e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019e18 <_dtoa_r+0x298>
 8019c82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019c86:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8019e20 <_dtoa_r+0x2a0>
 8019c8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019c8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019e28 <_dtoa_r+0x2a8>
 8019c92:	ee07 3a90 	vmov	s15, r3
 8019c96:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8019c9a:	eeb0 7b46 	vmov.f64	d7, d6
 8019c9e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019ca2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019ca6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8019caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cae:	ee16 8a90 	vmov	r8, s13
 8019cb2:	d508      	bpl.n	8019cc6 <_dtoa_r+0x146>
 8019cb4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019cb8:	eeb4 6b47 	vcmp.f64	d6, d7
 8019cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cc0:	bf18      	it	ne
 8019cc2:	f108 38ff 	addne.w	r8, r8, #4294967295
 8019cc6:	f1b8 0f16 	cmp.w	r8, #22
 8019cca:	d82b      	bhi.n	8019d24 <_dtoa_r+0x1a4>
 8019ccc:	495e      	ldr	r1, [pc, #376]	@ (8019e48 <_dtoa_r+0x2c8>)
 8019cce:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8019cd2:	ed91 7b00 	vldr	d7, [r1]
 8019cd6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cde:	d501      	bpl.n	8019ce4 <_dtoa_r+0x164>
 8019ce0:	f108 38ff 	add.w	r8, r8, #4294967295
 8019ce4:	2100      	movs	r1, #0
 8019ce6:	e01e      	b.n	8019d26 <_dtoa_r+0x1a6>
 8019ce8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019cea:	4413      	add	r3, r2
 8019cec:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8019cf0:	2920      	cmp	r1, #32
 8019cf2:	bfc1      	itttt	gt
 8019cf4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8019cf8:	408e      	lslgt	r6, r1
 8019cfa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8019cfe:	fa24 f101 	lsrgt.w	r1, r4, r1
 8019d02:	bfd6      	itet	le
 8019d04:	f1c1 0120 	rsble	r1, r1, #32
 8019d08:	4331      	orrgt	r1, r6
 8019d0a:	fa04 f101 	lslle.w	r1, r4, r1
 8019d0e:	ee07 1a90 	vmov	s15, r1
 8019d12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019d16:	3b01      	subs	r3, #1
 8019d18:	ee17 1a90 	vmov	r1, s15
 8019d1c:	2501      	movs	r5, #1
 8019d1e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8019d22:	e7a8      	b.n	8019c76 <_dtoa_r+0xf6>
 8019d24:	2101      	movs	r1, #1
 8019d26:	1ad2      	subs	r2, r2, r3
 8019d28:	1e53      	subs	r3, r2, #1
 8019d2a:	9306      	str	r3, [sp, #24]
 8019d2c:	bf45      	ittet	mi
 8019d2e:	f1c2 0301 	rsbmi	r3, r2, #1
 8019d32:	9305      	strmi	r3, [sp, #20]
 8019d34:	2300      	movpl	r3, #0
 8019d36:	2300      	movmi	r3, #0
 8019d38:	bf4c      	ite	mi
 8019d3a:	9306      	strmi	r3, [sp, #24]
 8019d3c:	9305      	strpl	r3, [sp, #20]
 8019d3e:	f1b8 0f00 	cmp.w	r8, #0
 8019d42:	910c      	str	r1, [sp, #48]	@ 0x30
 8019d44:	db18      	blt.n	8019d78 <_dtoa_r+0x1f8>
 8019d46:	9b06      	ldr	r3, [sp, #24]
 8019d48:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8019d4c:	4443      	add	r3, r8
 8019d4e:	9306      	str	r3, [sp, #24]
 8019d50:	2300      	movs	r3, #0
 8019d52:	9a07      	ldr	r2, [sp, #28]
 8019d54:	2a09      	cmp	r2, #9
 8019d56:	d849      	bhi.n	8019dec <_dtoa_r+0x26c>
 8019d58:	2a05      	cmp	r2, #5
 8019d5a:	bfc4      	itt	gt
 8019d5c:	3a04      	subgt	r2, #4
 8019d5e:	9207      	strgt	r2, [sp, #28]
 8019d60:	9a07      	ldr	r2, [sp, #28]
 8019d62:	f1a2 0202 	sub.w	r2, r2, #2
 8019d66:	bfcc      	ite	gt
 8019d68:	2400      	movgt	r4, #0
 8019d6a:	2401      	movle	r4, #1
 8019d6c:	2a03      	cmp	r2, #3
 8019d6e:	d848      	bhi.n	8019e02 <_dtoa_r+0x282>
 8019d70:	e8df f002 	tbb	[pc, r2]
 8019d74:	3a2c2e0b 	.word	0x3a2c2e0b
 8019d78:	9b05      	ldr	r3, [sp, #20]
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	eba3 0308 	sub.w	r3, r3, r8
 8019d80:	9305      	str	r3, [sp, #20]
 8019d82:	920a      	str	r2, [sp, #40]	@ 0x28
 8019d84:	f1c8 0300 	rsb	r3, r8, #0
 8019d88:	e7e3      	b.n	8019d52 <_dtoa_r+0x1d2>
 8019d8a:	2200      	movs	r2, #0
 8019d8c:	9208      	str	r2, [sp, #32]
 8019d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019d90:	2a00      	cmp	r2, #0
 8019d92:	dc39      	bgt.n	8019e08 <_dtoa_r+0x288>
 8019d94:	f04f 0b01 	mov.w	fp, #1
 8019d98:	46da      	mov	sl, fp
 8019d9a:	465a      	mov	r2, fp
 8019d9c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8019da0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8019da4:	2100      	movs	r1, #0
 8019da6:	2004      	movs	r0, #4
 8019da8:	f100 0614 	add.w	r6, r0, #20
 8019dac:	4296      	cmp	r6, r2
 8019dae:	d930      	bls.n	8019e12 <_dtoa_r+0x292>
 8019db0:	6079      	str	r1, [r7, #4]
 8019db2:	4648      	mov	r0, r9
 8019db4:	9304      	str	r3, [sp, #16]
 8019db6:	f001 f885 	bl	801aec4 <_Balloc>
 8019dba:	9b04      	ldr	r3, [sp, #16]
 8019dbc:	4607      	mov	r7, r0
 8019dbe:	2800      	cmp	r0, #0
 8019dc0:	d146      	bne.n	8019e50 <_dtoa_r+0x2d0>
 8019dc2:	4b22      	ldr	r3, [pc, #136]	@ (8019e4c <_dtoa_r+0x2cc>)
 8019dc4:	4602      	mov	r2, r0
 8019dc6:	f240 11af 	movw	r1, #431	@ 0x1af
 8019dca:	e6f2      	b.n	8019bb2 <_dtoa_r+0x32>
 8019dcc:	2201      	movs	r2, #1
 8019dce:	e7dd      	b.n	8019d8c <_dtoa_r+0x20c>
 8019dd0:	2200      	movs	r2, #0
 8019dd2:	9208      	str	r2, [sp, #32]
 8019dd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019dd6:	eb08 0b02 	add.w	fp, r8, r2
 8019dda:	f10b 0a01 	add.w	sl, fp, #1
 8019dde:	4652      	mov	r2, sl
 8019de0:	2a01      	cmp	r2, #1
 8019de2:	bfb8      	it	lt
 8019de4:	2201      	movlt	r2, #1
 8019de6:	e7db      	b.n	8019da0 <_dtoa_r+0x220>
 8019de8:	2201      	movs	r2, #1
 8019dea:	e7f2      	b.n	8019dd2 <_dtoa_r+0x252>
 8019dec:	2401      	movs	r4, #1
 8019dee:	2200      	movs	r2, #0
 8019df0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8019df4:	f04f 3bff 	mov.w	fp, #4294967295
 8019df8:	2100      	movs	r1, #0
 8019dfa:	46da      	mov	sl, fp
 8019dfc:	2212      	movs	r2, #18
 8019dfe:	9109      	str	r1, [sp, #36]	@ 0x24
 8019e00:	e7ce      	b.n	8019da0 <_dtoa_r+0x220>
 8019e02:	2201      	movs	r2, #1
 8019e04:	9208      	str	r2, [sp, #32]
 8019e06:	e7f5      	b.n	8019df4 <_dtoa_r+0x274>
 8019e08:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8019e0c:	46da      	mov	sl, fp
 8019e0e:	465a      	mov	r2, fp
 8019e10:	e7c6      	b.n	8019da0 <_dtoa_r+0x220>
 8019e12:	3101      	adds	r1, #1
 8019e14:	0040      	lsls	r0, r0, #1
 8019e16:	e7c7      	b.n	8019da8 <_dtoa_r+0x228>
 8019e18:	636f4361 	.word	0x636f4361
 8019e1c:	3fd287a7 	.word	0x3fd287a7
 8019e20:	8b60c8b3 	.word	0x8b60c8b3
 8019e24:	3fc68a28 	.word	0x3fc68a28
 8019e28:	509f79fb 	.word	0x509f79fb
 8019e2c:	3fd34413 	.word	0x3fd34413
 8019e30:	0801d942 	.word	0x0801d942
 8019e34:	0801d959 	.word	0x0801d959
 8019e38:	7ff00000 	.word	0x7ff00000
 8019e3c:	0801d93e 	.word	0x0801d93e
 8019e40:	0801d90a 	.word	0x0801d90a
 8019e44:	0801d909 	.word	0x0801d909
 8019e48:	0801dab0 	.word	0x0801dab0
 8019e4c:	0801d9b1 	.word	0x0801d9b1
 8019e50:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8019e54:	f1ba 0f0e 	cmp.w	sl, #14
 8019e58:	6010      	str	r0, [r2, #0]
 8019e5a:	d86f      	bhi.n	8019f3c <_dtoa_r+0x3bc>
 8019e5c:	2c00      	cmp	r4, #0
 8019e5e:	d06d      	beq.n	8019f3c <_dtoa_r+0x3bc>
 8019e60:	f1b8 0f00 	cmp.w	r8, #0
 8019e64:	f340 80c2 	ble.w	8019fec <_dtoa_r+0x46c>
 8019e68:	4aca      	ldr	r2, [pc, #808]	@ (801a194 <_dtoa_r+0x614>)
 8019e6a:	f008 010f 	and.w	r1, r8, #15
 8019e6e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019e72:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8019e76:	ed92 7b00 	vldr	d7, [r2]
 8019e7a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8019e7e:	f000 80a9 	beq.w	8019fd4 <_dtoa_r+0x454>
 8019e82:	4ac5      	ldr	r2, [pc, #788]	@ (801a198 <_dtoa_r+0x618>)
 8019e84:	ed92 6b08 	vldr	d6, [r2, #32]
 8019e88:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8019e8c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019e90:	f001 010f 	and.w	r1, r1, #15
 8019e94:	2203      	movs	r2, #3
 8019e96:	48c0      	ldr	r0, [pc, #768]	@ (801a198 <_dtoa_r+0x618>)
 8019e98:	2900      	cmp	r1, #0
 8019e9a:	f040 809d 	bne.w	8019fd8 <_dtoa_r+0x458>
 8019e9e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019ea2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019ea6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019eaa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019eac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019eb0:	2900      	cmp	r1, #0
 8019eb2:	f000 80c1 	beq.w	801a038 <_dtoa_r+0x4b8>
 8019eb6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8019eba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ec2:	f140 80b9 	bpl.w	801a038 <_dtoa_r+0x4b8>
 8019ec6:	f1ba 0f00 	cmp.w	sl, #0
 8019eca:	f000 80b5 	beq.w	801a038 <_dtoa_r+0x4b8>
 8019ece:	f1bb 0f00 	cmp.w	fp, #0
 8019ed2:	dd31      	ble.n	8019f38 <_dtoa_r+0x3b8>
 8019ed4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8019ed8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019edc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019ee0:	f108 31ff 	add.w	r1, r8, #4294967295
 8019ee4:	9104      	str	r1, [sp, #16]
 8019ee6:	3201      	adds	r2, #1
 8019ee8:	465c      	mov	r4, fp
 8019eea:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019eee:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8019ef2:	ee07 2a90 	vmov	s15, r2
 8019ef6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019efa:	eea7 5b06 	vfma.f64	d5, d7, d6
 8019efe:	ee15 2a90 	vmov	r2, s11
 8019f02:	ec51 0b15 	vmov	r0, r1, d5
 8019f06:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8019f0a:	2c00      	cmp	r4, #0
 8019f0c:	f040 8098 	bne.w	801a040 <_dtoa_r+0x4c0>
 8019f10:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8019f14:	ee36 6b47 	vsub.f64	d6, d6, d7
 8019f18:	ec41 0b17 	vmov	d7, r0, r1
 8019f1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f24:	f300 8261 	bgt.w	801a3ea <_dtoa_r+0x86a>
 8019f28:	eeb1 7b47 	vneg.f64	d7, d7
 8019f2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f34:	f100 80f5 	bmi.w	801a122 <_dtoa_r+0x5a2>
 8019f38:	ed8d 8b02 	vstr	d8, [sp, #8]
 8019f3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019f3e:	2a00      	cmp	r2, #0
 8019f40:	f2c0 812c 	blt.w	801a19c <_dtoa_r+0x61c>
 8019f44:	f1b8 0f0e 	cmp.w	r8, #14
 8019f48:	f300 8128 	bgt.w	801a19c <_dtoa_r+0x61c>
 8019f4c:	4b91      	ldr	r3, [pc, #580]	@ (801a194 <_dtoa_r+0x614>)
 8019f4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019f52:	ed93 6b00 	vldr	d6, [r3]
 8019f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	da03      	bge.n	8019f64 <_dtoa_r+0x3e4>
 8019f5c:	f1ba 0f00 	cmp.w	sl, #0
 8019f60:	f340 80d2 	ble.w	801a108 <_dtoa_r+0x588>
 8019f64:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8019f68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019f6c:	463e      	mov	r6, r7
 8019f6e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019f72:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8019f76:	ee15 3a10 	vmov	r3, s10
 8019f7a:	3330      	adds	r3, #48	@ 0x30
 8019f7c:	f806 3b01 	strb.w	r3, [r6], #1
 8019f80:	1bf3      	subs	r3, r6, r7
 8019f82:	459a      	cmp	sl, r3
 8019f84:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019f88:	eea3 7b46 	vfms.f64	d7, d3, d6
 8019f8c:	f040 80f8 	bne.w	801a180 <_dtoa_r+0x600>
 8019f90:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019f94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f9c:	f300 80dd 	bgt.w	801a15a <_dtoa_r+0x5da>
 8019fa0:	eeb4 7b46 	vcmp.f64	d7, d6
 8019fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fa8:	d104      	bne.n	8019fb4 <_dtoa_r+0x434>
 8019faa:	ee15 3a10 	vmov	r3, s10
 8019fae:	07db      	lsls	r3, r3, #31
 8019fb0:	f100 80d3 	bmi.w	801a15a <_dtoa_r+0x5da>
 8019fb4:	9901      	ldr	r1, [sp, #4]
 8019fb6:	4648      	mov	r0, r9
 8019fb8:	f000 ffc4 	bl	801af44 <_Bfree>
 8019fbc:	2300      	movs	r3, #0
 8019fbe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019fc0:	7033      	strb	r3, [r6, #0]
 8019fc2:	f108 0301 	add.w	r3, r8, #1
 8019fc6:	6013      	str	r3, [r2, #0]
 8019fc8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	f000 8304 	beq.w	801a5d8 <_dtoa_r+0xa58>
 8019fd0:	601e      	str	r6, [r3, #0]
 8019fd2:	e301      	b.n	801a5d8 <_dtoa_r+0xa58>
 8019fd4:	2202      	movs	r2, #2
 8019fd6:	e75e      	b.n	8019e96 <_dtoa_r+0x316>
 8019fd8:	07cc      	lsls	r4, r1, #31
 8019fda:	d504      	bpl.n	8019fe6 <_dtoa_r+0x466>
 8019fdc:	ed90 6b00 	vldr	d6, [r0]
 8019fe0:	3201      	adds	r2, #1
 8019fe2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019fe6:	1049      	asrs	r1, r1, #1
 8019fe8:	3008      	adds	r0, #8
 8019fea:	e755      	b.n	8019e98 <_dtoa_r+0x318>
 8019fec:	d022      	beq.n	801a034 <_dtoa_r+0x4b4>
 8019fee:	f1c8 0100 	rsb	r1, r8, #0
 8019ff2:	4a68      	ldr	r2, [pc, #416]	@ (801a194 <_dtoa_r+0x614>)
 8019ff4:	f001 000f 	and.w	r0, r1, #15
 8019ff8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8019ffc:	ed92 7b00 	vldr	d7, [r2]
 801a000:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a004:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a008:	4863      	ldr	r0, [pc, #396]	@ (801a198 <_dtoa_r+0x618>)
 801a00a:	1109      	asrs	r1, r1, #4
 801a00c:	2400      	movs	r4, #0
 801a00e:	2202      	movs	r2, #2
 801a010:	b929      	cbnz	r1, 801a01e <_dtoa_r+0x49e>
 801a012:	2c00      	cmp	r4, #0
 801a014:	f43f af49 	beq.w	8019eaa <_dtoa_r+0x32a>
 801a018:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a01c:	e745      	b.n	8019eaa <_dtoa_r+0x32a>
 801a01e:	07ce      	lsls	r6, r1, #31
 801a020:	d505      	bpl.n	801a02e <_dtoa_r+0x4ae>
 801a022:	ed90 6b00 	vldr	d6, [r0]
 801a026:	3201      	adds	r2, #1
 801a028:	2401      	movs	r4, #1
 801a02a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a02e:	1049      	asrs	r1, r1, #1
 801a030:	3008      	adds	r0, #8
 801a032:	e7ed      	b.n	801a010 <_dtoa_r+0x490>
 801a034:	2202      	movs	r2, #2
 801a036:	e738      	b.n	8019eaa <_dtoa_r+0x32a>
 801a038:	f8cd 8010 	str.w	r8, [sp, #16]
 801a03c:	4654      	mov	r4, sl
 801a03e:	e754      	b.n	8019eea <_dtoa_r+0x36a>
 801a040:	4a54      	ldr	r2, [pc, #336]	@ (801a194 <_dtoa_r+0x614>)
 801a042:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801a046:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a04a:	9a08      	ldr	r2, [sp, #32]
 801a04c:	ec41 0b17 	vmov	d7, r0, r1
 801a050:	443c      	add	r4, r7
 801a052:	b34a      	cbz	r2, 801a0a8 <_dtoa_r+0x528>
 801a054:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801a058:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801a05c:	463e      	mov	r6, r7
 801a05e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a062:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a066:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a06a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a06e:	ee14 2a90 	vmov	r2, s9
 801a072:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a076:	3230      	adds	r2, #48	@ 0x30
 801a078:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a07c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a084:	f806 2b01 	strb.w	r2, [r6], #1
 801a088:	d438      	bmi.n	801a0fc <_dtoa_r+0x57c>
 801a08a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a08e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a096:	d462      	bmi.n	801a15e <_dtoa_r+0x5de>
 801a098:	42a6      	cmp	r6, r4
 801a09a:	f43f af4d 	beq.w	8019f38 <_dtoa_r+0x3b8>
 801a09e:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a0a2:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a0a6:	e7e0      	b.n	801a06a <_dtoa_r+0x4ea>
 801a0a8:	4621      	mov	r1, r4
 801a0aa:	463e      	mov	r6, r7
 801a0ac:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a0b0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a0b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a0b8:	ee14 2a90 	vmov	r2, s9
 801a0bc:	3230      	adds	r2, #48	@ 0x30
 801a0be:	f806 2b01 	strb.w	r2, [r6], #1
 801a0c2:	42a6      	cmp	r6, r4
 801a0c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a0c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a0cc:	d119      	bne.n	801a102 <_dtoa_r+0x582>
 801a0ce:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801a0d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a0d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0de:	dc3e      	bgt.n	801a15e <_dtoa_r+0x5de>
 801a0e0:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a0e4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0ec:	f57f af24 	bpl.w	8019f38 <_dtoa_r+0x3b8>
 801a0f0:	460e      	mov	r6, r1
 801a0f2:	3901      	subs	r1, #1
 801a0f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a0f8:	2b30      	cmp	r3, #48	@ 0x30
 801a0fa:	d0f9      	beq.n	801a0f0 <_dtoa_r+0x570>
 801a0fc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a100:	e758      	b.n	8019fb4 <_dtoa_r+0x434>
 801a102:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a106:	e7d5      	b.n	801a0b4 <_dtoa_r+0x534>
 801a108:	d10b      	bne.n	801a122 <_dtoa_r+0x5a2>
 801a10a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a10e:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a112:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a116:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a11e:	f2c0 8161 	blt.w	801a3e4 <_dtoa_r+0x864>
 801a122:	2400      	movs	r4, #0
 801a124:	4625      	mov	r5, r4
 801a126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a128:	43db      	mvns	r3, r3
 801a12a:	9304      	str	r3, [sp, #16]
 801a12c:	463e      	mov	r6, r7
 801a12e:	f04f 0800 	mov.w	r8, #0
 801a132:	4621      	mov	r1, r4
 801a134:	4648      	mov	r0, r9
 801a136:	f000 ff05 	bl	801af44 <_Bfree>
 801a13a:	2d00      	cmp	r5, #0
 801a13c:	d0de      	beq.n	801a0fc <_dtoa_r+0x57c>
 801a13e:	f1b8 0f00 	cmp.w	r8, #0
 801a142:	d005      	beq.n	801a150 <_dtoa_r+0x5d0>
 801a144:	45a8      	cmp	r8, r5
 801a146:	d003      	beq.n	801a150 <_dtoa_r+0x5d0>
 801a148:	4641      	mov	r1, r8
 801a14a:	4648      	mov	r0, r9
 801a14c:	f000 fefa 	bl	801af44 <_Bfree>
 801a150:	4629      	mov	r1, r5
 801a152:	4648      	mov	r0, r9
 801a154:	f000 fef6 	bl	801af44 <_Bfree>
 801a158:	e7d0      	b.n	801a0fc <_dtoa_r+0x57c>
 801a15a:	f8cd 8010 	str.w	r8, [sp, #16]
 801a15e:	4633      	mov	r3, r6
 801a160:	461e      	mov	r6, r3
 801a162:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a166:	2a39      	cmp	r2, #57	@ 0x39
 801a168:	d106      	bne.n	801a178 <_dtoa_r+0x5f8>
 801a16a:	429f      	cmp	r7, r3
 801a16c:	d1f8      	bne.n	801a160 <_dtoa_r+0x5e0>
 801a16e:	9a04      	ldr	r2, [sp, #16]
 801a170:	3201      	adds	r2, #1
 801a172:	9204      	str	r2, [sp, #16]
 801a174:	2230      	movs	r2, #48	@ 0x30
 801a176:	703a      	strb	r2, [r7, #0]
 801a178:	781a      	ldrb	r2, [r3, #0]
 801a17a:	3201      	adds	r2, #1
 801a17c:	701a      	strb	r2, [r3, #0]
 801a17e:	e7bd      	b.n	801a0fc <_dtoa_r+0x57c>
 801a180:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a184:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a18c:	f47f aeef 	bne.w	8019f6e <_dtoa_r+0x3ee>
 801a190:	e710      	b.n	8019fb4 <_dtoa_r+0x434>
 801a192:	bf00      	nop
 801a194:	0801dab0 	.word	0x0801dab0
 801a198:	0801da88 	.word	0x0801da88
 801a19c:	9908      	ldr	r1, [sp, #32]
 801a19e:	2900      	cmp	r1, #0
 801a1a0:	f000 80e3 	beq.w	801a36a <_dtoa_r+0x7ea>
 801a1a4:	9907      	ldr	r1, [sp, #28]
 801a1a6:	2901      	cmp	r1, #1
 801a1a8:	f300 80c8 	bgt.w	801a33c <_dtoa_r+0x7bc>
 801a1ac:	2d00      	cmp	r5, #0
 801a1ae:	f000 80c1 	beq.w	801a334 <_dtoa_r+0x7b4>
 801a1b2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801a1b6:	9e05      	ldr	r6, [sp, #20]
 801a1b8:	461c      	mov	r4, r3
 801a1ba:	9304      	str	r3, [sp, #16]
 801a1bc:	9b05      	ldr	r3, [sp, #20]
 801a1be:	4413      	add	r3, r2
 801a1c0:	9305      	str	r3, [sp, #20]
 801a1c2:	9b06      	ldr	r3, [sp, #24]
 801a1c4:	2101      	movs	r1, #1
 801a1c6:	4413      	add	r3, r2
 801a1c8:	4648      	mov	r0, r9
 801a1ca:	9306      	str	r3, [sp, #24]
 801a1cc:	f000 ffb8 	bl	801b140 <__i2b>
 801a1d0:	9b04      	ldr	r3, [sp, #16]
 801a1d2:	4605      	mov	r5, r0
 801a1d4:	b166      	cbz	r6, 801a1f0 <_dtoa_r+0x670>
 801a1d6:	9a06      	ldr	r2, [sp, #24]
 801a1d8:	2a00      	cmp	r2, #0
 801a1da:	dd09      	ble.n	801a1f0 <_dtoa_r+0x670>
 801a1dc:	42b2      	cmp	r2, r6
 801a1de:	9905      	ldr	r1, [sp, #20]
 801a1e0:	bfa8      	it	ge
 801a1e2:	4632      	movge	r2, r6
 801a1e4:	1a89      	subs	r1, r1, r2
 801a1e6:	9105      	str	r1, [sp, #20]
 801a1e8:	9906      	ldr	r1, [sp, #24]
 801a1ea:	1ab6      	subs	r6, r6, r2
 801a1ec:	1a8a      	subs	r2, r1, r2
 801a1ee:	9206      	str	r2, [sp, #24]
 801a1f0:	b1fb      	cbz	r3, 801a232 <_dtoa_r+0x6b2>
 801a1f2:	9a08      	ldr	r2, [sp, #32]
 801a1f4:	2a00      	cmp	r2, #0
 801a1f6:	f000 80bc 	beq.w	801a372 <_dtoa_r+0x7f2>
 801a1fa:	b19c      	cbz	r4, 801a224 <_dtoa_r+0x6a4>
 801a1fc:	4629      	mov	r1, r5
 801a1fe:	4622      	mov	r2, r4
 801a200:	4648      	mov	r0, r9
 801a202:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a204:	f001 f85c 	bl	801b2c0 <__pow5mult>
 801a208:	9a01      	ldr	r2, [sp, #4]
 801a20a:	4601      	mov	r1, r0
 801a20c:	4605      	mov	r5, r0
 801a20e:	4648      	mov	r0, r9
 801a210:	f000 ffac 	bl	801b16c <__multiply>
 801a214:	9901      	ldr	r1, [sp, #4]
 801a216:	9004      	str	r0, [sp, #16]
 801a218:	4648      	mov	r0, r9
 801a21a:	f000 fe93 	bl	801af44 <_Bfree>
 801a21e:	9a04      	ldr	r2, [sp, #16]
 801a220:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a222:	9201      	str	r2, [sp, #4]
 801a224:	1b1a      	subs	r2, r3, r4
 801a226:	d004      	beq.n	801a232 <_dtoa_r+0x6b2>
 801a228:	9901      	ldr	r1, [sp, #4]
 801a22a:	4648      	mov	r0, r9
 801a22c:	f001 f848 	bl	801b2c0 <__pow5mult>
 801a230:	9001      	str	r0, [sp, #4]
 801a232:	2101      	movs	r1, #1
 801a234:	4648      	mov	r0, r9
 801a236:	f000 ff83 	bl	801b140 <__i2b>
 801a23a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a23c:	4604      	mov	r4, r0
 801a23e:	2b00      	cmp	r3, #0
 801a240:	f000 81d0 	beq.w	801a5e4 <_dtoa_r+0xa64>
 801a244:	461a      	mov	r2, r3
 801a246:	4601      	mov	r1, r0
 801a248:	4648      	mov	r0, r9
 801a24a:	f001 f839 	bl	801b2c0 <__pow5mult>
 801a24e:	9b07      	ldr	r3, [sp, #28]
 801a250:	2b01      	cmp	r3, #1
 801a252:	4604      	mov	r4, r0
 801a254:	f300 8095 	bgt.w	801a382 <_dtoa_r+0x802>
 801a258:	9b02      	ldr	r3, [sp, #8]
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	f040 808b 	bne.w	801a376 <_dtoa_r+0x7f6>
 801a260:	9b03      	ldr	r3, [sp, #12]
 801a262:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a266:	2a00      	cmp	r2, #0
 801a268:	f040 8087 	bne.w	801a37a <_dtoa_r+0x7fa>
 801a26c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a270:	0d12      	lsrs	r2, r2, #20
 801a272:	0512      	lsls	r2, r2, #20
 801a274:	2a00      	cmp	r2, #0
 801a276:	f000 8082 	beq.w	801a37e <_dtoa_r+0x7fe>
 801a27a:	9b05      	ldr	r3, [sp, #20]
 801a27c:	3301      	adds	r3, #1
 801a27e:	9305      	str	r3, [sp, #20]
 801a280:	9b06      	ldr	r3, [sp, #24]
 801a282:	3301      	adds	r3, #1
 801a284:	9306      	str	r3, [sp, #24]
 801a286:	2301      	movs	r3, #1
 801a288:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a28a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	f000 81af 	beq.w	801a5f0 <_dtoa_r+0xa70>
 801a292:	6922      	ldr	r2, [r4, #16]
 801a294:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a298:	6910      	ldr	r0, [r2, #16]
 801a29a:	f000 ff05 	bl	801b0a8 <__hi0bits>
 801a29e:	f1c0 0020 	rsb	r0, r0, #32
 801a2a2:	9b06      	ldr	r3, [sp, #24]
 801a2a4:	4418      	add	r0, r3
 801a2a6:	f010 001f 	ands.w	r0, r0, #31
 801a2aa:	d076      	beq.n	801a39a <_dtoa_r+0x81a>
 801a2ac:	f1c0 0220 	rsb	r2, r0, #32
 801a2b0:	2a04      	cmp	r2, #4
 801a2b2:	dd69      	ble.n	801a388 <_dtoa_r+0x808>
 801a2b4:	9b05      	ldr	r3, [sp, #20]
 801a2b6:	f1c0 001c 	rsb	r0, r0, #28
 801a2ba:	4403      	add	r3, r0
 801a2bc:	9305      	str	r3, [sp, #20]
 801a2be:	9b06      	ldr	r3, [sp, #24]
 801a2c0:	4406      	add	r6, r0
 801a2c2:	4403      	add	r3, r0
 801a2c4:	9306      	str	r3, [sp, #24]
 801a2c6:	9b05      	ldr	r3, [sp, #20]
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	dd05      	ble.n	801a2d8 <_dtoa_r+0x758>
 801a2cc:	9901      	ldr	r1, [sp, #4]
 801a2ce:	461a      	mov	r2, r3
 801a2d0:	4648      	mov	r0, r9
 801a2d2:	f001 f84f 	bl	801b374 <__lshift>
 801a2d6:	9001      	str	r0, [sp, #4]
 801a2d8:	9b06      	ldr	r3, [sp, #24]
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	dd05      	ble.n	801a2ea <_dtoa_r+0x76a>
 801a2de:	4621      	mov	r1, r4
 801a2e0:	461a      	mov	r2, r3
 801a2e2:	4648      	mov	r0, r9
 801a2e4:	f001 f846 	bl	801b374 <__lshift>
 801a2e8:	4604      	mov	r4, r0
 801a2ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d056      	beq.n	801a39e <_dtoa_r+0x81e>
 801a2f0:	9801      	ldr	r0, [sp, #4]
 801a2f2:	4621      	mov	r1, r4
 801a2f4:	f001 f8aa 	bl	801b44c <__mcmp>
 801a2f8:	2800      	cmp	r0, #0
 801a2fa:	da50      	bge.n	801a39e <_dtoa_r+0x81e>
 801a2fc:	f108 33ff 	add.w	r3, r8, #4294967295
 801a300:	9304      	str	r3, [sp, #16]
 801a302:	9901      	ldr	r1, [sp, #4]
 801a304:	2300      	movs	r3, #0
 801a306:	220a      	movs	r2, #10
 801a308:	4648      	mov	r0, r9
 801a30a:	f000 fe3d 	bl	801af88 <__multadd>
 801a30e:	9b08      	ldr	r3, [sp, #32]
 801a310:	9001      	str	r0, [sp, #4]
 801a312:	2b00      	cmp	r3, #0
 801a314:	f000 816e 	beq.w	801a5f4 <_dtoa_r+0xa74>
 801a318:	4629      	mov	r1, r5
 801a31a:	2300      	movs	r3, #0
 801a31c:	220a      	movs	r2, #10
 801a31e:	4648      	mov	r0, r9
 801a320:	f000 fe32 	bl	801af88 <__multadd>
 801a324:	f1bb 0f00 	cmp.w	fp, #0
 801a328:	4605      	mov	r5, r0
 801a32a:	dc64      	bgt.n	801a3f6 <_dtoa_r+0x876>
 801a32c:	9b07      	ldr	r3, [sp, #28]
 801a32e:	2b02      	cmp	r3, #2
 801a330:	dc3e      	bgt.n	801a3b0 <_dtoa_r+0x830>
 801a332:	e060      	b.n	801a3f6 <_dtoa_r+0x876>
 801a334:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a336:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801a33a:	e73c      	b.n	801a1b6 <_dtoa_r+0x636>
 801a33c:	f10a 34ff 	add.w	r4, sl, #4294967295
 801a340:	42a3      	cmp	r3, r4
 801a342:	bfbf      	itttt	lt
 801a344:	1ae2      	sublt	r2, r4, r3
 801a346:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801a348:	189b      	addlt	r3, r3, r2
 801a34a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801a34c:	bfae      	itee	ge
 801a34e:	1b1c      	subge	r4, r3, r4
 801a350:	4623      	movlt	r3, r4
 801a352:	2400      	movlt	r4, #0
 801a354:	f1ba 0f00 	cmp.w	sl, #0
 801a358:	bfb5      	itete	lt
 801a35a:	9a05      	ldrlt	r2, [sp, #20]
 801a35c:	9e05      	ldrge	r6, [sp, #20]
 801a35e:	eba2 060a 	sublt.w	r6, r2, sl
 801a362:	4652      	movge	r2, sl
 801a364:	bfb8      	it	lt
 801a366:	2200      	movlt	r2, #0
 801a368:	e727      	b.n	801a1ba <_dtoa_r+0x63a>
 801a36a:	9e05      	ldr	r6, [sp, #20]
 801a36c:	9d08      	ldr	r5, [sp, #32]
 801a36e:	461c      	mov	r4, r3
 801a370:	e730      	b.n	801a1d4 <_dtoa_r+0x654>
 801a372:	461a      	mov	r2, r3
 801a374:	e758      	b.n	801a228 <_dtoa_r+0x6a8>
 801a376:	2300      	movs	r3, #0
 801a378:	e786      	b.n	801a288 <_dtoa_r+0x708>
 801a37a:	9b02      	ldr	r3, [sp, #8]
 801a37c:	e784      	b.n	801a288 <_dtoa_r+0x708>
 801a37e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a380:	e783      	b.n	801a28a <_dtoa_r+0x70a>
 801a382:	2300      	movs	r3, #0
 801a384:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a386:	e784      	b.n	801a292 <_dtoa_r+0x712>
 801a388:	d09d      	beq.n	801a2c6 <_dtoa_r+0x746>
 801a38a:	9b05      	ldr	r3, [sp, #20]
 801a38c:	321c      	adds	r2, #28
 801a38e:	4413      	add	r3, r2
 801a390:	9305      	str	r3, [sp, #20]
 801a392:	9b06      	ldr	r3, [sp, #24]
 801a394:	4416      	add	r6, r2
 801a396:	4413      	add	r3, r2
 801a398:	e794      	b.n	801a2c4 <_dtoa_r+0x744>
 801a39a:	4602      	mov	r2, r0
 801a39c:	e7f5      	b.n	801a38a <_dtoa_r+0x80a>
 801a39e:	f1ba 0f00 	cmp.w	sl, #0
 801a3a2:	f8cd 8010 	str.w	r8, [sp, #16]
 801a3a6:	46d3      	mov	fp, sl
 801a3a8:	dc21      	bgt.n	801a3ee <_dtoa_r+0x86e>
 801a3aa:	9b07      	ldr	r3, [sp, #28]
 801a3ac:	2b02      	cmp	r3, #2
 801a3ae:	dd1e      	ble.n	801a3ee <_dtoa_r+0x86e>
 801a3b0:	f1bb 0f00 	cmp.w	fp, #0
 801a3b4:	f47f aeb7 	bne.w	801a126 <_dtoa_r+0x5a6>
 801a3b8:	4621      	mov	r1, r4
 801a3ba:	465b      	mov	r3, fp
 801a3bc:	2205      	movs	r2, #5
 801a3be:	4648      	mov	r0, r9
 801a3c0:	f000 fde2 	bl	801af88 <__multadd>
 801a3c4:	4601      	mov	r1, r0
 801a3c6:	4604      	mov	r4, r0
 801a3c8:	9801      	ldr	r0, [sp, #4]
 801a3ca:	f001 f83f 	bl	801b44c <__mcmp>
 801a3ce:	2800      	cmp	r0, #0
 801a3d0:	f77f aea9 	ble.w	801a126 <_dtoa_r+0x5a6>
 801a3d4:	463e      	mov	r6, r7
 801a3d6:	2331      	movs	r3, #49	@ 0x31
 801a3d8:	f806 3b01 	strb.w	r3, [r6], #1
 801a3dc:	9b04      	ldr	r3, [sp, #16]
 801a3de:	3301      	adds	r3, #1
 801a3e0:	9304      	str	r3, [sp, #16]
 801a3e2:	e6a4      	b.n	801a12e <_dtoa_r+0x5ae>
 801a3e4:	f8cd 8010 	str.w	r8, [sp, #16]
 801a3e8:	4654      	mov	r4, sl
 801a3ea:	4625      	mov	r5, r4
 801a3ec:	e7f2      	b.n	801a3d4 <_dtoa_r+0x854>
 801a3ee:	9b08      	ldr	r3, [sp, #32]
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	f000 8103 	beq.w	801a5fc <_dtoa_r+0xa7c>
 801a3f6:	2e00      	cmp	r6, #0
 801a3f8:	dd05      	ble.n	801a406 <_dtoa_r+0x886>
 801a3fa:	4629      	mov	r1, r5
 801a3fc:	4632      	mov	r2, r6
 801a3fe:	4648      	mov	r0, r9
 801a400:	f000 ffb8 	bl	801b374 <__lshift>
 801a404:	4605      	mov	r5, r0
 801a406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a408:	2b00      	cmp	r3, #0
 801a40a:	d058      	beq.n	801a4be <_dtoa_r+0x93e>
 801a40c:	6869      	ldr	r1, [r5, #4]
 801a40e:	4648      	mov	r0, r9
 801a410:	f000 fd58 	bl	801aec4 <_Balloc>
 801a414:	4606      	mov	r6, r0
 801a416:	b928      	cbnz	r0, 801a424 <_dtoa_r+0x8a4>
 801a418:	4b82      	ldr	r3, [pc, #520]	@ (801a624 <_dtoa_r+0xaa4>)
 801a41a:	4602      	mov	r2, r0
 801a41c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801a420:	f7ff bbc7 	b.w	8019bb2 <_dtoa_r+0x32>
 801a424:	692a      	ldr	r2, [r5, #16]
 801a426:	3202      	adds	r2, #2
 801a428:	0092      	lsls	r2, r2, #2
 801a42a:	f105 010c 	add.w	r1, r5, #12
 801a42e:	300c      	adds	r0, #12
 801a430:	f7ff fb05 	bl	8019a3e <memcpy>
 801a434:	2201      	movs	r2, #1
 801a436:	4631      	mov	r1, r6
 801a438:	4648      	mov	r0, r9
 801a43a:	f000 ff9b 	bl	801b374 <__lshift>
 801a43e:	1c7b      	adds	r3, r7, #1
 801a440:	9305      	str	r3, [sp, #20]
 801a442:	eb07 030b 	add.w	r3, r7, fp
 801a446:	9309      	str	r3, [sp, #36]	@ 0x24
 801a448:	9b02      	ldr	r3, [sp, #8]
 801a44a:	f003 0301 	and.w	r3, r3, #1
 801a44e:	46a8      	mov	r8, r5
 801a450:	9308      	str	r3, [sp, #32]
 801a452:	4605      	mov	r5, r0
 801a454:	9b05      	ldr	r3, [sp, #20]
 801a456:	9801      	ldr	r0, [sp, #4]
 801a458:	4621      	mov	r1, r4
 801a45a:	f103 3bff 	add.w	fp, r3, #4294967295
 801a45e:	f7ff fb07 	bl	8019a70 <quorem>
 801a462:	4641      	mov	r1, r8
 801a464:	9002      	str	r0, [sp, #8]
 801a466:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801a46a:	9801      	ldr	r0, [sp, #4]
 801a46c:	f000 ffee 	bl	801b44c <__mcmp>
 801a470:	462a      	mov	r2, r5
 801a472:	9006      	str	r0, [sp, #24]
 801a474:	4621      	mov	r1, r4
 801a476:	4648      	mov	r0, r9
 801a478:	f001 f804 	bl	801b484 <__mdiff>
 801a47c:	68c2      	ldr	r2, [r0, #12]
 801a47e:	4606      	mov	r6, r0
 801a480:	b9fa      	cbnz	r2, 801a4c2 <_dtoa_r+0x942>
 801a482:	4601      	mov	r1, r0
 801a484:	9801      	ldr	r0, [sp, #4]
 801a486:	f000 ffe1 	bl	801b44c <__mcmp>
 801a48a:	4602      	mov	r2, r0
 801a48c:	4631      	mov	r1, r6
 801a48e:	4648      	mov	r0, r9
 801a490:	920a      	str	r2, [sp, #40]	@ 0x28
 801a492:	f000 fd57 	bl	801af44 <_Bfree>
 801a496:	9b07      	ldr	r3, [sp, #28]
 801a498:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a49a:	9e05      	ldr	r6, [sp, #20]
 801a49c:	ea43 0102 	orr.w	r1, r3, r2
 801a4a0:	9b08      	ldr	r3, [sp, #32]
 801a4a2:	4319      	orrs	r1, r3
 801a4a4:	d10f      	bne.n	801a4c6 <_dtoa_r+0x946>
 801a4a6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a4aa:	d028      	beq.n	801a4fe <_dtoa_r+0x97e>
 801a4ac:	9b06      	ldr	r3, [sp, #24]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	dd02      	ble.n	801a4b8 <_dtoa_r+0x938>
 801a4b2:	9b02      	ldr	r3, [sp, #8]
 801a4b4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801a4b8:	f88b a000 	strb.w	sl, [fp]
 801a4bc:	e639      	b.n	801a132 <_dtoa_r+0x5b2>
 801a4be:	4628      	mov	r0, r5
 801a4c0:	e7bd      	b.n	801a43e <_dtoa_r+0x8be>
 801a4c2:	2201      	movs	r2, #1
 801a4c4:	e7e2      	b.n	801a48c <_dtoa_r+0x90c>
 801a4c6:	9b06      	ldr	r3, [sp, #24]
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	db04      	blt.n	801a4d6 <_dtoa_r+0x956>
 801a4cc:	9907      	ldr	r1, [sp, #28]
 801a4ce:	430b      	orrs	r3, r1
 801a4d0:	9908      	ldr	r1, [sp, #32]
 801a4d2:	430b      	orrs	r3, r1
 801a4d4:	d120      	bne.n	801a518 <_dtoa_r+0x998>
 801a4d6:	2a00      	cmp	r2, #0
 801a4d8:	ddee      	ble.n	801a4b8 <_dtoa_r+0x938>
 801a4da:	9901      	ldr	r1, [sp, #4]
 801a4dc:	2201      	movs	r2, #1
 801a4de:	4648      	mov	r0, r9
 801a4e0:	f000 ff48 	bl	801b374 <__lshift>
 801a4e4:	4621      	mov	r1, r4
 801a4e6:	9001      	str	r0, [sp, #4]
 801a4e8:	f000 ffb0 	bl	801b44c <__mcmp>
 801a4ec:	2800      	cmp	r0, #0
 801a4ee:	dc03      	bgt.n	801a4f8 <_dtoa_r+0x978>
 801a4f0:	d1e2      	bne.n	801a4b8 <_dtoa_r+0x938>
 801a4f2:	f01a 0f01 	tst.w	sl, #1
 801a4f6:	d0df      	beq.n	801a4b8 <_dtoa_r+0x938>
 801a4f8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a4fc:	d1d9      	bne.n	801a4b2 <_dtoa_r+0x932>
 801a4fe:	2339      	movs	r3, #57	@ 0x39
 801a500:	f88b 3000 	strb.w	r3, [fp]
 801a504:	4633      	mov	r3, r6
 801a506:	461e      	mov	r6, r3
 801a508:	3b01      	subs	r3, #1
 801a50a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801a50e:	2a39      	cmp	r2, #57	@ 0x39
 801a510:	d053      	beq.n	801a5ba <_dtoa_r+0xa3a>
 801a512:	3201      	adds	r2, #1
 801a514:	701a      	strb	r2, [r3, #0]
 801a516:	e60c      	b.n	801a132 <_dtoa_r+0x5b2>
 801a518:	2a00      	cmp	r2, #0
 801a51a:	dd07      	ble.n	801a52c <_dtoa_r+0x9ac>
 801a51c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a520:	d0ed      	beq.n	801a4fe <_dtoa_r+0x97e>
 801a522:	f10a 0301 	add.w	r3, sl, #1
 801a526:	f88b 3000 	strb.w	r3, [fp]
 801a52a:	e602      	b.n	801a132 <_dtoa_r+0x5b2>
 801a52c:	9b05      	ldr	r3, [sp, #20]
 801a52e:	9a05      	ldr	r2, [sp, #20]
 801a530:	f803 ac01 	strb.w	sl, [r3, #-1]
 801a534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a536:	4293      	cmp	r3, r2
 801a538:	d029      	beq.n	801a58e <_dtoa_r+0xa0e>
 801a53a:	9901      	ldr	r1, [sp, #4]
 801a53c:	2300      	movs	r3, #0
 801a53e:	220a      	movs	r2, #10
 801a540:	4648      	mov	r0, r9
 801a542:	f000 fd21 	bl	801af88 <__multadd>
 801a546:	45a8      	cmp	r8, r5
 801a548:	9001      	str	r0, [sp, #4]
 801a54a:	f04f 0300 	mov.w	r3, #0
 801a54e:	f04f 020a 	mov.w	r2, #10
 801a552:	4641      	mov	r1, r8
 801a554:	4648      	mov	r0, r9
 801a556:	d107      	bne.n	801a568 <_dtoa_r+0x9e8>
 801a558:	f000 fd16 	bl	801af88 <__multadd>
 801a55c:	4680      	mov	r8, r0
 801a55e:	4605      	mov	r5, r0
 801a560:	9b05      	ldr	r3, [sp, #20]
 801a562:	3301      	adds	r3, #1
 801a564:	9305      	str	r3, [sp, #20]
 801a566:	e775      	b.n	801a454 <_dtoa_r+0x8d4>
 801a568:	f000 fd0e 	bl	801af88 <__multadd>
 801a56c:	4629      	mov	r1, r5
 801a56e:	4680      	mov	r8, r0
 801a570:	2300      	movs	r3, #0
 801a572:	220a      	movs	r2, #10
 801a574:	4648      	mov	r0, r9
 801a576:	f000 fd07 	bl	801af88 <__multadd>
 801a57a:	4605      	mov	r5, r0
 801a57c:	e7f0      	b.n	801a560 <_dtoa_r+0x9e0>
 801a57e:	f1bb 0f00 	cmp.w	fp, #0
 801a582:	bfcc      	ite	gt
 801a584:	465e      	movgt	r6, fp
 801a586:	2601      	movle	r6, #1
 801a588:	443e      	add	r6, r7
 801a58a:	f04f 0800 	mov.w	r8, #0
 801a58e:	9901      	ldr	r1, [sp, #4]
 801a590:	2201      	movs	r2, #1
 801a592:	4648      	mov	r0, r9
 801a594:	f000 feee 	bl	801b374 <__lshift>
 801a598:	4621      	mov	r1, r4
 801a59a:	9001      	str	r0, [sp, #4]
 801a59c:	f000 ff56 	bl	801b44c <__mcmp>
 801a5a0:	2800      	cmp	r0, #0
 801a5a2:	dcaf      	bgt.n	801a504 <_dtoa_r+0x984>
 801a5a4:	d102      	bne.n	801a5ac <_dtoa_r+0xa2c>
 801a5a6:	f01a 0f01 	tst.w	sl, #1
 801a5aa:	d1ab      	bne.n	801a504 <_dtoa_r+0x984>
 801a5ac:	4633      	mov	r3, r6
 801a5ae:	461e      	mov	r6, r3
 801a5b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a5b4:	2a30      	cmp	r2, #48	@ 0x30
 801a5b6:	d0fa      	beq.n	801a5ae <_dtoa_r+0xa2e>
 801a5b8:	e5bb      	b.n	801a132 <_dtoa_r+0x5b2>
 801a5ba:	429f      	cmp	r7, r3
 801a5bc:	d1a3      	bne.n	801a506 <_dtoa_r+0x986>
 801a5be:	9b04      	ldr	r3, [sp, #16]
 801a5c0:	3301      	adds	r3, #1
 801a5c2:	9304      	str	r3, [sp, #16]
 801a5c4:	2331      	movs	r3, #49	@ 0x31
 801a5c6:	703b      	strb	r3, [r7, #0]
 801a5c8:	e5b3      	b.n	801a132 <_dtoa_r+0x5b2>
 801a5ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a5cc:	4f16      	ldr	r7, [pc, #88]	@ (801a628 <_dtoa_r+0xaa8>)
 801a5ce:	b11b      	cbz	r3, 801a5d8 <_dtoa_r+0xa58>
 801a5d0:	f107 0308 	add.w	r3, r7, #8
 801a5d4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a5d6:	6013      	str	r3, [r2, #0]
 801a5d8:	4638      	mov	r0, r7
 801a5da:	b011      	add	sp, #68	@ 0x44
 801a5dc:	ecbd 8b02 	vpop	{d8}
 801a5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5e4:	9b07      	ldr	r3, [sp, #28]
 801a5e6:	2b01      	cmp	r3, #1
 801a5e8:	f77f ae36 	ble.w	801a258 <_dtoa_r+0x6d8>
 801a5ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a5ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a5f0:	2001      	movs	r0, #1
 801a5f2:	e656      	b.n	801a2a2 <_dtoa_r+0x722>
 801a5f4:	f1bb 0f00 	cmp.w	fp, #0
 801a5f8:	f77f aed7 	ble.w	801a3aa <_dtoa_r+0x82a>
 801a5fc:	463e      	mov	r6, r7
 801a5fe:	9801      	ldr	r0, [sp, #4]
 801a600:	4621      	mov	r1, r4
 801a602:	f7ff fa35 	bl	8019a70 <quorem>
 801a606:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801a60a:	f806 ab01 	strb.w	sl, [r6], #1
 801a60e:	1bf2      	subs	r2, r6, r7
 801a610:	4593      	cmp	fp, r2
 801a612:	ddb4      	ble.n	801a57e <_dtoa_r+0x9fe>
 801a614:	9901      	ldr	r1, [sp, #4]
 801a616:	2300      	movs	r3, #0
 801a618:	220a      	movs	r2, #10
 801a61a:	4648      	mov	r0, r9
 801a61c:	f000 fcb4 	bl	801af88 <__multadd>
 801a620:	9001      	str	r0, [sp, #4]
 801a622:	e7ec      	b.n	801a5fe <_dtoa_r+0xa7e>
 801a624:	0801d9b1 	.word	0x0801d9b1
 801a628:	0801d935 	.word	0x0801d935

0801a62c <_free_r>:
 801a62c:	b538      	push	{r3, r4, r5, lr}
 801a62e:	4605      	mov	r5, r0
 801a630:	2900      	cmp	r1, #0
 801a632:	d041      	beq.n	801a6b8 <_free_r+0x8c>
 801a634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a638:	1f0c      	subs	r4, r1, #4
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	bfb8      	it	lt
 801a63e:	18e4      	addlt	r4, r4, r3
 801a640:	f000 fc34 	bl	801aeac <__malloc_lock>
 801a644:	4a1d      	ldr	r2, [pc, #116]	@ (801a6bc <_free_r+0x90>)
 801a646:	6813      	ldr	r3, [r2, #0]
 801a648:	b933      	cbnz	r3, 801a658 <_free_r+0x2c>
 801a64a:	6063      	str	r3, [r4, #4]
 801a64c:	6014      	str	r4, [r2, #0]
 801a64e:	4628      	mov	r0, r5
 801a650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a654:	f000 bc30 	b.w	801aeb8 <__malloc_unlock>
 801a658:	42a3      	cmp	r3, r4
 801a65a:	d908      	bls.n	801a66e <_free_r+0x42>
 801a65c:	6820      	ldr	r0, [r4, #0]
 801a65e:	1821      	adds	r1, r4, r0
 801a660:	428b      	cmp	r3, r1
 801a662:	bf01      	itttt	eq
 801a664:	6819      	ldreq	r1, [r3, #0]
 801a666:	685b      	ldreq	r3, [r3, #4]
 801a668:	1809      	addeq	r1, r1, r0
 801a66a:	6021      	streq	r1, [r4, #0]
 801a66c:	e7ed      	b.n	801a64a <_free_r+0x1e>
 801a66e:	461a      	mov	r2, r3
 801a670:	685b      	ldr	r3, [r3, #4]
 801a672:	b10b      	cbz	r3, 801a678 <_free_r+0x4c>
 801a674:	42a3      	cmp	r3, r4
 801a676:	d9fa      	bls.n	801a66e <_free_r+0x42>
 801a678:	6811      	ldr	r1, [r2, #0]
 801a67a:	1850      	adds	r0, r2, r1
 801a67c:	42a0      	cmp	r0, r4
 801a67e:	d10b      	bne.n	801a698 <_free_r+0x6c>
 801a680:	6820      	ldr	r0, [r4, #0]
 801a682:	4401      	add	r1, r0
 801a684:	1850      	adds	r0, r2, r1
 801a686:	4283      	cmp	r3, r0
 801a688:	6011      	str	r1, [r2, #0]
 801a68a:	d1e0      	bne.n	801a64e <_free_r+0x22>
 801a68c:	6818      	ldr	r0, [r3, #0]
 801a68e:	685b      	ldr	r3, [r3, #4]
 801a690:	6053      	str	r3, [r2, #4]
 801a692:	4408      	add	r0, r1
 801a694:	6010      	str	r0, [r2, #0]
 801a696:	e7da      	b.n	801a64e <_free_r+0x22>
 801a698:	d902      	bls.n	801a6a0 <_free_r+0x74>
 801a69a:	230c      	movs	r3, #12
 801a69c:	602b      	str	r3, [r5, #0]
 801a69e:	e7d6      	b.n	801a64e <_free_r+0x22>
 801a6a0:	6820      	ldr	r0, [r4, #0]
 801a6a2:	1821      	adds	r1, r4, r0
 801a6a4:	428b      	cmp	r3, r1
 801a6a6:	bf04      	itt	eq
 801a6a8:	6819      	ldreq	r1, [r3, #0]
 801a6aa:	685b      	ldreq	r3, [r3, #4]
 801a6ac:	6063      	str	r3, [r4, #4]
 801a6ae:	bf04      	itt	eq
 801a6b0:	1809      	addeq	r1, r1, r0
 801a6b2:	6021      	streq	r1, [r4, #0]
 801a6b4:	6054      	str	r4, [r2, #4]
 801a6b6:	e7ca      	b.n	801a64e <_free_r+0x22>
 801a6b8:	bd38      	pop	{r3, r4, r5, pc}
 801a6ba:	bf00      	nop
 801a6bc:	24006360 	.word	0x24006360

0801a6c0 <rshift>:
 801a6c0:	6903      	ldr	r3, [r0, #16]
 801a6c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a6c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a6ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a6ce:	f100 0414 	add.w	r4, r0, #20
 801a6d2:	dd45      	ble.n	801a760 <rshift+0xa0>
 801a6d4:	f011 011f 	ands.w	r1, r1, #31
 801a6d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a6dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a6e0:	d10c      	bne.n	801a6fc <rshift+0x3c>
 801a6e2:	f100 0710 	add.w	r7, r0, #16
 801a6e6:	4629      	mov	r1, r5
 801a6e8:	42b1      	cmp	r1, r6
 801a6ea:	d334      	bcc.n	801a756 <rshift+0x96>
 801a6ec:	1a9b      	subs	r3, r3, r2
 801a6ee:	009b      	lsls	r3, r3, #2
 801a6f0:	1eea      	subs	r2, r5, #3
 801a6f2:	4296      	cmp	r6, r2
 801a6f4:	bf38      	it	cc
 801a6f6:	2300      	movcc	r3, #0
 801a6f8:	4423      	add	r3, r4
 801a6fa:	e015      	b.n	801a728 <rshift+0x68>
 801a6fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a700:	f1c1 0820 	rsb	r8, r1, #32
 801a704:	40cf      	lsrs	r7, r1
 801a706:	f105 0e04 	add.w	lr, r5, #4
 801a70a:	46a1      	mov	r9, r4
 801a70c:	4576      	cmp	r6, lr
 801a70e:	46f4      	mov	ip, lr
 801a710:	d815      	bhi.n	801a73e <rshift+0x7e>
 801a712:	1a9a      	subs	r2, r3, r2
 801a714:	0092      	lsls	r2, r2, #2
 801a716:	3a04      	subs	r2, #4
 801a718:	3501      	adds	r5, #1
 801a71a:	42ae      	cmp	r6, r5
 801a71c:	bf38      	it	cc
 801a71e:	2200      	movcc	r2, #0
 801a720:	18a3      	adds	r3, r4, r2
 801a722:	50a7      	str	r7, [r4, r2]
 801a724:	b107      	cbz	r7, 801a728 <rshift+0x68>
 801a726:	3304      	adds	r3, #4
 801a728:	1b1a      	subs	r2, r3, r4
 801a72a:	42a3      	cmp	r3, r4
 801a72c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a730:	bf08      	it	eq
 801a732:	2300      	moveq	r3, #0
 801a734:	6102      	str	r2, [r0, #16]
 801a736:	bf08      	it	eq
 801a738:	6143      	streq	r3, [r0, #20]
 801a73a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a73e:	f8dc c000 	ldr.w	ip, [ip]
 801a742:	fa0c fc08 	lsl.w	ip, ip, r8
 801a746:	ea4c 0707 	orr.w	r7, ip, r7
 801a74a:	f849 7b04 	str.w	r7, [r9], #4
 801a74e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a752:	40cf      	lsrs	r7, r1
 801a754:	e7da      	b.n	801a70c <rshift+0x4c>
 801a756:	f851 cb04 	ldr.w	ip, [r1], #4
 801a75a:	f847 cf04 	str.w	ip, [r7, #4]!
 801a75e:	e7c3      	b.n	801a6e8 <rshift+0x28>
 801a760:	4623      	mov	r3, r4
 801a762:	e7e1      	b.n	801a728 <rshift+0x68>

0801a764 <__hexdig_fun>:
 801a764:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801a768:	2b09      	cmp	r3, #9
 801a76a:	d802      	bhi.n	801a772 <__hexdig_fun+0xe>
 801a76c:	3820      	subs	r0, #32
 801a76e:	b2c0      	uxtb	r0, r0
 801a770:	4770      	bx	lr
 801a772:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801a776:	2b05      	cmp	r3, #5
 801a778:	d801      	bhi.n	801a77e <__hexdig_fun+0x1a>
 801a77a:	3847      	subs	r0, #71	@ 0x47
 801a77c:	e7f7      	b.n	801a76e <__hexdig_fun+0xa>
 801a77e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801a782:	2b05      	cmp	r3, #5
 801a784:	d801      	bhi.n	801a78a <__hexdig_fun+0x26>
 801a786:	3827      	subs	r0, #39	@ 0x27
 801a788:	e7f1      	b.n	801a76e <__hexdig_fun+0xa>
 801a78a:	2000      	movs	r0, #0
 801a78c:	4770      	bx	lr
	...

0801a790 <__gethex>:
 801a790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a794:	b085      	sub	sp, #20
 801a796:	468a      	mov	sl, r1
 801a798:	9302      	str	r3, [sp, #8]
 801a79a:	680b      	ldr	r3, [r1, #0]
 801a79c:	9001      	str	r0, [sp, #4]
 801a79e:	4690      	mov	r8, r2
 801a7a0:	1c9c      	adds	r4, r3, #2
 801a7a2:	46a1      	mov	r9, r4
 801a7a4:	f814 0b01 	ldrb.w	r0, [r4], #1
 801a7a8:	2830      	cmp	r0, #48	@ 0x30
 801a7aa:	d0fa      	beq.n	801a7a2 <__gethex+0x12>
 801a7ac:	eba9 0303 	sub.w	r3, r9, r3
 801a7b0:	f1a3 0b02 	sub.w	fp, r3, #2
 801a7b4:	f7ff ffd6 	bl	801a764 <__hexdig_fun>
 801a7b8:	4605      	mov	r5, r0
 801a7ba:	2800      	cmp	r0, #0
 801a7bc:	d168      	bne.n	801a890 <__gethex+0x100>
 801a7be:	49a0      	ldr	r1, [pc, #640]	@ (801aa40 <__gethex+0x2b0>)
 801a7c0:	2201      	movs	r2, #1
 801a7c2:	4648      	mov	r0, r9
 801a7c4:	f7ff f8b2 	bl	801992c <strncmp>
 801a7c8:	4607      	mov	r7, r0
 801a7ca:	2800      	cmp	r0, #0
 801a7cc:	d167      	bne.n	801a89e <__gethex+0x10e>
 801a7ce:	f899 0001 	ldrb.w	r0, [r9, #1]
 801a7d2:	4626      	mov	r6, r4
 801a7d4:	f7ff ffc6 	bl	801a764 <__hexdig_fun>
 801a7d8:	2800      	cmp	r0, #0
 801a7da:	d062      	beq.n	801a8a2 <__gethex+0x112>
 801a7dc:	4623      	mov	r3, r4
 801a7de:	7818      	ldrb	r0, [r3, #0]
 801a7e0:	2830      	cmp	r0, #48	@ 0x30
 801a7e2:	4699      	mov	r9, r3
 801a7e4:	f103 0301 	add.w	r3, r3, #1
 801a7e8:	d0f9      	beq.n	801a7de <__gethex+0x4e>
 801a7ea:	f7ff ffbb 	bl	801a764 <__hexdig_fun>
 801a7ee:	fab0 f580 	clz	r5, r0
 801a7f2:	096d      	lsrs	r5, r5, #5
 801a7f4:	f04f 0b01 	mov.w	fp, #1
 801a7f8:	464a      	mov	r2, r9
 801a7fa:	4616      	mov	r6, r2
 801a7fc:	3201      	adds	r2, #1
 801a7fe:	7830      	ldrb	r0, [r6, #0]
 801a800:	f7ff ffb0 	bl	801a764 <__hexdig_fun>
 801a804:	2800      	cmp	r0, #0
 801a806:	d1f8      	bne.n	801a7fa <__gethex+0x6a>
 801a808:	498d      	ldr	r1, [pc, #564]	@ (801aa40 <__gethex+0x2b0>)
 801a80a:	2201      	movs	r2, #1
 801a80c:	4630      	mov	r0, r6
 801a80e:	f7ff f88d 	bl	801992c <strncmp>
 801a812:	2800      	cmp	r0, #0
 801a814:	d13f      	bne.n	801a896 <__gethex+0x106>
 801a816:	b944      	cbnz	r4, 801a82a <__gethex+0x9a>
 801a818:	1c74      	adds	r4, r6, #1
 801a81a:	4622      	mov	r2, r4
 801a81c:	4616      	mov	r6, r2
 801a81e:	3201      	adds	r2, #1
 801a820:	7830      	ldrb	r0, [r6, #0]
 801a822:	f7ff ff9f 	bl	801a764 <__hexdig_fun>
 801a826:	2800      	cmp	r0, #0
 801a828:	d1f8      	bne.n	801a81c <__gethex+0x8c>
 801a82a:	1ba4      	subs	r4, r4, r6
 801a82c:	00a7      	lsls	r7, r4, #2
 801a82e:	7833      	ldrb	r3, [r6, #0]
 801a830:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801a834:	2b50      	cmp	r3, #80	@ 0x50
 801a836:	d13e      	bne.n	801a8b6 <__gethex+0x126>
 801a838:	7873      	ldrb	r3, [r6, #1]
 801a83a:	2b2b      	cmp	r3, #43	@ 0x2b
 801a83c:	d033      	beq.n	801a8a6 <__gethex+0x116>
 801a83e:	2b2d      	cmp	r3, #45	@ 0x2d
 801a840:	d034      	beq.n	801a8ac <__gethex+0x11c>
 801a842:	1c71      	adds	r1, r6, #1
 801a844:	2400      	movs	r4, #0
 801a846:	7808      	ldrb	r0, [r1, #0]
 801a848:	f7ff ff8c 	bl	801a764 <__hexdig_fun>
 801a84c:	1e43      	subs	r3, r0, #1
 801a84e:	b2db      	uxtb	r3, r3
 801a850:	2b18      	cmp	r3, #24
 801a852:	d830      	bhi.n	801a8b6 <__gethex+0x126>
 801a854:	f1a0 0210 	sub.w	r2, r0, #16
 801a858:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a85c:	f7ff ff82 	bl	801a764 <__hexdig_fun>
 801a860:	f100 3cff 	add.w	ip, r0, #4294967295
 801a864:	fa5f fc8c 	uxtb.w	ip, ip
 801a868:	f1bc 0f18 	cmp.w	ip, #24
 801a86c:	f04f 030a 	mov.w	r3, #10
 801a870:	d91e      	bls.n	801a8b0 <__gethex+0x120>
 801a872:	b104      	cbz	r4, 801a876 <__gethex+0xe6>
 801a874:	4252      	negs	r2, r2
 801a876:	4417      	add	r7, r2
 801a878:	f8ca 1000 	str.w	r1, [sl]
 801a87c:	b1ed      	cbz	r5, 801a8ba <__gethex+0x12a>
 801a87e:	f1bb 0f00 	cmp.w	fp, #0
 801a882:	bf0c      	ite	eq
 801a884:	2506      	moveq	r5, #6
 801a886:	2500      	movne	r5, #0
 801a888:	4628      	mov	r0, r5
 801a88a:	b005      	add	sp, #20
 801a88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a890:	2500      	movs	r5, #0
 801a892:	462c      	mov	r4, r5
 801a894:	e7b0      	b.n	801a7f8 <__gethex+0x68>
 801a896:	2c00      	cmp	r4, #0
 801a898:	d1c7      	bne.n	801a82a <__gethex+0x9a>
 801a89a:	4627      	mov	r7, r4
 801a89c:	e7c7      	b.n	801a82e <__gethex+0x9e>
 801a89e:	464e      	mov	r6, r9
 801a8a0:	462f      	mov	r7, r5
 801a8a2:	2501      	movs	r5, #1
 801a8a4:	e7c3      	b.n	801a82e <__gethex+0x9e>
 801a8a6:	2400      	movs	r4, #0
 801a8a8:	1cb1      	adds	r1, r6, #2
 801a8aa:	e7cc      	b.n	801a846 <__gethex+0xb6>
 801a8ac:	2401      	movs	r4, #1
 801a8ae:	e7fb      	b.n	801a8a8 <__gethex+0x118>
 801a8b0:	fb03 0002 	mla	r0, r3, r2, r0
 801a8b4:	e7ce      	b.n	801a854 <__gethex+0xc4>
 801a8b6:	4631      	mov	r1, r6
 801a8b8:	e7de      	b.n	801a878 <__gethex+0xe8>
 801a8ba:	eba6 0309 	sub.w	r3, r6, r9
 801a8be:	3b01      	subs	r3, #1
 801a8c0:	4629      	mov	r1, r5
 801a8c2:	2b07      	cmp	r3, #7
 801a8c4:	dc0a      	bgt.n	801a8dc <__gethex+0x14c>
 801a8c6:	9801      	ldr	r0, [sp, #4]
 801a8c8:	f000 fafc 	bl	801aec4 <_Balloc>
 801a8cc:	4604      	mov	r4, r0
 801a8ce:	b940      	cbnz	r0, 801a8e2 <__gethex+0x152>
 801a8d0:	4b5c      	ldr	r3, [pc, #368]	@ (801aa44 <__gethex+0x2b4>)
 801a8d2:	4602      	mov	r2, r0
 801a8d4:	21e4      	movs	r1, #228	@ 0xe4
 801a8d6:	485c      	ldr	r0, [pc, #368]	@ (801aa48 <__gethex+0x2b8>)
 801a8d8:	f001 f9de 	bl	801bc98 <__assert_func>
 801a8dc:	3101      	adds	r1, #1
 801a8de:	105b      	asrs	r3, r3, #1
 801a8e0:	e7ef      	b.n	801a8c2 <__gethex+0x132>
 801a8e2:	f100 0a14 	add.w	sl, r0, #20
 801a8e6:	2300      	movs	r3, #0
 801a8e8:	4655      	mov	r5, sl
 801a8ea:	469b      	mov	fp, r3
 801a8ec:	45b1      	cmp	r9, r6
 801a8ee:	d337      	bcc.n	801a960 <__gethex+0x1d0>
 801a8f0:	f845 bb04 	str.w	fp, [r5], #4
 801a8f4:	eba5 050a 	sub.w	r5, r5, sl
 801a8f8:	10ad      	asrs	r5, r5, #2
 801a8fa:	6125      	str	r5, [r4, #16]
 801a8fc:	4658      	mov	r0, fp
 801a8fe:	f000 fbd3 	bl	801b0a8 <__hi0bits>
 801a902:	016d      	lsls	r5, r5, #5
 801a904:	f8d8 6000 	ldr.w	r6, [r8]
 801a908:	1a2d      	subs	r5, r5, r0
 801a90a:	42b5      	cmp	r5, r6
 801a90c:	dd54      	ble.n	801a9b8 <__gethex+0x228>
 801a90e:	1bad      	subs	r5, r5, r6
 801a910:	4629      	mov	r1, r5
 801a912:	4620      	mov	r0, r4
 801a914:	f000 ff64 	bl	801b7e0 <__any_on>
 801a918:	4681      	mov	r9, r0
 801a91a:	b178      	cbz	r0, 801a93c <__gethex+0x1ac>
 801a91c:	1e6b      	subs	r3, r5, #1
 801a91e:	1159      	asrs	r1, r3, #5
 801a920:	f003 021f 	and.w	r2, r3, #31
 801a924:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801a928:	f04f 0901 	mov.w	r9, #1
 801a92c:	fa09 f202 	lsl.w	r2, r9, r2
 801a930:	420a      	tst	r2, r1
 801a932:	d003      	beq.n	801a93c <__gethex+0x1ac>
 801a934:	454b      	cmp	r3, r9
 801a936:	dc36      	bgt.n	801a9a6 <__gethex+0x216>
 801a938:	f04f 0902 	mov.w	r9, #2
 801a93c:	4629      	mov	r1, r5
 801a93e:	4620      	mov	r0, r4
 801a940:	f7ff febe 	bl	801a6c0 <rshift>
 801a944:	442f      	add	r7, r5
 801a946:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a94a:	42bb      	cmp	r3, r7
 801a94c:	da42      	bge.n	801a9d4 <__gethex+0x244>
 801a94e:	9801      	ldr	r0, [sp, #4]
 801a950:	4621      	mov	r1, r4
 801a952:	f000 faf7 	bl	801af44 <_Bfree>
 801a956:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a958:	2300      	movs	r3, #0
 801a95a:	6013      	str	r3, [r2, #0]
 801a95c:	25a3      	movs	r5, #163	@ 0xa3
 801a95e:	e793      	b.n	801a888 <__gethex+0xf8>
 801a960:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801a964:	2a2e      	cmp	r2, #46	@ 0x2e
 801a966:	d012      	beq.n	801a98e <__gethex+0x1fe>
 801a968:	2b20      	cmp	r3, #32
 801a96a:	d104      	bne.n	801a976 <__gethex+0x1e6>
 801a96c:	f845 bb04 	str.w	fp, [r5], #4
 801a970:	f04f 0b00 	mov.w	fp, #0
 801a974:	465b      	mov	r3, fp
 801a976:	7830      	ldrb	r0, [r6, #0]
 801a978:	9303      	str	r3, [sp, #12]
 801a97a:	f7ff fef3 	bl	801a764 <__hexdig_fun>
 801a97e:	9b03      	ldr	r3, [sp, #12]
 801a980:	f000 000f 	and.w	r0, r0, #15
 801a984:	4098      	lsls	r0, r3
 801a986:	ea4b 0b00 	orr.w	fp, fp, r0
 801a98a:	3304      	adds	r3, #4
 801a98c:	e7ae      	b.n	801a8ec <__gethex+0x15c>
 801a98e:	45b1      	cmp	r9, r6
 801a990:	d8ea      	bhi.n	801a968 <__gethex+0x1d8>
 801a992:	492b      	ldr	r1, [pc, #172]	@ (801aa40 <__gethex+0x2b0>)
 801a994:	9303      	str	r3, [sp, #12]
 801a996:	2201      	movs	r2, #1
 801a998:	4630      	mov	r0, r6
 801a99a:	f7fe ffc7 	bl	801992c <strncmp>
 801a99e:	9b03      	ldr	r3, [sp, #12]
 801a9a0:	2800      	cmp	r0, #0
 801a9a2:	d1e1      	bne.n	801a968 <__gethex+0x1d8>
 801a9a4:	e7a2      	b.n	801a8ec <__gethex+0x15c>
 801a9a6:	1ea9      	subs	r1, r5, #2
 801a9a8:	4620      	mov	r0, r4
 801a9aa:	f000 ff19 	bl	801b7e0 <__any_on>
 801a9ae:	2800      	cmp	r0, #0
 801a9b0:	d0c2      	beq.n	801a938 <__gethex+0x1a8>
 801a9b2:	f04f 0903 	mov.w	r9, #3
 801a9b6:	e7c1      	b.n	801a93c <__gethex+0x1ac>
 801a9b8:	da09      	bge.n	801a9ce <__gethex+0x23e>
 801a9ba:	1b75      	subs	r5, r6, r5
 801a9bc:	4621      	mov	r1, r4
 801a9be:	9801      	ldr	r0, [sp, #4]
 801a9c0:	462a      	mov	r2, r5
 801a9c2:	f000 fcd7 	bl	801b374 <__lshift>
 801a9c6:	1b7f      	subs	r7, r7, r5
 801a9c8:	4604      	mov	r4, r0
 801a9ca:	f100 0a14 	add.w	sl, r0, #20
 801a9ce:	f04f 0900 	mov.w	r9, #0
 801a9d2:	e7b8      	b.n	801a946 <__gethex+0x1b6>
 801a9d4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a9d8:	42bd      	cmp	r5, r7
 801a9da:	dd6f      	ble.n	801aabc <__gethex+0x32c>
 801a9dc:	1bed      	subs	r5, r5, r7
 801a9de:	42ae      	cmp	r6, r5
 801a9e0:	dc34      	bgt.n	801aa4c <__gethex+0x2bc>
 801a9e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a9e6:	2b02      	cmp	r3, #2
 801a9e8:	d022      	beq.n	801aa30 <__gethex+0x2a0>
 801a9ea:	2b03      	cmp	r3, #3
 801a9ec:	d024      	beq.n	801aa38 <__gethex+0x2a8>
 801a9ee:	2b01      	cmp	r3, #1
 801a9f0:	d115      	bne.n	801aa1e <__gethex+0x28e>
 801a9f2:	42ae      	cmp	r6, r5
 801a9f4:	d113      	bne.n	801aa1e <__gethex+0x28e>
 801a9f6:	2e01      	cmp	r6, #1
 801a9f8:	d10b      	bne.n	801aa12 <__gethex+0x282>
 801a9fa:	9a02      	ldr	r2, [sp, #8]
 801a9fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801aa00:	6013      	str	r3, [r2, #0]
 801aa02:	2301      	movs	r3, #1
 801aa04:	6123      	str	r3, [r4, #16]
 801aa06:	f8ca 3000 	str.w	r3, [sl]
 801aa0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aa0c:	2562      	movs	r5, #98	@ 0x62
 801aa0e:	601c      	str	r4, [r3, #0]
 801aa10:	e73a      	b.n	801a888 <__gethex+0xf8>
 801aa12:	1e71      	subs	r1, r6, #1
 801aa14:	4620      	mov	r0, r4
 801aa16:	f000 fee3 	bl	801b7e0 <__any_on>
 801aa1a:	2800      	cmp	r0, #0
 801aa1c:	d1ed      	bne.n	801a9fa <__gethex+0x26a>
 801aa1e:	9801      	ldr	r0, [sp, #4]
 801aa20:	4621      	mov	r1, r4
 801aa22:	f000 fa8f 	bl	801af44 <_Bfree>
 801aa26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801aa28:	2300      	movs	r3, #0
 801aa2a:	6013      	str	r3, [r2, #0]
 801aa2c:	2550      	movs	r5, #80	@ 0x50
 801aa2e:	e72b      	b.n	801a888 <__gethex+0xf8>
 801aa30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d1f3      	bne.n	801aa1e <__gethex+0x28e>
 801aa36:	e7e0      	b.n	801a9fa <__gethex+0x26a>
 801aa38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d1dd      	bne.n	801a9fa <__gethex+0x26a>
 801aa3e:	e7ee      	b.n	801aa1e <__gethex+0x28e>
 801aa40:	0801d7a0 	.word	0x0801d7a0
 801aa44:	0801d9b1 	.word	0x0801d9b1
 801aa48:	0801d9c2 	.word	0x0801d9c2
 801aa4c:	1e6f      	subs	r7, r5, #1
 801aa4e:	f1b9 0f00 	cmp.w	r9, #0
 801aa52:	d130      	bne.n	801aab6 <__gethex+0x326>
 801aa54:	b127      	cbz	r7, 801aa60 <__gethex+0x2d0>
 801aa56:	4639      	mov	r1, r7
 801aa58:	4620      	mov	r0, r4
 801aa5a:	f000 fec1 	bl	801b7e0 <__any_on>
 801aa5e:	4681      	mov	r9, r0
 801aa60:	117a      	asrs	r2, r7, #5
 801aa62:	2301      	movs	r3, #1
 801aa64:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801aa68:	f007 071f 	and.w	r7, r7, #31
 801aa6c:	40bb      	lsls	r3, r7
 801aa6e:	4213      	tst	r3, r2
 801aa70:	4629      	mov	r1, r5
 801aa72:	4620      	mov	r0, r4
 801aa74:	bf18      	it	ne
 801aa76:	f049 0902 	orrne.w	r9, r9, #2
 801aa7a:	f7ff fe21 	bl	801a6c0 <rshift>
 801aa7e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801aa82:	1b76      	subs	r6, r6, r5
 801aa84:	2502      	movs	r5, #2
 801aa86:	f1b9 0f00 	cmp.w	r9, #0
 801aa8a:	d047      	beq.n	801ab1c <__gethex+0x38c>
 801aa8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801aa90:	2b02      	cmp	r3, #2
 801aa92:	d015      	beq.n	801aac0 <__gethex+0x330>
 801aa94:	2b03      	cmp	r3, #3
 801aa96:	d017      	beq.n	801aac8 <__gethex+0x338>
 801aa98:	2b01      	cmp	r3, #1
 801aa9a:	d109      	bne.n	801aab0 <__gethex+0x320>
 801aa9c:	f019 0f02 	tst.w	r9, #2
 801aaa0:	d006      	beq.n	801aab0 <__gethex+0x320>
 801aaa2:	f8da 3000 	ldr.w	r3, [sl]
 801aaa6:	ea49 0903 	orr.w	r9, r9, r3
 801aaaa:	f019 0f01 	tst.w	r9, #1
 801aaae:	d10e      	bne.n	801aace <__gethex+0x33e>
 801aab0:	f045 0510 	orr.w	r5, r5, #16
 801aab4:	e032      	b.n	801ab1c <__gethex+0x38c>
 801aab6:	f04f 0901 	mov.w	r9, #1
 801aaba:	e7d1      	b.n	801aa60 <__gethex+0x2d0>
 801aabc:	2501      	movs	r5, #1
 801aabe:	e7e2      	b.n	801aa86 <__gethex+0x2f6>
 801aac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aac2:	f1c3 0301 	rsb	r3, r3, #1
 801aac6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801aac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d0f0      	beq.n	801aab0 <__gethex+0x320>
 801aace:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801aad2:	f104 0314 	add.w	r3, r4, #20
 801aad6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801aada:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801aade:	f04f 0c00 	mov.w	ip, #0
 801aae2:	4618      	mov	r0, r3
 801aae4:	f853 2b04 	ldr.w	r2, [r3], #4
 801aae8:	f1b2 3fff 	cmp.w	r2, #4294967295
 801aaec:	d01b      	beq.n	801ab26 <__gethex+0x396>
 801aaee:	3201      	adds	r2, #1
 801aaf0:	6002      	str	r2, [r0, #0]
 801aaf2:	2d02      	cmp	r5, #2
 801aaf4:	f104 0314 	add.w	r3, r4, #20
 801aaf8:	d13c      	bne.n	801ab74 <__gethex+0x3e4>
 801aafa:	f8d8 2000 	ldr.w	r2, [r8]
 801aafe:	3a01      	subs	r2, #1
 801ab00:	42b2      	cmp	r2, r6
 801ab02:	d109      	bne.n	801ab18 <__gethex+0x388>
 801ab04:	1171      	asrs	r1, r6, #5
 801ab06:	2201      	movs	r2, #1
 801ab08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ab0c:	f006 061f 	and.w	r6, r6, #31
 801ab10:	fa02 f606 	lsl.w	r6, r2, r6
 801ab14:	421e      	tst	r6, r3
 801ab16:	d13a      	bne.n	801ab8e <__gethex+0x3fe>
 801ab18:	f045 0520 	orr.w	r5, r5, #32
 801ab1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ab1e:	601c      	str	r4, [r3, #0]
 801ab20:	9b02      	ldr	r3, [sp, #8]
 801ab22:	601f      	str	r7, [r3, #0]
 801ab24:	e6b0      	b.n	801a888 <__gethex+0xf8>
 801ab26:	4299      	cmp	r1, r3
 801ab28:	f843 cc04 	str.w	ip, [r3, #-4]
 801ab2c:	d8d9      	bhi.n	801aae2 <__gethex+0x352>
 801ab2e:	68a3      	ldr	r3, [r4, #8]
 801ab30:	459b      	cmp	fp, r3
 801ab32:	db17      	blt.n	801ab64 <__gethex+0x3d4>
 801ab34:	6861      	ldr	r1, [r4, #4]
 801ab36:	9801      	ldr	r0, [sp, #4]
 801ab38:	3101      	adds	r1, #1
 801ab3a:	f000 f9c3 	bl	801aec4 <_Balloc>
 801ab3e:	4681      	mov	r9, r0
 801ab40:	b918      	cbnz	r0, 801ab4a <__gethex+0x3ba>
 801ab42:	4b1a      	ldr	r3, [pc, #104]	@ (801abac <__gethex+0x41c>)
 801ab44:	4602      	mov	r2, r0
 801ab46:	2184      	movs	r1, #132	@ 0x84
 801ab48:	e6c5      	b.n	801a8d6 <__gethex+0x146>
 801ab4a:	6922      	ldr	r2, [r4, #16]
 801ab4c:	3202      	adds	r2, #2
 801ab4e:	f104 010c 	add.w	r1, r4, #12
 801ab52:	0092      	lsls	r2, r2, #2
 801ab54:	300c      	adds	r0, #12
 801ab56:	f7fe ff72 	bl	8019a3e <memcpy>
 801ab5a:	4621      	mov	r1, r4
 801ab5c:	9801      	ldr	r0, [sp, #4]
 801ab5e:	f000 f9f1 	bl	801af44 <_Bfree>
 801ab62:	464c      	mov	r4, r9
 801ab64:	6923      	ldr	r3, [r4, #16]
 801ab66:	1c5a      	adds	r2, r3, #1
 801ab68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ab6c:	6122      	str	r2, [r4, #16]
 801ab6e:	2201      	movs	r2, #1
 801ab70:	615a      	str	r2, [r3, #20]
 801ab72:	e7be      	b.n	801aaf2 <__gethex+0x362>
 801ab74:	6922      	ldr	r2, [r4, #16]
 801ab76:	455a      	cmp	r2, fp
 801ab78:	dd0b      	ble.n	801ab92 <__gethex+0x402>
 801ab7a:	2101      	movs	r1, #1
 801ab7c:	4620      	mov	r0, r4
 801ab7e:	f7ff fd9f 	bl	801a6c0 <rshift>
 801ab82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ab86:	3701      	adds	r7, #1
 801ab88:	42bb      	cmp	r3, r7
 801ab8a:	f6ff aee0 	blt.w	801a94e <__gethex+0x1be>
 801ab8e:	2501      	movs	r5, #1
 801ab90:	e7c2      	b.n	801ab18 <__gethex+0x388>
 801ab92:	f016 061f 	ands.w	r6, r6, #31
 801ab96:	d0fa      	beq.n	801ab8e <__gethex+0x3fe>
 801ab98:	4453      	add	r3, sl
 801ab9a:	f1c6 0620 	rsb	r6, r6, #32
 801ab9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801aba2:	f000 fa81 	bl	801b0a8 <__hi0bits>
 801aba6:	42b0      	cmp	r0, r6
 801aba8:	dbe7      	blt.n	801ab7a <__gethex+0x3ea>
 801abaa:	e7f0      	b.n	801ab8e <__gethex+0x3fe>
 801abac:	0801d9b1 	.word	0x0801d9b1

0801abb0 <L_shift>:
 801abb0:	f1c2 0208 	rsb	r2, r2, #8
 801abb4:	0092      	lsls	r2, r2, #2
 801abb6:	b570      	push	{r4, r5, r6, lr}
 801abb8:	f1c2 0620 	rsb	r6, r2, #32
 801abbc:	6843      	ldr	r3, [r0, #4]
 801abbe:	6804      	ldr	r4, [r0, #0]
 801abc0:	fa03 f506 	lsl.w	r5, r3, r6
 801abc4:	432c      	orrs	r4, r5
 801abc6:	40d3      	lsrs	r3, r2
 801abc8:	6004      	str	r4, [r0, #0]
 801abca:	f840 3f04 	str.w	r3, [r0, #4]!
 801abce:	4288      	cmp	r0, r1
 801abd0:	d3f4      	bcc.n	801abbc <L_shift+0xc>
 801abd2:	bd70      	pop	{r4, r5, r6, pc}

0801abd4 <__match>:
 801abd4:	b530      	push	{r4, r5, lr}
 801abd6:	6803      	ldr	r3, [r0, #0]
 801abd8:	3301      	adds	r3, #1
 801abda:	f811 4b01 	ldrb.w	r4, [r1], #1
 801abde:	b914      	cbnz	r4, 801abe6 <__match+0x12>
 801abe0:	6003      	str	r3, [r0, #0]
 801abe2:	2001      	movs	r0, #1
 801abe4:	bd30      	pop	{r4, r5, pc}
 801abe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801abea:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801abee:	2d19      	cmp	r5, #25
 801abf0:	bf98      	it	ls
 801abf2:	3220      	addls	r2, #32
 801abf4:	42a2      	cmp	r2, r4
 801abf6:	d0f0      	beq.n	801abda <__match+0x6>
 801abf8:	2000      	movs	r0, #0
 801abfa:	e7f3      	b.n	801abe4 <__match+0x10>

0801abfc <__hexnan>:
 801abfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac00:	680b      	ldr	r3, [r1, #0]
 801ac02:	6801      	ldr	r1, [r0, #0]
 801ac04:	115e      	asrs	r6, r3, #5
 801ac06:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ac0a:	f013 031f 	ands.w	r3, r3, #31
 801ac0e:	b087      	sub	sp, #28
 801ac10:	bf18      	it	ne
 801ac12:	3604      	addne	r6, #4
 801ac14:	2500      	movs	r5, #0
 801ac16:	1f37      	subs	r7, r6, #4
 801ac18:	4682      	mov	sl, r0
 801ac1a:	4690      	mov	r8, r2
 801ac1c:	9301      	str	r3, [sp, #4]
 801ac1e:	f846 5c04 	str.w	r5, [r6, #-4]
 801ac22:	46b9      	mov	r9, r7
 801ac24:	463c      	mov	r4, r7
 801ac26:	9502      	str	r5, [sp, #8]
 801ac28:	46ab      	mov	fp, r5
 801ac2a:	784a      	ldrb	r2, [r1, #1]
 801ac2c:	1c4b      	adds	r3, r1, #1
 801ac2e:	9303      	str	r3, [sp, #12]
 801ac30:	b342      	cbz	r2, 801ac84 <__hexnan+0x88>
 801ac32:	4610      	mov	r0, r2
 801ac34:	9105      	str	r1, [sp, #20]
 801ac36:	9204      	str	r2, [sp, #16]
 801ac38:	f7ff fd94 	bl	801a764 <__hexdig_fun>
 801ac3c:	2800      	cmp	r0, #0
 801ac3e:	d151      	bne.n	801ace4 <__hexnan+0xe8>
 801ac40:	9a04      	ldr	r2, [sp, #16]
 801ac42:	9905      	ldr	r1, [sp, #20]
 801ac44:	2a20      	cmp	r2, #32
 801ac46:	d818      	bhi.n	801ac7a <__hexnan+0x7e>
 801ac48:	9b02      	ldr	r3, [sp, #8]
 801ac4a:	459b      	cmp	fp, r3
 801ac4c:	dd13      	ble.n	801ac76 <__hexnan+0x7a>
 801ac4e:	454c      	cmp	r4, r9
 801ac50:	d206      	bcs.n	801ac60 <__hexnan+0x64>
 801ac52:	2d07      	cmp	r5, #7
 801ac54:	dc04      	bgt.n	801ac60 <__hexnan+0x64>
 801ac56:	462a      	mov	r2, r5
 801ac58:	4649      	mov	r1, r9
 801ac5a:	4620      	mov	r0, r4
 801ac5c:	f7ff ffa8 	bl	801abb0 <L_shift>
 801ac60:	4544      	cmp	r4, r8
 801ac62:	d952      	bls.n	801ad0a <__hexnan+0x10e>
 801ac64:	2300      	movs	r3, #0
 801ac66:	f1a4 0904 	sub.w	r9, r4, #4
 801ac6a:	f844 3c04 	str.w	r3, [r4, #-4]
 801ac6e:	f8cd b008 	str.w	fp, [sp, #8]
 801ac72:	464c      	mov	r4, r9
 801ac74:	461d      	mov	r5, r3
 801ac76:	9903      	ldr	r1, [sp, #12]
 801ac78:	e7d7      	b.n	801ac2a <__hexnan+0x2e>
 801ac7a:	2a29      	cmp	r2, #41	@ 0x29
 801ac7c:	d157      	bne.n	801ad2e <__hexnan+0x132>
 801ac7e:	3102      	adds	r1, #2
 801ac80:	f8ca 1000 	str.w	r1, [sl]
 801ac84:	f1bb 0f00 	cmp.w	fp, #0
 801ac88:	d051      	beq.n	801ad2e <__hexnan+0x132>
 801ac8a:	454c      	cmp	r4, r9
 801ac8c:	d206      	bcs.n	801ac9c <__hexnan+0xa0>
 801ac8e:	2d07      	cmp	r5, #7
 801ac90:	dc04      	bgt.n	801ac9c <__hexnan+0xa0>
 801ac92:	462a      	mov	r2, r5
 801ac94:	4649      	mov	r1, r9
 801ac96:	4620      	mov	r0, r4
 801ac98:	f7ff ff8a 	bl	801abb0 <L_shift>
 801ac9c:	4544      	cmp	r4, r8
 801ac9e:	d936      	bls.n	801ad0e <__hexnan+0x112>
 801aca0:	f1a8 0204 	sub.w	r2, r8, #4
 801aca4:	4623      	mov	r3, r4
 801aca6:	f853 1b04 	ldr.w	r1, [r3], #4
 801acaa:	f842 1f04 	str.w	r1, [r2, #4]!
 801acae:	429f      	cmp	r7, r3
 801acb0:	d2f9      	bcs.n	801aca6 <__hexnan+0xaa>
 801acb2:	1b3b      	subs	r3, r7, r4
 801acb4:	f023 0303 	bic.w	r3, r3, #3
 801acb8:	3304      	adds	r3, #4
 801acba:	3401      	adds	r4, #1
 801acbc:	3e03      	subs	r6, #3
 801acbe:	42b4      	cmp	r4, r6
 801acc0:	bf88      	it	hi
 801acc2:	2304      	movhi	r3, #4
 801acc4:	4443      	add	r3, r8
 801acc6:	2200      	movs	r2, #0
 801acc8:	f843 2b04 	str.w	r2, [r3], #4
 801accc:	429f      	cmp	r7, r3
 801acce:	d2fb      	bcs.n	801acc8 <__hexnan+0xcc>
 801acd0:	683b      	ldr	r3, [r7, #0]
 801acd2:	b91b      	cbnz	r3, 801acdc <__hexnan+0xe0>
 801acd4:	4547      	cmp	r7, r8
 801acd6:	d128      	bne.n	801ad2a <__hexnan+0x12e>
 801acd8:	2301      	movs	r3, #1
 801acda:	603b      	str	r3, [r7, #0]
 801acdc:	2005      	movs	r0, #5
 801acde:	b007      	add	sp, #28
 801ace0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ace4:	3501      	adds	r5, #1
 801ace6:	2d08      	cmp	r5, #8
 801ace8:	f10b 0b01 	add.w	fp, fp, #1
 801acec:	dd06      	ble.n	801acfc <__hexnan+0x100>
 801acee:	4544      	cmp	r4, r8
 801acf0:	d9c1      	bls.n	801ac76 <__hexnan+0x7a>
 801acf2:	2300      	movs	r3, #0
 801acf4:	f844 3c04 	str.w	r3, [r4, #-4]
 801acf8:	2501      	movs	r5, #1
 801acfa:	3c04      	subs	r4, #4
 801acfc:	6822      	ldr	r2, [r4, #0]
 801acfe:	f000 000f 	and.w	r0, r0, #15
 801ad02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ad06:	6020      	str	r0, [r4, #0]
 801ad08:	e7b5      	b.n	801ac76 <__hexnan+0x7a>
 801ad0a:	2508      	movs	r5, #8
 801ad0c:	e7b3      	b.n	801ac76 <__hexnan+0x7a>
 801ad0e:	9b01      	ldr	r3, [sp, #4]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d0dd      	beq.n	801acd0 <__hexnan+0xd4>
 801ad14:	f1c3 0320 	rsb	r3, r3, #32
 801ad18:	f04f 32ff 	mov.w	r2, #4294967295
 801ad1c:	40da      	lsrs	r2, r3
 801ad1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ad22:	4013      	ands	r3, r2
 801ad24:	f846 3c04 	str.w	r3, [r6, #-4]
 801ad28:	e7d2      	b.n	801acd0 <__hexnan+0xd4>
 801ad2a:	3f04      	subs	r7, #4
 801ad2c:	e7d0      	b.n	801acd0 <__hexnan+0xd4>
 801ad2e:	2004      	movs	r0, #4
 801ad30:	e7d5      	b.n	801acde <__hexnan+0xe2>
	...

0801ad34 <malloc>:
 801ad34:	4b02      	ldr	r3, [pc, #8]	@ (801ad40 <malloc+0xc>)
 801ad36:	4601      	mov	r1, r0
 801ad38:	6818      	ldr	r0, [r3, #0]
 801ad3a:	f000 b825 	b.w	801ad88 <_malloc_r>
 801ad3e:	bf00      	nop
 801ad40:	2400027c 	.word	0x2400027c

0801ad44 <sbrk_aligned>:
 801ad44:	b570      	push	{r4, r5, r6, lr}
 801ad46:	4e0f      	ldr	r6, [pc, #60]	@ (801ad84 <sbrk_aligned+0x40>)
 801ad48:	460c      	mov	r4, r1
 801ad4a:	6831      	ldr	r1, [r6, #0]
 801ad4c:	4605      	mov	r5, r0
 801ad4e:	b911      	cbnz	r1, 801ad56 <sbrk_aligned+0x12>
 801ad50:	f000 ff92 	bl	801bc78 <_sbrk_r>
 801ad54:	6030      	str	r0, [r6, #0]
 801ad56:	4621      	mov	r1, r4
 801ad58:	4628      	mov	r0, r5
 801ad5a:	f000 ff8d 	bl	801bc78 <_sbrk_r>
 801ad5e:	1c43      	adds	r3, r0, #1
 801ad60:	d103      	bne.n	801ad6a <sbrk_aligned+0x26>
 801ad62:	f04f 34ff 	mov.w	r4, #4294967295
 801ad66:	4620      	mov	r0, r4
 801ad68:	bd70      	pop	{r4, r5, r6, pc}
 801ad6a:	1cc4      	adds	r4, r0, #3
 801ad6c:	f024 0403 	bic.w	r4, r4, #3
 801ad70:	42a0      	cmp	r0, r4
 801ad72:	d0f8      	beq.n	801ad66 <sbrk_aligned+0x22>
 801ad74:	1a21      	subs	r1, r4, r0
 801ad76:	4628      	mov	r0, r5
 801ad78:	f000 ff7e 	bl	801bc78 <_sbrk_r>
 801ad7c:	3001      	adds	r0, #1
 801ad7e:	d1f2      	bne.n	801ad66 <sbrk_aligned+0x22>
 801ad80:	e7ef      	b.n	801ad62 <sbrk_aligned+0x1e>
 801ad82:	bf00      	nop
 801ad84:	2400635c 	.word	0x2400635c

0801ad88 <_malloc_r>:
 801ad88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad8c:	1ccd      	adds	r5, r1, #3
 801ad8e:	f025 0503 	bic.w	r5, r5, #3
 801ad92:	3508      	adds	r5, #8
 801ad94:	2d0c      	cmp	r5, #12
 801ad96:	bf38      	it	cc
 801ad98:	250c      	movcc	r5, #12
 801ad9a:	2d00      	cmp	r5, #0
 801ad9c:	4606      	mov	r6, r0
 801ad9e:	db01      	blt.n	801ada4 <_malloc_r+0x1c>
 801ada0:	42a9      	cmp	r1, r5
 801ada2:	d904      	bls.n	801adae <_malloc_r+0x26>
 801ada4:	230c      	movs	r3, #12
 801ada6:	6033      	str	r3, [r6, #0]
 801ada8:	2000      	movs	r0, #0
 801adaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801adae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ae84 <_malloc_r+0xfc>
 801adb2:	f000 f87b 	bl	801aeac <__malloc_lock>
 801adb6:	f8d8 3000 	ldr.w	r3, [r8]
 801adba:	461c      	mov	r4, r3
 801adbc:	bb44      	cbnz	r4, 801ae10 <_malloc_r+0x88>
 801adbe:	4629      	mov	r1, r5
 801adc0:	4630      	mov	r0, r6
 801adc2:	f7ff ffbf 	bl	801ad44 <sbrk_aligned>
 801adc6:	1c43      	adds	r3, r0, #1
 801adc8:	4604      	mov	r4, r0
 801adca:	d158      	bne.n	801ae7e <_malloc_r+0xf6>
 801adcc:	f8d8 4000 	ldr.w	r4, [r8]
 801add0:	4627      	mov	r7, r4
 801add2:	2f00      	cmp	r7, #0
 801add4:	d143      	bne.n	801ae5e <_malloc_r+0xd6>
 801add6:	2c00      	cmp	r4, #0
 801add8:	d04b      	beq.n	801ae72 <_malloc_r+0xea>
 801adda:	6823      	ldr	r3, [r4, #0]
 801addc:	4639      	mov	r1, r7
 801adde:	4630      	mov	r0, r6
 801ade0:	eb04 0903 	add.w	r9, r4, r3
 801ade4:	f000 ff48 	bl	801bc78 <_sbrk_r>
 801ade8:	4581      	cmp	r9, r0
 801adea:	d142      	bne.n	801ae72 <_malloc_r+0xea>
 801adec:	6821      	ldr	r1, [r4, #0]
 801adee:	1a6d      	subs	r5, r5, r1
 801adf0:	4629      	mov	r1, r5
 801adf2:	4630      	mov	r0, r6
 801adf4:	f7ff ffa6 	bl	801ad44 <sbrk_aligned>
 801adf8:	3001      	adds	r0, #1
 801adfa:	d03a      	beq.n	801ae72 <_malloc_r+0xea>
 801adfc:	6823      	ldr	r3, [r4, #0]
 801adfe:	442b      	add	r3, r5
 801ae00:	6023      	str	r3, [r4, #0]
 801ae02:	f8d8 3000 	ldr.w	r3, [r8]
 801ae06:	685a      	ldr	r2, [r3, #4]
 801ae08:	bb62      	cbnz	r2, 801ae64 <_malloc_r+0xdc>
 801ae0a:	f8c8 7000 	str.w	r7, [r8]
 801ae0e:	e00f      	b.n	801ae30 <_malloc_r+0xa8>
 801ae10:	6822      	ldr	r2, [r4, #0]
 801ae12:	1b52      	subs	r2, r2, r5
 801ae14:	d420      	bmi.n	801ae58 <_malloc_r+0xd0>
 801ae16:	2a0b      	cmp	r2, #11
 801ae18:	d917      	bls.n	801ae4a <_malloc_r+0xc2>
 801ae1a:	1961      	adds	r1, r4, r5
 801ae1c:	42a3      	cmp	r3, r4
 801ae1e:	6025      	str	r5, [r4, #0]
 801ae20:	bf18      	it	ne
 801ae22:	6059      	strne	r1, [r3, #4]
 801ae24:	6863      	ldr	r3, [r4, #4]
 801ae26:	bf08      	it	eq
 801ae28:	f8c8 1000 	streq.w	r1, [r8]
 801ae2c:	5162      	str	r2, [r4, r5]
 801ae2e:	604b      	str	r3, [r1, #4]
 801ae30:	4630      	mov	r0, r6
 801ae32:	f000 f841 	bl	801aeb8 <__malloc_unlock>
 801ae36:	f104 000b 	add.w	r0, r4, #11
 801ae3a:	1d23      	adds	r3, r4, #4
 801ae3c:	f020 0007 	bic.w	r0, r0, #7
 801ae40:	1ac2      	subs	r2, r0, r3
 801ae42:	bf1c      	itt	ne
 801ae44:	1a1b      	subne	r3, r3, r0
 801ae46:	50a3      	strne	r3, [r4, r2]
 801ae48:	e7af      	b.n	801adaa <_malloc_r+0x22>
 801ae4a:	6862      	ldr	r2, [r4, #4]
 801ae4c:	42a3      	cmp	r3, r4
 801ae4e:	bf0c      	ite	eq
 801ae50:	f8c8 2000 	streq.w	r2, [r8]
 801ae54:	605a      	strne	r2, [r3, #4]
 801ae56:	e7eb      	b.n	801ae30 <_malloc_r+0xa8>
 801ae58:	4623      	mov	r3, r4
 801ae5a:	6864      	ldr	r4, [r4, #4]
 801ae5c:	e7ae      	b.n	801adbc <_malloc_r+0x34>
 801ae5e:	463c      	mov	r4, r7
 801ae60:	687f      	ldr	r7, [r7, #4]
 801ae62:	e7b6      	b.n	801add2 <_malloc_r+0x4a>
 801ae64:	461a      	mov	r2, r3
 801ae66:	685b      	ldr	r3, [r3, #4]
 801ae68:	42a3      	cmp	r3, r4
 801ae6a:	d1fb      	bne.n	801ae64 <_malloc_r+0xdc>
 801ae6c:	2300      	movs	r3, #0
 801ae6e:	6053      	str	r3, [r2, #4]
 801ae70:	e7de      	b.n	801ae30 <_malloc_r+0xa8>
 801ae72:	230c      	movs	r3, #12
 801ae74:	6033      	str	r3, [r6, #0]
 801ae76:	4630      	mov	r0, r6
 801ae78:	f000 f81e 	bl	801aeb8 <__malloc_unlock>
 801ae7c:	e794      	b.n	801ada8 <_malloc_r+0x20>
 801ae7e:	6005      	str	r5, [r0, #0]
 801ae80:	e7d6      	b.n	801ae30 <_malloc_r+0xa8>
 801ae82:	bf00      	nop
 801ae84:	24006360 	.word	0x24006360

0801ae88 <__ascii_mbtowc>:
 801ae88:	b082      	sub	sp, #8
 801ae8a:	b901      	cbnz	r1, 801ae8e <__ascii_mbtowc+0x6>
 801ae8c:	a901      	add	r1, sp, #4
 801ae8e:	b142      	cbz	r2, 801aea2 <__ascii_mbtowc+0x1a>
 801ae90:	b14b      	cbz	r3, 801aea6 <__ascii_mbtowc+0x1e>
 801ae92:	7813      	ldrb	r3, [r2, #0]
 801ae94:	600b      	str	r3, [r1, #0]
 801ae96:	7812      	ldrb	r2, [r2, #0]
 801ae98:	1e10      	subs	r0, r2, #0
 801ae9a:	bf18      	it	ne
 801ae9c:	2001      	movne	r0, #1
 801ae9e:	b002      	add	sp, #8
 801aea0:	4770      	bx	lr
 801aea2:	4610      	mov	r0, r2
 801aea4:	e7fb      	b.n	801ae9e <__ascii_mbtowc+0x16>
 801aea6:	f06f 0001 	mvn.w	r0, #1
 801aeaa:	e7f8      	b.n	801ae9e <__ascii_mbtowc+0x16>

0801aeac <__malloc_lock>:
 801aeac:	4801      	ldr	r0, [pc, #4]	@ (801aeb4 <__malloc_lock+0x8>)
 801aeae:	f7fe bdc4 	b.w	8019a3a <__retarget_lock_acquire_recursive>
 801aeb2:	bf00      	nop
 801aeb4:	24006358 	.word	0x24006358

0801aeb8 <__malloc_unlock>:
 801aeb8:	4801      	ldr	r0, [pc, #4]	@ (801aec0 <__malloc_unlock+0x8>)
 801aeba:	f7fe bdbf 	b.w	8019a3c <__retarget_lock_release_recursive>
 801aebe:	bf00      	nop
 801aec0:	24006358 	.word	0x24006358

0801aec4 <_Balloc>:
 801aec4:	b570      	push	{r4, r5, r6, lr}
 801aec6:	69c6      	ldr	r6, [r0, #28]
 801aec8:	4604      	mov	r4, r0
 801aeca:	460d      	mov	r5, r1
 801aecc:	b976      	cbnz	r6, 801aeec <_Balloc+0x28>
 801aece:	2010      	movs	r0, #16
 801aed0:	f7ff ff30 	bl	801ad34 <malloc>
 801aed4:	4602      	mov	r2, r0
 801aed6:	61e0      	str	r0, [r4, #28]
 801aed8:	b920      	cbnz	r0, 801aee4 <_Balloc+0x20>
 801aeda:	4b18      	ldr	r3, [pc, #96]	@ (801af3c <_Balloc+0x78>)
 801aedc:	4818      	ldr	r0, [pc, #96]	@ (801af40 <_Balloc+0x7c>)
 801aede:	216b      	movs	r1, #107	@ 0x6b
 801aee0:	f000 feda 	bl	801bc98 <__assert_func>
 801aee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801aee8:	6006      	str	r6, [r0, #0]
 801aeea:	60c6      	str	r6, [r0, #12]
 801aeec:	69e6      	ldr	r6, [r4, #28]
 801aeee:	68f3      	ldr	r3, [r6, #12]
 801aef0:	b183      	cbz	r3, 801af14 <_Balloc+0x50>
 801aef2:	69e3      	ldr	r3, [r4, #28]
 801aef4:	68db      	ldr	r3, [r3, #12]
 801aef6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801aefa:	b9b8      	cbnz	r0, 801af2c <_Balloc+0x68>
 801aefc:	2101      	movs	r1, #1
 801aefe:	fa01 f605 	lsl.w	r6, r1, r5
 801af02:	1d72      	adds	r2, r6, #5
 801af04:	0092      	lsls	r2, r2, #2
 801af06:	4620      	mov	r0, r4
 801af08:	f000 fee4 	bl	801bcd4 <_calloc_r>
 801af0c:	b160      	cbz	r0, 801af28 <_Balloc+0x64>
 801af0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801af12:	e00e      	b.n	801af32 <_Balloc+0x6e>
 801af14:	2221      	movs	r2, #33	@ 0x21
 801af16:	2104      	movs	r1, #4
 801af18:	4620      	mov	r0, r4
 801af1a:	f000 fedb 	bl	801bcd4 <_calloc_r>
 801af1e:	69e3      	ldr	r3, [r4, #28]
 801af20:	60f0      	str	r0, [r6, #12]
 801af22:	68db      	ldr	r3, [r3, #12]
 801af24:	2b00      	cmp	r3, #0
 801af26:	d1e4      	bne.n	801aef2 <_Balloc+0x2e>
 801af28:	2000      	movs	r0, #0
 801af2a:	bd70      	pop	{r4, r5, r6, pc}
 801af2c:	6802      	ldr	r2, [r0, #0]
 801af2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801af32:	2300      	movs	r3, #0
 801af34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801af38:	e7f7      	b.n	801af2a <_Balloc+0x66>
 801af3a:	bf00      	nop
 801af3c:	0801d942 	.word	0x0801d942
 801af40:	0801da22 	.word	0x0801da22

0801af44 <_Bfree>:
 801af44:	b570      	push	{r4, r5, r6, lr}
 801af46:	69c6      	ldr	r6, [r0, #28]
 801af48:	4605      	mov	r5, r0
 801af4a:	460c      	mov	r4, r1
 801af4c:	b976      	cbnz	r6, 801af6c <_Bfree+0x28>
 801af4e:	2010      	movs	r0, #16
 801af50:	f7ff fef0 	bl	801ad34 <malloc>
 801af54:	4602      	mov	r2, r0
 801af56:	61e8      	str	r0, [r5, #28]
 801af58:	b920      	cbnz	r0, 801af64 <_Bfree+0x20>
 801af5a:	4b09      	ldr	r3, [pc, #36]	@ (801af80 <_Bfree+0x3c>)
 801af5c:	4809      	ldr	r0, [pc, #36]	@ (801af84 <_Bfree+0x40>)
 801af5e:	218f      	movs	r1, #143	@ 0x8f
 801af60:	f000 fe9a 	bl	801bc98 <__assert_func>
 801af64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801af68:	6006      	str	r6, [r0, #0]
 801af6a:	60c6      	str	r6, [r0, #12]
 801af6c:	b13c      	cbz	r4, 801af7e <_Bfree+0x3a>
 801af6e:	69eb      	ldr	r3, [r5, #28]
 801af70:	6862      	ldr	r2, [r4, #4]
 801af72:	68db      	ldr	r3, [r3, #12]
 801af74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801af78:	6021      	str	r1, [r4, #0]
 801af7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801af7e:	bd70      	pop	{r4, r5, r6, pc}
 801af80:	0801d942 	.word	0x0801d942
 801af84:	0801da22 	.word	0x0801da22

0801af88 <__multadd>:
 801af88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af8c:	690d      	ldr	r5, [r1, #16]
 801af8e:	4607      	mov	r7, r0
 801af90:	460c      	mov	r4, r1
 801af92:	461e      	mov	r6, r3
 801af94:	f101 0c14 	add.w	ip, r1, #20
 801af98:	2000      	movs	r0, #0
 801af9a:	f8dc 3000 	ldr.w	r3, [ip]
 801af9e:	b299      	uxth	r1, r3
 801afa0:	fb02 6101 	mla	r1, r2, r1, r6
 801afa4:	0c1e      	lsrs	r6, r3, #16
 801afa6:	0c0b      	lsrs	r3, r1, #16
 801afa8:	fb02 3306 	mla	r3, r2, r6, r3
 801afac:	b289      	uxth	r1, r1
 801afae:	3001      	adds	r0, #1
 801afb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801afb4:	4285      	cmp	r5, r0
 801afb6:	f84c 1b04 	str.w	r1, [ip], #4
 801afba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801afbe:	dcec      	bgt.n	801af9a <__multadd+0x12>
 801afc0:	b30e      	cbz	r6, 801b006 <__multadd+0x7e>
 801afc2:	68a3      	ldr	r3, [r4, #8]
 801afc4:	42ab      	cmp	r3, r5
 801afc6:	dc19      	bgt.n	801affc <__multadd+0x74>
 801afc8:	6861      	ldr	r1, [r4, #4]
 801afca:	4638      	mov	r0, r7
 801afcc:	3101      	adds	r1, #1
 801afce:	f7ff ff79 	bl	801aec4 <_Balloc>
 801afd2:	4680      	mov	r8, r0
 801afd4:	b928      	cbnz	r0, 801afe2 <__multadd+0x5a>
 801afd6:	4602      	mov	r2, r0
 801afd8:	4b0c      	ldr	r3, [pc, #48]	@ (801b00c <__multadd+0x84>)
 801afda:	480d      	ldr	r0, [pc, #52]	@ (801b010 <__multadd+0x88>)
 801afdc:	21ba      	movs	r1, #186	@ 0xba
 801afde:	f000 fe5b 	bl	801bc98 <__assert_func>
 801afe2:	6922      	ldr	r2, [r4, #16]
 801afe4:	3202      	adds	r2, #2
 801afe6:	f104 010c 	add.w	r1, r4, #12
 801afea:	0092      	lsls	r2, r2, #2
 801afec:	300c      	adds	r0, #12
 801afee:	f7fe fd26 	bl	8019a3e <memcpy>
 801aff2:	4621      	mov	r1, r4
 801aff4:	4638      	mov	r0, r7
 801aff6:	f7ff ffa5 	bl	801af44 <_Bfree>
 801affa:	4644      	mov	r4, r8
 801affc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b000:	3501      	adds	r5, #1
 801b002:	615e      	str	r6, [r3, #20]
 801b004:	6125      	str	r5, [r4, #16]
 801b006:	4620      	mov	r0, r4
 801b008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b00c:	0801d9b1 	.word	0x0801d9b1
 801b010:	0801da22 	.word	0x0801da22

0801b014 <__s2b>:
 801b014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b018:	460c      	mov	r4, r1
 801b01a:	4615      	mov	r5, r2
 801b01c:	461f      	mov	r7, r3
 801b01e:	2209      	movs	r2, #9
 801b020:	3308      	adds	r3, #8
 801b022:	4606      	mov	r6, r0
 801b024:	fb93 f3f2 	sdiv	r3, r3, r2
 801b028:	2100      	movs	r1, #0
 801b02a:	2201      	movs	r2, #1
 801b02c:	429a      	cmp	r2, r3
 801b02e:	db09      	blt.n	801b044 <__s2b+0x30>
 801b030:	4630      	mov	r0, r6
 801b032:	f7ff ff47 	bl	801aec4 <_Balloc>
 801b036:	b940      	cbnz	r0, 801b04a <__s2b+0x36>
 801b038:	4602      	mov	r2, r0
 801b03a:	4b19      	ldr	r3, [pc, #100]	@ (801b0a0 <__s2b+0x8c>)
 801b03c:	4819      	ldr	r0, [pc, #100]	@ (801b0a4 <__s2b+0x90>)
 801b03e:	21d3      	movs	r1, #211	@ 0xd3
 801b040:	f000 fe2a 	bl	801bc98 <__assert_func>
 801b044:	0052      	lsls	r2, r2, #1
 801b046:	3101      	adds	r1, #1
 801b048:	e7f0      	b.n	801b02c <__s2b+0x18>
 801b04a:	9b08      	ldr	r3, [sp, #32]
 801b04c:	6143      	str	r3, [r0, #20]
 801b04e:	2d09      	cmp	r5, #9
 801b050:	f04f 0301 	mov.w	r3, #1
 801b054:	6103      	str	r3, [r0, #16]
 801b056:	dd16      	ble.n	801b086 <__s2b+0x72>
 801b058:	f104 0909 	add.w	r9, r4, #9
 801b05c:	46c8      	mov	r8, r9
 801b05e:	442c      	add	r4, r5
 801b060:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b064:	4601      	mov	r1, r0
 801b066:	3b30      	subs	r3, #48	@ 0x30
 801b068:	220a      	movs	r2, #10
 801b06a:	4630      	mov	r0, r6
 801b06c:	f7ff ff8c 	bl	801af88 <__multadd>
 801b070:	45a0      	cmp	r8, r4
 801b072:	d1f5      	bne.n	801b060 <__s2b+0x4c>
 801b074:	f1a5 0408 	sub.w	r4, r5, #8
 801b078:	444c      	add	r4, r9
 801b07a:	1b2d      	subs	r5, r5, r4
 801b07c:	1963      	adds	r3, r4, r5
 801b07e:	42bb      	cmp	r3, r7
 801b080:	db04      	blt.n	801b08c <__s2b+0x78>
 801b082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b086:	340a      	adds	r4, #10
 801b088:	2509      	movs	r5, #9
 801b08a:	e7f6      	b.n	801b07a <__s2b+0x66>
 801b08c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b090:	4601      	mov	r1, r0
 801b092:	3b30      	subs	r3, #48	@ 0x30
 801b094:	220a      	movs	r2, #10
 801b096:	4630      	mov	r0, r6
 801b098:	f7ff ff76 	bl	801af88 <__multadd>
 801b09c:	e7ee      	b.n	801b07c <__s2b+0x68>
 801b09e:	bf00      	nop
 801b0a0:	0801d9b1 	.word	0x0801d9b1
 801b0a4:	0801da22 	.word	0x0801da22

0801b0a8 <__hi0bits>:
 801b0a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b0ac:	4603      	mov	r3, r0
 801b0ae:	bf36      	itet	cc
 801b0b0:	0403      	lslcc	r3, r0, #16
 801b0b2:	2000      	movcs	r0, #0
 801b0b4:	2010      	movcc	r0, #16
 801b0b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b0ba:	bf3c      	itt	cc
 801b0bc:	021b      	lslcc	r3, r3, #8
 801b0be:	3008      	addcc	r0, #8
 801b0c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b0c4:	bf3c      	itt	cc
 801b0c6:	011b      	lslcc	r3, r3, #4
 801b0c8:	3004      	addcc	r0, #4
 801b0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b0ce:	bf3c      	itt	cc
 801b0d0:	009b      	lslcc	r3, r3, #2
 801b0d2:	3002      	addcc	r0, #2
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	db05      	blt.n	801b0e4 <__hi0bits+0x3c>
 801b0d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b0dc:	f100 0001 	add.w	r0, r0, #1
 801b0e0:	bf08      	it	eq
 801b0e2:	2020      	moveq	r0, #32
 801b0e4:	4770      	bx	lr

0801b0e6 <__lo0bits>:
 801b0e6:	6803      	ldr	r3, [r0, #0]
 801b0e8:	4602      	mov	r2, r0
 801b0ea:	f013 0007 	ands.w	r0, r3, #7
 801b0ee:	d00b      	beq.n	801b108 <__lo0bits+0x22>
 801b0f0:	07d9      	lsls	r1, r3, #31
 801b0f2:	d421      	bmi.n	801b138 <__lo0bits+0x52>
 801b0f4:	0798      	lsls	r0, r3, #30
 801b0f6:	bf49      	itett	mi
 801b0f8:	085b      	lsrmi	r3, r3, #1
 801b0fa:	089b      	lsrpl	r3, r3, #2
 801b0fc:	2001      	movmi	r0, #1
 801b0fe:	6013      	strmi	r3, [r2, #0]
 801b100:	bf5c      	itt	pl
 801b102:	6013      	strpl	r3, [r2, #0]
 801b104:	2002      	movpl	r0, #2
 801b106:	4770      	bx	lr
 801b108:	b299      	uxth	r1, r3
 801b10a:	b909      	cbnz	r1, 801b110 <__lo0bits+0x2a>
 801b10c:	0c1b      	lsrs	r3, r3, #16
 801b10e:	2010      	movs	r0, #16
 801b110:	b2d9      	uxtb	r1, r3
 801b112:	b909      	cbnz	r1, 801b118 <__lo0bits+0x32>
 801b114:	3008      	adds	r0, #8
 801b116:	0a1b      	lsrs	r3, r3, #8
 801b118:	0719      	lsls	r1, r3, #28
 801b11a:	bf04      	itt	eq
 801b11c:	091b      	lsreq	r3, r3, #4
 801b11e:	3004      	addeq	r0, #4
 801b120:	0799      	lsls	r1, r3, #30
 801b122:	bf04      	itt	eq
 801b124:	089b      	lsreq	r3, r3, #2
 801b126:	3002      	addeq	r0, #2
 801b128:	07d9      	lsls	r1, r3, #31
 801b12a:	d403      	bmi.n	801b134 <__lo0bits+0x4e>
 801b12c:	085b      	lsrs	r3, r3, #1
 801b12e:	f100 0001 	add.w	r0, r0, #1
 801b132:	d003      	beq.n	801b13c <__lo0bits+0x56>
 801b134:	6013      	str	r3, [r2, #0]
 801b136:	4770      	bx	lr
 801b138:	2000      	movs	r0, #0
 801b13a:	4770      	bx	lr
 801b13c:	2020      	movs	r0, #32
 801b13e:	4770      	bx	lr

0801b140 <__i2b>:
 801b140:	b510      	push	{r4, lr}
 801b142:	460c      	mov	r4, r1
 801b144:	2101      	movs	r1, #1
 801b146:	f7ff febd 	bl	801aec4 <_Balloc>
 801b14a:	4602      	mov	r2, r0
 801b14c:	b928      	cbnz	r0, 801b15a <__i2b+0x1a>
 801b14e:	4b05      	ldr	r3, [pc, #20]	@ (801b164 <__i2b+0x24>)
 801b150:	4805      	ldr	r0, [pc, #20]	@ (801b168 <__i2b+0x28>)
 801b152:	f240 1145 	movw	r1, #325	@ 0x145
 801b156:	f000 fd9f 	bl	801bc98 <__assert_func>
 801b15a:	2301      	movs	r3, #1
 801b15c:	6144      	str	r4, [r0, #20]
 801b15e:	6103      	str	r3, [r0, #16]
 801b160:	bd10      	pop	{r4, pc}
 801b162:	bf00      	nop
 801b164:	0801d9b1 	.word	0x0801d9b1
 801b168:	0801da22 	.word	0x0801da22

0801b16c <__multiply>:
 801b16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b170:	4614      	mov	r4, r2
 801b172:	690a      	ldr	r2, [r1, #16]
 801b174:	6923      	ldr	r3, [r4, #16]
 801b176:	429a      	cmp	r2, r3
 801b178:	bfa8      	it	ge
 801b17a:	4623      	movge	r3, r4
 801b17c:	460f      	mov	r7, r1
 801b17e:	bfa4      	itt	ge
 801b180:	460c      	movge	r4, r1
 801b182:	461f      	movge	r7, r3
 801b184:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801b188:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801b18c:	68a3      	ldr	r3, [r4, #8]
 801b18e:	6861      	ldr	r1, [r4, #4]
 801b190:	eb0a 0609 	add.w	r6, sl, r9
 801b194:	42b3      	cmp	r3, r6
 801b196:	b085      	sub	sp, #20
 801b198:	bfb8      	it	lt
 801b19a:	3101      	addlt	r1, #1
 801b19c:	f7ff fe92 	bl	801aec4 <_Balloc>
 801b1a0:	b930      	cbnz	r0, 801b1b0 <__multiply+0x44>
 801b1a2:	4602      	mov	r2, r0
 801b1a4:	4b44      	ldr	r3, [pc, #272]	@ (801b2b8 <__multiply+0x14c>)
 801b1a6:	4845      	ldr	r0, [pc, #276]	@ (801b2bc <__multiply+0x150>)
 801b1a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b1ac:	f000 fd74 	bl	801bc98 <__assert_func>
 801b1b0:	f100 0514 	add.w	r5, r0, #20
 801b1b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b1b8:	462b      	mov	r3, r5
 801b1ba:	2200      	movs	r2, #0
 801b1bc:	4543      	cmp	r3, r8
 801b1be:	d321      	bcc.n	801b204 <__multiply+0x98>
 801b1c0:	f107 0114 	add.w	r1, r7, #20
 801b1c4:	f104 0214 	add.w	r2, r4, #20
 801b1c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801b1cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801b1d0:	9302      	str	r3, [sp, #8]
 801b1d2:	1b13      	subs	r3, r2, r4
 801b1d4:	3b15      	subs	r3, #21
 801b1d6:	f023 0303 	bic.w	r3, r3, #3
 801b1da:	3304      	adds	r3, #4
 801b1dc:	f104 0715 	add.w	r7, r4, #21
 801b1e0:	42ba      	cmp	r2, r7
 801b1e2:	bf38      	it	cc
 801b1e4:	2304      	movcc	r3, #4
 801b1e6:	9301      	str	r3, [sp, #4]
 801b1e8:	9b02      	ldr	r3, [sp, #8]
 801b1ea:	9103      	str	r1, [sp, #12]
 801b1ec:	428b      	cmp	r3, r1
 801b1ee:	d80c      	bhi.n	801b20a <__multiply+0x9e>
 801b1f0:	2e00      	cmp	r6, #0
 801b1f2:	dd03      	ble.n	801b1fc <__multiply+0x90>
 801b1f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d05b      	beq.n	801b2b4 <__multiply+0x148>
 801b1fc:	6106      	str	r6, [r0, #16]
 801b1fe:	b005      	add	sp, #20
 801b200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b204:	f843 2b04 	str.w	r2, [r3], #4
 801b208:	e7d8      	b.n	801b1bc <__multiply+0x50>
 801b20a:	f8b1 a000 	ldrh.w	sl, [r1]
 801b20e:	f1ba 0f00 	cmp.w	sl, #0
 801b212:	d024      	beq.n	801b25e <__multiply+0xf2>
 801b214:	f104 0e14 	add.w	lr, r4, #20
 801b218:	46a9      	mov	r9, r5
 801b21a:	f04f 0c00 	mov.w	ip, #0
 801b21e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b222:	f8d9 3000 	ldr.w	r3, [r9]
 801b226:	fa1f fb87 	uxth.w	fp, r7
 801b22a:	b29b      	uxth	r3, r3
 801b22c:	fb0a 330b 	mla	r3, sl, fp, r3
 801b230:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801b234:	f8d9 7000 	ldr.w	r7, [r9]
 801b238:	4463      	add	r3, ip
 801b23a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b23e:	fb0a c70b 	mla	r7, sl, fp, ip
 801b242:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801b246:	b29b      	uxth	r3, r3
 801b248:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b24c:	4572      	cmp	r2, lr
 801b24e:	f849 3b04 	str.w	r3, [r9], #4
 801b252:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b256:	d8e2      	bhi.n	801b21e <__multiply+0xb2>
 801b258:	9b01      	ldr	r3, [sp, #4]
 801b25a:	f845 c003 	str.w	ip, [r5, r3]
 801b25e:	9b03      	ldr	r3, [sp, #12]
 801b260:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b264:	3104      	adds	r1, #4
 801b266:	f1b9 0f00 	cmp.w	r9, #0
 801b26a:	d021      	beq.n	801b2b0 <__multiply+0x144>
 801b26c:	682b      	ldr	r3, [r5, #0]
 801b26e:	f104 0c14 	add.w	ip, r4, #20
 801b272:	46ae      	mov	lr, r5
 801b274:	f04f 0a00 	mov.w	sl, #0
 801b278:	f8bc b000 	ldrh.w	fp, [ip]
 801b27c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801b280:	fb09 770b 	mla	r7, r9, fp, r7
 801b284:	4457      	add	r7, sl
 801b286:	b29b      	uxth	r3, r3
 801b288:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b28c:	f84e 3b04 	str.w	r3, [lr], #4
 801b290:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b294:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b298:	f8be 3000 	ldrh.w	r3, [lr]
 801b29c:	fb09 330a 	mla	r3, r9, sl, r3
 801b2a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801b2a4:	4562      	cmp	r2, ip
 801b2a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b2aa:	d8e5      	bhi.n	801b278 <__multiply+0x10c>
 801b2ac:	9f01      	ldr	r7, [sp, #4]
 801b2ae:	51eb      	str	r3, [r5, r7]
 801b2b0:	3504      	adds	r5, #4
 801b2b2:	e799      	b.n	801b1e8 <__multiply+0x7c>
 801b2b4:	3e01      	subs	r6, #1
 801b2b6:	e79b      	b.n	801b1f0 <__multiply+0x84>
 801b2b8:	0801d9b1 	.word	0x0801d9b1
 801b2bc:	0801da22 	.word	0x0801da22

0801b2c0 <__pow5mult>:
 801b2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b2c4:	4615      	mov	r5, r2
 801b2c6:	f012 0203 	ands.w	r2, r2, #3
 801b2ca:	4607      	mov	r7, r0
 801b2cc:	460e      	mov	r6, r1
 801b2ce:	d007      	beq.n	801b2e0 <__pow5mult+0x20>
 801b2d0:	4c25      	ldr	r4, [pc, #148]	@ (801b368 <__pow5mult+0xa8>)
 801b2d2:	3a01      	subs	r2, #1
 801b2d4:	2300      	movs	r3, #0
 801b2d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b2da:	f7ff fe55 	bl	801af88 <__multadd>
 801b2de:	4606      	mov	r6, r0
 801b2e0:	10ad      	asrs	r5, r5, #2
 801b2e2:	d03d      	beq.n	801b360 <__pow5mult+0xa0>
 801b2e4:	69fc      	ldr	r4, [r7, #28]
 801b2e6:	b97c      	cbnz	r4, 801b308 <__pow5mult+0x48>
 801b2e8:	2010      	movs	r0, #16
 801b2ea:	f7ff fd23 	bl	801ad34 <malloc>
 801b2ee:	4602      	mov	r2, r0
 801b2f0:	61f8      	str	r0, [r7, #28]
 801b2f2:	b928      	cbnz	r0, 801b300 <__pow5mult+0x40>
 801b2f4:	4b1d      	ldr	r3, [pc, #116]	@ (801b36c <__pow5mult+0xac>)
 801b2f6:	481e      	ldr	r0, [pc, #120]	@ (801b370 <__pow5mult+0xb0>)
 801b2f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801b2fc:	f000 fccc 	bl	801bc98 <__assert_func>
 801b300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b304:	6004      	str	r4, [r0, #0]
 801b306:	60c4      	str	r4, [r0, #12]
 801b308:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801b30c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b310:	b94c      	cbnz	r4, 801b326 <__pow5mult+0x66>
 801b312:	f240 2171 	movw	r1, #625	@ 0x271
 801b316:	4638      	mov	r0, r7
 801b318:	f7ff ff12 	bl	801b140 <__i2b>
 801b31c:	2300      	movs	r3, #0
 801b31e:	f8c8 0008 	str.w	r0, [r8, #8]
 801b322:	4604      	mov	r4, r0
 801b324:	6003      	str	r3, [r0, #0]
 801b326:	f04f 0900 	mov.w	r9, #0
 801b32a:	07eb      	lsls	r3, r5, #31
 801b32c:	d50a      	bpl.n	801b344 <__pow5mult+0x84>
 801b32e:	4631      	mov	r1, r6
 801b330:	4622      	mov	r2, r4
 801b332:	4638      	mov	r0, r7
 801b334:	f7ff ff1a 	bl	801b16c <__multiply>
 801b338:	4631      	mov	r1, r6
 801b33a:	4680      	mov	r8, r0
 801b33c:	4638      	mov	r0, r7
 801b33e:	f7ff fe01 	bl	801af44 <_Bfree>
 801b342:	4646      	mov	r6, r8
 801b344:	106d      	asrs	r5, r5, #1
 801b346:	d00b      	beq.n	801b360 <__pow5mult+0xa0>
 801b348:	6820      	ldr	r0, [r4, #0]
 801b34a:	b938      	cbnz	r0, 801b35c <__pow5mult+0x9c>
 801b34c:	4622      	mov	r2, r4
 801b34e:	4621      	mov	r1, r4
 801b350:	4638      	mov	r0, r7
 801b352:	f7ff ff0b 	bl	801b16c <__multiply>
 801b356:	6020      	str	r0, [r4, #0]
 801b358:	f8c0 9000 	str.w	r9, [r0]
 801b35c:	4604      	mov	r4, r0
 801b35e:	e7e4      	b.n	801b32a <__pow5mult+0x6a>
 801b360:	4630      	mov	r0, r6
 801b362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b366:	bf00      	nop
 801b368:	0801da7c 	.word	0x0801da7c
 801b36c:	0801d942 	.word	0x0801d942
 801b370:	0801da22 	.word	0x0801da22

0801b374 <__lshift>:
 801b374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b378:	460c      	mov	r4, r1
 801b37a:	6849      	ldr	r1, [r1, #4]
 801b37c:	6923      	ldr	r3, [r4, #16]
 801b37e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b382:	68a3      	ldr	r3, [r4, #8]
 801b384:	4607      	mov	r7, r0
 801b386:	4691      	mov	r9, r2
 801b388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b38c:	f108 0601 	add.w	r6, r8, #1
 801b390:	42b3      	cmp	r3, r6
 801b392:	db0b      	blt.n	801b3ac <__lshift+0x38>
 801b394:	4638      	mov	r0, r7
 801b396:	f7ff fd95 	bl	801aec4 <_Balloc>
 801b39a:	4605      	mov	r5, r0
 801b39c:	b948      	cbnz	r0, 801b3b2 <__lshift+0x3e>
 801b39e:	4602      	mov	r2, r0
 801b3a0:	4b28      	ldr	r3, [pc, #160]	@ (801b444 <__lshift+0xd0>)
 801b3a2:	4829      	ldr	r0, [pc, #164]	@ (801b448 <__lshift+0xd4>)
 801b3a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801b3a8:	f000 fc76 	bl	801bc98 <__assert_func>
 801b3ac:	3101      	adds	r1, #1
 801b3ae:	005b      	lsls	r3, r3, #1
 801b3b0:	e7ee      	b.n	801b390 <__lshift+0x1c>
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	f100 0114 	add.w	r1, r0, #20
 801b3b8:	f100 0210 	add.w	r2, r0, #16
 801b3bc:	4618      	mov	r0, r3
 801b3be:	4553      	cmp	r3, sl
 801b3c0:	db33      	blt.n	801b42a <__lshift+0xb6>
 801b3c2:	6920      	ldr	r0, [r4, #16]
 801b3c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b3c8:	f104 0314 	add.w	r3, r4, #20
 801b3cc:	f019 091f 	ands.w	r9, r9, #31
 801b3d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b3d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b3d8:	d02b      	beq.n	801b432 <__lshift+0xbe>
 801b3da:	f1c9 0e20 	rsb	lr, r9, #32
 801b3de:	468a      	mov	sl, r1
 801b3e0:	2200      	movs	r2, #0
 801b3e2:	6818      	ldr	r0, [r3, #0]
 801b3e4:	fa00 f009 	lsl.w	r0, r0, r9
 801b3e8:	4310      	orrs	r0, r2
 801b3ea:	f84a 0b04 	str.w	r0, [sl], #4
 801b3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801b3f2:	459c      	cmp	ip, r3
 801b3f4:	fa22 f20e 	lsr.w	r2, r2, lr
 801b3f8:	d8f3      	bhi.n	801b3e2 <__lshift+0x6e>
 801b3fa:	ebac 0304 	sub.w	r3, ip, r4
 801b3fe:	3b15      	subs	r3, #21
 801b400:	f023 0303 	bic.w	r3, r3, #3
 801b404:	3304      	adds	r3, #4
 801b406:	f104 0015 	add.w	r0, r4, #21
 801b40a:	4584      	cmp	ip, r0
 801b40c:	bf38      	it	cc
 801b40e:	2304      	movcc	r3, #4
 801b410:	50ca      	str	r2, [r1, r3]
 801b412:	b10a      	cbz	r2, 801b418 <__lshift+0xa4>
 801b414:	f108 0602 	add.w	r6, r8, #2
 801b418:	3e01      	subs	r6, #1
 801b41a:	4638      	mov	r0, r7
 801b41c:	612e      	str	r6, [r5, #16]
 801b41e:	4621      	mov	r1, r4
 801b420:	f7ff fd90 	bl	801af44 <_Bfree>
 801b424:	4628      	mov	r0, r5
 801b426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b42a:	f842 0f04 	str.w	r0, [r2, #4]!
 801b42e:	3301      	adds	r3, #1
 801b430:	e7c5      	b.n	801b3be <__lshift+0x4a>
 801b432:	3904      	subs	r1, #4
 801b434:	f853 2b04 	ldr.w	r2, [r3], #4
 801b438:	f841 2f04 	str.w	r2, [r1, #4]!
 801b43c:	459c      	cmp	ip, r3
 801b43e:	d8f9      	bhi.n	801b434 <__lshift+0xc0>
 801b440:	e7ea      	b.n	801b418 <__lshift+0xa4>
 801b442:	bf00      	nop
 801b444:	0801d9b1 	.word	0x0801d9b1
 801b448:	0801da22 	.word	0x0801da22

0801b44c <__mcmp>:
 801b44c:	690a      	ldr	r2, [r1, #16]
 801b44e:	4603      	mov	r3, r0
 801b450:	6900      	ldr	r0, [r0, #16]
 801b452:	1a80      	subs	r0, r0, r2
 801b454:	b530      	push	{r4, r5, lr}
 801b456:	d10e      	bne.n	801b476 <__mcmp+0x2a>
 801b458:	3314      	adds	r3, #20
 801b45a:	3114      	adds	r1, #20
 801b45c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801b460:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801b464:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b468:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b46c:	4295      	cmp	r5, r2
 801b46e:	d003      	beq.n	801b478 <__mcmp+0x2c>
 801b470:	d205      	bcs.n	801b47e <__mcmp+0x32>
 801b472:	f04f 30ff 	mov.w	r0, #4294967295
 801b476:	bd30      	pop	{r4, r5, pc}
 801b478:	42a3      	cmp	r3, r4
 801b47a:	d3f3      	bcc.n	801b464 <__mcmp+0x18>
 801b47c:	e7fb      	b.n	801b476 <__mcmp+0x2a>
 801b47e:	2001      	movs	r0, #1
 801b480:	e7f9      	b.n	801b476 <__mcmp+0x2a>
	...

0801b484 <__mdiff>:
 801b484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b488:	4689      	mov	r9, r1
 801b48a:	4606      	mov	r6, r0
 801b48c:	4611      	mov	r1, r2
 801b48e:	4648      	mov	r0, r9
 801b490:	4614      	mov	r4, r2
 801b492:	f7ff ffdb 	bl	801b44c <__mcmp>
 801b496:	1e05      	subs	r5, r0, #0
 801b498:	d112      	bne.n	801b4c0 <__mdiff+0x3c>
 801b49a:	4629      	mov	r1, r5
 801b49c:	4630      	mov	r0, r6
 801b49e:	f7ff fd11 	bl	801aec4 <_Balloc>
 801b4a2:	4602      	mov	r2, r0
 801b4a4:	b928      	cbnz	r0, 801b4b2 <__mdiff+0x2e>
 801b4a6:	4b3f      	ldr	r3, [pc, #252]	@ (801b5a4 <__mdiff+0x120>)
 801b4a8:	f240 2137 	movw	r1, #567	@ 0x237
 801b4ac:	483e      	ldr	r0, [pc, #248]	@ (801b5a8 <__mdiff+0x124>)
 801b4ae:	f000 fbf3 	bl	801bc98 <__assert_func>
 801b4b2:	2301      	movs	r3, #1
 801b4b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b4b8:	4610      	mov	r0, r2
 801b4ba:	b003      	add	sp, #12
 801b4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4c0:	bfbc      	itt	lt
 801b4c2:	464b      	movlt	r3, r9
 801b4c4:	46a1      	movlt	r9, r4
 801b4c6:	4630      	mov	r0, r6
 801b4c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b4cc:	bfba      	itte	lt
 801b4ce:	461c      	movlt	r4, r3
 801b4d0:	2501      	movlt	r5, #1
 801b4d2:	2500      	movge	r5, #0
 801b4d4:	f7ff fcf6 	bl	801aec4 <_Balloc>
 801b4d8:	4602      	mov	r2, r0
 801b4da:	b918      	cbnz	r0, 801b4e4 <__mdiff+0x60>
 801b4dc:	4b31      	ldr	r3, [pc, #196]	@ (801b5a4 <__mdiff+0x120>)
 801b4de:	f240 2145 	movw	r1, #581	@ 0x245
 801b4e2:	e7e3      	b.n	801b4ac <__mdiff+0x28>
 801b4e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801b4e8:	6926      	ldr	r6, [r4, #16]
 801b4ea:	60c5      	str	r5, [r0, #12]
 801b4ec:	f109 0310 	add.w	r3, r9, #16
 801b4f0:	f109 0514 	add.w	r5, r9, #20
 801b4f4:	f104 0e14 	add.w	lr, r4, #20
 801b4f8:	f100 0b14 	add.w	fp, r0, #20
 801b4fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801b500:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801b504:	9301      	str	r3, [sp, #4]
 801b506:	46d9      	mov	r9, fp
 801b508:	f04f 0c00 	mov.w	ip, #0
 801b50c:	9b01      	ldr	r3, [sp, #4]
 801b50e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801b512:	f853 af04 	ldr.w	sl, [r3, #4]!
 801b516:	9301      	str	r3, [sp, #4]
 801b518:	fa1f f38a 	uxth.w	r3, sl
 801b51c:	4619      	mov	r1, r3
 801b51e:	b283      	uxth	r3, r0
 801b520:	1acb      	subs	r3, r1, r3
 801b522:	0c00      	lsrs	r0, r0, #16
 801b524:	4463      	add	r3, ip
 801b526:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801b52a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801b52e:	b29b      	uxth	r3, r3
 801b530:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801b534:	4576      	cmp	r6, lr
 801b536:	f849 3b04 	str.w	r3, [r9], #4
 801b53a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b53e:	d8e5      	bhi.n	801b50c <__mdiff+0x88>
 801b540:	1b33      	subs	r3, r6, r4
 801b542:	3b15      	subs	r3, #21
 801b544:	f023 0303 	bic.w	r3, r3, #3
 801b548:	3415      	adds	r4, #21
 801b54a:	3304      	adds	r3, #4
 801b54c:	42a6      	cmp	r6, r4
 801b54e:	bf38      	it	cc
 801b550:	2304      	movcc	r3, #4
 801b552:	441d      	add	r5, r3
 801b554:	445b      	add	r3, fp
 801b556:	461e      	mov	r6, r3
 801b558:	462c      	mov	r4, r5
 801b55a:	4544      	cmp	r4, r8
 801b55c:	d30e      	bcc.n	801b57c <__mdiff+0xf8>
 801b55e:	f108 0103 	add.w	r1, r8, #3
 801b562:	1b49      	subs	r1, r1, r5
 801b564:	f021 0103 	bic.w	r1, r1, #3
 801b568:	3d03      	subs	r5, #3
 801b56a:	45a8      	cmp	r8, r5
 801b56c:	bf38      	it	cc
 801b56e:	2100      	movcc	r1, #0
 801b570:	440b      	add	r3, r1
 801b572:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b576:	b191      	cbz	r1, 801b59e <__mdiff+0x11a>
 801b578:	6117      	str	r7, [r2, #16]
 801b57a:	e79d      	b.n	801b4b8 <__mdiff+0x34>
 801b57c:	f854 1b04 	ldr.w	r1, [r4], #4
 801b580:	46e6      	mov	lr, ip
 801b582:	0c08      	lsrs	r0, r1, #16
 801b584:	fa1c fc81 	uxtah	ip, ip, r1
 801b588:	4471      	add	r1, lr
 801b58a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801b58e:	b289      	uxth	r1, r1
 801b590:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801b594:	f846 1b04 	str.w	r1, [r6], #4
 801b598:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b59c:	e7dd      	b.n	801b55a <__mdiff+0xd6>
 801b59e:	3f01      	subs	r7, #1
 801b5a0:	e7e7      	b.n	801b572 <__mdiff+0xee>
 801b5a2:	bf00      	nop
 801b5a4:	0801d9b1 	.word	0x0801d9b1
 801b5a8:	0801da22 	.word	0x0801da22

0801b5ac <__ulp>:
 801b5ac:	b082      	sub	sp, #8
 801b5ae:	ed8d 0b00 	vstr	d0, [sp]
 801b5b2:	9a01      	ldr	r2, [sp, #4]
 801b5b4:	4b0f      	ldr	r3, [pc, #60]	@ (801b5f4 <__ulp+0x48>)
 801b5b6:	4013      	ands	r3, r2
 801b5b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	dc08      	bgt.n	801b5d2 <__ulp+0x26>
 801b5c0:	425b      	negs	r3, r3
 801b5c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801b5c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 801b5ca:	da04      	bge.n	801b5d6 <__ulp+0x2a>
 801b5cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801b5d0:	4113      	asrs	r3, r2
 801b5d2:	2200      	movs	r2, #0
 801b5d4:	e008      	b.n	801b5e8 <__ulp+0x3c>
 801b5d6:	f1a2 0314 	sub.w	r3, r2, #20
 801b5da:	2b1e      	cmp	r3, #30
 801b5dc:	bfda      	itte	le
 801b5de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801b5e2:	40da      	lsrle	r2, r3
 801b5e4:	2201      	movgt	r2, #1
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	4619      	mov	r1, r3
 801b5ea:	4610      	mov	r0, r2
 801b5ec:	ec41 0b10 	vmov	d0, r0, r1
 801b5f0:	b002      	add	sp, #8
 801b5f2:	4770      	bx	lr
 801b5f4:	7ff00000 	.word	0x7ff00000

0801b5f8 <__b2d>:
 801b5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5fc:	6906      	ldr	r6, [r0, #16]
 801b5fe:	f100 0814 	add.w	r8, r0, #20
 801b602:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801b606:	1f37      	subs	r7, r6, #4
 801b608:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b60c:	4610      	mov	r0, r2
 801b60e:	f7ff fd4b 	bl	801b0a8 <__hi0bits>
 801b612:	f1c0 0320 	rsb	r3, r0, #32
 801b616:	280a      	cmp	r0, #10
 801b618:	600b      	str	r3, [r1, #0]
 801b61a:	491b      	ldr	r1, [pc, #108]	@ (801b688 <__b2d+0x90>)
 801b61c:	dc15      	bgt.n	801b64a <__b2d+0x52>
 801b61e:	f1c0 0c0b 	rsb	ip, r0, #11
 801b622:	fa22 f30c 	lsr.w	r3, r2, ip
 801b626:	45b8      	cmp	r8, r7
 801b628:	ea43 0501 	orr.w	r5, r3, r1
 801b62c:	bf34      	ite	cc
 801b62e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b632:	2300      	movcs	r3, #0
 801b634:	3015      	adds	r0, #21
 801b636:	fa02 f000 	lsl.w	r0, r2, r0
 801b63a:	fa23 f30c 	lsr.w	r3, r3, ip
 801b63e:	4303      	orrs	r3, r0
 801b640:	461c      	mov	r4, r3
 801b642:	ec45 4b10 	vmov	d0, r4, r5
 801b646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b64a:	45b8      	cmp	r8, r7
 801b64c:	bf3a      	itte	cc
 801b64e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b652:	f1a6 0708 	subcc.w	r7, r6, #8
 801b656:	2300      	movcs	r3, #0
 801b658:	380b      	subs	r0, #11
 801b65a:	d012      	beq.n	801b682 <__b2d+0x8a>
 801b65c:	f1c0 0120 	rsb	r1, r0, #32
 801b660:	fa23 f401 	lsr.w	r4, r3, r1
 801b664:	4082      	lsls	r2, r0
 801b666:	4322      	orrs	r2, r4
 801b668:	4547      	cmp	r7, r8
 801b66a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801b66e:	bf8c      	ite	hi
 801b670:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801b674:	2200      	movls	r2, #0
 801b676:	4083      	lsls	r3, r0
 801b678:	40ca      	lsrs	r2, r1
 801b67a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801b67e:	4313      	orrs	r3, r2
 801b680:	e7de      	b.n	801b640 <__b2d+0x48>
 801b682:	ea42 0501 	orr.w	r5, r2, r1
 801b686:	e7db      	b.n	801b640 <__b2d+0x48>
 801b688:	3ff00000 	.word	0x3ff00000

0801b68c <__d2b>:
 801b68c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b690:	460f      	mov	r7, r1
 801b692:	2101      	movs	r1, #1
 801b694:	ec59 8b10 	vmov	r8, r9, d0
 801b698:	4616      	mov	r6, r2
 801b69a:	f7ff fc13 	bl	801aec4 <_Balloc>
 801b69e:	4604      	mov	r4, r0
 801b6a0:	b930      	cbnz	r0, 801b6b0 <__d2b+0x24>
 801b6a2:	4602      	mov	r2, r0
 801b6a4:	4b23      	ldr	r3, [pc, #140]	@ (801b734 <__d2b+0xa8>)
 801b6a6:	4824      	ldr	r0, [pc, #144]	@ (801b738 <__d2b+0xac>)
 801b6a8:	f240 310f 	movw	r1, #783	@ 0x30f
 801b6ac:	f000 faf4 	bl	801bc98 <__assert_func>
 801b6b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b6b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b6b8:	b10d      	cbz	r5, 801b6be <__d2b+0x32>
 801b6ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b6be:	9301      	str	r3, [sp, #4]
 801b6c0:	f1b8 0300 	subs.w	r3, r8, #0
 801b6c4:	d023      	beq.n	801b70e <__d2b+0x82>
 801b6c6:	4668      	mov	r0, sp
 801b6c8:	9300      	str	r3, [sp, #0]
 801b6ca:	f7ff fd0c 	bl	801b0e6 <__lo0bits>
 801b6ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b6d2:	b1d0      	cbz	r0, 801b70a <__d2b+0x7e>
 801b6d4:	f1c0 0320 	rsb	r3, r0, #32
 801b6d8:	fa02 f303 	lsl.w	r3, r2, r3
 801b6dc:	430b      	orrs	r3, r1
 801b6de:	40c2      	lsrs	r2, r0
 801b6e0:	6163      	str	r3, [r4, #20]
 801b6e2:	9201      	str	r2, [sp, #4]
 801b6e4:	9b01      	ldr	r3, [sp, #4]
 801b6e6:	61a3      	str	r3, [r4, #24]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	bf0c      	ite	eq
 801b6ec:	2201      	moveq	r2, #1
 801b6ee:	2202      	movne	r2, #2
 801b6f0:	6122      	str	r2, [r4, #16]
 801b6f2:	b1a5      	cbz	r5, 801b71e <__d2b+0x92>
 801b6f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801b6f8:	4405      	add	r5, r0
 801b6fa:	603d      	str	r5, [r7, #0]
 801b6fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801b700:	6030      	str	r0, [r6, #0]
 801b702:	4620      	mov	r0, r4
 801b704:	b003      	add	sp, #12
 801b706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b70a:	6161      	str	r1, [r4, #20]
 801b70c:	e7ea      	b.n	801b6e4 <__d2b+0x58>
 801b70e:	a801      	add	r0, sp, #4
 801b710:	f7ff fce9 	bl	801b0e6 <__lo0bits>
 801b714:	9b01      	ldr	r3, [sp, #4]
 801b716:	6163      	str	r3, [r4, #20]
 801b718:	3020      	adds	r0, #32
 801b71a:	2201      	movs	r2, #1
 801b71c:	e7e8      	b.n	801b6f0 <__d2b+0x64>
 801b71e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b722:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801b726:	6038      	str	r0, [r7, #0]
 801b728:	6918      	ldr	r0, [r3, #16]
 801b72a:	f7ff fcbd 	bl	801b0a8 <__hi0bits>
 801b72e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b732:	e7e5      	b.n	801b700 <__d2b+0x74>
 801b734:	0801d9b1 	.word	0x0801d9b1
 801b738:	0801da22 	.word	0x0801da22

0801b73c <__ratio>:
 801b73c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b740:	4688      	mov	r8, r1
 801b742:	4669      	mov	r1, sp
 801b744:	4681      	mov	r9, r0
 801b746:	f7ff ff57 	bl	801b5f8 <__b2d>
 801b74a:	a901      	add	r1, sp, #4
 801b74c:	4640      	mov	r0, r8
 801b74e:	ec55 4b10 	vmov	r4, r5, d0
 801b752:	f7ff ff51 	bl	801b5f8 <__b2d>
 801b756:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b75a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801b75e:	1ad2      	subs	r2, r2, r3
 801b760:	e9dd 3100 	ldrd	r3, r1, [sp]
 801b764:	1a5b      	subs	r3, r3, r1
 801b766:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801b76a:	ec57 6b10 	vmov	r6, r7, d0
 801b76e:	2b00      	cmp	r3, #0
 801b770:	bfd6      	itet	le
 801b772:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b776:	462a      	movgt	r2, r5
 801b778:	463a      	movle	r2, r7
 801b77a:	46ab      	mov	fp, r5
 801b77c:	46a2      	mov	sl, r4
 801b77e:	bfce      	itee	gt
 801b780:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801b784:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801b788:	ee00 3a90 	vmovle	s1, r3
 801b78c:	ec4b ab17 	vmov	d7, sl, fp
 801b790:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801b794:	b003      	add	sp, #12
 801b796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b79a <__copybits>:
 801b79a:	3901      	subs	r1, #1
 801b79c:	b570      	push	{r4, r5, r6, lr}
 801b79e:	1149      	asrs	r1, r1, #5
 801b7a0:	6914      	ldr	r4, [r2, #16]
 801b7a2:	3101      	adds	r1, #1
 801b7a4:	f102 0314 	add.w	r3, r2, #20
 801b7a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b7ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b7b0:	1f05      	subs	r5, r0, #4
 801b7b2:	42a3      	cmp	r3, r4
 801b7b4:	d30c      	bcc.n	801b7d0 <__copybits+0x36>
 801b7b6:	1aa3      	subs	r3, r4, r2
 801b7b8:	3b11      	subs	r3, #17
 801b7ba:	f023 0303 	bic.w	r3, r3, #3
 801b7be:	3211      	adds	r2, #17
 801b7c0:	42a2      	cmp	r2, r4
 801b7c2:	bf88      	it	hi
 801b7c4:	2300      	movhi	r3, #0
 801b7c6:	4418      	add	r0, r3
 801b7c8:	2300      	movs	r3, #0
 801b7ca:	4288      	cmp	r0, r1
 801b7cc:	d305      	bcc.n	801b7da <__copybits+0x40>
 801b7ce:	bd70      	pop	{r4, r5, r6, pc}
 801b7d0:	f853 6b04 	ldr.w	r6, [r3], #4
 801b7d4:	f845 6f04 	str.w	r6, [r5, #4]!
 801b7d8:	e7eb      	b.n	801b7b2 <__copybits+0x18>
 801b7da:	f840 3b04 	str.w	r3, [r0], #4
 801b7de:	e7f4      	b.n	801b7ca <__copybits+0x30>

0801b7e0 <__any_on>:
 801b7e0:	f100 0214 	add.w	r2, r0, #20
 801b7e4:	6900      	ldr	r0, [r0, #16]
 801b7e6:	114b      	asrs	r3, r1, #5
 801b7e8:	4298      	cmp	r0, r3
 801b7ea:	b510      	push	{r4, lr}
 801b7ec:	db11      	blt.n	801b812 <__any_on+0x32>
 801b7ee:	dd0a      	ble.n	801b806 <__any_on+0x26>
 801b7f0:	f011 011f 	ands.w	r1, r1, #31
 801b7f4:	d007      	beq.n	801b806 <__any_on+0x26>
 801b7f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b7fa:	fa24 f001 	lsr.w	r0, r4, r1
 801b7fe:	fa00 f101 	lsl.w	r1, r0, r1
 801b802:	428c      	cmp	r4, r1
 801b804:	d10b      	bne.n	801b81e <__any_on+0x3e>
 801b806:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b80a:	4293      	cmp	r3, r2
 801b80c:	d803      	bhi.n	801b816 <__any_on+0x36>
 801b80e:	2000      	movs	r0, #0
 801b810:	bd10      	pop	{r4, pc}
 801b812:	4603      	mov	r3, r0
 801b814:	e7f7      	b.n	801b806 <__any_on+0x26>
 801b816:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b81a:	2900      	cmp	r1, #0
 801b81c:	d0f5      	beq.n	801b80a <__any_on+0x2a>
 801b81e:	2001      	movs	r0, #1
 801b820:	e7f6      	b.n	801b810 <__any_on+0x30>

0801b822 <__ascii_wctomb>:
 801b822:	4603      	mov	r3, r0
 801b824:	4608      	mov	r0, r1
 801b826:	b141      	cbz	r1, 801b83a <__ascii_wctomb+0x18>
 801b828:	2aff      	cmp	r2, #255	@ 0xff
 801b82a:	d904      	bls.n	801b836 <__ascii_wctomb+0x14>
 801b82c:	228a      	movs	r2, #138	@ 0x8a
 801b82e:	601a      	str	r2, [r3, #0]
 801b830:	f04f 30ff 	mov.w	r0, #4294967295
 801b834:	4770      	bx	lr
 801b836:	700a      	strb	r2, [r1, #0]
 801b838:	2001      	movs	r0, #1
 801b83a:	4770      	bx	lr

0801b83c <__ssputs_r>:
 801b83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b840:	688e      	ldr	r6, [r1, #8]
 801b842:	461f      	mov	r7, r3
 801b844:	42be      	cmp	r6, r7
 801b846:	680b      	ldr	r3, [r1, #0]
 801b848:	4682      	mov	sl, r0
 801b84a:	460c      	mov	r4, r1
 801b84c:	4690      	mov	r8, r2
 801b84e:	d82d      	bhi.n	801b8ac <__ssputs_r+0x70>
 801b850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b854:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b858:	d026      	beq.n	801b8a8 <__ssputs_r+0x6c>
 801b85a:	6965      	ldr	r5, [r4, #20]
 801b85c:	6909      	ldr	r1, [r1, #16]
 801b85e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b862:	eba3 0901 	sub.w	r9, r3, r1
 801b866:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b86a:	1c7b      	adds	r3, r7, #1
 801b86c:	444b      	add	r3, r9
 801b86e:	106d      	asrs	r5, r5, #1
 801b870:	429d      	cmp	r5, r3
 801b872:	bf38      	it	cc
 801b874:	461d      	movcc	r5, r3
 801b876:	0553      	lsls	r3, r2, #21
 801b878:	d527      	bpl.n	801b8ca <__ssputs_r+0x8e>
 801b87a:	4629      	mov	r1, r5
 801b87c:	f7ff fa84 	bl	801ad88 <_malloc_r>
 801b880:	4606      	mov	r6, r0
 801b882:	b360      	cbz	r0, 801b8de <__ssputs_r+0xa2>
 801b884:	6921      	ldr	r1, [r4, #16]
 801b886:	464a      	mov	r2, r9
 801b888:	f7fe f8d9 	bl	8019a3e <memcpy>
 801b88c:	89a3      	ldrh	r3, [r4, #12]
 801b88e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b896:	81a3      	strh	r3, [r4, #12]
 801b898:	6126      	str	r6, [r4, #16]
 801b89a:	6165      	str	r5, [r4, #20]
 801b89c:	444e      	add	r6, r9
 801b89e:	eba5 0509 	sub.w	r5, r5, r9
 801b8a2:	6026      	str	r6, [r4, #0]
 801b8a4:	60a5      	str	r5, [r4, #8]
 801b8a6:	463e      	mov	r6, r7
 801b8a8:	42be      	cmp	r6, r7
 801b8aa:	d900      	bls.n	801b8ae <__ssputs_r+0x72>
 801b8ac:	463e      	mov	r6, r7
 801b8ae:	6820      	ldr	r0, [r4, #0]
 801b8b0:	4632      	mov	r2, r6
 801b8b2:	4641      	mov	r1, r8
 801b8b4:	f000 f9c6 	bl	801bc44 <memmove>
 801b8b8:	68a3      	ldr	r3, [r4, #8]
 801b8ba:	1b9b      	subs	r3, r3, r6
 801b8bc:	60a3      	str	r3, [r4, #8]
 801b8be:	6823      	ldr	r3, [r4, #0]
 801b8c0:	4433      	add	r3, r6
 801b8c2:	6023      	str	r3, [r4, #0]
 801b8c4:	2000      	movs	r0, #0
 801b8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8ca:	462a      	mov	r2, r5
 801b8cc:	f000 fa16 	bl	801bcfc <_realloc_r>
 801b8d0:	4606      	mov	r6, r0
 801b8d2:	2800      	cmp	r0, #0
 801b8d4:	d1e0      	bne.n	801b898 <__ssputs_r+0x5c>
 801b8d6:	6921      	ldr	r1, [r4, #16]
 801b8d8:	4650      	mov	r0, sl
 801b8da:	f7fe fea7 	bl	801a62c <_free_r>
 801b8de:	230c      	movs	r3, #12
 801b8e0:	f8ca 3000 	str.w	r3, [sl]
 801b8e4:	89a3      	ldrh	r3, [r4, #12]
 801b8e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b8ea:	81a3      	strh	r3, [r4, #12]
 801b8ec:	f04f 30ff 	mov.w	r0, #4294967295
 801b8f0:	e7e9      	b.n	801b8c6 <__ssputs_r+0x8a>
	...

0801b8f4 <_svfiprintf_r>:
 801b8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8f8:	4698      	mov	r8, r3
 801b8fa:	898b      	ldrh	r3, [r1, #12]
 801b8fc:	061b      	lsls	r3, r3, #24
 801b8fe:	b09d      	sub	sp, #116	@ 0x74
 801b900:	4607      	mov	r7, r0
 801b902:	460d      	mov	r5, r1
 801b904:	4614      	mov	r4, r2
 801b906:	d510      	bpl.n	801b92a <_svfiprintf_r+0x36>
 801b908:	690b      	ldr	r3, [r1, #16]
 801b90a:	b973      	cbnz	r3, 801b92a <_svfiprintf_r+0x36>
 801b90c:	2140      	movs	r1, #64	@ 0x40
 801b90e:	f7ff fa3b 	bl	801ad88 <_malloc_r>
 801b912:	6028      	str	r0, [r5, #0]
 801b914:	6128      	str	r0, [r5, #16]
 801b916:	b930      	cbnz	r0, 801b926 <_svfiprintf_r+0x32>
 801b918:	230c      	movs	r3, #12
 801b91a:	603b      	str	r3, [r7, #0]
 801b91c:	f04f 30ff 	mov.w	r0, #4294967295
 801b920:	b01d      	add	sp, #116	@ 0x74
 801b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b926:	2340      	movs	r3, #64	@ 0x40
 801b928:	616b      	str	r3, [r5, #20]
 801b92a:	2300      	movs	r3, #0
 801b92c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b92e:	2320      	movs	r3, #32
 801b930:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b934:	f8cd 800c 	str.w	r8, [sp, #12]
 801b938:	2330      	movs	r3, #48	@ 0x30
 801b93a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801bad8 <_svfiprintf_r+0x1e4>
 801b93e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b942:	f04f 0901 	mov.w	r9, #1
 801b946:	4623      	mov	r3, r4
 801b948:	469a      	mov	sl, r3
 801b94a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b94e:	b10a      	cbz	r2, 801b954 <_svfiprintf_r+0x60>
 801b950:	2a25      	cmp	r2, #37	@ 0x25
 801b952:	d1f9      	bne.n	801b948 <_svfiprintf_r+0x54>
 801b954:	ebba 0b04 	subs.w	fp, sl, r4
 801b958:	d00b      	beq.n	801b972 <_svfiprintf_r+0x7e>
 801b95a:	465b      	mov	r3, fp
 801b95c:	4622      	mov	r2, r4
 801b95e:	4629      	mov	r1, r5
 801b960:	4638      	mov	r0, r7
 801b962:	f7ff ff6b 	bl	801b83c <__ssputs_r>
 801b966:	3001      	adds	r0, #1
 801b968:	f000 80a7 	beq.w	801baba <_svfiprintf_r+0x1c6>
 801b96c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b96e:	445a      	add	r2, fp
 801b970:	9209      	str	r2, [sp, #36]	@ 0x24
 801b972:	f89a 3000 	ldrb.w	r3, [sl]
 801b976:	2b00      	cmp	r3, #0
 801b978:	f000 809f 	beq.w	801baba <_svfiprintf_r+0x1c6>
 801b97c:	2300      	movs	r3, #0
 801b97e:	f04f 32ff 	mov.w	r2, #4294967295
 801b982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b986:	f10a 0a01 	add.w	sl, sl, #1
 801b98a:	9304      	str	r3, [sp, #16]
 801b98c:	9307      	str	r3, [sp, #28]
 801b98e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b992:	931a      	str	r3, [sp, #104]	@ 0x68
 801b994:	4654      	mov	r4, sl
 801b996:	2205      	movs	r2, #5
 801b998:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b99c:	484e      	ldr	r0, [pc, #312]	@ (801bad8 <_svfiprintf_r+0x1e4>)
 801b99e:	f7e4 fcc7 	bl	8000330 <memchr>
 801b9a2:	9a04      	ldr	r2, [sp, #16]
 801b9a4:	b9d8      	cbnz	r0, 801b9de <_svfiprintf_r+0xea>
 801b9a6:	06d0      	lsls	r0, r2, #27
 801b9a8:	bf44      	itt	mi
 801b9aa:	2320      	movmi	r3, #32
 801b9ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b9b0:	0711      	lsls	r1, r2, #28
 801b9b2:	bf44      	itt	mi
 801b9b4:	232b      	movmi	r3, #43	@ 0x2b
 801b9b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b9ba:	f89a 3000 	ldrb.w	r3, [sl]
 801b9be:	2b2a      	cmp	r3, #42	@ 0x2a
 801b9c0:	d015      	beq.n	801b9ee <_svfiprintf_r+0xfa>
 801b9c2:	9a07      	ldr	r2, [sp, #28]
 801b9c4:	4654      	mov	r4, sl
 801b9c6:	2000      	movs	r0, #0
 801b9c8:	f04f 0c0a 	mov.w	ip, #10
 801b9cc:	4621      	mov	r1, r4
 801b9ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b9d2:	3b30      	subs	r3, #48	@ 0x30
 801b9d4:	2b09      	cmp	r3, #9
 801b9d6:	d94b      	bls.n	801ba70 <_svfiprintf_r+0x17c>
 801b9d8:	b1b0      	cbz	r0, 801ba08 <_svfiprintf_r+0x114>
 801b9da:	9207      	str	r2, [sp, #28]
 801b9dc:	e014      	b.n	801ba08 <_svfiprintf_r+0x114>
 801b9de:	eba0 0308 	sub.w	r3, r0, r8
 801b9e2:	fa09 f303 	lsl.w	r3, r9, r3
 801b9e6:	4313      	orrs	r3, r2
 801b9e8:	9304      	str	r3, [sp, #16]
 801b9ea:	46a2      	mov	sl, r4
 801b9ec:	e7d2      	b.n	801b994 <_svfiprintf_r+0xa0>
 801b9ee:	9b03      	ldr	r3, [sp, #12]
 801b9f0:	1d19      	adds	r1, r3, #4
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	9103      	str	r1, [sp, #12]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	bfbb      	ittet	lt
 801b9fa:	425b      	neglt	r3, r3
 801b9fc:	f042 0202 	orrlt.w	r2, r2, #2
 801ba00:	9307      	strge	r3, [sp, #28]
 801ba02:	9307      	strlt	r3, [sp, #28]
 801ba04:	bfb8      	it	lt
 801ba06:	9204      	strlt	r2, [sp, #16]
 801ba08:	7823      	ldrb	r3, [r4, #0]
 801ba0a:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba0c:	d10a      	bne.n	801ba24 <_svfiprintf_r+0x130>
 801ba0e:	7863      	ldrb	r3, [r4, #1]
 801ba10:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba12:	d132      	bne.n	801ba7a <_svfiprintf_r+0x186>
 801ba14:	9b03      	ldr	r3, [sp, #12]
 801ba16:	1d1a      	adds	r2, r3, #4
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	9203      	str	r2, [sp, #12]
 801ba1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ba20:	3402      	adds	r4, #2
 801ba22:	9305      	str	r3, [sp, #20]
 801ba24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801bae8 <_svfiprintf_r+0x1f4>
 801ba28:	7821      	ldrb	r1, [r4, #0]
 801ba2a:	2203      	movs	r2, #3
 801ba2c:	4650      	mov	r0, sl
 801ba2e:	f7e4 fc7f 	bl	8000330 <memchr>
 801ba32:	b138      	cbz	r0, 801ba44 <_svfiprintf_r+0x150>
 801ba34:	9b04      	ldr	r3, [sp, #16]
 801ba36:	eba0 000a 	sub.w	r0, r0, sl
 801ba3a:	2240      	movs	r2, #64	@ 0x40
 801ba3c:	4082      	lsls	r2, r0
 801ba3e:	4313      	orrs	r3, r2
 801ba40:	3401      	adds	r4, #1
 801ba42:	9304      	str	r3, [sp, #16]
 801ba44:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba48:	4824      	ldr	r0, [pc, #144]	@ (801badc <_svfiprintf_r+0x1e8>)
 801ba4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ba4e:	2206      	movs	r2, #6
 801ba50:	f7e4 fc6e 	bl	8000330 <memchr>
 801ba54:	2800      	cmp	r0, #0
 801ba56:	d036      	beq.n	801bac6 <_svfiprintf_r+0x1d2>
 801ba58:	4b21      	ldr	r3, [pc, #132]	@ (801bae0 <_svfiprintf_r+0x1ec>)
 801ba5a:	bb1b      	cbnz	r3, 801baa4 <_svfiprintf_r+0x1b0>
 801ba5c:	9b03      	ldr	r3, [sp, #12]
 801ba5e:	3307      	adds	r3, #7
 801ba60:	f023 0307 	bic.w	r3, r3, #7
 801ba64:	3308      	adds	r3, #8
 801ba66:	9303      	str	r3, [sp, #12]
 801ba68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba6a:	4433      	add	r3, r6
 801ba6c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ba6e:	e76a      	b.n	801b946 <_svfiprintf_r+0x52>
 801ba70:	fb0c 3202 	mla	r2, ip, r2, r3
 801ba74:	460c      	mov	r4, r1
 801ba76:	2001      	movs	r0, #1
 801ba78:	e7a8      	b.n	801b9cc <_svfiprintf_r+0xd8>
 801ba7a:	2300      	movs	r3, #0
 801ba7c:	3401      	adds	r4, #1
 801ba7e:	9305      	str	r3, [sp, #20]
 801ba80:	4619      	mov	r1, r3
 801ba82:	f04f 0c0a 	mov.w	ip, #10
 801ba86:	4620      	mov	r0, r4
 801ba88:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ba8c:	3a30      	subs	r2, #48	@ 0x30
 801ba8e:	2a09      	cmp	r2, #9
 801ba90:	d903      	bls.n	801ba9a <_svfiprintf_r+0x1a6>
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d0c6      	beq.n	801ba24 <_svfiprintf_r+0x130>
 801ba96:	9105      	str	r1, [sp, #20]
 801ba98:	e7c4      	b.n	801ba24 <_svfiprintf_r+0x130>
 801ba9a:	fb0c 2101 	mla	r1, ip, r1, r2
 801ba9e:	4604      	mov	r4, r0
 801baa0:	2301      	movs	r3, #1
 801baa2:	e7f0      	b.n	801ba86 <_svfiprintf_r+0x192>
 801baa4:	ab03      	add	r3, sp, #12
 801baa6:	9300      	str	r3, [sp, #0]
 801baa8:	462a      	mov	r2, r5
 801baaa:	4b0e      	ldr	r3, [pc, #56]	@ (801bae4 <_svfiprintf_r+0x1f0>)
 801baac:	a904      	add	r1, sp, #16
 801baae:	4638      	mov	r0, r7
 801bab0:	f7fd fa5a 	bl	8018f68 <_printf_float>
 801bab4:	1c42      	adds	r2, r0, #1
 801bab6:	4606      	mov	r6, r0
 801bab8:	d1d6      	bne.n	801ba68 <_svfiprintf_r+0x174>
 801baba:	89ab      	ldrh	r3, [r5, #12]
 801babc:	065b      	lsls	r3, r3, #25
 801babe:	f53f af2d 	bmi.w	801b91c <_svfiprintf_r+0x28>
 801bac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bac4:	e72c      	b.n	801b920 <_svfiprintf_r+0x2c>
 801bac6:	ab03      	add	r3, sp, #12
 801bac8:	9300      	str	r3, [sp, #0]
 801baca:	462a      	mov	r2, r5
 801bacc:	4b05      	ldr	r3, [pc, #20]	@ (801bae4 <_svfiprintf_r+0x1f0>)
 801bace:	a904      	add	r1, sp, #16
 801bad0:	4638      	mov	r0, r7
 801bad2:	f7fd fcd1 	bl	8019478 <_printf_i>
 801bad6:	e7ed      	b.n	801bab4 <_svfiprintf_r+0x1c0>
 801bad8:	0801db78 	.word	0x0801db78
 801badc:	0801db82 	.word	0x0801db82
 801bae0:	08018f69 	.word	0x08018f69
 801bae4:	0801b83d 	.word	0x0801b83d
 801bae8:	0801db7e 	.word	0x0801db7e

0801baec <__sflush_r>:
 801baec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801baf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801baf4:	0716      	lsls	r6, r2, #28
 801baf6:	4605      	mov	r5, r0
 801baf8:	460c      	mov	r4, r1
 801bafa:	d454      	bmi.n	801bba6 <__sflush_r+0xba>
 801bafc:	684b      	ldr	r3, [r1, #4]
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	dc02      	bgt.n	801bb08 <__sflush_r+0x1c>
 801bb02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	dd48      	ble.n	801bb9a <__sflush_r+0xae>
 801bb08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bb0a:	2e00      	cmp	r6, #0
 801bb0c:	d045      	beq.n	801bb9a <__sflush_r+0xae>
 801bb0e:	2300      	movs	r3, #0
 801bb10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801bb14:	682f      	ldr	r7, [r5, #0]
 801bb16:	6a21      	ldr	r1, [r4, #32]
 801bb18:	602b      	str	r3, [r5, #0]
 801bb1a:	d030      	beq.n	801bb7e <__sflush_r+0x92>
 801bb1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801bb1e:	89a3      	ldrh	r3, [r4, #12]
 801bb20:	0759      	lsls	r1, r3, #29
 801bb22:	d505      	bpl.n	801bb30 <__sflush_r+0x44>
 801bb24:	6863      	ldr	r3, [r4, #4]
 801bb26:	1ad2      	subs	r2, r2, r3
 801bb28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bb2a:	b10b      	cbz	r3, 801bb30 <__sflush_r+0x44>
 801bb2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801bb2e:	1ad2      	subs	r2, r2, r3
 801bb30:	2300      	movs	r3, #0
 801bb32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bb34:	6a21      	ldr	r1, [r4, #32]
 801bb36:	4628      	mov	r0, r5
 801bb38:	47b0      	blx	r6
 801bb3a:	1c43      	adds	r3, r0, #1
 801bb3c:	89a3      	ldrh	r3, [r4, #12]
 801bb3e:	d106      	bne.n	801bb4e <__sflush_r+0x62>
 801bb40:	6829      	ldr	r1, [r5, #0]
 801bb42:	291d      	cmp	r1, #29
 801bb44:	d82b      	bhi.n	801bb9e <__sflush_r+0xb2>
 801bb46:	4a2a      	ldr	r2, [pc, #168]	@ (801bbf0 <__sflush_r+0x104>)
 801bb48:	410a      	asrs	r2, r1
 801bb4a:	07d6      	lsls	r6, r2, #31
 801bb4c:	d427      	bmi.n	801bb9e <__sflush_r+0xb2>
 801bb4e:	2200      	movs	r2, #0
 801bb50:	6062      	str	r2, [r4, #4]
 801bb52:	04d9      	lsls	r1, r3, #19
 801bb54:	6922      	ldr	r2, [r4, #16]
 801bb56:	6022      	str	r2, [r4, #0]
 801bb58:	d504      	bpl.n	801bb64 <__sflush_r+0x78>
 801bb5a:	1c42      	adds	r2, r0, #1
 801bb5c:	d101      	bne.n	801bb62 <__sflush_r+0x76>
 801bb5e:	682b      	ldr	r3, [r5, #0]
 801bb60:	b903      	cbnz	r3, 801bb64 <__sflush_r+0x78>
 801bb62:	6560      	str	r0, [r4, #84]	@ 0x54
 801bb64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bb66:	602f      	str	r7, [r5, #0]
 801bb68:	b1b9      	cbz	r1, 801bb9a <__sflush_r+0xae>
 801bb6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bb6e:	4299      	cmp	r1, r3
 801bb70:	d002      	beq.n	801bb78 <__sflush_r+0x8c>
 801bb72:	4628      	mov	r0, r5
 801bb74:	f7fe fd5a 	bl	801a62c <_free_r>
 801bb78:	2300      	movs	r3, #0
 801bb7a:	6363      	str	r3, [r4, #52]	@ 0x34
 801bb7c:	e00d      	b.n	801bb9a <__sflush_r+0xae>
 801bb7e:	2301      	movs	r3, #1
 801bb80:	4628      	mov	r0, r5
 801bb82:	47b0      	blx	r6
 801bb84:	4602      	mov	r2, r0
 801bb86:	1c50      	adds	r0, r2, #1
 801bb88:	d1c9      	bne.n	801bb1e <__sflush_r+0x32>
 801bb8a:	682b      	ldr	r3, [r5, #0]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d0c6      	beq.n	801bb1e <__sflush_r+0x32>
 801bb90:	2b1d      	cmp	r3, #29
 801bb92:	d001      	beq.n	801bb98 <__sflush_r+0xac>
 801bb94:	2b16      	cmp	r3, #22
 801bb96:	d11e      	bne.n	801bbd6 <__sflush_r+0xea>
 801bb98:	602f      	str	r7, [r5, #0]
 801bb9a:	2000      	movs	r0, #0
 801bb9c:	e022      	b.n	801bbe4 <__sflush_r+0xf8>
 801bb9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bba2:	b21b      	sxth	r3, r3
 801bba4:	e01b      	b.n	801bbde <__sflush_r+0xf2>
 801bba6:	690f      	ldr	r7, [r1, #16]
 801bba8:	2f00      	cmp	r7, #0
 801bbaa:	d0f6      	beq.n	801bb9a <__sflush_r+0xae>
 801bbac:	0793      	lsls	r3, r2, #30
 801bbae:	680e      	ldr	r6, [r1, #0]
 801bbb0:	bf08      	it	eq
 801bbb2:	694b      	ldreq	r3, [r1, #20]
 801bbb4:	600f      	str	r7, [r1, #0]
 801bbb6:	bf18      	it	ne
 801bbb8:	2300      	movne	r3, #0
 801bbba:	eba6 0807 	sub.w	r8, r6, r7
 801bbbe:	608b      	str	r3, [r1, #8]
 801bbc0:	f1b8 0f00 	cmp.w	r8, #0
 801bbc4:	dde9      	ble.n	801bb9a <__sflush_r+0xae>
 801bbc6:	6a21      	ldr	r1, [r4, #32]
 801bbc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bbca:	4643      	mov	r3, r8
 801bbcc:	463a      	mov	r2, r7
 801bbce:	4628      	mov	r0, r5
 801bbd0:	47b0      	blx	r6
 801bbd2:	2800      	cmp	r0, #0
 801bbd4:	dc08      	bgt.n	801bbe8 <__sflush_r+0xfc>
 801bbd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bbda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bbde:	81a3      	strh	r3, [r4, #12]
 801bbe0:	f04f 30ff 	mov.w	r0, #4294967295
 801bbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbe8:	4407      	add	r7, r0
 801bbea:	eba8 0800 	sub.w	r8, r8, r0
 801bbee:	e7e7      	b.n	801bbc0 <__sflush_r+0xd4>
 801bbf0:	dfbffffe 	.word	0xdfbffffe

0801bbf4 <_fflush_r>:
 801bbf4:	b538      	push	{r3, r4, r5, lr}
 801bbf6:	690b      	ldr	r3, [r1, #16]
 801bbf8:	4605      	mov	r5, r0
 801bbfa:	460c      	mov	r4, r1
 801bbfc:	b913      	cbnz	r3, 801bc04 <_fflush_r+0x10>
 801bbfe:	2500      	movs	r5, #0
 801bc00:	4628      	mov	r0, r5
 801bc02:	bd38      	pop	{r3, r4, r5, pc}
 801bc04:	b118      	cbz	r0, 801bc0e <_fflush_r+0x1a>
 801bc06:	6a03      	ldr	r3, [r0, #32]
 801bc08:	b90b      	cbnz	r3, 801bc0e <_fflush_r+0x1a>
 801bc0a:	f7fd fde1 	bl	80197d0 <__sinit>
 801bc0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d0f3      	beq.n	801bbfe <_fflush_r+0xa>
 801bc16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bc18:	07d0      	lsls	r0, r2, #31
 801bc1a:	d404      	bmi.n	801bc26 <_fflush_r+0x32>
 801bc1c:	0599      	lsls	r1, r3, #22
 801bc1e:	d402      	bmi.n	801bc26 <_fflush_r+0x32>
 801bc20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bc22:	f7fd ff0a 	bl	8019a3a <__retarget_lock_acquire_recursive>
 801bc26:	4628      	mov	r0, r5
 801bc28:	4621      	mov	r1, r4
 801bc2a:	f7ff ff5f 	bl	801baec <__sflush_r>
 801bc2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bc30:	07da      	lsls	r2, r3, #31
 801bc32:	4605      	mov	r5, r0
 801bc34:	d4e4      	bmi.n	801bc00 <_fflush_r+0xc>
 801bc36:	89a3      	ldrh	r3, [r4, #12]
 801bc38:	059b      	lsls	r3, r3, #22
 801bc3a:	d4e1      	bmi.n	801bc00 <_fflush_r+0xc>
 801bc3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bc3e:	f7fd fefd 	bl	8019a3c <__retarget_lock_release_recursive>
 801bc42:	e7dd      	b.n	801bc00 <_fflush_r+0xc>

0801bc44 <memmove>:
 801bc44:	4288      	cmp	r0, r1
 801bc46:	b510      	push	{r4, lr}
 801bc48:	eb01 0402 	add.w	r4, r1, r2
 801bc4c:	d902      	bls.n	801bc54 <memmove+0x10>
 801bc4e:	4284      	cmp	r4, r0
 801bc50:	4623      	mov	r3, r4
 801bc52:	d807      	bhi.n	801bc64 <memmove+0x20>
 801bc54:	1e43      	subs	r3, r0, #1
 801bc56:	42a1      	cmp	r1, r4
 801bc58:	d008      	beq.n	801bc6c <memmove+0x28>
 801bc5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bc5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bc62:	e7f8      	b.n	801bc56 <memmove+0x12>
 801bc64:	4402      	add	r2, r0
 801bc66:	4601      	mov	r1, r0
 801bc68:	428a      	cmp	r2, r1
 801bc6a:	d100      	bne.n	801bc6e <memmove+0x2a>
 801bc6c:	bd10      	pop	{r4, pc}
 801bc6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bc72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bc76:	e7f7      	b.n	801bc68 <memmove+0x24>

0801bc78 <_sbrk_r>:
 801bc78:	b538      	push	{r3, r4, r5, lr}
 801bc7a:	4d06      	ldr	r5, [pc, #24]	@ (801bc94 <_sbrk_r+0x1c>)
 801bc7c:	2300      	movs	r3, #0
 801bc7e:	4604      	mov	r4, r0
 801bc80:	4608      	mov	r0, r1
 801bc82:	602b      	str	r3, [r5, #0]
 801bc84:	f7e7 f890 	bl	8002da8 <_sbrk>
 801bc88:	1c43      	adds	r3, r0, #1
 801bc8a:	d102      	bne.n	801bc92 <_sbrk_r+0x1a>
 801bc8c:	682b      	ldr	r3, [r5, #0]
 801bc8e:	b103      	cbz	r3, 801bc92 <_sbrk_r+0x1a>
 801bc90:	6023      	str	r3, [r4, #0]
 801bc92:	bd38      	pop	{r3, r4, r5, pc}
 801bc94:	24006354 	.word	0x24006354

0801bc98 <__assert_func>:
 801bc98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bc9a:	4614      	mov	r4, r2
 801bc9c:	461a      	mov	r2, r3
 801bc9e:	4b09      	ldr	r3, [pc, #36]	@ (801bcc4 <__assert_func+0x2c>)
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	4605      	mov	r5, r0
 801bca4:	68d8      	ldr	r0, [r3, #12]
 801bca6:	b954      	cbnz	r4, 801bcbe <__assert_func+0x26>
 801bca8:	4b07      	ldr	r3, [pc, #28]	@ (801bcc8 <__assert_func+0x30>)
 801bcaa:	461c      	mov	r4, r3
 801bcac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bcb0:	9100      	str	r1, [sp, #0]
 801bcb2:	462b      	mov	r3, r5
 801bcb4:	4905      	ldr	r1, [pc, #20]	@ (801bccc <__assert_func+0x34>)
 801bcb6:	f000 f84f 	bl	801bd58 <fiprintf>
 801bcba:	f000 f85f 	bl	801bd7c <abort>
 801bcbe:	4b04      	ldr	r3, [pc, #16]	@ (801bcd0 <__assert_func+0x38>)
 801bcc0:	e7f4      	b.n	801bcac <__assert_func+0x14>
 801bcc2:	bf00      	nop
 801bcc4:	2400027c 	.word	0x2400027c
 801bcc8:	0801dbc4 	.word	0x0801dbc4
 801bccc:	0801db96 	.word	0x0801db96
 801bcd0:	0801db89 	.word	0x0801db89

0801bcd4 <_calloc_r>:
 801bcd4:	b570      	push	{r4, r5, r6, lr}
 801bcd6:	fba1 5402 	umull	r5, r4, r1, r2
 801bcda:	b93c      	cbnz	r4, 801bcec <_calloc_r+0x18>
 801bcdc:	4629      	mov	r1, r5
 801bcde:	f7ff f853 	bl	801ad88 <_malloc_r>
 801bce2:	4606      	mov	r6, r0
 801bce4:	b928      	cbnz	r0, 801bcf2 <_calloc_r+0x1e>
 801bce6:	2600      	movs	r6, #0
 801bce8:	4630      	mov	r0, r6
 801bcea:	bd70      	pop	{r4, r5, r6, pc}
 801bcec:	220c      	movs	r2, #12
 801bcee:	6002      	str	r2, [r0, #0]
 801bcf0:	e7f9      	b.n	801bce6 <_calloc_r+0x12>
 801bcf2:	462a      	mov	r2, r5
 801bcf4:	4621      	mov	r1, r4
 801bcf6:	f7fd fe04 	bl	8019902 <memset>
 801bcfa:	e7f5      	b.n	801bce8 <_calloc_r+0x14>

0801bcfc <_realloc_r>:
 801bcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd00:	4680      	mov	r8, r0
 801bd02:	4615      	mov	r5, r2
 801bd04:	460c      	mov	r4, r1
 801bd06:	b921      	cbnz	r1, 801bd12 <_realloc_r+0x16>
 801bd08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd0c:	4611      	mov	r1, r2
 801bd0e:	f7ff b83b 	b.w	801ad88 <_malloc_r>
 801bd12:	b92a      	cbnz	r2, 801bd20 <_realloc_r+0x24>
 801bd14:	f7fe fc8a 	bl	801a62c <_free_r>
 801bd18:	2400      	movs	r4, #0
 801bd1a:	4620      	mov	r0, r4
 801bd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd20:	f000 f833 	bl	801bd8a <_malloc_usable_size_r>
 801bd24:	4285      	cmp	r5, r0
 801bd26:	4606      	mov	r6, r0
 801bd28:	d802      	bhi.n	801bd30 <_realloc_r+0x34>
 801bd2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801bd2e:	d8f4      	bhi.n	801bd1a <_realloc_r+0x1e>
 801bd30:	4629      	mov	r1, r5
 801bd32:	4640      	mov	r0, r8
 801bd34:	f7ff f828 	bl	801ad88 <_malloc_r>
 801bd38:	4607      	mov	r7, r0
 801bd3a:	2800      	cmp	r0, #0
 801bd3c:	d0ec      	beq.n	801bd18 <_realloc_r+0x1c>
 801bd3e:	42b5      	cmp	r5, r6
 801bd40:	462a      	mov	r2, r5
 801bd42:	4621      	mov	r1, r4
 801bd44:	bf28      	it	cs
 801bd46:	4632      	movcs	r2, r6
 801bd48:	f7fd fe79 	bl	8019a3e <memcpy>
 801bd4c:	4621      	mov	r1, r4
 801bd4e:	4640      	mov	r0, r8
 801bd50:	f7fe fc6c 	bl	801a62c <_free_r>
 801bd54:	463c      	mov	r4, r7
 801bd56:	e7e0      	b.n	801bd1a <_realloc_r+0x1e>

0801bd58 <fiprintf>:
 801bd58:	b40e      	push	{r1, r2, r3}
 801bd5a:	b503      	push	{r0, r1, lr}
 801bd5c:	4601      	mov	r1, r0
 801bd5e:	ab03      	add	r3, sp, #12
 801bd60:	4805      	ldr	r0, [pc, #20]	@ (801bd78 <fiprintf+0x20>)
 801bd62:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd66:	6800      	ldr	r0, [r0, #0]
 801bd68:	9301      	str	r3, [sp, #4]
 801bd6a:	f000 f83f 	bl	801bdec <_vfiprintf_r>
 801bd6e:	b002      	add	sp, #8
 801bd70:	f85d eb04 	ldr.w	lr, [sp], #4
 801bd74:	b003      	add	sp, #12
 801bd76:	4770      	bx	lr
 801bd78:	2400027c 	.word	0x2400027c

0801bd7c <abort>:
 801bd7c:	b508      	push	{r3, lr}
 801bd7e:	2006      	movs	r0, #6
 801bd80:	f000 fa08 	bl	801c194 <raise>
 801bd84:	2001      	movs	r0, #1
 801bd86:	f7e6 ff97 	bl	8002cb8 <_exit>

0801bd8a <_malloc_usable_size_r>:
 801bd8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bd8e:	1f18      	subs	r0, r3, #4
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	bfbc      	itt	lt
 801bd94:	580b      	ldrlt	r3, [r1, r0]
 801bd96:	18c0      	addlt	r0, r0, r3
 801bd98:	4770      	bx	lr

0801bd9a <__sfputc_r>:
 801bd9a:	6893      	ldr	r3, [r2, #8]
 801bd9c:	3b01      	subs	r3, #1
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	b410      	push	{r4}
 801bda2:	6093      	str	r3, [r2, #8]
 801bda4:	da08      	bge.n	801bdb8 <__sfputc_r+0x1e>
 801bda6:	6994      	ldr	r4, [r2, #24]
 801bda8:	42a3      	cmp	r3, r4
 801bdaa:	db01      	blt.n	801bdb0 <__sfputc_r+0x16>
 801bdac:	290a      	cmp	r1, #10
 801bdae:	d103      	bne.n	801bdb8 <__sfputc_r+0x1e>
 801bdb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bdb4:	f000 b932 	b.w	801c01c <__swbuf_r>
 801bdb8:	6813      	ldr	r3, [r2, #0]
 801bdba:	1c58      	adds	r0, r3, #1
 801bdbc:	6010      	str	r0, [r2, #0]
 801bdbe:	7019      	strb	r1, [r3, #0]
 801bdc0:	4608      	mov	r0, r1
 801bdc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bdc6:	4770      	bx	lr

0801bdc8 <__sfputs_r>:
 801bdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdca:	4606      	mov	r6, r0
 801bdcc:	460f      	mov	r7, r1
 801bdce:	4614      	mov	r4, r2
 801bdd0:	18d5      	adds	r5, r2, r3
 801bdd2:	42ac      	cmp	r4, r5
 801bdd4:	d101      	bne.n	801bdda <__sfputs_r+0x12>
 801bdd6:	2000      	movs	r0, #0
 801bdd8:	e007      	b.n	801bdea <__sfputs_r+0x22>
 801bdda:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdde:	463a      	mov	r2, r7
 801bde0:	4630      	mov	r0, r6
 801bde2:	f7ff ffda 	bl	801bd9a <__sfputc_r>
 801bde6:	1c43      	adds	r3, r0, #1
 801bde8:	d1f3      	bne.n	801bdd2 <__sfputs_r+0xa>
 801bdea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bdec <_vfiprintf_r>:
 801bdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdf0:	460d      	mov	r5, r1
 801bdf2:	b09d      	sub	sp, #116	@ 0x74
 801bdf4:	4614      	mov	r4, r2
 801bdf6:	4698      	mov	r8, r3
 801bdf8:	4606      	mov	r6, r0
 801bdfa:	b118      	cbz	r0, 801be04 <_vfiprintf_r+0x18>
 801bdfc:	6a03      	ldr	r3, [r0, #32]
 801bdfe:	b90b      	cbnz	r3, 801be04 <_vfiprintf_r+0x18>
 801be00:	f7fd fce6 	bl	80197d0 <__sinit>
 801be04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801be06:	07d9      	lsls	r1, r3, #31
 801be08:	d405      	bmi.n	801be16 <_vfiprintf_r+0x2a>
 801be0a:	89ab      	ldrh	r3, [r5, #12]
 801be0c:	059a      	lsls	r2, r3, #22
 801be0e:	d402      	bmi.n	801be16 <_vfiprintf_r+0x2a>
 801be10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801be12:	f7fd fe12 	bl	8019a3a <__retarget_lock_acquire_recursive>
 801be16:	89ab      	ldrh	r3, [r5, #12]
 801be18:	071b      	lsls	r3, r3, #28
 801be1a:	d501      	bpl.n	801be20 <_vfiprintf_r+0x34>
 801be1c:	692b      	ldr	r3, [r5, #16]
 801be1e:	b99b      	cbnz	r3, 801be48 <_vfiprintf_r+0x5c>
 801be20:	4629      	mov	r1, r5
 801be22:	4630      	mov	r0, r6
 801be24:	f000 f938 	bl	801c098 <__swsetup_r>
 801be28:	b170      	cbz	r0, 801be48 <_vfiprintf_r+0x5c>
 801be2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801be2c:	07dc      	lsls	r4, r3, #31
 801be2e:	d504      	bpl.n	801be3a <_vfiprintf_r+0x4e>
 801be30:	f04f 30ff 	mov.w	r0, #4294967295
 801be34:	b01d      	add	sp, #116	@ 0x74
 801be36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be3a:	89ab      	ldrh	r3, [r5, #12]
 801be3c:	0598      	lsls	r0, r3, #22
 801be3e:	d4f7      	bmi.n	801be30 <_vfiprintf_r+0x44>
 801be40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801be42:	f7fd fdfb 	bl	8019a3c <__retarget_lock_release_recursive>
 801be46:	e7f3      	b.n	801be30 <_vfiprintf_r+0x44>
 801be48:	2300      	movs	r3, #0
 801be4a:	9309      	str	r3, [sp, #36]	@ 0x24
 801be4c:	2320      	movs	r3, #32
 801be4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801be52:	f8cd 800c 	str.w	r8, [sp, #12]
 801be56:	2330      	movs	r3, #48	@ 0x30
 801be58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c008 <_vfiprintf_r+0x21c>
 801be5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801be60:	f04f 0901 	mov.w	r9, #1
 801be64:	4623      	mov	r3, r4
 801be66:	469a      	mov	sl, r3
 801be68:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be6c:	b10a      	cbz	r2, 801be72 <_vfiprintf_r+0x86>
 801be6e:	2a25      	cmp	r2, #37	@ 0x25
 801be70:	d1f9      	bne.n	801be66 <_vfiprintf_r+0x7a>
 801be72:	ebba 0b04 	subs.w	fp, sl, r4
 801be76:	d00b      	beq.n	801be90 <_vfiprintf_r+0xa4>
 801be78:	465b      	mov	r3, fp
 801be7a:	4622      	mov	r2, r4
 801be7c:	4629      	mov	r1, r5
 801be7e:	4630      	mov	r0, r6
 801be80:	f7ff ffa2 	bl	801bdc8 <__sfputs_r>
 801be84:	3001      	adds	r0, #1
 801be86:	f000 80a7 	beq.w	801bfd8 <_vfiprintf_r+0x1ec>
 801be8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801be8c:	445a      	add	r2, fp
 801be8e:	9209      	str	r2, [sp, #36]	@ 0x24
 801be90:	f89a 3000 	ldrb.w	r3, [sl]
 801be94:	2b00      	cmp	r3, #0
 801be96:	f000 809f 	beq.w	801bfd8 <_vfiprintf_r+0x1ec>
 801be9a:	2300      	movs	r3, #0
 801be9c:	f04f 32ff 	mov.w	r2, #4294967295
 801bea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bea4:	f10a 0a01 	add.w	sl, sl, #1
 801bea8:	9304      	str	r3, [sp, #16]
 801beaa:	9307      	str	r3, [sp, #28]
 801beac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801beb0:	931a      	str	r3, [sp, #104]	@ 0x68
 801beb2:	4654      	mov	r4, sl
 801beb4:	2205      	movs	r2, #5
 801beb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801beba:	4853      	ldr	r0, [pc, #332]	@ (801c008 <_vfiprintf_r+0x21c>)
 801bebc:	f7e4 fa38 	bl	8000330 <memchr>
 801bec0:	9a04      	ldr	r2, [sp, #16]
 801bec2:	b9d8      	cbnz	r0, 801befc <_vfiprintf_r+0x110>
 801bec4:	06d1      	lsls	r1, r2, #27
 801bec6:	bf44      	itt	mi
 801bec8:	2320      	movmi	r3, #32
 801beca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bece:	0713      	lsls	r3, r2, #28
 801bed0:	bf44      	itt	mi
 801bed2:	232b      	movmi	r3, #43	@ 0x2b
 801bed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bed8:	f89a 3000 	ldrb.w	r3, [sl]
 801bedc:	2b2a      	cmp	r3, #42	@ 0x2a
 801bede:	d015      	beq.n	801bf0c <_vfiprintf_r+0x120>
 801bee0:	9a07      	ldr	r2, [sp, #28]
 801bee2:	4654      	mov	r4, sl
 801bee4:	2000      	movs	r0, #0
 801bee6:	f04f 0c0a 	mov.w	ip, #10
 801beea:	4621      	mov	r1, r4
 801beec:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bef0:	3b30      	subs	r3, #48	@ 0x30
 801bef2:	2b09      	cmp	r3, #9
 801bef4:	d94b      	bls.n	801bf8e <_vfiprintf_r+0x1a2>
 801bef6:	b1b0      	cbz	r0, 801bf26 <_vfiprintf_r+0x13a>
 801bef8:	9207      	str	r2, [sp, #28]
 801befa:	e014      	b.n	801bf26 <_vfiprintf_r+0x13a>
 801befc:	eba0 0308 	sub.w	r3, r0, r8
 801bf00:	fa09 f303 	lsl.w	r3, r9, r3
 801bf04:	4313      	orrs	r3, r2
 801bf06:	9304      	str	r3, [sp, #16]
 801bf08:	46a2      	mov	sl, r4
 801bf0a:	e7d2      	b.n	801beb2 <_vfiprintf_r+0xc6>
 801bf0c:	9b03      	ldr	r3, [sp, #12]
 801bf0e:	1d19      	adds	r1, r3, #4
 801bf10:	681b      	ldr	r3, [r3, #0]
 801bf12:	9103      	str	r1, [sp, #12]
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	bfbb      	ittet	lt
 801bf18:	425b      	neglt	r3, r3
 801bf1a:	f042 0202 	orrlt.w	r2, r2, #2
 801bf1e:	9307      	strge	r3, [sp, #28]
 801bf20:	9307      	strlt	r3, [sp, #28]
 801bf22:	bfb8      	it	lt
 801bf24:	9204      	strlt	r2, [sp, #16]
 801bf26:	7823      	ldrb	r3, [r4, #0]
 801bf28:	2b2e      	cmp	r3, #46	@ 0x2e
 801bf2a:	d10a      	bne.n	801bf42 <_vfiprintf_r+0x156>
 801bf2c:	7863      	ldrb	r3, [r4, #1]
 801bf2e:	2b2a      	cmp	r3, #42	@ 0x2a
 801bf30:	d132      	bne.n	801bf98 <_vfiprintf_r+0x1ac>
 801bf32:	9b03      	ldr	r3, [sp, #12]
 801bf34:	1d1a      	adds	r2, r3, #4
 801bf36:	681b      	ldr	r3, [r3, #0]
 801bf38:	9203      	str	r2, [sp, #12]
 801bf3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bf3e:	3402      	adds	r4, #2
 801bf40:	9305      	str	r3, [sp, #20]
 801bf42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c018 <_vfiprintf_r+0x22c>
 801bf46:	7821      	ldrb	r1, [r4, #0]
 801bf48:	2203      	movs	r2, #3
 801bf4a:	4650      	mov	r0, sl
 801bf4c:	f7e4 f9f0 	bl	8000330 <memchr>
 801bf50:	b138      	cbz	r0, 801bf62 <_vfiprintf_r+0x176>
 801bf52:	9b04      	ldr	r3, [sp, #16]
 801bf54:	eba0 000a 	sub.w	r0, r0, sl
 801bf58:	2240      	movs	r2, #64	@ 0x40
 801bf5a:	4082      	lsls	r2, r0
 801bf5c:	4313      	orrs	r3, r2
 801bf5e:	3401      	adds	r4, #1
 801bf60:	9304      	str	r3, [sp, #16]
 801bf62:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf66:	4829      	ldr	r0, [pc, #164]	@ (801c00c <_vfiprintf_r+0x220>)
 801bf68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bf6c:	2206      	movs	r2, #6
 801bf6e:	f7e4 f9df 	bl	8000330 <memchr>
 801bf72:	2800      	cmp	r0, #0
 801bf74:	d03f      	beq.n	801bff6 <_vfiprintf_r+0x20a>
 801bf76:	4b26      	ldr	r3, [pc, #152]	@ (801c010 <_vfiprintf_r+0x224>)
 801bf78:	bb1b      	cbnz	r3, 801bfc2 <_vfiprintf_r+0x1d6>
 801bf7a:	9b03      	ldr	r3, [sp, #12]
 801bf7c:	3307      	adds	r3, #7
 801bf7e:	f023 0307 	bic.w	r3, r3, #7
 801bf82:	3308      	adds	r3, #8
 801bf84:	9303      	str	r3, [sp, #12]
 801bf86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf88:	443b      	add	r3, r7
 801bf8a:	9309      	str	r3, [sp, #36]	@ 0x24
 801bf8c:	e76a      	b.n	801be64 <_vfiprintf_r+0x78>
 801bf8e:	fb0c 3202 	mla	r2, ip, r2, r3
 801bf92:	460c      	mov	r4, r1
 801bf94:	2001      	movs	r0, #1
 801bf96:	e7a8      	b.n	801beea <_vfiprintf_r+0xfe>
 801bf98:	2300      	movs	r3, #0
 801bf9a:	3401      	adds	r4, #1
 801bf9c:	9305      	str	r3, [sp, #20]
 801bf9e:	4619      	mov	r1, r3
 801bfa0:	f04f 0c0a 	mov.w	ip, #10
 801bfa4:	4620      	mov	r0, r4
 801bfa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bfaa:	3a30      	subs	r2, #48	@ 0x30
 801bfac:	2a09      	cmp	r2, #9
 801bfae:	d903      	bls.n	801bfb8 <_vfiprintf_r+0x1cc>
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d0c6      	beq.n	801bf42 <_vfiprintf_r+0x156>
 801bfb4:	9105      	str	r1, [sp, #20]
 801bfb6:	e7c4      	b.n	801bf42 <_vfiprintf_r+0x156>
 801bfb8:	fb0c 2101 	mla	r1, ip, r1, r2
 801bfbc:	4604      	mov	r4, r0
 801bfbe:	2301      	movs	r3, #1
 801bfc0:	e7f0      	b.n	801bfa4 <_vfiprintf_r+0x1b8>
 801bfc2:	ab03      	add	r3, sp, #12
 801bfc4:	9300      	str	r3, [sp, #0]
 801bfc6:	462a      	mov	r2, r5
 801bfc8:	4b12      	ldr	r3, [pc, #72]	@ (801c014 <_vfiprintf_r+0x228>)
 801bfca:	a904      	add	r1, sp, #16
 801bfcc:	4630      	mov	r0, r6
 801bfce:	f7fc ffcb 	bl	8018f68 <_printf_float>
 801bfd2:	4607      	mov	r7, r0
 801bfd4:	1c78      	adds	r0, r7, #1
 801bfd6:	d1d6      	bne.n	801bf86 <_vfiprintf_r+0x19a>
 801bfd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bfda:	07d9      	lsls	r1, r3, #31
 801bfdc:	d405      	bmi.n	801bfea <_vfiprintf_r+0x1fe>
 801bfde:	89ab      	ldrh	r3, [r5, #12]
 801bfe0:	059a      	lsls	r2, r3, #22
 801bfe2:	d402      	bmi.n	801bfea <_vfiprintf_r+0x1fe>
 801bfe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bfe6:	f7fd fd29 	bl	8019a3c <__retarget_lock_release_recursive>
 801bfea:	89ab      	ldrh	r3, [r5, #12]
 801bfec:	065b      	lsls	r3, r3, #25
 801bfee:	f53f af1f 	bmi.w	801be30 <_vfiprintf_r+0x44>
 801bff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bff4:	e71e      	b.n	801be34 <_vfiprintf_r+0x48>
 801bff6:	ab03      	add	r3, sp, #12
 801bff8:	9300      	str	r3, [sp, #0]
 801bffa:	462a      	mov	r2, r5
 801bffc:	4b05      	ldr	r3, [pc, #20]	@ (801c014 <_vfiprintf_r+0x228>)
 801bffe:	a904      	add	r1, sp, #16
 801c000:	4630      	mov	r0, r6
 801c002:	f7fd fa39 	bl	8019478 <_printf_i>
 801c006:	e7e4      	b.n	801bfd2 <_vfiprintf_r+0x1e6>
 801c008:	0801db78 	.word	0x0801db78
 801c00c:	0801db82 	.word	0x0801db82
 801c010:	08018f69 	.word	0x08018f69
 801c014:	0801bdc9 	.word	0x0801bdc9
 801c018:	0801db7e 	.word	0x0801db7e

0801c01c <__swbuf_r>:
 801c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c01e:	460e      	mov	r6, r1
 801c020:	4614      	mov	r4, r2
 801c022:	4605      	mov	r5, r0
 801c024:	b118      	cbz	r0, 801c02e <__swbuf_r+0x12>
 801c026:	6a03      	ldr	r3, [r0, #32]
 801c028:	b90b      	cbnz	r3, 801c02e <__swbuf_r+0x12>
 801c02a:	f7fd fbd1 	bl	80197d0 <__sinit>
 801c02e:	69a3      	ldr	r3, [r4, #24]
 801c030:	60a3      	str	r3, [r4, #8]
 801c032:	89a3      	ldrh	r3, [r4, #12]
 801c034:	071a      	lsls	r2, r3, #28
 801c036:	d501      	bpl.n	801c03c <__swbuf_r+0x20>
 801c038:	6923      	ldr	r3, [r4, #16]
 801c03a:	b943      	cbnz	r3, 801c04e <__swbuf_r+0x32>
 801c03c:	4621      	mov	r1, r4
 801c03e:	4628      	mov	r0, r5
 801c040:	f000 f82a 	bl	801c098 <__swsetup_r>
 801c044:	b118      	cbz	r0, 801c04e <__swbuf_r+0x32>
 801c046:	f04f 37ff 	mov.w	r7, #4294967295
 801c04a:	4638      	mov	r0, r7
 801c04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c04e:	6823      	ldr	r3, [r4, #0]
 801c050:	6922      	ldr	r2, [r4, #16]
 801c052:	1a98      	subs	r0, r3, r2
 801c054:	6963      	ldr	r3, [r4, #20]
 801c056:	b2f6      	uxtb	r6, r6
 801c058:	4283      	cmp	r3, r0
 801c05a:	4637      	mov	r7, r6
 801c05c:	dc05      	bgt.n	801c06a <__swbuf_r+0x4e>
 801c05e:	4621      	mov	r1, r4
 801c060:	4628      	mov	r0, r5
 801c062:	f7ff fdc7 	bl	801bbf4 <_fflush_r>
 801c066:	2800      	cmp	r0, #0
 801c068:	d1ed      	bne.n	801c046 <__swbuf_r+0x2a>
 801c06a:	68a3      	ldr	r3, [r4, #8]
 801c06c:	3b01      	subs	r3, #1
 801c06e:	60a3      	str	r3, [r4, #8]
 801c070:	6823      	ldr	r3, [r4, #0]
 801c072:	1c5a      	adds	r2, r3, #1
 801c074:	6022      	str	r2, [r4, #0]
 801c076:	701e      	strb	r6, [r3, #0]
 801c078:	6962      	ldr	r2, [r4, #20]
 801c07a:	1c43      	adds	r3, r0, #1
 801c07c:	429a      	cmp	r2, r3
 801c07e:	d004      	beq.n	801c08a <__swbuf_r+0x6e>
 801c080:	89a3      	ldrh	r3, [r4, #12]
 801c082:	07db      	lsls	r3, r3, #31
 801c084:	d5e1      	bpl.n	801c04a <__swbuf_r+0x2e>
 801c086:	2e0a      	cmp	r6, #10
 801c088:	d1df      	bne.n	801c04a <__swbuf_r+0x2e>
 801c08a:	4621      	mov	r1, r4
 801c08c:	4628      	mov	r0, r5
 801c08e:	f7ff fdb1 	bl	801bbf4 <_fflush_r>
 801c092:	2800      	cmp	r0, #0
 801c094:	d0d9      	beq.n	801c04a <__swbuf_r+0x2e>
 801c096:	e7d6      	b.n	801c046 <__swbuf_r+0x2a>

0801c098 <__swsetup_r>:
 801c098:	b538      	push	{r3, r4, r5, lr}
 801c09a:	4b29      	ldr	r3, [pc, #164]	@ (801c140 <__swsetup_r+0xa8>)
 801c09c:	4605      	mov	r5, r0
 801c09e:	6818      	ldr	r0, [r3, #0]
 801c0a0:	460c      	mov	r4, r1
 801c0a2:	b118      	cbz	r0, 801c0ac <__swsetup_r+0x14>
 801c0a4:	6a03      	ldr	r3, [r0, #32]
 801c0a6:	b90b      	cbnz	r3, 801c0ac <__swsetup_r+0x14>
 801c0a8:	f7fd fb92 	bl	80197d0 <__sinit>
 801c0ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c0b0:	0719      	lsls	r1, r3, #28
 801c0b2:	d422      	bmi.n	801c0fa <__swsetup_r+0x62>
 801c0b4:	06da      	lsls	r2, r3, #27
 801c0b6:	d407      	bmi.n	801c0c8 <__swsetup_r+0x30>
 801c0b8:	2209      	movs	r2, #9
 801c0ba:	602a      	str	r2, [r5, #0]
 801c0bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c0c0:	81a3      	strh	r3, [r4, #12]
 801c0c2:	f04f 30ff 	mov.w	r0, #4294967295
 801c0c6:	e033      	b.n	801c130 <__swsetup_r+0x98>
 801c0c8:	0758      	lsls	r0, r3, #29
 801c0ca:	d512      	bpl.n	801c0f2 <__swsetup_r+0x5a>
 801c0cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c0ce:	b141      	cbz	r1, 801c0e2 <__swsetup_r+0x4a>
 801c0d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c0d4:	4299      	cmp	r1, r3
 801c0d6:	d002      	beq.n	801c0de <__swsetup_r+0x46>
 801c0d8:	4628      	mov	r0, r5
 801c0da:	f7fe faa7 	bl	801a62c <_free_r>
 801c0de:	2300      	movs	r3, #0
 801c0e0:	6363      	str	r3, [r4, #52]	@ 0x34
 801c0e2:	89a3      	ldrh	r3, [r4, #12]
 801c0e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c0e8:	81a3      	strh	r3, [r4, #12]
 801c0ea:	2300      	movs	r3, #0
 801c0ec:	6063      	str	r3, [r4, #4]
 801c0ee:	6923      	ldr	r3, [r4, #16]
 801c0f0:	6023      	str	r3, [r4, #0]
 801c0f2:	89a3      	ldrh	r3, [r4, #12]
 801c0f4:	f043 0308 	orr.w	r3, r3, #8
 801c0f8:	81a3      	strh	r3, [r4, #12]
 801c0fa:	6923      	ldr	r3, [r4, #16]
 801c0fc:	b94b      	cbnz	r3, 801c112 <__swsetup_r+0x7a>
 801c0fe:	89a3      	ldrh	r3, [r4, #12]
 801c100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c108:	d003      	beq.n	801c112 <__swsetup_r+0x7a>
 801c10a:	4621      	mov	r1, r4
 801c10c:	4628      	mov	r0, r5
 801c10e:	f000 f883 	bl	801c218 <__smakebuf_r>
 801c112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c116:	f013 0201 	ands.w	r2, r3, #1
 801c11a:	d00a      	beq.n	801c132 <__swsetup_r+0x9a>
 801c11c:	2200      	movs	r2, #0
 801c11e:	60a2      	str	r2, [r4, #8]
 801c120:	6962      	ldr	r2, [r4, #20]
 801c122:	4252      	negs	r2, r2
 801c124:	61a2      	str	r2, [r4, #24]
 801c126:	6922      	ldr	r2, [r4, #16]
 801c128:	b942      	cbnz	r2, 801c13c <__swsetup_r+0xa4>
 801c12a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c12e:	d1c5      	bne.n	801c0bc <__swsetup_r+0x24>
 801c130:	bd38      	pop	{r3, r4, r5, pc}
 801c132:	0799      	lsls	r1, r3, #30
 801c134:	bf58      	it	pl
 801c136:	6962      	ldrpl	r2, [r4, #20]
 801c138:	60a2      	str	r2, [r4, #8]
 801c13a:	e7f4      	b.n	801c126 <__swsetup_r+0x8e>
 801c13c:	2000      	movs	r0, #0
 801c13e:	e7f7      	b.n	801c130 <__swsetup_r+0x98>
 801c140:	2400027c 	.word	0x2400027c

0801c144 <_raise_r>:
 801c144:	291f      	cmp	r1, #31
 801c146:	b538      	push	{r3, r4, r5, lr}
 801c148:	4605      	mov	r5, r0
 801c14a:	460c      	mov	r4, r1
 801c14c:	d904      	bls.n	801c158 <_raise_r+0x14>
 801c14e:	2316      	movs	r3, #22
 801c150:	6003      	str	r3, [r0, #0]
 801c152:	f04f 30ff 	mov.w	r0, #4294967295
 801c156:	bd38      	pop	{r3, r4, r5, pc}
 801c158:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c15a:	b112      	cbz	r2, 801c162 <_raise_r+0x1e>
 801c15c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c160:	b94b      	cbnz	r3, 801c176 <_raise_r+0x32>
 801c162:	4628      	mov	r0, r5
 801c164:	f000 f830 	bl	801c1c8 <_getpid_r>
 801c168:	4622      	mov	r2, r4
 801c16a:	4601      	mov	r1, r0
 801c16c:	4628      	mov	r0, r5
 801c16e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c172:	f000 b817 	b.w	801c1a4 <_kill_r>
 801c176:	2b01      	cmp	r3, #1
 801c178:	d00a      	beq.n	801c190 <_raise_r+0x4c>
 801c17a:	1c59      	adds	r1, r3, #1
 801c17c:	d103      	bne.n	801c186 <_raise_r+0x42>
 801c17e:	2316      	movs	r3, #22
 801c180:	6003      	str	r3, [r0, #0]
 801c182:	2001      	movs	r0, #1
 801c184:	e7e7      	b.n	801c156 <_raise_r+0x12>
 801c186:	2100      	movs	r1, #0
 801c188:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c18c:	4620      	mov	r0, r4
 801c18e:	4798      	blx	r3
 801c190:	2000      	movs	r0, #0
 801c192:	e7e0      	b.n	801c156 <_raise_r+0x12>

0801c194 <raise>:
 801c194:	4b02      	ldr	r3, [pc, #8]	@ (801c1a0 <raise+0xc>)
 801c196:	4601      	mov	r1, r0
 801c198:	6818      	ldr	r0, [r3, #0]
 801c19a:	f7ff bfd3 	b.w	801c144 <_raise_r>
 801c19e:	bf00      	nop
 801c1a0:	2400027c 	.word	0x2400027c

0801c1a4 <_kill_r>:
 801c1a4:	b538      	push	{r3, r4, r5, lr}
 801c1a6:	4d07      	ldr	r5, [pc, #28]	@ (801c1c4 <_kill_r+0x20>)
 801c1a8:	2300      	movs	r3, #0
 801c1aa:	4604      	mov	r4, r0
 801c1ac:	4608      	mov	r0, r1
 801c1ae:	4611      	mov	r1, r2
 801c1b0:	602b      	str	r3, [r5, #0]
 801c1b2:	f7e6 fd71 	bl	8002c98 <_kill>
 801c1b6:	1c43      	adds	r3, r0, #1
 801c1b8:	d102      	bne.n	801c1c0 <_kill_r+0x1c>
 801c1ba:	682b      	ldr	r3, [r5, #0]
 801c1bc:	b103      	cbz	r3, 801c1c0 <_kill_r+0x1c>
 801c1be:	6023      	str	r3, [r4, #0]
 801c1c0:	bd38      	pop	{r3, r4, r5, pc}
 801c1c2:	bf00      	nop
 801c1c4:	24006354 	.word	0x24006354

0801c1c8 <_getpid_r>:
 801c1c8:	f7e6 bd5e 	b.w	8002c88 <_getpid>

0801c1cc <__swhatbuf_r>:
 801c1cc:	b570      	push	{r4, r5, r6, lr}
 801c1ce:	460c      	mov	r4, r1
 801c1d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c1d4:	2900      	cmp	r1, #0
 801c1d6:	b096      	sub	sp, #88	@ 0x58
 801c1d8:	4615      	mov	r5, r2
 801c1da:	461e      	mov	r6, r3
 801c1dc:	da0d      	bge.n	801c1fa <__swhatbuf_r+0x2e>
 801c1de:	89a3      	ldrh	r3, [r4, #12]
 801c1e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c1e4:	f04f 0100 	mov.w	r1, #0
 801c1e8:	bf14      	ite	ne
 801c1ea:	2340      	movne	r3, #64	@ 0x40
 801c1ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c1f0:	2000      	movs	r0, #0
 801c1f2:	6031      	str	r1, [r6, #0]
 801c1f4:	602b      	str	r3, [r5, #0]
 801c1f6:	b016      	add	sp, #88	@ 0x58
 801c1f8:	bd70      	pop	{r4, r5, r6, pc}
 801c1fa:	466a      	mov	r2, sp
 801c1fc:	f000 f848 	bl	801c290 <_fstat_r>
 801c200:	2800      	cmp	r0, #0
 801c202:	dbec      	blt.n	801c1de <__swhatbuf_r+0x12>
 801c204:	9901      	ldr	r1, [sp, #4]
 801c206:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c20a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c20e:	4259      	negs	r1, r3
 801c210:	4159      	adcs	r1, r3
 801c212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c216:	e7eb      	b.n	801c1f0 <__swhatbuf_r+0x24>

0801c218 <__smakebuf_r>:
 801c218:	898b      	ldrh	r3, [r1, #12]
 801c21a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c21c:	079d      	lsls	r5, r3, #30
 801c21e:	4606      	mov	r6, r0
 801c220:	460c      	mov	r4, r1
 801c222:	d507      	bpl.n	801c234 <__smakebuf_r+0x1c>
 801c224:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c228:	6023      	str	r3, [r4, #0]
 801c22a:	6123      	str	r3, [r4, #16]
 801c22c:	2301      	movs	r3, #1
 801c22e:	6163      	str	r3, [r4, #20]
 801c230:	b003      	add	sp, #12
 801c232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c234:	ab01      	add	r3, sp, #4
 801c236:	466a      	mov	r2, sp
 801c238:	f7ff ffc8 	bl	801c1cc <__swhatbuf_r>
 801c23c:	9f00      	ldr	r7, [sp, #0]
 801c23e:	4605      	mov	r5, r0
 801c240:	4639      	mov	r1, r7
 801c242:	4630      	mov	r0, r6
 801c244:	f7fe fda0 	bl	801ad88 <_malloc_r>
 801c248:	b948      	cbnz	r0, 801c25e <__smakebuf_r+0x46>
 801c24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c24e:	059a      	lsls	r2, r3, #22
 801c250:	d4ee      	bmi.n	801c230 <__smakebuf_r+0x18>
 801c252:	f023 0303 	bic.w	r3, r3, #3
 801c256:	f043 0302 	orr.w	r3, r3, #2
 801c25a:	81a3      	strh	r3, [r4, #12]
 801c25c:	e7e2      	b.n	801c224 <__smakebuf_r+0xc>
 801c25e:	89a3      	ldrh	r3, [r4, #12]
 801c260:	6020      	str	r0, [r4, #0]
 801c262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c266:	81a3      	strh	r3, [r4, #12]
 801c268:	9b01      	ldr	r3, [sp, #4]
 801c26a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c26e:	b15b      	cbz	r3, 801c288 <__smakebuf_r+0x70>
 801c270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c274:	4630      	mov	r0, r6
 801c276:	f000 f81d 	bl	801c2b4 <_isatty_r>
 801c27a:	b128      	cbz	r0, 801c288 <__smakebuf_r+0x70>
 801c27c:	89a3      	ldrh	r3, [r4, #12]
 801c27e:	f023 0303 	bic.w	r3, r3, #3
 801c282:	f043 0301 	orr.w	r3, r3, #1
 801c286:	81a3      	strh	r3, [r4, #12]
 801c288:	89a3      	ldrh	r3, [r4, #12]
 801c28a:	431d      	orrs	r5, r3
 801c28c:	81a5      	strh	r5, [r4, #12]
 801c28e:	e7cf      	b.n	801c230 <__smakebuf_r+0x18>

0801c290 <_fstat_r>:
 801c290:	b538      	push	{r3, r4, r5, lr}
 801c292:	4d07      	ldr	r5, [pc, #28]	@ (801c2b0 <_fstat_r+0x20>)
 801c294:	2300      	movs	r3, #0
 801c296:	4604      	mov	r4, r0
 801c298:	4608      	mov	r0, r1
 801c29a:	4611      	mov	r1, r2
 801c29c:	602b      	str	r3, [r5, #0]
 801c29e:	f7e6 fd5b 	bl	8002d58 <_fstat>
 801c2a2:	1c43      	adds	r3, r0, #1
 801c2a4:	d102      	bne.n	801c2ac <_fstat_r+0x1c>
 801c2a6:	682b      	ldr	r3, [r5, #0]
 801c2a8:	b103      	cbz	r3, 801c2ac <_fstat_r+0x1c>
 801c2aa:	6023      	str	r3, [r4, #0]
 801c2ac:	bd38      	pop	{r3, r4, r5, pc}
 801c2ae:	bf00      	nop
 801c2b0:	24006354 	.word	0x24006354

0801c2b4 <_isatty_r>:
 801c2b4:	b538      	push	{r3, r4, r5, lr}
 801c2b6:	4d06      	ldr	r5, [pc, #24]	@ (801c2d0 <_isatty_r+0x1c>)
 801c2b8:	2300      	movs	r3, #0
 801c2ba:	4604      	mov	r4, r0
 801c2bc:	4608      	mov	r0, r1
 801c2be:	602b      	str	r3, [r5, #0]
 801c2c0:	f7e6 fd5a 	bl	8002d78 <_isatty>
 801c2c4:	1c43      	adds	r3, r0, #1
 801c2c6:	d102      	bne.n	801c2ce <_isatty_r+0x1a>
 801c2c8:	682b      	ldr	r3, [r5, #0]
 801c2ca:	b103      	cbz	r3, 801c2ce <_isatty_r+0x1a>
 801c2cc:	6023      	str	r3, [r4, #0]
 801c2ce:	bd38      	pop	{r3, r4, r5, pc}
 801c2d0:	24006354 	.word	0x24006354
 801c2d4:	00000000 	.word	0x00000000

0801c2d8 <sin>:
 801c2d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c2da:	eeb0 7b40 	vmov.f64	d7, d0
 801c2de:	ee17 3a90 	vmov	r3, s15
 801c2e2:	4a21      	ldr	r2, [pc, #132]	@ (801c368 <sin+0x90>)
 801c2e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c2e8:	4293      	cmp	r3, r2
 801c2ea:	d807      	bhi.n	801c2fc <sin+0x24>
 801c2ec:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801c360 <sin+0x88>
 801c2f0:	2000      	movs	r0, #0
 801c2f2:	b005      	add	sp, #20
 801c2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 801c2f8:	f000 b986 	b.w	801c608 <__kernel_sin>
 801c2fc:	4a1b      	ldr	r2, [pc, #108]	@ (801c36c <sin+0x94>)
 801c2fe:	4293      	cmp	r3, r2
 801c300:	d904      	bls.n	801c30c <sin+0x34>
 801c302:	ee30 0b40 	vsub.f64	d0, d0, d0
 801c306:	b005      	add	sp, #20
 801c308:	f85d fb04 	ldr.w	pc, [sp], #4
 801c30c:	4668      	mov	r0, sp
 801c30e:	f000 f9d3 	bl	801c6b8 <__ieee754_rem_pio2>
 801c312:	f000 0003 	and.w	r0, r0, #3
 801c316:	2801      	cmp	r0, #1
 801c318:	d00a      	beq.n	801c330 <sin+0x58>
 801c31a:	2802      	cmp	r0, #2
 801c31c:	d00f      	beq.n	801c33e <sin+0x66>
 801c31e:	b9c0      	cbnz	r0, 801c352 <sin+0x7a>
 801c320:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c324:	ed9d 0b00 	vldr	d0, [sp]
 801c328:	2001      	movs	r0, #1
 801c32a:	f000 f96d 	bl	801c608 <__kernel_sin>
 801c32e:	e7ea      	b.n	801c306 <sin+0x2e>
 801c330:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c334:	ed9d 0b00 	vldr	d0, [sp]
 801c338:	f000 f8fe 	bl	801c538 <__kernel_cos>
 801c33c:	e7e3      	b.n	801c306 <sin+0x2e>
 801c33e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c342:	ed9d 0b00 	vldr	d0, [sp]
 801c346:	2001      	movs	r0, #1
 801c348:	f000 f95e 	bl	801c608 <__kernel_sin>
 801c34c:	eeb1 0b40 	vneg.f64	d0, d0
 801c350:	e7d9      	b.n	801c306 <sin+0x2e>
 801c352:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c356:	ed9d 0b00 	vldr	d0, [sp]
 801c35a:	f000 f8ed 	bl	801c538 <__kernel_cos>
 801c35e:	e7f5      	b.n	801c34c <sin+0x74>
	...
 801c368:	3fe921fb 	.word	0x3fe921fb
 801c36c:	7fefffff 	.word	0x7fefffff

0801c370 <sinf_poly>:
 801c370:	07cb      	lsls	r3, r1, #31
 801c372:	d412      	bmi.n	801c39a <sinf_poly+0x2a>
 801c374:	ee21 5b00 	vmul.f64	d5, d1, d0
 801c378:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801c37c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801c380:	eea6 7b01 	vfma.f64	d7, d6, d1
 801c384:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801c388:	ee21 1b05 	vmul.f64	d1, d1, d5
 801c38c:	eea6 0b05 	vfma.f64	d0, d6, d5
 801c390:	eea7 0b01 	vfma.f64	d0, d7, d1
 801c394:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c398:	4770      	bx	lr
 801c39a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801c39e:	ee21 5b01 	vmul.f64	d5, d1, d1
 801c3a2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801c3a6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801c3aa:	eea1 7b06 	vfma.f64	d7, d1, d6
 801c3ae:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801c3b2:	eea1 0b06 	vfma.f64	d0, d1, d6
 801c3b6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801c3ba:	ee21 1b05 	vmul.f64	d1, d1, d5
 801c3be:	eea5 0b06 	vfma.f64	d0, d5, d6
 801c3c2:	e7e5      	b.n	801c390 <sinf_poly+0x20>
 801c3c4:	0000      	movs	r0, r0
	...

0801c3c8 <sinf>:
 801c3c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c3ca:	ee10 4a10 	vmov	r4, s0
 801c3ce:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801c3d2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801c3d6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801c3da:	eef0 7a40 	vmov.f32	s15, s0
 801c3de:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801c3e2:	d218      	bcs.n	801c416 <sinf+0x4e>
 801c3e4:	ee26 1b06 	vmul.f64	d1, d6, d6
 801c3e8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801c3ec:	d20a      	bcs.n	801c404 <sinf+0x3c>
 801c3ee:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801c3f2:	d103      	bne.n	801c3fc <sinf+0x34>
 801c3f4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801c3f8:	ed8d 1a01 	vstr	s2, [sp, #4]
 801c3fc:	eeb0 0a67 	vmov.f32	s0, s15
 801c400:	b003      	add	sp, #12
 801c402:	bd30      	pop	{r4, r5, pc}
 801c404:	483a      	ldr	r0, [pc, #232]	@ (801c4f0 <sinf+0x128>)
 801c406:	eeb0 0b46 	vmov.f64	d0, d6
 801c40a:	2100      	movs	r1, #0
 801c40c:	b003      	add	sp, #12
 801c40e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c412:	f7ff bfad 	b.w	801c370 <sinf_poly>
 801c416:	f240 422e 	movw	r2, #1070	@ 0x42e
 801c41a:	4293      	cmp	r3, r2
 801c41c:	d824      	bhi.n	801c468 <sinf+0xa0>
 801c41e:	4b34      	ldr	r3, [pc, #208]	@ (801c4f0 <sinf+0x128>)
 801c420:	ed93 7b08 	vldr	d7, [r3, #32]
 801c424:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c428:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801c42c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801c430:	ee17 1a90 	vmov	r1, s15
 801c434:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801c438:	1609      	asrs	r1, r1, #24
 801c43a:	ee07 1a90 	vmov	s15, r1
 801c43e:	f001 0203 	and.w	r2, r1, #3
 801c442:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801c446:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801c44a:	ed92 0b00 	vldr	d0, [r2]
 801c44e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801c452:	f011 0f02 	tst.w	r1, #2
 801c456:	eea5 6b47 	vfms.f64	d6, d5, d7
 801c45a:	bf08      	it	eq
 801c45c:	4618      	moveq	r0, r3
 801c45e:	ee26 1b06 	vmul.f64	d1, d6, d6
 801c462:	ee20 0b06 	vmul.f64	d0, d0, d6
 801c466:	e7d1      	b.n	801c40c <sinf+0x44>
 801c468:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801c46c:	d237      	bcs.n	801c4de <sinf+0x116>
 801c46e:	4921      	ldr	r1, [pc, #132]	@ (801c4f4 <sinf+0x12c>)
 801c470:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801c474:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801c478:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801c47c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801c480:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801c484:	6a10      	ldr	r0, [r2, #32]
 801c486:	6912      	ldr	r2, [r2, #16]
 801c488:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801c48c:	40ab      	lsls	r3, r5
 801c48e:	fba0 5003 	umull	r5, r0, r0, r3
 801c492:	4359      	muls	r1, r3
 801c494:	fbe3 0102 	umlal	r0, r1, r3, r2
 801c498:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801c49c:	0f9d      	lsrs	r5, r3, #30
 801c49e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801c4a2:	1ac9      	subs	r1, r1, r3
 801c4a4:	f7e4 f92a 	bl	80006fc <__aeabi_l2d>
 801c4a8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801c4ac:	4b10      	ldr	r3, [pc, #64]	@ (801c4f0 <sinf+0x128>)
 801c4ae:	f004 0203 	and.w	r2, r4, #3
 801c4b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801c4b6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801c4e8 <sinf+0x120>
 801c4ba:	ed92 0b00 	vldr	d0, [r2]
 801c4be:	ec41 0b17 	vmov	d7, r0, r1
 801c4c2:	f014 0f02 	tst.w	r4, #2
 801c4c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c4ca:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801c4ce:	4629      	mov	r1, r5
 801c4d0:	bf08      	it	eq
 801c4d2:	4618      	moveq	r0, r3
 801c4d4:	ee27 1b07 	vmul.f64	d1, d7, d7
 801c4d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c4dc:	e796      	b.n	801c40c <sinf+0x44>
 801c4de:	b003      	add	sp, #12
 801c4e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c4e4:	f000 b816 	b.w	801c514 <__math_invalidf>
 801c4e8:	54442d18 	.word	0x54442d18
 801c4ec:	3c1921fb 	.word	0x3c1921fb
 801c4f0:	0801dc28 	.word	0x0801dc28
 801c4f4:	0801dbc8 	.word	0x0801dbc8

0801c4f8 <with_errnof>:
 801c4f8:	b510      	push	{r4, lr}
 801c4fa:	ed2d 8b02 	vpush	{d8}
 801c4fe:	eeb0 8a40 	vmov.f32	s16, s0
 801c502:	4604      	mov	r4, r0
 801c504:	f7fd fa6e 	bl	80199e4 <__errno>
 801c508:	eeb0 0a48 	vmov.f32	s0, s16
 801c50c:	ecbd 8b02 	vpop	{d8}
 801c510:	6004      	str	r4, [r0, #0]
 801c512:	bd10      	pop	{r4, pc}

0801c514 <__math_invalidf>:
 801c514:	eef0 7a40 	vmov.f32	s15, s0
 801c518:	ee30 7a40 	vsub.f32	s14, s0, s0
 801c51c:	eef4 7a67 	vcmp.f32	s15, s15
 801c520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c524:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801c528:	d602      	bvs.n	801c530 <__math_invalidf+0x1c>
 801c52a:	2021      	movs	r0, #33	@ 0x21
 801c52c:	f7ff bfe4 	b.w	801c4f8 <with_errnof>
 801c530:	4770      	bx	lr
 801c532:	0000      	movs	r0, r0
 801c534:	0000      	movs	r0, r0
	...

0801c538 <__kernel_cos>:
 801c538:	eeb0 5b40 	vmov.f64	d5, d0
 801c53c:	ee15 1a90 	vmov	r1, s11
 801c540:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801c544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801c548:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801c54c:	d204      	bcs.n	801c558 <__kernel_cos+0x20>
 801c54e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801c552:	ee17 3a90 	vmov	r3, s15
 801c556:	b343      	cbz	r3, 801c5aa <__kernel_cos+0x72>
 801c558:	ee25 6b05 	vmul.f64	d6, d5, d5
 801c55c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801c560:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801c5d0 <__kernel_cos+0x98>
 801c564:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801c5d8 <__kernel_cos+0xa0>
 801c568:	eea6 4b07 	vfma.f64	d4, d6, d7
 801c56c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801c5e0 <__kernel_cos+0xa8>
 801c570:	eea4 7b06 	vfma.f64	d7, d4, d6
 801c574:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801c5e8 <__kernel_cos+0xb0>
 801c578:	eea7 4b06 	vfma.f64	d4, d7, d6
 801c57c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801c5f0 <__kernel_cos+0xb8>
 801c580:	4b1f      	ldr	r3, [pc, #124]	@ (801c600 <__kernel_cos+0xc8>)
 801c582:	eea4 7b06 	vfma.f64	d7, d4, d6
 801c586:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801c5f8 <__kernel_cos+0xc0>
 801c58a:	4299      	cmp	r1, r3
 801c58c:	eea7 4b06 	vfma.f64	d4, d7, d6
 801c590:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801c594:	ee24 4b06 	vmul.f64	d4, d4, d6
 801c598:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c59c:	eea6 1b04 	vfma.f64	d1, d6, d4
 801c5a0:	d804      	bhi.n	801c5ac <__kernel_cos+0x74>
 801c5a2:	ee37 7b41 	vsub.f64	d7, d7, d1
 801c5a6:	ee30 0b47 	vsub.f64	d0, d0, d7
 801c5aa:	4770      	bx	lr
 801c5ac:	4b15      	ldr	r3, [pc, #84]	@ (801c604 <__kernel_cos+0xcc>)
 801c5ae:	4299      	cmp	r1, r3
 801c5b0:	d809      	bhi.n	801c5c6 <__kernel_cos+0x8e>
 801c5b2:	2200      	movs	r2, #0
 801c5b4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801c5b8:	ec43 2b16 	vmov	d6, r2, r3
 801c5bc:	ee30 0b46 	vsub.f64	d0, d0, d6
 801c5c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c5c4:	e7ed      	b.n	801c5a2 <__kernel_cos+0x6a>
 801c5c6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801c5ca:	e7f7      	b.n	801c5bc <__kernel_cos+0x84>
 801c5cc:	f3af 8000 	nop.w
 801c5d0:	be8838d4 	.word	0xbe8838d4
 801c5d4:	bda8fae9 	.word	0xbda8fae9
 801c5d8:	bdb4b1c4 	.word	0xbdb4b1c4
 801c5dc:	3e21ee9e 	.word	0x3e21ee9e
 801c5e0:	809c52ad 	.word	0x809c52ad
 801c5e4:	be927e4f 	.word	0xbe927e4f
 801c5e8:	19cb1590 	.word	0x19cb1590
 801c5ec:	3efa01a0 	.word	0x3efa01a0
 801c5f0:	16c15177 	.word	0x16c15177
 801c5f4:	bf56c16c 	.word	0xbf56c16c
 801c5f8:	5555554c 	.word	0x5555554c
 801c5fc:	3fa55555 	.word	0x3fa55555
 801c600:	3fd33332 	.word	0x3fd33332
 801c604:	3fe90000 	.word	0x3fe90000

0801c608 <__kernel_sin>:
 801c608:	ee10 3a90 	vmov	r3, s1
 801c60c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c610:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801c614:	d204      	bcs.n	801c620 <__kernel_sin+0x18>
 801c616:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801c61a:	ee17 3a90 	vmov	r3, s15
 801c61e:	b35b      	cbz	r3, 801c678 <__kernel_sin+0x70>
 801c620:	ee20 6b00 	vmul.f64	d6, d0, d0
 801c624:	ee20 5b06 	vmul.f64	d5, d0, d6
 801c628:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801c680 <__kernel_sin+0x78>
 801c62c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801c688 <__kernel_sin+0x80>
 801c630:	eea6 4b07 	vfma.f64	d4, d6, d7
 801c634:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801c690 <__kernel_sin+0x88>
 801c638:	eea4 7b06 	vfma.f64	d7, d4, d6
 801c63c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801c698 <__kernel_sin+0x90>
 801c640:	eea7 4b06 	vfma.f64	d4, d7, d6
 801c644:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801c6a0 <__kernel_sin+0x98>
 801c648:	eea4 7b06 	vfma.f64	d7, d4, d6
 801c64c:	b930      	cbnz	r0, 801c65c <__kernel_sin+0x54>
 801c64e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801c6a8 <__kernel_sin+0xa0>
 801c652:	eea6 4b07 	vfma.f64	d4, d6, d7
 801c656:	eea4 0b05 	vfma.f64	d0, d4, d5
 801c65a:	4770      	bx	lr
 801c65c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801c660:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801c664:	eea1 7b04 	vfma.f64	d7, d1, d4
 801c668:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801c66c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801c6b0 <__kernel_sin+0xa8>
 801c670:	eea5 1b07 	vfma.f64	d1, d5, d7
 801c674:	ee30 0b41 	vsub.f64	d0, d0, d1
 801c678:	4770      	bx	lr
 801c67a:	bf00      	nop
 801c67c:	f3af 8000 	nop.w
 801c680:	5acfd57c 	.word	0x5acfd57c
 801c684:	3de5d93a 	.word	0x3de5d93a
 801c688:	8a2b9ceb 	.word	0x8a2b9ceb
 801c68c:	be5ae5e6 	.word	0xbe5ae5e6
 801c690:	57b1fe7d 	.word	0x57b1fe7d
 801c694:	3ec71de3 	.word	0x3ec71de3
 801c698:	19c161d5 	.word	0x19c161d5
 801c69c:	bf2a01a0 	.word	0xbf2a01a0
 801c6a0:	1110f8a6 	.word	0x1110f8a6
 801c6a4:	3f811111 	.word	0x3f811111
 801c6a8:	55555549 	.word	0x55555549
 801c6ac:	bfc55555 	.word	0xbfc55555
 801c6b0:	55555549 	.word	0x55555549
 801c6b4:	3fc55555 	.word	0x3fc55555

0801c6b8 <__ieee754_rem_pio2>:
 801c6b8:	b570      	push	{r4, r5, r6, lr}
 801c6ba:	eeb0 7b40 	vmov.f64	d7, d0
 801c6be:	ee17 5a90 	vmov	r5, s15
 801c6c2:	4b99      	ldr	r3, [pc, #612]	@ (801c928 <__ieee754_rem_pio2+0x270>)
 801c6c4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801c6c8:	429e      	cmp	r6, r3
 801c6ca:	b088      	sub	sp, #32
 801c6cc:	4604      	mov	r4, r0
 801c6ce:	d807      	bhi.n	801c6e0 <__ieee754_rem_pio2+0x28>
 801c6d0:	2200      	movs	r2, #0
 801c6d2:	2300      	movs	r3, #0
 801c6d4:	ed84 0b00 	vstr	d0, [r4]
 801c6d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801c6dc:	2000      	movs	r0, #0
 801c6de:	e01b      	b.n	801c718 <__ieee754_rem_pio2+0x60>
 801c6e0:	4b92      	ldr	r3, [pc, #584]	@ (801c92c <__ieee754_rem_pio2+0x274>)
 801c6e2:	429e      	cmp	r6, r3
 801c6e4:	d83b      	bhi.n	801c75e <__ieee754_rem_pio2+0xa6>
 801c6e6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801c6ea:	2d00      	cmp	r5, #0
 801c6ec:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801c8e8 <__ieee754_rem_pio2+0x230>
 801c6f0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801c6f4:	dd19      	ble.n	801c72a <__ieee754_rem_pio2+0x72>
 801c6f6:	ee30 7b46 	vsub.f64	d7, d0, d6
 801c6fa:	429e      	cmp	r6, r3
 801c6fc:	d00e      	beq.n	801c71c <__ieee754_rem_pio2+0x64>
 801c6fe:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801c8f0 <__ieee754_rem_pio2+0x238>
 801c702:	ee37 6b45 	vsub.f64	d6, d7, d5
 801c706:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c70a:	ed84 6b00 	vstr	d6, [r4]
 801c70e:	ee37 7b45 	vsub.f64	d7, d7, d5
 801c712:	ed84 7b02 	vstr	d7, [r4, #8]
 801c716:	2001      	movs	r0, #1
 801c718:	b008      	add	sp, #32
 801c71a:	bd70      	pop	{r4, r5, r6, pc}
 801c71c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801c8f8 <__ieee754_rem_pio2+0x240>
 801c720:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801c900 <__ieee754_rem_pio2+0x248>
 801c724:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c728:	e7eb      	b.n	801c702 <__ieee754_rem_pio2+0x4a>
 801c72a:	429e      	cmp	r6, r3
 801c72c:	ee30 7b06 	vadd.f64	d7, d0, d6
 801c730:	d00e      	beq.n	801c750 <__ieee754_rem_pio2+0x98>
 801c732:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801c8f0 <__ieee754_rem_pio2+0x238>
 801c736:	ee37 6b05 	vadd.f64	d6, d7, d5
 801c73a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c73e:	ed84 6b00 	vstr	d6, [r4]
 801c742:	ee37 7b05 	vadd.f64	d7, d7, d5
 801c746:	f04f 30ff 	mov.w	r0, #4294967295
 801c74a:	ed84 7b02 	vstr	d7, [r4, #8]
 801c74e:	e7e3      	b.n	801c718 <__ieee754_rem_pio2+0x60>
 801c750:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801c8f8 <__ieee754_rem_pio2+0x240>
 801c754:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801c900 <__ieee754_rem_pio2+0x248>
 801c758:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c75c:	e7eb      	b.n	801c736 <__ieee754_rem_pio2+0x7e>
 801c75e:	4b74      	ldr	r3, [pc, #464]	@ (801c930 <__ieee754_rem_pio2+0x278>)
 801c760:	429e      	cmp	r6, r3
 801c762:	d870      	bhi.n	801c846 <__ieee754_rem_pio2+0x18e>
 801c764:	f000 f8ec 	bl	801c940 <fabs>
 801c768:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801c76c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801c908 <__ieee754_rem_pio2+0x250>
 801c770:	eea0 7b06 	vfma.f64	d7, d0, d6
 801c774:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801c778:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801c77c:	ee17 0a90 	vmov	r0, s15
 801c780:	eeb1 4b45 	vneg.f64	d4, d5
 801c784:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801c8e8 <__ieee754_rem_pio2+0x230>
 801c788:	eea5 0b47 	vfms.f64	d0, d5, d7
 801c78c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801c8f0 <__ieee754_rem_pio2+0x238>
 801c790:	281f      	cmp	r0, #31
 801c792:	ee25 7b07 	vmul.f64	d7, d5, d7
 801c796:	ee30 6b47 	vsub.f64	d6, d0, d7
 801c79a:	dc05      	bgt.n	801c7a8 <__ieee754_rem_pio2+0xf0>
 801c79c:	4b65      	ldr	r3, [pc, #404]	@ (801c934 <__ieee754_rem_pio2+0x27c>)
 801c79e:	1e42      	subs	r2, r0, #1
 801c7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c7a4:	42b3      	cmp	r3, r6
 801c7a6:	d109      	bne.n	801c7bc <__ieee754_rem_pio2+0x104>
 801c7a8:	ee16 3a90 	vmov	r3, s13
 801c7ac:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801c7b0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801c7b4:	2b10      	cmp	r3, #16
 801c7b6:	ea4f 5226 	mov.w	r2, r6, asr #20
 801c7ba:	dc02      	bgt.n	801c7c2 <__ieee754_rem_pio2+0x10a>
 801c7bc:	ed84 6b00 	vstr	d6, [r4]
 801c7c0:	e01a      	b.n	801c7f8 <__ieee754_rem_pio2+0x140>
 801c7c2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801c8f8 <__ieee754_rem_pio2+0x240>
 801c7c6:	eeb0 6b40 	vmov.f64	d6, d0
 801c7ca:	eea4 6b03 	vfma.f64	d6, d4, d3
 801c7ce:	ee30 7b46 	vsub.f64	d7, d0, d6
 801c7d2:	eea4 7b03 	vfma.f64	d7, d4, d3
 801c7d6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801c900 <__ieee754_rem_pio2+0x248>
 801c7da:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801c7de:	ee36 3b47 	vsub.f64	d3, d6, d7
 801c7e2:	ee13 3a90 	vmov	r3, s7
 801c7e6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801c7ea:	1ad3      	subs	r3, r2, r3
 801c7ec:	2b31      	cmp	r3, #49	@ 0x31
 801c7ee:	dc17      	bgt.n	801c820 <__ieee754_rem_pio2+0x168>
 801c7f0:	eeb0 0b46 	vmov.f64	d0, d6
 801c7f4:	ed84 3b00 	vstr	d3, [r4]
 801c7f8:	ed94 6b00 	vldr	d6, [r4]
 801c7fc:	2d00      	cmp	r5, #0
 801c7fe:	ee30 0b46 	vsub.f64	d0, d0, d6
 801c802:	ee30 0b47 	vsub.f64	d0, d0, d7
 801c806:	ed84 0b02 	vstr	d0, [r4, #8]
 801c80a:	da85      	bge.n	801c718 <__ieee754_rem_pio2+0x60>
 801c80c:	eeb1 6b46 	vneg.f64	d6, d6
 801c810:	eeb1 0b40 	vneg.f64	d0, d0
 801c814:	ed84 6b00 	vstr	d6, [r4]
 801c818:	ed84 0b02 	vstr	d0, [r4, #8]
 801c81c:	4240      	negs	r0, r0
 801c81e:	e77b      	b.n	801c718 <__ieee754_rem_pio2+0x60>
 801c820:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801c910 <__ieee754_rem_pio2+0x258>
 801c824:	eeb0 0b46 	vmov.f64	d0, d6
 801c828:	eea4 0b07 	vfma.f64	d0, d4, d7
 801c82c:	ee36 6b40 	vsub.f64	d6, d6, d0
 801c830:	eea4 6b07 	vfma.f64	d6, d4, d7
 801c834:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801c918 <__ieee754_rem_pio2+0x260>
 801c838:	eeb0 7b46 	vmov.f64	d7, d6
 801c83c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801c840:	ee30 6b47 	vsub.f64	d6, d0, d7
 801c844:	e7ba      	b.n	801c7bc <__ieee754_rem_pio2+0x104>
 801c846:	4b3c      	ldr	r3, [pc, #240]	@ (801c938 <__ieee754_rem_pio2+0x280>)
 801c848:	429e      	cmp	r6, r3
 801c84a:	d906      	bls.n	801c85a <__ieee754_rem_pio2+0x1a2>
 801c84c:	ee30 7b40 	vsub.f64	d7, d0, d0
 801c850:	ed80 7b02 	vstr	d7, [r0, #8]
 801c854:	ed80 7b00 	vstr	d7, [r0]
 801c858:	e740      	b.n	801c6dc <__ieee754_rem_pio2+0x24>
 801c85a:	ee10 3a10 	vmov	r3, s0
 801c85e:	1532      	asrs	r2, r6, #20
 801c860:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801c864:	4618      	mov	r0, r3
 801c866:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801c86a:	ec41 0b17 	vmov	d7, r0, r1
 801c86e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801c872:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801c920 <__ieee754_rem_pio2+0x268>
 801c876:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801c87a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c87e:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c882:	ee27 7b05 	vmul.f64	d7, d7, d5
 801c886:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801c88a:	a808      	add	r0, sp, #32
 801c88c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801c890:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c894:	ed8d 6b04 	vstr	d6, [sp, #16]
 801c898:	ee27 7b05 	vmul.f64	d7, d7, d5
 801c89c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c8a0:	2103      	movs	r1, #3
 801c8a2:	ed30 7b02 	vldmdb	r0!, {d7}
 801c8a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8ae:	460b      	mov	r3, r1
 801c8b0:	f101 31ff 	add.w	r1, r1, #4294967295
 801c8b4:	d0f5      	beq.n	801c8a2 <__ieee754_rem_pio2+0x1ea>
 801c8b6:	4921      	ldr	r1, [pc, #132]	@ (801c93c <__ieee754_rem_pio2+0x284>)
 801c8b8:	9101      	str	r1, [sp, #4]
 801c8ba:	2102      	movs	r1, #2
 801c8bc:	9100      	str	r1, [sp, #0]
 801c8be:	a802      	add	r0, sp, #8
 801c8c0:	4621      	mov	r1, r4
 801c8c2:	f000 f845 	bl	801c950 <__kernel_rem_pio2>
 801c8c6:	2d00      	cmp	r5, #0
 801c8c8:	f6bf af26 	bge.w	801c718 <__ieee754_rem_pio2+0x60>
 801c8cc:	ed94 7b00 	vldr	d7, [r4]
 801c8d0:	eeb1 7b47 	vneg.f64	d7, d7
 801c8d4:	ed84 7b00 	vstr	d7, [r4]
 801c8d8:	ed94 7b02 	vldr	d7, [r4, #8]
 801c8dc:	eeb1 7b47 	vneg.f64	d7, d7
 801c8e0:	ed84 7b02 	vstr	d7, [r4, #8]
 801c8e4:	e79a      	b.n	801c81c <__ieee754_rem_pio2+0x164>
 801c8e6:	bf00      	nop
 801c8e8:	54400000 	.word	0x54400000
 801c8ec:	3ff921fb 	.word	0x3ff921fb
 801c8f0:	1a626331 	.word	0x1a626331
 801c8f4:	3dd0b461 	.word	0x3dd0b461
 801c8f8:	1a600000 	.word	0x1a600000
 801c8fc:	3dd0b461 	.word	0x3dd0b461
 801c900:	2e037073 	.word	0x2e037073
 801c904:	3ba3198a 	.word	0x3ba3198a
 801c908:	6dc9c883 	.word	0x6dc9c883
 801c90c:	3fe45f30 	.word	0x3fe45f30
 801c910:	2e000000 	.word	0x2e000000
 801c914:	3ba3198a 	.word	0x3ba3198a
 801c918:	252049c1 	.word	0x252049c1
 801c91c:	397b839a 	.word	0x397b839a
 801c920:	00000000 	.word	0x00000000
 801c924:	41700000 	.word	0x41700000
 801c928:	3fe921fb 	.word	0x3fe921fb
 801c92c:	4002d97b 	.word	0x4002d97b
 801c930:	413921fb 	.word	0x413921fb
 801c934:	0801dd08 	.word	0x0801dd08
 801c938:	7fefffff 	.word	0x7fefffff
 801c93c:	0801dd88 	.word	0x0801dd88

0801c940 <fabs>:
 801c940:	ec51 0b10 	vmov	r0, r1, d0
 801c944:	4602      	mov	r2, r0
 801c946:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c94a:	ec43 2b10 	vmov	d0, r2, r3
 801c94e:	4770      	bx	lr

0801c950 <__kernel_rem_pio2>:
 801c950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c954:	ed2d 8b06 	vpush	{d8-d10}
 801c958:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801c95c:	469b      	mov	fp, r3
 801c95e:	9001      	str	r0, [sp, #4]
 801c960:	4bbb      	ldr	r3, [pc, #748]	@ (801cc50 <__kernel_rem_pio2+0x300>)
 801c962:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801c964:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801c968:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801c96c:	f112 0f14 	cmn.w	r2, #20
 801c970:	bfa8      	it	ge
 801c972:	1ed3      	subge	r3, r2, #3
 801c974:	f10b 3aff 	add.w	sl, fp, #4294967295
 801c978:	bfb8      	it	lt
 801c97a:	2300      	movlt	r3, #0
 801c97c:	f06f 0517 	mvn.w	r5, #23
 801c980:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801cc38 <__kernel_rem_pio2+0x2e8>
 801c984:	bfa4      	itt	ge
 801c986:	2018      	movge	r0, #24
 801c988:	fb93 f3f0 	sdivge	r3, r3, r0
 801c98c:	fb03 5505 	mla	r5, r3, r5, r5
 801c990:	eba3 040a 	sub.w	r4, r3, sl
 801c994:	4415      	add	r5, r2
 801c996:	460f      	mov	r7, r1
 801c998:	eb09 060a 	add.w	r6, r9, sl
 801c99c:	a81a      	add	r0, sp, #104	@ 0x68
 801c99e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801c9a2:	2200      	movs	r2, #0
 801c9a4:	42b2      	cmp	r2, r6
 801c9a6:	dd0e      	ble.n	801c9c6 <__kernel_rem_pio2+0x76>
 801c9a8:	aa1a      	add	r2, sp, #104	@ 0x68
 801c9aa:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801c9ae:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801c9b2:	2600      	movs	r6, #0
 801c9b4:	454e      	cmp	r6, r9
 801c9b6:	dc25      	bgt.n	801ca04 <__kernel_rem_pio2+0xb4>
 801c9b8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801cc38 <__kernel_rem_pio2+0x2e8>
 801c9bc:	f8dd c004 	ldr.w	ip, [sp, #4]
 801c9c0:	4614      	mov	r4, r2
 801c9c2:	2000      	movs	r0, #0
 801c9c4:	e015      	b.n	801c9f2 <__kernel_rem_pio2+0xa2>
 801c9c6:	42d4      	cmn	r4, r2
 801c9c8:	d409      	bmi.n	801c9de <__kernel_rem_pio2+0x8e>
 801c9ca:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801c9ce:	ee07 1a90 	vmov	s15, r1
 801c9d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c9d6:	eca0 7b02 	vstmia	r0!, {d7}
 801c9da:	3201      	adds	r2, #1
 801c9dc:	e7e2      	b.n	801c9a4 <__kernel_rem_pio2+0x54>
 801c9de:	eeb0 7b46 	vmov.f64	d7, d6
 801c9e2:	e7f8      	b.n	801c9d6 <__kernel_rem_pio2+0x86>
 801c9e4:	ecbc 5b02 	vldmia	ip!, {d5}
 801c9e8:	ed94 6b00 	vldr	d6, [r4]
 801c9ec:	3001      	adds	r0, #1
 801c9ee:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c9f2:	4550      	cmp	r0, sl
 801c9f4:	f1a4 0408 	sub.w	r4, r4, #8
 801c9f8:	ddf4      	ble.n	801c9e4 <__kernel_rem_pio2+0x94>
 801c9fa:	ecae 7b02 	vstmia	lr!, {d7}
 801c9fe:	3601      	adds	r6, #1
 801ca00:	3208      	adds	r2, #8
 801ca02:	e7d7      	b.n	801c9b4 <__kernel_rem_pio2+0x64>
 801ca04:	aa06      	add	r2, sp, #24
 801ca06:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801cc40 <__kernel_rem_pio2+0x2f0>
 801ca0a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801cc48 <__kernel_rem_pio2+0x2f8>
 801ca0e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801ca12:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801ca16:	9203      	str	r2, [sp, #12]
 801ca18:	9302      	str	r3, [sp, #8]
 801ca1a:	464c      	mov	r4, r9
 801ca1c:	00e3      	lsls	r3, r4, #3
 801ca1e:	9304      	str	r3, [sp, #16]
 801ca20:	ab92      	add	r3, sp, #584	@ 0x248
 801ca22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ca26:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801ca2a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801ca2c:	ab06      	add	r3, sp, #24
 801ca2e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801ca32:	461e      	mov	r6, r3
 801ca34:	4620      	mov	r0, r4
 801ca36:	2800      	cmp	r0, #0
 801ca38:	f1a2 0208 	sub.w	r2, r2, #8
 801ca3c:	dc4a      	bgt.n	801cad4 <__kernel_rem_pio2+0x184>
 801ca3e:	4628      	mov	r0, r5
 801ca40:	9305      	str	r3, [sp, #20]
 801ca42:	f000 fa01 	bl	801ce48 <scalbn>
 801ca46:	eeb0 8b40 	vmov.f64	d8, d0
 801ca4a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801ca4e:	ee28 0b00 	vmul.f64	d0, d8, d0
 801ca52:	f000 fa79 	bl	801cf48 <floor>
 801ca56:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801ca5a:	eea0 8b47 	vfms.f64	d8, d0, d7
 801ca5e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801ca62:	2d00      	cmp	r5, #0
 801ca64:	ee17 8a90 	vmov	r8, s15
 801ca68:	9b05      	ldr	r3, [sp, #20]
 801ca6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ca6e:	ee38 8b47 	vsub.f64	d8, d8, d7
 801ca72:	dd41      	ble.n	801caf8 <__kernel_rem_pio2+0x1a8>
 801ca74:	1e60      	subs	r0, r4, #1
 801ca76:	aa06      	add	r2, sp, #24
 801ca78:	f1c5 0c18 	rsb	ip, r5, #24
 801ca7c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801ca80:	fa46 f20c 	asr.w	r2, r6, ip
 801ca84:	4490      	add	r8, r2
 801ca86:	fa02 f20c 	lsl.w	r2, r2, ip
 801ca8a:	1ab6      	subs	r6, r6, r2
 801ca8c:	aa06      	add	r2, sp, #24
 801ca8e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801ca92:	f1c5 0217 	rsb	r2, r5, #23
 801ca96:	4116      	asrs	r6, r2
 801ca98:	2e00      	cmp	r6, #0
 801ca9a:	dd3c      	ble.n	801cb16 <__kernel_rem_pio2+0x1c6>
 801ca9c:	f04f 0c00 	mov.w	ip, #0
 801caa0:	f108 0801 	add.w	r8, r8, #1
 801caa4:	4660      	mov	r0, ip
 801caa6:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801caaa:	4564      	cmp	r4, ip
 801caac:	dc66      	bgt.n	801cb7c <__kernel_rem_pio2+0x22c>
 801caae:	2d00      	cmp	r5, #0
 801cab0:	dd03      	ble.n	801caba <__kernel_rem_pio2+0x16a>
 801cab2:	2d01      	cmp	r5, #1
 801cab4:	d072      	beq.n	801cb9c <__kernel_rem_pio2+0x24c>
 801cab6:	2d02      	cmp	r5, #2
 801cab8:	d07a      	beq.n	801cbb0 <__kernel_rem_pio2+0x260>
 801caba:	2e02      	cmp	r6, #2
 801cabc:	d12b      	bne.n	801cb16 <__kernel_rem_pio2+0x1c6>
 801cabe:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801cac2:	ee30 8b48 	vsub.f64	d8, d0, d8
 801cac6:	b330      	cbz	r0, 801cb16 <__kernel_rem_pio2+0x1c6>
 801cac8:	4628      	mov	r0, r5
 801caca:	f000 f9bd 	bl	801ce48 <scalbn>
 801cace:	ee38 8b40 	vsub.f64	d8, d8, d0
 801cad2:	e020      	b.n	801cb16 <__kernel_rem_pio2+0x1c6>
 801cad4:	ee20 7b09 	vmul.f64	d7, d0, d9
 801cad8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801cadc:	3801      	subs	r0, #1
 801cade:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801cae2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801cae6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801caea:	eca6 0a01 	vstmia	r6!, {s0}
 801caee:	ed92 0b00 	vldr	d0, [r2]
 801caf2:	ee37 0b00 	vadd.f64	d0, d7, d0
 801caf6:	e79e      	b.n	801ca36 <__kernel_rem_pio2+0xe6>
 801caf8:	d105      	bne.n	801cb06 <__kernel_rem_pio2+0x1b6>
 801cafa:	1e62      	subs	r2, r4, #1
 801cafc:	a906      	add	r1, sp, #24
 801cafe:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801cb02:	15f6      	asrs	r6, r6, #23
 801cb04:	e7c8      	b.n	801ca98 <__kernel_rem_pio2+0x148>
 801cb06:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801cb0a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801cb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb12:	da31      	bge.n	801cb78 <__kernel_rem_pio2+0x228>
 801cb14:	2600      	movs	r6, #0
 801cb16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801cb1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb1e:	f040 809b 	bne.w	801cc58 <__kernel_rem_pio2+0x308>
 801cb22:	1e62      	subs	r2, r4, #1
 801cb24:	2000      	movs	r0, #0
 801cb26:	454a      	cmp	r2, r9
 801cb28:	da49      	bge.n	801cbbe <__kernel_rem_pio2+0x26e>
 801cb2a:	2800      	cmp	r0, #0
 801cb2c:	d062      	beq.n	801cbf4 <__kernel_rem_pio2+0x2a4>
 801cb2e:	3c01      	subs	r4, #1
 801cb30:	ab06      	add	r3, sp, #24
 801cb32:	3d18      	subs	r5, #24
 801cb34:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d0f8      	beq.n	801cb2e <__kernel_rem_pio2+0x1de>
 801cb3c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801cb40:	4628      	mov	r0, r5
 801cb42:	f000 f981 	bl	801ce48 <scalbn>
 801cb46:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801cc40 <__kernel_rem_pio2+0x2f0>
 801cb4a:	1c62      	adds	r2, r4, #1
 801cb4c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801cb4e:	00d3      	lsls	r3, r2, #3
 801cb50:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801cb54:	4622      	mov	r2, r4
 801cb56:	2a00      	cmp	r2, #0
 801cb58:	f280 80a8 	bge.w	801ccac <__kernel_rem_pio2+0x35c>
 801cb5c:	4622      	mov	r2, r4
 801cb5e:	2a00      	cmp	r2, #0
 801cb60:	f2c0 80c6 	blt.w	801ccf0 <__kernel_rem_pio2+0x3a0>
 801cb64:	a96a      	add	r1, sp, #424	@ 0x1a8
 801cb66:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801cb6a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801cc38 <__kernel_rem_pio2+0x2e8>
 801cb6e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801cc54 <__kernel_rem_pio2+0x304>
 801cb72:	2000      	movs	r0, #0
 801cb74:	1aa1      	subs	r1, r4, r2
 801cb76:	e0b0      	b.n	801ccda <__kernel_rem_pio2+0x38a>
 801cb78:	2602      	movs	r6, #2
 801cb7a:	e78f      	b.n	801ca9c <__kernel_rem_pio2+0x14c>
 801cb7c:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb80:	b948      	cbnz	r0, 801cb96 <__kernel_rem_pio2+0x246>
 801cb82:	b122      	cbz	r2, 801cb8e <__kernel_rem_pio2+0x23e>
 801cb84:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801cb88:	f843 2c04 	str.w	r2, [r3, #-4]
 801cb8c:	2201      	movs	r2, #1
 801cb8e:	f10c 0c01 	add.w	ip, ip, #1
 801cb92:	4610      	mov	r0, r2
 801cb94:	e789      	b.n	801caaa <__kernel_rem_pio2+0x15a>
 801cb96:	ebae 0202 	sub.w	r2, lr, r2
 801cb9a:	e7f5      	b.n	801cb88 <__kernel_rem_pio2+0x238>
 801cb9c:	1e62      	subs	r2, r4, #1
 801cb9e:	ab06      	add	r3, sp, #24
 801cba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cba4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801cba8:	a906      	add	r1, sp, #24
 801cbaa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801cbae:	e784      	b.n	801caba <__kernel_rem_pio2+0x16a>
 801cbb0:	1e62      	subs	r2, r4, #1
 801cbb2:	ab06      	add	r3, sp, #24
 801cbb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cbb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801cbbc:	e7f4      	b.n	801cba8 <__kernel_rem_pio2+0x258>
 801cbbe:	ab06      	add	r3, sp, #24
 801cbc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cbc4:	3a01      	subs	r2, #1
 801cbc6:	4318      	orrs	r0, r3
 801cbc8:	e7ad      	b.n	801cb26 <__kernel_rem_pio2+0x1d6>
 801cbca:	3301      	adds	r3, #1
 801cbcc:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801cbd0:	2800      	cmp	r0, #0
 801cbd2:	d0fa      	beq.n	801cbca <__kernel_rem_pio2+0x27a>
 801cbd4:	9a04      	ldr	r2, [sp, #16]
 801cbd6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801cbda:	446a      	add	r2, sp
 801cbdc:	eb04 000b 	add.w	r0, r4, fp
 801cbe0:	a91a      	add	r1, sp, #104	@ 0x68
 801cbe2:	1c66      	adds	r6, r4, #1
 801cbe4:	3a98      	subs	r2, #152	@ 0x98
 801cbe6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801cbea:	4423      	add	r3, r4
 801cbec:	42b3      	cmp	r3, r6
 801cbee:	da04      	bge.n	801cbfa <__kernel_rem_pio2+0x2aa>
 801cbf0:	461c      	mov	r4, r3
 801cbf2:	e713      	b.n	801ca1c <__kernel_rem_pio2+0xcc>
 801cbf4:	9a03      	ldr	r2, [sp, #12]
 801cbf6:	2301      	movs	r3, #1
 801cbf8:	e7e8      	b.n	801cbcc <__kernel_rem_pio2+0x27c>
 801cbfa:	9902      	ldr	r1, [sp, #8]
 801cbfc:	f8dd c004 	ldr.w	ip, [sp, #4]
 801cc00:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801cc04:	9104      	str	r1, [sp, #16]
 801cc06:	ee07 1a90 	vmov	s15, r1
 801cc0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cc0e:	2400      	movs	r4, #0
 801cc10:	eca0 7b02 	vstmia	r0!, {d7}
 801cc14:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801cc38 <__kernel_rem_pio2+0x2e8>
 801cc18:	4686      	mov	lr, r0
 801cc1a:	4554      	cmp	r4, sl
 801cc1c:	dd03      	ble.n	801cc26 <__kernel_rem_pio2+0x2d6>
 801cc1e:	eca2 7b02 	vstmia	r2!, {d7}
 801cc22:	3601      	adds	r6, #1
 801cc24:	e7e2      	b.n	801cbec <__kernel_rem_pio2+0x29c>
 801cc26:	ecbc 5b02 	vldmia	ip!, {d5}
 801cc2a:	ed3e 6b02 	vldmdb	lr!, {d6}
 801cc2e:	3401      	adds	r4, #1
 801cc30:	eea5 7b06 	vfma.f64	d7, d5, d6
 801cc34:	e7f1      	b.n	801cc1a <__kernel_rem_pio2+0x2ca>
 801cc36:	bf00      	nop
	...
 801cc44:	3e700000 	.word	0x3e700000
 801cc48:	00000000 	.word	0x00000000
 801cc4c:	41700000 	.word	0x41700000
 801cc50:	0801ded0 	.word	0x0801ded0
 801cc54:	0801de90 	.word	0x0801de90
 801cc58:	4268      	negs	r0, r5
 801cc5a:	eeb0 0b48 	vmov.f64	d0, d8
 801cc5e:	f000 f8f3 	bl	801ce48 <scalbn>
 801cc62:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801ce30 <__kernel_rem_pio2+0x4e0>
 801cc66:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801cc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc6e:	db17      	blt.n	801cca0 <__kernel_rem_pio2+0x350>
 801cc70:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801ce38 <__kernel_rem_pio2+0x4e8>
 801cc74:	ee20 7b07 	vmul.f64	d7, d0, d7
 801cc78:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801cc7c:	aa06      	add	r2, sp, #24
 801cc7e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801cc82:	eea5 0b46 	vfms.f64	d0, d5, d6
 801cc86:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801cc8a:	3518      	adds	r5, #24
 801cc8c:	ee10 3a10 	vmov	r3, s0
 801cc90:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801cc94:	ee17 3a10 	vmov	r3, s14
 801cc98:	3401      	adds	r4, #1
 801cc9a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801cc9e:	e74d      	b.n	801cb3c <__kernel_rem_pio2+0x1ec>
 801cca0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801cca4:	aa06      	add	r2, sp, #24
 801cca6:	ee10 3a10 	vmov	r3, s0
 801ccaa:	e7f6      	b.n	801cc9a <__kernel_rem_pio2+0x34a>
 801ccac:	a806      	add	r0, sp, #24
 801ccae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801ccb2:	9001      	str	r0, [sp, #4]
 801ccb4:	ee07 0a90 	vmov	s15, r0
 801ccb8:	3a01      	subs	r2, #1
 801ccba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ccbe:	ee27 7b00 	vmul.f64	d7, d7, d0
 801ccc2:	ee20 0b06 	vmul.f64	d0, d0, d6
 801ccc6:	ed21 7b02 	vstmdb	r1!, {d7}
 801ccca:	e744      	b.n	801cb56 <__kernel_rem_pio2+0x206>
 801cccc:	ecbc 5b02 	vldmia	ip!, {d5}
 801ccd0:	ecb5 6b02 	vldmia	r5!, {d6}
 801ccd4:	3001      	adds	r0, #1
 801ccd6:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ccda:	4548      	cmp	r0, r9
 801ccdc:	dc01      	bgt.n	801cce2 <__kernel_rem_pio2+0x392>
 801ccde:	4281      	cmp	r1, r0
 801cce0:	daf4      	bge.n	801cccc <__kernel_rem_pio2+0x37c>
 801cce2:	a842      	add	r0, sp, #264	@ 0x108
 801cce4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801cce8:	ed81 7b00 	vstr	d7, [r1]
 801ccec:	3a01      	subs	r2, #1
 801ccee:	e736      	b.n	801cb5e <__kernel_rem_pio2+0x20e>
 801ccf0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801ccf2:	2a02      	cmp	r2, #2
 801ccf4:	dc0a      	bgt.n	801cd0c <__kernel_rem_pio2+0x3bc>
 801ccf6:	2a00      	cmp	r2, #0
 801ccf8:	dc2d      	bgt.n	801cd56 <__kernel_rem_pio2+0x406>
 801ccfa:	d046      	beq.n	801cd8a <__kernel_rem_pio2+0x43a>
 801ccfc:	f008 0007 	and.w	r0, r8, #7
 801cd00:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801cd04:	ecbd 8b06 	vpop	{d8-d10}
 801cd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd0c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801cd0e:	2a03      	cmp	r2, #3
 801cd10:	d1f4      	bne.n	801ccfc <__kernel_rem_pio2+0x3ac>
 801cd12:	a942      	add	r1, sp, #264	@ 0x108
 801cd14:	f1a3 0208 	sub.w	r2, r3, #8
 801cd18:	440a      	add	r2, r1
 801cd1a:	4611      	mov	r1, r2
 801cd1c:	4620      	mov	r0, r4
 801cd1e:	2800      	cmp	r0, #0
 801cd20:	f1a1 0108 	sub.w	r1, r1, #8
 801cd24:	dc52      	bgt.n	801cdcc <__kernel_rem_pio2+0x47c>
 801cd26:	4621      	mov	r1, r4
 801cd28:	2901      	cmp	r1, #1
 801cd2a:	f1a2 0208 	sub.w	r2, r2, #8
 801cd2e:	dc5d      	bgt.n	801cdec <__kernel_rem_pio2+0x49c>
 801cd30:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801ce40 <__kernel_rem_pio2+0x4f0>
 801cd34:	aa42      	add	r2, sp, #264	@ 0x108
 801cd36:	4413      	add	r3, r2
 801cd38:	2c01      	cmp	r4, #1
 801cd3a:	dc67      	bgt.n	801ce0c <__kernel_rem_pio2+0x4bc>
 801cd3c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801cd40:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801cd44:	2e00      	cmp	r6, #0
 801cd46:	d167      	bne.n	801ce18 <__kernel_rem_pio2+0x4c8>
 801cd48:	ed87 5b00 	vstr	d5, [r7]
 801cd4c:	ed87 6b02 	vstr	d6, [r7, #8]
 801cd50:	ed87 7b04 	vstr	d7, [r7, #16]
 801cd54:	e7d2      	b.n	801ccfc <__kernel_rem_pio2+0x3ac>
 801cd56:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801ce40 <__kernel_rem_pio2+0x4f0>
 801cd5a:	aa42      	add	r2, sp, #264	@ 0x108
 801cd5c:	4413      	add	r3, r2
 801cd5e:	4622      	mov	r2, r4
 801cd60:	2a00      	cmp	r2, #0
 801cd62:	da24      	bge.n	801cdae <__kernel_rem_pio2+0x45e>
 801cd64:	b34e      	cbz	r6, 801cdba <__kernel_rem_pio2+0x46a>
 801cd66:	eeb1 7b46 	vneg.f64	d7, d6
 801cd6a:	ed87 7b00 	vstr	d7, [r7]
 801cd6e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801cd72:	aa44      	add	r2, sp, #272	@ 0x110
 801cd74:	2301      	movs	r3, #1
 801cd76:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cd7a:	429c      	cmp	r4, r3
 801cd7c:	da20      	bge.n	801cdc0 <__kernel_rem_pio2+0x470>
 801cd7e:	b10e      	cbz	r6, 801cd84 <__kernel_rem_pio2+0x434>
 801cd80:	eeb1 7b47 	vneg.f64	d7, d7
 801cd84:	ed87 7b02 	vstr	d7, [r7, #8]
 801cd88:	e7b8      	b.n	801ccfc <__kernel_rem_pio2+0x3ac>
 801cd8a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801ce40 <__kernel_rem_pio2+0x4f0>
 801cd8e:	aa42      	add	r2, sp, #264	@ 0x108
 801cd90:	4413      	add	r3, r2
 801cd92:	2c00      	cmp	r4, #0
 801cd94:	da05      	bge.n	801cda2 <__kernel_rem_pio2+0x452>
 801cd96:	b10e      	cbz	r6, 801cd9c <__kernel_rem_pio2+0x44c>
 801cd98:	eeb1 7b47 	vneg.f64	d7, d7
 801cd9c:	ed87 7b00 	vstr	d7, [r7]
 801cda0:	e7ac      	b.n	801ccfc <__kernel_rem_pio2+0x3ac>
 801cda2:	ed33 6b02 	vldmdb	r3!, {d6}
 801cda6:	3c01      	subs	r4, #1
 801cda8:	ee37 7b06 	vadd.f64	d7, d7, d6
 801cdac:	e7f1      	b.n	801cd92 <__kernel_rem_pio2+0x442>
 801cdae:	ed33 7b02 	vldmdb	r3!, {d7}
 801cdb2:	3a01      	subs	r2, #1
 801cdb4:	ee36 6b07 	vadd.f64	d6, d6, d7
 801cdb8:	e7d2      	b.n	801cd60 <__kernel_rem_pio2+0x410>
 801cdba:	eeb0 7b46 	vmov.f64	d7, d6
 801cdbe:	e7d4      	b.n	801cd6a <__kernel_rem_pio2+0x41a>
 801cdc0:	ecb2 6b02 	vldmia	r2!, {d6}
 801cdc4:	3301      	adds	r3, #1
 801cdc6:	ee37 7b06 	vadd.f64	d7, d7, d6
 801cdca:	e7d6      	b.n	801cd7a <__kernel_rem_pio2+0x42a>
 801cdcc:	ed91 7b00 	vldr	d7, [r1]
 801cdd0:	ed91 5b02 	vldr	d5, [r1, #8]
 801cdd4:	3801      	subs	r0, #1
 801cdd6:	ee37 6b05 	vadd.f64	d6, d7, d5
 801cdda:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cdde:	ed81 6b00 	vstr	d6, [r1]
 801cde2:	ee37 7b05 	vadd.f64	d7, d7, d5
 801cde6:	ed81 7b02 	vstr	d7, [r1, #8]
 801cdea:	e798      	b.n	801cd1e <__kernel_rem_pio2+0x3ce>
 801cdec:	ed92 7b00 	vldr	d7, [r2]
 801cdf0:	ed92 5b02 	vldr	d5, [r2, #8]
 801cdf4:	3901      	subs	r1, #1
 801cdf6:	ee37 6b05 	vadd.f64	d6, d7, d5
 801cdfa:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cdfe:	ed82 6b00 	vstr	d6, [r2]
 801ce02:	ee37 7b05 	vadd.f64	d7, d7, d5
 801ce06:	ed82 7b02 	vstr	d7, [r2, #8]
 801ce0a:	e78d      	b.n	801cd28 <__kernel_rem_pio2+0x3d8>
 801ce0c:	ed33 6b02 	vldmdb	r3!, {d6}
 801ce10:	3c01      	subs	r4, #1
 801ce12:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ce16:	e78f      	b.n	801cd38 <__kernel_rem_pio2+0x3e8>
 801ce18:	eeb1 5b45 	vneg.f64	d5, d5
 801ce1c:	eeb1 6b46 	vneg.f64	d6, d6
 801ce20:	ed87 5b00 	vstr	d5, [r7]
 801ce24:	eeb1 7b47 	vneg.f64	d7, d7
 801ce28:	ed87 6b02 	vstr	d6, [r7, #8]
 801ce2c:	e790      	b.n	801cd50 <__kernel_rem_pio2+0x400>
 801ce2e:	bf00      	nop
 801ce30:	00000000 	.word	0x00000000
 801ce34:	41700000 	.word	0x41700000
 801ce38:	00000000 	.word	0x00000000
 801ce3c:	3e700000 	.word	0x3e700000
	...

0801ce48 <scalbn>:
 801ce48:	ee10 1a90 	vmov	r1, s1
 801ce4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ce50:	b98b      	cbnz	r3, 801ce76 <scalbn+0x2e>
 801ce52:	ee10 3a10 	vmov	r3, s0
 801ce56:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801ce5a:	4319      	orrs	r1, r3
 801ce5c:	d00a      	beq.n	801ce74 <scalbn+0x2c>
 801ce5e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801cf10 <scalbn+0xc8>
 801ce62:	4b37      	ldr	r3, [pc, #220]	@ (801cf40 <scalbn+0xf8>)
 801ce64:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ce68:	4298      	cmp	r0, r3
 801ce6a:	da0b      	bge.n	801ce84 <scalbn+0x3c>
 801ce6c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801cf18 <scalbn+0xd0>
 801ce70:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ce74:	4770      	bx	lr
 801ce76:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801ce7a:	4293      	cmp	r3, r2
 801ce7c:	d107      	bne.n	801ce8e <scalbn+0x46>
 801ce7e:	ee30 0b00 	vadd.f64	d0, d0, d0
 801ce82:	4770      	bx	lr
 801ce84:	ee10 1a90 	vmov	r1, s1
 801ce88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ce8c:	3b36      	subs	r3, #54	@ 0x36
 801ce8e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801ce92:	4290      	cmp	r0, r2
 801ce94:	dd0d      	ble.n	801ceb2 <scalbn+0x6a>
 801ce96:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801cf20 <scalbn+0xd8>
 801ce9a:	ee10 3a90 	vmov	r3, s1
 801ce9e:	eeb0 6b47 	vmov.f64	d6, d7
 801cea2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801cf28 <scalbn+0xe0>
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	fe27 7b05 	vselge.f64	d7, d7, d5
 801ceac:	ee27 0b06 	vmul.f64	d0, d7, d6
 801ceb0:	4770      	bx	lr
 801ceb2:	4418      	add	r0, r3
 801ceb4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801ceb8:	4298      	cmp	r0, r3
 801ceba:	dcec      	bgt.n	801ce96 <scalbn+0x4e>
 801cebc:	2800      	cmp	r0, #0
 801cebe:	dd0a      	ble.n	801ced6 <scalbn+0x8e>
 801cec0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801cec4:	ec53 2b10 	vmov	r2, r3, d0
 801cec8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801cecc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801ced0:	ec43 2b10 	vmov	d0, r2, r3
 801ced4:	4770      	bx	lr
 801ced6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801ceda:	da09      	bge.n	801cef0 <scalbn+0xa8>
 801cedc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801cf18 <scalbn+0xd0>
 801cee0:	ee10 3a90 	vmov	r3, s1
 801cee4:	eeb0 6b47 	vmov.f64	d6, d7
 801cee8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801cf30 <scalbn+0xe8>
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	e7db      	b.n	801cea8 <scalbn+0x60>
 801cef0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801cef4:	ec53 2b10 	vmov	r2, r3, d0
 801cef8:	3036      	adds	r0, #54	@ 0x36
 801cefa:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801cefe:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801cf02:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801cf38 <scalbn+0xf0>
 801cf06:	ec43 2b10 	vmov	d0, r2, r3
 801cf0a:	e7b1      	b.n	801ce70 <scalbn+0x28>
 801cf0c:	f3af 8000 	nop.w
 801cf10:	00000000 	.word	0x00000000
 801cf14:	43500000 	.word	0x43500000
 801cf18:	c2f8f359 	.word	0xc2f8f359
 801cf1c:	01a56e1f 	.word	0x01a56e1f
 801cf20:	8800759c 	.word	0x8800759c
 801cf24:	7e37e43c 	.word	0x7e37e43c
 801cf28:	8800759c 	.word	0x8800759c
 801cf2c:	fe37e43c 	.word	0xfe37e43c
 801cf30:	c2f8f359 	.word	0xc2f8f359
 801cf34:	81a56e1f 	.word	0x81a56e1f
 801cf38:	00000000 	.word	0x00000000
 801cf3c:	3c900000 	.word	0x3c900000
 801cf40:	ffff3cb0 	.word	0xffff3cb0
 801cf44:	00000000 	.word	0x00000000

0801cf48 <floor>:
 801cf48:	ee10 3a90 	vmov	r3, s1
 801cf4c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801cf50:	ee10 2a10 	vmov	r2, s0
 801cf54:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801cf58:	2913      	cmp	r1, #19
 801cf5a:	b530      	push	{r4, r5, lr}
 801cf5c:	4615      	mov	r5, r2
 801cf5e:	dc33      	bgt.n	801cfc8 <floor+0x80>
 801cf60:	2900      	cmp	r1, #0
 801cf62:	da18      	bge.n	801cf96 <floor+0x4e>
 801cf64:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801d028 <floor+0xe0>
 801cf68:	ee30 0b07 	vadd.f64	d0, d0, d7
 801cf6c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801cf70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf74:	dd0a      	ble.n	801cf8c <floor+0x44>
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	da50      	bge.n	801d01c <floor+0xd4>
 801cf7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cf7e:	4313      	orrs	r3, r2
 801cf80:	2200      	movs	r2, #0
 801cf82:	4293      	cmp	r3, r2
 801cf84:	4b2a      	ldr	r3, [pc, #168]	@ (801d030 <floor+0xe8>)
 801cf86:	bf08      	it	eq
 801cf88:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801cf8c:	4619      	mov	r1, r3
 801cf8e:	4610      	mov	r0, r2
 801cf90:	ec41 0b10 	vmov	d0, r0, r1
 801cf94:	e01f      	b.n	801cfd6 <floor+0x8e>
 801cf96:	4827      	ldr	r0, [pc, #156]	@ (801d034 <floor+0xec>)
 801cf98:	4108      	asrs	r0, r1
 801cf9a:	ea03 0400 	and.w	r4, r3, r0
 801cf9e:	4314      	orrs	r4, r2
 801cfa0:	d019      	beq.n	801cfd6 <floor+0x8e>
 801cfa2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801d028 <floor+0xe0>
 801cfa6:	ee30 0b07 	vadd.f64	d0, d0, d7
 801cfaa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801cfae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfb2:	ddeb      	ble.n	801cf8c <floor+0x44>
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	bfbe      	ittt	lt
 801cfb8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801cfbc:	410a      	asrlt	r2, r1
 801cfbe:	189b      	addlt	r3, r3, r2
 801cfc0:	ea23 0300 	bic.w	r3, r3, r0
 801cfc4:	2200      	movs	r2, #0
 801cfc6:	e7e1      	b.n	801cf8c <floor+0x44>
 801cfc8:	2933      	cmp	r1, #51	@ 0x33
 801cfca:	dd05      	ble.n	801cfd8 <floor+0x90>
 801cfcc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801cfd0:	d101      	bne.n	801cfd6 <floor+0x8e>
 801cfd2:	ee30 0b00 	vadd.f64	d0, d0, d0
 801cfd6:	bd30      	pop	{r4, r5, pc}
 801cfd8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801cfdc:	f04f 30ff 	mov.w	r0, #4294967295
 801cfe0:	40e0      	lsrs	r0, r4
 801cfe2:	4210      	tst	r0, r2
 801cfe4:	d0f7      	beq.n	801cfd6 <floor+0x8e>
 801cfe6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801d028 <floor+0xe0>
 801cfea:	ee30 0b07 	vadd.f64	d0, d0, d7
 801cfee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801cff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cff6:	ddc9      	ble.n	801cf8c <floor+0x44>
 801cff8:	2b00      	cmp	r3, #0
 801cffa:	da02      	bge.n	801d002 <floor+0xba>
 801cffc:	2914      	cmp	r1, #20
 801cffe:	d103      	bne.n	801d008 <floor+0xc0>
 801d000:	3301      	adds	r3, #1
 801d002:	ea22 0200 	bic.w	r2, r2, r0
 801d006:	e7c1      	b.n	801cf8c <floor+0x44>
 801d008:	2401      	movs	r4, #1
 801d00a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801d00e:	fa04 f101 	lsl.w	r1, r4, r1
 801d012:	440a      	add	r2, r1
 801d014:	42aa      	cmp	r2, r5
 801d016:	bf38      	it	cc
 801d018:	191b      	addcc	r3, r3, r4
 801d01a:	e7f2      	b.n	801d002 <floor+0xba>
 801d01c:	2200      	movs	r2, #0
 801d01e:	4613      	mov	r3, r2
 801d020:	e7b4      	b.n	801cf8c <floor+0x44>
 801d022:	bf00      	nop
 801d024:	f3af 8000 	nop.w
 801d028:	8800759c 	.word	0x8800759c
 801d02c:	7e37e43c 	.word	0x7e37e43c
 801d030:	bff00000 	.word	0xbff00000
 801d034:	000fffff 	.word	0x000fffff

0801d038 <_init>:
 801d038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d03a:	bf00      	nop
 801d03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d03e:	bc08      	pop	{r3}
 801d040:	469e      	mov	lr, r3
 801d042:	4770      	bx	lr

0801d044 <_fini>:
 801d044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d046:	bf00      	nop
 801d048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d04a:	bc08      	pop	{r3}
 801d04c:	469e      	mov	lr, r3
 801d04e:	4770      	bx	lr
